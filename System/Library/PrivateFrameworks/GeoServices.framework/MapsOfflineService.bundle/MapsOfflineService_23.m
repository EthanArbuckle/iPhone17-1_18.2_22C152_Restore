uint64_t *sub_A144F4(uint64_t *result, _DWORD *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  __int16 v27;

  v4 = *a2;
  v5 = *a3;
  if (*a2 <= *(_DWORD *)result)
  {
    if (v5 > v4)
    {
      v9 = a2[2];
      v10 = *(void *)a2;
      v11 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v11;
      *(void *)a3 = v10;
      *((_WORD *)a3 + 4) = v9;
      if (*a2 > *(_DWORD *)result)
      {
        v12 = *((_DWORD *)result + 2);
        v13 = *result;
        v14 = *((_WORD *)a2 + 4);
        *result = *(void *)a2;
        *((_WORD *)result + 4) = v14;
        *(void *)a2 = v13;
        *((_WORD *)a2 + 4) = v12;
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *result;
      v8 = *((_WORD *)a3 + 4);
      *result = *(void *)a3;
      *((_WORD *)result + 4) = v8;
LABEL_9:
      *(void *)a3 = v7;
      *((_WORD *)a3 + 4) = v6;
      goto LABEL_10;
    }
    v15 = *((_DWORD *)result + 2);
    v16 = *result;
    v17 = *((_WORD *)a2 + 4);
    *result = *(void *)a2;
    *((_WORD *)result + 4) = v17;
    *(void *)a2 = v16;
    *((_WORD *)a2 + 4) = v15;
    if (*a3 > (int)v16)
    {
      v6 = a2[2];
      v7 = *(void *)a2;
      v18 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 > *a3)
  {
    v19 = a3[2];
    v20 = *(void *)a3;
    v21 = *(_WORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *((_WORD *)a3 + 4) = v21;
    *(void *)a4 = v20;
    *(_WORD *)(a4 + 8) = v19;
    if (*a3 > *a2)
    {
      v22 = a2[2];
      v23 = *(void *)a2;
      v24 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v24;
      *(void *)a3 = v23;
      *((_WORD *)a3 + 4) = v22;
      if (*a2 > *(_DWORD *)result)
      {
        v25 = *((_DWORD *)result + 2);
        v26 = *result;
        v27 = *((_WORD *)a2 + 4);
        *result = *(void *)a2;
        *((_WORD *)result + 4) = v27;
        *(void *)a2 = v26;
        *((_WORD *)a2 + 4) = v25;
      }
    }
  }
  return result;
}

void sub_A14674(void *a1)
{
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  v8 = (void **)a1[3];
  v7 = (void **)(a1 + 3);
  v6 = v8;
  if (v8)
  {
    sub_9F59BC((uint64_t)v7, v6);
    v9 = *v7;
    operator delete(v9);
  }
}

uint64_t sub_A14704(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[144 * v3];
  v19 = &v7[144 * v6];
  sub_9F7CDC(v18, a2);
  uint64_t v8 = v18 + 144;
  v10 = (void *)*a1;
  v9 = (void *)a1[1];
  if (v9 == (void *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v18 + v11 * 8;
      v13 = &v9[v11];
      int v14 = v9[v11 - 18];
      *(void *)(v12 - 128) = 0;
      *(void *)(v12 - 120) = 0;
      *(void *)(v12 - 136) = 0;
      *(_DWORD *)(v12 - 144) = v14;
      *(_OWORD *)(v12 - 136) = *(_OWORD *)&v9[v11 - 17];
      *(void *)(v12 - 120) = v9[v11 - 15];
      *(v13 - 17) = 0;
      *(v13 - 16) = 0;
      *(v13 - 15) = 0;
      *(void *)(v12 - 112) = 0;
      *(void *)(v12 - 104) = 0;
      *(void *)(v12 - 96) = 0;
      *(_OWORD *)(v12 - 112) = *(_OWORD *)&v9[v11 - 14];
      *(void *)(v12 - 96) = v9[v11 - 12];
      *(v13 - 14) = 0;
      *(v13 - 13) = 0;
      *(v13 - 12) = 0;
      *(void *)(v12 - 88) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(_OWORD *)(v12 - 88) = *(_OWORD *)&v9[v11 - 11];
      *(void *)(v12 - 72) = v9[v11 - 9];
      *(v13 - 11) = 0;
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 48) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)&v9[v11 - 8];
      *(void *)(v12 - 48) = v9[v11 - 6];
      *(v13 - 8) = 0;
      *(v13 - 7) = 0;
      *(v13 - 6) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v9[v11 - 5];
      *(void *)(v12 - 24) = v9[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      uint64_t v15 = v9[v11 - 2];
      *(void *)(v12 - 11) = *(void *)((char *)&v9[v11 - 1] - 3);
      *(void *)(v12 - 16) = v15;
      v11 -= 18;
    }
    while (&v9[v11] != v10);
    v16 = (void *)*a1;
    v9 = (void *)a1[1];
    *a1 = v18 + v11 * 8;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (v9 != v16)
    {
      do
        v9 = sub_9BEAA8(v9 - 18);
      while (v9 != v16);
      v9 = v16;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v18 + 144;
}

void sub_A1493C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A0F5CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A14950(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v3 = (a1->i64[1] - a1->i64[0]) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  v21 = a1 + 1;
  if (v7)
  {
    if (v7 >> 58) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  __p = v8;
  v19.i64[0] = (uint64_t)&v8[64 * v3];
  v20 = &v8[64 * v7];
  sub_9F7A40(v19.i64[0], a2);
  uint64_t v9 = v19.i64[0];
  uint64_t v10 = v19.i64[0] + 64;
  v19.i64[1] = v19.i64[0] + 64;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      v9 -= 64;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 64);
      v11 -= 64;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = *(void *)(v11 + 16);
      *(void *)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v11 + 24);
      *(void *)(v9 + 40) = *(void *)(v11 + 40);
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0;
      uint64_t v14 = *(void *)(v11 + 48);
      *(void *)(v9 + 54) = *(void *)(v11 + 54);
      *(void *)(v9 + 48) = v14;
    }
    while (v11 != v12);
    int64x2_t v15 = *a1;
    uint64_t v10 = v19.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  v20 = v16;
  __p = (void *)v15.i64[0];
  sub_A0F7E4((uint64_t)&__p, v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_A14AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A0F7AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A14AD8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[176 * v3];
  int64x2_t v19 = &v7[176 * v6];
  sub_9F761C(v18, a2);
  uint64_t v8 = v18 + 176;
  uint64_t v9 = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if (v10 == (void *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v18 + v11 * 8;
      long long v13 = &v10[v11];
      long long v14 = *(_OWORD *)&v10[v11 - 22];
      *(void *)(v12 - 162) = *(void *)((char *)&v10[v11 - 20] - 2);
      *(_OWORD *)(v12 - 176) = v14;
      *(void *)(v12 - 144) = 0;
      *(void *)(v12 - 136) = 0;
      *(void *)(v12 - 152) = 0;
      *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 19];
      *(void *)(v12 - 136) = v10[v11 - 17];
      *(v13 - 19) = 0;
      *(v13 - 18) = 0;
      *(v13 - 17) = 0;
      *(void *)(v12 - 128) = 0;
      *(void *)(v12 - 120) = 0;
      *(void *)(v12 - 112) = 0;
      *(_OWORD *)(v12 - 128) = *(_OWORD *)&v10[v11 - 16];
      *(void *)(v12 - 112) = v10[v11 - 14];
      *(v13 - 16) = 0;
      *(v13 - 15) = 0;
      *(v13 - 14) = 0;
      *(void *)(v12 - 104) = 0;
      *(void *)(v12 - 96) = 0;
      *(void *)(v12 - 88) = 0;
      *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 13];
      *(void *)(v12 - 88) = v10[v11 - 11];
      *(v13 - 13) = 0;
      *(v13 - 12) = 0;
      *(v13 - 11) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 10];
      *(void *)(v12 - 64) = v10[v11 - 8];
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(v13 - 8) = 0;
      uint64_t v15 = v10[v11 - 7];
      *(void *)(v12 - 51) = *(void *)((char *)&v10[v11 - 6] - 3);
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 56) = v15;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 5];
      *(void *)(v12 - 24) = v10[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(_OWORD *)(v12 - 16) = *(_OWORD *)&v10[v11 - 2];
      v11 -= 22;
    }
    while (&v10[v11] != v9);
    v16 = (void *)*a1;
    uint64_t v10 = (void *)a1[1];
    *a1 = v18 + v11 * 8;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (v10 != v16)
    {
      do
      {
        v10 -= 22;
        sub_9F58F0(v20, v10);
      }
      while (v10 != v16);
      uint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v18 + 176;
}

void sub_A14D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A14D44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A14D44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 176;
    sub_9F58F0(v4, (void *)(i - 176));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A14D9C(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xE21A291C077975B9 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x3BCBADC7F10D14) {
    sub_2E00();
  }
  if (0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xE21A291C077975B9 * (((unsigned char *)a1[2] - v4) >> 3) >= 0x1DE5D6E3F8868ALL) {
    unint64_t v6 = 0x3BCBADC7F10D14;
  }
  if (v6 > 0x3BCBADC7F10D14) {
    sub_188D718();
  }
  uint64_t v8 = 1096 * v6;
  uint64_t v9 = (char *)operator new(1096 * v6);
  uint64_t v10 = &v9[1096 * v5];
  uint64_t v11 = &v9[v8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v10 + 272) = 4;
  uint64_t v12 = v10 + 1096;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      long long v14 = (long long *)&v10[v13 - 1096];
      uint64_t v15 = (long long *)&v3[v13 - 1096];
      uint64_t v16 = *(unsigned int *)&v3[v13 - 8];
      *(_DWORD *)&v10[v13 - 8] = v16;
      if (v16)
      {
        sub_9C16F4(v16, v15, (uint64_t)v14);
      }
      else
      {
        long long v17 = *v15;
        long long v18 = *(_OWORD *)&v3[v13 - 1080];
        long long v19 = *(_OWORD *)&v3[v13 - 1064];
        *(void *)&v10[v13 - 1050] = *(void *)&v3[v13 - 1050];
        *(_OWORD *)&v10[v13 - 1080] = v18;
        *(_OWORD *)&v10[v13 - 1064] = v19;
        *long long v14 = v17;
        int v20 = v3[v13 - 1036];
        v10[v13 - 1036] = v20;
        if (v20) {
          *(_DWORD *)&v10[v13 - 1040] = *(_DWORD *)&v3[v13 - 1040];
        }
      }
      v13 -= 1096;
    }
    while (&v3[v13] != v4);
    uint64_t v3 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v10[v13];
    a1[1] = v12;
    a1[2] = v11;
    if (v21 == v3)
    {
      uint64_t v3 = v21;
      if (!v21) {
        return v10 + 1096;
      }
      goto LABEL_27;
    }
    uint64_t v22 = (uint64_t)(v21 - 1064);
    do
    {
      int v24 = *(_DWORD *)(v22 + 1056);
      if (v24 == 3)
      {
        sub_3AFFFC(v22);
      }
      else if (v24 == 1)
      {
        v25 = *(void **)(v22 + 16);
        if (v25)
        {
          *(void *)(v22 + 24) = v25;
          operator delete(v25);
        }
      }
      else if (!v24 && *(unsigned char *)(v22 + 28))
      {
        *(unsigned char *)(v22 + 28) = 0;
      }
      v23 = (char *)(v22 - 32);
      v22 -= 1096;
    }
    while (v23 != v3);
  }
  if (v3) {
LABEL_27:
  }
    operator delete(v3);
  return v10 + 1096;
}

uint64_t sub_A14FB4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[176 * v3];
  long long v19 = &v7[176 * v6];
  sub_9F761C(v18, a2);
  uint64_t v8 = v18 + 176;
  uint64_t v9 = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if (v10 == (void *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v18 + v11 * 8;
      uint64_t v13 = &v10[v11];
      long long v14 = *(_OWORD *)&v10[v11 - 22];
      *(void *)(v12 - 162) = *(void *)((char *)&v10[v11 - 20] - 2);
      *(_OWORD *)(v12 - 176) = v14;
      *(void *)(v12 - 144) = 0;
      *(void *)(v12 - 136) = 0;
      *(void *)(v12 - 152) = 0;
      *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 19];
      *(void *)(v12 - 136) = v10[v11 - 17];
      *(v13 - 19) = 0;
      *(v13 - 18) = 0;
      *(v13 - 17) = 0;
      *(void *)(v12 - 128) = 0;
      *(void *)(v12 - 120) = 0;
      *(void *)(v12 - 112) = 0;
      *(_OWORD *)(v12 - 128) = *(_OWORD *)&v10[v11 - 16];
      *(void *)(v12 - 112) = v10[v11 - 14];
      *(v13 - 16) = 0;
      *(v13 - 15) = 0;
      *(v13 - 14) = 0;
      *(void *)(v12 - 104) = 0;
      *(void *)(v12 - 96) = 0;
      *(void *)(v12 - 88) = 0;
      *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 13];
      *(void *)(v12 - 88) = v10[v11 - 11];
      *(v13 - 13) = 0;
      *(v13 - 12) = 0;
      *(v13 - 11) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 10];
      *(void *)(v12 - 64) = v10[v11 - 8];
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(v13 - 8) = 0;
      uint64_t v15 = v10[v11 - 7];
      *(void *)(v12 - 51) = *(void *)((char *)&v10[v11 - 6] - 3);
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 56) = v15;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 5];
      *(void *)(v12 - 24) = v10[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(_OWORD *)(v12 - 16) = *(_OWORD *)&v10[v11 - 2];
      v11 -= 22;
    }
    while (&v10[v11] != v9);
    uint64_t v16 = (void *)*a1;
    uint64_t v10 = (void *)a1[1];
    *a1 = v18 + v11 * 8;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (v10 != v16)
    {
      do
      {
        v10 -= 22;
        sub_9F58F0(v20, v10);
      }
      while (v10 != v16);
      uint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v18 + 176;
}

void sub_A1520C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A14D44((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_A15220(char **a1, _DWORD *a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xD37A6F4DE9BD37A7 * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - v4) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - v4) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  if (v6 > 0x1642C8590B21642) {
    sub_188D718();
  }
  uint64_t v8 = 184 * v6;
  uint64_t v9 = (char *)operator new(184 * v6);
  uint64_t v10 = &v9[184 * v5];
  *(_DWORD *)uint64_t v10 = *a2;
  uint64_t v11 = &v9[v8];
  *((void *)v10 + 1) = 0x8000000080000000;
  *((_WORD *)v10 + 8) = 0;
  *(void *)(v10 + 20) = 0x8000000080000000;
  *((_WORD *)v10 + 14) = 0;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_DWORD *)v10 + 32) = -1;
  v10[132] = 0;
  *((_DWORD *)v10 + 34) = 0;
  v10[140] = 0;
  *((void *)v10 + 18) = 0;
  *((void *)v10 + 19) = 0;
  v10[168] = 0;
  *((void *)v10 + 20) = 0;
  uint64_t v12 = v10 + 184;
  *((void *)v10 + 22) = 0x3FF0000000000000;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3) {
      return v12;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  do
  {
    long long v14 = &v10[v13];
    uint64_t v15 = &v3[v13];
    *((_DWORD *)v14 - 46) = *(_DWORD *)&v3[v13 - 184];
    long long v16 = *(_OWORD *)&v3[v13 - 176];
    *(void *)(v14 - 162) = *(void *)&v3[v13 - 162];
    *((_OWORD *)v14 - 11) = v16;
    *(_OWORD *)(v14 - 152) = *(_OWORD *)&v3[v13 - 152];
    *((void *)v14 - 17) = *(void *)&v3[v13 - 136];
    *((void *)v15 - 19) = 0;
    *((void *)v15 - 18) = 0;
    long long v17 = *(_OWORD *)&v3[v13 - 128];
    *((void *)v15 - 17) = 0;
    *((_OWORD *)v14 - 8) = v17;
    *((void *)v14 - 14) = *(void *)&v3[v13 - 112];
    *((void *)v15 - 16) = 0;
    *((void *)v15 - 15) = 0;
    *((void *)v15 - 14) = 0;
    *(_OWORD *)(v14 - 104) = *(_OWORD *)&v3[v13 - 104];
    *((void *)v14 - 11) = *(void *)&v3[v13 - 88];
    *((void *)v15 - 13) = 0;
    *((void *)v15 - 12) = 0;
    *((void *)v15 - 11) = 0;
    *((_OWORD *)v14 - 5) = *(_OWORD *)&v3[v13 - 80];
    *((void *)v14 - 8) = *(void *)&v3[v13 - 64];
    *((void *)v15 - 10) = 0;
    *((void *)v15 - 9) = 0;
    *((void *)v15 - 8) = 0;
    uint64_t v18 = *(void *)&v3[v13 - 56];
    *(void *)(v14 - 51) = *(void *)&v3[v13 - 51];
    *((void *)v14 - 7) = v18;
    *(_OWORD *)(v14 - 40) = *(_OWORD *)&v3[v13 - 40];
    *((void *)v14 - 3) = *(void *)&v3[v13 - 24];
    *((void *)v15 - 5) = 0;
    *((void *)v15 - 4) = 0;
    *((void *)v15 - 3) = 0;
    *((_OWORD *)v14 - 1) = *(_OWORD *)&v3[v13 - 16];
    v13 -= 184;
  }
  while (&v3[v13] != v4);
  long long v19 = *a1;
  uint64_t v3 = a1[1];
  *a1 = &v10[v13];
  a1[1] = v12;
  a1[2] = v11;
  if (v3 != v19)
  {
    do
    {
      v3 -= 184;
      sub_A00E84((uint64_t)(a1 + 2), v3);
    }
    while (v3 != v19);
    uint64_t v3 = v19;
  }
  if (v3) {
LABEL_14:
  }
    operator delete(v3);
  return v12;
}

uint64_t sub_A15474(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 184;
    sub_A00E84(v4, (void *)(i - 184));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A154CC(char **a1, long long *a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(184 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = &v7[184 * v3];
  long long v19 = &v7[184 * v6];
  *(_DWORD *)uint64_t v18 = 0;
  sub_9F761C((uint64_t)(v18 + 8), a2);
  uint64_t v8 = v18 + 184;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v18[v11];
      uint64_t v13 = &v10[v11];
      *((_DWORD *)v12 - 46) = *(_DWORD *)&v10[v11 - 184];
      long long v14 = *(_OWORD *)&v10[v11 - 176];
      *(void *)(v12 - 162) = *(void *)&v10[v11 - 162];
      *((_OWORD *)v12 - 11) = v14;
      *((void *)v12 - 18) = 0;
      *((void *)v12 - 17) = 0;
      *((void *)v12 - 19) = 0;
      *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 152];
      *((void *)v12 - 17) = *(void *)&v10[v11 - 136];
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 17) = 0;
      *((void *)v12 - 16) = 0;
      *((void *)v12 - 15) = 0;
      *((void *)v12 - 14) = 0;
      *((_OWORD *)v12 - 8) = *(_OWORD *)&v10[v11 - 128];
      *((void *)v12 - 14) = *(void *)&v10[v11 - 112];
      *((void *)v13 - 16) = 0;
      *((void *)v13 - 15) = 0;
      *((void *)v13 - 14) = 0;
      *((void *)v12 - 13) = 0;
      *((void *)v12 - 12) = 0;
      *((void *)v12 - 11) = 0;
      *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 104];
      *((void *)v12 - 11) = *(void *)&v10[v11 - 88];
      *((void *)v13 - 13) = 0;
      *((void *)v13 - 12) = 0;
      *((void *)v13 - 11) = 0;
      *((void *)v12 - 10) = 0;
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 8) = 0;
      *((_OWORD *)v12 - 5) = *(_OWORD *)&v10[v11 - 80];
      *((void *)v12 - 8) = *(void *)&v10[v11 - 64];
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      *((void *)v13 - 8) = 0;
      uint64_t v15 = *(void *)&v10[v11 - 56];
      *(void *)(v12 - 51) = *(void *)&v10[v11 - 51];
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 5) = 0;
      *((void *)v12 - 7) = v15;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 40];
      *((void *)v12 - 3) = *(void *)&v10[v11 - 24];
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((_OWORD *)v12 - 1) = *(_OWORD *)&v10[v11 - 16];
      v11 -= 184;
    }
    while (&v10[v11] != v9);
    long long v16 = *a1;
    uint64_t v10 = a1[1];
    *a1 = &v18[v11];
    a1[1] = v8;
    a1[2] = v19;
    if (v10 != v16)
    {
      do
      {
        v10 -= 184;
        sub_A00E84(v20, v10);
      }
      while (v10 != v16);
      uint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v18 + 184;
}

void sub_A15730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A15474((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_A15744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_20EB6B0;
  *(_DWORD *)(a1 + 16) = -1;
  unint64_t v6 = (void *)(a2 + 4136);
  uint64_t v7 = sub_A104E8((void *)(a2 + 4136), *(void *)(a3 + 28), *(_DWORD *)(a3 + 48), *(_DWORD *)(a3 + 36));
  int v9 = v8;
  uint64_t v10 = sub_A104E8(v6, *(void *)(a3 + 28), *(_DWORD *)(a3 + 52), *(_DWORD *)(a3 + 36));
  int v12 = v11;
  unsigned int v13 = *(_DWORD *)(a3 + 48);
  long long v14 = (int *)sub_A11094(v6, *(void *)(a3 + 28));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0)
  {
    int v17 = *(unsigned __int16 *)(sub_A10764((unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16)), v13)+ 12);
    if (v7 != v10) {
      goto LABEL_10;
    }
  }
  else
  {
    int v17 = *(unsigned __int16 *)(sub_A10764(0, v13) + 12);
    if (v7 != v10)
    {
LABEL_10:
      result = (int *)sub_369F8C(*(void *)(a2 + 4184) + 24, __ROR8__(v7, 32), 0, "trip");
      v25 = (unsigned __int16 *)((char *)result - *result);
      if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
        int v27 = *(int *)((char *)result + v26) - 1;
      }
      else {
        int v27 = -1;
      }
      goto LABEL_16;
    }
  }
  if (v9 != v12) {
    goto LABEL_10;
  }
  unint64_t v18 = *(void *)(a3 + 28);
  unsigned int v19 = *(_DWORD *)(a3 + 48);
  uint64_t v20 = (int *)sub_A11094(v6, v18);
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
    v23 = (unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
  }
  else {
    v23 = 0;
  }
  result = (int *)sub_A10764(v23, v19);
  int v27 = *((unsigned __int16 *)result + 6);
LABEL_16:
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v17;
  *(_DWORD *)(a1 + 16) = v27;
  return result;
}

char *sub_A158F4(uint64_t a1, long long *a2, long long *a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  result = *(char **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 6)
  {
    if (result)
    {
      for (uint64_t i = *(char **)(a1 + 8); i != result; i -= 64)
      {
        if (*(i - 4)) {
          *(i - 4) = 0;
        }
      }
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 58) {
      goto LABEL_51;
    }
    uint64_t v11 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v11 = __sz;
    }
    BOOL v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 58) {
LABEL_51:
    }
      sub_2E00();
    unint64_t v14 = v13 << 6;
    result = (char *)operator new(v13 << 6);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    for (*(void *)(a1 + 16) = &result[v14]; v6 != a3; unint64_t v6 = (long long *)((char *)v6 + 1096))
    {
      long long v15 = *v6;
      long long v16 = v6[1];
      long long v17 = v6[2];
      *(void *)(result + 46) = *(void *)((char *)v6 + 46);
      *((_OWORD *)result + 1) = v16;
      *((_OWORD *)result + 2) = v17;
      *(_OWORD *)result = v15;
      int v18 = *((unsigned __int8 *)v6 + 60);
      result[60] = v18;
      if (v18) {
        *((_DWORD *)result + 14) = *((_DWORD *)v6 + 14);
      }
      result += 64;
    }
LABEL_50:
    *(void *)(a1 + 8) = result;
    return result;
  }
  unsigned int v19 = *(char **)(a1 + 8);
  unint64_t v20 = (v19 - result) >> 6;
  if (v20 >= __sz)
  {
    if (a2 != a3)
    {
      int v27 = result + 60;
      do
      {
        long long v28 = *v6;
        long long v29 = v6[1];
        long long v30 = v6[2];
        *(void *)(v27 - 14) = *(void *)((char *)v6 + 46);
        *(_OWORD *)(v27 - 28) = v30;
        *(_OWORD *)(v27 - 44) = v29;
        *(_OWORD *)(v27 - 60) = v28;
        if (*((unsigned char *)v6 + 60))
        {
          int v31 = *((_DWORD *)v6 + 14);
          if (!*v27) {
            *int v27 = 1;
          }
          *((_DWORD *)v27 - 1) = v31;
        }
        else if (*v27)
        {
          *int v27 = 0;
        }
        result += 64;
        v27 += 64;
        unint64_t v6 = (long long *)((char *)v6 + 1096);
      }
      while (v6 != a3);
      unsigned int v19 = *(char **)(a1 + 8);
    }
    while (v19 != result)
    {
      if (*(v19 - 4)) {
        *(v19 - 4) = 0;
      }
      v19 -= 64;
    }
    goto LABEL_50;
  }
  v21 = (long long *)((char *)a2 + 1096 * v20);
  if (v19 != result)
  {
    uint64_t v22 = result + 60;
    do
    {
      long long v23 = *v6;
      long long v24 = v6[1];
      long long v25 = v6[2];
      *(void *)(v22 - 14) = *(void *)((char *)v6 + 46);
      *(_OWORD *)(v22 - 28) = v25;
      *(_OWORD *)(v22 - 44) = v24;
      *(_OWORD *)(v22 - 60) = v23;
      if (*((unsigned char *)v6 + 60))
      {
        int v26 = *((_DWORD *)v6 + 14);
        if (!*v22) {
          *uint64_t v22 = 1;
        }
        *((_DWORD *)v22 - 1) = v26;
      }
      else if (*v22)
      {
        *uint64_t v22 = 0;
      }
      v22 += 64;
      unint64_t v6 = (long long *)((char *)v6 + 1096);
    }
    while (v6 != v21);
    result = *(char **)(a1 + 8);
  }
  v32 = result;
  if (v21 != a3)
  {
    v32 = result;
    v33 = result;
    do
    {
      long long v34 = *v21;
      long long v35 = v21[1];
      long long v36 = v21[2];
      *(void *)((char *)v33 + 46) = *(void *)((char *)v21 + 46);
      v33[1] = v35;
      v33[2] = v36;
      _OWORD *v33 = v34;
      int v37 = *((unsigned __int8 *)v21 + 60);
      *((unsigned char *)v33 + 60) = v37;
      if (v37) {
        *((_DWORD *)v33 + 14) = *((_DWORD *)v21 + 14);
      }
      v32 += 64;
      v21 = (long long *)((char *)v21 + 1096);
      v33 += 4;
    }
    while (v21 != a3);
  }
  *(void *)(a1 + 8) = v32;
  return result;
}

__n128 *sub_A15B94(char **a1, __n128 *__src, __n128 *a3)
{
  unint64_t v4 = __src;
  unint64_t v6 = (__n128 *)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v7)
  {
    long long v15 = (__n128 *)*a1;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - *a1) >> 3) + 1;
    if (v16 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v15) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v16;
    }
    v39 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x666666666666666) {
        sub_188D718();
      }
      unsigned int v19 = (__n128 *)operator new(40 * v18);
    }
    else
    {
      unsigned int v19 = 0;
    }
    long long v35 = v19;
    long long v36 = &v19->n128_i8[8 * (((char *)v4 - (char *)v15) >> 3)];
    __dst = v36;
    v38 = (char *)v19 + 40 * v18;
    sub_99C440((uint64_t)&v35, a3);
    uint64_t v22 = v36;
    long long v23 = (__n128 *)*a1;
    long long v24 = v36;
    if (*a1 != (char *)v4)
    {
      long long v25 = v4;
      int v26 = v36;
      do
      {
        long long v27 = *(long long *)((char *)&v25[-3] + 8);
        long long v28 = *(long long *)((char *)&v25[-2] + 8);
        long long v24 = v26 - 40;
        *(v26 - 8) = v25[-1].n128_i8[8];
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        long long v25 = (__n128 *)((char *)v25 - 40);
        v26 -= 40;
      }
      while (v25 != v23);
    }
    long long v36 = v24;
    long long v29 = (__n128 *)a1[1];
    long long v30 = (char *)__dst;
    int64_t v31 = (char *)v29 - (char *)v4;
    if (v29 != v4)
    {
      memmove(__dst, v4, v31 - 7);
      long long v24 = v36;
      unint64_t v4 = (__n128 *)a1[1];
    }
    v32 = (__n128 *)*a1;
    *a1 = v24;
    a1[1] = &v30[v31];
    v33 = a1[2];
    a1[2] = v38;
    __dst = v4;
    v38 = v33;
    long long v35 = v32;
    long long v36 = (char *)v32;
    if (v4 != v32) {
      __dst = (char *)v32 + ((char *)v4 - (char *)v32 - 40) % 0x28uLL;
    }
    if (v32) {
      operator delete(v32);
    }
    return (__n128 *)v22;
  }
  else if (__src == v6)
  {
    __n128 v20 = *a3;
    __n128 v21 = a3[1];
    __src[2].n128_u64[0] = a3[2].n128_u64[0];
    *__src = v20;
    __src[1] = v21;
    a1[1] = &__src[2].n128_i8[8];
  }
  else
  {
    uint64_t v8 = (__n128 *)((char *)__src + 40);
    int v9 = &v6[-3].n128_i8[8];
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0x28)
    {
      do
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *((_OWORD *)v9 + 1);
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *(_OWORD *)uint64_t v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v9 += 40;
        v10 += 40;
      }
      while (v9 < (char *)v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, (char *)v6 - (char *)v8 - 7);
    }
    __n128 v13 = *a3;
    __n128 v14 = a3[1];
    v4[2].n128_u8[0] = a3[2].n128_u8[0];
    __n128 *v4 = v13;
    v4[1] = v14;
  }
  return v4;
}

void sub_A15E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __n128 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __n128 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void *sub_A15E60(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x3BCBADC7F10D15) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(1096 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[1096 * a3];
    a1[1] = sub_A15F38(v4, a2, a2 + 1096 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_A15F0C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ABCF0((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A15F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1088) = *(_DWORD *)(a2 + v7 + 1088);
      uint64_t v10 = *(unsigned int *)(a2 + v7 + 1088);
      if (v10)
      {
        sub_8EC504(v10, (long long *)v9, v8);
      }
      else
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *(_OWORD *)(v9 + 16);
        long long v13 = *(_OWORD *)(v9 + 32);
        *(void *)(v8 + 46) = *(void *)(v9 + 46);
        *(_OWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)uint64_t v8 = v11;
        int v14 = *(unsigned __int8 *)(v9 + 60);
        *(unsigned char *)(v8 + 60) = v14;
        if (v14) {
          *(_DWORD *)(a4 + v7 + 56) = *(_DWORD *)(a2 + v7 + 56);
        }
      }
      v7 += 1096;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_A15FE4(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20ADF04(v1 + v2);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_A16000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(long long **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (a2 - *(void *)a1) / 120;
  uint64_t v8 = (long long *)(*(void *)a1 + 120 * v7);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v6 >= v9)
  {
    unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v16 > 0x222222222222222) {
      sub_2E00();
    }
    unint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x111111111111111) {
      unint64_t v18 = 0x222222222222222;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v32 = a1 + 16;
    if (v18)
    {
      if (v18 > 0x222222222222222) {
        sub_188D718();
      }
      unsigned int v19 = (char *)operator new(120 * v18);
    }
    else
    {
      unsigned int v19 = 0;
    }
    __p = v19;
    long long v29 = &v19[120 * v7];
    long long v30 = v29;
    int64_t v31 = &v19[120 * v18];
    sub_A1650C((uint64_t)&__p, (long long *)a3);
    uint64_t v8 = sub_A167A8((long long **)a1, &__p, v8);
    long long v24 = v29;
    for (uint64_t i = v30; v30 != v24; uint64_t i = v30)
    {
      long long v30 = i - 120;
      sub_8EC658((void *)i - 15);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (v8 != (long long *)v6)
    {
      uint64_t v10 = (char *)v8 + 120;
      uint64_t v11 = v6 - 120;
      if (v6 < 0x78)
      {
        *(void *)(a1 + 8) = v6;
        if ((char *)v6 == v10)
        {
LABEL_26:
          sub_A16338((uint64_t)v8, (long long *)a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 120;
        uint64_t v13 = *(void *)(a1 + 8);
        do
        {
          long long v14 = *(_OWORD *)v12;
          *(_DWORD *)(v13 + 16) = *(_DWORD *)(v12 + 16);
          *(_OWORD *)uint64_t v13 = v14;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 40) = 0;
          *(void *)(v13 + 24) = 0;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)(v12 + 24);
          *(void *)(v13 + 40) = *(void *)(v12 + 40);
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          *(void *)(v12 + 24) = 0;
          *(_DWORD *)(v13 + 48) = *(_DWORD *)(v12 + 48);
          *(void *)(v13 + 64) = 0;
          *(void *)(v13 + 72) = 0;
          *(void *)(v13 + 56) = 0;
          *(_OWORD *)(v13 + 56) = *(_OWORD *)(v12 + 56);
          *(void *)(v13 + 72) = *(void *)(v12 + 72);
          *(void *)(v12 + 56) = 0;
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 72) = 0;
          uint64_t v15 = *(void *)(v12 + 80);
          *(_DWORD *)(v13 + 88) = *(_DWORD *)(v12 + 88);
          *(void *)(v13 + 80) = v15;
          *(void *)(v13 + 104) = 0;
          *(void *)(v13 + 112) = 0;
          *(void *)(v13 + 96) = 0;
          *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 96);
          *(void *)(v13 + 112) = *(void *)(v12 + 112);
          *(void *)(v12 + 96) = 0;
          *(void *)(v12 + 104) = 0;
          *(void *)(v12 + 112) = 0;
          v13 += 120;
          v12 += 120;
        }
        while (v12 < v6);
        *(void *)(a1 + 8) = v13;
        if ((char *)v6 == v10) {
          goto LABEL_26;
        }
      }
      uint64_t v25 = 8 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v26 = (uint64_t)v5 + 120 * v7 - 120;
      do
      {
        sub_A16338(v11, (long long *)(v26 + v25));
        v11 -= 120;
        v25 -= 120;
      }
      while (v25);
      goto LABEL_26;
    }
    long long v20 = *(_OWORD *)a3;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    *uint64_t v8 = v20;
    __n128 v21 = (char *)v5 + 120 * v7;
    *((void *)v21 + 4) = 0;
    *((void *)v21 + 5) = 0;
    *((void *)v21 + 3) = 0;
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)v21 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v21 + 12) = *(_DWORD *)(a3 + 48);
    *((void *)v21 + 8) = 0;
    *((void *)v21 + 9) = 0;
    *((void *)v21 + 7) = 0;
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(a3 + 56);
    *((void *)v21 + 9) = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    uint64_t v22 = *(void *)(a3 + 80);
    *((_DWORD *)v21 + 22) = *(_DWORD *)(a3 + 88);
    *((void *)v21 + 10) = v22;
    *((void *)v21 + 13) = 0;
    *((void *)v21 + 14) = 0;
    *((void *)v21 + 12) = 0;
    *((_OWORD *)v21 + 6) = *(_OWORD *)(a3 + 96);
    *((void *)v21 + 14) = *(void *)(a3 + 112);
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a1 + 8) = (char *)v8 + 120;
  }
  return v8;
}

void sub_A16324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A16954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A16338(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (void *)a2 + 3;
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unint64_t v9 = *(void **)(a1 + 24);
    if (v8 != v6)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      do
      {
        unint64_t v12 = *(char **)(v10 - 32);
        v10 -= 32;
        uint64_t v11 = v12;
        if (v12)
        {
          for (uint64_t i = *(char **)(v8 - 24); i != v11; i -= 64)
          {
            if (*(i - 4)) {
              *(i - 4) = 0;
            }
          }
          *(void *)(v8 - 24) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v6);
      unint64_t v9 = *(void **)v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v9);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  long long v14 = *(void **)(a1 + 56);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  if (v14)
  {
    *(void *)(a1 + 64) = v14;
    operator delete(v14);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v15 = *((void *)a2 + 10);
  unint64_t v16 = (void **)(a1 + 96);
  unint64_t v17 = *(void **)(a1 + 96);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(void *)(a1 + 80) = v15;
  if (v17)
  {
    unint64_t v18 = *(void **)(a1 + 104);
    unsigned int v19 = v17;
    if (v18 != v17)
    {
      uint64_t v20 = (uint64_t)v18 - 1064;
      do
      {
        int v22 = *(_DWORD *)(v20 + 1056);
        if (v22 == 3)
        {
          sub_3AFFFC(v20);
        }
        else if (v22 == 1)
        {
          long long v23 = *(void **)(v20 + 16);
          if (v23)
          {
            *(void *)(v20 + 24) = v23;
            operator delete(v23);
          }
        }
        else if (!v22 && *(unsigned char *)(v20 + 28))
        {
          *(unsigned char *)(v20 + 28) = 0;
        }
        uint64_t v21 = v20 - 32;
        v20 -= 1096;
      }
      while ((void *)v21 != v17);
      unsigned int v19 = *v16;
    }
    *(void *)(a1 + 104) = v17;
    operator delete(v19);
    char *v16 = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  return a1;
}

__n128 sub_A1650C(uint64_t a1, long long *a2)
{
  long long v4 = *(_OWORD **)(a1 + 16);
  if (v4 != *(_OWORD **)(a1 + 24)) {
    goto LABEL_22;
  }
  uint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0xDDDDDDDDDDDDDDDELL * (((char *)v4 - v6) >> 3);
    if (v4 == (_OWORD *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x222222222222223) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 120 * v12;
    uint64_t v15 = (char *)operator new(120 * v12);
    unint64_t v16 = &v15[120 * v13];
    unint64_t v17 = &v15[v14];
    if (v4 == (_OWORD *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v18 = (char *)v4 + (void)v16 - v5;
      uint64_t v19 = 120 * v13;
      do
      {
        uint64_t v20 = &v15[v19];
        long long v21 = *(_OWORD *)v5;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v5 + 16);
        *(_OWORD *)uint64_t v20 = v21;
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v5 + 24);
        *((void *)v20 + 5) = *(void *)(v5 + 40);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 24) = 0;
        *((_DWORD *)v20 + 12) = *(_DWORD *)(v5 + 48);
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v5 + 56);
        *((void *)v20 + 9) = *(void *)(v5 + 72);
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        uint64_t v22 = *(void *)(v5 + 80);
        *((_DWORD *)v20 + 22) = *(_DWORD *)(v5 + 88);
        *((void *)v20 + 10) = v22;
        *((_OWORD *)v20 + 6) = *(_OWORD *)(v5 + 96);
        *((void *)v20 + 14) = *(void *)(v5 + 112);
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        v19 += 120;
        v5 += 120;
      }
      while (v20 + 120 != v18);
      uint64_t v6 = *(unsigned char **)a1;
      long long v23 = *(void **)(a1 + 8);
      long long v24 = *(void **)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v17;
      while (v24 != v23)
      {
        v24 -= 15;
        sub_8EC658(v24);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    long long v4 = *(_OWORD **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((_OWORD *)v5 == v4)
  {
    uint64_t v11 = (_OWORD *)(v5 - 120 * v9);
  }
  else
  {
    do
    {
      sub_A16338(v5 + 120 * v10, (long long *)v5);
      v5 += 120;
    }
    while ((_OWORD *)v5 != v4);
    long long v4 = *(_OWORD **)(a1 + 8);
    uint64_t v11 = (_OWORD *)(v5 + 120 * v10);
  }
  *(void *)(a1 + 8) = (char *)v4 + 120 * v10;
  *(void *)(a1 + 16) = v11;
  long long v4 = v11;
LABEL_22:
  long long v25 = *a2;
  *((_DWORD *)v4 + 4) = *((_DWORD *)a2 + 4);
  _OWORD *v4 = v25;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = 0;
  *(_OWORD *)((char *)v4 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *((_DWORD *)v4 + 12) = *((_DWORD *)a2 + 12);
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)((char *)v4 + 56) = *(long long *)((char *)a2 + 56);
  *((void *)v4 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v26 = *((void *)a2 + 10);
  *((_DWORD *)v4 + 22) = *((_DWORD *)a2 + 22);
  *((void *)v4 + 10) = v26;
  *((void *)v4 + 13) = 0;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 12) = 0;
  __n128 result = (__n128)a2[6];
  v4[6] = result;
  *((void *)v4 + 14) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *(void *)(a1 + 16) += 120;
  return result;
}

long long *sub_A167A8(long long **a1, void *a2, long long *a3)
{
  __n128 result = (long long *)a2[1];
  unint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)result + v7;
      uint64_t v9 = (uint64_t)a3 + v7;
      long long v10 = *(long long *)((char *)a3 + v7 - 120);
      *(_DWORD *)(v8 - 104) = *(_DWORD *)((char *)a3 + v7 - 104);
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 96) = 0;
      *(_OWORD *)(v8 - 120) = v10;
      *(_OWORD *)(v8 - 96) = *(long long *)((char *)a3 + v7 - 96);
      *(void *)(v8 - 80) = *(void *)((char *)a3 + v7 - 80);
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 96) = 0;
      int v11 = *(_DWORD *)((char *)a3 + v7 - 72);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 64) = 0;
      *(_DWORD *)(v8 - 72) = v11;
      *(_OWORD *)(v8 - 64) = *(long long *)((char *)a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)((char *)a3 + v7 - 48);
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      uint64_t v12 = *(void *)((char *)a3 + v7 - 40);
      *(_DWORD *)(v8 - 32) = *(_DWORD *)((char *)a3 + v7 - 32);
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(void *)(v8 - 40) = v12;
      *(void *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 24) = *(long long *)((char *)a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)((char *)a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 120;
    }
    while ((long long *)((char *)a3 + v7) != v5);
    uint64_t v6 = (long long *)((char *)result + v7);
  }
  a2[1] = v6;
  unint64_t v13 = a1[1];
  uint64_t v14 = a2[2];
  if (v13 != a3)
  {
    do
    {
      long long v15 = *a3;
      *(_DWORD *)(v14 + 16) = *((_DWORD *)a3 + 4);
      *(_OWORD *)uint64_t v14 = v15;
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 24) = 0;
      *(_OWORD *)(v14 + 24) = *(long long *)((char *)a3 + 24);
      *(void *)(v14 + 40) = *((void *)a3 + 5);
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 3) = 0;
      *(_DWORD *)(v14 + 48) = *((_DWORD *)a3 + 12);
      *(void *)(v14 + 64) = 0;
      *(void *)(v14 + 72) = 0;
      *(void *)(v14 + 56) = 0;
      *(_OWORD *)(v14 + 56) = *(long long *)((char *)a3 + 56);
      *(void *)(v14 + 72) = *((void *)a3 + 9);
      *((void *)a3 + 7) = 0;
      *((void *)a3 + 8) = 0;
      *((void *)a3 + 9) = 0;
      uint64_t v16 = *((void *)a3 + 10);
      *(_DWORD *)(v14 + 88) = *((_DWORD *)a3 + 22);
      *(void *)(v14 + 80) = v16;
      *(void *)(v14 + 104) = 0;
      *(void *)(v14 + 112) = 0;
      *(void *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 96) = a3[6];
      *(void *)(v14 + 112) = *((void *)a3 + 14);
      *((void *)a3 + 12) = 0;
      *((void *)a3 + 13) = 0;
      *((void *)a3 + 14) = 0;
      v14 += 120;
      a3 = (long long *)((char *)a3 + 120);
    }
    while (a3 != v13);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v14;
  unint64_t v17 = *a1;
  *a1 = v6;
  a2[1] = v17;
  unint64_t v18 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v18;
  uint64_t v19 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_A16954(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    sub_8EC658((void *)(i - 120));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A169A8(void **a1, unsigned char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *(void *)a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      long long v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          long long v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    if (v9 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)uint64_t v9 = *(void *)v3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(8 * v29);
    int64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    int64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    v53 = (char *)operator new(8 * v52);
    int64_t v31 = &v53[8 * (v52 >> 2)];
    uint64_t v32 = &v53[8 * v52];
    if (v30)
    {
      v54 = &v53[8 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      long long v34 = (char *)*a1;
      *(void *)int64_t v31 = *(void *)v3;
      long long v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)int64_t v31 = *(void *)v3;
  long long v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_61;
    }
    v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_61;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_61:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    size_t v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    long long v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_A16D18(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A16D30(char **a1, char *a2, uint64_t a3)
{
  long long v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v15 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v46 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x555555555555555) {
        sub_188D718();
      }
      unint64_t v18 = (char *)operator new(48 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    v42 = v18;
    v43 = &v18[48 * v8];
    uint64_t v44 = v43;
    long long v45 = &v18[48 * v17];
    sub_A170F4((uint64_t)&v42, a3);
    uint64_t v21 = v43;
    uint64_t v22 = *a1;
    long long v23 = v43;
    if (*a1 != v4)
    {
      long long v23 = v43;
      uint64_t v24 = v4;
      do
      {
        *((void *)v23 - 6) = 0;
        *((void *)v23 - 5) = 0;
        v23 -= 48;
        *((void *)v23 + 2) = 0;
        long long v25 = *((_OWORD *)v24 - 3);
        v24 -= 6;
        *(_OWORD *)long long v23 = v25;
        *((void *)v23 + 2) = v24[2];
        *uint64_t v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        long long v26 = *(_OWORD *)(v24 + 3);
        *(void *)(v23 + 38) = *(void *)((char *)v24 + 38);
        *(_OWORD *)(v23 + 24) = v26;
      }
      while (v24 != (void *)v22);
    }
    v43 = v23;
    long long v27 = a1[1];
    uint64_t v28 = v44;
    if (v27 != v4)
    {
      do
      {
        *uint64_t v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v4;
        v28[2] = *((void *)v4 + 2);
        *(void *)long long v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        long long v29 = *(_OWORD *)(v4 + 24);
        *(void *)((char *)v28 + 38) = *(void *)(v4 + 38);
        *(_OWORD *)(v28 + 3) = v29;
        v28 += 6;
        v4 += 48;
      }
      while (v4 != v27);
      long long v23 = v43;
      long long v4 = a1[1];
    }
    long long v30 = *a1;
    *a1 = v23;
    a1[1] = (char *)v28;
    int64_t v31 = a1[2];
    a1[2] = v45;
    uint64_t v44 = v4;
    long long v45 = v31;
    v42 = v30;
    v43 = v30;
    if (v4 == v30)
    {
      if (!v4) {
        return v21;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          unint64_t v33 = v4 - 48;
          uint64_t v32 = (void *)*((void *)v4 - 6);
          uint64_t v44 = v4 - 48;
          if (!v32) {
            break;
          }
          *((void *)v4 - 5) = v32;
          operator delete(v32);
          long long v4 = v44;
          if (v44 == v30) {
            goto LABEL_32;
          }
        }
        v4 -= 48;
      }
      while (v33 != v30);
LABEL_32:
      long long v4 = v42;
      if (!v42) {
        return v21;
      }
    }
    operator delete(v4);
    return v21;
  }
  if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v19 = &v7[48 * v8];
    long long v20 = *(_OWORD *)(a3 + 24);
    *(void *)(v19 + 38) = *(void *)(a3 + 38);
    *(_OWORD *)(v19 + 24) = v20;
    a1[1] = a2 + 48;
    return v4;
  }
  unint64_t v10 = a2 + 48;
  unint64_t v11 = v6 - 48;
  if (v6 >= 0x30)
  {
    unint64_t v12 = v6 - 48;
    unint64_t v13 = a1[1];
    do
    {
      *(void *)unint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 + 24);
      *(void *)(v13 + 38) = *(void *)(v12 + 38);
      *(_OWORD *)(v13 + 24) = v14;
      v13 += 48;
      v12 += 48;
    }
    while (v12 < v6);
    a1[1] = v13;
    if ((void *)v6 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v34 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
    do
    {
      int v37 = *(void **)v11;
      if (*(void *)v11)
      {
        *(void *)(v11 + 8) = v37;
        operator delete(v37);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
      }
      uint64_t v35 = (uint64_t)&v4[v34 - 48];
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v35;
      *(void *)(v11 + 16) = *(void *)&v4[v34 - 32];
      *(void *)uint64_t v35 = 0;
      *(void *)(v35 + 8) = 0;
      *(void *)(v35 + 16) = 0;
      long long v36 = *(_OWORD *)&v4[v34 - 24];
      *(void *)(v11 + 38) = *(void *)&v4[v34 - 10];
      *(_OWORD *)(v11 + 24) = v36;
      v11 -= 48;
      v34 -= 48;
    }
    while (v34);
    goto LABEL_39;
  }
  a1[1] = (char *)v6;
  if ((void *)v6 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  unint64_t v38 = *(void **)v4;
  if (*(void *)v4)
  {
    *((void *)v4 + 1) = v38;
    operator delete(v38);
    *(void *)long long v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  *(_OWORD *)long long v4 = *(_OWORD *)a3;
  *((void *)v4 + 2) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v39 = &v7[48 * v8];
  long long v40 = *(_OWORD *)(a3 + 24);
  *(void *)(v39 + 38) = *(void *)(a3 + 38);
  *(_OWORD *)(v39 + 24) = v40;
  return v4;
}

void sub_A170E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A1733C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_A170F4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    unint64_t v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * (((char *)v4 - v5) >> 4);
      if (v4 == (void *)v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 48 * v14;
      unint64_t v17 = (char *)operator new(48 * v14);
      unint64_t v18 = &v17[48 * v15];
      uint64_t v19 = &v17[v16];
      if (v4 == (void *)v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        long long v20 = (char *)v4 + (void)v18 - v6;
        uint64_t v21 = 48 * v15;
        do
        {
          uint64_t v22 = &v17[v21];
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v6;
          *((void *)v22 + 2) = *(void *)(v6 + 16);
          *(void *)unint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          long long v23 = *(_OWORD *)(v6 + 24);
          *(void *)(v22 + 38) = *(void *)(v6 + 38);
          *(_OWORD *)(v22 + 24) = v23;
          v21 += 48;
          v6 += 48;
        }
        while (v22 + 48 != v20);
        unint64_t v5 = *(unsigned char **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v19;
        if (v25 != v24)
        {
          uint64_t v26 = v25;
          do
          {
            uint64_t v28 = *(void **)(v26 - 48);
            v26 -= 48;
            long long v27 = v28;
            if (v28)
            {
              *(void *)(v25 - 40) = v27;
              operator delete(v27);
            }
            uint64_t v25 = v26;
          }
          while (v26 != v24);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      long long v4 = *(void **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((void *)v6 == v4)
      {
        long long v29 = (void *)(v6 - 48 * v9);
      }
      else
      {
        do
        {
          unint64_t v12 = v6 + 48 * v10;
          unint64_t v13 = *(void **)v12;
          if (*(void *)v12)
          {
            *(void *)(v12 + 8) = v13;
            operator delete(v13);
            *(void *)unint64_t v12 = 0;
            *(void *)(v12 + 8) = 0;
            *(void *)(v12 + 16) = 0;
          }
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v6;
          *(void *)(v12 + 16) = *(void *)(v6 + 16);
          *(void *)unint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          long long v11 = *(_OWORD *)(v6 + 24);
          *(void *)(v12 + 38) = *(void *)(v6 + 38);
          *(_OWORD *)(v12 + 24) = v11;
          v6 += 48;
        }
        while ((void *)v6 != v4);
        long long v4 = *(void **)(a1 + 8);
        long long v29 = (void *)(v6 + 48 * v10);
      }
      *(void *)(a1 + 8) = &v4[6 * v10];
      *(void *)(a1 + 16) = v29;
      long long v4 = v29;
    }
  }
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)long long v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)((char *)v4 + 38) = *(void *)(a2 + 38);
  *(__n128 *)(v4 + 3) = result;
  *(void *)(a1 + 16) += 48;
  return result;
}

uint64_t sub_A1733C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 48;
        long long v4 = *(void **)(v2 - 48);
        *(void *)(a1 + 16) = v2 - 48;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 40) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 48;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_A173AC(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 160 * a2;
}

void sub_A174FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_A175DC(char **a1, char *a2, uint64_t a3)
{
  long long v4 = a2;
  long long v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v15 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x249249249249249) {
      unint64_t v17 = 0x492492492492492;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v38 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x492492492492492) {
        sub_188D718();
      }
      std::string v18 = (char *)operator new(56 * v17);
    }
    else
    {
      std::string v18 = 0;
    }
    uint64_t v34 = v18;
    uint64_t v35 = &v18[56 * v8];
    long long v36 = v35;
    int v37 = &v18[56 * v17];
    sub_A17AF8((uint64_t)&v34, (__n128 *)a3);
    std::string::size_type v20 = v35;
    uint64_t v21 = *a1;
    uint64_t v22 = v35;
    if (*a1 != v4)
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = &v20[v23];
        uint64_t v25 = &v4[v23];
        *((void *)v24 - 7) = 0;
        *((void *)v24 - 6) = 0;
        *((void *)v24 - 5) = 0;
        *(_OWORD *)(v24 - 56) = *(_OWORD *)&v4[v23 - 56];
        *((void *)v24 - 5) = *(void *)&v4[v23 - 40];
        *((void *)v25 - 6) = 0;
        *((void *)v25 - 5) = 0;
        *((void *)v25 - 7) = 0;
        *(v24 - 32) = v4[v23 - 32];
        *((void *)v24 - 2) = 0;
        *((void *)v24 - 1) = 0;
        *((void *)v24 - 3) = 0;
        *(_OWORD *)(v24 - 24) = *(_OWORD *)&v4[v23 - 24];
        *((void *)v24 - 1) = *(void *)&v4[v23 - 8];
        *((void *)v25 - 3) = 0;
        *((void *)v25 - 2) = 0;
        *((void *)v25 - 1) = 0;
        v23 -= 56;
      }
      while (&v4[v23] != v21);
      uint64_t v22 = &v20[v23];
    }
    uint64_t v35 = v22;
    uint64_t v26 = a1[1];
    long long v27 = v36;
    if (v26 != v4)
    {
      do
      {
        *(void *)long long v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        *(_OWORD *)long long v27 = *(_OWORD *)v4;
        *((void *)v27 + 2) = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)long long v4 = 0;
        v27[24] = v4[24];
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 6) = 0;
        *((void *)v27 + 4) = 0;
        *((_OWORD *)v27 + 2) = *((_OWORD *)v4 + 2);
        *((void *)v27 + 6) = *((void *)v4 + 6);
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        v27 += 56;
        v4 += 56;
      }
      while (v4 != v26);
      uint64_t v22 = v35;
      long long v4 = a1[1];
    }
    uint64_t v28 = *a1;
    *a1 = v22;
    a1[1] = v27;
    long long v29 = a1[2];
    a1[2] = v37;
    long long v36 = v4;
    int v37 = v29;
    uint64_t v34 = v28;
    uint64_t v35 = v28;
    if (v4 == v28)
    {
      if (!v4) {
        return v20;
      }
    }
    else
    {
      do
      {
        int64_t v31 = (void **)(v4 - 56);
        long long v36 = v4 - 56;
        uint64_t v32 = (void *)*((void *)v4 - 3);
        if (v32)
        {
          *((void *)v4 - 2) = v32;
          operator delete(v32);
        }
        uint64_t v33 = *v31;
        if (*v31)
        {
          *((void *)v4 - 6) = v33;
          operator delete(v33);
        }
        long long v4 = v36;
      }
      while (v36 != v28);
      long long v4 = v34;
      if (!v34) {
        return v20;
      }
    }
    operator delete(v4);
    return v20;
  }
  if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v19 = &v7[56 * v8];
    v19[24] = *(unsigned char *)(a3 + 24);
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 4) = 0;
    *((_OWORD *)v19 + 2) = *(_OWORD *)(a3 + 32);
    *((void *)v19 + 6) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    a1[1] = a2 + 56;
  }
  else
  {
    sub_A1797C((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 56));
    uint64_t v10 = *(void **)v4;
    if (*(void *)v4)
    {
      *((void *)v4 + 1) = v10;
      operator delete(v10);
      *(void *)long long v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)long long v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v11 = &v7[56 * v8];
    unint64_t v14 = (void *)*((void *)v11 + 4);
    long long v13 = v11 + 32;
    unint64_t v12 = v14;
    *((unsigned char *)v13 - 8) = *(unsigned char *)(a3 + 24);
    if (v14)
    {
      *(void *)&v7[56 * v8 + 40] = v12;
      operator delete(v12);
      void *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    *(_OWORD *)long long v13 = *(_OWORD *)(a3 + 32);
    *(void *)&v7[56 * v8 + 48] = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
  }
  return v4;
}

void sub_A17968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A17DB0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_A1797C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    *(void *)(a1 + 8) = v4;
    if (v4 == a4) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = a2 + v4 - a4;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)unint64_t v6 = 0;
      *(unsigned char *)(v7 + 24) = *(unsigned char *)(v6 + 24);
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      __n128 result = *(__n128 *)(v6 + 32);
      *(__n128 *)(v7 + 32) = result;
      *(void *)(v7 + 48) = *(void *)(v6 + 48);
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      v7 += 56;
      v6 += 56;
    }
    while (v6 < a3);
    *(void *)(a1 + 8) = v7;
    if (v4 == a4) {
      return result;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = -8 * ((v4 - a4) >> 3);
  do
  {
    uint64_t v12 = v4 + v9;
    unint64_t v14 = (void **)(v4 + v9 - 56);
    long long v13 = *v14;
    if (*v14)
    {
      *(void *)(v12 - 48) = v13;
      operator delete(v13);
      *unint64_t v14 = 0;
      *(void *)(v4 + v9 - 48) = 0;
      *(void *)(v4 + v9 - 40) = 0;
    }
    uint64_t v15 = v5 + v9 - 56;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    *(void *)(v12 - 40) = *(void *)(v5 + v9 - 40);
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    std::string v18 = *(void **)(v12 - 24);
    unint64_t v17 = (void *)(v12 - 24);
    unint64_t v16 = v18;
    *((unsigned char *)v17 - 8) = *(unsigned char *)(v5 + v9 - 32);
    if (v18)
    {
      *(void *)(v4 + v9 - 16) = v16;
      operator delete(v16);
      *unint64_t v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
    }
    uint64_t v11 = v5 + v9;
    __n128 result = *(__n128 *)(v5 + v9 - 24);
    *(__n128 *)unint64_t v17 = result;
    *(void *)(v4 + v9 - 8) = *(void *)(v5 + v9 - 8);
    *(void *)(v11 - 24) = 0;
    *(void *)(v11 - 16) = 0;
    *(void *)(v11 - 8) = 0;
    v9 -= 56;
  }
  while (v10 != v9);
  return result;
}

__n128 sub_A17AF8(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v17 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5) {
        unint64_t v17 = 1;
      }
      if (v17 >= 0x492492492492493) {
        sub_188D718();
      }
      unint64_t v18 = v17 >> 2;
      uint64_t v19 = 56 * v17;
      std::string::size_type v20 = (char *)operator new(56 * v17);
      uint64_t v21 = &v20[56 * v18];
      uint64_t v22 = &v20[v19];
      if (v4 == (__n128 *)v6)
      {
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
      }
      else
      {
        uint64_t v23 = (char *)v4 + (void)v21 - v6;
        uint64_t v24 = 56 * v18;
        do
        {
          uint64_t v25 = &v20[v24];
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          *((void *)v25 + 2) = *(void *)(v6 + 16);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)unint64_t v6 = 0;
          v25[24] = *(unsigned char *)(v6 + 24);
          *((_OWORD *)v25 + 2) = *(_OWORD *)(v6 + 32);
          *((void *)v25 + 6) = *(void *)(v6 + 48);
          *(void *)(v6 + 32) = 0;
          *(void *)(v6 + 40) = 0;
          *(void *)(v6 + 48) = 0;
          v24 += 56;
          v6 += 56;
        }
        while (v25 + 56 != v23);
        unint64_t v5 = *(__n128 **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v21;
        *(void *)(a1 + 16) = v23;
        *(void *)(a1 + 24) = v22;
        while (v27 != v26)
        {
          uint64_t v28 = *(void **)(v27 - 24);
          if (v28)
          {
            *(void *)(v27 - 16) = v28;
            operator delete(v28);
          }
          long long v29 = *(void **)(v27 - 56);
          if (v29)
          {
            *(void *)(v27 - 48) = v29;
            operator delete(v29);
          }
          v27 -= 56;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((__n128 *)v6 == v4)
      {
        long long v30 = (__n128 *)(v6 - 56 * v9);
      }
      else
      {
        uint64_t v11 = -56 * v9;
        do
        {
          uint64_t v12 = (void *)(v6 + v11);
          long long v13 = *(void **)(v6 + 56 * v10);
          if (v13)
          {
            v12[1] = v13;
            operator delete(v13);
            *uint64_t v12 = 0;
            v12[1] = 0;
            v12[2] = 0;
          }
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v6;
          v12[2] = *(void *)(v6 + 16);
          *(void *)unint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          unint64_t v16 = (void *)v12[4];
          uint64_t v15 = v12 + 4;
          unint64_t v14 = v16;
          *((unsigned char *)v15 - 8) = *(unsigned char *)(v6 + 24);
          if (v16)
          {
            *(void *)(v6 + v11 + 40) = v14;
            operator delete(v14);
            *uint64_t v15 = 0;
            v15[1] = 0;
            v15[2] = 0;
          }
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v6 + 32);
          *(void *)(v6 + v11 + 48) = *(void *)(v6 + 48);
          *(void *)(v6 + 32) = 0;
          *(void *)(v6 + 40) = 0;
          *(void *)(v6 + 48) = 0;
          v6 += 56;
        }
        while ((__n128 *)v6 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        long long v30 = (__n128 *)(v6 + 56 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 56 * v10;
      *(void *)(a1 + 16) = v30;
      uint64_t v4 = v30;
    }
  }
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v4[1].n128_u8[8] = a2[1].n128_u8[8];
  v4[2].n128_u64[1] = 0;
  v4[3].n128_u64[0] = 0;
  v4[2].n128_u64[0] = 0;
  __n128 result = a2[2];
  v4[2] = result;
  v4[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u64[0] = 0;
  *(void *)(a1 + 16) += 56;
  return result;
}

uint64_t sub_A17DB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    unint64_t v5 = *(void **)(i - 24);
    if (v5)
    {
      *(void *)(i - 16) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *v4;
    if (*v4)
    {
      *(void *)(i - 48) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_A17E28(void ***a1, void **a2, __n128 *a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = ((char *)a2 - (char *)*a1) >> 5;
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v17 = ((uint64_t)(v6 - (void)v7) >> 5) + 1;
    if (v17 >> 59) {
      sub_2E00();
    }
    uint64_t v18 = v9 - (void)v7;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    v43 = a1 + 2;
    if (v19)
    {
      if (v19 >> 59) {
        sub_188D718();
      }
      std::string::size_type v20 = (void **)operator new(32 * v19);
    }
    else
    {
      std::string::size_type v20 = 0;
    }
    v39 = v20;
    long long v40 = &v20[4 * v8];
    uint64_t v41 = v40;
    v42 = (char *)&v20[4 * v19];
    sub_A18198((uint64_t)&v39, a3);
    uint64_t v21 = v40;
    uint64_t v22 = *a1;
    uint64_t v23 = v40;
    if (*a1 != v4)
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = &v21[v24];
        uint64_t v26 = &v4[v24];
        *(v25 - 4) = 0;
        *(v25 - 3) = 0;
        *(v25 - 2) = 0;
        *((_OWORD *)v25 - 2) = *(_OWORD *)&v4[v24 - 4];
        *(v25 - 2) = v4[v24 - 2];
        *(v26 - 4) = 0;
        *(v26 - 3) = 0;
        *(v26 - 2) = 0;
        *((unsigned char *)v25 - 8) = v4[v24 - 1];
        v24 -= 4;
      }
      while (&v4[v24] != v22);
      uint64_t v23 = &v21[v24];
    }
    long long v40 = v23;
    uint64_t v27 = a1[1];
    uint64_t v28 = v41;
    if (v27 != v4)
    {
      do
      {
        *uint64_t v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v4;
        v28[2] = v4[2];
        __n128 *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        *((unsigned char *)v28 + 24) = *((unsigned char *)v4 + 24);
        v28 += 4;
        v4 += 4;
      }
      while (v4 != v27);
      uint64_t v23 = v40;
      uint64_t v4 = a1[1];
    }
    long long v29 = *a1;
    *a1 = v23;
    a1[1] = v28;
    long long v30 = (char *)a1[2];
    a1[2] = (void **)v42;
    uint64_t v41 = v4;
    v42 = v30;
    v39 = v29;
    long long v40 = v29;
    if (v4 != v29)
    {
      int64_t v31 = v4;
      do
      {
        uint64_t v34 = (char *)*(v31 - 4);
        v31 -= 4;
        uint64_t v33 = v34;
        uint64_t v41 = v31;
        if (v34)
        {
          uint64_t v35 = (char *)*(v4 - 3);
          uint64_t v32 = v33;
          if (v35 != v33)
          {
            do
            {
              long long v36 = (void *)*((void *)v35 - 3);
              if (v36)
              {
                *((void *)v35 - 2) = v36;
                operator delete(v36);
              }
              int v37 = (void *)*((void *)v35 - 7);
              if (v37)
              {
                *((void *)v35 - 6) = v37;
                operator delete(v37);
              }
              v35 -= 56;
            }
            while (v35 != v33);
            uint64_t v32 = *v31;
          }
          *(v4 - 3) = v33;
          operator delete(v32);
          int64_t v31 = v41;
        }
        uint64_t v4 = v31;
      }
      while (v31 != v29);
      uint64_t v4 = v39;
    }
    if (v4) {
      operator delete(v4);
    }
    return v21;
  }
  else if (a2 == (void **)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(__n128 *)a2 = *a3;
    a2[2] = (void *)a3[1].n128_u64[0];
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
    a1[1] = a2 + 4;
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x20)
    {
      unint64_t v11 = v6 - 32;
      uint64_t v10 = a1[1];
      do
      {
        void *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        v10[2] = *(void **)(v11 + 16);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *((unsigned char *)v10 + 24) = *(unsigned char *)(v11 + 24);
        v10 += 4;
        v11 += 32;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_A18370(a2, (void *)(v6 - 32), v6);
    uint64_t v12 = (char *)*v4;
    if (*v4)
    {
      long long v13 = (char *)v4[1];
      unint64_t v14 = *v4;
      if (v13 != v12)
      {
        do
        {
          uint64_t v15 = (void *)*((void *)v13 - 3);
          if (v15)
          {
            *((void *)v13 - 2) = v15;
            operator delete(v15);
          }
          unint64_t v16 = (void *)*((void *)v13 - 7);
          if (v16)
          {
            *((void *)v13 - 6) = v16;
            operator delete(v16);
          }
          v13 -= 56;
        }
        while (v13 != v12);
        unint64_t v14 = *v4;
      }
      v4[1] = v12;
      operator delete(v14);
      __n128 *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
    }
    *(__n128 *)uint64_t v4 = *a3;
    v4[2] = (void *)a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    LOBYTE(v7[4 * v8 + 3]) = a3[1].n128_u8[8];
  }
  return v4;
}

void sub_A18184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A18544((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_A18198(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v11 = (v4 - (uint64_t)v5) >> 4;
      if ((void *)v4 == v5) {
        unint64_t v11 = 1;
      }
      if (v11 >> 59) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 32 * v11;
      unint64_t v14 = (char *)operator new(32 * v11);
      uint64_t v15 = &v14[32 * v12];
      unint64_t v16 = &v14[v13];
      if (v4 == v6)
      {
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
      }
      else
      {
        unint64_t v17 = &v15[v4 - v6];
        uint64_t v18 = 32 * v12;
        do
        {
          unint64_t v19 = &v14[v18];
          *(_OWORD *)unint64_t v19 = *(_OWORD *)v6;
          *((void *)v19 + 2) = *(void *)(v6 + 16);
          *(void *)unint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          v19[24] = *(unsigned char *)(v6 + 24);
          v18 += 32;
          v6 += 32;
        }
        while (v19 + 32 != v17);
        unint64_t v5 = *(void **)a1;
        std::string::size_type v20 = *(void ***)(a1 + 8);
        uint64_t v21 = *(void ***)(a1 + 16);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
        if (v21 != v20)
        {
          uint64_t v22 = v21;
          do
          {
            uint64_t v25 = (char *)*(v22 - 4);
            v22 -= 4;
            uint64_t v24 = v25;
            if (v25)
            {
              uint64_t v26 = (char *)*(v21 - 3);
              uint64_t v23 = v24;
              if (v26 != v24)
              {
                do
                {
                  uint64_t v27 = (void *)*((void *)v26 - 3);
                  if (v27)
                  {
                    *((void *)v26 - 2) = v27;
                    operator delete(v27);
                  }
                  uint64_t v28 = (void *)*((void *)v26 - 7);
                  if (v28)
                  {
                    *((void *)v26 - 6) = v28;
                    operator delete(v28);
                  }
                  v26 -= 56;
                }
                while (v26 != v24);
                uint64_t v23 = *v22;
              }
              *(v21 - 3) = v24;
              operator delete(v23);
            }
            uint64_t v21 = v22;
          }
          while (v22 != v20);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 5;
      if (v7 >= -1) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = v7 + 2;
      }
      uint64_t v9 = 32 * (v8 >> 1);
      sub_A18464(*(void *)(a1 + 8), v4, (char **)(v6 - v9));
      uint64_t v4 = v10;
      *(void *)(a1 + 8) -= v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(unsigned char *)(v4 + 24) = a2[1].n128_u8[8];
  *(void *)(a1 + 16) += 32;
  return result;
}

void *sub_A18370(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 != a1)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      unint64_t v12 = *(char **)(v7 - 32);
      v7 -= 32;
      unint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = *(char **)(v3 - 24);
        unint64_t v8 = v11;
        if (v13 != v11)
        {
          do
          {
            unint64_t v14 = (void *)*((void *)v13 - 3);
            if (v14)
            {
              *((void *)v13 - 2) = v14;
              operator delete(v14);
            }
            uint64_t v15 = (void *)*((void *)v13 - 7);
            if (v15)
            {
              *((void *)v13 - 6) = v15;
              operator delete(v15);
            }
            v13 -= 56;
          }
          while (v13 != v11);
          unint64_t v8 = *(char **)v7;
        }
        *(void *)(v3 - 24) = v11;
        operator delete(v8);
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
      }
      *(_OWORD *)(v3 - 32) = *((_OWORD *)v6 - 2);
      char v9 = *((unsigned char *)v6 - 8);
      uint64_t v10 = v6 - 4;
      *(void *)(v3 - 16) = *(v6 - 2);
      void *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      *(unsigned char *)(v3 - 8) = v9;
      uint64_t v3 = v7;
      v6 -= 4;
    }
    while (v10 != a1);
  }
  return a2;
}

uint64_t sub_A18464(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = *a3;
      if (*a3)
      {
        unint64_t v8 = a3[1];
        unint64_t v6 = *a3;
        if (v8 != v7)
        {
          do
          {
            char v9 = (void *)*((void *)v8 - 3);
            if (v9)
            {
              *((void *)v8 - 2) = v9;
              operator delete(v9);
            }
            uint64_t v10 = (void *)*((void *)v8 - 7);
            if (v10)
            {
              *((void *)v8 - 6) = v10;
              operator delete(v10);
            }
            v8 -= 56;
          }
          while (v8 != v7);
          unint64_t v6 = *a3;
        }
        a3[1] = v7;
        operator delete(v6);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      *(_OWORD *)a3 = *(_OWORD *)v4;
      a3[2] = *(char **)(v4 + 16);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *((unsigned char *)a3 + 24) = *(unsigned char *)(v4 + 24);
      v4 += 32;
      a3 += 4;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_A18544(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v7 = (char *)*(v4 - 4);
      v4 -= 4;
      unint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        unint64_t v8 = (char *)*(v3 - 3);
        unint64_t v5 = v6;
        if (v8 != v6)
        {
          do
          {
            char v9 = (void *)*((void *)v8 - 3);
            if (v9)
            {
              *((void *)v8 - 2) = v9;
              operator delete(v9);
            }
            uint64_t v10 = (void *)*((void *)v8 - 7);
            if (v10)
            {
              *((void *)v8 - 6) = v10;
              operator delete(v10);
            }
            v8 -= 56;
          }
          while (v8 != v6);
          unint64_t v5 = *v4;
        }
        *(v3 - 3) = v6;
        operator delete(v5);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_A18614()
{
  unk_25DF9F7 = 16641;
  word_25DF9E0 = 65;
  byte_25DFA0F = 1;
  byte_25DF9F9 = 0;
}

uint64_t sub_A1863C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __p = operator new(0x20uLL);
  long long v11 = xmmword_20B8E90;
  strcpy((char *)__p, "shift_time_into_validity_period");
  BOOL v8 = sub_29D62C(a4, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  return a1;
}

void sub_A186D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A186F4@<X0>(uint64_t a1@<X0>, int32x2_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v8 = (unsigned char *)(*(void *)(a1 + 16) + 3896);
  sub_C25994((uint64_t)v8, a2[15].i8[0]);
  char v9 = sub_375C30(*(void *)(a1 + 8));
  sub_5F3038(v8, v9);
  uint64_t v10 = (char *)a2[12];
  long long v11 = (char *)a2[13];
  while (v10 != v11)
  {
    char v12 = *v10++;
    sub_C259E4((uint64_t)v8, v12, 1);
  }
  if (*(unsigned char *)a1) {
    uint64_t result = sub_A2C93C(*(void *)(a1 + 16), a2[10].i32[0]);
  }
  else {
    uint64_t result = 0;
  }
  if ((int)result < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  int32x2_t v15 = vadd_s32(vdup_n_s32((int)result / 10+ (((103 * (char)(v14 + (int)result % 10)) >> 15) & 1)+ ((103 * (char)(v14 + (int)result % 10)) >> 10)), a2[10]);
  int v23 = v15.i32[0];
  *(int32x2_t *)(a4 + 4) = v15;
  *(unsigned char *)a4 = a2[3].i8[0] != 0;
  *(int32x2_t *)(a4 + 24) = a2[11];
  *(_DWORD *)(a4 + 12) = result;
  *(_DWORD *)(a4 + 16) = a3;
  if (result)
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v35);
      unint64_t v16 = sub_188FC78(v35, (uint64_t)"Shifted transit journey planner request time from ", 50);
      sub_456C((uint64_t)__p, a2[10].i32[0]);
      long long v29 = operator new(0x19uLL);
      long long v30 = xmmword_20B9250;
      strcpy((char *)v29, "HH:mm EEE YYYY-MM-dd VV");
      sub_5444((uint64_t)__p, (uint64_t)&v29, v33);
      if ((v34 & 0x80u) == 0) {
        unint64_t v17 = v33;
      }
      else {
        unint64_t v17 = (void **)v33[0];
      }
      if ((v34 & 0x80u) == 0) {
        uint64_t v18 = v34;
      }
      else {
        uint64_t v18 = (uint64_t)v33[1];
      }
      unint64_t v19 = sub_188FC78(v16, (uint64_t)v17, v18);
      std::string::size_type v20 = sub_188FC78(v19, (uint64_t)" to ", 4);
      sub_456C((uint64_t)v26, v23);
      uint64_t v24 = operator new(0x19uLL);
      long long v25 = xmmword_20B9250;
      strcpy((char *)v24, "HH:mm EEE YYYY-MM-dd VV");
      sub_5444((uint64_t)v26, (uint64_t)&v24, v27);
      if ((v28 & 0x80u) == 0) {
        uint64_t v21 = v27;
      }
      else {
        uint64_t v21 = (void **)v27[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v22 = v28;
      }
      else {
        uint64_t v22 = (uint64_t)v27[1];
      }
      sub_188FC78(v20, (uint64_t)v21, v22);
      if ((char)v28 < 0)
      {
        operator delete(v27[0]);
        if ((SHIBYTE(v25) & 0x80000000) == 0)
        {
LABEL_25:
          sub_4814((uint64_t)v26);
          if (((char)v34 & 0x80000000) == 0) {
            goto LABEL_26;
          }
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(v25) & 0x80000000) == 0)
      {
        goto LABEL_25;
      }
      operator delete(v24);
      sub_4814((uint64_t)v26);
      if (((char)v34 & 0x80000000) == 0)
      {
LABEL_26:
        if ((SHIBYTE(v30) & 0x80000000) == 0)
        {
LABEL_27:
          sub_4814((uint64_t)__p);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          if (v36 < 0) {
            operator delete((void *)v35[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          return std::ios::~ios();
        }
LABEL_36:
        operator delete(v29);
        goto LABEL_27;
      }
LABEL_35:
      operator delete(v33[0]);
      if ((SHIBYTE(v30) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_36;
    }
  }
  return result;
}

void sub_A18AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  if (a45 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a55);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_A18BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (unsigned char *)(*(void *)(a1 + 16) + 3896);
  sub_C25994((uint64_t)v6, *(unsigned char *)(a2 + 28));
  char v7 = sub_375C30(*(void *)(a1 + 8));
  sub_5F3038(v6, v7);
  if (*(unsigned char *)a1) {
    uint64_t result = sub_A2C93C(*(void *)(a1 + 16), *(_DWORD *)(a2 + 24));
  }
  else {
    uint64_t result = 0;
  }
  if ((int)result < 0) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  int v10 = *(_DWORD *)(a2 + 24)
      + (int)result / 10
      + (((103 * (char)(v9 + (int)result % 10)) >> 15) & 1)
      + ((103 * (char)(v9 + (int)result % 10)) >> 10);
  *(_DWORD *)(a3 + 4) = v10;
  *(_DWORD *)(a3 + 8) = v10;
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 12) = 0x8000000080000000;
  if (!result) {
    return result;
  }
  uint64_t result = sub_723EC(1u);
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)v29);
  long long v11 = sub_188FC78(v29, (uint64_t)"Shifted transit journey updater current time from ", 50);
  sub_456C((uint64_t)__p, *(_DWORD *)(a2 + 24));
  int v23 = operator new(0x19uLL);
  long long v24 = xmmword_20B9250;
  strcpy((char *)v23, "HH:mm EEE YYYY-MM-dd VV");
  sub_5444((uint64_t)__p, (uint64_t)&v23, v27);
  if ((v28 & 0x80u) == 0) {
    char v12 = v27;
  }
  else {
    char v12 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v13 = v28;
  }
  else {
    uint64_t v13 = (uint64_t)v27[1];
  }
  char v14 = sub_188FC78(v11, (uint64_t)v12, v13);
  int32x2_t v15 = sub_188FC78(v14, (uint64_t)" to ", 4);
  sub_456C((uint64_t)v20, v10);
  uint64_t v18 = operator new(0x19uLL);
  long long v19 = xmmword_20B9250;
  strcpy((char *)v18, "HH:mm EEE YYYY-MM-dd VV");
  sub_5444((uint64_t)v20, (uint64_t)&v18, v21);
  if ((v22 & 0x80u) == 0) {
    unint64_t v16 = v21;
  }
  else {
    unint64_t v16 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v17 = v22;
  }
  else {
    uint64_t v17 = (uint64_t)v21[1];
  }
  sub_188FC78(v15, (uint64_t)v16, v17);
  if ((char)v22 < 0)
  {
    operator delete(v21[0]);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_23:
      sub_4814((uint64_t)v20);
      if (((char)v28 & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_33:
      operator delete(v27[0]);
      if ((SHIBYTE(v24) & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_34:
      operator delete(v23);
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v18);
  sub_4814((uint64_t)v20);
  if ((char)v28 < 0) {
    goto LABEL_33;
  }
LABEL_24:
  if (SHIBYTE(v24) < 0) {
    goto LABEL_34;
  }
LABEL_25:
  sub_4814((uint64_t)__p);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 1u);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_A18F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a43 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a53);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_A19034()
{
  unk_25DFA27 = 16641;
  word_25DFA10 = 65;
  byte_25DFA3F = 1;
  byte_25DFA29 = 0;
}

uint64_t sub_A1905C(uint64_t a1, uint64_t a2, void *a3)
{
  __p = operator new(0x20uLL);
  long long v9 = xmmword_20B8E90;
  strcpy((char *)__p, "shift_time_into_validity_period");
  BOOL v6 = sub_29D62C(a3, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_A190F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A19110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = xmmword_20EB6F0;
  *(_OWORD *)(a4 + 32) = xmmword_20EA7A0;
  *(_OWORD *)(a4 + 48) = 0u;
  char v7 = (void **)(a4 + 48);
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 106) = 0u;
  *(void *)(a4 + 128) = 0;
  BOOL v8 = (void *)(a4 + 128);
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  uint64_t v9 = *(void *)(a2 + 1572);
  *(void *)a4 = 0x8000000080000000;
  *(void *)(a4 + 8) = v9;
  *(unsigned char *)(a4 + 122) = *(unsigned char *)(a2 + 5);
  *(_DWORD *)(a4 + 124) = *(unsigned __int8 *)(a2 + 1580);
  unsigned int v10 = a3[94];
  if (v10 == 1)
  {
    sub_A19FA8((uint64_t)&__src, *(void *)(a1 + 8), 0x1FFFFFFFEuLL);
    unint64_t v16 = (void *)*((void *)&__src + 1);
    if ((_BYTE)v69) {
      uint64_t v17 = v68;
    }
    else {
      uint64_t v17 = (unint64_t *)&v66;
    }
    unint64_t v18 = *v17;
    while (1)
    {
      if ((unint64_t)v16 >= v18)
      {
        *(void *)(a4 + 16) = 0xFFFFFFFFLL;
        *(_DWORD *)(a4 + 24) = 0;
        *(unsigned char *)(a4 + 152) = 1;
        long long __src = xmmword_20EB700;
        sub_147D0(v8, (char *)&__src, (char *)&v66, 4uLL);
        goto LABEL_82;
      }
      __p[0] = (void *)__ROR8__(*v16, 32);
      sub_29603C(v7, __p);
      unint64_t v18 = (unint64_t)v66;
      unint64_t v16 = (void *)(*((void *)&__src + 1) + 12);
      *((void *)&__src + 1) = v16;
      if (v16 == v66)
      {
        unint64_t v16 = v67;
        unint64_t v20 = v68[0];
        *((void *)&__src + 1) = v67;
        int v19 = 1;
        LOBYTE(v69) = 1;
        if (!*(unsigned char *)(__src + 16)) {
          goto LABEL_17;
        }
      }
      else
      {
        int v19 = v69;
        unint64_t v20 = v68[0];
        if (!*(unsigned char *)(__src + 16)) {
          goto LABEL_17;
        }
      }
      if (v19) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = (unint64_t)v66;
      }
      if ((unint64_t)v16 < v21)
      {
        while (1)
        {
          unint64_t v22 = __ROR8__(*v16, 32);
          if (HIDWORD(v22) == 1 && (v22 + 3) < 2) {
            break;
          }
          if (sub_2AB7E4(**(void **)(__src + 4120)))
          {
            LOBYTE(v19) = (_BYTE)v69;
            unint64_t v16 = (void *)*((void *)&__src + 1);
            unint64_t v18 = (unint64_t)v66;
            break;
          }
          unint64_t v18 = (unint64_t)v66;
          unint64_t v16 = (void *)(*((void *)&__src + 1) + 12);
          *((void *)&__src + 1) = v16;
          if (v16 == v66)
          {
            unint64_t v16 = v67;
            *((void *)&__src + 1) = v67;
            LOBYTE(v19) = 1;
            LOBYTE(v69) = 1;
            if ((unint64_t)v67 >= v68[0]) {
              break;
            }
          }
          else
          {
            LOBYTE(v19) = (_BYTE)v69;
            if ((_BYTE)v69) {
              long long v24 = v68;
            }
            else {
              long long v24 = &v66;
            }
            if ((unint64_t)v16 >= *v24) {
              break;
            }
          }
        }
        unint64_t v20 = v68[0];
      }
LABEL_17:
      if ((_BYTE)v19) {
        unint64_t v18 = v20;
      }
    }
  }
  if (!v10)
  {
    switch(a3[16])
    {
      case 0u:
        unint64_t v12 = *((void *)a3 + 7);
        BOOL v13 = HIDWORD(v12) == 0xFFFFFFFF || v12 == 0;
        uint64_t v14 = __ROR8__(v12, 32);
        if (v13) {
          uint64_t v14 = 0xFFFFFFFFLL;
        }
        *(void *)(a4 + 16) = v14;
        *(_DWORD *)(a4 + 24) = 1;
        uint64_t v15 = *a3;
        if (v15) {
          goto LABEL_72;
        }
        goto LABEL_74;
      case 1u:
        unint64_t v25 = *((void *)a3 + 7);
        BOOL v26 = HIDWORD(v25) == 0xFFFFFFFF || v25 == 0;
        uint64_t v27 = __ROR8__(v25, 32);
        if (v26) {
          uint64_t v27 = 0xFFFFFFFFLL;
        }
        *(void *)(a4 + 16) = v27;
        *(_DWORD *)(a4 + 24) = 2;
        uint64_t v15 = *a3;
        if (!v15) {
          goto LABEL_74;
        }
        goto LABEL_72;
      case 2u:
        unint64_t v28 = *((void *)a3 + 7);
        BOOL v29 = HIDWORD(v28) == 0xFFFFFFFF || v28 == 0;
        uint64_t v30 = __ROR8__(v28, 32);
        if (v29) {
          uint64_t v30 = 0xFFFFFFFFLL;
        }
        *(void *)(a4 + 16) = v30;
        *(_DWORD *)(a4 + 24) = 3;
        uint64_t v15 = *a3;
        if (!v15) {
          goto LABEL_74;
        }
        goto LABEL_72;
      case 3u:
        unint64_t v31 = *((void *)a3 + 7);
        BOOL v32 = HIDWORD(v31) == 0xFFFFFFFF || v31 == 0;
        uint64_t v33 = __ROR8__(v31, 32);
        if (v32) {
          uint64_t v33 = 0xFFFFFFFFLL;
        }
        *(void *)(a4 + 16) = v33;
        *(_DWORD *)(a4 + 24) = 4;
        uint64_t v15 = *a3;
        if (!v15) {
          goto LABEL_74;
        }
        goto LABEL_72;
      case 4u:
        unint64_t v34 = *((void *)a3 + 7);
        BOOL v35 = HIDWORD(v34) == 0xFFFFFFFF || v34 == 0;
        uint64_t v36 = __ROR8__(v34, 32);
        if (v35) {
          uint64_t v36 = 0xFFFFFFFFLL;
        }
        *(void *)(a4 + 16) = v36;
        *(_DWORD *)(a4 + 24) = 5;
        uint64_t v15 = *a3;
        if (v15) {
          goto LABEL_72;
        }
        goto LABEL_74;
      default:
        *(void *)(a4 + 16) = 0xFFFFFFFFLL;
        *(_DWORD *)(a4 + 24) = 0;
        uint64_t v15 = *a3;
        if (!v15) {
          goto LABEL_74;
        }
LABEL_72:
        uint64_t v37 = a3[1];
        if (v37 == -1)
        {
LABEL_74:
          uint64_t v38 = 0;
          uint64_t v37 = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v38 = v15 << 32;
        }
        *(void *)(a4 + 28) = v37 | v38;
        *(void *)(a4 + 36) = *((void *)a3 + 1);
        *(_DWORD *)(a4 + 44) = a3[4];
        *(_WORD *)(a4 + 120) = *((_WORD *)a3 + 10);
        sub_A19A70((void *)a3 + 3, (unint64_t *)&__src);
        v39 = *v7;
        if (*v7)
        {
          *(void *)(a4 + 56) = v39;
          operator delete(v39);
        }
        *(_OWORD *)(a4 + 48) = __src;
        *(void *)(a4 + 64) = v66;
        sub_A19A70((void *)a3 + 9, (unint64_t *)&__src);
        long long v40 = *(void **)(a4 + 72);
        if (v40)
        {
          *(void *)(a4 + 80) = v40;
          operator delete(v40);
        }
        *(_OWORD *)(a4 + 72) = __src;
        *(void *)(a4 + 88) = v66;
        sub_A19EC4((void *)a3 + 12, (unint64_t *)&__src);
        uint64_t v41 = *(void **)(a4 + 96);
        if (v41)
        {
          *(void *)(a4 + 104) = v41;
          operator delete(v41);
        }
        *(_OWORD *)(a4 + 96) = __src;
        *(void *)(a4 + 112) = v66;
        *(unsigned char *)(a4 + 152) = 0;
        *(void *)&long long __src = 0x300000002;
        DWORD2(__src) = 4;
        sub_147D0(v8, (char *)&__src, (char *)&__src + 12, 3uLL);
        break;
    }
  }
LABEL_82:
  if (!*(unsigned char *)a1)
  {
    LOBYTE(v45) = 0;
    int v44 = 0;
    uint64_t result = 0;
    int v43 = *(_DWORD *)(a2 + 1568);
    goto LABEL_86;
  }
  uint64_t result = sub_A2BF74(*(void *)(a1 + 8), *(_DWORD *)(a2 + 1568), v7);
  int v43 = *(_DWORD *)(a2 + 1568);
  int v44 = (int)result / 10;
  int v45 = (int)result % 10;
  if ((result & 0x80000000) == 0)
  {
LABEL_86:
    char v46 = 5;
    goto LABEL_87;
  }
  char v46 = -5;
LABEL_87:
  *(_DWORD *)a4 = v43 + v44 + (((103 * (char)(v46 + v45)) >> 15) & 1) + ((103 * (char)(v46 + v45)) >> 10);
  *(_DWORD *)(a4 + 4) = result;
  if (!result) {
    return result;
  }
  uint64_t result = sub_723EC(1u);
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)&__src);
  v47 = sub_188FC78(&__src, (uint64_t)"Shifted transit schedule lookup request time from ", 50);
  sub_456C((uint64_t)__p, *(_DWORD *)(a2 + 1568));
  v59 = operator new(0x19uLL);
  long long v60 = xmmword_20B9250;
  strcpy((char *)v59, "HH:mm EEE YYYY-MM-dd VV");
  sub_5444((uint64_t)__p, (uint64_t)&v59, v63);
  if ((v64 & 0x80u) == 0) {
    int64_t v48 = v63;
  }
  else {
    int64_t v48 = (void **)v63[0];
  }
  if ((v64 & 0x80u) == 0) {
    uint64_t v49 = v64;
  }
  else {
    uint64_t v49 = (uint64_t)v63[1];
  }
  size_t v50 = sub_188FC78(v47, (uint64_t)v48, v49);
  v51 = sub_188FC78(v50, (uint64_t)" to ", 4);
  sub_456C((uint64_t)v56, *(_DWORD *)a4);
  v54 = operator new(0x19uLL);
  long long v55 = xmmword_20B9250;
  strcpy((char *)v54, "HH:mm EEE YYYY-MM-dd VV");
  sub_5444((uint64_t)v56, (uint64_t)&v54, v57);
  if ((v58 & 0x80u) == 0) {
    unint64_t v52 = v57;
  }
  else {
    unint64_t v52 = (void **)v57[0];
  }
  if ((v58 & 0x80u) == 0) {
    uint64_t v53 = v58;
  }
  else {
    uint64_t v53 = (uint64_t)v57[1];
  }
  sub_188FC78(v51, (uint64_t)v52, v53);
  if ((char)v58 < 0)
  {
    operator delete(v57[0]);
    if ((SHIBYTE(v55) & 0x80000000) == 0)
    {
LABEL_103:
      sub_4814((uint64_t)v56);
      if (((char)v64 & 0x80000000) == 0) {
        goto LABEL_104;
      }
LABEL_113:
      operator delete(v63[0]);
      if ((SHIBYTE(v60) & 0x80000000) == 0) {
        goto LABEL_105;
      }
LABEL_114:
      operator delete(v59);
      goto LABEL_105;
    }
  }
  else if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(v54);
  sub_4814((uint64_t)v56);
  if ((char)v64 < 0) {
    goto LABEL_113;
  }
LABEL_104:
  if (SHIBYTE(v60) < 0) {
    goto LABEL_114;
  }
LABEL_105:
  sub_4814((uint64_t)__p);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 1u);
  if (v62 < 0) {
    operator delete(__p[0]);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_A198E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a42 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a52);
    sub_A056CC(v52);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a52);
  sub_A056CC(v52);
  _Unwind_Resume(a1);
}

void sub_A19A0C(_Unwind_Exception *a1)
{
  sub_A056CC(v1);
  _Unwind_Resume(a1);
}

void sub_A19A20(_Unwind_Exception *a1)
{
  sub_A056CC(v1);
  _Unwind_Resume(a1);
}

void sub_A19A34(_Unwind_Exception *a1)
{
  sub_A056CC(v1);
  _Unwind_Resume(a1);
}

void sub_A19A48(_Unwind_Exception *a1)
{
  sub_A056CC(v1);
  _Unwind_Resume(a1);
}

void *sub_A19A70@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  uint64_t v5 = (uint64_t)v3 - *result;
  if (v3 != (uint64_t *)*result)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t result = operator new((size_t)v3 - *result);
    BOOL v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5 >> 3]; v4 != v3; ++v4)
    {
      uint64_t v7 = *v4;
      BOOL v8 = HIDWORD(*v4) == 0xFFFFFFFF || v7 == 0;
      uint64_t v9 = __ROR8__(v7, 32);
      if (v8) {
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      uint64_t v10 = v9;
      uint64_t result = sub_A19B54(a2, v6, &v10);
      BOOL v6 = result + 1;
    }
  }
  return result;
}

void sub_A19B34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A19B54(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    BOOL v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      int v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        int v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        int v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v13 = (uint64_t *)((char *)v13 + v21);
          int v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *unint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    BOOL v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    BOOL v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    BOOL v32 = &v54[8 * v53];
    if (v30)
    {
      long long v55 = &v54[8 * v53];
      operator delete(v30);
      BOOL v32 = v55;
      unint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      BOOL v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  BOOL v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    v42 = v31 - 16;
    int v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    BOOL v32 = v51;
  }
  unint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_A19EAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_A19EC4@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (uint64_t *)*result;
  uint64_t v3 = (uint64_t *)result[1];
  uint64_t v5 = (uint64_t)v3 - *result;
  if (v3 != (uint64_t *)*result)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t result = operator new((size_t)v3 - *result);
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5 >> 3]; v4 != v3; ++v4)
    {
      uint64_t v7 = *v4;
      BOOL v8 = HIDWORD(*v4) == 0xFFFFFFFF || v7 == 0;
      uint64_t v9 = __ROR8__(v7, 32);
      if (v8) {
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      uint64_t v10 = v9;
      uint64_t result = sub_A19B54(a2, v6, &v10);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_A19F88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A19FA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v6 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = a2 + 3896;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  BOOL v8 = sub_C256B0(a2 + 3896, a3);
  uint64_t v9 = *v8;
  *(void *)(a1 + 24) = *v8;
  uint64_t v10 = sub_C256B0(v7, a3);
  *(void *)(a1 + 32) = v9 + v10[1] - *v10;
  int64_t v11 = (uint64_t *)(a1 + 16);
  if (HIDWORD(a3) == 1 && (a3 + 3) < 2) {
    goto LABEL_28;
  }
  uint64_t v12 = (int *)sub_A1A290(a2 + 24, a3, 0, "transfers at stop");
  BOOL v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (v14 < 7) {
    goto LABEL_28;
  }
  if (v13[3])
  {
    uint64_t v15 = (int *)((char *)v12 + v13[3] + *(unsigned int *)((char *)v12 + v13[3]));
    if (v14 >= 0xD) {
      goto LABEL_6;
    }
LABEL_11:
    unint64_t v16 = 0;
    if (!v15) {
      goto LABEL_15;
    }
LABEL_12:
    int v17 = *v15;
    if (*v15)
    {
      *unint64_t v6 = (uint64_t)(v15 + 1);
      uint64_t v18 = (uint64_t)&v15[3 * v17 + 1];
LABEL_14:
      *int64_t v11 = v18;
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  uint64_t v15 = 0;
  if (v14 < 0xD) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v16 = (int *)v13[6];
  if (v13[6]) {
    unint64_t v16 = (int *)((char *)v16 + (void)v12 + *(unsigned int *)((char *)v16 + (void)v12));
  }
  if (v15) {
    goto LABEL_12;
  }
LABEL_15:
  if (v16)
  {
    int v19 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v19 >= 5u)
    {
      uint64_t v20 = v19[2];
      if (v20)
      {
        if (v14 < 0xD)
        {
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v21 = (int *)v13[6];
          if (v13[6]) {
            uint64_t v21 = (int *)((char *)v21 + (void)v12 + *(unsigned int *)((char *)v21 + (void)v12));
          }
        }
        unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 >= 7u)
        {
          uint64_t v23 = v22[3];
          if (v23)
          {
            if (*(_WORD *)((char *)v21 + v23))
            {
              uint64_t v24 = (uint64_t)v16 + v20 + *(unsigned int *)((char *)v16 + v20) + 4;
              *unint64_t v6 = v24;
              if (v14 < 0xD)
              {
                long long v25 = 0;
              }
              else
              {
                long long v25 = (int *)v13[6];
                if (v25) {
                  long long v25 = (int *)((char *)v25 + (void)v12 + *(unsigned int *)((char *)v25 + (void)v12));
                }
              }
              unint64_t v34 = (unsigned __int16 *)((char *)v25 - *v25);
              if (*v34 >= 7u && (uint64_t v35 = v34[3]) != 0) {
                unsigned int v36 = *(unsigned __int16 *)((char *)v25 + v35);
              }
              else {
                unsigned int v36 = 0;
              }
              uint64_t v18 = v24 + 12 * v36;
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
LABEL_28:
  unint64_t v26 = *(void **)(a1 + 8);
  uint64_t v27 = *(void **)(a1 + 16);
  uint64_t v28 = v26;
  *(unsigned char *)(a1 + 72) = v26 == v27;
  if (v26 == v27)
  {
    uint64_t v28 = *(void **)(a1 + 24);
    *(void *)(a1 + 8) = v28;
    *(void *)(a1 + 40) = *(void *)(a1 + 56);
  }
  if (*(unsigned char *)(*(void *)a1 + 16))
  {
    unint64_t v29 = (void *)(v26 == v27 ? a1 + 32 : a1 + 16);
    if ((unint64_t)v28 < *v29)
    {
      while (1)
      {
        unint64_t v30 = __ROR8__(*v28, 32);
        BOOL v31 = HIDWORD(v30) != 1 || (v30 + 3) >= 2;
        if (!v31 || (sub_2AB7E4(**(void **)(*(void *)a1 + 4120)) & 1) != 0) {
          break;
        }
        uint64_t v28 = (void *)(*v6 + 12);
        *unint64_t v6 = (uint64_t)v28;
        if (v28 == (void *)*v11)
        {
          uint64_t v28 = *(void **)(a1 + 24);
          *(void *)(a1 + 8) = v28;
          *(unsigned char *)(a1 + 72) = 1;
          if ((unint64_t)v28 >= *(void *)(a1 + 32)) {
            return a1;
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 72)) {
            BOOL v32 = (void *)(a1 + 32);
          }
          else {
            BOOL v32 = (void *)(a1 + 16);
          }
          if ((unint64_t)v28 >= *v32) {
            return a1;
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_A1A290(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    unsigned int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  unsigned int v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0xDu)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[6];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        unint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        uint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        uint64_t v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v39 = &v56;
        }
        else {
          v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        int v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v45 = &v55;
        }
        else {
          long long v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = sub_736EC(9u);
        unint64_t v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_A1A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_A1A7E8()
{
  unk_25DFA57 = 16641;
  word_25DFA40 = 65;
  byte_25DFA6F = 1;
  byte_25DFA59 = 0;
}

void sub_A1A810(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  *(void *)(a3 + 8) = 0;
  uint64_t v37 = (void **)(a3 + 8);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  BYTE7(v51) = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a3 + 32), &__p);
  if (SBYTE7(v51) < 0) {
    operator delete((void *)__p);
  }
  *(unsigned char *)(v4 + 184) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 208) = 0;
  *(void *)(v4 + 192) = 0;
  uint64_t v5 = *a2;
  uint64_t v38 = a2[1];
  unsigned int v6 = a1;
  if (v5 != v38)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v34 = _Q0;
    do
    {
      sub_A1ADFC(&__p, v6, v5);
      if (v73)
      {
        if (DWORD1(__p) == 2) {
          DWORD1(__p) = 1;
        }
        uint64_t v40 = v56;
        uint64_t v43 = v59;
        int v41 = v57;
        int v44 = v60;
        v47[0] = v66;
        v47[3] = v68;
        v49[0] = v70;
        *(_OWORD *)&v39[64] = v54;
        *(_OWORD *)&v39[80] = v55;
        *(_OWORD *)v39 = __p;
        *(_OWORD *)&v39[16] = v51;
        *(_OWORD *)&v39[32] = v52;
        *(_OWORD *)&v39[48] = v53;
        long long v42 = v58;
        uint64_t v59 = 0;
        long long v58 = 0uLL;
        *(_OWORD *)&v45[16] = v62;
        *(_OWORD *)&v45[32] = v63;
        *(_OWORD *)long long v45 = v61;
        *(void *)&v45[48] = v64;
        long long v46 = v65;
        uint64_t v66 = 0;
        long long v65 = 0uLL;
        *(_OWORD *)&v47[1] = v67;
        long long v67 = 0uLL;
        uint64_t v68 = 0;
        long long v48 = v69;
        long long v69 = 0uLL;
        uint64_t v70 = 0;
        *(_OWORD *)&v49[1] = v71;
        v49[3] = v72;
        long long v71 = 0uLL;
        uint64_t v72 = 0;
        unint64_t v12 = *(void *)(v4 + 16);
        if (v12 >= *(void *)(v4 + 24))
        {
LABEL_11:
          unint64_t v21 = sub_A220E4(v37, (uint64_t)v39);
          unint64_t v22 = (void *)v49[1];
          *(void *)(v4 + 16) = v21;
          if (v22)
          {
            v49[2] = v22;
            operator delete(v22);
          }
          goto LABEL_13;
        }
      }
      else
      {
        *(_WORD *)v39 = 0;
        v39[2] = 0;
        *(void *)&v39[4] = 0;
        *(_OWORD *)&v39[12] = xmmword_20EB720;
        v39[25] = 0;
        *(_OWORD *)&v39[28] = xmmword_20E81C0;
        v39[37] = 0;
        *(_OWORD *)&v39[44] = xmmword_20E81C0;
        v39[53] = 0;
        *(_OWORD *)&v39[60] = xmmword_20EB730;
        v39[65] = 0;
        *(_OWORD *)&v39[76] = xmmword_20B93F0;
        v39[77] = 0;
        uint64_t v40 = 0;
        uint64_t v43 = 0;
        long long v42 = 0uLL;
        int v41 = 0x7FFFFFFF;
        int v44 = 100;
        *(_DWORD *)long long v45 = -1;
        *(_OWORD *)&v45[8] = v34;
        *(_OWORD *)&v45[24] = v34;
        *(_OWORD *)&v45[40] = v34;
        memset(v49, 0, sizeof(v49));
        long long v48 = 0u;
        long long v46 = 0u;
        memset(v47, 0, sizeof(v47));
        unint64_t v12 = *(void *)(v4 + 16);
        if (v12 >= *(void *)(v4 + 24)) {
          goto LABEL_11;
        }
      }
      long long v13 = *(_OWORD *)v39;
      long long v14 = *(_OWORD *)&v39[32];
      *(_OWORD *)(v12 + 16) = *(_OWORD *)&v39[16];
      *(_OWORD *)(v12 + 32) = v14;
      *(_OWORD *)unint64_t v12 = v13;
      long long v15 = *(_OWORD *)&v39[48];
      long long v16 = *(_OWORD *)&v39[64];
      long long v17 = *(_OWORD *)&v39[80];
      *(void *)(v12 + 96) = v40;
      *(_OWORD *)(v12 + 64) = v16;
      *(_OWORD *)(v12 + 80) = v17;
      *(_OWORD *)(v12 + 48) = v15;
      *(_DWORD *)(v12 + 104) = v41;
      long long v18 = v42;
      *(void *)(v12 + 128) = v43;
      *(_OWORD *)(v12 + 112) = v18;
      uint64_t v43 = 0;
      long long v42 = 0uLL;
      *(_DWORD *)(v12 + 136) = v44;
      long long v19 = *(_OWORD *)v45;
      long long v20 = *(_OWORD *)&v45[32];
      *(_OWORD *)(v12 + 160) = *(_OWORD *)&v45[16];
      *(_OWORD *)(v12 + 176) = v20;
      *(_OWORD *)(v12 + 144) = v19;
      *(void *)(v12 + 192) = *(void *)&v45[48];
      *(void *)(v12 + 200) = 0;
      *(void *)(v12 + 208) = 0;
      *(void *)(v12 + 216) = 0;
      *(void *)(v12 + 224) = 0;
      *(_OWORD *)(v12 + 200) = v46;
      *(void *)(v12 + 216) = v47[0];
      long long v46 = 0uLL;
      v47[0] = 0;
      *(void *)(v12 + 232) = 0;
      *(void *)(v12 + 240) = 0;
      *(_OWORD *)(v12 + 224) = *(_OWORD *)&v47[1];
      v47[1] = 0;
      v47[2] = 0;
      *(void *)(v12 + 240) = v47[3];
      *(void *)(v12 + 248) = 0;
      v47[3] = 0;
      *(void *)(v12 + 256) = 0;
      *(void *)(v12 + 264) = 0;
      *(_OWORD *)(v12 + 248) = v48;
      long long v48 = 0uLL;
      *(void *)(v12 + 264) = v49[0];
      *(void *)(v12 + 272) = 0;
      v49[0] = 0;
      *(void *)(v12 + 280) = 0;
      *(void *)(v12 + 288) = 0;
      *(_OWORD *)(v12 + 272) = *(_OWORD *)&v49[1];
      *(void *)(v12 + 288) = v49[3];
      memset(&v49[1], 0, 24);
      *(void *)(v4 + 16) = v12 + 296;
LABEL_13:
      if ((void)v48)
      {
        *((void *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      if (v47[1])
      {
        v47[2] = v47[1];
        operator delete((void *)v47[1]);
      }
      BOOL v23 = (void **)v46;
      if ((void)v46)
      {
        uint64_t v24 = *((void *)&v46 + 1);
        BOOL v25 = (void *)v46;
        if (*((void *)&v46 + 1) != (void)v46)
        {
          do
          {
            unint64_t v27 = *(void **)(v24 - 40);
            if (v27)
            {
              *(void *)(v24 - 32) = v27;
              operator delete(v27);
            }
            unint64_t v28 = (void **)(v24 - 72);
            uint64_t v29 = *(void *)(v24 - 72);
            if (v29)
            {
              uint64_t v30 = *(void *)(v24 - 64);
              int v26 = *(void **)(v24 - 72);
              if (v30 != v29)
              {
                do
                {
                  if (!*(_DWORD *)(v30 - 8))
                  {
                    uint64_t v31 = *(void **)(v30 - 48);
                    if (v31)
                    {
                      *(void *)(v30 - 40) = v31;
                      operator delete(v31);
                    }
                    BOOL v32 = *(void **)(v30 - 80);
                    if (v32)
                    {
                      *(void *)(v30 - 72) = v32;
                      operator delete(v32);
                    }
                    unint64_t v33 = *(void **)(v30 - 104);
                    if (v33)
                    {
                      *(void *)(v30 - 96) = v33;
                      operator delete(v33);
                    }
                  }
                  v30 -= 168;
                }
                while (v30 != v29);
                int v26 = *v28;
              }
              *(void *)(v24 - 64) = v29;
              operator delete(v26);
            }
            v24 -= 72;
          }
          while (v28 != v23);
          BOOL v25 = (void *)v46;
          uint64_t v4 = a3;
          unsigned int v6 = a1;
        }
        *((void *)&v46 + 1) = v23;
        operator delete(v25);
      }
      if (SHIBYTE(v43) < 0) {
        operator delete((void *)v42);
      }
      if (v73) {
        sub_A22020((uint64_t)&__p);
      }
      v5 += 176;
    }
    while (v5 != v38);
  }
}

void sub_A1AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0)
  {
    operator delete(__p);
    char v73 = *a24;
    if (!*a24) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    char v73 = *a24;
    if (!*a24) {
      goto LABEL_3;
    }
  }
  uint64_t v74 = *(void *)(a19 + 16);
  v75 = v73;
  if ((void *)v74 != v73)
  {
    do
    {
      v74 -= 296;
      sub_9F5E28(a19 + 24, v74);
    }
    while ((void *)v74 != v73);
    v75 = *a24;
  }
  *(void *)(a19 + 16) = v73;
  operator delete(v75);
  _Unwind_Resume(a1);
}

void sub_A1ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_A1D608((uint64_t)&a31);
  if (LOBYTE(STACK[0x300]))
  {
    sub_A22020((uint64_t)&a68);
    sub_9F53E0(a19);
    _Unwind_Resume(a1);
  }
  sub_9F53E0(a19);
  _Unwind_Resume(a1);
}

void sub_A1ADFC(_OWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void **)(a3 + 24);
  uint64_t v5 = *(void **)(a3 + 32);
  if (v4 == v5)
  {
    a1[17] = 0u;
    a1[18] = 0u;
    a1[15] = 0u;
    a1[16] = 0u;
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return;
  }
  __int16 v282 = 0;
  char v283 = 0;
  uint64_t v284 = 0;
  uint64_t v285 = 0x7FFFFFFFFFFFFFFFLL;
  __int16 v287 = 0;
  unint64_t v288 = 0x8000000080000000;
  __int16 v289 = 0;
  unint64_t v290 = 0x8000000080000000;
  int v291 = 0x7FFFFFFF;
  __int16 v292 = 0;
  int v304 = 100;
  __asm { FMOV            V0.2D, #1.0 }
  unint64_t v9 = &v310;
  v242 = v276;
  v229 = &v278;
  v243 = v267;
  v232 = &v269;
  long long v306 = _Q0;
  v262 = (_OWORD *)((char *)&v367[1] + 8);
  long long v307 = _Q0;
  v247 = &v327;
  long long v308 = _Q0;
  v248 = a2 + 517;
  v228 = &v340[4];
  long long v312 = 0u;
  v227 = v346;
  long long v311 = 0u;
  unint64_t v261 = (unint64_t)&v345;
  v251 = &v341;
  long long v310 = 0u;
  v226 = &v361[5];
  long long v309 = 0u;
  v224 = v360;
  v225 = &v361[1];
  v234 = (char *)v359 + 4;
  int v10 = *(_DWORD *)(a3 + 128);
  v233 = &v359[1];
  v223 = v367;
  v222 = &v362;
  int v286 = 0x7FFFFFFF;
  LODWORD(v284) = v10;
  v257 = (_OWORD *)((char *)v357 + 8);
  long long v249 = xmmword_20EB740;
  unint64_t v293 = 0x8000000080000000;
  __int16 v294 = 0;
  unint64_t v295 = 0x8000000080000000;
  __int16 v296 = 0;
  unint64_t v297 = 0xFFFFFFFF00000000;
  int v298 = -1;
  uint64_t v299 = 0;
  int v300 = 0x7FFFFFFF;
  uint64_t v302 = 0;
  v301 = 0;
  uint64_t v303 = 0;
  int v305 = -1;
  long long v313 = 0u;
  long long v314 = 0u;
  v238 = (void ***)&v309;
  v259 = v12;
  v252 = v11;
  v235 = a1;
  v236 = &v310;
  v260 = a2;
  v231 = v5;
  __sb = &v333[1];
  while (2)
  {
    v273[0] = 0;
    v273[1] = 0;
    v274 = 0;
    v242[1] = 0;
    v242[2] = 0;
    *v242 = 0;
    char v278 = 1;
    unint64_t v279 = 0x8000000080000000;
    __int16 v280 = 0;
    char v281 = 0;
    v264[0] = 0;
    v264[1] = 0;
    v265 = 0;
    v243[1] = 0;
    v243[2] = 0;
    *v243 = 0;
    char v269 = 1;
    unint64_t v270 = 0x8000000080000000;
    __int16 v271 = 0;
    char v272 = 0;
    char v275 = 0;
    char v266 = 1;
    uint64_t v13 = v4[1] - *v4;
    if (!v13) {
      goto LABEL_246;
    }
    unint64_t v14 = 0;
    unint64_t v255 = 0x8E38E38E38E38E39 * (v13 >> 4);
    v256 = v4;
    do
    {
      uint64_t v15 = *v4;
      unsigned int v254 = sub_2D0F10(v14);
      uint64_t v368 = 0;
      memset(v367, 0, sizeof(v367));
      memset(v366, 0, sizeof(v366));
      *(_OWORD *)v365 = 0u;
      memset(v364, 0, sizeof(v364));
      uint64_t v16 = v15 + 144 * v14;
      uint64_t v19 = *(void *)(v16 + 16);
      long long v18 = (uint64_t *)(v16 + 16);
      uint64_t v17 = v19;
      uint64_t v20 = *(v18 - 1);
      if (v20 == v19)
      {
        int v102 = 0;
        uint64_t v4 = v256;
LABEL_168:
        *((void *)&v367[2] + 1) = 0xFFFFFFFF00000000;
        LODWORD(v368) = 0;
        BYTE4(v368) = 1;
        *(_OWORD *)((char *)&v367[1] + 8) = v249;
        if (!v102)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        HIDWORD(v367[1]) = HIDWORD(v364[2]);
        LODWORD(v367[2]) = HIDWORD(v364[2]);
        LOBYTE(v357[0]) = v102;
LABEL_170:
        sub_9F6FA0((uint64_t)v350, (long long *)v364);
        BYTE4(v358) = BYTE4(v368);
        if (BYTE4(v368)) {
          goto LABEL_171;
        }
        goto LABEL_173;
      }
      while (2)
      {
        int v21 = *(_DWORD *)(v20 + 1088);
        if (v21)
        {
          if (v21 == 4)
          {
            BOOL v111 = sub_723EC(1u);
            uint64_t v4 = v256;
            if (v111)
            {
              sub_6BAC((uint64_t)v333);
              sub_188FC78(v333, (uint64_t)"The provided journey segment contains a self-transfer journey leg, which cannot be adapted.", 91);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v359, 1u);
              goto LABEL_234;
            }
          }
          else if (BYTE4(v368))
          {
            BOOL v112 = sub_723EC(3u);
            uint64_t v4 = v256;
            if (v112)
            {
              sub_6BAC((uint64_t)v333);
              sub_188FC78(v333, (uint64_t)"The provided journey segment contains multiple non-contiguous sequences of walking journey legs.", 96);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v359, 3u);
              goto LABEL_234;
            }
          }
          else
          {
            uint64_t v22 = v20;
            if (v20 == v17)
            {
LABEL_15:
              uint64_t v22 = v17;
            }
            else
            {
              while ((*(_DWORD *)(v22 + 1088) | 4) != 4)
              {
                v22 += 1096;
                if (v22 == v17) {
                  goto LABEL_15;
                }
              }
            }
            if (v20 == v22)
            {
              BOOL v115 = sub_723EC(3u);
              uint64_t v4 = v256;
              if (v115)
              {
                sub_6BAC((uint64_t)v333);
                sub_188FC78(v333, (uint64_t)"Empty sequence of walking journey legs provided for spa journey leg adaption procedure.", 87);
                std::stringbuf::str();
                sub_7246C((uint64_t *)v359, 3u);
                if (SHIBYTE(v359[2]) < 0)
                {
                  v116 = v359[0];
                  goto LABEL_226;
                }
LABEL_227:
                v333[0] = v258;
                *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
                if (SHIBYTE(v342) < 0) {
                  operator delete(v341);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
            }
            else
            {
              *(void *)&long long v23 = 0xFFFFFFFFLL;
              *((void *)&v23 + 1) = 0xFFFFFFFFLL;
              *(_OWORD *)((char *)&v359[1] + 4) = v23;
              LODWORD(v359[0]) = 0;
              int v24 = sub_499F10((unsigned int *)v20);
              HIDWORD(v359[0]) = v24;
              LODWORD(v359[1]) = sub_49A0F4((unsigned int *)(v22 - 1096));
              if (v24 <= SLODWORD(v359[1]))
              {
                BOOL v25 = v262;
                _OWORD *v262 = *(_OWORD *)v359;
                *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)&v359[1] + 4);
                if (!BYTE4(v368)) {
                  BYTE4(v368) = 1;
                }
                goto LABEL_8;
              }
              BOOL v117 = sub_723EC(3u);
              uint64_t v4 = v256;
              if (v117)
              {
                sub_6BAC((uint64_t)v333);
                v118 = sub_188FC78(v333, (uint64_t)"Adapted spa walking leg departs after it arrives: ", 50);
                v119 = (void *)sub_266E4((uint64_t)v118);
                v120 = sub_188FC78(v119, (uint64_t)" > ", 3);
                v121 = (void *)sub_266E4((uint64_t)v120);
                sub_188FC78(v121, (uint64_t)".", 1);
                std::stringbuf::str();
                sub_7246C((uint64_t *)__p, 3u);
                if (SHIBYTE(v320) < 0)
                {
                  v116 = __p[0];
LABEL_226:
                  operator delete(v116);
                }
                goto LABEL_227;
              }
            }
            if (BYTE4(v368)) {
              BYTE4(v368) = 0;
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)v333);
              sub_188FC78(v333, (uint64_t)"The provided journey segment contains a sequence of walking journey legs, which could not be adapted to a spa walking journey leg.", 130);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v359, 3u);
LABEL_234:
              if (SHIBYTE(v359[2]) < 0) {
                operator delete(v359[0]);
              }
              v333[0] = v258;
              *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
              if (SHIBYTE(v342) < 0) {
                operator delete(v341);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
          }
          goto LABEL_239;
        }
        if (LOBYTE(v367[1]))
        {
          BOOL v113 = sub_723EC(3u);
          uint64_t v4 = v256;
          if (v113)
          {
            sub_6BAC((uint64_t)v333);
            sub_188FC78(v333, (uint64_t)"The provided journey segment contains multiple non-contiguous sequences of public transport journey legs.", 105);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v359, 3u);
            goto LABEL_234;
          }
          goto LABEL_239;
        }
        uint64_t v22 = v20;
        if (v20 == v17)
        {
LABEL_24:
          uint64_t v22 = v17;
        }
        else
        {
          while (!*(_DWORD *)(v22 + 1088))
          {
            v22 += 1096;
            if (v22 == v17) {
              goto LABEL_24;
            }
          }
        }
        if (v20 == v22)
        {
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v333);
            sub_188FC78(v333, (uint64_t)"Empty sequence of public transport journey legs provided in spa journey leg adaption procedure.", 95);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            goto LABEL_47;
          }
          goto LABEL_52;
        }
        unsigned int v26 = *(_DWORD *)(v20 + 16);
        unint64_t v27 = (int *)sub_369F8C(v260[523] + 24, __ROR8__(*(void *)(v20 + 4), 32), 0, "trip");
        unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 < 9u
          || (uint64_t v29 = v28[4]) == 0
          || v26 >= *(int *)((char *)v27 + v29)
          || (uint64_t v31 = (int *)(v22 - 1076),
              unsigned int v30 = *(_DWORD *)(v22 - 1076),
              BOOL v32 = (int *)sub_369F8C(v260[523] + 24, __ROR8__(*(void *)(v22 - 1092), 32), 0, "trip"),
              unint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32),
              *v33 < 9u)
          || (uint64_t v34 = v33[4]) == 0
          || v30 >= *(int *)((char *)v32 + v34))
        {
          if (sub_723EC(3u))
          {
            v333[0] = v253;
            *(void **)((char *)v333 + *((void *)v253 - 3)) = v252;
            long long v45 = (std::ios_base *)((char *)v333 + *((void *)v333[0] - 3));
            std::ios_base::init(v45, __sb);
            v45[1].__vftable = 0;
            v45[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v46 = v251;
            *(_OWORD *)v251 = 0u;
            *((_OWORD *)v46 + 1) = 0u;
            int v344 = 16;
            sub_188FC78(v333, (uint64_t)"Public transport journey leg has a stop index that is out of range.", 67);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            if (SHIBYTE(v320) < 0) {
              operator delete(__p[0]);
            }
            v333[0] = v258;
            *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
            if (SHIBYTE(v342) < 0) {
              operator delete(v341);
            }
            goto LABEL_51;
          }
LABEL_52:
          uint64_t v363 = 0;
          long long v362 = 0u;
          memset(v361, 0, sizeof(v361));
          *(_OWORD *)v360 = 0u;
          memset(v359, 0, sizeof(v359));
LABEL_53:
          if (LOBYTE(v367[1]))
          {
            if (v366[5])
            {
              v366[6] = v366[5];
              operator delete(v366[5]);
            }
            if (v366[1])
            {
              v366[2] = v366[1];
              operator delete(v366[1]);
            }
            if (v365[0])
            {
              v365[1] = v365[0];
              operator delete(v365[0]);
            }
            LOBYTE(v367[1]) = 0;
            goto LABEL_61;
          }
LABEL_218:
          BOOL v114 = sub_723EC(3u);
          uint64_t v4 = v256;
          if (v114)
          {
            sub_6BAC((uint64_t)v333);
            sub_188FC78(v333, (uint64_t)"The provided journey segment contains a sequence of public transport journey legs, which could not be adapted to a spa public transport journey leg.", 148);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v359, 3u);
            goto LABEL_234;
          }
LABEL_239:
          uint64_t v358 = 0;
          memset(v357, 0, sizeof(v357));
          long long v356 = 0u;
          long long v355 = 0u;
          long long v354 = 0u;
          long long v353 = 0u;
          long long v352 = 0u;
          *(_OWORD *)v351 = 0u;
          memset(v350, 0, sizeof(v350));
          if (BYTE4(v368)) {
            goto LABEL_172;
          }
          goto LABEL_173;
        }
        uint64_t v35 = *(void *)(v20 + 4);
        int v36 = *(_DWORD *)(v20 + 16);
        uint64_t v37 = sub_369B60(v260[523] + 24, __ROR8__(v35, 32), 0);
        uint64_t v38 = &v37[-*(int *)v37];
        unsigned int v39 = *(unsigned __int16 *)v38;
        if (v39 <= 4)
        {
          uint64_t v43 = 0;
          int v41 = (int *)(4 * v35 + 4 + dword_4[v35]);
          int v44 = (unsigned __int16 *)((char *)v41 - *v41);
          if (*v44 < 0xDu) {
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v40 = *((unsigned __int16 *)v38 + 2);
          if (*((_WORD *)v38 + 2)) {
            v40 += (uint64_t)&v37[*(unsigned int *)&v37[v40]];
          }
          int v41 = (int *)(v40 + 4 * v35 + 4 + *(unsigned int *)(v40 + 4 * v35 + 4));
          if (v39 >= 7 && (uint64_t v42 = *((unsigned __int16 *)v38 + 3)) != 0)
          {
            uint64_t v43 = (unsigned int *)&v37[v42 + *(unsigned int *)&v37[v42]];
            int v44 = (unsigned __int16 *)((char *)v41 - *v41);
            if (*v44 < 0xDu) {
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v43 = 0;
            int v44 = (unsigned __int16 *)((char *)v41 - *v41);
            if (*v44 < 0xDu) {
              goto LABEL_73;
            }
          }
        }
        uint64_t v47 = v44[6];
        if (v47)
        {
          int v48 = *(int *)((char *)v41 + v47);
          goto LABEL_74;
        }
LABEL_73:
        int v48 = -1;
LABEL_74:
        uint64_t v49 = *(void *)sub_36A650(v43, v48 + v36);
        uint64_t v50 = *(void *)(v22 - 1092);
        int v51 = *v31;
        long long v52 = sub_369B60(v260[523] + 24, __ROR8__(v50, 32), 0);
        long long v53 = &v52[-*(int *)v52];
        unsigned int v54 = *(unsigned __int16 *)v53;
        if (v54 <= 4)
        {
          long long v58 = 0;
          uint64_t v56 = (int *)(4 * v50 + 4 + dword_4[v50]);
          uint64_t v59 = (unsigned __int16 *)((char *)v56 - *v56);
          if (*v59 < 0xDu) {
            goto LABEL_86;
          }
        }
        else
        {
          uint64_t v55 = *((unsigned __int16 *)v53 + 2);
          if (*((_WORD *)v53 + 2)) {
            v55 += (uint64_t)&v52[*(unsigned int *)&v52[v55]];
          }
          uint64_t v56 = (int *)(v55 + 4 * v50 + 4 + *(unsigned int *)(v55 + 4 * v50 + 4));
          if (v54 >= 7 && (uint64_t v57 = *((unsigned __int16 *)v53 + 3)) != 0)
          {
            long long v58 = (unsigned int *)&v52[v57 + *(unsigned int *)&v52[v57]];
            uint64_t v59 = (unsigned __int16 *)((char *)v56 - *v56);
            if (*v59 < 0xDu) {
              goto LABEL_86;
            }
          }
          else
          {
            long long v58 = 0;
            uint64_t v59 = (unsigned __int16 *)((char *)v56 - *v56);
            if (*v59 < 0xDu) {
              goto LABEL_86;
            }
          }
        }
        uint64_t v60 = v59[6];
        if (!v60)
        {
LABEL_86:
          int v61 = -1;
          goto LABEL_87;
        }
        int v61 = *(int *)((char *)v56 + v60);
LABEL_87:
        uint64_t v62 = *(void *)sub_36A650(v58, v61 + v51);
        unint64_t v237 = __ROR8__(v49, 32);
        sub_A1DF34((uint64_t)v328, v260, v237, 0, 0, 0);
        long long v63 = v331;
        if (v331 >= v332) {
          goto LABEL_155;
        }
        uint64_t v230 = __ROR8__(v62, 32);
        v245 = (int *)(v22 - 1060);
        unint64_t v240 = 0xE21A291C077975B9 * ((v22 - v20) >> 3);
        v221 = (_DWORD *)(v20 + 12);
        while (2)
        {
          v241 = (void *)__ROR8__(*v63, 32);
          sub_A1E9A0((uint64_t)__p, (uint64_t)v260, (uint64_t)v241, 0, 0, 0);
          v333[0] = &v370;
          v333[1] = &def_332C + 1;
          uint64_t v369 = v230;
          unint64_t v370 = v237;
          v315 = &v369;
          uint64_t v316 = 1;
          sub_A1EDFC((uint64_t)__p, (uint64_t)v333, (uint64_t)&v315, &v317);
          uint64_t v64 = (unsigned int *)v317;
          v250 = v318;
          if (v317 == v318)
          {
            int v65 = 5;
            if (v317) {
              goto LABEL_139;
            }
            goto LABEL_140;
          }
          do
          {
            uint64_t v68 = *v64;
            uint64_t v67 = v64[1];
            uint64_t v322 = v321 + 16 * v68;
            signed int v69 = *(_DWORD *)(v20 + 24);
            if (v325) {
              char v70 = sub_A1F39C((uint64_t)v260, (uint64_t)__p, v69, 2);
            }
            else {
              char v70 = sub_A1F8B4((uint64_t)__p, v69, 1);
            }
            if ((v70 & 1) == 0) {
              goto LABEL_95;
            }
            uint64_t v71 = *(unsigned __int8 *)(v322 + 14);
            uint64_t v72 = v247;
            if (!v325) {
              uint64_t v72 = v324;
            }
            int v73 = *v72;
            uint64_t v74 = (unsigned int *)((char *)v320 + *(unsigned __int16 *)((char *)v320 - *v320 + 6));
            v75 = (char *)v74 + *v74;
            int v76 = v324[1];
            uint64_t v77 = (*(_DWORD *)&v75[8 * v76 + 8 + 8 * ((unint64_t)(v322 - v321) >> 4)]
                               + v73);
            int v246 = *(_DWORD *)(v322 + 8);
            uint64_t v322 = v321 + 16 * v67;
            if (v77 != *(_DWORD *)(v20 + 24)) {
              goto LABEL_95;
            }
            uint64_t v78 = (*(_DWORD *)&v75[8 * (v76 + v67) + 4] + v73);
            int v79 = *v245;
            uint64_t v244 = v78;
            if (v78 != v79) {
              goto LABEL_95;
            }
            uint64_t v239 = *(unsigned __int8 *)(v321 + 16 * v67 + 14);
            if (v240 != v239 - v71 + 1) {
              goto LABEL_95;
            }
            v80 = (int *)sub_A11094(v248, (unint64_t)v241);
            v81 = (unsigned __int16 *)((char *)v80 - *v80);
            if (*v81 >= 9u && (uint64_t v82 = v81[4]) != 0) {
              v83 = (unsigned int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82));
            }
            else {
              v83 = 0;
            }
            if (*(_DWORD *)(v20 + 16) != *(unsigned __int16 *)(sub_A10764(v83, v68) + 12)) {
              goto LABEL_95;
            }
            v84 = (int *)sub_A11094(v248, (unint64_t)v241);
            v85 = (unsigned __int16 *)((char *)v84 - *v84);
            if (*v85 >= 9u && (uint64_t v86 = v85[4]) != 0) {
              v87 = (unsigned int *)((char *)v84 + v86 + *(unsigned int *)((char *)v84 + v86));
            }
            else {
              v87 = 0;
            }
            if (*v31 != *(unsigned __int16 *)(sub_A10764(v87, v67) + 12)) {
              goto LABEL_95;
            }
            sub_A1DD94(v248, (unint64_t)v241, -1431655765 * (((unint64_t)v324 - v323) >> 2), (uint64_t)&v315);
            v88 = v315;
            if ((char *)v315 + 12 * v71 == (char *)v315 + 12 * v239 + 12)
            {
LABEL_124:
              v228[1] = 0u;
              v228[2] = 0u;
              _OWORD *v228 = 0u;
              int v92 = 10 * v246;
              v227[1] = 0;
              v227[2] = 0;
              *v227 = 0;
              char v347 = 1;
              unint64_t v348 = 0x8000000080000000;
              int v349 = 0;
              unint64_t v93 = 0xFFFFFFFF00000000;
              if (v325) {
                unint64_t v93 = (unint64_t)v326 << 32;
              }
              v94 = (void *)((-1431655765 * (((unint64_t)v324 - v323) >> 2)) | v93);
              if (v325) {
                int v95 = v327;
              }
              else {
                int v95 = 0x7FFFFFFF;
              }
              v336 = v241;
              v337 = v94;
              unint64_t v338 = __PAIR64__(v68, v95);
              LODWORD(v345) = 0x7FFFFFFF;
              int v339 = v67;
              v333[1] = (void *)(v77 | (v77 << 32));
              *(_WORD *)v334 = 0;
              v333[0] = (void *)__PAIR64__(v92, v254);
              *(void *)&v334[4] = v244 | (v244 << 32);
              __int16 v335 = 0;
              LOBYTE(v363) = 1;
              sub_9F6FA0((uint64_t)v359, (long long *)v333);
              if (v346[0])
              {
                v346[1] = v346[0];
                operator delete(v346[0]);
              }
              if (v342)
              {
                v343 = v342;
                operator delete(v342);
              }
              if (*(void *)&v340[4])
              {
                v341 = *(void **)&v340[4];
                operator delete(*(void **)&v340[4]);
              }
              char v66 = 0;
              int v65 = 1;
              v88 = v315;
              if (v315) {
                goto LABEL_93;
              }
            }
            else
            {
              uint64_t v89 = 12 * v71;
              v90 = v221;
              while (1)
              {
                _ZF = *(_DWORD *)((char *)v315 + v89 + 4) == *(v90 - 1) && *(_DWORD *)((char *)v315 + v89) == *(v90 - 2);
                if (!_ZF || *(_DWORD *)((char *)v315 + v89 + 8) != *v90) {
                  break;
                }
                v90 += 274;
                v89 += 12;
                if (12 * v239 + 12 == v89) {
                  goto LABEL_124;
                }
              }
              int v65 = 6;
              char v66 = 1;
              if (v315)
              {
LABEL_93:
                uint64_t v316 = (uint64_t)v88;
                operator delete(v88);
              }
            }
            if ((v66 & 1) == 0) {
              goto LABEL_138;
            }
LABEL_95:
            v64 += 2;
          }
          while (v64 != v250);
          int v65 = 5;
LABEL_138:
          uint64_t v64 = (unsigned int *)v317;
          if (v317)
          {
LABEL_139:
            v318 = v64;
            operator delete(v64);
          }
LABEL_140:
          if (v65 == 5)
          {
            unint64_t v96 = (unint64_t)v332;
            long long v63 = v331 + 2;
            v331 = v63;
            uint64_t v3 = v235;
            unint64_t v9 = v236;
            if (v63 == v332)
            {
              v97 = v329 + 2;
              v329 = v97;
              if ((unint64_t)v97 < v330)
              {
                while (1)
                {
                  long long v63 = (void *)*v97;
                  unint64_t v96 = v97[1];
                  if (*v97 != v96) {
                    break;
                  }
                  v97 += 2;
                  v329 = v97;
                  if ((unint64_t)v97 >= v330) {
                    goto LABEL_155;
                  }
                }
LABEL_146:
                v331 = v63;
                v332 = (void *)v96;
                goto LABEL_147;
              }
            }
            else
            {
LABEL_147:
              while ((unint64_t)v63 < v96)
              {
                BOOL v98 = sub_A1E87C(v328);
                long long v63 = v331;
                unint64_t v96 = (unint64_t)v332;
                if (!v98) {
                  break;
                }
                long long v63 = v331 + 2;
                v331 = v63;
                if (v63 == v332)
                {
                  v99 = v329 + 2;
                  v329 = v99;
                  if ((unint64_t)v99 < v330)
                  {
                    while (1)
                    {
                      long long v63 = (void *)*v99;
                      unint64_t v96 = v99[1];
                      if (*v99 != v96) {
                        goto LABEL_146;
                      }
                      v99 += 2;
                      v329 = v99;
                      if ((unint64_t)v99 >= v330) {
                        goto LABEL_155;
                      }
                    }
                  }
                  goto LABEL_155;
                }
              }
              if ((unint64_t)v63 < v96) {
                continue;
              }
            }
LABEL_155:
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)v333);
              sub_188FC78(v333, (uint64_t)"No matching stop pattern found in transit routing data during spa journey leg adaption procedure.", 97);
              std::stringbuf::str();
              sub_7246C((uint64_t *)__p, 1u);
LABEL_47:
              if (SHIBYTE(v320) < 0) {
                operator delete(__p[0]);
              }
              v333[0] = v258;
              *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
              if (SHIBYTE(v342) < 0) {
                operator delete(v341);
              }
LABEL_51:
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            goto LABEL_52;
          }
          break;
        }
        uint64_t v3 = v235;
        unint64_t v9 = v236;
        if (!(_BYTE)v363) {
          goto LABEL_53;
        }
        *(_OWORD *)v364 = *(_OWORD *)v359;
        *(_OWORD *)&v364[2] = *(_OWORD *)&v359[2];
        *(_OWORD *)&v364[4] = *(_OWORD *)&v359[4];
        *(_OWORD *)((char *)&v364[5] + 4) = *(_OWORD *)((char *)&v359[5] + 4);
        if (LOBYTE(v367[1]))
        {
          if (v365[0])
          {
            v365[1] = v365[0];
            operator delete(v365[0]);
          }
          *(_OWORD *)v365 = *(_OWORD *)v360;
          v366[0] = v361[0];
          v224[1] = 0;
          v224[2] = 0;
          *v224 = 0;
          if (v366[1])
          {
            v366[2] = v366[1];
            operator delete(v366[1]);
          }
          *(_OWORD *)&v366[1] = *(_OWORD *)&v361[1];
          v366[3] = v361[3];
          v225[1] = 0;
          v225[2] = 0;
          *v225 = 0;
          LODWORD(v366[4]) = v361[4];
          if (v366[5])
          {
            v366[6] = v366[5];
            operator delete(v366[5]);
          }
          *(_OWORD *)&v366[5] = *(_OWORD *)&v361[5];
          v366[7] = v361[7];
          v226[1] = 0;
          v226[2] = 0;
          *v226 = 0;
          long long *v223 = *v222;
          uint64_t v3 = v235;
          unint64_t v9 = v236;
        }
        else
        {
          *(_OWORD *)v365 = *(_OWORD *)v360;
          v100 = v361[0];
          v101 = v361[3];
          v224[1] = 0;
          v224[2] = 0;
          *v224 = 0;
          *(_OWORD *)&v366[1] = *(_OWORD *)&v361[1];
          v366[0] = v100;
          v366[3] = v101;
          v225[1] = 0;
          v225[2] = 0;
          *v225 = 0;
          LODWORD(v366[4]) = v361[4];
          *(_OWORD *)&v366[5] = *(_OWORD *)&v361[5];
          v366[7] = v361[7];
          *v226 = 0;
          v226[1] = 0;
          v226[2] = 0;
          long long *v223 = *v222;
          LOBYTE(v367[1]) = 1;
        }
LABEL_61:
        if ((_BYTE)v363)
        {
          if (v361[5])
          {
            v361[6] = v361[5];
            operator delete(v361[5]);
          }
          if (v361[1])
          {
            v361[2] = v361[1];
            operator delete(v361[1]);
          }
          if (v360[0])
          {
            v360[1] = v360[0];
            operator delete(v360[0]);
          }
        }
        if (!LOBYTE(v367[1])) {
          goto LABEL_218;
        }
LABEL_8:
        uint64_t v17 = *v18;
        uint64_t v20 = v22;
        if (v22 != *v18) {
          continue;
        }
        break;
      }
      int v102 = LOBYTE(v367[1]);
      if (!BYTE4(v368))
      {
        uint64_t v4 = v256;
        goto LABEL_168;
      }
      LOBYTE(v357[0]) = v367[1];
      uint64_t v4 = v256;
      if (LOBYTE(v367[1])) {
        goto LABEL_170;
      }
      BYTE4(v358) = BYTE4(v368);
LABEL_171:
      v103 = v262;
      v104 = v257;
      _OWORD *v257 = *v262;
      *(_OWORD *)((char *)v104 + 12) = *(_OWORD *)((char *)v103 + 12);
      if (BYTE4(v368)) {
LABEL_172:
      }
        BYTE4(v368) = 0;
LABEL_173:
      if (LOBYTE(v367[1]))
      {
        if (v366[5])
        {
          v366[6] = v366[5];
          operator delete(v366[5]);
        }
        if (v366[1])
        {
          v366[2] = v366[1];
          operator delete(v366[1]);
        }
        if (v365[0])
        {
          v365[1] = v365[0];
          operator delete(v365[0]);
        }
      }
      int v105 = BYTE4(v358);
      if (BYTE4(v358))
      {
        if (LOBYTE(v357[0]))
        {
          v106 = (char *)v273[1];
          if (v273[1] >= v274)
          {
            v107 = (void *)sub_A20D18((uint64_t *)v273, (uint64_t)v350);
          }
          else
          {
            *((_DWORD *)v273[1] + 40) = -1;
            sub_A20F00((uint64_t)v106, (uint64_t)v350);
            v107 = v106 + 168;
          }
          v273[1] = v107;
        }
        v108 = (char *)v264[1];
        if (v264[1] >= v265)
        {
          v110 = sub_A21164(v264, v257);
        }
        else
        {
          *((_DWORD *)v264[1] + 40) = -1;
          long long v109 = *v257;
          *(_OWORD *)(v108 + 12) = *(_OWORD *)((char *)v257 + 12);
          *(_OWORD *)v108 = v109;
          *((_DWORD *)v108 + 40) = 1;
          v110 = v108 + 168;
        }
        v264[1] = v110;
      }
      else
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v333);
          sub_188FC78(v333, (uint64_t)"Journey segment adaption resulted in invalid walking spa journey leg, which must not happen.", 92);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v364, 3u);
          if (SHIBYTE(v364[2]) < 0) {
            operator delete(v364[0]);
          }
          v333[0] = v258;
          *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
          if (SHIBYTE(v342) < 0) {
            operator delete(v341);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v3[17] = 0u;
        v3[18] = 0u;
        v3[15] = 0u;
        v3[16] = 0u;
        v3[13] = 0u;
        v3[14] = 0u;
        v3[11] = 0u;
        v3[12] = 0u;
        v3[9] = 0u;
        v3[10] = 0u;
        v3[7] = 0u;
        v3[8] = 0u;
        v3[5] = 0u;
        v3[6] = 0u;
        v3[3] = 0u;
        v3[4] = 0u;
        v3[1] = 0u;
        v3[2] = 0u;
        _OWORD *v3 = 0u;
      }
      if (BYTE4(v358)) {
        BYTE4(v358) = 0;
      }
      if (LOBYTE(v357[0]))
      {
        if (*((void *)&v354 + 1))
        {
          *(void *)&long long v355 = *((void *)&v354 + 1);
          operator delete(*((void **)&v354 + 1));
        }
        if (*((void *)&v352 + 1))
        {
          *(void *)&long long v353 = *((void *)&v352 + 1);
          operator delete(*((void **)&v352 + 1));
        }
        if (v351[0])
        {
          v351[1] = v351[0];
          operator delete(v351[0]);
        }
      }
      if (!v105) {
        goto LABEL_300;
      }
      ++v14;
    }
    while (v14 != v255);
    uint64_t v5 = v231;
    if (v273[0] == v273[1])
    {
LABEL_246:
      v124 = (void **)*((void *)&v309 + 1);
      if (*((void *)&v309 + 1) < (unint64_t)v310) {
        goto LABEL_247;
      }
LABEL_250:
      *((void *)&v309 + 1) = sub_A21340(v238, (uint64_t)v264);
      if (v267[0])
      {
        v267[1] = v267[0];
        operator delete(v267[0]);
      }
LABEL_252:
      v126 = (char *)v264[0];
      if (v264[0])
      {
        v127 = (char *)v264[1];
        v128 = v264[0];
        if (v264[1] != v264[0])
        {
          do
          {
            if (!*((_DWORD *)v127 - 2))
            {
              v129 = (void *)*((void *)v127 - 6);
              if (v129)
              {
                *((void *)v127 - 5) = v129;
                operator delete(v129);
              }
              v130 = (void *)*((void *)v127 - 10);
              if (v130)
              {
                *((void *)v127 - 9) = v130;
                operator delete(v130);
              }
              v131 = (void *)*((void *)v127 - 13);
              if (v131)
              {
                *((void *)v127 - 12) = v131;
                operator delete(v131);
              }
            }
            v127 -= 168;
          }
          while (v127 != v126);
          v128 = v264[0];
        }
        v264[1] = v126;
        operator delete(v128);
      }
      if (v276[0])
      {
        v276[1] = v276[0];
        operator delete(v276[0]);
      }
      v132 = (char *)v273[0];
      if (v273[0])
      {
        v133 = (char *)v273[1];
        v134 = v273[0];
        if (v273[1] != v273[0])
        {
          do
          {
            if (!*((_DWORD *)v133 - 2))
            {
              v135 = (void *)*((void *)v133 - 6);
              if (v135)
              {
                *((void *)v133 - 5) = v135;
                operator delete(v135);
              }
              v136 = (void *)*((void *)v133 - 10);
              if (v136)
              {
                *((void *)v133 - 9) = v136;
                operator delete(v136);
              }
              v137 = (void *)*((void *)v133 - 13);
              if (v137)
              {
                *((void *)v133 - 12) = v137;
                operator delete(v137);
              }
            }
            v133 -= 168;
          }
          while (v133 != v132);
          v134 = v273[0];
        }
        v273[1] = v132;
        operator delete(v134);
      }
      v4 += 8;
      if (v4 == v5)
      {
        uint64_t v138 = v309;
        if (*(unsigned char *)(v309 + 24) != 1)
        {
          uint64_t v139 = sub_A1D7E0((void *)v309, 0);
          v333[1] = 0;
          v333[0] = 0;
          *(void *)v334 = 0;
          unint64_t v338 = 0;
          v336 = 0;
          v337 = 0;
          LOBYTE(v339) = 1;
          *(void *)v340 = 0x8000000080000000;
          *(_WORD *)&v340[8] = 0;
          v340[10] = 0;
          v334[8] = 1;
          *(void **)((char *)&v364[2] + 4) = (void *)0xFFFFFFFFLL;
          int v140 = *(_DWORD *)(v139 + 160);
          int v141 = *(_DWORD *)(v139 + 8);
          if (v140) {
            int v142 = 0;
          }
          else {
            int v142 = *(_DWORD *)(v139 + 4);
          }
          if (v140) {
            int v141 = *(_DWORD *)(v139 + 4);
          }
          int v143 = v142 / -10;
          int v144 = v142 % 10;
          if (v142 < 0) {
            char v145 = -5;
          }
          else {
            char v145 = 5;
          }
          LODWORD(v364[0]) = 0;
          HIDWORD(v364[0]) = v143
                           + v141
                           + (((-103 * (char)(v145 + v144)) >> 15) & 1)
                           + ((-103 * (char)(v145 + v144)) >> 10);
          LODWORD(v364[1]) = HIDWORD(v364[0]);
          *(void **)((char *)&v364[1] + 4) = (void *)0x1FFFFFFFELL;
          if (v140)
          {
            *(void **)((char *)&v364[2] + 4) = *(void **)(v139 + 12);
            goto LABEL_350;
          }
          unsigned int v161 = *(_DWORD *)(v139 + 52);
          v162 = (int *)sub_A11094(v248, *(void *)(v139 + 32));
          v163 = (unsigned __int16 *)((char *)v162 - *v162);
          if (*v163 >= 9u && (uint64_t v164 = v163[4]) != 0) {
            v165 = (unsigned int *)((char *)v162 + v164 + *(unsigned int *)((char *)v162 + v164));
          }
          else {
            v165 = 0;
          }
          v166 = (void *)sub_A10764(v165, v161);
          v167 = (char *)v333[1];
          *(void **)((char *)&v364[2] + 4) = (void *)__ROR8__(*v166, 32);
          if (v333[1] >= (void *)*(void *)v334)
          {
LABEL_350:
            v169 = sub_A21588(v333, v364);
          }
          else
          {
            long long v168 = *(_OWORD *)v364;
            *(_OWORD *)((char *)v333[1] + 12) = *(_OWORD *)((char *)&v364[1] + 4);
            *(_OWORD *)v167 = v168;
            *((_DWORD *)v167 + 40) = 1;
            v169 = v167 + 168;
          }
          v333[1] = v169;
          sub_A1DA20((char **)v238, (char *)v309, (unint64_t)v333);
          if (v336)
          {
            v337 = v336;
            operator delete(v336);
          }
          v170 = (char *)v333[0];
          if (v333[0])
          {
            v171 = (char *)v333[1];
            v172 = v333[0];
            if (v333[1] != v333[0])
            {
              do
              {
                if (!*((_DWORD *)v171 - 2))
                {
                  v173 = (void *)*((void *)v171 - 6);
                  if (v173)
                  {
                    *((void *)v171 - 5) = v173;
                    operator delete(v173);
                  }
                  v174 = (void *)*((void *)v171 - 10);
                  if (v174)
                  {
                    *((void *)v171 - 9) = v174;
                    operator delete(v174);
                  }
                  v175 = (void *)*((void *)v171 - 13);
                  if (v175)
                  {
                    *((void *)v171 - 12) = v175;
                    operator delete(v175);
                  }
                }
                v171 -= 168;
              }
              while (v171 != v170);
              v172 = v333[0];
            }
            v333[1] = v170;
            operator delete(v172);
          }
          uint64_t v138 = v309;
        }
        if (*((void *)&v309 + 1) == v138)
        {
LABEL_434:
          *((unsigned char *)v235 + 296) = 1;
          sub_9F68D4((uint64_t)v235, (long long *)&v282);
          unint64_t v9 = v236;
          goto LABEL_330;
        }
        uint64_t v176 = 0;
        unint64_t v261 = 0x8E38E38E38E38E39 * ((*((void *)&v309 + 1) - v138) >> 3);
        while (1)
        {
          uint64_t v177 = v309 + 72 * v176;
          if (*(unsigned char *)(v177 + 24) == 1)
          {
            uint64_t v178 = *(void *)(v177 + 8) - *(void *)v177;
            if (v178) {
              break;
            }
          }
LABEL_369:
          if (++v176 == v261) {
            goto LABEL_434;
          }
        }
        uint64_t v179 = 0;
        v180 = 0;
        v262 = (_OWORD *)(v176 - 1);
        __sb = (void *)(v178 / 168);
        uint64_t v181 = v176 + 1;
        while (2)
        {
          uint64_t v183 = *(void *)v177;
          if (v176)
          {
            uint64_t v184 = sub_A1D7E0((void *)(v309 + 72 * (void)v262), (unint64_t)v180);
            if (*(_DWORD *)(v184 + 160))
            {
              uint64_t v185 = *(void *)(v184 + 20);
            }
            else
            {
              unint64_t v186 = *(void *)(v184 + 32);
              unsigned int v187 = *(_DWORD *)(v184 + 56);
              if (sub_A10E20(v248, SHIDWORD(v186)))
              {
                v188 = (int *)sub_A1120C(*(void *)(*v248 + 3944), v186);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v218 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                }
                uint64_t v189 = *v248;
                if (dword_24F7300 == HIDWORD(v186))
                {
                  v190 = sub_A10AD4(*(void *)(v189 + 3976));
                  v191 = &v190[-*(int *)v190];
                  if (*(unsigned __int16 *)v191 >= 5u && (uint64_t v192 = *((unsigned __int16 *)v191 + 2)) != 0) {
                    v193 = (unsigned int *)&v190[v192 + *(unsigned int *)&v190[v192]];
                  }
                  else {
                    v193 = 0;
                  }
                  v188 = (int *)sub_A1139C(v193, v186);
                }
                else
                {
                  v188 = (int *)sub_A11500(v189 + 24, v186, 0, "stop pattern");
                }
              }
              v194 = (unsigned __int16 *)((char *)v188 - *v188);
              if (*v194 >= 9u && (uint64_t v195 = v194[4]) != 0) {
                v196 = (unsigned int *)((char *)v188 + v195 + *(unsigned int *)((char *)v188 + v195));
              }
              else {
                v196 = 0;
              }
              uint64_t v185 = __ROR8__(*(void *)sub_A10764(v196, v187), 32);
            }
          }
          else
          {
            uint64_t v185 = 0x1FFFFFFFELL;
          }
          uint64_t v197 = v183 + v179;
          *(void *)(v183 + v179 + 12) = v185;
          if (v181 == 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v309 + 1) - v309) >> 3))
          {
            LODWORD(v198) = -3;
            *(void *)(v197 + 20) = 0x1FFFFFFFDLL;
            if (*(_DWORD *)(v197 + 16) == 1) {
              goto LABEL_416;
            }
LABEL_375:
            ++v180;
            v179 += 168;
            if (__sb == v180) {
              goto LABEL_369;
            }
            continue;
          }
          break;
        }
        uint64_t v199 = sub_A1D7E0((void *)(v309 + 72 * v181), 0);
        if (*(_DWORD *)(v199 + 160))
        {
          uint64_t v198 = *(void *)(v199 + 12);
          *(void *)(v197 + 20) = v198;
          if (*(_DWORD *)(v197 + 16) != HIDWORD(v198)) {
            goto LABEL_375;
          }
        }
        else
        {
          unint64_t v200 = *(void *)(v199 + 32);
          unsigned int v201 = *(_DWORD *)(v199 + 52);
          if (sub_A10E20(v248, SHIDWORD(v200)))
          {
            v202 = (int *)sub_A1120C(*(void *)(*v248 + 3944), v200);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v219 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v203 = *v248;
            if (dword_24F7300 == HIDWORD(v200))
            {
              v204 = sub_A10AD4(*(void *)(v203 + 3976));
              v205 = &v204[-*(int *)v204];
              if (*(unsigned __int16 *)v205 >= 5u && (uint64_t v206 = *((unsigned __int16 *)v205 + 2)) != 0) {
                v207 = (unsigned int *)&v204[v206 + *(unsigned int *)&v204[v206]];
              }
              else {
                v207 = 0;
              }
              v202 = (int *)sub_A1139C(v207, v200);
            }
            else
            {
              v202 = (int *)sub_A11500(v203 + 24, v200, 0, "stop pattern");
            }
          }
          v208 = (unsigned __int16 *)((char *)v202 - *v202);
          if (*v208 >= 9u && (uint64_t v209 = v208[4]) != 0) {
            v210 = (unsigned int *)((char *)v202 + v209 + *(unsigned int *)((char *)v202 + v209));
          }
          else {
            v210 = 0;
          }
          uint64_t v198 = __ROR8__(*(void *)sub_A10764(v210, v201), 32);
          *(void *)(v197 + 20) = v198;
          if (*(_DWORD *)(v197 + 16) != HIDWORD(v198)) {
            goto LABEL_375;
          }
        }
LABEL_416:
        if (*(_DWORD *)(v197 + 12) != v198) {
          goto LABEL_375;
        }
        unint64_t v211 = *(void *)(v197 + 12);
        if (HIDWORD(v211) == 1 && (v211 + 3) < 2)
        {
LABEL_373:
          unsigned int v182 = 0;
          goto LABEL_374;
        }
        uint64_t v213 = v260[515];
        uint64_t v214 = v213 + 24;
        if (*(unsigned char *)(v213 + 17))
        {
          v215 = (int *)sub_A1A290(v214, v211, 0, "transfers at stop");
          v216 = (unsigned __int16 *)((char *)v215 - *v215);
          if (*v216 < 5u) {
            goto LABEL_373;
          }
          unsigned int v182 = v216[2];
          if (!v182)
          {
LABEL_374:
            *(_DWORD *)(v183 + v179 + 8) = *(_DWORD *)(v183 + v179 + 4) + v182;
            goto LABEL_375;
          }
        }
        else
        {
          v215 = (int *)sub_498D5C(v214, __ROR8__(v211, 32), 0, "stop");
          v217 = (unsigned __int16 *)((char *)v215 - *v215);
          if (*v217 < 0x15u || (unsigned int v182 = v217[10]) == 0)
          {
            unsigned int v182 = 30;
            goto LABEL_374;
          }
        }
        unsigned int v182 = *(int *)((char *)v215 + v182);
        goto LABEL_374;
      }
      continue;
    }
    break;
  }
  if ((char *)v273[1] - (char *)v273[0] == (char *)v264[1] - (char *)v264[0])
  {
    uint64_t v122 = *((void *)&v309 + 1);
    if (*((void *)&v309 + 1) >= (unint64_t)v310)
    {
      v124 = sub_A21340(v238, (uint64_t)v273);
    }
    else
    {
      *(void *)(*((void *)&v309 + 1) + 8) = 0;
      *(void *)(v122 + 16) = 0;
      *(void *)uint64_t v122 = 0;
      *(_OWORD *)uint64_t v122 = *(_OWORD *)v273;
      *(void *)(v122 + 16) = v274;
      v273[0] = 0;
      v273[1] = 0;
      v274 = 0;
      *(unsigned char *)(v122 + 24) = v275;
      *(void *)(v122 + 40) = 0;
      *(void *)(v122 + 48) = 0;
      *(void *)(v122 + 32) = 0;
      *(_OWORD *)(v122 + 32) = *(_OWORD *)v276;
      *(void *)(v122 + 48) = v277;
      *v242 = 0;
      v242[1] = 0;
      v242[2] = 0;
      uint64_t v123 = *(void *)v229;
      *(void *)(v122 + 63) = *(void *)(v229 + 7);
      *(void *)(v122 + 56) = v123;
      v124 = (void **)(v122 + 72);
    }
    *((void *)&v309 + 1) = v124;
    if ((unint64_t)v124 >= (unint64_t)v310) {
      goto LABEL_250;
    }
LABEL_247:
    v124[1] = 0;
    v124[2] = 0;
    *v124 = 0;
    *(_OWORD *)v124 = *(_OWORD *)v264;
    v124[2] = v265;
    v264[0] = 0;
    v264[1] = 0;
    v265 = 0;
    *((unsigned char *)v124 + 24) = v266;
    v124[5] = 0;
    v124[6] = 0;
    v124[4] = 0;
    *((_OWORD *)v124 + 2) = *(_OWORD *)v267;
    v124[6] = v268;
    *v243 = 0;
    v243[1] = 0;
    v243[2] = 0;
    v125 = *(void **)v232;
    *(void **)((char *)v124 + 63) = *(void **)(v232 + 7);
    v124[7] = v125;
    *((void *)&v309 + 1) = v124 + 9;
    goto LABEL_252;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v333);
    sub_188FC78(v333, (uint64_t)"Journey bundle adaption resulted in public transport and walking bundles of different sizes.", 92);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v364, 3u);
    if (SHIBYTE(v364[2]) < 0) {
      operator delete(v364[0]);
    }
    v333[0] = v258;
    *(void **)((char *)v333 + *((void *)v258 - 3)) = v259;
    if (SHIBYTE(v342) < 0) {
      operator delete(v341);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v3[17] = 0u;
  v3[18] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  _OWORD *v3 = 0u;
LABEL_300:
  if (v267[0])
  {
    v267[1] = v267[0];
    operator delete(v267[0]);
  }
  v146 = (char *)v264[0];
  if (v264[0])
  {
    v147 = (char *)v264[1];
    v148 = v264[0];
    if (v264[1] != v264[0])
    {
      do
      {
        if (!*((_DWORD *)v147 - 2))
        {
          v149 = (void *)*((void *)v147 - 6);
          if (v149)
          {
            *((void *)v147 - 5) = v149;
            operator delete(v149);
          }
          v150 = (void *)*((void *)v147 - 10);
          if (v150)
          {
            *((void *)v147 - 9) = v150;
            operator delete(v150);
          }
          v151 = (void *)*((void *)v147 - 13);
          if (v151)
          {
            *((void *)v147 - 12) = v151;
            operator delete(v151);
          }
        }
        v147 -= 168;
      }
      while (v147 != v146);
      v148 = v264[0];
    }
    v264[1] = v146;
    operator delete(v148);
  }
  if (v276[0])
  {
    v276[1] = v276[0];
    operator delete(v276[0]);
  }
  v152 = (char *)v273[0];
  if (v273[0])
  {
    v153 = (char *)v273[1];
    v154 = v273[0];
    if (v273[1] != v273[0])
    {
      do
      {
        if (!*((_DWORD *)v153 - 2))
        {
          v155 = (void *)*((void *)v153 - 6);
          if (v155)
          {
            *((void *)v153 - 5) = v155;
            operator delete(v155);
          }
          v156 = (void *)*((void *)v153 - 10);
          if (v156)
          {
            *((void *)v153 - 9) = v156;
            operator delete(v156);
          }
          v157 = (void *)*((void *)v153 - 13);
          if (v157)
          {
            *((void *)v153 - 12) = v157;
            operator delete(v157);
          }
        }
        v153 -= 168;
      }
      while (v153 != v152);
      v154 = v273[0];
    }
    v273[1] = v152;
    operator delete(v154);
  }
LABEL_330:
  if (*((void *)&v313 + 1))
  {
    *(void *)&long long v314 = *((void *)&v313 + 1);
    operator delete(*((void **)&v313 + 1));
  }
  if ((void)v312)
  {
    *((void *)&v312 + 1) = v312;
    operator delete((void *)v312);
  }
  if (*((void *)&v310 + 1))
  {
    *(void *)&long long v311 = *((void *)&v310 + 1);
    operator delete(*((void **)&v310 + 1));
  }
  v158 = (void **)v309;
  if ((void)v309)
  {
    v159 = (void **)*((void *)&v309 + 1);
    v160 = (void *)v309;
    if (*((void *)&v309 + 1) != (void)v309)
    {
      do
      {
        v159 -= 9;
        sub_9F5F58((uint64_t)v9, v159);
      }
      while (v159 != v158);
      v160 = (void *)v309;
    }
    *((void *)&v309 + 1) = v158;
    operator delete(v160);
  }
  if (SHIBYTE(v303) < 0) {
    operator delete(v301);
  }
}

void sub_A1D394(_Unwind_Exception *a1)
{
}

uint64_t sub_A1D608(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(void *)(a1 + 256) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void ***)(a1 + 200);
  if (v5)
  {
    unsigned int v6 = *(void ***)(a1 + 208);
    uint64_t v7 = *(void **)(a1 + 200);
    if (v6 != v5)
    {
      do
      {
        v6 -= 9;
        sub_9F5F58(a1 + 216, v6);
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  return a1;
}

uint64_t sub_A1D6C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 196)) {
    *(unsigned char *)(a1 + 196) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v2 = *(void **)(a1 + 120);
    if (v2)
    {
      *(void *)(a1 + 128) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 88);
    if (v3)
    {
      *(void *)(a1 + 96) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 64);
    if (v4)
    {
      *(void *)(a1 + 72) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  return a1;
}

void **sub_A1D734(void **a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (char *)*a1;
  if (*a1)
  {
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        if (!*((_DWORD *)v4 - 2))
        {
          unsigned int v6 = (void *)*((void *)v4 - 6);
          if (v6)
          {
            *((void *)v4 - 5) = v6;
            operator delete(v6);
          }
          uint64_t v7 = (void *)*((void *)v4 - 10);
          if (v7)
          {
            *((void *)v4 - 9) = v7;
            operator delete(v7);
          }
          unint64_t v8 = (void *)*((void *)v4 - 13);
          if (v8)
          {
            *((void *)v4 - 12) = v8;
            operator delete(v8);
          }
        }
        v4 -= 168;
      }
      while (v4 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_A1D7E0(void *a1, unint64_t a2)
{
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unsigned int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 168 * a2;
}

void sub_A1D940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_A1DA20(char **a1, char *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  long long v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v13 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v34 = a1 + 2;
    if (v15)
    {
      if (v15 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      std::string v16 = (char *)operator new(72 * v15);
    }
    else
    {
      std::string v16 = 0;
    }
    unsigned int v30 = v16;
    uint64_t v31 = &v16[72 * v8];
    BOOL v32 = v31;
    uint64_t v33 = &v16[72 * v15];
    sub_A218D4((uint64_t)&v30, a3);
    std::string v17 = v31;
    std::string v18 = *a1;
    long long v19 = v31;
    if (*a1 != v4)
    {
      uint64_t v20 = 0;
      do
      {
        int v21 = &v17[v20];
        uint64_t v22 = &v4[v20];
        *((void *)v21 - 9) = 0;
        *((void *)v21 - 8) = 0;
        *((void *)v21 - 7) = 0;
        *(_OWORD *)(v21 - 72) = *(_OWORD *)&v4[v20 - 72];
        *((void *)v21 - 7) = *(void *)&v4[v20 - 56];
        *((void *)v22 - 8) = 0;
        *((void *)v22 - 7) = 0;
        *((void *)v22 - 9) = 0;
        *(v21 - 48) = v4[v20 - 48];
        *((void *)v21 - 4) = 0;
        *((void *)v21 - 3) = 0;
        *((void *)v21 - 5) = 0;
        *(_OWORD *)(v21 - 40) = *(_OWORD *)&v4[v20 - 40];
        *((void *)v21 - 3) = *(void *)&v4[v20 - 24];
        *((void *)v22 - 5) = 0;
        *((void *)v22 - 4) = 0;
        *((void *)v22 - 3) = 0;
        uint64_t v23 = *(void *)&v4[v20 - 16];
        *(void *)(v21 - 9) = *(void *)&v4[v20 - 9];
        *((void *)v21 - 2) = v23;
        v20 -= 72;
      }
      while (&v4[v20] != v18);
      long long v19 = &v17[v20];
    }
    uint64_t v31 = v19;
    int v24 = a1[1];
    BOOL v25 = v32;
    if (v24 != v4)
    {
      do
      {
        *(void *)BOOL v25 = 0;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
        *(_OWORD *)BOOL v25 = *(_OWORD *)v4;
        *((void *)v25 + 2) = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)uint64_t v4 = 0;
        v25[24] = v4[24];
        *((void *)v25 + 5) = 0;
        *((void *)v25 + 6) = 0;
        *((void *)v25 + 4) = 0;
        *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
        *((void *)v25 + 6) = *((void *)v4 + 6);
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        uint64_t v26 = *((void *)v4 + 7);
        *(void *)(v25 + 63) = *(void *)(v4 + 63);
        *((void *)v25 + 7) = v26;
        v25 += 72;
        v4 += 72;
      }
      while (v4 != v24);
      long long v19 = v31;
      uint64_t v4 = a1[1];
    }
    unint64_t v27 = *a1;
    *a1 = v19;
    a1[1] = v25;
    unint64_t v28 = a1[2];
    a1[2] = v33;
    BOOL v32 = v4;
    uint64_t v33 = v28;
    unsigned int v30 = v27;
    uint64_t v31 = v27;
    if (v4 != v27)
    {
      do
      {
        BOOL v32 = v4 - 72;
        sub_9F5F58((uint64_t)v34, (void **)v4 - 9);
        uint64_t v4 = v32;
      }
      while (v32 != v27);
      uint64_t v4 = v30;
    }
    if (v4) {
      operator delete(v4);
    }
    return v17;
  }
  else if (a2 == (char *)v6)
  {
    sub_9F6D1C(a2, a3);
    a1[1] = v4 + 72;
  }
  else
  {
    sub_A21764((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 72));
    if ((unint64_t)v4 <= a3) {
      a3 += 72 * ((unint64_t)a1[1] > a3);
    }
    if (v4 != (char *)a3)
    {
      sub_A21BFC((uint64_t *)v4, *(void *)a3, *(void *)(a3 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
      int v10 = &v7[72 * v8];
      v10[24] = *(unsigned char *)(a3 + 24);
      sub_9094A4((void *)v10 + 4, *(char **)(a3 + 32), *(char **)(a3 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
    }
    uint64_t v11 = *(void *)(a3 + 56);
    unint64_t v12 = &v7[72 * v8];
    *(void *)(v12 + 63) = *(void *)(a3 + 63);
    *((void *)v12 + 7) = v11;
  }
  return v4;
}

void sub_A1DD78(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_A1DD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A21530((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_A1DD94@<X0>(void *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5 = a2;
  uint64_t result = sub_A10650(a1, a2);
  unint64_t v8 = (int *)result;
  unint64_t v9 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&result[*(unsigned int *)&result[v10]];
    }
  }
  uint64_t v11 = (int *)(v10 + 4 * v5 + 4 + *(unsigned int *)(v10 + 4 * v5 + 4));
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 0x11u)
  {
    int v14 = *(int *)((char *)v11 + v12[2] + *(unsigned int *)((char *)v11 + v12[2]));
    unsigned int v15 = v14 * a3;
    unsigned int v16 = v14 + v14 * a3;
    if (v14 * a3 <= v16) {
      int v17 = v14 + v14 * a3;
    }
    else {
      int v17 = v14 * a3;
    }
    if (v15 >= v16) {
      return result;
    }
  }
  else
  {
    if (v12[8]) {
      int v13 = *(int *)((char *)v11 + v12[8]);
    }
    else {
      int v13 = 0;
    }
    int v21 = *(int *)((char *)v11 + v12[2] + *(unsigned int *)((char *)v11 + v12[2]));
    unsigned int v15 = v13 + v21 * a3;
    uint64_t v22 = v12[8];
    if (v22)
    {
      unsigned int v23 = v21 + v21 * a3 + *(int *)((char *)v11 + v22);
      if (v15 <= v23) {
        int v17 = v23;
      }
      else {
        int v17 = v13 + v21 * a3;
      }
      if (v15 >= v23) {
        return result;
      }
    }
    else
    {
      unsigned int v24 = v21 + v21 * a3;
      if (v15 <= v24) {
        int v17 = v21 + v21 * a3;
      }
      else {
        int v17 = v13 + v21 * a3;
      }
      if (v15 >= v24) {
        return result;
      }
    }
  }
  do
  {
    std::string v18 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v18 >= 0xBu && (uint64_t v19 = v18[5]) != 0) {
      uint64_t v20 = (unsigned int *)((char *)v8 + v19 + *(unsigned int *)((char *)v8 + v19));
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v25 = sub_A108C4(v20, v15);
    uint64_t result = sub_A20BAC((char **)a4, &v25);
    ++v15;
  }
  while (v17 != v15);
  return result;
}

void sub_A1DF18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A1DF34(uint64_t a1, void *a2, unint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 56) = a1 + 8;
  unint64_t v9 = (unint64_t **)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 56;
  *(unsigned char *)(a1 + 88) = a4;
  *(unsigned char *)(a1 + 89) = a5;
  *(unsigned char *)(a1 + 90) = a6;
  if (HIDWORD(a3) == 1 && (a3 + 3) < 2) {
    return a1;
  }
  uint64_t v11 = (int *)sub_A1E208((uint64_t)(a2 + 3), a3, 0, "stop patterns at stop");
  unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u)
  {
    uint64_t v13 = v12[2];
    if (v13)
    {
      int v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
      uint64_t v15 = *v14;
      if (v15)
      {
        unsigned int v16 = v14 + 1;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = &v16[4 * v15];
      }
    }
  }
  if (!*(unsigned char *)(a1 + 89))
  {
    uint64_t v17 = a2[515];
    if (sub_C259C0(v17 + 3896))
    {
      if (*(void *)(v17 + 3944))
      {
        uint64_t v18 = *(void *)(a2[515] + 3944);
        unint64_t v44 = a3;
        if (sub_A1E760((void *)(v18 + 88), (uint64_t *)&v44))
        {
          uint64_t v19 = a2[493];
          unint64_t v44 = a3;
          uint64_t v20 = sub_A1E760((void *)(v19 + 88), (uint64_t *)&v44);
          if (!v20) {
            goto LABEL_41;
          }
          int v21 = (unsigned int *)(v20[7] + *(unsigned int *)v20[7]);
          uint64_t v22 = (int)*v21;
          uint64_t v23 = *(unsigned __int16 *)((char *)v21 - v22 + 4);
          if (*(_WORD *)((char *)v21 - v22 + 4))
          {
            uint64_t v24 = *(unsigned int *)((char *)v21 + v23);
            uint64_t v25 = (char *)v21 + v23 + v24;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v25 = 0;
            uint64_t v24 = *v21;
          }
          uint64_t v26 = v25 + 4;
          *(void *)(a1 + 24) = v26;
          *(void *)(a1 + 32) = &v26[16 * *(unsigned int *)((char *)v21 + v23 + v24)];
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 90))
  {
    uint64_t v27 = a2[515];
    if (sub_C259D4(v27 + 3896))
    {
      if (*(void *)(v27 + 3960))
      {
        uint64_t v28 = *(void *)(a2[515] + 3976);
        if (v28)
        {
          unint64_t v44 = a3;
          if (sub_A1E760((void *)(v28 + 88), (uint64_t *)&v44))
          {
            uint64_t v29 = a2[497];
            unint64_t v44 = a3;
            unsigned int v30 = sub_A1E760((void *)(v29 + 88), (uint64_t *)&v44);
            if (v30)
            {
              uint64_t v31 = (unsigned int *)(v30[7] + *(unsigned int *)v30[7]);
              uint64_t v32 = (int)*v31;
              uint64_t v33 = *(unsigned __int16 *)((char *)v31 - v32 + 4);
              if (*(_WORD *)((char *)v31 - v32 + 4))
              {
                uint64_t v34 = *(unsigned int *)((char *)v31 + v33);
                uint64_t v35 = (char *)v31 + v33 + v34;
              }
              else
              {
                uint64_t v33 = 0;
                uint64_t v35 = 0;
                uint64_t v34 = *v31;
              }
              int v36 = v35 + 4;
              *(void *)(a1 + 40) = v36;
              *(void *)(a1 + 48) = &v36[16 * *(unsigned int *)((char *)v31 + v33 + v34)];
              goto LABEL_27;
            }
LABEL_41:
            sub_5AE8("unordered_map::at: key not found");
          }
        }
      }
    }
  }
LABEL_27:
  uint64_t v38 = *(unint64_t **)(a1 + 56);
  unint64_t v37 = *(void *)(a1 + 64);
  if ((unint64_t)v38 < v37)
  {
    while (1)
    {
      unint64_t v39 = v38[1];
      if (*v38 != v39) {
        break;
      }
      v38 += 2;
      char *v9 = v38;
      if ((unint64_t)v38 >= v37) {
        goto LABEL_32;
      }
    }
    *(void *)(a1 + 72) = *v38;
    *(void *)(a1 + 80) = v39;
  }
LABEL_32:
  unint64_t v40 = *(void *)(a1 + 72);
  unint64_t v41 = *(void *)(a1 + 80);
  while (v40 < v41 && sub_A1E87C((void *)a1))
  {
    unint64_t v41 = *(void *)(a1 + 80);
    unint64_t v40 = *(void *)(a1 + 72) + 16;
    *(void *)(a1 + 72) = v40;
    if (v40 == v41)
    {
      unint64_t v42 = *(void *)(a1 + 64);
      uint64_t v43 = (unint64_t *)(*(void *)(a1 + 56) + 16);
      *(void *)(a1 + 56) = v43;
      if ((unint64_t)v43 >= v42) {
        return a1;
      }
      while (1)
      {
        unint64_t v40 = *v43;
        unint64_t v41 = v43[1];
        if (*v43 != v41) {
          break;
        }
        v43 += 2;
        char *v9 = v43;
        if ((unint64_t)v43 >= v42) {
          return a1;
        }
      }
      *(void *)(a1 + 72) = v40;
      *(void *)(a1 + 80) = v41;
    }
  }
  return a1;
}

uint64_t sub_A1E208(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  int v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 9u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[4];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        uint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        unint64_t v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v39 = &v56;
        }
        else {
          unint64_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        unint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v45 = &v55;
        }
        else {
          long long v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        uint64_t v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        int v51 = sub_736EC(9u);
        long long v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        unsigned int v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_A1E5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t *sub_A1E760(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v5 = (0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) >> 33);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v5 == v14)
        {
          if (*((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v5 == v12)
      {
        if (*((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

BOOL sub_A1E87C(void *a1)
{
  if (!*((unsigned char *)a1 + 89))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *(void *)a1[9];
    uint64_t v4 = *(void *)(*a1 + 4136);
    if (sub_C259C0(v4 + 3896))
    {
      if (*(void *)(v4 + 3944))
      {
        unint64_t v5 = (void *)(v2 + 4136);
        uint64_t v6 = __ROR8__(v3, 32);
        if (!sub_A10E20(v5, SHIDWORD(v6)))
        {
          unint64_t v7 = *(void **)(*v5 + 3944);
          uint64_t v9 = v6;
          if (sub_A1E760(v7, &v9)) {
            return 1;
          }
        }
      }
    }
  }
  if (*((unsigned char *)a1 + 88)) {
    return 0;
  }
  if (sub_C2599C(*a1 + 3896) < *(unsigned __int8 *)(a1[9] + 14)) {
    return 1;
  }
  return !*((unsigned char *)a1 + 88)
      && (sub_51D60((unsigned __int8 *)(*a1 + 3896)) & 1) == 0
      && (*(unsigned char *)(a1[9] + 15) & 1) != 0;
}

uint64_t sub_A1E9A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5, char a6)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = a6;
  uint64_t v10 = (uint64_t *)(a2 + 4136);
  uint64_t v11 = sub_A10650((void *)(a2 + 4136), a3);
  *(void *)(a1 + 16) = v11;
  unint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 >= 5u && (uint64_t v13 = *((unsigned __int16 *)v12 + 2)) != 0) {
    uint64_t v14 = (unsigned int *)&v11[v13 + *(unsigned int *)&v11[v13]];
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (int *)sub_A1139C(v14, a3);
  unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 9u)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = v16[4];
    if (v17) {
      v17 += (uint64_t)v15 + *(unsigned int *)((char *)v15 + v17);
    }
  }
  uint64_t v18 = v17 + 4;
  *(void *)(a1 + 24) = v17 + 4;
  *(void *)(a1 + 32) = v17 + 4 + 16 * a4;
  uint64_t v19 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 4));
  uint64_t v20 = a3;
  unint64_t v21 = (int *)((char *)&v19[v20 + 1] + *v19 + *(unsigned int *)((char *)&v19[v20 + 1] + *v19));
  uint64_t v22 = *v21;
  BOOL v23 = (char *)v21 - v22;
  unsigned int v24 = *(unsigned __int16 *)((char *)v21 - v22);
  BOOL v25 = (unsigned int *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - v22 + 8));
  *(void *)(a1 + 40) = v18 + 16 * *(unsigned int *)((char *)v25 + *v25);
  if (v24 < 0x15)
  {
    *(void *)(a1 + 48) = 0;
    uint64_t v27 = *((unsigned __int16 *)v23 + 3);
    if (v27)
    {
LABEL_13:
      unint64_t v28 = (char *)v21 + v27 + *(unsigned int *)((char *)v21 + v27);
      LODWORD(v22) = *(int *)((char *)v21 + v27);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v26 = *((unsigned __int16 *)v23 + 10);
    if (*((_WORD *)v23 + 10)) {
      v26 += (uint64_t)v21 + *(unsigned int *)((char *)v21 + v26) + 4;
    }
    *(void *)(a1 + 48) = v26;
    uint64_t v27 = *((unsigned __int16 *)v23 + 3);
    if (v27) {
      goto LABEL_13;
    }
  }
  unint64_t v28 = 0;
LABEL_16:
  int v29 = v28 + 4;
  *(void *)(a1 + 56) = v29;
  *(void *)(a1 + 64) = v29;
  *(void *)(a1 + 72) = &v29[12 * *(int *)((char *)v21 + v27 + v22)];
  if (a5) {
    goto LABEL_23;
  }
  uint64_t v30 = *v10;
  if (!sub_C259D4(*v10 + 3896)) {
    goto LABEL_23;
  }
  uint64_t v31 = *(uint64_t **)(v30 + 3960);
  if (!v31) {
    goto LABEL_24;
  }
  uint64_t v31 = *(uint64_t **)(*v10 + 3976);
  if (!v31) {
    goto LABEL_24;
  }
  uint64_t v51 = a3;
  if (!sub_A1E760(v31 + 26, &v51))
  {
LABEL_23:
    uint64_t v31 = 0;
    goto LABEL_24;
  }
  uint64_t v32 = *(void *)(*v10 + 3976);
  uint64_t v51 = a3;
  uint64_t v33 = sub_A1E760((void *)(v32 + 208), &v51);
  if (!v33) {
    sub_5AE8("unordered_map::at: key not found");
  }
  uint64_t v31 = v33 + 3;
LABEL_24:
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = a3;
  uint64_t v34 = *(int **)(a1 + 16);
  uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v35 >= 5u && (uint64_t v36 = v35[2]) != 0) {
    unint64_t v37 = (char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36);
  }
  else {
    unint64_t v37 = 0;
  }
  long long v38 = &v37[v20 * 4 + 4 + *(unsigned int *)&v37[v20 * 4 + 4]];
  unint64_t v39 = &v38[-*(int *)v38];
  if (*(unsigned __int16 *)v39 <= 0x12u)
  {
    unint64_t v41 = *(void *)(a1 + 56);
    goto LABEL_34;
  }
  uint64_t v40 = *((unsigned __int16 *)v39 + 9);
  unint64_t v41 = *(void *)(a1 + 56);
  if (!v40)
  {
LABEL_34:
    *(unsigned char *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    goto LABEL_35;
  }
  int v42 = *(_DWORD *)&v38[v40];
  *(unsigned char *)(a1 + 96) = v42 & 1;
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if ((v42 & 1) != 0 && -1431655765 * ((*(void *)(a1 + 72) - v41) >> 2))
  {
    sub_A1ECE8(a1);
    return a1;
  }
LABEL_35:
  for (unint64_t i = *(void *)(a1 + 64); i >= v41; *(void *)(a1 + 64) = i)
  {
    if (i >= *(void *)(a1 + 72)) {
      break;
    }
    long long v45 = *(unsigned int **)(a1 + 80);
    if (!v45) {
      break;
    }
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - v41) >> 2);
    int v47 = sub_51D60((unsigned __int8 *)(*(void *)a1 + 3896));
    uint64_t v48 = *v45;
    if (v46 < v48) {
      break;
    }
    uint64_t v49 = *((void *)v45 + 1);
    if (*((void *)v45 + 2) + v48 - v49 <= (unint64_t)v46) {
      break;
    }
    unsigned int v50 = *(unsigned __int8 *)(v49 + (v46 - v48));
    if ((v50 & 1) == 0) {
      break;
    }
    if (((v50 >> 1) & 1 & ~v47) != 0) {
      break;
    }
    unint64_t v41 = *(void *)(a1 + 56);
    unint64_t i = *(void *)(a1 + 64) + 12;
  }
  return a1;
}

uint64_t sub_A1ECE8(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 56);
  *(void *)(result + 64) = v2;
  unint64_t v3 = v2;
  do
  {
    if (v3 >= *(void *)(v1 + 72)) {
      break;
    }
    uint64_t v4 = *(unsigned int **)(v1 + 80);
    if (!v4) {
      break;
    }
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 2);
    uint64_t result = sub_51D60((unsigned __int8 *)(*(void *)v1 + 3896));
    uint64_t v6 = *v4;
    if (v5 < v6) {
      break;
    }
    uint64_t v7 = *((void *)v4 + 1);
    if (*((void *)v4 + 2) + v6 - v7 <= (unint64_t)v5) {
      break;
    }
    unsigned int v8 = *(unsigned __int8 *)(v7 + (v5 - v6));
    if ((v8 & 1) == 0) {
      break;
    }
    if (((v8 >> 1) & 1 & ~result) != 0) {
      break;
    }
    unint64_t v2 = *(void *)(v1 + 56);
    unint64_t v3 = *(void *)(v1 + 64) + 12;
    *(void *)(v1 + 64) = v3;
  }
  while (v3 >= v2);
  uint64_t v9 = *(_DWORD **)(v1 + 64);
  if ((unint64_t)v9 >= *(void *)(v1 + 56) && (unint64_t)v9 < *(void *)(v1 + 72))
  {
    if (*(unsigned char *)(v1 + 96))
    {
      *(_DWORD *)(v1 + 100) = 0;
      uint64_t v10 = (unsigned int *)(*(void *)(v1 + 16)
                           + *(unsigned __int16 *)(*(void *)(v1 + 16) - **(int **)(v1 + 16) + 8));
      *(_DWORD *)(v1 + 104) = *(unsigned int *)((char *)&v10[3 * (v9[2] >> 8) + 2] + *v10) + *v9;
    }
  }
  return result;
}

void sub_A1EDFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v45 = 0;
  uint64_t v46 = 0;
  long long __p = 0;
  unsigned int v8 = *(char **)(a1 + 24);
  *(void *)(a1 + 32) = v8;
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    BOOL v9 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 && (unint64_t)v8 < *(void *)(a1 + 40))
  {
    uint64_t v10 = v8;
    do
    {
      unint64_t v11 = __ROR8__(*(void *)v8, 32);
      if (HIDWORD(v11) == 1 && (v11 + 3) < 2) {
        break;
      }
      char v13 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
      uint64_t v10 = *(char **)(a1 + 24);
      unsigned int v8 = *(char **)(a1 + 32);
      if (v13) {
        break;
      }
      v8 += 16;
      *(void *)(a1 + 32) = v8;
    }
    while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40));
  }
  else
  {
    uint64_t v10 = v8;
  }
  while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40))
  {
    uint64_t v15 = __ROR8__(*(void *)v8, 32);
    uint64_t v16 = *(void *)(a3 + 8);
    if (v16)
    {
      uint64_t v17 = *(void **)a3;
      uint64_t v18 = 8 * v16;
      while (v15 != *v17)
      {
        ++v17;
        v18 -= 8;
        if (!v18) {
          goto LABEL_52;
        }
      }
      if (v8[15])
      {
        unint64_t v19 = (unint64_t)(v8 - v10) >> 4;
        uint64_t v20 = *(void *)(a1 + 48);
        if (v20) {
          uint64_t v20 = *(unsigned int *)(v20 + 4 * v19);
        }
        LODWORD(v43) = v19;
        *((void *)&v43 + 1) = v20;
        int v41 = -1;
        uint64_t v42 = 0;
        unint64_t v21 = (char *)__p;
        uint64_t v22 = v45;
        BOOL v23 = (char *)__p;
        if (__p != v45)
        {
          do
          {
            uint64_t v24 = *((void *)v23 + 1);
            if ((DWORD2(v43) & v24) == 0)
            {
              int v41 = *(_DWORD *)v23;
              uint64_t v42 = v24;
              *(_DWORD *)BOOL v23 = -1;
            }
            v23 += 16;
          }
          while (v23 != v22);
          if (v41 != -1)
          {
            sub_3EC418((uint64_t)a4, &v41, (int *)&v43);
            unint64_t v21 = (char *)__p;
            uint64_t v22 = v45;
          }
        }
        if (v21 != v22)
        {
          while (*(_DWORD *)v21 != -1)
          {
            v21 += 16;
            if (v21 == v22) {
              goto LABEL_51;
            }
          }
          if (v21 != v22)
          {
            BOOL v25 = v21 + 16;
            if (v21 + 16 != v22)
            {
              do
              {
                if (*(_DWORD *)v25 != -1)
                {
                  *(_DWORD *)unint64_t v21 = *(_DWORD *)v25;
                  *((void *)v21 + 1) = *((void *)v25 + 1);
                  v21 += 16;
                }
                v25 += 16;
              }
              while (v25 != v22);
              uint64_t v22 = v45;
            }
          }
          if (v21 != v22) {
            long long v45 = v21;
          }
        }
LABEL_51:
        unsigned int v8 = *(char **)(a1 + 32);
        uint64_t v15 = __ROR8__(*(void *)v8, 32);
      }
    }
LABEL_52:
    uint64_t v26 = *(void *)(a2 + 8);
    if (!v26) {
      goto LABEL_76;
    }
    uint64_t v27 = *(void **)a2;
    uint64_t v28 = 8 * v26;
    while (v15 != *v27)
    {
      ++v27;
      v28 -= 8;
      if (!v28) {
        goto LABEL_76;
      }
    }
    if ((v8[15] & 2) == 0) {
      goto LABEL_76;
    }
    unint64_t v29 = (unint64_t)&v8[-*(void *)(a1 + 24)] >> 4;
    uint64_t v30 = *(void *)(a1 + 48);
    if (v30) {
      uint64_t v30 = *(unsigned int *)(v30 + 4 * v29);
    }
    LODWORD(v43) = v29;
    *((void *)&v43 + 1) = v30;
    uint64_t v31 = v45;
    if (__p != v45)
    {
      uint64_t v32 = (char *)__p + 16;
      while ((v30 & ~*((void *)v32 - 1)) != 0)
      {
        BOOL v9 = v32 == v45;
        v32 += 16;
        if (v9) {
          goto LABEL_75;
        }
      }
      uint64_t v33 = v32 - 16;
      if (v32 - 16 != v45)
      {
        if (v32 == v45)
        {
          if (v33 == v45) {
            goto LABEL_75;
          }
        }
        else
        {
          do
          {
            if ((DWORD2(v43) & ~*((_DWORD *)v32 + 2)) != 0)
            {
              *(_DWORD *)uint64_t v33 = *(_DWORD *)v32;
              *((void *)v33 + 1) = *((void *)v32 + 1);
              v33 += 16;
            }
            v32 += 16;
          }
          while (v32 != v31);
          if (v33 == v45) {
            goto LABEL_75;
          }
        }
        long long v45 = v33;
      }
    }
LABEL_75:
    sub_A1F294((char **)&__p, &v43);
    unsigned int v8 = *(char **)(a1 + 32);
LABEL_76:
    v8 += 16;
    *(void *)(a1 + 32) = v8;
    uint64_t v10 = *(char **)(a1 + 24);
    if (*(unsigned char *)(*(void *)a1 + 16)) {
      BOOL v34 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v34 = 0;
    }
    if (v34 && v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40))
    {
      do
      {
        unint64_t v37 = __ROR8__(*(void *)v8, 32);
        if (HIDWORD(v37) == 1 && (v37 + 3) < 2) {
          break;
        }
        char v39 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
        uint64_t v10 = *(char **)(a1 + 24);
        unsigned int v8 = *(char **)(a1 + 32);
        if (v39) {
          break;
        }
        v8 += 16;
        *(void *)(a1 + 32) = v8;
      }
      while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40));
    }
  }
  if (__p)
  {
    long long v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_A1F24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

char *sub_A1F294(char **a1, _OWORD *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    char v13 = &v12[16 * v8];
    *(_OWORD *)char v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

BOOL sub_A1F39C(uint64_t a1, uint64_t a2, signed int a3, int a4)
{
  uint64_t v4 = -1431655765 * ((*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = (*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  uint64_t v10 = (void *)(a1 + 4136);
  uint64_t v11 = 4 * v8;
  while (1)
  {
    unint64_t v12 = sub_A10650(v10, v8);
    char v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = (int *)(v14 + v11 + 4 + *(unsigned int *)(v14 + v11 + 4));
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = sub_A1FDE4(v18, v7);
    int v20 = sub_A1FBEC(v10, v8, v7, *(unsigned __int8 *)(v19 + 8) - 1);
    unint64_t v21 = sub_A10650(v10, v8);
    uint64_t v22 = (int *)v21;
    BOOL v23 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v23 < 5u)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 2);
      if (v24) {
        v24 += (uint64_t)&v21[*(unsigned int *)&v21[v24]];
      }
    }
    BOOL v25 = (int *)(v24 + v11 + 4 + *(unsigned int *)(v24 + v11 + 4));
    uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 7u && (uint64_t v27 = v26[3]) != 0) {
      uint64_t v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = sub_A1FDE4(v28, v7);
    uint64_t v30 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v30 < 7u)
    {
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = (unsigned int *)v30[3];
      if (v31) {
        uint64_t v31 = (unsigned int *)((char *)v31 + (void)v22 + *(unsigned int *)((char *)v31 + (void)v22));
      }
    }
    if (*(_DWORD *)(sub_A200AC(v31, *(_DWORD *)(v29 + 4) + (int)v9) + 4) + v20 >= a3) {
      break;
    }
    if (++v7 == v4) {
      return 0;
    }
  }
  if (v7 == -1) {
    return 0;
  }
  unint64_t v32 = *(void *)(a2 + 88);
  uint64_t v34 = *(void *)(a2 + 24);
  uint64_t v33 = *(void *)(a2 + 32);
  uint64_t v35 = sub_A10650(v10, v32);
  uint64_t v36 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v36 < 5u)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 2);
    if (v37) {
      v37 += (uint64_t)&v35[*(unsigned int *)&v35[v37]];
    }
  }
  uint64_t v38 = 4 * v32;
  char v39 = (int *)(v37 + v38 + 4 + *(unsigned int *)(v37 + v38 + 4));
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u && (uint64_t v41 = v40[3]) != 0) {
    uint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    uint64_t v42 = 0;
  }
  unint64_t v43 = v33 - v34;
  uint64_t v44 = *(unsigned __int8 *)(sub_A1FDE4(v42, v7) + 8);
  long long v45 = sub_A10650(v10, v32);
  uint64_t v46 = (int *)v45;
  int v47 = &v45[-*(int *)v45];
  if (*(unsigned __int16 *)v47 < 5u)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = *((unsigned __int16 *)v47 + 2);
    if (v48) {
      v48 += (uint64_t)&v45[*(unsigned int *)&v45[v48]];
    }
  }
  unint64_t v49 = v43 >> 4;
  unsigned int v50 = (int *)(v48 + v38 + 4 + *(unsigned int *)(v48 + v38 + 4));
  uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 7u && (uint64_t v52 = v51[3]) != 0) {
    long long v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
  }
  else {
    long long v53 = 0;
  }
  uint64_t v54 = sub_A1FDE4(v53, v7);
  std::string v55 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v55 < 7u)
  {
    uint64_t v57 = sub_A200AC(0, *(_DWORD *)(v54 + 4) + (int)v49);
    if (!v44)
    {
LABEL_52:
      LODWORD(v58) = -1;
      goto LABEL_53;
    }
  }
  else
  {
    std::string v56 = (unsigned int *)v55[3];
    if (v56) {
      std::string v56 = (unsigned int *)((char *)v56 + (void)v46 + *(unsigned int *)((char *)v56 + (void)v46));
    }
    uint64_t v57 = sub_A200AC(v56, *(_DWORD *)(v54 + 4) + (int)v49);
    if (!v44) {
      goto LABEL_52;
    }
  }
  uint64_t v58 = 0;
  int v59 = *(_DWORD *)(v57 + 4);
  while ((int)(sub_A1FBEC(v10, v32, v7, v58) + v59) < a3)
  {
    if (v44 == ++v58) {
      goto LABEL_52;
    }
  }
LABEL_53:
  unint64_t v60 = *(void *)(a2 + 88);
  uint64_t v61 = *(void *)(a2 + 24);
  uint64_t v78 = *(void *)(a2 + 32);
  std::string v62 = sub_A10650(v10, v60);
  std::string v63 = (int *)v62;
  long long v64 = &v62[-*(int *)v62];
  if (*(unsigned __int16 *)v64 < 5u)
  {
    uint64_t v65 = 0;
  }
  else
  {
    uint64_t v65 = *((unsigned __int16 *)v64 + 2);
    if (v65) {
      v65 += (uint64_t)&v62[*(unsigned int *)&v62[v65]];
    }
  }
  char v66 = (int *)(v65 + 4 * v60 + 4 + *(unsigned int *)(v65 + 4 * v60 + 4));
  uint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
  if (*v67 >= 7u && (uint64_t v68 = v67[3]) != 0) {
    signed int v69 = (unsigned int *)((char *)v66 + v68 + *(unsigned int *)((char *)v66 + v68));
  }
  else {
    signed int v69 = 0;
  }
  uint64_t v70 = sub_A1FDE4(v69, v7);
  uint64_t v71 = (unsigned __int16 *)((char *)v63 - *v63);
  if (*v71 < 7u)
  {
    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v72 = (unsigned int *)v71[3];
    if (v72) {
      uint64_t v72 = (unsigned int *)((char *)v72 + (void)v63 + *(unsigned int *)((char *)v72 + (void)v63));
    }
  }
  int v73 = *(_DWORD *)(sub_A200AC(v72, *(_DWORD *)(v70 + 4) + ((unint64_t)(v78 - v61) >> 4)) + 4);
  int v74 = sub_A1FCE8(v10, v60, v7, v58);
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 12 * v7;
  if (*(unsigned char *)(a2 + 96))
  {
    int v75 = a3 - v73;
    if (a3 - v73 <= v74) {
      int v75 = v74;
    }
    *(_DWORD *)(a2 + 100) = v58;
    *(_DWORD *)(a2 + 104) = v75;
  }
  sub_A2020C(a2, a4);
  unint64_t v76 = *(void *)(a2 + 64);
  if (v76 < *(void *)(a2 + 56)) {
    return 0;
  }
  return v76 < *(void *)(a2 + 72);
}

uint64_t sub_A1F8B4(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = -1431655765 * ((v6 - v5) >> 2);
  if (v7) {
    LODWORD(v7) = *(_DWORD *)(v7 + 32);
  }
  if (v7 == v8) {
    return 0;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if (v8 < 0x41)
  {
    unint64_t v24 = *(void *)(a1 + 64);
    if (v24 >= v5 && v24 < v6) {
      goto LABEL_25;
    }
LABEL_24:
    sub_A1ECE8(a1);
    goto LABEL_25;
  }
  sub_A1ECE8(a1);
  if (*(unsigned char *)(a1 + 96)) {
    uint64_t v9 = (_DWORD *)(a1 + 104);
  }
  else {
    uint64_t v9 = *(_DWORD **)(a1 + 64);
  }
  uint64_t v10 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v11 = *(unsigned int *)((char *)&v10[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 1
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v10)
      + *v9;
  sub_A20620((void *)a1);
  int v12 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    char v13 = (_DWORD *)(a1 + 104);
  }
  else {
    char v13 = *(_DWORD **)(a1 + 64);
  }
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v15 = *(unsigned int *)((char *)&v14[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 2
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v14)
      + *v13;
  if (v15 <= a2)
  {
    sub_A20620((void *)a1);
    unint64_t v26 = *(void *)(a1 + 56);
    BOOL v25 = *(_DWORD **)(a1 + 64);
    if ((unint64_t)v25 >= v26)
    {
LABEL_26:
      while ((unint64_t)v25 < *(void *)(a1 + 72))
      {
        if (*(unsigned char *)(a1 + 96)) {
          uint64_t v27 = (_DWORD *)(a1 + 104);
        }
        else {
          uint64_t v27 = v25;
        }
        uint64_t v28 = (unsigned int *)(*(void *)(a1 + 16)
                             + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
        if ((int)(*(unsigned int *)((char *)&v28[2 * v25[1]
                                                + 2
                                                + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                   + *v28)
                 + *v27) < a2)
          goto LABEL_33;
        sub_A20748(a1, 0);
        unint64_t v26 = *(void *)(a1 + 56);
        BOOL v25 = *(_DWORD **)(a1 + 64);
        if ((unint64_t)v25 < v26) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_32;
  }
  double v16 = (double)(a2 - v11) / (double)(v15 - v11);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = (v16
                     * (double)(-1431655765 * ((unint64_t)(*(void *)(a1 + 72) - v17) >> 2) - 1));
  *(void *)(a1 + 64) = v17 + 12 * v18;
  if (v12) {
    *(void *)(a1 + 100) = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v19 = *(unsigned int **)(a1 + 80);
  if (v19)
  {
    int v20 = sub_51D60((unsigned __int8 *)(*(void *)a1 + 3896));
    uint64_t v21 = *v19;
    if (v21 <= v18)
    {
      uint64_t v22 = *((void *)v19 + 1);
      if (*((void *)v19 + 2) + v21 - v22 > v18)
      {
        unsigned int v23 = *(unsigned __int8 *)(v22 + (v18 - v21));
        if ((v23 & 1) != 0 && ((v23 >> 1) & 1 & ~v20) == 0) {
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  unint64_t v26 = *(void *)(a1 + 56);
  BOOL v25 = *(_DWORD **)(a1 + 64);
  if ((unint64_t)v25 >= v26) {
    goto LABEL_26;
  }
LABEL_32:
  sub_A2020C(a1, 0);
  unint64_t v26 = *(void *)(a1 + 56);
  BOOL v25 = *(_DWORD **)(a1 + 64);
LABEL_33:
  if ((unint64_t)v25 >= v26)
  {
    while ((unint64_t)v25 < *(void *)(a1 + 72))
    {
      if (*(unsigned char *)(a1 + 96)) {
        uint64_t v29 = (_DWORD *)(a1 + 104);
      }
      else {
        uint64_t v29 = v25;
      }
      uint64_t v30 = (unsigned int *)(*(void *)(a1 + 16)
                           + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v30[2 * v25[1]
                                              + 2
                                              + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                 + *v30)
               + *v29) >= a2)
        return 1;
      sub_A2020C(a1, 0);
      BOOL v25 = *(_DWORD **)(a1 + 64);
      if ((unint64_t)v25 < *(void *)(a1 + 56)) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_A1FBEC(void *a1, unint64_t a2, unsigned int a3, int a4)
{
  unsigned int v6 = a2;
  uint64_t v7 = sub_A10650(a1, a2);
  unsigned int v8 = (int *)v7;
  uint64_t v9 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  int v11 = (int *)(v10 + 4 * v6 + 4 + *(unsigned int *)(v10 + 4 * v6 + 4));
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    uint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = (int *)sub_A1FDE4(v14, a3);
  uint64_t v17 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v17 < 9u)
  {
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = (unsigned int *)v17[4];
    if (v18) {
      unint64_t v18 = (unsigned int *)((char *)v18 + (void)v8 + *(unsigned int *)((char *)v18 + (void)v8));
    }
  }
  int v16 = *v15;
  return (*(_DWORD *)(sub_A1FF48(v18, a4 + (v15[2] >> 8)) + 8) + v16);
}

uint64_t sub_A1FCE8(void *a1, unint64_t a2, unsigned int a3, int a4)
{
  unsigned int v6 = a2;
  uint64_t v7 = sub_A10650(a1, a2);
  unsigned int v8 = (int *)v7;
  uint64_t v9 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  int v11 = (int *)(v10 + 4 * v6 + 4 + *(unsigned int *)(v10 + 4 * v6 + 4));
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    uint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = (int *)sub_A1FDE4(v14, a3);
  uint64_t v17 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v17 < 9u)
  {
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = (unsigned int *)v17[4];
    if (v18) {
      unint64_t v18 = (unsigned int *)((char *)v18 + (void)v8 + *(unsigned int *)((char *)v18 + (void)v8));
    }
  }
  int v16 = *v15;
  return (*(_DWORD *)(sub_A1FF48(v18, a4 + (v15[2] >> 8)) + 4) + v16);
}

uint64_t sub_A1FDE4(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[3 * a2 + 1];
}

void sub_A1FEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A1FF48(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[3 * a2 + 1];
}

void sub_A2002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A200AC(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[2 * a2 + 1];
}

void sub_A2018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A2020C(uint64_t result, int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = *(_DWORD **)(result + 64);
  if (!*(unsigned char *)(result + 96))
  {
    unint64_t v12 = (unint64_t)(v3 + 3);
    *(void *)(result + 64) = v12;
    for (unint64_t i = *(void *)(result + 56); v12 >= i; *(void *)(v2 + 64) = v12)
    {
      if (v12 >= *(void *)(v2 + 72)) {
        break;
      }
      uint64_t v14 = *(unsigned int **)(v2 + 80);
      if (!v14) {
        break;
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - i) >> 2);
      uint64_t result = sub_51D60((unsigned __int8 *)(*(void *)v2 + 3896));
      uint64_t v16 = *v14;
      if (v15 < v16) {
        break;
      }
      uint64_t v17 = *((void *)v14 + 1);
      if (*((void *)v14 + 2) + v16 - v17 <= (unint64_t)v15) {
        break;
      }
      unsigned int v18 = *(unsigned __int8 *)(v17 + (v15 - v16));
      if ((v18 & 1) == 0) {
        break;
      }
      if (((v18 >> 1) & 1 & ~result) != 0) {
        break;
      }
      unint64_t i = *(void *)(v2 + 56);
      unint64_t v12 = *(void *)(v2 + 64) + 12;
    }
    return result;
  }
  if (a2 == 2) {
    return result;
  }
  unsigned int v5 = v3[2];
  long long v6 = (unsigned int *)(*(void *)(result + 16)
                      + *(unsigned __int16 *)(*(void *)(result + 16) - **(int **)(result + 16) + 8));
  uint64_t v7 = (char *)v6 + *v6;
  unsigned int v8 = *(_DWORD *)(result + 100);
  int v9 = 10 * *(_DWORD *)&v7[12 * v8 + 4 + 12 * (v5 >> 8)];
  if (a2)
  {
    double v10 = (double)v9 * 0.5;
    if (v10 >= 0.0)
    {
      if (v10 < 4.50359963e15)
      {
        uint64_t v11 = (uint64_t)(v10 + v10) + 1;
LABEL_20:
        double v10 = (double)(v11 >> 1);
      }
    }
    else if (v10 > -4.50359963e15)
    {
      uint64_t v11 = (uint64_t)(v10 + v10);
      if (v11 >= 1) {
        --v11;
      }
      goto LABEL_20;
    }
    int v9 = (int)v10;
  }
  int v19 = v9 / 10;
  int v20 = v9 % 10;
  if (v9 < 0) {
    char v21 = -5;
  }
  else {
    char v21 = 5;
  }
  *(_DWORD *)(result + 104) += v19
                             + (((103 * (char)(v21 + v20)) >> 15) & 1)
                             + ((103 * (char)(v21 + v20)) >> 10);
  unint64_t v22 = *(void *)(result + 56);
  if ((unint64_t)v3 >= v22 && (unint64_t)v3 < *(void *)(result + 72))
  {
    unsigned int v23 = v5;
    while (1)
    {
      uint64_t v30 = (unsigned int *)(*(void *)(v2 + 16)
                           + *(unsigned __int16 *)(*(void *)(v2 + 16) - **(int **)(v2 + 16) + 8));
      if (*(_DWORD *)(v2 + 104) <= (signed int)(*(unsigned int *)((char *)&v30[3 * v8 + 3 + 3 * (v3[2] >> 8)] + *v30)
                                               + *v3))
        return result;
      *(_DWORD *)(v2 + 100) = ++v8;
      if (v8 >= v23)
      {
        unint64_t v31 = (unint64_t)(v3 + 3);
        *(void *)(v2 + 64) = v31;
        do
        {
          if (v31 >= *(void *)(v2 + 72)) {
            break;
          }
          unint64_t v32 = *(unsigned int **)(v2 + 80);
          if (!v32) {
            break;
          }
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v22) >> 2);
          uint64_t result = sub_51D60((unsigned __int8 *)(*(void *)v2 + 3896));
          uint64_t v34 = *v32;
          if (v33 < v34) {
            break;
          }
          uint64_t v35 = *((void *)v32 + 1);
          if (*((void *)v32 + 2) + v34 - v35 <= (unint64_t)v33) {
            break;
          }
          unsigned int v36 = *(unsigned __int8 *)(v35 + (v33 - v34));
          if ((v36 & 1) == 0) {
            break;
          }
          if (((v36 >> 1) & 1 & ~result) != 0) {
            break;
          }
          unint64_t v22 = *(void *)(v2 + 56);
          unint64_t v31 = *(void *)(v2 + 64) + 12;
          *(void *)(v2 + 64) = v31;
        }
        while (v31 >= v22);
        unsigned int v8 = 0;
        *(_DWORD *)(v2 + 100) = 0;
        unint64_t v22 = *(void *)(v2 + 56);
        unint64_t v3 = *(_DWORD **)(v2 + 64);
      }
      if ((unint64_t)v3 < v22) {
        return result;
      }
      if ((unint64_t)v3 < *(void *)(v2 + 72)) {
        break;
      }
LABEL_34:
      if ((unint64_t)v3 >= *(void *)(v2 + 72)) {
        return result;
      }
    }
    uint64_t v37 = (unsigned int *)(*(void *)(v2 + 16) + *(unsigned __int16 *)(*(void *)(v2 + 16) - **(int **)(v2 + 16) + 8));
    uint64_t v38 = (uint64_t)&v37[3 * v8 + 3 * (v3[2] >> 8)] + *v37;
    int v25 = 10 * *(_DWORD *)(v38 + 4);
    if (!a2)
    {
LABEL_30:
      int v26 = *(_DWORD *)(v38 + 8) + *v3;
      int v27 = v25 / 10;
      int v28 = v25 % 10;
      if (v25 < 0) {
        char v29 = -5;
      }
      else {
        char v29 = 5;
      }
      *(_DWORD *)(v2 + 104) = v26
                            + v27
                            + (((103 * (char)(v29 + v28)) >> 15) & 1)
                            + ((103 * (char)(v29 + v28)) >> 10);
      goto LABEL_34;
    }
    double v24 = (double)v25 * 0.5;
    if (v24 >= 0.0)
    {
      if (v24 >= 4.50359963e15) {
        goto LABEL_29;
      }
      uint64_t v39 = (uint64_t)(v24 + v24) + 1;
    }
    else
    {
      if (v24 <= -4.50359963e15) {
        goto LABEL_29;
      }
      uint64_t v39 = (uint64_t)(v24 + v24);
      if (v39 >= 1) {
        --v39;
      }
    }
    double v24 = (double)(v39 >> 1);
LABEL_29:
    int v25 = (int)v24;
    goto LABEL_30;
  }
  return result;
}

void *sub_A20620(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (_DWORD *)(result[9] - 12);
  result[8] = v2;
  unint64_t v3 = result[7];
  if ((unint64_t)v2 >= v3)
  {
    do
    {
      if ((unint64_t)v2 >= v1[9]) {
        break;
      }
      uint64_t v4 = (unsigned int *)v1[10];
      if (!v4) {
        break;
      }
      unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2 - v3) >> 2);
      uint64_t result = (void *)sub_51D60((unsigned __int8 *)(*v1 + 3896));
      uint64_t v6 = *v4;
      if (v5 < v6) {
        break;
      }
      uint64_t v7 = *((void *)v4 + 1);
      if (*((void *)v4 + 2) + v6 - v7 <= (unint64_t)v5) {
        break;
      }
      unsigned int v8 = *(unsigned __int8 *)(v7 + (v5 - v6));
      if ((v8 & 1) == 0) {
        break;
      }
      if (((v8 >> 1) & 1 & ~result) != 0) {
        break;
      }
      unint64_t v3 = v1[7];
      uint64_t v2 = (_DWORD *)(v1[8] - 12);
      v1[8] = v2;
    }
    while ((unint64_t)v2 >= v3);
    unint64_t v3 = v1[7];
    uint64_t v2 = (_DWORD *)v1[8];
  }
  if ((unint64_t)v2 >= v3 && (unint64_t)v2 < v1[9])
  {
    if (*((unsigned char *)v1 + 96))
    {
      unsigned int v9 = v2[2];
      int v10 = v9 - 1;
      *((_DWORD *)v1 + 25) = v10;
      uint64_t v11 = (unsigned int *)(v1[2] + *(unsigned __int16 *)(v1[2] - *(int *)v1[2] + 8));
      *((_DWORD *)v1 + 26) = *(unsigned int *)((char *)&v11[3 * v10 + 3 + 3 * (v9 >> 8)] + *v11) + *v2;
    }
  }
  return result;
}

uint64_t sub_A20748(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 96))
  {
    unint64_t v10 = *(void *)(result + 56);
    unint64_t v11 = *(void *)(result + 64) - 12;
    for (*(void *)(result + 64) = v11; v11 >= v10; *(void *)(v2 + 64) = v11)
    {
      if (v11 >= *(void *)(v2 + 72)) {
        break;
      }
      unint64_t v12 = *(unsigned int **)(v2 + 80);
      if (!v12) {
        break;
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 2);
      uint64_t result = sub_51D60((unsigned __int8 *)(*(void *)v2 + 3896));
      uint64_t v14 = *v12;
      if (v13 < v14) {
        break;
      }
      uint64_t v15 = *((void *)v12 + 1);
      if (*((void *)v12 + 2) + v14 - v15 <= (unint64_t)v13) {
        break;
      }
      unsigned int v16 = *(unsigned __int8 *)(v15 + (v13 - v14));
      if ((v16 & 1) == 0) {
        break;
      }
      if (((v16 >> 1) & 1 & ~result) != 0) {
        break;
      }
      unint64_t v10 = *(void *)(v2 + 56);
      unint64_t v11 = *(void *)(v2 + 64) - 12;
    }
    return result;
  }
  if (a2 == 2) {
    return result;
  }
  uint64_t v4 = (unsigned int *)(*(void *)(result + 16)
                      + *(unsigned __int16 *)(*(void *)(result + 16) - **(int **)(result + 16) + 8));
  unint64_t v5 = (char *)v4 + *v4;
  uint64_t v6 = *(_DWORD **)(result + 64);
  int v7 = 10 * *(_DWORD *)&v5[12 * (*(_DWORD *)(result + 100) + (v6[2] >> 8)) + 4];
  if (a2)
  {
    double v8 = (double)v7 * 0.5;
    if (v8 >= 0.0)
    {
      if (v8 < 4.50359963e15)
      {
        uint64_t v9 = (uint64_t)(v8 + v8) + 1;
LABEL_20:
        double v8 = (double)(v9 >> 1);
      }
    }
    else if (v8 > -4.50359963e15)
    {
      uint64_t v9 = (uint64_t)(v8 + v8);
      if (v9 >= 1) {
        --v9;
      }
      goto LABEL_20;
    }
    int v7 = (int)v8;
  }
  int v17 = v7 / -10;
  int v18 = v7 % 10;
  if (v7 < 0) {
    char v19 = -5;
  }
  else {
    char v19 = 5;
  }
  *(_DWORD *)(result + 104) += v17
                             + (((-103 * (char)(v19 + v18)) >> 15) & 1)
                             + ((-103 * (char)(v19 + v18)) >> 10);
  unint64_t v20 = *(void *)(result + 56);
  if ((unint64_t)v6 >= v20 && (unint64_t)v6 < *(void *)(result + 72))
  {
    while (1)
    {
      int v27 = (unsigned int *)(*(void *)(v2 + 16)
                           + *(unsigned __int16 *)(*(void *)(v2 + 16) - **(int **)(v2 + 16) + 8));
      int v28 = (char *)v27 + *v27;
      int v29 = *(_DWORD *)(v2 + 100);
      if (*(_DWORD *)(v2 + 104) >= *(_DWORD *)&v28[12 * (v29 + (v6[2] >> 8)) + 8] + *v6) {
        return result;
      }
      if (v29) {
        goto LABEL_37;
      }
      v6 -= 3;
      *(void *)(v2 + 64) = v6;
      if ((unint64_t)v6 >= v20)
      {
        do
        {
          if ((unint64_t)v6 >= *(void *)(v2 + 72)) {
            break;
          }
          uint64_t v30 = *(unsigned int **)(v2 + 80);
          if (!v30) {
            break;
          }
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v6 - v20) >> 2);
          uint64_t result = sub_51D60((unsigned __int8 *)(*(void *)v2 + 3896));
          uint64_t v32 = *v30;
          if (v31 < v32) {
            break;
          }
          uint64_t v33 = *((void *)v30 + 1);
          if (*((void *)v30 + 2) + v32 - v33 <= (unint64_t)v31) {
            break;
          }
          unsigned int v34 = *(unsigned __int8 *)(v33 + (v31 - v32));
          if ((v34 & 1) == 0) {
            break;
          }
          if (((v34 >> 1) & 1 & ~result) != 0) {
            break;
          }
          unint64_t v20 = *(void *)(v2 + 56);
          uint64_t v6 = (_DWORD *)(*(void *)(v2 + 64) - 12);
          *(void *)(v2 + 64) = v6;
        }
        while ((unint64_t)v6 >= v20);
        unint64_t v20 = *(void *)(v2 + 56);
        uint64_t v6 = *(_DWORD **)(v2 + 64);
      }
      if ((unint64_t)v6 >= v20 && (unint64_t)v6 < *(void *)(v2 + 72)) {
        break;
      }
LABEL_50:
      if ((unint64_t)v6 < v20) {
        return result;
      }
      if ((unint64_t)v6 < *(void *)(v2 + 72))
      {
        uint64_t v35 = (unsigned int *)(*(void *)(v2 + 16)
                             + *(unsigned __int16 *)(*(void *)(v2 + 16) - **(int **)(v2 + 16) + 8));
        uint64_t v36 = (uint64_t)&v35[3 * (*(_DWORD *)(v2 + 100) + (v6[2] >> 8))] + *v35;
        int v22 = 10 * *(_DWORD *)(v36 + 4);
        if (a2)
        {
          double v21 = (double)v22 * 0.5;
          if (v21 >= 0.0)
          {
            if (v21 < 4.50359963e15)
            {
              uint64_t v37 = (uint64_t)(v21 + v21) + 1;
              goto LABEL_28;
            }
          }
          else if (v21 > -4.50359963e15)
          {
            uint64_t v37 = (uint64_t)(v21 + v21);
            if (v37 >= 1) {
              --v37;
            }
LABEL_28:
            double v21 = (double)(v37 >> 1);
          }
          int v22 = (int)v21;
        }
        int v23 = *(_DWORD *)(v36 + 12) + *v6;
        int v24 = v22 / -10;
        int v25 = v22 % 10;
        if (v22 < 0) {
          char v26 = -5;
        }
        else {
          char v26 = 5;
        }
        *(_DWORD *)(v2 + 104) = v23
                              + v24
                              + (((-103 * (char)(v26 + v25)) >> 15) & 1)
                              + ((-103 * (char)(v26 + v25)) >> 10);
      }
      if ((unint64_t)v6 >= *(void *)(v2 + 72)) {
        return result;
      }
    }
    int v29 = *((unsigned __int8 *)v6 + 8);
LABEL_37:
    *(_DWORD *)(v2 + 100) = v29 - 1;
    goto LABEL_50;
  }
  return result;
}

char *sub_A20BAC(char **a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    double v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        sub_188D718();
      }
      unint64_t v13 = (char *)operator new(12 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[12 * v9];
    uint64_t v15 = *a2;
    *(void *)uint64_t v14 = 0xFFFFFFFFLL;
    *((_DWORD *)v14 + 2) = 0;
    if (v15)
    {
      *(void *)uint64_t v14 = __ROR8__(*(void *)v15, 32);
      *((_DWORD *)v14 + 2) = *(_DWORD *)(v15 + 8);
    }
    int v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        uint64_t v16 = *(void *)(v5 - 12);
        v5 -= 12;
        int v17 = *((_DWORD *)v5 + 2);
        *(void *)(v14 - 12) = v16;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v17;
      }
      while (v5 != v8);
      unint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *(void *)unint64_t v5 = 0xFFFFFFFFLL;
    *((_DWORD *)v5 + 2) = 0;
    if (v6)
    {
      *(void *)unint64_t v5 = __ROR8__(*(void *)v6, 32);
      *((_DWORD *)v5 + 2) = *(_DWORD *)(v6 + 8);
    }
    int v7 = v5 + 12;
  }
  a1[1] = v7;
  return v7 - 12;
}

uint64_t sub_A20D18(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v5 = 0x186186186186186;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v7 = 168 * v5;
  double v8 = (char *)operator new(168 * v5);
  uint64_t v9 = (uint64_t)&v8[168 * v3];
  *(_DWORD *)(v9 + 160) = -1;
  sub_A20F00(v9, a2);
  unint64_t v10 = &v8[v7];
  uint64_t v11 = v9 + 168;
  unint64_t v13 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (!v12) {
      return v9 + 168;
    }
    goto LABEL_27;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v16 = (long long *)(v9 + v14 - 168);
    int v17 = (long long *)&v12[v14 - 168];
    *(_DWORD *)(v9 + v14 - 8) = *(_DWORD *)&v12[v14 - 8];
    int v18 = *(_DWORD *)&v12[v14 - 8];
    if (v18 == 1)
    {
      long long v15 = *v17;
      *(_OWORD *)(v9 + v14 - 156) = *(_OWORD *)&v12[v14 - 156];
      long long *v16 = v15;
    }
    else if (!v18)
    {
      sub_9F6FA0((uint64_t)v16, v17);
    }
    v14 -= 168;
  }
  while (&v12[v14] != v13);
  char v19 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  *a1 = v9 + v14;
  a1[1] = v11;
  a1[2] = (uint64_t)v10;
  if (v12 != v19)
  {
    do
    {
      if (!*((_DWORD *)v12 - 2))
      {
        unint64_t v20 = (void *)*((void *)v12 - 6);
        if (v20)
        {
          *((void *)v12 - 5) = v20;
          operator delete(v20);
        }
        double v21 = (void *)*((void *)v12 - 10);
        if (v21)
        {
          *((void *)v12 - 9) = v21;
          operator delete(v21);
        }
        int v22 = (void *)*((void *)v12 - 13);
        if (v22)
        {
          *((void *)v12 - 12) = v22;
          operator delete(v22);
        }
      }
      v12 -= 168;
    }
    while (v12 != v19);
    unint64_t v12 = v19;
  }
  if (v12) {
LABEL_27:
  }
    operator delete(v12);
  return v9 + 168;
}

__n128 sub_A20F00(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 160))
  {
    sub_9F6FA0(a1, (long long *)a2);
    *(_DWORD *)(a1 + 160) = 0;
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)a1 = v5;
    if (a1 != a2)
    {
      sub_A20FE0((void *)(a1 + 64), *(char **)(a2 + 64), *(char **)(a2 + 72), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2));
      sub_A20FE0((void *)(a1 + 88), *(char **)(a2 + 88), *(char **)(a2 + 96), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2));
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      sub_9094A4((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
    }
    __n128 result = *(__n128 *)(a2 + 144);
    *(__n128 *)(a1 + 144) = result;
    *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void *sub_A20FE0(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x444444444444444) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x222222222222222 ? 0x444444444444444 : v11;
    if (v12 > 0x444444444444444) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 60 * v12;
    __n128 result = operator new(60 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 3);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v16 - v9) >> 2) >= a4)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 3;
    char v19 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  int v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 3);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 3;
    char v19 = v9;
    long long __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

char *sub_A21164(void **a1, _OWORD *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  if (v6 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v8 = 168 * v6;
  uint64_t v9 = (char *)operator new(168 * v6);
  unint64_t v10 = &v9[168 * v5];
  uint64_t v11 = &v9[v8];
  *(_OWORD *)unint64_t v10 = *a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)((char *)a2 + 12);
  *((_DWORD *)v10 + 40) = 1;
  unint64_t v12 = v10 + 168;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3) {
      return v10 + 168;
    }
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  do
  {
    long long v15 = (long long *)&v10[v13 - 168];
    uint64_t v16 = (long long *)&v3[v13 - 168];
    int v17 = *(_DWORD *)&v3[v13 - 8];
    *(_DWORD *)&v10[v13 - 8] = v17;
    if (v17 == 1)
    {
      long long v14 = *v16;
      *(_OWORD *)&v10[v13 - 156] = *(_OWORD *)&v3[v13 - 156];
      *long long v15 = v14;
    }
    else if (!v17)
    {
      sub_9F6FA0((uint64_t)v15, v16);
    }
    v13 -= 168;
  }
  while (&v3[v13] != v4);
  size_t v18 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  *a1 = &v10[v13];
  a1[1] = v12;
  a1[2] = v11;
  if (v3 != v18)
  {
    do
    {
      if (!*((_DWORD *)v3 - 2))
      {
        char v19 = (void *)*((void *)v3 - 6);
        if (v19)
        {
          *((void *)v3 - 5) = v19;
          operator delete(v19);
        }
        unint64_t v20 = (void *)*((void *)v3 - 10);
        if (v20)
        {
          *((void *)v3 - 9) = v20;
          operator delete(v20);
        }
        double v21 = (void *)*((void *)v3 - 13);
        if (v21)
        {
          *((void *)v3 - 12) = v21;
          operator delete(v21);
        }
      }
      v3 -= 168;
    }
    while (v3 != v18);
    unint64_t v3 = v18;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v10 + 168;
}

void **sub_A21340(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (a1[2] - *a1);
  }
  if (0x8E38E38E38E38E39 * (a1[2] - *a1) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(72 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[72 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = (void **)&v7[72 * v6];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v8[24] = *(unsigned char *)(a2 + 24);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 63) = *(void *)(a2 + 63);
  *((void *)v8 + 6) = v10;
  *((void *)v8 + 7) = v11;
  unint64_t v12 = (void **)(v8 + 72);
  uint64_t v13 = *a1;
  long long v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v8[v15 * 8];
    int v17 = &v14[v15];
    *((void *)v16 - 8) = 0;
    *((void *)v16 - 7) = 0;
    *(_OWORD *)(v16 - 72) = *(_OWORD *)&v14[v15 - 9];
    *((void *)v16 - 7) = v14[v15 - 7];
    *(v17 - 8) = 0;
    *(v17 - 7) = 0;
    *(v17 - 9) = 0;
    *(v16 - 48) = (char)v14[v15 - 6];
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 5];
    *((void *)v16 - 3) = v14[v15 - 3];
    *(v17 - 5) = 0;
    *(v17 - 4) = 0;
    *(v17 - 3) = 0;
    size_t v18 = v14[v15 - 2];
    *(void *)(v16 - 9) = *(void **)((char *)&v14[v15 - 1] - 1);
    *((void *)v16 - 2) = v18;
    v15 -= 9;
  }
  while (&v14[v15] != v13);
  char v19 = *a1;
  long long v14 = a1[1];
  *a1 = (void **)&v8[v15 * 8];
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v19)
  {
    do
    {
      v14 -= 9;
      sub_9F5F58((uint64_t)(a1 + 2), v14);
    }
    while (v14 != v19);
    long long v14 = v19;
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
  return v12;
}

uint64_t sub_A21530(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 72;
    sub_9F5F58(v4, (void **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A21588(void **a1, _OWORD *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  if (v6 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v8 = 168 * v6;
  uint64_t v9 = (char *)operator new(168 * v6);
  uint64_t v10 = &v9[168 * v5];
  uint64_t v11 = &v9[v8];
  *(_OWORD *)uint64_t v10 = *a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)((char *)a2 + 12);
  *((_DWORD *)v10 + 40) = 1;
  unint64_t v12 = v10 + 168;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3) {
      return v10 + 168;
    }
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  do
  {
    uint64_t v15 = (long long *)&v10[v13 - 168];
    uint64_t v16 = (long long *)&v3[v13 - 168];
    int v17 = *(_DWORD *)&v3[v13 - 8];
    *(_DWORD *)&v10[v13 - 8] = v17;
    if (v17 == 1)
    {
      long long v14 = *v16;
      *(_OWORD *)&v10[v13 - 156] = *(_OWORD *)&v3[v13 - 156];
      *uint64_t v15 = v14;
    }
    else if (!v17)
    {
      sub_9F6FA0((uint64_t)v15, v16);
    }
    v13 -= 168;
  }
  while (&v3[v13] != v4);
  size_t v18 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  *a1 = &v10[v13];
  a1[1] = v12;
  a1[2] = v11;
  if (v3 != v18)
  {
    do
    {
      if (!*((_DWORD *)v3 - 2))
      {
        char v19 = (void *)*((void *)v3 - 6);
        if (v19)
        {
          *((void *)v3 - 5) = v19;
          operator delete(v19);
        }
        unint64_t v20 = (void *)*((void *)v3 - 10);
        if (v20)
        {
          *((void *)v3 - 9) = v20;
          operator delete(v20);
        }
        double v21 = (void *)*((void *)v3 - 13);
        if (v21)
        {
          *((void *)v3 - 12) = v21;
          operator delete(v21);
        }
      }
      v3 -= 168;
    }
    while (v3 != v18);
    uint64_t v3 = v18;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v10 + 168;
}

__n128 sub_A21764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    *(void *)(a1 + 8) = v4;
    if (v4 == a4) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = a2 + v4 - a4;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)unint64_t v6 = 0;
      *(unsigned char *)(v7 + 24) = *(unsigned char *)(v6 + 24);
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      __n128 result = *(__n128 *)(v6 + 32);
      *(__n128 *)(v7 + 32) = result;
      *(void *)(v7 + 48) = *(void *)(v6 + 48);
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      uint64_t v9 = *(void *)(v6 + 56);
      *(void *)(v7 + 63) = *(void *)(v6 + 63);
      *(void *)(v7 + 56) = v9;
      v7 += 72;
      v6 += 72;
    }
    while (v6 < a3);
    *(void *)(a1 + 8) = v7;
    if (v4 == a4) {
      return result;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = -8 * ((v4 - a4) >> 3);
  do
  {
    uint64_t v13 = v5 + v10;
    uint64_t v14 = v4 + v10;
    sub_A21B40((void **)(v4 + v10 - 72), (__n128 *)(v5 + v10 - 72));
    uint64_t v16 = (void **)(v4 + v10 - 40);
    uint64_t v15 = *v16;
    *(unsigned char *)(v4 + v10 - 48) = *(unsigned char *)(v5 + v10 - 48);
    if (v15)
    {
      *(void *)(v14 - 32) = v15;
      operator delete(v15);
      long long *v16 = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
    }
    __n128 result = *(__n128 *)(v13 - 40);
    *(__n128 *)uint64_t v16 = result;
    *(void *)(v14 - 24) = *(void *)(v13 - 24);
    *(void *)(v13 - 40) = 0;
    *(void *)(v13 - 32) = 0;
    *(void *)(v13 - 24) = 0;
    uint64_t v12 = *(void *)(v13 - 16);
    *(void *)(v14 - 9) = *(void *)(v13 - 9);
    *(void *)(v14 - 16) = v12;
    v10 -= 72;
  }
  while (v11 != v10);
  return result;
}

void *sub_A218D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 != *(char **)(a1 + 24)) {
    goto LABEL_25;
  }
  unint64_t v6 = *(char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v16 = 0x1C71C71C71C71C72 * ((v4 - v6) >> 3);
    if (v4 == v6) {
      unint64_t v16 = 1;
    }
    if (v16 >= 0x38E38E38E38E38FLL) {
      sub_188D718();
    }
    uint64_t v17 = *(void *)(a1 + 32);
    unint64_t v18 = v16 >> 2;
    uint64_t v19 = 72 * v16;
    unint64_t v20 = (char *)operator new(72 * v16);
    double v21 = &v20[72 * v18];
    int v22 = &v20[v19];
    if (v4 == (char *)v5)
    {
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v22;
      if (!v6) {
        goto LABEL_21;
      }
    }
    else
    {
      int v23 = &v4[(void)v21 - v5];
      uint64_t v24 = 72 * v18;
      do
      {
        int v25 = &v20[v24];
        *(_OWORD *)int v25 = *(_OWORD *)v5;
        *((void *)v25 + 2) = *(void *)(v5 + 16);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)unint64_t v5 = 0;
        v25[24] = *(unsigned char *)(v5 + 24);
        *((_OWORD *)v25 + 2) = *(_OWORD *)(v5 + 32);
        *((void *)v25 + 6) = *(void *)(v5 + 48);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        uint64_t v26 = *(void *)(v5 + 56);
        *(void *)(v25 + 63) = *(void *)(v5 + 63);
        *((void *)v25 + 7) = v26;
        v24 += 72;
        v5 += 72;
      }
      while (v25 + 72 != v23);
      unint64_t v6 = *(char **)a1;
      int v27 = *(void ***)(a1 + 8);
      int v28 = *(void ***)(a1 + 16);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v22;
      while (v28 != v27)
      {
        v28 -= 9;
        sub_9F5F58(v17, v28);
      }
      if (!v6) {
        goto LABEL_21;
      }
    }
    operator delete(v6);
LABEL_21:
    uint64_t v4 = *(char **)(a1 + 16);
    goto LABEL_25;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((char *)v5 == v4)
  {
    int v29 = (char *)(v5 - 72 * v9);
  }
  else
  {
    uint64_t v11 = -72 * v9;
    do
    {
      uint64_t v13 = (void *)(v5 + v11);
      sub_A21B40((void **)(v5 + v11), (__n128 *)v5);
      uint64_t v15 = (void **)(v5 + v11 + 32);
      uint64_t v14 = *v15;
      *(unsigned char *)(v5 + v11 + 24) = *(unsigned char *)(v5 + 24);
      if (v14)
      {
        v13[5] = v14;
        operator delete(v14);
        *uint64_t v15 = 0;
        v13[5] = 0;
        v13[6] = 0;
      }
      *(_OWORD *)uint64_t v15 = *(_OWORD *)(v5 + 32);
      v13[6] = *(void *)(v5 + 48);
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      uint64_t v12 = *(void *)(v5 + 56);
      *(void *)((char *)v13 + 63) = *(void *)(v5 + 63);
      v13[7] = v12;
      v5 += 72;
    }
    while ((char *)v5 != v4);
    uint64_t v4 = *(char **)(a1 + 8);
    int v29 = (char *)(v5 + 72 * v10);
  }
  *(void *)(a1 + 8) = &v4[72 * v10];
  *(void *)(a1 + 16) = v29;
  uint64_t v4 = v29;
LABEL_25:
  __n128 result = sub_9F6D1C(v4, a2);
  *(void *)(a1 + 16) += 72;
  return result;
}

__n128 sub_A21B40(void **a1, __n128 *a2)
{
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    unint64_t v5 = (char *)a1[1];
    unint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (!*((_DWORD *)v5 - 2))
        {
          int64_t v7 = (void *)*((void *)v5 - 6);
          if (v7)
          {
            *((void *)v5 - 5) = v7;
            operator delete(v7);
          }
          uint64_t v8 = (void *)*((void *)v5 - 10);
          if (v8)
          {
            *((void *)v5 - 9) = v8;
            operator delete(v8);
          }
          uint64_t v9 = (void *)*((void *)v5 - 13);
          if (v9)
          {
            *((void *)v5 - 12) = v9;
            operator delete(v9);
          }
        }
        v5 -= 168;
      }
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_A21BFC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          if (!*(_DWORD *)(v11 - 8))
          {
            uint64_t v13 = *(void **)(v11 - 48);
            if (v13)
            {
              *(void *)(v11 - 40) = v13;
              operator delete(v13);
            }
            uint64_t v14 = *(void **)(v11 - 80);
            if (v14)
            {
              *(void *)(v11 - 72) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *(void **)(v11 - 104);
            if (v15)
            {
              *(void *)(v11 - 96) = v15;
              operator delete(v15);
            }
          }
          v11 -= 168;
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x186186186186186) {
      goto LABEL_45;
    }
    unint64_t v21 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= a4) {
      uint64_t v22 = a4;
    }
    unint64_t v23 = v21 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v22;
    if (v23 > 0x186186186186186) {
LABEL_45:
    }
      sub_2E00();
    uint64_t v24 = 168 * v23;
    int v25 = operator new(168 * v23);
    *a1 = (uint64_t)v25;
    a1[1] = (uint64_t)v25;
    a1[2] = (uint64_t)v25 + v24;
    uint64_t v19 = sub_9F6EF4(v9, v6, a3, (uint64_t)v25);
LABEL_33:
    a1[1] = v19;
    return;
  }
  uint64_t v16 = a1[1];
  if (0xCF3CF3CF3CF3CF3DLL * ((v16 - v10) >> 3) < a4)
  {
    uint64_t v17 = a2 + 8 * ((v16 - v10) >> 3);
    if (v16 != v10)
    {
      uint64_t v18 = 8 * ((v16 - v10) >> 3);
      do
      {
        sub_A21E9C(v10, v6);
        v6 += 168;
        v10 += 168;
        v18 -= 168;
      }
      while (v18);
      uint64_t v10 = a1[1];
    }
    uint64_t v19 = sub_9F6EF4(v9, v17, a3, v10);
    goto LABEL_33;
  }
  if (a2 == a3)
  {
    uint64_t v20 = *a1;
  }
  else
  {
    uint64_t v20 = *a1;
    do
    {
      sub_A21E9C(v10, v6);
      v6 += 168;
      v10 += 168;
      v20 += 168;
    }
    while (v6 != a3);
    uint64_t v16 = a1[1];
  }
  while (v16 != v20)
  {
    if (!*(_DWORD *)(v16 - 8))
    {
      uint64_t v26 = *(void **)(v16 - 48);
      if (v26)
      {
        *(void *)(v16 - 40) = v26;
        operator delete(v26);
      }
      int v27 = *(void **)(v16 - 80);
      if (v27)
      {
        *(void *)(v16 - 72) = v27;
        operator delete(v27);
      }
      int v28 = *(void **)(v16 - 104);
      if (v28)
      {
        *(void *)(v16 - 96) = v28;
        operator delete(v28);
      }
    }
    v16 -= 168;
  }
  a1[1] = v20;
}

void sub_A21E8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_A21E94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_A21E9C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(_DWORD *)(a1 + 160);
    int v5 = *(_DWORD *)(a2 + 160);
    if (v4 == v5)
    {
      if (v4 == 1)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
        *(__n128 *)a1 = result;
      }
      else if (!v4)
      {
        __n128 v6 = *(__n128 *)a2;
        long long v7 = *(_OWORD *)(a2 + 16);
        long long v8 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
        *(__n128 *)a1 = v6;
        sub_A20FE0((void *)(a1 + 64), *(char **)(a2 + 64), *(char **)(a2 + 72), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2));
        sub_A20FE0((void *)(a1 + 88), *(char **)(a2 + 88), *(char **)(a2 + 96), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2));
        *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
        sub_9094A4((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
        __n128 result = *(__n128 *)(a2 + 144);
        *(__n128 *)(a1 + 144) = result;
      }
      return result;
    }
    if (v4)
    {
      if (v5 != 1)
      {
LABEL_9:
        if (!v5) {
          sub_9F6FA0(a1, (long long *)a2);
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v10 = *(void **)(a1 + 120);
      if (v10)
      {
        *(void *)(a1 + 128) = v10;
        operator delete(v10);
      }
      uint64_t v11 = *(void **)(a1 + 88);
      if (v11)
      {
        *(void *)(a1 + 96) = v11;
        operator delete(v11);
      }
      uint64_t v12 = *(void **)(a1 + 64);
      if (v12)
      {
        *(void *)(a1 + 72) = v12;
        operator delete(v12);
      }
      int v5 = *(_DWORD *)(a2 + 160);
      if (v5 != 1) {
        goto LABEL_9;
      }
    }
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
    *(__n128 *)a1 = result;
LABEL_19:
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  }
  return result;
}

void sub_A22020(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(void *)(a1 + 256) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 224);
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
  }
  int v5 = *(void ***)(a1 + 200);
  if (v5)
  {
    __n128 v6 = *(void ***)(a1 + 208);
    long long v7 = *(void **)(a1 + 200);
    if (v6 != v5)
    {
      do
      {
        v6 -= 9;
        sub_9F5F58(a1 + 216, v6);
      }
      while (v6 != v5);
      long long v7 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    long long v8 = *(void **)(a1 + 112);
    operator delete(v8);
  }
}

char *sub_A220E4(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x14C1BACF914C1BADLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xDD67C8A60DD67CLL) {
    sub_2E00();
  }
  if (0x2983759F2298375ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x2983759F2298375ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x14C1BACF914C1BADLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
    unint64_t v5 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xDD67C8A60DD67CLL) {
    sub_188D718();
  }
  uint64_t v7 = 296 * v5;
  long long v8 = (char *)operator new(296 * v5);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v10 = &v8[296 * v3];
  uint64_t v11 = &v8[v7];
  *((_OWORD *)v10 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v10 + 5) = v9;
  *((void *)v10 + 12) = *(void *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v12;
  long long v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v10 + 3) = v13;
  *((_DWORD *)v10 + 26) = *(_DWORD *)(a2 + 104);
  long long v14 = *(_OWORD *)(a2 + 112);
  *((void *)v10 + 16) = *(void *)(a2 + 128);
  *((_OWORD *)v10 + 7) = v14;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  *((_DWORD *)v10 + 34) = *(_DWORD *)(a2 + 136);
  long long v15 = *(_OWORD *)(a2 + 176);
  long long v16 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v10 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v10 + 11) = v15;
  *((_OWORD *)v10 + 9) = v16;
  *((void *)v10 + 24) = *(void *)(a2 + 192);
  *((void *)v10 + 27) = 0;
  *(_OWORD *)(v10 + 200) = *(_OWORD *)(a2 + 200);
  *((void *)v10 + 27) = *(void *)(a2 + 216);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *((void *)v10 + 29) = 0;
  *((void *)v10 + 30) = 0;
  *((_OWORD *)v10 + 14) = *(_OWORD *)(a2 + 224);
  *((void *)v10 + 30) = *(void *)(a2 + 240);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *((void *)v10 + 32) = 0;
  *((void *)v10 + 33) = 0;
  *(_OWORD *)(v10 + 248) = *(_OWORD *)(a2 + 248);
  *((void *)v10 + 33) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *((void *)v10 + 35) = 0;
  *((void *)v10 + 36) = 0;
  *((_OWORD *)v10 + 17) = *(_OWORD *)(a2 + 272);
  *((void *)v10 + 36) = *(void *)(a2 + 288);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  uint64_t v17 = v10 + 296;
  uint64_t v18 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
    if (!v19) {
      return v17;
    }
    goto LABEL_15;
  }
  uint64_t v20 = 0;
  do
  {
    unint64_t v21 = &v10[v20];
    uint64_t v22 = &v10[v20 - 296];
    unint64_t v23 = &v19[v20];
    long long v24 = *(_OWORD *)&v19[v20 - 248];
    long long v25 = *(_OWORD *)&v19[v20 - 232];
    long long v26 = *(_OWORD *)&v19[v20 - 216];
    *((void *)v21 - 25) = *(void *)&v19[v20 - 200];
    *(_OWORD *)(v21 - 216) = v26;
    *(_OWORD *)(v21 - 232) = v25;
    *(_OWORD *)(v21 - 248) = v24;
    long long v27 = *(_OWORD *)&v19[v20 - 296];
    long long v28 = *(_OWORD *)&v19[v20 - 264];
    *((_OWORD *)v22 + 1) = *(_OWORD *)&v19[v20 - 280];
    *((_OWORD *)v22 + 2) = v28;
    *(_OWORD *)uint64_t v22 = v27;
    *((_DWORD *)v21 - 48) = *(_DWORD *)&v19[v20 - 192];
    long long v29 = *(_OWORD *)&v19[v20 - 184];
    *((void *)v21 - 21) = *(void *)&v19[v20 - 168];
    *(_OWORD *)(v21 - 184) = v29;
    *((void *)v23 - 22) = 0;
    *((void *)v23 - 21) = 0;
    *((void *)v23 - 23) = 0;
    *((_DWORD *)v21 - 40) = *(_DWORD *)&v19[v20 - 160];
    long long v30 = *(_OWORD *)&v19[v20 - 152];
    long long v31 = *(_OWORD *)&v19[v20 - 136];
    *(_OWORD *)(v21 - 120) = *(_OWORD *)&v19[v20 - 120];
    *(_OWORD *)(v21 - 136) = v31;
    *(_OWORD *)(v21 - 152) = v30;
    long long v32 = *(_OWORD *)&v19[v20 - 96];
    *((void *)v21 - 13) = *(void *)&v19[v20 - 104];
    *((_OWORD *)v21 - 6) = v32;
    *((void *)v21 - 10) = *(void *)&v19[v20 - 80];
    *((void *)v23 - 12) = 0;
    *((void *)v23 - 11) = 0;
    *((void *)v23 - 10) = 0;
    *(_OWORD *)(v21 - 72) = *(_OWORD *)&v19[v20 - 72];
    *((void *)v21 - 7) = *(void *)&v19[v20 - 56];
    *((void *)v23 - 9) = 0;
    *((void *)v23 - 8) = 0;
    *((void *)v23 - 7) = 0;
    *((_OWORD *)v21 - 3) = *(_OWORD *)&v19[v20 - 48];
    *((void *)v21 - 4) = *(void *)&v19[v20 - 32];
    *((void *)v23 - 6) = 0;
    *((void *)v23 - 5) = 0;
    *((void *)v23 - 4) = 0;
    *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v20 - 24];
    *((void *)v21 - 1) = *(void *)&v19[v20 - 8];
    *((void *)v23 - 3) = 0;
    *((void *)v23 - 2) = 0;
    *((void *)v23 - 1) = 0;
    v20 -= 296;
  }
  while (&v19[v20] != v18);
  uint64_t v33 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  *a1 = &v10[v20];
  a1[1] = v17;
  a1[2] = v11;
  if (v19 != v33)
  {
    do
    {
      v19 -= 296;
      sub_9F5E28((uint64_t)(a1 + 2), (uint64_t)v19);
    }
    while (v19 != v33);
    uint64_t v19 = v33;
  }
  if (v19) {
LABEL_15:
  }
    operator delete(v19);
  return v17;
}

void sub_A223E0()
{
  unk_25DFA87 = 16641;
  word_25DFA70 = 65;
  byte_25DFA9F = 1;
  byte_25DFA89 = 0;
}

void sub_A22408(int a1, uint64_t a2, void *a3)
{
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    unint64_t v5 = a3;
    switch(*((unsigned char *)a3 + 23))
    {
      case 3:
        if (*(_WORD *)a3 != 28787 || *((unsigned char *)a3 + 2) != 97) {
          goto LABEL_55;
        }
        goto LABEL_62;
      case 4:
LABEL_45:
        if (*(_DWORD *)a3 == 1634759538) {
          goto LABEL_46;
        }
        goto LABEL_55;
      case 7:
LABEL_47:
        if (*(_DWORD *)a3 != 1886610285 || *(_DWORD *)((char *)a3 + 3) != 1949131120) {
          goto LABEL_55;
        }
        goto LABEL_52;
      case 8:
LABEL_53:
        if (*a3 == 0x77742D617073636DLL) {
          goto LABEL_54;
        }
        goto LABEL_55;
      case 9:
        goto LABEL_34;
      case 0xB:
        if (*a3 != 0x706D6F632D617073 || *(void *)((char *)a3 + 3) != 0x746361706D6F632DLL)
        {
          unint64_t v5 = a3;
          switch(*((unsigned char *)a3 + 23))
          {
            case 4:
              goto LABEL_45;
            case 7:
              goto LABEL_47;
            case 8:
              goto LABEL_53;
            case 9:
              goto LABEL_34;
            default:
              goto LABEL_55;
          }
        }
        goto LABEL_61;
      default:
        goto LABEL_55;
    }
  }
  uint64_t v7 = a3[1];
  if (v7 != 3 || (*(_WORD *)*a3 == 28787 ? (BOOL v8 = *(unsigned char *)(*a3 + 2) == 97) : (BOOL v8 = 0), !v8))
  {
    if (v7 == 11)
    {
      if (*(void *)*a3 == 0x706D6F632D617073 && *(void *)(*a3 + 3) == 0x746361706D6F632DLL)
      {
LABEL_61:
        uint64_t v20 = 0;
        unint64_t v21 = operator new(0x38uLL);
        long long v22 = xmmword_20B9AC0;
        strcpy((char *)v21, "routing/transit/journey_planning/algorithms/Spa.json");
        long long __p = 0;
        uint64_t v19 = 0;
        sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
        operator new();
      }
      uint64_t v7 = a3[1];
    }
    if (v7 == 4)
    {
      if (*(_DWORD *)*a3 == 1634759538)
      {
LABEL_46:
        uint64_t v20 = 0;
        unint64_t v21 = operator new(0x40uLL);
        long long v22 = xmmword_20B9A70;
        strcpy((char *)v21, "routing/transit/journey_planning/algorithms/RangeSpa.json");
        long long __p = 0;
        uint64_t v19 = 0;
        sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
        operator new();
      }
      uint64_t v7 = a3[1];
    }
    if (v7 == 7)
    {
      if (*(_DWORD *)*a3 == 1886610285 && *(_DWORD *)(*a3 + 3) == 1949131120)
      {
LABEL_52:
        uint64_t v20 = 0;
        unint64_t v21 = operator new(0x38uLL);
        long long v22 = xmmword_20B8DF0;
        strcpy((char *)v21, "routing/transit/journey_planning/algorithms/McSpa.json");
        long long __p = 0;
        uint64_t v19 = 0;
        sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
        operator new();
      }
      uint64_t v7 = a3[1];
    }
    if (v7 == 8)
    {
      if (*(void *)*a3 == 0x77742D617073636DLL)
      {
LABEL_54:
        uint64_t v20 = 0;
        unint64_t v21 = operator new(0x38uLL);
        long long v22 = xmmword_20B8DF0;
        strcpy((char *)v21, "routing/transit/journey_planning/algorithms/McSpa.json");
        long long __p = 0;
        uint64_t v19 = 0;
        sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
        operator new();
      }
      uint64_t v7 = a3[1];
    }
    if (v7 == 9)
    {
      unint64_t v5 = (uint64_t *)*a3;
LABEL_34:
      uint64_t v11 = *v5;
      int v12 = *((unsigned __int8 *)v5 + 8);
      if (v11 == 0x77742D617073636DLL && v12 == 114)
      {
        sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/McSpa.json");
        long long __p = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
        sub_A23328();
      }
    }
LABEL_55:
    if (sub_A2328C(a3, "mcspa-twrt"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/McSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A233A8();
    }
    if (sub_A2328C(a3, "mcspa-twrft"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/McSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23428();
    }
    if (sub_A2328C(a3, "mcspa-twrtm"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/McSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A234A8();
    }
    if (sub_A2328C(a3, "mcspa-twrftm"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/McSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23528();
    }
    if (sub_A2328C(a3, "bmcspa-t"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A235A8();
    }
    if (sub_A2328C(a3, "bmcspa-tw"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23670();
    }
    if (sub_A2328C(a3, "bmcspa-twr"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A236F0();
    }
    if (sub_A2328C(a3, "bmcspa-twrt"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23770();
    }
    if (sub_A2328C(a3, "bmcspa-twrt-compact"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A237F0();
    }
    if (sub_A2328C(a3, "bmcspa-twrtm"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A238B8();
    }
    if (sub_A2328C(a3, "bmcspa-twrtm-compact"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23938();
    }
    if (sub_A2328C(a3, "bmcspa-twrft"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A239B8();
    }
    if (sub_A2328C(a3, "bmcspa-twrft-compact"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23A38();
    }
    if (sub_A2328C(a3, "bmcspa-twrftm"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23AB8();
    }
    if (sub_A2328C(a3, "bmcspa-twrftm-compact"))
    {
      sub_5E5C(&v21, "routing/transit/journey_planning/algorithms/BoundedMcSpa.json");
      long long __p = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
      sub_A23B38();
    }
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v17 = (void *)sub_2F404((uint64_t)exception, (long long *)&v21);
  }
LABEL_62:
  uint64_t v20 = 0;
  unint64_t v21 = operator new(0x38uLL);
  long long v22 = xmmword_20B9AC0;
  strcpy((char *)v21, "routing/transit/journey_planning/algorithms/Spa.json");
  long long __p = 0;
  uint64_t v19 = 0;
  sub_374CDC(a2, (uint64_t)&v21, (uint64_t *)&__p);
  operator new();
}

void sub_A2313C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_A2328C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_5AD0();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_A23328()
{
}

void sub_A23384()
{
}

void sub_A233A8()
{
}

void sub_A23404()
{
}

void sub_A23428()
{
}

void sub_A23484()
{
}

void sub_A234A8()
{
}

void sub_A23504()
{
}

void sub_A23528()
{
}

void sub_A23584()
{
}

void sub_A235A8()
{
}

void sub_A23604()
{
}

uint64_t *sub_A23628(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_A23ED0(v2);
    operator delete();
  }
  return a1;
}

void sub_A23670()
{
}

void sub_A236CC()
{
}

void sub_A236F0()
{
}

void sub_A2374C()
{
}

void sub_A23770()
{
}

void sub_A237CC()
{
}

void sub_A237F0()
{
}

void sub_A2384C()
{
}

uint64_t *sub_A23870(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_A24014(v2);
    operator delete();
  }
  return a1;
}

void sub_A238B8()
{
}

void sub_A23914()
{
}

void sub_A23938()
{
}

void sub_A23994()
{
}

void sub_A239B8()
{
}

void sub_A23A14()
{
}

void sub_A23A38()
{
}

void sub_A23A94()
{
}

void sub_A23AB8()
{
}

void sub_A23B14()
{
}

void sub_A23B38()
{
}

void sub_A23B94()
{
}

void *sub_A23BB8(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  void *result = a2;
  if (v2)
  {
    sub_9FD504((uint64_t)(v2 + 34));
    uint64_t v3 = (void *)v2[30];
    if (v3)
    {
      v2[31] = v3;
      operator delete(v3);
    }
    size_t v4 = (void *)v2[29];
    if (v4) {
      free(v4);
    }
    unint64_t v5 = (void *)v2[15];
    if (v5)
    {
      v2[16] = v5;
      operator delete(v5);
    }
    __n128 v6 = (void *)v2[14];
    if (v6) {
      free(v6);
    }
    operator delete();
  }
  return result;
}

void *sub_A23C50(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  void *result = a2;
  if (v2)
  {
    sub_9FD504((uint64_t)(v2 + 38));
    uint64_t v3 = (void *)v2[30];
    if (v3)
    {
      v2[31] = v3;
      operator delete(v3);
    }
    size_t v4 = (void *)v2[29];
    if (v4) {
      free(v4);
    }
    unint64_t v5 = (void *)v2[15];
    if (v5)
    {
      v2[16] = v5;
      operator delete(v5);
    }
    __n128 v6 = (void *)v2[14];
    if (v6) {
      free(v6);
    }
    operator delete();
  }
  return result;
}

void *sub_A23CE8(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  void *result = a2;
  if (v2)
  {
    sub_A23D80((uint64_t)(v2 + 34));
    uint64_t v3 = (void *)v2[30];
    if (v3)
    {
      v2[31] = v3;
      operator delete(v3);
    }
    size_t v4 = (void *)v2[29];
    if (v4) {
      free(v4);
    }
    unint64_t v5 = (void *)v2[15];
    if (v5)
    {
      v2[16] = v5;
      operator delete(v5);
    }
    __n128 v6 = (void *)v2[14];
    if (v6) {
      free(v6);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_A23D80(uint64_t a1)
{
  if ((*(char *)(a1 + 487) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 440);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 464));
  uint64_t v2 = *(void **)(a1 + 440);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 448) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 416);
  if (v3) {
    operator delete(v3);
  }
  size_t v4 = *(void **)(a1 + 392);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 328);
  if (v5)
  {
    *(void *)(a1 + 336) = v5;
    operator delete(v5);
  }
  __n128 v6 = *(void **)(a1 + 304);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 280);
  if (v7)
  {
    *(void *)(a1 + 288) = v7;
    operator delete(v7);
  }
  BOOL v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(void *)(a1 + 264) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(a1 + 232);
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 208);
  if (v10)
  {
    *(void *)(a1 + 216) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 184);
  if (v11) {
    operator delete(v11);
  }
  int v12 = *(void **)(a1 + 152);
  if (v12) {
    operator delete(v12);
  }
  long long v13 = *(void **)(a1 + 128);
  if (v13)
  {
    *(void *)(a1 + 136) = v13;
    operator delete(v13);
  }
  long long v14 = *(void **)(a1 + 104);
  if (v14)
  {
    *(void *)(a1 + 112) = v14;
    operator delete(v14);
  }
  long long v15 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

uint64_t sub_A23ED0(uint64_t a1)
{
  sub_A23D80(a1 + 1336);
  sub_9FD504(a1 + 608);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 600);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void **)(a1 + 552);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void **)(a1 + 552);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 560) = v3;
    operator delete(v3);
  }
LABEL_5:
  size_t v4 = *(void **)(a1 + 544);
  if (v4) {
    free(v4);
  }
  unint64_t v5 = *(void **)(a1 + 432);
  if (v5)
  {
    *(void *)(a1 + 440) = v5;
    operator delete(v5);
  }
  __n128 v6 = *(void **)(a1 + 424);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    BOOL v8 = *(void **)(a1 + 136);
    if (!v8) {
      return a1;
    }
  }
  else
  {
    BOOL v8 = *(void **)(a1 + 136);
    if (!v8) {
      return a1;
    }
  }
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v11 = v8;
  if ((void *)v10 != v8)
  {
    do
    {
      v10 -= 296;
      sub_9F5E28(a1 + 152, v10);
    }
    while ((void *)v10 != v8);
    uint64_t v11 = *(void **)(a1 + 136);
  }
  *(void *)(a1 + 144) = v8;
  operator delete(v11);
  return a1;
}

uint64_t sub_A24014(uint64_t a1)
{
  sub_A241D8(a1 + 1336);
  sub_9FD504(a1 + 608);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 600);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void **)(a1 + 552);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void **)(a1 + 552);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 560) = v3;
    operator delete(v3);
  }
LABEL_5:
  uint64_t v4 = *(void *)(a1 + 512);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 520);
    __n128 v6 = *(void **)(a1 + 512);
    if (v5 != v4)
    {
      uint64_t v7 = *(void *)(a1 + 520);
      do
      {
        long long v9 = *(void **)(v7 - 16);
        v7 -= 16;
        BOOL v8 = v9;
        if (v9)
        {
          free(v8);
          *(void *)(v5 - 16) = 0;
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      __n128 v6 = *(void **)(a1 + 512);
    }
    *(void *)(a1 + 520) = v4;
    free(v6);
  }
  uint64_t v10 = *(void **)(a1 + 432);
  if (v10)
  {
    *(void *)(a1 + 440) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 392);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 400);
    long long v13 = *(void **)(a1 + 392);
    if (v12 != v11)
    {
      uint64_t v14 = *(void *)(a1 + 400);
      do
      {
        long long v16 = *(void **)(v14 - 16);
        v14 -= 16;
        long long v15 = v16;
        if (v16)
        {
          free(v15);
          *(void *)(v12 - 16) = 0;
        }
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      long long v13 = *(void **)(a1 + 392);
    }
    *(void *)(a1 + 400) = v11;
    free(v13);
  }
  uint64_t v17 = *(void **)(a1 + 320);
  if (v17)
  {
    *(void *)(a1 + 328) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    uint64_t v18 = *(void **)(a1 + 136);
    if (!v18) {
      return a1;
    }
  }
  else
  {
    uint64_t v18 = *(void **)(a1 + 136);
    if (!v18) {
      return a1;
    }
  }
  uint64_t v20 = *(void *)(a1 + 144);
  unint64_t v21 = v18;
  if ((void *)v20 != v18)
  {
    do
    {
      v20 -= 296;
      sub_9F5E28(a1 + 152, v20);
    }
    while ((void *)v20 != v18);
    unint64_t v21 = *(void **)(a1 + 136);
  }
  *(void *)(a1 + 144) = v18;
  operator delete(v21);
  return a1;
}

uint64_t sub_A241D8(uint64_t a1)
{
  if ((*(char *)(a1 + 551) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 504);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 528));
  uint64_t v2 = *(void **)(a1 + 504);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 512) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 480);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 392);
  if (v5)
  {
    *(void *)(a1 + 400) = v5;
    operator delete(v5);
  }
  __n128 v6 = *(void **)(a1 + 368);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 344);
  if (v7)
  {
    *(void *)(a1 + 352) = v7;
    operator delete(v7);
  }
  BOOL v8 = *(void **)(a1 + 320);
  if (v8)
  {
    *(void *)(a1 + 328) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(a1 + 296);
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 272);
  if (v10)
  {
    *(void *)(a1 + 280) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 248);
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 216);
  if (v12) {
    operator delete(v12);
  }
  long long v13 = *(void **)(a1 + 192);
  if (v13)
  {
    *(void *)(a1 + 200) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void *)(a1 + 152);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 160);
    long long v16 = *(void **)(a1 + 152);
    if (v15 != v14)
    {
      uint64_t v17 = *(void *)(a1 + 160);
      do
      {
        uint64_t v19 = *(void **)(v17 - 16);
        v17 -= 16;
        uint64_t v18 = v19;
        if (v19)
        {
          free(v18);
          *(void *)(v15 - 16) = 0;
        }
        uint64_t v15 = v17;
      }
      while (v17 != v14);
      long long v16 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v14;
    free(v16);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_A24370()
{
  unk_25DFAB7 = 16641;
  word_25DFAA0 = 65;
  byte_25DFACF = 1;
  byte_25DFAB9 = 0;
}

void sub_A24398(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  if (*(void **)a2 == v5) {
    return;
  }
  uint64_t v6 = a1;
  v118 = *(void **)(a2 + 8);
  while (2)
  {
    uint64_t v7 = (void *)*v4;
    BOOL v8 = (void *)v4[1];
    uint64_t v122 = v4;
    while (1)
    {
      if (v7 == v8) {
        goto LABEL_3;
      }
      uint64_t v9 = *v7;
      uint64_t v10 = sub_369B60(*(void *)(v6 + 4184) + 24, __ROR8__(*v7, 32), 0);
      uint64_t v11 = &v10[-*(int *)v10];
      if (*(unsigned __int16 *)v11 < 5u)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = *((unsigned __int16 *)v11 + 2);
        if (v12) {
          v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
        }
      }
      long long v13 = (int *)(v12 + 4 * v9 + 4 + *(unsigned int *)(v12 + 4 * v9 + 4));
      uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 0x2Bu)
      {
        uint64_t v15 = v14[21];
        if (v15)
        {
          if (*(int *)((char *)v13 + v15) != -1) {
            break;
          }
        }
      }
      v7 += 16;
    }
    long long v134 = 0u;
    long long v135 = 0u;
    int v136 = 1065353216;
    long long v131 = 0u;
    long long v132 = 0u;
    int v133 = 1065353216;
    long long v16 = (char **)v122;
    unint64_t v17 = v122[1] - *v122;
    if ((v17 & 0x7FFFFFFF80) == 0)
    {
      unint64_t v78 = 0;
      goto LABEL_86;
    }
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    uint64_t v20 = (v17 >> 7);
    uint64_t v121 = v20;
    while (2)
    {
      unint64_t v21 = &(*v16)[128 * v18];
      *(void *)uint64_t v138 = 0;
      long long __p = 0;
      uint64_t v139 = 0;
      v125 = v21;
      long long v22 = (int *)*((void *)v21 + 2);
      unint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 < 9u || (uint64_t v24 = v23[4]) == 0 || (v124 = *(int *)((char *)v22 + v24)) == 0)
      {
        unint64_t v76 = 0;
        uint64_t v77 = v125 + 104;
        if (v125 + 104 == (char *)&__p) {
          goto LABEL_79;
        }
LABEL_78:
        sub_326C0(v77, v76, *(char **)v138, (uint64_t)(*(void *)v138 - (void)v76) >> 3);
        unint64_t v76 = (char *)__p;
        goto LABEL_79;
      }
      for (int i = 0; i != v124; ++i)
      {
        uint64_t v26 = *(void *)v125;
        unint64_t v27 = __ROR8__(*(void *)v125, 32);
        long long v28 = sub_369B60(*(void *)(v6 + 4184) + 24, v27, 0);
        long long v29 = &v28[-*(int *)v28];
        if (*(unsigned __int16 *)v29 < 5u)
        {
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = *((unsigned __int16 *)v29 + 2);
          if (v30) {
            v30 += (uint64_t)&v28[*(unsigned int *)&v28[v30]];
          }
        }
        long long v31 = (int *)(v30 + 4 * v26 + 4 + *(unsigned int *)(v30 + 4 * v26 + 4));
        long long v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 < 0x2Bu || (uint64_t v33 = v32[21]) == 0 || *(int *)((char *)v31 + v33) == -1)
        {
LABEL_54:
          unsigned int v50 = 0;
          v126[0] = 0;
          std::string v56 = *(void ***)v138;
          uint64_t v57 = v139;
          if (*(void *)v138 < (unint64_t)v139) {
            goto LABEL_53;
          }
          goto LABEL_55;
        }
        unsigned int v34 = sub_369B60(*(void *)(v6 + 4184) + 24, v27, 0);
        uint64_t v35 = &v34[-*(int *)v34];
        unsigned int v36 = *(unsigned __int16 *)v35;
        if (v36 <= 4)
        {
          uint64_t v40 = 0;
          uint64_t v38 = (int *)(4 * v26 + 4 + dword_4[v26]);
          uint64_t v41 = (unsigned __int16 *)((char *)v38 - *v38);
          if (*v41 < 0x2Bu) {
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v37 = *((unsigned __int16 *)v35 + 2);
          if (*((_WORD *)v35 + 2)) {
            v37 += (uint64_t)&v34[*(unsigned int *)&v34[v37]];
          }
          uint64_t v38 = (int *)(v37 + 4 * v26 + 4 + *(unsigned int *)(v37 + 4 * v26 + 4));
          if (v36 >= 0x17 && (uint64_t v39 = *((unsigned __int16 *)v35 + 11)) != 0)
          {
            uint64_t v40 = (unsigned int *)&v34[v39 + *(unsigned int *)&v34[v39]];
            uint64_t v41 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v41 < 0x2Bu) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v40 = 0;
            uint64_t v41 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v41 < 0x2Bu) {
              goto LABEL_41;
            }
          }
        }
        uint64_t v42 = v41[21];
        if (!v42)
        {
LABEL_41:
          int v43 = -1;
          goto LABEL_42;
        }
        int v43 = *(int *)((char *)v38 + v42);
LABEL_42:
        uint64_t v44 = (int *)sub_A2516C(v40, v43 + i);
        long long v45 = (unsigned __int16 *)((char *)v44 - *v44);
        if (*v45 < 5u) {
          goto LABEL_54;
        }
        uint64_t v46 = v45[2];
        if (!v46) {
          goto LABEL_54;
        }
        int v47 = (unsigned int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
        uint64_t v48 = *v47;
        if (!v48) {
          goto LABEL_54;
        }
        size_t v49 = 4 * v48;
        unsigned int v50 = (char *)operator new(4 * v48);
        memcpy(v50, v47 + 1, v49);
        uint64_t v51 = 0;
        v126[0] = 0;
        do
        {
          unsigned int v52 = *(_DWORD *)&v50[v51];
          v130[0] = v18;
          v130[1] = v52;
          v128[0] = v130;
          long long v53 = sub_A252D0((uint64_t)&v131, v130, (uint64_t)&unk_20F06E0, v128);
          unsigned int v54 = *((_DWORD *)v53 + 6);
          if (v54 == -1)
          {
            *((_DWORD *)v53 + 6) = v19;
            unsigned int v54 = v19++;
          }
          if (v54 >= 0x20) {
            sub_5AE8("bitset set argument out of range");
          }
          std::string v55 = (void *)((unint64_t)v126[0] | (1 << v54));
          v126[0] = v55;
          v51 += 4;
        }
        while (v49 != v51);
        if (v55) {
          sub_A25648((uint64_t)&v134, (unint64_t *)v126, v126);
        }
        std::string v56 = *(void ***)v138;
        uint64_t v57 = v139;
        if (*(void *)v138 < (unint64_t)v139)
        {
LABEL_53:
          *std::string v56 = v126[0];
          uint64_t v58 = (uint64_t)(v56 + 1);
          goto LABEL_75;
        }
LABEL_55:
        int v59 = (void **)__p;
        int64_t v60 = (char *)v56 - (unsigned char *)__p;
        uint64_t v61 = ((char *)v56 - (unsigned char *)__p) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v63 = v57 - (unsigned char *)__p;
        if (v63 >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          if (v64 >> 61) {
            sub_188D718();
          }
          uint64_t v65 = operator new(8 * v64);
          char v66 = (void **)&v65[8 * v61];
          int *v66 = v126[0];
          uint64_t v58 = (uint64_t)(v66 + 1);
          if (v56 == v59)
          {
LABEL_73:
            long long __p = v66;
            *(void *)uint64_t v138 = v58;
            uint64_t v139 = &v65[8 * v64];
            if (!v56) {
              goto LABEL_75;
            }
LABEL_74:
            operator delete(v56);
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v65 = 0;
          char v66 = (void **)(8 * v61);
          *(void **)(8 * v61) = v126[0];
          uint64_t v58 = 8 * v61 + 8;
          if (v56 == v59) {
            goto LABEL_73;
          }
        }
        unint64_t v67 = (char *)(v56 - 1) - (char *)v59;
        if (v67 < 0x58) {
          goto LABEL_150;
        }
        if ((unint64_t)((char *)v56 - &v65[v60]) < 0x20) {
          goto LABEL_150;
        }
        uint64_t v68 = (v67 >> 3) + 1;
        uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v70 = &v56[v69 / 0xFFFFFFFFFFFFFFF8];
        char v66 = (void **)((char *)v66 - v69);
        uint64_t v71 = &v65[8 * v61 - 16];
        uint64_t v72 = v56 - 2;
        uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *(v71 - 1) = *((_OWORD *)v72 - 1);
          *uint64_t v71 = v74;
          v71 -= 2;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        std::string v56 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_150:
          do
          {
            int v75 = *--v56;
            *--char v66 = v75;
          }
          while (v56 != v59);
        }
        std::string v56 = (void **)__p;
        long long __p = v66;
        *(void *)uint64_t v138 = v58;
        uint64_t v139 = &v65[8 * v64];
        if (v56) {
          goto LABEL_74;
        }
LABEL_75:
        *(void *)uint64_t v138 = v58;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v6 = a1;
      }
      unint64_t v76 = (char *)__p;
      uint64_t v20 = v121;
      long long v16 = (char **)v122;
      uint64_t v77 = v125 + 104;
      if (v125 + 104 != (char *)&__p) {
        goto LABEL_78;
      }
LABEL_79:
      if (v76)
      {
        *(void *)uint64_t v138 = v76;
        operator delete(v76);
      }
      if (++v18 != v20) {
        continue;
      }
      break;
    }
    unint64_t v78 = *((void *)&v135 + 1);
    uint64_t v5 = v118;
    if (*((void *)&v132 + 1) > 0x20uLL)
    {
LABEL_87:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v128);
        int v79 = sub_188FC78(v128, (uint64_t)"Too many different boarding restriction ids or groups on trip sequence ", 71);
        v80 = *v16;
        v81 = v16[1];
        sub_6BAC((uint64_t)&__p);
        if (v80 != v81)
        {
          uint64_t v82 = (int *)sub_369F8C(*(void *)(v6 + 4184) + 24, __ROR8__(*(void *)v80, 32), 0, "trip");
          v83 = (unsigned __int16 *)((char *)v82 - *v82);
          if (*v83 >= 5u && (uint64_t v84 = v83[2]) != 0) {
            uint64_t v85 = *(void *)((char *)v82 + v84);
          }
          else {
            uint64_t v85 = 0;
          }
          uint64_t v86 = sub_398020(*(void *)(v6 + 4184) + 24, 0);
          v87 = &v86[-*(int *)v86];
          if (*(unsigned __int16 *)v87 >= 0xBu)
          {
            uint64_t v88 = *((unsigned __int16 *)v87 + 5);
            if (v88)
            {
              if (v86[v88]) {
                nullsub_1(v85);
              }
            }
          }
          std::ostream::operator<<();
          if (v80 + 128 != v81)
          {
            uint64_t v89 = 128;
            do
            {
              if (v89) {
                sub_188FC78(&__p, (uint64_t)", ", 2);
              }
              v90 = (int *)sub_369F8C(*(void *)(v6 + 4184) + 24, __ROR8__(*(void *)&v80[v89], 32), 0, "trip");
              v91 = (unsigned __int16 *)((char *)v90 - *v90);
              if (*v91 >= 5u && (uint64_t v92 = v91[2]) != 0) {
                uint64_t v93 = *(void *)((char *)v90 + v92);
              }
              else {
                uint64_t v93 = 0;
              }
              v94 = sub_398020(*(void *)(v6 + 4184) + 24, 0);
              int v95 = &v94[-*(int *)v94];
              if (*(unsigned __int16 *)v95 >= 0xBu)
              {
                uint64_t v96 = *((unsigned __int16 *)v95 + 5);
                if (v96)
                {
                  if (v94[v96]) {
                    nullsub_1(v93);
                  }
                }
              }
              std::ostream::operator<<();
              v89 += 128;
            }
            while (&v80[v89] != v81);
          }
        }
        std::stringbuf::str();
        long long __p = v116;
        *(void *)((char *)&v138[-2] + *((void *)v116 - 3)) = v117;
        long long v16 = (char **)v122;
        if (v141 < 0) {
          operator delete(v140);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        if ((v127 & 0x80u) == 0) {
          v97 = v126;
        }
        else {
          v97 = (void **)v126[0];
        }
        if ((v127 & 0x80u) == 0) {
          uint64_t v98 = v127;
        }
        else {
          uint64_t v98 = (uint64_t)v126[1];
        }
        v99 = sub_188FC78(v79, (uint64_t)v97, v98);
        sub_188FC78(v99, (uint64_t)"; dropping restrictions", 23);
        if ((char)v127 < 0) {
          operator delete(v126[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (SHIBYTE(v139) < 0) {
          operator delete(__p);
        }
        v128[0] = v116;
        *(void **)((char *)v128 + *((void *)v116 - 3)) = v117;
        if (v129 < 0) {
          operator delete(v128[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v101 = *v16;
      v100 = v16[1];
      if (*v16 != v100)
      {
        unint64_t v102 = v100 - v101 - 128;
        v103 = *v16;
        if (v102 < 0x80) {
          goto LABEL_151;
        }
        uint64_t v104 = (v102 >> 7) + 1;
        v103 = &v101[128 * (v104 & 0x3FFFFFFFFFFFFFELL)];
        int v105 = v101 + 240;
        uint64_t v106 = v104 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          uint64_t v107 = *(v105 - 1);
          *(v105 - 16) = *(v105 - 17);
          *int v105 = v107;
          v105 += 32;
          v106 -= 2;
        }
        while (v106);
        if (v104 != (v104 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_151:
          do
          {
            *((void *)v103 + 14) = *((void *)v103 + 13);
            v103 += 128;
          }
          while (v103 != v100);
        }
      }
      unint64_t v78 = 0;
      goto LABEL_132;
    }
LABEL_86:
    if (v78 > a3) {
      goto LABEL_87;
    }
LABEL_132:
    v108 = (void *)v132;
    if ((void)v132)
    {
      do
      {
        long long v109 = (void *)*v108;
        operator delete(v108);
        v108 = v109;
      }
      while (v109);
    }
    v110 = (void *)v131;
    *(void *)&long long v131 = 0;
    if (v110) {
      operator delete(v110);
    }
    BOOL v111 = (void *)v135;
    if ((void)v135)
    {
      do
      {
        BOOL v112 = (void *)*v111;
        operator delete(v111);
        BOOL v111 = v112;
      }
      while (v112);
    }
    BOOL v113 = (void *)v134;
    *(void *)&long long v134 = 0;
    if (v113) {
      operator delete(v113);
    }
    if (v78)
    {
      unint64_t v114 = a4[1] + v78;
      ++*a4;
      a4[1] = v114;
      unint64_t v115 = a4[2];
      if (v115 <= v78) {
        unint64_t v115 = v78;
      }
      a4[2] = v115;
    }
LABEL_3:
    uint64_t v4 = v122 + 3;
    if (v122 + 3 != v5) {
      continue;
    }
    break;
  }
}

void sub_A24E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  a27 = a12;
  *(uint64_t *)((char *)&a27 + *(void *)(a12 - 24)) = a13;
  if (a41 < 0) {
    operator delete(a36);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  uint64_t v73 = a66;
  if (a66)
  {
    do
    {
      long long v74 = (void *)*v73;
      operator delete(v73);
      uint64_t v73 = v74;
    }
    while (v74);
  }
  int v75 = a64;
  a64 = 0;
  if (v75) {
    operator delete(v75);
  }
  unint64_t v76 = a72;
  if (a72)
  {
    do
    {
      uint64_t v77 = (void *)*v76;
      operator delete(v76);
      unint64_t v76 = v77;
    }
    while (v77);
  }
  unint64_t v78 = a70;
  a70 = 0;
  if (v78) {
    operator delete(v78);
  }
  _Unwind_Resume(a1);
}

void sub_A25130()
{
}

uint64_t sub_A2516C(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_A25250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_A252D0(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v8 + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (v8
          + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
          + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
          + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 + 0x7FFFFFFFFFFFFFFFLL);
    }
    long long v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      std::string::size_type v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v7 && *((_DWORD *)v13 + 5) == v8) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            std::string::size_type v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v7 && *((_DWORD *)v13 + 5) == v8) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          std::string::size_type v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unsigned int v19 = operator new(0x20uLL);
  void *v19 = 0;
  v19[1] = v9;
  v19[2] = **a4;
  *((_DWORD *)v19 + 6) = -1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      void *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = (v10 + 0x7FFFFFFFFFFFFFFFLL) & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v31 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_A25634(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_A25648(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *unint64_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_A25958(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A2596C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  unint64_t v3 = (char *)operator new(0x1FCuLL);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v3 + 508;
  unint64_t v4 = (char *)operator new(0x5F4uLL);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v4 + 1524;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_A259E4(_Unwind_Exception *a1)
{
  v1[5] = v2;
  operator delete(v2);
  unint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_A25A0C(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v88 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 == v4) {
    return;
  }
  uint64_t v5 = (void *)a1;
  do
  {
    unsigned int v6 = *v3;
    if (*v3 != -1 && v6 < ((*(void *)(*v5 + 80) - *(void *)(*v5 + 72)) >> 3)) {
      sub_A2609C(v5, v6, 0, -1, -1);
    }
    ++v3;
  }
  while (v3 != v4);
  if (!*((_DWORD *)v5 + 14)) {
    return;
  }
  uint64_t v84 = v5;
  while (2)
  {
    unint64_t v7 = (unsigned int *)v5[1];
    unint64_t v8 = *v7;
    uint64_t v90 = *(void *)(v7 + 1);
    *(_DWORD *)(v5[4] + 4 * v8) = -1;
    unsigned int v9 = *((_DWORD *)v5 + 14) - 1;
    *((_DWORD *)v5 + 14) = v9;
    if (v9)
    {
      unint64_t v10 = &v7[3 * v9];
      unsigned int *v7 = *v10;
      *(void *)(v7 + 1) = *(void *)(v10 + 1);
      unint64_t v11 = (unsigned int *)v5[1];
      *(_DWORD *)(v5[4] + 4 * *v11) = 0;
      unsigned int v12 = *((_DWORD *)v5 + 14);
      if (v12 >= 2)
      {
        int v13 = 0;
        unsigned int v14 = 0;
        unsigned int v15 = 1;
        do
        {
          unsigned int v16 = v13 + 5;
          if (v16 >= v12) {
            unsigned int v17 = v12;
          }
          else {
            unsigned int v17 = v16;
          }
          if (v15 >= v17) {
            break;
          }
          uint64_t v18 = &v11[3 * v14];
          unint64_t v21 = *(void *)(v18 + 1);
          BOOL v19 = v18 + 1;
          unint64_t v20 = v21;
          uint64_t v22 = v14;
          unint64_t v23 = HIDWORD(v21);
          uint8x8_t v24 = &v11[3 * v15 + 1];
          unsigned int v14 = -1;
          signed int v25 = v21;
          do
          {
            unsigned int v26 = v24[1];
            BOOL v27 = v26 == v23;
            BOOL v28 = v26 < v23;
            if (v27) {
              BOOL v28 = (int)*v24 < v25;
            }
            if (v28)
            {
              signed int v25 = *v24;
              LODWORD(v23) = v24[1];
              unsigned int v14 = v15;
            }
            v24 += 3;
            ++v15;
          }
          while (v17 != v15);
          if (v14 >= v12) {
            break;
          }
          uint8x8_t v29 = &v11[3 * v14];
          uint64_t v30 = 3 * v22;
          unsigned int v31 = *v29;
          *uint8x8_t v29 = v11[v30];
          v11[v30] = v31;
          uint64_t v32 = *(void *)(v29 + 1);
          *(void *)(v29 + 1) = v20;
          void *v19 = v32;
          unint64_t v11 = (unsigned int *)v5[1];
          uint64_t v33 = v5[4];
          uint64_t v34 = 4 * v11[3 * v14];
          uint64_t v35 = 4 * v11[v30];
          int v36 = *(_DWORD *)(v33 + v34);
          *(_DWORD *)(v33 + v34) = *(_DWORD *)(v33 + v35);
          *(_DWORD *)(v33 + v35) = v36;
          int v13 = 4 * v14;
          unsigned int v15 = (4 * v14) | 1;
          unsigned int v12 = *((_DWORD *)v5 + 14);
        }
        while (v15 < v12);
      }
    }
    v5[2] -= 12;
    uint64_t v37 = (void *)*v5;
    sub_A262AC(*v5, v8);
    uint64_t v38 = v37[9];
    if (v8 >= (v37[10] - v38) >> 3)
    {
LABEL_74:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_188D9E0(exception, "key out of range");
    }
    uint64_t v39 = (void *)*v5;
    uint64_t v40 = *(void *)(*v5 + 72);
    unint64_t v41 = *(void *)(*v5 + 80) - v40;
    unint64_t v42 = v41 >> 3;
    long long v43 = xmmword_20EB750;
    if (v8 >= (v41 >> 3))
    {
LABEL_75:
      v81 = __cxa_allocate_exception(0x40uLL);
      strcpy((char *)v91, "vertex id out of range");
      BYTE7(v91[1]) = 22;
      uint64_t v82 = (void *)sub_2F404((uint64_t)v81, v91);
    }
    uint64_t v44 = (unsigned int *)(v37[12] + 28 * *(unsigned int *)(v38 + 8 * v8));
    unint64_t v89 = v90 & 0xFFFFFFFF00000000;
    while (1)
    {
      if (v8 >= (uint64_t)v41 >> 3) {
        goto LABEL_74;
      }
      uint64_t v45 = v39[12];
      if (v44 == (unsigned int *)(v45 + 28 * *(unsigned int *)(v40 + 8 * v8 + 4))) {
        break;
      }
      unint64_t v46 = *v44;
      if (v46 >= v42) {
        goto LABEL_31;
      }
      uint64_t v47 = *(void *)(v44 + 1);
      if (v47 == 0x7FFFFFFF) {
        goto LABEL_31;
      }
      int v48 = v47 + v90;
      uint64_t v49 = v47 + v89;
      unint64_t v50 = (v47 + v89) & 0xFFFFFFFF00000000 | (v47 + v90);
      unsigned int v51 = *(_DWORD *)(v40 + 8 * v8);
      *(void *)&v91[0] = v50;
      long long v53 = (char *)v5[8];
      unsigned int v52 = (long long *)v5[9];
      unsigned int v54 = (char *)((char *)v52 - v53);
      unint64_t v55 = ((char *)v52 - v53) >> 4;
      if (v55 <= v46)
      {
        std::string v56 = v5;
        unint64_t v57 = v46 + 1;
        unint64_t v58 = v46 + 1 - v55;
        uint64_t v59 = v56[10];
        if (v58 <= (v59 - (uint64_t)v52) >> 4)
        {
          if (v57 == v55)
          {
            uint64_t v5 = v84;
            v84[9] = v52;
          }
          else
          {
            uint64_t v72 = &v52[v58];
            unint64_t v73 = 16 * v46 - (void)v54;
            uint64_t v5 = v84;
            if (v73 < 0x70) {
              goto LABEL_80;
            }
            uint64_t v74 = (v73 >> 4) + 1;
            int v75 = v52 + 4;
            uint64_t v76 = v74 & 0x1FFFFFFFFFFFFFF8;
            do
            {
              *(v75 - 2) = v43;
              *(v75 - 1) = v43;
              *(v75 - 4) = v43;
              *(v75 - 3) = v43;
              v75[2] = v43;
              v75[3] = v43;
              long long *v75 = v43;
              v75[1] = v43;
              v75 += 8;
              v76 -= 8;
            }
            while (v76);
            v52 += v74 & 0x1FFFFFFFFFFFFFF8;
            if (v74 != (v74 & 0x1FFFFFFFFFFFFFF8))
            {
LABEL_80:
              do
                *v52++ = v43;
              while (v52 != v72);
            }
            v84[9] = v72;
          }
          goto LABEL_63;
        }
        uint64_t v85 = v47 + v89;
        int v86 = v47 + v90;
        unsigned int v87 = v51;
        unint64_t v60 = v59 - (void)v53;
        unint64_t v61 = (v59 - (uint64_t)v53) >> 3;
        if (v61 <= v57) {
          unint64_t v61 = v46 + 1;
        }
        if (v60 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v61 >> 60) {
          sub_188D718();
        }
        unint64_t v83 = v61;
        unint64_t v62 = (char *)operator new(16 * v61);
        uint64_t v63 = &v62[16 * v55];
        unint64_t v64 = &v62[16 * v57];
        unint64_t v65 = 16 * v46 - (void)v54;
        char v66 = v63;
        uint64_t v5 = v84;
        long long v43 = xmmword_20EB750;
        if (v65 < 0x70) {
          goto LABEL_81;
        }
        uint64_t v67 = (v65 >> 4) + 1;
        char v66 = &v63[16 * (v67 & 0x1FFFFFFFFFFFFFF8)];
        uint64_t v68 = v63 + 64;
        uint64_t v69 = v67 & 0x1FFFFFFFFFFFFFF8;
        do
        {
          *(v68 - 2) = xmmword_20EB750;
          *(v68 - 1) = xmmword_20EB750;
          *(v68 - 4) = xmmword_20EB750;
          *(v68 - 3) = xmmword_20EB750;
          v68[2] = xmmword_20EB750;
          v68[3] = xmmword_20EB750;
          *uint64_t v68 = xmmword_20EB750;
          v68[1] = xmmword_20EB750;
          v68 += 8;
          v69 -= 8;
        }
        while (v69);
        if (v67 != (v67 & 0x1FFFFFFFFFFFFFF8))
        {
LABEL_81:
          do
          {
            *(_OWORD *)char v66 = xmmword_20EB750;
            v66 += 16;
          }
          while (v66 != v64);
        }
        if (v52 == (long long *)v53)
        {
          int v48 = v86;
          unsigned int v51 = v87;
          HIDWORD(v49) = HIDWORD(v85);
          uint64_t v71 = (void *)v84[8];
          v84[8] = &v62[16 * v55];
          v84[9] = v64;
          v84[10] = &v62[16 * v83];
          if (v71) {
            goto LABEL_62;
          }
        }
        else
        {
          int v48 = v86;
          unsigned int v51 = v87;
          HIDWORD(v49) = HIDWORD(v85);
          do
          {
            uint64_t v70 = v63 - 16;
            *((_OWORD *)v63 - 1) = *--v52;
            v63 -= 16;
          }
          while (v52 != (long long *)v53);
          uint64_t v71 = (void *)v84[8];
          v84[8] = v70;
          v84[9] = v64;
          v84[10] = &v62[16 * v83];
          if (!v71) {
            goto LABEL_63;
          }
LABEL_62:
          operator delete(v71);
          HIDWORD(v49) = HIDWORD(v85);
          int v48 = v86;
          unsigned int v51 = v87;
          long long v43 = xmmword_20EB750;
        }
LABEL_63:
        long long v53 = (char *)v5[8];
      }
      uint64_t v77 = &v53[16 * v46];
      if (*(_DWORD *)v77 == 0x7FFFFFFF) {
        goto LABEL_65;
      }
      unsigned int v79 = *((_DWORD *)v77 + 1);
      if (v79 == HIDWORD(v49))
      {
        if (*(_DWORD *)v77 > v48) {
          goto LABEL_65;
        }
      }
      else if (v79 > HIDWORD(v49))
      {
LABEL_65:
        *(void *)uint64_t v77 = v50;
        *((_DWORD *)v77 + 2) = v8;
        *((_DWORD *)v77 + 3) = -1227133513 * (((unint64_t)v44 - v45 + -28 * v51) >> 2);
        uint64_t v78 = v5[4];
        if (v46 >= (v5[5] - v78) >> 2 || *(_DWORD *)(v78 + 4 * v46) == -1) {
          sub_A26574((uint64_t)v88, v46, v91);
        }
        else {
          sub_A26824(v88, v46, (uint64_t)v91);
        }
        long long v43 = xmmword_20EB750;
      }
      uint64_t v39 = (void *)*v5;
LABEL_31:
      v44 += 7;
      uint64_t v40 = v39[9];
      unint64_t v41 = v39[10] - v40;
      unint64_t v42 = v41 >> 3;
      if (v8 >= (v41 >> 3)) {
        goto LABEL_75;
      }
    }
    if (*((_DWORD *)v5 + 14)) {
      continue;
    }
    break;
  }
}

void sub_A26058(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A2606C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A26080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2609C(uint64_t *a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  unsigned int v12 = a1 + 8;
  uint64_t v20 = a3;
  unint64_t v13 = a2;
  unint64_t v14 = (v11 - v10) >> 4;
  if (v14 <= a2)
  {
    sub_A2635C((char **)a1 + 8, a2 - v14 + 1);
    unsigned int v15 = (int *)(*v12 + 16 * v13);
    int v16 = *v15;
    if (*v15 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v15 = (int *)(v10 + 16 * a2);
    int v16 = *v15;
    if (*v15 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  unsigned int v17 = v15[1];
  if (v17 == HIDWORD(a3))
  {
    if (v16 <= (int)a3) {
      return;
    }
  }
  else if (v17 <= HIDWORD(a3))
  {
    return;
  }
LABEL_9:
  *(void *)unsigned int v15 = a3;
  v15[2] = a4;
  v15[3] = a5;
  uint64_t v18 = a1 + 1;
  uint64_t v19 = a1[4];
  if (v13 >= (a1[5] - v19) >> 2 || *(_DWORD *)(v19 + 4 * v13) == -1) {
    sub_A26574((uint64_t)v18, a2, &v20);
  }
  else {
    sub_A26824(v18, a2, (uint64_t)&v20);
  }
}

uint64_t sub_A261B0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t v4 = a2;
  unint64_t v5 = (*(void *)(a1 + 72) - v2) >> 4;
  if (v5 <= a2)
  {
    sub_A2635C((char **)(a1 + 64), a2 - v5 + 1);
    uint64_t v2 = *v3;
  }
  return *(void *)(v2 + 16 * v4);
}

uint64_t sub_A26204(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t v4 = a2;
  unint64_t v5 = (*(void *)(a1 + 72) - v2) >> 4;
  if (v5 <= a2)
  {
    sub_A2635C((char **)(a1 + 64), a2 - v5 + 1);
    uint64_t v2 = *v3;
  }
  return *(unsigned int *)(v2 + 16 * v4 + 8);
}

uint64_t sub_A26258(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t v4 = a2;
  unint64_t v5 = (*(void *)(a1 + 72) - v2) >> 4;
  if (v5 <= a2)
  {
    sub_A2635C((char **)(a1 + 64), a2 - v5 + 1);
    uint64_t v2 = *v3;
  }
  return *(unsigned int *)(v2 + 16 * v4 + 12);
}

uint64_t sub_A262AC(uint64_t result, unsigned int a2)
{
  if (a2 >= ((*(void *)(result + 80) - *(void *)(result + 72)) >> 3))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    unint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_A2632C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2635C(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  long long v4 = a1[2];
  unsigned int v6 = v5;
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      unint64_t v13 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v13 < 7) {
        goto LABEL_37;
      }
      unint64_t v14 = v13 + 1;
      unsigned int v6 = &v5[16 * (v14 & 0x1FFFFFFFFFFFFFF8)];
      unsigned int v15 = v5 + 64;
      uint64_t v16 = v14 & 0x1FFFFFFFFFFFFFF8;
      do
      {
        *(v15 - 2) = xmmword_20EB750;
        *(v15 - 1) = xmmword_20EB750;
        *(v15 - 4) = xmmword_20EB750;
        *(v15 - 3) = xmmword_20EB750;
        v15[2] = xmmword_20EB750;
        v15[3] = xmmword_20EB750;
        *unsigned int v15 = xmmword_20EB750;
        v15[1] = xmmword_20EB750;
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFF8))
      {
LABEL_37:
        do
        {
          *(_OWORD *)unsigned int v6 = xmmword_20EB750;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      unsigned int v6 = &v5[16 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + a2;
    if ((v8 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v4 - v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      unsigned int v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unsigned int v12 = 0;
    }
    unsigned int v17 = &v12[16 * v8];
    uint64_t v18 = &v17[16 * a2];
    unint64_t v19 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v20 = v17;
    if (v19 < 7) {
      goto LABEL_38;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v20 = &v17[16 * (v21 & 0x1FFFFFFFFFFFFFF8)];
    uint64_t v22 = v17 + 64;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFF8;
    do
    {
      *(v22 - 2) = xmmword_20EB750;
      *(v22 - 1) = xmmword_20EB750;
      *(v22 - 4) = xmmword_20EB750;
      *(v22 - 3) = xmmword_20EB750;
      v22[2] = xmmword_20EB750;
      v22[3] = xmmword_20EB750;
      *uint64_t v22 = xmmword_20EB750;
      v22[1] = xmmword_20EB750;
      v22 += 8;
      v23 -= 8;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFF8))
    {
LABEL_38:
      do
      {
        *(_OWORD *)uint64_t v20 = xmmword_20EB750;
        v20 += 16;
      }
      while (v20 != v18);
    }
    uint8x8_t v24 = &v12[16 * v11];
    if (v5 == v7)
    {
      unsigned int v26 = *a1;
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v24;
      if (!v26) {
        return;
      }
      goto LABEL_28;
    }
    do
    {
      signed int v25 = v17 - 16;
      *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
      v6 -= 16;
      v17 -= 16;
    }
    while (v6 != v7);
    unsigned int v26 = *a1;
    *a1 = v25;
    a1[1] = v18;
    a1[2] = v24;
    if (v26)
    {
LABEL_28:
      operator delete(v26);
    }
  }
}

void sub_A26574(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v16 = (v10 >> 1) | 1;
      if (v16 <= v11)
      {
        if (v16 < v11)
        {
          uint64_t v9 = v8 + 4 * v16;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v16;
          unint64_t v17 = (uint64_t)(4 * v16) >> 2;
          if (v11 < v17) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v10 = v9 - v8;
          unint64_t v17 = (v9 - v8) >> 2;
          if (v11 < v17) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v16 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v17 = (v9 - v8) >> 2;
        if (v11 < v17) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v17;
    }
    while (v17 <= v6);
  }
  *(_DWORD *)uint64_t v47 = a2;
  *(void *)&void v47[4] = *a3;
  uint64_t v12 = HIDWORD(*a3);
  unint64_t v14 = *(_DWORD **)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v18 = *(_DWORD **)a1;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *(void *)a1) >> 2);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v18) >> 2);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = 0x1555555555555555;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v23 = (char *)operator new(12 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint8x8_t v24 = &v23[12 * v19];
    *(void *)uint8x8_t v24 = *(void *)v47;
    *((_DWORD *)v24 + 2) = v12;
    unsigned int v15 = v24 + 12;
    if (v14 != v18)
    {
      do
      {
        uint64_t v25 = *(void *)(v14 - 3);
        v14 -= 3;
        int v26 = v14[2];
        *(void *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v14 != v18);
      unint64_t v14 = *(_DWORD **)a1;
    }
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v23[12 * v22];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)unint64_t v14 = *(void *)v47;
    v14[2] = v12;
    unsigned int v15 = v14 + 3;
  }
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v27 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v27 + 1;
  if (v27)
  {
    BOOL v28 = *(_DWORD **)a1;
    do
    {
      unsigned int v29 = v27 - 1;
      uint64_t v30 = (v27 - 1) >> 2;
      unsigned int v31 = &v28[3 * v30];
      int v33 = v31[1];
      unsigned int v34 = v31[2];
      uint64_t v32 = (uint64_t *)(v31 + 1);
      uint64_t v35 = &v28[3 * v27];
      int v38 = v35[1];
      unsigned int v36 = v35[2];
      uint64_t v37 = (uint64_t *)(v35 + 1);
      BOOL v39 = v33 < v38;
      if (v34 != v36) {
        BOOL v39 = v34 < v36;
      }
      if (v39) {
        break;
      }
      uint64_t v40 = 3 * v27;
      int v41 = v28[v40];
      v28[v40] = v28[3 * v30];
      v28[3 * v30] = v41;
      uint64_t v42 = *v37;
      *uint64_t v37 = *v32;
      uint64_t *v32 = v42;
      BOOL v28 = *(_DWORD **)a1;
      uint64_t v43 = *(void *)(a1 + 24);
      uint64_t v44 = 4 * *(unsigned int *)(*(void *)a1 + v40 * 4);
      uint64_t v45 = 4 * *(unsigned int *)(*(void *)a1 + 12 * v30);
      int v46 = *(_DWORD *)(v43 + v44);
      *(_DWORD *)(v43 + v44) = *(_DWORD *)(v43 + v45);
      *(_DWORD *)(v43 + v45) = v46;
      unsigned int v27 = v29 >> 2;
    }
    while (v29 > 3);
  }
}

uint64_t *sub_A26824(uint64_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result[3] + 4 * a2);
  uint64_t v4 = *result + 12 * v3;
  int v6 = *(_DWORD *)(v4 + 4);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  *(void *)(v4 + 4) = *(void *)a3;
  LODWORD(v4) = *(_DWORD *)(a3 + 4);
  BOOL v7 = *(_DWORD *)a3 < v6;
  BOOL v8 = v4 == v5;
  BOOL v9 = v4 < v5;
  if (v8) {
    BOOL v9 = v7;
  }
  if (v9)
  {
    if (v3)
    {
      uint64_t v10 = *result;
      do
      {
        unsigned int v11 = v3 - 1;
        uint64_t v12 = (v3 - 1) >> 2;
        uint64_t v13 = v10 + 12 * v12;
        int v15 = *(_DWORD *)(v13 + 4);
        unsigned int v16 = *(_DWORD *)(v13 + 8);
        unint64_t v14 = (uint64_t *)(v13 + 4);
        uint64_t v17 = v10 + 12 * v3;
        int v20 = *(_DWORD *)(v17 + 4);
        unsigned int v18 = *(_DWORD *)(v17 + 8);
        unint64_t v19 = (uint64_t *)(v17 + 4);
        BOOL v21 = v15 < v20;
        if (v16 != v18) {
          BOOL v21 = v16 < v18;
        }
        if (v21) {
          break;
        }
        uint64_t v22 = 12 * v3;
        int v23 = *(_DWORD *)(v10 + v22);
        *(_DWORD *)(v10 + v22) = *(_DWORD *)(v10 + 12 * v12);
        *(_DWORD *)(v10 + 12 * v12) = v23;
        uint64_t v24 = *v19;
        uint64_t *v19 = *v14;
        *unint64_t v14 = v24;
        uint64_t v10 = *result;
        uint64_t v25 = result[3];
        uint64_t v26 = 4 * *(unsigned int *)(*result + v22);
        uint64_t v27 = 4 * *(unsigned int *)(*result + 12 * v12);
        int v28 = *(_DWORD *)(v25 + v26);
        *(_DWORD *)(v25 + v26) = *(_DWORD *)(v25 + v27);
        *(_DWORD *)(v25 + v27) = v28;
        unsigned int v3 = v11 >> 2;
      }
      while (v11 >= 4);
    }
  }
  else
  {
    unsigned int v29 = (4 * v3) | 1;
    unsigned int v30 = *((_DWORD *)result + 12);
    if (v29 < v30)
    {
      int v31 = 4 * v3;
      do
      {
        unsigned int v32 = v31 + 5;
        if (v32 >= v30) {
          unsigned int v33 = v30;
        }
        else {
          unsigned int v33 = v32;
        }
        if (v29 >= v33) {
          break;
        }
        uint64_t v34 = *result;
        uint64_t v35 = *result + 12 * v3;
        unint64_t v38 = *(void *)(v35 + 4);
        unsigned int v36 = (void *)(v35 + 4);
        unint64_t v37 = v38;
        uint64_t v39 = v3;
        unint64_t v40 = HIDWORD(v38);
        int v41 = (int *)(*result + 12 * v29 + 4);
        unsigned int v3 = -1;
        int v42 = v38;
        do
        {
          unsigned int v43 = v41[1];
          BOOL v8 = v43 == v40;
          BOOL v44 = v43 < v40;
          if (v8) {
            BOOL v44 = *v41 < v42;
          }
          if (v44)
          {
            int v42 = *v41;
            LODWORD(v40) = v41[1];
            unsigned int v3 = v29;
          }
          v41 += 3;
          ++v29;
        }
        while (v33 != v29);
        if (v3 >= v30) {
          break;
        }
        uint64_t v45 = (int *)(v34 + 12 * v3);
        uint64_t v46 = 12 * v39;
        int v47 = *v45;
        *uint64_t v45 = *(_DWORD *)(v34 + v46);
        *(_DWORD *)(v34 + v46) = v47;
        uint64_t v48 = *(void *)(v45 + 1);
        *(void *)(v45 + 1) = v37;
        *unsigned int v36 = v48;
        uint64_t v49 = result[3];
        uint64_t v50 = 4 * *(unsigned int *)(*result + 12 * v3);
        uint64_t v51 = 4 * *(unsigned int *)(*result + v46);
        int v52 = *(_DWORD *)(v49 + v50);
        *(_DWORD *)(v49 + v50) = *(_DWORD *)(v49 + v51);
        *(_DWORD *)(v49 + v51) = v52;
        int v31 = 4 * v3;
        unsigned int v29 = (4 * v3) | 1;
        unsigned int v30 = *((_DWORD *)result + 12);
      }
      while (v29 < v30);
    }
  }
  return result;
}

void sub_A26A18(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  unsigned int v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (void *)(a1 + 4136);
  int v59 = *(_DWORD *)(a2 + 40);
  sub_A1DD94((void *)(a1 + 4136), *(void *)(a2 + 32), v59, (uint64_t)v65);
  unsigned int v7 = *(_DWORD *)(v3 + 52);
  if (v7 > *(_DWORD *)(v3 + 56)) {
    goto LABEL_60;
  }
  BOOL v8 = 0;
  unint64_t v57 = v5;
  unint64_t v58 = v6;
  uint64_t v56 = v3;
  while (1)
  {
    uint64_t v9 = sub_A104E8(v6, *(void *)(v3 + 32), v7, v59);
    int v11 = v10;
    uint64_t v12 = (int *)sub_A11094(v6, *(void *)(v3 + 32));
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
      int v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
    }
    else {
      int v15 = 0;
    }
    int v16 = *(unsigned __int16 *)(sub_A10764(v15, v7) + 12);
    unint64_t v17 = __ROR8__(v9, 32);
    unsigned int v18 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 < 9u)
    {
      LODWORD(v20) = 0;
    }
    else
    {
      uint64_t v20 = v19[4];
      if (v20) {
        LODWORD(v20) = *(int *)((char *)v18 + v20);
      }
    }
    signed int v21 = v20 + ~v16;
    unsigned int v22 = (int)(*(_DWORD *)(v3 + 56) - v7) >= v21 ? v21 : *(_DWORD *)(v3 + 56) - v7;
    int v60 = v22 + v16;
    if (!v22) {
      break;
    }
    unint64_t v23 = (unint64_t)v5[2];
    if ((unint64_t)v8 >= v23)
    {
      uint64_t v24 = *v5;
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *v5) >> 2);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        sub_2E00();
      }
      uint64_t v27 = v4;
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - (void)v24) >> 2);
      if (2 * v28 > v26) {
        unint64_t v26 = 2 * v28;
      }
      if (v28 >= 0x666666666666666) {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v29 = v26;
      }
      if (v29 > 0xCCCCCCCCCCCCCCCLL) {
        sub_188D718();
      }
      unsigned int v30 = (char *)operator new(20 * v29);
      int v31 = &v30[20 * v25];
      *(void *)int v31 = v9;
      *((_DWORD *)v31 + 2) = v11;
      *((_DWORD *)v31 + 3) = v16;
      *((_DWORD *)v31 + 4) = v60;
      if (v8 == v24)
      {
        unsigned int v5 = v57;
        BOOL v8 = v31 + 20;
        *unint64_t v57 = v31;
        v57[1] = v31 + 20;
        v57[2] = &v30[20 * v29];
        if (v24) {
          goto LABEL_29;
        }
      }
      else
      {
        unsigned int v32 = &v30[20 * v25];
        unsigned int v5 = v57;
        do
        {
          long long v33 = *(_OWORD *)(v8 - 20);
          uint64_t v34 = v32 - 20;
          *((_DWORD *)v32 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v32 - 20) = v33;
          v8 -= 20;
          v32 -= 20;
        }
        while (v8 != v24);
        BOOL v8 = v31 + 20;
        *unint64_t v57 = v34;
        v57[1] = v31 + 20;
        v57[2] = &v30[20 * v29];
        if (v24) {
LABEL_29:
        }
          operator delete(v24);
      }
      uint64_t v4 = v27;
      uint64_t v3 = v56;
      goto LABEL_4;
    }
    *(void *)BOOL v8 = v9;
    *((_DWORD *)v8 + 2) = v11;
    *((_DWORD *)v8 + 3) = v16;
    *((_DWORD *)v8 + 4) = v60;
    v8 += 20;
LABEL_4:
    v5[1] = v8;
    v7 += v22 + 1;
    int v6 = v58;
    if (v7 > *(_DWORD *)(v3 + 56)) {
      goto LABEL_60;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v63);
    sub_188FC78(v63, (uint64_t)"Block transfer unpacking on SPA journey leg failed due to travel between the same stop indices on a journey leg for trip ", 121);
    uint64_t v35 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    unsigned int v36 = (unsigned __int16 *)((char *)v35 - *v35);
    if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
      uint64_t v38 = *(void *)((char *)v35 + v37);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = sub_398020(*(void *)(v4 + 4184) + 24, 0);
    unint64_t v40 = &v39[-*(int *)v39];
    if (*(unsigned __int16 *)v40 >= 0xBu)
    {
      uint64_t v41 = *((unsigned __int16 *)v40 + 5);
      if (v41)
      {
        if (v39[v41]) {
          nullsub_1(v38);
        }
      }
    }
    int v42 = (void *)std::ostream::operator<<();
    sub_188FC78(v42, (uint64_t)" (line ", 7);
    unsigned int v43 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    BOOL v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (unsigned __int16 v45 = v44[3]) != 0) {
      unint64_t v46 = *(unsigned int *)((char *)v43 + v45 + 4) | ((unint64_t)*(unsigned int *)((char *)v43 + v45) << 32);
    }
    else {
      unint64_t v46 = 0xFFFFFFFFLL;
    }
    int v47 = (int *)sub_8DFD1C(*(void *)(v4 + 4056) + 24, __ROR8__(v46, 32), 0, "line");
    uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v48 >= 5u && (uint64_t v49 = v48[2]) != 0) {
      uint64_t v50 = *(void *)((char *)v47 + v49);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v51 = sub_398020(*(void *)(v4 + 4056) + 24, 0);
    int v52 = &v51[-*(int *)v51];
    if (*(unsigned __int16 *)v52 >= 0xBu)
    {
      uint64_t v53 = *((unsigned __int16 *)v52 + 5);
      if (v53)
      {
        if (v51[v53]) {
          nullsub_1(v50);
        }
      }
    }
    unsigned int v54 = (void *)std::ostream::operator<<();
    unint64_t v55 = sub_188FC78(v54, (uint64_t)") from index ", 13);
    std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v62 < 0) {
      operator delete(__p);
    }
    if (v64 < 0) {
      operator delete((void *)v63[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v5[1] = *v5;
LABEL_60:
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
}

void sub_A26FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  unint64_t v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
    uint64_t v24 = *(void **)a11;
    if (!*(void *)a11) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v24 = *(void **)a11;
    if (!*(void *)a11) {
      goto LABEL_5;
    }
  }
  *(void *)(a11 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_A27088(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  unsigned int v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (void *)(a1 + 4136);
  int v59 = *(_DWORD *)(a2 + 36);
  sub_A1DD94((void *)(a1 + 4136), *(void *)(a2 + 28), v59, (uint64_t)v65);
  unsigned int v7 = *(_DWORD *)(v3 + 48);
  if (v7 > *(_DWORD *)(v3 + 52)) {
    goto LABEL_60;
  }
  BOOL v8 = 0;
  unint64_t v57 = v5;
  unint64_t v58 = v6;
  uint64_t v56 = v3;
  while (1)
  {
    uint64_t v9 = sub_A104E8(v6, *(void *)(v3 + 28), v7, v59);
    int v11 = v10;
    uint64_t v12 = (int *)sub_A11094(v6, *(void *)(v3 + 28));
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
      int v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
    }
    else {
      int v15 = 0;
    }
    int v16 = *(unsigned __int16 *)(sub_A10764(v15, v7) + 12);
    unint64_t v17 = __ROR8__(v9, 32);
    unsigned int v18 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 < 9u)
    {
      LODWORD(v20) = 0;
    }
    else
    {
      uint64_t v20 = v19[4];
      if (v20) {
        LODWORD(v20) = *(int *)((char *)v18 + v20);
      }
    }
    signed int v21 = v20 + ~v16;
    unsigned int v22 = (int)(*(_DWORD *)(v3 + 52) - v7) >= v21 ? v21 : *(_DWORD *)(v3 + 52) - v7;
    int v60 = v22 + v16;
    if (!v22) {
      break;
    }
    unint64_t v23 = (unint64_t)v5[2];
    if ((unint64_t)v8 >= v23)
    {
      uint64_t v24 = *v5;
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *v5) >> 2);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        sub_2E00();
      }
      uint64_t v27 = v4;
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - (void)v24) >> 2);
      if (2 * v28 > v26) {
        unint64_t v26 = 2 * v28;
      }
      if (v28 >= 0x666666666666666) {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v29 = v26;
      }
      if (v29 > 0xCCCCCCCCCCCCCCCLL) {
        sub_188D718();
      }
      unsigned int v30 = (char *)operator new(20 * v29);
      int v31 = &v30[20 * v25];
      *(void *)int v31 = v9;
      *((_DWORD *)v31 + 2) = v11;
      *((_DWORD *)v31 + 3) = v16;
      *((_DWORD *)v31 + 4) = v60;
      if (v8 == v24)
      {
        unsigned int v5 = v57;
        BOOL v8 = v31 + 20;
        *unint64_t v57 = v31;
        v57[1] = v31 + 20;
        v57[2] = &v30[20 * v29];
        if (v24) {
          goto LABEL_29;
        }
      }
      else
      {
        unsigned int v32 = &v30[20 * v25];
        unsigned int v5 = v57;
        do
        {
          long long v33 = *(_OWORD *)(v8 - 20);
          uint64_t v34 = v32 - 20;
          *((_DWORD *)v32 - 1) = *((_DWORD *)v8 - 1);
          *(_OWORD *)(v32 - 20) = v33;
          v8 -= 20;
          v32 -= 20;
        }
        while (v8 != v24);
        BOOL v8 = v31 + 20;
        *unint64_t v57 = v34;
        v57[1] = v31 + 20;
        v57[2] = &v30[20 * v29];
        if (v24) {
LABEL_29:
        }
          operator delete(v24);
      }
      uint64_t v4 = v27;
      uint64_t v3 = v56;
      goto LABEL_4;
    }
    *(void *)BOOL v8 = v9;
    *((_DWORD *)v8 + 2) = v11;
    *((_DWORD *)v8 + 3) = v16;
    *((_DWORD *)v8 + 4) = v60;
    v8 += 20;
LABEL_4:
    v5[1] = v8;
    v7 += v22 + 1;
    int v6 = v58;
    if (v7 > *(_DWORD *)(v3 + 52)) {
      goto LABEL_60;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v63);
    sub_188FC78(v63, (uint64_t)"Block transfer unpacking on SPA journey leg failed due to travel between the same stop indices on a journey leg for trip ", 121);
    uint64_t v35 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    unsigned int v36 = (unsigned __int16 *)((char *)v35 - *v35);
    if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
      uint64_t v38 = *(void *)((char *)v35 + v37);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = sub_398020(*(void *)(v4 + 4184) + 24, 0);
    unint64_t v40 = &v39[-*(int *)v39];
    if (*(unsigned __int16 *)v40 >= 0xBu)
    {
      uint64_t v41 = *((unsigned __int16 *)v40 + 5);
      if (v41)
      {
        if (v39[v41]) {
          nullsub_1(v38);
        }
      }
    }
    int v42 = (void *)std::ostream::operator<<();
    sub_188FC78(v42, (uint64_t)" (line ", 7);
    unsigned int v43 = (int *)sub_369F8C(*(void *)(v4 + 4184) + 24, v17, 0, "trip");
    BOOL v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (unsigned __int16 v45 = v44[3]) != 0) {
      unint64_t v46 = *(unsigned int *)((char *)v43 + v45 + 4) | ((unint64_t)*(unsigned int *)((char *)v43 + v45) << 32);
    }
    else {
      unint64_t v46 = 0xFFFFFFFFLL;
    }
    int v47 = (int *)sub_8DFD1C(*(void *)(v4 + 4056) + 24, __ROR8__(v46, 32), 0, "line");
    uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v48 >= 5u && (uint64_t v49 = v48[2]) != 0) {
      uint64_t v50 = *(void *)((char *)v47 + v49);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v51 = sub_398020(*(void *)(v4 + 4056) + 24, 0);
    int v52 = &v51[-*(int *)v51];
    if (*(unsigned __int16 *)v52 >= 0xBu)
    {
      uint64_t v53 = *((unsigned __int16 *)v52 + 5);
      if (v53)
      {
        if (v51[v53]) {
          nullsub_1(v50);
        }
      }
    }
    unsigned int v54 = (void *)std::ostream::operator<<();
    unint64_t v55 = sub_188FC78(v54, (uint64_t)") from index ", 13);
    std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v62 < 0) {
      operator delete(__p);
    }
    if (v64 < 0) {
      operator delete((void *)v63[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v5[1] = *v5;
LABEL_60:
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
}

void sub_A27658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  unint64_t v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
    uint64_t v24 = *(void **)a11;
    if (!*(void *)a11) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v24 = *(void **)a11;
    if (!*(void *)a11) {
      goto LABEL_5;
    }
  }
  *(void *)(a11 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

BOOL sub_A276F8(uint64_t a1)
{
  char v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  sub_A19FA8((uint64_t)&v70, a1, 0x1FFFFFFFEuLL);
  uint64_t v2 = v71;
  if (v75) {
    uint64_t v3 = v74;
  }
  else {
    uint64_t v3 = &v72;
  }
  if ((unint64_t)v71 >= *v3)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    goto LABEL_39;
  }
  do
  {
    unsigned int v7 = (int *)sub_A27CE4(*(void *)(a1 + 4120) + 24, __ROR8__(*v2, 32), 0, "routing stop");
    BOOL v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 < 5u)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      uint64_t v9 = v8[2];
      if (v9) {
        LODWORD(v9) = *(int *)((char *)v7 + v9);
      }
    }
    LODWORD(__p) = v9;
    sub_745A4((uint64_t)&v66, &__p);
    unint64_t v5 = (unint64_t)v72;
    uint64_t v2 = (void *)((char *)v71 + 12);
    uint64_t v71 = v2;
    if (v2 == v72)
    {
      uint64_t v2 = v73;
      unint64_t v6 = v74[0];
      uint64_t v71 = v73;
      int v4 = 1;
      unsigned __int8 v75 = 1;
      if (!*(unsigned char *)(v70 + 16)) {
        goto LABEL_8;
      }
    }
    else
    {
      int v4 = v75;
      unint64_t v6 = v74[0];
      if (!*(unsigned char *)(v70 + 16)) {
        goto LABEL_8;
      }
    }
    if (v4) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = (unint64_t)v72;
    }
    if ((unint64_t)v2 < v10)
    {
      while (1)
      {
        unint64_t v11 = __ROR8__(*v2, 32);
        if (HIDWORD(v11) == 1 && (v11 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v70 + 4120)))
        {
          LOBYTE(v4) = v75;
          uint64_t v2 = v71;
          unint64_t v5 = (unint64_t)v72;
          break;
        }
        unint64_t v5 = (unint64_t)v72;
        uint64_t v2 = (void *)((char *)v71 + 12);
        uint64_t v71 = v2;
        if (v2 == v72)
        {
          uint64_t v2 = v73;
          uint64_t v71 = v73;
          LOBYTE(v4) = 1;
          unsigned __int8 v75 = 1;
          if ((unint64_t)v73 >= v74[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v4) = v75;
          if (v75) {
            uint64_t v13 = v74;
          }
          else {
            uint64_t v13 = &v72;
          }
          if ((unint64_t)v2 >= *v13) {
            break;
          }
        }
      }
      unint64_t v6 = v74[0];
    }
LABEL_8:
    if ((_BYTE)v4) {
      unint64_t v5 = v6;
    }
  }
  while ((unint64_t)v2 < v5);
  int v15 = (unsigned int *)v66;
  uint64_t v14 = v67;
LABEL_39:
  unint64_t v16 = 126 - 2 * __clz((v14 - (char *)v15) >> 2);
  if (v14 == (char *)v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_A2823C(v15, v14, (uint64_t)&v70, v17, 1);
  unsigned int v18 = v67;
  if (v66 != v67)
  {
    unint64_t v19 = (char *)v66 + 4;
    while (v19 != v67)
    {
      int v20 = *((_DWORD *)v19 - 1);
      int v21 = *(_DWORD *)v19;
      v19 += 4;
      if (v20 == v21)
      {
        unsigned int v22 = v19 - 8;
        while (v19 != v18)
        {
          int v23 = v20;
          int v20 = *(_DWORD *)v19;
          if (v23 != *(_DWORD *)v19)
          {
            *((_DWORD *)v22 + 1) = v20;
            v22 += 4;
          }
          v19 += 4;
        }
        uint64_t v24 = v22 + 4;
        int64_t v25 = v18 - (v22 + 4);
        if (v18 != v22 + 4)
        {
          if (v18 != &v24[v25]) {
            memmove(v22 + 4, &v24[v25], 0);
          }
          uint64_t v67 = v24;
        }
        break;
      }
    }
  }
  long long __p = 0;
  char v64 = 0;
  uint64_t v65 = 0;
  sub_A28D38((uint64_t)&v70, a1, 0x1FFFFFFFDuLL);
  unint64_t v26 = v71;
  if (v75) {
    uint64_t v27 = v74;
  }
  else {
    uint64_t v27 = &v72;
  }
  if ((unint64_t)v71 >= *v27)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_94;
  }
  while (2)
  {
    int v31 = (int *)sub_A27CE4(*(void *)(a1 + 4120) + 24, __ROR8__(*v26, 32), 0, "routing stop");
    unsigned int v32 = (unsigned __int16 *)((char *)v31 - *v31);
    if (*v32 < 5u)
    {
      LODWORD(v33) = 0;
    }
    else
    {
      uint64_t v33 = v32[2];
      if (v33) {
        LODWORD(v33) = *(int *)((char *)v31 + v33);
      }
    }
    int v69 = v33;
    sub_745A4((uint64_t)&__p, &v69);
    unint64_t v29 = (unint64_t)v72;
    unint64_t v26 = (void *)((char *)v71 + 12);
    uint64_t v71 = v26;
    if (v26 == v72)
    {
      unint64_t v26 = v73;
      unint64_t v30 = v74[0];
      uint64_t v71 = v73;
      int v28 = 1;
      unsigned __int8 v75 = 1;
      if (!*(unsigned char *)(v70 + 16)) {
        goto LABEL_63;
      }
    }
    else
    {
      int v28 = v75;
      unint64_t v30 = v74[0];
      if (!*(unsigned char *)(v70 + 16)) {
        goto LABEL_63;
      }
    }
    if (v28) {
      unint64_t v34 = v30;
    }
    else {
      unint64_t v34 = (unint64_t)v72;
    }
    if ((unint64_t)v26 < v34)
    {
      while (1)
      {
        unint64_t v35 = __ROR8__(*v26, 32);
        if (HIDWORD(v35) == 1 && (v35 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v70 + 4120)))
        {
          LOBYTE(v28) = v75;
          unint64_t v26 = v71;
          unint64_t v29 = (unint64_t)v72;
          break;
        }
        unint64_t v29 = (unint64_t)v72;
        unint64_t v26 = (void *)((char *)v71 + 12);
        uint64_t v71 = v26;
        if (v26 == v72)
        {
          unint64_t v26 = v73;
          uint64_t v71 = v73;
          LOBYTE(v28) = 1;
          unsigned __int8 v75 = 1;
          if ((unint64_t)v73 >= v74[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v28) = v75;
          if (v75) {
            uint64_t v37 = v74;
          }
          else {
            uint64_t v37 = &v72;
          }
          if ((unint64_t)v26 >= *v37) {
            break;
          }
        }
      }
      unint64_t v30 = v74[0];
    }
LABEL_63:
    if ((_BYTE)v28) {
      unint64_t v29 = v30;
    }
    if ((unint64_t)v26 < v29) {
      continue;
    }
    break;
  }
  uint64_t v39 = (unsigned int *)__p;
  uint64_t v38 = v64;
LABEL_94:
  unint64_t v40 = 126 - 2 * __clz((v38 - (char *)v39) >> 2);
  if (v38 == (char *)v39) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  sub_A2823C(v39, v38, (uint64_t)&v70, v41, 1);
  int v42 = v64;
  if (__p != v64)
  {
    unsigned int v43 = (char *)__p + 4;
    while (v43 != v64)
    {
      int v44 = *((_DWORD *)v43 - 1);
      int v45 = *(_DWORD *)v43;
      v43 += 4;
      if (v44 == v45)
      {
        unint64_t v46 = v43 - 8;
        while (v43 != v42)
        {
          int v47 = v44;
          int v44 = *(_DWORD *)v43;
          if (v47 != *(_DWORD *)v43)
          {
            *((_DWORD *)v46 + 1) = v44;
            v46 += 4;
          }
          v43 += 4;
        }
        uint64_t v53 = v46 + 4;
        unsigned int v54 = (char *)(v42 - (v46 + 4));
        if (v42 == v46 + 4) {
          break;
        }
        if (v42 != &v54[(void)v53]) {
          memmove(v46 + 4, &v54[(void)v53], 0);
        }
        int v42 = v53;
        uint64_t v48 = (char *)v66;
        uint64_t v49 = v67;
        uint64_t v50 = (char *)__p;
        uint64_t v51 = 0;
        if (v66 == v67 || __p == v42) {
          goto LABEL_129;
        }
        goto LABEL_118;
      }
    }
  }
  uint64_t v48 = (char *)v66;
  uint64_t v49 = v67;
  uint64_t v50 = (char *)__p;
  uint64_t v51 = 0;
  if (v66 != v67 && __p != v42)
  {
LABEL_118:
    uint64_t v56 = v48;
    unint64_t v57 = v50;
    do
    {
      unsigned int v58 = *(_DWORD *)v57;
      unsigned int v59 = *(_DWORD *)v56;
      int v60 = v56 + 4;
      if (*(_DWORD *)v57 < *(_DWORD *)v56)
      {
        uint64_t v61 = v51;
      }
      else
      {
        v56 += 4;
        uint64_t v61 = v51 + 1;
      }
      if (v59 < v58) {
        uint64_t v56 = v60;
      }
      else {
        v57 += 4;
      }
      if (v59 >= v58) {
        uint64_t v51 = v61;
      }
    }
    while (v56 != v49 && v57 != v42);
  }
LABEL_129:
  if (v50)
  {
    char v64 = v50;
    operator delete(v50);
    uint64_t v48 = (char *)v66;
  }
  if (v48)
  {
    uint64_t v67 = v48;
    operator delete(v48);
  }
  return v51 != 0;
}

void sub_A27C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A27CE4(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    unsigned int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x15u)
  {
    unsigned int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[10];
    if (v17)
    {
      unsigned int v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      unsigned int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        unint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        uint64_t v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v56;
        }
        else {
          uint64_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        unsigned int v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v45 = &v55;
        }
        else {
          int v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        int v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = sub_736EC(9u);
        int v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        unsigned int v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_A28080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

unsigned int *sub_A2823C(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  unsigned int v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v71 = *v12;
          unsigned int v72 = *((_DWORD *)a2 - 1);
          if (v72 >= *v12) {
            return result;
          }
          *unsigned int v12 = v72;
          goto LABEL_155;
        case 3uLL:
          unsigned int v71 = *v12;
          unsigned int v73 = v12[1];
          unsigned int v74 = *((_DWORD *)a2 - 1);
          if (v73 >= *v12)
          {
            if (v74 < v73)
            {
              v12[1] = v74;
              *((_DWORD *)a2 - 1) = v73;
              unsigned int v91 = *v12;
              unsigned int v92 = v12[1];
              if (v92 < *v12)
              {
                *unsigned int v12 = v92;
                v12[1] = v91;
              }
            }
          }
          else
          {
            if (v74 >= v73)
            {
              *unsigned int v12 = v73;
              v12[1] = v71;
              unsigned int v99 = *((_DWORD *)a2 - 1);
              if (v99 >= v71) {
                return result;
              }
              v12[1] = v99;
            }
            else
            {
              *unsigned int v12 = v74;
            }
LABEL_155:
            *((_DWORD *)a2 - 1) = v71;
          }
          return result;
        case 4uLL:
          unsigned __int8 v75 = v12 + 1;
          uint64_t v76 = (unsigned int *)v12[1];
          uint64_t v77 = v12 + 2;
          unsigned int v78 = v12[2];
          unsigned int v79 = (unsigned int *)*v12;
          if (v76 >= v79)
          {
            if (v78 >= v76)
            {
LABEL_149:
              LODWORD(v76) = v78;
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
LABEL_150:
              *uint64_t v77 = v93;
              *((_DWORD *)a2 - 1) = v76;
              unsigned int v96 = *v75;
              unsigned int v97 = *v77;
              if (*v77 < v96)
              {
                v12[1] = v97;
                v12[2] = v96;
                unsigned int v98 = *v12;
                if (v97 < *v12)
                {
                  *unsigned int v12 = v97;
                  v12[1] = v98;
                }
              }
              return result;
            }
            unsigned int *v75 = v78;
            *uint64_t v77 = v76;
            v80 = v12;
            v81 = v12 + 1;
            __n128 result = v76;
            if (v78 >= v79)
            {
LABEL_141:
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            v80 = v12;
            v81 = v12 + 2;
            __n128 result = (unsigned int *)*v12;
            if (v78 >= v76)
            {
              *unsigned int v12 = v76;
              v12[1] = v79;
              v80 = v12 + 1;
              v81 = v12 + 2;
              __n128 result = v79;
              if (v78 >= v79) {
                goto LABEL_149;
              }
            }
          }
          unsigned int *v80 = v78;
          _DWORD *v81 = v79;
          LODWORD(v76) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_3948(v12, v12 + 1, v12 + 2, v12 + 3, (unsigned int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (unsigned int *)a2)
      {
        return (unsigned int *)sub_3A84((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    unsigned int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      unsigned int v20 = *v16;
      unsigned int v21 = *v12;
      if (*v12 < *v16)
      {
        if (v17 < v21)
        {
          unsigned int *v16 = v17;
          goto LABEL_32;
        }
        unsigned int *v16 = v21;
        *unsigned int v12 = v20;
        unsigned int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v20)
        {
          *unsigned int v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v21) {
        goto LABEL_33;
      }
      *unsigned int v12 = v17;
      *((_DWORD *)a2 - 1) = v21;
      unsigned int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      unsigned int *v16 = *v12;
      *unsigned int v12 = v23;
      --a4;
      unsigned int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          unsigned int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        std::string v63 = v12 + 1;
        do
        {
          unsigned int v12 = v63;
          if (v63 >= (unsigned int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      long long v64 = (unsigned int *)a2;
      if (v12 < (unsigned int *)a2)
      {
        long long v64 = (unsigned int *)a2;
        do
          unsigned int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        unsigned int v66 = *v12;
        unsigned int v67 = *v64;
        do
        {
          *unsigned int v12 = v67;
          *long long v64 = v66;
          do
          {
            unsigned int v68 = v12[1];
            ++v12;
            unsigned int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            unsigned int v69 = *--v64;
            unsigned int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      unsigned int v18 = *v12;
      unsigned int v19 = *v16;
      if (*v16 >= *v12)
      {
        if (v17 < v19)
        {
          unsigned int *v16 = v17;
          *((_DWORD *)a2 - 1) = v19;
          unsigned int v22 = *v12;
          if (*v16 < *v12)
          {
            *unsigned int v12 = *v16;
            unsigned int *v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          *unsigned int v12 = v19;
          unsigned int *v16 = v18;
          unsigned int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v18) {
            goto LABEL_24;
          }
          unsigned int *v16 = v25;
        }
        else
        {
          *unsigned int v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v18;
      }
LABEL_24:
      int v26 = &v12[v15];
      unsigned int v29 = *(v26 - 1);
      unint64_t v27 = v26 - 1;
      unsigned int v28 = v29;
      unsigned int v30 = v12[1];
      unsigned int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *unint64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          unsigned int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *unint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *unint64_t v27 = v30;
          unsigned int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *unint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      unint64_t v35 = &v12[v15];
      unsigned int v38 = v35[1];
      long long v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *long long v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          unsigned int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *long long v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *long long v36 = v39;
          unsigned int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *long long v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v43 = *v27;
      unsigned int v44 = *v16;
      unsigned int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v44) {
          goto LABEL_55;
        }
        unsigned int *v16 = v45;
        *long long v36 = v44;
        long long v36 = &v12[v14 >> 1];
        unsigned int v44 = v43;
        if (v45 < v43)
        {
LABEL_54:
          *unint64_t v27 = v45;
          *long long v36 = v43;
LABEL_55:
          unsigned int v47 = *v12;
          *unsigned int v12 = v44;
          unsigned int *v16 = v47;
          --a4;
          unsigned int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v61 = *v12;
        *unsigned int v12 = v45;
        unsigned int *v16 = v61;
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v44) {
        goto LABEL_54;
      }
      *unint64_t v27 = v44;
      unsigned int *v16 = v43;
      unint64_t v27 = &v12[v14 >> 1];
      unsigned int v44 = v45;
      if (v45 < v43) {
        goto LABEL_54;
      }
      unsigned int v46 = *v12;
      *unsigned int v12 = v43;
      unsigned int *v16 = v46;
      --a4;
      unsigned int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        unsigned int v49 = v12[++v48];
      while (v49 < v24);
      long long v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (unsigned int *)v51) {
            break;
          }
          unsigned int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          unsigned int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (unsigned int *)v51)
      {
        std::string v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unsigned int v12 = *v59;
        goto LABEL_75;
      }
      unsigned int v54 = *(_DWORD *)v51;
      std::string v55 = &v12[v48];
      std::string v56 = (unsigned int *)v51;
      do
      {
        *std::string v55 = v54;
        *std::string v56 = v49;
        do
        {
          unsigned int v57 = v55[1];
          ++v55;
          unsigned int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          unsigned int v58 = *--v56;
          unsigned int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      std::string v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      unsigned int *v59 = v24;
      if (v50 < (unsigned int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_A28A0C(v12, v59);
      unsigned int v12 = v59 + 1;
      __n128 result = (unsigned int *)sub_A28A0C(v59 + 1, (unsigned int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        __n128 result = (unsigned int *)sub_A2823C(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v12 = v59 + 1;
      }
    }
  }
  uint64_t v82 = (char *)(v12 + 1);
  BOOL v84 = v12 == (unsigned int *)a2 || v82 == a2;
  if (a5)
  {
    if (!v84)
    {
      uint64_t v85 = 0;
      int v86 = v12;
      do
      {
        unsigned int v89 = *v86;
        unsigned int v88 = v86[1];
        int v86 = (unsigned int *)v82;
        if (v88 < v89)
        {
          uint64_t v90 = v85;
          do
          {
            *(unsigned int *)((char *)v12 + v90 + 4) = v89;
            if (!v90)
            {
              unsigned int v87 = v12;
              goto LABEL_124;
            }
            unsigned int v89 = *(unsigned int *)((char *)v12 + v90 - 4);
            v90 -= 4;
          }
          while (v88 < v89);
          unsigned int v87 = (unsigned int *)((char *)v12 + v90 + 4);
LABEL_124:
          unsigned int *v87 = v88;
        }
        uint64_t v82 = (char *)(v86 + 1);
        v85 += 4;
      }
      while (v86 + 1 != (unsigned int *)a2);
    }
  }
  else if (!v84)
  {
    do
    {
      unsigned int v95 = *v11;
      unsigned int v94 = v11[1];
      uint64_t v11 = (unsigned int *)v82;
      if (v94 < v95)
      {
        do
        {
          *(_DWORD *)uint64_t v82 = v95;
          unsigned int v95 = *((_DWORD *)v82 - 2);
          v82 -= 4;
        }
        while (v94 < v95);
        *(_DWORD *)uint64_t v82 = v94;
      }
      uint64_t v82 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (unsigned int *)a2);
  }
  return result;
}

BOOL sub_A28A0C(unsigned int *a1, unsigned int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *a1;
      unsigned int v10 = *(a2 - 1);
      if (v10 >= *a1) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unsigned int v29 = *a1;
        unsigned int v30 = a1[1];
        if (v30 >= *a1) {
          return 1;
        }
        *a1 = v30;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < *a1)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        unsigned int *v19 = v17;
        unsigned int *v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        unsigned int *v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      unsigned int *v16 = v31;
      *(a2 - 1) = v15;
      unsigned int v32 = *v14;
      unsigned int v33 = *v16;
      if (*v16 >= v32) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v32;
      unsigned int v34 = *a1;
      if (v33 >= *a1) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v34;
      return 1;
    case 5:
      sub_3948(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        unsigned int *v4 = v5;
        unsigned int v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        unsigned int v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unsigned int v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      unsigned int *v7 = v3;
      *unint64_t v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        unsigned int v25 = *v4;
        unsigned int v26 = *v22;
        if (*v22 < v25) {
          break;
        }
LABEL_23:
        int v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v25;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v26;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v25 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v26 < v25);
      *(unsigned int *)((char *)a1 + v28) = v26;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t sub_A28D38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  unsigned int v6 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = a2 + 3896;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v8 = sub_C25764(a2 + 3896, a3);
  uint64_t v9 = *v8;
  *(void *)(a1 + 24) = *v8;
  unsigned int v10 = sub_C25764(v7, a3);
  *(void *)(a1 + 32) = v9 + v10[1] - *v10;
  unsigned int v11 = (void *)(a1 + 16);
  if (HIDWORD(a3) == 1 && (a3 + 3) < 2) {
    goto LABEL_29;
  }
  unsigned int v12 = (int *)sub_A1A290(a2 + 24, a3, 0, "transfers at stop");
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (v14 < 0xB) {
    goto LABEL_29;
  }
  unsigned int v15 = (int *)v13[5];
  if (v13[5]) {
    unsigned int v15 = (int *)((char *)v15 + (void)v12 + *(unsigned int *)((char *)v15 + (void)v12));
  }
  if (v14 < 0xD || !v13[6])
  {
    unint64_t v16 = 0;
    if (!v15) {
      goto LABEL_14;
    }
LABEL_11:
    int v17 = *v15;
    if (*v15)
    {
      uint64_t v18 = (uint64_t)(v15 + 1);
LABEL_13:
      *unsigned int v6 = v18;
      *unsigned int v11 = &v15[3 * v17 + 1];
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  unint64_t v16 = (int *)((char *)v12 + v13[6] + *(unsigned int *)((char *)v12 + v13[6]));
  if (v15) {
    goto LABEL_11;
  }
LABEL_14:
  if (v16)
  {
    unsigned int v19 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v19 >= 5u)
    {
      uint64_t v20 = v19[2];
      if (v20)
      {
        if (v14 < 0xD)
        {
          unsigned int v21 = 0;
        }
        else
        {
          unsigned int v21 = (int *)v13[6];
          if (v13[6]) {
            unsigned int v21 = (int *)((char *)v21 + (void)v12 + *(unsigned int *)((char *)v21 + (void)v12));
          }
        }
        unsigned int v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 < 9u)
        {
          LODWORD(v23) = 0;
        }
        else
        {
          uint64_t v23 = v22[4];
          if (v23) {
            LODWORD(v23) = *(unsigned __int16 *)((char *)v21 + v23);
          }
        }
        unsigned int v15 = (int *)((char *)v16 + v20 + *(unsigned int *)((char *)v16 + v20));
        int v17 = *v15;
        if (*v15 > v23)
        {
          if (v14 >= 0xD && (uint64_t v24 = v13[6]) != 0) {
            unsigned int v25 = (int *)((char *)v12 + v24 + *(unsigned int *)((char *)v12 + v24));
          }
          else {
            unsigned int v25 = 0;
          }
          unsigned int v34 = (unsigned __int16 *)((char *)v25 - *v25);
          if (*v34 >= 9u && (uint64_t v35 = v34[4]) != 0) {
            int v36 = *(unsigned __int16 *)((char *)v25 + v35);
          }
          else {
            int v36 = 0;
          }
          uint64_t v18 = (uint64_t)&v15[3 * v36 + 1];
          goto LABEL_13;
        }
      }
    }
  }
LABEL_29:
  unsigned int v26 = *(void **)(a1 + 8);
  uint64_t v27 = *(void **)(a1 + 16);
  uint64_t v28 = v26;
  *(unsigned char *)(a1 + 72) = v26 == v27;
  if (v26 == v27)
  {
    uint64_t v28 = *(void **)(a1 + 24);
    *(void *)(a1 + 8) = v28;
    *(void *)(a1 + 40) = *(void *)(a1 + 56);
  }
  if (*(unsigned char *)(*(void *)a1 + 16))
  {
    unsigned int v29 = (void *)(v26 == v27 ? a1 + 32 : a1 + 16);
    if ((unint64_t)v28 < *v29)
    {
      while (1)
      {
        unint64_t v30 = __ROR8__(*v28, 32);
        BOOL v31 = HIDWORD(v30) != 1 || (v30 + 3) >= 2;
        if (!v31 || (sub_2AB7E4(**(void **)(*(void *)a1 + 4120)) & 1) != 0) {
          break;
        }
        uint64_t v28 = (void *)(*v6 + 12);
        *unsigned int v6 = (uint64_t)v28;
        if (v28 == (void *)*v11)
        {
          uint64_t v28 = *(void **)(a1 + 24);
          *(void *)(a1 + 8) = v28;
          *(unsigned char *)(a1 + 72) = 1;
          if ((unint64_t)v28 >= *(void *)(a1 + 32)) {
            return a1;
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 72)) {
            unsigned int v32 = (void *)(a1 + 32);
          }
          else {
            unsigned int v32 = (void *)(a1 + 16);
          }
          if ((unint64_t)v28 >= *v32) {
            return a1;
          }
        }
      }
    }
  }
  return a1;
}

void *sub_A29024(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 200);
  uint64_t v3 = *(void *)(a2 + 208);
  __n128 result = (void *)(a2 + 200);
  if (v4 != v3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = v3 - v4;
    if (v3 - v4 == 72 && *(unsigned char *)(v4 + 24) == 1)
    {
      uint64_t v7 = *(void *)(v3 - 72);
      int v8 = *(_DWORD *)(v7 + 160);
      unint64_t v9 = *(void *)(v7 + 20);
      unsigned int v10 = *(_DWORD *)(v7 + 8);
    }
    else
    {
      uint64_t v11 = *(void *)(v3 - 72);
      int v8 = *(_DWORD *)(v11 + 160);
      unint64_t v9 = *(void *)(v11 + 20);
      uint64_t v13 = v11 + 4;
      unsigned int v12 = *(_DWORD *)(v11 + 4);
      unsigned int v10 = *(_DWORD *)(v13 + 4);
      if (v8) {
        int v14 = v10;
      }
      else {
        int v14 = v9;
      }
      if (!v8) {
        unsigned int v12 = v10;
      }
      if (v14 == v12)
      {
        uint64_t v15 = sub_A0D24C(result, 0x8E38E38E38E38E39 * (v6 >> 3) - 2);
        if (*(_DWORD *)(*(void *)v15 + 160)) {
          unint64_t v16 = *(unsigned int *)(*(void *)v15 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v15 + 8) << 32);
        }
        else {
          unint64_t v16 = *(void *)(*(void *)v15 + 20);
        }
        uint64_t v18 = *(void *)(v5 + 200);
        uint64_t v17 = *(void *)(v5 + 208);
        uint64_t v6 = v17 - v18;
        if (v17 != v18)
        {
LABEL_20:
          uint64_t v20 = 0;
          unint64_t v21 = 0x8E38E38E38E38E39 * (v6 >> 3);
          unint64_t v22 = HIDWORD(v16);
          v148 = a1 + 517;
          int v142 = a1 + 523;
          unint64_t v137 = v21;
          uint64_t v138 = v5;
          while (1)
          {
            uint64_t v31 = *(void *)(v5 + 200);
            uint64_t v32 = ~v20 - 0x71C71C71C71C71C7 * ((*(void *)(v5 + 208) - v31) >> 3);
            unsigned int v33 = (uint64_t *)(v31 + 72 * v32);
            uint64_t v35 = *v33;
            uint64_t v34 = v33[1];
            if (v35 == v34)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v151, "Tightening called on empty journey leg bundle");
              v130 = (void *)sub_2F404((uint64_t)exception, &v151);
            }
            if (0xCF3CF3CF3CF3CF3DLL * ((v34 - v35) >> 3) >= 2)
            {
              long long v131 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v151, "Tightening called on bundled journey");
              long long v132 = (void *)sub_2F404((uint64_t)v131, &v151);
            }
            int v36 = *(unsigned __int8 *)(v31 + 72 * v32 + 24);
            if (v36)
            {
              if (v36 == 1)
              {
                *(_DWORD *)(v35 + 4) += v22 - *(_DWORD *)(v35 + 8);
                *(_DWORD *)(v35 + 8) = v22;
              }
              goto LABEL_21;
            }
            unsigned int v37 = *(_DWORD *)(v35 + 52);
            unsigned int v38 = (int *)sub_A11094(v148, *(void *)(v35 + 32));
            unsigned int v39 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
              unsigned int v41 = (unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
            }
            else {
              unsigned int v41 = 0;
            }
            uint64_t v42 = *(void *)sub_A10764(v41, v37);
            unsigned int v43 = *(_DWORD *)(v35 + 56);
            unsigned int v44 = (int *)sub_A11094(v148, *(void *)(v35 + 32));
            unsigned int v45 = (unsigned __int16 *)((char *)v44 - *v44);
            if (*v45 >= 9u && (uint64_t v46 = v45[4]) != 0) {
              unsigned int v47 = (unsigned int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
            }
            else {
              unsigned int v47 = 0;
            }
            uint64_t v48 = (void *)sub_A10764(v47, v43);
            sub_A1DF34((uint64_t)v160, a1, __ROR8__(*v48, 32), 0, 0, 0);
            unint64_t v49 = v163;
            if (v163 < v164) {
              break;
            }
LABEL_21:
            int v23 = *(_DWORD *)(v35 + 160);
            BOOL v24 = v23 == 0;
            if (v23) {
              unint64_t v25 = *(unsigned int *)(v35 + 4) | ((unint64_t)*(unsigned int *)(v35 + 4) << 32);
            }
            else {
              unint64_t v25 = *(void *)(v35 + 8);
            }
            if (v24) {
              int v26 = *(_DWORD *)(v35 + 4);
            }
            else {
              int v26 = 0;
            }
            unint64_t v27 = HIDWORD(v25);
            int v28 = v26 / -10;
            int v29 = v26 % 10;
            if (v26 < 0) {
              char v30 = -5;
            }
            else {
              char v30 = 5;
            }
            LODWORD(v22) = v28
                         + v27
                         + (((-103 * (char)(v30 + v29)) >> 15) & 1)
                         + ((-103 * (char)(v30 + v29)) >> 10);
            if (++v20 == v21) {
              return (void *)sub_A29D50(v5);
            }
          }
          int v146 = v22;
          uint64_t v139 = v20;
          uint64_t v140 = __ROR8__(v42, 32);
LABEL_46:
          unint64_t v145 = __ROR8__(*(void *)v49, 32);
          sub_A1E9A0((uint64_t)&v151, (uint64_t)a1, v145, *(unsigned __int16 *)(v49 + 10), 0, 0);
          uint64_t v50 = __ROR8__(*(void *)v154, 32);
          *(void *)&long long v166 = &v168;
          *((void *)&v166 + 1) = 1;
          uint64_t v167 = v140;
          uint64_t v168 = v50;
          v165[0] = &v167;
          v165[1] = 1;
          sub_A2B188((uint64_t)&v151, (uint64_t)&v166, (uint64_t)v165, &v149);
          uint64_t v51 = v149;
          v147 = v150;
          if (v149 == v150) {
            goto LABEL_137;
          }
          uint64_t v143 = 4 * v145;
          while (1)
          {
            uint64_t v57 = *v51;
            uint64_t v56 = v51[1];
            uint64_t v154 = v153 + 16 * v57;
            if (v157) {
              char v58 = sub_A2B620((uint64_t)a1, (uint64_t)&v151, v146, 1);
            }
            else {
              char v58 = sub_A2BC00((uint64_t)&v151, v146, 1);
            }
            if ((v58 & 1) == 0) {
              goto LABEL_54;
            }
            uint64_t v59 = v155;
            BOOL v60 = v156;
            unsigned int v61 = v158;
            int v62 = v159;
            std::string v63 = &v159;
            if (!v157) {
              std::string v63 = v156;
            }
            int v64 = *v63;
            unsigned int v65 = (unsigned int *)((char *)v152 + *(unsigned __int16 *)((char *)v152 - *v152 + 6));
            uint64_t v66 = (uint64_t)&v65[2 * (v156[1] + v56)] + *v65;
            uint64_t v154 = v153 + 16 * v56;
            LODWORD(v66) = *(_DWORD *)(v66 + 8) + v64;
            int v67 = *(_DWORD *)(v154 + 8);
            signed int v68 = v66 - v67;
            int v69 = *(_DWORD *)(v35 + 4);
            int v70 = v69 / -10;
            int v71 = v69 % 10;
            char v72 = v69 < 0 ? -5 : 5;
            if (v68 <= (int)(v70
                            + *(_DWORD *)(v35 + 12)
                            + (((-103 * (char)(v72 + v71)) >> 15) & 1)
                            + ((-103 * (char)(v72 + v71)) >> 10)))
              goto LABEL_54;
            int v141 = v157;
            *(_DWORD *)(v35 + 4) = 10 * v67;
            if (sub_A10E20(v148, SHIDWORD(v145)))
            {
              unsigned int v73 = *(unsigned int **)(*(void *)(*v148 + 3944) + 72);
              if (!v73)
              {
                int v133 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v166, "Incident stop pattern quad data requested on nullptr buffer");
                long long v134 = (void *)sub_2F404((uint64_t)v133, &v166);
              }
              unsigned int v74 = (int *)((char *)v73 + *v73);
              unsigned __int8 v75 = (char *)v74 - *v74;
              if (*(unsigned __int16 *)v75 < 5u) {
                goto LABEL_75;
              }
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v123 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v77 = *v148;
              if (dword_24F7300 == HIDWORD(v145)) {
                unsigned int v78 = sub_A10AD4(*(void *)(v77 + 3976));
              }
              else {
                unsigned int v78 = sub_A10B80(v77 + 24, v145, 0);
              }
              unsigned int v74 = (int *)v78;
              unsigned __int8 v75 = &v78[-*(int *)v78];
              if (*(unsigned __int16 *)v75 < 5u)
              {
LABEL_75:
                uint64_t v76 = 0;
                goto LABEL_76;
              }
            }
            uint64_t v76 = *((unsigned __int16 *)v75 + 2);
            if (v76) {
              v76 += (uint64_t)v74 + *(unsigned int *)((char *)v74 + v76);
            }
LABEL_76:
            unsigned int v79 = (int *)(v76 + v143 + 4 + *(unsigned int *)(v76 + v143 + 4));
            v80 = (unsigned __int16 *)((char *)v79 - *v79);
            if (*v80 >= 9u && (uint64_t v81 = v80[4]) != 0) {
              uint64_t v82 = (unsigned int *)((char *)v79 + v81 + *(unsigned int *)((char *)v79 + v81));
            }
            else {
              uint64_t v82 = 0;
            }
            uint64_t v83 = sub_A10764(v82, v56);
            BOOL v84 = (unsigned __int16 *)((char *)v74 - *v74);
            if (*v84 < 0xBu)
            {
              uint64_t v85 = 0;
              int v86 = (unsigned __int16 *)((char *)v79 - *v79);
              if (*v86 < 0x11u) {
                goto LABEL_87;
              }
            }
            else
            {
              uint64_t v85 = (unsigned int *)v84[5];
              if (v85) {
                uint64_t v85 = (unsigned int *)((char *)v85 + (void)v74 + *(unsigned int *)((char *)v85 + (void)v74));
              }
              int v86 = (unsigned __int16 *)((char *)v79 - *v79);
              if (*v86 < 0x11u)
              {
LABEL_87:
                LODWORD(v87) = 0;
                goto LABEL_88;
              }
            }
            uint64_t v87 = v86[8];
            if (v86[8]) {
              LODWORD(v87) = *(int *)((char *)v79 + v87);
            }
LABEL_88:
            int v88 = -1431655765 * (((unint64_t)v60 - v59) >> 2);
            uint64_t v89 = sub_A108C4(v85, v87+ *(int *)((char *)v79 + v86[2] + *(unsigned int *)((char *)v79 + v86[2])) * v88+ *(unsigned __int8 *)(v83 + 14));
            if (v89)
            {
              uint64_t v90 = __ROR8__(*(void *)v89, 32);
              int v91 = *(_DWORD *)(v89 + 8);
            }
            else
            {
              int v91 = 0;
              uint64_t v90 = 0xFFFFFFFFLL;
            }
            *(void *)&long long v166 = v90;
            DWORD2(v166) = v91;
            unsigned int v92 = (int *)sub_A11094(v148, v145);
            unsigned int v93 = (unsigned __int16 *)((char *)v92 - *v92);
            if (*v93 >= 9u && (uint64_t v94 = v93[4]) != 0) {
              unsigned int v95 = (unsigned int *)((char *)v92 + v94 + *(unsigned int *)((char *)v92 + v94));
            }
            else {
              unsigned int v95 = 0;
            }
            uint64_t v96 = sub_A10764(v95, v56);
            if (v61 == -1 || v141 == 0) {
              int v98 = 0x7FFFFFFF;
            }
            else {
              int v98 = v62;
            }
            *(void *)(v35 + 8) = sub_A0FAA0(v142, (unsigned int *)&v166, *(unsigned __int16 *)(v96 + 12), v98);
            *(_WORD *)(v35 + 16) = v99;
            if (sub_A10E20(v148, SHIDWORD(v145)))
            {
              v100 = *(unsigned int **)(*(void *)(*v148 + 3944) + 72);
              if (!v100)
              {
                long long v135 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v166, "Incident stop pattern quad data requested on nullptr buffer");
                int v136 = (void *)sub_2F404((uint64_t)v135, &v166);
              }
              v101 = (int *)((char *)v100 + *v100);
              unint64_t v102 = (char *)v101 - *v101;
              if (*(unsigned __int16 *)v102 < 5u) {
                goto LABEL_111;
              }
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v124 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v104 = *v148;
              if (dword_24F7300 == HIDWORD(v145)) {
                int v105 = sub_A10AD4(*(void *)(v104 + 3976));
              }
              else {
                int v105 = sub_A10B80(v104 + 24, v145, 0);
              }
              v101 = (int *)v105;
              unint64_t v102 = &v105[-*(int *)v105];
              if (*(unsigned __int16 *)v102 < 5u)
              {
LABEL_111:
                uint64_t v103 = 0;
                goto LABEL_112;
              }
            }
            uint64_t v103 = *((unsigned __int16 *)v102 + 2);
            if (v103) {
              v103 += (uint64_t)v101 + *(unsigned int *)((char *)v101 + v103);
            }
LABEL_112:
            uint64_t v106 = (int *)(v103 + v143 + 4 + *(unsigned int *)(v103 + v143 + 4));
            uint64_t v107 = (unsigned __int16 *)((char *)v106 - *v106);
            if (*v107 >= 9u && (uint64_t v108 = v107[4]) != 0) {
              long long v109 = (unsigned int *)((char *)v106 + v108 + *(unsigned int *)((char *)v106 + v108));
            }
            else {
              long long v109 = 0;
            }
            uint64_t v110 = sub_A10764(v109, v57);
            BOOL v111 = (unsigned __int16 *)((char *)v101 - *v101);
            if (*v111 < 0xBu)
            {
              BOOL v112 = 0;
              BOOL v113 = (unsigned __int16 *)((char *)v106 - *v106);
              if (*v113 >= 0x11u) {
                goto LABEL_120;
              }
            }
            else
            {
              BOOL v112 = (unsigned int *)v111[5];
              if (v112) {
                BOOL v112 = (unsigned int *)((char *)v112 + (void)v101 + *(unsigned int *)((char *)v112 + (void)v101));
              }
              BOOL v113 = (unsigned __int16 *)((char *)v106 - *v106);
              if (*v113 >= 0x11u)
              {
LABEL_120:
                uint64_t v114 = v113[8];
                if (v113[8]) {
                  LODWORD(v114) = *(int *)((char *)v106 + v114);
                }
                goto LABEL_124;
              }
            }
            LODWORD(v114) = 0;
LABEL_124:
            uint64_t v115 = sub_A108C4(v112, v114+ *(int *)((char *)v106 + v113[2] + *(unsigned int *)((char *)v106 + v113[2])) * v88+ *(unsigned __int8 *)(v110 + 14));
            if (v115)
            {
              uint64_t v116 = __ROR8__(*(void *)v115, 32);
              int v117 = *(_DWORD *)(v115 + 8);
            }
            else
            {
              int v117 = 0;
              uint64_t v116 = 0xFFFFFFFFLL;
            }
            *(void *)&long long v166 = v116;
            DWORD2(v166) = v117;
            v118 = (int *)sub_A11094(v148, v145);
            v119 = (unsigned __int16 *)((char *)v118 - *v118);
            if (*v119 >= 9u && (uint64_t v120 = v119[4]) != 0) {
              uint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
            }
            else {
              uint64_t v121 = 0;
            }
            uint64_t v122 = sub_A10764(v121, v57);
            *(void *)(v35 + 20) = sub_A0FDF4(v142, (unsigned int *)&v166, *(unsigned __int16 *)(v122 + 12), v98);
            *(_WORD *)(v35 + 28) = v52;
            *(_DWORD *)(v35 + 52) = v56;
            *(_DWORD *)(v35 + 56) = v57;
            *(void *)(v35 + 32) = v145;
            unint64_t v53 = 0xFFFFFFFF00000000;
            if (v157) {
              unint64_t v53 = (unint64_t)v158 << 32;
            }
            unint64_t v54 = (-1431655765 * (((unint64_t)v156 - v155) >> 2)) | v53;
            if (v157) {
              int v55 = v159;
            }
            else {
              int v55 = 0x7FFFFFFF;
            }
            *(void *)(v35 + 40) = v54;
            *(_DWORD *)(v35 + 48) = v55;
LABEL_54:
            v51 += 2;
            if (v51 == v147)
            {
              uint64_t v51 = v149;
              uint64_t v5 = v138;
              uint64_t v20 = v139;
              unint64_t v21 = v137;
LABEL_137:
              if (v51)
              {
                v150 = v51;
                operator delete(v51);
              }
              unint64_t v125 = v164;
              unint64_t v49 = v163 + 16;
              unint64_t v163 = v49;
              if (v49 == v164)
              {
                v126 = v161 + 2;
                unsigned int v161 = v126;
                if ((unint64_t)v126 < v162)
                {
                  while (1)
                  {
                    unint64_t v49 = *v126;
                    unint64_t v125 = v126[1];
                    if (*v126 != v125) {
                      break;
                    }
                    v126 += 2;
                    unsigned int v161 = v126;
                    if ((unint64_t)v126 >= v162) {
                      goto LABEL_21;
                    }
                  }
LABEL_146:
                  unint64_t v163 = v49;
                  unint64_t v164 = v125;
                  goto LABEL_147;
                }
              }
              else
              {
LABEL_147:
                while (v49 < v125)
                {
                  BOOL v127 = sub_A1E87C(v160);
                  unint64_t v49 = v163;
                  unint64_t v125 = v164;
                  if (!v127) {
                    break;
                  }
                  unint64_t v49 = v163 + 16;
                  unint64_t v163 = v49;
                  if (v49 == v164)
                  {
                    v128 = v161 + 2;
                    unsigned int v161 = v128;
                    if ((unint64_t)v128 < v162)
                    {
                      while (1)
                      {
                        unint64_t v49 = *v128;
                        unint64_t v125 = v128[1];
                        if (*v128 != v125) {
                          goto LABEL_146;
                        }
                        v128 += 2;
                        unsigned int v161 = v128;
                        if ((unint64_t)v128 >= v162) {
                          goto LABEL_21;
                        }
                      }
                    }
                    goto LABEL_21;
                  }
                }
                if (v49 < v125) {
                  goto LABEL_46;
                }
              }
              goto LABEL_21;
            }
          }
        }
        return (void *)sub_A29D50(v5);
      }
    }
    unint64_t v19 = v10 | ((unint64_t)v10 << 32);
    if (v8) {
      unint64_t v16 = v19;
    }
    else {
      unint64_t v16 = v9;
    }
    if (v3 != v4) {
      goto LABEL_20;
    }
    return (void *)sub_A29D50(v5);
  }
  return result;
}

void sub_A29C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_A29D50(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 200);
  uint64_t v3 = *(void *)(result + 208);
  uint64_t v4 = (void *)(result + 200);
  if (v3 - v2 == 72)
  {
    if (v2 == v3 || *(unsigned char *)(v2 + 24) == 1) {
      return result;
    }
  }
  else if (v2 == v3)
  {
    return result;
  }
  uint64_t v6 = (void *)sub_A2AD08((void *)(result + 200), 0);
  uint64_t v7 = (void *)sub_A2AD08(v4, 1uLL);
  uint64_t v8 = sub_A1D7E0(v6, 0);
  __n128 result = sub_A2AF48(v7, 0);
  int v9 = *(_DWORD *)(result + 4);
  if (v9 < 0) {
    char v10 = -5;
  }
  else {
    char v10 = 5;
  }
  *(_DWORD *)(v8 + 4) += *(_DWORD *)(result + 12)
                       - *(_DWORD *)(v8 + 8)
                       + v9 / -10
                       + (((-103 * (char)(v10 + v9 % 10)) >> 15) & 1)
                       + ((-103 * (char)(v10 + v9 % 10)) >> 10);
  int v11 = *(_DWORD *)(result + 4);
  if (v11 < 0) {
    char v12 = -5;
  }
  else {
    char v12 = 5;
  }
  *(_DWORD *)(v8 + 8) = v11 / -10
                      + *(_DWORD *)(result + 12)
                      + (((-103 * (char)(v12 + v11 % 10)) >> 15) & 1)
                      + ((-103 * (char)(v12 + v11 % 10)) >> 10);
  int v14 = *(void **)(v1 + 200);
  uint64_t v13 = *(void **)(v1 + 208);
  for (uint64_t i = v14 + 9; v14 + 9 != v13; uint64_t i = v14 + 9)
  {
    unint64_t v16 = v14;
    int v14 = i;
    if (*((unsigned char *)v16 + 96) == 1)
    {
      uint64_t v17 = v16[10] - *i;
      if (v17)
      {
        unint64_t v18 = 0;
        uint64_t v19 = v17 / 168;
        do
        {
          uint64_t v20 = sub_A1D7E0(v14, v18);
          __n128 result = sub_A1D7E0(v16, v18);
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) - *(_DWORD *)(v20 + 4) + *(_DWORD *)(result + 24);
          *(_DWORD *)(v20 + 4) = *(_DWORD *)(result + 24);
          ++v18;
        }
        while (v19 != v18);
        uint64_t v13 = *(void **)(v1 + 208);
      }
    }
  }
  return result;
}

uint64_t sub_A29F7C(uint64_t result, uint64_t a2)
{
  uint64_t v116 = (void *)result;
  if (*(void *)(a2 + 200) != *(void *)(a2 + 208))
  {
    uint64_t v2 = a2;
    uint64_t v3 = sub_A2AAF8(a2, 0);
    uint64_t v4 = *(void *)(v2 + 208) - *(void *)(v2 + 200);
    if (v4)
    {
      unint64_t v5 = v3;
      uint64_t v6 = 0;
      unint64_t v7 = 0x8E38E38E38E38E39 * (v4 >> 3);
      uint64_t v120 = v116 + 517;
      uint64_t v114 = v116 + 523;
      unint64_t v109 = v7;
      uint64_t v110 = v2;
      while (1)
      {
        uint64_t v8 = *(void *)(v2 + 200);
        int v9 = (uint64_t *)(v8 + 72 * v6);
        uint64_t v11 = *v9;
        uint64_t v10 = v9[1];
        if (v11 == v10)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v123, "Tightening called on empty journey leg bundle");
          unint64_t v102 = (void *)sub_2F404((uint64_t)exception, &v123);
        }
        if (0xCF3CF3CF3CF3CF3DLL * ((v10 - v11) >> 3) >= 2)
        {
          uint64_t v103 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v123, "Tightening called on bundled journey");
          uint64_t v104 = (void *)sub_2F404((uint64_t)v103, &v123);
        }
        int v12 = *(unsigned __int8 *)(v8 + 72 * v6 + 24);
        if (v12)
        {
          if (v12 == 1)
          {
            int v13 = *(_DWORD *)(v11 + 8) + HIDWORD(v5) - *(_DWORD *)(v11 + 4);
            *(_DWORD *)(v11 + 4) = HIDWORD(v5);
            *(_DWORD *)(v11 + 8) = v13;
          }
          goto LABEL_4;
        }
        unsigned int v14 = *(_DWORD *)(v11 + 56);
        uint64_t v15 = (int *)sub_A11094(v120, *(void *)(v11 + 32));
        unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
          unint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = *(void *)sub_A10764(v18, v14);
        unsigned int v20 = *(_DWORD *)(v11 + 52);
        unint64_t v21 = (int *)sub_A11094(v120, *(void *)(v11 + 32));
        unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
          BOOL v24 = (unsigned int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
        }
        else {
          BOOL v24 = 0;
        }
        unint64_t v25 = (void *)sub_A10764(v24, v20);
        sub_A1DF34((uint64_t)v132, v116, __ROR8__(*v25, 32), 0, 0, 0);
        unint64_t v26 = v135;
        if (v135 < v136) {
          break;
        }
LABEL_4:
        if (*(_DWORD *)(v11 + 160)) {
          unint64_t v5 = *(unsigned int *)(v11 + 8) | ((unint64_t)*(unsigned int *)(v11 + 8) << 32);
        }
        else {
          unint64_t v5 = *(void *)(v11 + 20);
        }
        if (++v6 == v7) {
          return sub_A29D50(v2);
        }
      }
      unint64_t v118 = HIDWORD(v5);
      uint64_t v111 = v6;
      uint64_t v112 = __ROR8__(v19, 32);
LABEL_23:
      unint64_t v117 = __ROR8__(*(void *)v26, 32);
      sub_A1E9A0((uint64_t)&v123, (uint64_t)v116, v117, *(unsigned __int16 *)(v26 + 8), 0, 0);
      uint64_t v27 = __ROR8__(*(void *)v126, 32);
      *(void *)&long long v138 = &v140;
      *((void *)&v138 + 1) = 1;
      uint64_t v139 = v112;
      uint64_t v140 = v27;
      v137[0] = &v139;
      v137[1] = 1;
      sub_A1EDFC((uint64_t)&v123, (uint64_t)&v138, (uint64_t)v137, &v121);
      int v28 = v121;
      v119 = v122;
      if (v121 == v122) {
        goto LABEL_110;
      }
      uint64_t v115 = 4 * v117;
      while (1)
      {
        uint64_t v29 = *v28;
        uint64_t v30 = v28[1];
        uint64_t v126 = v125 + 16 * v29;
        int v31 = *(_DWORD *)(v126 + 8);
        if (v129) {
          char v32 = sub_A1F39C((uint64_t)v116, (uint64_t)&v123, v31 + v118, 1);
        }
        else {
          char v32 = sub_A1F8B4((uint64_t)&v123, v31 + (int)v118, 1);
        }
        if ((v32 & 1) == 0) {
          goto LABEL_25;
        }
        uint64_t v33 = v127;
        uint64_t v34 = v128;
        unsigned int v36 = v130;
        int v35 = v131;
        unsigned int v37 = &v131;
        if (!v129) {
          unsigned int v37 = v128;
        }
        int v38 = *v37;
        unsigned int v39 = (unsigned int *)((char *)v124 + *(unsigned __int16 *)((char *)v124 - *v124 + 6));
        uint64_t v40 = (uint64_t)&v39[2 * (v128[1] + v30)] + *v39;
        uint64_t v126 = v125 + 16 * v30;
        if (*(_DWORD *)(v40 + 4) + v38 >= *(_DWORD *)(v11 + 24)) {
          goto LABEL_25;
        }
        int v113 = v129;
        *(_DWORD *)(v11 + 4) = 10 * v31;
        if (sub_A10E20(v120, SHIDWORD(v117)))
        {
          unsigned int v41 = *(unsigned int **)(*(void *)(*v120 + 3944) + 72);
          if (!v41)
          {
            int v105 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v138, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v106 = (void *)sub_2F404((uint64_t)v105, &v138);
          }
          uint64_t v42 = (int *)((char *)v41 + *v41);
          unsigned int v43 = (char *)v42 - *v42;
          if (*(unsigned __int16 *)v43 < 5u) {
            goto LABEL_43;
          }
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v95 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v45 = *v120;
          if (dword_24F7300 == HIDWORD(v117)) {
            uint64_t v46 = sub_A10AD4(*(void *)(v45 + 3976));
          }
          else {
            uint64_t v46 = sub_A10B80(v45 + 24, v117, 0);
          }
          uint64_t v42 = (int *)v46;
          unsigned int v43 = &v46[-*(int *)v46];
          if (*(unsigned __int16 *)v43 < 5u)
          {
LABEL_43:
            uint64_t v44 = 0;
            goto LABEL_44;
          }
        }
        uint64_t v44 = *((unsigned __int16 *)v43 + 2);
        if (v44) {
          v44 += (uint64_t)v42 + *(unsigned int *)((char *)v42 + v44);
        }
LABEL_44:
        unsigned int v47 = (int *)(v44 + v115 + 4 + *(unsigned int *)(v44 + v115 + 4));
        uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
        if (*v48 >= 9u && (uint64_t v49 = v48[4]) != 0) {
          uint64_t v50 = (unsigned int *)((char *)v47 + v49 + *(unsigned int *)((char *)v47 + v49));
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v51 = sub_A10764(v50, v29);
        __int16 v52 = (unsigned __int16 *)((char *)v42 - *v42);
        if (*v52 < 0xBu)
        {
          unint64_t v53 = 0;
          unint64_t v54 = (unsigned __int16 *)((char *)v47 - *v47);
          if (*v54 < 0x11u) {
            goto LABEL_55;
          }
        }
        else
        {
          unint64_t v53 = (unsigned int *)v52[5];
          if (v53) {
            unint64_t v53 = (unsigned int *)((char *)v53 + (void)v42 + *(unsigned int *)((char *)v53 + (void)v42));
          }
          unint64_t v54 = (unsigned __int16 *)((char *)v47 - *v47);
          if (*v54 < 0x11u)
          {
LABEL_55:
            LODWORD(v55) = 0;
            goto LABEL_56;
          }
        }
        uint64_t v55 = v54[8];
        if (v54[8]) {
          LODWORD(v55) = *(int *)((char *)v47 + v55);
        }
LABEL_56:
        int v56 = -1431655765 * (((unint64_t)v34 - v33) >> 2);
        uint64_t v57 = sub_A108C4(v53, v55+ *(int *)((char *)v47 + v54[2] + *(unsigned int *)((char *)v47 + v54[2])) * v56+ *(unsigned __int8 *)(v51 + 14));
        if (v57)
        {
          uint64_t v58 = __ROR8__(*(void *)v57, 32);
          int v59 = *(_DWORD *)(v57 + 8);
        }
        else
        {
          int v59 = 0;
          uint64_t v58 = 0xFFFFFFFFLL;
        }
        *(void *)&long long v138 = v58;
        DWORD2(v138) = v59;
        BOOL v60 = (int *)sub_A11094(v120, v117);
        unsigned int v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0) {
          std::string v63 = (unsigned int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62));
        }
        else {
          std::string v63 = 0;
        }
        uint64_t v64 = sub_A10764(v63, v29);
        if (v36 == -1 || v113 == 0) {
          int v66 = 0x7FFFFFFF;
        }
        else {
          int v66 = v35;
        }
        *(void *)(v11 + 8) = sub_A0FAA0(v114, (unsigned int *)&v138, *(unsigned __int16 *)(v64 + 12), v66);
        *(_WORD *)(v11 + 16) = v67;
        if (sub_A10E20(v120, SHIDWORD(v117)))
        {
          signed int v68 = *(unsigned int **)(*(void *)(*v120 + 3944) + 72);
          if (!v68)
          {
            uint64_t v107 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v138, "Incident stop pattern quad data requested on nullptr buffer");
            uint64_t v108 = (void *)sub_2F404((uint64_t)v107, &v138);
          }
          int v69 = (int *)((char *)v68 + *v68);
          int v70 = (char *)v69 - *v69;
          if (*(unsigned __int16 *)v70 < 5u) {
            goto LABEL_79;
          }
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v96 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v72 = *v120;
          if (dword_24F7300 == HIDWORD(v117)) {
            unsigned int v73 = sub_A10AD4(*(void *)(v72 + 3976));
          }
          else {
            unsigned int v73 = sub_A10B80(v72 + 24, v117, 0);
          }
          int v69 = (int *)v73;
          int v70 = &v73[-*(int *)v73];
          if (*(unsigned __int16 *)v70 < 5u)
          {
LABEL_79:
            uint64_t v71 = 0;
            goto LABEL_80;
          }
        }
        uint64_t v71 = *((unsigned __int16 *)v70 + 2);
        if (v71) {
          v71 += (uint64_t)v69 + *(unsigned int *)((char *)v69 + v71);
        }
LABEL_80:
        unsigned int v74 = (int *)(v71 + v115 + 4 + *(unsigned int *)(v71 + v115 + 4));
        unsigned __int8 v75 = (unsigned __int16 *)((char *)v74 - *v74);
        if (*v75 >= 9u && (uint64_t v76 = v75[4]) != 0) {
          uint64_t v77 = (unsigned int *)((char *)v74 + v76 + *(unsigned int *)((char *)v74 + v76));
        }
        else {
          uint64_t v77 = 0;
        }
        uint64_t v78 = sub_A10764(v77, v30);
        unsigned int v79 = (unsigned __int16 *)((char *)v69 - *v69);
        if (*v79 < 0xBu)
        {
          v80 = 0;
          uint64_t v81 = (unsigned __int16 *)((char *)v74 - *v74);
          if (*v81 >= 0x11u) {
            goto LABEL_88;
          }
        }
        else
        {
          v80 = (unsigned int *)v79[5];
          if (v80) {
            v80 = (unsigned int *)((char *)v80 + (void)v69 + *(unsigned int *)((char *)v80 + (void)v69));
          }
          uint64_t v81 = (unsigned __int16 *)((char *)v74 - *v74);
          if (*v81 >= 0x11u)
          {
LABEL_88:
            uint64_t v82 = v81[8];
            if (v81[8]) {
              LODWORD(v82) = *(int *)((char *)v74 + v82);
            }
            goto LABEL_92;
          }
        }
        LODWORD(v82) = 0;
LABEL_92:
        uint64_t v83 = sub_A108C4(v80, v82+ *(int *)((char *)v74 + v81[2] + *(unsigned int *)((char *)v74 + v81[2])) * v56+ *(unsigned __int8 *)(v78 + 14));
        if (v83)
        {
          uint64_t v84 = __ROR8__(*(void *)v83, 32);
          int v85 = *(_DWORD *)(v83 + 8);
        }
        else
        {
          int v85 = 0;
          uint64_t v84 = 0xFFFFFFFFLL;
        }
        *(void *)&long long v138 = v84;
        DWORD2(v138) = v85;
        int v86 = (int *)sub_A11094(v120, v117);
        uint64_t v87 = (unsigned __int16 *)((char *)v86 - *v86);
        if (*v87 >= 9u && (uint64_t v88 = v87[4]) != 0) {
          uint64_t v89 = (unsigned int *)((char *)v86 + v88 + *(unsigned int *)((char *)v86 + v88));
        }
        else {
          uint64_t v89 = 0;
        }
        uint64_t v90 = sub_A10764(v89, v30);
        *(void *)(v11 + 20) = sub_A0FDF4(v114, (unsigned int *)&v138, *(unsigned __int16 *)(v90 + 12), v66);
        *(_WORD *)(v11 + 28) = v91;
        *(_DWORD *)(v11 + 52) = v29;
        *(_DWORD *)(v11 + 56) = v30;
        *(void *)(v11 + 32) = v117;
        unint64_t v92 = 0xFFFFFFFF00000000;
        if (v129) {
          unint64_t v92 = (unint64_t)v130 << 32;
        }
        unint64_t v93 = (-1431655765 * (((unint64_t)v128 - v127) >> 2)) | v92;
        if (v129) {
          int v94 = v131;
        }
        else {
          int v94 = 0x7FFFFFFF;
        }
        *(void *)(v11 + 40) = v93;
        *(_DWORD *)(v11 + 48) = v94;
LABEL_25:
        v28 += 2;
        if (v28 == v119)
        {
          int v28 = v121;
          uint64_t v2 = v110;
          uint64_t v6 = v111;
          unint64_t v7 = v109;
LABEL_110:
          if (v28)
          {
            uint64_t v122 = v28;
            operator delete(v28);
          }
          unint64_t v97 = v136;
          unint64_t v26 = v135 + 16;
          unint64_t v135 = v26;
          if (v26 == v136)
          {
            int v98 = v133 + 2;
            int v133 = v98;
            if ((unint64_t)v98 < v134)
            {
              while (1)
              {
                unint64_t v26 = *v98;
                unint64_t v97 = v98[1];
                if (*v98 != v97) {
                  break;
                }
                v98 += 2;
                int v133 = v98;
                if ((unint64_t)v98 >= v134) {
                  goto LABEL_4;
                }
              }
LABEL_119:
              unint64_t v135 = v26;
              unint64_t v136 = v97;
              goto LABEL_120;
            }
          }
          else
          {
LABEL_120:
            while (v26 < v97)
            {
              BOOL v99 = sub_A1E87C(v132);
              unint64_t v26 = v135;
              unint64_t v97 = v136;
              if (!v99) {
                break;
              }
              unint64_t v26 = v135 + 16;
              unint64_t v135 = v26;
              if (v26 == v136)
              {
                v100 = v133 + 2;
                int v133 = v100;
                if ((unint64_t)v100 < v134)
                {
                  while (1)
                  {
                    unint64_t v26 = *v100;
                    unint64_t v97 = v100[1];
                    if (*v100 != v97) {
                      goto LABEL_119;
                    }
                    v100 += 2;
                    int v133 = v100;
                    if ((unint64_t)v100 >= v134) {
                      goto LABEL_4;
                    }
                  }
                }
                goto LABEL_4;
              }
            }
            if (v26 < v97) {
              goto LABEL_23;
            }
          }
          goto LABEL_4;
        }
      }
    }
    return sub_A29D50(v2);
  }
  return result;
}

void sub_A2AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_A2AAF8(uint64_t a1, int a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 200);
  uint64_t v4 = *(uint64_t **)(a1 + 208);
  uint64_t v2 = (void *)(a1 + 200);
  if (v3 == v4) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  if ((char *)v4 - (char *)v3 == 72 && *((unsigned char *)v3 + 24) == 1)
  {
    uint64_t v6 = *v3;
    int v7 = *(_DWORD *)(v6 + 160);
    uint64_t v8 = *(unsigned int *)(v6 + 4);
LABEL_12:
    uint64_t v15 = *(void *)(v6 + 8);
    uint64_t v14 = v8 | (v8 << 32);
    if (!v7) {
      return v15;
    }
    return v14;
  }
  uint64_t v6 = *v3;
  int v7 = *(_DWORD *)(v6 + 160);
  int v9 = *(_DWORD *)(v6 + 20);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  int v10 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    int v9 = *(_DWORD *)(v6 + 8);
    int v10 = *(_DWORD *)(v6 + 4);
  }
  if (v9 != v10) {
    goto LABEL_12;
  }
  uint64_t v11 = sub_A0D24C(v2, 1uLL);
  int v12 = *(_DWORD *)(*(void *)v11 + 160);
  uint64_t v13 = *(unsigned int *)(*(void *)v11 + 4);
  uint64_t v14 = v13 | (v13 << 32);
  if (!v12) {
    uint64_t v14 = *(void *)(*(void *)v11 + 8);
  }
  if (a2) {
    return v14;
  }
  if (v12) {
    LODWORD(v13) = 0;
  }
  if (HIDWORD(v14) == 0x7FFFFFFF || v13 == 0x7FFFFFFF)
  {
    int v18 = (int)v13 / -10;
    int v19 = (int)v13 % 10;
    unint64_t v20 = 0x7FFFFFFF00000000;
  }
  else
  {
    int v18 = (int)v13 / -10;
    int v19 = (int)v13 % 10;
    if ((int)v13 < 0) {
      char v21 = -5;
    }
    else {
      char v21 = 5;
    }
    unint64_t v20 = (unint64_t)(v18
                           + HIDWORD(v14)
                           + (((-103 * (char)(v21 + v19)) >> 15) & 1)
                           + ((-103 * (char)(v21 + v19)) >> 10)) << 32;
  }
  int v22 = v18 + v14;
  if ((int)v13 < 0) {
    char v23 = -5;
  }
  else {
    char v23 = 5;
  }
  return v20 | (v22
                            + (((-103 * (char)(v23 + v19)) >> 15) & 1)
                            + ((-103 * (char)(v23 + v19)) >> 10)) | v20;
}

uint64_t sub_A2AD08(void *a1, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 72 * a2;
}

void sub_A2AE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_A2AF48(void *a1, unint64_t a2)
{
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 168 * a2;
}

void sub_A2B0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_A2B188(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  long long __p = 0;
  unint64_t v8 = *(void *)(a1 + 40);
  long long v9 = (void *)(v8 - 16);
  *(void *)(a1 + 32) = v8 - 16;
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    BOOL v10 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && (unint64_t)v9 >= *(void *)(a1 + 24))
  {
    do
    {
      if ((unint64_t)v9 >= *(void *)(a1 + 40)) {
        break;
      }
      unint64_t v11 = __ROR8__(*v9, 32);
      if (HIDWORD(v11) == 1 && (v11 + 3) < 2) {
        break;
      }
      char v13 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
      long long v9 = *(void **)(a1 + 32);
      if (v13) {
        break;
      }
      v9 -= 2;
      *(void *)(a1 + 32) = v9;
    }
    while ((unint64_t)v9 >= *(void *)(a1 + 24));
    unint64_t v8 = *(void *)(a1 + 40);
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if ((unint64_t)v9 >= v14 && (unint64_t)v9 < v8)
  {
    do
    {
      uint64_t v16 = __ROR8__(*v9, 32);
      uint64_t v17 = *(void *)(a3 + 8);
      if (v17)
      {
        std::string v18 = *(void **)a3;
        uint64_t v19 = 8 * v17;
        while (v16 != *v18)
        {
          ++v18;
          v19 -= 8;
          if (!v19) {
            goto LABEL_49;
          }
        }
        if ((*((unsigned char *)v9 + 15) & 2) != 0)
        {
          unint64_t v20 = ((unint64_t)v9 - v14) >> 4;
          uint64_t v21 = *(void *)(a1 + 48);
          if (v21) {
            uint64_t v21 = *(unsigned int *)(v21 + 4 * v20);
          }
          LODWORD(v44) = v20;
          *((void *)&v44 + 1) = v21;
          int v42 = -1;
          uint64_t v43 = 0;
          int v22 = (char *)__p;
          char v23 = v46;
          BOOL v24 = (char *)__p;
          if (__p != v46)
          {
            do
            {
              uint64_t v25 = *((void *)v24 + 1);
              if ((DWORD2(v44) & v25) == 0)
              {
                int v42 = *(_DWORD *)v24;
                uint64_t v43 = v25;
                *(_DWORD *)BOOL v24 = -1;
              }
              v24 += 16;
            }
            while (v24 != v23);
            if (v42 != -1)
            {
              sub_3EC418((uint64_t)a4, &v42, (int *)&v44);
              int v22 = (char *)__p;
              char v23 = v46;
            }
          }
          if (v22 != v23)
          {
            while (*(_DWORD *)v22 != -1)
            {
              v22 += 16;
              if (v22 == v23) {
                goto LABEL_48;
              }
            }
            if (v22 != v23)
            {
              unint64_t v26 = v22 + 16;
              if (v22 + 16 != v23)
              {
                do
                {
                  if (*(_DWORD *)v26 != -1)
                  {
                    *(_DWORD *)int v22 = *(_DWORD *)v26;
                    *((void *)v22 + 1) = *((void *)v26 + 1);
                    v22 += 16;
                  }
                  v26 += 16;
                }
                while (v26 != v23);
                char v23 = v46;
              }
            }
            if (v22 != v23) {
              uint64_t v46 = v22;
            }
          }
LABEL_48:
          long long v9 = *(void **)(a1 + 32);
          uint64_t v16 = __ROR8__(*v9, 32);
        }
      }
LABEL_49:
      uint64_t v27 = *(void *)(a2 + 8);
      if (!v27) {
        goto LABEL_73;
      }
      int v28 = *(void **)a2;
      uint64_t v29 = 8 * v27;
      while (v16 != *v28)
      {
        ++v28;
        v29 -= 8;
        if (!v29) {
          goto LABEL_73;
        }
      }
      if ((*((unsigned char *)v9 + 15) & 1) == 0) {
        goto LABEL_73;
      }
      unint64_t v30 = ((unint64_t)v9 - *(void *)(a1 + 24)) >> 4;
      uint64_t v31 = *(void *)(a1 + 48);
      if (v31) {
        uint64_t v31 = *(unsigned int *)(v31 + 4 * v30);
      }
      LODWORD(v44) = v30;
      *((void *)&v44 + 1) = v31;
      char v32 = v46;
      if (__p != v46)
      {
        uint64_t v33 = (char *)__p + 16;
        while ((v31 & ~*((void *)v33 - 1)) != 0)
        {
          BOOL v10 = v33 == v46;
          v33 += 16;
          if (v10) {
            goto LABEL_72;
          }
        }
        uint64_t v34 = v33 - 16;
        if (v33 - 16 != v46)
        {
          if (v33 == v46)
          {
            if (v34 == v46) {
              goto LABEL_72;
            }
          }
          else
          {
            do
            {
              if ((DWORD2(v44) & ~*((_DWORD *)v33 + 2)) != 0)
              {
                *(_DWORD *)uint64_t v34 = *(_DWORD *)v33;
                *((void *)v34 + 1) = *((void *)v33 + 1);
                v34 += 16;
              }
              v33 += 16;
            }
            while (v33 != v32);
            if (v34 == v46) {
              goto LABEL_72;
            }
          }
          uint64_t v46 = v34;
        }
      }
LABEL_72:
      sub_A1F294((char **)&__p, &v44);
      long long v9 = *(void **)(a1 + 32);
LABEL_73:
      v9 -= 2;
      *(void *)(a1 + 32) = v9;
      unint64_t v14 = *(void *)(a1 + 24);
      if (*(unsigned char *)(*(void *)a1 + 16)) {
        BOOL v35 = *(unsigned char *)(a1 + 8) == 0;
      }
      else {
        BOOL v35 = 0;
      }
      if (v35 && (unint64_t)v9 >= v14 && (unint64_t)v9 < *(void *)(a1 + 40))
      {
        do
        {
          unint64_t v38 = __ROR8__(*v9, 32);
          if (HIDWORD(v38) == 1 && (v38 + 3) < 2) {
            break;
          }
          char v40 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
          unint64_t v14 = *(void *)(a1 + 24);
          long long v9 = *(void **)(a1 + 32);
          if (v40) {
            break;
          }
          v9 -= 2;
          *(void *)(a1 + 32) = v9;
        }
        while ((unint64_t)v9 >= v14 && (unint64_t)v9 < *(void *)(a1 + 40));
      }
    }
    while ((unint64_t)v9 >= v14 && (unint64_t)v9 < *(void *)(a1 + 40));
  }
  if (__p)
  {
    uint64_t v46 = (char *)__p;
    operator delete(__p);
  }
}

void sub_A2B5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

BOOL sub_A2B620(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = (*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  unint64_t v7 = *(void *)(a2 + 88);
  unint64_t v8 = (void *)(a1 + 4136);
  uint64_t v9 = 4 * v7;
  uint64_t v10 = -1431655765 * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  for (unsigned int i = v4 - 1; ; --i)
  {
    int v12 = sub_A10650(v8, v7);
    char v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = (int *)(v14 + v9 + 4 + *(unsigned int *)(v14 + v9 + 4));
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      std::string v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      std::string v18 = 0;
    }
    sub_A1FDE4(v18, i);
    uint64_t v19 = sub_A10650(v8, v7);
    unint64_t v20 = (int *)v19;
    uint64_t v21 = &v19[-*(int *)v19];
    if (*(unsigned __int16 *)v21 < 5u)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = *((unsigned __int16 *)v21 + 2);
      if (v22) {
        v22 += (uint64_t)&v19[*(unsigned int *)&v19[v22]];
      }
    }
    char v23 = (int *)(v22 + v9 + 4 + *(unsigned int *)(v22 + v9 + 4));
    BOOL v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 >= 7u && (uint64_t v25 = v24[3]) != 0) {
      unint64_t v26 = (unsigned int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
    }
    else {
      unint64_t v26 = 0;
    }
    uint64_t v27 = (int *)sub_A1FDE4(v26, i);
    int v28 = *v27;
    uint64_t v29 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v29 < 9u)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v30 = (unsigned int *)v29[4];
      if (v30) {
        unint64_t v30 = (unsigned int *)((char *)v30 + (void)v20 + *(unsigned int *)((char *)v30 + (void)v20));
      }
    }
    int v31 = *(_DWORD *)(sub_A1FF48(v30, v27[2] >> 8) + 4);
    char v32 = sub_A10650(v8, v7);
    uint64_t v33 = (int *)v32;
    uint64_t v34 = &v32[-*(int *)v32];
    if (*(unsigned __int16 *)v34 < 5u)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = *((unsigned __int16 *)v34 + 2);
      if (v35) {
        v35 += (uint64_t)&v32[*(unsigned int *)&v32[v35]];
      }
    }
    unsigned int v36 = (int *)(v35 + v9 + 4 + *(unsigned int *)(v35 + v9 + 4));
    unsigned int v37 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v37 >= 7u && (uint64_t v38 = v37[3]) != 0) {
      unsigned int v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
    }
    else {
      unsigned int v39 = 0;
    }
    uint64_t v40 = sub_A1FDE4(v39, i);
    unsigned int v41 = (unsigned __int16 *)((char *)v33 - *v33);
    if (*v41 < 7u)
    {
      int v42 = 0;
    }
    else
    {
      int v42 = (unsigned int *)v41[3];
      if (v42) {
        int v42 = (unsigned int *)((char *)v42 + (void)v33 + *(unsigned int *)((char *)v42 + (void)v33));
      }
    }
    if (v31 + v28 + *(_DWORD *)sub_A200AC(v42, *(_DWORD *)(v40 + 4) + (int)v6) <= a3) {
      break;
    }
    if (!--v10) {
      return 0;
    }
  }
  if (i == -1) {
    return 0;
  }
  unint64_t v43 = *(void *)(a2 + 88);
  uint64_t v45 = *(void *)(a2 + 24);
  uint64_t v44 = *(void *)(a2 + 32);
  uint64_t v46 = sub_A10650(v8, v43);
  uint64_t v47 = &v46[-*(int *)v46];
  if (*(unsigned __int16 *)v47 < 5u)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = *((unsigned __int16 *)v47 + 2);
    if (v48) {
      v48 += (uint64_t)&v46[*(unsigned int *)&v46[v48]];
    }
  }
  uint64_t v49 = 4 * v43;
  uint64_t v50 = (int *)(v48 + v49 + 4 + *(unsigned int *)(v48 + v49 + 4));
  uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 7u && (uint64_t v52 = v51[3]) != 0) {
    unint64_t v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
  }
  else {
    unint64_t v53 = 0;
  }
  unint64_t v54 = v44 - v45;
  uint64_t v55 = *(unsigned __int8 *)(sub_A1FDE4(v53, i) + 8);
  int v56 = sub_A10650(v8, v43);
  uint64_t v57 = (int *)v56;
  uint64_t v58 = &v56[-*(int *)v56];
  if (*(unsigned __int16 *)v58 < 5u)
  {
    uint64_t v59 = 0;
  }
  else
  {
    uint64_t v59 = *((unsigned __int16 *)v58 + 2);
    if (v59) {
      v59 += (uint64_t)&v56[*(unsigned int *)&v56[v59]];
    }
  }
  uint64_t v60 = v59 + v49;
  unint64_t v61 = v54 >> 4;
  uint64_t v62 = (int *)(v60 + 4 + *(unsigned int *)(v60 + 4));
  std::string v63 = (unsigned __int16 *)((char *)v62 - *v62);
  if (*v63 >= 7u && (uint64_t v64 = v63[3]) != 0) {
    unsigned int v65 = (unsigned int *)((char *)v62 + v64 + *(unsigned int *)((char *)v62 + v64));
  }
  else {
    unsigned int v65 = 0;
  }
  unsigned int v66 = i;
  uint64_t v67 = sub_A1FDE4(v65, i);
  signed int v68 = (unsigned __int16 *)((char *)v57 - *v57);
  if (*v68 < 7u)
  {
    int v70 = (int *)sub_A200AC(0, *(_DWORD *)(v67 + 4) + (int)v61);
    if (!v55)
    {
LABEL_64:
      int v72 = -1;
      goto LABEL_66;
    }
  }
  else
  {
    int v69 = (unsigned int *)v68[3];
    if (v69) {
      int v69 = (unsigned int *)((char *)v69 + (void)v57 + *(unsigned int *)((char *)v69 + (void)v57));
    }
    int v70 = (int *)sub_A200AC(v69, *(_DWORD *)(v67 + 4) + (int)v61);
    if (!v55) {
      goto LABEL_64;
    }
  }
  int v71 = *v70;
  while ((int)(sub_A1FCE8(v8, v43, i, (int)v55 - 1) + v71) > a3)
  {
    if (!--v55) {
      goto LABEL_64;
    }
  }
  int v72 = v55 - 1;
LABEL_66:
  unint64_t v73 = *(void *)(a2 + 88);
  uint64_t v75 = *(void *)(a2 + 24);
  uint64_t v74 = *(void *)(a2 + 32);
  uint64_t v76 = sub_A10650(v8, v73);
  uint64_t v77 = (int *)v76;
  uint64_t v78 = &v76[-*(int *)v76];
  if (*(unsigned __int16 *)v78 < 5u)
  {
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = *((unsigned __int16 *)v78 + 2);
    if (v79) {
      v79 += (uint64_t)&v76[*(unsigned int *)&v76[v79]];
    }
  }
  int v80 = v72;
  uint64_t v81 = (int *)(v79 + 4 * v73 + 4 + *(unsigned int *)(v79 + 4 * v73 + 4));
  uint64_t v82 = (unsigned __int16 *)((char *)v81 - *v81);
  if (*v82 >= 7u && (uint64_t v83 = v82[3]) != 0) {
    uint64_t v84 = (unsigned int *)((char *)v81 + v83 + *(unsigned int *)((char *)v81 + v83));
  }
  else {
    uint64_t v84 = 0;
  }
  uint64_t v85 = sub_A1FDE4(v84, i);
  int v86 = (unsigned __int16 *)((char *)v77 - *v77);
  if (*v86 < 7u)
  {
    int v88 = v72;
    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v87 = (unsigned int *)v86[3];
    int v88 = v72;
    if (v87) {
      uint64_t v87 = (unsigned int *)((char *)v87 + (void)v77 + *(unsigned int *)((char *)v87 + (void)v77));
    }
  }
  int v89 = *(_DWORD *)sub_A200AC(v87, *(_DWORD *)(v85 + 4) + ((unint64_t)(v74 - v75) >> 4));
  int v90 = sub_A1FBEC(v8, v73, v66, v80);
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 12 * v66;
  if (*(unsigned char *)(a2 + 96))
  {
    int v91 = a3 - v89;
    if (v90 < a3 - v89) {
      int v91 = v90;
    }
    *(_DWORD *)(a2 + 100) = v88;
    *(_DWORD *)(a2 + 104) = v91;
  }
  sub_A20748(a2, a4);
  unint64_t v92 = *(void *)(a2 + 64);
  if (v92 < *(void *)(a2 + 56)) {
    return 0;
  }
  return v92 < *(void *)(a2 + 72);
}

uint64_t sub_A2BC00(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = -1431655765 * ((v6 - v5) >> 2);
  if (v7) {
    LODWORD(v7) = *(_DWORD *)(v7 + 32);
  }
  if (v7 == v8) {
    return 0;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if (v8 < 0x41)
  {
    unint64_t v24 = *(void *)(a1 + 64);
    if (v24 >= v5 && v24 < v6) {
      goto LABEL_25;
    }
LABEL_24:
    sub_A20620((void *)a1);
    goto LABEL_25;
  }
  sub_A1ECE8(a1);
  if (*(unsigned char *)(a1 + 96)) {
    uint64_t v9 = (_DWORD *)(a1 + 104);
  }
  else {
    uint64_t v9 = *(_DWORD **)(a1 + 64);
  }
  uint64_t v10 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v11 = *(unsigned int *)((char *)&v10[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 1
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v10)
      + *v9;
  sub_A20620((void *)a1);
  int v12 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    char v13 = (_DWORD *)(a1 + 104);
  }
  else {
    char v13 = *(_DWORD **)(a1 + 64);
  }
  if (a2 <= v11)
  {
    sub_A1ECE8(a1);
    unint64_t v26 = *(void *)(a1 + 56);
    uint64_t v25 = *(_DWORD **)(a1 + 64);
    if ((unint64_t)v25 >= v26)
    {
LABEL_26:
      while ((unint64_t)v25 < *(void *)(a1 + 72))
      {
        if (*(unsigned char *)(a1 + 96)) {
          uint64_t v27 = (_DWORD *)(a1 + 104);
        }
        else {
          uint64_t v27 = v25;
        }
        int v28 = (unsigned int *)(*(void *)(a1 + 16)
                             + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
        if ((int)(*(unsigned int *)((char *)&v28[2 * v25[1]
                                                + 1
                                                + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                   + *v28)
                 + *v27) > a2)
          goto LABEL_35;
        sub_A2020C(a1, 0);
        unint64_t v26 = *(void *)(a1 + 56);
        uint64_t v25 = *(_DWORD **)(a1 + 64);
        if ((unint64_t)v25 < v26) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_34;
  }
  uint64_t v14 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v15 = *(unsigned int *)((char *)&v14[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 2
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v14)
      + *v13;
  if (v15 <= a2) {
    goto LABEL_24;
  }
  double v16 = (double)(a2 - v11) / (double)(v15 - v11);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = (v16
                     * (double)(-1431655765 * ((unint64_t)(*(void *)(a1 + 72) - v17) >> 2) - 1));
  *(void *)(a1 + 64) = v17 + 12 * v18;
  if (v12) {
    *(void *)(a1 + 100) = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v19 = *(unsigned int **)(a1 + 80);
  if (v19)
  {
    int v20 = sub_51D60((unsigned __int8 *)(*(void *)a1 + 3896));
    uint64_t v21 = *v19;
    if (v21 <= v18)
    {
      uint64_t v22 = *((void *)v19 + 1);
      if (*((void *)v19 + 2) + v21 - v22 > v18)
      {
        unsigned int v23 = *(unsigned __int8 *)(v22 + (v18 - v21));
        if ((v23 & 1) != 0 && ((v23 >> 1) & 1 & ~v20) == 0) {
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
  if ((unint64_t)v25 >= v26) {
    goto LABEL_26;
  }
LABEL_34:
  sub_A20748(a1, 0);
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
LABEL_35:
  if ((unint64_t)v25 >= v26)
  {
    while ((unint64_t)v25 < *(void *)(a1 + 72))
    {
      if (*(unsigned char *)(a1 + 96)) {
        uint64_t v29 = (_DWORD *)(a1 + 104);
      }
      else {
        uint64_t v29 = v25;
      }
      unint64_t v30 = (unsigned int *)(*(void *)(a1 + 16)
                           + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v30[2 * v25[1]
                                              + 1
                                              + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                 + *v30)
               + *v29) <= a2)
        return 1;
      sub_A20748(a1, 0);
      uint64_t v25 = *(_DWORD **)(a1 + 64);
      if ((unint64_t)v25 < *(void *)(a1 + 56)) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_A2BF38(unsigned int a1)
{
  if (a1 < 6) {
    return a1 + 1;
  }
  else {
    return 3;
  }
}

uint64_t sub_A2BF48(char a1)
{
  if ((a1 - 1) > 3u) {
    return 4;
  }
  else {
    return dword_20EB760[(char)(a1 - 1)];
  }
}

uint64_t sub_A2BF74(uint64_t a1, int a2, void *a3)
{
  if (a2 == 0x7FFFFFFF) {
    return 0;
  }
  unint64_t v4 = (void *)*a3;
  unint64_t v5 = (void *)a3[1];
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v30 = 0u;
  int v31 = 1065353216;
  if (v4 == v5)
  {
LABEL_22:
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    goto LABEL_23;
  }
  do
  {
    unint64_t v6 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(*v4, 32), 0, "stop");
    uint64_t v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 42));
    uint64_t v8 = *v7;
    uint64_t v10 = (char *)v7 + v8 + 4;
    size_t v9 = *(unsigned int *)((char *)v7 + v8);
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      size_t v27 = v9;
      int64_t v28 = v13 | 0x8000000000000000;
      __dst = p_dst;
LABEL_11:
      memcpy(p_dst, v10, v9);
      goto LABEL_12;
    }
    HIBYTE(v28) = *(unsigned int *)((char *)v7 + v8);
    p_dst = (void **)&__dst;
    if (v9) {
      goto LABEL_11;
    }
LABEL_12:
    *((unsigned char *)p_dst + v9) = 0;
    uint64_t v25 = (void **)&__dst;
    uint64_t v14 = sub_A2CB14((uint64_t)__p, (uint64_t)&__dst, (uint64_t)&unk_20F06E0, (long long **)&v25);
    ++*((_DWORD *)v14 + 10);
    if (SHIBYTE(v28) < 0) {
      operator delete(__dst);
    }
    ++v4;
  }
  while (v4 != v5);
  if (!v30[1]) {
    goto LABEL_22;
  }
  int v15 = (char *)v30[0];
  if (v30[0])
  {
    double v16 = *(char **)v30[0];
    if (*(void *)v30[0])
    {
      do
      {
        if (*((_DWORD *)v15 + 10) < *((_DWORD *)v16 + 10)) {
          int v15 = v16;
        }
        double v16 = *(char **)v16;
      }
      while (v16);
    }
  }
  if (v15[39] < 0)
  {
    sub_4200(&v35, *((void **)v15 + 2), *((void *)v15 + 3));
  }
  else
  {
    long long v35 = *((_OWORD *)v15 + 1);
    uint64_t v36 = *((void *)v15 + 4);
  }
LABEL_23:
  uint64_t v17 = (void **)v30[0];
  if (v30[0])
  {
    do
    {
      unsigned int v23 = (void **)*v17;
      if (*((char *)v17 + 39) < 0) {
        operator delete(v17[2]);
      }
      operator delete(v17);
      uint64_t v17 = v23;
    }
    while (v23);
  }
  unint64_t v18 = __p[0];
  __p[0] = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = HIBYTE(v36);
  if (v36 < 0) {
    uint64_t v19 = *((void *)&v35 + 1);
  }
  if (v19)
  {
    sub_26A18((uint64_t)v34, (const char *)&v35);
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)__p);
      int v20 = sub_188FC78(__p, (uint64_t)"Determined time zone: ", 22);
      sub_26CC0(v34, &__dst);
      if (v28 >= 0) {
        uint64_t v21 = (void **)&__dst;
      }
      else {
        uint64_t v21 = __dst;
      }
      if (v28 >= 0) {
        uint64_t v22 = HIBYTE(v28);
      }
      else {
        uint64_t v22 = v27;
      }
      sub_188FC78(v20, (uint64_t)v21, v22);
      if (SHIBYTE(v28) < 0) {
        operator delete(__dst);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__dst, 2u);
      if (SHIBYTE(v28) < 0) {
        operator delete(__dst);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_398020(*(void *)(a1 + 4072) + 24, 0);
    sub_46FC((uint64_t)&__dst);
  }
  if (v36 < 0) {
    operator delete((void *)v35);
  }
  return 0;
}

void sub_A2C7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_A2C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_4814(&a29);
  sub_4814(&a17);
  sub_4814(&a23);
  sub_26C4C(v29 - 128);
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A2C93C(uint64_t a1, int a2)
{
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  uint64_t v24 = 0;
  sub_A19FA8((uint64_t)&v16, a1, 0x1FFFFFFFEuLL);
  unint64_t v4 = v17;
  if (v21) {
    unint64_t v5 = v20;
  }
  else {
    unint64_t v5 = (unint64_t *)&v18;
  }
  unint64_t v6 = *v5;
  while ((unint64_t)v4 < v6)
  {
    uint64_t v15 = __ROR8__(*v4, 32);
    sub_29603C(&v22, &v15);
    unint64_t v6 = (unint64_t)v18;
    unint64_t v4 = (void *)((char *)v17 + 12);
    uint64_t v17 = v4;
    if (v4 == v18)
    {
      unint64_t v4 = v19;
      unint64_t v8 = v20[0];
      uint64_t v17 = v19;
      int v7 = 1;
      unsigned __int8 v21 = 1;
      if (!*(unsigned char *)(v16 + 16)) {
        goto LABEL_7;
      }
    }
    else
    {
      int v7 = v21;
      unint64_t v8 = v20[0];
      if (!*(unsigned char *)(v16 + 16)) {
        goto LABEL_7;
      }
    }
    if (v7) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = (unint64_t)v18;
    }
    if ((unint64_t)v4 < v9)
    {
      while (1)
      {
        unint64_t v11 = __ROR8__(*v4, 32);
        if (HIDWORD(v11) == 1 && (v11 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v16 + 4120)))
        {
          LOBYTE(v7) = v21;
          unint64_t v4 = v17;
          unint64_t v6 = (unint64_t)v18;
          break;
        }
        unint64_t v6 = (unint64_t)v18;
        unint64_t v4 = (void *)((char *)v17 + 12);
        uint64_t v17 = v4;
        if (v4 == v18)
        {
          unint64_t v4 = v19;
          uint64_t v17 = v19;
          LOBYTE(v7) = 1;
          unsigned __int8 v21 = 1;
          if ((unint64_t)v19 >= v20[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v7) = v21;
          if (v21) {
            uint64_t v10 = v20;
          }
          else {
            uint64_t v10 = &v18;
          }
          if ((unint64_t)v4 >= *v10) {
            break;
          }
        }
      }
      unint64_t v8 = v20[0];
    }
LABEL_7:
    if ((_BYTE)v7) {
      unint64_t v6 = v8;
    }
  }
  uint64_t v13 = sub_A2BF74(a1, a2, &v22);
  if (v22)
  {
    unsigned int v23 = v22;
    operator delete(v22);
  }
  return v13;
}

void sub_A2CAEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_A2CB14(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  size_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)size_t v27 = 0;
  *((_DWORD *)v15 + 10) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    char v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        char v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        char v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      char v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  *unint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    char v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_A2CF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A2CF40(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A2D470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_A2D4C4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(void *)(a1 + 8) == 7)
    {
      uint64_t v3 = *(int **)a1;
      if (**(_DWORD **)a1 == 1635151465 && *(_DWORD *)(*(void *)a1 + 3) == 1684630625) {
        return -1;
      }
LABEL_14:
      int v5 = *v3;
      int v6 = *(int *)((char *)v3 + 3);
      if (v5 != 1096175177 || v6 != 1145654337) {
        goto LABEL_18;
      }
      return -1;
    }
  }
  else if (v1 == 7)
  {
    BOOL v2 = *(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625;
    uint64_t v3 = (int *)a1;
    if (v2) {
      return -1;
    }
    goto LABEL_14;
  }
LABEL_18:
  sub_67170(a1, &v10);
  unint64_t result = sub_A38998(&__p, v10);
  unint64_t v9 = result;
  if (v12 < 0)
  {
    operator delete(__p);
    return v9;
  }
  return result;
}

void sub_A2D5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2D5F4(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(void *)(a1 + 8) == 7)
    {
      uint64_t v3 = *(int **)a1;
      if (**(_DWORD **)a1 == 1635151465 && *(_DWORD *)(*(void *)a1 + 3) == 1684630625) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
LABEL_14:
      int v5 = *v3;
      int v6 = *(int *)((char *)v3 + 3);
      if (v5 != 1096175177 || v6 != 1145654337) {
        goto LABEL_18;
      }
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else if (v1 == 7)
  {
    BOOL v2 = *(_DWORD *)a1 == 1635151465 && *(_DWORD *)(a1 + 3) == 1684630625;
    uint64_t v3 = (int *)a1;
    if (v2) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    goto LABEL_14;
  }
LABEL_18:
  sub_67170(a1, &v10);
  uint64_t result = sub_5E1B4((unsigned __int16 *)&__p, v10);
  uint64_t v9 = result;
  if (v12 < 0)
  {
    operator delete(__p);
    return v9;
  }
  return result;
}

void sub_A2D708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2D724(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D028;
  sub_A2CF40(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  uint64_t v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_A395D4(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A2DB10(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A2DB70()
{
  BOOL v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2DB58);
}

void sub_A2DB94()
{
  BOOL v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2DB60);
}

void sub_A2DBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA2DB68);
}

void *sub_A2DC14(void *a1)
{
  BOOL v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3) {
    free(v3);
  }
  return a1;
}

uint64_t sub_A2DC58@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A2DE78(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A2DCDC(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A2DCDC(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A3973C(a1);
  sub_A39A24(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A39E0C(a1, v3);
        sub_A3B104(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A2DE78(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A4D6D4(a1);
  sub_A4D9B8(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A4DDA0(a1, v3);
        sub_A4F11C(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A2E014(std::string *a1@<X8>)
{
  sub_A2E0AC(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A2E090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2E0AC(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 0;
  __s[0] = 0;
  uint64_t v2 = std::string::append(&v21, __s, 0);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 0;
  v17[0] = 0;
  uint64_t v4 = std::string::append(&v22, v17, 0);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  v15[0] = 0;
  uint64_t v6 = std::string::append(&v23, v15, 0);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 0;
  v13[0] = 0;
  unint64_t v8 = std::string::append(&v24, v13, 0);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 0);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A2E2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 48));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 57) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 57) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 80));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 89) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 89) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 112));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2E408(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A2E938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2E98C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D058;
  sub_A2E408(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_A570FC(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A2ED78(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A2EDD8()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2EDC0);
}

void sub_A2EDFC()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2EDC8);
}

void sub_A2EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA2EDD0);
}

uint64_t sub_A2EE80@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A2F0A0(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A2EF04(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A2EF04(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A57264(a1);
  sub_A5754C(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A57934(a1, v3);
        sub_A58C2C(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A2F0A0(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A6105C(a1);
  sub_A61340(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A61728(a1, v3);
        sub_A62AA4(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A2F23C(std::string *a1@<X8>)
{
  sub_A2F2D4(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A2F2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2F2D4(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 0;
  v17[0] = 0;
  uint64_t v4 = std::string::append(&v22, v17, 0);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  v15[0] = 0;
  uint64_t v6 = std::string::append(&v23, v15, 0);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 0;
  v13[0] = 0;
  unint64_t v8 = std::string::append(&v24, v13, 0);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 0);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A2F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 48));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 57) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 57) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 80));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 89) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 89) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 112));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2F634(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A2FB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2FBB8(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D088;
  sub_A2F634(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_A6A478(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A2FFA4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A30004()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2FFECLL);
}

void sub_A30028()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA2FFF4);
}

void sub_A3004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA2FFFCLL);
}

uint64_t sub_A300AC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A302CC(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A30130(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A30130(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A6A5E0(a1);
  sub_A6A8C8(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A6ACB0(a1, v3);
        sub_A6BFA8(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A302CC(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A753A0(a1);
  sub_A75684(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A75A6C(a1, v3);
        sub_A76DE8(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A30468(std::string *a1@<X8>)
{
  sub_A30500(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A304E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A30500(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 1;
  strcpy(v17, "r");
  uint64_t v4 = std::string::append(&v22, v17, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  v15[0] = 0;
  uint64_t v6 = std::string::append(&v23, v15, 0);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 0;
  v13[0] = 0;
  unint64_t v8 = std::string::append(&v24, v13, 0);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 0);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A30734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A30870(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A30DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A30DF4(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D0B8;
  sub_A30870(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_A7EFB4(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A311E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A31240()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA31228);
}

void sub_A31264()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA31230);
}

void sub_A31288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA31238);
}

uint64_t sub_A312E8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A31508(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A3136C(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A3136C(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A7F11C(a1);
  sub_A7F404(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A7F7EC(a1, v3);
        sub_A80AE4(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A31508(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A89480(a1);
  sub_A89764(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A89B4C(a1, v3);
        sub_A8AEC8(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A316A4(std::string *a1@<X8>)
{
  sub_A3173C(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A31720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A3173C(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 1;
  strcpy(v17, "r");
  uint64_t v4 = std::string::append(&v22, v17, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  v15[0] = 0;
  uint64_t v6 = std::string::append(&v23, v15, 0);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 1;
  strcpy(v13, "t");
  unint64_t v8 = std::string::append(&v24, v13, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 0);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A31978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A31AB4(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A31FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A32038(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D0E8;
  sub_A31AB4(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_A92774(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A32424(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A32484()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA3246CLL);
}

void sub_A324A8()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA32474);
}

void sub_A324CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA3247CLL);
}

uint64_t sub_A3252C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A3274C(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A325B0(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A325B0(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A928DC(a1);
  sub_A92BC4(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A92FAC(a1, v3);
        sub_A942A4(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A3274C(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_A9C330(a1);
  sub_A9C614(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_A9C9FC(a1, v3);
        sub_A9DD78(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A328E8(std::string *a1@<X8>)
{
  sub_A32980(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A32964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A32980(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 1;
  strcpy(v17, "r");
  uint64_t v4 = std::string::append(&v22, v17, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 0;
  v15[0] = 0;
  uint64_t v6 = std::string::append(&v23, v15, 0);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 1;
  strcpy(v13, "t");
  unint64_t v8 = std::string::append(&v24, v13, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 1;
  LOWORD(__p) = 109;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 1uLL);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A32BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A32CFC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A3322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A33280(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D118;
  sub_A32CFC(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_AA59B0(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A3366C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A336CC()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA336B4);
}

void sub_A336F0()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA336BCLL);
}

void sub_A33714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA336C4);
}

uint64_t sub_A33774@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A33994(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A337F8(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A337F8(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_AA5B18(a1);
  sub_AA5E00(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_AA61E8(a1, v3);
        sub_AA74E0(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A33994(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_AAFA24(a1);
  sub_AAFD08(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_AB00F0(a1, v3);
        sub_AB146C(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A33B30(std::string *a1@<X8>)
{
  sub_A33BC8(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A33BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A33BC8(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 1;
  strcpy(v17, "r");
  uint64_t v4 = std::string::append(&v22, v17, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 1;
  strcpy(v15, "f");
  uint64_t v6 = std::string::append(&v23, v15, 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 1;
  strcpy(v13, "t");
  unint64_t v8 = std::string::append(&v24, v13, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 0;
  LOBYTE(__p) = 0;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 0);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A33E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A33F44(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A34474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A344C8(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D148;
  sub_A33F44(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v30 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  *(void *)(a1 + 372) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 360) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 16;
  *(void *)(a1 + 352) = 6;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 369) = 1;
  *(_OWORD *)(a1 + 400) = xmmword_20EB770;
  *(_DWORD *)(a1 + 416) = -1;
  BOOL v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 424) = v11;
  uint64_t v12 = *(void *)(a1 + 400);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 408);
      v11[2] = *(_DWORD *)(a1 + 416);
      *(void *)BOOL v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  *(void *)(a1 + 492) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 480) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 516) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 489) = 1;
  *(_OWORD *)(a1 + 520) = xmmword_20EB770;
  *(_DWORD *)(a1 + 536) = -1;
  uint64_t v15 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 544) = v15;
  uint64_t v16 = *(void *)(a1 + 520);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      uint64_t v18 = *(void *)(a1 + 528);
      v15[2] = *(_DWORD *)(a1 + 536);
      *(void *)uint64_t v15 = v18;
      v15 += 3;
      v17 -= 12;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 584) = -1;
  uint64_t v19 = (char *)operator new(0x40uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_243D350;
  *(_OWORD *)(v19 + 24) = xmmword_20E1750;
  *((void *)v19 + 6) = 0;
  *((void *)v19 + 7) = 0;
  *((void *)v19 + 5) = 0;
  *(void *)(a1 + 592) = v19 + 24;
  *(void *)(a1 + 600) = v19;
  uint64_t v20 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  sub_A39318(a1 + 608, v20, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v27, &v25);
  std::string v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_AB8FF0(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  return a1;
}

void sub_A348B4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_9FD504(v6);
  sub_14A84(v5);
  sub_A2DC14(v3);
  sub_A2DC14(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A34914()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 560) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 544);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA348FCLL);
}

void sub_A34938()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 440) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(v0 + 424);
  if (v3) {
    free(v3);
  }
  JUMPOUT(0xA34904);
}

void sub_A3495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string v24 = *v22;
  if (*v22)
  {
    uint64_t v25 = *(void *)(v21 + 144);
    unint64_t v26 = *v22;
    if ((void *)v25 != v24)
    {
      do
      {
        v25 -= 296;
        sub_9F5E28(v21 + 152, v25);
      }
      while ((void *)v25 != v24);
      unint64_t v26 = *v22;
    }
    *(void *)(v21 + 144) = v24;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA3490CLL);
}

uint64_t sub_A349BC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A34BDC(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A34A40(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

double sub_A34A40(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_AB9158(a1);
  sub_AB9440(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_AB9828(a1, v3);
        sub_ABAB20(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

double sub_A34BDC(uint64_t a1)
{
  sub_725D0((uint64_t)v15);
  sub_AC2E50(a1);
  sub_AC3134(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 2 * v2 + 2;
    do
    {
      uint64_t v6 = *(unint64_t **)(a1 + 592);
      unint64_t v7 = *(unsigned int *)(a1 + 584);
      if (*v6 <= v7)
      {
        *uint64_t v6 = v7 + 1;
        unint64_t v8 = v6[2];
        unint64_t v9 = v6[1] * (v7 + 1);
        unint64_t v10 = (uint64_t)(v6[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v6[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v6 + 2), v9 - v10);
        }
      }
      if (*(_DWORD *)(v6[2] + 4 * ((v4 & 0xFFFFFFFE) + v6[1] * v7) + 4) != 0x7FFFFFFF)
      {
        int v11 = sub_AC351C(a1, v3);
        sub_AC4898(a1, v3, v11);
      }
      v4 += 2;
      ++v3;
    }
    while (v5 != v4);
  }
  double v12 = sub_72688((uint64_t)v15);
  double v13 = (double)(unint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384));
  *(double *)(a1 + 184) = v12;
  double result = (double)(unint64_t)(*(void *)(a1 + 512) - *(void *)(a1 + 504));
  *(double *)(a1 + 288) = v13;
  *(double *)(a1 + 296) = result;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 520) + *(void *)(a1 + 400))
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 1952)
                         + *(void *)(a1 + 1960)
                         + *(void *)(a1 + 1968)
                         + 1976;
  return result;
}

void sub_A34D78(std::string *a1@<X8>)
{
  sub_A34E10(&v3);
  uint64_t v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A34DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A34E10(std::string *a1@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 116;
  char v20 = 1;
  strcpy(__s, "w");
  uint64_t v2 = std::string::append(&v21, __s, 1uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v18 = 1;
  strcpy(v17, "r");
  uint64_t v4 = std::string::append(&v22, v17, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v16 = 1;
  strcpy(v15, "f");
  uint64_t v6 = std::string::append(&v23, v15, 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 1;
  strcpy(v13, "t");
  unint64_t v8 = std::string::append(&v24, v13, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v12 = 1;
  LOWORD(__p) = 109;
  unint64_t v10 = std::string::append(&v25, (const std::string::value_type *)&__p, 1uLL);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v12 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)v13);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)v15);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)v17);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(*(void **)__s);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_A35058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(v50 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 64));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v50 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a21);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v50 - 128));
  if ((a32 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a27);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
LABEL_21:
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A35194(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A356C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A35718(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D178;
  sub_A35194(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v22 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  sub_ACF97C(a1 + 344);
  sub_ACF97C(a1 + 464);
  *(_DWORD *)(a1 + 584) = -1;
  BOOL v11 = operator new(0x78uLL);
  v11[1] = 0;
  v11[2] = 0;
  *BOOL v11 = off_243D3A0;
  *(void *)(a1 + 592) = sub_ACC888((uint64_t)(v11 + 3));
  *(void *)(a1 + 600) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  sub_ACDFB0(a1 + 608, v12, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v19, &v17);
  BOOL v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_ACE270(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  return a1;
}

void sub_A359B0(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_9FD504(v6);
  sub_14A84(v4);
  sub_A35A94(v3);
  sub_A35A94(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A35A28()
{
}

void sub_A35A30()
{
}

void sub_A35A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  char v22 = *v20;
  if (*v20)
  {
    uint64_t v23 = *(void *)(v19 + 144);
    std::string v24 = *v20;
    if ((void *)v23 != v22)
    {
      do
      {
        v23 -= 296;
        sub_9F5E28(v19 + 152, v23);
      }
      while ((void *)v23 != v22);
      std::string v24 = *v20;
    }
    *(void *)(v19 + 144) = v22;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA35A20);
}

void *sub_A35A94(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = a1[7];
    uint64_t v5 = (void *)a1[6];
    if (v4 != v3)
    {
      uint64_t v6 = a1[7];
      do
      {
        BOOL v8 = *(void **)(v6 - 16);
        v6 -= 16;
        uint64_t v7 = v8;
        if (v8)
        {
          free(v7);
          *(void *)(v4 - 16) = 0;
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[6];
    }
    a1[7] = v3;
    free(v5);
  }
  return a1;
}

uint64_t sub_A35B20@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A35CF4(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A35BA4(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

void sub_A35BA4(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_AD0AF4(a1);
  sub_AD0E9C(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_AD1284(a1, v3);
        sub_AD24DC(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A35CF4(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_AE7874(a1);
  sub_AE7C18(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_AE8000(a1, v3);
        sub_AE92F4(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A35E44(std::string *a1@<X8>)
{
  sub_A3173C(&v3);
  int v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A35EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A35EDC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A3640C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A36460(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D1A8;
  sub_A35EDC(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v22 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  sub_ACF97C(a1 + 344);
  sub_ACF97C(a1 + 464);
  *(_DWORD *)(a1 + 584) = -1;
  BOOL v11 = operator new(0x78uLL);
  v11[1] = 0;
  v11[2] = 0;
  *BOOL v11 = off_243D3A0;
  *(void *)(a1 + 592) = sub_ACC888((uint64_t)(v11 + 3));
  *(void *)(a1 + 600) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  sub_ACDFB0(a1 + 608, v12, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v19, &v17);
  BOOL v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_AF2A5C(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  return a1;
}

void sub_A366F8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_9FD504(v6);
  sub_14A84(v4);
  sub_A35A94(v3);
  sub_A35A94(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A36770()
{
}

void sub_A36778()
{
}

void sub_A36780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  char v22 = *v20;
  if (*v20)
  {
    uint64_t v23 = *(void *)(v19 + 144);
    std::string v24 = *v20;
    if ((void *)v23 != v22)
    {
      do
      {
        v23 -= 296;
        sub_9F5E28(v19 + 152, v23);
      }
      while ((void *)v23 != v22);
      std::string v24 = *v20;
    }
    *(void *)(v19 + 144) = v22;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA36768);
}

uint64_t sub_A367E0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A369B4(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A36864(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

void sub_A36864(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_AF3B78(a1);
  sub_AF3F20(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_AF4308(a1, v3);
        sub_AF5560(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A369B4(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_AFEF40(a1);
  sub_AFF2E4(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_AFF6CC(a1, v3);
        sub_B009C0(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A36B04(std::string *a1@<X8>)
{
  sub_A32980(&v3);
  int v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A36B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A36B9C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A370CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A37120(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D1D8;
  sub_A36B9C(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v22 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  sub_ACF97C(a1 + 344);
  sub_ACF97C(a1 + 464);
  *(_DWORD *)(a1 + 584) = -1;
  BOOL v11 = operator new(0x78uLL);
  v11[1] = 0;
  v11[2] = 0;
  *BOOL v11 = off_243D3A0;
  *(void *)(a1 + 592) = sub_ACC888((uint64_t)(v11 + 3));
  *(void *)(a1 + 600) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  sub_ACDFB0(a1 + 608, v12, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v19, &v17);
  BOOL v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_B082A4(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  return a1;
}

void sub_A373B8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_9FD504(v6);
  sub_14A84(v4);
  sub_A35A94(v3);
  sub_A35A94(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A37430()
{
}

void sub_A37438()
{
}

void sub_A37440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  char v22 = *v20;
  if (*v20)
  {
    uint64_t v23 = *(void *)(v19 + 144);
    std::string v24 = *v20;
    if ((void *)v23 != v22)
    {
      do
      {
        v23 -= 296;
        sub_9F5E28(v19 + 152, v23);
      }
      while ((void *)v23 != v22);
      std::string v24 = *v20;
    }
    *(void *)(v19 + 144) = v22;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA37428);
}

uint64_t sub_A374A0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A37674(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A37524(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

void sub_A37524(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_B093C0(a1);
  sub_B09768(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_B09B50(a1, v3);
        sub_B0ADA8(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A37674(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_B14638(a1);
  sub_B149DC(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_B14DC4(a1, v3);
        sub_B160B8(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A377C4(std::string *a1@<X8>)
{
  sub_A33BC8(&v3);
  int v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A37840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A3785C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "deparr_slack_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "trip_slack");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 28) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "deparr_slack_with_avoid_transit_types_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "trip_slack_with_avoid_transit_types");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_any_intermediate_number_of_trips");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_time_shift_tightening");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "tightening_min_journey_duration_min");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_max_time_shift_min");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "tightening_resolution_min");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "tightening_improvement_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

void sub_A37D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A37DE0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243D208;
  sub_A3785C(a1 + 8, a3);
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 92) = v5;
  *(void *)(a1 + 112) = 10;
  BOOL v6 = sub_C25A20(a2 + 3896);
  uint64_t v7 = 32;
  if (v6) {
    uint64_t v7 = 40;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + v7);
  BOOL v8 = sub_C25A20(*(void *)(a1 + 80) + 3896);
  uint64_t v9 = 36;
  if (v8) {
    uint64_t v9 = 44;
  }
  int v10 = *(_DWORD *)(a1 + v9);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  char v22 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 160), (long long *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  sub_ACF97C(a1 + 344);
  sub_ACF97C(a1 + 464);
  *(_DWORD *)(a1 + 584) = -1;
  BOOL v11 = operator new(0x78uLL);
  v11[1] = 0;
  v11[2] = 0;
  *BOOL v11 = off_243D3A0;
  *(void *)(a1 + 592) = sub_ACC888((uint64_t)(v11 + 3));
  *(void *)(a1 + 600) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  sub_ACDFB0(a1 + 608, v12, a1 + 344, a1 + 464, __p, (void *)(a1 + 592), &v19, &v17);
  BOOL v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_B1D84C(a1 + 1336, *(void *)(a1 + 80), a1 + 344, a1 + 464, (void *)(a1 + 760));
  *(void *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  return a1;
}

void sub_A38078(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_9FD504(v6);
  sub_14A84(v4);
  sub_A35A94(v3);
  sub_A35A94(v2);
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_A380F0()
{
}

void sub_A380F8()
{
}

void sub_A38100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  char v22 = *v20;
  if (*v20)
  {
    uint64_t v23 = *(void *)(v19 + 144);
    std::string v24 = *v20;
    if ((void *)v23 != v22)
    {
      do
      {
        v23 -= 296;
        sub_9F5E28(v19 + 152, v23);
      }
      while ((void *)v23 != v22);
      std::string v24 = *v20;
    }
    *(void *)(v19 + 144) = v22;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xA380E8);
}

uint64_t sub_A38160@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a2;
  *(_OWORD *)(a1 + 104) = a2[1];
  *(_OWORD *)(a1 + 88) = v5;
  if (*(unsigned char *)a2)
  {
    sub_A38334(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  else
  {
    sub_A381E4(a1);
    uint64_t v6 = a1 + 128;
    uint64_t v7 = a3;
  }
  return sub_9F6588(v7, v6);
}

void sub_A381E4(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_B1E968(a1);
  sub_B1ED10(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_B1F0F8(a1, v3);
        sub_B20350(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A38334(uint64_t a1)
{
  sub_725D0((uint64_t)v12);
  sub_B29F3C(a1);
  sub_B2A2E0(a1);
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != -1)
  {
    int v3 = 0;
    int v4 = v2 + 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = *(_DWORD **)(a1 + 592);
      int v13 = (*(_DWORD *)(a1 + 584) << *v6) | v5;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)&v13) + 4) != 0x7FFFFFFF)
      {
        int v7 = sub_B2A6C8(a1, v3);
        sub_B2B9BC(a1, v3, v7);
      }
      ++v3;
      v5 += 2;
    }
    while (v4 != v3);
  }
  double v8 = sub_72688((uint64_t)v12);
  uint64_t v9 = *(void *)(a1 + 416);
  double v10 = (double)(unint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 384));
  double v11 = (double)(unint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 504));
  *(double *)(a1 + 184) = v8;
  *(double *)(a1 + 288) = v10;
  *(double *)(a1 + 296) = v11;
  *(void *)(a1 + 304) += *(void *)(a1 + 448)
                         - *(void *)(a1 + 432)
                         + *(void *)(a1 + 568)
                         + 12 * (*(void *)(a1 + 536) + v9)
                         - *(void *)(a1 + 552)
                         + *(void *)(a1 + 2016)
                         + *(void *)(a1 + 2024)
                         + *(void *)(a1 + 2032)
                         + 2040;
}

void sub_A38484(std::string *a1@<X8>)
{
  sub_A34E10(&v3);
  int v2 = std::string::insert(&v3, 0, "bmcspa-");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_A38500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A38520(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A3855C(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A38598(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A385D4(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A38610(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A3864C(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A38688(uint64_t a1)
{
  sub_A23ED0(a1);

  operator delete();
}

void sub_A386C4(uint64_t a1)
{
  sub_A24014(a1);

  operator delete();
}

void sub_A38700(uint64_t a1)
{
  sub_A24014(a1);

  operator delete();
}

void sub_A3873C(uint64_t a1)
{
  sub_A24014(a1);

  operator delete();
}

void sub_A38778(uint64_t a1)
{
  sub_A24014(a1);

  operator delete();
}

void *sub_A387B0(void *a1)
{
  int v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::string v3 = (void *)a1[7];
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)a1[4];
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_A387FC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::string v3 = *(void **)(a1 + 24);
  if (v3) {
    operator delete(v3);
  }
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_A3884C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_A3888C(void *a1)
{
  int v2 = (void *)a1[14];
  if (v2) {
    operator delete(v2);
  }
  std::string v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = a1[7];
    uint64_t v6 = (void *)a1[6];
    if (v5 != v4)
    {
      uint64_t v7 = a1[7];
      do
      {
        uint64_t v9 = *(void **)(v7 - 16);
        v7 -= 16;
        double v8 = v9;
        if (v9)
        {
          free(v8);
          *(void *)(v5 - 16) = 0;
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = (void *)a1[6];
    }
    a1[7] = v4;
    free(v6);
  }
  return a1;
}

uint64_t sub_A38920(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 56);
      do
      {
        uint64_t v7 = *(void **)(v5 - 16);
        v5 -= 16;
        uint64_t v6 = v7;
        if (v7)
        {
          free(v6);
          *(void *)(v3 - 16) = 0;
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    free(v4);
  }
  return a1;
}

unint64_t sub_A38998(void *a1, double a2)
{
  double v3 = a2;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)a1 + 23);
    if (v4 != 3)
    {
      if (v4 != 4)
      {
        if (v4 != 6) {
          goto LABEL_97;
        }
        if (*(_DWORD *)a1 != 1954112095 || *((_WORD *)a1 + 2) != 29541) {
          goto LABEL_97;
        }
LABEL_58:
        if (a2 >= 0.0)
        {
          if (a2 >= 4.50359963e15) {
            goto LABEL_78;
          }
          uint64_t v16 = (uint64_t)(a2 + a2) + 1;
        }
        else
        {
          if (a2 <= -4.50359963e15) {
            goto LABEL_78;
          }
          uint64_t v16 = (uint64_t)(a2 + a2);
          if (v16 >= 1) {
            --v16;
          }
        }
        a2 = (double)(v16 >> 1);
LABEL_78:
        if (a2 < 1.84467441e19)
        {
          if (v3 >= 0.0)
          {
            if (v3 < 4.50359963e15)
            {
              uint64_t v19 = (uint64_t)(v3 + v3) + 1;
              return (unint64_t)(double)(v19 >> 1);
            }
          }
          else if (v3 > -4.50359963e15)
          {
            uint64_t v19 = (uint64_t)(v3 + v3);
            if (v19 >= 1) {
              --v19;
            }
            return (unint64_t)(double)(v19 >> 1);
          }
          return (unint64_t)v3;
        }
        return -2;
      }
      if (*(_DWORD *)a1 == 1114196831)
      {
LABEL_38:
        double v11 = a2 * 1024.0;
        if (v3 * 1024.0 < 0.0)
        {
LABEL_39:
          double v12 = v11;
          if (v11 <= -4.50359963e15) {
            goto LABEL_52;
          }
          uint64_t v13 = (uint64_t)(v11 + v11);
          if (v13 >= 1) {
            --v13;
          }
          goto LABEL_51;
        }
LABEL_49:
        double v12 = v11;
        if (v11 >= 4.50359963e15) {
          goto LABEL_52;
        }
        uint64_t v13 = (uint64_t)(v11 + v11) + 1;
LABEL_51:
        double v12 = (double)(v13 >> 1);
LABEL_52:
        if (v12 >= 1.84467441e19) {
          return -2;
        }
        if (v11 >= 0.0)
        {
          if (v11 < 4.50359963e15)
          {
            uint64_t v15 = (uint64_t)(v11 + v11) + 1;
            return (unint64_t)(double)(v15 >> 1);
          }
        }
        else if (v11 > -4.50359963e15)
        {
          uint64_t v15 = (uint64_t)(v11 + v11);
          if (v15 >= 1) {
            --v15;
          }
          return (unint64_t)(double)(v15 >> 1);
        }
        return (unint64_t)v11;
      }
      if (*(_DWORD *)a1 == 1114197343)
      {
LABEL_90:
        double v11 = a2 * 1048576.0;
        if (v3 * 1048576.0 < 0.0) {
          goto LABEL_39;
        }
        goto LABEL_49;
      }
      goto LABEL_92;
    }
    if (*(_WORD *)a1 != 19295 || *((unsigned char *)a1 + 2) != 66)
    {
      if (*(_WORD *)a1 != 19807 || *((unsigned char *)a1 + 2) != 66)
      {
LABEL_92:
        double v10 = (unsigned __int16 *)a1;
        if (v4 != 3) {
          goto LABEL_97;
        }
        goto LABEL_93;
      }
LABEL_73:
      double v11 = a2 * 1000000.0;
      if (v3 * 1000000.0 < 0.0) {
        goto LABEL_39;
      }
      goto LABEL_49;
    }
LABEL_48:
    double v11 = a2 * 1000.0;
    if (v3 * 1000.0 < 0.0) {
      goto LABEL_39;
    }
    goto LABEL_49;
  }
  uint64_t v6 = a1[1];
  if (v6 == 3)
  {
    if (*(_WORD *)*a1 == 19295 && *(unsigned char *)(*a1 + 2) == 66) {
      goto LABEL_48;
    }
    uint64_t v6 = a1[1];
  }
  else if (v6 == 6 && *(_DWORD *)*a1 == 1954112095 && *(_WORD *)(*a1 + 4) == 29541)
  {
    goto LABEL_58;
  }
  if (v6 == 4)
  {
    if (*(_DWORD *)*a1 == 1114196831) {
      goto LABEL_38;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 3)
  {
    if (*(_WORD *)*a1 == 19807 && *(unsigned char *)(*a1 + 2) == 66) {
      goto LABEL_73;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 == 4)
  {
    if (*(_DWORD *)*a1 == 1114197343) {
      goto LABEL_90;
    }
    uint64_t v6 = a1[1];
  }
  if (v6 != 3) {
    goto LABEL_97;
  }
  double v10 = (unsigned __int16 *)*a1;
LABEL_93:
  int v20 = *v10;
  int v21 = *((unsigned __int8 *)v10 + 2);
  if (v20 != 18271 || v21 != 66)
  {
LABEL_97:
    if (sub_A2328C(a1, "_GiB"))
    {
      return sub_A3900C(v3);
    }
    else if (sub_A2328C(a1, "_TB"))
    {
      return sub_A390E0(v3);
    }
    else
    {
      if (!sub_A2328C(a1, "_TiB"))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        std::string v24 = std::string::append(&v27, "\".");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v24->__r_.__value_.__r.__words[2];
        long long v28 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        unint64_t v26 = (void *)sub_2F404((uint64_t)exception, &v28);
      }
      return sub_A391B4(v3);
    }
  }

  return sub_A38F34(a2);
}

void sub_A38EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_A38F34(double a1)
{
  double v1 = a1 * 1000000000.0;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 1.84467441e19) {
    return -2;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (unint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (unint64_t)(double)(v4 >> 1);
  }
  return (unint64_t)v1;
}

unint64_t sub_A3900C(double a1)
{
  double v1 = a1 * 1073741820.0;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 1.84467441e19) {
    return -2;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (unint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (unint64_t)(double)(v4 >> 1);
  }
  return (unint64_t)v1;
}

unint64_t sub_A390E0(double a1)
{
  double v1 = a1 * 1.0e12;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 1.84467441e19) {
    return -2;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (unint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (unint64_t)(double)(v4 >> 1);
  }
  return (unint64_t)v1;
}

unint64_t sub_A391B4(double a1)
{
  double v1 = a1 * 1.09951163e12;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 1.84467441e19) {
    return -2;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (unint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (unint64_t)(double)(v4 >> 1);
  }
  return (unint64_t)v1;
}

void sub_A39288(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243D350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_A392A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243D350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_A392FC(uint64_t a1)
{
  double v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_A39318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 8;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 16843009;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = *a6;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a7;
  uint64_t v12 = a7[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a8;
  uint64_t v13 = a8[1];
  *(void *)(a1 + 104) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)&long long v14 = 0x8000000080000000;
  *((void *)&v14 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 116) = v14;
  *(void *)(a1 + 136) = 10;
  *(_DWORD *)(a1 + 144) = -1;
  if (*a5)
  {
    *(void *)(a1 + 152) = *a5;
    uint64_t v15 = a5[1];
    *(void *)(a1 + 160) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = (char *)operator new(0x40uLL);
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(_OWORD *)(v16 + 24) = xmmword_20E1750;
    *(void *)uint64_t v16 = off_243D350;
    *((void *)v16 + 6) = 0;
    *((void *)v16 + 7) = 0;
    *((void *)v16 + 5) = 0;
    *(void *)(a1 + 152) = v16 + 24;
    *(void *)(a1 + 160) = v16;
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 432) = -1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  sub_BD5668(a1 + 464, a2);
  *(unsigned char *)(a1 + 568) = *a5 == 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 576), &__p);
  if (v19 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A39518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_14A84(v17);
  sub_14A84(v16);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_A395D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A396E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_A3973C(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  double v2 = (void **)(a1 + 136);
  uint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    void *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    uint64_t v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A399F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A39A24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  long long v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  uint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    uint64_t v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A39D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A39E0C(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  uint64_t v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A40B08(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      uint64_t v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_A40B08(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    uint64_t v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    uint64_t v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    unint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        int v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        unint64_t v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_A40B08(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          int v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          uint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      long long v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      uint64_t v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *uint64_t v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A40B08(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_A3AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A3B104(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A440AC(a1 + 1336, v42);
  sub_A44360((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  long long v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_A3B4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A3B520(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_A3B87C(a1, a2);
  uint64_t result = *(unsigned int *)(v4 + 8);
  if (result == -1)
  {
    int v6 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)(a1 + 112) = v6 + 1;
    *(_DWORD *)(v4 + 8) = v6;
    int v8 = *(uint64_t **)(a1 + 96);
    unint64_t v7 = *(void *)(a1 + 104);
    if ((unint64_t)v8 >= v7)
    {
      int v10 = *(char **)(a1 + 88);
      uint64_t v11 = ((char *)v8 - v10) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          sub_188D718();
        }
        unint64_t v15 = (char *)operator new(8 * v14);
      }
      else
      {
        unint64_t v15 = 0;
      }
      long long v16 = (uint64_t *)&v15[8 * v11];
      uint64_t *v16 = *a2;
      unsigned int v9 = v16 + 1;
      if (v8 != (uint64_t *)v10)
      {
        unint64_t v17 = (char *)v8 - v10 - 8;
        if (v17 < 0x58) {
          goto LABEL_30;
        }
        if ((unint64_t)(v10 - v15) < 0x20) {
          goto LABEL_30;
        }
        uint64_t v18 = (v17 >> 3) + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        char v20 = &v8[v19 / 0xFFFFFFFFFFFFFFF8];
        long long v16 = (uint64_t *)((char *)v16 - v19);
        char v21 = &v15[8 * v11 - 16];
        int v22 = v8 - 2;
        uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
          *(_OWORD *)char v21 = v24;
          v21 -= 32;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        int v8 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            uint64_t v25 = *--v8;
            *--long long v16 = v25;
          }
          while (v8 != (uint64_t *)v10);
        }
        int v8 = *(uint64_t **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v16;
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 104) = &v15[8 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *int v8 = *a2;
      unsigned int v9 = v8 + 1;
    }
    *(void *)(a1 + 96) = v9;
    return *(unsigned int *)(v4 + 8);
  }
  return result;
}

double sub_A3B6BC(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 48) || v2 != *(void *)(a1 + 56))
  {
    *(void *)&double result = sub_A3B77C(a1, v2).u64[0];
  }
  return result;
}

void sub_A3B768(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_A3B77C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 80);
  if (v4)
  {
    if (*(void *)(a1 + 56) == a2) {
      goto LABEL_7;
    }
    uint64_t v5 = malloc_type_realloc(*(void **)(a1 + 80), 12 * a2, 0x10000403E1C8BA9uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    uint64_t v5 = malloc_type_malloc(12 * a2, 0x10000403E1C8BA9uLL);
  }
  *(void *)(a1 + 80) = v5;
  uint64_t v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 12 * a2;
    do
    {
      uint64_t v7 = *(void *)(a1 + 64);
      v4[2] = *(_DWORD *)(a1 + 72);
      *(void *)uint64_t v4 = v7;
      v4 += 3;
      v6 -= 12;
    }
    while (v6);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_A3B87C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_A3B950(a1, a2);
  if (v4 != -1) {
    return *(void *)(a1 + 80) + 12 * v4;
  }
  uint64_t v7 = v5;
  if (sub_A3BA84(a1, 1))
  {
    uint64_t v11 = *a2;
    int v12 = -1;
    uint64_t v4 = sub_A3B950(a1, &v11);
    if (v4 != -1) {
      return *(void *)(a1 + 80) + 12 * v4;
    }
    uint64_t v9 = v8;
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = *a2;
    int v12 = -1;
    uint64_t v10 = a1;
    uint64_t v9 = v7;
  }
  sub_A3BD64(v10, &v11, v9, v13);
  return v13[1];
}

uint64_t sub_A3B950(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 56) - 1;
  uint64_t v4 = *a2;
  unint64_t v5 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v6 = (0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) >> 33);
  uint64_t v7 = *(void *)(a1 + 80);
  int v9 = *(_DWORD *)(a1 + 64);
  int v8 = *(_DWORD *)(a1 + 68);
  uint64_t result = v6 & v3;
  uint64_t v11 = (unsigned int *)(v7 + 12 * (v6 & v3));
  unsigned int v12 = *v11;
  unsigned int v13 = v11[1];
  if (v8 == v13 && v9 == v12) {
    return -1;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v17 = a1 + 32;
    int v15 = *(_DWORD *)(a1 + 32);
    int v16 = *(_DWORD *)(v17 + 4);
    uint64_t v18 = -1;
    uint64_t v19 = 1;
    do
    {
      if (v16 == v13 && v15 == v12)
      {
        if (v18 == -1) {
          uint64_t v18 = result;
        }
      }
      else if (__PAIR64__(v13, v12) == v4)
      {
        return result;
      }
      uint64_t result = (result + v19) & v3;
      char v20 = (unsigned int *)(v7 + 12 * result);
      unsigned int v12 = *v20;
      unsigned int v13 = v20[1];
      ++v19;
    }
    while (v8 != v13 || v9 != v12);
    if (v18 != -1) {
      return -1;
    }
    return -1;
  }
  uint64_t v22 = 1;
  while (__PAIR64__(v13, v12) != v4)
  {
    uint64_t result = (result + v22) & v3;
    uint64_t v23 = (unsigned int *)(v7 + 12 * result);
    unsigned int v12 = *v23;
    unsigned int v13 = v23[1];
    ++v22;
    if (v8 == v13 && v9 == v12) {
      return -1;
    }
  }
  return result;
}

uint64_t sub_A3BA84(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_A3BE54(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_A3BF98((uint64_t)&v26, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v27;
      *(uint64x2_t *)a1 = v26;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v26 = v17;
      long long v27 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v28;
      long long v28 = v19;
      uint64_t v20 = v29;
      unint64_t v21 = v30;
      uint64_t v29 = *(void *)(a1 + 48);
      int v22 = *(_DWORD *)(a1 + 72);
      long long v23 = *(_OWORD *)(a1 + 56);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v21;
      *(_DWORD *)(a1 + 72) = v31;
      *(void *)(a1 + 64) = *((void *)&v30 + 1);
      long long v30 = v23;
      int v31 = v22;
      long long v24 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v32;
      int v32 = v24;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v21)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v26 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v27, (float)(unint64_t)v23)));
      BYTE8(v27) = 0;
      if (v24) {
        free(v24);
      }
      return 1;
    }
  }
  return result;
}

void sub_A3BD14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3BD28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3BD3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3BD50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A3BD64@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  if ((unint64_t)(v4 - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v6 = *(void *)(result + 80);
  if (v5
    && ((unint64_t v7 = (_DWORD *)(v6 + 12 * a3), *(_DWORD *)(result + 36) == v7[1])
      ? (BOOL v8 = *(_DWORD *)(result + 32) == *v7)
      : (BOOL v8 = 0),
        v8))
  {
    *(void *)(result + 40) = v5 - 1;
  }
  else
  {
    *(void *)(result + 48) = v4 + 1;
  }
  uint64_t v9 = v6 + 12 * a3;
  uint64_t v10 = *a2;
  *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v9 = v10;
  uint64_t v11 = *(void *)(result + 80);
  uint64_t v12 = v11 + 12 * a3;
  uint64_t v13 = v11 + 12 * *(void *)(result + 56);
  *a4 = result;
  a4[1] = v12;
  a4[2] = v13;
  return result;
}

void sub_A3BE40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A3BE54(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_A3BF98((uint64_t)&v18, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v19;
    *(uint64x2_t *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v18 = v9;
    long long v19 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v20;
    long long v20 = v11;
    uint64_t v12 = v21;
    unint64_t v13 = v22;
    uint64_t v21 = *(void *)(a1 + 48);
    int v14 = *(_DWORD *)(a1 + 72);
    long long v15 = *(_OWORD *)(a1 + 56);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 72) = v23;
    *(void *)(a1 + 64) = *((void *)&v22 + 1);
    long long v22 = v15;
    int v23 = v14;
    long long v16 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v24;
    long long v24 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v18 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v19, (float)(unint64_t)v15)));
    BYTE8(v19) = 0;
    if (v16) {
      free(v16);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_A3BF98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_A3C0E0(a1, a2, a3);
  }
  else
  {
    unint64_t v7 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v8 = *(float *)(a1 + 16) * (float)v7;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v8) {
        break;
      }
      do
      {
LABEL_5:
        if ((v7 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v7 *= 2;
      }
      while (v7 < a3);
    }
    *(void *)(a1 + 56) = v7;
    float result = *(float *)(a1 + 20) * (float)v7;
    *(void *)a1 = (unint64_t)v8;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_A3C0CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3C0E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_A3B77C(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v9 = *(_DWORD *)(a2 + 64);
    int v8 = *(_DWORD *)(a2 + 68);
    if (*(void *)(a2 + 40))
    {
      uint64_t v10 = 12 * v7;
      long long v11 = *(int **)(a2 + 80);
      while (1)
      {
        int v12 = *v11;
        int v13 = v11[1];
        if ((v8 != v13 || v9 != v12) && (*(_DWORD *)(a2 + 36) != v13 || *(_DWORD *)(a2 + 32) != v12)) {
          break;
        }
        v11 += 3;
        v10 -= 12;
        if (!v10) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v37 = 12 * v7;
      long long v11 = *(int **)(a2 + 80);
      while (v8 == v11[1] && v9 == *v11)
      {
        v11 += 3;
        v37 -= 12;
        if (!v37) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    long long v11 = *(int **)(a2 + 80);
  }
  uint64_t v16 = *(void *)(a2 + 80) + 12 * v7;
  if (v11 != (int *)v16)
  {
    do
    {
      uint64_t v17 = *(void *)(a1 + 56) - 1;
      unint64_t v18 = 0xFF51AFD7ED558CCDLL * (*(void *)v11 ^ (*(void *)v11 >> 33));
      unint64_t v19 = (0xC4CEB9FE1A85EC53 * (v18 ^ (v18 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v18 ^ (v18 >> 33))) >> 33);
      uint64_t v20 = *(void *)(a1 + 80);
      int v22 = *(_DWORD *)(a1 + 64);
      int v21 = *(_DWORD *)(a1 + 68);
      unint64_t v23 = v19 & v17;
      long long v24 = (_DWORD *)(v20 + 12 * v23);
      if (v21 != v24[1] || v22 != *v24)
      {
        uint64_t v26 = 1;
        do
        {
          unint64_t v23 = (v23 + v26) & v17;
          long long v24 = (_DWORD *)(v20 + 12 * v23);
          ++v26;
        }
        while (v21 != v24[1] || v22 != *v24);
      }
      uint64_t v28 = *(void *)v11;
      v24[2] = v11[2];
      *(void *)long long v24 = v28;
      ++*(void *)(a1 + 48);
      uint64_t v29 = v11 + 3;
      long long v11 = (int *)v16;
      if (v29 != (int *)v16)
      {
        int v31 = *(_DWORD *)(a2 + 64);
        int v30 = *(_DWORD *)(a2 + 68);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v33 = *v29;
            int v32 = v29[1];
            if ((v30 != v32 || v31 != v33) && (*(_DWORD *)(a2 + 36) != v32 || *(_DWORD *)(a2 + 32) != v33)) {
              break;
            }
            v29 += 3;
            if (v29 == (int *)v16) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          while (v30 == v29[1] && v31 == *v29)
          {
            v29 += 3;
            if (v29 == (int *)v16)
            {
LABEL_21:
              long long v11 = (int *)v16;
              goto LABEL_22;
            }
          }
        }
        long long v11 = v29;
      }
LABEL_22:
      ;
    }
    while (v11 != (int *)(*(void *)(a2 + 80) + 12 * *(void *)(a2 + 56)));
  }
LABEL_60:
  ++*(_DWORD *)(a1 + 28);
}

void sub_A3C354(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3C368(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v33);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_A3C700(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v34[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 432) = sub_A3B520(v5, v34);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v34[0] = 0x1FFFFFFFELL;
    int v7 = sub_A3B520(v6, v34);
    sub_A3EBD8(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27)) {
        sub_A3C94C(a1, v9);
      }
      if (v9)
      {
        unint64_t v19 = *(unsigned int **)(a1 + 288);
        uint64_t v20 = *(unsigned int **)(a1 + 296);
        if (v19 != v20)
        {
          uint64_t v21 = *(void *)(a1 + 264);
          int v22 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v23 = *v22++;
            *(void *)(v21 + (((unint64_t)v23 >> 3) & 0x1FFFFFF8)) &= ~(1 << v23);
          }
          while (v22 != v20);
        }
        *(void *)(a1 + 296) = v19;
        sub_A3CACC(a1, v9);
        sub_A3CD7C(a1, v9);
        unint64_t v24 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v24
          && ((*(void *)(*(void *)(a1 + 264) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_38:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v10 = *(unsigned int **)(a1 + 240);
        long long v11 = *(unsigned int **)(a1 + 248);
        if (v10 != v11)
        {
          uint64_t v12 = *(void *)(a1 + 216);
          int v13 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v14 = *v13++;
            *(void *)(v12 + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) &= ~(1 << v14);
          }
          while (v13 != v11);
        }
        *(void *)(a1 + 248) = v10;
        sub_A3D69C(a1, v9);
        sub_725D0((uint64_t)v34);
        long long v15 = *(unsigned int **)(a1 + 408);
        uint64_t v16 = *(unsigned int **)(a1 + 416);
        while (v15 != v16)
        {
          unsigned int v17 = *v15++;
          sub_A3F948(a1, v9, v17);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v34) + *(double *)(a1 + 608);
        unint64_t v18 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v18
          && ((*(void *)(*(void *)(a1 + 216) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_38;
        }
      }
      unint64_t v25 = sub_A4066C(a1) + 728;
      if (*(void *)(a1 + 720) > v25) {
        unint64_t v25 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v25;
      if (sub_A3E718(a1)) {
        goto LABEL_38;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_36;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_36:
  if (v8)
  {
LABEL_39:
    unint64_t v26 = 0;
    uint64_t v27 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        uint64_t v28 = *(unint64_t **)(a1 + 152);
        unint64_t v29 = *(unsigned int *)(a1 + 432);
        if (*v28 <= v29)
        {
          *uint64_t v28 = v29 + 1;
          unint64_t v30 = v28[2];
          unint64_t v31 = v28[1] * (v29 + 1);
          unint64_t v32 = (uint64_t)(v28[3] - v30) >> 2;
          if (v31 > v32)
          {
            sub_5BBEE0((uint64_t)(v28 + 2), v31 - v32);
          }
          else if (v31 < v32)
          {
            v28[3] = v30 + 4 * v31;
          }
        }
        *(void *)(a1 + 632) += *(int *)(v28[2] + 4 * (v26 + v28[1] * v29));
      }
      ++v26;
    }
    while (v27 != v26);
  }
LABEL_48:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v33);
}

void sub_A3C700(uint64_t a1)
{
  unint64_t v2 = *(unsigned int **)(a1 + 240);
  long long v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 336);
  int v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    long long v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  unsigned int v17 = *(unsigned int **)(a1 + 408);
  unint64_t v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v27 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unsigned int v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)unsigned int v23 = __dst;
  *(void *)(a1 + 592) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v34;
  *(_OWORD *)(a1 + 680) = v35;
  *(_OWORD *)(a1 + 696) = v36;
  *(_OWORD *)(a1 + 712) = v37;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 616) = v31;
  *(_OWORD *)(a1 + 632) = v32;
  *(_OWORD *)(a1 + 648) = v33;
  if (v27 < 0) {
    operator delete((void *)__p);
  }
  unint64_t v24 = (2 * *(_DWORD *)(a1 + 8) + 2);
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v25 = *(void **)(a1 + 152);
    v25[3] = v25[2];
    void *v25 = 0;
    v25[1] = v24;
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_A3C930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A3C94C(uint64_t a1, unsigned int a2)
{
  long long v3 = *(unsigned int **)(a1 + 336);
  uint64_t v4 = *(unsigned int **)(a1 + 344);
  if (v3 == v4)
  {
    uint64_t v22 = *(void *)(a1 + 336);
    goto LABEL_25;
  }
  uint64_t v5 = a2 - 2;
  uint64_t v6 = a2;
  do
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *(unint64_t **)(a1 + 152);
    unint64_t v9 = *v8;
    uint64_t v10 = v8;
    if (*v8 > v7) {
      goto LABEL_7;
    }
    *unint64_t v8 = v7 + 1;
    unint64_t v11 = v8[2];
    unint64_t v12 = v8[1] * (v7 + 1);
    unint64_t v13 = (uint64_t)(v8[3] - v11) >> 2;
    if (v12 > v13)
    {
      sub_5BBEE0((uint64_t)(v8 + 2), v12 - v13);
      uint64_t v10 = *(unint64_t **)(a1 + 152);
      unint64_t v9 = *v10;
LABEL_7:
      int v14 = *(_DWORD *)(v8[2] + 4 * (v5 + v8[1] * v7));
      if (v9 <= v7)
      {
        unint64_t *v10 = v7 + 1;
        unint64_t v15 = v10[2];
        unint64_t v16 = v10[1] * (v7 + 1);
        unint64_t v17 = (uint64_t)(v10[3] - v15) >> 2;
        if (v16 <= v17)
        {
          if (v16 < v17) {
            v10[3] = v15 + 4 * v16;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v10 + 2), v16 - v17);
        }
      }
      unint64_t v8 = v10;
      if (v14 != 0x7FFFFFFF) {
        goto LABEL_17;
      }
      goto LABEL_3;
    }
    if (v12 < v13) {
      v8[3] = v11 + 4 * v12;
    }
    int v14 = *(_DWORD *)(v8[2] + 4 * (v5 + v8[1] * v7));
    if (v14 != 0x7FFFFFFF)
    {
LABEL_17:
      unint64_t v18 = v8[2];
      uint64_t v19 = v6 + v8[1] * v7;
      int v20 = *(_DWORD *)(v18 + 4 * v19);
      if (v20 == 0x7FFFFFFF || v14 < v20) {
        *(_DWORD *)(v18 + 4 * v19) = v14;
      }
    }
LABEL_3:
    ++v3;
  }
  while (v3 != v4);
  long long v3 = *(unsigned int **)(a1 + 336);
  uint64_t v22 = *(void *)(a1 + 344);
LABEL_25:
  double result = *(double *)(a1 + 680) + (double)(unint64_t)((v22 - (uint64_t)v3) >> 2);
  *(double *)(a1 + 680) = result;
  return result;
}

double sub_A3CACC(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  long long v33 = *(unsigned int **)(a1 + 248);
  if (v4 != v33)
  {
    uint64_t v32 = a2 - 1;
    int v30 = ~a2;
    unsigned int v31 = a2;
    while (1)
    {
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      unint64_t v7 = *(unint64_t **)(a1 + 152);
      if (*v7 <= v5)
      {
        unint64_t *v7 = v5 + 1;
        unint64_t v8 = v7[2];
        unint64_t v9 = v7[1] * (v5 + 1);
        unint64_t v10 = (uint64_t)(v7[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v7[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v7 + 2), v9 - v10);
        }
      }
      int v11 = *(_DWORD *)(v7[2] + 4 * (v32 + v7[1] * v5));
      if (HIDWORD(v6) == 1 && (v6 + 3) < 2)
      {
        signed int v18 = *(_DWORD *)(v7[2] + 4 * (v32 + v7[1] * v5));
        uint64_t v19 = *(unint64_t **)(a1 + 64);
        if (v19) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v14 = v13 + 24;
      if (*(unsigned char *)(v13 + 17)) {
        break;
      }
      unint64_t v15 = (int *)sub_498D5C(v14, __ROR8__(v6, 32), 0, "stop");
      int v20 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v20 >= 0x15u)
      {
        unsigned int v16 = v20[10];
        if (v16) {
          goto LABEL_23;
        }
      }
      signed int v18 = v11 + 30;
      uint64_t v19 = *(unint64_t **)(a1 + 64);
      if (v19)
      {
LABEL_25:
        if (*v19 > v5)
        {
          unsigned int v21 = 0;
          unsigned int v22 = *(_DWORD *)(a1 + 144) + v30;
          unsigned int v23 = v22;
          while (v21 <= v22)
          {
            signed int v24 = *(_DWORD *)sub_A3F53C(v19 + 2, v19[1] * v5 + v23);
            v21 += 2;
            v23 -= 2;
            if (v24 != 0x7FFFFFFF)
            {
              if (v24 < v18) {
                goto LABEL_4;
              }
              goto LABEL_32;
            }
          }
        }
        goto LABEL_4;
      }
LABEL_32:
      if (sub_A3EBD8(a1, 1u, v5, v31, v18))
      {
        unint64_t v25 = *(unint64_t **)(a1 + 152);
        if (*v25 <= v5)
        {
          unint64_t *v25 = v5 + 1;
          unint64_t v26 = v25[2];
          unint64_t v27 = v25[1] * (v5 + 1);
          unint64_t v28 = (uint64_t)(v25[3] - v26) >> 2;
          if (v27 > v28)
          {
            sub_5BBEE0((uint64_t)(v25 + 2), v27 - v28);
          }
          else if (v27 < v28)
          {
            v25[3] = v26 + 4 * v27;
          }
        }
      }
LABEL_4:
      if (++v4 == v33) {
        goto LABEL_37;
      }
    }
    unint64_t v15 = (int *)sub_A1A290(v14, v6, 0, "transfers at stop");
    unsigned int v16 = 0;
    unint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v17 >= 5u)
    {
      unsigned int v16 = v17[2];
      if (v17[2]) {
LABEL_23:
      }
        unsigned int v16 = *(int *)((char *)v15 + v16);
    }
    signed int v18 = v16 + v11;
    uint64_t v19 = *(unint64_t **)(a1 + 64);
    if (v19) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
LABEL_37:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_A3CD7C(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v122);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  unint64_t v109 = *(unsigned int **)(a1 + 248);
  if (v4 != v109)
  {
    uint64_t v108 = a2 - 1;
    int v111 = ~a2;
    unsigned int v112 = a2;
    uint64_t v114 = a1;
    while (1)
    {
      uint64_t v110 = v4;
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      unint64_t v7 = *(unint64_t **)(a1 + 152);
      if (*v7 <= v5)
      {
        unint64_t *v7 = v5 + 1;
        unint64_t v8 = v7[2];
        unint64_t v9 = v7[1] * (v5 + 1);
        unint64_t v10 = (uint64_t)(v7[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v7[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v7 + 2), v9 - v10);
        }
      }
      int v113 = *(_DWORD *)(v7[2] + 4 * (v108 + v7[1] * v5));
      sub_A19FA8((uint64_t)&v116, *(void *)(a1 + 40), v6);
      int v11 = v117;
      unint64_t v12 = v121 ? v120 : &v118;
      unint64_t v115 = v5;
      if ((unint64_t)v117 < *v12) {
        break;
      }
LABEL_3:
      uint64_t v4 = v110 + 1;
      if (v110 + 1 == v109) {
        goto LABEL_163;
      }
    }
    while (1)
    {
      unint64_t v16 = __ROR8__(*v11, 32);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(v17 + 56) - 1;
      unint64_t v19 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
      unint64_t v20 = v19 ^ (v19 >> 33);
      uint64_t v21 = *(void *)(v17 + 80);
      int v23 = *(_DWORD *)(v17 + 64);
      int v22 = *(_DWORD *)(v17 + 68);
      uint64_t v24 = v20 & v18;
      unint64_t v25 = (unsigned int *)(v21 + 12 * (v20 & v18));
      unsigned int v27 = *v25;
      unsigned int v26 = v25[1];
      if (v22 == v26 && v23 == v27) {
        break;
      }
      if (*(void *)(v17 + 40))
      {
        uint64_t v29 = -1;
        uint64_t v30 = 1;
        do
        {
          if (*(_DWORD *)(v17 + 36) == v26 && *(_DWORD *)(v17 + 32) == v27)
          {
            if (v29 == -1) {
              uint64_t v29 = v24;
            }
          }
          else if (__PAIR64__(v26, v27) == v16)
          {
            goto LABEL_59;
          }
          uint64_t v24 = (v24 + v30) & v18;
          unsigned int v31 = (unsigned int *)(v21 + 12 * v24);
          unsigned int v27 = *v31;
          unsigned int v26 = v31[1];
          ++v30;
        }
        while (v22 != v26 || v23 != v27);
        if (v29 == -1) {
          break;
        }
        if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v47 = 1;
        while (__PAIR64__(v26, v27) != v16)
        {
          uint64_t v24 = (v24 + v47) & v18;
          int v48 = (unsigned int *)(v21 + 12 * v24);
          unsigned int v27 = *v48;
          unsigned int v26 = v48[1];
          ++v47;
          if (v22 == v26 && v23 == v27) {
            goto LABEL_62;
          }
        }
LABEL_59:
        if (v24 != -1)
        {
          uint64_t v50 = v21 + 12 * v24;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          if (v51 == -1) {
            goto LABEL_96;
          }
          goto LABEL_118;
        }
        uint64_t v29 = -1;
        if (!sub_A3BA84(*(void *)(a1 + 48), 1))
        {
LABEL_63:
          uint64_t v53 = *(void *)(v17 + 40);
          uint64_t v52 = *(void *)(v17 + 48);
          if ((unint64_t)(v52 - v53) >= 0x1555555555555555) {
            goto LABEL_164;
          }
          uint64_t v34 = *(void *)(v17 + 80);
          if (v53
            && ((int v54 = (_DWORD *)(v34 + 12 * v29), *(_DWORD *)(v17 + 36) == v54[1])
              ? (BOOL v55 = *(_DWORD *)(v17 + 32) == *v54)
              : (BOOL v55 = 0),
                v55))
          {
            *(void *)(v17 + 40) = v53 - 1;
          }
          else
          {
            *(void *)(v17 + 48) = v52 + 1;
          }
          uint64_t v56 = 3 * v29;
          goto LABEL_95;
        }
      }
LABEL_37:
      uint64_t v33 = *(void *)(v17 + 56) - 1;
      uint64_t v34 = *(void *)(v17 + 80);
      int v36 = *(_DWORD *)(v17 + 64);
      int v35 = *(_DWORD *)(v17 + 68);
      uint64_t v37 = v33 & v20;
      unint64_t v38 = (unsigned int *)(v34 + 12 * (v33 & v20));
      unsigned int v40 = *v38;
      unsigned int v39 = v38[1];
      uint64_t v41 = *(void *)(v17 + 40);
      if (v35 == v39 && v36 == v40) {
        goto LABEL_86;
      }
      if (v41)
      {
        uint64_t v43 = -1;
        uint64_t v44 = 1;
        do
        {
          if (*(_DWORD *)(v17 + 36) == v39 && *(_DWORD *)(v17 + 32) == v40)
          {
            if (v43 == -1) {
              uint64_t v43 = v37;
            }
          }
          else if (__PAIR64__(v39, v40) == v16)
          {
            goto LABEL_80;
          }
          uint64_t v37 = (v37 + v44) & v33;
          char v45 = (unsigned int *)(v34 + 12 * v37);
          unsigned int v40 = *v45;
          unsigned int v39 = v45[1];
          ++v44;
        }
        while (v35 != v39 || v36 != v40);
        if (v43 == -1) {
LABEL_86:
        }
          uint64_t v43 = v37;
        uint64_t v60 = *(void *)(v17 + 48);
        if ((unint64_t)(v60 - v41) >= 0x1555555555555555) {
          goto LABEL_164;
        }
LABEL_88:
        if (v41
          && ((unint64_t v61 = (_DWORD *)(v34 + 12 * v43), *(_DWORD *)(v17 + 36) == v61[1])
            ? (BOOL v62 = *(_DWORD *)(v17 + 32) == *v61)
            : (BOOL v62 = 0),
              v62))
        {
          *(void *)(v17 + 40) = v41 - 1;
          uint64_t v56 = 3 * v43;
        }
        else
        {
          *(void *)(v17 + 48) = v60 + 1;
          uint64_t v56 = 3 * v43;
        }
LABEL_95:
        uint64_t v63 = 4 * v56;
        uint64_t v64 = v34 + v63;
        *(void *)uint64_t v64 = v16;
        *(_DWORD *)(v64 + 8) = -1;
        uint64_t v50 = *(void *)(v17 + 80) + v63;
        unint64_t v51 = *(unsigned int *)(v50 + 8);
        if (v51 != -1) {
          goto LABEL_118;
        }
LABEL_96:
        int v65 = *(_DWORD *)(v17 + 112);
        *(_DWORD *)(v17 + 112) = v65 + 1;
        *(_DWORD *)(v50 + 8) = v65;
        int v67 = *(char **)(v17 + 96);
        unint64_t v66 = *(void *)(v17 + 104);
        if ((unint64_t)v67 < v66)
        {
          *(void *)int v67 = v16;
          uint64_t v68 = (uint64_t)(v67 + 8);
LABEL_117:
          *(void *)(v17 + 96) = v68;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          goto LABEL_118;
        }
        int v69 = (char **)(v17 + 88);
        int v70 = *(char **)(v17 + 88);
        uint64_t v71 = (v67 - v70) >> 3;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v73 = v66 - (void)v70;
        if (v73 >> 2 > v72) {
          unint64_t v72 = v73 >> 2;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v72)
        {
          if (v72 >> 61) {
            sub_188D718();
          }
          unint64_t v74 = v72;
          unsigned int v75 = (char *)operator new(8 * v72);
          int v69 = (char **)(v17 + 88);
          unsigned int v76 = &v75[8 * v71];
          *(void *)unsigned int v76 = v16;
          uint64_t v68 = (uint64_t)(v76 + 8);
          if (v67 == v70) {
            goto LABEL_115;
          }
LABEL_108:
          unint64_t v77 = v67 - 8 - v70;
          if (v77 < 0x58) {
            goto LABEL_169;
          }
          if ((unint64_t)(v70 - v75) < 0x20) {
            goto LABEL_169;
          }
          uint64_t v78 = (v77 >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          int v80 = &v67[-v79];
          v76 -= v79;
          uint64_t v81 = &v75[8 * v71 - 16];
          uint64_t v82 = (long long *)(v67 - 16);
          uint64_t v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)uint64_t v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 4;
          }
          while (v83);
          int v67 = v80;
          if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_169:
            do
            {
              uint64_t v85 = *((void *)v67 - 1);
              v67 -= 8;
              *((void *)v76 - 1) = v85;
              v76 -= 8;
            }
            while (v67 != v70);
          }
          int v67 = *v69;
        }
        else
        {
          unint64_t v74 = 0;
          unsigned int v75 = 0;
          unsigned int v76 = (char *)(8 * v71);
          *(void *)(8 * v71) = v16;
          uint64_t v68 = 8 * v71 + 8;
          if (v67 != v70) {
            goto LABEL_108;
          }
        }
LABEL_115:
        *(void *)(v17 + 88) = v76;
        *(void *)(v17 + 96) = v68;
        *(void *)(v17 + 104) = &v75[8 * v74];
        unint64_t v5 = v115;
        if (v67) {
          operator delete(v67);
        }
        goto LABEL_117;
      }
      uint64_t v57 = 1;
      while (__PAIR64__(v39, v40) != v16)
      {
        uint64_t v37 = (v37 + v57) & v33;
        uint64_t v58 = (unsigned int *)(v34 + 12 * v37);
        unsigned int v40 = *v58;
        unsigned int v39 = v58[1];
        ++v57;
        if (v35 == v39 && v36 == v40)
        {
          uint64_t v41 = 0;
          goto LABEL_86;
        }
      }
LABEL_80:
      if (v37 == -1)
      {
        uint64_t v43 = -1;
        uint64_t v60 = *(void *)(v17 + 48);
        if ((unint64_t)(v60 - v41) >= 0x1555555555555555)
        {
LABEL_164:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
        goto LABEL_88;
      }
      uint64_t v50 = v34 + 12 * v37;
      unint64_t v51 = *(unsigned int *)(v50 + 8);
      if (v51 == -1) {
        goto LABEL_96;
      }
LABEL_118:
      a1 = v114;
      *(double *)(v114 + 672) = *(double *)(v114 + 672) + 1.0;
      if (v5 != v51)
      {
        int v86 = *((_DWORD *)v117 + 2);
        int v87 = v86 / 10;
        int v88 = v86 % 10;
        if (v86 < 0) {
          char v89 = -5;
        }
        else {
          char v89 = 5;
        }
        signed int v90 = v87 + v113 + (((103 * (char)(v89 + v88)) >> 15) & 1) + ((103 * (char)(v89 + v88)) >> 10);
        int v91 = *(unint64_t **)(v114 + 64);
        if (v91)
        {
          if (*v91 > v51)
          {
            unsigned int v92 = 0;
            unsigned int v93 = *(_DWORD *)(v114 + 144) + v111;
            unsigned int v94 = v93;
            while (v92 <= v93)
            {
              signed int v95 = *(_DWORD *)sub_A3F53C(v91 + 2, v91[1] * v51 + v94);
              v92 += 2;
              v94 -= 2;
              if (v95 != 0x7FFFFFFF)
              {
                if (v95 < v90) {
                  break;
                }
                goto LABEL_128;
              }
            }
          }
        }
        else
        {
LABEL_128:
          if (sub_A3EBD8(v114, 1u, v51, v112, v90))
          {
            int v96 = *(unint64_t **)(v114 + 152);
            if (*v96 <= v51)
            {
              *int v96 = v51 + 1;
              unint64_t v97 = v96[2];
              unint64_t v98 = v96[1] * (v51 + 1);
              unint64_t v99 = (uint64_t)(v96[3] - v97) >> 2;
              if (v98 <= v99)
              {
                if (v98 < v99) {
                  v96[3] = v97 + 4 * v98;
                }
              }
              else
              {
                sub_5BBEE0((uint64_t)(v96 + 2), v98 - v99);
              }
            }
          }
        }
      }
      unint64_t v14 = (unint64_t)v118;
      int v11 = (void *)((char *)v117 + 12);
      unint64_t v117 = v11;
      if (v11 == v118)
      {
        int v11 = v119;
        unint64_t v15 = v120[0];
        unint64_t v117 = v119;
        int v13 = 1;
        unsigned __int8 v121 = 1;
        unint64_t v5 = v115;
        if (*(unsigned char *)(v116 + 16))
        {
LABEL_140:
          if (v13) {
            unint64_t v100 = v15;
          }
          else {
            unint64_t v100 = (unint64_t)v118;
          }
          if ((unint64_t)v11 < v100)
          {
            unint64_t v101 = __ROR8__(*v11, 32);
            if (HIDWORD(v101) != 1 || (v101 + 3) >= 2)
            {
              while (!sub_2AB7E4(**(void **)(v116 + 4120)))
              {
                unint64_t v14 = (unint64_t)v118;
                int v11 = (void *)((char *)v117 + 12);
                unint64_t v117 = v11;
                if (v11 == v118)
                {
                  int v11 = v119;
                  unint64_t v117 = v119;
                  LOBYTE(v13) = 1;
                  unsigned __int8 v121 = 1;
                  if ((unint64_t)v119 >= v120[0]) {
                    goto LABEL_15;
                  }
                }
                else
                {
                  LOBYTE(v13) = v121;
                  if (v121) {
                    int v105 = v120;
                  }
                  else {
                    int v105 = &v118;
                  }
                  if ((unint64_t)v11 >= *v105) {
                    goto LABEL_15;
                  }
                }
                unint64_t v103 = __ROR8__(*v11, 32);
                if (HIDWORD(v103) == 1 && (v103 + 3) < 2) {
                  goto LABEL_15;
                }
              }
              LOBYTE(v13) = v121;
              int v11 = v117;
              unint64_t v14 = (unint64_t)v118;
            }
LABEL_15:
            unint64_t v15 = v120[0];
          }
        }
      }
      else
      {
        int v13 = v121;
        unint64_t v5 = v115;
        unint64_t v15 = v120[0];
        if (*(unsigned char *)(v116 + 16)) {
          goto LABEL_140;
        }
      }
      if ((_BYTE)v13) {
        unint64_t v14 = v15;
      }
      if ((unint64_t)v11 >= v14) {
        goto LABEL_3;
      }
    }
LABEL_62:
    uint64_t v29 = v24;
    if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
      goto LABEL_63;
    }
    goto LABEL_37;
  }
LABEL_163:
  double result = sub_72688((uint64_t)v122) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

void sub_A3D674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3D688(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_A3D69C(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v227);
  uint64_t v4 = *(unsigned int **)(a1 + 408);
  unint64_t v5 = *(unsigned int **)(a1 + 416);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 384);
    uint64_t v7 = *(void *)(a1 + 360);
    unint64_t v8 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 416) = v4;
  unint64_t v10 = *(unsigned int **)(a1 + 288);
  v216 = *(unsigned int **)(a1 + 296);
  if (v10 == v216) {
    goto LABEL_273;
  }
  v212 = (void **)(a1 + 408);
  unint64_t v217 = a2;
  uint64_t v214 = a2 + 1;
  v215 = (uint64_t *)(a1 + 384);
  uint64_t v219 = a1;
  while (2)
  {
    int v218 = v10;
    int v11 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v10);
    sub_A1DF34((uint64_t)v220, *(void **)(a1 + 40), *v11, 0, 0, 0);
    unint64_t v12 = v223;
LABEL_8:
    unint64_t v13 = (unint64_t)v224;
    while ((unint64_t)v12 < v13)
    {
      unint64_t v14 = __ROR8__(*v12, 32);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(v15 + 56) - 1;
      unint64_t v17 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
      unint64_t v18 = v17 ^ (v17 >> 33);
      uint64_t v19 = *(void *)(v15 + 80);
      int v21 = *(_DWORD *)(v15 + 64);
      int v20 = *(_DWORD *)(v15 + 68);
      uint64_t v22 = v18 & v16;
      int v23 = (unsigned int *)(v19 + 12 * (v18 & v16));
      unsigned int v25 = *v23;
      unsigned int v24 = v23[1];
      if (v20 == v24 && v21 == v25) {
        goto LABEL_54;
      }
      if (*(void *)(v15 + 40))
      {
        uint64_t v27 = -1;
        uint64_t v28 = 1;
        do
        {
          if (*(_DWORD *)(v15 + 36) == v24 && *(_DWORD *)(v15 + 32) == v25)
          {
            if (v27 == -1) {
              uint64_t v27 = v22;
            }
          }
          else if (__PAIR64__(v24, v25) == v14)
          {
            goto LABEL_50;
          }
          uint64_t v22 = (v22 + v28) & v16;
          uint64_t v29 = (unsigned int *)(v19 + 12 * v22);
          unsigned int v25 = *v29;
          unsigned int v24 = v29[1];
          ++v28;
        }
        while (v20 != v24 || v21 != v25);
        if (v27 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
            goto LABEL_28;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v27 = v22;
        if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      }
      uint64_t v45 = 1;
      while (__PAIR64__(v24, v25) != v14)
      {
        uint64_t v22 = (v22 + v45) & v16;
        double v46 = (unsigned int *)(v19 + 12 * v22);
        unsigned int v25 = *v46;
        unsigned int v24 = v46[1];
        ++v45;
        if (v20 == v24 && v21 == v25) {
          goto LABEL_54;
        }
      }
LABEL_50:
      if (v22 != -1)
      {
        uint64_t v48 = v19 + 12 * v22;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_52;
        }
        goto LABEL_112;
      }
      uint64_t v27 = -1;
      if (sub_A3BA84(*(void *)(a1 + 56), 1))
      {
LABEL_28:
        uint64_t v31 = *(void *)(v15 + 56) - 1;
        uint64_t v32 = *(void *)(v15 + 80);
        int v34 = *(_DWORD *)(v15 + 64);
        int v33 = *(_DWORD *)(v15 + 68);
        uint64_t v35 = v31 & v18;
        int v36 = (unsigned int *)(v32 + 12 * (v31 & v18));
        unsigned int v38 = *v36;
        unsigned int v37 = v36[1];
        uint64_t v39 = *(void *)(v15 + 40);
        if (v33 == v37 && v34 == v38) {
          goto LABEL_102;
        }
        if (v39)
        {
          uint64_t v41 = -1;
          uint64_t v42 = 1;
          do
          {
            if (*(_DWORD *)(v15 + 36) == v37 && *(_DWORD *)(v15 + 32) == v38)
            {
              if (v41 == -1) {
                uint64_t v41 = v35;
              }
            }
            else if (__PAIR64__(v37, v38) == v14)
            {
              goto LABEL_83;
            }
            uint64_t v35 = (v35 + v42) & v31;
            uint64_t v43 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v43;
            unsigned int v37 = v43[1];
            ++v42;
          }
          while (v33 != v37 || v34 != v38);
          if (v41 == -1) {
LABEL_102:
          }
            uint64_t v41 = v35;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555) {
            goto LABEL_274;
          }
        }
        else
        {
          uint64_t v67 = 1;
          while (__PAIR64__(v37, v38) != v14)
          {
            uint64_t v35 = (v35 + v67) & v31;
            uint64_t v68 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v68;
            unsigned int v37 = v68[1];
            ++v67;
            if (v33 == v37 && v34 == v38)
            {
              uint64_t v39 = 0;
              goto LABEL_102;
            }
          }
LABEL_83:
          if (v35 != -1)
          {
            uint64_t v48 = v32 + 12 * v35;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            if (v49 == -1) {
              goto LABEL_52;
            }
            goto LABEL_112;
          }
          uint64_t v41 = -1;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555)
          {
LABEL_274:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v39
          && ((long long v84 = (_DWORD *)(v32 + 12 * v41), *(_DWORD *)(v15 + 36) == v84[1])
            ? (BOOL v85 = *(_DWORD *)(v15 + 32) == *v84)
            : (BOOL v85 = 0),
              v85))
        {
          *(void *)(v15 + 40) = v39 - 1;
          uint64_t v66 = 3 * v41;
        }
        else
        {
          *(void *)(v15 + 48) = v83 + 1;
          uint64_t v66 = 3 * v41;
        }
        goto LABEL_111;
      }
LABEL_55:
      uint64_t v55 = *(void *)(v15 + 40);
      uint64_t v54 = *(void *)(v15 + 48);
      if ((unint64_t)(v54 - v55) >= 0x1555555555555555) {
        goto LABEL_274;
      }
      uint64_t v32 = *(void *)(v15 + 80);
      if (v55
        && ((uint64_t v56 = (_DWORD *)(v32 + 12 * v27), *(_DWORD *)(v15 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v15 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v15 + 40) = v55 - 1;
      }
      else
      {
        *(void *)(v15 + 48) = v54 + 1;
      }
      uint64_t v66 = 3 * v27;
LABEL_111:
      uint64_t v86 = 4 * v66;
      uint64_t v87 = v32 + v86;
      *(void *)uint64_t v87 = v14;
      *(_DWORD *)(v87 + 8) = -1;
      uint64_t v48 = *(void *)(v15 + 80) + v86;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 == -1)
      {
LABEL_52:
        int v50 = *(_DWORD *)(v15 + 112);
        *(_DWORD *)(v15 + 112) = v50 + 1;
        *(_DWORD *)(v48 + 8) = v50;
        uint64_t v52 = *(char **)(v15 + 96);
        unint64_t v51 = *(void *)(v15 + 104);
        if ((unint64_t)v52 < v51)
        {
          *(void *)uint64_t v52 = v14;
          uint64_t v53 = (uint64_t)(v52 + 8);
          goto LABEL_98;
        }
        uint64_t v58 = *(char **)(v15 + 88);
        uint64_t v59 = (v52 - v58) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v61 = v51 - (void)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          if (v62 >> 61) {
            goto LABEL_275;
          }
          uint64_t v63 = (char *)operator new(8 * v62);
          uint64_t v64 = &v63[8 * v59];
          *(void *)uint64_t v64 = v14;
          uint64_t v53 = (uint64_t)(v64 + 8);
          if (v52 != v58)
          {
LABEL_71:
            unint64_t v65 = v52 - 8 - v58;
            if (v65 < 0x58)
            {
              a1 = v219;
              goto LABEL_95;
            }
            a1 = v219;
            if ((unint64_t)(v58 - v63) < 0x20) {
              goto LABEL_280;
            }
            uint64_t v70 = (v65 >> 3) + 1;
            uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v72 = &v52[-v71];
            v64 -= v71;
            uint64_t v73 = &v63[8 * v59 - 16];
            unint64_t v74 = (long long *)(v52 - 16);
            uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v74;
              *((_OWORD *)v73 - 1) = *(v74 - 1);
              *(_OWORD *)uint64_t v73 = v76;
              v73 -= 32;
              v74 -= 2;
              v75 -= 4;
            }
            while (v75);
            uint64_t v52 = v72;
            if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_280:
              do
              {
LABEL_95:
                uint64_t v77 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v64 - 1) = v77;
                v64 -= 8;
              }
              while (v52 != v58);
            }
            uint64_t v52 = *(char **)(v15 + 88);
            *(void *)(v15 + 88) = v64;
            *(void *)(v15 + 96) = v53;
            *(void *)(v15 + 104) = &v63[8 * v62];
            if (v52) {
LABEL_97:
            }
              operator delete(v52);
LABEL_98:
            *(void *)(v15 + 96) = v53;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            unsigned int v78 = *((unsigned __int16 *)v223 + 4);
            uint64_t v79 = *(uint64_t **)(a1 + 96);
            if (!v79) {
              goto LABEL_99;
            }
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v63 = 0;
          uint64_t v64 = (char *)(8 * v59);
          *(void *)(8 * v59) = v14;
          uint64_t v53 = 8 * v59 + 8;
          if (v52 != v58) {
            goto LABEL_71;
          }
        }
        a1 = v219;
        *(void *)(v15 + 88) = v64;
        *(void *)(v15 + 96) = v53;
        *(void *)(v15 + 104) = &v63[8 * v62];
        if (v52) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_112:
      unsigned int v78 = *((unsigned __int16 *)v223 + 4);
      uint64_t v79 = *(uint64_t **)(a1 + 96);
      if (!v79)
      {
LABEL_99:
        unint64_t v80 = v49;
        unint64_t v81 = (unint64_t)v49 >> 6;
        if (*(void *)(a1 + 392) <= (unint64_t)v49) {
          goto LABEL_100;
        }
        goto LABEL_118;
      }
LABEL_113:
      uint64_t v88 = *v79;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v79[1] - *v79) >> 4);
      if (v89 <= v217)
      {
        sub_A3F0F0((uint64_t)v79, v214 - v89);
        uint64_t v88 = *v79;
      }
      signed int v90 = (void *)(v88 + 48 * v217);
      unint64_t v80 = v49;
      if (v90[1] <= (unint64_t)v49
        || ((*(void *)(*v90 + (((unint64_t)v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
      {
        goto LABEL_218;
      }
      unint64_t v81 = (unint64_t)v49 >> 6;
      if (*(void *)(a1 + 392) <= (unint64_t)v49)
      {
LABEL_100:
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        goto LABEL_170;
      }
LABEL_118:
      uint64_t v91 = *(void *)(a1 + 384);
      uint64_t v92 = *(void *)(v91 + 8 * v81);
      uint64_t v93 = 1 << v80;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if ((v92 & (1 << v80)) == 0) {
        goto LABEL_170;
      }
      unsigned int v94 = *(unsigned char **)(a1 + 368);
      unint64_t v95 = (v94 - v82) >> 2;
      if (v95 <= v80)
      {
        unsigned int v213 = v78;
        unint64_t v96 = v49 + 1;
        unint64_t v97 = v96 - v95;
        if (v96 <= v95)
        {
          a1 = v219;
          unsigned int v78 = v213;
          if (v96 < v95) {
            *(void *)(v219 + 368) = &v82[4 * v96];
          }
        }
        else
        {
          a1 = v219;
          uint64_t v98 = *(void *)(v219 + 376);
          if (v97 <= (v98 - (uint64_t)v94) >> 2)
          {
            memset(v94, 255, 4 * v97);
            unint64_t v96 = v49 + 1;
            *(void *)(v219 + 368) = &v94[4 * v97];
            unsigned int v78 = v213;
          }
          else
          {
            uint64_t v99 = v98 - (void)v82;
            uint64_t v100 = v99 >> 1;
            if (v99 >> 1 <= v96) {
              uint64_t v100 = v49 + 1;
            }
            BOOL v101 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v101) {
              unint64_t v102 = v100;
            }
            if (v102 >> 62) {
LABEL_275:
            }
              sub_188D718();
            uint64_t v209 = 4 * v102;
            v207 = operator new(4 * v102);
            uint64_t v206 = 4 * v97;
            memset(&v207[4 * v95], 255, 4 * v97);
            if (v94 == v82)
            {
              int v105 = &v207[4 * v95];
              unint64_t v103 = v105;
              a1 = v219;
              unsigned int v78 = v213;
              uint64_t v106 = v209;
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              uint64_t v108 = v207;
            }
            else
            {
              unint64_t v103 = &v207[4 * v95];
              unint64_t v104 = v94 - 4 - v82;
              a1 = v219;
              unsigned int v78 = v213;
              if (v104 < 0x2C)
              {
                int v105 = &v207[4 * v95];
                uint64_t v106 = v209;
                unint64_t v96 = v49 + 1;
                uint64_t v107 = v206;
                uint64_t v108 = v207;
                goto LABEL_140;
              }
              uint64_t v108 = v207;
              uint64_t v106 = v209;
              int v105 = &v207[4 * v95];
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              if ((unint64_t)(v82 - v207) < 0x20) {
                goto LABEL_281;
              }
              uint64_t v109 = (v104 >> 2) + 1;
              uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
              int v111 = &v94[-v110];
              int v105 = &v103[-v110];
              unsigned int v112 = &v207[4 * v95 - 16];
              int v113 = (long long *)(v94 - 16);
              uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v115 = *v113;
                *(v112 - 1) = *(v113 - 1);
                *unsigned int v112 = v115;
                v112 -= 2;
                v113 -= 2;
                v114 -= 8;
              }
              while (v114);
              unsigned int v94 = v111;
              if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_281:
                do
                {
LABEL_140:
                  int v116 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v105 - 1) = v116;
                  v105 -= 4;
                }
                while (v94 != v82);
              }
            }
            *(void *)(a1 + 360) = v105;
            *(void *)(a1 + 368) = &v103[v107];
            *(void *)(a1 + 376) = &v108[v106];
            if (v82)
            {
              operator delete(v82);
              unint64_t v96 = v49 + 1;
            }
          }
        }
        sub_A3E96C((uint64_t)v215, v96, 0);
        uint64_t v91 = *v215;
        uint64_t v92 = *(void *)(*v215 + 8 * v81);
      }
      if ((v92 & v93) != 0)
      {
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        if (*(_DWORD *)&v82[4 * v80] <= v78) {
          goto LABEL_218;
        }
LABEL_170:
        long long v138 = *(unsigned char **)(a1 + 368);
        unint64_t v139 = (v138 - v82) >> 2;
        if (v139 <= v80)
        {
          unint64_t v140 = v49 + 1;
          unint64_t v141 = v140 - v139;
          if (v140 <= v139)
          {
            a1 = v219;
            if (v140 < v139) {
              *(void *)(v219 + 368) = &v82[4 * v140];
            }
          }
          else
          {
            uint64_t v142 = *(void *)(v219 + 376);
            if (v141 <= (v142 - (uint64_t)v138) >> 2)
            {
              memset(v138, 255, 4 * v141);
              *(void *)(v219 + 368) = &v138[4 * v141];
              a1 = v219;
            }
            else
            {
              uint64_t v143 = v142 - (void)v82;
              uint64_t v144 = v143 >> 1;
              if (v143 >> 1 <= v140) {
                uint64_t v144 = v49 + 1;
              }
              BOOL v101 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v101) {
                unint64_t v145 = v144;
              }
              if (v145 >> 62) {
                goto LABEL_275;
              }
              *(void *)unint64_t v211 = 4 * v145;
              v210 = operator new(4 * v145);
              uint64_t v208 = 4 * v141;
              memset(&v210[4 * v139], 255, 4 * v141);
              if (v138 == v82)
              {
                v148 = &v210[4 * v139];
                a1 = v219;
                v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = v148;
                uint64_t v151 = v208;
              }
              else
              {
                unint64_t v146 = v138 - 4 - v82;
                a1 = v219;
                if (v146 < 0x2C)
                {
                  v147 = &v210[4 * v139];
                  v148 = v147;
                  v150 = v210;
                  uint64_t v149 = *(void *)v211;
                  uint64_t v151 = v208;
                  goto LABEL_189;
                }
                v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = &v210[4 * v139];
                v148 = v147;
                uint64_t v151 = v208;
                if ((unint64_t)(v82 - v210) < 0x20) {
                  goto LABEL_282;
                }
                uint64_t v152 = (v146 >> 2) + 1;
                uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v154 = &v138[-v153];
                v148 = &v147[-v153];
                uint64_t v155 = &v210[4 * v139 - 16];
                v156 = (long long *)(v138 - 16);
                uint64_t v157 = v152 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v158 = *v156;
                  *(v155 - 1) = *(v156 - 1);
                  _OWORD *v155 = v158;
                  v155 -= 2;
                  v156 -= 2;
                  v157 -= 8;
                }
                while (v157);
                long long v138 = v154;
                if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_282:
                  do
                  {
LABEL_189:
                    int v159 = *((_DWORD *)v138 - 1);
                    v138 -= 4;
                    *((_DWORD *)v148 - 1) = v159;
                    v148 -= 4;
                  }
                  while (v138 != v82);
                }
              }
              *(void *)(a1 + 360) = v148;
              *(void *)(a1 + 368) = &v147[v151];
              *(void *)(a1 + 376) = &v150[v149];
              if (v82) {
                operator delete(v82);
              }
            }
          }
          sub_A3E96C((uint64_t)v215, v49 + 1, 0);
        }
        uint64_t v160 = *(void *)(*v215 + 8 * v81);
        if ((v160 & (1 << v80)) != 0) {
          goto LABEL_217;
        }
        *(void *)(*v215 + 8 * v81) = v160 | (1 << v80);
        unint64_t v162 = *(char **)(a1 + 416);
        unint64_t v161 = *(void *)(a1 + 424);
        if ((unint64_t)v162 < v161)
        {
          *(_DWORD *)unint64_t v162 = v49;
          uint64_t v163 = (uint64_t)(v162 + 4);
          goto LABEL_216;
        }
        unint64_t v164 = (char *)*v212;
        uint64_t v165 = v162 - (unsigned char *)*v212;
        uint64_t v166 = v165 >> 2;
        unint64_t v167 = (v165 >> 2) + 1;
        if (v167 >> 62) {
LABEL_277:
        }
          sub_2E00();
        uint64_t v168 = v161 - (void)v164;
        if (v168 >> 1 > v167) {
          unint64_t v167 = v168 >> 1;
        }
        if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v167;
        }
        if (v169)
        {
          if (v169 >> 62) {
            goto LABEL_275;
          }
          v170 = operator new(4 * v169);
          v171 = (unsigned int *)&v170[4 * v166];
          unsigned int *v171 = v49;
          uint64_t v163 = (uint64_t)(v171 + 1);
          if (v162 != v164)
          {
LABEL_205:
            unint64_t v172 = v162 - 4 - v164;
            if (v172 < 0x2C)
            {
              a1 = v219;
              goto LABEL_213;
            }
            unint64_t v173 = v162 - &v170[v165];
            a1 = v219;
            if (v173 < 0x20) {
              goto LABEL_283;
            }
            uint64_t v174 = (v172 >> 2) + 1;
            uint64_t v175 = 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v176 = &v162[-v175];
            v171 = (unsigned int *)((char *)v171 - v175);
            uint64_t v177 = &v170[4 * v166 - 16];
            uint64_t v178 = v162 - 16;
            uint64_t v179 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v180 = *(_OWORD *)v178;
              *(v177 - 1) = *((_OWORD *)v178 - 1);
              *uint64_t v177 = v180;
              v177 -= 2;
              v178 -= 32;
              v179 -= 8;
            }
            while (v179);
            unint64_t v162 = v176;
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_283:
              do
              {
LABEL_213:
                unsigned int v181 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *--v171 = v181;
              }
              while (v162 != v164);
            }
LABEL_214:
            *(void *)(a1 + 408) = v171;
            *(void *)(a1 + 416) = v163;
            *(void *)(a1 + 424) = &v170[4 * v169];
            if (v164) {
              operator delete(v164);
            }
LABEL_216:
            *(void *)(a1 + 416) = v163;
LABEL_217:
            *(_DWORD *)(*(void *)(a1 + 360) + 4 * v80) = v78;
            goto LABEL_218;
          }
        }
        else
        {
          v170 = 0;
          v171 = (unsigned int *)(4 * v166);
          *(_DWORD *)(4 * v166) = v49;
          uint64_t v163 = 4 * v166 + 4;
          if (v162 != v164) {
            goto LABEL_205;
          }
        }
        a1 = v219;
        goto LABEL_214;
      }
      *(void *)(v91 + 8 * v81) = v92 | v93;
      unint64_t v118 = *(char **)(a1 + 416);
      unint64_t v117 = *(void *)(a1 + 424);
      if ((unint64_t)v118 < v117)
      {
        *(_DWORD *)unint64_t v118 = v49;
        uint64_t v119 = (uint64_t)(v118 + 4);
        goto LABEL_169;
      }
      uint64_t v120 = (char *)*v212;
      uint64_t v121 = v118 - (unsigned char *)*v212;
      uint64_t v122 = v121 >> 2;
      unint64_t v123 = (v121 >> 2) + 1;
      if (v123 >> 62) {
        goto LABEL_277;
      }
      uint64_t v124 = v117 - (void)v120;
      if (v124 >> 1 > v123) {
        unint64_t v123 = v124 >> 1;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v123;
      }
      if (v125)
      {
        if (v125 >> 62) {
          goto LABEL_275;
        }
        uint64_t v126 = operator new(4 * v125);
        uint64_t v127 = (unsigned int *)&v126[4 * v122];
        unsigned int *v127 = v49;
        uint64_t v119 = (uint64_t)(v127 + 1);
        if (v118 == v120)
        {
LABEL_161:
          a1 = v219;
          goto LABEL_167;
        }
      }
      else
      {
        uint64_t v126 = 0;
        uint64_t v127 = (unsigned int *)(4 * v122);
        *(_DWORD *)(4 * v122) = v49;
        uint64_t v119 = 4 * v122 + 4;
        if (v118 == v120) {
          goto LABEL_161;
        }
      }
      unint64_t v128 = v118 - 4 - v120;
      if (v128 < 0x2C)
      {
        a1 = v219;
        do
        {
LABEL_166:
          unsigned int v137 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--uint64_t v127 = v137;
        }
        while (v118 != v120);
        goto LABEL_167;
      }
      unint64_t v129 = v118 - &v126[v121];
      a1 = v219;
      if (v129 < 0x20) {
        goto LABEL_166;
      }
      uint64_t v130 = (v128 >> 2) + 1;
      uint64_t v131 = 4 * (v130 & 0x7FFFFFFFFFFFFFF8);
      long long v132 = &v118[-v131];
      uint64_t v127 = (unsigned int *)((char *)v127 - v131);
      int v133 = &v126[4 * v122 - 16];
      unint64_t v134 = v118 - 16;
      uint64_t v135 = v130 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v136 = *(_OWORD *)v134;
        *(v133 - 1) = *((_OWORD *)v134 - 1);
        _OWORD *v133 = v136;
        v133 -= 2;
        v134 -= 32;
        v135 -= 8;
      }
      while (v135);
      unint64_t v118 = v132;
      if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_166;
      }
LABEL_167:
      *(void *)(a1 + 408) = v127;
      *(void *)(a1 + 416) = v119;
      *(void *)(a1 + 424) = &v126[4 * v125];
      if (v120) {
        operator delete(v120);
      }
LABEL_169:
      *(void *)(a1 + 416) = v119;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if (*(_DWORD *)&v82[4 * v80] > v78) {
        goto LABEL_170;
      }
LABEL_218:
      unint64_t v13 = (unint64_t)v224;
      unint64_t v12 = v223 + 2;
      v223 = v12;
      if (v12 == v224)
      {
        unsigned int v182 = v221 + 2;
        v221 = v182;
        if ((unint64_t)v182 >= v222) {
          break;
        }
        while (1)
        {
          unint64_t v12 = (void *)*v182;
          unint64_t v13 = v182[1];
          if (*v182 != v13) {
            break;
          }
          v182 += 2;
          v221 = v182;
          if ((unint64_t)v182 >= v222) {
            goto LABEL_6;
          }
        }
        v223 = (void *)*v182;
        v224 = (void *)v13;
        if ((unint64_t)v12 < v13)
        {
          while (1)
          {
LABEL_230:
            if (!v226)
            {
              uint64_t v183 = v220[0];
              uint64_t v184 = *v12;
              uint64_t v185 = *(void *)(v220[0] + 4136);
              if (sub_C259C0(v185 + 3896))
              {
                if (*(void *)(v185 + 3944))
                {
                  unint64_t v186 = __ROR8__(v184, 32);
                  if (!sub_A10E20((void *)(v183 + 4136), SHIDWORD(v186)))
                  {
                    unsigned int v187 = *(void **)(*(void *)(v183 + 4136) + 3944);
                    int8x8_t v188 = (int8x8_t)v187[1];
                    if (v188)
                    {
                      unint64_t v189 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v186 ^ (v186 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v186 ^ (v186 >> 33))) >> 33));
                      unint64_t v190 = v189 ^ (v189 >> 33);
                      uint8x8_t v191 = (uint8x8_t)vcnt_s8(v188);
                      v191.i16[0] = vaddlv_u8(v191);
                      if (v191.u32[0] > 1uLL)
                      {
                        unint64_t v192 = v190;
                        if (v190 >= *(void *)&v188) {
                          unint64_t v192 = v190 % *(void *)&v188;
                        }
                      }
                      else
                      {
                        unint64_t v192 = (*(void *)&v188 - 1) & v190;
                      }
                      uint64_t v195 = *(uint64_t ***)(*v187 + 8 * v192);
                      if (v195)
                      {
                        v196 = *v195;
                        if (v196)
                        {
                          if (v191.u32[0] < 2uLL)
                          {
                            uint64_t v197 = *(void *)&v188 - 1;
                            while (1)
                            {
                              uint64_t v201 = v196[1];
                              if (v190 == v201)
                              {
                                if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186) {
                                  goto LABEL_227;
                                }
                              }
                              else if ((v201 & v197) != v192)
                              {
                                goto LABEL_266;
                              }
                              v196 = (uint64_t *)*v196;
                              if (!v196) {
                                goto LABEL_266;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v199 = v196[1];
                            if (v190 == v199)
                            {
                              if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186)
                              {
LABEL_227:
                                unint64_t v12 = v223;
                                a1 = v219;
                                goto LABEL_228;
                              }
                            }
                            else
                            {
                              if (v199 >= *(void *)&v188) {
                                v199 %= *(void *)&v188;
                              }
                              if (v199 != v192) {
                                break;
                              }
                            }
                            v196 = (uint64_t *)*v196;
                          }
                          while (v196);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_266:
            if (v225) {
              break;
            }
            unsigned int v202 = sub_C2599C(v220[0] + 3896);
            unint64_t v12 = v223;
            a1 = v219;
            if (v202 >= *((unsigned __int8 *)v223 + 14))
            {
              if (v225) {
                goto LABEL_8;
              }
              char v203 = sub_51D60((unsigned __int8 *)(v220[0] + 3896));
              unint64_t v12 = v223;
              if ((v203 & 1) != 0 || (*((unsigned char *)v223 + 15) & 1) == 0) {
                goto LABEL_8;
              }
            }
LABEL_228:
            v12 += 2;
            v223 = v12;
            if (v12 == v224)
            {
              v193 = v221 + 2;
              v221 = v193;
              if ((unint64_t)v193 >= v222) {
                goto LABEL_8;
              }
              while (1)
              {
                unint64_t v12 = (void *)*v193;
                unint64_t v194 = v193[1];
                if (*v193 != v194) {
                  break;
                }
                v193 += 2;
                v221 = v193;
                if ((unint64_t)v193 >= v222) {
                  goto LABEL_6;
                }
              }
              v223 = (void *)*v193;
              v224 = (void *)v194;
              if ((unint64_t)v12 >= v194) {
                goto LABEL_8;
              }
            }
            else if (v12 >= v224)
            {
              goto LABEL_8;
            }
          }
          unint64_t v12 = v223;
          a1 = v219;
          goto LABEL_8;
        }
      }
      else if (v12 < v224)
      {
        goto LABEL_230;
      }
    }
LABEL_6:
    unint64_t v10 = v218 + 1;
    if (v218 + 1 != v216) {
      continue;
    }
    break;
  }
LABEL_273:
  double result = sub_72688((uint64_t)v227) + *(double *)(a1 + 608);
  *(double *)(a1 + 608) = result;
  return result;
}

void sub_A3E6F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A3E704(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A3E718(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v2 = sub_A4066C(a1);
  uint64_t v3 = sub_A407A8(a1) + v2;
  unint64_t v15 = v3 + sub_A409C0(*(uint64_t **)(a1 + 40));
  BOOL v4 = v15 > *(void *)a1;
  if (v15 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v13);
    unint64_t v5 = sub_188FC78(v13, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v6 = (void *)sub_38EC58((uint64_t)v5, (unint64_t *)a1);
    uint64_t v7 = sub_188FC78(v6, (uint64_t)" in directional SPA (", 21);
    unint64_t v8 = (void *)sub_38EC58((uint64_t)v7, &v15);
    unsigned int v9 = sub_188FC78(v8, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4;
}

void sub_A3E920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A3E96C(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
    return;
  }
  int v6 = __len;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    long long __dst = 0;
    long long v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    unint64_t v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&__dst, v11);
    char v12 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)&long long v23 = v13 + v5;
    unint64_t v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      unint64_t v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40) {
        memmove(__dst, v12, 8 * v14);
      }
      v15 += v14;
      uint64_t v16 = v13 & 0x3F;
      if (v16) {
        *unint64_t v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((void *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      }
      char v12 = *(void **)a1;
    }
    *(void *)a1 = __dst;
    long long __dst = v12;
    long long v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    long long v23 = v17;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    unint64_t v15 = (void *)(*(void *)a1 + 8 * (v4 >> 6));
    uint64_t v16 = *(void *)(a1 + 8) & 0x3FLL;
    *(void *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v18 = v5;
        }
        else {
          unint64_t v18 = (64 - v16);
        }
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        memset(v15, 255, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v21 = v5;
        }
        else {
          unint64_t v21 = (64 - v16);
        }
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        bzero(v15, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_A3EBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A3EBD8(uint64_t a1, unsigned int a2, int a3, unsigned int a4, signed int a5)
{
  LODWORD(v7) = a3;
  int v55 = a3;
  unint64_t v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    unint64_t v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)v7
      || ((*(void *)(*v14 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    unint64_t v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *(unint64_t **)(a1 + 152);
    unint64_t v23 = *(unsigned int *)(a1 + 432);
    if (*v22 <= v23)
    {
      *uint64_t v22 = v23 + 1;
      unint64_t v24 = v22[2];
      unint64_t v25 = v22[1] * (v23 + 1);
      unint64_t v26 = (uint64_t)(v22[3] - v24) >> 2;
      if (v25 <= v26)
      {
        if (v25 < v26) {
          v22[3] = v24 + 4 * v25;
        }
      }
      else
      {
        sub_5BBEE0((uint64_t)(v22 + 2), v25 - v26);
      }
    }
    unint64_t v21 = (int *)(v22[2] + 4 * (a4 + v22[1] * v23));
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  int v27 = *v21;
  if (v27 != 0x7FFFFFFF)
  {
    int v28 = *(_DWORD *)(a1 + 28);
    int v29 = v28 / 10;
    int v30 = v28 % 10;
    char v31 = v28 < 0 ? -5 : 5;
    if ((int)(v29 + v27 + (((103 * (char)(v31 + v30)) >> 15) & 1) + ((103 * (char)(v31 + v30)) >> 10)) <= a5) {
      return 0;
    }
  }
LABEL_22:
  if (!*(unsigned char *)(a1 + 25))
  {
    unint64_t v7 = v7;
    uint64_t v39 = *(void **)(a1 + 152);
    uint64_t v40 = a4;
    if (*v39 > (unint64_t)v7) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  uint64_t v32 = a1 + 24 * a2;
  uint64_t v33 = *(void *)(v32 + 168);
  uint64_t v34 = *(void *)(v32 + 176);
  uint64_t v35 = (uint64_t *)(v32 + 168);
  unint64_t v7 = v7;
  unint64_t v36 = (v34 - v33) >> 2;
  if (v36 <= v7)
  {
    sub_5BBEE0((uint64_t)v35, v7 - v36 + 1);
    uint64_t v33 = *v35;
  }
  signed int v37 = *(_DWORD *)(v33 + 4 * v7);
  if (v37 != 0x7FFFFFFF && v37 <= a5) {
    return 0;
  }
  uint64_t v39 = *(void **)(a1 + 152);
  uint64_t v40 = a4;
  if (*v39 <= (unint64_t)v7)
  {
LABEL_32:
    void *v39 = v7 + 1;
    uint64_t v41 = v39[2];
    unint64_t v42 = v39[1] * (v7 + 1);
    unint64_t v43 = (v39[3] - v41) >> 2;
    if (v42 <= v43)
    {
      if (v42 < v43) {
        v39[3] = v41 + 4 * v42;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v39 + 2), v42 - v43);
    }
  }
LABEL_36:
  uint64_t v44 = v39[2];
  uint64_t v45 = v40 + v39[1] * v7;
  signed int v46 = *(_DWORD *)(v44 + 4 * v45);
  if (v46 != 0x7FFFFFFF && v46 <= a5) {
    return 0;
  }
  unsigned int v48 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v49 = a1 + 24 * a2;
    uint64_t v50 = *(void *)(v49 + 168);
    uint64_t v51 = *(void *)(v49 + 176);
    uint64_t v52 = (uint64_t *)(v49 + 168);
    unint64_t v53 = (v51 - v50) >> 2;
    if (v53 <= v7)
    {
      sub_5BBEE0((uint64_t)v52, v7 - v53 + 1);
      uint64_t v50 = *v52;
    }
    *(_DWORD *)(v50 + 4 * v7) = a5;
  }
  *(_DWORD *)(v44 + 4 * v45) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v48 + 216), &v55);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v55);
  }
  return 1;
}

void sub_A3EF14(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4 = *a2;
  if (a1[1] <= v4)
  {
    sub_A3E96C((uint64_t)a1, (v4 + 1), 0);
    unint64_t v4 = *a2;
  }
  uint64_t v5 = *a1;
  if (((*(void *)(*a1 + ((v4 >> 3) & 0x1FFFFFF8)) >> v4) & 1) == 0)
  {
    unint64_t v7 = (char *)a1[4];
    unint64_t v6 = a1[5];
    if ((unint64_t)v7 < v6)
    {
      *(_DWORD *)unint64_t v7 = v4;
      uint64_t v8 = (uint64_t)(v7 + 4);
LABEL_25:
      a1[4] = v8;
      *(void *)(v5 + (((unint64_t)*a2 >> 3) & 0x1FFFFFF8)) |= 1 << *a2;
      return;
    }
    unsigned int v9 = (char *)a1[3];
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_188D718();
      }
      unint64_t v14 = operator new(4 * v13);
      uint64_t v15 = &v14[4 * v10];
      uint64_t v16 = &v14[4 * v13];
      *uint64_t v15 = v4;
      uint64_t v8 = (uint64_t)(v15 + 1);
      int64_t v17 = v7 - v9;
      if (v7 == v9) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = (_DWORD *)(4 * v10);
      uint64_t v16 = 0;
      *(_DWORD *)(4 * v10) = v4;
      uint64_t v8 = 4 * v10 + 4;
      int64_t v17 = v7 - v9;
      if (v7 == v9)
      {
LABEL_23:
        a1[3] = (uint64_t)v15;
        a1[4] = v8;
        a1[5] = (uint64_t)v16;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *a1;
        }
        goto LABEL_25;
      }
    }
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_31;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_31;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v21 = &v7[-v20];
    uint64_t v15 = (_DWORD *)((char *)v15 - v20);
    uint64_t v22 = &v14[4 * v10 - 16];
    unint64_t v23 = v7 - 16;
    uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    unint64_t v7 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_31:
      do
      {
        int v26 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--uint64_t v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_23;
  }
}

void sub_A3F0F0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(char **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        sub_188D718();
      }
      unint64_t v11 = (char *)operator new(48 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v13 = &v11[48 * v7];
    unint64_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_27;
    }
    uint64_t v17 = 0;
    do
    {
      unint64_t v18 = &v13[v17];
      uint64_t v19 = &v5[v17];
      uint64_t v20 = *(void *)&v5[v17 - 40];
      *((void *)v18 - 6) = *(void *)&v5[v17 - 48];
      *((void *)v18 - 5) = v20;
      *((void *)v18 - 4) = *(void *)&v5[v17 - 32];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
      *((void *)v18 - 1) = *(void *)&v5[v17 - 8];
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      v17 -= 48;
    }
    while (&v5[v17] != v6);
    unint64_t v21 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    *(void *)a1 = &v13[v17];
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v21)
    {
      do
      {
        uint64_t v22 = (void *)*((void *)v5 - 3);
        if (v22)
        {
          *((void *)v5 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v23 = (void *)*((void *)v5 - 6);
        if (v23) {
          operator delete(v23);
        }
        v5 -= 48;
      }
      while (v5 != v21);
      uint64_t v5 = v21;
    }
    if (v5)
    {
LABEL_27:
      operator delete(v5);
    }
  }
}

uint64_t sub_A3F32C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_A3F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_A3F53C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_A3F66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_A3F74C(void *a1, _DWORD *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = (uint64_t)(a1[1] - *a1) >> 2;
  if (v5 <= v4)
  {
    unint64_t v6 = (v4 + 1);
    BOOL v7 = v6 >= v5;
    unint64_t v8 = v6 - v5;
    if (v8 != 0 && v7)
    {
      sub_446A04((uint64_t)a1, v8);
      unint64_t v6 = (*a2 + 1);
    }
    else if (!v7)
    {
      a1[1] = *a1 + 4 * v6;
    }
    sub_A3E96C((uint64_t)(a1 + 3), v6, 0);
    unint64_t v4 = *a2;
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = *(void *)(v9 + 8 * (v4 >> 6));
  if (((1 << v4) & v10) == 0)
  {
    *(void *)(v9 + 8 * (v4 >> 6)) = (1 << v4) | v10;
    size_t v12 = (char *)a1[7];
    unint64_t v11 = a1[8];
    if ((unint64_t)v12 < v11)
    {
      *(_DWORD *)size_t v12 = v4;
      uint64_t v13 = (uint64_t)(v12 + 4);
LABEL_30:
      a1[7] = v13;
      unint64_t v4 = *a2;
      return *a1 + 4 * v4;
    }
    unint64_t v14 = (char *)a1[6];
    uint64_t v15 = (v12 - v14) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_188D718();
      }
      long long v19 = operator new(4 * v18);
      std::string::size_type v20 = &v19[4 * v15];
      unint64_t v21 = &v19[4 * v18];
      _DWORD *v20 = v4;
      uint64_t v13 = (uint64_t)(v20 + 1);
      int64_t v22 = v12 - v14;
      if (v12 == v14) {
        goto LABEL_28;
      }
    }
    else
    {
      long long v19 = 0;
      std::string::size_type v20 = (_DWORD *)(4 * v15);
      unint64_t v21 = 0;
      *(_DWORD *)(4 * v15) = v4;
      uint64_t v13 = 4 * v15 + 4;
      int64_t v22 = v12 - v14;
      if (v12 == v14)
      {
LABEL_28:
        a1[6] = v20;
        a1[7] = v13;
        a1[8] = v21;
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_30;
      }
    }
    unint64_t v23 = v22 - 4;
    if (v23 < 0x2C) {
      goto LABEL_36;
    }
    if ((unint64_t)(v14 - v19) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v24 = (v23 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    int v26 = &v12[-v25];
    std::string::size_type v20 = (_DWORD *)((char *)v20 - v25);
    int v27 = &v19[4 * v15 - 16];
    int v28 = v12 - 16;
    uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *int v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    size_t v12 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        int v31 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *--std::string::size_type v20 = v31;
      }
      while (v12 != v14);
    }
    goto LABEL_28;
  }
  return *a1 + 4 * v4;
}

void sub_A3F948(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  v135[0] = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v116 = *(_DWORD *)sub_A3F74C((void *)(v4 + 360), v135);
  uint64_t v117 = v5;
  sub_A40514(&v133, *(void *)(v4 + 40), v5);
  unint64_t v6 = v133;
  if ((unint64_t)v133 < v134)
  {
    uint64_t v7 = v4 + 464;
    int v114 = ~a2;
    unsigned int v115 = a2;
    uint64_t v119 = a2 - 1;
    uint64_t v122 = v4 + 464;
    uint64_t v120 = v4;
    while (1)
    {
      *(double *)(v4 + 664) = *(double *)(v4 + 664) + 1.0;
      uint64_t v121 = *(unsigned int *)v6;
      sub_A1E9A0((uint64_t)&v123, *(void *)(v4 + 40), v117, v116, 0, 1);
      unint64_t v8 = v127;
      if ((unint64_t)v127 >= v126 && (unint64_t)v127 < v128) {
        break;
      }
LABEL_3:
      unint64_t v6 = v133 + 4;
      int v133 = v6;
      if ((unint64_t)v6 >= v134) {
        return;
      }
    }
    char v10 = 0;
    while (1)
    {
      unint64_t v12 = __ROR8__(*v8, 32);
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_65;
      }
      if (*(void *)(v13 + 40)) {
        break;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_65;
        }
      }
LABEL_53:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unint64_t v47 = *(unsigned int *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_55;
        }
        goto LABEL_115;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(v4 + 48), 1))
      {
LABEL_31:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_105;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_87;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_105:
          }
            uint64_t v39 = v33;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555) {
            goto LABEL_180;
          }
        }
        else
        {
          uint64_t v58 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v58) & v29;
            uint64_t v59 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v59;
            unsigned int v35 = v59[1];
            ++v58;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_105;
            }
          }
LABEL_87:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unint64_t v47 = *(unsigned int *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_55;
            }
            goto LABEL_115;
          }
          uint64_t v39 = -1;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555)
          {
LABEL_180:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((unint64_t v74 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v74[1])
            ? (BOOL v75 = *(_DWORD *)(v13 + 32) == *v74)
            : (BOOL v75 = 0),
              v75))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v53 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v73 + 1;
          uint64_t v53 = 3 * v39;
        }
        goto LABEL_114;
      }
LABEL_66:
      uint64_t v50 = *(void *)(v13 + 40);
      uint64_t v49 = *(void *)(v13 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_180;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v50
        && ((uint64_t v51 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v13 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v13 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v25;
LABEL_114:
      uint64_t v76 = 4 * v53;
      uint64_t v77 = v30 + v76;
      *(void *)uint64_t v77 = v12;
      *(_DWORD *)(v77 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v76;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      if (v47 != -1)
      {
LABEL_55:
        if (!sub_BD5C18(v7, v47, v12)) {
          goto LABEL_139;
        }
        goto LABEL_56;
      }
LABEL_115:
      int v78 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v78 + 1;
      *(_DWORD *)(v46 + 8) = v78;
      unint64_t v80 = *(unint64_t **)(v13 + 96);
      unint64_t v79 = *(void *)(v13 + 104);
      if ((unint64_t)v80 < v79)
      {
        unint64_t *v80 = v12;
        uint64_t v81 = (uint64_t)(v80 + 1);
        goto LABEL_138;
      }
      uint64_t v82 = (unint64_t **)(v13 + 88);
      uint64_t v83 = *(char **)(v13 + 88);
      uint64_t v84 = ((char *)v80 - v83) >> 3;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v86 = v79 - (void)v83;
      if (v86 >> 2 > v85) {
        unint64_t v85 = v86 >> 2;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v85)
      {
        if (v85 >> 61) {
          sub_188D718();
        }
        unint64_t v87 = v85;
        uint64_t v88 = (char *)operator new(8 * v85);
        uint64_t v82 = (unint64_t **)(v13 + 88);
        unint64_t v89 = (unint64_t *)&v88[8 * v84];
        *unint64_t v89 = v12;
        uint64_t v81 = (uint64_t)(v89 + 1);
        if (v80 == (unint64_t *)v83)
        {
LABEL_128:
          *(void *)(v13 + 88) = v89;
          *(void *)(v13 + 96) = v81;
          *(void *)(v13 + 104) = &v88[8 * v87];
          if (!v80) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        unint64_t v89 = (unint64_t *)(8 * v84);
        *(void *)(8 * v84) = v12;
        uint64_t v81 = 8 * v84 + 8;
        if (v80 == (unint64_t *)v83) {
          goto LABEL_128;
        }
      }
      unint64_t v90 = (char *)(v80 - 1) - v83;
      if (v90 < 0x58) {
        goto LABEL_185;
      }
      if ((unint64_t)(v83 - v88) < 0x20) {
        goto LABEL_185;
      }
      uint64_t v91 = (v90 >> 3) + 1;
      uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v93 = &v80[v92 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v89 = (unint64_t *)((char *)v89 - v92);
      unsigned int v94 = &v88[8 * v84 - 16];
      unint64_t v95 = v80 - 2;
      uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v97 = *(_OWORD *)v95;
        *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
        *(_OWORD *)unsigned int v94 = v97;
        v94 -= 32;
        v95 -= 4;
        v96 -= 4;
      }
      while (v96);
      unint64_t v80 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_185:
        do
        {
          unint64_t v98 = *--v80;
          *--unint64_t v89 = v98;
        }
        while (v80 != (unint64_t *)v83);
      }
      unint64_t v80 = *v82;
      *(void *)(v13 + 88) = v89;
      *(void *)(v13 + 96) = v81;
      *(void *)(v13 + 104) = &v88[8 * v87];
      if (!v80) {
        goto LABEL_137;
      }
LABEL_136:
      operator delete(v80);
LABEL_137:
      uint64_t v4 = v120;
LABEL_138:
      *(void *)(v13 + 96) = v81;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      uint64_t v7 = v122;
      if (!sub_BD5C18(v122, *(_DWORD *)(v46 + 8), v12))
      {
LABEL_139:
        v10 &= *(unsigned char *)(v4 + 32) != 0;
        goto LABEL_145;
      }
LABEL_56:
      if (v10 & 1) != 0 && (*((unsigned char *)v127 + 15))
      {
        uint64_t v48 = v129;
        if (v129) {
          uint64_t v48 = *(unsigned int *)(v129 + 4 * (((unint64_t)v127 - v126) >> 4));
        }
        if ((v48 & v121) == 0)
        {
          uint64_t v61 = (unsigned int *)((char *)v125 + *(unsigned __int16 *)((char *)v125 - *v125 + 6));
          unint64_t v62 = (char *)v61 + *v61;
          uint64_t v63 = &v132;
          if (!v131) {
            uint64_t v63 = v130;
          }
          signed int v118 = *(_DWORD *)&v62[8 * *((_DWORD *)v130 + 1)
                               + 4
                               + 8 * (((unint64_t)v127 - v126) >> 4)]
               + *(_DWORD *)v63;
          uint64_t v64 = *(unint64_t **)(v4 + 64);
          if (v64)
          {
            if (*v64 > v47)
            {
              unsigned int v65 = 0;
              unsigned int v66 = *(_DWORD *)(v4 + 144) + v114;
              unsigned int v67 = v66;
              while (v65 <= v66)
              {
                signed int v68 = *(_DWORD *)sub_A3F53C(v64 + 2, v64[1] * v47 + v67);
                v65 += 2;
                v67 -= 2;
                if (v68 != 0x7FFFFFFF)
                {
                  if (v68 < v118) {
                    break;
                  }
                  goto LABEL_100;
                }
              }
            }
          }
          else
          {
LABEL_100:
            if (sub_A3EBD8(v4, 0, v47, v115, v118))
            {
              int v69 = *(unint64_t **)(v4 + 152);
              if (*v69 <= v47)
              {
                unint64_t *v69 = v47 + 1;
                unint64_t v70 = v69[2];
                unint64_t v71 = v69[1] * (v47 + 1);
                unint64_t v72 = (uint64_t)(v69[3] - v70) >> 2;
                if (v71 <= v72)
                {
                  if (v71 < v72) {
                    v69[3] = v70 + 4 * v71;
                  }
                }
                else
                {
                  sub_5BBEE0((uint64_t)(v69 + 2), v71 - v72);
                }
              }
            }
          }
        }
      }
      if ((*((unsigned char *)v127 + 15) & 2) == 0) {
        goto LABEL_145;
      }
      if (v129)
      {
        if (*(_DWORD *)(v129 + 4 * (((unint64_t)v127 - v126) >> 4)) != v121) {
          goto LABEL_145;
        }
      }
      else if (v121)
      {
        goto LABEL_145;
      }
      uint64_t v54 = *(unint64_t **)(v4 + 152);
      if (*v54 <= v47)
      {
        unint64_t *v54 = v47 + 1;
        unint64_t v55 = v54[2];
        unint64_t v56 = v54[1] * (v47 + 1);
        unint64_t v57 = (uint64_t)(v54[3] - v55) >> 2;
        if (v56 <= v57)
        {
          if (v56 < v57) {
            v54[3] = v55 + 4 * v56;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v54 + 2), v56 - v57);
        }
      }
      int v99 = *(_DWORD *)(v54[2] + 4 * (v119 + v54[1] * v47));
      if (v99 == 0x7FFFFFFF) {
        goto LABEL_145;
      }
      int v108 = *((_DWORD *)v127 + 2);
      signed int v109 = v108 + v99;
      if (v10)
      {
        uint64_t v110 = (unsigned int *)((char *)v125 + *(unsigned __int16 *)((char *)v125 - *v125 + 6));
        int v111 = (char *)v110 + *v110;
        unsigned int v112 = &v132;
        if (!v131) {
          unsigned int v112 = v130;
        }
        if (v109 < *(_DWORD *)&v111[8 * *((_DWORD *)v130 + 1)
                                   + 8
                                   + 8 * (((unint64_t)v127 - v126) >> 4)]
                  + *(_DWORD *)v112)
          sub_A40398(*(void *)(v4 + 40), (uint64_t)&v123, v109);
      }
      else if (v131)
      {
        if (!sub_A1F39C(*(void *)(v4 + 40), (uint64_t)&v123, v109, 1)) {
          goto LABEL_176;
        }
      }
      else if ((sub_A1F8B4((uint64_t)&v123, v108 + v99, 1) & 1) == 0)
      {
LABEL_176:
        char v10 = 0;
        goto LABEL_145;
      }
      char v10 = 1;
LABEL_145:
      unint64_t v100 = v126;
      unint64_t v8 = v127 + 2;
      v127 += 2;
      if (*(unsigned char *)(v123 + 16)) {
        BOOL v101 = v124 == 0;
      }
      else {
        BOOL v101 = 0;
      }
      if (v101 && (unint64_t)v8 >= v126 && (unint64_t)v8 < v128)
      {
        do
        {
          unint64_t v104 = __ROR8__(*v8, 32);
          if (HIDWORD(v104) == 1 && (v104 + 3) < 2) {
            break;
          }
          char v106 = sub_2AB7E4(**(void **)(v123 + 4120));
          unint64_t v100 = v126;
          unint64_t v8 = v127;
          if (v106) {
            break;
          }
          unint64_t v8 = v127 + 2;
          uint64_t v127 = v8;
        }
        while ((unint64_t)v8 >= v126 && (unint64_t)v8 < v128);
      }
      if ((unint64_t)v8 < v100 || (unint64_t)v8 >= v128) {
        goto LABEL_3;
      }
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_53;
      }
      uint64_t v20 = (v20 + v26) & v14;
      int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
        goto LABEL_31;
      }
      goto LABEL_66;
    }
LABEL_65:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
}

void sub_A40370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A40384(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A40398(uint64_t a1, uint64_t a2, signed int a3)
{
  uint64_t v4 = (_DWORD *)(a2 + 104);
  int v5 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 100);
  if (*(unsigned char *)(a2 + 96)) {
    int v9 = *(_DWORD *)(a2 + 104);
  }
  else {
    int v9 = 0x7FFFFFFF;
  }
  if (*(unsigned char *)(a2 + 96)) {
    char v10 = (int *)(a2 + 104);
  }
  else {
    char v10 = *(int **)(a2 + 64);
  }
  int v11 = *v10;
  unint64_t v12 = (unsigned int *)(*(void *)(a2 + 16) + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
  int v13 = *(unsigned int *)((char *)&v12[2 * *(_DWORD *)(v6 + 4)
                                     + 2
                                     + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                        + *v12);
  if (*(unsigned char *)(a2 + 96))
  {
    if (!sub_A1F39C(a1, a2, a3, 1)) {
      goto LABEL_15;
    }
  }
  else if (!sub_A1F8B4(a2, a3, 0))
  {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 96)) {
    uint64_t v14 = v4;
  }
  else {
    uint64_t v14 = *(_DWORD **)(a2 + 64);
  }
  unint64_t v15 = (unsigned int *)(*(void *)(a2 + 16) + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
  if ((int)(*(unsigned int *)((char *)&v15[2 * *(_DWORD *)(*(void *)(a2 + 64) + 4)
                                          + 2
                                          + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                             + *v15)
           + *v14) <= v13 + v11)
    return 1;
LABEL_15:
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 0xFFFFFFFC00000004 * ((v6 - v7) >> 2);
  if (!*(unsigned char *)(a2 + 96)) {
    return 0;
  }
  uint64_t result = 0;
  if (v5) {
    int v17 = v8;
  }
  else {
    int v17 = -1;
  }
  *(_DWORD *)(a2 + 100) = v17;
  *(_DWORD *)(a2 + 104) = v9;
  return result;
}

char **sub_A40514(char **a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = a3;
  *a1 = (char *)&unk_20F013C;
  a1[1] = (char *)&xmmword_20F0140;
  int v5 = sub_A10650((void *)(a2 + 4136), a3);
  uint64_t v6 = (int *)v5;
  uint64_t v7 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v7 >= 5u && (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) != 0) {
    int v9 = (unsigned int *)&v5[v8 + *(unsigned int *)&v5[v8]];
  }
  else {
    int v9 = 0;
  }
  char v10 = (int *)sub_A1139C(v9, v3);
  int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x17u && v11[11])
  {
    unint64_t v12 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v12 >= 5u && v12[2]) {
      int v13 = (char *)v6 + v12[2] + *(unsigned int *)((char *)v6 + v12[2]);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = 4 * v3;
    unint64_t v15 = &v13[v14 + 4 + *(unsigned int *)&v13[v14 + 4]];
    unint64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 >= 0x17u && (uint64_t v17 = *((unsigned __int16 *)v16 + 11)) != 0) {
      int v18 = &v15[v17 + *(unsigned int *)&v15[v17]];
    }
    else {
      int v18 = 0;
    }
    int v19 = v18 + 4;
    uint64_t v20 = (int *)((char *)v6
                + v12[2]
                + v14
                + *(unsigned int *)((char *)v6 + v12[2])
                + *(unsigned int *)((char *)v6 + v12[2] + v14 + *(unsigned int *)((char *)v6 + v12[2]) + 4)
                + 4);
    unint64_t v21 = (unsigned int *)((char *)v20 + *(unsigned __int16 *)((char *)v20 - *v20 + 22));
    unsigned int v22 = &v19[4 * *(unsigned int *)((char *)v21 + *v21)];
    *a1 = v19;
    a1[1] = v22;
  }
  return a1;
}

uint64_t sub_A4066C(uint64_t a1)
{
  uint64_t v21 = *(void *)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v14 = *(void *)(a1 + 256);
  uint64_t v15 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 280) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 304);
  uint64_t v16 = *(void *)(a1 + 336);
  uint64_t v17 = *(void *)(a1 + 288);
  uint64_t v4 = 8 * (*(void *)(a1 + 328) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 376);
  uint64_t v6 = *(void *)(a1 + 352);
  uint64_t v13 = *(void *)(a1 + 360);
  uint64_t v7 = *(void *)(a1 + 408);
  uint64_t v8 = 8 * (*(void *)(a1 + 400) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v9 = 8 * (*(void *)(a1 + 456) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v10 = *(void *)(a1 + 424);
  uint64_t result = v18
         + v21
         - (v22
          + v20)
         + v14
         + v15
         - v19
         + v3
         + v2
         - v17
         + v6
         + v4
         + v5
         - (v16
          + v13)
         + v8
         + v10
         - v7
         + sub_BD6170((void *)(a1 + 464))
         + v9;
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12)
  {
    if (*(unsigned char *)(a1 + 568)) {
      return result + *(void *)(v12 + 32) - *(void *)(v12 + 16);
    }
  }
  return result;
}

uint64_t sub_A407A8(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 104)
         - *(void *)(*(void *)(a1 + 48) + 88)
         + *(void *)(*(void *)(a1 + 56) + 104)
         + 12 * (*(void *)(*(void *)(a1 + 56) + 56) + *(void *)(*(void *)(a1 + 48) + 56))
         - *(void *)(*(void *)(a1 + 56) + 88);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    uint64_t result = result + *(void *)(v3 + 32) - *(void *)(v3 + 16);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    uint64_t v5 = (char *)*v4;
    uint64_t v7 = v4 + 1;
    uint64_t v6 = (char *)v4[1];
    uint64_t v8 = v7[1] - (void)v5;
    if (v5 != v6)
    {
      unint64_t v9 = v6 - v5 - 48;
      if (v9 >= 0x30)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v9 / 0x30 + 1;
        uint64_t v10 = &v5[48 * (v12 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v13 = v5 + 64;
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v8 = v8 + *(v13 - 3) + 8 * (*(v13 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v13 - 5);
          uint64_t v11 = v11 + v13[3] + 8 * (*v13 & 0x3FFFFFFFFFFFFFFLL) - v13[1];
          v13 += 12;
          v14 -= 2;
        }
        while (v14);
        v8 += v11;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFELL)) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = v5;
      }
      do
      {
        uint64_t v8 = v8 + *((void *)v10 + 5) + 8 * (*((void *)v10 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v10 + 3);
        v10 += 48;
      }
      while (v10 != v6);
    }
LABEL_11:
    result += v8;
  }
  uint64_t v15 = *(void **)(a1 + 96);
  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = (char *)*v15;
  uint64_t v18 = v15 + 1;
  uint64_t v17 = (char *)v15[1];
  uint64_t v19 = v18[1] - (void)v16;
  if (v16 != v17)
  {
    unint64_t v20 = v17 - v16 - 48;
    if (v20 >= 0x30)
    {
      uint64_t v22 = 0;
      unint64_t v23 = v20 / 0x30 + 1;
      uint64_t v21 = &v16[48 * (v23 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v24 = v16 + 64;
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v19 = v19 + *(v24 - 3) + 8 * (*(v24 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v24 - 5);
        uint64_t v22 = v22 + v24[3] + 8 * (*v24 & 0x3FFFFFFFFFFFFFFLL) - v24[1];
        v24 += 12;
        v25 -= 2;
      }
      while (v25);
      v19 += v22;
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v21 = v16;
    }
    do
    {
      uint64_t v19 = v19 + *((void *)v21 + 5) + 8 * (*((void *)v21 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v21 + 3);
      v21 += 48;
    }
    while (v21 != v17);
  }
LABEL_20:
  result += v19;
LABEL_21:
  uint64_t v26 = *(void *)(a1 + 152);
  if (v26)
  {
    if (!*(unsigned char *)(a1 + 568)) {
      return result + *(void *)(v26 + 32) - *(void *)(v26 + 16);
    }
  }
  return result;
}

unint64_t sub_A409C0(uint64_t *a1)
{
  sub_2ABE08(*a1);
  if (!v7) {
    return 0;
  }
  double v1 = sub_2F27BC(v6) * 1048576.0;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_11:
  if (v2 >= 1.84467441e19) {
    return -2;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v5 = (uint64_t)(v1 + v1) + 1;
      return (unint64_t)(double)(v5 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v5 = (uint64_t)(v1 + v1);
    if (v5 >= 1) {
      --v5;
    }
    return (unint64_t)(double)(v5 >> 1);
  }
  return (unint64_t)v1;
}

uint64_t sub_A40B08(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    char v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    uint64_t v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A40D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A40DC4(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v33);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_A4115C(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v34[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 432) = sub_A3B520(v5, v34);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v34[0] = 0x1FFFFFFFDLL;
    int v7 = sub_A3B520(v6, v34);
    sub_A43190(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27)) {
        sub_A413A8(a1, v9);
      }
      if (v9)
      {
        char v19 = *(unsigned int **)(a1 + 288);
        unint64_t v20 = *(unsigned int **)(a1 + 296);
        if (v19 != v20)
        {
          uint64_t v21 = *(void *)(a1 + 264);
          uint64_t v22 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v23 = *v22++;
            *(void *)(v21 + (((unint64_t)v23 >> 3) & 0x1FFFFFF8)) &= ~(1 << v23);
          }
          while (v22 != v20);
        }
        *(void *)(a1 + 296) = v19;
        sub_A41528(a1, v9);
        sub_A417DC(a1, v9);
        unint64_t v24 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v24
          && ((*(void *)(*(void *)(a1 + 264) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_38:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v10 = *(unsigned int **)(a1 + 240);
        uint64_t v11 = *(unsigned int **)(a1 + 248);
        if (v10 != v11)
        {
          uint64_t v12 = *(void *)(a1 + 216);
          uint64_t v13 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v14 = *v13++;
            *(void *)(v12 + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) &= ~(1 << v14);
          }
          while (v13 != v11);
        }
        *(void *)(a1 + 248) = v10;
        sub_A42114(a1, v9);
        sub_725D0((uint64_t)v34);
        uint64_t v15 = *(unsigned int **)(a1 + 408);
        uint64_t v16 = *(unsigned int **)(a1 + 416);
        while (v15 != v16)
        {
          unsigned int v17 = *v15++;
          sub_A434E4(a1, v9, v17);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v34) + *(double *)(a1 + 608);
        unint64_t v18 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v18
          && ((*(void *)(*(void *)(a1 + 216) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_38;
        }
      }
      unint64_t v25 = sub_A4066C(a1) + 728;
      if (*(void *)(a1 + 720) > v25) {
        unint64_t v25 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v25;
      if (sub_A3E718(a1)) {
        goto LABEL_38;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_36;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_36:
  if (v8)
  {
LABEL_39:
    unint64_t v26 = 0;
    uint64_t v27 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        int v28 = *(unint64_t **)(a1 + 152);
        unint64_t v29 = *(unsigned int *)(a1 + 432);
        if (*v28 <= v29)
        {
          *int v28 = v29 + 1;
          unint64_t v30 = v28[2];
          unint64_t v31 = v28[1] * (v29 + 1);
          unint64_t v32 = (uint64_t)(v28[3] - v30) >> 2;
          if (v31 > v32)
          {
            sub_5BBEE0((uint64_t)(v28 + 2), v31 - v32);
          }
          else if (v31 < v32)
          {
            v28[3] = v30 + 4 * v31;
          }
        }
        *(void *)(a1 + 632) += *(int *)(v28[2] + 4 * (v26 + v28[1] * v29));
      }
      ++v26;
    }
    while (v27 != v26);
  }
LABEL_48:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v33);
}

void sub_A4115C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    uint64_t v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  unsigned int v17 = *(unsigned int **)(a1 + 408);
  unint64_t v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v27 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unsigned int v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)unsigned int v23 = __dst;
  *(void *)(a1 + 592) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v34;
  *(_OWORD *)(a1 + 680) = v35;
  *(_OWORD *)(a1 + 696) = v36;
  *(_OWORD *)(a1 + 712) = v37;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 616) = v31;
  *(_OWORD *)(a1 + 632) = v32;
  *(_OWORD *)(a1 + 648) = v33;
  if (v27 < 0) {
    operator delete((void *)__p);
  }
  unint64_t v24 = (2 * *(_DWORD *)(a1 + 8) + 2);
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v25 = *(void **)(a1 + 152);
    v25[3] = v25[2];
    void *v25 = 0;
    v25[1] = v24;
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_A4138C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A413A8(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v4 = *(unsigned int **)(a1 + 344);
  if (v3 == v4)
  {
    uint64_t v22 = *(void *)(a1 + 336);
    goto LABEL_25;
  }
  uint64_t v5 = a2 - 2;
  uint64_t v6 = a2;
  do
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *(unint64_t **)(a1 + 152);
    unint64_t v9 = *v8;
    uint64_t v10 = v8;
    if (*v8 > v7) {
      goto LABEL_7;
    }
    *unint64_t v8 = v7 + 1;
    unint64_t v11 = v8[2];
    unint64_t v12 = v8[1] * (v7 + 1);
    unint64_t v13 = (uint64_t)(v8[3] - v11) >> 2;
    if (v12 > v13)
    {
      sub_5BBEE0((uint64_t)(v8 + 2), v12 - v13);
      uint64_t v10 = *(unint64_t **)(a1 + 152);
      unint64_t v9 = *v10;
LABEL_7:
      int v14 = *(_DWORD *)(v8[2] + 4 * (v5 + v8[1] * v7));
      if (v9 <= v7)
      {
        unint64_t *v10 = v7 + 1;
        unint64_t v15 = v10[2];
        unint64_t v16 = v10[1] * (v7 + 1);
        unint64_t v17 = (uint64_t)(v10[3] - v15) >> 2;
        if (v16 <= v17)
        {
          if (v16 < v17) {
            v10[3] = v15 + 4 * v16;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v10 + 2), v16 - v17);
        }
      }
      unint64_t v8 = v10;
      if (v14 != 0x7FFFFFFF) {
        goto LABEL_17;
      }
      goto LABEL_3;
    }
    if (v12 < v13) {
      v8[3] = v11 + 4 * v12;
    }
    int v14 = *(_DWORD *)(v8[2] + 4 * (v5 + v8[1] * v7));
    if (v14 != 0x7FFFFFFF)
    {
LABEL_17:
      unint64_t v18 = v8[2];
      uint64_t v19 = v6 + v8[1] * v7;
      int v20 = *(_DWORD *)(v18 + 4 * v19);
      if (v20 == 0x7FFFFFFF || v20 < v14) {
        *(_DWORD *)(v18 + 4 * v19) = v14;
      }
    }
LABEL_3:
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v22 = *(void *)(a1 + 344);
LABEL_25:
  double result = *(double *)(a1 + 680) + (double)(unint64_t)((v22 - (uint64_t)v3) >> 2);
  *(double *)(a1 + 680) = result;
  return result;
}

double sub_A41528(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v34);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  long long v33 = *(unsigned int **)(a1 + 248);
  if (v4 != v33)
  {
    uint64_t v32 = a2 - 1;
    int v30 = ~a2;
    unsigned int v31 = a2;
    while (1)
    {
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      unint64_t v7 = *(unint64_t **)(a1 + 152);
      if (*v7 <= v5)
      {
        unint64_t *v7 = v5 + 1;
        unint64_t v8 = v7[2];
        unint64_t v9 = v7[1] * (v5 + 1);
        unint64_t v10 = (uint64_t)(v7[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v7[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v7 + 2), v9 - v10);
        }
      }
      int v11 = *(_DWORD *)(v7[2] + 4 * (v32 + v7[1] * v5));
      if (HIDWORD(v6) == 1 && (v6 + 3) < 2)
      {
        signed int v18 = *(_DWORD *)(v7[2] + 4 * (v32 + v7[1] * v5));
        uint64_t v19 = *(unint64_t **)(a1 + 64);
        if (v19) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v14 = v13 + 24;
      if (*(unsigned char *)(v13 + 17)) {
        break;
      }
      unint64_t v15 = (int *)sub_498D5C(v14, __ROR8__(v6, 32), 0, "stop");
      int v20 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v20 >= 0x15u)
      {
        unsigned int v16 = v20[10];
        if (v16) {
          goto LABEL_23;
        }
      }
      signed int v18 = v11 - 30;
      uint64_t v19 = *(unint64_t **)(a1 + 64);
      if (v19)
      {
LABEL_25:
        if (*v19 > v5)
        {
          unsigned int v21 = 0;
          unsigned int v22 = *(_DWORD *)(a1 + 144) + v30;
          unsigned int v23 = v22;
          while (v21 <= v22)
          {
            signed int v24 = *(_DWORD *)sub_A3F53C(v19 + 2, v19[1] * v5 + v23);
            v21 += 2;
            v23 -= 2;
            if (v24 != 0x7FFFFFFF)
            {
              if (v24 > v18) {
                goto LABEL_4;
              }
              goto LABEL_32;
            }
          }
        }
        goto LABEL_4;
      }
LABEL_32:
      if (sub_A43190(a1, 1u, v5, v31, v18))
      {
        unint64_t v25 = *(unint64_t **)(a1 + 152);
        if (*v25 <= v5)
        {
          unint64_t *v25 = v5 + 1;
          unint64_t v26 = v25[2];
          unint64_t v27 = v25[1] * (v5 + 1);
          unint64_t v28 = (uint64_t)(v25[3] - v26) >> 2;
          if (v27 > v28)
          {
            sub_5BBEE0((uint64_t)(v25 + 2), v27 - v28);
          }
          else if (v27 < v28)
          {
            v25[3] = v26 + 4 * v27;
          }
        }
      }
LABEL_4:
      if (++v4 == v33) {
        goto LABEL_37;
      }
    }
    unint64_t v15 = (int *)sub_A1A290(v14, v6, 0, "transfers at stop");
    unsigned int v16 = 0;
    unint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v17 >= 5u)
    {
      unsigned int v16 = v17[2];
      if (v17[2]) {
LABEL_23:
      }
        unsigned int v16 = -*(int *)((char *)v15 + v16);
    }
    signed int v18 = v16 + v11;
    uint64_t v19 = *(unint64_t **)(a1 + 64);
    if (v19) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
LABEL_37:
  double result = sub_72688((uint64_t)v34) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_A417DC(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v122);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  signed int v109 = *(unsigned int **)(a1 + 248);
  if (v4 != v109)
  {
    uint64_t v108 = a2 - 1;
    int v111 = ~a2;
    unsigned int v112 = a2;
    uint64_t v114 = a1;
    while (1)
    {
      uint64_t v110 = v4;
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      unint64_t v7 = *(unint64_t **)(a1 + 152);
      if (*v7 <= v5)
      {
        unint64_t *v7 = v5 + 1;
        unint64_t v8 = v7[2];
        unint64_t v9 = v7[1] * (v5 + 1);
        unint64_t v10 = (uint64_t)(v7[3] - v8) >> 2;
        if (v9 <= v10)
        {
          if (v9 < v10) {
            v7[3] = v8 + 4 * v9;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v7 + 2), v9 - v10);
        }
      }
      int v113 = *(_DWORD *)(v7[2] + 4 * (v108 + v7[1] * v5));
      sub_A28D38((uint64_t)&v116, *(void *)(a1 + 40), v6);
      int v11 = v117;
      unint64_t v12 = v121 ? v120 : &v118;
      unint64_t v115 = v5;
      if ((unint64_t)v117 < *v12) {
        break;
      }
LABEL_3:
      uint64_t v4 = v110 + 1;
      if (v110 + 1 == v109) {
        goto LABEL_163;
      }
    }
    while (1)
    {
      unint64_t v16 = __ROR8__(*v11, 32);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(v17 + 56) - 1;
      unint64_t v19 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
      unint64_t v20 = v19 ^ (v19 >> 33);
      uint64_t v21 = *(void *)(v17 + 80);
      int v23 = *(_DWORD *)(v17 + 64);
      int v22 = *(_DWORD *)(v17 + 68);
      uint64_t v24 = v20 & v18;
      unint64_t v25 = (unsigned int *)(v21 + 12 * (v20 & v18));
      unsigned int v27 = *v25;
      unsigned int v26 = v25[1];
      if (v22 == v26 && v23 == v27) {
        break;
      }
      if (*(void *)(v17 + 40))
      {
        uint64_t v29 = -1;
        uint64_t v30 = 1;
        do
        {
          if (*(_DWORD *)(v17 + 36) == v26 && *(_DWORD *)(v17 + 32) == v27)
          {
            if (v29 == -1) {
              uint64_t v29 = v24;
            }
          }
          else if (__PAIR64__(v26, v27) == v16)
          {
            goto LABEL_59;
          }
          uint64_t v24 = (v24 + v30) & v18;
          unsigned int v31 = (unsigned int *)(v21 + 12 * v24);
          unsigned int v27 = *v31;
          unsigned int v26 = v31[1];
          ++v30;
        }
        while (v22 != v26 || v23 != v27);
        if (v29 == -1) {
          break;
        }
        if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v47 = 1;
        while (__PAIR64__(v26, v27) != v16)
        {
          uint64_t v24 = (v24 + v47) & v18;
          uint64_t v48 = (unsigned int *)(v21 + 12 * v24);
          unsigned int v27 = *v48;
          unsigned int v26 = v48[1];
          ++v47;
          if (v22 == v26 && v23 == v27) {
            goto LABEL_62;
          }
        }
LABEL_59:
        if (v24 != -1)
        {
          uint64_t v50 = v21 + 12 * v24;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          if (v51 == -1) {
            goto LABEL_96;
          }
          goto LABEL_118;
        }
        uint64_t v29 = -1;
        if (!sub_A3BA84(*(void *)(a1 + 48), 1))
        {
LABEL_63:
          uint64_t v53 = *(void *)(v17 + 40);
          uint64_t v52 = *(void *)(v17 + 48);
          if ((unint64_t)(v52 - v53) >= 0x1555555555555555) {
            goto LABEL_164;
          }
          uint64_t v34 = *(void *)(v17 + 80);
          if (v53
            && ((uint64_t v54 = (_DWORD *)(v34 + 12 * v29), *(_DWORD *)(v17 + 36) == v54[1])
              ? (BOOL v55 = *(_DWORD *)(v17 + 32) == *v54)
              : (BOOL v55 = 0),
                v55))
          {
            *(void *)(v17 + 40) = v53 - 1;
          }
          else
          {
            *(void *)(v17 + 48) = v52 + 1;
          }
          uint64_t v56 = 3 * v29;
          goto LABEL_95;
        }
      }
LABEL_37:
      uint64_t v33 = *(void *)(v17 + 56) - 1;
      uint64_t v34 = *(void *)(v17 + 80);
      int v36 = *(_DWORD *)(v17 + 64);
      int v35 = *(_DWORD *)(v17 + 68);
      uint64_t v37 = v33 & v20;
      unsigned int v38 = (unsigned int *)(v34 + 12 * (v33 & v20));
      unsigned int v40 = *v38;
      unsigned int v39 = v38[1];
      uint64_t v41 = *(void *)(v17 + 40);
      if (v35 == v39 && v36 == v40) {
        goto LABEL_86;
      }
      if (v41)
      {
        uint64_t v43 = -1;
        uint64_t v44 = 1;
        do
        {
          if (*(_DWORD *)(v17 + 36) == v39 && *(_DWORD *)(v17 + 32) == v40)
          {
            if (v43 == -1) {
              uint64_t v43 = v37;
            }
          }
          else if (__PAIR64__(v39, v40) == v16)
          {
            goto LABEL_80;
          }
          uint64_t v37 = (v37 + v44) & v33;
          uint64_t v45 = (unsigned int *)(v34 + 12 * v37);
          unsigned int v40 = *v45;
          unsigned int v39 = v45[1];
          ++v44;
        }
        while (v35 != v39 || v36 != v40);
        if (v43 == -1) {
LABEL_86:
        }
          uint64_t v43 = v37;
        uint64_t v60 = *(void *)(v17 + 48);
        if ((unint64_t)(v60 - v41) >= 0x1555555555555555) {
          goto LABEL_164;
        }
LABEL_88:
        if (v41
          && ((uint64_t v61 = (_DWORD *)(v34 + 12 * v43), *(_DWORD *)(v17 + 36) == v61[1])
            ? (BOOL v62 = *(_DWORD *)(v17 + 32) == *v61)
            : (BOOL v62 = 0),
              v62))
        {
          *(void *)(v17 + 40) = v41 - 1;
          uint64_t v56 = 3 * v43;
        }
        else
        {
          *(void *)(v17 + 48) = v60 + 1;
          uint64_t v56 = 3 * v43;
        }
LABEL_95:
        uint64_t v63 = 4 * v56;
        uint64_t v64 = v34 + v63;
        *(void *)uint64_t v64 = v16;
        *(_DWORD *)(v64 + 8) = -1;
        uint64_t v50 = *(void *)(v17 + 80) + v63;
        unint64_t v51 = *(unsigned int *)(v50 + 8);
        if (v51 != -1) {
          goto LABEL_118;
        }
LABEL_96:
        int v65 = *(_DWORD *)(v17 + 112);
        *(_DWORD *)(v17 + 112) = v65 + 1;
        *(_DWORD *)(v50 + 8) = v65;
        unsigned int v67 = *(char **)(v17 + 96);
        unint64_t v66 = *(void *)(v17 + 104);
        if ((unint64_t)v67 < v66)
        {
          *(void *)unsigned int v67 = v16;
          uint64_t v68 = (uint64_t)(v67 + 8);
LABEL_117:
          *(void *)(v17 + 96) = v68;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          goto LABEL_118;
        }
        int v69 = (char **)(v17 + 88);
        unint64_t v70 = *(char **)(v17 + 88);
        uint64_t v71 = (v67 - v70) >> 3;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v73 = v66 - (void)v70;
        if (v73 >> 2 > v72) {
          unint64_t v72 = v73 >> 2;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v72)
        {
          if (v72 >> 61) {
            sub_188D718();
          }
          unint64_t v74 = v72;
          BOOL v75 = (char *)operator new(8 * v72);
          int v69 = (char **)(v17 + 88);
          uint64_t v76 = &v75[8 * v71];
          *(void *)uint64_t v76 = v16;
          uint64_t v68 = (uint64_t)(v76 + 8);
          if (v67 == v70) {
            goto LABEL_115;
          }
LABEL_108:
          unint64_t v77 = v67 - 8 - v70;
          if (v77 < 0x58) {
            goto LABEL_169;
          }
          if ((unint64_t)(v70 - v75) < 0x20) {
            goto LABEL_169;
          }
          uint64_t v78 = (v77 >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v80 = &v67[-v79];
          v76 -= v79;
          uint64_t v81 = &v75[8 * v71 - 16];
          uint64_t v82 = (long long *)(v67 - 16);
          uint64_t v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)uint64_t v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 4;
          }
          while (v83);
          unsigned int v67 = v80;
          if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_169:
            do
            {
              uint64_t v85 = *((void *)v67 - 1);
              v67 -= 8;
              *((void *)v76 - 1) = v85;
              v76 -= 8;
            }
            while (v67 != v70);
          }
          unsigned int v67 = *v69;
        }
        else
        {
          unint64_t v74 = 0;
          BOOL v75 = 0;
          uint64_t v76 = (char *)(8 * v71);
          *(void *)(8 * v71) = v16;
          uint64_t v68 = 8 * v71 + 8;
          if (v67 != v70) {
            goto LABEL_108;
          }
        }
LABEL_115:
        *(void *)(v17 + 88) = v76;
        *(void *)(v17 + 96) = v68;
        *(void *)(v17 + 104) = &v75[8 * v74];
        unint64_t v5 = v115;
        if (v67) {
          operator delete(v67);
        }
        goto LABEL_117;
      }
      uint64_t v57 = 1;
      while (__PAIR64__(v39, v40) != v16)
      {
        uint64_t v37 = (v37 + v57) & v33;
        uint64_t v58 = (unsigned int *)(v34 + 12 * v37);
        unsigned int v40 = *v58;
        unsigned int v39 = v58[1];
        ++v57;
        if (v35 == v39 && v36 == v40)
        {
          uint64_t v41 = 0;
          goto LABEL_86;
        }
      }
LABEL_80:
      if (v37 == -1)
      {
        uint64_t v43 = -1;
        uint64_t v60 = *(void *)(v17 + 48);
        if ((unint64_t)(v60 - v41) >= 0x1555555555555555)
        {
LABEL_164:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
        goto LABEL_88;
      }
      uint64_t v50 = v34 + 12 * v37;
      unint64_t v51 = *(unsigned int *)(v50 + 8);
      if (v51 == -1) {
        goto LABEL_96;
      }
LABEL_118:
      a1 = v114;
      *(double *)(v114 + 672) = *(double *)(v114 + 672) + 1.0;
      if (v5 != v51)
      {
        int v86 = *((_DWORD *)v117 + 2);
        int v87 = v86 / -10;
        int v88 = v86 % 10;
        if (v86 < 0) {
          char v89 = -5;
        }
        else {
          char v89 = 5;
        }
        signed int v90 = v87 + v113 + (((-103 * (char)(v89 + v88)) >> 15) & 1) + ((-103 * (char)(v89 + v88)) >> 10);
        uint64_t v91 = *(unint64_t **)(v114 + 64);
        if (v91)
        {
          if (*v91 > v51)
          {
            unsigned int v92 = 0;
            unsigned int v93 = *(_DWORD *)(v114 + 144) + v111;
            unsigned int v94 = v93;
            while (v92 <= v93)
            {
              signed int v95 = *(_DWORD *)sub_A3F53C(v91 + 2, v91[1] * v51 + v94);
              v92 += 2;
              v94 -= 2;
              if (v95 != 0x7FFFFFFF)
              {
                if (v95 > v90) {
                  break;
                }
                goto LABEL_128;
              }
            }
          }
        }
        else
        {
LABEL_128:
          if (sub_A43190(v114, 1u, v51, v112, v90))
          {
            uint64_t v96 = *(unint64_t **)(v114 + 152);
            if (*v96 <= v51)
            {
              *uint64_t v96 = v51 + 1;
              unint64_t v97 = v96[2];
              unint64_t v98 = v96[1] * (v51 + 1);
              unint64_t v99 = (uint64_t)(v96[3] - v97) >> 2;
              if (v98 <= v99)
              {
                if (v98 < v99) {
                  v96[3] = v97 + 4 * v98;
                }
              }
              else
              {
                sub_5BBEE0((uint64_t)(v96 + 2), v98 - v99);
              }
            }
          }
        }
      }
      unint64_t v14 = (unint64_t)v118;
      int v11 = (void *)((char *)v117 + 12);
      uint64_t v117 = v11;
      if (v11 == v118)
      {
        int v11 = v119;
        unint64_t v15 = v120[0];
        uint64_t v117 = v119;
        int v13 = 1;
        unsigned __int8 v121 = 1;
        unint64_t v5 = v115;
        if (*(unsigned char *)(v116 + 16))
        {
LABEL_140:
          if (v13) {
            unint64_t v100 = v15;
          }
          else {
            unint64_t v100 = (unint64_t)v118;
          }
          if ((unint64_t)v11 < v100)
          {
            unint64_t v101 = __ROR8__(*v11, 32);
            if (HIDWORD(v101) != 1 || (v101 + 3) >= 2)
            {
              while (!sub_2AB7E4(**(void **)(v116 + 4120)))
              {
                unint64_t v14 = (unint64_t)v118;
                int v11 = (void *)((char *)v117 + 12);
                uint64_t v117 = v11;
                if (v11 == v118)
                {
                  int v11 = v119;
                  uint64_t v117 = v119;
                  LOBYTE(v13) = 1;
                  unsigned __int8 v121 = 1;
                  if ((unint64_t)v119 >= v120[0]) {
                    goto LABEL_15;
                  }
                }
                else
                {
                  LOBYTE(v13) = v121;
                  if (v121) {
                    int v105 = v120;
                  }
                  else {
                    int v105 = &v118;
                  }
                  if ((unint64_t)v11 >= *v105) {
                    goto LABEL_15;
                  }
                }
                unint64_t v103 = __ROR8__(*v11, 32);
                if (HIDWORD(v103) == 1 && (v103 + 3) < 2) {
                  goto LABEL_15;
                }
              }
              LOBYTE(v13) = v121;
              int v11 = v117;
              unint64_t v14 = (unint64_t)v118;
            }
LABEL_15:
            unint64_t v15 = v120[0];
          }
        }
      }
      else
      {
        int v13 = v121;
        unint64_t v5 = v115;
        unint64_t v15 = v120[0];
        if (*(unsigned char *)(v116 + 16)) {
          goto LABEL_140;
        }
      }
      if ((_BYTE)v13) {
        unint64_t v14 = v15;
      }
      if ((unint64_t)v11 >= v14) {
        goto LABEL_3;
      }
    }
LABEL_62:
    uint64_t v29 = v24;
    if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
      goto LABEL_63;
    }
    goto LABEL_37;
  }
LABEL_163:
  double result = sub_72688((uint64_t)v122) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

void sub_A420EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A42100(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_A42114(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v227);
  uint64_t v4 = *(unsigned int **)(a1 + 408);
  unint64_t v5 = *(unsigned int **)(a1 + 416);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 384);
    uint64_t v7 = *(void *)(a1 + 360);
    unint64_t v8 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 416) = v4;
  unint64_t v10 = *(unsigned int **)(a1 + 288);
  v216 = *(unsigned int **)(a1 + 296);
  if (v10 == v216) {
    goto LABEL_273;
  }
  v212 = (void **)(a1 + 408);
  unint64_t v217 = a2;
  uint64_t v214 = a2 + 1;
  v215 = (uint64_t *)(a1 + 384);
  uint64_t v219 = a1;
  while (2)
  {
    int v218 = v10;
    int v11 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v10);
    sub_A1DF34((uint64_t)v220, *(void **)(a1 + 40), *v11, 0, 0, 0);
    unint64_t v12 = v223;
LABEL_8:
    unint64_t v13 = (unint64_t)v224;
    while ((unint64_t)v12 < v13)
    {
      unint64_t v14 = __ROR8__(*v12, 32);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(v15 + 56) - 1;
      unint64_t v17 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
      unint64_t v18 = v17 ^ (v17 >> 33);
      uint64_t v19 = *(void *)(v15 + 80);
      int v21 = *(_DWORD *)(v15 + 64);
      int v20 = *(_DWORD *)(v15 + 68);
      uint64_t v22 = v18 & v16;
      int v23 = (unsigned int *)(v19 + 12 * (v18 & v16));
      unsigned int v25 = *v23;
      unsigned int v24 = v23[1];
      if (v20 == v24 && v21 == v25) {
        goto LABEL_54;
      }
      if (*(void *)(v15 + 40))
      {
        uint64_t v27 = -1;
        uint64_t v28 = 1;
        do
        {
          if (*(_DWORD *)(v15 + 36) == v24 && *(_DWORD *)(v15 + 32) == v25)
          {
            if (v27 == -1) {
              uint64_t v27 = v22;
            }
          }
          else if (__PAIR64__(v24, v25) == v14)
          {
            goto LABEL_50;
          }
          uint64_t v22 = (v22 + v28) & v16;
          uint64_t v29 = (unsigned int *)(v19 + 12 * v22);
          unsigned int v25 = *v29;
          unsigned int v24 = v29[1];
          ++v28;
        }
        while (v20 != v24 || v21 != v25);
        if (v27 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
            goto LABEL_28;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v27 = v22;
        if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      }
      uint64_t v45 = 1;
      while (__PAIR64__(v24, v25) != v14)
      {
        uint64_t v22 = (v22 + v45) & v16;
        uint64_t v46 = (unsigned int *)(v19 + 12 * v22);
        unsigned int v25 = *v46;
        unsigned int v24 = v46[1];
        ++v45;
        if (v20 == v24 && v21 == v25) {
          goto LABEL_54;
        }
      }
LABEL_50:
      if (v22 != -1)
      {
        uint64_t v48 = v19 + 12 * v22;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_52;
        }
        goto LABEL_112;
      }
      uint64_t v27 = -1;
      if (sub_A3BA84(*(void *)(a1 + 56), 1))
      {
LABEL_28:
        uint64_t v31 = *(void *)(v15 + 56) - 1;
        uint64_t v32 = *(void *)(v15 + 80);
        int v34 = *(_DWORD *)(v15 + 64);
        int v33 = *(_DWORD *)(v15 + 68);
        uint64_t v35 = v31 & v18;
        int v36 = (unsigned int *)(v32 + 12 * (v31 & v18));
        unsigned int v38 = *v36;
        unsigned int v37 = v36[1];
        uint64_t v39 = *(void *)(v15 + 40);
        if (v33 == v37 && v34 == v38) {
          goto LABEL_102;
        }
        if (v39)
        {
          uint64_t v41 = -1;
          uint64_t v42 = 1;
          do
          {
            if (*(_DWORD *)(v15 + 36) == v37 && *(_DWORD *)(v15 + 32) == v38)
            {
              if (v41 == -1) {
                uint64_t v41 = v35;
              }
            }
            else if (__PAIR64__(v37, v38) == v14)
            {
              goto LABEL_83;
            }
            uint64_t v35 = (v35 + v42) & v31;
            uint64_t v43 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v43;
            unsigned int v37 = v43[1];
            ++v42;
          }
          while (v33 != v37 || v34 != v38);
          if (v41 == -1) {
LABEL_102:
          }
            uint64_t v41 = v35;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555) {
            goto LABEL_274;
          }
        }
        else
        {
          uint64_t v67 = 1;
          while (__PAIR64__(v37, v38) != v14)
          {
            uint64_t v35 = (v35 + v67) & v31;
            uint64_t v68 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v68;
            unsigned int v37 = v68[1];
            ++v67;
            if (v33 == v37 && v34 == v38)
            {
              uint64_t v39 = 0;
              goto LABEL_102;
            }
          }
LABEL_83:
          if (v35 != -1)
          {
            uint64_t v48 = v32 + 12 * v35;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            if (v49 == -1) {
              goto LABEL_52;
            }
            goto LABEL_112;
          }
          uint64_t v41 = -1;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555)
          {
LABEL_274:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v39
          && ((long long v84 = (_DWORD *)(v32 + 12 * v41), *(_DWORD *)(v15 + 36) == v84[1])
            ? (BOOL v85 = *(_DWORD *)(v15 + 32) == *v84)
            : (BOOL v85 = 0),
              v85))
        {
          *(void *)(v15 + 40) = v39 - 1;
          uint64_t v66 = 3 * v41;
        }
        else
        {
          *(void *)(v15 + 48) = v83 + 1;
          uint64_t v66 = 3 * v41;
        }
        goto LABEL_111;
      }
LABEL_55:
      uint64_t v55 = *(void *)(v15 + 40);
      uint64_t v54 = *(void *)(v15 + 48);
      if ((unint64_t)(v54 - v55) >= 0x1555555555555555) {
        goto LABEL_274;
      }
      uint64_t v32 = *(void *)(v15 + 80);
      if (v55
        && ((uint64_t v56 = (_DWORD *)(v32 + 12 * v27), *(_DWORD *)(v15 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v15 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v15 + 40) = v55 - 1;
      }
      else
      {
        *(void *)(v15 + 48) = v54 + 1;
      }
      uint64_t v66 = 3 * v27;
LABEL_111:
      uint64_t v86 = 4 * v66;
      uint64_t v87 = v32 + v86;
      *(void *)uint64_t v87 = v14;
      *(_DWORD *)(v87 + 8) = -1;
      uint64_t v48 = *(void *)(v15 + 80) + v86;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 == -1)
      {
LABEL_52:
        int v50 = *(_DWORD *)(v15 + 112);
        *(_DWORD *)(v15 + 112) = v50 + 1;
        *(_DWORD *)(v48 + 8) = v50;
        uint64_t v52 = *(char **)(v15 + 96);
        unint64_t v51 = *(void *)(v15 + 104);
        if ((unint64_t)v52 < v51)
        {
          *(void *)uint64_t v52 = v14;
          uint64_t v53 = (uint64_t)(v52 + 8);
          goto LABEL_98;
        }
        uint64_t v58 = *(char **)(v15 + 88);
        uint64_t v59 = (v52 - v58) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v61 = v51 - (void)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          if (v62 >> 61) {
            goto LABEL_275;
          }
          uint64_t v63 = (char *)operator new(8 * v62);
          uint64_t v64 = &v63[8 * v59];
          *(void *)uint64_t v64 = v14;
          uint64_t v53 = (uint64_t)(v64 + 8);
          if (v52 != v58)
          {
LABEL_71:
            unint64_t v65 = v52 - 8 - v58;
            if (v65 < 0x58)
            {
              a1 = v219;
              goto LABEL_95;
            }
            a1 = v219;
            if ((unint64_t)(v58 - v63) < 0x20) {
              goto LABEL_280;
            }
            uint64_t v70 = (v65 >> 3) + 1;
            uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v72 = &v52[-v71];
            v64 -= v71;
            uint64_t v73 = &v63[8 * v59 - 16];
            unint64_t v74 = (long long *)(v52 - 16);
            uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v74;
              *((_OWORD *)v73 - 1) = *(v74 - 1);
              *(_OWORD *)uint64_t v73 = v76;
              v73 -= 32;
              v74 -= 2;
              v75 -= 4;
            }
            while (v75);
            uint64_t v52 = v72;
            if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_280:
              do
              {
LABEL_95:
                uint64_t v77 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v64 - 1) = v77;
                v64 -= 8;
              }
              while (v52 != v58);
            }
            uint64_t v52 = *(char **)(v15 + 88);
            *(void *)(v15 + 88) = v64;
            *(void *)(v15 + 96) = v53;
            *(void *)(v15 + 104) = &v63[8 * v62];
            if (v52) {
LABEL_97:
            }
              operator delete(v52);
LABEL_98:
            *(void *)(v15 + 96) = v53;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            unsigned int v78 = *((unsigned __int16 *)v223 + 5);
            uint64_t v79 = *(uint64_t **)(a1 + 96);
            if (!v79) {
              goto LABEL_99;
            }
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v63 = 0;
          uint64_t v64 = (char *)(8 * v59);
          *(void *)(8 * v59) = v14;
          uint64_t v53 = 8 * v59 + 8;
          if (v52 != v58) {
            goto LABEL_71;
          }
        }
        a1 = v219;
        *(void *)(v15 + 88) = v64;
        *(void *)(v15 + 96) = v53;
        *(void *)(v15 + 104) = &v63[8 * v62];
        if (v52) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_112:
      unsigned int v78 = *((unsigned __int16 *)v223 + 5);
      uint64_t v79 = *(uint64_t **)(a1 + 96);
      if (!v79)
      {
LABEL_99:
        unint64_t v80 = v49;
        unint64_t v81 = (unint64_t)v49 >> 6;
        if (*(void *)(a1 + 392) <= (unint64_t)v49) {
          goto LABEL_100;
        }
        goto LABEL_118;
      }
LABEL_113:
      uint64_t v88 = *v79;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v79[1] - *v79) >> 4);
      if (v89 <= v217)
      {
        sub_A3F0F0((uint64_t)v79, v214 - v89);
        uint64_t v88 = *v79;
      }
      signed int v90 = (void *)(v88 + 48 * v217);
      unint64_t v80 = v49;
      if (v90[1] <= (unint64_t)v49
        || ((*(void *)(*v90 + (((unint64_t)v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
      {
        goto LABEL_218;
      }
      unint64_t v81 = (unint64_t)v49 >> 6;
      if (*(void *)(a1 + 392) <= (unint64_t)v49)
      {
LABEL_100:
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        goto LABEL_170;
      }
LABEL_118:
      uint64_t v91 = *(void *)(a1 + 384);
      uint64_t v92 = *(void *)(v91 + 8 * v81);
      uint64_t v93 = 1 << v80;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if ((v92 & (1 << v80)) == 0) {
        goto LABEL_170;
      }
      unsigned int v94 = *(unsigned char **)(a1 + 368);
      unint64_t v95 = (v94 - v82) >> 2;
      if (v95 <= v80)
      {
        unsigned int v213 = v78;
        unint64_t v96 = v49 + 1;
        unint64_t v97 = v96 - v95;
        if (v96 <= v95)
        {
          a1 = v219;
          unsigned int v78 = v213;
          if (v96 < v95) {
            *(void *)(v219 + 368) = &v82[4 * v96];
          }
        }
        else
        {
          a1 = v219;
          uint64_t v98 = *(void *)(v219 + 376);
          if (v97 <= (v98 - (uint64_t)v94) >> 2)
          {
            memset(v94, 255, 4 * v97);
            unint64_t v96 = v49 + 1;
            *(void *)(v219 + 368) = &v94[4 * v97];
            unsigned int v78 = v213;
          }
          else
          {
            uint64_t v99 = v98 - (void)v82;
            uint64_t v100 = v99 >> 1;
            if (v99 >> 1 <= v96) {
              uint64_t v100 = v49 + 1;
            }
            BOOL v101 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v101) {
              unint64_t v102 = v100;
            }
            if (v102 >> 62) {
LABEL_275:
            }
              sub_188D718();
            uint64_t v209 = 4 * v102;
            v207 = operator new(4 * v102);
            uint64_t v206 = 4 * v97;
            memset(&v207[4 * v95], 255, 4 * v97);
            if (v94 == v82)
            {
              int v105 = &v207[4 * v95];
              unint64_t v103 = v105;
              a1 = v219;
              unsigned int v78 = v213;
              uint64_t v106 = v209;
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              uint64_t v108 = v207;
            }
            else
            {
              unint64_t v103 = &v207[4 * v95];
              unint64_t v104 = v94 - 4 - v82;
              a1 = v219;
              unsigned int v78 = v213;
              if (v104 < 0x2C)
              {
                int v105 = &v207[4 * v95];
                uint64_t v106 = v209;
                unint64_t v96 = v49 + 1;
                uint64_t v107 = v206;
                uint64_t v108 = v207;
                goto LABEL_140;
              }
              uint64_t v108 = v207;
              uint64_t v106 = v209;
              int v105 = &v207[4 * v95];
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              if ((unint64_t)(v82 - v207) < 0x20) {
                goto LABEL_281;
              }
              uint64_t v109 = (v104 >> 2) + 1;
              uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
              int v111 = &v94[-v110];
              int v105 = &v103[-v110];
              unsigned int v112 = &v207[4 * v95 - 16];
              int v113 = (long long *)(v94 - 16);
              uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v115 = *v113;
                *(v112 - 1) = *(v113 - 1);
                *unsigned int v112 = v115;
                v112 -= 2;
                v113 -= 2;
                v114 -= 8;
              }
              while (v114);
              unsigned int v94 = v111;
              if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_281:
                do
                {
LABEL_140:
                  int v116 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v105 - 1) = v116;
                  v105 -= 4;
                }
                while (v94 != v82);
              }
            }
            *(void *)(a1 + 360) = v105;
            *(void *)(a1 + 368) = &v103[v107];
            *(void *)(a1 + 376) = &v108[v106];
            if (v82)
            {
              operator delete(v82);
              unint64_t v96 = v49 + 1;
            }
          }
        }
        sub_A3E96C((uint64_t)v215, v96, 0);
        uint64_t v91 = *v215;
        uint64_t v92 = *(void *)(*v215 + 8 * v81);
      }
      if ((v92 & v93) != 0)
      {
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        if (*(_DWORD *)&v82[4 * v80] >= v78) {
          goto LABEL_218;
        }
LABEL_170:
        long long v138 = *(unsigned char **)(a1 + 368);
        unint64_t v139 = (v138 - v82) >> 2;
        if (v139 <= v80)
        {
          unint64_t v140 = v49 + 1;
          unint64_t v141 = v140 - v139;
          if (v140 <= v139)
          {
            a1 = v219;
            if (v140 < v139) {
              *(void *)(v219 + 368) = &v82[4 * v140];
            }
          }
          else
          {
            uint64_t v142 = *(void *)(v219 + 376);
            if (v141 <= (v142 - (uint64_t)v138) >> 2)
            {
              memset(v138, 255, 4 * v141);
              *(void *)(v219 + 368) = &v138[4 * v141];
              a1 = v219;
            }
            else
            {
              uint64_t v143 = v142 - (void)v82;
              uint64_t v144 = v143 >> 1;
              if (v143 >> 1 <= v140) {
                uint64_t v144 = v49 + 1;
              }
              BOOL v101 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v101) {
                unint64_t v145 = v144;
              }
              if (v145 >> 62) {
                goto LABEL_275;
              }
              *(void *)unint64_t v211 = 4 * v145;
              v210 = operator new(4 * v145);
              uint64_t v208 = 4 * v141;
              memset(&v210[4 * v139], 255, 4 * v141);
              if (v138 == v82)
              {
                v148 = &v210[4 * v139];
                a1 = v219;
                v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = v148;
                uint64_t v151 = v208;
              }
              else
              {
                unint64_t v146 = v138 - 4 - v82;
                a1 = v219;
                if (v146 < 0x2C)
                {
                  v147 = &v210[4 * v139];
                  v148 = v147;
                  v150 = v210;
                  uint64_t v149 = *(void *)v211;
                  uint64_t v151 = v208;
                  goto LABEL_189;
                }
                v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = &v210[4 * v139];
                v148 = v147;
                uint64_t v151 = v208;
                if ((unint64_t)(v82 - v210) < 0x20) {
                  goto LABEL_282;
                }
                uint64_t v152 = (v146 >> 2) + 1;
                uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v154 = &v138[-v153];
                v148 = &v147[-v153];
                uint64_t v155 = &v210[4 * v139 - 16];
                v156 = (long long *)(v138 - 16);
                uint64_t v157 = v152 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v158 = *v156;
                  *(v155 - 1) = *(v156 - 1);
                  _OWORD *v155 = v158;
                  v155 -= 2;
                  v156 -= 2;
                  v157 -= 8;
                }
                while (v157);
                long long v138 = v154;
                if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_282:
                  do
                  {
LABEL_189:
                    int v159 = *((_DWORD *)v138 - 1);
                    v138 -= 4;
                    *((_DWORD *)v148 - 1) = v159;
                    v148 -= 4;
                  }
                  while (v138 != v82);
                }
              }
              *(void *)(a1 + 360) = v148;
              *(void *)(a1 + 368) = &v147[v151];
              *(void *)(a1 + 376) = &v150[v149];
              if (v82) {
                operator delete(v82);
              }
            }
          }
          sub_A3E96C((uint64_t)v215, v49 + 1, 0);
        }
        uint64_t v160 = *(void *)(*v215 + 8 * v81);
        if ((v160 & (1 << v80)) != 0) {
          goto LABEL_217;
        }
        *(void *)(*v215 + 8 * v81) = v160 | (1 << v80);
        unint64_t v162 = *(char **)(a1 + 416);
        unint64_t v161 = *(void *)(a1 + 424);
        if ((unint64_t)v162 < v161)
        {
          *(_DWORD *)unint64_t v162 = v49;
          uint64_t v163 = (uint64_t)(v162 + 4);
          goto LABEL_216;
        }
        unint64_t v164 = (char *)*v212;
        uint64_t v165 = v162 - (unsigned char *)*v212;
        uint64_t v166 = v165 >> 2;
        unint64_t v167 = (v165 >> 2) + 1;
        if (v167 >> 62) {
LABEL_277:
        }
          sub_2E00();
        uint64_t v168 = v161 - (void)v164;
        if (v168 >> 1 > v167) {
          unint64_t v167 = v168 >> 1;
        }
        if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v167;
        }
        if (v169)
        {
          if (v169 >> 62) {
            goto LABEL_275;
          }
          v170 = operator new(4 * v169);
          v171 = (unsigned int *)&v170[4 * v166];
          unsigned int *v171 = v49;
          uint64_t v163 = (uint64_t)(v171 + 1);
          if (v162 != v164)
          {
LABEL_205:
            unint64_t v172 = v162 - 4 - v164;
            if (v172 < 0x2C)
            {
              a1 = v219;
              goto LABEL_213;
            }
            unint64_t v173 = v162 - &v170[v165];
            a1 = v219;
            if (v173 < 0x20) {
              goto LABEL_283;
            }
            uint64_t v174 = (v172 >> 2) + 1;
            uint64_t v175 = 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v176 = &v162[-v175];
            v171 = (unsigned int *)((char *)v171 - v175);
            uint64_t v177 = &v170[4 * v166 - 16];
            uint64_t v178 = v162 - 16;
            uint64_t v179 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v180 = *(_OWORD *)v178;
              *(v177 - 1) = *((_OWORD *)v178 - 1);
              *uint64_t v177 = v180;
              v177 -= 2;
              v178 -= 32;
              v179 -= 8;
            }
            while (v179);
            unint64_t v162 = v176;
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_283:
              do
              {
LABEL_213:
                unsigned int v181 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *--v171 = v181;
              }
              while (v162 != v164);
            }
LABEL_214:
            *(void *)(a1 + 408) = v171;
            *(void *)(a1 + 416) = v163;
            *(void *)(a1 + 424) = &v170[4 * v169];
            if (v164) {
              operator delete(v164);
            }
LABEL_216:
            *(void *)(a1 + 416) = v163;
LABEL_217:
            *(_DWORD *)(*(void *)(a1 + 360) + 4 * v80) = v78;
            goto LABEL_218;
          }
        }
        else
        {
          v170 = 0;
          v171 = (unsigned int *)(4 * v166);
          *(_DWORD *)(4 * v166) = v49;
          uint64_t v163 = 4 * v166 + 4;
          if (v162 != v164) {
            goto LABEL_205;
          }
        }
        a1 = v219;
        goto LABEL_214;
      }
      *(void *)(v91 + 8 * v81) = v92 | v93;
      signed int v118 = *(char **)(a1 + 416);
      unint64_t v117 = *(void *)(a1 + 424);
      if ((unint64_t)v118 < v117)
      {
        *(_DWORD *)signed int v118 = v49;
        uint64_t v119 = (uint64_t)(v118 + 4);
        goto LABEL_169;
      }
      uint64_t v120 = (char *)*v212;
      uint64_t v121 = v118 - (unsigned char *)*v212;
      uint64_t v122 = v121 >> 2;
      unint64_t v123 = (v121 >> 2) + 1;
      if (v123 >> 62) {
        goto LABEL_277;
      }
      uint64_t v124 = v117 - (void)v120;
      if (v124 >> 1 > v123) {
        unint64_t v123 = v124 >> 1;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v123;
      }
      if (v125)
      {
        if (v125 >> 62) {
          goto LABEL_275;
        }
        unint64_t v126 = operator new(4 * v125);
        uint64_t v127 = (unsigned int *)&v126[4 * v122];
        unsigned int *v127 = v49;
        uint64_t v119 = (uint64_t)(v127 + 1);
        if (v118 == v120)
        {
LABEL_161:
          a1 = v219;
          goto LABEL_167;
        }
      }
      else
      {
        unint64_t v126 = 0;
        uint64_t v127 = (unsigned int *)(4 * v122);
        *(_DWORD *)(4 * v122) = v49;
        uint64_t v119 = 4 * v122 + 4;
        if (v118 == v120) {
          goto LABEL_161;
        }
      }
      unint64_t v128 = v118 - 4 - v120;
      if (v128 < 0x2C)
      {
        a1 = v219;
        do
        {
LABEL_166:
          unsigned int v137 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--uint64_t v127 = v137;
        }
        while (v118 != v120);
        goto LABEL_167;
      }
      unint64_t v129 = v118 - &v126[v121];
      a1 = v219;
      if (v129 < 0x20) {
        goto LABEL_166;
      }
      uint64_t v130 = (v128 >> 2) + 1;
      uint64_t v131 = 4 * (v130 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v132 = &v118[-v131];
      uint64_t v127 = (unsigned int *)((char *)v127 - v131);
      int v133 = &v126[4 * v122 - 16];
      unint64_t v134 = v118 - 16;
      uint64_t v135 = v130 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v136 = *(_OWORD *)v134;
        *(v133 - 1) = *((_OWORD *)v134 - 1);
        _OWORD *v133 = v136;
        v133 -= 2;
        v134 -= 32;
        v135 -= 8;
      }
      while (v135);
      signed int v118 = v132;
      if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_166;
      }
LABEL_167:
      *(void *)(a1 + 408) = v127;
      *(void *)(a1 + 416) = v119;
      *(void *)(a1 + 424) = &v126[4 * v125];
      if (v120) {
        operator delete(v120);
      }
LABEL_169:
      *(void *)(a1 + 416) = v119;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if (*(_DWORD *)&v82[4 * v80] < v78) {
        goto LABEL_170;
      }
LABEL_218:
      unint64_t v13 = (unint64_t)v224;
      unint64_t v12 = v223 + 2;
      v223 = v12;
      if (v12 == v224)
      {
        unsigned int v182 = v221 + 2;
        v221 = v182;
        if ((unint64_t)v182 >= v222) {
          break;
        }
        while (1)
        {
          unint64_t v12 = (void *)*v182;
          unint64_t v13 = v182[1];
          if (*v182 != v13) {
            break;
          }
          v182 += 2;
          v221 = v182;
          if ((unint64_t)v182 >= v222) {
            goto LABEL_6;
          }
        }
        v223 = (void *)*v182;
        v224 = (void *)v13;
        if ((unint64_t)v12 < v13)
        {
          while (1)
          {
LABEL_230:
            if (!v226)
            {
              uint64_t v183 = v220[0];
              uint64_t v184 = *v12;
              uint64_t v185 = *(void *)(v220[0] + 4136);
              if (sub_C259C0(v185 + 3896))
              {
                if (*(void *)(v185 + 3944))
                {
                  unint64_t v186 = __ROR8__(v184, 32);
                  if (!sub_A10E20((void *)(v183 + 4136), SHIDWORD(v186)))
                  {
                    unsigned int v187 = *(void **)(*(void *)(v183 + 4136) + 3944);
                    int8x8_t v188 = (int8x8_t)v187[1];
                    if (v188)
                    {
                      unint64_t v189 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v186 ^ (v186 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v186 ^ (v186 >> 33))) >> 33));
                      unint64_t v190 = v189 ^ (v189 >> 33);
                      uint8x8_t v191 = (uint8x8_t)vcnt_s8(v188);
                      v191.i16[0] = vaddlv_u8(v191);
                      if (v191.u32[0] > 1uLL)
                      {
                        unint64_t v192 = v190;
                        if (v190 >= *(void *)&v188) {
                          unint64_t v192 = v190 % *(void *)&v188;
                        }
                      }
                      else
                      {
                        unint64_t v192 = (*(void *)&v188 - 1) & v190;
                      }
                      uint64_t v195 = *(uint64_t ***)(*v187 + 8 * v192);
                      if (v195)
                      {
                        v196 = *v195;
                        if (v196)
                        {
                          if (v191.u32[0] < 2uLL)
                          {
                            uint64_t v197 = *(void *)&v188 - 1;
                            while (1)
                            {
                              uint64_t v201 = v196[1];
                              if (v190 == v201)
                              {
                                if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186) {
                                  goto LABEL_227;
                                }
                              }
                              else if ((v201 & v197) != v192)
                              {
                                goto LABEL_266;
                              }
                              v196 = (uint64_t *)*v196;
                              if (!v196) {
                                goto LABEL_266;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v199 = v196[1];
                            if (v190 == v199)
                            {
                              if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186)
                              {
LABEL_227:
                                unint64_t v12 = v223;
                                a1 = v219;
                                goto LABEL_228;
                              }
                            }
                            else
                            {
                              if (v199 >= *(void *)&v188) {
                                v199 %= *(void *)&v188;
                              }
                              if (v199 != v192) {
                                break;
                              }
                            }
                            v196 = (uint64_t *)*v196;
                          }
                          while (v196);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_266:
            if (v225) {
              break;
            }
            unsigned int v202 = sub_C2599C(v220[0] + 3896);
            unint64_t v12 = v223;
            a1 = v219;
            if (v202 >= *((unsigned __int8 *)v223 + 14))
            {
              if (v225) {
                goto LABEL_8;
              }
              char v203 = sub_51D60((unsigned __int8 *)(v220[0] + 3896));
              unint64_t v12 = v223;
              if ((v203 & 1) != 0 || (*((unsigned char *)v223 + 15) & 1) == 0) {
                goto LABEL_8;
              }
            }
LABEL_228:
            v12 += 2;
            v223 = v12;
            if (v12 == v224)
            {
              v193 = v221 + 2;
              v221 = v193;
              if ((unint64_t)v193 >= v222) {
                goto LABEL_8;
              }
              while (1)
              {
                unint64_t v12 = (void *)*v193;
                unint64_t v194 = v193[1];
                if (*v193 != v194) {
                  break;
                }
                v193 += 2;
                v221 = v193;
                if ((unint64_t)v193 >= v222) {
                  goto LABEL_6;
                }
              }
              v223 = (void *)*v193;
              v224 = (void *)v194;
              if ((unint64_t)v12 >= v194) {
                goto LABEL_8;
              }
            }
            else if (v12 >= v224)
            {
              goto LABEL_8;
            }
          }
          unint64_t v12 = v223;
          a1 = v219;
          goto LABEL_8;
        }
      }
      else if (v12 < v224)
      {
        goto LABEL_230;
      }
    }
LABEL_6:
    unint64_t v10 = v218 + 1;
    if (v218 + 1 != v216) {
      continue;
    }
    break;
  }
LABEL_273:
  double result = sub_72688((uint64_t)v227) + *(double *)(a1 + 608);
  *(double *)(a1 + 608) = result;
  return result;
}

void sub_A43168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4317C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A43190(uint64_t a1, unsigned int a2, int a3, unsigned int a4, signed int a5)
{
  LODWORD(v7) = a3;
  int v55 = a3;
  unint64_t v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    unint64_t v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)v7
      || ((*(void *)(*v14 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    int v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *(unint64_t **)(a1 + 152);
    unint64_t v23 = *(unsigned int *)(a1 + 432);
    if (*v22 <= v23)
    {
      *uint64_t v22 = v23 + 1;
      unint64_t v24 = v22[2];
      unint64_t v25 = v22[1] * (v23 + 1);
      unint64_t v26 = (uint64_t)(v22[3] - v24) >> 2;
      if (v25 <= v26)
      {
        if (v25 < v26) {
          v22[3] = v24 + 4 * v25;
        }
      }
      else
      {
        sub_5BBEE0((uint64_t)(v22 + 2), v25 - v26);
      }
    }
    int v21 = (int *)(v22[2] + 4 * (a4 + v22[1] * v23));
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  int v27 = *v21;
  if (v27 != 0x7FFFFFFF)
  {
    int v28 = *(_DWORD *)(a1 + 28);
    int v29 = v28 / -10;
    int v30 = v28 % 10;
    char v31 = v28 < 0 ? -5 : 5;
    if ((int)(v29 + v27 + (((-103 * (char)(v31 + v30)) >> 15) & 1) + ((-103 * (char)(v31 + v30)) >> 10)) >= a5) {
      return 0;
    }
  }
LABEL_22:
  if (!*(unsigned char *)(a1 + 25))
  {
    unint64_t v7 = v7;
    uint64_t v39 = *(void **)(a1 + 152);
    uint64_t v40 = a4;
    if (*v39 > (unint64_t)v7) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  uint64_t v32 = a1 + 24 * a2;
  uint64_t v33 = *(void *)(v32 + 168);
  uint64_t v34 = *(void *)(v32 + 176);
  uint64_t v35 = (uint64_t *)(v32 + 168);
  unint64_t v7 = v7;
  unint64_t v36 = (v34 - v33) >> 2;
  if (v36 <= v7)
  {
    sub_5BBEE0((uint64_t)v35, v7 - v36 + 1);
    uint64_t v33 = *v35;
  }
  signed int v37 = *(_DWORD *)(v33 + 4 * v7);
  if (v37 != 0x7FFFFFFF && v37 >= a5) {
    return 0;
  }
  uint64_t v39 = *(void **)(a1 + 152);
  uint64_t v40 = a4;
  if (*v39 <= (unint64_t)v7)
  {
LABEL_33:
    void *v39 = v7 + 1;
    uint64_t v41 = v39[2];
    unint64_t v42 = v39[1] * (v7 + 1);
    unint64_t v43 = (v39[3] - v41) >> 2;
    if (v42 <= v43)
    {
      if (v42 < v43) {
        v39[3] = v41 + 4 * v42;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v39 + 2), v42 - v43);
    }
  }
LABEL_37:
  uint64_t v44 = v39[2];
  uint64_t v45 = v40 + v39[1] * v7;
  signed int v46 = *(_DWORD *)(v44 + 4 * v45);
  if (v46 != 0x7FFFFFFF && v46 >= a5) {
    return 0;
  }
  unsigned int v48 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v49 = a1 + 24 * a2;
    uint64_t v50 = *(void *)(v49 + 168);
    uint64_t v51 = *(void *)(v49 + 176);
    uint64_t v52 = (uint64_t *)(v49 + 168);
    unint64_t v53 = (v51 - v50) >> 2;
    if (v53 <= v7)
    {
      sub_5BBEE0((uint64_t)v52, v7 - v53 + 1);
      uint64_t v50 = *v52;
    }
    *(_DWORD *)(v50 + 4 * v7) = a5;
  }
  *(_DWORD *)(v44 + 4 * v45) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v48 + 216), &v55);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v55);
  }
  return 1;
}

void sub_A434E4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  v133[0] = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v114 = *(_DWORD *)sub_A3F74C((void *)(v4 + 360), v133);
  uint64_t v115 = v5;
  sub_A40514(&v131, *(void *)(v4 + 40), v5);
  uint64_t v6 = v131;
  if ((unint64_t)v131 < v132)
  {
    uint64_t v7 = v4 + 464;
    int v112 = ~a2;
    unsigned int v113 = a2;
    uint64_t v117 = a2 - 1;
    uint64_t v120 = v4 + 464;
    uint64_t v118 = v4;
    while (1)
    {
      *(double *)(v4 + 664) = *(double *)(v4 + 664) + 1.0;
      uint64_t v119 = *(unsigned int *)v6;
      sub_A1E9A0((uint64_t)&v121, *(void *)(v4 + 40), v115, v114, 0, 1);
      unint64_t v8 = v125;
      if ((unint64_t)v125 >= v124 && (unint64_t)v125 < v126) {
        break;
      }
LABEL_3:
      uint64_t v6 = v131 + 4;
      uint64_t v131 = v6;
      if ((unint64_t)v6 >= v132) {
        return;
      }
    }
    char v10 = 0;
    while (1)
    {
      unint64_t v12 = __ROR8__(*v8, 32);
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_67;
      }
      if (*(void *)(v13 + 40)) {
        break;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_67;
        }
      }
LABEL_53:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unint64_t v47 = *(unsigned int *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_55;
        }
        goto LABEL_115;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(v4 + 48), 1))
      {
LABEL_31:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_105;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_87;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_105:
          }
            uint64_t v39 = v33;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555) {
            goto LABEL_180;
          }
        }
        else
        {
          uint64_t v58 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v58) & v29;
            uint64_t v59 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v59;
            unsigned int v35 = v59[1];
            ++v58;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_105;
            }
          }
LABEL_87:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unint64_t v47 = *(unsigned int *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_55;
            }
            goto LABEL_115;
          }
          uint64_t v39 = -1;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555)
          {
LABEL_180:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((unint64_t v74 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v74[1])
            ? (BOOL v75 = *(_DWORD *)(v13 + 32) == *v74)
            : (BOOL v75 = 0),
              v75))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v57 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v73 + 1;
          uint64_t v57 = 3 * v39;
        }
        goto LABEL_114;
      }
LABEL_68:
      uint64_t v54 = *(void *)(v13 + 40);
      uint64_t v53 = *(void *)(v13 + 48);
      if ((unint64_t)(v53 - v54) >= 0x1555555555555555) {
        goto LABEL_180;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v54
        && ((int v55 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v55[1])
          ? (BOOL v56 = *(_DWORD *)(v13 + 32) == *v55)
          : (BOOL v56 = 0),
            v56))
      {
        *(void *)(v13 + 40) = v54 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v53 + 1;
      }
      uint64_t v57 = 3 * v25;
LABEL_114:
      uint64_t v76 = 4 * v57;
      uint64_t v77 = v30 + v76;
      *(void *)uint64_t v77 = v12;
      *(_DWORD *)(v77 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v76;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      if (v47 != -1)
      {
LABEL_55:
        if (!sub_BD5C18(v7, v47, v12)) {
          goto LABEL_139;
        }
        goto LABEL_56;
      }
LABEL_115:
      int v78 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v78 + 1;
      *(_DWORD *)(v46 + 8) = v78;
      unint64_t v80 = *(unint64_t **)(v13 + 96);
      unint64_t v79 = *(void *)(v13 + 104);
      if ((unint64_t)v80 < v79)
      {
        unint64_t *v80 = v12;
        uint64_t v81 = (uint64_t)(v80 + 1);
        goto LABEL_138;
      }
      uint64_t v82 = (unint64_t **)(v13 + 88);
      uint64_t v83 = *(char **)(v13 + 88);
      uint64_t v84 = ((char *)v80 - v83) >> 3;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v86 = v79 - (void)v83;
      if (v86 >> 2 > v85) {
        unint64_t v85 = v86 >> 2;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v85)
      {
        if (v85 >> 61) {
          sub_188D718();
        }
        unint64_t v87 = v85;
        uint64_t v88 = (char *)operator new(8 * v85);
        uint64_t v82 = (unint64_t **)(v13 + 88);
        unint64_t v89 = (unint64_t *)&v88[8 * v84];
        *unint64_t v89 = v12;
        uint64_t v81 = (uint64_t)(v89 + 1);
        if (v80 == (unint64_t *)v83)
        {
LABEL_128:
          *(void *)(v13 + 88) = v89;
          *(void *)(v13 + 96) = v81;
          *(void *)(v13 + 104) = &v88[8 * v87];
          if (!v80) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        unint64_t v89 = (unint64_t *)(8 * v84);
        *(void *)(8 * v84) = v12;
        uint64_t v81 = 8 * v84 + 8;
        if (v80 == (unint64_t *)v83) {
          goto LABEL_128;
        }
      }
      unint64_t v90 = (char *)(v80 - 1) - v83;
      if (v90 < 0x58) {
        goto LABEL_185;
      }
      if ((unint64_t)(v83 - v88) < 0x20) {
        goto LABEL_185;
      }
      uint64_t v91 = (v90 >> 3) + 1;
      uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v93 = &v80[v92 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v89 = (unint64_t *)((char *)v89 - v92);
      unsigned int v94 = &v88[8 * v84 - 16];
      unint64_t v95 = v80 - 2;
      uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v97 = *(_OWORD *)v95;
        *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
        *(_OWORD *)unsigned int v94 = v97;
        v94 -= 32;
        v95 -= 4;
        v96 -= 4;
      }
      while (v96);
      unint64_t v80 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_185:
        do
        {
          unint64_t v98 = *--v80;
          *--unint64_t v89 = v98;
        }
        while (v80 != (unint64_t *)v83);
      }
      unint64_t v80 = *v82;
      *(void *)(v13 + 88) = v89;
      *(void *)(v13 + 96) = v81;
      *(void *)(v13 + 104) = &v88[8 * v87];
      if (!v80) {
        goto LABEL_137;
      }
LABEL_136:
      operator delete(v80);
LABEL_137:
      uint64_t v4 = v118;
LABEL_138:
      *(void *)(v13 + 96) = v81;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      uint64_t v7 = v120;
      if (!sub_BD5C18(v120, *(_DWORD *)(v46 + 8), v12))
      {
LABEL_139:
        v10 &= *(unsigned char *)(v4 + 32) != 0;
        goto LABEL_140;
      }
LABEL_56:
      if ((v10 & 1) != 0 && (*((unsigned char *)v125 + 15) & 2) != 0)
      {
        uint64_t v48 = v127;
        if (v127) {
          uint64_t v48 = *(unsigned int *)(v127 + 4 * (((unint64_t)v125 - v124) >> 4));
        }
        if ((v48 & v119) == 0)
        {
          uint64_t v61 = (unsigned int *)((char *)v123 + *(unsigned __int16 *)((char *)v123 - *v123 + 6));
          unint64_t v62 = (char *)v61 + *v61;
          uint64_t v63 = &v130;
          if (!v129) {
            uint64_t v63 = v128;
          }
          signed int v116 = *(_DWORD *)&v62[8 * *((_DWORD *)v128 + 1)
                               + 8
                               + 8 * (((unint64_t)v125 - v124) >> 4)]
               + *(_DWORD *)v63
               - *((_DWORD *)v125 + 2);
          uint64_t v64 = *(unint64_t **)(v4 + 64);
          if (v64)
          {
            if (*v64 > v47)
            {
              unsigned int v65 = 0;
              unsigned int v66 = *(_DWORD *)(v4 + 144) + v112;
              unsigned int v67 = v66;
              while (v65 <= v66)
              {
                signed int v68 = *(_DWORD *)sub_A3F53C(v64 + 2, v64[1] * v47 + v67);
                v65 += 2;
                v67 -= 2;
                if (v68 != 0x7FFFFFFF)
                {
                  if (v68 > v116) {
                    break;
                  }
                  goto LABEL_100;
                }
              }
            }
          }
          else
          {
LABEL_100:
            if (sub_A43190(v4, 0, v47, v113, v116))
            {
              int v69 = *(unint64_t **)(v4 + 152);
              if (*v69 <= v47)
              {
                unint64_t *v69 = v47 + 1;
                unint64_t v70 = v69[2];
                unint64_t v71 = v69[1] * (v47 + 1);
                unint64_t v72 = (uint64_t)(v69[3] - v70) >> 2;
                if (v71 <= v72)
                {
                  if (v71 < v72) {
                    v69[3] = v70 + 4 * v71;
                  }
                }
                else
                {
                  sub_5BBEE0((uint64_t)(v69 + 2), v71 - v72);
                }
              }
            }
          }
        }
      }
      if ((*((unsigned char *)v125 + 15) & 1) == 0) {
        goto LABEL_140;
      }
      if (v127)
      {
        if (*(_DWORD *)(v127 + 4 * (((unint64_t)v125 - v124) >> 4)) != v119) {
          goto LABEL_140;
        }
      }
      else if (v119)
      {
        goto LABEL_140;
      }
      uint64_t v49 = *(unint64_t **)(v4 + 152);
      if (*v49 <= v47)
      {
        unint64_t *v49 = v47 + 1;
        unint64_t v50 = v49[2];
        unint64_t v51 = v49[1] * (v47 + 1);
        unint64_t v52 = (uint64_t)(v49[3] - v50) >> 2;
        if (v51 <= v52)
        {
          if (v51 < v52) {
            v49[3] = v50 + 4 * v51;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v49 + 2), v51 - v52);
        }
      }
      int v107 = *(_DWORD *)(v49[2] + 4 * (v117 + v49[1] * v47));
      if (v107 == 0x7FFFFFFF) {
        goto LABEL_140;
      }
      if (v10)
      {
        uint64_t v108 = (unsigned int *)((char *)v123 + *(unsigned __int16 *)((char *)v123 - *v123 + 6));
        uint64_t v109 = (char *)v108 + *v108;
        uint64_t v110 = &v130;
        if (!v129) {
          uint64_t v110 = v128;
        }
        if (*(_DWORD *)&v109[8 * *((_DWORD *)v128 + 1) + 4 + 8 * (((unint64_t)v125 - v124) >> 4)]
           + *(_DWORD *)v110 < v107)
          sub_A43F30(*(void *)(v4 + 40), (uint64_t)&v121, v107);
      }
      else if (v129)
      {
        if (!sub_A2B620(*(void *)(v4 + 40), (uint64_t)&v121, v107, 1)) {
          goto LABEL_176;
        }
      }
      else if ((sub_A2BC00((uint64_t)&v121, v107, 1) & 1) == 0)
      {
LABEL_176:
        char v10 = 0;
        goto LABEL_140;
      }
      char v10 = 1;
LABEL_140:
      unint64_t v99 = v124;
      unint64_t v8 = v125 - 2;
      v125 -= 2;
      if (*(unsigned char *)(v121 + 16)) {
        BOOL v100 = v122 == 0;
      }
      else {
        BOOL v100 = 0;
      }
      if (v100 && (unint64_t)v8 >= v124 && (unint64_t)v8 < v126)
      {
        do
        {
          unint64_t v103 = __ROR8__(*v8, 32);
          if (HIDWORD(v103) == 1 && (v103 + 3) < 2) {
            break;
          }
          char v105 = sub_2AB7E4(**(void **)(v121 + 4120));
          unint64_t v99 = v124;
          unint64_t v8 = v125;
          if (v105) {
            break;
          }
          unint64_t v8 = v125 - 2;
          unint64_t v125 = v8;
        }
        while ((unint64_t)v8 >= v124 && (unint64_t)v8 < v126);
      }
      if ((unint64_t)v8 < v99 || (unint64_t)v8 >= v126) {
        goto LABEL_3;
      }
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_53;
      }
      uint64_t v20 = (v20 + v26) & v14;
      int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
        goto LABEL_31;
      }
      goto LABEL_68;
    }
LABEL_67:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
}

void sub_A43F08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A43F1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A43F30(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = (_DWORD *)(a2 + 104);
  int v5 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 100);
  if (*(unsigned char *)(a2 + 96)) {
    int v9 = *(_DWORD *)(a2 + 104);
  }
  else {
    int v9 = 0x7FFFFFFF;
  }
  if (*(unsigned char *)(a2 + 96)) {
    char v10 = (int *)(a2 + 104);
  }
  else {
    char v10 = *(int **)(a2 + 64);
  }
  int v11 = *v10;
  unint64_t v12 = (unsigned int *)(*(void *)(a2 + 16) + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
  int v13 = *(unsigned int *)((char *)&v12[2 * *(_DWORD *)(v6 + 4)
                                     + 1
                                     + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                        + *v12);
  if (*(unsigned char *)(a2 + 96))
  {
    if (!sub_A2B620(a1, a2, a3, 1)) {
      goto LABEL_15;
    }
  }
  else if (!sub_A2BC00(a2, a3, 0))
  {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 96)) {
    uint64_t v14 = v4;
  }
  else {
    uint64_t v14 = *(_DWORD **)(a2 + 64);
  }
  unint64_t v15 = (unsigned int *)(*(void *)(a2 + 16) + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
  if (v13 + v11 <= (int)(*(unsigned int *)((char *)&v15[2 * *(_DWORD *)(*(void *)(a2 + 64) + 4)
                                                       + 1
                                                       + 2
                                                       * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                                          + *v15)
                        + *v14))
    return 1;
LABEL_15:
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 0xFFFFFFFC00000004 * ((v6 - v7) >> 2);
  if (!*(unsigned char *)(a2 + 96)) {
    return 0;
  }
  uint64_t result = 0;
  if (v5) {
    int v17 = v8;
  }
  else {
    int v17 = -1;
  }
  *(_DWORD *)(a2 + 100) = v17;
  *(_DWORD *)(a2 + 104) = v9;
  return result;
}

void sub_A440AC(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A46870(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A46A68(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        int v17 = *(unsigned int **)(a1 + 256);
        int v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          uint64_t v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A46C14(a1, v6);
        sub_A46F28(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        uint64_t v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          char v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A48A20(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        int v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A4B2C8(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A49980(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A49CD8(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A44360@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  uint64_t v299 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v336) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v297 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v336) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v298 = v5;
  if (v4 >= 2)
  {
    uint64_t v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v301 = _Q0;
    int v300 = 1;
    long long v307 = a1;
    long long v306 = (void **)(a1 + 13);
    while (1)
    {
      sub_A49E18((uint64_t)v7, 0);
      sub_A4B148(v7, v300 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      uint64_t v302 = (unsigned int *)(v14 + 52 * v11[1]);
      uint64_t v303 = (unsigned int *)(v12 + 52 * v13);
      if (v303 != v302)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v336 = 0x7FFFFFFF;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          __int16 v339 = 0;
          unint64_t v340 = 0x8000000080000000;
          int v341 = 0x7FFFFFFF;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0x8000000080000000;
          __int16 v346 = 0;
          unint64_t v347 = 0xFFFFFFFF00000000;
          int v348 = -1;
          uint64_t v349 = 0;
          v351 = 0;
          uint64_t v352 = 0;
          uint64_t v353 = 0;
          int v350 = 0x7FFFFFFF;
          int v354 = 100;
          int v355 = -1;
          long long v356 = v301;
          long long v357 = v301;
          long long v358 = v301;
          long long v359 = 0u;
          long long v360 = 0u;
          long long v361 = 0u;
          long long v362 = 0u;
          uint64_t v15 = a1[3];
          long long v363 = 0u;
          long long v364 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v303 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v303 != -1) {
            break;
          }
LABEL_397:
          unint64_t v269 = v359;
          if ((void)v359 != *((void *)&v359 + 1))
          {
            unint64_t v270 = *((void *)&v359 + 1) - 72;
            if (*((void *)&v359 + 1) - 72 > (unint64_t)v359)
            {
              do
              {
                sub_A4D0C8(v269, v270);
                v269 += 72;
                v270 -= 72;
              }
              while (v269 < v270);
            }
          }
          sub_A29D50((uint64_t)__p);
          unint64_t v271 = *(void *)(v3 + 16);
          if (v271 >= *(void *)(v3 + 24))
          {
            uint64_t v272 = sub_A4D268(v299, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v272 = v271 + 296;
            *(void *)(v3 + 16) = v271 + 296;
          }
          uint64_t v7 = (char **)v306;
          *(void *)(v3 + 16) = v272;
          if (*((void *)&v363 + 1))
          {
            *(void *)&long long v364 = *((void *)&v363 + 1);
            operator delete(*((void **)&v363 + 1));
          }
          if ((void)v362)
          {
            *((void *)&v362 + 1) = v362;
            operator delete((void *)v362);
          }
          if (*((void *)&v360 + 1))
          {
            *(void *)&long long v361 = *((void *)&v360 + 1);
            operator delete(*((void **)&v360 + 1));
          }
          v273 = (void **)v359;
          if ((void)v359)
          {
            uint64_t v274 = *((void *)&v359 + 1);
            char v275 = (void *)v359;
            if (*((void *)&v359 + 1) != (void)v359)
            {
              do
              {
                uint64_t v277 = *(void **)(v274 - 40);
                if (v277)
                {
                  *(void *)(v274 - 32) = v277;
                  operator delete(v277);
                }
                char v278 = (void **)(v274 - 72);
                uint64_t v279 = *(void *)(v274 - 72);
                if (v279)
                {
                  uint64_t v280 = *(void *)(v274 - 64);
                  v276 = *(void **)(v274 - 72);
                  if (v280 != v279)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v280 - 8))
                      {
                        char v281 = *(void **)(v280 - 48);
                        if (v281)
                        {
                          *(void *)(v280 - 40) = v281;
                          operator delete(v281);
                        }
                        __int16 v282 = *(void **)(v280 - 80);
                        if (v282)
                        {
                          *(void *)(v280 - 72) = v282;
                          operator delete(v282);
                        }
                        char v283 = *(void **)(v280 - 104);
                        if (v283)
                        {
                          *(void *)(v280 - 96) = v283;
                          operator delete(v283);
                        }
                      }
                      v280 -= 168;
                    }
                    while (v280 != v279);
                    v276 = *v278;
                  }
                  *(void *)(v274 - 64) = v279;
                  operator delete(v276);
                  a1 = v307;
                }
                v274 -= 72;
              }
              while (v278 != v273);
              char v275 = (void *)v359;
            }
            *((void *)&v359 + 1) = v273;
            operator delete(v275);
          }
          if (SHIBYTE(v353) < 0) {
            operator delete(v351);
          }
          v303 += 13;
          if (v303 == v302) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v303;
        int v309 = v300;
        unsigned int v310 = *((_DWORD *)a1 + 88);
        while (2)
        {
          int v327 = 0;
          v328 = 0;
          unint64_t v329 = 0;
          v332 = 0;
          uint64_t v333 = 0;
          v331 = 0;
          v334[0] = 1;
          *(void *)&v334[4] = 0x8000000080000000;
          *(_WORD *)&unsigned char v334[12] = 0;
          v334[14] = 0;
          int v386 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v311 = xmmword_20E12E0;
          __int16 v312 = 0;
          unint64_t v313 = 0x8000000080000000;
          __int16 v314 = 0;
          *(_OWORD *)v315 = xmmword_20EB6B0;
          *(void *)&v315[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v317 = 0u;
          long long v318 = 0u;
          long long v319 = 0u;
          int v316 = -1;
          int v320 = 0x7FFFFFFF;
          uint64_t v322 = 0;
          uint64_t v323 = 0;
          uint64_t v321 = 0;
          char v324 = 1;
          unint64_t v325 = 0x8000000080000000;
          int v326 = 0;
          char v330 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)v315 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v315[16] = v19[3];
          *(void *)&v315[8] = v22;
          *(_DWORD *)&v315[20] = *v19;
          unsigned int v23 = *(_DWORD *)&v315[20];
          uint64_t v24 = a1[3];
          uint64_t v365 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
          sub_A1E9A0((uint64_t)v366, v24, v21, v23, 0, 0);
          *(void *)&long long v368 = *(void *)&v367[24] + 12 * *(unsigned int *)&v315[8];
          if (LOBYTE(v370[1])) {
            *(void **)((char *)&v370[1] + 4) = *(void **)&v315[12];
          }
          if (*(void *)&v367[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v367[16]
          }
                                  + 4 * ((*(void *)v367 - *(void *)&v366[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A4C9D4((uint64_t)v366, &v365, v25);
          _CF = *(void *)v367 < *(void *)&v367[8] && *(void *)v367 >= *(void *)&v366[24];
          uint64_t v27 = (*(void *)v367 - *(void *)&v366[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          int v316 = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v315;
          unsigned int v31 = *(_DWORD *)&v315[20];
          uint64_t v32 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v29, *(int *)&v315[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                __int16 v292 = (void *)sub_2F404((uint64_t)exception, (long long *)v366);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                uint64_t v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                uint64_t v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          uint64_t v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            unint64_t v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            unint64_t v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          unint64_t v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              unint64_t v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v307;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            uint64_t v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_434;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((uint64_t v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v307;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          unsigned int v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v307;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v307;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              BOOL v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_434:
                unint64_t v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v288, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            unint64_t v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_434;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_434;
          }
LABEL_117:
          if (v68
            && ((uint64_t v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v310 = *(_DWORD *)(v59 + 8);
          if (v310 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            unint64_t v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)unint64_t v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            uint64_t v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              long long v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              unint64_t v98 = &v97[8 * v92];
              *(void *)unint64_t v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v307;
                  goto LABEL_155;
                }
                a1 = v307;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_445;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                char v105 = &v89[-v104];
                v98 -= v104;
                uint64_t v106 = &v97[8 * v92 - 16];
                int v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                unint64_t v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_445:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                unint64_t v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v310 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              long long v97 = 0;
              unint64_t v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v307;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          int v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v315;
          unsigned int v113 = *(_DWORD *)&v315[20];
          uint64_t v114 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v111, *(int *)&v315[4]))
          {
            uint64_t v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              uint64_t v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                unint64_t v295 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                __int16 v296 = (void *)sub_2F404((uint64_t)v295, (long long *)v366);
              }
              uint64_t v118 = (int *)((char *)v117 + *v117);
              uint64_t v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                uint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                uint64_t v121 = 0;
              }
              uint64_t v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              uint64_t v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          char v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            unint64_t v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            unint64_t v124 = 0;
          }
          DWORD1(v311) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v315;
          uint64_t v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v315[20];
          int v129 = *(_DWORD *)&v315[8];
          uint64_t v130 = HIDWORD(*(void *)v315);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v315[4]))
          {
            uint64_t v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              uint64_t v284 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v366);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            uint64_t v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              __int16 v289 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
              unint64_t v290 = (void *)sub_2F404((uint64_t)v289, (long long *)v366);
            }
LABEL_180:
            int v133 = (char *)v131 + *v131;
            unint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              long long v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              unsigned int v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                unint64_t v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                unint64_t v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              unint64_t v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                uint64_t v142 = 0;
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                uint64_t v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  uint64_t v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)v366 = v146;
                  *(_DWORD *)&v366[8] = v147;
                  v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  uint64_t v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    uint64_t v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    uint64_t v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v315[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v315[16];
                  }
                  *((void *)&v311 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v366, v152, v153);
                  __int16 v312 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v315;
                  uint64_t v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v316;
                  int v159 = *(_DWORD *)&v315[8];
                  uint64_t v160 = HIDWORD(*(void *)v315);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v315[4]))
                  {
                    unint64_t v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      int v286 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
                      __int16 v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v366);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    unint64_t v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      unint64_t v293 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                      __int16 v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v366);
                    }
LABEL_213:
                    uint64_t v163 = (char *)v161 + *v161;
                    unint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      uint64_t v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      unint64_t v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        unint64_t v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        unint64_t v172 = 0;
                        unint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        unint64_t v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          unint64_t v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        unint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)v366 = v176;
                          *(_DWORD *)&v366[8] = v177;
                          uint64_t v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          uint64_t v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            unsigned int v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            unsigned int v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v315[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v315[16];
                          }
                          unint64_t v313 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v366, v182, v183);
                          __int16 v314 = v184;
                          int v375 = -1;
                          sub_9F6FA0((uint64_t)v366, &v311);
                          int v375 = 0;
                          if (v386)
                          {
                            sub_9F6FA0((uint64_t)v376, (long long *)v366);
                            int v386 = v375;
                            if (!v375) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[16] = *(_OWORD *)&v366[16];
                            v377[0] = *(_OWORD *)v367;
                            *(_OWORD *)((char *)v377 + 12) = *(_OWORD *)&v367[12];
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            *(_OWORD *)v378 = v368;
                            uint64_t v379 = v369;
                            uint64_t v369 = 0;
                            long long v368 = 0uLL;
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            long long v380 = *(_OWORD *)v370;
                            v381 = v370[2];
                            memset(v370, 0, sizeof(v370));
                            int v382 = v371;
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            long long v383 = v372;
                            uint64_t v384 = v373;
                            uint64_t v373 = 0;
                            long long v372 = 0uLL;
                            long long v385 = v374;
                            if (!v375)
                            {
LABEL_250:
                              if ((void)v372)
                              {
                                *((void *)&v372 + 1) = v372;
                                operator delete((void *)v372);
                              }
                              if (v370[0])
                              {
                                v370[1] = v370[0];
                                operator delete(v370[0]);
                              }
                              if ((void)v368)
                              {
                                *((void *)&v368 + 1) = v368;
                                operator delete((void *)v368);
                              }
                            }
                          }
                          if (v321)
                          {
                            uint64_t v322 = v321;
                            operator delete(v321);
                          }
                          if (*((void *)&v318 + 1))
                          {
                            *(void *)&long long v319 = *((void *)&v318 + 1);
                            operator delete(*((void **)&v318 + 1));
                          }
                          if ((void)v317)
                          {
                            *((void *)&v317 + 1) = v317;
                            operator delete((void *)v317);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v328;
                            if ((unint64_t)v328 < v329) {
                              goto LABEL_264;
                            }
LABEL_282:
                            v328 = (char *)sub_A4CBF4((uint64_t *)&v327, (uint64_t)v376);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              unint64_t v192 = (char *)v327;
                              v193 = v328;
                              int64_t v194 = v328 - (unsigned char *)v327;
                              if (v328 != v327)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v307;
                                do
                                {
                                  unint64_t v199 = (long long *)&v196[v197];
                                  unint64_t v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    *unint64_t v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v330;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              char v203 = v331;
                              uint64_t v204 = v332 - (unsigned char *)v331;
                              if (v332 != v331)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                v205 = (char *)operator new(v332 - (unsigned char *)v331);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                uint64_t v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v334;
                              *(void *)(v186 + 63) = *(void *)&v334[7];
                              *(void *)(v186 + 56) = v207;
                              unsigned int v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v359 + 1) = v187;
                              unint64_t v208 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 1;
                              unsigned int v209 = v19[5];
                              v210 = (char *)a1[13];
                              unint64_t v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    unint64_t v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    char v225 = v306;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_435:
                                    }
                                      sub_188D718();
                                    int v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      char v225 = v306;
                                      a1 = v307;
                                      v224 = &v218[8 * v212 + v219];
                                      v307[13] = &v218[8 * v212];
                                      v307[14] = v224;
                                      v307[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        v221 = &v218[8 * v212];
                                        unint64_t v222 = v221;
                                        a1 = v307;
                                        goto LABEL_327;
                                      }
                                      v221 = &v218[8 * v212];
                                      unint64_t v222 = v221;
                                      a1 = v307;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_446;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      v228 = &v211[-v227];
                                      unint64_t v222 = &v221[-v227];
                                      v229 = &v218[8 * v212 - 16];
                                      uint64_t v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      unint64_t v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_446:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      unint64_t v211 = v210;
                                      char v225 = v306;
                                      v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  v210 = (char *)*v225;
                                  unint64_t v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v305 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_435;
                                  }
                                  uint64_t v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  uint64_t v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                v247 = &v244[8 * v241];
                                size_t v304 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v307;
                                  v307[13] = v247;
                                  v307[14] = &v247[v304];
                                  v307[15] = &v244[8 * v305];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    long long v249 = v211;
                                    v250 = &v244[8 * v241];
                                    a1 = v307;
                                    size_t v251 = v304;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  long long v249 = &v211[-v260];
                                  v250 = &v247[-v260];
                                  unint64_t v261 = &v244[8 * v241 - 16];
                                  v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v307;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)unint64_t v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v304;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  unint64_t v211 = (char *)*v306;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v305];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 52 * v235);
                              v253 = (unsigned int *)(v237 + 52 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 13;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v386)
                              {
                                if ((void)v383)
                                {
                                  *((void *)&v383 + 1) = v383;
                                  operator delete((void *)v383);
                                }
                                if ((void)v380)
                                {
                                  *((void *)&v380 + 1) = v380;
                                  operator delete((void *)v380);
                                }
                                if (v378[0])
                                {
                                  v378[1] = v378[0];
                                  operator delete(v378[0]);
                                }
                              }
                              if (v331)
                              {
                                v332 = v331;
                                operator delete(v331);
                              }
                              unsigned int v254 = (char *)v327;
                              if (v327)
                              {
                                unint64_t v255 = v328;
                                uint64_t v20 = v327;
                                if (v328 != v327)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  uint64_t v20 = v327;
                                }
                                v328 = v254;
                                operator delete(v20);
                              }
                              --v309;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            unsigned int v187 = sub_A4CECC((void ***)&v359, (uint64_t)&v327);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v330 = 1;
                          unsigned int v188 = v19[3];
                          unsigned int v189 = v19[7];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
                          *(_DWORD *)v366 = 0;
                          *(_DWORD *)&v366[4] = v188;
                          *(void *)&v366[12] = v190;
                          *(void *)&v366[20] = v191;
                          *(_DWORD *)&v366[8] = v189;
                          int v375 = 1;
                          if (v386)
                          {
                            if (v386 == 1)
                            {
                              *(_OWORD *)v376 = *(_OWORD *)v366;
                              *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                            int v386 = 1;
                          }
                          else
                          {
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            if (v375)
                            {
                              if (v375 == 1) {
                                goto LABEL_280;
                              }
                              int v386 = v375;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v376, (long long *)v366);
                              int v386 = v375;
                              if (!v375)
                              {
                                if ((void)v372)
                                {
                                  *((void *)&v372 + 1) = v372;
                                  operator delete((void *)v372);
                                }
                                if (v370[0])
                                {
                                  v370[1] = v370[0];
                                  operator delete(v370[0]);
                                }
                                if ((void)v368)
                                {
                                  *((void *)&v368 + 1) = v368;
                                  operator delete((void *)v368);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v310 = *v19;
                          uint64_t v185 = (uint64_t)v328;
                          if ((unint64_t)v328 >= v329) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v386;
                          if (v386 == 1)
                          {
                            long long v223 = *(_OWORD *)v376;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v376[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v386) {
                              sub_9F6FA0(v185, (long long *)v376);
                            }
                            v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    uint64_t v163 = sub_A10B80(v162 + 24, v156, 0);
                    unint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            int v133 = sub_A10B80(v132 + 24, v126, 0);
            unint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v300 == v298) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v297, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A462C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          unint64_t v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            unint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unint64_t v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      uint64_t v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        uint64_t v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A46870(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  uint64_t v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    char v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A46A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A46A68(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v22);
    int v23 = v5;
    sub_A49E18(a1 + 104, 0);
    long long v16 = xmmword_20E2060;
    uint64_t v17 = -1;
    int v18 = v3;
    int v19 = v2;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    unsigned int v6 = *(unsigned int **)(a1 + 104);
    if (*(unsigned int **)(a1 + 112) == v6 || (unsigned int v8 = *v6, v7 = *(_DWORD *)(*(void *)(a1 + 104) + 4), v7 == v8))
    {
      sub_A4A580((char **)(a1 + 104), 0, &v16);
    }
    else
    {
      char v12 = 0;
      uint64_t v13 = 52 * v7 - 52 * v8;
      uint64_t v14 = (_DWORD *)(*(void *)(a1 + 128) + 52 * v8 + 28);
      do
      {
        if (*v14 != 0x7FFFFFFF)
        {
          if (*v14 <= v19) {
            goto LABEL_18;
          }
          *uint64_t v14 = 0x7FFFFFFF;
          char v12 = 1;
        }
        v14 += 13;
        v13 -= 52;
      }
      while (v13);
      uint64_t v15 = sub_A4A580((char **)(a1 + 104), 0, &v16);
      *(void *)(v15 + 40) = -1;
      *(_DWORD *)(v15 + 48) = 0x7FFFFFFF;
LABEL_18:
      if (v12) {
        sub_A4A9B0((void **)(a1 + 104), 0);
      }
    }
    int v9 = *(_DWORD *)(a1 + 96);
    unsigned int v10 = v9 + v9 * v5;
    unsigned int v11 = v10 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A49F04((void **)(a1 + 104), 0, v11, v10, v9 + v9 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A49F04((void **)(a1 + 104), 0, v11, v10, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v23);
  }
}

double sub_A46C14(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (char **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      unsigned int v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A49E18((uint64_t)v5, 0);
      sub_A4B148(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC((void **)v5, 1uLL);
        uint64_t v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC((void **)v5, 1uLL);
          int v18 = (unsigned int *)(v16 + 52 * v17);
          uint64_t v19 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
      }
      int v18 = (unsigned int *)(v16 + 52 * v17);
      uint64_t v19 = v16 + 52 * v15[1];
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        *int v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 13;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A49F04((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    unsigned int v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    char v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A46F28(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v328);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  int v298 = *(unsigned int **)(a1 + 216);
  if (v4 != v298)
  {
    int v309 = a2 + 1;
    int v299 = a2 + 2;
    int v304 = ~a2;
    int v300 = (uint64_t *)(a1 + 232);
    unint64_t v297 = (void **)(a1 + 256);
    uint64_t v321 = (char **)(a1 + 104);
    while (1)
    {
      uint64_t v302 = v4;
      unsigned int v5 = *v4;
      unint64_t v6 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v322, *(void *)(a1 + 24), *v6);
      BOOL v7 = v323;
      uint64_t v8 = &v324;
      if (v327) {
        uint64_t v8 = v326;
      }
      if ((unint64_t)v323 < *v8) {
        break;
      }
LABEL_3:
      uint64_t v4 = v302 + 1;
      if (v302 + 1 == v298) {
        goto LABEL_393;
      }
    }
    unsigned int v310 = v5 + 1;
    unsigned int v316 = v5;
LABEL_13:
    unint64_t v12 = __ROR8__(*v7, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 56) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 80);
    int v19 = *(_DWORD *)(v13 + 64);
    int v18 = *(_DWORD *)(v13 + 68);
    uint64_t v20 = v16 & v14;
    uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
    unsigned int v23 = *v21;
    unsigned int v22 = v21[1];
    if (v18 == v22 && v19 == v23) {
      goto LABEL_59;
    }
    if (!*(void *)(v13 + 40))
    {
      uint64_t v45 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v45) & v14;
        unint64_t v46 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v46;
        unsigned int v22 = v46[1];
        ++v45;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_59;
        }
      }
LABEL_56:
      unsigned int v39 = v316;
      if (v20 != -1)
      {
        uint64_t v48 = v17 + 12 * v20;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_81;
        }
        goto LABEL_69;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_60;
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_56;
      }
      uint64_t v20 = (v20 + v26) & v14;
      unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 == -1)
    {
LABEL_59:
      uint64_t v25 = v20;
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
    }
    else if (sub_A3BA84(*(void *)(a1 + 32), 1))
    {
LABEL_31:
      uint64_t v29 = *(void *)(v13 + 56) - 1;
      uint64_t v30 = *(void *)(v13 + 80);
      int v32 = *(_DWORD *)(v13 + 64);
      int v31 = *(_DWORD *)(v13 + 68);
      uint64_t v33 = v29 & v16;
      uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
      unsigned int v36 = *v34;
      unsigned int v35 = v34[1];
      uint64_t v37 = *(void *)(v13 + 40);
      if (v31 == v35 && v32 == v36)
      {
        unsigned int v39 = v316;
LABEL_48:
        uint64_t v40 = v33;
        unint64_t v44 = *(void *)(v13 + 48);
        if (v44 - v37 >= 0x1555555555555555) {
          goto LABEL_401;
        }
        goto LABEL_73;
      }
      unsigned int v39 = v316;
      if (v37)
      {
        uint64_t v40 = -1;
        uint64_t v41 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
          {
            if (v40 == -1) {
              uint64_t v40 = v33;
            }
          }
          else if (__PAIR64__(v35, v36) == v12)
          {
            goto LABEL_99;
          }
          uint64_t v33 = (v33 + v41) & v29;
          unint64_t v42 = (unsigned int *)(v30 + 12 * v33);
          unsigned int v36 = *v42;
          unsigned int v35 = v42[1];
          ++v41;
        }
        while (v31 != v35 || v32 != v36);
        if (v40 != -1)
        {
          unint64_t v44 = *(void *)(v13 + 48);
          if (v44 - v37 >= 0x1555555555555555) {
            goto LABEL_401;
          }
          goto LABEL_73;
        }
        goto LABEL_48;
      }
      uint64_t v71 = 1;
      while (__PAIR64__(v35, v36) != v12)
      {
        uint64_t v33 = (v33 + v71) & v29;
        unint64_t v72 = (unsigned int *)(v30 + 12 * v33);
        unsigned int v36 = *v72;
        unsigned int v35 = v72[1];
        ++v71;
        if (v31 == v35 && v32 == v36)
        {
          uint64_t v37 = 0;
          uint64_t v40 = v33;
          unint64_t v44 = *(void *)(v13 + 48);
          if (v44 >= 0x1555555555555555) {
            goto LABEL_401;
          }
          goto LABEL_73;
        }
      }
LABEL_99:
      if (v33 != -1)
      {
        uint64_t v48 = v30 + 12 * v33;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_81;
        }
LABEL_69:
        *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
        unsigned int v315 = v49;
        if (v39 == v49) {
          goto LABEL_338;
        }
LABEL_115:
        uint64_t v83 = *(char **)(a1 + 104);
        BOOL v84 = *(unsigned char **)(a1 + 112);
        uint64_t v85 = v84 - v83;
        if (v84 != v83)
        {
          uint64_t v86 = (void **)(a1 + 104);
          uint64_t v87 = *(void *)(a1 + 128);
          unsigned int v88 = *(_DWORD *)v83;
LABEL_129:
          uint64_t v102 = v87;
LABEL_145:
          sub_A4A05C(v86, 0, (char *)(v87 + 52 * v88), (unsigned char *)(v102 + 52 * *((unsigned int *)v83 + 1)));
          unint64_t v112 = v309 + *(_DWORD *)(a1 + 96) * v310;
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v114 = *(unsigned int **)(a1 + 112);
          if (v112 >= ((char *)v114 - (char *)v113) >> 3) {
            goto LABEL_185;
          }
          unsigned int v115 = v113[2 * v112];
          unsigned int v116 = v113[2 * v112 + 1];
          unsigned int v117 = v116 - v115;
          if (v116 == v115) {
            goto LABEL_185;
          }
          int v118 = 0;
          unsigned int v119 = 0;
          do
          {
            char v122 = *(unsigned int **)(a1 + 104);
            if (v112 >= (uint64_t)(*(void *)(a1 + 112) - (void)v122) >> 3) {
              goto LABEL_397;
            }
            unsigned int v123 = v122[2 * v112];
            if (v122[2 * v112 + 1] - v123 <= v119) {
              goto LABEL_397;
            }
            unint64_t v124 = v123 + v119;
            uint64_t v125 = *(void *)(a1 + 128);
            if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v125) >> 2) <= v124)
            {
LABEL_398:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_188D9E0(exception, "index out of range");
              goto LABEL_399;
            }
            uint64_t v126 = v125 + 52 * v124;
            long long v127 = *(_OWORD *)v126;
            long long v128 = *(_OWORD *)(v126 + 16);
            long long v129 = *(_OWORD *)(v126 + 32);
            int v332 = *(_DWORD *)(v126 + 48);
            long long v331 = v129;
            long long v329 = v127;
            long long v330 = v128;
            unsigned int v130 = *v122;
            unsigned int v131 = v122[1];
            if (v131 != *v122)
            {
              int v120 = 0;
              uint64_t v132 = 52 * v131 - 52 * v130;
              int v133 = (_DWORD *)(v125 + 52 * v130 + 28);
              while (1)
              {
                if (*v133 != 0x7FFFFFFF)
                {
                  if (*v133 <= SHIDWORD(v330)) {
                    goto LABEL_150;
                  }
                  _DWORD *v133 = 0x7FFFFFFF;
                  int v120 = 1;
                }
                v133 += 13;
                v132 -= 52;
                if (!v132) {
                  goto LABEL_149;
                }
              }
            }
            int v120 = 0;
LABEL_149:
            uint64_t v121 = sub_A4A580((char **)v86, 0, &v329);
            *(void *)(v121 + 40) = -1;
            *(_DWORD *)(v121 + 48) = 0x7FFFFFFF;
LABEL_150:
            v118 |= v120;
            ++v119;
          }
          while (v119 != v117);
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v114 = *(unsigned int **)(a1 + 112);
          if (v118)
          {
            if (v114 != v113)
            {
              uint64_t v134 = *(void *)(a1 + 128);
              unsigned int v135 = *v113;
              goto LABEL_163;
            }
            sub_D2BFC(v86, 1uLL);
            unsigned int v113 = *(unsigned int **)(a1 + 104);
            uint64_t v134 = *(void *)(a1 + 128);
            unsigned int v135 = *v113;
            if (*(unsigned int **)(a1 + 112) == v113)
            {
              sub_D2BFC(v86, 1uLL);
              unsigned int v113 = *(unsigned int **)(a1 + 104);
              uint64_t v136 = *(void *)(a1 + 128);
            }
            else
            {
LABEL_163:
              uint64_t v136 = v134;
            }
            unsigned int v137 = (long long *)(v134 + 52 * v135);
            uint64_t v138 = (long long *)(v136 + 52 * v113[1]);
            if (v137 == v138)
            {
LABEL_182:
              if (*(unsigned int **)(a1 + 112) == v113) {
                goto LABEL_183;
              }
            }
            else
            {
              while (*((_DWORD *)v137 + 7) != 0x7FFFFFFF)
              {
                unsigned int v137 = (long long *)((char *)v137 + 52);
                if (v137 == v138)
                {
                  unsigned int v137 = v138;
                  if (*(unsigned int **)(a1 + 112) != v113) {
                    goto LABEL_184;
                  }
                  goto LABEL_183;
                }
              }
              if (v137 == v138) {
                goto LABEL_182;
              }
              unint64_t v139 = (long long *)((char *)v137 + 52);
              if ((long long *)((char *)v137 + 52) == v138) {
                goto LABEL_182;
              }
              do
              {
                if (*((_DWORD *)v139 + 7) != 0x7FFFFFFF)
                {
                  long long v144 = *v139;
                  long long v145 = v139[1];
                  long long v146 = v139[2];
                  *((_DWORD *)v137 + 12) = *((_DWORD *)v139 + 12);
                  v137[1] = v145;
                  void v137[2] = v146;
                  long long *v137 = v144;
                  unsigned int v137 = (long long *)((char *)v137 + 52);
                }
                unint64_t v139 = (long long *)((char *)v139 + 52);
              }
              while (v139 != v138);
              unsigned int v113 = (unsigned int *)*v86;
              if (*(void **)(a1 + 112) == *v86)
              {
LABEL_183:
                sub_D2BFC(v86, 1uLL);
                unsigned int v113 = (unsigned int *)*v86;
              }
            }
LABEL_184:
            sub_A4A05C(v86, 0, (char *)v137, (unsigned char *)(*(void *)(a1 + 128) + 52 * v113[1]));
            unsigned int v113 = *(unsigned int **)(a1 + 104);
            uint64_t v114 = *(unsigned int **)(a1 + 112);
          }
LABEL_185:
          uint64_t v140 = (char *)v114 - (char *)v113;
          if (v114 != v113)
          {
            uint64_t v141 = *(void *)(a1 + 128);
            unsigned int v142 = *v113;
            goto LABEL_201;
          }
          uint64_t v147 = v140 >> 3;
          unint64_t v148 = 1 - (v140 >> 3);
          uint64_t v149 = *(void *)(a1 + 120);
          if (v148 <= (v149 - (uint64_t)v114) >> 3)
          {
            bzero(v113, 8 * v148);
            unint64_t v156 = &v113[2 * v148];
            *(void *)(a1 + 112) = v156;
            unsigned int v113 = (unsigned int *)*v86;
            uint64_t v141 = *(void *)(a1 + 128);
            unsigned int v142 = *(_DWORD *)*v86;
            if (*v86 != v156) {
              goto LABEL_201;
            }
            goto LABEL_187;
          }
          uint64_t v150 = v149 - (void)v113;
          uint64_t v151 = v150 >> 2;
          if ((unint64_t)(v150 >> 2) <= 1) {
            uint64_t v151 = 1;
          }
          BOOL v292 = (unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v292) {
            unint64_t v152 = v151;
          }
          if (v152 >> 61) {
            goto LABEL_400;
          }
          uint64_t v153 = 8 * v152;
          __int16 v154 = (char *)operator new(8 * v152);
          uint64_t v155 = &v154[8 * v147];
          bzero(v155, 8 * v148);
          unint64_t v156 = (unsigned int *)&v155[8 * v148];
          *(void *)(a1 + 104) = v155;
          *(void *)(a1 + 112) = v156;
          *(void *)(a1 + 120) = &v154[v153];
          if (v113)
          {
            operator delete(v113);
            unint64_t v156 = *(unsigned int **)(a1 + 112);
          }
          unsigned int v113 = (unsigned int *)*v86;
          uint64_t v141 = *(void *)(a1 + 128);
          unsigned int v142 = *(_DWORD *)*v86;
          if (*v86 != v156)
          {
LABEL_201:
            uint64_t v157 = v141;
            goto LABEL_219;
          }
LABEL_187:
          uint64_t v143 = *(unsigned int **)(a1 + 120);
          if (v143 == v156)
          {
            uint64_t v158 = 1;
            uint64_t v159 = (char *)v143 - (char *)v113;
            if ((unint64_t)(v159 >> 2) > 1) {
              uint64_t v158 = v159 >> 2;
            }
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v160 = v158;
            }
            if (v160)
            {
              if (v160 >> 61) {
LABEL_400:
              }
                sub_188D718();
              unint64_t v161 = (char *)operator new(8 * v160);
              uint64_t v162 = v161;
              *(void *)unint64_t v161 = 0;
              uint64_t v163 = (uint64_t)(v161 + 8);
              if (v156 != v113)
              {
LABEL_212:
                unint64_t v164 = (char *)(v156 - 2) - (char *)v113;
                if (v164 < 0x58 || (unint64_t)((char *)v156 - v161) < 0x20)
                {
                  uint64_t v165 = v156;
                  goto LABEL_215;
                }
                uint64_t v268 = (v164 >> 3) + 1;
                uint64_t v269 = 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v165 = &v156[v269 / 0xFFFFFFFFFFFFFFFCLL];
                v162 -= v269;
                unint64_t v270 = v161 - 16;
                unint64_t v271 = v156 - 4;
                uint64_t v272 = v268 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v273 = *(_OWORD *)v271;
                  *((_OWORD *)v270 - 1) = *((_OWORD *)v271 - 1);
                  *(_OWORD *)unint64_t v270 = v273;
                  v270 -= 32;
                  v271 -= 8;
                  v272 -= 4;
                }
                while (v272);
                if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_215:
                    uint64_t v166 = *((void *)v165 - 1);
                    v165 -= 2;
                    *((void *)v162 - 1) = v166;
                    v162 -= 8;
                  }
                  while (v165 != v113);
                }
                unint64_t v156 = (unsigned int *)*v86;
                *(void *)(a1 + 104) = v162;
                *(void *)(a1 + 112) = v163;
                *(void *)(a1 + 120) = &v161[8 * v160];
                if (!v156) {
                  goto LABEL_218;
                }
LABEL_217:
                operator delete(v156);
                goto LABEL_218;
              }
            }
            else
            {
              unint64_t v161 = 0;
              uint64_t v162 = 0;
              *(void *)&def_332C = 0;
              uint64_t v163 = 8;
              if (v156 != v113) {
                goto LABEL_212;
              }
            }
            *(void *)(a1 + 104) = v162;
            *(void *)(a1 + 112) = v163;
            *(void *)(a1 + 120) = &v161[8 * v160];
            if (!v156) {
              goto LABEL_218;
            }
            goto LABEL_217;
          }
          *(void *)unint64_t v156 = 0;
          *(void *)(a1 + 112) = v156 + 2;
LABEL_218:
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v157 = *(void *)(a1 + 128);
LABEL_219:
          unint64_t v167 = (unsigned int *)(v141 + 52 * v142);
          uint64_t v168 = (unsigned int *)(v157 + 52 * v113[1]);
          if (v167 != v168)
          {
            unint64_t v169 = v323;
            do
            {
              unsigned int *v167 = v316;
              unsigned int v170 = v167[7];
              v167[3] = v170;
              v167[4] = -1;
              int v171 = *((_DWORD *)v169 + 2);
              int v172 = v171 / 10;
              int v173 = v171 % 10;
              if (v171 < 0) {
                char v174 = -5;
              }
              else {
                char v174 = 5;
              }
              v167[7] = v172
                      + v170
                      + (((103 * (char)(v174 + v173)) >> 15) & 1)
                      + ((103 * (char)(v174 + v173)) >> 10);
              v167 += 13;
            }
            while (v167 != v168);
          }
          int v175 = *(_DWORD *)(a1 + 96);
          if (!*(unsigned char *)(a1 + 20))
          {
            unsigned int v317 = -1;
            unint64_t v176 = v315;
            int v177 = *(unint64_t **)(a1 + 48);
            if (v177) {
              goto LABEL_227;
            }
LABEL_234:
            int v181 = 2147483646;
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
            goto LABEL_239;
          }
          unsigned int v317 = v175 + v175 * *(_DWORD *)(a1 + 352) + 1;
          unint64_t v176 = v315;
          int v177 = *(unint64_t **)(a1 + 48);
          if (!v177) {
            goto LABEL_234;
          }
LABEL_227:
          if (*v177 <= v176)
          {
            int v181 = 0x7FFFFFFF;
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
          }
          else
          {
            unsigned int v178 = 0;
            unsigned int v179 = *(_DWORD *)(a1 + 100) + v304;
            unsigned int v180 = v179;
            do
            {
              if (v178 > v179)
              {
                int v181 = 0x7FFFFFFF;
                unsigned int v182 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v182) {
                  goto LABEL_338;
                }
                goto LABEL_239;
              }
              int v181 = *(_DWORD *)sub_A3F53C(v177 + 2, v177[1] * v176 + v180);
              v178 += 2;
              v180 -= 2;
            }
            while (v181 == 0x7FFFFFFF);
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
          }
LABEL_239:
          int v183 = v182[1];
          int v184 = v183 - *v182;
          if (v183 == *v182) {
            goto LABEL_338;
          }
          if (v181 == 0x7FFFFFFF)
          {
            unsigned int v185 = 0;
            while (v182[1] - *v182 > v185)
            {
              if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) <= (unint64_t)(v185 + *v182)) {
                goto LABEL_398;
              }
              if (v184 == ++v185) {
                goto LABEL_338;
              }
            }
LABEL_397:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
LABEL_399:
          }
          unint64_t v303 = v176;
          unsigned int v186 = 0;
          unint64_t v301 = v315 + 1;
          unint64_t v311 = (v299 + v175 * v301);
          unint64_t v187 = (v175 * v301 + 1);
          __int16 v319 = 0;
          unint64_t v312 = v317 + 1;
          unint64_t v313 = v187;
          int v314 = v183 - *v182;
          while (1)
          {
            while (1)
            {
              unsigned int v189 = *(char **)(a1 + 104);
              uint64_t v190 = *(char **)(a1 + 112);
              uint64_t v191 = v190 - v189;
              if (v190 == v189 || *((_DWORD *)v189 + 1) - *(_DWORD *)v189 <= v186) {
                goto LABEL_397;
              }
              unint64_t v192 = *(_DWORD *)v189 + v186;
              uint64_t v193 = *(void *)(a1 + 128);
              if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v193) >> 2) <= v192) {
                goto LABEL_398;
              }
              uint64_t v194 = v193 + 52 * v192;
              long long v196 = *(_OWORD *)(v194 + 16);
              long long v195 = *(_OWORD *)(v194 + 32);
              long long v197 = *(_OWORD *)v194;
              int v332 = *(_DWORD *)(v194 + 48);
              long long v331 = v195;
              long long v329 = v197;
              long long v330 = v196;
              if (SHIDWORD(v196) <= v181) {
                break;
              }
              unsigned int v188 = (char **)(a1 + 104);
              if (++v186 == v184) {
                goto LABEL_332;
              }
            }
            if (v317 == -1)
            {
              unsigned int v188 = (char **)(a1 + 104);
              if (v187 < (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3) {
                goto LABEL_314;
              }
              goto LABEL_315;
            }
            unint64_t v198 = v191 >> 3;
            if (v191 >> 3 <= (unint64_t)v317)
            {
              unint64_t v199 = v312 - v198;
              if (v312 > v198)
              {
                uint64_t v200 = *(void *)(a1 + 120);
                if (v199 <= (v200 - (uint64_t)v190) >> 3)
                {
                  bzero(v190, 8 * v199);
                  v190 += 8 * v199;
                  *(void *)(a1 + 112) = v190;
                }
                else
                {
                  uint64_t v201 = v200 - (void)v189;
                  uint64_t v202 = v201 >> 2;
                  if (v201 >> 2 <= v312) {
                    uint64_t v202 = v317 + 1;
                  }
                  BOOL v292 = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v292) {
                    unint64_t v203 = v202;
                  }
                  if (v203 >> 61) {
                    goto LABEL_400;
                  }
                  uint64_t v307 = 8 * v203;
                  unint64_t v305 = operator new(8 * v203);
                  uint64_t v204 = &v305[8 * v198];
                  bzero(v204, 8 * v199);
                  unint64_t v205 = v190 - 8 - v189;
                  if (v205 < 0x58)
                  {
                    uint64_t v206 = &v305[8 * v198];
                    uint64_t v207 = v305;
                    goto LABEL_273;
                  }
                  uint64_t v207 = v305;
                  uint64_t v206 = &v305[8 * v198];
                  if ((unint64_t)(&v190[-(v191 & 0xFFFFFFFFFFFFFFF8)] - v305) < 0x20) {
                    goto LABEL_407;
                  }
                  uint64_t v208 = (v205 >> 3) + 1;
                  uint64_t v209 = 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL);
                  v210 = &v190[-v209];
                  uint64_t v206 = &v204[-v209];
                  unint64_t v211 = &v305[8 * v198 - 16];
                  unint64_t v212 = (long long *)(v190 - 16);
                  uint64_t v213 = v208 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v214 = *v212;
                    *(v211 - 1) = *(v212 - 1);
                    *unint64_t v211 = v214;
                    v211 -= 2;
                    v212 -= 2;
                    v213 -= 4;
                  }
                  while (v213);
                  uint64_t v190 = v210;
                  if (v208 != (v208 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_407:
                    do
                    {
LABEL_273:
                      uint64_t v215 = *((void *)v190 - 1);
                      v190 -= 8;
                      *((void *)v206 - 1) = v215;
                      v206 -= 8;
                    }
                    while (v190 != v189);
                  }
                  *(void *)(a1 + 104) = v206;
                  *(void *)(a1 + 112) = &v204[8 * v199];
                  *(void *)(a1 + 120) = &v207[v307];
                  operator delete(v189);
                  uint64_t v190 = *(char **)(a1 + 112);
                }
                unsigned int v189 = *(char **)(a1 + 104);
                uint64_t v193 = *(void *)(a1 + 128);
                int v184 = v314;
                unint64_t v187 = v313;
                goto LABEL_276;
              }
              if (v312 < v198)
              {
                uint64_t v190 = &v189[8 * v312];
                *(void *)(a1 + 112) = v190;
              }
            }
LABEL_276:
            unsigned int v216 = *(_DWORD *)&v189[8 * v317];
            unint64_t v217 = (v190 - v189) >> 3;
            if (v217 > v317)
            {
              uint64_t v218 = v193;
              unsigned int v188 = (char **)(a1 + 104);
              goto LABEL_307;
            }
            unint64_t v219 = v312 - v217;
            if (v312 > v217)
            {
              uint64_t v220 = *(void *)(a1 + 120);
              if (v219 <= (v220 - (uint64_t)v190) >> 3)
              {
                size_t v225 = 8 * v219;
                bzero(v190, v225);
                int v184 = v314;
                *(void *)(a1 + 112) = &v190[v225];
              }
              else
              {
                uint64_t v221 = (v190 - v189) >> 3;
                unint64_t v222 = v221 + v219;
                if ((v221 + v219) >> 61) {
                  sub_2E00();
                }
                uint64_t v223 = v220 - (void)v189;
                if (v223 >> 2 > v222) {
                  unint64_t v222 = v223 >> 2;
                }
                if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
                }
                unint64_t v308 = v222;
                if (v222)
                {
                  if (v222 >> 61) {
                    goto LABEL_400;
                  }
                  v224 = (char *)operator new(8 * v222);
                }
                else
                {
                  v224 = 0;
                }
                long long v306 = v224;
                uint64_t v226 = &v224[8 * v221];
                bzero(v226, 8 * v219);
                if (v190 == v189)
                {
                  v229 = v226;
                  int v184 = v314;
                  uint64_t v231 = v306;
                }
                else
                {
                  unint64_t v227 = v190 - 8 - v189;
                  int v184 = v314;
                  if (v227 < 0x58)
                  {
                    v228 = v190;
                    v229 = v226;
                    uint64_t v230 = (void **)(a1 + 104);
                    uint64_t v231 = v306;
                    goto LABEL_302;
                  }
                  uint64_t v231 = v306;
                  if ((unint64_t)(v189 - v306) < 0x20)
                  {
                    v228 = v190;
                    v229 = v226;
                    uint64_t v230 = (void **)(a1 + 104);
                    goto LABEL_302;
                  }
                  uint64_t v232 = (v227 >> 3) + 1;
                  uint64_t v233 = 8 * (v232 & 0x3FFFFFFFFFFFFFFCLL);
                  v228 = &v190[-v233];
                  v229 = &v226[-v233];
                  uint64_t v234 = &v306[8 * ((v190 - v189) >> 3) - 16];
                  unsigned int v235 = (long long *)(v190 - 16);
                  uint64_t v236 = v232 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v237 = *v235;
                    *((_OWORD *)v234 - 1) = *(v235 - 1);
                    *(_OWORD *)uint64_t v234 = v237;
                    v234 -= 32;
                    v235 -= 2;
                    v236 -= 4;
                  }
                  while (v236);
                  uint64_t v230 = (void **)(a1 + 104);
                  if (v232 != (v232 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_302:
                      uint64_t v238 = *((void *)v228 - 1);
                      v228 -= 8;
                      *((void *)v229 - 1) = v238;
                      v229 -= 8;
                    }
                    while (v228 != v189);
                  }
                  uint64_t v190 = (char *)*v230;
                }
                *(void *)(a1 + 104) = v229;
                *(void *)(a1 + 112) = &v226[8 * v219];
                *(void *)(a1 + 120) = &v231[8 * v308];
                if (v190)
                {
                  operator delete(v190);
                  int v184 = v314;
                }
              }
              unsigned int v189 = *(char **)(a1 + 104);
              uint64_t v218 = *(void *)(a1 + 128);
              unsigned int v188 = (char **)(a1 + 104);
              unint64_t v187 = v313;
              goto LABEL_307;
            }
            unsigned int v188 = (char **)(a1 + 104);
            if (v312 < v217) {
              *(void *)(a1 + 112) = &v189[8 * v312];
            }
            uint64_t v218 = v193;
LABEL_307:
            uint64_t v239 = v193 + 52 * v216;
            uint64_t v240 = v218 + 52 * *(unsigned int *)&v189[8 * v317 + 4];
            if (v239 != v240)
            {
              while (1)
              {
                int v241 = *(_DWORD *)(v239 + 28);
                if (v241 != 0x7FFFFFFF && v241 <= SHIDWORD(v330)) {
                  break;
                }
                v239 += 52;
                if (v239 == v240) {
                  goto LABEL_313;
                }
              }
              __int16 v252 = 0;
              __int16 v245 = 0;
              goto LABEL_326;
            }
LABEL_313:
            uint64_t v193 = v218;
            if (v187 < (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3)
            {
LABEL_314:
              unsigned int v244 = *(_DWORD *)&v189[8 * v187];
              unsigned int v243 = *(_DWORD *)&v189[8 * v187 + 4];
              if (v243 != v244)
              {
                __int16 v245 = 0;
                uint64_t v253 = 52 * v243 - 52 * v244;
                unsigned int v254 = (_DWORD *)(v193 + 52 * v244 + 28);
                while (1)
                {
                  if (*v254 != 0x7FFFFFFF)
                  {
                    if (*v254 <= SHIDWORD(v330))
                    {
                      __int16 v252 = 0;
                      goto LABEL_326;
                    }
                    *unsigned int v254 = 0x7FFFFFFF;
                    __int16 v245 = 1;
                  }
                  v254 += 13;
                  v253 -= 52;
                  if (!v253) {
                    goto LABEL_316;
                  }
                }
              }
            }
LABEL_315:
            __int16 v245 = 0;
LABEL_316:
            uint64_t v246 = sub_A4A580(v188, v187, &v329);
            *(void *)(v246 + 40) = -1;
            *(_DWORD *)(v246 + 48) = 0x7FFFFFFF;
            uint64_t v247 = *(void *)(a1 + 104);
            if (v311 < (*(void *)(a1 + 112) - v247) >> 3)
            {
              unsigned int v249 = *(_DWORD *)(v247 + 8 * v311);
              unsigned int v248 = *(_DWORD *)(v247 + 8 * v311 + 4);
              if (v248 != v249)
              {
                uint64_t v255 = 52 * v248 - 52 * v249;
                v256 = (_DWORD *)(*(void *)(a1 + 128) + 52 * v249 + 28);
                do
                {
                  if (*v256 != 0x7FFFFFFF) {
                    _DWORD *v256 = 0x7FFFFFFF;
                  }
                  v256 += 13;
                  v255 -= 52;
                }
                while (v255);
              }
            }
            uint64_t v250 = sub_A4A580(v188, v311, &v329);
            *(void *)(v250 + 40) = -1;
            *(_DWORD *)(v250 + 48) = 0x7FFFFFFF;
            int v251 = *(_DWORD *)(a1 + 176);
            *(_DWORD *)(a1 + 176) = v251 + 1;
            *(_DWORD *)(v250 + 24) = v251;
            *(_DWORD *)(v250 + 20) = DWORD2(v330);
            *(void *)(v250 + 40) = -1;
            *(_DWORD *)(v250 + 48) = 0x7FFFFFFF;
            __int16 v252 = 1;
            int v184 = v314;
            unint64_t v187 = v313;
LABEL_326:
            v319 |= v252 | (v245 << 8);
            if (++v186 == v184)
            {
LABEL_332:
              if ((v319 & 0xFF00) != 0)
              {
                unsigned int v257 = v187;
                sub_A4A9B0((void **)v188, v311);
                sub_A4A9B0((void **)v188, v257);
              }
              if (!(_BYTE)v319) {
                goto LABEL_338;
              }
              if (*(void *)(a1 + 240) <= v303) {
                sub_A3E96C((uint64_t)v300, v301, 0);
              }
              uint64_t v258 = *v300;
              if ((*(void *)(*v300 + 8 * (v303 >> 6)) & (1 << v303)) != 0)
              {
LABEL_338:
                unint64_t v10 = (unint64_t)v324;
                BOOL v7 = (void *)((char *)v323 + 12);
                uint64_t v323 = v7;
                if (v7 != v324) {
                  goto LABEL_339;
                }
LABEL_375:
                BOOL v7 = v325;
                unint64_t v11 = v326[0];
                uint64_t v323 = v325;
                int v9 = 1;
                unsigned __int8 v327 = 1;
                if (*(unsigned char *)(v322 + 16)) {
                  goto LABEL_376;
                }
                goto LABEL_10;
              }
              uint64_t v260 = *(char **)(a1 + 264);
              unint64_t v259 = *(void *)(a1 + 272);
              if ((unint64_t)v260 < v259)
              {
                *(_DWORD *)uint64_t v260 = v315;
                uint64_t v261 = (uint64_t)(v260 + 4);
                goto LABEL_374;
              }
              uint64_t v274 = (char *)*v297;
              uint64_t v275 = v260 - (unsigned char *)*v297;
              uint64_t v276 = v275 >> 2;
              unint64_t v277 = (v275 >> 2) + 1;
              if (v277 >> 62) {
                sub_2E00();
              }
              uint64_t v278 = v259 - (void)v274;
              if (v278 >> 1 > v277) {
                unint64_t v277 = v278 >> 1;
              }
              if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v277 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v320 = v277;
              if (!v277)
              {
                uint64_t v279 = 0;
                uint64_t v280 = (unsigned int *)(4 * v276);
                *(_DWORD *)(4 * v276) = v315;
                uint64_t v261 = 4 * v276 + 4;
                if (v260 == v274) {
                  goto LABEL_372;
                }
LABEL_366:
                unint64_t v281 = v260 - 4 - v274;
                if (v281 < 0x2C) {
                  goto LABEL_408;
                }
                if ((unint64_t)(v260 - &v279[v275]) < 0x20) {
                  goto LABEL_408;
                }
                uint64_t v282 = (v281 >> 2) + 1;
                uint64_t v283 = 4 * (v282 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v284 = &v260[-v283];
                uint64_t v280 = (unsigned int *)((char *)v280 - v283);
                uint64_t v285 = &v279[4 * v276 - 16];
                int v286 = v260 - 16;
                uint64_t v287 = v282 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v288 = *(_OWORD *)v286;
                  *(v285 - 1) = *((_OWORD *)v286 - 1);
                  *uint64_t v285 = v288;
                  v285 -= 2;
                  v286 -= 32;
                  v287 -= 8;
                }
                while (v287);
                uint64_t v260 = v284;
                if (v282 != (v282 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_408:
                  do
                  {
                    unsigned int v289 = *((_DWORD *)v260 - 1);
                    v260 -= 4;
                    *--uint64_t v280 = v289;
                  }
                  while (v260 != v274);
                }
                goto LABEL_372;
              }
              if (v277 >> 62) {
                goto LABEL_400;
              }
              uint64_t v279 = operator new(4 * v277);
              uint64_t v280 = (unsigned int *)&v279[4 * v276];
              *uint64_t v280 = v315;
              uint64_t v261 = (uint64_t)(v280 + 1);
              if (v260 != v274) {
                goto LABEL_366;
              }
LABEL_372:
              *(void *)(a1 + 256) = v280;
              *(void *)(a1 + 264) = v261;
              *(void *)(a1 + 272) = &v279[4 * v320];
              if (v274)
              {
                operator delete(v274);
                uint64_t v258 = *v300;
              }
LABEL_374:
              *(void *)(a1 + 264) = v261;
              *(void *)(v258 + 8 * (v303 >> 6)) |= 1 << v303;
              unint64_t v10 = (unint64_t)v324;
              BOOL v7 = (void *)((char *)v323 + 12);
              uint64_t v323 = v7;
              if (v7 == v324) {
                goto LABEL_375;
              }
LABEL_339:
              int v9 = v327;
              unint64_t v11 = v326[0];
              if (*(unsigned char *)(v322 + 16))
              {
LABEL_376:
                if (v9) {
                  unint64_t v290 = v11;
                }
                else {
                  unint64_t v290 = v10;
                }
                if ((unint64_t)v7 < v290)
                {
                  while (1)
                  {
                    unint64_t v291 = __ROR8__(*v7, 32);
                    BOOL v292 = HIDWORD(v291) != 1 || (v291 + 3) >= 2;
                    if (!v292) {
                      break;
                    }
                    if (sub_2AB7E4(**(void **)(v322 + 4120)))
                    {
                      LOBYTE(v9) = v327;
                      BOOL v7 = v323;
                      unint64_t v10 = (unint64_t)v324;
                      break;
                    }
                    unint64_t v10 = (unint64_t)v324;
                    BOOL v7 = (void *)((char *)v323 + 12);
                    uint64_t v323 = v7;
                    if (v7 == v324)
                    {
                      BOOL v7 = v325;
                      uint64_t v323 = v325;
                      LOBYTE(v9) = 1;
                      unsigned __int8 v327 = 1;
                      if ((unint64_t)v325 >= v326[0]) {
                        break;
                      }
                    }
                    else
                    {
                      LOBYTE(v9) = v327;
                      unint64_t v293 = &v324;
                      if (v327) {
                        unint64_t v293 = v326;
                      }
                      if ((unint64_t)v7 >= *v293) {
                        break;
                      }
                    }
                  }
                  unint64_t v11 = v326[0];
                }
              }
LABEL_10:
              if ((_BYTE)v9) {
                unint64_t v10 = v11;
              }
              if ((unint64_t)v7 >= v10) {
                goto LABEL_3;
              }
              goto LABEL_13;
            }
          }
        }
        uint64_t v90 = v85 >> 3;
        unint64_t v91 = 1 - (v85 >> 3);
        uint64_t v92 = *(void *)(a1 + 120);
        uint64_t v86 = (void **)(a1 + 104);
        if (v91 <= (v92 - (uint64_t)v84) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v91);
          BOOL v101 = &v84[8 * v91];
          *(void *)(a1 + 112) = v101;
          uint64_t v83 = *v321;
          uint64_t v87 = *(void *)(a1 + 128);
          unsigned int v88 = *(_DWORD *)*v321;
          if (*v321 != v101) {
            goto LABEL_129;
          }
        }
        else
        {
          uint64_t v93 = v92 - (void)v83;
          uint64_t v94 = v93 >> 2;
          if ((unint64_t)(v93 >> 2) <= 1) {
            uint64_t v94 = 1;
          }
          BOOL v292 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v292) {
            unint64_t v95 = v94;
          }
          if (v95 >> 61) {
            goto LABEL_400;
          }
          uint64_t v96 = 8 * v95;
          long long v97 = (char *)operator new(8 * v95);
          unint64_t v98 = &v97[8 * v90];
          size_t v99 = 8 * v91;
          bzero(v98, v99);
          uint64_t v100 = &v98[v99];
          *(void *)(a1 + 104) = v98;
          *(void *)(a1 + 112) = &v98[v99];
          *(void *)(a1 + 120) = &v97[v96];
          if (v84)
          {
            operator delete(v84);
            BOOL v101 = *(char **)(a1 + 112);
            uint64_t v83 = *v321;
            uint64_t v87 = *(void *)(a1 + 128);
            unsigned int v88 = *(_DWORD *)*v321;
            if (*v321 != v101) {
              goto LABEL_129;
            }
          }
          else
          {
            BOOL v101 = &v98[v99];
            uint64_t v83 = *v321;
            uint64_t v87 = *(void *)(a1 + 128);
            unsigned int v88 = *(_DWORD *)*v321;
            if (*v321 != v100) {
              goto LABEL_129;
            }
          }
        }
        unint64_t v89 = *(char **)(a1 + 120);
        if (v89 != v101)
        {
          *(void *)BOOL v101 = 0;
          *(void *)(a1 + 112) = v101 + 8;
LABEL_144:
          uint64_t v83 = *(char **)(a1 + 104);
          uint64_t v102 = *(void *)(a1 + 128);
          goto LABEL_145;
        }
        uint64_t v103 = 1;
        uint64_t v104 = v89 - v83;
        if ((unint64_t)(v104 >> 2) > 1) {
          uint64_t v103 = v104 >> 2;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          if (v105 >> 61) {
            goto LABEL_400;
          }
          uint64_t v106 = (char *)operator new(8 * v105);
          int v107 = v106;
          *(void *)uint64_t v106 = 0;
          uint64_t v108 = (uint64_t)(v106 + 8);
          if (v101 != v83)
          {
LABEL_138:
            unint64_t v109 = v101 - 8 - v83;
            if (v109 >= 0x58 && (unint64_t)(v101 - v106) >= 0x20)
            {
              uint64_t v262 = (v109 >> 3) + 1;
              uint64_t v263 = 8 * (v262 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v110 = &v101[-v263];
              v107 -= v263;
              long long v264 = v106 - 16;
              int v265 = v101 - 16;
              uint64_t v266 = v262 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v267 = *(_OWORD *)v265;
                *((_OWORD *)v264 - 1) = *((_OWORD *)v265 - 1);
                *(_OWORD *)long long v264 = v267;
                v264 -= 32;
                v265 -= 32;
                v266 -= 4;
              }
              while (v266);
              if (v262 == (v262 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_142:
                BOOL v101 = *v321;
                *(void *)(a1 + 104) = v107;
                *(void *)(a1 + 112) = v108;
                *(void *)(a1 + 120) = &v106[8 * v105];
                if (!v101) {
                  goto LABEL_144;
                }
LABEL_143:
                operator delete(v101);
                goto LABEL_144;
              }
            }
            else
            {
              uint64_t v110 = v101;
            }
            do
            {
              uint64_t v111 = *((void *)v110 - 1);
              v110 -= 8;
              *((void *)v107 - 1) = v111;
              v107 -= 8;
            }
            while (v110 != v83);
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v106 = 0;
          int v107 = 0;
          *(void *)&def_332C = 0;
          uint64_t v108 = 8;
          if (v101 != v83) {
            goto LABEL_138;
          }
        }
        *(void *)(a1 + 104) = v107;
        *(void *)(a1 + 112) = v108;
        *(void *)(a1 + 120) = &v106[8 * v105];
        if (!v101) {
          goto LABEL_144;
        }
        goto LABEL_143;
      }
      uint64_t v40 = -1;
      unint64_t v44 = *(void *)(v13 + 48);
      if (v44 - v37 >= 0x1555555555555555)
      {
LABEL_401:
        __int16 v296 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(v296, "insert overflow");
      }
LABEL_73:
      if (v37
        && ((uint64_t v56 = (_DWORD *)(v30 + 12 * v40), *(_DWORD *)(v13 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v13 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v13 + 40) = v37 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v44 + 1;
      }
      uint64_t v58 = v30 + 12 * v40;
      *(void *)uint64_t v58 = v12;
      *(_DWORD *)(v58 + 8) = -1;
      uint64_t v48 = *(void *)(v13 + 80) + 12 * v40;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 != -1) {
        goto LABEL_69;
      }
LABEL_81:
      int v59 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v59 + 1;
      *(_DWORD *)(v48 + 8) = v59;
      uint64_t v61 = *(char **)(v13 + 96);
      unint64_t v60 = *(void *)(v13 + 104);
      if ((unint64_t)v61 < v60)
      {
        *(void *)uint64_t v61 = v12;
        uint64_t v62 = (uint64_t)(v61 + 8);
        goto LABEL_114;
      }
      int v63 = (char **)(v13 + 88);
      uint64_t v64 = *(char **)(v13 + 88);
      uint64_t v65 = (v61 - v64) >> 3;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v67 = v60 - (void)v64;
      if (v67 >> 2 > v66) {
        unint64_t v66 = v67 >> 2;
      }
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v318 = v66;
      if (v66)
      {
        if (v66 >> 61) {
          goto LABEL_400;
        }
        uint64_t v68 = (char *)operator new(8 * v66);
        int v63 = (char **)(v13 + 88);
        int v69 = &v68[8 * v65];
        *(void *)int v69 = v12;
        uint64_t v62 = (uint64_t)(v69 + 8);
        if (v61 != v64)
        {
LABEL_91:
          unint64_t v70 = v61 - 8 - v64;
          if (v70 >= 0x58)
          {
            unsigned int v39 = v316;
            if ((unint64_t)(v64 - v68) >= 0x20)
            {
              uint64_t v74 = (v70 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v76 = &v61[-v75];
              v69 -= v75;
              BOOL v77 = &v68[8 * v65 - 16];
              uint64_t v78 = (long long *)(v61 - 16);
              uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v78;
                *((_OWORD *)v77 - 1) = *(v78 - 1);
                *(_OWORD *)BOOL v77 = v80;
                v77 -= 32;
                v78 -= 2;
                v79 -= 4;
              }
              while (v79);
              uint64_t v61 = v76;
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_112:
                uint64_t v61 = *v63;
                *(void *)(v13 + 88) = v69;
                *(void *)(v13 + 96) = v62;
                *(void *)(v13 + 104) = &v68[8 * v318];
                if (!v61) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
            }
          }
          else
          {
            unsigned int v39 = v316;
          }
          do
          {
            uint64_t v81 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v69 - 1) = v81;
            v69 -= 8;
          }
          while (v61 != v64);
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v68 = 0;
        int v69 = (char *)(8 * v65);
        *(void *)(8 * v65) = v12;
        uint64_t v62 = 8 * v65 + 8;
        if (v61 != v64) {
          goto LABEL_91;
        }
      }
      unsigned int v39 = v316;
      *(void *)(v13 + 88) = v69;
      *(void *)(v13 + 96) = v62;
      *(void *)(v13 + 104) = &v68[8 * v318];
      if (!v61)
      {
LABEL_114:
        *(void *)(v13 + 96) = v62;
        unsigned int v82 = *(_DWORD *)(v48 + 8);
        *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
        unsigned int v315 = v82;
        if (v39 == v82) {
          goto LABEL_338;
        }
        goto LABEL_115;
      }
LABEL_113:
      operator delete(v61);
      goto LABEL_114;
    }
LABEL_60:
    uint64_t v51 = *(void *)(v13 + 40);
    uint64_t v50 = *(void *)(v13 + 48);
    if ((unint64_t)(v50 - v51) >= 0x1555555555555555) {
      goto LABEL_401;
    }
    uint64_t v52 = *(void *)(v13 + 80);
    if (v51
      && ((unsigned int v53 = (_DWORD *)(v52 + 12 * v25), *(_DWORD *)(v13 + 36) == v53[1])
        ? (BOOL v54 = *(_DWORD *)(v13 + 32) == *v53)
        : (BOOL v54 = 0),
          v54))
    {
      *(void *)(v13 + 40) = v51 - 1;
    }
    else
    {
      *(void *)(v13 + 48) = v50 + 1;
    }
    uint64_t v55 = v52 + 12 * v25;
    *(void *)uint64_t v55 = v12;
    *(_DWORD *)(v55 + 8) = -1;
    uint64_t v48 = *(void *)(v13 + 80) + 12 * v25;
    unsigned int v39 = v316;
    unsigned int v49 = *(_DWORD *)(v48 + 8);
    if (v49 != -1) {
      goto LABEL_69;
    }
    goto LABEL_81;
  }
LABEL_393:
  double result = sub_72688((uint64_t)v328) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A48980(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A48994(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A489A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A489BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A489D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A489E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A489F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A48A0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A48A20(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    unint64_t v211 = v8;
    int v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        unint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            BOOL v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((BOOL v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      int v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          unint64_t v72 = &v71[8 * v67];
          *(void *)unint64_t v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          int v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          int v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unint64_t v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)int v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      unsigned int v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            size_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            BOOL v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              size_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              BOOL v101 = v200;
              goto LABEL_135;
            }
            BOOL v101 = v200;
            uint64_t v100 = v201;
            size_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v105 = &v88[-v104];
            size_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            int v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            unsigned int v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        unsigned int v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              unsigned int v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        long long v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)long long v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        long long v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          char v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          long long v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        uint64_t v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)unint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              char v122 = &v202[4 * v112];
              unint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                char v122 = &v202[4 * v112];
                unint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              unint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              char v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              char v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *uint64_t v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              uint64_t v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        unint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            uint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            unint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            uint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)unint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A49958(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4996C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A49980(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_A49C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_A49CD8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A49E18((uint64_t)v4, 0);
      sub_A4B148(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 52 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 52;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 52 * v7;
    uint64_t v9 = v6 + 52 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

char *sub_A49E18(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = a2;
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        *(void *)(a1 + 8) = v6;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v5 = *(char **)a1;
      uint64_t v6 = *(char **)(a1 + 8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)&v5[8 * v4];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 > v11)
    {
      sub_D2BFC((void **)a1, v12 - v11);
      uint64_t v5 = *(char **)a1;
      uint64_t v13 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v12 < v11) {
      *(void *)(a1 + 8) = &v5[8 * v12];
    }
  }
  uint64_t v13 = v9;
LABEL_12:
  uint64_t v14 = (unsigned char *)(v13 + 52 * *(unsigned int *)&v5[8 * v4 + 4]);

  return sub_A4A05C((void **)a1, v4, (char *)(v9 + 52 * v10), v14);
}

BOOL sub_A49F04(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A4AD68(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A4AD68(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    int v22 = *(_DWORD *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    int v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) <= a6)
    {
      __int16 v23 = sub_A4AE5C((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A4A9B0(a1, a3);
    sub_A4A9B0(a1, a4);
  }
  return v13 != 0;
}

char *sub_A4A05C(void **a1, unsigned int a2, char *__dst, unsigned char *__src)
{
  unint64_t v8 = a2;
  unsigned int v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  unint64_t v11 = (v9 - (unsigned char *)*a1) >> 3;
  if (v11 <= a2)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11)
      {
        int v9 = &v10[8 * v12];
        a1[1] = v9;
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unsigned int v10 = (char *)*a1;
      int v9 = (char *)a1[1];
    }
  }
  unint64_t v13 = (v9 - v10) >> 3;
  uint64_t v14 = v10;
  if (v13 <= v8)
  {
    unint64_t v15 = a2 + 1;
    if (v15 <= v13)
    {
      uint64_t v14 = v10;
      if (v15 < v13)
      {
        a1[1] = &v10[8 * v15];
        uint64_t v14 = v10;
      }
    }
    else
    {
      sub_D2BFC(a1, v15 - v13);
      uint64_t v14 = (char *)*a1;
    }
  }
  unint64_t v16 = (unint64_t)a1[3];
  if ((unsigned char *)(v16 + 52 * *(unsigned int *)&v14[8 * v8 + 4]) == __src)
  {
    v19.i64[0] = (uint64_t)__dst;
    v19.i64[1] = (uint64_t)__src;
    int64x2_t v20 = vsubq_s64(v19, vdupq_n_s64(v16));
    int64x2_t v21 = vshrq_n_s64(v20, 2uLL);
    v23.i64[0] = 0x4EC4EC4EC4EC4EC5 * v21.i64[0];
    __int32 v22 = v23.i32[0];
    v23.i64[1] = 0x4EC4EC4EC4EC4EC5 * v21.i64[1];
    int8x16_t v24 = vbslq_s8((int8x16_t)vcgtq_s64(v20, vdupq_n_s64(0xFFFFFFFFFFFFFFCCLL)), (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v23), 6uLL)));
    int v25 = (char *)a1[6] + 8 * v24.i64[0];
    unint64_t v26 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
    if (v26)
    {
      if ((v23.i8[0] & 0x3F) != 0)
      {
        if (64 - (v23.i8[0] & 0x3Fu) >= v26) {
          unint64_t v27 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
        }
        else {
          unint64_t v27 = 64 - (v23.i8[0] & 0x3Fu);
        }
        *(void *)v25 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v23.i8[0] & 0x3Fu) - v27)) & (-1 << (v23.i8[0] & 0x3F)));
        v25 += 8;
        v26 -= v27;
      }
      if (v26 >= 0x40) {
        bzero(v25, 8 * (v26 >> 6));
      }
      if ((v26 & 0x3F) != 0) {
        *(void *)&v25[8 * (v26 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v26 & 0x3F));
      }
    }
    *(_DWORD *)&v10[8 * v8 + 4] = v22;
  }
  else
  {
    unint64_t v17 = ((unsigned char *)a1[1] - v14) >> 3;
    if (v17 <= v8)
    {
      unint64_t v18 = a2 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17) {
          a1[1] = &v14[8 * v18];
        }
      }
      else
      {
        sub_D2BFC(a1, v18 - v17);
        uint64_t v14 = (char *)*a1;
        unint64_t v16 = (unint64_t)a1[3];
      }
    }
    if ((char *)(v16 + 52 * *(unsigned int *)&v14[8 * v8]) == __dst)
    {
      uint64_t v30 = (__int32 *)&v10[8 * v8];
      v31.i64[0] = (uint64_t)__dst;
      v31.i64[1] = (uint64_t)__src;
      int64x2_t v32 = vsubq_s64(v31, vdupq_n_s64(v16));
      int64x2_t v33 = vshrq_n_s64(v32, 2uLL);
      v35.i64[0] = 0x4EC4EC4EC4EC4EC5 * v33.i64[0];
      v35.i64[1] = 0x4EC4EC4EC4EC4EC5 * v33.i64[1];
      __int32 v34 = v35.i32[2];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcgtq_s64(v32, vdupq_n_s64(0xFFFFFFFFFFFFFFCCLL)), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v35), 6uLL)));
      uint64_t v37 = (char *)a1[6] + 8 * v36.i64[0];
      unint64_t v38 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
      if (v38)
      {
        if ((v35.i8[0] & 0x3F) != 0)
        {
          if (64 - (v35.i8[0] & 0x3Fu) >= v38) {
            unint64_t v39 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
          }
          else {
            unint64_t v39 = 64 - (v35.i8[0] & 0x3Fu);
          }
          *(void *)v37 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v35.i8[0] & 0x3Fu) - v39)) & (-1 << (v35.i8[0] & 0x3F)));
          v37 += 8;
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          bzero(v37, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          *(void *)&v37[8 * (v38 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F));
        }
      }
      *uint64_t v30 = v34;
      return __src;
    }
    else
    {
      unint64_t v28 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v28 <= v8)
      {
        unint64_t v29 = a2 + 1;
        if (v29 <= v28)
        {
          if (v29 < v28) {
            a1[1] = &v14[8 * v29];
          }
        }
        else
        {
          sub_D2BFC(a1, v29 - v28);
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      uint64_t v40 = (unsigned char *)(v16 + 52 * *(unsigned int *)&v14[8 * v8 + 4]);
      int64_t v41 = v40 - __src;
      if (v40 != __src)
      {
        memmove(__dst, __src, v40 - __src);
        unint64_t v16 = (unint64_t)a1[3];
        uint64_t v14 = (char *)*a1;
      }
      unint64_t v42 = &__dst[v41];
      uint64_t v43 = (char *)a1[6];
      unint64_t v44 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v42[-v16] >> 2);
      if ((uint64_t)&v42[-v16] <= -52) {
        uint64_t v45 = -(uint64_t)((63 - v44) >> 6);
      }
      else {
        uint64_t v45 = v44 >> 6;
      }
      uint64_t v46 = &v43[8 * v45];
      unint64_t v47 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v47 <= v8)
      {
        unint64_t v48 = a2 + 1;
        if (v48 <= v47)
        {
          if (v48 < v47) {
            a1[1] = &v14[8 * v48];
          }
        }
        else
        {
          sub_D2BFC(a1, v48 - v47);
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      unint64_t v49 = *(unsigned int *)&v14[8 * v8 + 4];
      unint64_t v50 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
      if (v50)
      {
        if ((v44 & 0x3F) != 0)
        {
          if (64 - (v44 & 0x3F) >= v50) {
            uint64_t v51 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
          }
          else {
            uint64_t v51 = 64 - (v44 & 0x3F);
          }
          *(void *)v46 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v44 & 0x3Fu) - v51)) & (-1 << (v44 & 0x3F)));
          v46 += 8;
          v50 -= v51;
        }
        if (v50 >= 0x40) {
          bzero(v46, 8 * (v50 >> 6));
        }
        if ((v50 & 0x3F) != 0) {
          *(void *)&v46[8 * (v50 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v50 & 0x3F));
        }
      }
      *(_DWORD *)&v10[8 * v8 + 4] = -991146299 * ((unint64_t)&v42[-v16] >> 2);
    }
  }
  return __dst;
}

uint64_t sub_A4A580(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    uint64_t v41 = (uint64_t)&a1[3][52 * v11];
    long long v42 = *a3;
    long long v43 = a3[1];
    long long v44 = a3[2];
    *(_DWORD *)(v41 + 48) = *((_DWORD *)a3 + 12);
    *(_OWORD *)(v41 + 16) = v43;
    *(_OWORD *)(v41 + 32) = v44;
    *(_OWORD *)uint64_t v41 = v42;
    unint64_t v45 = *(unsigned int *)v9;
    *(void *)&a1[6][(v45 >> 3) & 0x1FFFFFF8] |= 1 << v45;
    return (uint64_t)&a1[3][52 * v45];
  }
  else
  {
    unint64_t v13 = (unsigned int *)(v9 + 4);
    unint64_t v12 = *((unsigned int *)v9 + 1);
    uint64_t v14 = a1[3];
    unint64_t v15 = a1[4];
    unint64_t v16 = (uint64_t *)(a1 + 3);
    unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 2);
    if (v17 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v18 = a1[1] - v6;
      unsigned int v19 = v12 - 991146299 * ((v15 - v14) >> 2) - v10;
      unint64_t v20 = 2 * (v12 - v10) + 2;
      if (v5 < v18 >> 3) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = v17;
      }
      if (v5 < v18 >> 3) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = 2;
      }
      unint64_t v53 = v21;
      if (v17 >= v22 + v17)
      {
        if (v17 > v22 + v17)
        {
          unint64_t v15 = &v14[52 * v22 + 52 * v17];
          a1[4] = v15;
        }
      }
      else
      {
        sub_A4AB68((void **)a1 + 3, v22);
        uint64_t v14 = a1[3];
        unint64_t v15 = a1[4];
      }
      int64x2_t v23 = a1 + 6;
      sub_A3E96C((uint64_t)v23, 0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 2), 0);
      unsigned int v24 = *(_DWORD *)v9;
      unsigned int v25 = *(_DWORD *)v9;
      if (*v13 != *(_DWORD *)v9)
      {
        memmove((void *)(*v16 + 52 * v17), (const void *)(*v16 + 52 * v24), *v16 + 52 * *v13 - (*v16 + 52 * v24));
        unsigned int v25 = *(_DWORD *)v9;
        unsigned int v24 = *v13;
      }
      uint64_t v52 = v23;
      uint64_t v26 = *v23;
      unint64_t v27 = (void *)(v26 + 8 * (v25 >> 6));
      uint64_t v28 = v25 & 0x3F;
      unint64_t v29 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
      if (v29)
      {
        if ((v25 & 0x3F) != 0)
        {
          if ((64 - v28) >= v29) {
            uint64_t v30 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
          }
          else {
            uint64_t v30 = (64 - v28);
          }
          *v27++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v28 - v30)) & (-1 << v28));
          v29 -= v30;
        }
        if (v29 >= 0x40) {
          bzero(v27, 8 * (v29 >> 6));
        }
        if ((v29 & 0x3F) != 0) {
          v27[v29 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v29 & 0x3F));
        }
      }
      int64x2_t v31 = (void *)(v26 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      unint64_t v32 = (v53 & 0x3F)
          - (v17 & 0x3F)
          + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      if (v32)
      {
        if ((v17 & 0x3F) != 0)
        {
          if (64 - (v17 & 0x3F) >= v32) {
            unint64_t v33 = (v53 & 0x3F)
          }
                - (v17 & 0x3F)
                + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
          else {
            unint64_t v33 = 64 - (v17 & 0x3F);
          }
          *v31++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v17 & 0x3Fu) - v33)) & (-1 << (v17 & 0x3F));
          v32 -= v33;
        }
        if (v32 >= 0x40) {
          memset(v31, 255, 8 * (v32 >> 6));
        }
        if ((v32 & 0x3F) != 0) {
          v31[v32 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v32 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v17;
      unsigned int *v13 = v53;
      uint64_t v34 = *v16 + 52 * v53;
      long long v35 = *a3;
      long long v36 = a3[1];
      long long v37 = a3[2];
      *(_DWORD *)(v34 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(v34 + 16) = v36;
      *(_OWORD *)(v34 + 32) = v37;
      *(_OWORD *)uint64_t v34 = v35;
      unint64_t v38 = *v13;
      *(void *)(*v52 + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
      uint64_t v39 = *v16;
      unsigned int *v13 = v38 + 1;
      return v39 + 52 * v38;
    }
    else
    {
      uint64_t v46 = &v14[52 * v12];
      long long v47 = *a3;
      long long v48 = a3[1];
      long long v49 = a3[2];
      *((_DWORD *)v46 + 12) = *((_DWORD *)a3 + 12);
      *((_OWORD *)v46 + 1) = v48;
      *((_OWORD *)v46 + 2) = v49;
      *(_OWORD *)uint64_t v46 = v47;
      unint64_t v50 = *v13;
      *(void *)&a1[6][(v50 >> 3) & 0x1FFFFFF8] |= 1 << v50;
      uint64_t v51 = a1[3];
      unsigned int *v13 = v50 + 1;
      return (uint64_t)&v51[52 * v50];
    }
  }
}

char *sub_A4A9B0(void **a1, unsigned int a2)
{
  unint64_t v4 = a2;
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = (v6 - (unsigned char *)*a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        a1[1] = v6;
      }
    }
    else
    {
      sub_D2BFC(a1, v8 - v7);
      unint64_t v5 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
    }
  }
  int v9 = (char *)a1[3];
  unsigned int v10 = &v9[52 * *(unsigned int *)&v5[8 * v4]];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11) {
        a1[1] = &v5[8 * v12];
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unint64_t v5 = (char *)*a1;
      int v9 = (char *)a1[3];
    }
  }
  unint64_t v13 = (long long *)&v9[52 * *(unsigned int *)&v5[8 * v4 + 4]];
  if (v10 != (char *)v13)
  {
    while (*((_DWORD *)v10 + 7) != 0x7FFFFFFF)
    {
      v10 += 52;
      if (v10 == (char *)v13)
      {
        unsigned int v10 = &v9[52 * *(unsigned int *)&v5[8 * v4 + 4]];
        goto LABEL_22;
      }
    }
    if (v10 != (char *)v13)
    {
      uint64_t v14 = (long long *)(v10 + 52);
      if (v10 + 52 != (char *)v13)
      {
        do
        {
          if (*((_DWORD *)v14 + 7) != 0x7FFFFFFF)
          {
            long long v15 = *v14;
            long long v16 = v14[1];
            long long v17 = v14[2];
            *((_DWORD *)v10 + 12) = *((_DWORD *)v14 + 12);
            *((_OWORD *)v10 + 1) = v16;
            *((_OWORD *)v10 + 2) = v17;
            *(_OWORD *)unsigned int v10 = v15;
            v10 += 52;
          }
          uint64_t v14 = (long long *)((char *)v14 + 52);
        }
        while (v14 != v13);
        unint64_t v5 = (char *)*a1;
      }
    }
  }
LABEL_22:
  unint64_t v18 = ((unsigned char *)a1[1] - v5) >> 3;
  if (v18 <= v4)
  {
    unint64_t v19 = a2 + 1;
    if (v19 <= v18)
    {
      if (v19 < v18) {
        a1[1] = &v5[8 * v19];
      }
    }
    else
    {
      sub_D2BFC(a1, v19 - v18);
      unint64_t v5 = (char *)*a1;
    }
  }
  unint64_t v20 = (char *)a1[3] + 52 * *(unsigned int *)&v5[8 * v4 + 4];

  return sub_A4A05C(a1, v4, v10, v20);
}

void sub_A4AB68(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - (unsigned char *)v4) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[13 * a2];
      unint64_t v12 = v4 + 12;
      uint64_t v13 = 52 * a2;
      do
      {
        *((void *)v12 - 2) = 0;
        *((_OWORD *)v12 - 3) = xmmword_20E2060;
        *((_OWORD *)v12 - 2) = xmmword_20EB780;
        *((void *)v12 - 1) = -1;
        *unint64_t v12 = 0x7FFFFFFF;
        v12 += 13;
        v13 -= 52;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
  }
  else
  {
    uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * (((char *)v4 - (unsigned char *)*a1) >> 2);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x4EC4EC4EC4EC4ECLL) {
      sub_2E00();
    }
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x276276276276276) {
      unint64_t v9 = 0x4EC4EC4EC4EC4ECLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x4EC4EC4EC4EC4ECLL) {
        sub_188D718();
      }
      unsigned int v10 = (char *)operator new(52 * v9);
    }
    else
    {
      unsigned int v10 = 0;
    }
    uint64_t v14 = &v10[52 * v6];
    uint64_t v15 = 52 * a2;
    long long v16 = &v14[52 * a2];
    long long v17 = v14 + 32;
    do
    {
      *(void *)long long v17 = 0;
      *((_OWORD *)v17 - 2) = xmmword_20E2060;
      *((_OWORD *)v17 - 1) = xmmword_20EB780;
      *((void *)v17 + 1) = -1;
      *((_DWORD *)v17 + 4) = 0x7FFFFFFF;
      v17 += 52;
      v15 -= 52;
    }
    while (v15);
    unint64_t v18 = &v10[52 * v9];
    unint64_t v20 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 52);
        long long v22 = *(_OWORD *)(v19 - 36);
        long long v23 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v14 - 20) = v23;
        *(_OWORD *)(v14 - 36) = v22;
        *(_OWORD *)(v14 - 52) = v21;
        v14 -= 52;
        v19 -= 52;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

uint64_t sub_A4AD68(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (v4 = (int *)(*a1 + 8 * a2), int v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (0x4EC4EC4EC4EC4EC5 * ((a1[4] - v6) >> 2) <= v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + 52 * v5;
}

void sub_A4AE34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4AE48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_A4AE5C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A4B018(a1, a2, a5) & 1) == 0)
  {
    unint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v13 = *(_DWORD *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v21 = 52 * v12 - 52 * v13;
        long long v22 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v13 + 28);
        while (1)
        {
          if (*v22 != 0x7FFFFFFF)
          {
            if (*v22 <= *(_DWORD *)(a2 + 28))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            *long long v22 = 0x7FFFFFFF;
            unsigned __int8 v10 = 1;
          }
          v22 += 13;
          v21 -= 52;
          if (!v21) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A4A580((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 40) = -1;
    *(_DWORD *)(v14 + 48) = 0x7FFFFFFF;
    uint64_t v15 = *(char **)a1;
    if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v17 = *(_DWORD *)&v15[8 * a3];
      unsigned int v16 = *(_DWORD *)&v15[8 * a3 + 4];
      if (v16 != v17)
      {
        uint64_t v23 = 52 * v16 - 52 * v17;
        unsigned int v24 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v17 + 28);
        do
        {
          if (*v24 != 0x7FFFFFFF) {
            *unsigned int v24 = 0x7FFFFFFF;
          }
          v24 += 13;
          v23 -= 52;
        }
        while (v23);
      }
    }
    uint64_t v18 = sub_A4A580((char **)a1, a3, (long long *)a2);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    int v19 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v19 + 1;
    *(_DWORD *)(v18 + 24) = v19;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(a2 + 24);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A4B018(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        unint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      unint64_t v7 = *(char **)a1;
      unint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      unint64_t v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = v15 + 52 * *(unsigned int *)&v7[8 * v6 + 4];
  if (v11 + 52 * v12 == v16) {
    return 0;
  }
  uint64_t v17 = v11 + 52 * v12 + 52;
  do
  {
    int v18 = *(_DWORD *)(v17 - 24);
    BOOL v19 = v18 != 0x7FFFFFFF && v18 <= *(_DWORD *)(a2 + 28);
    uint64_t result = v19;
    if (v19) {
      break;
    }
    BOOL v21 = v17 == v16;
    v17 += 52;
  }
  while (!v21);
  return result;
}

BOOL sub_A4B148(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A4AD68(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      int v28 = *(_DWORD *)(v12 + 48);
      long long v26 = v14;
      long long v27 = v13;
      long long v25 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        unsigned int v18 = *(_DWORD *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 52 * v17 - 52 * v18;
          unsigned int v24 = &a1[3][52 * v18 + 28];
          while (1)
          {
            if (*(_DWORD *)v24 != 0x7FFFFFFF)
            {
              if (*(_DWORD *)v24 <= SHIDWORD(v26))
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              *(_DWORD *)unsigned int v24 = 0x7FFFFFFF;
              int v19 = 1;
            }
            v24 += 52;
            v23 -= 52;
            if (!v23) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A4A580(a1, v11, &v25);
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A4A9B0((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A4B2C8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v258 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v227 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v258);
  uint64_t v228 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v256, *(void *)(v4 + 24), v5);
  __int16 v7 = v256;
  if ((unint64_t)v256 < v257)
  {
    unint64_t v8 = (char *)(v4 + 104);
    uint64_t v234 = (void **)(v4 + 104);
    uint64_t v235 = v4 + 360;
    int v224 = a2 + 2;
    int v225 = ~a2;
    uint64_t v223 = (uint64_t *)(v4 + 184);
    int v231 = a2 + 1;
    uint64_t v232 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v233 = *(unsigned int *)v7;
      sub_A49E18((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v244, *(void *)(v4 + 24), v228, v227, 0, 1);
      unint64_t v9 = v248;
      BOOL v10 = (unint64_t)v248 < v247 || (unint64_t)v248 >= v249;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v256 + 4;
      v256 = v7;
      if ((unint64_t)v7 >= v257) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        long long v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        unint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v67 = *(void *)(v12 + 48);
          if ((unint64_t)(v67 - v36) >= 0x1555555555555555) {
            goto LABEL_319;
          }
        }
        else
        {
          uint64_t v64 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v64) & v28;
            uint64_t v65 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v65;
            unsigned int v34 = v65[1];
            ++v64;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v67 = *(void *)(v12 + 48);
          if ((unint64_t)(v67 - v36) >= 0x1555555555555555)
          {
LABEL_319:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v68 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v68[1])
            ? (BOOL v69 = *(_DWORD *)(v12 + 32) == *v68)
            : (BOOL v69 = 0),
              v69))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v63 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v67 + 1;
          uint64_t v63 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v60 = *(void *)(v12 + 40);
      uint64_t v59 = *(void *)(v12 + 48);
      if ((unint64_t)(v59 - v60) >= 0x1555555555555555) {
        goto LABEL_319;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v60
        && ((int v61 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v61[1])
          ? (BOOL v62 = *(_DWORD *)(v12 + 32) == *v61)
          : (BOOL v62 = 0),
            v62))
      {
        *(void *)(v12 + 40) = v60 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v59 + 1;
      }
      uint64_t v63 = 3 * v24;
LABEL_95:
      uint64_t v70 = 4 * v63;
      uint64_t v71 = v29 + v70;
      *(void *)uint64_t v71 = v11;
      *(_DWORD *)(v71 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v70;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v243 = v46;
        uint64_t result = sub_BD5C18(v235, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v72 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v72 + 1;
      *(_DWORD *)(v45 + 8) = v72;
      uint64_t v74 = *(unint64_t **)(v12 + 96);
      unint64_t v73 = *(void *)(v12 + 104);
      if ((unint64_t)v74 < v73)
      {
        *uint64_t v74 = v11;
        uint64_t v75 = (uint64_t)(v74 + 1);
        goto LABEL_119;
      }
      uint64_t v76 = *(char **)(v12 + 88);
      uint64_t v77 = ((char *)v74 - v76) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v79 = v73 - (void)v76;
      if (v79 >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_322;
        }
        uint64_t v81 = (char *)operator new(8 * v80);
        unsigned int v82 = (unint64_t *)&v81[8 * v77];
        *unsigned int v82 = v11;
        uint64_t v75 = (uint64_t)(v82 + 1);
        if (v74 != (unint64_t *)v76)
        {
LABEL_107:
          unint64_t v83 = (char *)(v74 - 1) - v76;
          if (v83 < 0x58)
          {
            uint64_t v4 = v232;
            goto LABEL_116;
          }
          uint64_t v4 = v232;
          if ((unint64_t)(v76 - v81) < 0x20) {
            goto LABEL_328;
          }
          uint64_t v84 = (v83 >> 3) + 1;
          uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v86 = &v74[v85 / 0xFFFFFFFFFFFFFFF8];
          unsigned int v82 = (unint64_t *)((char *)v82 - v85);
          uint64_t v87 = &v81[8 * v77 - 16];
          unsigned int v88 = v74 - 2;
          uint64_t v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v90 = *(_OWORD *)v88;
            *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
            *(_OWORD *)uint64_t v87 = v90;
            v87 -= 32;
            v88 -= 4;
            v89 -= 4;
          }
          while (v89);
          uint64_t v74 = v86;
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_328:
            do
            {
LABEL_116:
              unint64_t v91 = *--v74;
              *--unsigned int v82 = v91;
            }
            while (v74 != (unint64_t *)v76);
          }
          uint64_t v74 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v82;
          *(void *)(v12 + 96) = v75;
          *(void *)(v12 + 104) = &v81[8 * v80];
          unint64_t v8 = (char *)v234;
          if (!v74) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v74);
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v81 = 0;
        unsigned int v82 = (unint64_t *)(8 * v77);
        *(void *)(8 * v77) = v11;
        uint64_t v75 = 8 * v77 + 8;
        if (v74 != (unint64_t *)v76) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v232;
      *(void *)(v12 + 88) = v82;
      *(void *)(v12 + 96) = v75;
      *(void *)(v12 + 104) = &v81[8 * v80];
      unint64_t v8 = (char *)v234;
      if (v74) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v75;
      unsigned int v243 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v235, v243, v11);
      if (result)
      {
LABEL_51:
        long long v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) != v47)
        {
          unsigned int v49 = *v47;
          unsigned int v48 = v47[1];
          if (v48 != *v47)
          {
            int v50 = v253;
            uint64_t v51 = v251;
            uint64_t v52 = v246;
            unint64_t v53 = ((unint64_t)v248 - v247) >> 4;
            uint64_t v54 = 52 * v48 - 52 * v49;
            uint64_t v55 = (int *)(*(void *)(v4 + 128) + 52 * v49 + 48);
            do
            {
              unsigned int v58 = *(v55 - 2);
              if (v50)
              {
                unsigned int v254 = *(v55 - 1);
                int v56 = *v55;
                int v255 = *v55;
              }
              else
              {
                int v56 = *(_DWORD *)(v51 + 12 * v58);
              }
              BOOL v57 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
              *(v55 - 5) = *(unsigned int *)((char *)&v57[2 * (*(_DWORD *)(v51 + 12 * v58 + 4) + v53)
                                                        + 1]
                                           + *v57)
                         + v56;
              v55 += 13;
              v54 -= 52;
            }
            while (v54);
            __int16 v252 = (int *)(v51 + 12 * v58);
            sub_A4C7C4(v8, 0);
            if ((*((unsigned char *)v248 + 15) & 1) == 0
              || v250
              && (*(_DWORD *)(v250 + 4 * (((unint64_t)v248 - v247) >> 4)) & v233) != 0)
            {
              goto LABEL_219;
            }
            int v96 = *(_DWORD *)(v4 + 96);
            if (*(unsigned char *)(v4 + 20))
            {
              unsigned int v230 = v96 + v96 * *(_DWORD *)(v4 + 352);
              unint64_t v97 = v243;
              unint64_t v98 = *(unint64_t **)(v4 + 48);
              if (v98)
              {
LABEL_131:
                if (*v98 <= v97)
                {
                  int v103 = 0x7FFFFFFF;
                  uint64_t v104 = *(char **)(v4 + 104);
                  unint64_t v105 = *(char **)(v4 + 112);
                  if (v105 != v104) {
                    goto LABEL_151;
                  }
                }
                else
                {
                  uint64_t v99 = v4;
                  unsigned int v100 = 0;
                  unsigned int v101 = *(_DWORD *)(v99 + 100) + v225;
                  unsigned int v102 = v101;
                  while (v100 <= v101)
                  {
                    int v103 = *(_DWORD *)sub_A3F53C(v98 + 2, v98[1] * v97 + v102);
                    v100 += 2;
                    v102 -= 2;
                    if (v103 != 0x7FFFFFFF)
                    {
                      uint64_t v4 = v232;
                      uint64_t v104 = *(char **)(v232 + 104);
                      unint64_t v105 = *(char **)(v232 + 112);
                      if (v105 == v104) {
                        goto LABEL_136;
                      }
LABEL_151:
                      int v117 = *((_DWORD *)v104 + 1);
                      int v118 = v117 - *(_DWORD *)v104;
                      if (v117 == *(_DWORD *)v104) {
                        goto LABEL_219;
                      }
                      if (v103 == 0x7FFFFFFF)
                      {
                        unsigned int v119 = 0;
                        while (*((_DWORD *)v104 + 1) - *(_DWORD *)v104 > v119)
                        {
                          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v4 + 136) - *(void *)(v4 + 128)) >> 2) <= (unint64_t)(v119 + *(_DWORD *)v104)) {
                            goto LABEL_324;
                          }
                          if (v118 == ++v119) {
                            goto LABEL_219;
                          }
                        }
LABEL_323:
                        unint64_t v222 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        sub_188D9E0(v222, "key does not exist and cannot be added");
LABEL_325:
                      }
                      uint64_t v122 = 0;
                      unsigned int v123 = 0;
                      unint64_t v124 = (v96 + v96 * v97);
                      unsigned int v125 = v224 + v124;
                      unint64_t v226 = (v224 + v124);
                      unint64_t v229 = (v124 + 1);
                      while (2)
                      {
                        uint64_t v130 = *(char **)(v4 + 104);
                        unint64_t v131 = *(char **)(v4 + 112);
                        if (v131 == v130 || *((_DWORD *)v130 + 1) - *(_DWORD *)v130 <= v123) {
                          goto LABEL_323;
                        }
                        unint64_t v132 = *(_DWORD *)v130 + v123;
                        uint64_t v133 = *(void *)(v4 + 128);
                        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v133) >> 2) <= v132)
                        {
LABEL_324:
                          unint64_t v222 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                          sub_188D9E0(v222, "index out of range");
                          goto LABEL_325;
                        }
                        uint64_t v134 = v133 + 52 * v132;
                        long long v136 = *(_OWORD *)(v134 + 16);
                        long long v135 = *(_OWORD *)(v134 + 32);
                        long long v137 = *(_OWORD *)v134;
                        int v262 = *(_DWORD *)(v134 + 48);
                        long long v260 = v136;
                        long long v261 = v135;
                        long long v259 = v137;
                        if (SHIDWORD(v136) <= v103)
                        {
                          if (v230 != -1)
                          {
                            if (sub_A4B018((uint64_t)v234, (uint64_t)&v259, v230)) {
                              goto LABEL_178;
                            }
                            uint64_t v130 = *(char **)(v4 + 104);
                            unint64_t v131 = *(char **)(v4 + 112);
                          }
                          unint64_t v138 = (v131 - v130) >> 3;
                          if (v138 <= v124)
                          {
                            if (v229 <= v138)
                            {
                              if (v229 >= v138) {
                                goto LABEL_182;
                              }
                              uint64_t v139 = v122;
                              unint64_t v131 = &v130[8 * v229];
                              *(void *)(v4 + 112) = v131;
                            }
                            else
                            {
                              uint64_t v139 = v122;
                              sub_D2BFC(v234, v229 - v138);
                              uint64_t v130 = *(char **)(v4 + 104);
                              unint64_t v131 = *(char **)(v4 + 112);
                            }
                          }
                          else
                          {
LABEL_182:
                            uint64_t v139 = v122;
                          }
                          uint64_t v140 = *(void *)(v4 + 128);
                          unsigned int v141 = *(_DWORD *)&v130[8 * v124];
                          unint64_t v142 = (v131 - v130) >> 3;
                          if (v142 <= v124)
                          {
                            if (v229 <= v142)
                            {
                              if (v229 < v142) {
                                *(void *)(v4 + 112) = &v130[8 * v229];
                              }
                              goto LABEL_188;
                            }
                            sub_D2BFC(v234, v229 - v142);
                            uint64_t v130 = *(char **)(v4 + 104);
                            uint64_t v143 = *(void *)(v4 + 128);
                          }
                          else
                          {
LABEL_188:
                            uint64_t v143 = v140;
                          }
                          uint64_t v144 = v140 + 52 * v141;
                          uint64_t v145 = v143 + 52 * *(unsigned int *)&v130[8 * v124 + 4];
                          uint64_t v122 = v139;
                          unsigned int v125 = v224 + v124;
                          if (v144 == v145)
                          {
LABEL_197:
                            if (v226 < (uint64_t)(*(void *)(v4 + 112) - (void)v130) >> 3)
                            {
                              unsigned int v149 = *(_DWORD *)&v130[8 * v226];
                              unsigned int v148 = *(_DWORD *)&v130[8 * v226 + 4];
                              if (v148 != v149)
                              {
                                uint64_t v126 = 0;
                                uint64_t v150 = 52 * v148 - 52 * v149;
                                uint64_t v151 = (_DWORD *)(v143 + 52 * v149 + 28);
                                while (1)
                                {
                                  if (*v151 != 0x7FFFFFFF)
                                  {
                                    if (*v151 <= SHIDWORD(v260)) {
                                      goto LABEL_179;
                                    }
                                    _DWORD *v151 = 0x7FFFFFFF;
                                    uint64_t v126 = 1;
                                  }
                                  v151 += 13;
                                  v150 -= 52;
                                  if (!v150) {
                                    goto LABEL_169;
                                  }
                                }
                              }
                            }
                            uint64_t v126 = 0;
LABEL_169:
                            uint64_t v127 = sub_A4A580((char **)v234, v226, &v259);
                            *(void *)(v127 + 40) = -1;
                            *(_DWORD *)(v127 + 48) = 0x7FFFFFFF;
                            int v128 = *(_DWORD *)(v4 + 176);
                            *(_DWORD *)(v4 + 176) = v128 + 1;
                            *(_DWORD *)(v127 + 24) = v128;
                            *(_DWORD *)(v127 + 20) = DWORD2(v260);
                            *(void *)(v127 + 40) = -1;
                            *(_DWORD *)(v127 + 48) = 0x7FFFFFFF;
                            uint64_t v129 = 1;
                          }
                          else
                          {
                            while (1)
                            {
                              int v146 = *(_DWORD *)(v144 + 28);
                              if (v146 != 0x7FFFFFFF && v146 <= SHIDWORD(v260)) {
                                break;
                              }
                              v144 += 52;
                              if (v144 == v145) {
                                goto LABEL_197;
                              }
                            }
LABEL_178:
                            uint64_t v126 = 0;
LABEL_179:
                            uint64_t v129 = 0;
                          }
                          v122 |= v129 | (v126 << 8);
                        }
                        if (++v123 == v118)
                        {
                          if ((v122 & 0xFF00) != 0) {
                            sub_A4A9B0(v234, v125);
                          }
                          if ((_BYTE)v122) {
                            sub_A3EF14(v223, &v243);
                          }
LABEL_219:
                          unint64_t v105 = *(char **)(v4 + 112);
                          unint64_t v8 = (char *)v234;
                          uint64_t v106 = (char *)*v234;
                          uint64_t v107 = v105 - (unsigned char *)*v234;
                          if (v105 == *v234)
                          {
LABEL_220:
                            uint64_t v161 = v107 >> 3;
                            unint64_t v162 = 1 - (v107 >> 3);
                            uint64_t v163 = *(void *)(v4 + 120);
                            if (v162 <= (v163 - (uint64_t)v105) >> 3)
                            {
                              bzero(v105, 8 * v162);
                              v105 += 8 * v162;
                              *(void *)(v4 + 112) = v105;
                              uint64_t v106 = *(char **)v8;
                              uint64_t v108 = *(void *)(v4 + 128);
                              unsigned int v109 = **(_DWORD **)v8;
                              if (*(char **)v8 == v105) {
                                goto LABEL_138;
                              }
LABEL_232:
                              unint64_t v159 = (_DWORD *)(v108 + 52 * v109);
                              uint64_t v160 = v108 + 52 * *((unsigned int *)v106 + 1);
                              if (v159 == (_DWORD *)v160) {
                                goto LABEL_239;
                              }
                              goto LABEL_233;
                            }
                            uint64_t v164 = v163 - (void)v106;
                            uint64_t v165 = v164 >> 2;
                            if ((unint64_t)(v164 >> 2) <= 1) {
                              uint64_t v165 = 1;
                            }
                            BOOL v10 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8;
                            unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
                            if (!v10) {
                              unint64_t v166 = v165;
                            }
                            if (!(v166 >> 61))
                            {
                              uint64_t v167 = 8 * v166;
                              uint64_t v168 = (char *)operator new(8 * v166);
                              unint64_t v169 = &v168[8 * v161];
                              bzero(v169, 8 * v162);
                              *(void *)(v4 + 104) = v169;
                              *(void *)(v4 + 112) = &v169[8 * v162];
                              *(void *)(v4 + 120) = &v168[v167];
                              if (v105)
                              {
                                operator delete(v105);
                                unint64_t v105 = *(char **)(v4 + 112);
                                uint64_t v106 = *(char **)v8;
                                uint64_t v108 = *(void *)(v4 + 128);
                                unsigned int v109 = **(_DWORD **)v8;
                                if (*(char **)v8 != v105) {
                                  goto LABEL_232;
                                }
                              }
                              else
                              {
                                unint64_t v105 = &v169[8 * v162];
                                uint64_t v106 = *(char **)v8;
                                uint64_t v108 = *(void *)(v4 + 128);
                                unsigned int v109 = **(_DWORD **)v8;
                                if (*(char **)v8 != v105) {
                                  goto LABEL_232;
                                }
                              }
LABEL_138:
                              int v110 = *(char **)(v4 + 120);
                              if (v110 != v105)
                              {
                                *(void *)unint64_t v105 = 0;
                                *(void *)(v4 + 112) = v105 + 8;
                                goto LABEL_213;
                              }
                              uint64_t v111 = 1;
                              uint64_t v112 = v110 - v106;
                              if ((unint64_t)(v112 >> 2) > 1) {
                                uint64_t v111 = v112 >> 2;
                              }
                              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v113 = v111;
                              }
                              if (!v113)
                              {
                                unint64_t v114 = 0;
                                uint64_t v115 = 0;
                                *(void *)&def_332C = 0;
                                uint64_t v116 = 8;
                                if (v105 == v106) {
                                  goto LABEL_211;
                                }
                                goto LABEL_159;
                              }
                              if (!(v113 >> 61))
                              {
                                unint64_t v114 = (char *)operator new(8 * v113);
                                uint64_t v115 = v114;
                                *(void *)unint64_t v114 = 0;
                                uint64_t v116 = (uint64_t)(v114 + 8);
                                if (v105 == v106)
                                {
LABEL_211:
                                  *(void *)(v4 + 104) = v115;
                                  *(void *)(v4 + 112) = v116;
                                  *(void *)(v4 + 120) = &v114[8 * v113];
                                  if (v105) {
                                    operator delete(v105);
                                  }
LABEL_213:
                                  unint64_t v159 = (_DWORD *)(v108 + 52 * v109);
                                  uint64_t v160 = *(void *)(v4 + 128) + 52 * *(unsigned int *)(*(void *)(v4 + 104) + 4);
                                  if (v159 == (_DWORD *)v160)
                                  {
LABEL_239:
                                    uint64_t result = (uint64_t)sub_A4C7C4(v8, 0);
                                    goto LABEL_240;
                                  }
LABEL_233:
                                  int v170 = v253;
                                  uint64_t v171 = v251;
                                  int v172 = v246;
                                  unint64_t v173 = ((unint64_t)v248 - v247) >> 4;
                                  do
                                  {
                                    unsigned int v176 = v159[10];
                                    if (v170)
                                    {
                                      unsigned int v254 = v159[11];
                                      int v174 = v159[12];
                                      int v255 = v174;
                                    }
                                    else
                                    {
                                      int v174 = *(_DWORD *)(v171 + 12 * v176);
                                    }
                                    uint64_t v175 = (unsigned int *)((char *)v172
                                                          + *(unsigned __int16 *)((char *)v172 - *v172 + 6));
                                    v159[7] = *(unsigned int *)((char *)&v175[2
                                                                            * (*(_DWORD *)(v171 + 12 * v176 + 4)
                                                                                           + v173)
                                                                            + 2]
                                                              + *v175)
                                            + v174;
                                    v159 += 13;
                                  }
                                  while (v159 != (_DWORD *)v160);
                                  __int16 v252 = (int *)(v171 + 12 * v176);
                                  goto LABEL_239;
                                }
LABEL_159:
                                unint64_t v120 = v105 - 8 - v106;
                                if (v120 < 0x58)
                                {
                                  unint64_t v121 = v105;
                                  goto LABEL_209;
                                }
                                if ((unint64_t)(v105 - v114) < 0x20)
                                {
                                  unint64_t v121 = v105;
                                  goto LABEL_209;
                                }
                                uint64_t v152 = (v120 >> 3) + 1;
                                uint64_t v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
                                unint64_t v121 = &v105[-v153];
                                v115 -= v153;
                                uint64_t v154 = v114 - 16;
                                unint64_t v155 = v105 - 16;
                                uint64_t v156 = v152 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  long long v157 = *(_OWORD *)v155;
                                  *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                                  *(_OWORD *)uint64_t v154 = v157;
                                  v154 -= 32;
                                  v155 -= 32;
                                  v156 -= 4;
                                }
                                while (v156);
                                if (v152 != (v152 & 0x3FFFFFFFFFFFFFFCLL))
                                {
                                  do
                                  {
LABEL_209:
                                    uint64_t v158 = *((void *)v121 - 1);
                                    v121 -= 8;
                                    *((void *)v115 - 1) = v158;
                                    v115 -= 8;
                                  }
                                  while (v121 != v106);
                                }
                                unint64_t v105 = *(char **)v8;
                                goto LABEL_211;
                              }
                            }
LABEL_322:
                            sub_188D718();
                          }
LABEL_137:
                          uint64_t v108 = *(void *)(v4 + 128);
                          unsigned int v109 = *(_DWORD *)v106;
                          if (v106 != v105) {
                            goto LABEL_232;
                          }
                          goto LABEL_138;
                        }
                        continue;
                      }
                    }
                  }
                  int v103 = 0x7FFFFFFF;
                  uint64_t v4 = v232;
                  uint64_t v104 = *(char **)(v232 + 104);
                  unint64_t v105 = *(char **)(v232 + 112);
                  if (v105 != v104) {
                    goto LABEL_151;
                  }
                }
LABEL_136:
                unint64_t v8 = (char *)v234;
                uint64_t v106 = (char *)*v234;
                uint64_t v107 = v105 - (unsigned char *)*v234;
                if (v105 == *v234) {
                  goto LABEL_220;
                }
                goto LABEL_137;
              }
            }
            else
            {
              unsigned int v230 = -1;
              unint64_t v97 = v243;
              unint64_t v98 = *(unint64_t **)(v4 + 48);
              if (v98) {
                goto LABEL_131;
              }
            }
            int v103 = 2147483646;
            uint64_t v104 = *(char **)(v4 + 104);
            unint64_t v105 = *(char **)(v4 + 112);
            if (v105 != v104) {
              goto LABEL_151;
            }
            goto LABEL_136;
          }
        }
LABEL_240:
        if ((*((unsigned char *)v248 + 15) & 2) == 0) {
          goto LABEL_247;
        }
        if (v250)
        {
          if (*(_DWORD *)(v250 + 4 * (((unint64_t)v248 - v247) >> 4)) != v233) {
            goto LABEL_247;
          }
        }
        else if (v233)
        {
          goto LABEL_247;
        }
        unint64_t v177 = v231 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v243;
        uint64_t v178 = *(void *)(v4 + 104);
        if (v177 >= (*(void *)(v4 + 112) - v178) >> 3) {
          goto LABEL_247;
        }
        uint64_t v180 = (_DWORD *)(v178 + 8 * v177);
        int v179 = v180[1];
        int v181 = v179 - *v180;
        if (v179 == *v180) {
          goto LABEL_247;
        }
        unsigned int v189 = 0;
        while (2)
        {
          uint64_t v190 = *(void *)(v4 + 104);
          if (v177 >= (*(void *)(v4 + 112) - v190) >> 3) {
            goto LABEL_323;
          }
          uint64_t v192 = (int *)(v190 + 8 * v177);
          int v191 = *v192;
          if (v192[1] - *v192 <= v189) {
            goto LABEL_323;
          }
          unint64_t v193 = v191 + v189;
          uint64_t v194 = *(void *)(v4 + 128);
          if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v194) >> 2) <= v193) {
            goto LABEL_324;
          }
          uint64_t v195 = v194 + 52 * v193;
          signed int v196 = *((_DWORD *)v248 + 2) + *(_DWORD *)(v195 + 28);
          if (v253)
          {
            uint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v244, v196, 1);
            if (result)
            {
LABEL_281:
              uint64_t v197 = *(void *)(v195 + 20);
              uint64_t v198 = *(void *)(v195 + 32);
              int v199 = v255;
              unint64_t v200 = 0xFFFFFFFF00000000;
              if (v253) {
                unint64_t v200 = (unint64_t)v254 << 32;
              }
              unint64_t v201 = (-1431655765 * (((unint64_t)v252 - v251) >> 2)) | v200;
              if (!v253) {
                int v199 = 0x7FFFFFFF;
              }
              uint64_t v202 = (unsigned int *)((char *)v246 + *(unsigned __int16 *)((char *)v246 - *v246 + 6));
              unint64_t v203 = (char *)v202 + *v202;
              uint64_t v204 = &v255;
              if (!v253) {
                uint64_t v204 = v252;
              }
              int v205 = *(_DWORD *)&v203[8 * v252[1] + 8 + 8 * (((unint64_t)v248 - v247) >> 4)]
                   + *v204;
              LODWORD(v236) = ((unint64_t)v248 - v247) >> 4;
              *(void *)((char *)&v236 + 4) = v201;
              HIDWORD(v236) = v199;
              unsigned int v237 = v258;
              uint64_t v238 = v197;
              int v239 = v205;
              uint64_t v240 = v198;
              unint64_t v241 = v201;
              int v242 = v199;
              uint64_t v206 = *(unsigned int **)(v4 + 104);
              if (*(unsigned int **)(v4 + 112) == v206
                || (unsigned int v208 = *v206, v207 = *(_DWORD *)(*(void *)(v4 + 104) + 4), v207 == v208))
              {
                uint64_t result = sub_A4A580((char **)v8, 0, &v236);
              }
              else
              {
                char v209 = 0;
                uint64_t v210 = 52 * v207 - 52 * v208;
                unint64_t v211 = (int *)(*(void *)(v4 + 128) + 52 * v208 + 28);
                do
                {
                  if (*v211 != 0x7FFFFFFF)
                  {
                    if (*v211 <= v239) {
                      goto LABEL_295;
                    }
                    *unint64_t v211 = 0x7FFFFFFF;
                    char v209 = 1;
                  }
                  v211 += 13;
                  v210 -= 52;
                }
                while (v210);
                uint64_t result = sub_A4A580((char **)v8, 0, &v236);
LABEL_295:
                if (v209)
                {
                  unint64_t v212 = *(char **)(v4 + 104);
                  if (*(char **)(v4 + 112) != v212)
                  {
                    uint64_t v213 = *(void *)(v4 + 128);
                    unsigned int v214 = *(_DWORD *)v212;
LABEL_298:
                    uint64_t v215 = v213 + 52 * v214;
                    uint64_t v216 = v213 + 52 * *((unsigned int *)v212 + 1);
                    if (v215 != v216) {
                      goto LABEL_302;
                    }
                    goto LABEL_308;
                  }
                  sub_D2BFC((void **)v8, 1uLL);
                  unint64_t v212 = *(char **)(v4 + 104);
                  uint64_t v213 = *(void *)(v4 + 128);
                  unsigned int v214 = *(_DWORD *)v212;
                  if (*(char **)(v4 + 112) != v212) {
                    goto LABEL_298;
                  }
                  sub_D2BFC((void **)v8, 1uLL);
                  unint64_t v212 = *(char **)(v4 + 104);
                  uint64_t v215 = v213 + 52 * v214;
                  uint64_t v216 = *(void *)(v4 + 128) + 52 * *((unsigned int *)v212 + 1);
                  if (v215 == v216)
                  {
LABEL_308:
                    if (*(char **)(v4 + 112) == v212) {
                      goto LABEL_309;
                    }
                  }
                  else
                  {
LABEL_302:
                    while (*(_DWORD *)(v215 + 28) != 0x7FFFFFFF)
                    {
                      v215 += 52;
                      if (v215 == v216)
                      {
                        uint64_t v215 = v216;
                        if (*(char **)(v4 + 112) != v212) {
                          goto LABEL_310;
                        }
                        goto LABEL_309;
                      }
                    }
                    if (v215 == v216) {
                      goto LABEL_308;
                    }
                    uint64_t v217 = v215 + 52;
                    if (v215 + 52 == v216) {
                      goto LABEL_308;
                    }
                    do
                    {
                      if (*(_DWORD *)(v217 + 28) != 0x7FFFFFFF)
                      {
                        long long v218 = *(_OWORD *)v217;
                        long long v219 = *(_OWORD *)(v217 + 16);
                        long long v220 = *(_OWORD *)(v217 + 32);
                        *(_DWORD *)(v215 + 48) = *(_DWORD *)(v217 + 48);
                        *(_OWORD *)(v215 + 16) = v219;
                        *(_OWORD *)(v215 + 32) = v220;
                        *(_OWORD *)uint64_t v215 = v218;
                        v215 += 52;
                      }
                      v217 += 52;
                    }
                    while (v217 != v216);
                    unint64_t v212 = *(char **)v8;
                    if (*(void *)(v4 + 112) == *(void *)v8)
                    {
LABEL_309:
                      sub_D2BFC((void **)v8, 1uLL);
                      unint64_t v212 = *(char **)v8;
                    }
                  }
LABEL_310:
                  uint64_t result = (uint64_t)sub_A4A05C((void **)v8, 0, (char *)v215, (unsigned char *)(*(void *)(v4 + 128) + 52 * *((unsigned int *)v212 + 1)));
                }
              }
            }
          }
          else
          {
            uint64_t result = sub_A1F8B4((uint64_t)&v244, v196, 1);
            if (result) {
              goto LABEL_281;
            }
          }
          if (++v189 == v181) {
            goto LABEL_247;
          }
          continue;
        }
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v92 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v92)
        {
          sub_D2BFC((void **)v8, 1uLL);
          uint64_t v92 = *(unsigned int **)(v4 + 104);
          uint64_t v93 = *(void *)(v4 + 128);
          unsigned int v94 = *v92;
          if (*(unsigned int **)(v4 + 112) == v92)
          {
            sub_D2BFC((void **)v8, 1uLL);
            uint64_t v92 = *(unsigned int **)(v4 + 104);
            uint64_t v95 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v93 = *(void *)(v4 + 128);
          unsigned int v94 = *v92;
        }
        uint64_t v95 = v93;
LABEL_126:
        uint64_t result = (uint64_t)sub_A4A05C((void **)v8, 0, (char *)(v93 + 52 * v94), (unsigned char *)(v95 + 52 * v92[1]));
      }
LABEL_247:
      unint64_t v182 = v247;
      unint64_t v9 = v248 + 2;
      v248 += 2;
      if (*(unsigned char *)(v244 + 16)) {
        BOOL v183 = v245 == 0;
      }
      else {
        BOOL v183 = 0;
      }
      if (v183 && (unint64_t)v9 >= v247 && (unint64_t)v9 < v249)
      {
        do
        {
          unint64_t v186 = __ROR8__(*v9, 32);
          if (HIDWORD(v186) == 1 && (v186 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v244 + 4120));
          unint64_t v182 = v247;
          unint64_t v9 = v248;
          if (result) {
            break;
          }
          unint64_t v9 = v248 + 2;
          unsigned int v248 = v9;
        }
        while ((unint64_t)v9 >= v247 && (unint64_t)v9 < v249);
      }
      if ((unint64_t)v9 < v182 || (unint64_t)v9 >= v249) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      long long v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A4C724(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C738(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C74C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C760(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C774(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C79C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C7B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_A4C7C4(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A4AD68(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_28:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_28;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x4EC4EC4EC4EC4EC5 * ((*((void *)v2 + 4) - v13) >> 2) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 52 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                if (*((_DWORD *)result + 7) > v16)
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_7;
                }
                *unint64_t v15 = 0x7FFFFFFF;
                char v5 = 1;
              }
              if (v8 == ++v11) {
                goto LABEL_7;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_7:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A4A9B0((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A4C9AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A4C9C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A4C9D4(uint64_t result, void *a2, uint64_t a3)
{
  char v5 = (void *)result;
  unsigned int v6 = (void *)(*(void *)(result + 32) + 16);
  *(void *)(result + 32) = v6;
  if (*(unsigned char *)(*(void *)result + 16)) {
    BOOL v7 = *(unsigned char *)(result + 8) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    while ((unint64_t)v6 >= v5[3] && (unint64_t)v6 < v5[5])
    {
      unint64_t v23 = __ROR8__(*v6, 32);
      if (HIDWORD(v23) == 1 && (v23 + 3) < 2) {
        break;
      }
      uint64_t result = sub_2AB7E4(**(void **)(*v5 + 4120));
      unsigned int v6 = (void *)v5[4];
      if (result) {
        break;
      }
      v6 += 2;
      v5[4] = v6;
    }
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v5[5];
  if ((unint64_t)v6 >= v8 && (unint64_t)v6 < v9)
  {
    unsigned int v11 = -1;
    int v12 = 0x7FFFFFFF;
    do
    {
      if (__ROR8__(*v6, 32) == *a2 && (*((unsigned char *)v6 + 15) & 1) != 0)
      {
        uint64_t v13 = v5[6];
        if (v13) {
          uint64_t v13 = *(unsigned int *)(v13 + 4 * (((unint64_t)v6 - v8) >> 4));
        }
        if ((v13 & a3) == 0)
        {
          uint64_t v14 = *((unsigned char *)v5 + 96) ? v5 + 13 : (_DWORD *)v5[8];
          unint64_t v15 = (unsigned int *)(v5[2] + *(unsigned __int16 *)(v5[2] - *(int *)v5[2] + 6));
          int v16 = *(unsigned int *)((char *)&v15[2 * *(_DWORD *)(v5[8] + 4)
                                             + 1
                                             + 2 * (((unint64_t)v6 - v8) >> 4)]
                                + *v15)
              + *v14;
          if (v12 == 0x7FFFFFFF || v16 < v12)
          {
            int v12 = v16;
            unsigned int v11 = ((unint64_t)v6 - v8) >> 4;
          }
        }
      }
      v6 += 2;
      v5[4] = v6;
      if (*(unsigned char *)(*v5 + 16)) {
        BOOL v19 = *((unsigned char *)v5 + 8) == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        if ((unint64_t)v6 < v5[5])
        {
          do
          {
            unint64_t v20 = __ROR8__(*v6, 32);
            if (HIDWORD(v20) == 1 && (v20 + 3) < 2) {
              break;
            }
            uint64_t result = sub_2AB7E4(**(void **)(*v5 + 4120));
            unint64_t v8 = v5[3];
            unsigned int v6 = (void *)v5[4];
            if (result) {
              break;
            }
            v6 += 2;
            v5[4] = v6;
          }
          while ((unint64_t)v6 >= v8 && (unint64_t)v6 < v5[5]);
        }
        unint64_t v9 = v5[5];
      }
    }
    while ((unint64_t)v6 >= v8 && (unint64_t)v6 < v9);
    if (v11 != -1) {
      v5[4] = v8 + 16 * v11;
    }
  }
  return result;
}

uint64_t sub_A4CBF4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  unsigned int v4 = (char *)a1[1];
  unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v4[-*a1] >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - (uint64_t)v3) >> 3) > v6) {
    unint64_t v6 = 0x9E79E79E79E79E7ALL * ((a1[2] - (uint64_t)v3) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - (uint64_t)v3) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  if (v6 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v8 = 168 * v6;
  unint64_t v9 = (char *)operator new(168 * v6);
  uint64_t v10 = (uint64_t)&v9[168 * v5];
  unsigned int v11 = &v9[v8];
  uint64_t v25 = &v9[v8];
  int v12 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(v10 + 160) = v12;
  if (v12 != 1)
  {
    if (!v12)
    {
      sub_9F6FA0(v10, (long long *)a2);
      unint64_t v3 = (char *)*a1;
      unsigned int v4 = (char *)a1[1];
    }
    uint64_t v13 = v10 + 168;
    uint64_t v24 = v10 + 168;
    if (v4 != v3) {
      goto LABEL_11;
    }
LABEL_19:
    BOOL v19 = v3;
    goto LABEL_20;
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a2 + 12);
  uint64_t v13 = v10 + 168;
  uint64_t v24 = v10 + 168;
  if (v4 == v3) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v14 = 0;
  do
  {
    int v16 = (long long *)(v10 + v14 - 168);
    int v17 = (long long *)&v4[v14 - 168];
    *(_DWORD *)(v10 + v14 - 8) = *(_DWORD *)&v4[v14 - 8];
    int v18 = *(_DWORD *)&v4[v14 - 8];
    if (v18 == 1)
    {
      long long v15 = *v17;
      *(_OWORD *)(v10 + v14 - 156) = *(_OWORD *)&v4[v14 - 156];
      long long *v16 = v15;
    }
    else if (!v18)
    {
      sub_9F6FA0((uint64_t)v16, v17);
    }
    v14 -= 168;
  }
  while (&v4[v14] != v3);
  BOOL v19 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  v10 += v14;
  uint64_t v13 = v24;
  unsigned int v11 = v25;
LABEL_20:
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v11;
  if (v3 == v19)
  {
    if (v3) {
LABEL_22:
    }
      operator delete(v3);
  }
  else
  {
    do
    {
      if (!*((_DWORD *)v3 - 2))
      {
        unsigned int v21 = (void *)*((void *)v3 - 6);
        if (v21)
        {
          *((void *)v3 - 5) = v21;
          operator delete(v21);
        }
        unsigned int v22 = (void *)*((void *)v3 - 10);
        if (v22)
        {
          *((void *)v3 - 9) = v22;
          operator delete(v22);
        }
        unint64_t v23 = (void *)*((void *)v3 - 13);
        if (v23)
        {
          *((void *)v3 - 12) = v23;
          operator delete(v23);
        }
      }
      v3 -= 168;
    }
    while (v3 != v19);
    unint64_t v3 = v19;
    if (v19) {
      goto LABEL_22;
    }
  }
  return v13;
}

void sub_A4CE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A4CE3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A4CE3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    if (!*(_DWORD *)(i - 8))
    {
      unsigned int v4 = *(void **)(i - 48);
      if (v4)
      {
        *(void *)(i - 40) = v4;
        operator delete(v4);
      }
      unint64_t v5 = *(void **)(i - 80);
      if (v5)
      {
        *(void *)(i - 72) = v5;
        operator delete(v5);
      }
      unint64_t v6 = *(void **)(i - 104);
      if (v6)
      {
        *(void *)(i - 96) = v6;
        operator delete(v6);
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A4CECC(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (a1[2] - *a1);
  }
  if (0x8E38E38E38E38E39 * (a1[2] - *a1) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    BOOL v7 = (char *)operator new(72 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  int v17 = &v7[72 * v3];
  int v18 = (void **)&v7[72 * v6];
  sub_9F6D1C(v17, a2);
  uint64_t v8 = (void **)(v17 + 72);
  unint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (void **)v17;
    a1[1] = v8;
    a1[2] = v18;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = &v17[v11 * 8];
      uint64_t v13 = &v10[v11];
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 8) = 0;
      *((void *)v12 - 7) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)&v10[v11 - 9];
      *((void *)v12 - 7) = v10[v11 - 7];
      *(v13 - 8) = 0;
      *(v13 - 7) = 0;
      *(v13 - 9) = 0;
      *(v12 - 48) = (char)v10[v11 - 6];
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 5) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 5];
      *((void *)v12 - 3) = v10[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      uint64_t v14 = v10[v11 - 2];
      *(void *)(v12 - 9) = *(void **)((char *)&v10[v11 - 1] - 1);
      *((void *)v12 - 2) = v14;
      v11 -= 9;
    }
    while (&v10[v11] != v9);
    long long v15 = *a1;
    uint64_t v10 = a1[1];
    *a1 = (void **)&v17[v11 * 8];
    a1[1] = v8;
    a1[2] = v18;
    if (v10 != v15)
    {
      do
      {
        v10 -= 9;
        sub_9F5F58(v19, v10);
      }
      while (v10 != v15);
      uint64_t v10 = v15;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v17 + 72;
}

void sub_A4D0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A21530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A4D0C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)long long __p = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  char v19 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = a1 + 32;
  long long v20 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)&v22[7] = *(void *)(a1 + 63);
  BOOL v7 = (void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v21 = v5;
  *(void *)unsigned int v22 = v6;
  sub_A21B40((void **)a1, (__n128 *)a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(a1 + 40) = v8;
    operator delete(v8);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)((char *)v7 + 7) = *(void *)(a2 + 63);
  void *v7 = v9;
  sub_A21B40((void **)a2, (__n128 *)__p);
  *(unsigned char *)(a2 + 24) = v19;
  uint64_t v10 = *(void **)(a2 + 32);
  if (v10)
  {
    *(void *)(a2 + 40) = v10;
    operator delete(v10);
  }
  *(_OWORD *)(a2 + 32) = v20;
  *(void *)(a2 + 48) = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 56) = *(void *)v22;
  *(void *)(a2 + 63) = *(void *)&v22[7];
  uint64_t v11 = (char *)__p[0];
  if (__p[0])
  {
    int v12 = (char *)__p[1];
    uint64_t v13 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (!*((_DWORD *)v12 - 2))
        {
          uint64_t v14 = (void *)*((void *)v12 - 6);
          if (v14)
          {
            *((void *)v12 - 5) = v14;
            operator delete(v14);
          }
          long long v15 = (void *)*((void *)v12 - 10);
          if (v15)
          {
            *((void *)v12 - 9) = v15;
            operator delete(v15);
          }
          int v16 = (void *)*((void *)v12 - 13);
          if (v16)
          {
            *((void *)v12 - 12) = v16;
            operator delete(v16);
          }
        }
        v12 -= 168;
      }
      while (v12 != v11);
      uint64_t v13 = __p[0];
    }
    __p[1] = v11;
    operator delete(v13);
  }
}

uint64_t sub_A4D268(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xDD67C8A60DD67CLL) {
    sub_2E00();
  }
  if (0x2983759F2298375ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x2983759F2298375ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
    unint64_t v6 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v27 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0xDD67C8A60DD67CLL) {
      sub_188D718();
    }
    BOOL v7 = (char *)operator new(296 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v25 = (uint64_t)&v7[296 * v3];
  long long v26 = &v7[296 * v6];
  sub_9F68D4(v25, a2);
  uint64_t v8 = v25 + 296;
  uint64_t v9 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v25;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v25 + v11;
      uint64_t v13 = (_OWORD *)(v25 + v11 - 296);
      uint64_t v14 = &v10[v11];
      long long v15 = *(_OWORD *)&v10[v11 - 248];
      long long v16 = *(_OWORD *)&v10[v11 - 232];
      long long v17 = *(_OWORD *)&v10[v11 - 216];
      *(void *)(v12 - 200) = *(void *)&v10[v11 - 200];
      *(_OWORD *)(v12 - 216) = v17;
      *(_OWORD *)(v12 - 232) = v16;
      *(_OWORD *)(v12 - 248) = v15;
      long long v18 = *(_OWORD *)&v10[v11 - 296];
      long long v19 = *(_OWORD *)&v10[v11 - 264];
      v13[1] = *(_OWORD *)&v10[v11 - 280];
      v13[2] = v19;
      _OWORD *v13 = v18;
      *(_DWORD *)(v12 - 192) = *(_DWORD *)&v10[v11 - 192];
      long long v20 = *(_OWORD *)&v10[v11 - 184];
      *(void *)(v12 - 168) = *(void *)&v10[v11 - 168];
      *(_OWORD *)(v12 - 184) = v20;
      *((void *)v14 - 22) = 0;
      *((void *)v14 - 21) = 0;
      *((void *)v14 - 23) = 0;
      *(_DWORD *)(v12 - 160) = *(_DWORD *)&v10[v11 - 160];
      long long v21 = *(_OWORD *)&v10[v11 - 152];
      long long v22 = *(_OWORD *)&v10[v11 - 136];
      *(_OWORD *)(v12 - 120) = *(_OWORD *)&v10[v11 - 120];
      *(_OWORD *)(v12 - 136) = v22;
      *(_OWORD *)(v12 - 152) = v21;
      *(void *)&long long v21 = *(void *)&v10[v11 - 104];
      *(void *)(v12 - 88) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 104) = v21;
      *(void *)(v12 - 96) = 0;
      *(_OWORD *)(v12 - 96) = *(_OWORD *)&v10[v11 - 96];
      *(void *)(v12 - 80) = *(void *)&v10[v11 - 80];
      *((void *)v14 - 12) = 0;
      *((void *)v14 - 11) = 0;
      *((void *)v14 - 10) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)&v10[v11 - 72];
      *(void *)(v12 - 56) = *(void *)&v10[v11 - 56];
      *((void *)v14 - 9) = 0;
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      *(void *)(v12 - 48) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 32) = 0;
      *(_OWORD *)(v12 - 48) = *(_OWORD *)&v10[v11 - 48];
      *(void *)(v12 - 32) = *(void *)&v10[v11 - 32];
      *((void *)v14 - 6) = 0;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 24];
      *(void *)(v12 - 8) = *(void *)&v10[v11 - 8];
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v11 -= 296;
    }
    while (&v10[v11] != v9);
    unint64_t v23 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v25 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
    if (v10 != v23)
    {
      do
      {
        v10 -= 296;
        sub_9F5E28(v27, (uint64_t)v10);
      }
      while (v10 != v23);
      uint64_t v10 = v23;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v25 + 296;
}

void sub_A4D4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A4D50C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A4D50C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 296;
    sub_9F5E28(v4, i - 296);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_A4D564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    BOOL v7 = *(char **)(a4 + 8);
    do
    {
      while ((unint64_t)v7 >= *(void *)(a4 + 16))
      {
        BOOL v7 = sub_A220E4((void **)a4, v5);
        *(void *)(a4 + 8) = v7;
        v5 += 296;
        if (v5 == a3) {
          return a3;
        }
      }
      long long v8 = *(_OWORD *)v5;
      long long v9 = *(_OWORD *)(v5 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)(v5 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *(_OWORD *)BOOL v7 = v8;
      long long v10 = *(_OWORD *)(v5 + 48);
      long long v11 = *(_OWORD *)(v5 + 64);
      long long v12 = *(_OWORD *)(v5 + 80);
      *((void *)v7 + 12) = *(void *)(v5 + 96);
      *((_OWORD *)v7 + 4) = v11;
      *((_OWORD *)v7 + 5) = v12;
      *((_OWORD *)v7 + 3) = v10;
      *((_DWORD *)v7 + 26) = *(_DWORD *)(v5 + 104);
      long long v13 = *(_OWORD *)(v5 + 112);
      *((void *)v7 + 16) = *(void *)(v5 + 128);
      *((_OWORD *)v7 + 7) = v13;
      *(void *)(v5 + 120) = 0;
      *(void *)(v5 + 128) = 0;
      *(void *)(v5 + 112) = 0;
      *((_DWORD *)v7 + 34) = *(_DWORD *)(v5 + 136);
      long long v14 = *(_OWORD *)(v5 + 144);
      long long v15 = *(_OWORD *)(v5 + 176);
      *((_OWORD *)v7 + 10) = *(_OWORD *)(v5 + 160);
      *((_OWORD *)v7 + 11) = v15;
      *((_OWORD *)v7 + 9) = v14;
      *((void *)v7 + 24) = *(void *)(v5 + 192);
      *((void *)v7 + 26) = 0;
      *((void *)v7 + 27) = 0;
      *((void *)v7 + 25) = 0;
      *(_OWORD *)(v7 + 200) = *(_OWORD *)(v5 + 200);
      *((void *)v7 + 27) = *(void *)(v5 + 216);
      *(void *)(v5 + 200) = 0;
      *(void *)(v5 + 208) = 0;
      *(void *)(v5 + 216) = 0;
      *((void *)v7 + 28) = 0;
      *((void *)v7 + 29) = 0;
      *((void *)v7 + 30) = 0;
      *((_OWORD *)v7 + 14) = *(_OWORD *)(v5 + 224);
      *((void *)v7 + 30) = *(void *)(v5 + 240);
      *(void *)(v5 + 224) = 0;
      *(void *)(v5 + 232) = 0;
      *(void *)(v5 + 240) = 0;
      *((void *)v7 + 31) = 0;
      *((void *)v7 + 32) = 0;
      *((void *)v7 + 33) = 0;
      *(_OWORD *)(v7 + 248) = *(_OWORD *)(v5 + 248);
      *((void *)v7 + 33) = *(void *)(v5 + 264);
      *(void *)(v5 + 248) = 0;
      *(void *)(v5 + 256) = 0;
      *(void *)(v5 + 264) = 0;
      *((void *)v7 + 34) = 0;
      *((void *)v7 + 35) = 0;
      *((void *)v7 + 36) = 0;
      *((_OWORD *)v7 + 17) = *(_OWORD *)(v5 + 272);
      *((void *)v7 + 36) = *(void *)(v5 + 288);
      *(void *)(v5 + 272) = 0;
      *(void *)(v5 + 280) = 0;
      *(void *)(v5 + 288) = 0;
      v7 += 296;
      *(void *)(a4 + 8) = v7;
      v5 += 296;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_A4D6D4(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  uint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  BOOL v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    long long v9 = (char *)v14[2];
    long long v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      long long v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A4D988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A4D9B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  long long v15 = 0;
  long long v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  uint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    long long v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    long long v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    long long v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A4DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A4DDA0(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  uint64_t v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A4F538(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        long long v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      long long v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      unsigned int v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_A4F538(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    int v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    BOOL v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    unsigned int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        BOOL v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_A4F538(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          uint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          uint64_t v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          uint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      uint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      uint64_t v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *uint64_t v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A4F538(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_A4EFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A4F11C(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A4F7F4(a1 + 1336, v42);
  sub_A4FAA4((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  uint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_A4F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A4F538(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A4F7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A4F7F4(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A51F7C(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A52174(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A52324(a1, v6);
        sub_A52654(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A54164(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A557C8(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A49980(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A550C4(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A4FAA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unint64_t v297 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v334) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v295 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v334) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v296 = v5;
  if (v4 >= 2)
  {
    int v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v299 = _Q0;
    int v298 = 1;
    unint64_t v305 = a1;
    int v304 = (void **)(a1 + 13);
    while (1)
    {
      sub_A49E18((uint64_t)v7, 0);
      sub_A55648(v7, v298 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      int v300 = (unsigned int *)(v14 + 52 * v11[1]);
      unint64_t v301 = (unsigned int *)(v12 + 52 * v13);
      if (v301 != v300)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v334 = 0x7FFFFFFF;
          __int16 v335 = 0;
          unint64_t v336 = 0x8000000080000000;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          int v339 = 0x7FFFFFFF;
          __int16 v340 = 0;
          unint64_t v341 = 0x8000000080000000;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0xFFFFFFFF00000000;
          int v346 = -1;
          uint64_t v347 = 0;
          uint64_t v349 = 0;
          uint64_t v350 = 0;
          uint64_t v351 = 0;
          int v348 = 0x7FFFFFFF;
          int v352 = 100;
          int v353 = -1;
          long long v354 = v299;
          long long v355 = v299;
          long long v356 = v299;
          long long v357 = 0u;
          long long v358 = 0u;
          long long v359 = 0u;
          long long v360 = 0u;
          uint64_t v15 = a1[3];
          long long v361 = 0u;
          long long v362 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v301 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v301 != -1) {
            break;
          }
LABEL_397:
          sub_A29D50((uint64_t)__p);
          unint64_t v269 = *(void *)(v3 + 16);
          if (v269 >= *(void *)(v3 + 24))
          {
            uint64_t v270 = sub_A4D268(v297, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v270 = v269 + 296;
            *(void *)(v3 + 16) = v269 + 296;
          }
          int v7 = (char **)v304;
          *(void *)(v3 + 16) = v270;
          if (*((void *)&v361 + 1))
          {
            *(void *)&long long v362 = *((void *)&v361 + 1);
            operator delete(*((void **)&v361 + 1));
          }
          if ((void)v360)
          {
            *((void *)&v360 + 1) = v360;
            operator delete((void *)v360);
          }
          if (*((void *)&v358 + 1))
          {
            *(void *)&long long v359 = *((void *)&v358 + 1);
            operator delete(*((void **)&v358 + 1));
          }
          unint64_t v271 = (void **)v357;
          if ((void)v357)
          {
            uint64_t v272 = *((void *)&v357 + 1);
            long long v273 = (void *)v357;
            if (*((void *)&v357 + 1) != (void)v357)
            {
              do
              {
                uint64_t v275 = *(void **)(v272 - 40);
                if (v275)
                {
                  *(void *)(v272 - 32) = v275;
                  operator delete(v275);
                }
                uint64_t v276 = (void **)(v272 - 72);
                uint64_t v277 = *(void *)(v272 - 72);
                if (v277)
                {
                  uint64_t v278 = *(void *)(v272 - 64);
                  uint64_t v274 = *(void **)(v272 - 72);
                  if (v278 != v277)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v278 - 8))
                      {
                        uint64_t v279 = *(void **)(v278 - 48);
                        if (v279)
                        {
                          *(void *)(v278 - 40) = v279;
                          operator delete(v279);
                        }
                        uint64_t v280 = *(void **)(v278 - 80);
                        if (v280)
                        {
                          *(void *)(v278 - 72) = v280;
                          operator delete(v280);
                        }
                        unint64_t v281 = *(void **)(v278 - 104);
                        if (v281)
                        {
                          *(void *)(v278 - 96) = v281;
                          operator delete(v281);
                        }
                      }
                      v278 -= 168;
                    }
                    while (v278 != v277);
                    uint64_t v274 = *v276;
                  }
                  *(void *)(v272 - 64) = v277;
                  operator delete(v274);
                  a1 = v305;
                }
                v272 -= 72;
              }
              while (v276 != v271);
              long long v273 = (void *)v357;
            }
            *((void *)&v357 + 1) = v271;
            operator delete(v273);
          }
          if (SHIBYTE(v351) < 0) {
            operator delete(v349);
          }
          v301 += 13;
          if (v301 == v300) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v301;
        int v307 = v298;
        unsigned int v308 = *((_DWORD *)a1 + 88);
        while (2)
        {
          unint64_t v325 = 0;
          int v326 = 0;
          unint64_t v327 = 0;
          long long v330 = 0;
          uint64_t v331 = 0;
          long long v329 = 0;
          v332[0] = 1;
          *(void *)&v332[4] = 0x8000000080000000;
          *(_WORD *)&v332[12] = 0;
          v332[14] = 0;
          int v384 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v309 = xmmword_20E12E0;
          __int16 v310 = 0;
          unint64_t v311 = 0x8000000080000000;
          __int16 v312 = 0;
          *(_OWORD *)unint64_t v313 = xmmword_20EB6B0;
          *(void *)&v313[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v315 = 0u;
          long long v316 = 0u;
          long long v317 = 0u;
          int v314 = -1;
          int v318 = 0x7FFFFFFF;
          unint64_t v320 = 0;
          uint64_t v321 = 0;
          __int16 v319 = 0;
          char v322 = 1;
          unint64_t v323 = 0x8000000080000000;
          int v324 = 0;
          char v328 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)unint64_t v313 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v313[16] = v19[3];
          *(void *)&v313[8] = v22;
          int v314 = *v19;
          unsigned int v23 = v314;
          uint64_t v24 = a1[3];
          uint64_t v363 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
          sub_A1E9A0((uint64_t)v364, v24, v21, v23, 0, 0);
          *(void *)&long long v366 = *(void *)&v365[24] + 12 * *(unsigned int *)&v313[8];
          if (LOBYTE(v368[1])) {
            *(void **)((char *)&v368[1] + 4) = *(void **)&v313[12];
          }
          if (*(void *)&v365[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v365[16]
          }
                                  + 4 * ((*(void *)v365 - *(void *)&v364[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A56ED0((uint64_t)v364, &v363, v25);
          _CF = *(void *)v365 < *(void *)&v365[8] && *(void *)v365 >= *(void *)&v364[24];
          uint64_t v27 = (*(void *)v365 - *(void *)&v364[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          *(_DWORD *)&v313[20] = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v313;
          unsigned int v31 = v314;
          uint64_t v32 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v29, *(int *)&v313[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                unint64_t v290 = (void *)sub_2F404((uint64_t)exception, (long long *)v364);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                char v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                char v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          unint64_t v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            int v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            int v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          int v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              uint64_t v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v305;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            BOOL v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_431;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((uint64_t v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v305;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          double v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v305;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v305;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              unsigned int v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_431:
                int v286 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v286, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            unsigned int v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_431;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_431;
          }
LABEL_117:
          if (v68
            && ((unint64_t v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v308 = *(_DWORD *)(v59 + 8);
          if (v308 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            uint64_t v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)uint64_t v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            int v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              unint64_t v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              unint64_t v98 = &v97[8 * v92];
              *(void *)unint64_t v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v305;
                  goto LABEL_155;
                }
                a1 = v305;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_442;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v105 = &v89[-v104];
                v98 -= v104;
                uint64_t v106 = &v97[8 * v92 - 16];
                uint64_t v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                uint64_t v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_442:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                uint64_t v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v308 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              unint64_t v97 = 0;
              unint64_t v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v305;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          uint64_t v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v313;
          unsigned int v113 = *(_DWORD *)&v313[20];
          uint64_t v114 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v111, *(int *)&v313[4]))
          {
            uint64_t v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              int v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                unint64_t v293 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                __int16 v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v364);
              }
              int v118 = (int *)((char *)v117 + *v117);
              unsigned int v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                unint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                unint64_t v121 = 0;
              }
              uint64_t v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              uint64_t v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          uint64_t v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            unint64_t v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            unint64_t v124 = 0;
          }
          DWORD1(v309) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v313;
          uint64_t v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v313[20];
          int v129 = *(_DWORD *)&v313[8];
          uint64_t v130 = HIDWORD(*(void *)v313);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v313[4]))
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              uint64_t v282 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v283 = (void *)sub_2F404((uint64_t)v282, (long long *)v364);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              uint64_t v287 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
              long long v288 = (void *)sub_2F404((uint64_t)v287, (long long *)v364);
            }
LABEL_180:
            uint64_t v133 = (char *)v131 + *v131;
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              long long v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              long long v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                uint64_t v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                uint64_t v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              unsigned int v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                unint64_t v142 = 0;
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                unint64_t v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  unint64_t v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)long long v364 = v146;
                  *(_DWORD *)&v364[8] = v147;
                  unsigned int v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  unsigned int v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    uint64_t v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    uint64_t v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v313[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v313[16];
                  }
                  *((void *)&v309 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v364, v152, v153);
                  __int16 v310 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v313;
                  long long v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v314;
                  int v159 = *(_DWORD *)&v313[8];
                  uint64_t v160 = HIDWORD(*(void *)v313);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v313[4]))
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      uint64_t v284 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
                      uint64_t v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v364);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      unint64_t v291 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                      BOOL v292 = (void *)sub_2F404((uint64_t)v291, (long long *)v364);
                    }
LABEL_213:
                    uint64_t v163 = (char *)v161 + *v161;
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      unint64_t v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      uint64_t v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        unint64_t v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      uint64_t v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        int v172 = 0;
                        unint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        int v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          int v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        unint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)long long v364 = v176;
                          *(_DWORD *)&v364[8] = v177;
                          uint64_t v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          int v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            int v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            int v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v313[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v313[16];
                          }
                          unint64_t v311 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v364, v182, v183);
                          __int16 v312 = v184;
                          int v373 = -1;
                          sub_9F6FA0((uint64_t)v364, &v309);
                          int v373 = 0;
                          if (v384)
                          {
                            sub_9F6FA0((uint64_t)v374, (long long *)v364);
                            int v384 = v373;
                            if (!v373) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)long long v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[16] = *(_OWORD *)&v364[16];
                            v375[0] = *(_OWORD *)v365;
                            *(_OWORD *)((char *)v375 + 12) = *(_OWORD *)&v365[12];
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            *(_OWORD *)v376 = v366;
                            uint64_t v377 = v367;
                            uint64_t v367 = 0;
                            long long v366 = 0uLL;
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            long long v378 = *(_OWORD *)v368;
                            uint64_t v379 = v368[2];
                            memset(v368, 0, sizeof(v368));
                            int v380 = v369;
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            long long v381 = v370;
                            uint64_t v382 = v371;
                            uint64_t v371 = 0;
                            long long v370 = 0uLL;
                            long long v383 = v372;
                            if (!v373)
                            {
LABEL_250:
                              if ((void)v370)
                              {
                                *((void *)&v370 + 1) = v370;
                                operator delete((void *)v370);
                              }
                              if (v368[0])
                              {
                                v368[1] = v368[0];
                                operator delete(v368[0]);
                              }
                              if ((void)v366)
                              {
                                *((void *)&v366 + 1) = v366;
                                operator delete((void *)v366);
                              }
                            }
                          }
                          if (v319)
                          {
                            unint64_t v320 = v319;
                            operator delete(v319);
                          }
                          if (*((void *)&v316 + 1))
                          {
                            *(void *)&long long v317 = *((void *)&v316 + 1);
                            operator delete(*((void **)&v316 + 1));
                          }
                          if ((void)v315)
                          {
                            *((void *)&v315 + 1) = v315;
                            operator delete((void *)v315);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v326;
                            if ((unint64_t)v326 < v327) {
                              goto LABEL_264;
                            }
LABEL_282:
                            int v326 = (char *)sub_A4CBF4((uint64_t *)&v325, (uint64_t)v374);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              uint64_t v192 = (char *)v325;
                              unint64_t v193 = v326;
                              int64_t v194 = v326 - (unsigned char *)v325;
                              if (v326 != v325)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                signed int v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v305;
                                do
                                {
                                  int v199 = (long long *)&v196[v197];
                                  unint64_t v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    *int v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v328;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              unint64_t v203 = v329;
                              uint64_t v204 = v330 - (unsigned char *)v329;
                              if (v330 != v329)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                int v205 = (char *)operator new(v330 - (unsigned char *)v329);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                uint64_t v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v332;
                              *(void *)(v186 + 63) = *(void *)&v332[7];
                              *(void *)(v186 + 56) = v207;
                              unint64_t v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v357 + 1) = v187;
                              unint64_t v208 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 1;
                              unsigned int v209 = v19[5];
                              uint64_t v210 = (char *)a1[13];
                              unint64_t v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    unint64_t v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    int v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    int v225 = v304;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_432:
                                    }
                                      sub_188D718();
                                    long long v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      int v225 = v304;
                                      a1 = v305;
                                      int v224 = &v218[8 * v212 + v219];
                                      v305[13] = &v218[8 * v212];
                                      v305[14] = v224;
                                      v305[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        uint64_t v221 = &v218[8 * v212];
                                        unint64_t v222 = v221;
                                        a1 = v305;
                                        goto LABEL_327;
                                      }
                                      uint64_t v221 = &v218[8 * v212];
                                      unint64_t v222 = v221;
                                      a1 = v305;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_443;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      uint64_t v228 = &v211[-v227];
                                      unint64_t v222 = &v221[-v227];
                                      unint64_t v229 = &v218[8 * v212 - 16];
                                      unsigned int v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)unint64_t v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      unint64_t v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_443:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      unint64_t v211 = v210;
                                      int v225 = v304;
                                      int v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        int v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  uint64_t v210 = (char *)*v225;
                                  unint64_t v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v303 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_432;
                                  }
                                  uint64_t v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  uint64_t v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                unint64_t v247 = &v244[8 * v241];
                                size_t v302 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v305;
                                  v305[13] = v247;
                                  v305[14] = &v247[v302];
                                  v305[15] = &v244[8 * v303];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    unint64_t v249 = v211;
                                    uint64_t v250 = &v244[8 * v241];
                                    a1 = v305;
                                    size_t v251 = v302;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  unint64_t v249 = &v211[-v260];
                                  uint64_t v250 = &v247[-v260];
                                  long long v261 = &v244[8 * v241 - 16];
                                  int v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v305;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)long long v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v302;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  unint64_t v211 = (char *)*v304;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v303];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              uint64_t v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 52 * v235);
                              unsigned __int8 v253 = (unsigned int *)(v237 + 52 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 13;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v384)
                              {
                                if ((void)v381)
                                {
                                  *((void *)&v381 + 1) = v381;
                                  operator delete((void *)v381);
                                }
                                if ((void)v378)
                                {
                                  *((void *)&v378 + 1) = v378;
                                  operator delete((void *)v378);
                                }
                                if (v376[0])
                                {
                                  v376[1] = v376[0];
                                  operator delete(v376[0]);
                                }
                              }
                              if (v329)
                              {
                                long long v330 = v329;
                                operator delete(v329);
                              }
                              unsigned int v254 = (char *)v325;
                              if (v325)
                              {
                                int v255 = v326;
                                char v20 = v325;
                                if (v326 != v325)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      unint64_t v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      unsigned int v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  char v20 = v325;
                                }
                                int v326 = v254;
                                operator delete(v20);
                              }
                              --v307;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            unint64_t v187 = sub_A4CECC((void ***)&v357, (uint64_t)&v325);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v328 = 1;
                          unsigned int v188 = v19[7];
                          unsigned int v189 = v19[3];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          *(_DWORD *)long long v364 = 0;
                          *(_DWORD *)&v364[4] = v188;
                          *(void *)&v364[12] = v190;
                          *(void *)&v364[20] = v191;
                          *(_DWORD *)&v364[8] = v189;
                          int v373 = 1;
                          if (v384)
                          {
                            if (v384 == 1)
                            {
                              *(_OWORD *)long long v374 = *(_OWORD *)v364;
                              *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)long long v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                            int v384 = 1;
                          }
                          else
                          {
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            if (v373)
                            {
                              if (v373 == 1) {
                                goto LABEL_280;
                              }
                              int v384 = v373;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v374, (long long *)v364);
                              int v384 = v373;
                              if (!v373)
                              {
                                if ((void)v370)
                                {
                                  *((void *)&v370 + 1) = v370;
                                  operator delete((void *)v370);
                                }
                                if (v368[0])
                                {
                                  v368[1] = v368[0];
                                  operator delete(v368[0]);
                                }
                                if ((void)v366)
                                {
                                  *((void *)&v366 + 1) = v366;
                                  operator delete((void *)v366);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v308 = *v19;
                          uint64_t v185 = (uint64_t)v326;
                          if ((unint64_t)v326 >= v327) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v384;
                          if (v384 == 1)
                          {
                            long long v223 = *(_OWORD *)v374;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v374[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            int v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v384) {
                              sub_9F6FA0(v185, (long long *)v374);
                            }
                            int v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    uint64_t v163 = sub_A10B80(v162 + 24, v156, 0);
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            uint64_t v133 = sub_A10B80(v132 + 24, v126, 0);
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v298 == v296) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v295, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A519D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      BOOL v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        unsigned int v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      unsigned int v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      unint64_t v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        uint64_t v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      uint64_t v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A51F7C(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A52158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A52174(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v22 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v22);
    int v23 = v5;
    sub_A49E18(a1 + 104, 0);
    long long v16 = xmmword_20E2060;
    uint64_t v17 = -1;
    int v18 = v3;
    int v19 = v2;
    uint64_t v20 = -1;
    int v21 = 0x7FFFFFFF;
    unsigned int v6 = *(unsigned int **)(a1 + 104);
    if (*(unsigned int **)(a1 + 112) == v6 || (unsigned int v8 = *v6, v7 = *(_DWORD *)(*(void *)(a1 + 104) + 4), v7 == v8))
    {
      sub_A4A580((char **)(a1 + 104), 0, &v16);
    }
    else
    {
      char v12 = 0;
      uint64_t v13 = 52 * v7 - 52 * v8;
      uint64_t v14 = (_DWORD *)(*(void *)(a1 + 128) + 52 * v8 + 28);
      do
      {
        if (*v14 != 0x7FFFFFFF)
        {
          if (*v14 >= v19) {
            goto LABEL_18;
          }
          *uint64_t v14 = 0x7FFFFFFF;
          char v12 = 1;
        }
        v14 += 13;
        v13 -= 52;
      }
      while (v13);
      uint64_t v15 = sub_A4A580((char **)(a1 + 104), 0, &v16);
      *(void *)(v15 + 40) = -1;
      *(_DWORD *)(v15 + 48) = 0x7FFFFFFF;
LABEL_18:
      if (v12) {
        sub_A4A9B0((void **)(a1 + 104), 0);
      }
    }
    int v9 = *(_DWORD *)(a1 + 96);
    unsigned int v10 = v9 + v9 * v5;
    unsigned int v11 = v10 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A55204((void **)(a1 + 104), 0, v11, v10, v9 + v9 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A55204((void **)(a1 + 104), 0, v11, v10, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v23);
  }
}

double sub_A52324(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (char **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      unsigned int v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      unsigned int v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A49E18((uint64_t)v5, 0);
      sub_A55648(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
LABEL_19:
        int v18 = (unsigned int *)(v16 + 52 * v17);
        uint64_t v19 = v16 + 52 * v15[1];
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC((void **)v5, 1uLL);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      unsigned int v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC((void **)v5, 1uLL);
      int v18 = (unsigned int *)(v16 + 52 * v17);
      uint64_t v19 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        *int v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 13;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A55204((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    unsigned int v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    char v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A52654(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v328);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  int v298 = *(unsigned int **)(a1 + 216);
  if (v4 != v298)
  {
    int v309 = a2 + 1;
    int v299 = a2 + 2;
    int v304 = ~a2;
    int v300 = (uint64_t *)(a1 + 232);
    unint64_t v297 = (void **)(a1 + 256);
    uint64_t v321 = (char **)(a1 + 104);
    while (1)
    {
      size_t v302 = v4;
      unsigned int v5 = *v4;
      unint64_t v6 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v322, *(void *)(a1 + 24), *v6);
      BOOL v7 = v323;
      uint64_t v8 = &v324;
      if (v327) {
        uint64_t v8 = v326;
      }
      if ((unint64_t)v323 < *v8) {
        break;
      }
LABEL_3:
      uint64_t v4 = v302 + 1;
      if (v302 + 1 == v298) {
        goto LABEL_393;
      }
    }
    unsigned int v310 = v5 + 1;
    unsigned int v316 = v5;
LABEL_13:
    unint64_t v12 = __ROR8__(*v7, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 56) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 80);
    int v19 = *(_DWORD *)(v13 + 64);
    int v18 = *(_DWORD *)(v13 + 68);
    uint64_t v20 = v16 & v14;
    uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
    unsigned int v23 = *v21;
    unsigned int v22 = v21[1];
    if (v18 == v22 && v19 == v23) {
      goto LABEL_59;
    }
    if (!*(void *)(v13 + 40))
    {
      uint64_t v45 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v45) & v14;
        unint64_t v46 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v46;
        unsigned int v22 = v46[1];
        ++v45;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_59;
        }
      }
LABEL_56:
      unsigned int v39 = v316;
      if (v20 != -1)
      {
        uint64_t v48 = v17 + 12 * v20;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_81;
        }
        goto LABEL_69;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_60;
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_56;
      }
      uint64_t v20 = (v20 + v26) & v14;
      unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 == -1)
    {
LABEL_59:
      uint64_t v25 = v20;
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
    }
    else if (sub_A3BA84(*(void *)(a1 + 32), 1))
    {
LABEL_31:
      uint64_t v29 = *(void *)(v13 + 56) - 1;
      uint64_t v30 = *(void *)(v13 + 80);
      int v32 = *(_DWORD *)(v13 + 64);
      int v31 = *(_DWORD *)(v13 + 68);
      uint64_t v33 = v29 & v16;
      uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
      unsigned int v36 = *v34;
      unsigned int v35 = v34[1];
      uint64_t v37 = *(void *)(v13 + 40);
      if (v31 == v35 && v32 == v36)
      {
        unsigned int v39 = v316;
LABEL_48:
        uint64_t v40 = v33;
        unint64_t v44 = *(void *)(v13 + 48);
        if (v44 - v37 >= 0x1555555555555555) {
          goto LABEL_401;
        }
        goto LABEL_73;
      }
      unsigned int v39 = v316;
      if (v37)
      {
        uint64_t v40 = -1;
        uint64_t v41 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
          {
            if (v40 == -1) {
              uint64_t v40 = v33;
            }
          }
          else if (__PAIR64__(v35, v36) == v12)
          {
            goto LABEL_99;
          }
          uint64_t v33 = (v33 + v41) & v29;
          int v42 = (unsigned int *)(v30 + 12 * v33);
          unsigned int v36 = *v42;
          unsigned int v35 = v42[1];
          ++v41;
        }
        while (v31 != v35 || v32 != v36);
        if (v40 != -1)
        {
          unint64_t v44 = *(void *)(v13 + 48);
          if (v44 - v37 >= 0x1555555555555555) {
            goto LABEL_401;
          }
          goto LABEL_73;
        }
        goto LABEL_48;
      }
      uint64_t v71 = 1;
      while (__PAIR64__(v35, v36) != v12)
      {
        uint64_t v33 = (v33 + v71) & v29;
        unsigned int v72 = (unsigned int *)(v30 + 12 * v33);
        unsigned int v36 = *v72;
        unsigned int v35 = v72[1];
        ++v71;
        if (v31 == v35 && v32 == v36)
        {
          uint64_t v37 = 0;
          uint64_t v40 = v33;
          unint64_t v44 = *(void *)(v13 + 48);
          if (v44 >= 0x1555555555555555) {
            goto LABEL_401;
          }
          goto LABEL_73;
        }
      }
LABEL_99:
      if (v33 != -1)
      {
        uint64_t v48 = v30 + 12 * v33;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_81;
        }
LABEL_69:
        *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
        unsigned int v315 = v49;
        if (v39 == v49) {
          goto LABEL_338;
        }
LABEL_115:
        unint64_t v83 = *(char **)(a1 + 104);
        BOOL v84 = *(unsigned char **)(a1 + 112);
        uint64_t v85 = v84 - v83;
        if (v84 != v83)
        {
          uint64_t v86 = (void **)(a1 + 104);
          uint64_t v87 = *(void *)(a1 + 128);
          unsigned int v88 = *(_DWORD *)v83;
LABEL_129:
          uint64_t v102 = v87;
LABEL_145:
          sub_A4A05C(v86, 0, (char *)(v87 + 52 * v88), (unsigned char *)(v102 + 52 * *((unsigned int *)v83 + 1)));
          unint64_t v112 = v309 + *(_DWORD *)(a1 + 96) * v310;
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v114 = *(unsigned int **)(a1 + 112);
          if (v112 >= ((char *)v114 - (char *)v113) >> 3) {
            goto LABEL_185;
          }
          unsigned int v115 = v113[2 * v112];
          unsigned int v116 = v113[2 * v112 + 1];
          unsigned int v117 = v116 - v115;
          if (v116 == v115) {
            goto LABEL_185;
          }
          int v118 = 0;
          unsigned int v119 = 0;
          do
          {
            uint64_t v122 = *(unsigned int **)(a1 + 104);
            if (v112 >= (uint64_t)(*(void *)(a1 + 112) - (void)v122) >> 3) {
              goto LABEL_397;
            }
            unsigned int v123 = v122[2 * v112];
            if (v122[2 * v112 + 1] - v123 <= v119) {
              goto LABEL_397;
            }
            unint64_t v124 = v123 + v119;
            uint64_t v125 = *(void *)(a1 + 128);
            if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v125) >> 2) <= v124)
            {
LABEL_398:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_188D9E0(exception, "index out of range");
              goto LABEL_399;
            }
            uint64_t v126 = v125 + 52 * v124;
            long long v127 = *(_OWORD *)v126;
            long long v128 = *(_OWORD *)(v126 + 16);
            long long v129 = *(_OWORD *)(v126 + 32);
            int v332 = *(_DWORD *)(v126 + 48);
            long long v331 = v129;
            long long v329 = v127;
            long long v330 = v128;
            unsigned int v130 = *v122;
            unsigned int v131 = v122[1];
            if (v131 != *v122)
            {
              int v120 = 0;
              uint64_t v132 = 52 * v131 - 52 * v130;
              uint64_t v133 = (_DWORD *)(v125 + 52 * v130 + 28);
              while (1)
              {
                if (*v133 != 0x7FFFFFFF)
                {
                  if (*v133 >= SHIDWORD(v330)) {
                    goto LABEL_150;
                  }
                  _DWORD *v133 = 0x7FFFFFFF;
                  int v120 = 1;
                }
                v133 += 13;
                v132 -= 52;
                if (!v132) {
                  goto LABEL_149;
                }
              }
            }
            int v120 = 0;
LABEL_149:
            uint64_t v121 = sub_A4A580((char **)v86, 0, &v329);
            *(void *)(v121 + 40) = -1;
            *(_DWORD *)(v121 + 48) = 0x7FFFFFFF;
LABEL_150:
            v118 |= v120;
            ++v119;
          }
          while (v119 != v117);
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v114 = *(unsigned int **)(a1 + 112);
          if (v118)
          {
            if (v114 != v113)
            {
              uint64_t v134 = *(void *)(a1 + 128);
              unsigned int v135 = *v113;
              goto LABEL_163;
            }
            sub_D2BFC(v86, 1uLL);
            unsigned int v113 = *(unsigned int **)(a1 + 104);
            uint64_t v134 = *(void *)(a1 + 128);
            unsigned int v135 = *v113;
            if (*(unsigned int **)(a1 + 112) == v113)
            {
              sub_D2BFC(v86, 1uLL);
              unsigned int v113 = *(unsigned int **)(a1 + 104);
              uint64_t v136 = *(void *)(a1 + 128);
            }
            else
            {
LABEL_163:
              uint64_t v136 = v134;
            }
            long long v137 = (long long *)(v134 + 52 * v135);
            uint64_t v138 = (long long *)(v136 + 52 * v113[1]);
            if (v137 == v138)
            {
LABEL_182:
              if (*(unsigned int **)(a1 + 112) == v113) {
                goto LABEL_183;
              }
            }
            else
            {
              while (*((_DWORD *)v137 + 7) != 0x7FFFFFFF)
              {
                long long v137 = (long long *)((char *)v137 + 52);
                if (v137 == v138)
                {
                  long long v137 = v138;
                  if (*(unsigned int **)(a1 + 112) != v113) {
                    goto LABEL_184;
                  }
                  goto LABEL_183;
                }
              }
              if (v137 == v138) {
                goto LABEL_182;
              }
              uint64_t v139 = (long long *)((char *)v137 + 52);
              if ((long long *)((char *)v137 + 52) == v138) {
                goto LABEL_182;
              }
              do
              {
                if (*((_DWORD *)v139 + 7) != 0x7FFFFFFF)
                {
                  long long v144 = *v139;
                  long long v145 = v139[1];
                  long long v146 = v139[2];
                  *((_DWORD *)v137 + 12) = *((_DWORD *)v139 + 12);
                  v137[1] = v145;
                  void v137[2] = v146;
                  long long *v137 = v144;
                  long long v137 = (long long *)((char *)v137 + 52);
                }
                uint64_t v139 = (long long *)((char *)v139 + 52);
              }
              while (v139 != v138);
              unsigned int v113 = (unsigned int *)*v86;
              if (*(void **)(a1 + 112) == *v86)
              {
LABEL_183:
                sub_D2BFC(v86, 1uLL);
                unsigned int v113 = (unsigned int *)*v86;
              }
            }
LABEL_184:
            sub_A4A05C(v86, 0, (char *)v137, (unsigned char *)(*(void *)(a1 + 128) + 52 * v113[1]));
            unsigned int v113 = *(unsigned int **)(a1 + 104);
            uint64_t v114 = *(unsigned int **)(a1 + 112);
          }
LABEL_185:
          uint64_t v140 = (char *)v114 - (char *)v113;
          if (v114 != v113)
          {
            uint64_t v141 = *(void *)(a1 + 128);
            unsigned int v142 = *v113;
            goto LABEL_201;
          }
          uint64_t v147 = v140 >> 3;
          unint64_t v148 = 1 - (v140 >> 3);
          uint64_t v149 = *(void *)(a1 + 120);
          if (v148 <= (v149 - (uint64_t)v114) >> 3)
          {
            bzero(v113, 8 * v148);
            unint64_t v156 = &v113[2 * v148];
            *(void *)(a1 + 112) = v156;
            unsigned int v113 = (unsigned int *)*v86;
            uint64_t v141 = *(void *)(a1 + 128);
            unsigned int v142 = *(_DWORD *)*v86;
            if (*v86 != v156) {
              goto LABEL_201;
            }
            goto LABEL_187;
          }
          uint64_t v150 = v149 - (void)v113;
          uint64_t v151 = v150 >> 2;
          if ((unint64_t)(v150 >> 2) <= 1) {
            uint64_t v151 = 1;
          }
          BOOL v292 = (unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v292) {
            unint64_t v152 = v151;
          }
          if (v152 >> 61) {
            goto LABEL_400;
          }
          uint64_t v153 = 8 * v152;
          __int16 v154 = (char *)operator new(8 * v152);
          uint64_t v155 = &v154[8 * v147];
          bzero(v155, 8 * v148);
          unint64_t v156 = (unsigned int *)&v155[8 * v148];
          *(void *)(a1 + 104) = v155;
          *(void *)(a1 + 112) = v156;
          *(void *)(a1 + 120) = &v154[v153];
          if (v113)
          {
            operator delete(v113);
            unint64_t v156 = *(unsigned int **)(a1 + 112);
          }
          unsigned int v113 = (unsigned int *)*v86;
          uint64_t v141 = *(void *)(a1 + 128);
          unsigned int v142 = *(_DWORD *)*v86;
          if (*v86 != v156)
          {
LABEL_201:
            uint64_t v157 = v141;
            goto LABEL_219;
          }
LABEL_187:
          uint64_t v143 = *(unsigned int **)(a1 + 120);
          if (v143 == v156)
          {
            uint64_t v158 = 1;
            uint64_t v159 = (char *)v143 - (char *)v113;
            if ((unint64_t)(v159 >> 2) > 1) {
              uint64_t v158 = v159 >> 2;
            }
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v160 = v158;
            }
            if (v160)
            {
              if (v160 >> 61) {
LABEL_400:
              }
                sub_188D718();
              uint64_t v161 = (char *)operator new(8 * v160);
              uint64_t v162 = v161;
              *(void *)uint64_t v161 = 0;
              uint64_t v163 = (uint64_t)(v161 + 8);
              if (v156 != v113)
              {
LABEL_212:
                unint64_t v164 = (char *)(v156 - 2) - (char *)v113;
                if (v164 < 0x58 || (unint64_t)((char *)v156 - v161) < 0x20)
                {
                  uint64_t v165 = v156;
                  goto LABEL_215;
                }
                uint64_t v268 = (v164 >> 3) + 1;
                uint64_t v269 = 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v165 = &v156[v269 / 0xFFFFFFFFFFFFFFFCLL];
                v162 -= v269;
                uint64_t v270 = v161 - 16;
                unint64_t v271 = v156 - 4;
                uint64_t v272 = v268 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v273 = *(_OWORD *)v271;
                  *((_OWORD *)v270 - 1) = *((_OWORD *)v271 - 1);
                  *(_OWORD *)uint64_t v270 = v273;
                  v270 -= 32;
                  v271 -= 8;
                  v272 -= 4;
                }
                while (v272);
                if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_215:
                    uint64_t v166 = *((void *)v165 - 1);
                    v165 -= 2;
                    *((void *)v162 - 1) = v166;
                    v162 -= 8;
                  }
                  while (v165 != v113);
                }
                unint64_t v156 = (unsigned int *)*v86;
                *(void *)(a1 + 104) = v162;
                *(void *)(a1 + 112) = v163;
                *(void *)(a1 + 120) = &v161[8 * v160];
                if (!v156) {
                  goto LABEL_218;
                }
LABEL_217:
                operator delete(v156);
                goto LABEL_218;
              }
            }
            else
            {
              uint64_t v161 = 0;
              uint64_t v162 = 0;
              *(void *)&def_332C = 0;
              uint64_t v163 = 8;
              if (v156 != v113) {
                goto LABEL_212;
              }
            }
            *(void *)(a1 + 104) = v162;
            *(void *)(a1 + 112) = v163;
            *(void *)(a1 + 120) = &v161[8 * v160];
            if (!v156) {
              goto LABEL_218;
            }
            goto LABEL_217;
          }
          *(void *)unint64_t v156 = 0;
          *(void *)(a1 + 112) = v156 + 2;
LABEL_218:
          unsigned int v113 = *(unsigned int **)(a1 + 104);
          uint64_t v157 = *(void *)(a1 + 128);
LABEL_219:
          uint64_t v167 = (unsigned int *)(v141 + 52 * v142);
          uint64_t v168 = (unsigned int *)(v157 + 52 * v113[1]);
          if (v167 != v168)
          {
            unint64_t v169 = v323;
            do
            {
              unsigned int *v167 = v316;
              unsigned int v170 = v167[7];
              v167[3] = v170;
              v167[4] = -1;
              int v171 = *((_DWORD *)v169 + 2);
              int v172 = v171 / -10;
              int v173 = v171 % 10;
              if (v171 < 0) {
                char v174 = -5;
              }
              else {
                char v174 = 5;
              }
              v167[7] = v172
                      + v170
                      + (((-103 * (char)(v174 + v173)) >> 15) & 1)
                      + ((-103 * (char)(v174 + v173)) >> 10);
              v167 += 13;
            }
            while (v167 != v168);
          }
          int v175 = *(_DWORD *)(a1 + 96);
          if (!*(unsigned char *)(a1 + 20))
          {
            unsigned int v317 = -1;
            unint64_t v176 = v315;
            int v177 = *(unint64_t **)(a1 + 48);
            if (v177) {
              goto LABEL_227;
            }
LABEL_234:
            int v181 = 0x80000000;
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
            goto LABEL_239;
          }
          unsigned int v317 = v175 + v175 * *(_DWORD *)(a1 + 352) + 1;
          unint64_t v176 = v315;
          int v177 = *(unint64_t **)(a1 + 48);
          if (!v177) {
            goto LABEL_234;
          }
LABEL_227:
          if (*v177 <= v176)
          {
            int v181 = 0x7FFFFFFF;
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
          }
          else
          {
            unsigned int v178 = 0;
            unsigned int v179 = *(_DWORD *)(a1 + 100) + v304;
            unsigned int v180 = v179;
            do
            {
              if (v178 > v179)
              {
                int v181 = 0x7FFFFFFF;
                unsigned int v182 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v182) {
                  goto LABEL_338;
                }
                goto LABEL_239;
              }
              int v181 = *(_DWORD *)sub_A3F53C(v177 + 2, v177[1] * v176 + v180);
              v178 += 2;
              v180 -= 2;
            }
            while (v181 == 0x7FFFFFFF);
            unsigned int v182 = *(_DWORD **)(a1 + 104);
            if (*(_DWORD **)(a1 + 112) == v182) {
              goto LABEL_338;
            }
          }
LABEL_239:
          int v183 = v182[1];
          int v184 = v183 - *v182;
          if (v183 == *v182) {
            goto LABEL_338;
          }
          if (v181 == 0x7FFFFFFF)
          {
            unsigned int v185 = 0;
            while (v182[1] - *v182 > v185)
            {
              if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) <= (unint64_t)(v185 + *v182)) {
                goto LABEL_398;
              }
              if (v184 == ++v185) {
                goto LABEL_338;
              }
            }
LABEL_397:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
LABEL_399:
          }
          unint64_t v303 = v176;
          unsigned int v186 = 0;
          unint64_t v301 = v315 + 1;
          unint64_t v311 = (v299 + v175 * v301);
          unint64_t v187 = (v175 * v301 + 1);
          __int16 v319 = 0;
          unint64_t v312 = v317 + 1;
          unint64_t v313 = v187;
          int v314 = v183 - *v182;
          while (1)
          {
            while (1)
            {
              unsigned int v189 = *(char **)(a1 + 104);
              uint64_t v190 = *(char **)(a1 + 112);
              uint64_t v191 = v190 - v189;
              if (v190 == v189 || *((_DWORD *)v189 + 1) - *(_DWORD *)v189 <= v186) {
                goto LABEL_397;
              }
              unint64_t v192 = *(_DWORD *)v189 + v186;
              uint64_t v193 = *(void *)(a1 + 128);
              if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v193) >> 2) <= v192) {
                goto LABEL_398;
              }
              uint64_t v194 = v193 + 52 * v192;
              long long v196 = *(_OWORD *)(v194 + 16);
              long long v195 = *(_OWORD *)(v194 + 32);
              long long v197 = *(_OWORD *)v194;
              int v332 = *(_DWORD *)(v194 + 48);
              long long v331 = v195;
              long long v329 = v197;
              long long v330 = v196;
              if (SHIDWORD(v196) >= v181) {
                break;
              }
              unsigned int v188 = (char **)(a1 + 104);
              if (++v186 == v184) {
                goto LABEL_332;
              }
            }
            if (v317 == -1)
            {
              unsigned int v188 = (char **)(a1 + 104);
              if (v187 < (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3) {
                goto LABEL_315;
              }
              goto LABEL_316;
            }
            unint64_t v198 = v191 >> 3;
            if (v191 >> 3 <= (unint64_t)v317)
            {
              unint64_t v199 = v312 - v198;
              if (v312 > v198)
              {
                uint64_t v200 = *(void *)(a1 + 120);
                if (v199 <= (v200 - (uint64_t)v190) >> 3)
                {
                  bzero(v190, 8 * v199);
                  v190 += 8 * v199;
                  *(void *)(a1 + 112) = v190;
                }
                else
                {
                  uint64_t v201 = v200 - (void)v189;
                  uint64_t v202 = v201 >> 2;
                  if (v201 >> 2 <= v312) {
                    uint64_t v202 = v317 + 1;
                  }
                  BOOL v292 = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v292) {
                    unint64_t v203 = v202;
                  }
                  if (v203 >> 61) {
                    goto LABEL_400;
                  }
                  uint64_t v307 = 8 * v203;
                  unint64_t v305 = operator new(8 * v203);
                  uint64_t v204 = &v305[8 * v198];
                  bzero(v204, 8 * v199);
                  unint64_t v205 = v190 - 8 - v189;
                  if (v205 < 0x58)
                  {
                    uint64_t v206 = &v305[8 * v198];
                    uint64_t v207 = v305;
                    goto LABEL_273;
                  }
                  uint64_t v207 = v305;
                  uint64_t v206 = &v305[8 * v198];
                  if ((unint64_t)(&v190[-(v191 & 0xFFFFFFFFFFFFFFF8)] - v305) < 0x20) {
                    goto LABEL_407;
                  }
                  uint64_t v208 = (v205 >> 3) + 1;
                  uint64_t v209 = 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v210 = &v190[-v209];
                  uint64_t v206 = &v204[-v209];
                  unint64_t v211 = &v305[8 * v198 - 16];
                  unint64_t v212 = (long long *)(v190 - 16);
                  uint64_t v213 = v208 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v214 = *v212;
                    *(v211 - 1) = *(v212 - 1);
                    *unint64_t v211 = v214;
                    v211 -= 2;
                    v212 -= 2;
                    v213 -= 4;
                  }
                  while (v213);
                  uint64_t v190 = v210;
                  if (v208 != (v208 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_407:
                    do
                    {
LABEL_273:
                      uint64_t v215 = *((void *)v190 - 1);
                      v190 -= 8;
                      *((void *)v206 - 1) = v215;
                      v206 -= 8;
                    }
                    while (v190 != v189);
                  }
                  *(void *)(a1 + 104) = v206;
                  *(void *)(a1 + 112) = &v204[8 * v199];
                  *(void *)(a1 + 120) = &v207[v307];
                  operator delete(v189);
                  uint64_t v190 = *(char **)(a1 + 112);
                }
                unsigned int v189 = *(char **)(a1 + 104);
                uint64_t v193 = *(void *)(a1 + 128);
                int v184 = v314;
                unint64_t v187 = v313;
                goto LABEL_276;
              }
              if (v312 < v198)
              {
                uint64_t v190 = &v189[8 * v312];
                *(void *)(a1 + 112) = v190;
              }
            }
LABEL_276:
            unsigned int v216 = *(_DWORD *)&v189[8 * v317];
            unint64_t v217 = (v190 - v189) >> 3;
            if (v217 > v317)
            {
              uint64_t v218 = v193;
              unsigned int v188 = (char **)(a1 + 104);
              goto LABEL_307;
            }
            unint64_t v219 = v312 - v217;
            if (v312 > v217)
            {
              uint64_t v220 = *(void *)(a1 + 120);
              if (v219 <= (v220 - (uint64_t)v190) >> 3)
              {
                size_t v225 = 8 * v219;
                bzero(v190, v225);
                int v184 = v314;
                *(void *)(a1 + 112) = &v190[v225];
              }
              else
              {
                uint64_t v221 = (v190 - v189) >> 3;
                unint64_t v222 = v221 + v219;
                if ((v221 + v219) >> 61) {
                  sub_2E00();
                }
                uint64_t v223 = v220 - (void)v189;
                if (v223 >> 2 > v222) {
                  unint64_t v222 = v223 >> 2;
                }
                if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v222 = 0x1FFFFFFFFFFFFFFFLL;
                }
                unint64_t v308 = v222;
                if (v222)
                {
                  if (v222 >> 61) {
                    goto LABEL_400;
                  }
                  int v224 = (char *)operator new(8 * v222);
                }
                else
                {
                  int v224 = 0;
                }
                long long v306 = v224;
                uint64_t v226 = &v224[8 * v221];
                bzero(v226, 8 * v219);
                if (v190 == v189)
                {
                  unint64_t v229 = v226;
                  int v184 = v314;
                  uint64_t v231 = v306;
                }
                else
                {
                  unint64_t v227 = v190 - 8 - v189;
                  int v184 = v314;
                  if (v227 < 0x58)
                  {
                    uint64_t v228 = v190;
                    unint64_t v229 = v226;
                    unsigned int v230 = (void **)(a1 + 104);
                    uint64_t v231 = v306;
                    goto LABEL_302;
                  }
                  uint64_t v231 = v306;
                  if ((unint64_t)(v189 - v306) < 0x20)
                  {
                    uint64_t v228 = v190;
                    unint64_t v229 = v226;
                    unsigned int v230 = (void **)(a1 + 104);
                    goto LABEL_302;
                  }
                  uint64_t v232 = (v227 >> 3) + 1;
                  uint64_t v233 = 8 * (v232 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v228 = &v190[-v233];
                  unint64_t v229 = &v226[-v233];
                  uint64_t v234 = &v306[8 * ((v190 - v189) >> 3) - 16];
                  unsigned int v235 = (long long *)(v190 - 16);
                  uint64_t v236 = v232 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v237 = *v235;
                    *((_OWORD *)v234 - 1) = *(v235 - 1);
                    *(_OWORD *)uint64_t v234 = v237;
                    v234 -= 32;
                    v235 -= 2;
                    v236 -= 4;
                  }
                  while (v236);
                  unsigned int v230 = (void **)(a1 + 104);
                  if (v232 != (v232 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_302:
                      uint64_t v238 = *((void *)v228 - 1);
                      v228 -= 8;
                      *((void *)v229 - 1) = v238;
                      v229 -= 8;
                    }
                    while (v228 != v189);
                  }
                  uint64_t v190 = (char *)*v230;
                }
                *(void *)(a1 + 104) = v229;
                *(void *)(a1 + 112) = &v226[8 * v219];
                *(void *)(a1 + 120) = &v231[8 * v308];
                if (v190)
                {
                  operator delete(v190);
                  int v184 = v314;
                }
              }
              unsigned int v189 = *(char **)(a1 + 104);
              uint64_t v218 = *(void *)(a1 + 128);
              unsigned int v188 = (char **)(a1 + 104);
              unint64_t v187 = v313;
              goto LABEL_307;
            }
            unsigned int v188 = (char **)(a1 + 104);
            if (v312 < v217) {
              *(void *)(a1 + 112) = &v189[8 * v312];
            }
            uint64_t v218 = v193;
LABEL_307:
            uint64_t v239 = v193 + 52 * v216;
            for (uint64_t i = v218 + 52 * *(unsigned int *)&v189[8 * v317 + 4]; v239 != i; v239 += 52)
            {
              int v241 = *(_DWORD *)(v239 + 28);
              if (v241 != 0x7FFFFFFF && v241 >= SHIDWORD(v330))
              {
                __int16 v253 = 0;
                __int16 v254 = 0;
                goto LABEL_326;
              }
            }
            uint64_t v193 = v218;
            if (v187 < (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3)
            {
LABEL_315:
              unsigned int v244 = *(_DWORD *)&v189[8 * v187];
              unsigned int v243 = *(_DWORD *)&v189[8 * v187 + 4];
              if (v243 != v244)
              {
                __int16 v254 = 0;
                uint64_t v251 = 52 * v243 - 52 * v244;
                uint64_t v252 = (_DWORD *)(v193 + 52 * v244 + 28);
                while (1)
                {
                  if (*v252 != 0x7FFFFFFF)
                  {
                    if (*v252 >= SHIDWORD(v330))
                    {
                      __int16 v253 = 0;
                      goto LABEL_326;
                    }
                    _DWORD *v252 = 0x7FFFFFFF;
                    __int16 v254 = 1;
                  }
                  v252 += 13;
                  v251 -= 52;
                  if (!v251) {
                    goto LABEL_317;
                  }
                }
              }
            }
LABEL_316:
            __int16 v254 = 0;
LABEL_317:
            uint64_t v245 = sub_A4A580(v188, v187, &v329);
            *(void *)(v245 + 40) = -1;
            *(_DWORD *)(v245 + 48) = 0x7FFFFFFF;
            uint64_t v246 = *(void *)(a1 + 104);
            if (v311 < (*(void *)(a1 + 112) - v246) >> 3)
            {
              unsigned int v248 = *(_DWORD *)(v246 + 8 * v311);
              unsigned int v247 = *(_DWORD *)(v246 + 8 * v311 + 4);
              if (v247 != v248)
              {
                uint64_t v255 = 52 * v247 - 52 * v248;
                v256 = (_DWORD *)(*(void *)(a1 + 128) + 52 * v248 + 28);
                do
                {
                  if (*v256 != 0x7FFFFFFF) {
                    _DWORD *v256 = 0x7FFFFFFF;
                  }
                  v256 += 13;
                  v255 -= 52;
                }
                while (v255);
              }
            }
            uint64_t v249 = sub_A4A580(v188, v311, &v329);
            *(void *)(v249 + 40) = -1;
            *(_DWORD *)(v249 + 48) = 0x7FFFFFFF;
            int v250 = *(_DWORD *)(a1 + 176);
            *(_DWORD *)(a1 + 176) = v250 + 1;
            *(_DWORD *)(v249 + 24) = v250;
            *(_DWORD *)(v249 + 20) = DWORD2(v330);
            *(void *)(v249 + 40) = -1;
            *(_DWORD *)(v249 + 48) = 0x7FFFFFFF;
            __int16 v253 = 1;
            int v184 = v314;
            unint64_t v187 = v313;
LABEL_326:
            v319 |= v253 | (v254 << 8);
            if (++v186 == v184)
            {
LABEL_332:
              if ((v319 & 0xFF00) != 0)
              {
                unsigned int v257 = v187;
                sub_A4A9B0((void **)v188, v311);
                sub_A4A9B0((void **)v188, v257);
              }
              if (!(_BYTE)v319) {
                goto LABEL_338;
              }
              if (*(void *)(a1 + 240) <= v303) {
                sub_A3E96C((uint64_t)v300, v301, 0);
              }
              uint64_t v258 = *v300;
              if ((*(void *)(*v300 + 8 * (v303 >> 6)) & (1 << v303)) != 0)
              {
LABEL_338:
                unint64_t v10 = (unint64_t)v324;
                BOOL v7 = (void *)((char *)v323 + 12);
                unint64_t v323 = v7;
                if (v7 != v324) {
                  goto LABEL_339;
                }
LABEL_375:
                BOOL v7 = v325;
                unint64_t v11 = v326[0];
                unint64_t v323 = v325;
                int v9 = 1;
                unsigned __int8 v327 = 1;
                if (*(unsigned char *)(v322 + 16)) {
                  goto LABEL_376;
                }
                goto LABEL_10;
              }
              uint64_t v260 = *(char **)(a1 + 264);
              unint64_t v259 = *(void *)(a1 + 272);
              if ((unint64_t)v260 < v259)
              {
                *(_DWORD *)uint64_t v260 = v315;
                uint64_t v261 = (uint64_t)(v260 + 4);
                goto LABEL_374;
              }
              uint64_t v274 = (char *)*v297;
              uint64_t v275 = v260 - (unsigned char *)*v297;
              uint64_t v276 = v275 >> 2;
              unint64_t v277 = (v275 >> 2) + 1;
              if (v277 >> 62) {
                sub_2E00();
              }
              uint64_t v278 = v259 - (void)v274;
              if (v278 >> 1 > v277) {
                unint64_t v277 = v278 >> 1;
              }
              if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v277 = 0x3FFFFFFFFFFFFFFFLL;
              }
              unint64_t v320 = v277;
              if (!v277)
              {
                uint64_t v279 = 0;
                uint64_t v280 = (unsigned int *)(4 * v276);
                *(_DWORD *)(4 * v276) = v315;
                uint64_t v261 = 4 * v276 + 4;
                if (v260 == v274) {
                  goto LABEL_372;
                }
LABEL_366:
                unint64_t v281 = v260 - 4 - v274;
                if (v281 < 0x2C) {
                  goto LABEL_408;
                }
                if ((unint64_t)(v260 - &v279[v275]) < 0x20) {
                  goto LABEL_408;
                }
                uint64_t v282 = (v281 >> 2) + 1;
                uint64_t v283 = 4 * (v282 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v284 = &v260[-v283];
                uint64_t v280 = (unsigned int *)((char *)v280 - v283);
                uint64_t v285 = &v279[4 * v276 - 16];
                int v286 = v260 - 16;
                uint64_t v287 = v282 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v288 = *(_OWORD *)v286;
                  *(v285 - 1) = *((_OWORD *)v286 - 1);
                  *uint64_t v285 = v288;
                  v285 -= 2;
                  v286 -= 32;
                  v287 -= 8;
                }
                while (v287);
                uint64_t v260 = v284;
                if (v282 != (v282 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_408:
                  do
                  {
                    unsigned int v289 = *((_DWORD *)v260 - 1);
                    v260 -= 4;
                    *--uint64_t v280 = v289;
                  }
                  while (v260 != v274);
                }
                goto LABEL_372;
              }
              if (v277 >> 62) {
                goto LABEL_400;
              }
              uint64_t v279 = operator new(4 * v277);
              uint64_t v280 = (unsigned int *)&v279[4 * v276];
              *uint64_t v280 = v315;
              uint64_t v261 = (uint64_t)(v280 + 1);
              if (v260 != v274) {
                goto LABEL_366;
              }
LABEL_372:
              *(void *)(a1 + 256) = v280;
              *(void *)(a1 + 264) = v261;
              *(void *)(a1 + 272) = &v279[4 * v320];
              if (v274)
              {
                operator delete(v274);
                uint64_t v258 = *v300;
              }
LABEL_374:
              *(void *)(a1 + 264) = v261;
              *(void *)(v258 + 8 * (v303 >> 6)) |= 1 << v303;
              unint64_t v10 = (unint64_t)v324;
              BOOL v7 = (void *)((char *)v323 + 12);
              unint64_t v323 = v7;
              if (v7 == v324) {
                goto LABEL_375;
              }
LABEL_339:
              int v9 = v327;
              unint64_t v11 = v326[0];
              if (*(unsigned char *)(v322 + 16))
              {
LABEL_376:
                if (v9) {
                  unint64_t v290 = v11;
                }
                else {
                  unint64_t v290 = v10;
                }
                if ((unint64_t)v7 < v290)
                {
                  while (1)
                  {
                    unint64_t v291 = __ROR8__(*v7, 32);
                    BOOL v292 = HIDWORD(v291) != 1 || (v291 + 3) >= 2;
                    if (!v292) {
                      break;
                    }
                    if (sub_2AB7E4(**(void **)(v322 + 4120)))
                    {
                      LOBYTE(v9) = v327;
                      BOOL v7 = v323;
                      unint64_t v10 = (unint64_t)v324;
                      break;
                    }
                    unint64_t v10 = (unint64_t)v324;
                    BOOL v7 = (void *)((char *)v323 + 12);
                    unint64_t v323 = v7;
                    if (v7 == v324)
                    {
                      BOOL v7 = v325;
                      unint64_t v323 = v325;
                      LOBYTE(v9) = 1;
                      unsigned __int8 v327 = 1;
                      if ((unint64_t)v325 >= v326[0]) {
                        break;
                      }
                    }
                    else
                    {
                      LOBYTE(v9) = v327;
                      unint64_t v293 = &v324;
                      if (v327) {
                        unint64_t v293 = v326;
                      }
                      if ((unint64_t)v7 >= *v293) {
                        break;
                      }
                    }
                  }
                  unint64_t v11 = v326[0];
                }
              }
LABEL_10:
              if ((_BYTE)v9) {
                unint64_t v10 = v11;
              }
              if ((unint64_t)v7 >= v10) {
                goto LABEL_3;
              }
              goto LABEL_13;
            }
          }
        }
        uint64_t v90 = v85 >> 3;
        unint64_t v91 = 1 - (v85 >> 3);
        uint64_t v92 = *(void *)(a1 + 120);
        uint64_t v86 = (void **)(a1 + 104);
        if (v91 <= (v92 - (uint64_t)v84) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v91);
          unsigned int v101 = &v84[8 * v91];
          *(void *)(a1 + 112) = v101;
          unint64_t v83 = *v321;
          uint64_t v87 = *(void *)(a1 + 128);
          unsigned int v88 = *(_DWORD *)*v321;
          if (*v321 != v101) {
            goto LABEL_129;
          }
        }
        else
        {
          uint64_t v93 = v92 - (void)v83;
          uint64_t v94 = v93 >> 2;
          if ((unint64_t)(v93 >> 2) <= 1) {
            uint64_t v94 = 1;
          }
          BOOL v292 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v292) {
            unint64_t v95 = v94;
          }
          if (v95 >> 61) {
            goto LABEL_400;
          }
          uint64_t v96 = 8 * v95;
          unint64_t v97 = (char *)operator new(8 * v95);
          unint64_t v98 = &v97[8 * v90];
          size_t v99 = 8 * v91;
          bzero(v98, v99);
          uint64_t v100 = &v98[v99];
          *(void *)(a1 + 104) = v98;
          *(void *)(a1 + 112) = &v98[v99];
          *(void *)(a1 + 120) = &v97[v96];
          if (v84)
          {
            operator delete(v84);
            unsigned int v101 = *(char **)(a1 + 112);
            unint64_t v83 = *v321;
            uint64_t v87 = *(void *)(a1 + 128);
            unsigned int v88 = *(_DWORD *)*v321;
            if (*v321 != v101) {
              goto LABEL_129;
            }
          }
          else
          {
            unsigned int v101 = &v98[v99];
            unint64_t v83 = *v321;
            uint64_t v87 = *(void *)(a1 + 128);
            unsigned int v88 = *(_DWORD *)*v321;
            if (*v321 != v100) {
              goto LABEL_129;
            }
          }
        }
        uint64_t v89 = *(char **)(a1 + 120);
        if (v89 != v101)
        {
          *(void *)unsigned int v101 = 0;
          *(void *)(a1 + 112) = v101 + 8;
LABEL_144:
          unint64_t v83 = *(char **)(a1 + 104);
          uint64_t v102 = *(void *)(a1 + 128);
          goto LABEL_145;
        }
        uint64_t v103 = 1;
        uint64_t v104 = v89 - v83;
        if ((unint64_t)(v104 >> 2) > 1) {
          uint64_t v103 = v104 >> 2;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          if (v105 >> 61) {
            goto LABEL_400;
          }
          uint64_t v106 = (char *)operator new(8 * v105);
          uint64_t v107 = v106;
          *(void *)uint64_t v106 = 0;
          uint64_t v108 = (uint64_t)(v106 + 8);
          if (v101 != v83)
          {
LABEL_138:
            unint64_t v109 = v101 - 8 - v83;
            if (v109 >= 0x58 && (unint64_t)(v101 - v106) >= 0x20)
            {
              uint64_t v262 = (v109 >> 3) + 1;
              uint64_t v263 = 8 * (v262 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v110 = &v101[-v263];
              v107 -= v263;
              long long v264 = v106 - 16;
              int v265 = v101 - 16;
              uint64_t v266 = v262 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v267 = *(_OWORD *)v265;
                *((_OWORD *)v264 - 1) = *((_OWORD *)v265 - 1);
                *(_OWORD *)long long v264 = v267;
                v264 -= 32;
                v265 -= 32;
                v266 -= 4;
              }
              while (v266);
              if (v262 == (v262 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_142:
                unsigned int v101 = *v321;
                *(void *)(a1 + 104) = v107;
                *(void *)(a1 + 112) = v108;
                *(void *)(a1 + 120) = &v106[8 * v105];
                if (!v101) {
                  goto LABEL_144;
                }
LABEL_143:
                operator delete(v101);
                goto LABEL_144;
              }
            }
            else
            {
              uint64_t v110 = v101;
            }
            do
            {
              uint64_t v111 = *((void *)v110 - 1);
              v110 -= 8;
              *((void *)v107 - 1) = v111;
              v107 -= 8;
            }
            while (v110 != v83);
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          *(void *)&def_332C = 0;
          uint64_t v108 = 8;
          if (v101 != v83) {
            goto LABEL_138;
          }
        }
        *(void *)(a1 + 104) = v107;
        *(void *)(a1 + 112) = v108;
        *(void *)(a1 + 120) = &v106[8 * v105];
        if (!v101) {
          goto LABEL_144;
        }
        goto LABEL_143;
      }
      uint64_t v40 = -1;
      unint64_t v44 = *(void *)(v13 + 48);
      if (v44 - v37 >= 0x1555555555555555)
      {
LABEL_401:
        int v296 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(v296, "insert overflow");
      }
LABEL_73:
      if (v37
        && ((uint64_t v56 = (_DWORD *)(v30 + 12 * v40), *(_DWORD *)(v13 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v13 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v13 + 40) = v37 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v44 + 1;
      }
      uint64_t v58 = v30 + 12 * v40;
      *(void *)uint64_t v58 = v12;
      *(_DWORD *)(v58 + 8) = -1;
      uint64_t v48 = *(void *)(v13 + 80) + 12 * v40;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 != -1) {
        goto LABEL_69;
      }
LABEL_81:
      int v59 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v59 + 1;
      *(_DWORD *)(v48 + 8) = v59;
      uint64_t v61 = *(char **)(v13 + 96);
      unint64_t v60 = *(void *)(v13 + 104);
      if ((unint64_t)v61 < v60)
      {
        *(void *)uint64_t v61 = v12;
        uint64_t v62 = (uint64_t)(v61 + 8);
        goto LABEL_114;
      }
      int v63 = (char **)(v13 + 88);
      uint64_t v64 = *(char **)(v13 + 88);
      uint64_t v65 = (v61 - v64) >> 3;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v67 = v60 - (void)v64;
      if (v67 >> 2 > v66) {
        unint64_t v66 = v67 >> 2;
      }
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v318 = v66;
      if (v66)
      {
        if (v66 >> 61) {
          goto LABEL_400;
        }
        uint64_t v68 = (char *)operator new(8 * v66);
        int v63 = (char **)(v13 + 88);
        BOOL v69 = &v68[8 * v65];
        *(void *)BOOL v69 = v12;
        uint64_t v62 = (uint64_t)(v69 + 8);
        if (v61 != v64)
        {
LABEL_91:
          unint64_t v70 = v61 - 8 - v64;
          if (v70 >= 0x58)
          {
            unsigned int v39 = v316;
            if ((unint64_t)(v64 - v68) >= 0x20)
            {
              uint64_t v74 = (v70 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v76 = &v61[-v75];
              v69 -= v75;
              BOOL v77 = &v68[8 * v65 - 16];
              uint64_t v78 = (long long *)(v61 - 16);
              uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v78;
                *((_OWORD *)v77 - 1) = *(v78 - 1);
                *(_OWORD *)BOOL v77 = v80;
                v77 -= 32;
                v78 -= 2;
                v79 -= 4;
              }
              while (v79);
              uint64_t v61 = v76;
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_112:
                uint64_t v61 = *v63;
                *(void *)(v13 + 88) = v69;
                *(void *)(v13 + 96) = v62;
                *(void *)(v13 + 104) = &v68[8 * v318];
                if (!v61) {
                  goto LABEL_114;
                }
                goto LABEL_113;
              }
            }
          }
          else
          {
            unsigned int v39 = v316;
          }
          do
          {
            uint64_t v81 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v69 - 1) = v81;
            v69 -= 8;
          }
          while (v61 != v64);
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v68 = 0;
        BOOL v69 = (char *)(8 * v65);
        *(void *)(8 * v65) = v12;
        uint64_t v62 = 8 * v65 + 8;
        if (v61 != v64) {
          goto LABEL_91;
        }
      }
      unsigned int v39 = v316;
      *(void *)(v13 + 88) = v69;
      *(void *)(v13 + 96) = v62;
      *(void *)(v13 + 104) = &v68[8 * v318];
      if (!v61)
      {
LABEL_114:
        *(void *)(v13 + 96) = v62;
        unsigned int v82 = *(_DWORD *)(v48 + 8);
        *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
        unsigned int v315 = v82;
        if (v39 == v82) {
          goto LABEL_338;
        }
        goto LABEL_115;
      }
LABEL_113:
      operator delete(v61);
      goto LABEL_114;
    }
LABEL_60:
    uint64_t v51 = *(void *)(v13 + 40);
    uint64_t v50 = *(void *)(v13 + 48);
    if ((unint64_t)(v50 - v51) >= 0x1555555555555555) {
      goto LABEL_401;
    }
    uint64_t v52 = *(void *)(v13 + 80);
    if (v51
      && ((unsigned int v53 = (_DWORD *)(v52 + 12 * v25), *(_DWORD *)(v13 + 36) == v53[1])
        ? (BOOL v54 = *(_DWORD *)(v13 + 32) == *v53)
        : (BOOL v54 = 0),
          v54))
    {
      *(void *)(v13 + 40) = v51 - 1;
    }
    else
    {
      *(void *)(v13 + 48) = v50 + 1;
    }
    uint64_t v55 = v52 + 12 * v25;
    *(void *)uint64_t v55 = v12;
    *(_DWORD *)(v55 + 8) = -1;
    uint64_t v48 = *(void *)(v13 + 80) + 12 * v25;
    unsigned int v39 = v316;
    unsigned int v49 = *(_DWORD *)(v48 + 8);
    if (v49 != -1) {
      goto LABEL_69;
    }
    goto LABEL_81;
  }
LABEL_393:
  double result = sub_72688((uint64_t)v328) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A540C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A540D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A540EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A54100(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A54114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A54128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5413C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A54150(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A54164(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    unint64_t v211 = v8;
    int v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        unint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            BOOL v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((BOOL v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      int v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          int v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          int v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)int v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      unsigned int v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            size_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unsigned int v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              size_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unsigned int v101 = v200;
              goto LABEL_135;
            }
            unsigned int v101 = v200;
            uint64_t v100 = v201;
            size_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v105 = &v88[-v104];
            size_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            unsigned int v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        unsigned int v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              unsigned int v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        long long v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)long long v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        long long v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          char v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          long long v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        uint64_t v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)unint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              uint64_t v122 = &v202[4 * v112];
              unint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                uint64_t v122 = &v202[4 * v112];
                unint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              unint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              uint64_t v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              uint64_t v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *uint64_t v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              uint64_t v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        unint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            uint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            unint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            uint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)unint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A5509C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A550B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A550C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A49E18((uint64_t)v4, 0);
      sub_A55648(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 52 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 52;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 52 * v7;
    uint64_t v9 = v6 + 52 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_A55204(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A4AD68(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A4AD68(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    int v22 = *(_DWORD *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    int v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) >= a6)
    {
      __int16 v23 = sub_A5535C((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A4A9B0(a1, a3);
    sub_A4A9B0(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_A5535C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A55518(a1, a2, a5) & 1) == 0)
  {
    uint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v13 = *(_DWORD *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v21 = 52 * v12 - 52 * v13;
        int v22 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v13 + 28);
        while (1)
        {
          if (*v22 != 0x7FFFFFFF)
          {
            if (*v22 >= *(_DWORD *)(a2 + 28))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            *int v22 = 0x7FFFFFFF;
            unsigned __int8 v10 = 1;
          }
          v22 += 13;
          v21 -= 52;
          if (!v21) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A4A580((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 40) = -1;
    *(_DWORD *)(v14 + 48) = 0x7FFFFFFF;
    unsigned int v15 = *(char **)a1;
    if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v17 = *(_DWORD *)&v15[8 * a3];
      unsigned int v16 = *(_DWORD *)&v15[8 * a3 + 4];
      if (v16 != v17)
      {
        uint64_t v23 = 52 * v16 - 52 * v17;
        long long v24 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v17 + 28);
        do
        {
          if (*v24 != 0x7FFFFFFF) {
            *long long v24 = 0x7FFFFFFF;
          }
          v24 += 13;
          v23 -= 52;
        }
        while (v23);
      }
    }
    uint64_t v18 = sub_A4A580((char **)a1, a3, (long long *)a2);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    int v19 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v19 + 1;
    *(_DWORD *)(v18 + 24) = v19;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(a2 + 24);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A55518(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      int v7 = *(char **)a1;
      uint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      int v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = v15 + 52 * *(unsigned int *)&v7[8 * v6 + 4];
  if (v11 + 52 * v12 == v16) {
    return 0;
  }
  uint64_t v17 = v11 + 52 * v12 + 52;
  do
  {
    int v18 = *(_DWORD *)(v17 - 24);
    BOOL v19 = v18 == 0x7FFFFFFF || v18 < *(_DWORD *)(a2 + 28);
    uint64_t result = !v19;
    if (!v19) {
      break;
    }
    BOOL v21 = v17 == v16;
    v17 += 52;
  }
  while (!v21);
  return result;
}

BOOL sub_A55648(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A4AD68(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      int v28 = *(_DWORD *)(v12 + 48);
      long long v26 = v14;
      long long v27 = v13;
      long long v25 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        unsigned int v18 = *(_DWORD *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 52 * v17 - 52 * v18;
          long long v24 = &a1[3][52 * v18 + 28];
          while (1)
          {
            if (*(_DWORD *)v24 != 0x7FFFFFFF)
            {
              if (*(_DWORD *)v24 >= SHIDWORD(v26))
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              *(_DWORD *)long long v24 = 0x7FFFFFFF;
              int v19 = 1;
            }
            v24 += 52;
            v23 -= 52;
            if (!v23) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A4A580(a1, v11, &v25);
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A4A9B0((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A557C8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v259 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v228 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v259);
  uint64_t v229 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v257, *(void *)(v4 + 24), v5);
  __int16 v7 = v257;
  if ((unint64_t)v257 < v258)
  {
    uint64_t v8 = (char *)(v4 + 104);
    unsigned int v235 = (void **)(v4 + 104);
    uint64_t v236 = v4 + 360;
    int v225 = a2 + 2;
    int v226 = ~a2;
    int v224 = (uint64_t *)(v4 + 184);
    int v232 = a2 + 1;
    uint64_t v233 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v234 = *(unsigned int *)v7;
      sub_A49E18((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v245, *(void *)(v4 + 24), v229, v228, 0, 1);
      unint64_t v9 = v249;
      BOOL v10 = (unint64_t)v249 < v248 || (unint64_t)v249 >= v250;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v257 + 4;
      unsigned int v257 = v7;
      if ((unint64_t)v7 >= v258) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_320;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            unint64_t v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_320:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_320;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v244 = v46;
        uint64_t result = sub_BD5C18(v236, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        unint64_t *v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_119;
      }
      BOOL v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
          goto LABEL_323;
        }
        unsigned int v82 = (char *)operator new(8 * v81);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 != (unint64_t *)v77)
        {
LABEL_107:
          unint64_t v84 = (char *)(v75 - 1) - v77;
          if (v84 < 0x58)
          {
            uint64_t v4 = v233;
            goto LABEL_116;
          }
          uint64_t v4 = v233;
          if ((unint64_t)(v77 - v82) < 0x20) {
            goto LABEL_329;
          }
          uint64_t v85 = (v84 >> 3) + 1;
          uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v83 = (unint64_t *)((char *)v83 - v86);
          unsigned int v88 = &v82[8 * v78 - 16];
          unint64_t v89 = v75 - 2;
          uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)unsigned int v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          uint64_t v75 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_329:
            do
            {
LABEL_116:
              unint64_t v92 = *--v75;
              *--unint64_t v83 = v92;
            }
            while (v75 != (unint64_t *)v77);
          }
          uint64_t v75 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          uint64_t v8 = (char *)v235;
          if (!v75) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v75);
          goto LABEL_119;
        }
      }
      else
      {
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 != (unint64_t *)v77) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v233;
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      uint64_t v8 = (char *)v235;
      if (v75) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v76;
      unsigned int v244 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v236, v244, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) != v47)
        {
          unsigned int v49 = *v47;
          unsigned int v48 = v47[1];
          if (v48 != *v47)
          {
            int v50 = v254;
            uint64_t v51 = v252;
            uint64_t v52 = v249;
            uint64_t v53 = v247;
            unint64_t v54 = ((unint64_t)v249 - v248) >> 4;
            uint64_t v55 = 52 * v48 - 52 * v49;
            uint64_t v56 = (int *)(*(void *)(v4 + 128) + 52 * v49 + 48);
            do
            {
              unsigned int v59 = *(v56 - 2);
              if (v50)
              {
                unsigned int v255 = *(v56 - 1);
                int v57 = *v56;
                int v256 = *v56;
              }
              else
              {
                int v57 = *(_DWORD *)(v51 + 12 * v59);
              }
              BOOL v58 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
              *(v56 - 5) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v54)
                                                        + 2]
                                           + *v58)
                         + v57
                         - *((_DWORD *)v52 + 2);
              v56 += 13;
              v55 -= 52;
            }
            while (v55);
            __int16 v253 = (int *)(v51 + 12 * v59);
            sub_A56CC0(v8, 0);
            if ((*((unsigned char *)v249 + 15) & 2) == 0
              || v251
              && (*(_DWORD *)(v251 + 4 * (((unint64_t)v249 - v248) >> 4)) & v234) != 0)
            {
              goto LABEL_220;
            }
            int v97 = *(_DWORD *)(v4 + 96);
            if (*(unsigned char *)(v4 + 20))
            {
              unsigned int v231 = v97 + v97 * *(_DWORD *)(v4 + 352);
              unint64_t v98 = v244;
              size_t v99 = *(unint64_t **)(v4 + 48);
              if (v99)
              {
LABEL_131:
                if (*v99 <= v98)
                {
                  int v104 = 0x7FFFFFFF;
                  unint64_t v105 = *(char **)(v4 + 104);
                  uint64_t v106 = *(char **)(v4 + 112);
                  if (v106 != v105) {
                    goto LABEL_151;
                  }
                }
                else
                {
                  uint64_t v100 = v4;
                  unsigned int v101 = 0;
                  unsigned int v102 = *(_DWORD *)(v100 + 100) + v226;
                  unsigned int v103 = v102;
                  while (v101 <= v102)
                  {
                    int v104 = *(_DWORD *)sub_A3F53C(v99 + 2, v99[1] * v98 + v103);
                    v101 += 2;
                    v103 -= 2;
                    if (v104 != 0x7FFFFFFF)
                    {
                      uint64_t v4 = v233;
                      unint64_t v105 = *(char **)(v233 + 104);
                      uint64_t v106 = *(char **)(v233 + 112);
                      if (v106 == v105) {
                        goto LABEL_136;
                      }
LABEL_151:
                      int v118 = *((_DWORD *)v105 + 1);
                      int v119 = v118 - *(_DWORD *)v105;
                      if (v118 == *(_DWORD *)v105) {
                        goto LABEL_220;
                      }
                      if (v104 == 0x7FFFFFFF)
                      {
                        unsigned int v120 = 0;
                        while (*((_DWORD *)v105 + 1) - *(_DWORD *)v105 > v120)
                        {
                          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v4 + 136) - *(void *)(v4 + 128)) >> 2) <= (unint64_t)(v120 + *(_DWORD *)v105)) {
                            goto LABEL_325;
                          }
                          if (v119 == ++v120) {
                            goto LABEL_220;
                          }
                        }
LABEL_324:
                        uint64_t v223 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        sub_188D9E0(v223, "key does not exist and cannot be added");
LABEL_326:
                      }
                      uint64_t v123 = 0;
                      unsigned int v124 = 0;
                      unint64_t v125 = (v97 + v97 * v98);
                      unsigned int v126 = v225 + v125;
                      unint64_t v227 = (v225 + v125);
                      unint64_t v230 = (v125 + 1);
                      while (2)
                      {
                        unint64_t v131 = *(char **)(v4 + 104);
                        uint64_t v132 = *(char **)(v4 + 112);
                        if (v132 == v131 || *((_DWORD *)v131 + 1) - *(_DWORD *)v131 <= v124) {
                          goto LABEL_324;
                        }
                        unint64_t v133 = *(_DWORD *)v131 + v124;
                        uint64_t v134 = *(void *)(v4 + 128);
                        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v134) >> 2) <= v133)
                        {
LABEL_325:
                          uint64_t v223 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                          sub_188D9E0(v223, "index out of range");
                          goto LABEL_326;
                        }
                        uint64_t v135 = v134 + 52 * v133;
                        long long v137 = *(_OWORD *)(v135 + 16);
                        long long v136 = *(_OWORD *)(v135 + 32);
                        long long v138 = *(_OWORD *)v135;
                        int v263 = *(_DWORD *)(v135 + 48);
                        long long v261 = v137;
                        long long v262 = v136;
                        long long v260 = v138;
                        if (SHIDWORD(v137) >= v104)
                        {
                          if (v231 != -1)
                          {
                            if (sub_A55518((uint64_t)v235, (uint64_t)&v260, v231)) {
                              goto LABEL_178;
                            }
                            unint64_t v131 = *(char **)(v4 + 104);
                            uint64_t v132 = *(char **)(v4 + 112);
                          }
                          unint64_t v139 = (v132 - v131) >> 3;
                          if (v139 <= v125)
                          {
                            if (v230 <= v139)
                            {
                              if (v230 >= v139) {
                                goto LABEL_182;
                              }
                              uint64_t v140 = v123;
                              uint64_t v132 = &v131[8 * v230];
                              *(void *)(v4 + 112) = v132;
                            }
                            else
                            {
                              uint64_t v140 = v123;
                              sub_D2BFC(v235, v230 - v139);
                              unint64_t v131 = *(char **)(v4 + 104);
                              uint64_t v132 = *(char **)(v4 + 112);
                            }
                          }
                          else
                          {
LABEL_182:
                            uint64_t v140 = v123;
                          }
                          uint64_t v141 = *(void *)(v4 + 128);
                          unsigned int v142 = *(_DWORD *)&v131[8 * v125];
                          unint64_t v143 = (v132 - v131) >> 3;
                          if (v143 <= v125)
                          {
                            if (v230 <= v143)
                            {
                              if (v230 < v143) {
                                *(void *)(v4 + 112) = &v131[8 * v230];
                              }
                              goto LABEL_188;
                            }
                            sub_D2BFC(v235, v230 - v143);
                            unint64_t v131 = *(char **)(v4 + 104);
                            uint64_t v144 = *(void *)(v4 + 128);
                          }
                          else
                          {
LABEL_188:
                            uint64_t v144 = v141;
                          }
                          uint64_t v145 = v141 + 52 * v142;
                          uint64_t v146 = v144 + 52 * *(unsigned int *)&v131[8 * v125 + 4];
                          uint64_t v123 = v140;
                          unsigned int v126 = v225 + v125;
                          if (v145 == v146)
                          {
LABEL_198:
                            if (v227 < (uint64_t)(*(void *)(v4 + 112) - (void)v131) >> 3)
                            {
                              unsigned int v150 = *(_DWORD *)&v131[8 * v227];
                              unsigned int v149 = *(_DWORD *)&v131[8 * v227 + 4];
                              if (v149 != v150)
                              {
                                uint64_t v127 = 0;
                                uint64_t v151 = 52 * v149 - 52 * v150;
                                uint64_t v152 = (_DWORD *)(v144 + 52 * v150 + 28);
                                while (1)
                                {
                                  if (*v152 != 0x7FFFFFFF)
                                  {
                                    if (*v152 >= SHIDWORD(v261)) {
                                      goto LABEL_179;
                                    }
                                    _DWORD *v152 = 0x7FFFFFFF;
                                    uint64_t v127 = 1;
                                  }
                                  v152 += 13;
                                  v151 -= 52;
                                  if (!v151) {
                                    goto LABEL_169;
                                  }
                                }
                              }
                            }
                            uint64_t v127 = 0;
LABEL_169:
                            uint64_t v128 = sub_A4A580((char **)v235, v227, &v260);
                            *(void *)(v128 + 40) = -1;
                            *(_DWORD *)(v128 + 48) = 0x7FFFFFFF;
                            int v129 = *(_DWORD *)(v4 + 176);
                            *(_DWORD *)(v4 + 176) = v129 + 1;
                            *(_DWORD *)(v128 + 24) = v129;
                            *(_DWORD *)(v128 + 20) = DWORD2(v261);
                            *(void *)(v128 + 40) = -1;
                            *(_DWORD *)(v128 + 48) = 0x7FFFFFFF;
                            uint64_t v130 = 1;
                          }
                          else
                          {
                            while (1)
                            {
                              int v147 = *(_DWORD *)(v145 + 28);
                              if (v147 != 0x7FFFFFFF && v147 >= SHIDWORD(v261)) {
                                break;
                              }
                              v145 += 52;
                              if (v145 == v146) {
                                goto LABEL_198;
                              }
                            }
LABEL_178:
                            uint64_t v127 = 0;
LABEL_179:
                            uint64_t v130 = 0;
                          }
                          v123 |= v130 | (v127 << 8);
                        }
                        if (++v124 == v119)
                        {
                          if ((v123 & 0xFF00) != 0) {
                            sub_A4A9B0(v235, v126);
                          }
                          if ((_BYTE)v123) {
                            sub_A3EF14(v224, &v244);
                          }
LABEL_220:
                          uint64_t v106 = *(char **)(v4 + 112);
                          uint64_t v8 = (char *)v235;
                          uint64_t v107 = (char *)*v235;
                          uint64_t v108 = v106 - (unsigned char *)*v235;
                          if (v106 == *v235)
                          {
LABEL_221:
                            uint64_t v162 = v108 >> 3;
                            unint64_t v163 = 1 - (v108 >> 3);
                            uint64_t v164 = *(void *)(v4 + 120);
                            if (v163 <= (v164 - (uint64_t)v106) >> 3)
                            {
                              bzero(v106, 8 * v163);
                              v106 += 8 * v163;
                              *(void *)(v4 + 112) = v106;
                              uint64_t v107 = *(char **)v8;
                              uint64_t v109 = *(void *)(v4 + 128);
                              unsigned int v110 = **(_DWORD **)v8;
                              if (*(char **)v8 == v106) {
                                goto LABEL_138;
                              }
LABEL_233:
                              uint64_t v160 = (_DWORD *)(v109 + 52 * v110);
                              uint64_t v161 = v109 + 52 * *((unsigned int *)v107 + 1);
                              if (v160 == (_DWORD *)v161) {
                                goto LABEL_240;
                              }
                              goto LABEL_234;
                            }
                            uint64_t v165 = v164 - (void)v107;
                            uint64_t v166 = v165 >> 2;
                            if ((unint64_t)(v165 >> 2) <= 1) {
                              uint64_t v166 = 1;
                            }
                            BOOL v10 = (unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8;
                            unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                            if (!v10) {
                              unint64_t v167 = v166;
                            }
                            if (!(v167 >> 61))
                            {
                              uint64_t v168 = 8 * v167;
                              unint64_t v169 = (char *)operator new(8 * v167);
                              uint64_t v170 = &v169[8 * v162];
                              bzero(v170, 8 * v163);
                              *(void *)(v4 + 104) = v170;
                              *(void *)(v4 + 112) = &v170[8 * v163];
                              *(void *)(v4 + 120) = &v169[v168];
                              if (v106)
                              {
                                operator delete(v106);
                                uint64_t v106 = *(char **)(v4 + 112);
                                uint64_t v107 = *(char **)v8;
                                uint64_t v109 = *(void *)(v4 + 128);
                                unsigned int v110 = **(_DWORD **)v8;
                                if (*(char **)v8 != v106) {
                                  goto LABEL_233;
                                }
                              }
                              else
                              {
                                uint64_t v106 = &v170[8 * v163];
                                uint64_t v107 = *(char **)v8;
                                uint64_t v109 = *(void *)(v4 + 128);
                                unsigned int v110 = **(_DWORD **)v8;
                                if (*(char **)v8 != v106) {
                                  goto LABEL_233;
                                }
                              }
LABEL_138:
                              uint64_t v111 = *(char **)(v4 + 120);
                              if (v111 != v106)
                              {
                                *(void *)uint64_t v106 = 0;
                                *(void *)(v4 + 112) = v106 + 8;
                                goto LABEL_214;
                              }
                              uint64_t v112 = 1;
                              uint64_t v113 = v111 - v107;
                              if ((unint64_t)(v113 >> 2) > 1) {
                                uint64_t v112 = v113 >> 2;
                              }
                              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v114 = v112;
                              }
                              if (!v114)
                              {
                                uint64_t v115 = 0;
                                uint64_t v116 = 0;
                                *(void *)&def_332C = 0;
                                uint64_t v117 = 8;
                                if (v106 == v107) {
                                  goto LABEL_212;
                                }
                                goto LABEL_159;
                              }
                              if (!(v114 >> 61))
                              {
                                uint64_t v115 = (char *)operator new(8 * v114);
                                uint64_t v116 = v115;
                                *(void *)uint64_t v115 = 0;
                                uint64_t v117 = (uint64_t)(v115 + 8);
                                if (v106 == v107)
                                {
LABEL_212:
                                  *(void *)(v4 + 104) = v116;
                                  *(void *)(v4 + 112) = v117;
                                  *(void *)(v4 + 120) = &v115[8 * v114];
                                  if (v106) {
                                    operator delete(v106);
                                  }
LABEL_214:
                                  uint64_t v160 = (_DWORD *)(v109 + 52 * v110);
                                  uint64_t v161 = *(void *)(v4 + 128) + 52 * *(unsigned int *)(*(void *)(v4 + 104) + 4);
                                  if (v160 == (_DWORD *)v161)
                                  {
LABEL_240:
                                    uint64_t result = (uint64_t)sub_A56CC0(v8, 0);
                                    goto LABEL_241;
                                  }
LABEL_234:
                                  int v171 = v254;
                                  uint64_t v172 = v252;
                                  int v173 = v247;
                                  unint64_t v174 = ((unint64_t)v249 - v248) >> 4;
                                  do
                                  {
                                    unsigned int v177 = v160[10];
                                    if (v171)
                                    {
                                      unsigned int v255 = v160[11];
                                      int v175 = v160[12];
                                      int v256 = v175;
                                    }
                                    else
                                    {
                                      int v175 = *(_DWORD *)(v172 + 12 * v177);
                                    }
                                    long long v176 = (unsigned int *)((char *)v173
                                                          + *(unsigned __int16 *)((char *)v173 - *v173 + 6));
                                    void v160[7] = *(unsigned int *)((char *)&v176[2
                                                                            * (*(_DWORD *)(v172 + 12 * v177 + 4)
                                                                                           + v174)
                                                                            + 1]
                                                              + *v176)
                                            + v175;
                                    v160 += 13;
                                  }
                                  while (v160 != (_DWORD *)v161);
                                  __int16 v253 = (int *)(v172 + 12 * v177);
                                  goto LABEL_240;
                                }
LABEL_159:
                                unint64_t v121 = v106 - 8 - v107;
                                if (v121 < 0x58)
                                {
                                  uint64_t v122 = v106;
                                  goto LABEL_210;
                                }
                                if ((unint64_t)(v106 - v115) < 0x20)
                                {
                                  uint64_t v122 = v106;
                                  goto LABEL_210;
                                }
                                uint64_t v153 = (v121 >> 3) + 1;
                                uint64_t v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
                                uint64_t v122 = &v106[-v154];
                                v116 -= v154;
                                unint64_t v155 = v115 - 16;
                                unsigned int v156 = v106 - 16;
                                uint64_t v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  long long v158 = *(_OWORD *)v156;
                                  *((_OWORD *)v155 - 1) = *((_OWORD *)v156 - 1);
                                  *(_OWORD *)unint64_t v155 = v158;
                                  v155 -= 32;
                                  v156 -= 32;
                                  v157 -= 4;
                                }
                                while (v157);
                                if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
                                {
                                  do
                                  {
LABEL_210:
                                    uint64_t v159 = *((void *)v122 - 1);
                                    v122 -= 8;
                                    *((void *)v116 - 1) = v159;
                                    v116 -= 8;
                                  }
                                  while (v122 != v107);
                                }
                                uint64_t v106 = *(char **)v8;
                                goto LABEL_212;
                              }
                            }
LABEL_323:
                            sub_188D718();
                          }
LABEL_137:
                          uint64_t v109 = *(void *)(v4 + 128);
                          unsigned int v110 = *(_DWORD *)v107;
                          if (v107 != v106) {
                            goto LABEL_233;
                          }
                          goto LABEL_138;
                        }
                        continue;
                      }
                    }
                  }
                  int v104 = 0x7FFFFFFF;
                  uint64_t v4 = v233;
                  unint64_t v105 = *(char **)(v233 + 104);
                  uint64_t v106 = *(char **)(v233 + 112);
                  if (v106 != v105) {
                    goto LABEL_151;
                  }
                }
LABEL_136:
                uint64_t v8 = (char *)v235;
                uint64_t v107 = (char *)*v235;
                uint64_t v108 = v106 - (unsigned char *)*v235;
                if (v106 == *v235) {
                  goto LABEL_221;
                }
                goto LABEL_137;
              }
            }
            else
            {
              unsigned int v231 = -1;
              unint64_t v98 = v244;
              size_t v99 = *(unint64_t **)(v4 + 48);
              if (v99) {
                goto LABEL_131;
              }
            }
            int v104 = 0x80000000;
            unint64_t v105 = *(char **)(v4 + 104);
            uint64_t v106 = *(char **)(v4 + 112);
            if (v106 != v105) {
              goto LABEL_151;
            }
            goto LABEL_136;
          }
        }
LABEL_241:
        if ((*((unsigned char *)v249 + 15) & 1) == 0) {
          goto LABEL_248;
        }
        if (v251)
        {
          if (*(_DWORD *)(v251 + 4 * (((unint64_t)v249 - v248) >> 4)) != v234) {
            goto LABEL_248;
          }
        }
        else if (v234)
        {
          goto LABEL_248;
        }
        unint64_t v178 = v232 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v244;
        uint64_t v179 = *(void *)(v4 + 104);
        if (v178 >= (*(void *)(v4 + 112) - v179) >> 3) {
          goto LABEL_248;
        }
        unint64_t v181 = (_DWORD *)(v179 + 8 * v178);
        int v180 = v181[1];
        int v182 = v180 - *v181;
        if (v180 == *v181) {
          goto LABEL_248;
        }
        unsigned int v190 = 0;
        while (2)
        {
          uint64_t v191 = *(void *)(v4 + 104);
          if (v178 >= (*(void *)(v4 + 112) - v191) >> 3) {
            goto LABEL_324;
          }
          uint64_t v193 = (int *)(v191 + 8 * v178);
          int v192 = *v193;
          if (v193[1] - *v193 <= v190) {
            goto LABEL_324;
          }
          unint64_t v194 = v192 + v190;
          uint64_t v195 = *(void *)(v4 + 128);
          if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v195) >> 2) <= v194) {
            goto LABEL_325;
          }
          uint64_t v196 = v195 + 52 * v194;
          int v197 = *(_DWORD *)(v196 + 28);
          if (v254)
          {
            uint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v245, v197, 1);
            if (result)
            {
LABEL_282:
              uint64_t v198 = *(void *)(v196 + 20);
              uint64_t v199 = *(void *)(v196 + 32);
              int v200 = v256;
              unint64_t v201 = 0xFFFFFFFF00000000;
              if (v254) {
                unint64_t v201 = (unint64_t)v255 << 32;
              }
              unint64_t v202 = (-1431655765 * (((unint64_t)v253 - v252) >> 2)) | v201;
              if (!v254) {
                int v200 = 0x7FFFFFFF;
              }
              unint64_t v203 = (unsigned int *)((char *)v247 + *(unsigned __int16 *)((char *)v247 - *v247 + 6));
              uint64_t v204 = (char *)v203 + *v203;
              unsigned int v205 = &v256;
              if (!v254) {
                unsigned int v205 = v253;
              }
              int v206 = *(_DWORD *)&v204[8 * v253[1] + 4 + 8 * (((unint64_t)v249 - v248) >> 4)]
                   + *v205;
              LODWORD(v237) = ((unint64_t)v249 - v248) >> 4;
              *(void *)((char *)&v237 + 4) = v202;
              HIDWORD(v237) = v200;
              unsigned int v238 = v259;
              uint64_t v239 = v198;
              int v240 = v206;
              uint64_t v241 = v199;
              unint64_t v242 = v202;
              int v243 = v200;
              uint64_t v207 = *(unsigned int **)(v4 + 104);
              if (*(unsigned int **)(v4 + 112) == v207
                || (unsigned int v209 = *v207, v208 = *(_DWORD *)(*(void *)(v4 + 104) + 4), v208 == v209))
              {
                uint64_t result = sub_A4A580((char **)v8, 0, &v237);
              }
              else
              {
                char v210 = 0;
                uint64_t v211 = 52 * v208 - 52 * v209;
                unint64_t v212 = (int *)(*(void *)(v4 + 128) + 52 * v209 + 28);
                do
                {
                  if (*v212 != 0x7FFFFFFF)
                  {
                    if (*v212 >= v240) {
                      goto LABEL_296;
                    }
                    *unint64_t v212 = 0x7FFFFFFF;
                    char v210 = 1;
                  }
                  v212 += 13;
                  v211 -= 52;
                }
                while (v211);
                uint64_t result = sub_A4A580((char **)v8, 0, &v237);
LABEL_296:
                if (v210)
                {
                  uint64_t v213 = *(char **)(v4 + 104);
                  if (*(char **)(v4 + 112) != v213)
                  {
                    uint64_t v214 = *(void *)(v4 + 128);
                    unsigned int v215 = *(_DWORD *)v213;
LABEL_299:
                    uint64_t v216 = v214 + 52 * v215;
                    uint64_t v217 = v214 + 52 * *((unsigned int *)v213 + 1);
                    if (v216 != v217) {
                      goto LABEL_303;
                    }
                    goto LABEL_309;
                  }
                  sub_D2BFC((void **)v8, 1uLL);
                  uint64_t v213 = *(char **)(v4 + 104);
                  uint64_t v214 = *(void *)(v4 + 128);
                  unsigned int v215 = *(_DWORD *)v213;
                  if (*(char **)(v4 + 112) != v213) {
                    goto LABEL_299;
                  }
                  sub_D2BFC((void **)v8, 1uLL);
                  uint64_t v213 = *(char **)(v4 + 104);
                  uint64_t v216 = v214 + 52 * v215;
                  uint64_t v217 = *(void *)(v4 + 128) + 52 * *((unsigned int *)v213 + 1);
                  if (v216 == v217)
                  {
LABEL_309:
                    if (*(char **)(v4 + 112) == v213) {
                      goto LABEL_310;
                    }
                  }
                  else
                  {
LABEL_303:
                    while (*(_DWORD *)(v216 + 28) != 0x7FFFFFFF)
                    {
                      v216 += 52;
                      if (v216 == v217)
                      {
                        uint64_t v216 = v217;
                        if (*(char **)(v4 + 112) != v213) {
                          goto LABEL_311;
                        }
                        goto LABEL_310;
                      }
                    }
                    if (v216 == v217) {
                      goto LABEL_309;
                    }
                    uint64_t v218 = v216 + 52;
                    if (v216 + 52 == v217) {
                      goto LABEL_309;
                    }
                    do
                    {
                      if (*(_DWORD *)(v218 + 28) != 0x7FFFFFFF)
                      {
                        long long v219 = *(_OWORD *)v218;
                        long long v220 = *(_OWORD *)(v218 + 16);
                        long long v221 = *(_OWORD *)(v218 + 32);
                        *(_DWORD *)(v216 + 48) = *(_DWORD *)(v218 + 48);
                        *(_OWORD *)(v216 + 16) = v220;
                        *(_OWORD *)(v216 + 32) = v221;
                        *(_OWORD *)uint64_t v216 = v219;
                        v216 += 52;
                      }
                      v218 += 52;
                    }
                    while (v218 != v217);
                    uint64_t v213 = *(char **)v8;
                    if (*(void *)(v4 + 112) == *(void *)v8)
                    {
LABEL_310:
                      sub_D2BFC((void **)v8, 1uLL);
                      uint64_t v213 = *(char **)v8;
                    }
                  }
LABEL_311:
                  uint64_t result = (uint64_t)sub_A4A05C((void **)v8, 0, (char *)v216, (unsigned char *)(*(void *)(v4 + 128) + 52 * *((unsigned int *)v213 + 1)));
                }
              }
            }
          }
          else
          {
            uint64_t result = sub_A2BC00((uint64_t)&v245, v197, 1);
            if (result) {
              goto LABEL_282;
            }
          }
          if (++v190 == v182) {
            goto LABEL_248;
          }
          continue;
        }
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v93 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v93)
        {
          sub_D2BFC((void **)v8, 1uLL);
          uint64_t v93 = *(unsigned int **)(v4 + 104);
          uint64_t v94 = *(void *)(v4 + 128);
          unsigned int v95 = *v93;
          if (*(unsigned int **)(v4 + 112) == v93)
          {
            sub_D2BFC((void **)v8, 1uLL);
            uint64_t v93 = *(unsigned int **)(v4 + 104);
            uint64_t v96 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v94 = *(void *)(v4 + 128);
          unsigned int v95 = *v93;
        }
        uint64_t v96 = v94;
LABEL_126:
        uint64_t result = (uint64_t)sub_A4A05C((void **)v8, 0, (char *)(v94 + 52 * v95), (unsigned char *)(v96 + 52 * v93[1]));
      }
LABEL_248:
      unint64_t v183 = v248;
      unint64_t v9 = v249 - 2;
      v249 -= 2;
      if (*(unsigned char *)(v245 + 16)) {
        BOOL v184 = v246 == 0;
      }
      else {
        BOOL v184 = 0;
      }
      if (v184 && (unint64_t)v9 >= v248 && (unint64_t)v9 < v250)
      {
        do
        {
          unint64_t v187 = __ROR8__(*v9, 32);
          if (HIDWORD(v187) == 1 && (v187 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v245 + 4120));
          unint64_t v183 = v248;
          unint64_t v9 = v249;
          if (result) {
            break;
          }
          unint64_t v9 = v249 - 2;
          uint64_t v249 = v9;
        }
        while ((unint64_t)v9 >= v248 && (unint64_t)v9 < v250);
      }
      if ((unint64_t)v9 < v183 || (unint64_t)v9 >= v250) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      long long v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A56C20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56C98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_A56CC0(char *result, unsigned int a2)
{
  int v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A4AD68(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_28:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_28;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x4EC4EC4EC4EC4EC5 * ((*((void *)v2 + 4) - v13) >> 2) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 52 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                if (*((_DWORD *)result + 7) < v16)
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_7;
                }
                *unint64_t v15 = 0x7FFFFFFF;
                char v5 = 1;
              }
              if (v8 == ++v11) {
                goto LABEL_7;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_7:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A4A9B0((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A56EA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A56EBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A56ED0(uint64_t result, void *a2, uint64_t a3)
{
  char v5 = (void *)result;
  unsigned int v6 = (void *)(*(void *)(result + 32) - 16);
  *(void *)(result + 32) = v6;
  if (*(unsigned char *)(*(void *)result + 16)) {
    BOOL v7 = *(unsigned char *)(result + 8) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    while ((unint64_t)v6 >= v5[3] && (unint64_t)v6 < v5[5])
    {
      unint64_t v24 = __ROR8__(*v6, 32);
      if (HIDWORD(v24) == 1 && (v24 + 3) < 2) {
        break;
      }
      uint64_t result = sub_2AB7E4(**(void **)(*v5 + 4120));
      unsigned int v6 = (void *)v5[4];
      if (result) {
        break;
      }
      v6 -= 2;
      v5[4] = v6;
    }
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v5[5];
  if ((unint64_t)v6 >= v8 && (unint64_t)v6 < v9)
  {
    unsigned int v11 = -1;
    int v12 = 0x7FFFFFFF;
    do
    {
      if (__ROR8__(*v6, 32) == *a2 && (*((unsigned char *)v6 + 15) & 2) != 0)
      {
        uint64_t v13 = v5[6];
        if (v13) {
          uint64_t v13 = *(unsigned int *)(v13 + 4 * (((unint64_t)v6 - v8) >> 4));
        }
        if ((v13 & a3) == 0)
        {
          uint64_t v14 = *((unsigned char *)v5 + 96) ? v5 + 13 : (_DWORD *)v5[8];
          unint64_t v15 = (unsigned int *)(v5[2] + *(unsigned __int16 *)(v5[2] - *(int *)v5[2] + 6));
          int v16 = *(unsigned int *)((char *)&v15[2 * *(_DWORD *)(v5[8] + 4)
                                             + 2
                                             + 2 * (((unint64_t)v6 - v8) >> 4)]
                                + *v15)
              + *v14
              - *((_DWORD *)v6 + 2);
          if (v12 == 0x7FFFFFFF || v12 < v16)
          {
            int v12 = v16;
            unsigned int v11 = ((unint64_t)v6 - v8) >> 4;
          }
        }
      }
      v6 -= 2;
      v5[4] = v6;
      if (*(unsigned char *)(*v5 + 16)) {
        BOOL v19 = *((unsigned char *)v5 + 8) == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19 && (unint64_t)v6 >= v8)
      {
        if ((unint64_t)v6 < v5[5])
        {
          do
          {
            unint64_t v21 = __ROR8__(*v6, 32);
            if (HIDWORD(v21) == 1 && (v21 + 3) < 2) {
              break;
            }
            uint64_t result = sub_2AB7E4(**(void **)(*v5 + 4120));
            unint64_t v8 = v5[3];
            unsigned int v6 = (void *)v5[4];
            if (result) {
              break;
            }
            v6 -= 2;
            v5[4] = v6;
          }
          while ((unint64_t)v6 >= v8 && (unint64_t)v6 < v5[5]);
        }
        unint64_t v9 = v5[5];
      }
    }
    while ((unint64_t)v6 >= v8 && (unint64_t)v6 < v9);
    if (v11 != -1) {
      v5[4] = v8 + 16 * v11;
    }
  }
  return result;
}

uint64_t sub_A570FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A57210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_A57264(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  int v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    unint64_t v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A5751C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A5754C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    uint64_t v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A57894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A57934(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A59048(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      int v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_A59048(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    unsigned int v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    uint64_t v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        BOOL v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        int v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_A59048(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          unint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          uint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          unint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      uint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      uint64_t v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *uint64_t v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A59048(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_A58AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A58C2C(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A59304(a1 + 1336, v42);
  sub_A595B8((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  uint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_A58FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A59048(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A592B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A59304(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A5BAC8(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A5BCC0(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A5BDD8(a1, v6);
        sub_A5C0EC(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A5D61C(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A5F8BC(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A5E57C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A5E8D4(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A595B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  int v299 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v336) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v297 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v336) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v298 = v5;
  if (v4 >= 2)
  {
    int v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v301 = _Q0;
    int v300 = 1;
    uint64_t v307 = a1;
    long long v306 = (void **)(a1 + 13);
    while (1)
    {
      sub_A49E18((uint64_t)v7, 0);
      sub_A5F710(v7, v300 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      size_t v302 = (unsigned int *)(v14 + 52 * v11[1]);
      unint64_t v303 = (unsigned int *)(v12 + 52 * v13);
      if (v303 != v302)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v336 = 0x7FFFFFFF;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          __int16 v339 = 0;
          unint64_t v340 = 0x8000000080000000;
          int v341 = 0x7FFFFFFF;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0x8000000080000000;
          __int16 v346 = 0;
          unint64_t v347 = 0xFFFFFFFF00000000;
          int v348 = -1;
          uint64_t v349 = 0;
          uint64_t v351 = 0;
          uint64_t v352 = 0;
          uint64_t v353 = 0;
          int v350 = 0x7FFFFFFF;
          int v354 = 100;
          int v355 = -1;
          long long v356 = v301;
          long long v357 = v301;
          long long v358 = v301;
          long long v359 = 0u;
          long long v360 = 0u;
          long long v361 = 0u;
          long long v362 = 0u;
          uint64_t v15 = a1[3];
          long long v363 = 0u;
          long long v364 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v303 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v303 != -1) {
            break;
          }
LABEL_397:
          unint64_t v269 = v359;
          if ((void)v359 != *((void *)&v359 + 1))
          {
            unint64_t v270 = *((void *)&v359 + 1) - 72;
            if (*((void *)&v359 + 1) - 72 > (unint64_t)v359)
            {
              do
              {
                sub_A4D0C8(v269, v270);
                v269 += 72;
                v270 -= 72;
              }
              while (v269 < v270);
            }
          }
          sub_A29D50((uint64_t)__p);
          unint64_t v271 = *(void *)(v3 + 16);
          if (v271 >= *(void *)(v3 + 24))
          {
            uint64_t v272 = sub_A4D268(v299, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v272 = v271 + 296;
            *(void *)(v3 + 16) = v271 + 296;
          }
          int v7 = (char **)v306;
          *(void *)(v3 + 16) = v272;
          if (*((void *)&v363 + 1))
          {
            *(void *)&long long v364 = *((void *)&v363 + 1);
            operator delete(*((void **)&v363 + 1));
          }
          if ((void)v362)
          {
            *((void *)&v362 + 1) = v362;
            operator delete((void *)v362);
          }
          if (*((void *)&v360 + 1))
          {
            *(void *)&long long v361 = *((void *)&v360 + 1);
            operator delete(*((void **)&v360 + 1));
          }
          long long v273 = (void **)v359;
          if ((void)v359)
          {
            uint64_t v274 = *((void *)&v359 + 1);
            uint64_t v275 = (void *)v359;
            if (*((void *)&v359 + 1) != (void)v359)
            {
              do
              {
                unint64_t v277 = *(void **)(v274 - 40);
                if (v277)
                {
                  *(void *)(v274 - 32) = v277;
                  operator delete(v277);
                }
                uint64_t v278 = (void **)(v274 - 72);
                uint64_t v279 = *(void *)(v274 - 72);
                if (v279)
                {
                  uint64_t v280 = *(void *)(v274 - 64);
                  uint64_t v276 = *(void **)(v274 - 72);
                  if (v280 != v279)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v280 - 8))
                      {
                        unint64_t v281 = *(void **)(v280 - 48);
                        if (v281)
                        {
                          *(void *)(v280 - 40) = v281;
                          operator delete(v281);
                        }
                        uint64_t v282 = *(void **)(v280 - 80);
                        if (v282)
                        {
                          *(void *)(v280 - 72) = v282;
                          operator delete(v282);
                        }
                        uint64_t v283 = *(void **)(v280 - 104);
                        if (v283)
                        {
                          *(void *)(v280 - 96) = v283;
                          operator delete(v283);
                        }
                      }
                      v280 -= 168;
                    }
                    while (v280 != v279);
                    uint64_t v276 = *v278;
                  }
                  *(void *)(v274 - 64) = v279;
                  operator delete(v276);
                  a1 = v307;
                }
                v274 -= 72;
              }
              while (v278 != v273);
              uint64_t v275 = (void *)v359;
            }
            *((void *)&v359 + 1) = v273;
            operator delete(v275);
          }
          if (SHIBYTE(v353) < 0) {
            operator delete(v351);
          }
          v303 += 13;
          if (v303 == v302) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v303;
        int v309 = v300;
        unsigned int v310 = *((_DWORD *)a1 + 88);
        while (2)
        {
          unsigned __int8 v327 = 0;
          char v328 = 0;
          unint64_t v329 = 0;
          int v332 = 0;
          uint64_t v333 = 0;
          long long v331 = 0;
          v334[0] = 1;
          *(void *)&v334[4] = 0x8000000080000000;
          *(_WORD *)&unsigned char v334[12] = 0;
          v334[14] = 0;
          int v386 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v311 = xmmword_20E12E0;
          __int16 v312 = 0;
          unint64_t v313 = 0x8000000080000000;
          __int16 v314 = 0;
          *(_OWORD *)unsigned int v315 = xmmword_20EB6B0;
          *(void *)&v315[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v317 = 0u;
          long long v318 = 0u;
          long long v319 = 0u;
          int v316 = -1;
          int v320 = 0x7FFFFFFF;
          uint64_t v322 = 0;
          uint64_t v323 = 0;
          uint64_t v321 = 0;
          char v324 = 1;
          unint64_t v325 = 0x8000000080000000;
          int v326 = 0;
          char v330 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)unsigned int v315 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v315[16] = v19[3];
          *(void *)&v315[8] = v22;
          *(_DWORD *)&v315[20] = *v19;
          unsigned int v23 = *(_DWORD *)&v315[20];
          uint64_t v24 = a1[3];
          uint64_t v365 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
          sub_A1E9A0((uint64_t)v366, v24, v21, v23, 0, 0);
          *(void *)&long long v368 = *(void *)&v367[24] + 12 * *(unsigned int *)&v315[8];
          if (LOBYTE(v370[1])) {
            *(void **)((char *)&v370[1] + 4) = *(void **)&v315[12];
          }
          if (*(void *)&v367[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v367[16]
          }
                                  + 4 * ((*(void *)v367 - *(void *)&v366[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A4C9D4((uint64_t)v366, &v365, v25);
          _CF = *(void *)v367 < *(void *)&v367[8] && *(void *)v367 >= *(void *)&v366[24];
          uint64_t v27 = (*(void *)v367 - *(void *)&v366[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          int v316 = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v315;
          unsigned int v31 = *(_DWORD *)&v315[20];
          uint64_t v32 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v29, *(int *)&v315[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                BOOL v292 = (void *)sub_2F404((uint64_t)exception, (long long *)v366);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                char v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                char v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          unint64_t v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            int v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            int v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          char v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              uint64_t v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v307;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            unsigned int v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_434;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((unsigned int v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v307;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          uint64_t v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v307;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v307;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              unsigned int v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_434:
                long long v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v288, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            int v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_434;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_434;
          }
LABEL_117:
          if (v68
            && ((int v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v310 = *(_DWORD *)(v59 + 8);
          if (v310 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            char v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)char v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            long long v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              unsigned int v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              unint64_t v98 = &v97[8 * v92];
              *(void *)unint64_t v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v307;
                  goto LABEL_155;
                }
                a1 = v307;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_445;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v105 = &v89[-v104];
                v98 -= v104;
                uint64_t v106 = &v97[8 * v92 - 16];
                uint64_t v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)uint64_t v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                char v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_445:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                char v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v310 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              unsigned int v97 = 0;
              unint64_t v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v307;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          uint64_t v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v315;
          unsigned int v113 = *(_DWORD *)&v315[20];
          uint64_t v114 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v111, *(int *)&v315[4]))
          {
            uint64_t v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              uint64_t v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                unint64_t v295 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                int v296 = (void *)sub_2F404((uint64_t)v295, (long long *)v366);
              }
              int v118 = (int *)((char *)v117 + *v117);
              int v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                unint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                unint64_t v121 = 0;
              }
              uint64_t v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              uint64_t v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          uint64_t v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            unsigned int v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            unsigned int v124 = 0;
          }
          DWORD1(v311) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v315;
          uint64_t v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v315[20];
          int v129 = *(_DWORD *)&v315[8];
          uint64_t v130 = HIDWORD(*(void *)v315);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v315[4]))
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              uint64_t v284 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v366);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              unsigned int v289 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
              unint64_t v290 = (void *)sub_2F404((uint64_t)v289, (long long *)v366);
            }
LABEL_180:
            unint64_t v133 = (char *)v131 + *v131;
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              long long v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              long long v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                unint64_t v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                unint64_t v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              uint64_t v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                unsigned int v142 = 0;
                unint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                unsigned int v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  unsigned int v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                unint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)long long v366 = v146;
                  *(_DWORD *)&v366[8] = v147;
                  unint64_t v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  unsigned int v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    uint64_t v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    uint64_t v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v315[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v315[16];
                  }
                  *((void *)&v311 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v366, v152, v153);
                  __int16 v312 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v315;
                  uint64_t v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v316;
                  int v159 = *(_DWORD *)&v315[8];
                  uint64_t v160 = HIDWORD(*(void *)v315);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v315[4]))
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      int v286 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
                      uint64_t v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v366);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      unint64_t v293 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                      __int16 v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v366);
                    }
LABEL_213:
                    unint64_t v163 = (char *)v161 + *v161;
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      uint64_t v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      unint64_t v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        unint64_t v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      int v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        uint64_t v172 = 0;
                        int v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          uint64_t v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        int v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)long long v366 = v176;
                          *(_DWORD *)&v366[8] = v177;
                          unint64_t v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          uint64_t v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            unint64_t v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            unint64_t v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v315[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v315[16];
                          }
                          unint64_t v313 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v366, v182, v183);
                          __int16 v314 = v184;
                          int v375 = -1;
                          sub_9F6FA0((uint64_t)v366, &v311);
                          int v375 = 0;
                          if (v386)
                          {
                            sub_9F6FA0((uint64_t)v376, (long long *)v366);
                            int v386 = v375;
                            if (!v375) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[16] = *(_OWORD *)&v366[16];
                            v377[0] = *(_OWORD *)v367;
                            *(_OWORD *)((char *)v377 + 12) = *(_OWORD *)&v367[12];
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            *(_OWORD *)long long v378 = v368;
                            uint64_t v379 = v369;
                            uint64_t v369 = 0;
                            long long v368 = 0uLL;
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            long long v380 = *(_OWORD *)v370;
                            long long v381 = v370[2];
                            memset(v370, 0, sizeof(v370));
                            int v382 = v371;
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            long long v383 = v372;
                            uint64_t v384 = v373;
                            uint64_t v373 = 0;
                            long long v372 = 0uLL;
                            long long v385 = v374;
                            if (!v375)
                            {
LABEL_250:
                              if ((void)v372)
                              {
                                *((void *)&v372 + 1) = v372;
                                operator delete((void *)v372);
                              }
                              if (v370[0])
                              {
                                v370[1] = v370[0];
                                operator delete(v370[0]);
                              }
                              if ((void)v368)
                              {
                                *((void *)&v368 + 1) = v368;
                                operator delete((void *)v368);
                              }
                            }
                          }
                          if (v321)
                          {
                            uint64_t v322 = v321;
                            operator delete(v321);
                          }
                          if (*((void *)&v318 + 1))
                          {
                            *(void *)&long long v319 = *((void *)&v318 + 1);
                            operator delete(*((void **)&v318 + 1));
                          }
                          if ((void)v317)
                          {
                            *((void *)&v317 + 1) = v317;
                            operator delete((void *)v317);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v328;
                            if ((unint64_t)v328 < v329) {
                              goto LABEL_264;
                            }
LABEL_282:
                            char v328 = (char *)sub_A4CBF4((uint64_t *)&v327, (uint64_t)v376);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              int v192 = (char *)v327;
                              uint64_t v193 = v328;
                              int64_t v194 = v328 - (unsigned char *)v327;
                              if (v328 != v327)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                uint64_t v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v307;
                                do
                                {
                                  uint64_t v199 = (long long *)&v196[v197];
                                  int v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    *uint64_t v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v330;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              unint64_t v203 = v331;
                              uint64_t v204 = v332 - (unsigned char *)v331;
                              if (v332 != v331)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                unsigned int v205 = (char *)operator new(v332 - (unsigned char *)v331);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                int v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v334;
                              *(void *)(v186 + 63) = *(void *)&v334[7];
                              *(void *)(v186 + 56) = v207;
                              unint64_t v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v359 + 1) = v187;
                              unint64_t v208 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 1;
                              unsigned int v209 = v19[5];
                              char v210 = (char *)a1[13];
                              uint64_t v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    uint64_t v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    int v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    int v225 = v306;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_435:
                                    }
                                      sub_188D718();
                                    uint64_t v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      int v225 = v306;
                                      a1 = v307;
                                      int v224 = &v218[8 * v212 + v219];
                                      v307[13] = &v218[8 * v212];
                                      v307[14] = v224;
                                      v307[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        long long v221 = &v218[8 * v212];
                                        unint64_t v222 = v221;
                                        a1 = v307;
                                        goto LABEL_327;
                                      }
                                      long long v221 = &v218[8 * v212];
                                      unint64_t v222 = v221;
                                      a1 = v307;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_446;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      unsigned int v228 = &v211[-v227];
                                      unint64_t v222 = &v221[-v227];
                                      uint64_t v229 = &v218[8 * v212 - 16];
                                      unint64_t v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)uint64_t v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      uint64_t v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_446:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      uint64_t v211 = v210;
                                      int v225 = v306;
                                      int v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        int v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  char v210 = (char *)*v225;
                                  uint64_t v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v305 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_435;
                                  }
                                  unsigned int v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  unsigned int v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                unsigned int v247 = &v244[8 * v241];
                                size_t v304 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v307;
                                  v307[13] = v247;
                                  v307[14] = &v247[v304];
                                  v307[15] = &v244[8 * v305];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    uint64_t v249 = v211;
                                    unint64_t v250 = &v244[8 * v241];
                                    a1 = v307;
                                    size_t v251 = v304;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  uint64_t v249 = &v211[-v260];
                                  unint64_t v250 = &v247[-v260];
                                  long long v261 = &v244[8 * v241 - 16];
                                  long long v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v307;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)long long v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v304;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  uint64_t v211 = (char *)*v306;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v305];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              char v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 52 * v235);
                              __int16 v253 = (unsigned int *)(v237 + 52 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 13;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v386)
                              {
                                if ((void)v383)
                                {
                                  *((void *)&v383 + 1) = v383;
                                  operator delete((void *)v383);
                                }
                                if ((void)v380)
                                {
                                  *((void *)&v380 + 1) = v380;
                                  operator delete((void *)v380);
                                }
                                if (v378[0])
                                {
                                  v378[1] = v378[0];
                                  operator delete(v378[0]);
                                }
                              }
                              if (v331)
                              {
                                int v332 = v331;
                                operator delete(v331);
                              }
                              unsigned __int8 v254 = (char *)v327;
                              if (v327)
                              {
                                unsigned int v255 = v328;
                                char v20 = v327;
                                if (v328 != v327)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      int v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      unsigned int v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      unint64_t v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  char v20 = v327;
                                }
                                char v328 = v254;
                                operator delete(v20);
                              }
                              --v309;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            unint64_t v187 = sub_A4CECC((void ***)&v359, (uint64_t)&v327);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v330 = 1;
                          unsigned int v188 = v19[3];
                          unsigned int v189 = v19[7];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
                          *(_DWORD *)long long v366 = 0;
                          *(_DWORD *)&v366[4] = v188;
                          *(void *)&v366[12] = v190;
                          *(void *)&v366[20] = v191;
                          *(_DWORD *)&v366[8] = v189;
                          int v375 = 1;
                          if (v386)
                          {
                            if (v386 == 1)
                            {
                              *(_OWORD *)v376 = *(_OWORD *)v366;
                              *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                            int v386 = 1;
                          }
                          else
                          {
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            if (v375)
                            {
                              if (v375 == 1) {
                                goto LABEL_280;
                              }
                              int v386 = v375;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v376, (long long *)v366);
                              int v386 = v375;
                              if (!v375)
                              {
                                if ((void)v372)
                                {
                                  *((void *)&v372 + 1) = v372;
                                  operator delete((void *)v372);
                                }
                                if (v370[0])
                                {
                                  v370[1] = v370[0];
                                  operator delete(v370[0]);
                                }
                                if ((void)v368)
                                {
                                  *((void *)&v368 + 1) = v368;
                                  operator delete((void *)v368);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v310 = *v19;
                          uint64_t v185 = (uint64_t)v328;
                          if ((unint64_t)v328 >= v329) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v386;
                          if (v386 == 1)
                          {
                            long long v223 = *(_OWORD *)v376;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v376[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            char v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v386) {
                              sub_9F6FA0(v185, (long long *)v376);
                            }
                            char v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    unint64_t v163 = sub_A10B80(v162 + 24, v156, 0);
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            unint64_t v133 = sub_A10B80(v132 + 24, v126, 0);
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v300 == v298) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v297, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A5B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            unint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        int v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      int v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      int v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        unsigned int v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unsigned int v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A5BAC8(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A5BCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A5BCC0(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v16 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v16);
    int v17 = v5;
    sub_A49E18(a1 + 104, 0);
    long long v9 = xmmword_20E2060;
    uint64_t v10 = -1;
    int v11 = v3;
    int v12 = v2;
    int v13 = 0;
    uint64_t v14 = -1;
    int v15 = 0x7FFFFFFF;
    sub_A5EA14(a1 + 104, (uint64_t)&v9, 0, 0, 1);
    int v6 = *(_DWORD *)(a1 + 96);
    unsigned int v7 = v6 + v6 * v5;
    unsigned int v8 = v7 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A5EB80((void **)(a1 + 104), 0, v8, v7, v6 + v6 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
    }
    else if (!sub_A5EB80((void **)(a1 + 104), 0, v8, v7, 0xFFFFFFFF, 2147483646))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 184), &v17);
  }
}

double sub_A5BDD8(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (char **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      uint64_t v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A49E18((uint64_t)v5, 0);
      sub_A5F710(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC((void **)v5, 1uLL);
        int v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC((void **)v5, 1uLL);
          uint64_t v18 = (unsigned int *)(v16 + 52 * v17);
          uint64_t v19 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
      }
      uint64_t v18 = (unsigned int *)(v16 + 52 * v17);
      uint64_t v19 = v16 + 52 * v15[1];
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        *uint64_t v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 13;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A5EB80((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    uint64_t v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A5C0EC(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v260);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v240 = *(unsigned int **)(a1 + 216);
  if (v4 != v240)
  {
    int v248 = a2 + 1;
    int v241 = a2 + 2;
    int v244 = ~a2;
    int v5 = (void **)(a1 + 104);
    unint64_t v242 = (uint64_t *)(a1 + 232);
    unint64_t v239 = (void **)(a1 + 256);
    __int16 v253 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v243 = v4;
      unsigned int v6 = *v4;
      BOOL v7 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v254, *(void *)(a1 + 24), *v7);
      uint64_t v8 = v255;
      uint64_t v9 = &v256;
      if (v259) {
        uint64_t v9 = v258;
      }
      if ((unint64_t)v255 < *v9) {
        break;
      }
LABEL_3:
      uint64_t v4 = v243 + 1;
      if (v243 + 1 == v240) {
        goto LABEL_313;
      }
    }
    unsigned int v249 = v6 + 1;
    unsigned int v250 = v6;
    while (1)
    {
      unint64_t v13 = __ROR8__(*v8, 32);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 56) - 1;
      unint64_t v16 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
      unint64_t v17 = v16 ^ (v16 >> 33);
      uint64_t v18 = *(void *)(v14 + 80);
      int v20 = *(_DWORD *)(v14 + 64);
      int v19 = *(_DWORD *)(v14 + 68);
      uint64_t v21 = v17 & v15;
      int v22 = (unsigned int *)(v18 + 12 * (v17 & v15));
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (v19 == v23 && v20 == v24) {
        goto LABEL_56;
      }
      if (*(void *)(v14 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v23, v24) != v13)
      {
        uint64_t v21 = (v21 + v44) & v15;
        unint64_t v45 = (unsigned int *)(v18 + 12 * v21);
        unsigned int v24 = *v45;
        unsigned int v23 = v45[1];
        ++v44;
        if (v19 == v23 && v20 == v24) {
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v21 != -1)
      {
        uint64_t v47 = v18 + 12 * v21;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      uint64_t v26 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_31:
        uint64_t v30 = *(void *)(v14 + 56) - 1;
        uint64_t v31 = *(void *)(v14 + 80);
        int v33 = *(_DWORD *)(v14 + 64);
        int v32 = *(_DWORD *)(v14 + 68);
        uint64_t v34 = v30 & v17;
        unsigned int v35 = (unsigned int *)(v31 + 12 * (v30 & v17));
        unsigned int v37 = *v35;
        unsigned int v36 = v35[1];
        uint64_t v38 = *(void *)(v14 + 40);
        if (v32 == v36 && v33 == v37) {
          goto LABEL_80;
        }
        if (v38)
        {
          uint64_t v40 = -1;
          uint64_t v41 = 1;
          do
          {
            if (*(_DWORD *)(v14 + 36) == v36 && *(_DWORD *)(v14 + 32) == v37)
            {
              if (v40 == -1) {
                uint64_t v40 = v34;
              }
            }
            else if (__PAIR64__(v36, v37) == v13)
            {
              goto LABEL_74;
            }
            uint64_t v34 = (v34 + v41) & v30;
            int v42 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v42;
            unsigned int v36 = v42[1];
            ++v41;
          }
          while (v32 != v36 || v33 != v37);
          if (v40 == -1) {
LABEL_80:
          }
            uint64_t v40 = v34;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555) {
            goto LABEL_322;
          }
        }
        else
        {
          uint64_t v54 = 1;
          while (__PAIR64__(v36, v37) != v13)
          {
            uint64_t v34 = (v34 + v54) & v30;
            uint64_t v55 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v55;
            unsigned int v36 = v55[1];
            ++v54;
            if (v32 == v36 && v33 == v37)
            {
              uint64_t v38 = 0;
              goto LABEL_80;
            }
          }
LABEL_74:
          if (v34 != -1)
          {
            uint64_t v47 = v31 + 12 * v34;
            unsigned int v48 = *(_DWORD *)(v47 + 8);
            if (v48 != -1) {
              goto LABEL_109;
            }
            goto LABEL_90;
          }
          uint64_t v40 = -1;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555)
          {
LABEL_322:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v38
          && ((BOOL v58 = (_DWORD *)(v31 + 12 * v40), *(_DWORD *)(v14 + 36) == v58[1])
            ? (BOOL v59 = *(_DWORD *)(v14 + 32) == *v58)
            : (BOOL v59 = 0),
              v59))
        {
          *(void *)(v14 + 40) = v38 - 1;
          uint64_t v53 = 3 * v40;
        }
        else
        {
          *(void *)(v14 + 48) = v57 + 1;
          uint64_t v53 = 3 * v40;
        }
        goto LABEL_89;
      }
LABEL_57:
      uint64_t v50 = *(void *)(v14 + 40);
      uint64_t v49 = *(void *)(v14 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_322;
      }
      uint64_t v31 = *(void *)(v14 + 80);
      if (v50
        && ((char v51 = (_DWORD *)(v31 + 12 * v26), *(_DWORD *)(v14 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v14 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v14 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v14 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v26;
LABEL_89:
      uint64_t v60 = 4 * v53;
      uint64_t v61 = v31 + v60;
      *(void *)uint64_t v61 = v13;
      *(_DWORD *)(v61 + 8) = -1;
      uint64_t v47 = *(void *)(v14 + 80) + v60;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 != -1) {
        goto LABEL_109;
      }
LABEL_90:
      int v62 = *(_DWORD *)(v14 + 112);
      *(_DWORD *)(v14 + 112) = v62 + 1;
      *(_DWORD *)(v47 + 8) = v62;
      uint64_t v64 = *(char **)(v14 + 96);
      unint64_t v63 = *(void *)(v14 + 104);
      if ((unint64_t)v64 >= v63)
      {
        unsigned int v66 = (char **)(v14 + 88);
        unsigned int v67 = *(char **)(v14 + 88);
        uint64_t v68 = (v64 - v67) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v70 = v63 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v251 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_321;
          }
          uint64_t v71 = (char *)operator new(8 * v69);
          unsigned int v66 = (char **)(v14 + 88);
          int v72 = &v71[8 * v68];
          *(void *)int v72 = v13;
          uint64_t v65 = (uint64_t)(v72 + 8);
          if (v64 != v67) {
            goto LABEL_100;
          }
LABEL_163:
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v251];
          if (!v64) {
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v71 = 0;
          int v72 = (char *)(8 * v68);
          *(void *)(8 * v68) = v13;
          uint64_t v65 = 8 * v68 + 8;
          if (v64 == v67) {
            goto LABEL_163;
          }
LABEL_100:
          unint64_t v73 = v64 - 8 - v67;
          if (v73 < 0x58) {
            goto LABEL_327;
          }
          if ((unint64_t)(v67 - v71) < 0x20) {
            goto LABEL_327;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v76 = &v64[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v68 - 16];
          uint64_t v78 = (long long *)(v64 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v64 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_327:
            do
            {
              uint64_t v81 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v64 != v67);
          }
          uint64_t v64 = *v66;
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v251];
          if (!v64) {
            goto LABEL_108;
          }
        }
        operator delete(v64);
        goto LABEL_108;
      }
      *(void *)uint64_t v64 = v13;
      uint64_t v65 = (uint64_t)(v64 + 8);
LABEL_108:
      *(void *)(v14 + 96) = v65;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      int v5 = (void **)(a1 + 104);
LABEL_109:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v252 = v48;
      if (v250 == v48) {
        goto LABEL_261;
      }
      int v83 = *(char **)(a1 + 104);
      uint64_t v82 = *(unsigned char **)(a1 + 112);
      uint64_t v84 = v82 - v83;
      if (v82 != v83)
      {
        uint64_t v85 = *(void *)(a1 + 128);
        unsigned int v86 = *(_DWORD *)v83;
LABEL_124:
        uint64_t v99 = v85;
        goto LABEL_140;
      }
      uint64_t v88 = v84 >> 3;
      unint64_t v89 = 1 - (v84 >> 3);
      uint64_t v90 = *(void *)(a1 + 120);
      if (v89 <= (v90 - (uint64_t)v82) >> 3)
      {
        bzero(*(void **)(a1 + 112), 8 * v89);
        unint64_t v98 = &v82[8 * v89];
        *(void *)(a1 + 112) = v98;
        int v83 = (char *)*v5;
        uint64_t v85 = *(void *)(a1 + 128);
        unsigned int v86 = *(_DWORD *)*v5;
        if (*v5 != v98) {
          goto LABEL_124;
        }
      }
      else
      {
        uint64_t v91 = v90 - (void)v83;
        uint64_t v92 = v91 >> 2;
        if ((unint64_t)(v91 >> 2) <= 1) {
          uint64_t v92 = 1;
        }
        BOOL v234 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v234) {
          unint64_t v93 = v92;
        }
        if (v93 >> 61) {
          goto LABEL_321;
        }
        uint64_t v94 = 8 * v93;
        unint64_t v95 = (char *)operator new(8 * v93);
        unint64_t v96 = &v95[8 * v88];
        bzero(v96, 8 * v89);
        unsigned int v97 = &v96[8 * v89];
        *(void *)(a1 + 104) = v96;
        *(void *)(a1 + 112) = v97;
        *(void *)(a1 + 120) = &v95[v94];
        if (v82)
        {
          operator delete(v82);
          unint64_t v98 = *(char **)(a1 + 112);
          int v83 = (char *)*v5;
          uint64_t v85 = *(void *)(a1 + 128);
          unsigned int v86 = *(_DWORD *)*v5;
          if (*v5 != v98) {
            goto LABEL_124;
          }
        }
        else
        {
          unint64_t v98 = &v96[8 * v89];
          int v83 = (char *)*v5;
          uint64_t v85 = *(void *)(a1 + 128);
          unsigned int v86 = *(_DWORD *)*v5;
          if (*v5 != v97) {
            goto LABEL_124;
          }
        }
      }
      int v87 = *(char **)(a1 + 120);
      if (v87 != v98)
      {
        *(void *)unint64_t v98 = 0;
        *(void *)(a1 + 112) = v98 + 8;
        goto LABEL_139;
      }
      uint64_t v100 = 1;
      uint64_t v101 = v87 - v83;
      if ((unint64_t)(v101 >> 2) > 1) {
        uint64_t v100 = v101 >> 2;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 61) {
          goto LABEL_321;
        }
        uint64_t v103 = (char *)operator new(8 * v102);
        uint64_t v104 = v103;
        *(void *)uint64_t v103 = 0;
        uint64_t v105 = (uint64_t)(v103 + 8);
        if (v98 == v83)
        {
LABEL_187:
          int v5 = (void **)(a1 + 104);
          *(void *)(a1 + 104) = v104;
          *(void *)(a1 + 112) = v105;
          *(void *)(a1 + 120) = &v103[8 * v102];
          if (!v98) {
            goto LABEL_139;
          }
LABEL_138:
          operator delete(v98);
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        *(void *)&def_332C = 0;
        uint64_t v105 = 8;
        if (v98 == v83) {
          goto LABEL_187;
        }
      }
      unint64_t v106 = v98 - 8 - v83;
      if (v106 < 0x58 || (unint64_t)(v98 - v103) < 0x20)
      {
        uint64_t v107 = v98;
        int v5 = (void **)(a1 + 104);
        do
        {
LABEL_136:
          uint64_t v108 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v104 - 1) = v108;
          v104 -= 8;
        }
        while (v107 != v83);
        goto LABEL_137;
      }
      uint64_t v204 = (v106 >> 3) + 1;
      uint64_t v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v107 = &v98[-v205];
      v104 -= v205;
      int v206 = v103 - 16;
      uint64_t v207 = v98 - 16;
      uint64_t v208 = v204 & 0x3FFFFFFFFFFFFFFCLL;
      int v5 = (void **)(a1 + 104);
      do
      {
        long long v209 = *(_OWORD *)v207;
        *((_OWORD *)v206 - 1) = *((_OWORD *)v207 - 1);
        *(_OWORD *)int v206 = v209;
        v206 -= 32;
        v207 -= 32;
        v208 -= 4;
      }
      while (v208);
      if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_136;
      }
LABEL_137:
      unint64_t v98 = (char *)*v5;
      *(void *)(a1 + 104) = v104;
      *(void *)(a1 + 112) = v105;
      *(void *)(a1 + 120) = &v103[8 * v102];
      if (v98) {
        goto LABEL_138;
      }
LABEL_139:
      int v83 = *(char **)(a1 + 104);
      uint64_t v99 = *(void *)(a1 + 128);
LABEL_140:
      sub_A4A05C(v5, 0, (char *)(v85 + 52 * v86), (unsigned char *)(v99 + 52 * *((unsigned int *)v83 + 1)));
      unint64_t v109 = v248 + *(_DWORD *)(a1 + 96) * v249;
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      if (v109 >= ((char *)v111 - (char *)v110) >> 3) {
        goto LABEL_165;
      }
      unsigned int v112 = v110[2 * v109];
      unsigned int v113 = v110[2 * v109 + 1];
      unsigned int v114 = v113 - v112;
      if (v113 == v112) {
        goto LABEL_165;
      }
      int v115 = 0;
      unsigned int v116 = 0;
      do
      {
        int v119 = *(unsigned int **)(a1 + 104);
        if (v109 >= (uint64_t)(*(void *)(a1 + 112) - (void)v119) >> 3) {
          goto LABEL_317;
        }
        unsigned int v120 = v119[2 * v109];
        if (v119[2 * v109 + 1] - v120 <= v116) {
          goto LABEL_317;
        }
        unint64_t v121 = v120 + v116;
        uint64_t v122 = *(void *)(a1 + 128);
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v122) >> 2) <= v121)
        {
LABEL_318:
          uint64_t v237 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v237, "index out of range");
          goto LABEL_319;
        }
        uint64_t v123 = v122 + 52 * v121;
        long long v124 = *(_OWORD *)v123;
        long long v125 = *(_OWORD *)(v123 + 16);
        long long v126 = *(_OWORD *)(v123 + 32);
        int v264 = *(_DWORD *)(v123 + 48);
        long long v263 = v126;
        long long v261 = v124;
        long long v262 = v125;
        unsigned int v127 = *v119;
        unsigned int v128 = v119[1];
        if (v128 != *v119)
        {
          int v117 = 0;
          uint64_t v129 = 52 * v128 - 52 * v127;
          uint64_t v130 = (_DWORD *)(v122 + 52 * v127 + 32);
          while (1)
          {
            int v131 = *(v130 - 1);
            if (v131 != 0x7FFFFFFF)
            {
              if (v131 <= SHIDWORD(v262) && *v130 <= (int)v263) {
                goto LABEL_145;
              }
              if (SHIDWORD(v262) <= v131 && (int)v263 <= *v130)
              {
                *(v130 - 1) = 0x7FFFFFFF;
                int v117 = 1;
              }
            }
            v130 += 13;
            v129 -= 52;
            if (!v129) {
              goto LABEL_144;
            }
          }
        }
        int v117 = 0;
LABEL_144:
        uint64_t v118 = sub_A5ECD8((char **)v5, 0, &v261);
        *(void *)(v118 + 40) = -1;
        *(_DWORD *)(v118 + 48) = 0x7FFFFFFF;
LABEL_145:
        v115 |= v117;
        ++v116;
      }
      while (v116 != v114);
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      if (!v115)
      {
LABEL_165:
        uint64_t v135 = (char *)v111 - (char *)v110;
        if (v111 == v110) {
          goto LABEL_206;
        }
LABEL_166:
        uint64_t v136 = *(void *)(a1 + 128);
        unsigned int v137 = *v110;
        if (v110 != v111) {
          goto LABEL_220;
        }
LABEL_167:
        uint64_t v138 = *(unsigned int **)(a1 + 120);
        if (v138 != v111)
        {
          *(void *)uint64_t v111 = 0;
          *(void *)(a1 + 112) = v111 + 2;
LABEL_183:
          uint64_t v110 = *(unsigned int **)(a1 + 104);
          uint64_t v148 = *(void *)(a1 + 128);
          goto LABEL_221;
        }
        uint64_t v139 = 1;
        uint64_t v140 = (char *)v138 - (char *)v110;
        if ((unint64_t)(v140 >> 2) > 1) {
          uint64_t v139 = v140 >> 2;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141)
        {
          if (v141 >> 61) {
LABEL_321:
          }
            sub_188D718();
          unsigned int v142 = (char *)operator new(8 * v141);
          unint64_t v143 = v142;
          *(void *)unsigned int v142 = 0;
          uint64_t v144 = (uint64_t)(v142 + 8);
          if (v111 != v110)
          {
LABEL_177:
            unint64_t v145 = (char *)(v111 - 2) - (char *)v110;
            if (v145 < 0x58 || (unint64_t)((char *)v111 - v142) < 0x20)
            {
              uint64_t v146 = v111;
              int v5 = (void **)(a1 + 104);
              goto LABEL_180;
            }
            uint64_t v210 = (v145 >> 3) + 1;
            uint64_t v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v146 = &v111[v211 / 0xFFFFFFFFFFFFFFFCLL];
            v143 -= v211;
            unint64_t v212 = v142 - 16;
            unint64_t v213 = v111 - 4;
            uint64_t v214 = v210 & 0x3FFFFFFFFFFFFFFCLL;
            int v5 = (void **)(a1 + 104);
            do
            {
              long long v215 = *(_OWORD *)v213;
              *((_OWORD *)v212 - 1) = *((_OWORD *)v213 - 1);
              *(_OWORD *)unint64_t v212 = v215;
              v212 -= 32;
              v213 -= 8;
              v214 -= 4;
            }
            while (v214);
            if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_180:
                uint64_t v147 = *((void *)v146 - 1);
                v146 -= 2;
                *((void *)v143 - 1) = v147;
                v143 -= 8;
              }
              while (v146 != v110);
            }
            uint64_t v111 = (unsigned int *)*v5;
            *(void *)(a1 + 104) = v143;
            *(void *)(a1 + 112) = v144;
            *(void *)(a1 + 120) = &v142[8 * v141];
            if (!v111) {
              goto LABEL_183;
            }
LABEL_182:
            operator delete(v111);
            goto LABEL_183;
          }
        }
        else
        {
          unsigned int v142 = 0;
          unint64_t v143 = 0;
          *(void *)&def_332C = 0;
          uint64_t v144 = 8;
          if (v111 != v110) {
            goto LABEL_177;
          }
        }
        int v5 = (void **)(a1 + 104);
        *(void *)(a1 + 104) = v143;
        *(void *)(a1 + 112) = v144;
        *(void *)(a1 + 120) = &v142[8 * v141];
        if (!v111) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      if (v111 != v110)
      {
        uint64_t v132 = *(void *)(a1 + 128);
        unsigned int v133 = *v110;
        goto LABEL_161;
      }
      sub_D2BFC(v5, 1uLL);
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v132 = *(void *)(a1 + 128);
      unsigned int v133 = *v110;
      if (*(unsigned int **)(a1 + 112) == v110)
      {
        sub_D2BFC(v5, 1uLL);
        uint64_t v110 = *(unsigned int **)(a1 + 104);
        uint64_t v134 = *(void *)(a1 + 128);
      }
      else
      {
LABEL_161:
        uint64_t v134 = v132;
      }
      unsigned int v149 = (long long *)(v132 + 52 * v133);
      uint64_t v150 = (long long *)(v134 + 52 * v110[1]);
      if (v149 == v150)
      {
LABEL_203:
        if (*(unsigned int **)(a1 + 112) == v110) {
          goto LABEL_204;
        }
      }
      else
      {
        while (*((_DWORD *)v149 + 7) != 0x7FFFFFFF)
        {
          unsigned int v149 = (long long *)((char *)v149 + 52);
          if (v149 == v150)
          {
            unsigned int v149 = v150;
            if (*(unsigned int **)(a1 + 112) != v110) {
              goto LABEL_205;
            }
            goto LABEL_204;
          }
        }
        if (v149 == v150) {
          goto LABEL_203;
        }
        uint64_t v151 = (long long *)((char *)v149 + 52);
        if ((long long *)((char *)v149 + 52) == v150) {
          goto LABEL_203;
        }
        do
        {
          if (*((_DWORD *)v151 + 7) != 0x7FFFFFFF)
          {
            long long v161 = *v151;
            long long v162 = v151[1];
            long long v163 = v151[2];
            *((_DWORD *)v149 + 12) = *((_DWORD *)v151 + 12);
            v149[1] = v162;
            v149[2] = v163;
            long long *v149 = v161;
            unsigned int v149 = (long long *)((char *)v149 + 52);
          }
          uint64_t v151 = (long long *)((char *)v151 + 52);
        }
        while (v151 != v150);
        uint64_t v110 = (unsigned int *)*v5;
        if (*(void **)(a1 + 112) == *v5)
        {
LABEL_204:
          sub_D2BFC(v5, 1uLL);
          uint64_t v110 = (unsigned int *)*v5;
        }
      }
LABEL_205:
      sub_A4A05C(v5, 0, (char *)v149, (unsigned char *)(*(void *)(a1 + 128) + 52 * v110[1]));
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      uint64_t v135 = (char *)v111 - (char *)v110;
      if (v111 != v110) {
        goto LABEL_166;
      }
LABEL_206:
      uint64_t v152 = v135 >> 3;
      unint64_t v153 = 1 - (v135 >> 3);
      uint64_t v154 = *(void *)(a1 + 120);
      if (v153 <= (v154 - (uint64_t)v111) >> 3)
      {
        bzero(v110, 8 * v153);
        uint64_t v111 = &v110[2 * v153];
        *(void *)(a1 + 112) = v111;
        uint64_t v110 = (unsigned int *)*v5;
        uint64_t v136 = *(void *)(a1 + 128);
        unsigned int v137 = *(_DWORD *)*v5;
        if (*v5 != v111) {
          goto LABEL_220;
        }
        goto LABEL_167;
      }
      uint64_t v155 = v154 - (void)v110;
      uint64_t v156 = v155 >> 2;
      if ((unint64_t)(v155 >> 2) <= 1) {
        uint64_t v156 = 1;
      }
      BOOL v234 = (unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v234) {
        unint64_t v157 = v156;
      }
      if (v157 >> 61) {
        goto LABEL_321;
      }
      uint64_t v158 = 8 * v157;
      int v159 = (char *)operator new(8 * v157);
      uint64_t v160 = &v159[8 * v152];
      bzero(v160, 8 * v153);
      uint64_t v111 = (unsigned int *)&v160[8 * v153];
      *(void *)(a1 + 104) = v160;
      *(void *)(a1 + 112) = v111;
      *(void *)(a1 + 120) = &v159[v158];
      if (v110)
      {
        operator delete(v110);
        uint64_t v111 = *(unsigned int **)(a1 + 112);
      }
      uint64_t v110 = (unsigned int *)*v5;
      uint64_t v136 = *(void *)(a1 + 128);
      unsigned int v137 = *(_DWORD *)*v5;
      if (*v5 == v111) {
        goto LABEL_167;
      }
LABEL_220:
      uint64_t v148 = v136;
LABEL_221:
      uint64_t v164 = v136 + 52 * v137;
      uint64_t v165 = v148 + 52 * v110[1];
      if (v164 != v165)
      {
        uint64_t v166 = v255;
        do
        {
          *(_DWORD *)uint64_t v164 = v250;
          *(_DWORD *)(v164 + 16) = -1;
          int32x2_t v167 = *(int32x2_t *)(v164 + 28);
          *(_DWORD *)(v164 + 12) = v167.i32[0];
          int v168 = *((_DWORD *)v166 + 2);
          int v169 = v168 / 10;
          int v170 = v168 % 10;
          if (v168 < 0) {
            char v171 = -5;
          }
          else {
            char v171 = 5;
          }
          *(int32x2_t *)(v164 + 28) = vadd_s32(vdup_n_s32(v169+ (((103 * (char)(v171 + v170)) >> 15) & 1)+ ((103 * (char)(v171 + v170)) >> 10)), v167);
          v164 += 52;
        }
        while (v164 != v165);
      }
      int v172 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v173 = v172 + v172 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v174 = v252;
        uint64_t v175 = *(unint64_t **)(a1 + 48);
        if (v175) {
          goto LABEL_229;
        }
LABEL_236:
        int v179 = 2147483646;
        uint64_t v180 = *(_DWORD **)(a1 + 104);
        if (*(_DWORD **)(a1 + 112) == v180)
        {
LABEL_261:
          unint64_t v11 = (unint64_t)v256;
          uint64_t v8 = (void *)((char *)v255 + 12);
          unsigned int v255 = v8;
          if (v8 != v256) {
            goto LABEL_262;
          }
LABEL_295:
          uint64_t v8 = v257;
          unint64_t v12 = v258[0];
          unsigned int v255 = v257;
          int v10 = 1;
          unsigned __int8 v259 = 1;
          if (*(unsigned char *)(v254 + 16)) {
            goto LABEL_296;
          }
          goto LABEL_10;
        }
      }
      else
      {
        int v173 = -1;
        unint64_t v174 = v252;
        uint64_t v175 = *(unint64_t **)(a1 + 48);
        if (!v175) {
          goto LABEL_236;
        }
LABEL_229:
        if (*v175 <= v174)
        {
          int v179 = 0x7FFFFFFF;
          uint64_t v180 = *(_DWORD **)(a1 + 104);
          if (*(_DWORD **)(a1 + 112) == v180) {
            goto LABEL_261;
          }
        }
        else
        {
          int v245 = v173;
          unsigned int v176 = 0;
          unsigned int v177 = *(_DWORD *)(a1 + 100) + v244;
          unsigned int v178 = v177;
          do
          {
            if (v176 > v177)
            {
              int v179 = 0x7FFFFFFF;
              int v5 = (void **)(a1 + 104);
              int v173 = v245;
              uint64_t v180 = *(_DWORD **)(a1 + 104);
              if (*(_DWORD **)(a1 + 112) == v180) {
                goto LABEL_261;
              }
              goto LABEL_241;
            }
            int v179 = *(_DWORD *)sub_A3F53C(v175 + 2, v175[1] * v174 + v178);
            v176 += 2;
            v178 -= 2;
          }
          while (v179 == 0x7FFFFFFF);
          int v5 = (void **)(a1 + 104);
          int v173 = v245;
          uint64_t v180 = *(_DWORD **)(a1 + 104);
          if (*(_DWORD **)(a1 + 112) == v180) {
            goto LABEL_261;
          }
        }
      }
LABEL_241:
      int v181 = v180[1];
      int v182 = v181 - *v180;
      if (v181 == *v180) {
        goto LABEL_261;
      }
      if (v179 == 0x7FFFFFFF)
      {
        unsigned int v183 = 0;
        while (v180[1] - *v180 > v183)
        {
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) <= (unint64_t)(v183 + *v180)) {
            goto LABEL_318;
          }
          if (v182 == ++v183) {
            goto LABEL_261;
          }
        }
LABEL_317:
        uint64_t v237 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_188D9E0(v237, "key does not exist and cannot be added");
LABEL_319:
      }
      __int16 v184 = 0;
      unsigned int v185 = 0;
      unint64_t v246 = v252 + 1;
      unsigned int v186 = v241 + v172 * v246;
      unsigned int v187 = v172 * v246 + 1;
      unsigned int v188 = v173;
      do
      {
        unsigned int v189 = *(int **)(a1 + 104);
        if (*(int **)(a1 + 112) == v189) {
          goto LABEL_317;
        }
        int v190 = *v189;
        if (*(_DWORD *)(*(void *)(a1 + 104) + 4) - v190 <= v185) {
          goto LABEL_317;
        }
        unint64_t v191 = v185 + v190;
        uint64_t v192 = *(void *)(a1 + 128);
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v192) >> 2) <= v191) {
          goto LABEL_318;
        }
        uint64_t v193 = v192 + 52 * v191;
        long long v195 = *(_OWORD *)(v193 + 16);
        long long v194 = *(_OWORD *)(v193 + 32);
        long long v196 = *(_OWORD *)v193;
        int v264 = *(_DWORD *)(v193 + 48);
        long long v263 = v194;
        long long v261 = v196;
        long long v262 = v195;
        if (SHIDWORD(v195) <= v179)
        {
          __int16 v197 = sub_A5F3E4((uint64_t)v253, (uint64_t)&v261, v186, v187, v188);
          __int16 v184 = v197 | v184 | (v197 | v184) & 0xFF00;
        }
        ++v185;
      }
      while (v182 != v185);
      int v5 = (void **)(a1 + 104);
      if ((v184 & 0xFF00) != 0)
      {
        sub_A4A9B0(v253, v186);
        sub_A4A9B0(v253, v187);
      }
      if (!(_BYTE)v184) {
        goto LABEL_261;
      }
      if (*(void *)(a1 + 240) <= v174) {
        sub_A3E96C((uint64_t)v242, v246, 0);
      }
      uint64_t v198 = *v242;
      unint64_t v199 = v174 >> 6;
      uint64_t v200 = 1 << v174;
      if ((*(void *)(*v242 + 8 * (v174 >> 6)) & (1 << v174)) != 0) {
        goto LABEL_261;
      }
      char v202 = *(char **)(a1 + 264);
      unint64_t v201 = *(void *)(a1 + 272);
      if ((unint64_t)v202 >= v201)
      {
        uint64_t v216 = (char *)*v239;
        uint64_t v217 = v202 - (unsigned char *)*v239;
        uint64_t v218 = v217 >> 2;
        unint64_t v219 = (v217 >> 2) + 1;
        if (v219 >> 62) {
          sub_2E00();
        }
        uint64_t v220 = v201 - (void)v216;
        if (v220 >> 1 > v219) {
          unint64_t v219 = v220 >> 1;
        }
        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v219 = 0x3FFFFFFFFFFFFFFFLL;
        }
        *(void *)unsigned int v247 = v219;
        if (v219)
        {
          if (v219 >> 62) {
            goto LABEL_321;
          }
          long long v221 = operator new(4 * v219);
          unint64_t v222 = (unsigned int *)&v221[4 * v218];
          unsigned int *v222 = v252;
          uint64_t v203 = (uint64_t)(v222 + 1);
          if (v202 == v216) {
            goto LABEL_292;
          }
LABEL_286:
          unint64_t v223 = v202 - 4 - v216;
          if (v223 < 0x2C) {
            goto LABEL_328;
          }
          if ((unint64_t)(v202 - &v221[v217]) < 0x20) {
            goto LABEL_328;
          }
          uint64_t v224 = (v223 >> 2) + 1;
          uint64_t v225 = 4 * (v224 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v226 = &v202[-v225];
          unint64_t v222 = (unsigned int *)((char *)v222 - v225);
          uint64_t v227 = &v221[4 * v218 - 16];
          unsigned int v228 = v202 - 16;
          uint64_t v229 = v224 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v230 = *(_OWORD *)v228;
            *(v227 - 1) = *((_OWORD *)v228 - 1);
            *uint64_t v227 = v230;
            v227 -= 2;
            v228 -= 32;
            v229 -= 8;
          }
          while (v229);
          char v202 = v226;
          if (v224 != (v224 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_328:
            do
            {
              unsigned int v231 = *((_DWORD *)v202 - 1);
              v202 -= 4;
              *--unint64_t v222 = v231;
            }
            while (v202 != v216);
          }
        }
        else
        {
          long long v221 = 0;
          unint64_t v222 = (unsigned int *)(4 * v218);
          *(_DWORD *)(4 * v218) = v252;
          uint64_t v203 = 4 * v218 + 4;
          if (v202 != v216) {
            goto LABEL_286;
          }
        }
LABEL_292:
        *(void *)(a1 + 256) = v222;
        *(void *)(a1 + 264) = v203;
        *(void *)(a1 + 272) = &v221[4 * *(void *)v247];
        if (v216)
        {
          operator delete(v216);
          uint64_t v198 = *v242;
        }
        goto LABEL_294;
      }
      *(_DWORD *)char v202 = v252;
      uint64_t v203 = (uint64_t)(v202 + 4);
LABEL_294:
      int v5 = (void **)(a1 + 104);
      *(void *)(a1 + 264) = v203;
      *(void *)(v198 + 8 * v199) |= v200;
      unint64_t v11 = (unint64_t)v256;
      uint64_t v8 = (void *)((char *)v255 + 12);
      unsigned int v255 = v8;
      if (v8 == v256) {
        goto LABEL_295;
      }
LABEL_262:
      int v10 = v259;
      unint64_t v12 = v258[0];
      if (*(unsigned char *)(v254 + 16))
      {
LABEL_296:
        if (v10) {
          unint64_t v232 = v12;
        }
        else {
          unint64_t v232 = v11;
        }
        if ((unint64_t)v8 < v232)
        {
          while (1)
          {
            unint64_t v233 = __ROR8__(*v8, 32);
            BOOL v234 = HIDWORD(v233) != 1 || (v233 + 3) >= 2;
            if (!v234) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v254 + 4120)))
            {
              LOBYTE(v10) = v259;
              uint64_t v8 = v255;
              unint64_t v11 = (unint64_t)v256;
              break;
            }
            unint64_t v11 = (unint64_t)v256;
            uint64_t v8 = (void *)((char *)v255 + 12);
            unsigned int v255 = v8;
            if (v8 == v256)
            {
              uint64_t v8 = v257;
              unsigned int v255 = v257;
              LOBYTE(v10) = 1;
              unsigned __int8 v259 = 1;
              if ((unint64_t)v257 >= v258[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v10) = v259;
              unsigned int v235 = &v256;
              if (v259) {
                unsigned int v235 = v258;
              }
              if ((unint64_t)v8 >= *v235) {
                break;
              }
            }
          }
          unint64_t v12 = v258[0];
        }
      }
LABEL_10:
      if ((_BYTE)v10) {
        unint64_t v11 = v12;
      }
      if ((unint64_t)v8 >= v11) {
        goto LABEL_3;
      }
    }
    uint64_t v26 = -1;
    uint64_t v27 = 1;
    do
    {
      if (*(_DWORD *)(v14 + 36) == v23 && *(_DWORD *)(v14 + 32) == v24)
      {
        if (v26 == -1) {
          uint64_t v26 = v21;
        }
      }
      else if (__PAIR64__(v23, v24) == v13)
      {
        goto LABEL_53;
      }
      uint64_t v21 = (v21 + v27) & v15;
      int v28 = (unsigned int *)(v18 + 12 * v21);
      unsigned int v24 = *v28;
      unsigned int v23 = v28[1];
      ++v27;
    }
    while (v19 != v23 || v20 != v24);
    if (v26 != -1)
    {
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v26 = v21;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_313:
  double result = sub_72688((uint64_t)v260) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A5D57C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D590(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D5A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D5B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D5CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D5E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D5F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5D61C(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unsigned int v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    uint64_t v211 = v8;
    uint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    int v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          uint64_t v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      unint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          int v72 = &v71[8 * v67];
          *(void *)int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          unint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          unint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)unint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      int v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          int v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            uint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              uint64_t v101 = v200;
              goto LABEL_135;
            }
            uint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            unint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        unint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        unint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        long long v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        int v168 = v213 + 2;
        unint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          int v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          unint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        long long v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      int v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        unint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              unint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                int v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            unint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            int v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              int v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            long long v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              unint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                int v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                unint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              long long v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unsigned int v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unsigned int v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          int v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        unsigned int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          uint64_t v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          unint64_t v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unsigned int v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        uint64_t v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        uint64_t v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            char v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              uint64_t v122 = &v202[4 * v112];
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                uint64_t v122 = &v202[4 * v112];
                long long v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
              uint64_t v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              uint64_t v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *unint64_t v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              uint64_t v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          long long v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          long long v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        uint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            long long v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            long long v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            uint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)uint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        long long v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A5E554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5E568(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A5E57C(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_A5E888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_A5E8D4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A49E18((uint64_t)v4, 0);
      sub_A5F710(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 52 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 52;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 52 * v7;
    uint64_t v9 = v6 + 52 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

uint64_t sub_A5EA14(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v8 = *(char **)a1;
  if (a3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
    || (v10 = *(_DWORD *)&v8[8 * a3], unsigned int v9 = *(_DWORD *)&v8[8 * a3 + 4], v9 == v10))
  {
    sub_A5ECD8((char **)a1, a3, (long long *)a2);
    return 1;
  }
  else
  {
    char v15 = 0;
    uint64_t v16 = 52 * v9 - 52 * v10;
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v10 + 32);
    do
    {
      int v18 = *(v17 - 1);
      if (v18 != 0x7FFFFFFF)
      {
        int v19 = *(_DWORD *)(a2 + 28);
        if (v18 <= v19 && *v17 <= *(_DWORD *)(a2 + 32))
        {
          uint64_t v11 = 0;
          if ((v15 & 1) == 0) {
            return v11;
          }
          goto LABEL_20;
        }
        if (v19 <= v18 && *(_DWORD *)(a2 + 32) <= *v17)
        {
          *(v17 - 1) = 0x7FFFFFFF;
          char v15 = 1;
        }
      }
      v17 += 13;
      v16 -= 52;
    }
    while (v16);
    uint64_t v20 = sub_A5ECD8((char **)a1, a3, (long long *)a2);
    if (a5)
    {
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
    }
    if (a4)
    {
      int v21 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v21 + 1;
      *(_DWORD *)(v20 + 24) = v21;
      *(_DWORD *)(v20 + 20) = *(_DWORD *)(a2 + 24);
    }
    uint64_t v11 = 1;
    if (v15)
    {
LABEL_20:
      sub_A4A9B0((void **)a1, a3);
      return v11;
    }
  }
  return v11;
}

BOOL sub_A5EB80(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A5F2F0(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A5F2F0(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    int v22 = *(_DWORD *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    int v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) <= a6)
    {
      __int16 v23 = sub_A5F3E4((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A4A9B0(a1, a3);
    sub_A4A9B0(a1, a4);
  }
  return v13 != 0;
}

uint64_t sub_A5ECD8(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    uint64_t v41 = (uint64_t)&a1[3][52 * v11];
    long long v42 = *a3;
    long long v43 = a3[1];
    long long v44 = a3[2];
    *(_DWORD *)(v41 + 48) = *((_DWORD *)a3 + 12);
    *(_OWORD *)(v41 + 16) = v43;
    *(_OWORD *)(v41 + 32) = v44;
    *(_OWORD *)uint64_t v41 = v42;
    unint64_t v45 = *(unsigned int *)v9;
    *(void *)&a1[6][(v45 >> 3) & 0x1FFFFFF8] |= 1 << v45;
    return (uint64_t)&a1[3][52 * v45];
  }
  else
  {
    __int16 v13 = (unsigned int *)(v9 + 4);
    unint64_t v12 = *((unsigned int *)v9 + 1);
    uint64_t v14 = a1[3];
    unsigned int v15 = a1[4];
    uint64_t v16 = (uint64_t *)(a1 + 3);
    unint64_t v17 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 2);
    if (v17 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v18 = a1[1] - v6;
      unsigned int v19 = v12 - 991146299 * ((v15 - v14) >> 2) - v10;
      unint64_t v20 = 2 * (v12 - v10) + 2;
      if (v5 < v18 >> 3) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = v17;
      }
      if (v5 < v18 >> 3) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = 2;
      }
      unint64_t v53 = v21;
      if (v17 >= v22 + v17)
      {
        if (v17 > v22 + v17)
        {
          unsigned int v15 = &v14[52 * v22 + 52 * v17];
          a1[4] = v15;
        }
      }
      else
      {
        sub_A5F108((void **)a1 + 3, v22);
        uint64_t v14 = a1[3];
        unsigned int v15 = a1[4];
      }
      __int16 v23 = a1 + 6;
      sub_A3E96C((uint64_t)v23, 0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 2), 0);
      unsigned int v24 = *(_DWORD *)v9;
      unsigned int v25 = *(_DWORD *)v9;
      if (*v13 != *(_DWORD *)v9)
      {
        memmove((void *)(*v16 + 52 * v17), (const void *)(*v16 + 52 * v24), *v16 + 52 * *v13 - (*v16 + 52 * v24));
        unsigned int v25 = *(_DWORD *)v9;
        unsigned int v24 = *v13;
      }
      uint64_t v52 = v23;
      uint64_t v26 = *v23;
      uint64_t v27 = (void *)(v26 + 8 * (v25 >> 6));
      uint64_t v28 = v25 & 0x3F;
      unint64_t v29 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
      if (v29)
      {
        if ((v25 & 0x3F) != 0)
        {
          if ((64 - v28) >= v29) {
            uint64_t v30 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
          }
          else {
            uint64_t v30 = (64 - v28);
          }
          *v27++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v28 - v30)) & (-1 << v28));
          v29 -= v30;
        }
        if (v29 >= 0x40) {
          bzero(v27, 8 * (v29 >> 6));
        }
        if ((v29 & 0x3F) != 0) {
          v27[v29 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v29 & 0x3F));
        }
      }
      char v31 = (void *)(v26 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      unint64_t v32 = (v53 & 0x3F)
          - (v17 & 0x3F)
          + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      if (v32)
      {
        if ((v17 & 0x3F) != 0)
        {
          if (64 - (v17 & 0x3F) >= v32) {
            unint64_t v33 = (v53 & 0x3F)
          }
                - (v17 & 0x3F)
                + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
          else {
            unint64_t v33 = 64 - (v17 & 0x3F);
          }
          *v31++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v17 & 0x3Fu) - v33)) & (-1 << (v17 & 0x3F));
          v32 -= v33;
        }
        if (v32 >= 0x40) {
          memset(v31, 255, 8 * (v32 >> 6));
        }
        if ((v32 & 0x3F) != 0) {
          v31[v32 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v32 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v17;
      unsigned int *v13 = v53;
      uint64_t v34 = *v16 + 52 * v53;
      long long v35 = *a3;
      long long v36 = a3[1];
      long long v37 = a3[2];
      *(_DWORD *)(v34 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(v34 + 16) = v36;
      *(_OWORD *)(v34 + 32) = v37;
      *(_OWORD *)uint64_t v34 = v35;
      unint64_t v38 = *v13;
      *(void *)(*v52 + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
      uint64_t v39 = *v16;
      unsigned int *v13 = v38 + 1;
      return v39 + 52 * v38;
    }
    else
    {
      uint64_t v46 = &v14[52 * v12];
      long long v47 = *a3;
      long long v48 = a3[1];
      long long v49 = a3[2];
      *((_DWORD *)v46 + 12) = *((_DWORD *)a3 + 12);
      *((_OWORD *)v46 + 1) = v48;
      *((_OWORD *)v46 + 2) = v49;
      *(_OWORD *)uint64_t v46 = v47;
      unint64_t v50 = *v13;
      *(void *)&a1[6][(v50 >> 3) & 0x1FFFFFF8] |= 1 << v50;
      BOOL v51 = a1[3];
      unsigned int *v13 = v50 + 1;
      return (uint64_t)&v51[52 * v50];
    }
  }
}

void sub_A5F108(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - (unsigned char *)v4) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = (_OWORD *)((char *)v4 + 52 * a2);
      do
      {
        _OWORD *v4 = xmmword_20E2060;
        v4[1] = xmmword_20EB780;
        v4[2] = xmmword_20B93F0;
        *((_DWORD *)v4 + 12) = 0x7FFFFFFF;
        uint64_t v4 = (_OWORD *)((char *)v4 + 52);
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * (((char *)v4 - (unsigned char *)*a1) >> 2);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x4EC4EC4EC4EC4ECLL) {
      sub_2E00();
    }
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x276276276276276) {
      unint64_t v9 = 0x4EC4EC4EC4EC4ECLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x4EC4EC4EC4EC4ECLL) {
        sub_188D718();
      }
      unsigned int v10 = (char *)operator new(52 * v9);
    }
    else
    {
      unsigned int v10 = 0;
    }
    unint64_t v12 = &v10[52 * v6];
    __int16 v13 = &v12[52 * a2];
    uint64_t v14 = v12;
    do
    {
      *(_OWORD *)uint64_t v14 = xmmword_20E2060;
      *((_OWORD *)v14 + 1) = xmmword_20EB780;
      *((_OWORD *)v14 + 2) = xmmword_20B93F0;
      *((_DWORD *)v14 + 12) = 0x7FFFFFFF;
      v14 += 52;
    }
    while (v14 != v13);
    unsigned int v15 = &v10[52 * v9];
    unint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 52);
        long long v19 = *(_OWORD *)(v16 - 36);
        long long v20 = *(_OWORD *)(v16 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v16 - 1);
        *(_OWORD *)(v12 - 20) = v20;
        *(_OWORD *)(v12 - 36) = v19;
        *(_OWORD *)(v12 - 52) = v18;
        v12 -= 52;
        v16 -= 52;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
    {
      operator delete(v16);
    }
  }
}

uint64_t sub_A5F2F0(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (v4 = (int *)(*a1 + 8 * a2), int v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (0x4EC4EC4EC4EC4EC5 * ((a1[4] - v6) >> 2) <= v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + 52 * v5;
}

void sub_A5F3BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A5F3D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_A5F3E4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A5F5E0(a1, a2, a5) & 1) == 0)
  {
    unint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v13 = *(_DWORD *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v21 = 52 * v12 - 52 * v13;
        unint64_t v22 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v13 + 32);
        while (1)
        {
          int v23 = *(v22 - 1);
          if (v23 != 0x7FFFFFFF)
          {
            int v24 = *(_DWORD *)(a2 + 28);
            if (v23 <= v24 && *v22 <= *(_DWORD *)(a2 + 32))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            if (v24 <= v23 && *(_DWORD *)(a2 + 32) <= *v22)
            {
              *(v22 - 1) = 0x7FFFFFFF;
              unsigned __int8 v10 = 1;
            }
          }
          v22 += 13;
          v21 -= 52;
          if (!v21) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A5ECD8((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 40) = -1;
    *(_DWORD *)(v14 + 48) = 0x7FFFFFFF;
    if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v15 = (unsigned int *)(*(void *)a1 + 8 * a3);
      unsigned int v17 = *v15;
      unsigned int v16 = v15[1];
      if (v16 != *v15)
      {
        uint64_t v25 = *(void *)(a1 + 24) + 52 * v17;
        uint64_t v26 = 52 * v16 - 52 * v17;
        do
        {
          int v27 = *(_DWORD *)(v25 + 28);
          if (v27 != 0x7FFFFFFF && *(_DWORD *)(a2 + 28) <= v27 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v25 + 32)) {
            *(_DWORD *)(v25 + 28) = 0x7FFFFFFF;
          }
          v25 += 52;
          v26 -= 52;
        }
        while (v26);
      }
    }
    uint64_t v18 = sub_A5ECD8((char **)a1, a3, (long long *)a2);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    int v19 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v19 + 1;
    *(_DWORD *)(v18 + 24) = v19;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(a2 + 24);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A5F5E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        unint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      unint64_t v7 = *(char **)a1;
      unint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      unint64_t v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = v11 + 52 * v12;
  uint64_t v17 = v15 + 52 * *(unsigned int *)&v7[8 * v6 + 4];
  if (v16 == v17) {
    return 0;
  }
  while (1)
  {
    int v18 = *(_DWORD *)(v16 + 28);
    BOOL v19 = v18 != 0x7FFFFFFF && v18 <= *(_DWORD *)(a2 + 28);
    if (v19 && *(_DWORD *)(v16 + 32) <= *(_DWORD *)(a2 + 32)) {
      break;
    }
    v16 += 52;
    if (v16 == v17) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A5F710(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A5F2F0(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      int v29 = *(_DWORD *)(v12 + 48);
      long long v27 = v14;
      long long v28 = v13;
      long long v26 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        unsigned int v18 = *(_DWORD *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 52 * v17 - 52 * v18;
          int v24 = &a1[3][52 * v18 + 32];
          while (1)
          {
            int v25 = *((_DWORD *)v24 - 1);
            if (v25 != 0x7FFFFFFF)
            {
              if (v25 <= SHIDWORD(v27) && *(_DWORD *)v24 <= (int)v28)
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              if (SHIDWORD(v27) <= v25 && (int)v28 <= *(_DWORD *)v24)
              {
                *((_DWORD *)v24 - 1) = 0x7FFFFFFF;
                int v19 = 1;
              }
            }
            v24 += 52;
            v23 -= 52;
            if (!v23) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A5ECD8(a1, v11, &v26);
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A4A9B0((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A5F8BC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v257 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v226 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v257);
  uint64_t v227 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v255, *(void *)(v4 + 24), v5);
  __int16 v7 = v255;
  if ((unint64_t)v255 < v256)
  {
    unint64_t v8 = (void **)(v4 + 104);
    unint64_t v233 = (void **)(v4 + 104);
    uint64_t v234 = v4 + 360;
    int v223 = a2 + 2;
    int v224 = ~a2;
    unint64_t v222 = (uint64_t *)(v4 + 184);
    int v230 = a2 + 1;
    uint64_t v231 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v232 = *(unsigned int *)v7;
      sub_A49E18((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v243, *(void *)(v4 + 24), v227, v226, 0, 1);
      unint64_t v9 = v247;
      BOOL v10 = (unint64_t)v247 < v246 || (unint64_t)v247 >= v248;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v255 + 4;
      unsigned int v255 = v7;
      if ((unint64_t)v7 >= v256) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        long long v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        unint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v67 = *(void *)(v12 + 48);
          if ((unint64_t)(v67 - v36) >= 0x1555555555555555) {
            goto LABEL_322;
          }
        }
        else
        {
          uint64_t v64 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v64) & v28;
            uint64_t v65 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v65;
            unsigned int v34 = v65[1];
            ++v64;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v67 = *(void *)(v12 + 48);
          if ((unint64_t)(v67 - v36) >= 0x1555555555555555)
          {
LABEL_322:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v68 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v68[1])
            ? (BOOL v69 = *(_DWORD *)(v12 + 32) == *v68)
            : (BOOL v69 = 0),
              v69))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v63 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v67 + 1;
          uint64_t v63 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v60 = *(void *)(v12 + 40);
      uint64_t v59 = *(void *)(v12 + 48);
      if ((unint64_t)(v59 - v60) >= 0x1555555555555555) {
        goto LABEL_322;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v60
        && ((int v61 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v61[1])
          ? (BOOL v62 = *(_DWORD *)(v12 + 32) == *v61)
          : (BOOL v62 = 0),
            v62))
      {
        *(void *)(v12 + 40) = v60 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v59 + 1;
      }
      uint64_t v63 = 3 * v24;
LABEL_95:
      uint64_t v70 = 4 * v63;
      uint64_t v71 = v29 + v70;
      *(void *)uint64_t v71 = v11;
      *(_DWORD *)(v71 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v70;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v242 = v46;
        uint64_t result = sub_BD5C18(v234, v46, v11);
        if ((result & 1) == 0) {
          goto LABEL_120;
        }
        goto LABEL_51;
      }
LABEL_96:
      int v72 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v72 + 1;
      *(_DWORD *)(v45 + 8) = v72;
      uint64_t v74 = *(unint64_t **)(v12 + 96);
      unint64_t v73 = *(void *)(v12 + 104);
      if ((unint64_t)v74 < v73)
      {
        *uint64_t v74 = v11;
        uint64_t v75 = (uint64_t)(v74 + 1);
        goto LABEL_119;
      }
      unsigned int v76 = *(char **)(v12 + 88);
      uint64_t v77 = ((char *)v74 - v76) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v79 = v73 - (void)v76;
      if (v79 >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_325;
        }
        uint64_t v81 = (char *)operator new(8 * v80);
        unsigned int v82 = (unint64_t *)&v81[8 * v77];
        *unsigned int v82 = v11;
        uint64_t v75 = (uint64_t)(v82 + 1);
        if (v74 != (unint64_t *)v76)
        {
LABEL_107:
          unint64_t v83 = (char *)(v74 - 1) - v76;
          if (v83 < 0x58)
          {
            uint64_t v4 = v231;
            goto LABEL_116;
          }
          uint64_t v4 = v231;
          if ((unint64_t)(v76 - v81) < 0x20) {
            goto LABEL_331;
          }
          uint64_t v84 = (v83 >> 3) + 1;
          uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v86 = &v74[v85 / 0xFFFFFFFFFFFFFFF8];
          unsigned int v82 = (unint64_t *)((char *)v82 - v85);
          int v87 = &v81[8 * v77 - 16];
          uint64_t v88 = v74 - 2;
          uint64_t v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v90 = *(_OWORD *)v88;
            *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
            *(_OWORD *)int v87 = v90;
            v87 -= 32;
            v88 -= 4;
            v89 -= 4;
          }
          while (v89);
          uint64_t v74 = v86;
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_331:
            do
            {
LABEL_116:
              unint64_t v91 = *--v74;
              *--unsigned int v82 = v91;
            }
            while (v74 != (unint64_t *)v76);
          }
          uint64_t v74 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v82;
          *(void *)(v12 + 96) = v75;
          *(void *)(v12 + 104) = &v81[8 * v80];
          unint64_t v8 = v233;
          if (!v74) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v74);
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v81 = 0;
        unsigned int v82 = (unint64_t *)(8 * v77);
        *(void *)(8 * v77) = v11;
        uint64_t v75 = 8 * v77 + 8;
        if (v74 != (unint64_t *)v76) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v231;
      *(void *)(v12 + 88) = v82;
      *(void *)(v12 + 96) = v75;
      *(void *)(v12 + 104) = &v81[8 * v80];
      unint64_t v8 = v233;
      if (v74) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v75;
      unsigned int v242 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v234, v242, v11);
      if ((result & 1) == 0)
      {
LABEL_120:
        if (*(unsigned char *)(v4 + 21)) {
          goto LABEL_253;
        }
        uint64_t v92 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) != v92)
        {
          uint64_t v93 = *(void *)(v4 + 128);
          unsigned int v94 = *v92;
          goto LABEL_123;
        }
        sub_D2BFC(v8, 1uLL);
        uint64_t v92 = *(unsigned int **)(v4 + 104);
        uint64_t v93 = *(void *)(v4 + 128);
        unsigned int v94 = *v92;
        if (*(unsigned int **)(v4 + 112) == v92)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v92 = *(unsigned int **)(v4 + 104);
          uint64_t v95 = *(void *)(v4 + 128);
        }
        else
        {
LABEL_123:
          uint64_t v95 = v93;
        }
        uint64_t result = (uint64_t)sub_A4A05C(v8, 0, (char *)(v93 + 52 * v94), (unsigned char *)(v95 + 52 * v92[1]));
        goto LABEL_253;
      }
LABEL_51:
      long long v47 = *(unsigned int **)(v4 + 104);
      if (*(unsigned int **)(v4 + 112) != v47)
      {
        unsigned int v49 = *v47;
        unsigned int v48 = v47[1];
        if (v48 != *v47)
        {
          int v50 = v252;
          uint64_t v51 = v250;
          uint64_t v52 = v245;
          unint64_t v53 = ((unint64_t)v247 - v246) >> 4;
          uint64_t v54 = 52 * v48 - 52 * v49;
          uint64_t v55 = (int *)(*(void *)(v4 + 128) + 52 * v49 + 48);
          do
          {
            unsigned int v58 = *(v55 - 2);
            if (v50)
            {
              unsigned int v253 = *(v55 - 1);
              int v56 = *v55;
              int v254 = *v55;
            }
            else
            {
              int v56 = *(_DWORD *)(v51 + 12 * v58);
            }
            uint64_t v57 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
            *(v55 - 5) = *(unsigned int *)((char *)&v57[2 * (*(_DWORD *)(v51 + 12 * v58 + 4) + v53) + 1]
                                         + *v57)
                       + v56;
            v55 += 13;
            v54 -= 52;
          }
          while (v54);
          unint64_t v251 = (int *)(v51 + 12 * v58);
          sub_A60E1C((char *)v8, 0);
          if ((*((unsigned char *)v247 + 15) & 1) == 0
            || v249
            && (*(_DWORD *)(v249 + 4 * (((unint64_t)v247 - v246) >> 4)) & v232) != 0)
          {
            goto LABEL_225;
          }
          int v96 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v229 = v96 + v96 * *(_DWORD *)(v4 + 352);
            unint64_t v97 = v242;
            unint64_t v98 = *(unint64_t **)(v4 + 48);
            if (v98)
            {
LABEL_131:
              if (*v98 <= v97)
              {
                int v103 = 0x7FFFFFFF;
                uint64_t v104 = *(char **)(v4 + 104);
                uint64_t v105 = *(char **)(v4 + 112);
                if (v105 != v104) {
                  goto LABEL_151;
                }
              }
              else
              {
                uint64_t v99 = v4;
                unsigned int v100 = 0;
                unsigned int v101 = *(_DWORD *)(v99 + 100) + v224;
                unsigned int v102 = v101;
                while (v100 <= v101)
                {
                  int v103 = *(_DWORD *)sub_A3F53C(v98 + 2, v98[1] * v97 + v102);
                  v100 += 2;
                  v102 -= 2;
                  if (v103 != 0x7FFFFFFF)
                  {
                    uint64_t v4 = v231;
                    uint64_t v104 = *(char **)(v231 + 104);
                    uint64_t v105 = *(char **)(v231 + 112);
                    if (v105 == v104) {
                      goto LABEL_136;
                    }
LABEL_151:
                    int v117 = *((_DWORD *)v104 + 1);
                    int v118 = v117 - *(_DWORD *)v104;
                    if (v117 == *(_DWORD *)v104) {
                      goto LABEL_225;
                    }
                    if (v103 == 0x7FFFFFFF)
                    {
                      unsigned int v119 = 0;
                      while (*((_DWORD *)v104 + 1) - *(_DWORD *)v104 > v119)
                      {
                        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v4 + 136) - *(void *)(v4 + 128)) >> 2) <= (unint64_t)(v119 + *(_DWORD *)v104)) {
                          goto LABEL_327;
                        }
                        if (v118 == ++v119) {
                          goto LABEL_225;
                        }
                      }
LABEL_326:
                      long long v221 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      sub_188D9E0(v221, "key does not exist and cannot be added");
LABEL_328:
                    }
                    uint64_t v122 = 0;
                    unsigned int v123 = 0;
                    unint64_t v124 = (v96 + v96 * v97);
                    unsigned int i = v223 + v124;
                    unint64_t v225 = (v223 + v124);
                    unint64_t v228 = (v124 + 1);
                    while (2)
                    {
                      uint64_t v130 = *(char **)(v4 + 104);
                      unint64_t v131 = *(char **)(v4 + 112);
                      if (v131 == v130 || *((_DWORD *)v130 + 1) - *(_DWORD *)v130 <= v123) {
                        goto LABEL_326;
                      }
                      unint64_t v132 = *(_DWORD *)v130 + v123;
                      uint64_t v133 = *(void *)(v4 + 128);
                      if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v133) >> 2) <= v132)
                      {
LABEL_327:
                        long long v221 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        sub_188D9E0(v221, "index out of range");
                        goto LABEL_328;
                      }
                      uint64_t v134 = v133 + 52 * v132;
                      long long v136 = *(_OWORD *)(v134 + 16);
                      long long v135 = *(_OWORD *)(v134 + 32);
                      long long v137 = *(_OWORD *)v134;
                      int v261 = *(_DWORD *)(v134 + 48);
                      long long v259 = v136;
                      long long v260 = v135;
                      long long v258 = v137;
                      if (SHIDWORD(v136) <= v103)
                      {
                        if (v229 == -1) {
                          goto LABEL_179;
                        }
                        if (sub_A5F5E0((uint64_t)v233, (uint64_t)&v258, v229))
                        {
LABEL_198:
                          uint64_t v126 = 0;
LABEL_199:
                          uint64_t v129 = 0;
                        }
                        else
                        {
                          uint64_t v130 = *(char **)(v4 + 104);
                          unint64_t v131 = *(char **)(v4 + 112);
LABEL_179:
                          unint64_t v138 = (v131 - v130) >> 3;
                          if (v138 <= v124)
                          {
                            if (v228 <= v138)
                            {
                              if (v228 >= v138) {
                                goto LABEL_180;
                              }
                              uint64_t v139 = v122;
                              unint64_t v131 = &v130[8 * v228];
                              *(void *)(v4 + 112) = v131;
                            }
                            else
                            {
                              uint64_t v139 = v122;
                              sub_D2BFC(v233, v228 - v138);
                              uint64_t v130 = *(char **)(v4 + 104);
                              unint64_t v131 = *(char **)(v4 + 112);
                            }
                          }
                          else
                          {
LABEL_180:
                            uint64_t v139 = v122;
                          }
                          uint64_t v140 = *(void *)(v4 + 128);
                          unsigned int v141 = *(_DWORD *)&v130[8 * v124];
                          unint64_t v142 = (v131 - v130) >> 3;
                          if (v142 <= v124)
                          {
                            if (v228 <= v142)
                            {
                              if (v228 < v142) {
                                *(void *)(v4 + 112) = &v130[8 * v228];
                              }
                              goto LABEL_186;
                            }
                            sub_D2BFC(v233, v228 - v142);
                            uint64_t v130 = *(char **)(v4 + 104);
                            uint64_t v143 = *(void *)(v4 + 128);
                          }
                          else
                          {
LABEL_186:
                            uint64_t v143 = v140;
                          }
                          uint64_t v144 = v140 + 52 * v141;
                          uint64_t v145 = v143 + 52 * *(unsigned int *)&v130[8 * v124 + 4];
                          uint64_t v122 = v139;
                          for (unsigned int i = v223 + v124; v144 != v145; v144 += 52)
                          {
                            int v146 = *(_DWORD *)(v144 + 28);
                            BOOL v147 = v146 != 0x7FFFFFFF && v146 <= SHIDWORD(v259);
                            if (v147 && *(_DWORD *)(v144 + 32) <= (int)v260) {
                              goto LABEL_198;
                            }
                          }
                          if (v225 < (uint64_t)(*(void *)(v4 + 112) - (void)v130) >> 3)
                          {
                            unsigned int v149 = *(_DWORD *)&v130[8 * v225];
                            unsigned int v148 = *(_DWORD *)&v130[8 * v225 + 4];
                            if (v148 != v149)
                            {
                              uint64_t v126 = 0;
                              uint64_t v150 = 52 * v148 - 52 * v149;
                              uint64_t v151 = (_DWORD *)(v143 + 52 * v149 + 32);
                              while (1)
                              {
                                int v152 = *(v151 - 1);
                                if (v152 != 0x7FFFFFFF)
                                {
                                  if (v152 <= SHIDWORD(v259) && *v151 <= (int)v260) {
                                    goto LABEL_199;
                                  }
                                  if (SHIDWORD(v259) <= v152 && (int)v260 <= *v151)
                                  {
                                    *(v151 - 1) = 0x7FFFFFFF;
                                    uint64_t v126 = 1;
                                  }
                                }
                                v151 += 13;
                                v150 -= 52;
                                if (!v150) {
                                  goto LABEL_169;
                                }
                              }
                            }
                          }
                          uint64_t v126 = 0;
LABEL_169:
                          uint64_t v127 = sub_A5ECD8((char **)v233, v225, &v258);
                          *(void *)(v127 + 40) = -1;
                          *(_DWORD *)(v127 + 48) = 0x7FFFFFFF;
                          int v128 = *(_DWORD *)(v4 + 176);
                          *(_DWORD *)(v4 + 176) = v128 + 1;
                          *(_DWORD *)(v127 + 24) = v128;
                          *(_DWORD *)(v127 + 20) = DWORD2(v259);
                          *(void *)(v127 + 40) = -1;
                          *(_DWORD *)(v127 + 48) = 0x7FFFFFFF;
                          uint64_t v129 = 1;
                        }
                        v122 |= v129 | (v126 << 8);
                      }
                      if (++v123 == v118)
                      {
                        if ((v122 & 0xFF00) != 0) {
                          sub_A4A9B0(v233, i);
                        }
                        if ((_BYTE)v122) {
                          sub_A3EF14(v222, &v242);
                        }
LABEL_225:
                        uint64_t v105 = *(char **)(v4 + 112);
                        unint64_t v8 = v233;
                        unint64_t v106 = (char *)*v233;
                        uint64_t v107 = v105 - (unsigned char *)*v233;
                        if (v105 == *v233)
                        {
LABEL_226:
                          uint64_t v162 = v107 >> 3;
                          unint64_t v163 = 1 - (v107 >> 3);
                          uint64_t v164 = *(void *)(v4 + 120);
                          if (v163 <= (v164 - (uint64_t)v105) >> 3)
                          {
                            bzero(v105, 8 * v163);
                            v105 += 8 * v163;
                            *(void *)(v4 + 112) = v105;
                            unint64_t v106 = (char *)*v8;
                            uint64_t v108 = *(void *)(v4 + 128);
                            unsigned int v109 = *(_DWORD *)*v8;
                            if (*v8 == v105) {
                              goto LABEL_138;
                            }
LABEL_238:
                            uint64_t v160 = (_DWORD *)(v108 + 52 * v109);
                            uint64_t v161 = v108 + 52 * *((unsigned int *)v106 + 1);
                            if (v160 == (_DWORD *)v161) {
                              goto LABEL_245;
                            }
                            goto LABEL_239;
                          }
                          uint64_t v165 = v164 - (void)v106;
                          uint64_t v166 = v165 >> 2;
                          if ((unint64_t)(v165 >> 2) <= 1) {
                            uint64_t v166 = 1;
                          }
                          BOOL v10 = (unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8;
                          unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                          if (!v10) {
                            unint64_t v167 = v166;
                          }
                          if (!(v167 >> 61))
                          {
                            uint64_t v168 = 8 * v167;
                            unint64_t v169 = (char *)operator new(8 * v167);
                            uint64_t v170 = &v169[8 * v162];
                            bzero(v170, 8 * v163);
                            *(void *)(v4 + 104) = v170;
                            *(void *)(v4 + 112) = &v170[8 * v163];
                            *(void *)(v4 + 120) = &v169[v168];
                            if (v105)
                            {
                              operator delete(v105);
                              uint64_t v105 = *(char **)(v4 + 112);
                              unint64_t v106 = (char *)*v8;
                              uint64_t v108 = *(void *)(v4 + 128);
                              unsigned int v109 = *(_DWORD *)*v8;
                              if (*v8 != v105) {
                                goto LABEL_238;
                              }
                            }
                            else
                            {
                              uint64_t v105 = &v170[8 * v163];
                              unint64_t v106 = (char *)*v8;
                              uint64_t v108 = *(void *)(v4 + 128);
                              unsigned int v109 = *(_DWORD *)*v8;
                              if (*v8 != v105) {
                                goto LABEL_238;
                              }
                            }
LABEL_138:
                            int v110 = *(char **)(v4 + 120);
                            if (v110 != v105)
                            {
                              *(void *)uint64_t v105 = 0;
                              *(void *)(v4 + 112) = v105 + 8;
                              goto LABEL_219;
                            }
                            uint64_t v111 = 1;
                            uint64_t v112 = v110 - v106;
                            if ((unint64_t)(v112 >> 2) > 1) {
                              uint64_t v111 = v112 >> 2;
                            }
                            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v113 = v111;
                            }
                            if (!v113)
                            {
                              unint64_t v114 = 0;
                              uint64_t v115 = 0;
                              *(void *)&def_332C = 0;
                              uint64_t v116 = 8;
                              if (v105 == v106) {
                                goto LABEL_217;
                              }
                              goto LABEL_159;
                            }
                            if (!(v113 >> 61))
                            {
                              unint64_t v114 = (char *)operator new(8 * v113);
                              uint64_t v115 = v114;
                              *(void *)unint64_t v114 = 0;
                              uint64_t v116 = (uint64_t)(v114 + 8);
                              if (v105 == v106)
                              {
LABEL_217:
                                *(void *)(v4 + 104) = v115;
                                *(void *)(v4 + 112) = v116;
                                *(void *)(v4 + 120) = &v114[8 * v113];
                                if (v105) {
                                  operator delete(v105);
                                }
LABEL_219:
                                uint64_t v160 = (_DWORD *)(v108 + 52 * v109);
                                uint64_t v161 = *(void *)(v4 + 128) + 52 * *(unsigned int *)(*(void *)(v4 + 104) + 4);
                                if (v160 == (_DWORD *)v161)
                                {
LABEL_245:
                                  uint64_t result = (uint64_t)sub_A60E1C((char *)v8, 0);
                                  goto LABEL_246;
                                }
LABEL_239:
                                int v171 = v252;
                                uint64_t v172 = v250;
                                int v173 = v245;
                                unint64_t v174 = ((unint64_t)v247 - v246) >> 4;
                                do
                                {
                                  unsigned int v177 = v160[10];
                                  if (v171)
                                  {
                                    unsigned int v253 = v160[11];
                                    int v175 = v160[12];
                                    int v254 = v175;
                                  }
                                  else
                                  {
                                    int v175 = *(_DWORD *)(v172 + 12 * v177);
                                  }
                                  long long v176 = (unsigned int *)((char *)v173 + *(unsigned __int16 *)((char *)v173 - *v173 + 6));
                                  void v160[7] = *(unsigned int *)((char *)&v176[2
                                                                          * (*(_DWORD *)(v172 + 12 * v177 + 4)
                                                                                         + v174)
                                                                          + 2]
                                                            + *v176)
                                          + v175;
                                  v160 += 13;
                                }
                                while (v160 != (_DWORD *)v161);
                                unint64_t v251 = (int *)(v172 + 12 * v177);
                                goto LABEL_245;
                              }
LABEL_159:
                              unint64_t v120 = v105 - 8 - v106;
                              if (v120 < 0x58)
                              {
                                unint64_t v121 = v105;
                                goto LABEL_215;
                              }
                              if ((unint64_t)(v105 - v114) < 0x20)
                              {
                                unint64_t v121 = v105;
                                goto LABEL_215;
                              }
                              uint64_t v153 = (v120 >> 3) + 1;
                              uint64_t v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
                              unint64_t v121 = &v105[-v154];
                              v115 -= v154;
                              unint64_t v155 = v114 - 16;
                              unsigned int v156 = v105 - 16;
                              uint64_t v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v158 = *(_OWORD *)v156;
                                *((_OWORD *)v155 - 1) = *((_OWORD *)v156 - 1);
                                *(_OWORD *)unint64_t v155 = v158;
                                v155 -= 32;
                                v156 -= 32;
                                v157 -= 4;
                              }
                              while (v157);
                              if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                do
                                {
LABEL_215:
                                  uint64_t v159 = *((void *)v121 - 1);
                                  v121 -= 8;
                                  *((void *)v115 - 1) = v159;
                                  v115 -= 8;
                                }
                                while (v121 != v106);
                              }
                              uint64_t v105 = (char *)*v8;
                              goto LABEL_217;
                            }
                          }
LABEL_325:
                          sub_188D718();
                        }
LABEL_137:
                        uint64_t v108 = *(void *)(v4 + 128);
                        unsigned int v109 = *(_DWORD *)v106;
                        if (v106 != v105) {
                          goto LABEL_238;
                        }
                        goto LABEL_138;
                      }
                      continue;
                    }
                  }
                }
                int v103 = 0x7FFFFFFF;
                uint64_t v4 = v231;
                uint64_t v104 = *(char **)(v231 + 104);
                uint64_t v105 = *(char **)(v231 + 112);
                if (v105 != v104) {
                  goto LABEL_151;
                }
              }
LABEL_136:
              unint64_t v8 = v233;
              unint64_t v106 = (char *)*v233;
              uint64_t v107 = v105 - (unsigned char *)*v233;
              if (v105 == *v233) {
                goto LABEL_226;
              }
              goto LABEL_137;
            }
          }
          else
          {
            unsigned int v229 = -1;
            unint64_t v97 = v242;
            unint64_t v98 = *(unint64_t **)(v4 + 48);
            if (v98) {
              goto LABEL_131;
            }
          }
          int v103 = 2147483646;
          uint64_t v104 = *(char **)(v4 + 104);
          uint64_t v105 = *(char **)(v4 + 112);
          if (v105 != v104) {
            goto LABEL_151;
          }
          goto LABEL_136;
        }
      }
LABEL_246:
      if ((*((unsigned char *)v247 + 15) & 2) != 0)
      {
        if (v249)
        {
          if (*(_DWORD *)(v249 + 4 * (((unint64_t)v247 - v246) >> 4)) == v232) {
            goto LABEL_251;
          }
        }
        else if (!v232)
        {
LABEL_251:
          unint64_t v178 = v230 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v242;
          uint64_t v179 = *(void *)(v4 + 104);
          if (v178 >= (*(void *)(v4 + 112) - v179) >> 3) {
            goto LABEL_253;
          }
          unint64_t v181 = (_DWORD *)(v179 + 8 * v178);
          int v180 = v181[1];
          int v182 = v180 - *v181;
          if (v180 == *v181) {
            goto LABEL_253;
          }
          unsigned int v187 = 0;
          while (2)
          {
            uint64_t v188 = *(void *)(v4 + 104);
            if (v178 >= (*(void *)(v4 + 112) - v188) >> 3) {
              goto LABEL_326;
            }
            int v190 = (int *)(v188 + 8 * v178);
            int v189 = *v190;
            if (v190[1] - *v190 <= v187) {
              goto LABEL_326;
            }
            unint64_t v191 = v189 + v187;
            uint64_t v192 = *(void *)(v4 + 128);
            if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v192) >> 2) <= v191) {
              goto LABEL_327;
            }
            uint64_t v193 = v192 + 52 * v191;
            signed int v194 = *((_DWORD *)v247 + 2) + *(_DWORD *)(v193 + 28);
            if (v252)
            {
              uint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v243, v194, 1);
              if (result)
              {
LABEL_281:
                uint64_t v195 = *(void *)(v193 + 20);
                uint64_t v196 = *(void *)(v193 + 32);
                int v197 = v254;
                unint64_t v198 = 0xFFFFFFFF00000000;
                if (v252) {
                  unint64_t v198 = (unint64_t)v253 << 32;
                }
                unint64_t v199 = (-1431655765 * (((unint64_t)v251 - v250) >> 2)) | v198;
                if (!v252) {
                  int v197 = 0x7FFFFFFF;
                }
                uint64_t v200 = (unsigned int *)((char *)v245 + *(unsigned __int16 *)((char *)v245 - *v245 + 6));
                uint64_t v201 = (char *)v200 + *v200;
                char v202 = &v254;
                if (!v252) {
                  char v202 = v251;
                }
                int v203 = *(_DWORD *)&v201[8 * v251[1] + 8 + 8 * (((unint64_t)v247 - v246) >> 4)]
                     + *v202;
                LODWORD(v235) = ((unint64_t)v247 - v246) >> 4;
                *(void *)((char *)&v235 + 4) = v199;
                HIDWORD(v235) = v197;
                unsigned int v236 = v257;
                uint64_t v237 = v195;
                int v238 = v203;
                uint64_t v239 = v196;
                unint64_t v240 = v199;
                int v241 = v197;
                uint64_t v204 = *(unsigned int **)(v4 + 104);
                if (*(unsigned int **)(v4 + 112) == v204
                  || (unsigned int v206 = *v204, v205 = *(_DWORD *)(*(void *)(v4 + 104) + 4), v205 == v206))
                {
                  uint64_t result = sub_A5ECD8((char **)v8, 0, &v235);
                }
                else
                {
                  char v207 = 0;
                  uint64_t v208 = 52 * v205 - 52 * v206;
                  unint64_t v209 = (_DWORD *)(*(void *)(v4 + 128) + 52 * v206 + 32);
                  do
                  {
                    int v210 = *(v209 - 1);
                    if (v210 != 0x7FFFFFFF)
                    {
                      if (v210 <= v238 && *v209 <= (int)v239) {
                        goto LABEL_298;
                      }
                      if (v238 <= v210 && (int)v239 <= *v209)
                      {
                        *(v209 - 1) = 0x7FFFFFFF;
                        char v207 = 1;
                      }
                    }
                    v209 += 13;
                    v208 -= 52;
                  }
                  while (v208);
                  uint64_t result = sub_A5ECD8((char **)v8, 0, &v235);
LABEL_298:
                  if (v207)
                  {
                    uint64_t v211 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) != v211)
                    {
                      uint64_t v212 = *(void *)(v4 + 128);
                      unsigned int v213 = *v211;
LABEL_301:
                      uint64_t v214 = v212 + 52 * v213;
                      uint64_t v215 = v212 + 52 * v211[1];
                      if (v214 != v215) {
                        goto LABEL_305;
                      }
                      goto LABEL_311;
                    }
                    sub_D2BFC(v8, 1uLL);
                    uint64_t v211 = *(unsigned int **)(v4 + 104);
                    uint64_t v212 = *(void *)(v4 + 128);
                    unsigned int v213 = *v211;
                    if (*(unsigned int **)(v4 + 112) != v211) {
                      goto LABEL_301;
                    }
                    sub_D2BFC(v8, 1uLL);
                    uint64_t v211 = *(unsigned int **)(v4 + 104);
                    uint64_t v214 = v212 + 52 * v213;
                    uint64_t v215 = *(void *)(v4 + 128) + 52 * v211[1];
                    if (v214 == v215)
                    {
LABEL_311:
                      if (*(unsigned int **)(v4 + 112) == v211) {
                        goto LABEL_312;
                      }
                    }
                    else
                    {
LABEL_305:
                      while (*(_DWORD *)(v214 + 28) != 0x7FFFFFFF)
                      {
                        v214 += 52;
                        if (v214 == v215)
                        {
                          uint64_t v214 = v215;
                          if (*(unsigned int **)(v4 + 112) != v211) {
                            goto LABEL_313;
                          }
                          goto LABEL_312;
                        }
                      }
                      if (v214 == v215) {
                        goto LABEL_311;
                      }
                      uint64_t v216 = v214 + 52;
                      if (v214 + 52 == v215) {
                        goto LABEL_311;
                      }
                      do
                      {
                        if (*(_DWORD *)(v216 + 28) != 0x7FFFFFFF)
                        {
                          long long v217 = *(_OWORD *)v216;
                          long long v218 = *(_OWORD *)(v216 + 16);
                          long long v219 = *(_OWORD *)(v216 + 32);
                          *(_DWORD *)(v214 + 48) = *(_DWORD *)(v216 + 48);
                          *(_OWORD *)(v214 + 16) = v218;
                          *(_OWORD *)(v214 + 32) = v219;
                          *(_OWORD *)uint64_t v214 = v217;
                          v214 += 52;
                        }
                        v216 += 52;
                      }
                      while (v216 != v215);
                      uint64_t v211 = (unsigned int *)*v8;
                      if (*(void **)(v4 + 112) == *v8)
                      {
LABEL_312:
                        sub_D2BFC(v8, 1uLL);
                        uint64_t v211 = (unsigned int *)*v8;
                      }
                    }
LABEL_313:
                    uint64_t result = (uint64_t)sub_A4A05C(v8, 0, (char *)v214, (unsigned char *)(*(void *)(v4 + 128) + 52 * v211[1]));
                  }
                }
              }
            }
            else
            {
              uint64_t result = sub_A1F8B4((uint64_t)&v243, v194, 1);
              if (result) {
                goto LABEL_281;
              }
            }
            if (++v187 == v182) {
              break;
            }
            continue;
          }
        }
      }
LABEL_253:
      unint64_t v183 = v246;
      unint64_t v9 = v247 + 2;
      v247 += 2;
      if (*(unsigned char *)(v243 + 16) && !v244 && (unint64_t)v9 >= v246 && (unint64_t)v9 < v248)
      {
        do
        {
          unint64_t v184 = __ROR8__(*v9, 32);
          if (HIDWORD(v184) == 1 && (v184 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v243 + 4120));
          unint64_t v183 = v246;
          unint64_t v9 = v247;
          if (result) {
            break;
          }
          unint64_t v9 = v247 + 2;
          unsigned int v247 = v9;
        }
        while ((unint64_t)v9 >= v246 && (unint64_t)v9 < v248);
      }
      if ((unint64_t)v9 < v183 || (unint64_t)v9 >= v248) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      long long v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A60D7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60D90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60DA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60DB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60DCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60DE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60DF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A60E08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_A60E1C(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A5F2F0(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_31:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_31;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x4EC4EC4EC4EC4EC5 * ((*((void *)v2 + 4) - v13) >> 2) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 52 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 <= v16 && *((_DWORD *)result + 8) <= *(_DWORD *)(v13 + 52 * v12 + 32))
                {
                  *unint64_t v15 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 <= v18 && *(_DWORD *)(v13 + 52 * v12 + 32) <= *((_DWORD *)result + 8))
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_6;
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A4A9B0((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A61034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A61048(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A6105C(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  unsigned int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    unint64_t v9 = (char *)v14[2];
    BOOL v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      BOOL v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A61310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A61340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  unint64_t v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    BOOL v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    uint64_t v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A61688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A61728(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A62EC0(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      long long v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      unsigned int v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_A62EC0(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    int v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    uint64_t v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    unsigned int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        BOOL v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_A62EC0(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          uint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          unsigned int v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          uint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      uint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      uint64_t v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *uint64_t v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A62EC0(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_A62930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A62AA4(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A6317C(a1 + 1336, v42);
  sub_A6342C((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  uint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_A62E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A62EC0(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A63130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A6317C(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A65904(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A65AFC(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A65C18(a1, v6);
        sub_A65F48(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A674A0(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A68CDC(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A5E57C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A68400(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A6342C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unint64_t v297 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v334) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v295 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v334) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v296 = v5;
  if (v4 >= 2)
  {
    int v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v299 = _Q0;
    int v298 = 1;
    unint64_t v305 = a1;
    size_t v304 = (void **)(a1 + 13);
    while (1)
    {
      sub_A49E18((uint64_t)v7, 0);
      sub_A68B30(v7, v298 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      int v300 = (unsigned int *)(v14 + 52 * v11[1]);
      long long v301 = (unsigned int *)(v12 + 52 * v13);
      if (v301 != v300)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v334 = 0x7FFFFFFF;
          __int16 v335 = 0;
          unint64_t v336 = 0x8000000080000000;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          int v339 = 0x7FFFFFFF;
          __int16 v340 = 0;
          unint64_t v341 = 0x8000000080000000;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0xFFFFFFFF00000000;
          int v346 = -1;
          uint64_t v347 = 0;
          uint64_t v349 = 0;
          uint64_t v350 = 0;
          uint64_t v351 = 0;
          int v348 = 0x7FFFFFFF;
          int v352 = 100;
          int v353 = -1;
          long long v354 = v299;
          long long v355 = v299;
          long long v356 = v299;
          long long v357 = 0u;
          long long v358 = 0u;
          long long v359 = 0u;
          long long v360 = 0u;
          uint64_t v15 = a1[3];
          long long v361 = 0u;
          long long v362 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v301 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v301 != -1) {
            break;
          }
LABEL_397:
          sub_A29D50((uint64_t)__p);
          unint64_t v269 = *(void *)(v3 + 16);
          if (v269 >= *(void *)(v3 + 24))
          {
            uint64_t v270 = sub_A4D268(v297, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v270 = v269 + 296;
            *(void *)(v3 + 16) = v269 + 296;
          }
          int v7 = (char **)v304;
          *(void *)(v3 + 16) = v270;
          if (*((void *)&v361 + 1))
          {
            *(void *)&long long v362 = *((void *)&v361 + 1);
            operator delete(*((void **)&v361 + 1));
          }
          if ((void)v360)
          {
            *((void *)&v360 + 1) = v360;
            operator delete((void *)v360);
          }
          if (*((void *)&v358 + 1))
          {
            *(void *)&long long v359 = *((void *)&v358 + 1);
            operator delete(*((void **)&v358 + 1));
          }
          unint64_t v271 = (void **)v357;
          if ((void)v357)
          {
            uint64_t v272 = *((void *)&v357 + 1);
            long long v273 = (void *)v357;
            if (*((void *)&v357 + 1) != (void)v357)
            {
              do
              {
                uint64_t v275 = *(void **)(v272 - 40);
                if (v275)
                {
                  *(void *)(v272 - 32) = v275;
                  operator delete(v275);
                }
                uint64_t v276 = (void **)(v272 - 72);
                uint64_t v277 = *(void *)(v272 - 72);
                if (v277)
                {
                  uint64_t v278 = *(void *)(v272 - 64);
                  uint64_t v274 = *(void **)(v272 - 72);
                  if (v278 != v277)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v278 - 8))
                      {
                        uint64_t v279 = *(void **)(v278 - 48);
                        if (v279)
                        {
                          *(void *)(v278 - 40) = v279;
                          operator delete(v279);
                        }
                        uint64_t v280 = *(void **)(v278 - 80);
                        if (v280)
                        {
                          *(void *)(v278 - 72) = v280;
                          operator delete(v280);
                        }
                        unint64_t v281 = *(void **)(v278 - 104);
                        if (v281)
                        {
                          *(void *)(v278 - 96) = v281;
                          operator delete(v281);
                        }
                      }
                      v278 -= 168;
                    }
                    while (v278 != v277);
                    uint64_t v274 = *v276;
                  }
                  *(void *)(v272 - 64) = v277;
                  operator delete(v274);
                  a1 = v305;
                }
                v272 -= 72;
              }
              while (v276 != v271);
              long long v273 = (void *)v357;
            }
            *((void *)&v357 + 1) = v271;
            operator delete(v273);
          }
          if (SHIBYTE(v351) < 0) {
            operator delete(v349);
          }
          v301 += 13;
          if (v301 == v300) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v301;
        int v307 = v298;
        unsigned int v308 = *((_DWORD *)a1 + 88);
        while (2)
        {
          unint64_t v325 = 0;
          int v326 = 0;
          unint64_t v327 = 0;
          char v330 = 0;
          uint64_t v331 = 0;
          unint64_t v329 = 0;
          v332[0] = 1;
          *(void *)&v332[4] = 0x8000000080000000;
          *(_WORD *)&v332[12] = 0;
          v332[14] = 0;
          int v384 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v309 = xmmword_20E12E0;
          __int16 v310 = 0;
          unint64_t v311 = 0x8000000080000000;
          __int16 v312 = 0;
          *(_OWORD *)unint64_t v313 = xmmword_20EB6B0;
          *(void *)&v313[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v315 = 0u;
          long long v316 = 0u;
          long long v317 = 0u;
          int v314 = -1;
          int v318 = 0x7FFFFFFF;
          int v320 = 0;
          uint64_t v321 = 0;
          long long v319 = 0;
          char v322 = 1;
          unint64_t v323 = 0x8000000080000000;
          int v324 = 0;
          char v328 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)unint64_t v313 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v313[16] = v19[3];
          *(void *)&v313[8] = v22;
          int v314 = *v19;
          unsigned int v23 = v314;
          uint64_t v24 = a1[3];
          uint64_t v363 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
          sub_A1E9A0((uint64_t)v364, v24, v21, v23, 0, 0);
          *(void *)&long long v366 = *(void *)&v365[24] + 12 * *(unsigned int *)&v313[8];
          if (LOBYTE(v368[1])) {
            *(void **)((char *)&v368[1] + 4) = *(void **)&v313[12];
          }
          if (*(void *)&v365[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v365[16]
          }
                                  + 4 * ((*(void *)v365 - *(void *)&v364[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A56ED0((uint64_t)v364, &v363, v25);
          _CF = *(void *)v365 < *(void *)&v365[8] && *(void *)v365 >= *(void *)&v364[24];
          uint64_t v27 = (*(void *)v365 - *(void *)&v364[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          *(_DWORD *)&v313[20] = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v313;
          unsigned int v31 = v314;
          uint64_t v32 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v29, *(int *)&v313[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                unint64_t v290 = (void *)sub_2F404((uint64_t)exception, (long long *)v364);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                char v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                char v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          unint64_t v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            int v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            int v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          int v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              uint64_t v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v305;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            uint64_t v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_431;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((unsigned int v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v305;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          double v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v305;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v305;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              unsigned int v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_431:
                int v286 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v286, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            unsigned int v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_431;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_431;
          }
LABEL_117:
          if (v68
            && ((unint64_t v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v308 = *(_DWORD *)(v59 + 8);
          if (v308 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            uint64_t v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)uint64_t v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            int v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              unint64_t v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              unint64_t v98 = &v97[8 * v92];
              *(void *)unint64_t v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v305;
                  goto LABEL_155;
                }
                a1 = v305;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_442;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v105 = &v89[-v104];
                v98 -= v104;
                unint64_t v106 = &v97[8 * v92 - 16];
                uint64_t v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)unint64_t v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                uint64_t v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_442:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                uint64_t v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v308 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              unint64_t v97 = 0;
              unint64_t v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v305;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          uint64_t v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v313;
          unsigned int v113 = *(_DWORD *)&v313[20];
          uint64_t v114 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v111, *(int *)&v313[4]))
          {
            uint64_t v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              int v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                unint64_t v293 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                __int16 v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v364);
              }
              int v118 = (int *)((char *)v117 + *v117);
              unsigned int v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                unint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                unint64_t v121 = 0;
              }
              uint64_t v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              uint64_t v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          uint64_t v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            unint64_t v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            unint64_t v124 = 0;
          }
          DWORD1(v309) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v313;
          uint64_t v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v313[20];
          int v129 = *(_DWORD *)&v313[8];
          uint64_t v130 = HIDWORD(*(void *)v313);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v313[4]))
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              uint64_t v282 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v283 = (void *)sub_2F404((uint64_t)v282, (long long *)v364);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              uint64_t v287 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
              long long v288 = (void *)sub_2F404((uint64_t)v287, (long long *)v364);
            }
LABEL_180:
            uint64_t v133 = (char *)v131 + *v131;
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              long long v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              long long v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                uint64_t v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                uint64_t v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              unsigned int v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                unint64_t v142 = 0;
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                unint64_t v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  unint64_t v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                uint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)long long v364 = v146;
                  *(_DWORD *)&v364[8] = v147;
                  unsigned int v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  unsigned int v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    uint64_t v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    uint64_t v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v313[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v313[16];
                  }
                  *((void *)&v309 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v364, v152, v153);
                  __int16 v310 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v313;
                  uint64_t v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v314;
                  int v159 = *(_DWORD *)&v313[8];
                  uint64_t v160 = HIDWORD(*(void *)v313);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v313[4]))
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      uint64_t v284 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
                      uint64_t v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v364);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      unint64_t v291 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                      BOOL v292 = (void *)sub_2F404((uint64_t)v291, (long long *)v364);
                    }
LABEL_213:
                    unint64_t v163 = (char *)v161 + *v161;
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      uint64_t v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      unint64_t v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        unint64_t v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      int v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        uint64_t v172 = 0;
                        int v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        uint64_t v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          uint64_t v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        int v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)long long v364 = v176;
                          *(_DWORD *)&v364[8] = v177;
                          unint64_t v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          uint64_t v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            unint64_t v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            unint64_t v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v313[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v313[16];
                          }
                          unint64_t v311 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v364, v182, v183);
                          __int16 v312 = v184;
                          int v373 = -1;
                          sub_9F6FA0((uint64_t)v364, &v309);
                          int v373 = 0;
                          if (v384)
                          {
                            sub_9F6FA0((uint64_t)v374, (long long *)v364);
                            int v384 = v373;
                            if (!v373) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)long long v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[16] = *(_OWORD *)&v364[16];
                            v375[0] = *(_OWORD *)v365;
                            *(_OWORD *)((char *)v375 + 12) = *(_OWORD *)&v365[12];
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            *(_OWORD *)v376 = v366;
                            uint64_t v377 = v367;
                            uint64_t v367 = 0;
                            long long v366 = 0uLL;
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            long long v378 = *(_OWORD *)v368;
                            uint64_t v379 = v368[2];
                            memset(v368, 0, sizeof(v368));
                            int v380 = v369;
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            long long v381 = v370;
                            uint64_t v382 = v371;
                            uint64_t v371 = 0;
                            long long v370 = 0uLL;
                            long long v383 = v372;
                            if (!v373)
                            {
LABEL_250:
                              if ((void)v370)
                              {
                                *((void *)&v370 + 1) = v370;
                                operator delete((void *)v370);
                              }
                              if (v368[0])
                              {
                                v368[1] = v368[0];
                                operator delete(v368[0]);
                              }
                              if ((void)v366)
                              {
                                *((void *)&v366 + 1) = v366;
                                operator delete((void *)v366);
                              }
                            }
                          }
                          if (v319)
                          {
                            int v320 = v319;
                            operator delete(v319);
                          }
                          if (*((void *)&v316 + 1))
                          {
                            *(void *)&long long v317 = *((void *)&v316 + 1);
                            operator delete(*((void **)&v316 + 1));
                          }
                          if ((void)v315)
                          {
                            *((void *)&v315 + 1) = v315;
                            operator delete((void *)v315);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v326;
                            if ((unint64_t)v326 < v327) {
                              goto LABEL_264;
                            }
LABEL_282:
                            int v326 = (char *)sub_A4CBF4((uint64_t *)&v325, (uint64_t)v374);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              uint64_t v192 = (char *)v325;
                              uint64_t v193 = v326;
                              int64_t v194 = v326 - (unsigned char *)v325;
                              if (v326 != v325)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                uint64_t v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v305;
                                do
                                {
                                  unint64_t v199 = (long long *)&v196[v197];
                                  uint64_t v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    *unint64_t v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v328;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              int v203 = v329;
                              uint64_t v204 = v330 - (unsigned char *)v329;
                              if (v330 != v329)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                unsigned int v205 = (char *)operator new(v330 - (unsigned char *)v329);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                unsigned int v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v332;
                              *(void *)(v186 + 63) = *(void *)&v332[7];
                              *(void *)(v186 + 56) = v207;
                              unsigned int v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v357 + 1) = v187;
                              unint64_t v208 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 1;
                              unsigned int v209 = v19[5];
                              int v210 = (char *)a1[13];
                              uint64_t v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    uint64_t v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    int v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    unint64_t v225 = v304;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_432:
                                    }
                                      sub_188D718();
                                    long long v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      unint64_t v225 = v304;
                                      a1 = v305;
                                      int v224 = &v218[8 * v212 + v219];
                                      v305[13] = &v218[8 * v212];
                                      v305[14] = v224;
                                      v305[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        long long v221 = &v218[8 * v212];
                                        unint64_t v222 = v221;
                                        a1 = v305;
                                        goto LABEL_327;
                                      }
                                      long long v221 = &v218[8 * v212];
                                      unint64_t v222 = v221;
                                      a1 = v305;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_443;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      unint64_t v228 = &v211[-v227];
                                      unint64_t v222 = &v221[-v227];
                                      unsigned int v229 = &v218[8 * v212 - 16];
                                      int v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)unsigned int v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      uint64_t v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_443:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      uint64_t v211 = v210;
                                      unint64_t v225 = v304;
                                      int v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        int v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  int v210 = (char *)*v225;
                                  uint64_t v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v303 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_432;
                                  }
                                  char v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  char v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                unsigned int v247 = &v244[8 * v241];
                                size_t v302 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v305;
                                  v305[13] = v247;
                                  v305[14] = &v247[v302];
                                  v305[15] = &v244[8 * v303];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    uint64_t v249 = v211;
                                    uint64_t v250 = &v244[8 * v241];
                                    a1 = v305;
                                    size_t v251 = v302;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  uint64_t v249 = &v211[-v260];
                                  uint64_t v250 = &v247[-v260];
                                  int v261 = &v244[8 * v241 - 16];
                                  long long v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v305;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)int v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v302;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  uint64_t v211 = (char *)*v304;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v303];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              int v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 52 * v235);
                              unsigned int v253 = (unsigned int *)(v237 + 52 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 13;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v384)
                              {
                                if ((void)v381)
                                {
                                  *((void *)&v381 + 1) = v381;
                                  operator delete((void *)v381);
                                }
                                if ((void)v378)
                                {
                                  *((void *)&v378 + 1) = v378;
                                  operator delete((void *)v378);
                                }
                                if (v376[0])
                                {
                                  v376[1] = v376[0];
                                  operator delete(v376[0]);
                                }
                              }
                              if (v329)
                              {
                                char v330 = v329;
                                operator delete(v329);
                              }
                              int v254 = (char *)v325;
                              if (v325)
                              {
                                unsigned int v255 = v326;
                                char v20 = v325;
                                if (v326 != v325)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      unint64_t v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      unsigned int v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      long long v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  char v20 = v325;
                                }
                                int v326 = v254;
                                operator delete(v20);
                              }
                              --v307;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            unsigned int v187 = sub_A4CECC((void ***)&v357, (uint64_t)&v325);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v328 = 1;
                          unsigned int v188 = v19[7];
                          unsigned int v189 = v19[3];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          *(_DWORD *)long long v364 = 0;
                          *(_DWORD *)&v364[4] = v188;
                          *(void *)&v364[12] = v190;
                          *(void *)&v364[20] = v191;
                          *(_DWORD *)&v364[8] = v189;
                          int v373 = 1;
                          if (v384)
                          {
                            if (v384 == 1)
                            {
                              *(_OWORD *)long long v374 = *(_OWORD *)v364;
                              *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)long long v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                            int v384 = 1;
                          }
                          else
                          {
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            if (v373)
                            {
                              if (v373 == 1) {
                                goto LABEL_280;
                              }
                              int v384 = v373;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v374, (long long *)v364);
                              int v384 = v373;
                              if (!v373)
                              {
                                if ((void)v370)
                                {
                                  *((void *)&v370 + 1) = v370;
                                  operator delete((void *)v370);
                                }
                                if (v368[0])
                                {
                                  v368[1] = v368[0];
                                  operator delete(v368[0]);
                                }
                                if ((void)v366)
                                {
                                  *((void *)&v366 + 1) = v366;
                                  operator delete((void *)v366);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v308 = *v19;
                          uint64_t v185 = (uint64_t)v326;
                          if ((unint64_t)v326 >= v327) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v384;
                          if (v384 == 1)
                          {
                            long long v223 = *(_OWORD *)v374;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v374[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            int v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v384) {
                              sub_9F6FA0(v185, (long long *)v374);
                            }
                            int v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    unint64_t v163 = sub_A10B80(v162 + 24, v156, 0);
                    uint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            uint64_t v133 = sub_A10B80(v132 + 24, v126, 0);
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v298 == v296) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v295, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A6535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      BOOL v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        unsigned int v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      unsigned int v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      unint64_t v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        unsigned int v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unsigned int v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A65904(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A65AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A65AFC(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v16 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v16);
    int v17 = v5;
    sub_A49E18(a1 + 104, 0);
    long long v9 = xmmword_20E2060;
    uint64_t v10 = -1;
    int v11 = v3;
    int v12 = v2;
    int v13 = 0;
    uint64_t v14 = -1;
    int v15 = 0x7FFFFFFF;
    sub_A68540(a1 + 104, (uint64_t)&v9, 0, 0, 1);
    int v6 = *(_DWORD *)(a1 + 96);
    unsigned int v7 = v6 + v6 * v5;
    unsigned int v8 = v7 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A686AC((void **)(a1 + 104), 0, v8, v7, v6 + v6 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
    }
    else if (!sub_A686AC((void **)(a1 + 104), 0, v8, v7, 0xFFFFFFFF, 0x80000000))
    {
      return;
    }
    sub_A3EF14((uint64_t *)(a1 + 184), &v17);
  }
}

double sub_A65C18(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (char **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      unsigned int v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      uint64_t v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A49E18((uint64_t)v5, 0);
      sub_A68B30(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
LABEL_19:
        uint64_t v18 = (unsigned int *)(v16 + 52 * v17);
        uint64_t v19 = v16 + 52 * v15[1];
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC((void **)v5, 1uLL);
      int v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      unsigned int v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC((void **)v5, 1uLL);
      uint64_t v18 = (unsigned int *)(v16 + 52 * v17);
      uint64_t v19 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        *uint64_t v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 13;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A686AC((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    uint64_t v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A65F48(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v263);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v243 = *(unsigned int **)(a1 + 216);
  if (v4 != v243)
  {
    int v251 = a2 + 1;
    int v244 = a2 + 2;
    int v247 = ~a2;
    int v5 = (void **)(a1 + 104);
    size_t v245 = (uint64_t *)(a1 + 232);
    unint64_t v242 = (void **)(a1 + 256);
    unint64_t v256 = (void **)(a1 + 104);
    while (1)
    {
      size_t v246 = v4;
      unsigned int v6 = *v4;
      BOOL v7 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v257, *(void *)(a1 + 24), *v7);
      uint64_t v8 = v258;
      uint64_t v9 = &v259;
      if (v262) {
        uint64_t v9 = v261;
      }
      if ((unint64_t)v258 < *v9) {
        break;
      }
LABEL_3:
      uint64_t v4 = v246 + 1;
      if (v246 + 1 == v243) {
        goto LABEL_313;
      }
    }
    unsigned int v252 = v6 + 1;
    unsigned int v253 = v6;
    while (1)
    {
      unint64_t v13 = __ROR8__(*v8, 32);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 56) - 1;
      unint64_t v16 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
      unint64_t v17 = v16 ^ (v16 >> 33);
      uint64_t v18 = *(void *)(v14 + 80);
      int v20 = *(_DWORD *)(v14 + 64);
      int v19 = *(_DWORD *)(v14 + 68);
      uint64_t v21 = v17 & v15;
      int v22 = (unsigned int *)(v18 + 12 * (v17 & v15));
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (v19 == v23 && v20 == v24) {
        goto LABEL_56;
      }
      if (*(void *)(v14 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v23, v24) != v13)
      {
        uint64_t v21 = (v21 + v44) & v15;
        unint64_t v45 = (unsigned int *)(v18 + 12 * v21);
        unsigned int v24 = *v45;
        unsigned int v23 = v45[1];
        ++v44;
        if (v19 == v23 && v20 == v24) {
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v21 != -1)
      {
        uint64_t v47 = v18 + 12 * v21;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      uint64_t v26 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_31:
        uint64_t v30 = *(void *)(v14 + 56) - 1;
        uint64_t v31 = *(void *)(v14 + 80);
        int v33 = *(_DWORD *)(v14 + 64);
        int v32 = *(_DWORD *)(v14 + 68);
        uint64_t v34 = v30 & v17;
        uint64_t v35 = (unsigned int *)(v31 + 12 * (v30 & v17));
        unsigned int v37 = *v35;
        unsigned int v36 = v35[1];
        uint64_t v38 = *(void *)(v14 + 40);
        if (v32 == v36 && v33 == v37) {
          goto LABEL_80;
        }
        if (v38)
        {
          uint64_t v40 = -1;
          uint64_t v41 = 1;
          do
          {
            if (*(_DWORD *)(v14 + 36) == v36 && *(_DWORD *)(v14 + 32) == v37)
            {
              if (v40 == -1) {
                uint64_t v40 = v34;
              }
            }
            else if (__PAIR64__(v36, v37) == v13)
            {
              goto LABEL_74;
            }
            uint64_t v34 = (v34 + v41) & v30;
            int v42 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v42;
            unsigned int v36 = v42[1];
            ++v41;
          }
          while (v32 != v36 || v33 != v37);
          if (v40 == -1) {
LABEL_80:
          }
            uint64_t v40 = v34;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555) {
            goto LABEL_322;
          }
        }
        else
        {
          uint64_t v54 = 1;
          while (__PAIR64__(v36, v37) != v13)
          {
            uint64_t v34 = (v34 + v54) & v30;
            uint64_t v55 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v55;
            unsigned int v36 = v55[1];
            ++v54;
            if (v32 == v36 && v33 == v37)
            {
              uint64_t v38 = 0;
              goto LABEL_80;
            }
          }
LABEL_74:
          if (v34 != -1)
          {
            uint64_t v47 = v31 + 12 * v34;
            unsigned int v48 = *(_DWORD *)(v47 + 8);
            if (v48 != -1) {
              goto LABEL_109;
            }
            goto LABEL_90;
          }
          uint64_t v40 = -1;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555)
          {
LABEL_322:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v38
          && ((unsigned int v58 = (_DWORD *)(v31 + 12 * v40), *(_DWORD *)(v14 + 36) == v58[1])
            ? (BOOL v59 = *(_DWORD *)(v14 + 32) == *v58)
            : (BOOL v59 = 0),
              v59))
        {
          *(void *)(v14 + 40) = v38 - 1;
          uint64_t v53 = 3 * v40;
        }
        else
        {
          *(void *)(v14 + 48) = v57 + 1;
          uint64_t v53 = 3 * v40;
        }
        goto LABEL_89;
      }
LABEL_57:
      uint64_t v50 = *(void *)(v14 + 40);
      uint64_t v49 = *(void *)(v14 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_322;
      }
      uint64_t v31 = *(void *)(v14 + 80);
      if (v50
        && ((int v51 = (_DWORD *)(v31 + 12 * v26), *(_DWORD *)(v14 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v14 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v14 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v14 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v26;
LABEL_89:
      uint64_t v60 = 4 * v53;
      uint64_t v61 = v31 + v60;
      *(void *)uint64_t v61 = v13;
      *(_DWORD *)(v61 + 8) = -1;
      uint64_t v47 = *(void *)(v14 + 80) + v60;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 != -1) {
        goto LABEL_109;
      }
LABEL_90:
      int v62 = *(_DWORD *)(v14 + 112);
      *(_DWORD *)(v14 + 112) = v62 + 1;
      *(_DWORD *)(v47 + 8) = v62;
      uint64_t v64 = *(char **)(v14 + 96);
      unint64_t v63 = *(void *)(v14 + 104);
      if ((unint64_t)v64 >= v63)
      {
        unsigned int v66 = (char **)(v14 + 88);
        unsigned int v67 = *(char **)(v14 + 88);
        uint64_t v68 = (v64 - v67) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v70 = v63 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v254 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_321;
          }
          uint64_t v71 = (char *)operator new(8 * v69);
          unsigned int v66 = (char **)(v14 + 88);
          unsigned int v72 = &v71[8 * v68];
          *(void *)unsigned int v72 = v13;
          uint64_t v65 = (uint64_t)(v72 + 8);
          if (v64 != v67) {
            goto LABEL_100;
          }
LABEL_163:
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v254];
          if (!v64) {
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v68);
          *(void *)(8 * v68) = v13;
          uint64_t v65 = 8 * v68 + 8;
          if (v64 == v67) {
            goto LABEL_163;
          }
LABEL_100:
          unint64_t v73 = v64 - 8 - v67;
          if (v73 < 0x58) {
            goto LABEL_327;
          }
          if ((unint64_t)(v67 - v71) < 0x20) {
            goto LABEL_327;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v76 = &v64[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v68 - 16];
          uint64_t v78 = (long long *)(v64 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v64 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_327:
            do
            {
              uint64_t v81 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v64 != v67);
          }
          uint64_t v64 = *v66;
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v254];
          if (!v64) {
            goto LABEL_108;
          }
        }
        operator delete(v64);
        goto LABEL_108;
      }
      *(void *)uint64_t v64 = v13;
      uint64_t v65 = (uint64_t)(v64 + 8);
LABEL_108:
      *(void *)(v14 + 96) = v65;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      int v5 = (void **)(a1 + 104);
LABEL_109:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v255 = v48;
      if (v253 == v48) {
        goto LABEL_261;
      }
      unint64_t v83 = *(char **)(a1 + 104);
      uint64_t v82 = *(unsigned char **)(a1 + 112);
      uint64_t v84 = v82 - v83;
      if (v82 != v83)
      {
        uint64_t v85 = *(void *)(a1 + 128);
        unsigned int v86 = *(_DWORD *)v83;
LABEL_124:
        uint64_t v99 = v85;
        goto LABEL_140;
      }
      uint64_t v88 = v84 >> 3;
      unint64_t v89 = 1 - (v84 >> 3);
      uint64_t v90 = *(void *)(a1 + 120);
      if (v89 <= (v90 - (uint64_t)v82) >> 3)
      {
        bzero(*(void **)(a1 + 112), 8 * v89);
        unint64_t v98 = &v82[8 * v89];
        *(void *)(a1 + 112) = v98;
        unint64_t v83 = (char *)*v5;
        uint64_t v85 = *(void *)(a1 + 128);
        unsigned int v86 = *(_DWORD *)*v5;
        if (*v5 != v98) {
          goto LABEL_124;
        }
      }
      else
      {
        uint64_t v91 = v90 - (void)v83;
        uint64_t v92 = v91 >> 2;
        if ((unint64_t)(v91 >> 2) <= 1) {
          uint64_t v92 = 1;
        }
        BOOL v237 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v237) {
          unint64_t v93 = v92;
        }
        if (v93 >> 61) {
          goto LABEL_321;
        }
        uint64_t v94 = 8 * v93;
        unint64_t v95 = (char *)operator new(8 * v93);
        unint64_t v96 = &v95[8 * v88];
        bzero(v96, 8 * v89);
        unint64_t v97 = &v96[8 * v89];
        *(void *)(a1 + 104) = v96;
        *(void *)(a1 + 112) = v97;
        *(void *)(a1 + 120) = &v95[v94];
        if (v82)
        {
          operator delete(v82);
          unint64_t v98 = *(char **)(a1 + 112);
          unint64_t v83 = (char *)*v5;
          uint64_t v85 = *(void *)(a1 + 128);
          unsigned int v86 = *(_DWORD *)*v5;
          if (*v5 != v98) {
            goto LABEL_124;
          }
        }
        else
        {
          unint64_t v98 = &v96[8 * v89];
          unint64_t v83 = (char *)*v5;
          uint64_t v85 = *(void *)(a1 + 128);
          unsigned int v86 = *(_DWORD *)*v5;
          if (*v5 != v97) {
            goto LABEL_124;
          }
        }
      }
      int v87 = *(char **)(a1 + 120);
      if (v87 != v98)
      {
        *(void *)unint64_t v98 = 0;
        *(void *)(a1 + 112) = v98 + 8;
        goto LABEL_139;
      }
      uint64_t v100 = 1;
      uint64_t v101 = v87 - v83;
      if ((unint64_t)(v101 >> 2) > 1) {
        uint64_t v100 = v101 >> 2;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 61) {
          goto LABEL_321;
        }
        uint64_t v103 = (char *)operator new(8 * v102);
        uint64_t v104 = v103;
        *(void *)uint64_t v103 = 0;
        uint64_t v105 = (uint64_t)(v103 + 8);
        if (v98 == v83)
        {
LABEL_187:
          int v5 = (void **)(a1 + 104);
          *(void *)(a1 + 104) = v104;
          *(void *)(a1 + 112) = v105;
          *(void *)(a1 + 120) = &v103[8 * v102];
          if (!v98) {
            goto LABEL_139;
          }
LABEL_138:
          operator delete(v98);
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        *(void *)&def_332C = 0;
        uint64_t v105 = 8;
        if (v98 == v83) {
          goto LABEL_187;
        }
      }
      unint64_t v106 = v98 - 8 - v83;
      if (v106 < 0x58 || (unint64_t)(v98 - v103) < 0x20)
      {
        uint64_t v107 = v98;
        int v5 = (void **)(a1 + 104);
        do
        {
LABEL_136:
          uint64_t v108 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v104 - 1) = v108;
          v104 -= 8;
        }
        while (v107 != v83);
        goto LABEL_137;
      }
      uint64_t v207 = (v106 >> 3) + 1;
      uint64_t v208 = 8 * (v207 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v107 = &v98[-v208];
      v104 -= v208;
      unsigned int v209 = v103 - 16;
      int v210 = v98 - 16;
      uint64_t v211 = v207 & 0x3FFFFFFFFFFFFFFCLL;
      int v5 = (void **)(a1 + 104);
      do
      {
        long long v212 = *(_OWORD *)v210;
        *((_OWORD *)v209 - 1) = *((_OWORD *)v210 - 1);
        *(_OWORD *)unsigned int v209 = v212;
        v209 -= 32;
        v210 -= 32;
        v211 -= 4;
      }
      while (v211);
      if (v207 != (v207 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_136;
      }
LABEL_137:
      unint64_t v98 = (char *)*v5;
      *(void *)(a1 + 104) = v104;
      *(void *)(a1 + 112) = v105;
      *(void *)(a1 + 120) = &v103[8 * v102];
      if (v98) {
        goto LABEL_138;
      }
LABEL_139:
      unint64_t v83 = *(char **)(a1 + 104);
      uint64_t v99 = *(void *)(a1 + 128);
LABEL_140:
      sub_A4A05C(v5, 0, (char *)(v85 + 52 * v86), (unsigned char *)(v99 + 52 * *((unsigned int *)v83 + 1)));
      unint64_t v109 = v251 + *(_DWORD *)(a1 + 96) * v252;
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      if (v109 >= ((char *)v111 - (char *)v110) >> 3) {
        goto LABEL_165;
      }
      unsigned int v112 = v110[2 * v109];
      unsigned int v113 = v110[2 * v109 + 1];
      unsigned int v114 = v113 - v112;
      if (v113 == v112) {
        goto LABEL_165;
      }
      int v115 = 0;
      unsigned int v116 = 0;
      do
      {
        unsigned int v119 = *(unsigned int **)(a1 + 104);
        if (v109 >= (uint64_t)(*(void *)(a1 + 112) - (void)v119) >> 3) {
          goto LABEL_317;
        }
        unsigned int v120 = v119[2 * v109];
        if (v119[2 * v109 + 1] - v120 <= v116) {
          goto LABEL_317;
        }
        unint64_t v121 = v120 + v116;
        uint64_t v122 = *(void *)(a1 + 128);
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v122) >> 2) <= v121)
        {
LABEL_318:
          uint64_t v240 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v240, "index out of range");
          goto LABEL_319;
        }
        uint64_t v123 = v122 + 52 * v121;
        long long v124 = *(_OWORD *)v123;
        long long v125 = *(_OWORD *)(v123 + 16);
        long long v126 = *(_OWORD *)(v123 + 32);
        int v267 = *(_DWORD *)(v123 + 48);
        long long v266 = v126;
        long long v264 = v124;
        long long v265 = v125;
        unsigned int v127 = *v119;
        unsigned int v128 = v119[1];
        if (v128 != *v119)
        {
          int v117 = 0;
          uint64_t v129 = 52 * v128 - 52 * v127;
          uint64_t v130 = (_DWORD *)(v122 + 52 * v127 + 32);
          while (1)
          {
            int v131 = *(v130 - 1);
            if (v131 != 0x7FFFFFFF)
            {
              if (v131 >= SHIDWORD(v265) && *v130 <= (int)v266) {
                goto LABEL_145;
              }
              if (SHIDWORD(v265) >= v131 && (int)v266 <= *v130)
              {
                *(v130 - 1) = 0x7FFFFFFF;
                int v117 = 1;
              }
            }
            v130 += 13;
            v129 -= 52;
            if (!v129) {
              goto LABEL_144;
            }
          }
        }
        int v117 = 0;
LABEL_144:
        uint64_t v118 = sub_A5ECD8((char **)v5, 0, &v264);
        *(void *)(v118 + 40) = -1;
        *(_DWORD *)(v118 + 48) = 0x7FFFFFFF;
LABEL_145:
        v115 |= v117;
        ++v116;
      }
      while (v116 != v114);
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      if (!v115)
      {
LABEL_165:
        uint64_t v135 = (char *)v111 - (char *)v110;
        if (v111 == v110) {
          goto LABEL_206;
        }
LABEL_166:
        uint64_t v136 = *(void *)(a1 + 128);
        unsigned int v137 = *v110;
        if (v110 != v111) {
          goto LABEL_220;
        }
LABEL_167:
        uint64_t v138 = *(unsigned int **)(a1 + 120);
        if (v138 != v111)
        {
          *(void *)uint64_t v111 = 0;
          *(void *)(a1 + 112) = v111 + 2;
LABEL_183:
          uint64_t v110 = *(unsigned int **)(a1 + 104);
          uint64_t v148 = *(void *)(a1 + 128);
          goto LABEL_221;
        }
        uint64_t v139 = 1;
        uint64_t v140 = (char *)v138 - (char *)v110;
        if ((unint64_t)(v140 >> 2) > 1) {
          uint64_t v139 = v140 >> 2;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141)
        {
          if (v141 >> 61) {
LABEL_321:
          }
            sub_188D718();
          unint64_t v142 = (char *)operator new(8 * v141);
          uint64_t v143 = v142;
          *(void *)unint64_t v142 = 0;
          uint64_t v144 = (uint64_t)(v142 + 8);
          if (v111 != v110)
          {
LABEL_177:
            unint64_t v145 = (char *)(v111 - 2) - (char *)v110;
            if (v145 < 0x58 || (unint64_t)((char *)v111 - v142) < 0x20)
            {
              uint64_t v146 = v111;
              int v5 = (void **)(a1 + 104);
              goto LABEL_180;
            }
            uint64_t v213 = (v145 >> 3) + 1;
            uint64_t v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v146 = &v111[v214 / 0xFFFFFFFFFFFFFFFCLL];
            v143 -= v214;
            uint64_t v215 = v142 - 16;
            uint64_t v216 = v111 - 4;
            uint64_t v217 = v213 & 0x3FFFFFFFFFFFFFFCLL;
            int v5 = (void **)(a1 + 104);
            do
            {
              long long v218 = *(_OWORD *)v216;
              *((_OWORD *)v215 - 1) = *((_OWORD *)v216 - 1);
              *(_OWORD *)uint64_t v215 = v218;
              v215 -= 32;
              v216 -= 8;
              v217 -= 4;
            }
            while (v217);
            if (v213 != (v213 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_180:
                uint64_t v147 = *((void *)v146 - 1);
                v146 -= 2;
                *((void *)v143 - 1) = v147;
                v143 -= 8;
              }
              while (v146 != v110);
            }
            uint64_t v111 = (unsigned int *)*v5;
            *(void *)(a1 + 104) = v143;
            *(void *)(a1 + 112) = v144;
            *(void *)(a1 + 120) = &v142[8 * v141];
            if (!v111) {
              goto LABEL_183;
            }
LABEL_182:
            operator delete(v111);
            goto LABEL_183;
          }
        }
        else
        {
          unint64_t v142 = 0;
          uint64_t v143 = 0;
          *(void *)&def_332C = 0;
          uint64_t v144 = 8;
          if (v111 != v110) {
            goto LABEL_177;
          }
        }
        int v5 = (void **)(a1 + 104);
        *(void *)(a1 + 104) = v143;
        *(void *)(a1 + 112) = v144;
        *(void *)(a1 + 120) = &v142[8 * v141];
        if (!v111) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }
      if (v111 != v110)
      {
        uint64_t v132 = *(void *)(a1 + 128);
        unsigned int v133 = *v110;
        goto LABEL_161;
      }
      sub_D2BFC(v5, 1uLL);
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v132 = *(void *)(a1 + 128);
      unsigned int v133 = *v110;
      if (*(unsigned int **)(a1 + 112) == v110)
      {
        sub_D2BFC(v5, 1uLL);
        uint64_t v110 = *(unsigned int **)(a1 + 104);
        uint64_t v134 = *(void *)(a1 + 128);
      }
      else
      {
LABEL_161:
        uint64_t v134 = v132;
      }
      unsigned int v149 = (long long *)(v132 + 52 * v133);
      uint64_t v150 = (long long *)(v134 + 52 * v110[1]);
      if (v149 == v150)
      {
LABEL_203:
        if (*(unsigned int **)(a1 + 112) == v110) {
          goto LABEL_204;
        }
      }
      else
      {
        while (*((_DWORD *)v149 + 7) != 0x7FFFFFFF)
        {
          unsigned int v149 = (long long *)((char *)v149 + 52);
          if (v149 == v150)
          {
            unsigned int v149 = v150;
            if (*(unsigned int **)(a1 + 112) != v110) {
              goto LABEL_205;
            }
            goto LABEL_204;
          }
        }
        if (v149 == v150) {
          goto LABEL_203;
        }
        uint64_t v151 = (long long *)((char *)v149 + 52);
        if ((long long *)((char *)v149 + 52) == v150) {
          goto LABEL_203;
        }
        do
        {
          if (*((_DWORD *)v151 + 7) != 0x7FFFFFFF)
          {
            long long v161 = *v151;
            long long v162 = v151[1];
            long long v163 = v151[2];
            *((_DWORD *)v149 + 12) = *((_DWORD *)v151 + 12);
            v149[1] = v162;
            v149[2] = v163;
            long long *v149 = v161;
            unsigned int v149 = (long long *)((char *)v149 + 52);
          }
          uint64_t v151 = (long long *)((char *)v151 + 52);
        }
        while (v151 != v150);
        uint64_t v110 = (unsigned int *)*v5;
        if (*(void **)(a1 + 112) == *v5)
        {
LABEL_204:
          sub_D2BFC(v5, 1uLL);
          uint64_t v110 = (unsigned int *)*v5;
        }
      }
LABEL_205:
      sub_A4A05C(v5, 0, (char *)v149, (unsigned char *)(*(void *)(a1 + 128) + 52 * v110[1]));
      uint64_t v110 = *(unsigned int **)(a1 + 104);
      uint64_t v111 = *(unsigned int **)(a1 + 112);
      uint64_t v135 = (char *)v111 - (char *)v110;
      if (v111 != v110) {
        goto LABEL_166;
      }
LABEL_206:
      uint64_t v152 = v135 >> 3;
      unint64_t v153 = 1 - (v135 >> 3);
      uint64_t v154 = *(void *)(a1 + 120);
      if (v153 <= (v154 - (uint64_t)v111) >> 3)
      {
        bzero(v110, 8 * v153);
        uint64_t v111 = &v110[2 * v153];
        *(void *)(a1 + 112) = v111;
        uint64_t v110 = (unsigned int *)*v5;
        uint64_t v136 = *(void *)(a1 + 128);
        unsigned int v137 = *(_DWORD *)*v5;
        if (*v5 != v111) {
          goto LABEL_220;
        }
        goto LABEL_167;
      }
      uint64_t v155 = v154 - (void)v110;
      uint64_t v156 = v155 >> 2;
      if ((unint64_t)(v155 >> 2) <= 1) {
        uint64_t v156 = 1;
      }
      BOOL v237 = (unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v237) {
        unint64_t v157 = v156;
      }
      if (v157 >> 61) {
        goto LABEL_321;
      }
      uint64_t v158 = 8 * v157;
      int v159 = (char *)operator new(8 * v157);
      uint64_t v160 = &v159[8 * v152];
      bzero(v160, 8 * v153);
      uint64_t v111 = (unsigned int *)&v160[8 * v153];
      *(void *)(a1 + 104) = v160;
      *(void *)(a1 + 112) = v111;
      *(void *)(a1 + 120) = &v159[v158];
      if (v110)
      {
        operator delete(v110);
        uint64_t v111 = *(unsigned int **)(a1 + 112);
      }
      uint64_t v110 = (unsigned int *)*v5;
      uint64_t v136 = *(void *)(a1 + 128);
      unsigned int v137 = *(_DWORD *)*v5;
      if (*v5 == v111) {
        goto LABEL_167;
      }
LABEL_220:
      uint64_t v148 = v136;
LABEL_221:
      uint64_t v164 = (unsigned int *)(v136 + 52 * v137);
      uint64_t v165 = (unsigned int *)(v148 + 52 * v110[1]);
      if (v164 != v165)
      {
        uint64_t v166 = v258;
        do
        {
          *uint64_t v164 = v253;
          unsigned int v167 = v164[7];
          unsigned int v168 = v164[8];
          v164[3] = v167;
          v164[4] = -1;
          int v169 = *((_DWORD *)v166 + 2);
          int v170 = v169 / -10;
          int v171 = v169 / 10;
          int v172 = v169 % 10;
          if (v169 < 0) {
            char v173 = -5;
          }
          else {
            char v173 = 5;
          }
          int v174 = (char)(v173 + v172);
          v164[7] = v170 + v167 + (((-103 * v174) >> 15) & 1) + ((-103 * v174) >> 10);
          v164[8] = v168 + v171 + (((103 * v174) >> 15) & 1) + ((103 * v174) >> 10);
          v164 += 13;
        }
        while (v164 != v165);
      }
      int v175 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        int v176 = v175 + v175 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v177 = v255;
        unint64_t v178 = *(unint64_t **)(a1 + 48);
        if (v178) {
          goto LABEL_229;
        }
LABEL_236:
        int v182 = 0x80000000;
        int v183 = *(_DWORD **)(a1 + 104);
        if (*(_DWORD **)(a1 + 112) == v183)
        {
LABEL_261:
          unint64_t v11 = (unint64_t)v259;
          uint64_t v8 = (void *)((char *)v258 + 12);
          long long v258 = v8;
          if (v8 != v259) {
            goto LABEL_262;
          }
LABEL_295:
          uint64_t v8 = v260;
          unint64_t v12 = v261[0];
          long long v258 = v260;
          int v10 = 1;
          unsigned __int8 v262 = 1;
          if (*(unsigned char *)(v257 + 16)) {
            goto LABEL_296;
          }
          goto LABEL_10;
        }
      }
      else
      {
        int v176 = -1;
        unint64_t v177 = v255;
        unint64_t v178 = *(unint64_t **)(a1 + 48);
        if (!v178) {
          goto LABEL_236;
        }
LABEL_229:
        if (*v178 <= v177)
        {
          int v182 = 0x7FFFFFFF;
          int v183 = *(_DWORD **)(a1 + 104);
          if (*(_DWORD **)(a1 + 112) == v183) {
            goto LABEL_261;
          }
        }
        else
        {
          int v248 = v176;
          unsigned int v179 = 0;
          unsigned int v180 = *(_DWORD *)(a1 + 100) + v247;
          unsigned int v181 = v180;
          do
          {
            if (v179 > v180)
            {
              int v182 = 0x7FFFFFFF;
              int v5 = (void **)(a1 + 104);
              int v176 = v248;
              int v183 = *(_DWORD **)(a1 + 104);
              if (*(_DWORD **)(a1 + 112) == v183) {
                goto LABEL_261;
              }
              goto LABEL_241;
            }
            int v182 = *(_DWORD *)sub_A3F53C(v178 + 2, v178[1] * v177 + v181);
            v179 += 2;
            v181 -= 2;
          }
          while (v182 == 0x7FFFFFFF);
          int v5 = (void **)(a1 + 104);
          int v176 = v248;
          int v183 = *(_DWORD **)(a1 + 104);
          if (*(_DWORD **)(a1 + 112) == v183) {
            goto LABEL_261;
          }
        }
      }
LABEL_241:
      int v184 = v183[1];
      int v185 = v184 - *v183;
      if (v184 == *v183) {
        goto LABEL_261;
      }
      if (v182 == 0x7FFFFFFF)
      {
        unsigned int v186 = 0;
        while (v183[1] - *v183 > v186)
        {
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) <= (unint64_t)(v186 + *v183)) {
            goto LABEL_318;
          }
          if (v185 == ++v186) {
            goto LABEL_261;
          }
        }
LABEL_317:
        uint64_t v240 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_188D9E0(v240, "key does not exist and cannot be added");
LABEL_319:
      }
      __int16 v187 = 0;
      unsigned int v188 = 0;
      unint64_t v249 = v255 + 1;
      unsigned int v189 = v244 + v175 * v249;
      unsigned int v190 = v175 * v249 + 1;
      unsigned int v191 = v176;
      do
      {
        uint64_t v192 = *(int **)(a1 + 104);
        if (*(int **)(a1 + 112) == v192) {
          goto LABEL_317;
        }
        int v193 = *v192;
        if (*(_DWORD *)(*(void *)(a1 + 104) + 4) - v193 <= v188) {
          goto LABEL_317;
        }
        unint64_t v194 = v188 + v193;
        uint64_t v195 = *(void *)(a1 + 128);
        if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 136) - v195) >> 2) <= v194) {
          goto LABEL_318;
        }
        uint64_t v196 = v195 + 52 * v194;
        long long v198 = *(_OWORD *)(v196 + 16);
        long long v197 = *(_OWORD *)(v196 + 32);
        long long v199 = *(_OWORD *)v196;
        int v267 = *(_DWORD *)(v196 + 48);
        long long v266 = v197;
        long long v264 = v199;
        long long v265 = v198;
        if (SHIDWORD(v198) >= v182)
        {
          __int16 v200 = sub_A68804((uint64_t)v256, (uint64_t)&v264, v189, v190, v191);
          __int16 v187 = v200 | v187 | (v200 | v187) & 0xFF00;
        }
        ++v188;
      }
      while (v185 != v188);
      int v5 = (void **)(a1 + 104);
      if ((v187 & 0xFF00) != 0)
      {
        sub_A4A9B0(v256, v189);
        sub_A4A9B0(v256, v190);
      }
      if (!(_BYTE)v187) {
        goto LABEL_261;
      }
      if (*(void *)(a1 + 240) <= v177) {
        sub_A3E96C((uint64_t)v245, v249, 0);
      }
      uint64_t v201 = *v245;
      unint64_t v202 = v177 >> 6;
      uint64_t v203 = 1 << v177;
      if ((*(void *)(*v245 + 8 * (v177 >> 6)) & (1 << v177)) != 0) {
        goto LABEL_261;
      }
      unsigned int v205 = *(char **)(a1 + 264);
      unint64_t v204 = *(void *)(a1 + 272);
      if ((unint64_t)v205 >= v204)
      {
        size_t v219 = (char *)*v242;
        uint64_t v220 = v205 - (unsigned char *)*v242;
        uint64_t v221 = v220 >> 2;
        unint64_t v222 = (v220 >> 2) + 1;
        if (v222 >> 62) {
          sub_2E00();
        }
        uint64_t v223 = v204 - (void)v219;
        if (v223 >> 1 > v222) {
          unint64_t v222 = v223 >> 1;
        }
        if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v222 = 0x3FFFFFFFFFFFFFFFLL;
        }
        *(void *)uint64_t v250 = v222;
        if (v222)
        {
          if (v222 >> 62) {
            goto LABEL_321;
          }
          int v224 = operator new(4 * v222);
          unint64_t v225 = (unsigned int *)&v224[4 * v221];
          *unint64_t v225 = v255;
          uint64_t v206 = (uint64_t)(v225 + 1);
          if (v205 == v219) {
            goto LABEL_292;
          }
LABEL_286:
          unint64_t v226 = v205 - 4 - v219;
          if (v226 < 0x2C) {
            goto LABEL_328;
          }
          if ((unint64_t)(v205 - &v224[v220]) < 0x20) {
            goto LABEL_328;
          }
          uint64_t v227 = (v226 >> 2) + 1;
          uint64_t v228 = 4 * (v227 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v229 = &v205[-v228];
          unint64_t v225 = (unsigned int *)((char *)v225 - v228);
          int v230 = &v224[4 * v221 - 16];
          uint64_t v231 = v205 - 16;
          uint64_t v232 = v227 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v233 = *(_OWORD *)v231;
            *(v230 - 1) = *((_OWORD *)v231 - 1);
            *int v230 = v233;
            v230 -= 2;
            v231 -= 32;
            v232 -= 8;
          }
          while (v232);
          unsigned int v205 = v229;
          if (v227 != (v227 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_328:
            do
            {
              unsigned int v234 = *((_DWORD *)v205 - 1);
              v205 -= 4;
              *--unint64_t v225 = v234;
            }
            while (v205 != v219);
          }
        }
        else
        {
          int v224 = 0;
          unint64_t v225 = (unsigned int *)(4 * v221);
          *(_DWORD *)(4 * v221) = v255;
          uint64_t v206 = 4 * v221 + 4;
          if (v205 != v219) {
            goto LABEL_286;
          }
        }
LABEL_292:
        *(void *)(a1 + 256) = v225;
        *(void *)(a1 + 264) = v206;
        *(void *)(a1 + 272) = &v224[4 * *(void *)v250];
        if (v219)
        {
          operator delete(v219);
          uint64_t v201 = *v245;
        }
        goto LABEL_294;
      }
      *(_DWORD *)unsigned int v205 = v255;
      uint64_t v206 = (uint64_t)(v205 + 4);
LABEL_294:
      int v5 = (void **)(a1 + 104);
      *(void *)(a1 + 264) = v206;
      *(void *)(v201 + 8 * v202) |= v203;
      unint64_t v11 = (unint64_t)v259;
      uint64_t v8 = (void *)((char *)v258 + 12);
      long long v258 = v8;
      if (v8 == v259) {
        goto LABEL_295;
      }
LABEL_262:
      int v10 = v262;
      unint64_t v12 = v261[0];
      if (*(unsigned char *)(v257 + 16))
      {
LABEL_296:
        if (v10) {
          unint64_t v235 = v12;
        }
        else {
          unint64_t v235 = v11;
        }
        if ((unint64_t)v8 < v235)
        {
          while (1)
          {
            unint64_t v236 = __ROR8__(*v8, 32);
            BOOL v237 = HIDWORD(v236) != 1 || (v236 + 3) >= 2;
            if (!v237) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v257 + 4120)))
            {
              LOBYTE(v10) = v262;
              uint64_t v8 = v258;
              unint64_t v11 = (unint64_t)v259;
              break;
            }
            unint64_t v11 = (unint64_t)v259;
            uint64_t v8 = (void *)((char *)v258 + 12);
            long long v258 = v8;
            if (v8 == v259)
            {
              uint64_t v8 = v260;
              long long v258 = v260;
              LOBYTE(v10) = 1;
              unsigned __int8 v262 = 1;
              if ((unint64_t)v260 >= v261[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v10) = v262;
              unint64_t v238 = &v259;
              if (v262) {
                unint64_t v238 = v261;
              }
              if ((unint64_t)v8 >= *v238) {
                break;
              }
            }
          }
          unint64_t v12 = v261[0];
        }
      }
LABEL_10:
      if ((_BYTE)v10) {
        unint64_t v11 = v12;
      }
      if ((unint64_t)v8 >= v11) {
        goto LABEL_3;
      }
    }
    uint64_t v26 = -1;
    uint64_t v27 = 1;
    do
    {
      if (*(_DWORD *)(v14 + 36) == v23 && *(_DWORD *)(v14 + 32) == v24)
      {
        if (v26 == -1) {
          uint64_t v26 = v21;
        }
      }
      else if (__PAIR64__(v23, v24) == v13)
      {
        goto LABEL_53;
      }
      uint64_t v21 = (v21 + v27) & v15;
      int v28 = (unsigned int *)(v18 + 12 * v21);
      unsigned int v24 = *v28;
      unsigned int v23 = v28[1];
      ++v27;
    }
    while (v19 != v23 || v20 != v24);
    if (v26 != -1)
    {
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v26 = v21;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_313:
  double result = sub_72688((uint64_t)v263) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A67400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A67414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A67428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6743C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A67450(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A67464(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A67478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6748C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A674A0(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unsigned int v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  unint64_t v204 = (void **)(a1 + 328);
  int v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    uint64_t v211 = v8;
    uint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    int v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          uint64_t v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      unint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          unint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          unint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)unint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      int v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          __int16 v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            uint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              uint64_t v101 = v200;
              goto LABEL_135;
            }
            uint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            unint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        unint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        unint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        unsigned int v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          int v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unsigned int v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        unsigned int v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              unsigned int v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                int v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            unsigned int v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            int v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              int v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                int v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unsigned int v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unsigned int v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          int v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        unsigned int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          uint64_t v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          char v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unsigned int v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        uint64_t v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        uint64_t v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              uint64_t v122 = &v202[4 * v112];
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                uint64_t v122 = &v202[4 * v112];
                long long v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
              uint64_t v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              uint64_t v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              unint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *unint64_t v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              uint64_t v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          long long v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          long long v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        uint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            long long v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            long long v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            uint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)uint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A683D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A683EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A68400(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A49E18((uint64_t)v4, 0);
      sub_A68B30(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 52 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 52 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 52;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 52 * v7;
    uint64_t v9 = v6 + 52 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

uint64_t sub_A68540(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v8 = *(char **)a1;
  if (a3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
    || (v10 = *(_DWORD *)&v8[8 * a3], unsigned int v9 = *(_DWORD *)&v8[8 * a3 + 4], v9 == v10))
  {
    sub_A5ECD8((char **)a1, a3, (long long *)a2);
    return 1;
  }
  else
  {
    char v15 = 0;
    uint64_t v16 = 52 * v9 - 52 * v10;
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v10 + 32);
    do
    {
      int v18 = *(v17 - 1);
      if (v18 != 0x7FFFFFFF)
      {
        int v19 = *(_DWORD *)(a2 + 28);
        if (v18 >= v19 && *v17 <= *(_DWORD *)(a2 + 32))
        {
          uint64_t v11 = 0;
          if ((v15 & 1) == 0) {
            return v11;
          }
          goto LABEL_20;
        }
        if (v19 >= v18 && *(_DWORD *)(a2 + 32) <= *v17)
        {
          *(v17 - 1) = 0x7FFFFFFF;
          char v15 = 1;
        }
      }
      v17 += 13;
      v16 -= 52;
    }
    while (v16);
    uint64_t v20 = sub_A5ECD8((char **)a1, a3, (long long *)a2);
    if (a5)
    {
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
    }
    if (a4)
    {
      int v21 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = v21 + 1;
      *(_DWORD *)(v20 + 24) = v21;
      *(_DWORD *)(v20 + 20) = *(_DWORD *)(a2 + 24);
    }
    uint64_t v11 = 1;
    if (v15)
    {
LABEL_20:
      sub_A4A9B0((void **)a1, a3);
      return v11;
    }
  }
  return v11;
}

BOOL sub_A686AC(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A5F2F0(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A5F2F0(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    int v22 = *(_DWORD *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    int v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) >= a6)
    {
      __int16 v23 = sub_A68804((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A4A9B0(a1, a3);
    sub_A4A9B0(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_A68804(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A68A00(a1, a2, a5) & 1) == 0)
  {
    uint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v13 = *(_DWORD *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v21 = 52 * v12 - 52 * v13;
        int v22 = (_DWORD *)(*(void *)(a1 + 24) + 52 * v13 + 32);
        while (1)
        {
          int v23 = *(v22 - 1);
          if (v23 != 0x7FFFFFFF)
          {
            int v24 = *(_DWORD *)(a2 + 28);
            if (v23 >= v24 && *v22 <= *(_DWORD *)(a2 + 32))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            if (v24 >= v23 && *(_DWORD *)(a2 + 32) <= *v22)
            {
              *(v22 - 1) = 0x7FFFFFFF;
              unsigned __int8 v10 = 1;
            }
          }
          v22 += 13;
          v21 -= 52;
          if (!v21) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A5ECD8((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 40) = -1;
    *(_DWORD *)(v14 + 48) = 0x7FFFFFFF;
    if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      unsigned int v15 = (unsigned int *)(*(void *)a1 + 8 * a3);
      unsigned int v17 = *v15;
      unsigned int v16 = v15[1];
      if (v16 != *v15)
      {
        uint64_t v25 = *(void *)(a1 + 24) + 52 * v17;
        uint64_t v26 = 52 * v16 - 52 * v17;
        do
        {
          int v27 = *(_DWORD *)(v25 + 28);
          if (v27 != 0x7FFFFFFF && *(_DWORD *)(a2 + 28) >= v27 && *(_DWORD *)(a2 + 32) <= *(_DWORD *)(v25 + 32)) {
            *(_DWORD *)(v25 + 28) = 0x7FFFFFFF;
          }
          v25 += 52;
          v26 -= 52;
        }
        while (v26);
      }
    }
    uint64_t v18 = sub_A5ECD8((char **)a1, a3, (long long *)a2);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    int v19 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v19 + 1;
    *(_DWORD *)(v18 + 24) = v19;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(a2 + 24);
    *(void *)(v18 + 40) = -1;
    *(_DWORD *)(v18 + 48) = 0x7FFFFFFF;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A68A00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      int v7 = *(char **)a1;
      uint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      int v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = v11 + 52 * v12;
  uint64_t v17 = v15 + 52 * *(unsigned int *)&v7[8 * v6 + 4];
  if (v16 == v17) {
    return 0;
  }
  while (1)
  {
    int v18 = *(_DWORD *)(v16 + 28);
    BOOL v19 = v18 == 0x7FFFFFFF || v18 < *(_DWORD *)(a2 + 28);
    if (!v19 && *(_DWORD *)(v16 + 32) <= *(_DWORD *)(a2 + 32)) {
      break;
    }
    v16 += 52;
    if (v16 == v17) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A68B30(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A5F2F0(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      int v29 = *(_DWORD *)(v12 + 48);
      long long v27 = v14;
      long long v28 = v13;
      long long v26 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        unsigned int v18 = *(_DWORD *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 52 * v17 - 52 * v18;
          int v24 = &a1[3][52 * v18 + 32];
          while (1)
          {
            int v25 = *((_DWORD *)v24 - 1);
            if (v25 != 0x7FFFFFFF)
            {
              if (v25 >= SHIDWORD(v27) && *(_DWORD *)v24 <= (int)v28)
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              if (SHIDWORD(v27) >= v25 && (int)v28 <= *(_DWORD *)v24)
              {
                *((_DWORD *)v24 - 1) = 0x7FFFFFFF;
                int v19 = 1;
              }
            }
            v24 += 52;
            v23 -= 52;
            if (!v23) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A5ECD8(a1, v11, &v26);
      *(void *)(v20 + 40) = -1;
      *(_DWORD *)(v20 + 48) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A4A9B0((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A68CDC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v258 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v227 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v258);
  uint64_t v228 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v256, *(void *)(v4 + 24), v5);
  __int16 v7 = v256;
  if ((unint64_t)v256 < v257)
  {
    uint64_t v8 = (void **)(v4 + 104);
    unsigned int v234 = (void **)(v4 + 104);
    uint64_t v235 = v4 + 360;
    int v224 = a2 + 2;
    int v225 = ~a2;
    uint64_t v223 = (uint64_t *)(v4 + 184);
    int v231 = a2 + 1;
    uint64_t v232 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v233 = *(unsigned int *)v7;
      sub_A49E18((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v244, *(void *)(v4 + 24), v228, v227, 0, 1);
      unint64_t v9 = v248;
      BOOL v10 = (unint64_t)v248 < v247 || (unint64_t)v248 >= v249;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v256 + 4;
      unint64_t v256 = v7;
      if ((unint64_t)v7 >= v257) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_321;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            unsigned int v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_321:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_321;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v243 = v46;
        uint64_t result = sub_BD5C18(v235, v46, v11);
        if ((result & 1) == 0) {
          goto LABEL_120;
        }
        goto LABEL_51;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        unint64_t *v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_119;
      }
      BOOL v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
          goto LABEL_324;
        }
        unsigned int v82 = (char *)operator new(8 * v81);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 != (unint64_t *)v77)
        {
LABEL_107:
          unint64_t v84 = (char *)(v75 - 1) - v77;
          if (v84 < 0x58)
          {
            uint64_t v4 = v232;
            goto LABEL_116;
          }
          uint64_t v4 = v232;
          if ((unint64_t)(v77 - v82) < 0x20) {
            goto LABEL_330;
          }
          uint64_t v85 = (v84 >> 3) + 1;
          uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          int v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v83 = (unint64_t *)((char *)v83 - v86);
          uint64_t v88 = &v82[8 * v78 - 16];
          unint64_t v89 = v75 - 2;
          uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)uint64_t v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          uint64_t v75 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_330:
            do
            {
LABEL_116:
              unint64_t v92 = *--v75;
              *--unint64_t v83 = v92;
            }
            while (v75 != (unint64_t *)v77);
          }
          uint64_t v75 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          uint64_t v8 = v234;
          if (!v75) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v75);
          goto LABEL_119;
        }
      }
      else
      {
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 != (unint64_t *)v77) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v232;
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      uint64_t v8 = v234;
      if (v75) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v76;
      unsigned int v243 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v235, v243, v11);
      if ((result & 1) == 0)
      {
LABEL_120:
        if (*(unsigned char *)(v4 + 21)) {
          goto LABEL_252;
        }
        uint64_t v93 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) != v93)
        {
          uint64_t v94 = *(void *)(v4 + 128);
          unsigned int v95 = *v93;
          goto LABEL_123;
        }
        sub_D2BFC(v8, 1uLL);
        uint64_t v93 = *(unsigned int **)(v4 + 104);
        uint64_t v94 = *(void *)(v4 + 128);
        unsigned int v95 = *v93;
        if (*(unsigned int **)(v4 + 112) == v93)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v93 = *(unsigned int **)(v4 + 104);
          uint64_t v96 = *(void *)(v4 + 128);
        }
        else
        {
LABEL_123:
          uint64_t v96 = v94;
        }
        uint64_t result = (uint64_t)sub_A4A05C(v8, 0, (char *)(v94 + 52 * v95), (unsigned char *)(v96 + 52 * v93[1]));
        goto LABEL_252;
      }
LABEL_51:
      unsigned int v47 = *(unsigned int **)(v4 + 104);
      if (*(unsigned int **)(v4 + 112) != v47)
      {
        unsigned int v49 = *v47;
        unsigned int v48 = v47[1];
        if (v48 != *v47)
        {
          int v50 = v253;
          uint64_t v51 = v251;
          uint64_t v52 = v248;
          uint64_t v53 = v246;
          unint64_t v54 = ((unint64_t)v248 - v247) >> 4;
          uint64_t v55 = 52 * v48 - 52 * v49;
          uint64_t v56 = (int *)(*(void *)(v4 + 128) + 52 * v49 + 48);
          do
          {
            unsigned int v59 = *(v56 - 2);
            if (v50)
            {
              unsigned int v254 = *(v56 - 1);
              int v57 = *v56;
              int v255 = *v56;
            }
            else
            {
              int v57 = *(_DWORD *)(v51 + 12 * v59);
            }
            BOOL v58 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
            *(v56 - 5) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v54) + 2]
                                         + *v58)
                       + v57
                       - *((_DWORD *)v52 + 2);
            v56 += 13;
            v55 -= 52;
          }
          while (v55);
          unsigned int v252 = (int *)(v51 + 12 * v59);
          sub_A6A238((char *)v8, 0);
          if ((*((unsigned char *)v248 + 15) & 2) == 0
            || v250
            && (*(_DWORD *)(v250 + 4 * (((unint64_t)v248 - v247) >> 4)) & v233) != 0)
          {
            goto LABEL_224;
          }
          int v97 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v230 = v97 + v97 * *(_DWORD *)(v4 + 352);
            unint64_t v98 = v243;
            uint64_t v99 = *(unint64_t **)(v4 + 48);
            if (v99)
            {
LABEL_131:
              if (*v99 <= v98)
              {
                int v104 = 0x7FFFFFFF;
                uint64_t v105 = *(char **)(v4 + 104);
                unint64_t v106 = *(char **)(v4 + 112);
                if (v106 != v105) {
                  goto LABEL_151;
                }
              }
              else
              {
                uint64_t v100 = v4;
                unsigned int v101 = 0;
                unsigned int v102 = *(_DWORD *)(v100 + 100) + v225;
                unsigned int v103 = v102;
                while (v101 <= v102)
                {
                  int v104 = *(_DWORD *)sub_A3F53C(v99 + 2, v99[1] * v98 + v103);
                  v101 += 2;
                  v103 -= 2;
                  if (v104 != 0x7FFFFFFF)
                  {
                    uint64_t v4 = v232;
                    uint64_t v105 = *(char **)(v232 + 104);
                    unint64_t v106 = *(char **)(v232 + 112);
                    if (v106 == v105) {
                      goto LABEL_136;
                    }
LABEL_151:
                    int v118 = *((_DWORD *)v105 + 1);
                    int v119 = v118 - *(_DWORD *)v105;
                    if (v118 == *(_DWORD *)v105) {
                      goto LABEL_224;
                    }
                    if (v104 == 0x7FFFFFFF)
                    {
                      unsigned int v120 = 0;
                      while (*((_DWORD *)v105 + 1) - *(_DWORD *)v105 > v120)
                      {
                        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v4 + 136) - *(void *)(v4 + 128)) >> 2) <= (unint64_t)(v120 + *(_DWORD *)v105)) {
                          goto LABEL_326;
                        }
                        if (v119 == ++v120) {
                          goto LABEL_224;
                        }
                      }
LABEL_325:
                      unint64_t v222 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      sub_188D9E0(v222, "key does not exist and cannot be added");
LABEL_327:
                    }
                    uint64_t v123 = 0;
                    unsigned int v124 = 0;
                    unint64_t v125 = (v97 + v97 * v98);
                    unsigned int i = v224 + v125;
                    unint64_t v226 = (v224 + v125);
                    unint64_t v229 = (v125 + 1);
                    while (2)
                    {
                      unint64_t v131 = *(char **)(v4 + 104);
                      uint64_t v132 = *(char **)(v4 + 112);
                      if (v132 == v131 || *((_DWORD *)v131 + 1) - *(_DWORD *)v131 <= v124) {
                        goto LABEL_325;
                      }
                      unint64_t v133 = *(_DWORD *)v131 + v124;
                      uint64_t v134 = *(void *)(v4 + 128);
                      if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v134) >> 2) <= v133)
                      {
LABEL_326:
                        unint64_t v222 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        sub_188D9E0(v222, "index out of range");
                        goto LABEL_327;
                      }
                      uint64_t v135 = v134 + 52 * v133;
                      long long v137 = *(_OWORD *)(v135 + 16);
                      long long v136 = *(_OWORD *)(v135 + 32);
                      long long v138 = *(_OWORD *)v135;
                      int v262 = *(_DWORD *)(v135 + 48);
                      long long v260 = v137;
                      long long v261 = v136;
                      long long v259 = v138;
                      if (SHIDWORD(v137) >= v104)
                      {
                        if (v230 == -1) {
                          goto LABEL_179;
                        }
                        if (sub_A68A00((uint64_t)v234, (uint64_t)&v259, v230))
                        {
LABEL_197:
                          uint64_t v127 = 0;
LABEL_198:
                          uint64_t v130 = 0;
                        }
                        else
                        {
                          unint64_t v131 = *(char **)(v4 + 104);
                          uint64_t v132 = *(char **)(v4 + 112);
LABEL_179:
                          unint64_t v139 = (v132 - v131) >> 3;
                          if (v139 <= v125)
                          {
                            if (v229 <= v139)
                            {
                              if (v229 >= v139) {
                                goto LABEL_180;
                              }
                              uint64_t v140 = v123;
                              uint64_t v132 = &v131[8 * v229];
                              *(void *)(v4 + 112) = v132;
                            }
                            else
                            {
                              uint64_t v140 = v123;
                              sub_D2BFC(v234, v229 - v139);
                              unint64_t v131 = *(char **)(v4 + 104);
                              uint64_t v132 = *(char **)(v4 + 112);
                            }
                          }
                          else
                          {
LABEL_180:
                            uint64_t v140 = v123;
                          }
                          uint64_t v141 = *(void *)(v4 + 128);
                          unsigned int v142 = *(_DWORD *)&v131[8 * v125];
                          unint64_t v143 = (v132 - v131) >> 3;
                          if (v143 <= v125)
                          {
                            if (v229 <= v143)
                            {
                              if (v229 < v143) {
                                *(void *)(v4 + 112) = &v131[8 * v229];
                              }
                              goto LABEL_186;
                            }
                            sub_D2BFC(v234, v229 - v143);
                            unint64_t v131 = *(char **)(v4 + 104);
                            uint64_t v144 = *(void *)(v4 + 128);
                          }
                          else
                          {
LABEL_186:
                            uint64_t v144 = v141;
                          }
                          uint64_t v145 = v141 + 52 * v142;
                          uint64_t v146 = v144 + 52 * *(unsigned int *)&v131[8 * v125 + 4];
                          uint64_t v123 = v140;
                          for (unsigned int i = v224 + v125; v145 != v146; v145 += 52)
                          {
                            int v147 = *(_DWORD *)(v145 + 28);
                            BOOL v148 = v147 == 0x7FFFFFFF || v147 < SHIDWORD(v260);
                            if (!v148 && *(_DWORD *)(v145 + 32) <= (int)v261) {
                              goto LABEL_197;
                            }
                          }
                          if (v226 < (uint64_t)(*(void *)(v4 + 112) - (void)v131) >> 3)
                          {
                            unsigned int v150 = *(_DWORD *)&v131[8 * v226];
                            unsigned int v149 = *(_DWORD *)&v131[8 * v226 + 4];
                            if (v149 != v150)
                            {
                              uint64_t v127 = 0;
                              uint64_t v151 = 52 * v149 - 52 * v150;
                              uint64_t v152 = (_DWORD *)(v144 + 52 * v150 + 32);
                              while (1)
                              {
                                int v153 = *(v152 - 1);
                                if (v153 != 0x7FFFFFFF)
                                {
                                  if (v153 >= SHIDWORD(v260) && *v152 <= (int)v261) {
                                    goto LABEL_198;
                                  }
                                  if (SHIDWORD(v260) >= v153 && (int)v261 <= *v152)
                                  {
                                    *(v152 - 1) = 0x7FFFFFFF;
                                    uint64_t v127 = 1;
                                  }
                                }
                                v152 += 13;
                                v151 -= 52;
                                if (!v151) {
                                  goto LABEL_169;
                                }
                              }
                            }
                          }
                          uint64_t v127 = 0;
LABEL_169:
                          uint64_t v128 = sub_A5ECD8((char **)v234, v226, &v259);
                          *(void *)(v128 + 40) = -1;
                          *(_DWORD *)(v128 + 48) = 0x7FFFFFFF;
                          int v129 = *(_DWORD *)(v4 + 176);
                          *(_DWORD *)(v4 + 176) = v129 + 1;
                          *(_DWORD *)(v128 + 24) = v129;
                          *(_DWORD *)(v128 + 20) = DWORD2(v260);
                          *(void *)(v128 + 40) = -1;
                          *(_DWORD *)(v128 + 48) = 0x7FFFFFFF;
                          uint64_t v130 = 1;
                        }
                        v123 |= v130 | (v127 << 8);
                      }
                      if (++v124 == v119)
                      {
                        if ((v123 & 0xFF00) != 0) {
                          sub_A4A9B0(v234, i);
                        }
                        if ((_BYTE)v123) {
                          sub_A3EF14(v223, &v243);
                        }
LABEL_224:
                        unint64_t v106 = *(char **)(v4 + 112);
                        uint64_t v8 = v234;
                        uint64_t v107 = (char *)*v234;
                        uint64_t v108 = v106 - (unsigned char *)*v234;
                        if (v106 == *v234)
                        {
LABEL_225:
                          uint64_t v163 = v108 >> 3;
                          unint64_t v164 = 1 - (v108 >> 3);
                          uint64_t v165 = *(void *)(v4 + 120);
                          if (v164 <= (v165 - (uint64_t)v106) >> 3)
                          {
                            bzero(v106, 8 * v164);
                            v106 += 8 * v164;
                            *(void *)(v4 + 112) = v106;
                            uint64_t v107 = (char *)*v8;
                            uint64_t v109 = *(void *)(v4 + 128);
                            unsigned int v110 = *(_DWORD *)*v8;
                            if (*v8 == v106) {
                              goto LABEL_138;
                            }
LABEL_237:
                            uint64_t v161 = (_DWORD *)(v109 + 52 * v110);
                            uint64_t v162 = v109 + 52 * *((unsigned int *)v107 + 1);
                            if (v161 == (_DWORD *)v162) {
                              goto LABEL_244;
                            }
                            goto LABEL_238;
                          }
                          uint64_t v166 = v165 - (void)v107;
                          uint64_t v167 = v166 >> 2;
                          if ((unint64_t)(v166 >> 2) <= 1) {
                            uint64_t v167 = 1;
                          }
                          BOOL v10 = (unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8;
                          unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
                          if (!v10) {
                            unint64_t v168 = v167;
                          }
                          if (!(v168 >> 61))
                          {
                            uint64_t v169 = 8 * v168;
                            uint64_t v170 = (char *)operator new(8 * v168);
                            uint64_t v171 = &v170[8 * v163];
                            bzero(v171, 8 * v164);
                            *(void *)(v4 + 104) = v171;
                            *(void *)(v4 + 112) = &v171[8 * v164];
                            *(void *)(v4 + 120) = &v170[v169];
                            if (v106)
                            {
                              operator delete(v106);
                              unint64_t v106 = *(char **)(v4 + 112);
                              uint64_t v107 = (char *)*v8;
                              uint64_t v109 = *(void *)(v4 + 128);
                              unsigned int v110 = *(_DWORD *)*v8;
                              if (*v8 != v106) {
                                goto LABEL_237;
                              }
                            }
                            else
                            {
                              unint64_t v106 = &v171[8 * v164];
                              uint64_t v107 = (char *)*v8;
                              uint64_t v109 = *(void *)(v4 + 128);
                              unsigned int v110 = *(_DWORD *)*v8;
                              if (*v8 != v106) {
                                goto LABEL_237;
                              }
                            }
LABEL_138:
                            uint64_t v111 = *(char **)(v4 + 120);
                            if (v111 != v106)
                            {
                              *(void *)unint64_t v106 = 0;
                              *(void *)(v4 + 112) = v106 + 8;
                              goto LABEL_218;
                            }
                            uint64_t v112 = 1;
                            uint64_t v113 = v111 - v107;
                            if ((unint64_t)(v113 >> 2) > 1) {
                              uint64_t v112 = v113 >> 2;
                            }
                            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v114 = v112;
                            }
                            if (!v114)
                            {
                              uint64_t v115 = 0;
                              uint64_t v116 = 0;
                              *(void *)&def_332C = 0;
                              uint64_t v117 = 8;
                              if (v106 == v107) {
                                goto LABEL_216;
                              }
                              goto LABEL_159;
                            }
                            if (!(v114 >> 61))
                            {
                              uint64_t v115 = (char *)operator new(8 * v114);
                              uint64_t v116 = v115;
                              *(void *)uint64_t v115 = 0;
                              uint64_t v117 = (uint64_t)(v115 + 8);
                              if (v106 == v107)
                              {
LABEL_216:
                                *(void *)(v4 + 104) = v116;
                                *(void *)(v4 + 112) = v117;
                                *(void *)(v4 + 120) = &v115[8 * v114];
                                if (v106) {
                                  operator delete(v106);
                                }
LABEL_218:
                                uint64_t v161 = (_DWORD *)(v109 + 52 * v110);
                                uint64_t v162 = *(void *)(v4 + 128) + 52 * *(unsigned int *)(*(void *)(v4 + 104) + 4);
                                if (v161 == (_DWORD *)v162)
                                {
LABEL_244:
                                  uint64_t result = (uint64_t)sub_A6A238((char *)v8, 0);
                                  goto LABEL_245;
                                }
LABEL_238:
                                int v172 = v253;
                                uint64_t v173 = v251;
                                int v174 = v246;
                                unint64_t v175 = ((unint64_t)v248 - v247) >> 4;
                                do
                                {
                                  unsigned int v178 = v161[10];
                                  if (v172)
                                  {
                                    unsigned int v254 = v161[11];
                                    int v176 = v161[12];
                                    int v255 = v176;
                                  }
                                  else
                                  {
                                    int v176 = *(_DWORD *)(v173 + 12 * v178);
                                  }
                                  unsigned int v177 = (unsigned int *)((char *)v174 + *(unsigned __int16 *)((char *)v174 - *v174 + 6));
                                  v161[7] = *(unsigned int *)((char *)&v177[2
                                                                          * (*(_DWORD *)(v173 + 12 * v178 + 4)
                                                                                         + v175)
                                                                          + 1]
                                                            + *v177)
                                          + v176;
                                  v161 += 13;
                                }
                                while (v161 != (_DWORD *)v162);
                                unsigned int v252 = (int *)(v173 + 12 * v178);
                                goto LABEL_244;
                              }
LABEL_159:
                              unint64_t v121 = v106 - 8 - v107;
                              if (v121 < 0x58)
                              {
                                uint64_t v122 = v106;
                                goto LABEL_214;
                              }
                              if ((unint64_t)(v106 - v115) < 0x20)
                              {
                                uint64_t v122 = v106;
                                goto LABEL_214;
                              }
                              uint64_t v154 = (v121 >> 3) + 1;
                              uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
                              uint64_t v122 = &v106[-v155];
                              v116 -= v155;
                              unsigned int v156 = v115 - 16;
                              unint64_t v157 = v106 - 16;
                              uint64_t v158 = v154 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v159 = *(_OWORD *)v157;
                                *((_OWORD *)v156 - 1) = *((_OWORD *)v157 - 1);
                                *(_OWORD *)unsigned int v156 = v159;
                                v156 -= 32;
                                v157 -= 32;
                                v158 -= 4;
                              }
                              while (v158);
                              if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                do
                                {
LABEL_214:
                                  uint64_t v160 = *((void *)v122 - 1);
                                  v122 -= 8;
                                  *((void *)v116 - 1) = v160;
                                  v116 -= 8;
                                }
                                while (v122 != v107);
                              }
                              unint64_t v106 = (char *)*v8;
                              goto LABEL_216;
                            }
                          }
LABEL_324:
                          sub_188D718();
                        }
LABEL_137:
                        uint64_t v109 = *(void *)(v4 + 128);
                        unsigned int v110 = *(_DWORD *)v107;
                        if (v107 != v106) {
                          goto LABEL_237;
                        }
                        goto LABEL_138;
                      }
                      continue;
                    }
                  }
                }
                int v104 = 0x7FFFFFFF;
                uint64_t v4 = v232;
                uint64_t v105 = *(char **)(v232 + 104);
                unint64_t v106 = *(char **)(v232 + 112);
                if (v106 != v105) {
                  goto LABEL_151;
                }
              }
LABEL_136:
              uint64_t v8 = v234;
              uint64_t v107 = (char *)*v234;
              uint64_t v108 = v106 - (unsigned char *)*v234;
              if (v106 == *v234) {
                goto LABEL_225;
              }
              goto LABEL_137;
            }
          }
          else
          {
            unsigned int v230 = -1;
            unint64_t v98 = v243;
            uint64_t v99 = *(unint64_t **)(v4 + 48);
            if (v99) {
              goto LABEL_131;
            }
          }
          int v104 = 0x80000000;
          uint64_t v105 = *(char **)(v4 + 104);
          unint64_t v106 = *(char **)(v4 + 112);
          if (v106 != v105) {
            goto LABEL_151;
          }
          goto LABEL_136;
        }
      }
LABEL_245:
      if (*((unsigned char *)v248 + 15))
      {
        if (v250)
        {
          if (*(_DWORD *)(v250 + 4 * (((unint64_t)v248 - v247) >> 4)) == v233) {
            goto LABEL_250;
          }
        }
        else if (!v233)
        {
LABEL_250:
          unint64_t v179 = v231 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v243;
          uint64_t v180 = *(void *)(v4 + 104);
          if (v179 >= (*(void *)(v4 + 112) - v180) >> 3) {
            goto LABEL_252;
          }
          int v182 = (_DWORD *)(v180 + 8 * v179);
          int v181 = v182[1];
          int v183 = v181 - *v182;
          if (v181 == *v182) {
            goto LABEL_252;
          }
          unsigned int v188 = 0;
          while (2)
          {
            uint64_t v189 = *(void *)(v4 + 104);
            if (v179 >= (*(void *)(v4 + 112) - v189) >> 3) {
              goto LABEL_325;
            }
            unsigned int v191 = (int *)(v189 + 8 * v179);
            int v190 = *v191;
            if (v191[1] - *v191 <= v188) {
              goto LABEL_325;
            }
            unint64_t v192 = v190 + v188;
            uint64_t v193 = *(void *)(v4 + 128);
            if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v4 + 136) - v193) >> 2) <= v192) {
              goto LABEL_326;
            }
            uint64_t v194 = v193 + 52 * v192;
            int v195 = *(_DWORD *)(v194 + 28);
            if (v253)
            {
              uint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v244, v195, 1);
              if (result)
              {
LABEL_280:
                uint64_t v196 = *(void *)(v194 + 20);
                uint64_t v197 = *(void *)(v194 + 32);
                int v198 = v255;
                unint64_t v199 = 0xFFFFFFFF00000000;
                if (v253) {
                  unint64_t v199 = (unint64_t)v254 << 32;
                }
                unint64_t v200 = (-1431655765 * (((unint64_t)v252 - v251) >> 2)) | v199;
                if (!v253) {
                  int v198 = 0x7FFFFFFF;
                }
                uint64_t v201 = (unsigned int *)((char *)v246 + *(unsigned __int16 *)((char *)v246 - *v246 + 6));
                unint64_t v202 = (char *)v201 + *v201;
                uint64_t v203 = &v255;
                if (!v253) {
                  uint64_t v203 = v252;
                }
                int v204 = *(_DWORD *)&v202[8 * v252[1] + 4 + 8 * (((unint64_t)v248 - v247) >> 4)]
                     + *v203;
                LODWORD(v236) = ((unint64_t)v248 - v247) >> 4;
                *(void *)((char *)&v236 + 4) = v200;
                HIDWORD(v236) = v198;
                unsigned int v237 = v258;
                uint64_t v238 = v196;
                int v239 = v204;
                uint64_t v240 = v197;
                unint64_t v241 = v200;
                int v242 = v198;
                unsigned int v205 = *(unsigned int **)(v4 + 104);
                if (*(unsigned int **)(v4 + 112) == v205
                  || (v207 = *v205, unsigned int v206 = *(_DWORD *)(*(void *)(v4 + 104) + 4), v206 == v207))
                {
                  uint64_t result = sub_A5ECD8((char **)v8, 0, &v236);
                }
                else
                {
                  char v208 = 0;
                  uint64_t v209 = 52 * v206 - 52 * v207;
                  int v210 = (_DWORD *)(*(void *)(v4 + 128) + 52 * v207 + 32);
                  do
                  {
                    int v211 = *(v210 - 1);
                    if (v211 != 0x7FFFFFFF)
                    {
                      if (v211 >= v239 && *v210 <= (int)v240) {
                        goto LABEL_297;
                      }
                      if (v239 >= v211 && (int)v240 <= *v210)
                      {
                        *(v210 - 1) = 0x7FFFFFFF;
                        char v208 = 1;
                      }
                    }
                    v210 += 13;
                    v209 -= 52;
                  }
                  while (v209);
                  uint64_t result = sub_A5ECD8((char **)v8, 0, &v236);
LABEL_297:
                  if (v208)
                  {
                    long long v212 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) != v212)
                    {
                      uint64_t v213 = *(void *)(v4 + 128);
                      unsigned int v214 = *v212;
LABEL_300:
                      uint64_t v215 = v213 + 52 * v214;
                      uint64_t v216 = v213 + 52 * v212[1];
                      if (v215 != v216) {
                        goto LABEL_304;
                      }
                      goto LABEL_310;
                    }
                    sub_D2BFC(v8, 1uLL);
                    long long v212 = *(unsigned int **)(v4 + 104);
                    uint64_t v213 = *(void *)(v4 + 128);
                    unsigned int v214 = *v212;
                    if (*(unsigned int **)(v4 + 112) != v212) {
                      goto LABEL_300;
                    }
                    sub_D2BFC(v8, 1uLL);
                    long long v212 = *(unsigned int **)(v4 + 104);
                    uint64_t v215 = v213 + 52 * v214;
                    uint64_t v216 = *(void *)(v4 + 128) + 52 * v212[1];
                    if (v215 == v216)
                    {
LABEL_310:
                      if (*(unsigned int **)(v4 + 112) == v212) {
                        goto LABEL_311;
                      }
                    }
                    else
                    {
LABEL_304:
                      while (*(_DWORD *)(v215 + 28) != 0x7FFFFFFF)
                      {
                        v215 += 52;
                        if (v215 == v216)
                        {
                          uint64_t v215 = v216;
                          if (*(unsigned int **)(v4 + 112) != v212) {
                            goto LABEL_312;
                          }
                          goto LABEL_311;
                        }
                      }
                      if (v215 == v216) {
                        goto LABEL_310;
                      }
                      uint64_t v217 = v215 + 52;
                      if (v215 + 52 == v216) {
                        goto LABEL_310;
                      }
                      do
                      {
                        if (*(_DWORD *)(v217 + 28) != 0x7FFFFFFF)
                        {
                          long long v218 = *(_OWORD *)v217;
                          long long v219 = *(_OWORD *)(v217 + 16);
                          long long v220 = *(_OWORD *)(v217 + 32);
                          *(_DWORD *)(v215 + 48) = *(_DWORD *)(v217 + 48);
                          *(_OWORD *)(v215 + 16) = v219;
                          *(_OWORD *)(v215 + 32) = v220;
                          *(_OWORD *)uint64_t v215 = v218;
                          v215 += 52;
                        }
                        v217 += 52;
                      }
                      while (v217 != v216);
                      long long v212 = (unsigned int *)*v8;
                      if (*(void **)(v4 + 112) == *v8)
                      {
LABEL_311:
                        sub_D2BFC(v8, 1uLL);
                        long long v212 = (unsigned int *)*v8;
                      }
                    }
LABEL_312:
                    uint64_t result = (uint64_t)sub_A4A05C(v8, 0, (char *)v215, (unsigned char *)(*(void *)(v4 + 128) + 52 * v212[1]));
                  }
                }
              }
            }
            else
            {
              uint64_t result = sub_A2BC00((uint64_t)&v244, v195, 1);
              if (result) {
                goto LABEL_280;
              }
            }
            if (++v188 == v183) {
              break;
            }
            continue;
          }
        }
      }
LABEL_252:
      unint64_t v184 = v247;
      unint64_t v9 = v248 - 2;
      v248 -= 2;
      if (*(unsigned char *)(v244 + 16) && !v245 && (unint64_t)v9 >= v247 && (unint64_t)v9 < v249)
      {
        do
        {
          unint64_t v185 = __ROR8__(*v9, 32);
          if (HIDWORD(v185) == 1 && (v185 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v244 + 4120));
          unint64_t v184 = v247;
          unint64_t v9 = v248;
          if (result) {
            break;
          }
          unint64_t v9 = v248 - 2;
          int v248 = v9;
        }
        while ((unint64_t)v9 >= v247 && (unint64_t)v9 < v249);
      }
      if ((unint64_t)v9 < v184 || (unint64_t)v9 >= v249) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      long long v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A6A198(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A1AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A1C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A1D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A1E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A1FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A210(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A224(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_A6A238(char *result, unsigned int a2)
{
  int v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A5F2F0(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_31:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_31;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x4EC4EC4EC4EC4EC5 * ((*((void *)v2 + 4) - v13) >> 2) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 52 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 >= v16 && *((_DWORD *)result + 8) <= *(_DWORD *)(v13 + 52 * v12 + 32))
                {
                  *unint64_t v15 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 >= v18 && *(_DWORD *)(v13 + 52 * v12 + 32) <= *((_DWORD *)result + 8))
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_6;
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A4A9B0((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A6A450(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A6A464(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A6A478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A6A58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_A6A5E0(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  int v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    unint64_t v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A6A898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A6A8C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    unint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    uint64_t v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A6AC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A6ACB0(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A6C3C4(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      int v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_A6C3C4(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    unsigned int v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    uint64_t v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        BOOL v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        int v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_A6C3C4(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          unint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          uint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          unint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      uint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      uint64_t v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *uint64_t v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A6C3C4(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_A6BE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A6BFA8(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A6C680(a1 + 1336, v42);
  sub_A6C934((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  uint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    uint64_t v36 = v25;
    operator delete(v27);
  }
}

void sub_A6C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A6C3C4(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A6C634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A6C680(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A6EE44(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A6F03C(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A6F23C(a1, v6);
        sub_A6F550(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A710E8(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A73B30(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A72048(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A723A0(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A6C934@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  long long v299 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v336) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v297 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v336) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v298 = v5;
  if (v4 >= 2)
  {
    int v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v301 = _Q0;
    int v300 = 1;
    int v307 = a1;
    long long v306 = (void **)(a1 + 13);
    while (1)
    {
      sub_A724E0((uint64_t)v7, 0);
      sub_A7395C(v7, v300 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      size_t v302 = (unsigned int *)(v14 + 56 * v11[1]);
      unint64_t v303 = (unsigned int *)(v12 + 56 * v13);
      if (v303 != v302)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v336 = 0x7FFFFFFF;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          __int16 v339 = 0;
          unint64_t v340 = 0x8000000080000000;
          int v341 = 0x7FFFFFFF;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0x8000000080000000;
          __int16 v346 = 0;
          unint64_t v347 = 0xFFFFFFFF00000000;
          int v348 = -1;
          uint64_t v349 = 0;
          uint64_t v351 = 0;
          uint64_t v352 = 0;
          uint64_t v353 = 0;
          int v350 = 0x7FFFFFFF;
          int v354 = 100;
          int v355 = -1;
          long long v356 = v301;
          long long v357 = v301;
          long long v358 = v301;
          long long v359 = 0u;
          long long v360 = 0u;
          long long v361 = 0u;
          long long v362 = 0u;
          uint64_t v15 = a1[3];
          long long v363 = 0u;
          long long v364 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v303 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v303 != -1) {
            break;
          }
LABEL_397:
          unint64_t v269 = v359;
          if ((void)v359 != *((void *)&v359 + 1))
          {
            unint64_t v270 = *((void *)&v359 + 1) - 72;
            if (*((void *)&v359 + 1) - 72 > (unint64_t)v359)
            {
              do
              {
                sub_A4D0C8(v269, v270);
                v269 += 72;
                v270 -= 72;
              }
              while (v269 < v270);
            }
          }
          sub_A29D50((uint64_t)__p);
          unint64_t v271 = *(void *)(v3 + 16);
          if (v271 >= *(void *)(v3 + 24))
          {
            uint64_t v272 = sub_A4D268(v299, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v272 = v271 + 296;
            *(void *)(v3 + 16) = v271 + 296;
          }
          int v7 = (char **)v306;
          *(void *)(v3 + 16) = v272;
          if (*((void *)&v363 + 1))
          {
            *(void *)&long long v364 = *((void *)&v363 + 1);
            operator delete(*((void **)&v363 + 1));
          }
          if ((void)v362)
          {
            *((void *)&v362 + 1) = v362;
            operator delete((void *)v362);
          }
          if (*((void *)&v360 + 1))
          {
            *(void *)&long long v361 = *((void *)&v360 + 1);
            operator delete(*((void **)&v360 + 1));
          }
          long long v273 = (void **)v359;
          if ((void)v359)
          {
            uint64_t v274 = *((void *)&v359 + 1);
            uint64_t v275 = (void *)v359;
            if (*((void *)&v359 + 1) != (void)v359)
            {
              do
              {
                uint64_t v277 = *(void **)(v274 - 40);
                if (v277)
                {
                  *(void *)(v274 - 32) = v277;
                  operator delete(v277);
                }
                uint64_t v278 = (void **)(v274 - 72);
                uint64_t v279 = *(void *)(v274 - 72);
                if (v279)
                {
                  uint64_t v280 = *(void *)(v274 - 64);
                  uint64_t v276 = *(void **)(v274 - 72);
                  if (v280 != v279)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v280 - 8))
                      {
                        unint64_t v281 = *(void **)(v280 - 48);
                        if (v281)
                        {
                          *(void *)(v280 - 40) = v281;
                          operator delete(v281);
                        }
                        uint64_t v282 = *(void **)(v280 - 80);
                        if (v282)
                        {
                          *(void *)(v280 - 72) = v282;
                          operator delete(v282);
                        }
                        uint64_t v283 = *(void **)(v280 - 104);
                        if (v283)
                        {
                          *(void *)(v280 - 96) = v283;
                          operator delete(v283);
                        }
                      }
                      v280 -= 168;
                    }
                    while (v280 != v279);
                    uint64_t v276 = *v278;
                  }
                  *(void *)(v274 - 64) = v279;
                  operator delete(v276);
                  a1 = v307;
                }
                v274 -= 72;
              }
              while (v278 != v273);
              uint64_t v275 = (void *)v359;
            }
            *((void *)&v359 + 1) = v273;
            operator delete(v275);
          }
          if (SHIBYTE(v353) < 0) {
            operator delete(v351);
          }
          v303 += 14;
          if (v303 == v302) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v303;
        int v309 = v300;
        unsigned int v310 = *((_DWORD *)a1 + 88);
        while (2)
        {
          unint64_t v327 = 0;
          char v328 = 0;
          unint64_t v329 = 0;
          int v332 = 0;
          uint64_t v333 = 0;
          uint64_t v331 = 0;
          v334[0] = 1;
          *(void *)&v334[4] = 0x8000000080000000;
          *(_WORD *)&unsigned char v334[12] = 0;
          v334[14] = 0;
          int v386 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v311 = xmmword_20E12E0;
          __int16 v312 = 0;
          unint64_t v313 = 0x8000000080000000;
          __int16 v314 = 0;
          *(_OWORD *)long long v315 = xmmword_20EB6B0;
          *(void *)&v315[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v317 = 0u;
          long long v318 = 0u;
          long long v319 = 0u;
          int v316 = -1;
          int v320 = 0x7FFFFFFF;
          char v322 = 0;
          uint64_t v323 = 0;
          uint64_t v321 = 0;
          char v324 = 1;
          unint64_t v325 = 0x8000000080000000;
          int v326 = 0;
          char v330 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)long long v315 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v315[16] = v19[3];
          *(void *)&v315[8] = v22;
          *(_DWORD *)&v315[20] = *v19;
          unsigned int v23 = *(_DWORD *)&v315[20];
          uint64_t v24 = a1[3];
          uint64_t v365 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
          sub_A1E9A0((uint64_t)v366, v24, v21, v23, 0, 0);
          *(void *)&long long v368 = *(void *)&v367[24] + 12 * *(unsigned int *)&v315[8];
          if (LOBYTE(v370[1])) {
            *(void **)((char *)&v370[1] + 4) = *(void **)&v315[12];
          }
          if (*(void *)&v367[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v367[16]
          }
                                  + 4 * ((*(void *)v367 - *(void *)&v366[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A4C9D4((uint64_t)v366, &v365, v25);
          _CF = *(void *)v367 < *(void *)&v367[8] && *(void *)v367 >= *(void *)&v366[24];
          uint64_t v27 = (*(void *)v367 - *(void *)&v366[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          int v316 = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v315;
          unsigned int v31 = *(_DWORD *)&v315[20];
          uint64_t v32 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v29, *(int *)&v315[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                BOOL v292 = (void *)sub_2F404((uint64_t)exception, (long long *)v366);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                char v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                char v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          unint64_t v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            int v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            int v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          char v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              uint64_t v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v307;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            unsigned int v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_434;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((unsigned int v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v307;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          uint64_t v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v307;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v307;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              unsigned int v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_434:
                long long v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v288, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v310 = *(_DWORD *)(v59 + 8);
            if (v310 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v307;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            int v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_434;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_434;
          }
LABEL_117:
          if (v68
            && ((int v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v310 = *(_DWORD *)(v59 + 8);
          if (v310 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            char v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)char v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            long long v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              unsigned int v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              unint64_t v98 = &v97[8 * v92];
              *(void *)unint64_t v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v307;
                  goto LABEL_155;
                }
                a1 = v307;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_445;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v105 = &v89[-v104];
                v98 -= v104;
                unint64_t v106 = &v97[8 * v92 - 16];
                uint64_t v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)unint64_t v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                char v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_445:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                char v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v310 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              unsigned int v97 = 0;
              unint64_t v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v307;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          uint64_t v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v315;
          unsigned int v113 = *(_DWORD *)&v315[20];
          uint64_t v114 = HIDWORD(*(void *)v315);
          if (sub_A10E20(v111, *(int *)&v315[4]))
          {
            uint64_t v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              uint64_t v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                unint64_t v295 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                int v296 = (void *)sub_2F404((uint64_t)v295, (long long *)v366);
              }
              int v118 = (int *)((char *)v117 + *v117);
              int v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                unint64_t v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                unint64_t v121 = 0;
              }
              uint64_t v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              uint64_t v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          uint64_t v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            unsigned int v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            unsigned int v124 = 0;
          }
          DWORD1(v311) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v315;
          uint64_t v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v315[20];
          int v129 = *(_DWORD *)&v315[8];
          uint64_t v130 = HIDWORD(*(void *)v315);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v315[4]))
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              uint64_t v284 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v366);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            unint64_t v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              unsigned int v289 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
              unint64_t v290 = (void *)sub_2F404((uint64_t)v289, (long long *)v366);
            }
LABEL_180:
            unint64_t v133 = (char *)v131 + *v131;
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              long long v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              long long v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                unint64_t v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                unint64_t v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              uint64_t v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                unsigned int v142 = 0;
                unint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                unsigned int v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  unsigned int v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                unint64_t v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)long long v366 = v146;
                  *(_DWORD *)&v366[8] = v147;
                  BOOL v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  unsigned int v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    uint64_t v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    uint64_t v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v315[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v315[16];
                  }
                  *((void *)&v311 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v366, v152, v153);
                  __int16 v312 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v315;
                  unint64_t v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v316;
                  int v159 = *(_DWORD *)&v315[8];
                  uint64_t v160 = HIDWORD(*(void *)v315);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v315[4]))
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      int v286 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Incident stop pattern quad data requested on nullptr buffer");
                      uint64_t v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v366);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    uint64_t v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      unint64_t v293 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v366, "Realtime stop pattern quad data requested on nullptr buffer");
                      __int16 v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v366);
                    }
LABEL_213:
                    uint64_t v163 = (char *)v161 + *v161;
                    unint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      uint64_t v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      uint64_t v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        uint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        uint64_t v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      uint64_t v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        int v172 = 0;
                        uint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        int v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          int v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        uint64_t v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)long long v366 = v176;
                          *(_DWORD *)&v366[8] = v177;
                          unsigned int v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          unint64_t v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            int v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            int v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v315[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v315[16];
                          }
                          unint64_t v313 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v366, v182, v183);
                          __int16 v314 = v184;
                          int v375 = -1;
                          sub_9F6FA0((uint64_t)v366, &v311);
                          int v375 = 0;
                          if (v386)
                          {
                            sub_9F6FA0((uint64_t)v376, (long long *)v366);
                            int v386 = v375;
                            if (!v375) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[16] = *(_OWORD *)&v366[16];
                            v377[0] = *(_OWORD *)v367;
                            *(_OWORD *)((char *)v377 + 12) = *(_OWORD *)&v367[12];
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            *(_OWORD *)long long v378 = v368;
                            uint64_t v379 = v369;
                            uint64_t v369 = 0;
                            long long v368 = 0uLL;
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            long long v380 = *(_OWORD *)v370;
                            long long v381 = v370[2];
                            memset(v370, 0, sizeof(v370));
                            int v382 = v371;
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            long long v383 = v372;
                            uint64_t v384 = v373;
                            uint64_t v373 = 0;
                            long long v372 = 0uLL;
                            long long v385 = v374;
                            if (!v375)
                            {
LABEL_250:
                              if ((void)v372)
                              {
                                *((void *)&v372 + 1) = v372;
                                operator delete((void *)v372);
                              }
                              if (v370[0])
                              {
                                v370[1] = v370[0];
                                operator delete(v370[0]);
                              }
                              if ((void)v368)
                              {
                                *((void *)&v368 + 1) = v368;
                                operator delete((void *)v368);
                              }
                            }
                          }
                          if (v321)
                          {
                            char v322 = v321;
                            operator delete(v321);
                          }
                          if (*((void *)&v318 + 1))
                          {
                            *(void *)&long long v319 = *((void *)&v318 + 1);
                            operator delete(*((void **)&v318 + 1));
                          }
                          if ((void)v317)
                          {
                            *((void *)&v317 + 1) = v317;
                            operator delete((void *)v317);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v328;
                            if ((unint64_t)v328 < v329) {
                              goto LABEL_264;
                            }
LABEL_282:
                            char v328 = (char *)sub_A4CBF4((uint64_t *)&v327, (uint64_t)v376);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              unint64_t v192 = (char *)v327;
                              uint64_t v193 = v328;
                              int64_t v194 = v328 - (unsigned char *)v327;
                              if (v328 != v327)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                uint64_t v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v307;
                                do
                                {
                                  unint64_t v199 = (long long *)&v196[v197];
                                  unint64_t v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    *unint64_t v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v330;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              uint64_t v203 = v331;
                              uint64_t v204 = v332 - (unsigned char *)v331;
                              if (v332 != v331)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                unsigned int v205 = (char *)operator new(v332 - (unsigned char *)v331);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                unsigned int v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v334;
                              *(void *)(v186 + 63) = *(void *)&v334[7];
                              *(void *)(v186 + 56) = v207;
                              unint64_t v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v359 + 1) = v187;
                              unint64_t v208 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 1;
                              unsigned int v209 = v19[5];
                              int v210 = (char *)a1[13];
                              int v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v309 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v310 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    int v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    int v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    int v225 = v306;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_435:
                                    }
                                      sub_188D718();
                                    long long v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      int v225 = v306;
                                      a1 = v307;
                                      int v224 = &v218[8 * v212 + v219];
                                      v307[13] = &v218[8 * v212];
                                      v307[14] = v224;
                                      v307[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        uint64_t v221 = &v218[8 * v212];
                                        unint64_t v222 = v221;
                                        a1 = v307;
                                        goto LABEL_327;
                                      }
                                      uint64_t v221 = &v218[8 * v212];
                                      unint64_t v222 = v221;
                                      a1 = v307;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_446;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      uint64_t v228 = &v211[-v227];
                                      unint64_t v222 = &v221[-v227];
                                      unint64_t v229 = &v218[8 * v212 - 16];
                                      unsigned int v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)unint64_t v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      int v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_446:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      int v211 = v210;
                                      int v225 = v306;
                                      int v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        int v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  int v210 = (char *)*v225;
                                  int v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v305 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_435;
                                  }
                                  uint64_t v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  uint64_t v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                unint64_t v247 = &v244[8 * v241];
                                size_t v304 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v307;
                                  v307[13] = v247;
                                  v307[14] = &v247[v304];
                                  v307[15] = &v244[8 * v305];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    unint64_t v249 = v211;
                                    uint64_t v250 = &v244[8 * v241];
                                    a1 = v307;
                                    size_t v251 = v304;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  unint64_t v249 = &v211[-v260];
                                  uint64_t v250 = &v247[-v260];
                                  long long v261 = &v244[8 * v241 - 16];
                                  int v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v307;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)long long v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v304;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  int v211 = (char *)*v306;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v305];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              int v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 56 * v235);
                              unsigned __int8 v253 = (unsigned int *)(v237 + 56 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 14;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v386)
                              {
                                if ((void)v383)
                                {
                                  *((void *)&v383 + 1) = v383;
                                  operator delete((void *)v383);
                                }
                                if ((void)v380)
                                {
                                  *((void *)&v380 + 1) = v380;
                                  operator delete((void *)v380);
                                }
                                if (v378[0])
                                {
                                  v378[1] = v378[0];
                                  operator delete(v378[0]);
                                }
                              }
                              if (v331)
                              {
                                int v332 = v331;
                                operator delete(v331);
                              }
                              unsigned int v254 = (char *)v327;
                              if (v327)
                              {
                                int v255 = v328;
                                char v20 = v327;
                                if (v328 != v327)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      unint64_t v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      unint64_t v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      unsigned int v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  char v20 = v327;
                                }
                                char v328 = v254;
                                operator delete(v20);
                              }
                              --v309;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            unint64_t v187 = sub_A4CECC((void ***)&v359, (uint64_t)&v327);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v330 = 1;
                          unsigned int v188 = v19[3];
                          unsigned int v189 = v19[7];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v310);
                          *(_DWORD *)long long v366 = 0;
                          *(_DWORD *)&v366[4] = v188;
                          *(void *)&v366[12] = v190;
                          *(void *)&v366[20] = v191;
                          *(_DWORD *)&v366[8] = v189;
                          int v375 = 1;
                          if (v386)
                          {
                            if (v386 == 1)
                            {
                              *(_OWORD *)v376 = *(_OWORD *)v366;
                              *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)v376 = *(_OWORD *)v366;
                            *(_OWORD *)&v376[12] = *(_OWORD *)&v366[12];
                            int v386 = 1;
                          }
                          else
                          {
                            if ((void)v383)
                            {
                              *((void *)&v383 + 1) = v383;
                              operator delete((void *)v383);
                            }
                            if ((void)v380)
                            {
                              *((void *)&v380 + 1) = v380;
                              operator delete((void *)v380);
                            }
                            if (v378[0])
                            {
                              v378[1] = v378[0];
                              operator delete(v378[0]);
                            }
                            if (v375)
                            {
                              if (v375 == 1) {
                                goto LABEL_280;
                              }
                              int v386 = v375;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v376, (long long *)v366);
                              int v386 = v375;
                              if (!v375)
                              {
                                if ((void)v372)
                                {
                                  *((void *)&v372 + 1) = v372;
                                  operator delete((void *)v372);
                                }
                                if (v370[0])
                                {
                                  v370[1] = v370[0];
                                  operator delete(v370[0]);
                                }
                                if ((void)v368)
                                {
                                  *((void *)&v368 + 1) = v368;
                                  operator delete((void *)v368);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v310 = *v19;
                          uint64_t v185 = (uint64_t)v328;
                          if ((unint64_t)v328 >= v329) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v386;
                          if (v386 == 1)
                          {
                            long long v223 = *(_OWORD *)v376;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v376[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            char v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v386) {
                              sub_9F6FA0(v185, (long long *)v376);
                            }
                            char v328 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v359 + 1);
                            if (*((void *)&v359 + 1) < (unint64_t)v360) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    uint64_t v163 = sub_A10B80(v162 + 24, v156, 0);
                    unint64_t v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            unint64_t v133 = sub_A10B80(v132 + 24, v126, 0);
            uint64_t v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v300 == v298) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v297, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A6E89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      int v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            unint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        int v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      int v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      int v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        unsigned int v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      unsigned int v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A6EE44(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A6F020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A6F03C(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v25 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v25);
    int v26 = v5;
    sub_A724E0(a1 + 104, 0);
    long long v18 = xmmword_20E2060;
    uint64_t v19 = -1;
    int v20 = v3;
    int v21 = v2;
    uint64_t v22 = 0;
    uint64_t v23 = -1;
    int v24 = 0x7FFFFFFF;
    unsigned int v6 = *(unsigned int **)(a1 + 104);
    if (*(unsigned int **)(a1 + 112) == v6
      || (uint64_t v8 = *v6, v7 = *(_DWORD *)(*(void *)(a1 + 104) + 4), v7 == v8))
    {
      sub_A72C48((char **)(a1 + 104), 0, &v18);
    }
    else
    {
      char v12 = 0;
      uint64_t v13 = 56 * v8;
      uint64_t v14 = 56 * v7 - v13;
      uint64_t v15 = (_DWORD *)(v13 + *(void *)(a1 + 128) + 36);
      do
      {
        int v16 = *(v15 - 2);
        if (v16 != 0x7FFFFFFF)
        {
          if (v16 <= v21 && *(v15 - 1) <= (int)v22 && *v15 <= HIDWORD(v22)) {
            goto LABEL_22;
          }
          if (v21 <= v16 && (int)v22 <= *(v15 - 1) && HIDWORD(v22) <= *v15)
          {
            *(v15 - 2) = 0x7FFFFFFF;
            char v12 = 1;
          }
        }
        v15 += 14;
        v14 -= 56;
      }
      while (v14);
      uint64_t v17 = sub_A72C48((char **)(a1 + 104), 0, &v18);
      *(void *)(v17 + 44) = -1;
      *(_DWORD *)(v17 + 52) = 0x7FFFFFFF;
LABEL_22:
      if (v12) {
        sub_A731E8((void **)(a1 + 104), 0);
      }
    }
    int v9 = *(_DWORD *)(a1 + 96);
    unsigned int v10 = v9 + v9 * v5;
    unsigned int v11 = v10 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A725CC((void **)(a1 + 104), 0, v11, v10, v9 + v9 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A725CC((void **)(a1 + 104), 0, v11, v10, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v26);
  }
}

double sub_A6F23C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (char **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      unsigned int v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A724E0((uint64_t)v5, 0);
      sub_A7395C(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC((void **)v5, 1uLL);
        uint64_t v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC((void **)v5, 1uLL);
          long long v18 = (unsigned int *)(v16 + 56 * v17);
          uint64_t v19 = *(void *)(a1 + 128) + 56 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
      }
      long long v18 = (unsigned int *)(v16 + 56 * v17);
      uint64_t v19 = v16 + 56 * v15[1];
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        *long long v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 14;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        int v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        int v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A725CC((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    unsigned int v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    char v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A6F550(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v332);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  size_t v302 = *(unsigned int **)(a1 + 216);
  if (v4 != v302)
  {
    int v313 = a2 + 1;
    int v303 = a2 + 2;
    int v308 = ~a2;
    size_t v304 = (uint64_t *)(a1 + 232);
    long long v301 = (void **)(a1 + 256);
    char v322 = (void **)(a1 + 104);
    while (1)
    {
      long long v306 = v4;
      unsigned int v5 = *v4;
      unint64_t v6 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v326, *(void *)(a1 + 24), *v6);
      BOOL v7 = v327;
      uint64_t v8 = &v328;
      if (v331) {
        uint64_t v8 = v330;
      }
      if ((unint64_t)v327 < *v8) {
        break;
      }
LABEL_3:
      uint64_t v4 = v306 + 1;
      if (v306 + 1 == v302) {
        goto LABEL_411;
      }
    }
    unsigned int v314 = v5 + 1;
    unsigned int v317 = v5;
LABEL_13:
    unint64_t v12 = __ROR8__(*v7, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 56) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 80);
    int v19 = *(_DWORD *)(v13 + 64);
    int v18 = *(_DWORD *)(v13 + 68);
    uint64_t v20 = v16 & v14;
    uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
    unsigned int v23 = *v21;
    unsigned int v22 = v21[1];
    if (v18 != v22 || v19 != v23)
    {
      if (!*(void *)(v13 + 40))
      {
        uint64_t v43 = 1;
        while (__PAIR64__(v22, v23) != v12)
        {
          uint64_t v20 = (v20 + v43) & v14;
          uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v44;
          unsigned int v22 = v44[1];
          ++v43;
          if (v18 == v22 && v19 == v23) {
            goto LABEL_56;
          }
        }
LABEL_53:
        if (v20 != -1)
        {
          uint64_t v46 = v17 + 12 * v20;
          unsigned int v47 = *(_DWORD *)(v46 + 8);
          if (v47 != -1) {
            goto LABEL_110;
          }
          goto LABEL_91;
        }
        uint64_t v25 = -1;
        if (sub_A3BA84(*(void *)(a1 + 32), 1))
        {
LABEL_31:
          uint64_t v29 = *(void *)(v13 + 56) - 1;
          uint64_t v30 = *(void *)(v13 + 80);
          int v32 = *(_DWORD *)(v13 + 64);
          int v31 = *(_DWORD *)(v13 + 68);
          uint64_t v33 = v29 & v16;
          uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
          unsigned int v36 = *v34;
          unsigned int v35 = v34[1];
          uint64_t v37 = *(void *)(v13 + 40);
          if (v31 == v35 && v32 == v36)
          {
LABEL_81:
            uint64_t v39 = v33;
            goto LABEL_82;
          }
          if (v37)
          {
            uint64_t v39 = -1;
            uint64_t v40 = 1;
            do
            {
              if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
              {
                if (v39 == -1) {
                  uint64_t v39 = v33;
                }
              }
              else if (__PAIR64__(v35, v36) == v12)
              {
                goto LABEL_75;
              }
              uint64_t v33 = (v33 + v40) & v29;
              uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
              unsigned int v36 = *v41;
              unsigned int v35 = v41[1];
              ++v40;
            }
            while (v31 != v35 || v32 != v36);
            if (v39 == -1) {
              goto LABEL_81;
            }
LABEL_82:
            uint64_t v57 = *(void *)(v13 + 48);
            if ((unint64_t)(v57 - v37) >= 0x1555555555555555)
            {
LABEL_419:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_2E18(exception, "insert overflow");
            }
            if (v37
              && ((BOOL v58 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v58[1])
                ? (BOOL v59 = *(_DWORD *)(v13 + 32) == *v58)
                : (BOOL v59 = 0),
                  v59))
            {
              *(void *)(v13 + 40) = v37 - 1;
            }
            else
            {
              *(void *)(v13 + 48) = v57 + 1;
            }
            uint64_t v60 = v30 + 12 * v39;
            *(void *)uint64_t v60 = v12;
            *(_DWORD *)(v60 + 8) = -1;
            uint64_t v46 = *(void *)(v13 + 80) + 12 * v39;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 == -1) {
              goto LABEL_91;
            }
LABEL_110:
            *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
            unsigned int v319 = v47;
            if (v317 == v47) {
              goto LABEL_359;
            }
            unint64_t v81 = *(char **)(a1 + 104);
            uint64_t v82 = *(unsigned char **)(a1 + 112);
            uint64_t v83 = v82 - v81;
            if (v82 != v81)
            {
              BOOL v84 = (void **)(a1 + 104);
              uint64_t v85 = *(void *)(a1 + 128);
              unsigned int v86 = *(_DWORD *)v81;
LABEL_125:
              uint64_t v99 = v85;
              goto LABEL_141;
            }
            uint64_t v88 = v83 >> 3;
            unint64_t v89 = 1 - (v83 >> 3);
            uint64_t v90 = *(void *)(a1 + 120);
            BOOL v84 = (void **)(a1 + 104);
            if (v89 <= (v90 - (uint64_t)v82) >> 3)
            {
              bzero(*(void **)(a1 + 112), 8 * v89);
              unint64_t v98 = &v82[8 * v89];
              *(void *)(a1 + 112) = v98;
              unint64_t v81 = (char *)*v322;
              uint64_t v85 = *(void *)(a1 + 128);
              unsigned int v86 = *(_DWORD *)*v322;
              if (*v322 != v98) {
                goto LABEL_125;
              }
            }
            else
            {
              uint64_t v91 = v90 - (void)v81;
              uint64_t v92 = v91 >> 2;
              if ((unint64_t)(v91 >> 2) <= 1) {
                uint64_t v92 = 1;
              }
              BOOL v296 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v296) {
                unint64_t v93 = v92;
              }
              if (v93 >> 61) {
                goto LABEL_418;
              }
              uint64_t v94 = 8 * v93;
              unint64_t v95 = (char *)operator new(8 * v93);
              unint64_t v96 = &v95[8 * v88];
              bzero(v96, 8 * v89);
              unsigned int v97 = &v96[8 * v89];
              *(void *)(a1 + 104) = v96;
              *(void *)(a1 + 112) = v97;
              *(void *)(a1 + 120) = &v95[v94];
              if (v82)
              {
                operator delete(v82);
                unint64_t v98 = *(char **)(a1 + 112);
                unint64_t v81 = (char *)*v322;
                uint64_t v85 = *(void *)(a1 + 128);
                unsigned int v86 = *(_DWORD *)*v322;
                if (*v322 != v98) {
                  goto LABEL_125;
                }
              }
              else
              {
                unint64_t v98 = &v96[8 * v89];
                unint64_t v81 = (char *)*v322;
                uint64_t v85 = *(void *)(a1 + 128);
                unsigned int v86 = *(_DWORD *)*v322;
                if (*v322 != v97) {
                  goto LABEL_125;
                }
              }
            }
            int v87 = *(char **)(a1 + 120);
            if (v87 != v98)
            {
              *(void *)unint64_t v98 = 0;
              *(void *)(a1 + 112) = v98 + 8;
LABEL_140:
              unint64_t v81 = *(char **)(a1 + 104);
              uint64_t v99 = *(void *)(a1 + 128);
LABEL_141:
              sub_A72724(v84, 0, (char *)(v85 + 56 * v86), (unsigned char *)(v99 + 56 * *((unsigned int *)v81 + 1)));
              unint64_t v109 = v313 + *(_DWORD *)(a1 + 96) * v314;
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              uint64_t v111 = *(unsigned int **)(a1 + 112);
              if (v109 >= ((char *)v111 - (char *)v110) >> 3) {
                goto LABEL_187;
              }
              unsigned int v112 = v110[2 * v109];
              unsigned int v113 = v110[2 * v109 + 1];
              unsigned int v114 = v113 - v112;
              if (v113 == v112) {
                goto LABEL_187;
              }
              int v115 = 0;
              unsigned int v116 = 0;
              do
              {
                uint64_t v117 = *(unsigned int **)(a1 + 104);
                if (v109 >= (uint64_t)(*(void *)(a1 + 112) - (void)v117) >> 3) {
                  goto LABEL_415;
                }
                unsigned int v118 = v117[2 * v109];
                if (v117[2 * v109 + 1] - v118 <= v116) {
                  goto LABEL_415;
                }
                unint64_t v119 = v118 + v116;
                uint64_t v120 = *(void *)(a1 + 128);
                if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 136) - v120) >> 3) <= v119)
                {
LABEL_416:
                  long long v299 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  sub_188D9E0(v299, "index out of range");
                  goto LABEL_417;
                }
                uint64_t v121 = v120 + 56 * v119;
                long long v122 = *(_OWORD *)v121;
                long long v123 = *(_OWORD *)(v121 + 16);
                long long v124 = *(_OWORD *)(v121 + 32);
                uint64_t v336 = *(void *)(v121 + 48);
                long long v335 = v124;
                long long v333 = v122;
                long long v334 = v123;
                uint64_t v127 = v117;
                uint64_t v125 = *v117;
                unsigned int v126 = v127[1];
                if (v126 != v125)
                {
                  int v128 = 0;
                  uint64_t v130 = 56 * v125;
                  uint64_t v131 = 56 * v126 - 56 * v125;
                  uint64_t v132 = (_DWORD *)(v120 + v130 + 36);
                  while (1)
                  {
                    int v133 = *(v132 - 2);
                    if (v133 != 0x7FFFFFFF)
                    {
                      if (v133 <= SHIDWORD(v334) && *(v132 - 1) <= (int)v335 && *v132 <= DWORD1(v335)) {
                        goto LABEL_150;
                      }
                      if (SHIDWORD(v334) <= v133 && (int)v335 <= *(v132 - 1) && DWORD1(v335) <= *v132)
                      {
                        *(v132 - 2) = 0x7FFFFFFF;
                        int v128 = 1;
                      }
                    }
                    v132 += 14;
                    v131 -= 56;
                    if (!v131) {
                      goto LABEL_149;
                    }
                  }
                }
                int v128 = 0;
LABEL_149:
                uint64_t v129 = sub_A72C48((char **)v84, 0, &v333);
                *(void *)(v129 + 44) = -1;
                *(_DWORD *)(v129 + 52) = 0x7FFFFFFF;
LABEL_150:
                v115 |= v128;
                ++v116;
              }
              while (v116 != v114);
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              uint64_t v111 = *(unsigned int **)(a1 + 112);
              if (v115)
              {
                if (v111 != v110)
                {
                  uint64_t v134 = *(void *)(a1 + 128);
                  unsigned int v135 = *v110;
                  goto LABEL_165;
                }
                sub_D2BFC(v84, 1uLL);
                uint64_t v110 = *(unsigned int **)(a1 + 104);
                uint64_t v134 = *(void *)(a1 + 128);
                unsigned int v135 = *v110;
                if (*(unsigned int **)(a1 + 112) == v110)
                {
                  sub_D2BFC(v84, 1uLL);
                  uint64_t v110 = *(unsigned int **)(a1 + 104);
                  uint64_t v136 = *(void *)(a1 + 128);
                }
                else
                {
LABEL_165:
                  uint64_t v136 = v134;
                }
                long long v137 = (long long *)(v134 + 56 * v135);
                uint64_t v138 = (long long *)(v136 + 56 * v110[1]);
                if (v137 == v138)
                {
LABEL_184:
                  if (*(unsigned int **)(a1 + 112) == v110) {
                    goto LABEL_185;
                  }
                }
                else
                {
                  while (*((_DWORD *)v137 + 7) != 0x7FFFFFFF)
                  {
                    long long v137 = (long long *)((char *)v137 + 56);
                    if (v137 == v138)
                    {
                      long long v137 = v138;
                      if (*(unsigned int **)(a1 + 112) != v110) {
                        goto LABEL_186;
                      }
                      goto LABEL_185;
                    }
                  }
                  if (v137 == v138) {
                    goto LABEL_184;
                  }
                  unint64_t v139 = (long long *)((char *)v137 + 56);
                  if ((long long *)((char *)v137 + 56) == v138) {
                    goto LABEL_184;
                  }
                  do
                  {
                    if (*((_DWORD *)v139 + 7) != 0x7FFFFFFF)
                    {
                      long long v144 = *v139;
                      long long v145 = v139[1];
                      long long v146 = v139[2];
                      *((void *)v137 + 6) = *((void *)v139 + 6);
                      v137[1] = v145;
                      void v137[2] = v146;
                      long long *v137 = v144;
                      long long v137 = (long long *)((char *)v137 + 56);
                    }
                    unint64_t v139 = (long long *)((char *)v139 + 56);
                  }
                  while (v139 != v138);
                  uint64_t v110 = (unsigned int *)*v84;
                  if (*(void **)(a1 + 112) == *v84)
                  {
LABEL_185:
                    sub_D2BFC(v84, 1uLL);
                    uint64_t v110 = (unsigned int *)*v84;
                  }
                }
LABEL_186:
                sub_A72724(v84, 0, (char *)v137, (unsigned char *)(*(void *)(a1 + 128) + 56 * v110[1]));
                uint64_t v110 = *(unsigned int **)(a1 + 104);
                uint64_t v111 = *(unsigned int **)(a1 + 112);
              }
LABEL_187:
              uint64_t v140 = (char *)v111 - (char *)v110;
              if (v111 != v110)
              {
                uint64_t v141 = *(void *)(a1 + 128);
                unsigned int v142 = *v110;
                goto LABEL_203;
              }
              uint64_t v147 = v140 >> 3;
              unint64_t v148 = 1 - (v140 >> 3);
              uint64_t v149 = *(void *)(a1 + 120);
              if (v148 <= (v149 - (uint64_t)v111) >> 3)
              {
                bzero(v110, 8 * v148);
                unint64_t v156 = &v110[2 * v148];
                *(void *)(a1 + 112) = v156;
                uint64_t v110 = (unsigned int *)*v84;
                uint64_t v141 = *(void *)(a1 + 128);
                unsigned int v142 = *(_DWORD *)*v84;
                if (*v84 != v156) {
                  goto LABEL_203;
                }
                goto LABEL_189;
              }
              uint64_t v150 = v149 - (void)v110;
              uint64_t v151 = v150 >> 2;
              if ((unint64_t)(v150 >> 2) <= 1) {
                uint64_t v151 = 1;
              }
              BOOL v296 = (unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v296) {
                unint64_t v152 = v151;
              }
              if (v152 >> 61) {
                goto LABEL_418;
              }
              uint64_t v153 = 8 * v152;
              __int16 v154 = (char *)operator new(8 * v152);
              uint64_t v155 = &v154[8 * v147];
              bzero(v155, 8 * v148);
              unint64_t v156 = (unsigned int *)&v155[8 * v148];
              *(void *)(a1 + 104) = v155;
              *(void *)(a1 + 112) = v156;
              *(void *)(a1 + 120) = &v154[v153];
              if (v110)
              {
                operator delete(v110);
                unint64_t v156 = *(unsigned int **)(a1 + 112);
              }
              uint64_t v110 = (unsigned int *)*v84;
              uint64_t v141 = *(void *)(a1 + 128);
              unsigned int v142 = *(_DWORD *)*v84;
              if (*v84 != v156)
              {
LABEL_203:
                uint64_t v157 = v141;
                goto LABEL_221;
              }
LABEL_189:
              unint64_t v143 = *(unsigned int **)(a1 + 120);
              if (v143 == v156)
              {
                uint64_t v158 = 1;
                uint64_t v159 = (char *)v143 - (char *)v110;
                if ((unint64_t)(v159 >> 2) > 1) {
                  uint64_t v158 = v159 >> 2;
                }
                if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v160 = v158;
                }
                if (v160)
                {
                  if (v160 >> 61) {
LABEL_418:
                  }
                    sub_188D718();
                  uint64_t v161 = (char *)operator new(8 * v160);
                  uint64_t v162 = v161;
                  *(void *)uint64_t v161 = 0;
                  uint64_t v163 = (uint64_t)(v161 + 8);
                  if (v156 != v110)
                  {
LABEL_214:
                    unint64_t v164 = (char *)(v156 - 2) - (char *)v110;
                    if (v164 < 0x58 || (unint64_t)((char *)v156 - v161) < 0x20)
                    {
                      uint64_t v165 = v156;
                      goto LABEL_217;
                    }
                    uint64_t v272 = (v164 >> 3) + 1;
                    uint64_t v273 = 8 * (v272 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v165 = &v156[v273 / 0xFFFFFFFFFFFFFFFCLL];
                    v162 -= v273;
                    uint64_t v274 = v161 - 16;
                    uint64_t v275 = v156 - 4;
                    uint64_t v276 = v272 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v277 = *(_OWORD *)v275;
                      *((_OWORD *)v274 - 1) = *((_OWORD *)v275 - 1);
                      *(_OWORD *)uint64_t v274 = v277;
                      v274 -= 32;
                      v275 -= 8;
                      v276 -= 4;
                    }
                    while (v276);
                    if (v272 != (v272 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_217:
                        uint64_t v166 = *((void *)v165 - 1);
                        v165 -= 2;
                        *((void *)v162 - 1) = v166;
                        v162 -= 8;
                      }
                      while (v165 != v110);
                    }
                    unint64_t v156 = (unsigned int *)*v84;
                    *(void *)(a1 + 104) = v162;
                    *(void *)(a1 + 112) = v163;
                    *(void *)(a1 + 120) = &v161[8 * v160];
                    if (!v156) {
                      goto LABEL_220;
                    }
LABEL_219:
                    operator delete(v156);
                    goto LABEL_220;
                  }
                }
                else
                {
                  uint64_t v161 = 0;
                  uint64_t v162 = 0;
                  *(void *)&def_332C = 0;
                  uint64_t v163 = 8;
                  if (v156 != v110) {
                    goto LABEL_214;
                  }
                }
                *(void *)(a1 + 104) = v162;
                *(void *)(a1 + 112) = v163;
                *(void *)(a1 + 120) = &v161[8 * v160];
                if (!v156) {
                  goto LABEL_220;
                }
                goto LABEL_219;
              }
              *(void *)unint64_t v156 = 0;
              *(void *)(a1 + 112) = v156 + 2;
LABEL_220:
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              uint64_t v157 = *(void *)(a1 + 128);
LABEL_221:
              uint64_t v167 = v141 + 56 * v142;
              uint64_t v168 = v157 + 56 * v110[1];
              if (v167 != v168)
              {
                uint64_t v169 = v327;
                do
                {
                  *(_DWORD *)uint64_t v167 = v317;
                  *(_DWORD *)(v167 + 16) = -1;
                  int32x2_t v170 = *(int32x2_t *)(v167 + 28);
                  *(_DWORD *)(v167 + 12) = v170.i32[0];
                  int v171 = *((_DWORD *)v169 + 2);
                  int v172 = v171 / 10;
                  int v173 = v171 % 10;
                  if (v171 < 0) {
                    char v174 = -5;
                  }
                  else {
                    char v174 = 5;
                  }
                  *(int32x2_t *)(v167 + 28) = vadd_s32(vdup_n_s32(v172+ (((103 * (char)(v174 + v173)) >> 15) & 1)+ ((103 * (char)(v174 + v173)) >> 10)), v170);
                  v167 += 56;
                }
                while (v167 != v168);
              }
              int v175 = *(_DWORD *)(a1 + 96);
              if (!*(unsigned char *)(a1 + 20))
              {
                unsigned int v321 = -1;
                unint64_t v176 = v319;
                int v177 = *(unint64_t **)(a1 + 48);
                if (v177) {
                  goto LABEL_229;
                }
LABEL_236:
                int v181 = 2147483646;
                unsigned int v182 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v182) {
                  goto LABEL_359;
                }
                goto LABEL_241;
              }
              unsigned int v321 = v175 + v175 * *(_DWORD *)(a1 + 352) + 1;
              unint64_t v176 = v319;
              int v177 = *(unint64_t **)(a1 + 48);
              if (!v177) {
                goto LABEL_236;
              }
LABEL_229:
              if (*v177 <= v176)
              {
                int v181 = 0x7FFFFFFF;
                unsigned int v182 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v182) {
                  goto LABEL_359;
                }
              }
              else
              {
                unsigned int v178 = 0;
                unsigned int v179 = *(_DWORD *)(a1 + 100) + v308;
                unsigned int v180 = v179;
                do
                {
                  if (v178 > v179)
                  {
                    int v181 = 0x7FFFFFFF;
                    unsigned int v182 = *(_DWORD **)(a1 + 104);
                    if (*(_DWORD **)(a1 + 112) == v182) {
                      goto LABEL_359;
                    }
                    goto LABEL_241;
                  }
                  int v181 = *(_DWORD *)sub_A3F53C(v177 + 2, v177[1] * v176 + v180);
                  v178 += 2;
                  v180 -= 2;
                }
                while (v181 == 0x7FFFFFFF);
                unsigned int v182 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v182) {
                  goto LABEL_359;
                }
              }
LABEL_241:
              int v183 = v182[1];
              int v184 = v183 - *v182;
              if (v183 == *v182) {
                goto LABEL_359;
              }
              if (v181 == 0x7FFFFFFF)
              {
                unsigned int v185 = 0;
                while (v182[1] - *v182 > v185)
                {
                  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) <= (unint64_t)(v185 + *v182)) {
                    goto LABEL_416;
                  }
                  if (v184 == ++v185) {
                    goto LABEL_359;
                  }
                }
LABEL_415:
                long long v299 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v299, "key does not exist and cannot be added");
LABEL_417:
              }
              unint64_t v307 = v176;
              unsigned int v186 = 0;
              unint64_t v305 = v319 + 1;
              unint64_t v187 = (v175 * v305 + 1);
              __int16 v324 = 0;
              unint64_t v315 = v321 + 1;
              unint64_t v316 = (v303 + v175 * v305);
              int v320 = v183 - *v182;
              unint64_t v318 = v187;
LABEL_255:
              unsigned int v189 = *(char **)(a1 + 104);
              uint64_t v190 = *(char **)(a1 + 112);
              uint64_t v191 = v190 - v189;
              if (v190 == v189 || *((_DWORD *)v189 + 1) - *(_DWORD *)v189 <= v186) {
                goto LABEL_415;
              }
              unint64_t v192 = *(_DWORD *)v189 + v186;
              uint64_t v193 = *(void *)(a1 + 128);
              if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 136) - v193) >> 3) <= v192) {
                goto LABEL_416;
              }
              uint64_t v194 = v193 + 56 * v192;
              long long v196 = *(_OWORD *)(v194 + 16);
              long long v195 = *(_OWORD *)(v194 + 32);
              long long v197 = *(_OWORD *)v194;
              uint64_t v336 = *(void *)(v194 + 48);
              long long v335 = v195;
              long long v333 = v197;
              long long v334 = v196;
              if (SHIDWORD(v196) > v181) {
                goto LABEL_254;
              }
              if (v321 == -1)
              {
                unint64_t v208 = (char **)(a1 + 104);
                if (v187 >= (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3) {
                  goto LABEL_327;
                }
                goto LABEL_326;
              }
              unint64_t v198 = v191 >> 3;
              if (v191 >> 3 <= (unint64_t)v321)
              {
                unint64_t v199 = v315 - v198;
                if (v315 > v198)
                {
                  uint64_t v200 = *(void *)(a1 + 120);
                  if (v199 <= (v200 - (uint64_t)v190) >> 3)
                  {
                    bzero(v190, 8 * v199);
                    v190 += 8 * v199;
                    *(void *)(a1 + 112) = v190;
LABEL_282:
                    unsigned int v189 = *(char **)(a1 + 104);
                    uint64_t v193 = *(void *)(a1 + 128);
                    int v184 = v320;
                    unint64_t v187 = v318;
                    goto LABEL_283;
                  }
                  uint64_t v201 = v200 - (void)v189;
                  uint64_t v202 = v201 >> 2;
                  if (v201 >> 2 <= v315) {
                    uint64_t v202 = v321 + 1;
                  }
                  BOOL v296 = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v296) {
                    unint64_t v203 = v202;
                  }
                  if (v203 >> 61) {
                    goto LABEL_418;
                  }
                  uint64_t v311 = 8 * v203;
                  int v309 = operator new(8 * v203);
                  uint64_t v204 = &v309[8 * v198];
                  bzero(v204, 8 * v199);
                  unint64_t v205 = v190 - 8 - v189;
                  if (v205 >= 0x58)
                  {
                    uint64_t v207 = v309;
                    unsigned int v206 = &v309[8 * v198];
                    if ((unint64_t)(&v190[-(v191 & 0xFFFFFFFFFFFFFFF8)] - v309) >= 0x20)
                    {
                      uint64_t v209 = (v205 >> 3) + 1;
                      uint64_t v210 = 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
                      int v211 = &v190[-v210];
                      unsigned int v206 = &v204[-v210];
                      unint64_t v212 = &v309[8 * v198 - 16];
                      unint64_t v213 = (long long *)(v190 - 16);
                      uint64_t v214 = v209 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v215 = *v213;
                        *(v212 - 1) = *(v213 - 1);
                        *unint64_t v212 = v215;
                        v212 -= 2;
                        v213 -= 2;
                        v214 -= 4;
                      }
                      while (v214);
                      uint64_t v190 = v211;
                      if (v209 == (v209 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_281;
                      }
                    }
                  }
                  else
                  {
                    unsigned int v206 = &v309[8 * v198];
                    uint64_t v207 = v309;
                  }
                  do
                  {
                    uint64_t v216 = *((void *)v190 - 1);
                    v190 -= 8;
                    *((void *)v206 - 1) = v216;
                    v206 -= 8;
                  }
                  while (v190 != v189);
LABEL_281:
                  *(void *)(a1 + 104) = v206;
                  *(void *)(a1 + 112) = &v204[8 * v199];
                  *(void *)(a1 + 120) = &v207[v311];
                  operator delete(v189);
                  uint64_t v190 = *(char **)(a1 + 112);
                  goto LABEL_282;
                }
                if (v315 < v198)
                {
                  uint64_t v190 = &v189[8 * v315];
                  *(void *)(a1 + 112) = v190;
                }
              }
LABEL_283:
              unsigned int v217 = *(_DWORD *)&v189[8 * v321];
              unint64_t v218 = (v190 - v189) >> 3;
              if (v218 > v321)
              {
                uint64_t v219 = v193;
                unint64_t v208 = (char **)(a1 + 104);
                goto LABEL_314;
              }
              unint64_t v220 = v315 - v218;
              if (v315 <= v218)
              {
                unint64_t v208 = (char **)(a1 + 104);
                if (v315 < v218) {
                  *(void *)(a1 + 112) = &v189[8 * v315];
                }
                uint64_t v219 = v193;
LABEL_314:
                uint64_t v240 = (_DWORD *)(v193 + 56 * v217);
                for (unsigned int i = (_DWORD *)(v219 + 56 * *(unsigned int *)&v189[8 * v321 + 4]); v240 != i; v240 += 14)
                {
                  int v242 = v240[7];
                  BOOL v243 = v242 != 0x7FFFFFFF && v242 <= SHIDWORD(v334);
                  if (v243 && v240[8] <= (int)v335 && v240[9] <= DWORD1(v335))
                  {
                    __int16 v188 = 0;
                    __int16 v244 = 0;
                    goto LABEL_253;
                  }
                }
                uint64_t v193 = v219;
                if (v187 >= (uint64_t)(*(void *)(a1 + 112) - (void)v189) >> 3) {
                  goto LABEL_327;
                }
LABEL_326:
                uint64_t v246 = *(unsigned int *)&v189[8 * v187];
                unsigned int v245 = *(_DWORD *)&v189[8 * v187 + 4];
                if (v245 != v246)
                {
                  __int16 v244 = 0;
                  uint64_t v253 = 56 * v246;
                  uint64_t v254 = 56 * v245 - v253;
                  int v255 = (_DWORD *)(v193 + v253 + 36);
                  do
                  {
                    int v256 = *(v255 - 2);
                    if (v256 != 0x7FFFFFFF)
                    {
                      if (v256 <= SHIDWORD(v334) && *(v255 - 1) <= (int)v335 && *v255 <= DWORD1(v335))
                      {
                        __int16 v188 = 0;
                        goto LABEL_253;
                      }
                      if (SHIDWORD(v334) <= v256 && (int)v335 <= *(v255 - 1) && DWORD1(v335) <= *v255)
                      {
                        *(v255 - 2) = 0x7FFFFFFF;
                        __int16 v244 = 1;
                      }
                    }
                    v255 += 14;
                    v254 -= 56;
                  }
                  while (v254);
                  goto LABEL_328;
                }
LABEL_327:
                __int16 v244 = 0;
LABEL_328:
                uint64_t v247 = sub_A72C48(v208, v187, &v333);
                *(void *)(v247 + 44) = -1;
                *(_DWORD *)(v247 + 52) = 0x7FFFFFFF;
                uint64_t v248 = *(void *)(a1 + 104);
                if (v316 >= (*(void *)(a1 + 112) - v248) >> 3
                  || (uint64_t v250 = *(unsigned int *)(v248 + 8 * v316),
                      unsigned int v249 = *(_DWORD *)(v248 + 8 * v316 + 4),
                      v249 == v250))
                {
LABEL_330:
                  uint64_t v251 = sub_A72C48(v208, v316, &v333);
                  *(void *)(v251 + 44) = -1;
                  *(_DWORD *)(v251 + 52) = 0x7FFFFFFF;
                  int v252 = *(_DWORD *)(a1 + 176);
                  *(_DWORD *)(a1 + 176) = v252 + 1;
                  *(_DWORD *)(v251 + 24) = v252;
                  *(_DWORD *)(v251 + 20) = DWORD2(v334);
                  goto LABEL_331;
                }
                uint64_t v257 = 56 * v250;
                uint64_t v258 = 56 * v249 - v257;
                uint64_t v259 = (_DWORD *)(*(void *)(a1 + 128) + v257 + 36);
                while (1)
                {
                  int v260 = *(v259 - 2);
                  if (v260 != 0x7FFFFFFF)
                  {
                    if (v260 <= SHIDWORD(v334) && *(v259 - 1) <= (int)v335 && *v259 <= DWORD1(v335))
                    {
                      uint64_t v251 = 0;
LABEL_331:
                      *(void *)(v251 + 44) = -1;
                      *(_DWORD *)(v251 + 52) = 0x7FFFFFFF;
                      __int16 v188 = 1;
                      int v184 = v320;
                      unint64_t v187 = v318;
LABEL_253:
                      v324 |= v188 | (v244 << 8);
LABEL_254:
                      if (++v186 != v184) {
                        goto LABEL_255;
                      }
                      if ((v324 & 0xFF00) != 0)
                      {
                        unsigned int v261 = v187;
                        sub_A731E8(v322, v316);
                        sub_A731E8(v322, v261);
                      }
                      if (!(_BYTE)v324) {
                        goto LABEL_359;
                      }
                      if (*(void *)(a1 + 240) <= v307) {
                        sub_A3E96C((uint64_t)v304, v305, 0);
                      }
                      uint64_t v262 = *v304;
                      if ((*(void *)(*v304 + 8 * (v307 >> 6)) & (1 << v307)) != 0)
                      {
LABEL_359:
                        unint64_t v10 = (unint64_t)v328;
                        BOOL v7 = (void *)((char *)v327 + 12);
                        unint64_t v327 = v7;
                        if (v7 != v328) {
                          goto LABEL_360;
                        }
LABEL_393:
                        BOOL v7 = v329;
                        unint64_t v11 = v330[0];
                        unint64_t v327 = v329;
                        int v9 = 1;
                        unsigned __int8 v331 = 1;
                        if (*(unsigned char *)(v326 + 16)) {
                          goto LABEL_394;
                        }
                        goto LABEL_10;
                      }
                      long long v264 = *(char **)(a1 + 264);
                      unint64_t v263 = *(void *)(a1 + 272);
                      if ((unint64_t)v264 < v263)
                      {
                        *(_DWORD *)long long v264 = v319;
                        uint64_t v265 = (uint64_t)(v264 + 4);
                        goto LABEL_392;
                      }
                      uint64_t v278 = (char *)*v301;
                      uint64_t v279 = v264 - (unsigned char *)*v301;
                      uint64_t v280 = v279 >> 2;
                      unint64_t v281 = (v279 >> 2) + 1;
                      if (v281 >> 62) {
                        sub_2E00();
                      }
                      uint64_t v282 = v263 - (void)v278;
                      if (v282 >> 1 > v281) {
                        unint64_t v281 = v282 >> 1;
                      }
                      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v281 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      unint64_t v325 = v281;
                      if (!v281)
                      {
                        uint64_t v283 = 0;
                        uint64_t v284 = (unsigned int *)(4 * v280);
                        *(_DWORD *)(4 * v280) = v319;
                        uint64_t v265 = 4 * v280 + 4;
                        if (v264 == v278) {
                          goto LABEL_390;
                        }
LABEL_384:
                        unint64_t v285 = v264 - 4 - v278;
                        if (v285 < 0x2C) {
                          goto LABEL_425;
                        }
                        if ((unint64_t)(v264 - &v283[v279]) < 0x20) {
                          goto LABEL_425;
                        }
                        uint64_t v286 = (v285 >> 2) + 1;
                        uint64_t v287 = 4 * (v286 & 0x7FFFFFFFFFFFFFF8);
                        long long v288 = &v264[-v287];
                        uint64_t v284 = (unsigned int *)((char *)v284 - v287);
                        unsigned int v289 = &v283[4 * v280 - 16];
                        unint64_t v290 = v264 - 16;
                        uint64_t v291 = v286 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v292 = *(_OWORD *)v290;
                          *(v289 - 1) = *((_OWORD *)v290 - 1);
                          *unsigned int v289 = v292;
                          v289 -= 2;
                          v290 -= 32;
                          v291 -= 8;
                        }
                        while (v291);
                        long long v264 = v288;
                        if (v286 != (v286 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_425:
                          do
                          {
                            unsigned int v293 = *((_DWORD *)v264 - 1);
                            v264 -= 4;
                            *--uint64_t v284 = v293;
                          }
                          while (v264 != v278);
                        }
                        goto LABEL_390;
                      }
                      if (v281 >> 62) {
                        goto LABEL_418;
                      }
                      uint64_t v283 = operator new(4 * v281);
                      uint64_t v284 = (unsigned int *)&v283[4 * v280];
                      *uint64_t v284 = v319;
                      uint64_t v265 = (uint64_t)(v284 + 1);
                      if (v264 != v278) {
                        goto LABEL_384;
                      }
LABEL_390:
                      *(void *)(a1 + 256) = v284;
                      *(void *)(a1 + 264) = v265;
                      *(void *)(a1 + 272) = &v283[4 * v325];
                      if (v278)
                      {
                        operator delete(v278);
                        uint64_t v262 = *v304;
                      }
LABEL_392:
                      *(void *)(a1 + 264) = v265;
                      *(void *)(v262 + 8 * (v307 >> 6)) |= 1 << v307;
                      unint64_t v10 = (unint64_t)v328;
                      BOOL v7 = (void *)((char *)v327 + 12);
                      unint64_t v327 = v7;
                      if (v7 == v328) {
                        goto LABEL_393;
                      }
LABEL_360:
                      int v9 = v331;
                      unint64_t v11 = v330[0];
                      if (*(unsigned char *)(v326 + 16))
                      {
LABEL_394:
                        if (v9) {
                          unint64_t v294 = v11;
                        }
                        else {
                          unint64_t v294 = v10;
                        }
                        if ((unint64_t)v7 < v294)
                        {
                          while (1)
                          {
                            unint64_t v295 = __ROR8__(*v7, 32);
                            BOOL v296 = HIDWORD(v295) != 1 || (v295 + 3) >= 2;
                            if (!v296) {
                              break;
                            }
                            if (sub_2AB7E4(**(void **)(v326 + 4120)))
                            {
                              LOBYTE(v9) = v331;
                              BOOL v7 = v327;
                              unint64_t v10 = (unint64_t)v328;
                              break;
                            }
                            unint64_t v10 = (unint64_t)v328;
                            BOOL v7 = (void *)((char *)v327 + 12);
                            unint64_t v327 = v7;
                            if (v7 == v328)
                            {
                              BOOL v7 = v329;
                              unint64_t v327 = v329;
                              LOBYTE(v9) = 1;
                              unsigned __int8 v331 = 1;
                              if ((unint64_t)v329 >= v330[0]) {
                                break;
                              }
                            }
                            else
                            {
                              LOBYTE(v9) = v331;
                              unint64_t v297 = &v328;
                              if (v331) {
                                unint64_t v297 = v330;
                              }
                              if ((unint64_t)v7 >= *v297) {
                                break;
                              }
                            }
                          }
                          unint64_t v11 = v330[0];
                        }
                      }
LABEL_10:
                      if ((_BYTE)v9) {
                        unint64_t v10 = v11;
                      }
                      if ((unint64_t)v7 >= v10) {
                        goto LABEL_3;
                      }
                      goto LABEL_13;
                    }
                    if (SHIDWORD(v334) <= v260 && (int)v335 <= *(v259 - 1) && DWORD1(v335) <= *v259) {
                      *(v259 - 2) = 0x7FFFFFFF;
                    }
                  }
                  v259 += 14;
                  v258 -= 56;
                  if (!v258) {
                    goto LABEL_330;
                  }
                }
              }
              uint64_t v221 = *(void *)(a1 + 120);
              if (v220 <= (v221 - (uint64_t)v190) >> 3)
              {
                size_t v226 = 8 * v220;
                bzero(v190, v226);
                int v184 = v320;
                *(void *)(a1 + 112) = &v190[v226];
LABEL_313:
                unsigned int v189 = *(char **)(a1 + 104);
                uint64_t v219 = *(void *)(a1 + 128);
                unint64_t v208 = (char **)(a1 + 104);
                unint64_t v187 = v318;
                goto LABEL_314;
              }
              uint64_t v222 = (v190 - v189) >> 3;
              unint64_t v223 = v222 + v220;
              if ((v222 + v220) >> 61) {
                sub_2E00();
              }
              uint64_t v224 = v221 - (void)v189;
              if (v224 >> 2 > v223) {
                unint64_t v223 = v224 >> 2;
              }
              if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
              }
              unint64_t v312 = v223;
              if (v223)
              {
                if (v223 >> 61) {
                  goto LABEL_418;
                }
                int v225 = (char *)operator new(8 * v223);
              }
              else
              {
                int v225 = 0;
              }
              unsigned int v310 = v225;
              uint64_t v227 = &v225[8 * v222];
              bzero(v227, 8 * v220);
              if (v190 == v189)
              {
                unsigned int v230 = v227;
                int v184 = v320;
                long long v232 = v310;
                goto LABEL_311;
              }
              unint64_t v228 = v190 - 8 - v189;
              int v184 = v320;
              if (v228 >= 0x58)
              {
                long long v232 = v310;
                if ((unint64_t)(v189 - v310) >= 0x20)
                {
                  uint64_t v233 = (v228 >> 3) + 1;
                  uint64_t v234 = 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v229 = &v190[-v234];
                  unsigned int v230 = &v227[-v234];
                  unsigned int v235 = &v310[8 * ((v190 - v189) >> 3) - 16];
                  unint64_t v236 = (long long *)(v190 - 16);
                  uint64_t v237 = v233 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v238 = *v236;
                    *((_OWORD *)v235 - 1) = *(v236 - 1);
                    *(_OWORD *)unsigned int v235 = v238;
                    v235 -= 32;
                    v236 -= 2;
                    v237 -= 4;
                  }
                  while (v237);
                  uint64_t v231 = (void **)(a1 + 104);
                  if (v233 == (v233 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_310;
                  }
                }
                else
                {
                  unint64_t v229 = v190;
                  unsigned int v230 = v227;
                  uint64_t v231 = (void **)(a1 + 104);
                }
              }
              else
              {
                unint64_t v229 = v190;
                unsigned int v230 = v227;
                uint64_t v231 = (void **)(a1 + 104);
                long long v232 = v310;
              }
              do
              {
                uint64_t v239 = *((void *)v229 - 1);
                v229 -= 8;
                *((void *)v230 - 1) = v239;
                v230 -= 8;
              }
              while (v229 != v189);
LABEL_310:
              uint64_t v190 = (char *)*v231;
LABEL_311:
              *(void *)(a1 + 104) = v230;
              *(void *)(a1 + 112) = &v227[8 * v220];
              *(void *)(a1 + 120) = &v232[8 * v312];
              if (v190)
              {
                operator delete(v190);
                int v184 = v320;
              }
              goto LABEL_313;
            }
            uint64_t v100 = 1;
            uint64_t v101 = v87 - v81;
            if ((unint64_t)(v101 >> 2) > 1) {
              uint64_t v100 = v101 >> 2;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              if (v102 >> 61) {
                goto LABEL_418;
              }
              uint64_t v103 = (char *)operator new(8 * v102);
              uint64_t v104 = v103;
              *(void *)uint64_t v103 = 0;
              uint64_t v105 = (uint64_t)(v103 + 8);
              if (v98 != v81)
              {
LABEL_134:
                unint64_t v106 = v98 - 8 - v81;
                if (v106 >= 0x58 && (unint64_t)(v98 - v103) >= 0x20)
                {
                  uint64_t v266 = (v106 >> 3) + 1;
                  uint64_t v267 = 8 * (v266 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v107 = &v98[-v267];
                  v104 -= v267;
                  int v268 = v103 - 16;
                  unint64_t v269 = v98 - 16;
                  uint64_t v270 = v266 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v271 = *(_OWORD *)v269;
                    *((_OWORD *)v268 - 1) = *((_OWORD *)v269 - 1);
                    *(_OWORD *)int v268 = v271;
                    v268 -= 32;
                    v269 -= 32;
                    v270 -= 4;
                  }
                  while (v270);
                  if (v266 == (v266 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_138:
                    unint64_t v98 = (char *)*v322;
                    *(void *)(a1 + 104) = v104;
                    *(void *)(a1 + 112) = v105;
                    *(void *)(a1 + 120) = &v103[8 * v102];
                    if (!v98) {
                      goto LABEL_140;
                    }
LABEL_139:
                    operator delete(v98);
                    goto LABEL_140;
                  }
                }
                else
                {
                  uint64_t v107 = v98;
                }
                do
                {
                  uint64_t v108 = *((void *)v107 - 1);
                  v107 -= 8;
                  *((void *)v104 - 1) = v108;
                  v104 -= 8;
                }
                while (v107 != v81);
                goto LABEL_138;
              }
            }
            else
            {
              uint64_t v103 = 0;
              uint64_t v104 = 0;
              *(void *)&def_332C = 0;
              uint64_t v105 = 8;
              if (v98 != v81) {
                goto LABEL_134;
              }
            }
            *(void *)(a1 + 104) = v104;
            *(void *)(a1 + 112) = v105;
            *(void *)(a1 + 120) = &v103[8 * v102];
            if (!v98) {
              goto LABEL_140;
            }
            goto LABEL_139;
          }
          uint64_t v54 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v54) & v29;
            uint64_t v55 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v55;
            unsigned int v35 = v55[1];
            ++v54;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_81;
            }
          }
LABEL_75:
          if (v33 == -1)
          {
            uint64_t v39 = -1;
            goto LABEL_82;
          }
          uint64_t v46 = v30 + 12 * v33;
          unsigned int v47 = *(_DWORD *)(v46 + 8);
          if (v47 != -1) {
            goto LABEL_110;
          }
LABEL_91:
          int v61 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v61 + 1;
          *(_DWORD *)(v46 + 8) = v61;
          int v63 = *(char **)(v13 + 96);
          unint64_t v62 = *(void *)(v13 + 104);
          if ((unint64_t)v63 < v62)
          {
            *(void *)int v63 = v12;
            uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
            *(void *)(v13 + 96) = v64;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            goto LABEL_110;
          }
          uint64_t v65 = (char **)(v13 + 88);
          unsigned int v66 = *(char **)(v13 + 88);
          uint64_t v67 = (v63 - v66) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v69 = v62 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v323 = v68;
          if (v68)
          {
            if (v68 >> 61) {
              goto LABEL_418;
            }
            uint64_t v70 = (char *)operator new(8 * v68);
            uint64_t v65 = (char **)(v13 + 88);
            uint64_t v71 = &v70[8 * v67];
            *(void *)uint64_t v71 = v12;
            uint64_t v64 = (uint64_t)(v71 + 8);
            if (v63 != v66)
            {
LABEL_101:
              unint64_t v72 = v63 - 8 - v66;
              if (v72 < 0x58) {
                goto LABEL_426;
              }
              if ((unint64_t)(v66 - v70) < 0x20) {
                goto LABEL_426;
              }
              uint64_t v73 = (v72 >> 3) + 1;
              uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v75 = &v63[-v74];
              v71 -= v74;
              unsigned int v76 = &v70[8 * v67 - 16];
              BOOL v77 = (long long *)(v63 - 16);
              uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v77;
                *((_OWORD *)v76 - 1) = *(v77 - 1);
                *(_OWORD *)unsigned int v76 = v79;
                v76 -= 32;
                v77 -= 2;
                v78 -= 4;
              }
              while (v78);
              int v63 = v75;
              if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_426:
                do
                {
                  uint64_t v80 = *((void *)v63 - 1);
                  v63 -= 8;
                  *((void *)v71 - 1) = v80;
                  v71 -= 8;
                }
                while (v63 != v66);
              }
              int v63 = *v65;
              *(void *)(v13 + 88) = v71;
              *(void *)(v13 + 96) = v64;
              *(void *)(v13 + 104) = &v70[8 * v323];
              if (!v63) {
                goto LABEL_109;
              }
LABEL_108:
              operator delete(v63);
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v70 = 0;
            uint64_t v71 = (char *)(8 * v67);
            *(void *)(8 * v67) = v12;
            uint64_t v64 = 8 * v67 + 8;
            if (v63 != v66) {
              goto LABEL_101;
            }
          }
          *(void *)(v13 + 88) = v71;
          *(void *)(v13 + 96) = v64;
          *(void *)(v13 + 104) = &v70[8 * v323];
          if (!v63) {
            goto LABEL_109;
          }
          goto LABEL_108;
        }
LABEL_57:
        uint64_t v49 = *(void *)(v13 + 40);
        uint64_t v48 = *(void *)(v13 + 48);
        if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
          goto LABEL_419;
        }
        uint64_t v50 = *(void *)(v13 + 80);
        if (v49
          && ((char v51 = (_DWORD *)(v50 + 12 * v25), *(_DWORD *)(v13 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v13 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v13 + 40) = v49 - 1;
        }
        else
        {
          *(void *)(v13 + 48) = v48 + 1;
        }
        uint64_t v53 = v50 + 12 * v25;
        *(void *)uint64_t v53 = v12;
        *(_DWORD *)(v53 + 8) = -1;
        uint64_t v46 = *(void *)(v13 + 80) + 12 * v25;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 == -1) {
          goto LABEL_91;
        }
        goto LABEL_110;
      }
      uint64_t v25 = -1;
      uint64_t v26 = 1;
      do
      {
        if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
        {
          if (v25 == -1) {
            uint64_t v25 = v20;
          }
        }
        else if (__PAIR64__(v22, v23) == v12)
        {
          goto LABEL_53;
        }
        uint64_t v20 = (v20 + v26) & v14;
        unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v27;
        unsigned int v22 = v27[1];
        ++v26;
      }
      while (v18 != v22 || v19 != v23);
      if (v25 != -1)
      {
        if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
          goto LABEL_31;
        }
        goto LABEL_57;
      }
    }
LABEL_56:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_411:
  double result = sub_72688((uint64_t)v332) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A71048(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7105C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A71070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A71084(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A71098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A710AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A710C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A710D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A710E8(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  unint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    int v211 = v8;
    int v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      int v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          unint64_t v72 = &v71[8 * v67];
          *(void *)unint64_t v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          int v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          int v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unint64_t v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)int v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      int v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          unsigned int v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            uint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              uint64_t v101 = v200;
              goto LABEL_135;
            }
            uint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            unint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        unint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        unint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        long long v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        unint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          unint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        long long v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            long long v215 = v10;
            if (v10 == v216)
            {
              __int16 v188 = v213 + 2;
              unint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                unint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              long long v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        uint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)uint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          int v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          char v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          uint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        uint64_t v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)unint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                long long v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                *uint64_t v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              uint64_t v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        unint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            uint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            unint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            uint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)unint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        long long v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A72020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A72034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A72048(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_A72354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_A723A0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A724E0((uint64_t)v4, 0);
      sub_A7395C(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 56 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 56 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 56;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 56 * v7;
    uint64_t v9 = v6 + 56 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

char *sub_A724E0(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = a2;
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        *(void *)(a1 + 8) = v6;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v5 = *(char **)a1;
      uint64_t v6 = *(char **)(a1 + 8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 24);
  unsigned int v10 = *(_DWORD *)&v5[8 * v4];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 > v11)
    {
      sub_D2BFC((void **)a1, v12 - v11);
      uint64_t v5 = *(char **)a1;
      uint64_t v13 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v12 < v11) {
      *(void *)(a1 + 8) = &v5[8 * v12];
    }
  }
  uint64_t v13 = v9;
LABEL_12:
  uint64_t v14 = (unsigned char *)(v13 + 56 * *(unsigned int *)&v5[8 * v4 + 4]);

  return sub_A72724((void **)a1, v4, (char *)(v9 + 56 * v10), v14);
}

BOOL sub_A725CC(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A73590(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A73590(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    uint64_t v22 = *(void *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    uint64_t v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) <= a6)
    {
      __int16 v23 = sub_A73684((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A731E8(a1, a3);
    sub_A731E8(a1, a4);
  }
  return v13 != 0;
}

char *sub_A72724(void **a1, unsigned int a2, char *__dst, unsigned char *__src)
{
  unint64_t v8 = a2;
  unsigned int v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  unint64_t v11 = (v9 - (unsigned char *)*a1) >> 3;
  if (v11 <= a2)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11)
      {
        int v9 = &v10[8 * v12];
        a1[1] = v9;
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unsigned int v10 = (char *)*a1;
      int v9 = (char *)a1[1];
    }
  }
  unint64_t v13 = (v9 - v10) >> 3;
  uint64_t v14 = v10;
  if (v13 <= v8)
  {
    unint64_t v15 = a2 + 1;
    if (v15 <= v13)
    {
      uint64_t v14 = v10;
      if (v15 < v13)
      {
        a1[1] = &v10[8 * v15];
        uint64_t v14 = v10;
      }
    }
    else
    {
      sub_D2BFC(a1, v15 - v13);
      uint64_t v14 = (char *)*a1;
    }
  }
  unint64_t v16 = (unint64_t)a1[3];
  if ((unsigned char *)(v16 + 56 * *(unsigned int *)&v14[8 * v8 + 4]) == __src)
  {
    v19.i64[0] = (uint64_t)__dst;
    v19.i64[1] = (uint64_t)__src;
    int64x2_t v20 = vsubq_s64(v19, vdupq_n_s64(v16));
    int64x2_t v21 = vshrq_n_s64(v20, 3uLL);
    v23.i64[0] = 0x6DB6DB6DB6DB6DB7 * v21.i64[0];
    __int32 v22 = v23.i32[0];
    v23.i64[1] = 0x6DB6DB6DB6DB6DB7 * v21.i64[1];
    int8x16_t v24 = vbslq_s8((int8x16_t)vcgtq_s64(v20, vdupq_n_s64(0xFFFFFFFFFFFFFFC8)), (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v23), 6uLL)));
    uint64_t v25 = (char *)a1[6] + 8 * v24.i64[0];
    unint64_t v26 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
    if (v26)
    {
      if ((v23.i8[0] & 0x3F) != 0)
      {
        if (64 - (v23.i8[0] & 0x3Fu) >= v26) {
          unint64_t v27 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
        }
        else {
          unint64_t v27 = 64 - (v23.i8[0] & 0x3Fu);
        }
        *(void *)v25 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v23.i8[0] & 0x3Fu) - v27)) & (-1 << (v23.i8[0] & 0x3F)));
        v25 += 8;
        v26 -= v27;
      }
      if (v26 >= 0x40) {
        bzero(v25, 8 * (v26 >> 6));
      }
      if ((v26 & 0x3F) != 0) {
        *(void *)&v25[8 * (v26 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v26 & 0x3F));
      }
    }
    *(_DWORD *)&v10[8 * v8 + 4] = v22;
  }
  else
  {
    unint64_t v17 = ((unsigned char *)a1[1] - v14) >> 3;
    if (v17 <= v8)
    {
      unint64_t v18 = a2 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17) {
          a1[1] = &v14[8 * v18];
        }
      }
      else
      {
        sub_D2BFC(a1, v18 - v17);
        uint64_t v14 = (char *)*a1;
        unint64_t v16 = (unint64_t)a1[3];
      }
    }
    if ((char *)(v16 + 56 * *(unsigned int *)&v14[8 * v8]) == __dst)
    {
      uint64_t v30 = (__int32 *)&v10[8 * v8];
      v31.i64[0] = (uint64_t)__dst;
      v31.i64[1] = (uint64_t)__src;
      int64x2_t v32 = vsubq_s64(v31, vdupq_n_s64(v16));
      int64x2_t v33 = vshrq_n_s64(v32, 3uLL);
      v35.i64[0] = 0x6DB6DB6DB6DB6DB7 * v33.i64[0];
      v35.i64[1] = 0x6DB6DB6DB6DB6DB7 * v33.i64[1];
      __int32 v34 = v35.i32[2];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcgtq_s64(v32, vdupq_n_s64(0xFFFFFFFFFFFFFFC8)), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v35), 6uLL)));
      uint64_t v37 = (char *)a1[6] + 8 * v36.i64[0];
      unint64_t v38 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
      if (v38)
      {
        if ((v35.i8[0] & 0x3F) != 0)
        {
          if (64 - (v35.i8[0] & 0x3Fu) >= v38) {
            unint64_t v39 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
          }
          else {
            unint64_t v39 = 64 - (v35.i8[0] & 0x3Fu);
          }
          *(void *)v37 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v35.i8[0] & 0x3Fu) - v39)) & (-1 << (v35.i8[0] & 0x3F)));
          v37 += 8;
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          bzero(v37, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          *(void *)&v37[8 * (v38 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F));
        }
      }
      *uint64_t v30 = v34;
      return __src;
    }
    else
    {
      unint64_t v28 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v28 <= v8)
      {
        unint64_t v29 = a2 + 1;
        if (v29 <= v28)
        {
          if (v29 < v28) {
            a1[1] = &v14[8 * v29];
          }
        }
        else
        {
          sub_D2BFC(a1, v29 - v28);
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      uint64_t v40 = (unsigned char *)(v16 + 56 * *(unsigned int *)&v14[8 * v8 + 4]);
      int64_t v41 = v40 - __src;
      if (v40 != __src)
      {
        memmove(__dst, __src, v40 - __src);
        unint64_t v16 = (unint64_t)a1[3];
        uint64_t v14 = (char *)*a1;
      }
      int v42 = &__dst[v41];
      uint64_t v43 = (char *)a1[6];
      unint64_t v44 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v42[-v16] >> 3);
      if ((uint64_t)&v42[-v16] <= -56) {
        uint64_t v45 = -(uint64_t)((63 - v44) >> 6);
      }
      else {
        uint64_t v45 = v44 >> 6;
      }
      uint64_t v46 = &v43[8 * v45];
      unint64_t v47 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v47 <= v8)
      {
        unint64_t v48 = a2 + 1;
        if (v48 <= v47)
        {
          if (v48 < v47) {
            a1[1] = &v14[8 * v48];
          }
        }
        else
        {
          sub_D2BFC(a1, v48 - v47);
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      unint64_t v49 = *(unsigned int *)&v14[8 * v8 + 4];
      unint64_t v50 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
      if (v50)
      {
        if ((v44 & 0x3F) != 0)
        {
          if (64 - (v44 & 0x3F) >= v50) {
            uint64_t v51 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
          }
          else {
            uint64_t v51 = 64 - (v44 & 0x3F);
          }
          *(void *)v46 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v44 & 0x3Fu) - v51)) & (-1 << (v44 & 0x3F)));
          v46 += 8;
          v50 -= v51;
        }
        if (v50 >= 0x40) {
          bzero(v46, 8 * (v50 >> 6));
        }
        if ((v50 & 0x3F) != 0) {
          *(void *)&v46[8 * (v50 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v50 & 0x3F));
        }
      }
      *(_DWORD *)&v10[8 * v8 + 4] = -1227133513 * ((unint64_t)&v42[-v16] >> 3);
    }
  }
  return __dst;
}

uint64_t sub_A72C48(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    uint64_t v41 = (uint64_t)&a1[3][56 * v11];
    long long v42 = *a3;
    long long v43 = a3[1];
    long long v44 = a3[2];
    *(void *)(v41 + 48) = *((void *)a3 + 6);
    *(_OWORD *)(v41 + 16) = v43;
    *(_OWORD *)(v41 + 32) = v44;
    *(_OWORD *)uint64_t v41 = v42;
    unint64_t v45 = *(unsigned int *)v9;
    *(void *)&a1[6][(v45 >> 3) & 0x1FFFFFF8] |= 1 << v45;
    return (uint64_t)&a1[3][56 * v45];
  }
  else
  {
    unint64_t v13 = (unsigned int *)(v9 + 4);
    unint64_t v12 = *((unsigned int *)v9 + 1);
    uint64_t v14 = a1[3];
    unint64_t v15 = a1[4];
    unint64_t v16 = (uint64_t *)(a1 + 3);
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3);
    if (v17 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v18 = a1[1] - v6;
      unsigned int v19 = v12 - 1227133513 * ((v15 - v14) >> 3) - v10;
      unint64_t v20 = 2 * (v12 - v10) + 2;
      if (v5 < v18 >> 3) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = v17;
      }
      if (v5 < v18 >> 3) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = 2;
      }
      unint64_t v53 = v21;
      if (v17 >= v22 + v17)
      {
        if (v17 > v22 + v17)
        {
          unint64_t v15 = &v14[56 * v22 + 56 * v17];
          a1[4] = v15;
        }
      }
      else
      {
        sub_A733A0((void **)a1 + 3, v22);
        uint64_t v14 = a1[3];
        unint64_t v15 = a1[4];
      }
      int64x2_t v23 = a1 + 6;
      sub_A3E96C((uint64_t)v23, 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3), 0);
      unsigned int v24 = *(_DWORD *)v9;
      unsigned int v25 = *(_DWORD *)v9;
      if (*v13 != *(_DWORD *)v9)
      {
        memmove((void *)(*v16 + 56 * v17), (const void *)(*v16 + 56 * v24), *v16 + 56 * *v13 - (*v16 + 56 * v24));
        unsigned int v25 = *(_DWORD *)v9;
        unsigned int v24 = *v13;
      }
      uint64_t v52 = v23;
      uint64_t v26 = *v23;
      unint64_t v27 = (void *)(v26 + 8 * (v25 >> 6));
      uint64_t v28 = v25 & 0x3F;
      unint64_t v29 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
      if (v29)
      {
        if ((v25 & 0x3F) != 0)
        {
          if ((64 - v28) >= v29) {
            uint64_t v30 = (v24 & 0x3F) - v28 + 8 * (8 * (v24 >> 6) - 8 * (v25 >> 6));
          }
          else {
            uint64_t v30 = (64 - v28);
          }
          *v27++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v28 - v30)) & (-1 << v28));
          v29 -= v30;
        }
        if (v29 >= 0x40) {
          bzero(v27, 8 * (v29 >> 6));
        }
        if ((v29 & 0x3F) != 0) {
          v27[v29 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v29 & 0x3F));
        }
      }
      int64x2_t v31 = (void *)(v26 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      unint64_t v32 = (v53 & 0x3F)
          - (v17 & 0x3F)
          + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      if (v32)
      {
        if ((v17 & 0x3F) != 0)
        {
          if (64 - (v17 & 0x3F) >= v32) {
            unint64_t v33 = (v53 & 0x3F)
          }
                - (v17 & 0x3F)
                + 8 * (((v53 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
          else {
            unint64_t v33 = 64 - (v17 & 0x3F);
          }
          *v31++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v17 & 0x3Fu) - v33)) & (-1 << (v17 & 0x3F));
          v32 -= v33;
        }
        if (v32 >= 0x40) {
          memset(v31, 255, 8 * (v32 >> 6));
        }
        if ((v32 & 0x3F) != 0) {
          v31[v32 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v32 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v17;
      unsigned int *v13 = v53;
      uint64_t v34 = *v16 + 56 * v53;
      long long v35 = *a3;
      long long v36 = a3[1];
      long long v37 = a3[2];
      *(void *)(v34 + 48) = *((void *)a3 + 6);
      *(_OWORD *)(v34 + 16) = v36;
      *(_OWORD *)(v34 + 32) = v37;
      *(_OWORD *)uint64_t v34 = v35;
      unint64_t v38 = *v13;
      *(void *)(*v52 + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
      uint64_t v39 = *v16;
      unsigned int *v13 = v38 + 1;
      return v39 + 56 * v38;
    }
    else
    {
      uint64_t v46 = &v14[56 * v12];
      long long v47 = *a3;
      long long v48 = a3[1];
      long long v49 = a3[2];
      *((void *)v46 + 6) = *((void *)a3 + 6);
      *((_OWORD *)v46 + 1) = v48;
      *((_OWORD *)v46 + 2) = v49;
      *(_OWORD *)uint64_t v46 = v47;
      unint64_t v50 = *v13;
      *(void *)&a1[6][(v50 >> 3) & 0x1FFFFFF8] |= 1 << v50;
      uint64_t v51 = a1[3];
      unsigned int *v13 = v50 + 1;
      return (uint64_t)&v51[56 * v50];
    }
  }
}

unint64_t sub_A73078(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    unint64_t v11 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v9 = *v11;
    unsigned int v10 = v11[1];
    if (v10 != v9)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = 56 * v9;
      unint64_t v17 = (_DWORD *)(56 * v9 + *(void *)(a1 + 24) + 36);
      uint64_t v18 = 56 * v10 - v16;
      while (1)
      {
        int v19 = *(v17 - 2);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 <= v20 && *(v17 - 1) <= *(_DWORD *)(a2 + 32) && *v17 <= *(_DWORD *)(a2 + 36)) {
            return (unint64_t)v12 << 8;
          }
          if (v20 <= v19 && *(_DWORD *)(a2 + 32) <= *(v17 - 1) && *(_DWORD *)(a2 + 36) <= *v17)
          {
            *(v17 - 2) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
        v17 += 14;
        v18 -= 56;
        if (!v18) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  uint64_t v13 = sub_A72C48((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 44) = -1;
    *(_DWORD *)(v13 + 52) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *(_DWORD *)(v13 + 24) = v14;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

char *sub_A731E8(void **a1, unsigned int a2)
{
  unint64_t v4 = a2;
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = (v6 - (unsigned char *)*a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        a1[1] = v6;
      }
    }
    else
    {
      sub_D2BFC(a1, v8 - v7);
      unint64_t v5 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
    }
  }
  uint64_t v9 = (char *)a1[3];
  unsigned int v10 = &v9[56 * *(unsigned int *)&v5[8 * v4]];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11) {
        a1[1] = &v5[8 * v12];
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unint64_t v5 = (char *)*a1;
      uint64_t v9 = (char *)a1[3];
    }
  }
  uint64_t v13 = (long long *)&v9[56 * *(unsigned int *)&v5[8 * v4 + 4]];
  if (v10 != (char *)v13)
  {
    while (*((_DWORD *)v10 + 7) != 0x7FFFFFFF)
    {
      v10 += 56;
      if (v10 == (char *)v13)
      {
        unsigned int v10 = &v9[56 * *(unsigned int *)&v5[8 * v4 + 4]];
        goto LABEL_22;
      }
    }
    if (v10 != (char *)v13)
    {
      int v14 = (long long *)(v10 + 56);
      if (v10 + 56 != (char *)v13)
      {
        do
        {
          if (*((_DWORD *)v14 + 7) != 0x7FFFFFFF)
          {
            long long v15 = *v14;
            long long v16 = v14[1];
            long long v17 = v14[2];
            *((void *)v10 + 6) = *((void *)v14 + 6);
            *((_OWORD *)v10 + 1) = v16;
            *((_OWORD *)v10 + 2) = v17;
            *(_OWORD *)unsigned int v10 = v15;
            v10 += 56;
          }
          int v14 = (long long *)((char *)v14 + 56);
        }
        while (v14 != v13);
        unint64_t v5 = (char *)*a1;
      }
    }
  }
LABEL_22:
  unint64_t v18 = ((unsigned char *)a1[1] - v5) >> 3;
  if (v18 <= v4)
  {
    unint64_t v19 = a2 + 1;
    if (v19 <= v18)
    {
      if (v19 < v18) {
        a1[1] = &v5[8 * v19];
      }
    }
    else
    {
      sub_D2BFC(a1, v19 - v18);
      unint64_t v5 = (char *)*a1;
    }
  }
  int v20 = (char *)a1[3] + 56 * *(unsigned int *)&v5[8 * v4 + 4];

  return sub_A72724(a1, v4, v10, v20);
}

void sub_A733A0(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = (_OWORD *)((char *)v4 + 56 * a2);
      do
      {
        _OWORD *v4 = xmmword_20E2060;
        v4[1] = xmmword_20EB780;
        v4[2] = xmmword_20EB790;
        *((void *)v4 + 6) = 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v4 = (_OWORD *)((char *)v4 + 56);
      }
      while (v4 != v11);
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v9 = 0x492492492492492;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x492492492492492) {
        sub_188D718();
      }
      unsigned int v10 = (char *)operator new(56 * v9);
    }
    else
    {
      unsigned int v10 = 0;
    }
    unint64_t v12 = &v10[56 * v6];
    uint64_t v13 = &v12[56 * a2];
    int v14 = v12;
    do
    {
      *(_OWORD *)int v14 = xmmword_20E2060;
      *((_OWORD *)v14 + 1) = xmmword_20EB780;
      *((_OWORD *)v14 + 2) = xmmword_20EB790;
      *((void *)v14 + 6) = 0x7FFFFFFFFFFFFFFFLL;
      v14 += 56;
    }
    while (v14 != v13);
    long long v15 = &v10[56 * v9];
    long long v17 = (char *)*a1;
    long long v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 56);
        long long v19 = *(_OWORD *)(v16 - 40);
        long long v20 = *(_OWORD *)(v16 - 24);
        *((void *)v12 - 1) = *((void *)v16 - 1);
        *(_OWORD *)(v12 - 24) = v20;
        *(_OWORD *)(v12 - 40) = v19;
        *(_OWORD *)(v12 - 56) = v18;
        v12 -= 56;
        v16 -= 56;
      }
      while (v16 != v17);
      long long v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
    {
      operator delete(v16);
    }
  }
}

uint64_t sub_A73590(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (v4 = (int *)(*a1 + 8 * a2), int v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (0x6DB6DB6DB6DB6DB7 * ((a1[4] - v6) >> 3) <= v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + 56 * v5;
}

void sub_A7365C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A73670(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_A73684(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A7381C(a1, (_DWORD *)a2, a5) & 1) == 0)
  {
    unint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      uint64_t v13 = *(unsigned int *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v18 = 56 * v13;
        uint64_t v19 = 56 * v12 - v18;
        long long v20 = (_DWORD *)(v18 + *(void *)(a1 + 24) + 36);
        while (1)
        {
          int v21 = *(v20 - 2);
          if (v21 != 0x7FFFFFFF)
          {
            int v22 = *(_DWORD *)(a2 + 28);
            if (v21 <= v22 && *(v20 - 1) <= *(_DWORD *)(a2 + 32) && *v20 <= *(_DWORD *)(a2 + 36))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            if (v22 <= v21 && *(_DWORD *)(a2 + 32) <= *(v20 - 1) && *(_DWORD *)(a2 + 36) <= *v20)
            {
              *(v20 - 2) = 0x7FFFFFFF;
              unsigned __int8 v10 = 1;
            }
          }
          v20 += 14;
          v19 -= 56;
          if (!v19) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A72C48((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 44) = -1;
    *(_DWORD *)(v14 + 52) = 0x7FFFFFFF;
    unsigned int v15 = a3;
    uint64_t v9 = 1;
    sub_A73078(a1, a2, v15, 1, 1);
    *(void *)(v16 + 44) = -1;
    *(_DWORD *)(v16 + 52) = 0x7FFFFFFF;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A7381C(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        unint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      unint64_t v7 = *(char **)a1;
      unint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      unint64_t v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = (_DWORD *)(v11 + 56 * v12);
  long long v17 = (_DWORD *)(v15 + 56 * *(unsigned int *)&v7[8 * v6 + 4]);
  if (v16 == v17) {
    return 0;
  }
  while (1)
  {
    int v18 = v16[7];
    BOOL v19 = v18 != 0x7FFFFFFF && v18 <= a2[7];
    if (v19 && v16[8] <= a2[8] && v16[9] <= a2[9]) {
      break;
    }
    v16 += 14;
    if (v16 == v17) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A7395C(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A73590(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      uint64_t v30 = *(void *)(v12 + 48);
      long long v28 = v14;
      long long v29 = v13;
      long long v27 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        uint64_t v18 = *(unsigned int *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 56 * v18;
          uint64_t v24 = 56 * v17 - v23;
          unsigned int v25 = &a1[3][v23 + 36];
          while (1)
          {
            int v26 = *((_DWORD *)v25 - 2);
            if (v26 != 0x7FFFFFFF)
            {
              if (v26 <= SHIDWORD(v28) && *((_DWORD *)v25 - 1) <= (int)v29 && *(_DWORD *)v25 <= DWORD1(v29))
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              if (SHIDWORD(v28) <= v26 && (int)v29 <= *((_DWORD *)v25 - 1) && DWORD1(v29) <= *(_DWORD *)v25)
              {
                *((_DWORD *)v25 - 2) = 0x7FFFFFFF;
                int v19 = 1;
              }
            }
            v25 += 56;
            v24 -= 56;
            if (!v24) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A72C48(a1, v11, &v27);
      *(void *)(v20 + 44) = -1;
      *(_DWORD *)(v20 + 52) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A731E8((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A73B30(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v256 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v223 = *(_DWORD *)sub_A3F74C(v4 + 35, &v256);
  unint64_t v227 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v254, v4[3], v5);
  __int16 v7 = v254;
  if ((unint64_t)v254 < v255)
  {
    unint64_t v8 = (char *)(v4 + 13);
    unsigned int v230 = (void **)(v4 + 13);
    uint64_t v231 = (uint64_t)(v4 + 45);
    int v222 = a2 + 2;
    int v220 = ~a2;
    uint64_t v221 = v4 + 23;
    int v224 = a2 + 1;
    unint64_t v228 = HIDWORD(v5);
    unint64_t v229 = v4;
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v225 = *(unsigned int *)v7;
      sub_A724E0((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v242, v4[3], v227, v223, 0, 1);
      unint64_t v9 = v246;
      BOOL v10 = (unint64_t)v246 < v245 || (unint64_t)v246 >= v247;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v254 + 4;
      uint64_t v254 = v7;
      if ((unint64_t)v7 >= v255) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = v4[4];
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        long long v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        unint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_295;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            unsigned int v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_295:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_295;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v241 = v46;
        uint64_t result = sub_BD5C18(v231, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_119;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        unint64_t *v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_118;
      }
      BOOL v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v79)
      {
        if (v79 >> 61) {
          goto LABEL_297;
        }
        unint64_t v81 = v79;
        unsigned int v82 = (char *)operator new(8 * v79);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 == (unint64_t *)v77)
        {
LABEL_109:
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          int v4 = v229;
          unint64_t v8 = (char *)v230;
          if (v75) {
            goto LABEL_117;
          }
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v81 = 0;
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 == (unint64_t *)v77) {
          goto LABEL_109;
        }
      }
      unint64_t v84 = (char *)(v75 - 1) - v77;
      if (v84 < 0x58) {
        goto LABEL_301;
      }
      if ((unint64_t)(v77 - v82) < 0x20) {
        goto LABEL_301;
      }
      uint64_t v85 = (v84 >> 3) + 1;
      uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      int v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v83 = (unint64_t *)((char *)v83 - v86);
      uint64_t v88 = &v82[8 * v78 - 16];
      unint64_t v89 = v75 - 2;
      uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v91 = *(_OWORD *)v89;
        *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
        *(_OWORD *)uint64_t v88 = v91;
        v88 -= 32;
        v89 -= 4;
        v90 -= 4;
      }
      while (v90);
      uint64_t v75 = v87;
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_301:
        do
        {
          unint64_t v92 = *--v75;
          *--unint64_t v83 = v92;
        }
        while (v75 != (unint64_t *)v77);
      }
      uint64_t v75 = *(unint64_t **)(v12 + 88);
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      int v4 = v229;
      unint64_t v8 = (char *)v230;
      if (v75) {
LABEL_117:
      }
        operator delete(v75);
LABEL_118:
      *(void *)(v12 + 96) = v76;
      unsigned int v241 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v231, v241, v11);
      if (result)
      {
LABEL_51:
        long long v47 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] != v47)
        {
          uint64_t v49 = *v47;
          unsigned int v48 = v47[1];
          if (v48 != v49)
          {
            int v50 = v251;
            uint64_t v51 = v249;
            uint64_t v52 = v244;
            unint64_t v53 = ((unint64_t)v246 - v245) >> 4;
            uint64_t v54 = 56 * v49;
            uint64_t v55 = 56 * v48 - v54;
            uint64_t v56 = (int *)(v4[16] + v54 + 52);
            do
            {
              unsigned int v59 = *(v56 - 2);
              if (v50)
              {
                unsigned int v252 = *(v56 - 1);
                int v57 = *v56;
                int v253 = *v56;
              }
              else
              {
                int v57 = *(_DWORD *)(v51 + 12 * v59);
              }
              BOOL v58 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
              *(v56 - 6) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v53)
                                                        + 1]
                                           + *v58)
                         + v57;
              v56 += 14;
              v55 -= 56;
            }
            while (v55);
            uint64_t v250 = (int *)(v51 + 12 * v59);
            sub_A74EE4(v8, 0);
            if ((*((unsigned char *)v246 + 15) & 1) != 0
              && (!v248
               || (*(_DWORD *)(v248 + 4 * (((unint64_t)v246 - v245) >> 4)) & v225) == 0))
            {
              int v97 = *((_DWORD *)v4 + 24);
              if (*((unsigned char *)v4 + 20))
              {
                unsigned int v98 = v97 + v97 * *((_DWORD *)v4 + 88);
                unint64_t v99 = v241;
                uint64_t v100 = (unint64_t *)v4[6];
                if (v100) {
                  goto LABEL_130;
                }
LABEL_137:
                int v104 = 2147483646;
              }
              else
              {
                unsigned int v98 = -1;
                unint64_t v99 = v241;
                uint64_t v100 = (unint64_t *)v4[6];
                if (!v100) {
                  goto LABEL_137;
                }
LABEL_130:
                if (*v100 > v99)
                {
                  unsigned int v101 = 0;
                  unsigned int v102 = *((_DWORD *)v4 + 25) + v220;
                  unsigned int v103 = v102;
                  while (v101 <= v102)
                  {
                    int v104 = *(_DWORD *)sub_A3F53C(v100 + 2, v100[1] * v99 + v103);
                    v101 += 2;
                    v103 -= 2;
                    if (v104 != 0x7FFFFFFF) {
                      goto LABEL_138;
                    }
                  }
                }
                int v104 = 0x7FFFFFFF;
              }
LABEL_138:
              unint64_t v8 = (char *)v230;
              int v4 = v229;
              if (sub_A7514C(v230, 0, v222 + v97 + v97 * v99, v97 + v97 * v99, v98, v104)) {
                sub_A3EF14(v221, &v241);
              }
            }
            uint64_t v105 = (char *)v4[13];
            unint64_t v106 = (unsigned char *)v4[14];
            uint64_t v107 = v106 - v105;
            if (v106 != v105)
            {
              uint64_t v108 = v4[16];
              unsigned int v109 = *(_DWORD *)v105;
              goto LABEL_154;
            }
            uint64_t v111 = v107 >> 3;
            unint64_t v112 = 1 - (v107 >> 3);
            uint64_t v113 = v4[15];
            if (v112 <= (v113 - (uint64_t)v106) >> 3)
            {
              bzero((void *)v4[14], 8 * v112);
              unint64_t v121 = &v106[8 * v112];
              v4[14] = v121;
              uint64_t v105 = *(char **)v8;
              uint64_t v108 = v4[16];
              unsigned int v109 = **(_DWORD **)v8;
              if (*(char **)v8 != v121) {
                goto LABEL_154;
              }
              goto LABEL_142;
            }
            uint64_t v114 = v113 - (void)v105;
            uint64_t v115 = v114 >> 2;
            if ((unint64_t)(v114 >> 2) <= 1) {
              uint64_t v115 = 1;
            }
            BOOL v10 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v10) {
              unint64_t v116 = v115;
            }
            if (v116 >> 61) {
LABEL_297:
            }
              sub_188D718();
            uint64_t v117 = 8 * v116;
            unint64_t v118 = (char *)operator new(8 * v116);
            unsigned int v119 = &v118[8 * v111];
            bzero(v119, 8 * v112);
            size_t v120 = &v118[v117];
            int v4 = v229;
            v229[13] = v119;
            v229[14] = &v119[8 * v112];
            v229[15] = v120;
            if (v106)
            {
              operator delete(v106);
              unint64_t v121 = (char *)v229[14];
              uint64_t v105 = *(char **)v8;
              uint64_t v108 = v229[16];
              unsigned int v109 = **(_DWORD **)v8;
              if (*(char **)v8 != v121) {
                goto LABEL_154;
              }
LABEL_142:
              int v110 = (char *)v4[15];
              if (v110 != v121)
              {
                *(void *)unint64_t v121 = 0;
                v4[14] = v121 + 8;
                goto LABEL_179;
              }
              uint64_t v124 = 1;
              uint64_t v125 = v110 - v105;
              if ((unint64_t)(v125 >> 2) > 1) {
                uint64_t v124 = v125 >> 2;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v124;
              }
              if (v126)
              {
                if (v126 >> 61) {
                  goto LABEL_297;
                }
                uint64_t v127 = (char *)operator new(8 * v126);
                int v128 = v127;
                *(void *)uint64_t v127 = 0;
                uint64_t v129 = (uint64_t)(v127 + 8);
                if (v121 == v105) {
                  goto LABEL_177;
                }
LABEL_168:
                unint64_t v130 = v121 - 8 - v105;
                if (v130 < 0x58)
                {
                  unint64_t v131 = v121;
                  goto LABEL_175;
                }
                if ((unint64_t)(v121 - v127) < 0x20)
                {
                  unint64_t v131 = v121;
                  goto LABEL_175;
                }
                uint64_t v132 = (v130 >> 3) + 1;
                uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v131 = &v121[-v133];
                v128 -= v133;
                unsigned int v134 = v127 - 16;
                unsigned int v135 = v121 - 16;
                uint64_t v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v137 = *(_OWORD *)v135;
                  *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
                  *(_OWORD *)unsigned int v134 = v137;
                  v134 -= 32;
                  v135 -= 32;
                  v136 -= 4;
                }
                while (v136);
                if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_175:
                    uint64_t v138 = *((void *)v131 - 1);
                    v131 -= 8;
                    *((void *)v128 - 1) = v138;
                    v128 -= 8;
                  }
                  while (v131 != v105);
                }
                unint64_t v121 = (char *)*v230;
              }
              else
              {
                uint64_t v127 = 0;
                int v128 = 0;
                *(void *)&def_332C = 0;
                uint64_t v129 = 8;
                if (v121 != v105) {
                  goto LABEL_168;
                }
              }
LABEL_177:
              v4[13] = v128;
              v4[14] = v129;
              v4[15] = &v127[8 * v126];
              unint64_t v8 = (char *)v230;
              if (v121) {
                operator delete(v121);
              }
LABEL_179:
              long long v122 = (_DWORD *)(v108 + 56 * v109);
              uint64_t v123 = v4[16] + 56 * *(unsigned int *)(v4[13] + 4);
              if (v122 != (_DWORD *)v123)
              {
LABEL_180:
                int v139 = v251;
                uint64_t v140 = v249;
                uint64_t v141 = v244;
                unint64_t v142 = ((unint64_t)v246 - v245) >> 4;
                do
                {
                  unsigned int v145 = v122[11];
                  if (v139)
                  {
                    unsigned int v252 = v122[12];
                    int v143 = v122[13];
                    int v253 = v143;
                  }
                  else
                  {
                    int v143 = *(_DWORD *)(v140 + 12 * v145);
                  }
                  long long v144 = (unsigned int *)((char *)v141 + *(unsigned __int16 *)((char *)v141 - *v141 + 6));
                  v122[7] = *(unsigned int *)((char *)&v144[2
                                                          * (*(_DWORD *)(v140 + 12 * v145 + 4) + v142)
                                                          + 2]
                                            + *v144)
                          + v143;
                  v122 += 14;
                }
                while (v122 != (_DWORD *)v123);
                uint64_t v250 = (int *)(v140 + 12 * v145);
              }
            }
            else
            {
              unint64_t v121 = &v119[8 * v112];
              uint64_t v105 = *(char **)v8;
              uint64_t v108 = v229[16];
              unsigned int v109 = **(_DWORD **)v8;
              if (*(char **)v8 == v121) {
                goto LABEL_142;
              }
LABEL_154:
              long long v122 = (_DWORD *)(v108 + 56 * v109);
              uint64_t v123 = v108 + 56 * *((unsigned int *)v105 + 1);
              if (v122 != (_DWORD *)v123) {
                goto LABEL_180;
              }
            }
            uint64_t result = (uint64_t)sub_A74EE4(v8, 0);
          }
        }
        if ((*((unsigned char *)v246 + 15) & 2) == 0) {
          goto LABEL_194;
        }
        if (v248)
        {
          if (*(_DWORD *)(v248 + 4 * (((unint64_t)v246 - v245) >> 4)) != v225) {
            goto LABEL_194;
          }
        }
        else if (v225)
        {
          goto LABEL_194;
        }
        unint64_t v146 = v224 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v241;
        uint64_t v147 = v4[13];
        if (v146 >= (v4[14] - v147) >> 3) {
          goto LABEL_194;
        }
        uint64_t v150 = (int *)(v147 + 8 * v146);
        int v148 = *v150;
        int v149 = v150[1];
        int v151 = v149 - *v150;
        if (v149 == *v150) {
          goto LABEL_194;
        }
        unsigned int v159 = 0;
        int v226 = v149 - v148;
        while (2)
        {
          uint64_t v160 = v4[13];
          if (v146 >= (v4[14] - v160) >> 3 || (v162 = (int *)(v160 + 8 * v146), int v161 = *v162, v162[1] - *v162 <= v159))
          {
            uint64_t v216 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v216, "key does not exist and cannot be added");
            goto LABEL_294;
          }
          unint64_t v163 = v161 + v159;
          uint64_t v164 = v4[16];
          if (0x6DB6DB6DB6DB6DB7 * ((v4[17] - v164) >> 3) <= v163)
          {
            uint64_t v216 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v216, "index out of range");
LABEL_294:
          }
          uint64_t v165 = v164 + 56 * v163;
          signed int v166 = *((_DWORD *)v246 + 2) + *(_DWORD *)(v165 + 28);
          if (v251)
          {
            uint64_t result = sub_A1F39C(v4[3], (uint64_t)&v242, v166, 1);
            if ((result & 1) == 0) {
              goto LABEL_220;
            }
LABEL_228:
            uint64_t v167 = *(void *)(v165 + 20);
            uint64_t v168 = v4;
            int v169 = *(_DWORD *)(v165 + 32);
            int v170 = *(_DWORD *)(v165 + 36);
            int v171 = *(_DWORD *)(v165 + 40);
            int v172 = (void *)(v168[3] + 4136);
            if (sub_A10E20(v172, v228))
            {
              int v173 = (int *)sub_A1120C(*(void *)(*v172 + 3944), v227);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v215 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v174 = *v172;
              if (dword_24F7300 == v228)
              {
                uint64_t v175 = *(unsigned int **)(*(void *)(v174 + 3976) + 72);
                if (!v175)
                {
                  char v218 = __cxa_allocate_exception(0x40uLL);
                  uint64_t v257 = (char *)operator new(0x40uLL);
                  long long v258 = xmmword_20B9A90;
                  strcpy(v257, "Realtime stop pattern quad data requested on nullptr buffer");
                  uint64_t v219 = (void *)sub_2F404((uint64_t)v218, (long long *)&v257);
                }
                long long v176 = (int *)((char *)v175 + *v175);
                unsigned int v177 = (unsigned __int16 *)((char *)v176 - *v176);
                if (*v177 >= 5u && (uint64_t v178 = v177[2]) != 0) {
                  uint64_t v179 = (unsigned int *)((char *)v176 + v178 + *(unsigned int *)((char *)v176 + v178));
                }
                else {
                  uint64_t v179 = 0;
                }
                int v173 = (int *)sub_A1139C(v179, v227);
              }
              else
              {
                int v173 = (int *)sub_A11500(v174 + 24, v227, 0, "stop pattern");
              }
            }
            uint64_t v180 = v173;
            uint64_t v181 = *v172;
            unsigned int v182 = (unsigned __int16 *)((char *)v173 - *v173);
            if (*v182 >= 0xFu && (uint64_t v183 = v182[7]) != 0)
            {
              uint64_t v184 = v181 + 3896;
              char v185 = sub_49442C(*(unsigned __int16 *)((char *)v173 + v183));
              if ((sub_C25A10(v184, v185) & 1) == 0)
              {
LABEL_242:
                uint8x8_t v186 = (unsigned __int16 *)((char *)v180 - *v180);
                if (*v186 >= 0xBu && (uint64_t v187 = v186[5]) != 0) {
                  char v188 = *((unsigned char *)v180 + v187);
                }
                else {
                  char v188 = 0;
                }
                uint64_t result = sub_A2BF48(v188);
LABEL_249:
                int v191 = v253;
                unint64_t v192 = 0xFFFFFFFF00000000;
                if (v251) {
                  unint64_t v192 = (unint64_t)v252 << 32;
                }
                unint64_t v193 = (-1431655765 * (((unint64_t)v250 - v249) >> 2)) | v192;
                if (!v251) {
                  int v191 = 0x7FFFFFFF;
                }
                unint64_t v194 = (unsigned int *)((char *)v244 + *(unsigned __int16 *)((char *)v244 - *v244 + 6));
                long long v195 = (char *)v194 + *v194;
                uint64_t v196 = &v253;
                if (!v251) {
                  uint64_t v196 = v250;
                }
                int v197 = *(_DWORD *)&v195[8 * v250[1] + 8 + 8 * (((unint64_t)v246 - v245) >> 4)]
                     + *v196;
                LODWORD(v232) = ((unint64_t)v246 - v245) >> 4;
                *(void *)((char *)&v232 + 4) = v193;
                HIDWORD(v232) = v191;
                unsigned int v233 = v256;
                uint64_t v234 = v167;
                int v235 = v197;
                int v236 = v169;
                unsigned int v237 = result + v170;
                int v238 = v171;
                unint64_t v239 = v193;
                int v240 = v191;
                int v4 = v229;
                char v198 = (unsigned int *)v229[13];
                if ((unsigned int *)v229[14] == v198
                  || (v200 = *v198, unsigned int v199 = *(_DWORD *)(v229[13] + 4), v199 == v200))
                {
                  unint64_t v8 = (char *)v230;
                  uint64_t result = sub_A72C48((char **)v230, 0, &v232);
                  int v151 = v226;
                }
                else
                {
                  char v201 = 0;
                  uint64_t v202 = 56 * v200;
                  uint64_t v203 = 56 * v199 - v202;
                  uint64_t v204 = (unsigned int *)(v229[16] + v202 + 36);
                  unint64_t v8 = (char *)v230;
                  do
                  {
                    int v205 = *(v204 - 2);
                    if (v205 != 0x7FFFFFFF)
                    {
                      if (v205 <= v235 && (int)*(v204 - 1) <= v236 && *v204 <= v237) {
                        goto LABEL_268;
                      }
                      if (v235 <= v205 && v236 <= (int)*(v204 - 1) && v237 <= *v204)
                      {
                        *(v204 - 2) = 0x7FFFFFFF;
                        char v201 = 1;
                      }
                    }
                    v204 += 14;
                    v203 -= 56;
                  }
                  while (v203);
                  uint64_t result = sub_A72C48((char **)v230, 0, &v232);
LABEL_268:
                  int v151 = v226;
                  if (v201)
                  {
                    unsigned int v206 = (unsigned int *)v229[13];
                    if ((unsigned int *)v229[14] != v206)
                    {
                      uint64_t v207 = v229[16];
                      unsigned int v208 = *v206;
LABEL_271:
                      uint64_t v209 = v207 + 56 * v208;
                      uint64_t v210 = v207 + 56 * v206[1];
                      if (v209 != v210) {
                        goto LABEL_275;
                      }
                      goto LABEL_281;
                    }
                    sub_D2BFC(v230, 1uLL);
                    unsigned int v206 = (unsigned int *)v229[13];
                    uint64_t v207 = v229[16];
                    unsigned int v208 = *v206;
                    if ((unsigned int *)v229[14] != v206) {
                      goto LABEL_271;
                    }
                    sub_D2BFC(v230, 1uLL);
                    unsigned int v206 = (unsigned int *)v229[13];
                    uint64_t v209 = v207 + 56 * v208;
                    uint64_t v210 = v229[16] + 56 * v206[1];
                    if (v209 == v210)
                    {
LABEL_281:
                      if ((unsigned int *)v229[14] == v206) {
                        goto LABEL_282;
                      }
                    }
                    else
                    {
LABEL_275:
                      while (*(_DWORD *)(v209 + 28) != 0x7FFFFFFF)
                      {
                        v209 += 56;
                        if (v209 == v210)
                        {
                          uint64_t v209 = v210;
                          if ((unsigned int *)v229[14] != v206) {
                            goto LABEL_283;
                          }
                          goto LABEL_282;
                        }
                      }
                      if (v209 == v210) {
                        goto LABEL_281;
                      }
                      uint64_t v211 = v209 + 56;
                      if (v209 + 56 == v210) {
                        goto LABEL_281;
                      }
                      do
                      {
                        if (*(_DWORD *)(v211 + 28) != 0x7FFFFFFF)
                        {
                          long long v212 = *(_OWORD *)v211;
                          long long v213 = *(_OWORD *)(v211 + 16);
                          long long v214 = *(_OWORD *)(v211 + 32);
                          *(void *)(v209 + 48) = *(void *)(v211 + 48);
                          *(_OWORD *)(v209 + 16) = v213;
                          *(_OWORD *)(v209 + 32) = v214;
                          *(_OWORD *)uint64_t v209 = v212;
                          v209 += 56;
                        }
                        v211 += 56;
                      }
                      while (v211 != v210);
                      unsigned int v206 = (unsigned int *)*v230;
                      if ((void *)v229[14] == *v230)
                      {
LABEL_282:
                        sub_D2BFC(v230, 1uLL);
                        unsigned int v206 = (unsigned int *)*v230;
                      }
                    }
LABEL_283:
                    uint64_t result = (uint64_t)sub_A72724(v230, 0, (char *)v209, (unsigned char *)(v229[16] + 56 * v206[1]));
                  }
                }
LABEL_220:
                if (++v159 == v151) {
                  goto LABEL_194;
                }
                continue;
              }
            }
            else
            {
              uint64_t v189 = v181 + 3896;
              char v190 = sub_49442C(0x7FFFu);
              if ((sub_C25A10(v189, v190) & 1) == 0) {
                goto LABEL_242;
              }
            }
            uint64_t result = 128;
            goto LABEL_249;
          }
          break;
        }
        uint64_t result = sub_A1F8B4((uint64_t)&v242, v166, 1);
        if (result) {
          goto LABEL_228;
        }
        goto LABEL_220;
      }
LABEL_119:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v93 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v93)
        {
          sub_D2BFC((void **)v8, 1uLL);
          uint64_t v93 = (unsigned int *)v4[13];
          uint64_t v94 = v4[16];
          unsigned int v95 = *v93;
          if ((unsigned int *)v4[14] == v93)
          {
            sub_D2BFC((void **)v8, 1uLL);
            uint64_t v93 = (unsigned int *)v4[13];
            uint64_t v96 = v4[16];
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v94 = v4[16];
          unsigned int v95 = *v93;
        }
        uint64_t v96 = v94;
LABEL_125:
        uint64_t result = (uint64_t)sub_A72724((void **)v8, 0, (char *)(v94 + 56 * v95), (unsigned char *)(v96 + 56 * v93[1]));
      }
LABEL_194:
      unint64_t v152 = v245;
      unint64_t v9 = v246 + 2;
      v246 += 2;
      if (*(unsigned char *)(v242 + 16)) {
        BOOL v153 = v243 == 0;
      }
      else {
        BOOL v153 = 0;
      }
      if (v153 && (unint64_t)v9 >= v245 && (unint64_t)v9 < v247)
      {
        do
        {
          unint64_t v156 = __ROR8__(*v9, 32);
          if (HIDWORD(v156) == 1 && (v156 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v242 + 4120));
          unint64_t v152 = v245;
          unint64_t v9 = v246;
          if (result) {
            break;
          }
          unint64_t v9 = v246 + 2;
          uint64_t v246 = v9;
        }
        while ((unint64_t)v9 >= v245 && (unint64_t)v9 < v247);
      }
      if ((unint64_t)v9 < v152 || (unint64_t)v9 >= v247) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A74E8C(_Unwind_Exception *a1)
{
}

void sub_A74EA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 24));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A74EE4(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A73590(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_33:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_33;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x6DB6DB6DB6DB6DB7 * ((*((void *)v2 + 4) - v13) >> 3) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 56 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 <= v16
                  && *((_DWORD *)result + 8) <= *(_DWORD *)(v13 + 56 * v12 + 32)
                  && *((_DWORD *)result + 9) <= *(_DWORD *)(v13 + 56 * v12 + 36))
                {
                  *unint64_t v15 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 <= v18 {
                       && *(_DWORD *)(v13 + 56 * v12 + 32) <= *((_DWORD *)result + 8)
                }
                       && *(_DWORD *)(v13 + 56 * v12 + 36) <= *((_DWORD *)result + 9))
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_6;
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A731E8((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A75124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A75138(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A7514C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A73590(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      uint64_t v21 = sub_A73590(a1, a2, v18);
      long long v23 = *(_OWORD *)(v21 + 16);
      long long v22 = *(_OWORD *)(v21 + 32);
      uint64_t v24 = *(void *)(v21 + 48);
      long long v36 = *(_OWORD *)v21;
      long long v37 = v23;
      uint64_t v39 = v24;
      long long v38 = v22;
      if (SHIDWORD(v23) <= a6)
      {
        if (sub_A7381C((uint64_t)a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_A73078((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 44) = -1;
            *(_DWORD *)(v26 + 52) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = sub_A73590(a1, a2, v27);
      long long v32 = *(_OWORD *)(v30 + 16);
      long long v31 = *(_OWORD *)(v30 + 32);
      uint64_t v33 = *(void *)(v30 + 48);
      long long v36 = *(_OWORD *)v30;
      long long v37 = v32;
      uint64_t v39 = v33;
      long long v38 = v31;
      if (SHIDWORD(v32) <= a6)
      {
        if (sub_A7381C((uint64_t)a1, &v36, a5) & 1) != 0 || (sub_A7381C((uint64_t)a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_A73078((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 44) = -1;
            *(_DWORD *)(v35 + 52) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A731E8(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_A753A0(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    BOOL v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      BOOL v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A75654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A75684(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  unint64_t v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    BOOL v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A759CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A75A6C(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    unint64_t *v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A77204(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      long long v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      uint64_t v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_A77204(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    int v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        uint64_t v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_A77204(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          unint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          uint64_t v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          BOOL v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A77204(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_A76C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A76DE8(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A774C0(a1 + 1336, v42);
  sub_A77770((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_A77188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A77204(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}