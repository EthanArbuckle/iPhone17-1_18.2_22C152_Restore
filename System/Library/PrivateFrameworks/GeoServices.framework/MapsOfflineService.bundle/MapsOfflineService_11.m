void sub_4E3F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4E3F9C(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  sub_505610(a1 + 1536, a2, (uint64_t)&v25);
  sub_635CD0((long long **)&v25, (uint64_t)v23);
  v5 = (void *)sub_5231C((uint64_t)&v25);
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v44[4] = 0u;
  *(_OWORD *)&v40[4] = 0u;
  long long v41 = 0u;
  uint64_t v34 = 0x7FFFFFFFLL;
  *(_OWORD *)&v36[4] = 0u;
  *(_OWORD *)&v32[8] = 0u;
  uint64_t v31 = 0;
  *(int64x2_t *)v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v33 = *(_OWORD *)v32;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  *(_DWORD *)&v32[16] = 0x7FFFFFFF;
  int v35 = 0x7FFFFFFF;
  *(void *)v36 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)v38 = 0u;
  memset(v39, 0, sizeof(v39));
  unint64_t v37 = 0x8000000080000000;
  *(void *)v40 = 0x8000000080000000;
  *(_DWORD *)&v40[8] = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)v44 = 0x7FFFFFFF7FFFFFFFLL;
  long long v45 = _Q1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v23, v5, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v11 = (void **)v46[0];
  if (v46[0])
  {
    v12 = (void **)v46[1];
    v13 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        v12 = sub_4F31D0(v12 - 13);
      while (v12 != v11);
      v13 = v46[0];
    }
    v46[1] = v11;
    operator delete(v13);
  }
  if (*(void *)&v39[8])
  {
    *(void *)&v39[16] = *(void *)&v39[8];
    operator delete(*(void **)&v39[8]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  v14 = v29[1];
  if (v29[1])
  {
    uint64_t v15 = v30;
    v16 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v15 = sub_4D4B58(v15 - 160);
      while ((void *)v15 != v14);
      v16 = v29[1];
    }
    *(void *)&long long v30 = v14;
    operator delete(v16);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  v17 = v28;
  if (v28)
  {
    do
    {
      v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = v27;
  v27 = 0;
  if (v19) {
    operator delete(v19);
  }
  v20 = (void **)v25;
  if (v25)
  {
    v21 = v26;
    v22 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      v22 = v25;
    }
    v26 = v20;
    operator delete(v22);
  }
}

void sub_4E4230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4E427C(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 1200);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_4BF330((uint64_t)&v13, *(void *)(a1 + 1208), *(void *)(a1 + 1216), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 1216) - *(void *)(a1 + 1208)) >> 3));
    v4 = v13;
    uint64_t v5 = v14;
    if (v13 != (void *)v14)
    {
      uint64_t v6 = (uint64_t)v13 + 56;
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          if (*(void *)(v6 + 8))
          {
LABEL_9:
            if (*(void *)(v6 + 48) != *(void *)(v6 + 56))
            {
              unint64_t v8 = a2[1];
              if (v8 >= a2[2])
              {
                v9 = sub_4F7F70(a2);
              }
              else
              {
                bzero((void *)a2[1], 0x300uLL);
                sub_4DC580(v8);
                v9 = (char *)(v8 + 768);
                a2[1] = v8 + 768;
              }
              a2[1] = (uint64_t)v9;
              sub_5F3D48((uint64_t)v12, v6);
              sub_4D90B4(a2[1] - 768, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
              sub_5F3D48((uint64_t)v12, *(void *)(v6 + 48));
              sub_4D90B4(a2[1] - 608, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
            }
          }
        }
        else if (*(unsigned char *)(v6 + 23))
        {
          goto LABEL_9;
        }
        uint64_t v7 = v6 + 112;
        v6 += 168;
        if (v7 == v5)
        {
          v4 = v13;
          break;
        }
      }
    }
    if (v4)
    {
      uint64_t v10 = v14;
      v11 = v4;
      if ((void *)v14 != v4)
      {
        do
          uint64_t v10 = sub_4BCFD0(v10 - 168);
        while ((void *)v10 != v4);
        v11 = v13;
      }
      uint64_t v14 = (uint64_t)v4;
      operator delete(v11);
    }
  }
}

void sub_4E43FC(_Unwind_Exception *a1)
{
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void sub_4E4410(_Unwind_Exception *a1)
{
  sub_4B1DB4((void **)(v2 - 56));
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void sub_4E4454(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_70F9AC((uint64_t *)(a1 + 5264), (void *)(a2 + 1328), &v13);
  sub_5F41E8(a3, (uint64_t)&v13);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_13;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_31:
      BOOL v7 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_14;
    }
LABEL_13:
    BOOL v7 = 1;
    goto LABEL_14;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 1160);
  }
  BOOL v7 = 1;
  if (!v6 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_31;
  }
LABEL_14:
  *(unsigned char *)(a3 + 160) = v7;
  sub_4E3C10(a2, (uint64_t)v14);
  sub_4F377C(a3 + 352, (uint64_t)v14);
  *(void *)(a3 + 392) = v19;
  unint64_t v8 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v8);
  }
  v9 = (_OWORD *)(a3 + 432);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v22;
  if ((*(char *)(a3 + 455) & 0x80000000) == 0)
  {
    _OWORD *v9 = v23;
    *(void *)(a3 + 448) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(unsigned char *)(a3 + 456) = v25;
    int v10 = v18;
    if (v18 == 1) {
      goto LABEL_25;
    }
LABEL_21:
    if (v10 || (v17 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    v12 = v15;
    goto LABEL_27;
  }
  operator delete(*(void **)(a3 + 432));
  int v11 = SHIBYTE(v21);
  _OWORD *v9 = v23;
  *(void *)(a3 + 448) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  *(unsigned char *)(a3 + 456) = v25;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
  else
  {
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
LABEL_25:
  v12 = v15;
  if (!v15) {
    goto LABEL_28;
  }
  v16 = v15;
LABEL_27:
  operator delete(v12);
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_4E46E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F2FF8(v14);
  _Unwind_Resume(a1);
}

void sub_4E4748(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_504B34(a2, (uint64_t)&v48);
  sub_635CD0((long long **)&v48, (uint64_t)v44);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v48);
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  uint64_t v69 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v65[4] = 0u;
  *(_OWORD *)&v61[4] = 0u;
  long long v62 = 0u;
  *(void *)v57 = 0x7FFFFFFFLL;
  *(_OWORD *)&v57[16] = 0u;
  *(_OWORD *)&v55[8] = 0u;
  uint64_t v54 = 0;
  *(int64x2_t *)v55 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v56 = *(_OWORD *)v55;
  v52[0] = (void *)0xFFFFFFFFLL;
  long long v53 = 0uLL;
  v52[1] = 0;
  *(_DWORD *)&v55[16] = 0x7FFFFFFF;
  *(_DWORD *)&v57[8] = 0x7FFFFFFF;
  *(void *)&v57[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)v59 = 0u;
  memset(v60, 0, sizeof(v60));
  unint64_t v58 = 0x8000000080000000;
  *(void *)v61 = 0x8000000080000000;
  *(_DWORD *)&v61[8] = 0x7FFFFFFF;
  LODWORD(v62) = -1;
  uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
  int v64 = 0x7FFFFFFF;
  *(void *)v65 = 0x7FFFFFFF7FFFFFFFLL;
  long long v66 = _Q1;
  v67[1] = 0;
  v67[0] = 0;
  uint64_t v68 = 0;
  uint64_t v71 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v72 = 0xFFFFFFFF00000000;
  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v44, v6, v52, (char **)v46);
  sub_4D90B4(a3, (uint64_t)v46);
  sub_4D4B58((uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v12 = (void **)v67[0];
  if (v67[0])
  {
    std::string v13 = (void **)v67[1];
    uint64_t v14 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v67[0];
    }
    v67[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v60[8])
  {
    *(void *)&v60[16] = *(void *)&v60[8];
    operator delete(*(void **)&v60[8]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  uint64_t v15 = v52[1];
  if (v52[1])
  {
    uint64_t v16 = v53;
    char v17 = v52[1];
    if ((void *)v53 != v52[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v52[1];
    }
    *(void *)&long long v53 = v15;
    operator delete(v17);
  }
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (*(_DWORD *)(a2 + 1360) != 1) {
      goto LABEL_49;
    }
  }
  else if (*(_DWORD *)(a2 + 1360) != 1)
  {
    goto LABEL_49;
  }
  int v18 = *(_DWORD *)(a2 + 1352);
  if (v18 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v18 && *(_DWORD *)(a2 + 1364) != 0x7FFFFFFF)
  {
    sub_635CD0((long long **)&v48, (uint64_t)v46);
    uint64_t v19 = sub_5231C((uint64_t)&v48);
    sub_60E8D8(a1 + 3088, (uint64_t)v46, v19, 0, (uint64_t)v52);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    uint64_t v20 = BYTE7(v53);
    char v21 = BYTE7(v53);
    char v22 = (SBYTE7(v53) & 0x80u) == 0 ? v52 : (void **)v52[0];
    long long v23 = byte_2560967 >= 0 ? &qword_2560950 : (uint64_t *)qword_2560950;
    int64_t v24 = byte_2560967 >= 0 ? byte_2560967 : unk_2560958;
    if (v24)
    {
      if (SBYTE7(v53) < 0) {
        uint64_t v20 = (uint64_t)v52[1];
      }
      if (v20 >= v24)
      {
        char v25 = (char *)v22 + v20;
        int v26 = *(char *)v23;
        v27 = v22;
        do
        {
          uint64_t v28 = v20 - v24;
          if (v28 == -1) {
            break;
          }
          v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          long long v30 = v29;
          if (!memcmp(v29, v23, v24))
          {
            if (v30 == v25 || v30 - (char *)v22 == -1) {
              break;
            }
            goto LABEL_47;
          }
          v27 = (void **)(v30 + 1);
          uint64_t v20 = v25 - (v30 + 1);
        }
        while (v20 >= v24);
      }
    }
    else
    {
LABEL_47:
      LODWORD(v46[0]) = *(_DWORD *)(a2 + 1364);
      sub_5F5F70(a3, (long long *)&qword_2560950, v46, a1 + 1488, 0);
      char v21 = BYTE7(v53);
    }
    if (v21 < 0)
    {
      operator delete(v52[0]);
      if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
        goto LABEL_63;
      }
      goto LABEL_50;
    }
  }
LABEL_49:
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_63;
  }
LABEL_50:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_63;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_91:
      BOOL v32 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_64;
    }
LABEL_63:
    BOOL v32 = 1;
    goto LABEL_64;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v31 = *(void *)(a2 + 1160);
  }
  BOOL v32 = 1;
  if (!v31 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_91;
  }
LABEL_64:
  *(unsigned char *)(a3 + 160) = v32;
  sub_4E3C10(a2, (uint64_t)v52);
  sub_4F377C(a3 + 352, (uint64_t)v52);
  *(void *)(a3 + 392) = *(void *)v55;
  long long v33 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v33);
  }
  uint64_t v34 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v33 = *(_OWORD *)&v55[8];
  *(void *)(a3 + 416) = v56;
  BYTE7(v56) = 0;
  v55[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v56);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v37 = SBYTE7(v56);
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    if (v37 < 0)
    {
      operator delete(*(void **)&v55[8]);
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
    else
    {
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
  }
  else
  {
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    int v35 = v54;
    if (v54 == 1)
    {
LABEL_68:
      v36 = v52[1];
      if (!v52[1]) {
        goto LABEL_76;
      }
      *(void **)&long long v53 = v52[1];
      goto LABEL_75;
    }
  }
  if (!v35 && SHIBYTE(v53) < 0)
  {
    v36 = v52[1];
LABEL_75:
    operator delete(v36);
  }
LABEL_76:
  v38 = v51;
  if (v51)
  {
    do
    {
      v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = v50;
  uint64_t v50 = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v48;
  if (v48)
  {
    uint64_t v42 = v49;
    int v43 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      int v43 = v48;
    }
    v49 = v41;
    operator delete(v43);
  }
}

void sub_4E4D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a38);
    sub_4F2FF8(v52);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a38);
  sub_4F2FF8(v52);
  _Unwind_Resume(a1);
}

void sub_4E4E1C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E4E30(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E4E5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_501250(a2, (uint64_t)&v34);
  sub_635CD0((long long **)&v34, (uint64_t)v31);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v34);
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v55 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v51[4] = 0u;
  *(_OWORD *)&v47[4] = 0u;
  long long v48 = 0u;
  *(void *)int v43 = 0x7FFFFFFFLL;
  *(_OWORD *)&v43[16] = 0u;
  *(_OWORD *)&v41[8] = 0u;
  uint64_t v40 = 0;
  *(int64x2_t *)long long v41 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v42 = *(_OWORD *)v41;
  v38[0] = (void *)0xFFFFFFFFLL;
  long long v39 = 0uLL;
  v38[1] = 0;
  *(_DWORD *)&v41[16] = 0x7FFFFFFF;
  *(_DWORD *)&v43[8] = 0x7FFFFFFF;
  *(void *)&v43[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)char v45 = 0u;
  memset(v46, 0, sizeof(v46));
  unint64_t v44 = 0x8000000080000000;
  *(void *)char v47 = 0x8000000080000000;
  *(_DWORD *)&v47[8] = 0x7FFFFFFF;
  LODWORD(v48) = -1;
  uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  int v50 = 0x7FFFFFFF;
  *(void *)unint64_t v51 = 0x7FFFFFFF7FFFFFFFLL;
  long long v52 = _Q1;
  v53[1] = 0;
  v53[0] = 0;
  uint64_t v54 = 0;
  uint64_t v57 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v58 = 0xFFFFFFFF00000000;
  uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v31, v6, v38, v33);
  sub_4D90B4(a3, (uint64_t)v33);
  sub_4D4B58((uint64_t)v33);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v12 = (void **)v53[0];
  if (v53[0])
  {
    std::string v13 = (void **)v53[1];
    uint64_t v14 = v53[0];
    if (v53[1] != v53[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v53[0];
    }
    v53[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v46[8])
  {
    *(void *)&v46[16] = *(void *)&v46[8];
    operator delete(*(void **)&v46[8]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  uint64_t v15 = v38[1];
  if (v38[1])
  {
    uint64_t v16 = v39;
    char v17 = v38[1];
    if ((void *)v39 != v38[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v38[1];
    }
    *(void *)&long long v39 = v15;
    operator delete(v17);
  }
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_60:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_60;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4E3C10(a2, (uint64_t)v38);
  sub_4F377C(a3 + 352, (uint64_t)v38);
  *(void *)(a3 + 392) = *(void *)v41;
  uint64_t v20 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v20);
  }
  char v21 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)&v41[8];
  *(void *)(a3 + 416) = v42;
  BYTE7(v42) = 0;
  v41[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v42);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v23 = SBYTE7(v42);
    *char v21 = *(_OWORD *)v43;
    *(void *)(a3 + 448) = *(void *)&v43[16];
    v43[23] = 0;
    v43[0] = 0;
    *(unsigned char *)(a3 + 456) = v43[24];
    if (v23 < 0)
    {
      operator delete(*(void **)&v41[8]);
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
    else
    {
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
LABEL_44:
    int64_t v24 = v38[1];
    if (!v38[1]) {
      goto LABEL_47;
    }
    *(void **)&long long v39 = v38[1];
    goto LABEL_46;
  }
  *char v21 = *(_OWORD *)v43;
  *(void *)(a3 + 448) = *(void *)&v43[16];
  v43[23] = 0;
  v43[0] = 0;
  *(unsigned char *)(a3 + 456) = v43[24];
  int v22 = v40;
  if (v40 == 1) {
    goto LABEL_44;
  }
LABEL_40:
  if (!v22 && SHIBYTE(v39) < 0)
  {
    int64_t v24 = v38[1];
LABEL_46:
    operator delete(v24);
  }
LABEL_47:
  char v25 = v37;
  if (v37)
  {
    do
    {
      int v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      char v25 = v26;
    }
    while (v26);
  }
  v27 = v36;
  v36 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v34;
  if (v34)
  {
    v29 = v35;
    long long v30 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      long long v30 = v34;
    }
    int v35 = v28;
    operator delete(v30);
  }
}

void sub_4E5328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4E5388(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E539C(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E53C8(uint64_t a1)
{
  sub_4DC580((uint64_t)v19);
  sub_506080((uint64_t)&v17);
  sub_635CD0((long long **)&v17, (uint64_t)&v11);
  uint64_t v2 = sub_5231C((uint64_t)&v17);
  sub_60E8D8(a1 + 3088, (uint64_t)&v11, v2, 0, (uint64_t)&__p);
  sub_5F3D48((uint64_t)v18, (uint64_t)&__p);
  sub_4D90B4((uint64_t)v19, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v16 < 0)
  {
    operator delete(__p);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11);
LABEL_3:
  sub_506090((uint64_t)&__p);
  sub_635CD0((long long **)&__p, (uint64_t)v5);
  uint64_t v3 = sub_5231C((uint64_t)&__p);
  sub_60E8D8(a1 + 3088, (uint64_t)v5, v3, 0, (uint64_t)&v11);
  sub_5F3D48((uint64_t)v18, (uint64_t)&v11);
  sub_4D90B4((uint64_t)&v20, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_5:
      if ((byte_2560B47 & 0x80000000) == 0)
      {
LABEL_6:
        *(_OWORD *)__dst = xmmword_2560B30;
        uint64_t v14 = unk_2560B40;
        goto LABEL_12;
      }
LABEL_11:
      sub_4200(__dst, (void *)xmmword_2560B30, *((unint64_t *)&xmmword_2560B30 + 1));
LABEL_12:
      sub_5F3D48((uint64_t)v18, (uint64_t)__dst);
      sub_4D90B4((uint64_t)&v21, (uint64_t)v18);
      sub_4D4B58((uint64_t)v18);
      sub_5060A0((uint64_t)&v11);
      sub_635CD0((long long **)&v11, (uint64_t)v8);
      uint64_t v4 = sub_5231C((uint64_t)&v11);
      sub_60E8D8(a1 + 3088, (uint64_t)v8, v4, 0, (uint64_t)v9);
      if (byte_2560B77 < 0)
      {
        sub_4200(v5, (void *)xmmword_2560B60, *((unint64_t *)&xmmword_2560B60 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v5 = xmmword_2560B60;
        uint64_t v6 = unk_2560B70;
      }
      if (SHIBYTE(v10) < 0)
      {
        sub_4200(v7, v9[0], (unint64_t)v9[1]);
      }
      else
      {
        *(_OWORD *)BOOL v7 = *(_OWORD *)v9;
        v7[2] = v10;
      }
      sub_5F2B70(v18, (long long *)__dst);
    }
  }
  else if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v5[0]);
  if ((byte_2560B47 & 0x80000000) == 0) {
    goto LABEL_6;
  }
  goto LABEL_11;
}

void sub_4E5B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        sub_4D4880(&a33);
        if (a47 < 0) {
          operator delete(a42);
        }
        sub_4D4880(&a48);
        sub_4D4880(&a57);
        sub_4F4A98((uint64_t)&STACK[0x208]);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a21);
      goto LABEL_9;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a26 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_4E5D2C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  sub_504C8C(a1 + 1536, a2, a3, a4, (uint64_t)&v27);
  sub_635CD0((long long **)&v27, (uint64_t)v25);
  BOOL v7 = (void *)sub_5231C((uint64_t)&v27);
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  uint64_t v50 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v46[4] = 0u;
  *(_OWORD *)&v42[4] = 0u;
  long long v43 = 0u;
  uint64_t v36 = 0x7FFFFFFFLL;
  *(_OWORD *)&v38[4] = 0u;
  *(_OWORD *)&v34[8] = 0u;
  uint64_t v33 = 0;
  *(int64x2_t *)uint64_t v34 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v35 = *(_OWORD *)v34;
  v31[0] = (void *)0xFFFFFFFFLL;
  long long v32 = 0uLL;
  v31[1] = 0;
  *(_DWORD *)&v34[16] = 0x7FFFFFFF;
  int v37 = 0x7FFFFFFF;
  *(void *)v38 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v40 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v39 = 0x8000000080000000;
  *(void *)long long v42 = 0x8000000080000000;
  *(_DWORD *)&v42[8] = 0x7FFFFFFF;
  LODWORD(v43) = -1;
  uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  int v45 = 0x7FFFFFFF;
  *(void *)v46 = 0x7FFFFFFF7FFFFFFFLL;
  long long v47 = _Q1;
  v48[0] = 0;
  v48[1] = 0;
  uint64_t v49 = 0;
  __p[1] = 0;
  uint64_t v52 = 0;
  __p[0] = 0;
  unint64_t v53 = 0xFFFFFFFF00000000;
  uint64_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v25, v7, v31, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::string v13 = (void **)v48[0];
  if (v48[0])
  {
    uint64_t v14 = (void **)v48[1];
    uint64_t v15 = v48[0];
    if (v48[1] != v48[0])
    {
      do
        uint64_t v14 = sub_4F31D0(v14 - 13);
      while (v14 != v13);
      uint64_t v15 = v48[0];
    }
    v48[1] = v13;
    operator delete(v15);
  }
  if (*(void *)&v41[8])
  {
    *(void *)&v41[16] = *(void *)&v41[8];
    operator delete(*(void **)&v41[8]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  char v16 = v31[1];
  if (v31[1])
  {
    uint64_t v17 = v32;
    uint64_t v18 = v31[1];
    if ((void *)v32 != v31[1])
    {
      do
        uint64_t v17 = sub_4D4B58(v17 - 160);
      while ((void *)v17 != v16);
      uint64_t v18 = v31[1];
    }
    *(void *)&long long v32 = v16;
    operator delete(v18);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  BOOL v19 = v30;
  if (v30)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      BOOL v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = v29;
  v29 = 0;
  if (v21) {
    operator delete(v21);
  }
  int v22 = (void **)v27;
  if (v27)
  {
    int v23 = v28;
    int64_t v24 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      int64_t v24 = v27;
    }
    uint64_t v28 = v22;
    operator delete(v24);
  }
}

void sub_4E5FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4E600C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  char v62 = *(unsigned char *)(a2 + 1440);
  if (v62) {
    sub_4C8540((uint64_t)v61, a2);
  }
  char v60 = *(unsigned char *)(a3 + 1440);
  if (v60) {
    sub_4C8540((uint64_t)v59, a3);
  }
  sub_505468(a1 + 1536, (uint64_t)v61, (uint64_t)v59, a4, (uint64_t)&v29);
  if (v60)
  {
    sub_4BD604((uint64_t)v59);
    char v60 = 0;
  }
  if (v62)
  {
    sub_4BD604((uint64_t)v61);
    char v62 = 0;
  }
  sub_635CD0((long long **)&v29, (uint64_t)v27);
  v9 = (void *)sub_5231C((uint64_t)&v29);
  uint64_t v56 = 0;
  uint64_t v58 = 0;
  uint64_t v52 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v48[4] = 0u;
  *(_OWORD *)&v44[4] = 0u;
  long long v45 = 0u;
  uint64_t v38 = 0x7FFFFFFFLL;
  *(_OWORD *)&v40[4] = 0u;
  *(_OWORD *)&v36[8] = 0u;
  uint64_t v35 = 0;
  *(int64x2_t *)uint64_t v36 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v37 = *(_OWORD *)v36;
  v33[0] = (void *)0xFFFFFFFFLL;
  long long v34 = 0uLL;
  v33[1] = 0;
  *(_DWORD *)&v36[16] = 0x7FFFFFFF;
  int v39 = 0x7FFFFFFF;
  *(void *)uint64_t v40 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v41 = 0x8000000080000000;
  *(void *)uint64_t v44 = 0x8000000080000000;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  LODWORD(v45) = -1;
  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
  int v47 = 0x7FFFFFFF;
  *(void *)long long v48 = 0x7FFFFFFF7FFFFFFFLL;
  long long v49 = _Q1;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  __p[0] = 0;
  unint64_t v55 = 0xFFFFFFFF00000000;
  uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v27, v9, v33, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v50[0];
  if (v50[0])
  {
    char v16 = (void **)v50[1];
    uint64_t v17 = v50[0];
    if (v50[1] != v50[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v50[0];
    }
    v50[1] = v15;
    operator delete(v17);
  }
  if (*(void *)&v43[8])
  {
    *(void *)&v43[16] = *(void *)&v43[8];
    operator delete(*(void **)&v43[8]);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  uint64_t v18 = v33[1];
  if (v33[1])
  {
    uint64_t v19 = v34;
    uint64_t v20 = v33[1];
    if ((void *)v34 != v33[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v33[1];
    }
    *(void *)&long long v34 = v18;
    operator delete(v20);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  uint64_t v21 = v32;
  if (v32)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v31;
  uint64_t v31 = 0;
  if (v23) {
    operator delete(v23);
  }
  int64_t v24 = (void **)v29;
  if (v29)
  {
    char v25 = v30;
    char v26 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      char v26 = v29;
    }
    long long v30 = v24;
    operator delete(v26);
  }
}

void sub_4E6310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4E634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x758]))
  {
    sub_4BD604((uint64_t)&a64);
    LOBYTE(STACK[0x758]) = 0;
  }
  if (LOBYTE(STACK[0xD00]))
  {
    sub_4BD604((uint64_t)&STACK[0x760]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_4E6398(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  unint64_t v5 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5);
  uint64_t v6 = 2640;
  if (v5 > 1) {
    uint64_t v6 = 2664;
  }
  BOOL v7 = &xmmword_2560800;
  if (v5 <= 1) {
    BOOL v7 = &xmmword_25607E8;
  }
  unint64_t v8 = &byte_25607FF;
  if (v5 > 1) {
    unint64_t v8 = (char *)&word_2560816 + 1;
  }
  if (*v8 < 0)
  {
    if (v5 <= 1) {
      v9 = (unint64_t *)&xmmword_25607E8 + 1;
    }
    else {
      v9 = (unint64_t *)&xmmword_2560800 + 1;
    }
    sub_4200(__dst, *(void **)((char *)&xmmword_255FD98 + v6), *v9);
  }
  else
  {
    *(_OWORD *)__dst = *v7;
    uint64_t v28 = *((void *)v7 + 2);
  }
  *(_OWORD *)int64_t v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  *(_OWORD *)&v44[4] = 0u;
  long long v41 = 0u;
  *(_OWORD *)&v37[4] = 0u;
  uint64_t v35 = 0x7FFFFFFFLL;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  uint64_t v31 = 0;
  int64x2_t v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v33 = 0x7FFFFFFFLL;
  int64x2_t v34 = v32;
  int v36 = 0x7FFFFFFF;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v45 = _Q1;
  *(void *)long long v37 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v39 = 0u;
  memset(v40, 0, sizeof(v40));
  unint64_t v38 = 0x8000000080000000;
  *(void **)((char *)&v40[4] + 4) = (void *)0x8000000080000000;
  HIDWORD(v40[5]) = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)__dst, v24, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v46[0];
  if (v46[0])
  {
    char v16 = (void **)v46[1];
    uint64_t v17 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v46[0];
    }
    v46[1] = v15;
    operator delete(v17);
  }
  if (v40[1])
  {
    v40[2] = v40[1];
    operator delete(v40[1]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  uint64_t v18 = v29[1];
  if (v29[1])
  {
    uint64_t v19 = v30;
    uint64_t v20 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v29[1];
    }
    *(void *)&long long v30 = v18;
    operator delete(v20);
  }
  uint64_t v21 = (void *)v25;
  if ((void)v25)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v24[0];
  v24[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_4E6660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4E668C(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 != 45)
  {
    unint64_t v6 = a3[22];
    if (v6 >= a3[23])
    {
      uint64_t v7 = sub_4F799C(a3 + 21);
    }
    else
    {
      *(_DWORD *)(v6 + 768) = -1;
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 792) = 0;
      *(void *)(v6 + 784) = 0;
      uint64_t v7 = v6 + 800;
    }
    a3[22] = v7;
    sub_4D9344((uint64_t)a2, (std::string *)__p);
    unint64_t v8 = *(void *)(v7 - 16);
    if (v8 >= *(void *)(v7 - 8))
    {
      int v10 = sub_6E8C4((void **)(v7 - 24), (uint64_t)__p);
    }
    else
    {
      long long v9 = *(_OWORD *)__p;
      *(void *)(v8 + 16) = v38;
      *(_OWORD *)unint64_t v8 = v9;
      __p[1] = 0;
      *(void *)&long long v38 = 0;
      __p[0] = 0;
      int v10 = (char *)(v8 + 24);
    }
    *(void *)(v7 - 16) = v10;
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = sub_4DB6A8(a3[22] - 800);
    sub_501654((uint64_t)a2, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v30);
    char v12 = (void *)sub_5231C((uint64_t)&v33);
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v56 = 1;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v52[4] = 0u;
    *(_OWORD *)&v48[4] = 0u;
    long long v49 = 0u;
    uint64_t v42 = 0x7FFFFFFFLL;
    *(_OWORD *)&v44[4] = 0u;
    *(_OWORD *)&v40[8] = 0u;
    uint64_t v39 = 0;
    *(int64x2_t *)uint64_t v40 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    long long v41 = *(_OWORD *)v40;
    __p[0] = (void *)0xFFFFFFFFLL;
    long long v38 = 0uLL;
    __p[1] = 0;
    *(_DWORD *)&v40[16] = 0x7FFFFFFF;
    int v43 = 0x7FFFFFFF;
    *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)uint64_t v46 = 0u;
    memset(v47, 0, sizeof(v47));
    unint64_t v45 = 0x8000000080000000;
    *(void *)uint64_t v48 = 0x8000000080000000;
    *(_DWORD *)&v48[8] = 0x7FFFFFFF;
    LODWORD(v49) = -1;
    uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    int v51 = 0x7FFFFFFF;
    *(void *)uint64_t v52 = 0x7FFFFFFF7FFFFFFFLL;
    long long v53 = _Q1;
    v54[1] = 0;
    v54[0] = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    v57[0] = 0;
    v57[1] = 0;
    unint64_t v59 = 0xFFFFFFFF00000000;
    uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
    sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v30, v12, __p, v32);
    sub_4D90B4(v11, (uint64_t)v32);
    sub_4D4B58((uint64_t)v32);
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    uint64_t v18 = (void **)v54[0];
    if (v54[0])
    {
      uint64_t v19 = (void **)v54[1];
      uint64_t v20 = v54[0];
      if (v54[1] != v54[0])
      {
        do
          uint64_t v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        uint64_t v20 = v54[0];
      }
      v54[1] = v18;
      operator delete(v20);
    }
    if (*(void *)&v47[8])
    {
      *(void *)&v47[16] = *(void *)&v47[8];
      operator delete(*(void **)&v47[8]);
    }
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    uint64_t v21 = __p[1];
    if (__p[1])
    {
      uint64_t v22 = v38;
      int v23 = __p[1];
      if ((void *)v38 != __p[1])
      {
        do
          uint64_t v22 = sub_4D4B58(v22 - 160);
        while ((void *)v22 != v21);
        int v23 = __p[1];
      }
      *(void *)&long long v38 = v21;
      operator delete(v23);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_4E722C((char *)a1, (uint64_t)a2, v11);
    sub_4E763C((char *)a1, (uint64_t)a2, v11);
    sub_4E77FC((char *)a1, (uint64_t)a2, v11);
    sub_4E3F9C(a1, 1uLL, (char **)__p);
    sub_4D90B4((uint64_t)(a3 + 24), (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    int64_t v24 = v36;
    if (v36)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        int64_t v24 = v25;
      }
      while (v25);
    }
    int v26 = v35;
    uint64_t v35 = 0;
    if (v26) {
      operator delete(v26);
    }
    v27 = (void **)v33;
    if (v33)
    {
      uint64_t v28 = v34;
      v29 = v33;
      if (v34 != v33)
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        v29 = v33;
      }
      int64x2_t v34 = v27;
      operator delete(v29);
    }
  }
}

void sub_4E6A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_4E6AC4(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  int v23 = 1065353216;
  sub_60E8D8(a1 + 3088, (uint64_t)&xmmword_25607B8, (uint64_t)__p, 0, (uint64_t)&v26);
  memset(&v25, 0, sizeof(v25));
  sub_5F7A30(a4, &v26, &v25);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_46:
    operator delete(v26.__r_.__value_.__l.__data_);
    unint64_t v8 = v22[0];
    if (!v22[0]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_3:
  unint64_t v8 = v22[0];
  if (!v22[0]) {
    goto LABEL_5;
  }
  do
  {
LABEL_4:
    long long v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    unint64_t v8 = v9;
  }
  while (v9);
LABEL_5:
  int v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    while (1)
    {
      sub_50081C(a1 + 1536, v11, (uint64_t)__p);
      int v14 = (a3 & 1) != 0 || (unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 5)) > 1;
      sub_4DFF6C(a1, v14, (uint64_t)__p);
      sub_635CD0((long long **)__p, (uint64_t)&v25);
      uint64_t v15 = sub_5231C((uint64_t)__p);
      sub_60E8D8(a1 + 3088, (uint64_t)&v25, v15, 0, (uint64_t)&v26);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      sub_5F41E8(a4, (uint64_t)&v26);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        char v16 = v24;
        if (v24) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      char v16 = v24;
      if (v24) {
        break;
      }
LABEL_36:
      uint64_t v18 = v22[1];
      v22[1] = 0;
      if (v18) {
        operator delete(v18);
      }
      uint64_t v19 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v20 = (void **)__p[1];
        std::string v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v20 - 1) < 0) {
              operator delete(*(v20 - 3));
            }
            v20 -= 3;
          }
          while (v20 != v19);
          std::string v13 = __p[0];
        }
        __p[1] = v19;
        operator delete(v13);
      }
      v11 += 1440;
      if (v11 == v12) {
        return;
      }
    }
    while (1)
    {
LABEL_24:
      uint64_t v17 = *v16;
      if (*((char *)v16 + 191) < 0)
      {
        operator delete(v16[21]);
        if (*((char *)v16 + 159) < 0) {
          goto LABEL_31;
        }
LABEL_26:
        if ((*((char *)v16 + 135) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_32:
        operator delete(v16[14]);
        if (*((char *)v16 + 95) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        if ((*((char *)v16 + 63) & 0x80000000) == 0) {
          goto LABEL_34;
        }
LABEL_22:
        operator delete(v16[5]);
        if (*((char *)v16 + 39) < 0) {
          goto LABEL_35;
        }
LABEL_23:
        operator delete(v16);
        char v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
      else
      {
        if ((*((char *)v16 + 159) & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_31:
        operator delete(v16[17]);
        if (*((char *)v16 + 135) < 0) {
          goto LABEL_32;
        }
LABEL_27:
        if ((*((char *)v16 + 95) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(v16[9]);
        if (*((char *)v16 + 63) < 0) {
          goto LABEL_22;
        }
LABEL_34:
        if ((*((char *)v16 + 39) & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_35:
        operator delete(v16[2]);
        operator delete(v16);
        char v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_4E6DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    sub_4DD068((uint64_t)&a9);
    sub_4D4B58(v30);
    _Unwind_Resume(a1);
  }
  sub_4DD068((uint64_t)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4E6E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4E6E84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  sub_4F8144(a2, &v3, (uint64_t)&v2);
  sub_65140();
}

void sub_4E7158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  sub_4DD068((uint64_t)&__p);
  sub_4D4880(&a30);
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  sub_651C4((id **)(v30 - 88));
  sub_1A668((void **)(v30 - 80));
  _Unwind_Resume(a1);
}

void sub_4E722C(char *a1, uint64_t a2, uint64_t a3)
{
  sub_501B78((uint64_t)(a1 + 1536), a2, (uint64_t)&v41);
  unint64_t v5 = (uint64_t *)nullsub_1(&v41);
  uint64_t v6 = *v5;
  uint64_t v38 = v5[1];
  if (*v5 != v38)
  {
    int v39 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 160);
    do
    {
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          int v10 = *(char **)v6;
          uint64_t v9 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
          int v10 = (char *)v6;
        }
        uint64_t v11 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v12 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v12)
        {
          if (v9 >= v12)
          {
            std::string v13 = &v10[v9];
            int v14 = *(char *)v11;
            uint64_t v15 = v10;
            do
            {
              uint64_t v16 = v9 - v12;
              if (v16 == -1) {
                break;
              }
              uint64_t v17 = (char *)memchr(v15, v14, v16 + 1);
              if (!v17) {
                break;
              }
              uint64_t v18 = v17;
              if (!memcmp(v17, v11, v12))
              {
                if (v18 == v13 || v18 - v10 == -1) {
                  break;
                }
                goto LABEL_30;
              }
              uint64_t v15 = v18 + 1;
              uint64_t v9 = v13 - (v18 + 1);
            }
            while (v9 >= v12);
          }
          memset(&__p, 0, sizeof(__p));
          sub_5F7A30((uint64_t)v7, (const std::string *)&word_255ECB0, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
LABEL_30:
          if (v39 >= 1)
          {
            memset(&__p, 0, sizeof(__p));
            sub_5F7A30((uint64_t)v7, (const std::string *)&word_255EC80, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          ++v39;
        }
        uint64_t v19 = sub_5231C((uint64_t)&v41);
        sub_60E8D8((uint64_t)(a1 + 3088), v6, v19, 0, (uint64_t)&__p);
        sub_5F41E8((uint64_t)v7, (uint64_t)&__p);
        if (*(char *)(v6 + 23) < 0)
        {
          uint64_t v21 = *(char **)v6;
          uint64_t v20 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v20 = *(unsigned __int8 *)(v6 + 23);
          uint64_t v21 = (char *)v6;
        }
        uint64_t v22 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v23 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v23)
        {
          if (v20 >= v23)
          {
            int64_t v24 = &v21[v20];
            int v25 = *(char *)v22;
            std::string v26 = v21;
            do
            {
              uint64_t v27 = v20 - v23;
              if (v27 == -1) {
                break;
              }
              uint64_t v28 = (char *)memchr(v26, v25, v27 + 1);
              if (!v28) {
                break;
              }
              v29 = v28;
              if (!memcmp(v28, v22, v23))
              {
                if (v29 == v24 || v29 - v21 == -1) {
                  break;
                }
                goto LABEL_53;
              }
              std::string v26 = v29 + 1;
              uint64_t v20 = v24 - (v29 + 1);
            }
            while (v20 >= v23);
          }
        }
        else
        {
LABEL_53:
          sub_4E79BC(a1, a2, (uint64_t)&__p, v7);
        }
        if (*(_DWORD *)(a2 + 1256) != 12 && sub_5F7924((char ***)v7, (char *)&qword_2560320))
        {
          unsigned int v8 = *(_DWORD *)(a2 + 1296);
          if ((int)v8 >= 36000)
          {
            if (v8 >= 0xD2F00)
            {
              unsigned int v8 = 864000 * vcvtmd_s64_f64((double)(int)v8 / 864000.0);
            }
            else
            {
              if ((v8 % 0x8CA0) >> 4 <= 0x464) {
                unsigned int v30 = v8 / 0x8CA0;
              }
              else {
                unsigned int v30 = v8 / 0x8CA0 + 1;
              }
              unsigned int v8 = 36000 * v30;
            }
          }
          sub_5F66B8(v7, (uint64_t)&qword_2560320, v8);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        v6 += 24;
        if (v6 == v38) {
          goto LABEL_62;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 24;
    }
    while (v6 != v38);
  }
LABEL_62:
  char v31 = v44;
  if (v44)
  {
    do
    {
      int64x2_t v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      char v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v43;
  int v43 = 0;
  if (v33) {
    operator delete(v33);
  }
  int64x2_t v34 = (void **)v41;
  if (v41)
  {
    uint64_t v35 = v42;
    int v36 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      int v36 = v41;
    }
    uint64_t v42 = v34;
    operator delete(v36);
  }
}

void sub_4E75F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
}

void sub_4E763C(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 432);
  sub_5031BC((uint64_t)(a1 + 1536), a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255ECB0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4E79BC(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  int v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4E77AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4E77C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4E77FC(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 592);
  sub_50390C(a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255EC80, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4E79BC(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  int v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4E796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4E7980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

char *sub_4E79BC(char *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = result;
  int64_t v7 = *(unsigned __int8 *)(a3 + 23);
  unsigned __int8 v8 = v7;
  uint64_t v9 = *(char **)a3;
  if ((v7 & 0x80u) == 0) {
    int v10 = (char *)a3;
  }
  else {
    int v10 = *(char **)a3;
  }
  if (byte_255F477 >= 0) {
    uint64_t v11 = &qword_255F460;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_255F460;
  }
  if (byte_255F477 >= 0) {
    int64_t v12 = byte_255F477;
  }
  else {
    int64_t v12 = unk_255F468;
  }
  if (!v12) {
    goto LABEL_234;
  }
  if ((v7 & 0x80u) != 0) {
    int64_t v7 = *(void *)(a3 + 8);
  }
  if (v7 >= v12)
  {
    v81 = result;
    std::string v13 = &v10[v7];
    int v14 = *(char *)v11;
    result = v10;
    while (1)
    {
      uint64_t v15 = v7 - v12;
      if (v15 == -1) {
        goto LABEL_73;
      }
      result = (char *)memchr(result, v14, v15 + 1);
      if (!result) {
        goto LABEL_73;
      }
      uint64_t v16 = result;
      result = (char *)memcmp(result, v11, v12);
      if (!result) {
        break;
      }
      result = v16 + 1;
      int64_t v7 = v13 - (v16 + 1);
      if (v7 < v12) {
        goto LABEL_73;
      }
    }
    if (v16 != v13)
    {
      uint64_t v6 = v81;
      if (v16 - v10 != -1)
      {
LABEL_234:
        if (*(unsigned char *)(a2 + 1144))
        {
          uint64_t v17 = *(void *)(a2 + 1120);
          if (*(char *)(v17 + 231) < 0)
          {
            sub_4200(&__dst, *(void **)(v17 + 208), *(void *)(v17 + 216));
            if ((*(char *)(v17 + 255) & 0x80000000) == 0) {
              goto LABEL_25;
            }
          }
          else
          {
            long long __dst = *(_OWORD *)(v17 + 208);
            uint64_t v100 = *(void *)(v17 + 224);
            if ((*(char *)(v17 + 255) & 0x80000000) == 0)
            {
LABEL_25:
              long long v101 = *(_OWORD *)(v17 + 232);
              uint64_t v102 = *(void *)(v17 + 248);
              goto LABEL_28;
            }
          }
          sub_4200(&v101, *(void **)(v17 + 232), *(void *)(v17 + 240));
LABEL_28:
          if (!*(unsigned char *)(a2 + 1144))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          if (*(char *)(a2 + 927) < 0)
          {
            sub_4200(v95, *(void **)(a2 + 904), *(void *)(a2 + 912));
          }
          else
          {
            *(_OWORD *)v95 = *(_OWORD *)(a2 + 904);
            uint64_t v96 = *(void *)(a2 + 920);
          }
          if (*(char *)(a2 + 951) < 0)
          {
            sub_4200(&__src, *(void **)(a2 + 928), *(void *)(a2 + 936));
          }
          else
          {
            long long __src = *(_OWORD *)(a2 + 928);
            uint64_t v98 = *(void *)(a2 + 944);
          }
          if (v102 >= 0) {
            uint64_t v18 = HIBYTE(v102);
          }
          else {
            uint64_t v18 = *((void *)&v101 + 1);
          }
          if (v18)
          {
            if (SHIBYTE(v102) < 0)
            {
              sub_4200(v83, (void *)v101, *((unint64_t *)&v101 + 1));
            }
            else
            {
              *(_OWORD *)v83 = v101;
              *(void *)&long long v84 = v102;
            }
          }
          else
          {
            v93 = operator new(0x38uLL);
            long long v94 = xmmword_20B9A20;
            strcpy((char *)v93, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
            *(_OWORD *)std::string __p = 0u;
            long long v91 = 0u;
            int v92 = 1065353216;
            sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v93, (uint64_t)__p, 0, (uint64_t)v83);
          }
          if (SHIBYTE(v102) < 0) {
            operator delete((void *)v101);
          }
          long long v101 = *(_OWORD *)v83;
          uint64_t v102 = v84;
          BYTE7(v84) = 0;
          LOBYTE(v83[0]) = 0;
          if (v18) {
            goto LABEL_51;
          }
          uint64_t v19 = (void *)v91;
          if ((void)v91)
          {
            do
            {
              uint64_t v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          uint64_t v21 = __p[0];
          __p[0] = 0;
          if (v21) {
            operator delete(v21);
          }
          if (SHIBYTE(v94) < 0)
          {
            operator delete(v93);
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24) {
              goto LABEL_55;
            }
          }
          else
          {
LABEL_51:
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24)
            {
LABEL_55:
              if (v22 < 0)
              {
                sub_4200(&v88, (void *)__src, v23);
              }
              else
              {
                long long v88 = __src;
                uint64_t v89 = v98;
              }
LABEL_63:
              if (SHIBYTE(v98) < 0) {
                operator delete((void *)__src);
              }
              long long __src = v88;
              uint64_t v98 = v89;
              HIBYTE(v89) = 0;
              LOBYTE(v88) = 0;
              if (!v24)
              {
                int v25 = (void *)v84;
                if ((void)v84)
                {
                  do
                  {
                    std::string v26 = (void *)*v25;
                    sub_4F4B48((uint64_t)(v25 + 2));
                    operator delete(v25);
                    int v25 = v26;
                  }
                  while (v26);
                }
                uint64_t v27 = v83[0];
                v83[0] = 0;
                if (v27) {
                  operator delete(v27);
                }
                if (SHIBYTE(v87) < 0) {
                  operator delete(v86);
                }
              }
              sub_5F738C(a4, (uint64_t)&qword_255F460);
            }
          }
          v86 = operator new(0x38uLL);
          long long v87 = xmmword_20B9A20;
          strcpy((char *)v86, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
          *(_OWORD *)v83 = 0u;
          long long v84 = 0u;
          int v85 = 1065353216;
          sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v86, (uint64_t)v83, 0, (uint64_t)&v88);
          goto LABEL_63;
        }
LABEL_230:
        v79 = __cxa_allocate_exception(8uLL);
        void *v79 = &off_2439078;
      }
    }
  }
LABEL_73:
  if ((v8 & 0x80u) == 0) {
    uint64_t v28 = (char *)a3;
  }
  else {
    uint64_t v28 = v9;
  }
  if (byte_255F54F >= 0) {
    v29 = &qword_255F538;
  }
  else {
    v29 = (uint64_t *)qword_255F538;
  }
  if (byte_255F54F >= 0) {
    int64_t v30 = byte_255F54F;
  }
  else {
    int64_t v30 = unk_255F540;
  }
  if (!v30) {
    goto LABEL_95;
  }
  int64_t v31 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v31 >= v30)
  {
    int64x2_t v32 = &v28[v31];
    int v33 = *(char *)v29;
    result = v28;
    while (1)
    {
      uint64_t v34 = v31 - v30;
      if (v34 == -1) {
        goto LABEL_105;
      }
      result = (char *)memchr(result, v33, v34 + 1);
      if (!result) {
        goto LABEL_105;
      }
      uint64_t v35 = result;
      result = (char *)memcmp(result, v29, v30);
      if (!result) {
        break;
      }
      result = v35 + 1;
      int64_t v31 = v32 - (v35 + 1);
      if (v31 < v30) {
        goto LABEL_105;
      }
    }
    if (v35 != v32 && v35 - v28 != -1)
    {
LABEL_95:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      float v36 = *(float *)(a2 + 856);
      if (v36 >= 0.0)
      {
        if (v36 < 8388600.0)
        {
          uint64_t v37 = (uint64_t)(float)(v36 + v36) + 1;
LABEL_103:
          float v36 = (float)(v37 >> 1);
        }
      }
      else if (v36 > -8388600.0)
      {
        uint64_t v37 = (uint64_t)(float)(v36 + v36);
        if (v37 >= 1) {
          --v37;
        }
        goto LABEL_103;
      }
      result = sub_5F71A4((uint64_t)a4, (uint64_t)&qword_255F538, v36);
      unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
      uint64_t v9 = *(char **)a3;
    }
  }
LABEL_105:
  uint64_t v38 = a2 + 1152;
  if ((v8 & 0x80u) == 0) {
    int v39 = (char *)a3;
  }
  else {
    int v39 = v9;
  }
  if (byte_255F567 >= 0) {
    uint64_t v40 = &qword_255F550;
  }
  else {
    uint64_t v40 = (uint64_t *)qword_255F550;
  }
  if (byte_255F567 >= 0) {
    int64_t v41 = byte_255F567;
  }
  else {
    int64_t v41 = unk_255F558;
  }
  if (v41)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v42 = v8;
    }
    else {
      int64_t v42 = *(void *)(a3 + 8);
    }
    if (v42 < v41) {
      goto LABEL_130;
    }
    int v43 = &v39[v42];
    int v44 = *(char *)v40;
    result = v39;
    while (1)
    {
      int64_t v45 = v42 - v41;
      if (v45 == -1) {
        goto LABEL_129;
      }
      result = (char *)memchr(result, v44, v45 + 1);
      if (!result) {
        goto LABEL_129;
      }
      uint64_t v46 = result;
      result = (char *)memcmp(result, v40, v41);
      if (!result) {
        break;
      }
      result = v46 + 1;
      int64_t v42 = v43 - (v46 + 1);
      if (v42 < v41) {
        goto LABEL_129;
      }
    }
    if (v46 == v43)
    {
LABEL_129:
      uint64_t v38 = a2 + 1152;
      goto LABEL_130;
    }
    uint64_t v38 = a2 + 1152;
    if (v46 - v39 == -1) {
      goto LABEL_130;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F550, (_DWORD *)(a2 + 860), v38, 4);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_130:
  if ((v8 & 0x80u) == 0) {
    uint64_t v47 = (char *)a3;
  }
  else {
    uint64_t v47 = v9;
  }
  if (byte_255F4BF >= 0) {
    uint64_t v48 = &qword_255F4A8;
  }
  else {
    uint64_t v48 = (uint64_t *)qword_255F4A8;
  }
  if (byte_255F4BF >= 0) {
    int64_t v49 = byte_255F4BF;
  }
  else {
    int64_t v49 = *(void *)&dword_255F4B0;
  }
  if (v49)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v50 = v8;
    }
    else {
      int64_t v50 = *(void *)(a3 + 8);
    }
    if (v50 < v49) {
      goto LABEL_155;
    }
    int v51 = &v47[v50];
    int v52 = *(char *)v48;
    result = v47;
    while (1)
    {
      int64_t v53 = v50 - v49;
      if (v53 == -1) {
        goto LABEL_154;
      }
      result = (char *)memchr(result, v52, v53 + 1);
      if (!result) {
        goto LABEL_154;
      }
      uint64_t v54 = result;
      result = (char *)memcmp(result, v48, v49);
      if (!result) {
        break;
      }
      result = v54 + 1;
      int64_t v50 = v51 - (v54 + 1);
      if (v50 < v49) {
        goto LABEL_154;
      }
    }
    if (v54 == v51)
    {
LABEL_154:
      uint64_t v38 = a2 + 1152;
      goto LABEL_155;
    }
    uint64_t v38 = a2 + 1152;
    if (v54 - v47 == -1) {
      goto LABEL_155;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4A8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 0);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_155:
  if ((v8 & 0x80u) == 0) {
    uint64_t v55 = (char *)a3;
  }
  else {
    uint64_t v55 = v9;
  }
  if (byte_255F4EF >= 0) {
    uint64_t v56 = &qword_255F4D8;
  }
  else {
    uint64_t v56 = (uint64_t *)qword_255F4D8;
  }
  if (byte_255F4EF >= 0) {
    int64_t v57 = byte_255F4EF;
  }
  else {
    int64_t v57 = *(void *)&dword_255F4E0;
  }
  if (!v57) {
    goto LABEL_177;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v58 = v8;
  }
  else {
    int64_t v58 = *(void *)(a3 + 8);
  }
  if (v58 >= v57)
  {
    unint64_t v59 = &v55[v58];
    int v60 = *(char *)v56;
    result = v55;
    while (1)
    {
      uint64_t v61 = v58 - v57;
      if (v61 == -1) {
        goto LABEL_179;
      }
      result = (char *)memchr(result, v60, v61 + 1);
      if (!result) {
        goto LABEL_179;
      }
      uint64_t v62 = result;
      result = (char *)memcmp(result, v56, v57);
      if (!result) {
        break;
      }
      result = v62 + 1;
      int64_t v58 = v59 - (v62 + 1);
      if (v58 < v57) {
        goto LABEL_179;
      }
    }
    if (v62 == v59)
    {
LABEL_179:
      uint64_t v38 = a2 + 1152;
    }
    else
    {
      uint64_t v38 = a2 + 1152;
      if (v62 - v55 != -1)
      {
LABEL_177:
        if (!*(unsigned char *)(a2 + 1144)) {
          goto LABEL_230;
        }
        result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4D8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 3);
        unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
        uint64_t v9 = *(char **)a3;
      }
    }
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v63 = (char *)a3;
  }
  else {
    uint64_t v63 = v9;
  }
  if (byte_255F4A7 >= 0) {
    int v64 = &qword_255F490;
  }
  else {
    int v64 = (uint64_t *)qword_255F490;
  }
  if (byte_255F4A7 >= 0) {
    int64_t v65 = byte_255F4A7;
  }
  else {
    int64_t v65 = unk_255F498;
  }
  if (!v65) {
    goto LABEL_202;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v66 = v8;
  }
  else {
    int64_t v66 = *(void *)(a3 + 8);
  }
  if (v66 < v65) {
    goto LABEL_205;
  }
  v67 = &v63[v66];
  int v68 = *(char *)v64;
  result = v63;
  while (1)
  {
    int64_t v69 = v66 - v65;
    if (v69 == -1) {
      goto LABEL_204;
    }
    result = (char *)memchr(result, v68, v69 + 1);
    if (!result) {
      goto LABEL_204;
    }
    v70 = result;
    result = (char *)memcmp(result, v64, v65);
    if (!result) {
      break;
    }
    result = v70 + 1;
    int64_t v66 = v67 - (v70 + 1);
    if (v66 < v65) {
      goto LABEL_204;
    }
  }
  if (v70 == v67)
  {
LABEL_204:
    uint64_t v38 = a2 + 1152;
    goto LABEL_205;
  }
  uint64_t v38 = a2 + 1152;
  if (v70 - v63 != -1)
  {
LABEL_202:
    if (!*(unsigned char *)(a2 + 1144)) {
      goto LABEL_230;
    }
    result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F490, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 0);
    unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
    uint64_t v9 = *(char **)a3;
  }
LABEL_205:
  if ((v8 & 0x80u) == 0) {
    uint64_t v71 = (char *)a3;
  }
  else {
    uint64_t v71 = v9;
  }
  if (byte_255F4D7 >= 0) {
    unint64_t v72 = &qword_255F4C0;
  }
  else {
    unint64_t v72 = (uint64_t *)qword_255F4C0;
  }
  if (byte_255F4D7 >= 0) {
    int64_t v73 = byte_255F4D7;
  }
  else {
    int64_t v73 = unk_255F4C8;
  }
  if (!v73) {
    goto LABEL_227;
  }
  int64_t v74 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v74 >= v73)
  {
    uint64_t v75 = &v71[v74];
    int v76 = *(char *)v72;
    result = v71;
    while (1)
    {
      uint64_t v77 = v74 - v73;
      if (v77 == -1) {
        return result;
      }
      result = (char *)memchr(result, v76, v77 + 1);
      if (!result) {
        return result;
      }
      v78 = result;
      result = (char *)memcmp(result, v72, v73);
      if (!result) {
        break;
      }
      result = v78 + 1;
      int64_t v74 = v75 - (v78 + 1);
      if (v74 < v73) {
        return result;
      }
    }
    if (v78 != v75 && v78 - v71 != -1)
    {
LABEL_227:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      return sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4C0, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 3);
    }
  }
  return result;
}

void sub_4E8490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_1B23C((uint64_t)&a37);
  sub_1B23C(v42 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_4E8578()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v10 = sub_4BBDC0(v0, v3);
  sub_500818(v10 + 1536, v8, v4);
  sub_4D30C8(v9 + 3088);
  *(_OWORD *)(v9 + 5264) = 0u;
  *(void *)(v9 + 5280) = v2;
  sub_688A04(v6, 0, *(_DWORD *)(v4 + 968), &v168);
  uint64_t v11 = v168;
  sub_688A04(v6, 4u, *(_DWORD *)(v4 + 968), (uint64_t *)v167);
  sub_8D8884(v11, *(uint64_t *)&v167[0]);
  int64_t v12 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v165 = v168;
  v166 = v169;
  if (v169) {
    atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v164 = 0u;
  bzero(v21, 0x7F8uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v23 = v22;
  int64x2_t v24 = v22;
  int64x2_t v25 = v22;
  int64x2_t v26 = v22;
  int64x2_t v27 = v22;
  int64x2_t v28 = v22;
  int64x2_t v29 = v22;
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = 0x8000000080000000;
  *((void *)&v13 + 1) = 0x8000000080000000;
  long long v31 = v13;
  long long v32 = v13;
  long long v33 = v13;
  long long v34 = v13;
  int v35 = 0x7FFFFFFF;
  int64x2_t v36 = v22;
  int64x2_t v37 = v22;
  long long v38 = v13;
  long long v39 = v13;
  unint64_t v40 = 0x8000000080000000;
  int64x2_t v41 = v22;
  int64x2_t v42 = v22;
  int64x2_t v43 = v22;
  int64x2_t v44 = v22;
  int64x2_t v45 = v22;
  int64x2_t v46 = v22;
  int64x2_t v47 = v22;
  int64x2_t v48 = v22;
  long long v49 = 0u;
  int64x2_t v50 = v22;
  int64x2_t v51 = v22;
  int64x2_t v52 = v22;
  int64x2_t v53 = v22;
  int64x2_t v54 = v22;
  int64x2_t v55 = v22;
  int64x2_t v56 = v22;
  int64x2_t v57 = v22;
  int64x2_t v58 = v22;
  int64x2_t v59 = v22;
  int64x2_t v60 = v22;
  int64x2_t v61 = v22;
  int64x2_t v62 = v22;
  int64x2_t v63 = v22;
  int64x2_t v64 = v22;
  int64x2_t v65 = v22;
  int64x2_t v66 = v22;
  int64x2_t v67 = v22;
  int64x2_t v68 = v22;
  int64x2_t v69 = v22;
  int64x2_t v70 = v22;
  int64x2_t v71 = v22;
  int64x2_t v72 = v22;
  int64x2_t v73 = v22;
  int64x2_t v74 = v22;
  int64x2_t v75 = v22;
  int64x2_t v76 = v22;
  int64x2_t v77 = v22;
  int64x2_t v78 = v22;
  int64x2_t v79 = v22;
  int64x2_t v80 = v22;
  int64x2_t v81 = v22;
  int64x2_t v82 = v22;
  int64x2_t v83 = v22;
  int64x2_t v84 = v22;
  int64x2_t v85 = v22;
  int64x2_t v86 = v22;
  int64x2_t v87 = v22;
  int64x2_t v88 = v22;
  int64x2_t v89 = v22;
  int64x2_t v90 = v22;
  int64x2_t v91 = v22;
  int64x2_t v92 = v22;
  int64x2_t v93 = v22;
  int64x2_t v94 = v22;
  int64x2_t v95 = v22;
  int64x2_t v96 = v22;
  int64x2_t v97 = v22;
  int64x2_t v98 = v22;
  int64x2_t v99 = v22;
  int64x2_t v100 = v22;
  int64x2_t v101 = v22;
  uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  char v103 = 0;
  int64x2_t v104 = v22;
  int64x2_t v105 = v22;
  int64x2_t v106 = v22;
  int64x2_t v107 = v22;
  int64x2_t v108 = v22;
  int64x2_t v109 = v22;
  int64x2_t v110 = v22;
  int64x2_t v111 = v22;
  int64x2_t v112 = v22;
  int64x2_t v113 = v22;
  int64x2_t v114 = v22;
  int64x2_t v115 = v22;
  uint64_t v116 = 0;
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  char v118 = 0;
  uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  long long v122 = v13;
  long long v123 = v13;
  long long v121 = v13;
  uint64_t v124 = -1;
  char v125 = 0;
  uint64_t v126 = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v127 = v22;
  uint64_t v128 = 0x7FFFFFFFFFFFFFFFLL;
  char v129 = 0;
  int v130 = 0x7FFFFFFF;
  uint64_t v131 = 0;
  __int16 v132 = 0;
  int64x2_t v133 = v22;
  int64x2_t v134 = v22;
  int64x2_t v135 = v22;
  int64x2_t v136 = v22;
  int64x2_t v137 = v22;
  int64x2_t v138 = v22;
  int64x2_t v139 = v22;
  int64x2_t v140 = v22;
  int64x2_t v141 = v22;
  int64x2_t v142 = v22;
  int64x2_t v143 = v22;
  int64x2_t v144 = v22;
  int64x2_t v145 = v22;
  int64x2_t v146 = v22;
  memset(v147, 0, sizeof(v147));
  uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
  int v150 = 0;
  *(void *)((char *)v152 + 5) = 0;
  v152[0] = 0;
  long long __p = 0u;
  int64x2_t v153 = v22;
  int64x2_t v154 = v22;
  char v155 = 1;
  uint64_t v156 = 0;
  char v157 = 0;
  uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
  char v159 = 0;
  uint64_t v160 = 0x7FFFFFFFFFFFFFFFLL;
  long long v161 = 0u;
  __int16 v163 = 0;
  uint64_t v162 = 0;
  sub_60DE48((uint64_t)v167, &v165, &v164, v21, v4);
  sub_4D3210(v9 + 3088, v167);
  sub_4F2894((uint64_t)v167);
  if (SHIBYTE(v152[0]) < 0) {
    operator delete((void *)__p);
  }
  int v14 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v166;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_70F6C0(v167, v6, v4);
  long long v16 = v167[0];
  v167[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v9 + 5272);
  *(_OWORD *)(v9 + 5264) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v169;
  if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v9;
}

void sub_4E8C80(_Unwind_Exception *a1)
{
  sub_14A84(v4 - 96);
  sub_14A84(v1 + 5264);
  sub_4F2894(v3);
  sub_651C4((id **)(v1 + 3072));
  sub_4BCED0(v2);
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_4E8D04()
{
}

void sub_4E8D0C(_Unwind_Exception *a1)
{
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_4E8D24(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v40 = 0;
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  sub_4D6AC8((uint64_t *)&v40, 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5));
  long long __p = 0;
  long long v38 = 0;
  unint64_t v39 = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 == v7) {
    goto LABEL_79;
  }
  uint64_t v8 = a3 + 133;
  int v9 = -1;
  do
  {
    int v10 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 50)
    {
      if (sub_605454(v6 + 32))
      {
        if (*(char *)(v6 + 1175) < 0)
        {
          if (*(void *)(v6 + 1160)) {
            goto LABEL_15;
          }
        }
        else if (*(unsigned char *)(v6 + 1175))
        {
          goto LABEL_15;
        }
      }
      if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
        || *(_DWORD *)(v6 + 1200) != 2
        || *(_DWORD *)(v6 + 1256) != 12
        || *(void *)(v6 + 1328) != *(void *)(v6 + 1336))
      {
        goto LABEL_15;
      }
      int v15 = *(_DWORD *)(v6 + 1360);
      if (v15)
      {
        if (v15 == 1)
        {
          int v16 = *(_DWORD *)(v6 + 1352);
          if (v16 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v16 && *(_DWORD *)(v6 + 1364) != 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        int v18 = *(_DWORD *)(v6 + 1352);
        if (v18 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v18) {
          goto LABEL_15;
        }
      }
      if (*(char *)(v6 + 1399) < 0)
      {
        if (!*(void *)(v6 + 1384))
        {
LABEL_68:
          if (*(_DWORD *)(v6 + 1400) == -1 && *(_DWORD *)(v6 + 1404) == -1) {
            goto LABEL_4;
          }
        }
      }
      else if (!*(unsigned char *)(v6 + 1399))
      {
        goto LABEL_68;
      }
LABEL_15:
      int v10 = *(_DWORD *)v6;
    }
    unsigned int v11 = v10 - 40;
    if ((v10 - 40) >= 6
      && v10 != 50
      && *(_DWORD *)(v6 + 1400) == -1
      && v10 != 48
      && *(_DWORD *)(v6 + 1404) == -1
      || (int v12 = *(_DWORD *)(v6 + 1256), v12 == 11))
    {
LABEL_27:
      long long v13 = v41;
      if ((unint64_t)v41 >= v42)
      {
        int64x2_t v41 = (char *)sub_4C83E4((uint64_t *)&v40, v6);
      }
      else
      {
        sub_4C8540((uint64_t)v41, v6);
        int64x2_t v41 = v13 + 1440;
      }
      goto LABEL_4;
    }
    if (*(char *)(v6 + 1399) < 0)
    {
      if (*(void *)(v6 + 1384)) {
        goto LABEL_27;
      }
    }
    else if (*(unsigned char *)(v6 + 1399))
    {
      goto LABEL_27;
    }
    if (v11 <= 4)
    {
      unint64_t v14 = v35;
      if (v35 >= v36)
      {
        unint64_t v35 = sub_4C83E4((uint64_t *)&v34, v6);
      }
      else
      {
        sub_4C8540(v35, v6);
        unint64_t v35 = v14 + 1440;
      }
      goto LABEL_4;
    }
    if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
      || (v12 - 2) < 9
      || *(_DWORD *)(v6 + 1200) == 1 && *(void *)(v6 + 1208) != *(void *)(v6 + 1216))
    {
      goto LABEL_51;
    }
    if (sub_605454(v6 + 32))
    {
      if (*(char *)(v6 + 1175) < 0)
      {
        if (*(void *)(v6 + 1160)) {
          goto LABEL_51;
        }
      }
      else if (*(unsigned char *)(v6 + 1175))
      {
        goto LABEL_51;
      }
    }
    if (*(_DWORD *)(v6 + 1400) != -1 || *(_DWORD *)(v6 + 1404) != -1)
    {
LABEL_51:
      if (v9 < 0) {
        int v9 = -1108378657 * ((unint64_t)(a3[134] - a3[133]) >> 4);
      }
      if (!sub_605454(v6 + 32)) {
        goto LABEL_59;
      }
      if (*(char *)(v6 + 1175) < 0)
      {
        if (!*(void *)(v6 + 1160)) {
          goto LABEL_59;
        }
      }
      else if (!*(unsigned char *)(v6 + 1175))
      {
LABEL_59:
        uint64_t v17 = v38;
        if ((unint64_t)v38 >= v39)
        {
          long long v38 = (char *)sub_4C83E4((uint64_t *)&__p, v6);
        }
        else
        {
          sub_4C8540((uint64_t)v38, v6);
          long long v38 = v17 + 1440;
        }
        goto LABEL_4;
      }
      if (sub_6054A8(v6 + 32))
      {
        sub_4D6BC4((uint64_t *)&__p, (uint64_t)__p, v6);
        goto LABEL_4;
      }
      goto LABEL_59;
    }
    sub_4EBCEC(a1, v6, (uint64_t)v43);
    unint64_t v19 = a3[134];
    if (v19 >= a3[135]) {
      uint64_t v20 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    else {
      uint64_t v20 = sub_4F4498(v19, (uint64_t)v43) + 496;
    }
    a3[134] = v20;
    sub_4F2FF8((uint64_t)v43);
LABEL_4:
    v6 += 1440;
  }
  while (v6 != v7);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((v38 - (unsigned char *)__p) >> 5)) > 1) {
    goto LABEL_78;
  }
  if (__p != v38)
  {
    if (v40 == v41)
    {
      uint64_t v25 = *v8;
      sub_4EBCEC(a1, (uint64_t)__p, (uint64_t)v43);
      sub_4D7130(v8, v25 + 496 * v9, (uint64_t)v43);
    }
    else
    {
LABEL_78:
      uint64_t v21 = *v8;
      sub_4EC06C();
      sub_4D7130(v8, v21 + 496 * v9, (uint64_t)v43);
    }
LABEL_87:
    sub_4F2FF8((uint64_t)v43);
    unint64_t v24 = (unint64_t)v34;
    goto LABEL_88;
  }
LABEL_79:
  if (v40 != v41)
  {
    sub_4EB434(a1, (uint64_t *)&v40, (uint64_t)v43);
    unint64_t v22 = a3[134];
    if (v22 < a3[135]) {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v43) + 496;
    }
    else {
      uint64_t v23 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    a3[134] = v23;
    goto LABEL_87;
  }
  unint64_t v24 = (unint64_t)v34;
  if (v34 != (void *)v35) {
    sub_4EB890(a1, (uint64_t *)&v34, (uint64_t)v43);
  }
LABEL_88:
  if (v24)
  {
    uint64_t v26 = v35;
    int64x2_t v27 = (void *)v24;
    if (v35 != v24)
    {
      do
        uint64_t v26 = sub_4BD604(v26 - 1440);
      while (v26 != v24);
      int64x2_t v27 = v34;
    }
    unint64_t v35 = v24;
    operator delete(v27);
  }
  int64x2_t v28 = (char *)__p;
  if (__p)
  {
    int64x2_t v29 = v38;
    uint64_t v30 = __p;
    if (v38 != __p)
    {
      do
        int64x2_t v29 = (char *)sub_4BD604((uint64_t)(v29 - 1440));
      while (v29 != v28);
      uint64_t v30 = __p;
    }
    long long v38 = v28;
    operator delete(v30);
  }
  long long v31 = (char *)v40;
  if (v40)
  {
    long long v32 = v41;
    long long v33 = v40;
    if (v41 != v40)
    {
      do
        long long v32 = (char *)sub_4BD604((uint64_t)(v32 - 1440));
      while (v32 != v31);
      long long v33 = v40;
    }
    int64x2_t v41 = v31;
    operator delete(v33);
  }
}

void sub_4E9308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
}

void **sub_4E939C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  sub_4F29BC((uint64_t)v7);
  if (*(unsigned char *)(a1 + 1453))
  {
    sub_4E8D24(a1, a2, (uint64_t *)v7);
  }
  else if (*(unsigned char *)(a1 + 1407))
  {
    sub_4E947C(a1, (uint64_t *)a2, (uint64_t *)v7);
  }
  else
  {
    sub_4E9A90(a1, (uint64_t *)a2, (uint64_t)v7);
  }
  sub_647CE0(a3, (uint64_t)v7);
  return sub_4F2BD0(v7);
}

void sub_4E9468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F2BD0((void **)va);
  _Unwind_Resume(a1);
}

void sub_4E947C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long __p = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_91;
  }
  do
  {
    if (*(_DWORD *)v5 != 50) {
      goto LABEL_31;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_31;
      }
    }
    if (*(void *)(v5 + 1176) == *(void *)(v5 + 1184)
      && *(_DWORD *)(v5 + 1200) == 2
      && *(_DWORD *)(v5 + 1256) == 12
      && *(void *)(v5 + 1328) == *(void *)(v5 + 1336))
    {
      int v8 = *(_DWORD *)(v5 + 1360);
      if (v8)
      {
        if (v8 == 1)
        {
          int v9 = *(_DWORD *)(v5 + 1352);
          if (v9 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v9 && *(_DWORD *)(v5 + 1364) != 0x7FFFFFFF) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        int v10 = *(_DWORD *)(v5 + 1352);
        if (v10 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v10) {
          goto LABEL_31;
        }
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        if (*(void *)(v5 + 1384)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1399))
      {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_6;
      }
    }
LABEL_31:
    if ((*(_DWORD *)(v5 + 1256) - 2) >= 9)
    {
      if (sub_605454(v5 + 32))
      {
        if (*(char *)(v5 + 1175) < 0)
        {
          if (*(void *)(v5 + 1160)) {
            goto LABEL_53;
          }
        }
        else if (*(unsigned char *)(v5 + 1175))
        {
          goto LABEL_53;
        }
      }
      int v11 = *(_DWORD *)v5;
      unsigned int v12 = *(_DWORD *)v5 - 40;
      if (v12 >= 5
        && (v11 == 45 || v11 != 50 && *(_DWORD *)(v5 + 1400) == -1 && v11 != 48 && *(_DWORD *)(v5 + 1404) == -1))
      {
        goto LABEL_53;
      }
      int v13 = *(_DWORD *)(v5 + 1256);
      if (v13 == 11) {
        goto LABEL_53;
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        uint64_t v14 = *(void *)(v5 + 1384);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)(v5 + 1399);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      if (!v14)
      {
        if (*(void *)(v5 + 1176) != *(void *)(v5 + 1184))
        {
          sub_4ED63C(a1, v5, (uint64_t)v36);
          unint64_t v15 = a3[131];
          if (v15 >= a3[132]) {
            a3[131] = sub_4F4C08(a3 + 130, (uint64_t)v36);
          }
          else {
            a3[131] = sub_4F4498(v15, (uint64_t)v36) + 496;
          }
          goto LABEL_5;
        }
        if (*(_DWORD *)(v5 + 1200) != 2)
        {
          sub_4EA8C4(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 6), (uint64_t)v36);
          goto LABEL_5;
        }
        if (v13 != 12)
        {
          sub_4EAFD0(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 68), (uint64_t)v36);
LABEL_5:
          sub_4F2FF8((uint64_t)v36);
          goto LABEL_6;
        }
        goto LABEL_6;
      }
    }
LABEL_53:
    if ((*(_DWORD *)(v5 + 1256) - 2) < 9) {
      goto LABEL_66;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_66;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_66;
      }
    }
    int v16 = *(_DWORD *)v5;
    unsigned int v17 = *(_DWORD *)v5 - 40;
    if (v17 >= 5 && v16 != 50)
    {
      if (v16 == 45)
      {
LABEL_66:
        sub_4EA174(a1, v5, (uint64_t)v36);
        unint64_t v18 = a3[4];
        if (v18 < a3[5]) {
          uint64_t v7 = sub_4F4498(v18, (uint64_t)v36) + 496;
        }
        else {
          uint64_t v7 = sub_4F4C08(a3 + 3, (uint64_t)v36);
        }
        a3[4] = v7;
        goto LABEL_5;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && v16 != 48 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_69;
      }
    }
    if (*(_DWORD *)(v5 + 1256) == 11)
    {
LABEL_69:
      unint64_t v19 = v34;
      if ((unint64_t)v34 >= v35)
      {
        long long v34 = (char *)sub_4C83E4((uint64_t *)&__p, v5);
      }
      else
      {
        sub_4C8540((uint64_t)v34, v5);
        long long v34 = v19 + 1440;
      }
      goto LABEL_6;
    }
    if (*(char *)(v5 + 1399) < 0)
    {
      if (*(void *)(v5 + 1384)) {
        goto LABEL_69;
      }
    }
    else if (*(unsigned char *)(v5 + 1399))
    {
      goto LABEL_69;
    }
    if (v17 <= 4)
    {
      unint64_t v20 = v31;
      if (v31 >= v32)
      {
        uint64_t v21 = sub_4C83E4((uint64_t *)&v30, v5);
      }
      else
      {
        sub_4C8540(v31, v5);
        uint64_t v21 = v20 + 1440;
      }
      unint64_t v31 = v21;
    }
LABEL_6:
    v5 += 1440;
  }
  while (v5 != v6);
  if (__p != v34)
  {
    sub_4EB434(a1, (uint64_t *)&__p, (uint64_t)v36);
    unint64_t v22 = a3[4];
    if (v22 >= a3[5]) {
      uint64_t v23 = sub_4F4C08(a3 + 3, (uint64_t)v36);
    }
    else {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v36) + 496;
    }
    a3[4] = v23;
    sub_4F2FF8((uint64_t)v36);
  }
LABEL_91:
  unint64_t v24 = (unint64_t)v30;
  if (v30 != (void *)v31) {
    sub_4EB890(a1, (uint64_t *)&v30, (uint64_t)v36);
  }
  if (v30)
  {
    uint64_t v25 = v31;
    uint64_t v26 = v30;
    if ((void *)v31 != v30)
    {
      do
        uint64_t v25 = sub_4BD604(v25 - 1440);
      while (v25 != v24);
      uint64_t v26 = v30;
    }
    unint64_t v31 = v24;
    operator delete(v26);
  }
  int64x2_t v27 = (char *)__p;
  if (__p)
  {
    int64x2_t v28 = v34;
    int64x2_t v29 = __p;
    if (v34 != __p)
    {
      do
        int64x2_t v28 = (char *)sub_4BD604((uint64_t)(v28 - 1440));
      while (v28 != v27);
      int64x2_t v29 = __p;
    }
    long long v34 = v27;
    operator delete(v29);
  }
}

void sub_4E99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_4E9A90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0x4FA4FA4FA4FA4FA5 * (v3 >> 5);
  uint64_t v9 = a1 + 1536;
  uint64_t v10 = a1 + 3088;
  do
  {
    uint64_t v12 = *a2;
    uint64_t v13 = *a2 + 1440 * v7;
    if (*(_DWORD *)v13 != 50) {
      goto LABEL_16;
    }
    if (sub_605454(v12 + 1440 * v7 + 32))
    {
      if (*(char *)(v13 + 1175) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1160)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1175))
      {
        goto LABEL_16;
      }
    }
    if (*(void *)(v12 + 1440 * v7 + 1176) == *(void *)(v12 + 1440 * v7 + 1184)
      && *(_DWORD *)(v12 + 1440 * v7 + 1200) == 2
      && *(_DWORD *)(v12 + 1440 * v7 + 1256) == 12
      && *(void *)(v12 + 1440 * v7 + 1328) == *(void *)(v12 + 1440 * v7 + 1336))
    {
      uint64_t v28 = v12 + 1440 * v7;
      int64x2_t v29 = (int *)(v28 + 1352);
      int v30 = *(_DWORD *)(v28 + 1360);
      if (v30)
      {
        if (v30 == 1)
        {
          int v31 = *v29;
          if (v31 != 0x7FFFFFFF
            && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v31
            && *(_DWORD *)(v12 + 1440 * v7 + 1364) != 0x7FFFFFFF)
          {
            goto LABEL_16;
          }
        }
      }
      else
      {
        int v32 = *v29;
        if (v32 != 0x7FFFFFFF && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v32) {
          goto LABEL_16;
        }
      }
      if (*(char *)(v13 + 1399) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1384)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1399))
      {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v12 + 1440 * v7 + 1400) == -1 && *(_DWORD *)(v12 + 1440 * v7 + 1404) == -1) {
        goto LABEL_5;
      }
    }
LABEL_16:
    if (*(_DWORD *)(v12 + 1440 * v7 + 1256) != 12) {
      goto LABEL_5;
    }
    if ((*(_DWORD *)v13 - 40) <= 4)
    {
      uint64_t v14 = v42;
      if ((unint64_t)v42 >= v43)
      {
        int v11 = (char *)sub_4C83E4((uint64_t *)&v41, v13);
      }
      else
      {
        sub_4C8540((uint64_t)v42, v13);
        int v11 = v14 + 1440;
      }
      unint64_t v42 = v11;
      goto LABEL_5;
    }
    sub_50081C(v9, v13, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v39);
    if (v40 < 0)
    {
      if (!v39[1])
      {
        operator delete(v39[0]);
        unint64_t v15 = v36;
        if (!v36) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    else if (!v40)
    {
      unint64_t v15 = v36;
      if (!v36) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        int v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        unint64_t v15 = v16;
      }
      while (v16);
LABEL_24:
      unsigned int v17 = __p;
      long long __p = 0;
      if (v17) {
        operator delete(v17);
      }
      unint64_t v18 = (void **)v33;
      if (v33)
      {
        unint64_t v19 = v34;
        unint64_t v20 = v33;
        if (v34 != v33)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 3;
          }
          while (v19 != v18);
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      goto LABEL_5;
    }
    sub_4EA06C(a1, 1, (uint64_t)&v33);
    uint64_t v21 = sub_5231C((uint64_t)&v33);
    sub_60E8D8(v10, (uint64_t)v39, v21, 0, (uint64_t)v37);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 >= *(void *)(a3 + 16))
    {
      *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)v37);
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v38) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 8), v37[0], (unint64_t)v37[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v37;
        *(void *)(v22 + 16) = v38;
        *(_OWORD *)unint64_t v22 = v23;
      }
      *(void *)(a3 + 8) = v22 + 24;
      *(void *)(a3 + 8) = v22 + 24;
      if ((SHIBYTE(v38) & 0x80000000) == 0)
      {
LABEL_37:
        if (v40 < 0) {
          goto LABEL_55;
        }
        goto LABEL_38;
      }
    }
    operator delete(v37[0]);
    if (v40 < 0)
    {
LABEL_55:
      operator delete(v39[0]);
      unint64_t v24 = v36;
      if (!v36) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_38:
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_40;
    }
    do
    {
LABEL_39:
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
LABEL_40:
    uint64_t v26 = __p;
    long long __p = 0;
    if (v26) {
      operator delete(v26);
    }
    unint64_t v18 = (void **)v33;
    if (v33)
    {
      int64x2_t v27 = v34;
      unint64_t v20 = v33;
      if (v34 == v33) {
        goto LABEL_49;
      }
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v18);
LABEL_48:
      unint64_t v20 = v33;
LABEL_49:
      long long v34 = v18;
      operator delete(v20);
    }
LABEL_5:
    ++v7;
  }
  while (v7 != v8);
  if (v41 != v42) {
    sub_4F0F84(a1, (uint64_t *)&v41);
  }
  if (v42) {
    operator delete(v42);
  }
}

void sub_4E9F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_4D4B58((uint64_t)&a9);
  sub_4AF510((void **)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_4E9F8C(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4E9FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 8) = v35;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  sub_4D4880((void **)&a9);
  sub_4AF510((void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_4EA058(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4EA06C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    *(_OWORD *)long long __p = 0u;
    long long v8 = 0u;
    int v9 = 1065353216;
    sub_60E8D8(a1 + 3088, (uint64_t)&dword_25607D0, (uint64_t)__p, 0, (uint64_t)&v10);
    uint64_t v4 = (void *)v8;
    if ((void)v8)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
    v10.__r_.__value_.__s.__data_[0] = 0;
  }
  sub_6358A0(a3, &xmmword_25607A0, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_4EA144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4EA158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4EA174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34((uint64_t)v63);
  BOOL v64 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  sub_5F3B34((uint64_t)&v68);
  v69[8] = -1;
  *(_DWORD *)((char *)v70 + 3) = -1;
  LODWORD(v70[0]) = -1;
  memset((char *)v70 + 7, 0, 26);
  uint64_t v72 = 0;
  long long v71 = 0uLL;
  char v73 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  sub_50081C(a1 + 1536, a2, (uint64_t)&v35);
  sub_635CD0((long long **)&v35, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_25:
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 407) = 0;
    *(void *)(a3 + 415) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 480) = 0u;
    unint64_t v19 = v38;
    if (!v38) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_25;
  }
LABEL_3:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_6358A0((uint64_t)&v35, &xmmword_25607A0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_635CD0((long long **)&v35, (uint64_t)v32);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v35);
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  uint64_t v56 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v52[4] = 0u;
  *(_OWORD *)&v48[4] = 0u;
  long long v49 = 0u;
  *(void *)int64x2_t v44 = 0x7FFFFFFFLL;
  *(_OWORD *)&v44[16] = 0u;
  *(_OWORD *)&v42[8] = 0u;
  uint64_t v41 = 0;
  *(int64x2_t *)unint64_t v42 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v43 = *(_OWORD *)v42;
  __p.__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
  uint64_t v40 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  *(_DWORD *)&v42[16] = 0x7FFFFFFF;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  *(void *)&v44[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v46 = 0u;
  memset(v47, 0, sizeof(v47));
  unint64_t v45 = 0x8000000080000000;
  *(void *)int64x2_t v48 = 0x8000000080000000;
  *(_DWORD *)&v48[8] = 0x7FFFFFFF;
  LODWORD(v49) = -1;
  uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
  int v51 = 0x7FFFFFFF;
  *(void *)int64x2_t v52 = 0x7FFFFFFF7FFFFFFFLL;
  long long v53 = _Q1;
  v54[1] = 0;
  v54[0] = 0;
  uint64_t v55 = 0;
  uint64_t v58 = 0;
  v57[0] = 0;
  v57[1] = 0;
  unint64_t v59 = 0xFFFFFFFF00000000;
  uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v32, v6, &__p, v34);
  sub_4D90B4((uint64_t)v63, (uint64_t)v34);
  sub_4D4B58((uint64_t)v34);
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  uint64_t v12 = (void **)v54[0];
  if (v54[0])
  {
    uint64_t v13 = (void **)v54[1];
    uint64_t v14 = v54[0];
    if (v54[1] != v54[0])
    {
      do
        uint64_t v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v54[0];
    }
    v54[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v47[8])
  {
    *(void *)&v47[16] = *(void *)&v47[8];
    operator delete(*(void **)&v47[8]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    uint64_t v16 = __p.__r_.__value_.__r.__words[2];
    unsigned int v17 = (void *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while (v16 != v15);
      unsigned int v17 = (void *)__p.__r_.__value_.__l.__size_;
    }
    __p.__r_.__value_.__r.__words[2] = v15;
    operator delete(v17);
  }
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if (*(_DWORD *)(a2 + 1256) == 12) {
      goto LABEL_37;
    }
  }
  else if (*(_DWORD *)(a2 + 1256) == 12)
  {
    goto LABEL_37;
  }
  if (sub_5F7924(v63, (char *)&qword_2560320))
  {
    unsigned int v20 = *(_DWORD *)(a2 + 1296);
    if ((int)v20 >= 36000)
    {
      if (v20 >> 8 > 0xD2E)
      {
        unsigned int v20 = 864000 * vcvtmd_s64_f64((double)(int)v20 / 864000.0);
      }
      else
      {
        if ((v20 % 0x8CA0) >> 4 <= 0x464) {
          unsigned int v21 = v20 / 0x8CA0;
        }
        else {
          unsigned int v21 = v20 / 0x8CA0 + 1;
        }
        unsigned int v20 = 36000 * v21;
      }
    }
    sub_5F66B8((uint64_t *)v63, (uint64_t)&qword_2560320, v20);
  }
LABEL_37:
  sub_4F078C(a1, (_DWORD *)a2, v63);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_49;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_77:
      BOOL v23 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_50;
    }
LABEL_49:
    BOOL v23 = 1;
    goto LABEL_50;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v22 = *(void *)(a2 + 1160);
  }
  BOOL v23 = 1;
  if (!v22 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_77;
  }
LABEL_50:
  BOOL v64 = v23;
  sub_4EDD10(a2, (uint64_t)&__p);
  sub_4F377C((uint64_t)v69, (uint64_t)&__p);
  v70[0] = *(void *)v42;
  if (SHIBYTE(v70[3]) < 0) {
    operator delete((void *)v70[1]);
  }
  *(_OWORD *)&v70[1] = *(_OWORD *)&v42[8];
  v70[3] = v43;
  BYTE7(v43) = 0;
  v42[8] = 0;
  LOBYTE(v70[4]) = BYTE8(v43);
  if (SHIBYTE(v72) < 0)
  {
    operator delete((void *)v71);
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    if (SBYTE7(v43) < 0)
    {
      operator delete(*(void **)&v42[8]);
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
    else
    {
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
  }
  else
  {
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    int v24 = v41;
    if (v41 == 1)
    {
LABEL_54:
      uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_62;
      }
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      goto LABEL_61;
    }
  }
  if (!v24 && SHIBYTE(v40) < 0)
  {
    uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
LABEL_61:
    operator delete(v25);
  }
LABEL_62:
  sub_4F4498(a3, (uint64_t)v63);
  unint64_t v19 = v38;
  if (!v38) {
    goto LABEL_64;
  }
  do
  {
LABEL_63:
    uint64_t v26 = (void *)*v19;
    sub_4F4B48((uint64_t)(v19 + 2));
    operator delete(v19);
    unint64_t v19 = v26;
  }
  while (v26);
LABEL_64:
  int64x2_t v27 = v37;
  int64x2_t v37 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v35;
  if (v35)
  {
    int64x2_t v29 = v36;
    int v30 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      int v30 = v35;
    }
    uint64_t v36 = v28;
    operator delete(v30);
  }
  return sub_4F2FF8((uint64_t)v63);
}

void sub_4EA7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4DC10C(v33);
  sub_4D4B58(v32);
  sub_4D4880(&a32);
  sub_4F2FF8((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_4EA808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
}

void sub_4EA8C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500DBC(a2, (uint64_t)&v47);
  sub_635CD0((long long **)&v47, (uint64_t)v43);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v47);
  uint64_t v72 = 0;
  uint64_t v74 = 0;
  uint64_t v68 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v64[4] = 0u;
  *(_OWORD *)&v60[4] = 0u;
  long long v61 = 0u;
  *(void *)uint64_t v56 = 0x7FFFFFFFLL;
  *(_OWORD *)&v56[16] = 0u;
  *(_OWORD *)&v54[8] = 0u;
  uint64_t v53 = 0;
  *(int64x2_t *)int64x2_t v54 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v55 = *(_OWORD *)v54;
  v51[0] = (void *)0xFFFFFFFFLL;
  long long v52 = 0uLL;
  v51[1] = 0;
  *(_DWORD *)&v54[16] = 0x7FFFFFFF;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  *(void *)&v56[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v58 = 0u;
  memset(v59, 0, sizeof(v59));
  unint64_t v57 = 0x8000000080000000;
  *(void *)uint64_t v60 = 0x8000000080000000;
  *(_DWORD *)&v60[8] = 0x7FFFFFFF;
  LODWORD(v61) = -1;
  uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  int v63 = 0x7FFFFFFF;
  *(void *)BOOL v64 = 0x7FFFFFFF7FFFFFFFLL;
  long long v65 = _Q1;
  v66[1] = 0;
  v66[0] = 0;
  uint64_t v67 = 0;
  uint64_t v70 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v71 = 0xFFFFFFFF00000000;
  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v43, v6, v51, (char **)&v45);
  sub_4D90B4(a3, (uint64_t)&v45);
  sub_4D4B58((uint64_t)&v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v66[0];
  if (v66[0])
  {
    uint64_t v13 = (void **)v66[1];
    uint64_t v14 = v66[0];
    if (v66[1] != v66[0])
    {
      do
        uint64_t v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v66[0];
    }
    v66[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v59[8])
  {
    *(void *)&v59[16] = *(void *)&v59[8];
    operator delete(*(void **)&v59[8]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  std::string::size_type v15 = v51[1];
  if (v51[1])
  {
    uint64_t v16 = v52;
    unsigned int v17 = v51[1];
    if ((void *)v52 != v51[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      unsigned int v17 = v51[1];
    }
    *(void *)&long long v52 = v15;
    operator delete(v17);
  }
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_78:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_78;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4EE37C(a2, (uint64_t *)&v45);
  unsigned int v20 = (char *)v45;
  unsigned int v21 = v46;
  while (v20 != v21)
  {
    unint64_t v22 = *(void *)(a3 + 176);
    if (v22 >= *(void *)(a3 + 184))
    {
      uint64_t v23 = sub_4F6B24((void *)(a3 + 168), (uint64_t)v20);
    }
    else
    {
      sub_4F6CF8(*(void *)(a3 + 176), (uint64_t)v20);
      uint64_t v23 = v22 + 800;
      *(void *)(a3 + 176) = v23;
    }
    *(void *)(a3 + 176) = v23;
    sub_4D9344(a2, (std::string *)v51);
    unint64_t v24 = *(void *)(v23 - 16);
    if (v24 >= *(void *)(v23 - 8))
    {
      uint64_t v26 = sub_6E8C4((void **)(v23 - 24), (uint64_t)v51);
    }
    else
    {
      long long v25 = *(_OWORD *)v51;
      *(void *)(v24 + 16) = v52;
      *(_OWORD *)unint64_t v24 = v25;
      v51[1] = 0;
      *(void *)&long long v52 = 0;
      v51[0] = 0;
      uint64_t v26 = (char *)(v24 + 24);
    }
    *(void *)(v23 - 16) = v26;
    if (SBYTE7(v52) < 0) {
      operator delete(v51[0]);
    }
    v20 += 768;
  }
  sub_4EDD10(a2, (uint64_t)v51);
  sub_4F377C(a3 + 352, (uint64_t)v51);
  *(void *)(a3 + 392) = *(void *)v54;
  int64x2_t v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)int64x2_t v27 = *(_OWORD *)&v54[8];
  *(void *)(a3 + 416) = v55;
  BYTE7(v55) = 0;
  v54[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v55);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v55);
    _OWORD *v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v54[8]);
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    _OWORD *v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    int v29 = v53;
    if (v53 == 1)
    {
LABEL_48:
      int v30 = v51[1];
      if (!v51[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v52 = v51[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v52) < 0)
  {
    int v30 = v51[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4EE09C(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v51);
    sub_4D90B4(a3 + 192, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
  }
  uint64_t v34 = (char *)v45;
  if (v45)
  {
    uint64_t v35 = (uint64_t)v46;
    uint64_t v36 = v45;
    if (v46 != v45)
    {
      do
        uint64_t v35 = sub_4F4A98(v35 - 768);
      while ((char *)v35 != v34);
      uint64_t v36 = v45;
    }
    int64x2_t v46 = v34;
    operator delete(v36);
  }
  int64x2_t v37 = v50;
  if (v50)
  {
    do
    {
      uint64_t v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      int64x2_t v37 = v38;
    }
    while (v38);
  }
  unint64_t v39 = v49;
  long long v49 = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t v40 = (void **)v47;
  if (v47)
  {
    uint64_t v41 = v48;
    unint64_t v42 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      unint64_t v42 = v47;
    }
    int64x2_t v48 = v40;
    operator delete(v42);
  }
}

void sub_4EAEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4EAF44(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EAF58(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EAF84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x4EAFB0);
}

void sub_4EAFA0()
{
  *(void *)(v0 + 176) = v1;
  JUMPOUT(0x4EAFB0);
}

void sub_4EAFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4D9D74(&a12);
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

void sub_4EAFD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500EF8(a1 + 1536, a2, (uint64_t)&v24);
  sub_635CD0((long long **)&v24, (uint64_t)v22);
  uint64_t v6 = sub_5231C((uint64_t)&v24);
  sub_60E8D8(a1 + 3088, (uint64_t)v22, v6, 0, (uint64_t)&__p);
  sub_5F41E8(a3, (uint64_t)&__p);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22[0]);
LABEL_3:
  if (sub_5F7924((char ***)a3, byte_255F370))
  {
    unsigned int v7 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)byte_255F370, (float)v7);
  }
  if (sub_5F7924((char ***)a3, (char *)&qword_255F388))
  {
    unsigned int v8 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)&qword_255F388, (float)v8);
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_21;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_49:
      BOOL v10 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_22;
    }
LABEL_21:
    BOOL v10 = 1;
    goto LABEL_22;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 1160);
  }
  BOOL v10 = 1;
  if (!v9 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_49;
  }
LABEL_22:
  *(unsigned char *)(a3 + 160) = v10;
  sub_4EDD10(a2, (uint64_t)&__p);
  sub_4F377C(a3 + 352, (uint64_t)&__p);
  *(void *)(a3 + 392) = v33;
  uint64_t v11 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v11);
  }
  uint64_t v12 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v34;
  *(void *)(a3 + 416) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34[0]) = 0;
  *(unsigned char *)(a3 + 424) = v36;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v14 = SHIBYTE(v35);
    _OWORD *v12 = v37;
    *(void *)(a3 + 448) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(v37) = 0;
    *(unsigned char *)(a3 + 456) = v39;
    if (v14 < 0)
    {
      operator delete(v34[0]);
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
    else
    {
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
LABEL_33:
    std::string::size_type v15 = v29;
    if (!v29) {
      goto LABEL_36;
    }
    int v30 = v29;
    goto LABEL_35;
  }
  _OWORD *v12 = v37;
  *(void *)(a3 + 448) = v38;
  HIBYTE(v38) = 0;
  LOBYTE(v37) = 0;
  *(unsigned char *)(a3 + 456) = v39;
  int v13 = v32;
  if (v32 == 1) {
    goto LABEL_33;
  }
LABEL_29:
  if (!v13 && v31 < 0)
  {
    std::string::size_type v15 = v29;
LABEL_35:
    operator delete(v15);
  }
LABEL_36:
  uint64_t v16 = v27;
  if (v27)
  {
    do
    {
      unsigned int v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  uint64_t v18 = v26;
  uint64_t v26 = 0;
  if (v18) {
    operator delete(v18);
  }
  BOOL v19 = (void **)v24;
  if (v24)
  {
    unsigned int v20 = v25;
    unsigned int v21 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      unsigned int v21 = v24;
    }
    long long v25 = v19;
    operator delete(v21);
  }
}

void sub_4EB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_4D4880(&a16);
  sub_4F2FF8(v30);
  _Unwind_Resume(a1);
}

void sub_4EB434(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4F0BC4(a1, a2, 0, (uint64_t)&v25);
  sub_4D90B4(a3, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  unint64_t v6 = *(void *)(a3 + 176);
  if (v6 >= *(void *)(a3 + 184))
  {
    uint64_t v7 = sub_4F799C((void *)(a3 + 168));
  }
  else
  {
    *(_DWORD *)(v6 + 768) = -1;
    *(void *)(v6 + 776) = 0;
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    uint64_t v7 = v6 + 800;
  }
  *(void *)(a3 + 176) = v7;
  sub_4F0498(a1, a2, &v25.__r_.__value_.__l.__data_);
  uint64_t v8 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v8, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  sub_4F0BC4(a1, a2, 1, (uint64_t)&v25);
  uint64_t v9 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v9 + 160, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  *(unsigned char *)(a3 + 160) = 0;
  sub_4EDD10(*a2, (uint64_t)&v25);
  sub_4F377C(a3 + 352, (uint64_t)&v25);
  *(void *)(a3 + 392) = v28;
  BOOL v10 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v10);
  }
  uint64_t v11 = (_OWORD *)(a3 + 432);
  *(_OWORD *)BOOL v10 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v31;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v13 = SHIBYTE(v30);
    _OWORD *v11 = v32;
    *(void *)(a3 + 448) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *(unsigned char *)(a3 + 456) = v34;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
    else
    {
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
LABEL_15:
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
    if (!v25.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    goto LABEL_17;
  }
  _OWORD *v11 = v32;
  *(void *)(a3 + 448) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  *(unsigned char *)(a3 + 456) = v34;
  int v12 = v27;
  if (v27 == 1) {
    goto LABEL_15;
  }
LABEL_11:
  if (!v12 && v26 < 0)
  {
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
LABEL_17:
    operator delete(size);
  }
LABEL_18:
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      sub_4D9344(v15, &v25);
      unint64_t v17 = *(void *)(a3 + 472);
      if (v17 >= *(void *)(a3 + 480))
      {
        BOOL v19 = sub_6E8C4((void **)(a3 + 464), (uint64_t)&v25);
        int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 472) = v19;
        if (v20 < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v17 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v17 = v18;
        *(void *)(a3 + 472) = v17 + 24;
      }
      uint64_t v21 = *(void *)(a3 + 176);
      sub_4D9344(v15, &v25);
      unint64_t v22 = *(void *)(v21 - 16);
      if (v22 >= *(void *)(v21 - 8))
      {
        unint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)&v25);
      }
      else
      {
        long long v23 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v22 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v22 = v23;
        memset(&v25, 0, sizeof(v25));
        unint64_t v24 = (char *)(v22 + 24);
      }
      *(void *)(v21 - 16) = v24;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v15 += 1440;
    }
    while (v15 != v16);
  }
}

void sub_4EB790(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EB7A4(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EB7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4EB7EC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EB800(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EB814(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EB840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4EB890(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4F0F84(a1, a2);
}

void sub_4EBBEC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EBC00(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EBC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4EBC48(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EBC5C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EBC70(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EBC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4EBCEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 1256) - 2;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  if (v6 < 9) {
    goto LABEL_9;
  }
  if (sub_605454(a2 + 32))
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1175);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 1160);
    }
    if (v7) {
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)a2 == 45)
  {
LABEL_9:
    sub_4EA174(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    sub_4ED63C(a1, a2, (uint64_t)__p);
LABEL_10:
    sub_4D5C2C(a3, (uint64_t)__p);
    sub_4F2FF8((uint64_t)__p);
    goto LABEL_11;
  }
  if (*(_DWORD *)(a2 + 1200) != 2)
  {
    sub_4EA8C4(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1256) != 12)
  {
    sub_4EAFD0(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1328) != *(void *)(a2 + 1336))
  {
    sub_4EE554(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v12 = *(_DWORD *)(a2 + 1360);
  if (v12)
  {
    if (v12 != 1) {
      goto LABEL_32;
    }
    int v13 = *(_DWORD *)(a2 + 1352);
    if (v13 == 0x7FFFFFFF || *(_DWORD *)(a2 + 1356) >= v13 || *(_DWORD *)(a2 + 1364) == 0x7FFFFFFF) {
      goto LABEL_32;
    }
LABEL_31:
    sub_4EE848(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v14 = *(_DWORD *)(a2 + 1352);
  if (v14 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v14) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v15 = *(unsigned __int8 *)(a2 + 1399);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 1384);
  }
  if (v15)
  {
    sub_4EEF5C(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1400) != -1 || *(_DWORD *)(a2 + 1404) != -1)
  {
    sub_57BD78(*(void *)(a1 + 5280), (uint64_t *)(a2 + 1400), a2 + 1416, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 == 48) {
    sub_4EF4C8(a1);
  }
LABEL_11:
  if (*(void *)(a3 + 464) == *(void *)(a3 + 472))
  {
    sub_4D9344(a2, __p);
    unint64_t v8 = *(void *)(a3 + 472);
    if (v8 >= *(void *)(a3 + 480))
    {
      BOOL v10 = sub_6E8C4((void **)(a3 + 464), (uint64_t)__p);
      int v11 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 472) = v10;
      if (v11 < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v8 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v9;
      *(void *)(a3 + 472) = v8 + 24;
    }
  }
}

void sub_4EBFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4EC040(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EC06C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v99 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = 0x4FA4FA4FA4FA4FA5 * ((v8 - *v1) >> 5);
  if (*v2 != v2[1]) {
    ++v9;
  }
  unint64_t v94 = v9;
  int64x2_t v106 = 0;
  int64x2_t v107 = 0;
  unint64_t v108 = 0;
  char v103 = 0;
  int64x2_t v104 = 0;
  unint64_t v105 = 0;
  char v130 = 0;
  char v128 = 0;
  int64x2_t v98 = v2;
  if (v8 != v7)
  {
    int v10 = 0;
    int64x2_t v101 = v1;
    while (1)
    {
      if (sub_605454(v7 + 32))
      {
        if (*(char *)(v7 + 1175) < 0)
        {
          if (*(void *)(v7 + 1160))
          {
LABEL_10:
            if (!*(unsigned char *)(v7 + 1144)) {
              goto LABEL_234;
            }
            if (sub_604340(v7 + 712, 0))
            {
              if (!*(unsigned char *)(v7 + 1144))
              {
LABEL_234:
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              sub_604384((char *)(v7 + 712), 0, (uint64_t)__dst);
LABEL_26:
              int v12 = v107;
              if ((unint64_t)v107 < v108) {
                goto LABEL_27;
              }
LABEL_24:
              int v13 = sub_6E6EC((char **)&v106, (uint64_t)__dst);
            }
            else
            {
              if (*(char *)(v7 + 495) < 0)
              {
                sub_4200(__dst, *(void **)(v7 + 472), *(void *)(v7 + 480));
                goto LABEL_26;
              }
              long long v11 = *(_OWORD *)(v7 + 472);
              int64x2_t v114 = *(void **)(v7 + 488);
              *(_OWORD *)long long __dst = v11;
              int v12 = v107;
              if ((unint64_t)v107 >= v108) {
                goto LABEL_24;
              }
LABEL_27:
              if (SHIBYTE(v114) < 0)
              {
                sub_4200(v12, __dst[0], (unint64_t)__dst[1]);
              }
              else
              {
                long long v14 = *(_OWORD *)__dst;
                v12[2] = v114;
                *(_OWORD *)int v12 = v14;
              }
              int v13 = (char *)(v12 + 3);
            }
            int64x2_t v107 = (void **)v13;
            sub_4EDD10(v7, (uint64_t)&v131);
            uint64_t v15 = v104;
            if ((unint64_t)v104 >= v105)
            {
              int64x2_t v104 = sub_4F6D70(&v103, (uint64_t)&v131);
              if (SHIBYTE(v140) < 0)
              {
                operator delete((void *)__p);
                if (SHIBYTE(v137) < 0) {
                  goto LABEL_49;
                }
              }
              else if (SHIBYTE(v137) < 0)
              {
                goto LABEL_49;
              }
            }
            else
            {
              int v16 = v10;
              *((_DWORD *)v104 + 8) = v134;
              if (v134 == 1)
              {
                uint64_t v21 = v131;
                *((void *)v15 + 1) = 0;
                *(void *)uint64_t v15 = v21;
                *((void *)v15 + 2) = 0;
                *((void *)v15 + 3) = 0;
                unint64_t v22 = (const void *)v132;
                int64_t v23 = *((void *)&v132 + 1) - v132;
                if (*((void *)&v132 + 1) != (void)v132)
                {
                  if (v23 < 0) {
                    sub_2E00();
                  }
                  unint64_t v24 = (char *)operator new(*((void *)&v132 + 1) - v132);
                  *((void *)v15 + 1) = v24;
                  *((void *)v15 + 2) = v24;
                  std::string v25 = &v24[8 * (v23 >> 3)];
                  *((void *)v15 + 3) = v25;
                  memcpy(v24, v22, v23);
                  *((void *)v15 + 2) = v25;
                }
              }
              else if (!v134)
              {
                *(void *)uint64_t v15 = v131;
                unint64_t v17 = v15 + 8;
                if (SHIBYTE(v133) < 0)
                {
                  sub_4200(v17, (void *)v132, *((unint64_t *)&v132 + 1));
                }
                else
                {
                  long long v18 = v132;
                  *((void *)v15 + 3) = v133;
                  *(_OWORD *)unint64_t v17 = v18;
                }
              }
              *((void *)v15 + 5) = v135;
              long long v26 = v136;
              *((void *)v15 + 8) = v137;
              *((_OWORD *)v15 + 3) = v26;
              uint64_t v137 = 0;
              long long v136 = 0uLL;
              v15[72] = v138;
              long long v27 = __p;
              *((void *)v15 + 12) = v140;
              *((_OWORD *)v15 + 5) = v27;
              uint64_t v140 = 0;
              long long __p = 0uLL;
              v15[104] = v141;
              int64x2_t v104 = v15 + 112;
              int v10 = v16;
              uint64_t v3 = v98;
              if (SHIBYTE(v137) < 0)
              {
LABEL_49:
                operator delete((void *)v136);
                int v19 = v134;
                if (v134 == 1)
                {
LABEL_50:
                  int v20 = (void *)v132;
                  if ((void)v132)
                  {
                    *((void *)&v132 + 1) = v132;
LABEL_52:
                    operator delete(v20);
                  }
                  goto LABEL_53;
                }
LABEL_39:
                if (!v19 && SHIBYTE(v133) < 0)
                {
                  int v20 = (void *)v132;
                  goto LABEL_52;
                }
LABEL_53:
                if (SHIBYTE(v114) < 0) {
                  operator delete(__dst[0]);
                }
                ++v10;
                goto LABEL_6;
              }
            }
            int v19 = v134;
            if (v134 == 1) {
              goto LABEL_50;
            }
            goto LABEL_39;
          }
        }
        else if (*(unsigned char *)(v7 + 1175))
        {
          goto LABEL_10;
        }
      }
      if (*(_DWORD *)(v7 + 1200) != 1 || *(void *)(v7 + 1208) == *(void *)(v7 + 1216))
      {
        if (*(void *)(v7 + 1176) != *(void *)(v7 + 1184))
        {
          if (v128)
          {
            uint64_t v28 = v127;
LABEL_57:
            sub_4C91C8((uint64_t)v28, v7);
            goto LABEL_6;
          }
          sub_4C8540((uint64_t)v127, v7);
          char v128 = 1;
        }
      }
      else
      {
        if (v130)
        {
          uint64_t v28 = v129;
          goto LABEL_57;
        }
        sub_4C8540((uint64_t)v129, v7);
        char v130 = 1;
      }
LABEL_6:
      v7 += 1440;
      if (v7 == v8)
      {
        int v29 = (const void **)v106;
        uint64_t v30 = (const void **)v107;
        uint64_t v4 = v101;
        goto LABEL_60;
      }
    }
  }
  uint64_t v30 = 0;
  int v29 = 0;
  int v10 = 0;
LABEL_60:
  char v31 = sub_86F68(v29, v30);
  long long v32 = v107;
  if (v107 != v31)
  {
    while (v32 != v31)
    {
      if (*((char *)v32 - 1) < 0) {
        operator delete(*(v32 - 3));
      }
      v32 -= 3;
    }
    int64x2_t v107 = v31;
  }
  uint64_t v33 = sub_4F71B0((uint64_t)v103, (uint64_t)v104);
  sub_4F700C((uint64_t)&v103, v33, (uint64_t)v104);
  sub_5F3B34(v6);
  *(void *)(v6 + 168) = 0;
  *(unsigned char *)(v6 + 160) = 0;
  *(void *)(v6 + 176) = 0;
  *(void *)(v6 + 184) = 0;
  uint64_t v102 = (void *)(v6 + 168);
  sub_5F3B34(v6 + 192);
  *(_DWORD *)(v6 + 384) = -1;
  *(_DWORD *)(v6 + 392) = -1;
  *(_DWORD *)(v6 + 395) = -1;
  char v34 = (void **)(v6 + 432);
  *(void *)(v6 + 399) = 0;
  *(void *)(v6 + 415) = 0;
  *(void *)(v6 + 407) = 0;
  *(_WORD *)(v6 + 423) = 0;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = 0;
  *(void *)(v6 + 432) = 0;
  *(unsigned char *)(v6 + 456) = 0;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  if (v10 < 1)
  {
    if (!v130)
    {
      if (v128) {
        sub_4EDD10((uint64_t)v127, (uint64_t)&v131);
      }
      else {
        sub_524D84(4, (uint64_t)&v131);
      }
      sub_4F377C(v6 + 352, (uint64_t)&v131);
      *(void *)(v6 + 392) = v135;
      int64x2_t v91 = (void **)(v6 + 400);
      if (*(char *)(v6 + 423) < 0) {
        operator delete(*v91);
      }
      char v92 = 0;
      *(_OWORD *)int64x2_t v91 = v136;
      *(void *)(v6 + 416) = v137;
      HIBYTE(v137) = 0;
      LOBYTE(v136) = 0;
      *(unsigned char *)(v6 + 424) = v138;
      if (*(char *)(v6 + 455) < 0)
      {
        operator delete(*v34);
        char v92 = HIBYTE(v137);
      }
      *(_OWORD *)char v34 = __p;
      *(void *)(v6 + 448) = v140;
      HIBYTE(v140) = 0;
      LOBYTE(__p) = 0;
      *(unsigned char *)(v6 + 456) = v141;
      if (v92 < 0) {
        operator delete((void *)v136);
      }
      goto LABEL_79;
    }
    sub_4EDD10((uint64_t)v129, (uint64_t)&v131);
LABEL_74:
    sub_4F377C(v6 + 352, (uint64_t)&v131);
    *(void *)(v6 + 392) = v135;
    char v36 = (void **)(v6 + 400);
    if (*(char *)(v6 + 423) < 0) {
      operator delete(*v36);
    }
    char v37 = 0;
    *(_OWORD *)char v36 = v136;
    *(void *)(v6 + 416) = v137;
    HIBYTE(v137) = 0;
    LOBYTE(v136) = 0;
    *(unsigned char *)(v6 + 424) = v138;
    if (*(char *)(v6 + 455) < 0)
    {
      operator delete(*v34);
      char v37 = HIBYTE(v137);
    }
    *(_OWORD *)char v34 = __p;
    *(void *)(v6 + 448) = v140;
    HIBYTE(v140) = 0;
    LOBYTE(__p) = 0;
    *(unsigned char *)(v6 + 456) = v141;
    if (v37 < 0)
    {
      operator delete((void *)v136);
      int v38 = v134;
      if (v134 != 1)
      {
LABEL_80:
        if (v38 || (SHIBYTE(v133) & 0x80000000) == 0) {
          goto LABEL_87;
        }
        char v39 = (void *)v132;
        goto LABEL_86;
      }
LABEL_84:
      char v39 = (void *)v132;
      if (!(void)v132) {
        goto LABEL_87;
      }
      *((void *)&v132 + 1) = v132;
LABEL_86:
      operator delete(v39);
      goto LABEL_87;
    }
LABEL_79:
    int v38 = v134;
    if (v134 != 1) {
      goto LABEL_80;
    }
    goto LABEL_84;
  }
  if ((char *)v107 - (unsigned char *)v106 != 24 || (uint64_t v35 = (char *)v103, v104 - (unsigned char *)v103 != 112))
  {
    sub_524D84(4, (uint64_t)&v131);
    goto LABEL_74;
  }
  sub_4F39B8(v6 + 352, (std::string *)v103);
  *(void *)(v6 + 392) = *((void *)v35 + 5);
  std::string::operator=((std::string *)(v6 + 400), (const std::string *)v35 + 2);
  *(unsigned char *)(v6 + 424) = v35[72];
  std::string::operator=((std::string *)(v6 + 432), (const std::string *)(v35 + 80));
  *(unsigned char *)(v6 + 456) = v35[104];
LABEL_87:
  *(unsigned char *)(v6 + 160) = 1;
  uint64_t v40 = *v4;
  uint64_t v96 = v4[1];
  int64x2_t v97 = (void **)(v6 + 464);
  if (*v4 == v96) {
    goto LABEL_172;
  }
  int v95 = v10;
  do
  {
    uint64_t v100 = v40;
    sub_4EBCEC(v99, v40, (uint64_t)__dst);
    uint64_t v41 = v115;
    uint64_t v42 = v116;
    while (v41 != v42)
    {
      if (*(_DWORD *)(v41 + 768) == 1 && (sub_4F3B98((uint64_t)&v117, v6 + 352) & 1) == 0)
      {
        if (*(_DWORD *)(v41 + 768) != -1)
        {
          if ((uint64_t *)(v41 + 320) == &v117) {
            goto LABEL_138;
          }
          goto LABEL_116;
        }
        bzero(&v131, 0x300uLL);
        sub_5F3B34((uint64_t)&v131);
        sub_5F3B34((uint64_t)&v142);
        *(_DWORD *)v147 = -1;
        memset(&v147[8], 255, 7);
        uint64_t v149 = 0;
        long long v148 = 0uLL;
        *(_WORD *)int v150 = 0;
        memset(&v151, 0, sizeof(v151));
        char v152 = 0;
        sub_5F3B34((uint64_t)&v153);
        sub_5F3B34((uint64_t)v157);
        v157[10] = xmmword_20E22B0;
        int v44 = *(_DWORD *)(v41 + 768);
        if (v44 == 1)
        {
          sub_4F4314(v41, (uint64_t)&v131);
        }
        else
        {
          if (!v44 && *(char *)(v41 + 23) < 0) {
            operator delete(*(void **)v41);
          }
          sub_4F3F14(v41, (uint64_t)&v131);
        }
        *(_DWORD *)(v41 + 768) = 1;
        sub_4D4B58((uint64_t)v157);
        sub_4D4B58((uint64_t)&v153);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v151.__r_.__value_.__l.__data_);
          if ((v150[0] & 0x80000000) != 0) {
            goto LABEL_111;
          }
LABEL_106:
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 != 1) {
            goto LABEL_107;
          }
LABEL_112:
          int64x2_t v46 = v144;
          if (v144)
          {
            int64x2_t v145 = v144;
LABEL_114:
            operator delete(v46);
          }
        }
        else
        {
          if ((v150[0] & 0x80000000) == 0) {
            goto LABEL_106;
          }
LABEL_111:
          operator delete(*(void **)((char *)&v148 + 1));
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 == 1) {
            goto LABEL_112;
          }
LABEL_107:
          if (!v45 && v146 < 0)
          {
            int64x2_t v46 = v144;
            goto LABEL_114;
          }
        }
        sub_4D4B58((uint64_t)&v142);
        sub_4D4B58((uint64_t)&v131);
        if ((uint64_t *)(v41 + 320) == &v117)
        {
LABEL_138:
          *(void *)(v41 + 360) = v120;
          std::string::operator=((std::string *)(v41 + 368), &v121);
          *(unsigned char *)(v41 + 392) = v122;
          std::string::operator=((std::string *)(v41 + 400), &v123);
          *(unsigned char *)(v41 + 424) = v124;
          goto LABEL_139;
        }
LABEL_116:
        int v47 = *(_DWORD *)(v41 + 352);
        int v48 = v119;
        if (v47 == v119)
        {
          if (v47 == 1)
          {
            *(void *)(v41 + 320) = v117;
            sub_326C0((void *)(v41 + 328), __src.__r_.__value_.__l.__data_, (char *)__src.__r_.__value_.__l.__size_, (uint64_t)(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]) >> 3);
          }
          else if (!v47)
          {
            *(void *)(v41 + 320) = v117;
            std::string::operator=((std::string *)(v41 + 328), &__src);
          }
          goto LABEL_138;
        }
        if (v47 == 1)
        {
          long long v49 = *(void **)(v41 + 328);
          if (v49)
          {
            *(void *)(v41 + 336) = v49;
LABEL_127:
            operator delete(v49);
          }
LABEL_128:
          int v48 = v119;
        }
        else if (!v47)
        {
          if (*(char *)(v41 + 351) < 0)
          {
            long long v49 = *(void **)(v41 + 328);
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (v48 == 1)
        {
          *(void *)(v41 + 320) = v117;
          *(void *)(v41 + 328) = 0;
          *(void *)(v41 + 336) = 0;
          *(void *)(v41 + 344) = 0;
          long long v52 = (const void *)__src.__r_.__value_.__r.__words[0];
          int64_t v53 = __src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_ != __src.__r_.__value_.__r.__words[0])
          {
            if (v53 < 0) {
              sub_2E00();
            }
            int64x2_t v54 = (char *)operator new(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]);
            *(void *)(v41 + 328) = v54;
            *(void *)(v41 + 336) = v54;
            long long v55 = &v54[8 * (v53 >> 3)];
            *(void *)(v41 + 344) = v55;
            memcpy(v54, v52, v53);
            *(void *)(v41 + 336) = v55;
          }
        }
        else if (!v48)
        {
          *(void *)(v41 + 320) = v117;
          uint64_t v50 = (unsigned char *)(v41 + 328);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v50, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v51 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
            *(void *)(v41 + 344) = *((void *)&__src.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v50 = v51;
          }
        }
        *(_DWORD *)(v41 + 352) = v119;
        goto LABEL_138;
      }
LABEL_139:
      unint64_t v56 = *(void *)(v6 + 176);
      if (v56 >= *(void *)(v6 + 184))
      {
        uint64_t v43 = sub_4F72D0(v102, v41);
      }
      else
      {
        *(_DWORD *)(v56 + 768) = *(_DWORD *)(v41 + 768);
        int v57 = *(_DWORD *)(v41 + 768);
        switch(v57)
        {
          case 2:
            *(void *)unint64_t v56 = *(void *)v41;
            break;
          case 1:
            sub_4F58AC(v56, v41);
            sub_4F58AC(v56 + 160, v41 + 160);
            *(_DWORD *)(v56 + 352) = *(_DWORD *)(v41 + 352);
            int v59 = *(_DWORD *)(v41 + 352);
            if (v59 == 1)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              *(void *)(v56 + 328) = 0;
              *(void *)(v56 + 336) = 0;
              *(void *)(v56 + 344) = 0;
              int v63 = *(unsigned char **)(v41 + 328);
              uint64_t v62 = *(unsigned char **)(v41 + 336);
              int64_t v64 = v62 - v63;
              if (v62 != v63)
              {
                if (v64 < 0) {
                  sub_2E00();
                }
                long long v65 = (char *)operator new(v62 - v63);
                *(void *)(v56 + 328) = v65;
                *(void *)(v56 + 336) = v65;
                uint64_t v66 = &v65[8 * (v64 >> 3)];
                *(void *)(v56 + 344) = v66;
                memcpy(v65, v63, v64);
                *(void *)(v56 + 336) = v66;
              }
            }
            else if (!v59)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              uint64_t v60 = (unsigned char *)(v56 + 328);
              if (*(char *)(v41 + 351) < 0)
              {
                sub_4200(v60, *(void **)(v41 + 328), *(void *)(v41 + 336));
              }
              else
              {
                long long v61 = *(_OWORD *)(v41 + 328);
                *(void *)(v56 + 344) = *(void *)(v41 + 344);
                *(_OWORD *)uint64_t v60 = v61;
              }
            }
            *(void *)(v56 + 360) = *(void *)(v41 + 360);
            if (*(char *)(v41 + 391) < 0)
            {
              sub_4200((unsigned char *)(v56 + 368), *(void **)(v41 + 368), *(void *)(v41 + 376));
            }
            else
            {
              long long v67 = *(_OWORD *)(v41 + 368);
              *(void *)(v56 + 384) = *(void *)(v41 + 384);
              *(_OWORD *)(v56 + 368) = v67;
            }
            *(unsigned char *)(v56 + 392) = *(unsigned char *)(v41 + 392);
            uint64_t v68 = (unsigned char *)(v56 + 400);
            if (*(char *)(v41 + 423) < 0)
            {
              sub_4200(v68, *(void **)(v41 + 400), *(void *)(v41 + 408));
            }
            else
            {
              long long v69 = *(_OWORD *)(v41 + 400);
              *(void *)(v56 + 416) = *(void *)(v41 + 416);
              *(_OWORD *)uint64_t v68 = v69;
            }
            *(unsigned char *)(v56 + 424) = *(unsigned char *)(v41 + 424);
            sub_4F58AC(v56 + 432, v41 + 432);
            sub_4F58AC(v56 + 592, v41 + 592);
            *(_OWORD *)(v56 + 752) = *(_OWORD *)(v41 + 752);
            break;
          case 0:
            if (*(char *)(v41 + 23) < 0)
            {
              sub_4200((unsigned char *)v56, *(void **)v41, *(void *)(v41 + 8));
            }
            else
            {
              long long v58 = *(_OWORD *)v41;
              *(void *)(v56 + 16) = *(void *)(v41 + 16);
              *(_OWORD *)unint64_t v56 = v58;
            }
            break;
        }
        *(void *)(v56 + 792) = 0;
        *(_OWORD *)(v56 + 776) = 0u;
        uint64_t v70 = *(void *)(v41 + 776);
        uint64_t v71 = *(void *)(v41 + 784);
        uint64_t v131 = (char *)(v56 + 776);
        LOBYTE(v132) = 0;
        if (v71 != v70)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3) >= 0xAAAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          uint64_t v72 = (char *)operator new(v71 - v70);
          uint64_t v73 = 0;
          *(void *)(v56 + 776) = v72;
          *(void *)(v56 + 784) = v72;
          *(void *)(v56 + 792) = &v72[8 * ((v71 - v70) >> 3)];
          do
          {
            long long v75 = &v72[v73];
            int64x2_t v76 = (long long *)(v70 + v73);
            if (*(char *)(v70 + v73 + 23) < 0)
            {
              sub_4200(v75, *(void **)v76, *((void *)v76 + 1));
            }
            else
            {
              long long v74 = *v76;
              *((void *)v75 + 2) = *((void *)v76 + 2);
              *(_OWORD *)long long v75 = v74;
            }
            v73 += 24;
          }
          while (v70 + v73 != v71);
          *(void *)(v56 + 784) = &v72[v73];
        }
        uint64_t v43 = v56 + 800;
        *(void *)(v6 + 176) = v56 + 800;
      }
      *(void *)(v6 + 176) = v43;
      v41 += 800;
    }
    sub_84F50(v97, *(void *)(v6 + 472), v125, v126, 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 3));
    int v10 = v95;
    uint64_t v3 = v98;
    sub_4F2FF8((uint64_t)__dst);
    uint64_t v40 = v100 + 1440;
  }
  while (v100 + 1440 != v96);
LABEL_172:
  if (*v3 != v3[1])
  {
    sub_4EB434(v99, v3, (uint64_t)&v131);
    if ((sub_4F3B98((uint64_t)v147, v6 + 352) & 1) == 0)
    {
      uint64_t v77 = sub_4DB6A8(v143);
      sub_4F39B8(v77 + 320, (std::string *)v147);
      *(void *)(v77 + 360) = *(void *)&v150[1];
      std::string::operator=((std::string *)(v77 + 368), &v151);
      *(unsigned char *)(v77 + 392) = v152;
      std::string::operator=((std::string *)(v77 + 400), &v153);
      *(unsigned char *)(v77 + 424) = v154;
    }
    unint64_t v78 = *(void *)(v6 + 176);
    if (v78 >= *(void *)(v6 + 184))
    {
      uint64_t v79 = sub_4F72D0(v102, v143);
    }
    else
    {
      sub_4F74A4(*(char **)(v6 + 176), v143);
      uint64_t v79 = v78 + 800;
      *(void *)(v6 + 176) = v78 + 800;
    }
    *(void *)(v6 + 176) = v79;
    sub_4F7594(v97, *(void *)(v6 + 472), v155, v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
    sub_4F2FF8((uint64_t)&v131);
  }
  if (v10 >= 1)
  {
    sub_4EFE2C(v99, v10, (uint64_t)&v106, v94 != v10, &v131);
    goto LABEL_181;
  }
  if (v130)
  {
    char v112 = v130;
    sub_4C8540((uint64_t)v111, (uint64_t)v129);
    BOOL v80 = v94 > 1;
    char v110 = v128;
    if (!v128)
    {
LABEL_190:
      sub_4F010C(v99, (uint64_t)v111, (uint64_t)v109, v80, &v131);
      sub_4D90B4(v6, (uint64_t)&v131);
      sub_4D4B58((uint64_t)&v131);
      if (v110)
      {
        sub_4BD604((uint64_t)v109);
        char v110 = 0;
      }
      if (v112)
      {
        sub_4BD604((uint64_t)v111);
        char v112 = 0;
      }
      goto LABEL_194;
    }
LABEL_189:
    sub_4C8540((uint64_t)v109, (uint64_t)v127);
    goto LABEL_190;
  }
  if (v128)
  {
    char v112 = 0;
    BOOL v80 = v94 > 1;
    char v110 = v128;
    goto LABEL_189;
  }
  sub_4EE09C(v99, 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v6 + 176) - *(void *)(v6 + 168)) >> 5), &v131);
LABEL_181:
  sub_4D90B4(v6, (uint64_t)&v131);
  sub_4D4B58((uint64_t)&v131);
LABEL_194:
  uint64_t v81 = *(void *)(v6 + 168);
  uint64_t v82 = *(void *)(v6 + 176);
  if (v81 != v82)
  {
    sub_4EE09C(v99, 0x8F5C28F5C28F5C29 * ((v82 - v81) >> 5), &v131);
    sub_4D90B4(v6 + 192, (uint64_t)&v131);
    sub_4D4B58((uint64_t)&v131);
  }
  if (v128) {
    sub_4BD604((uint64_t)v127);
  }
  if (v130) {
    sub_4BD604((uint64_t)v129);
  }
  int64x2_t v83 = (char *)v103;
  if (v103)
  {
    int64x2_t v84 = v104;
    int64x2_t v85 = v103;
    if (v104 == v103)
    {
LABEL_216:
      int64x2_t v104 = v83;
      operator delete(v85);
      goto LABEL_217;
    }
    while (2)
    {
      if (*(v84 - 9) < 0)
      {
        operator delete(*((void **)v84 - 4));
        if (*(v84 - 41) < 0) {
          goto LABEL_212;
        }
LABEL_207:
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 != 1) {
          goto LABEL_208;
        }
LABEL_213:
        int64x2_t v87 = (void *)*((void *)v84 - 13);
        if (v87)
        {
          *((void *)v84 - 12) = v87;
LABEL_203:
          operator delete(v87);
        }
      }
      else
      {
        if ((*(v84 - 41) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_212:
        operator delete(*((void **)v84 - 8));
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 == 1) {
          goto LABEL_213;
        }
LABEL_208:
        if (!v86 && *(v84 - 81) < 0)
        {
          int64x2_t v87 = (void *)*((void *)v84 - 13);
          goto LABEL_203;
        }
      }
      v84 -= 112;
      if (v84 == v83)
      {
        int64x2_t v85 = v103;
        goto LABEL_216;
      }
      continue;
    }
  }
LABEL_217:
  int64x2_t v88 = (void **)v106;
  if (v106)
  {
    int64x2_t v89 = v107;
    int64x2_t v90 = v106;
    if (v107 != v106)
    {
      do
      {
        if (*((char *)v89 - 1) < 0) {
          operator delete(*(v89 - 3));
        }
        v89 -= 3;
      }
      while (v89 != v88);
      int64x2_t v90 = v106;
    }
    int64x2_t v107 = v88;
    operator delete(v90);
  }
}

void sub_4ED29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_4F2FF8(v34);
  if (*(unsigned char *)(v35 + 1440)) {
    sub_4BD604((uint64_t)&STACK[0xE28]);
  }
  if (*(unsigned char *)(v35 + 2888)) {
    sub_4BD604((uint64_t)&STACK[0x13D0]);
  }
  sub_4DBDDC(&a31);
  sub_1A668(&a34);
  _Unwind_Resume(a1);
}

void sub_4ED63C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500CAC(a1 + 1536, a2, (uint64_t)&v43);
  sub_635CD0((long long **)&v43, (uint64_t)v40);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v43);
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  uint64_t v64 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v60[4] = 0u;
  *(_OWORD *)&v56[4] = 0u;
  long long v57 = 0u;
  *(void *)long long v52 = 0x7FFFFFFFLL;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)&v50[8] = 0u;
  uint64_t v49 = 0;
  *(int64x2_t *)uint64_t v50 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v51 = *(_OWORD *)v50;
  v47[0] = (void *)0xFFFFFFFFLL;
  long long v48 = 0uLL;
  v47[1] = 0;
  *(_DWORD *)&v50[16] = 0x7FFFFFFF;
  *(_DWORD *)&v52[8] = 0x7FFFFFFF;
  *(void *)&v52[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v54 = 0u;
  memset(v55, 0, sizeof(v55));
  unint64_t v53 = 0x8000000080000000;
  *(void *)unint64_t v56 = 0x8000000080000000;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  LODWORD(v57) = -1;
  uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
  int v59 = 0x7FFFFFFF;
  *(void *)uint64_t v60 = 0x7FFFFFFF7FFFFFFFLL;
  long long v61 = _Q1;
  v62[1] = 0;
  v62[0] = 0;
  uint64_t v63 = 0;
  uint64_t v66 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v67 = 0xFFFFFFFF00000000;
  uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v40, v6, v47, v42);
  sub_4D90B4(a3, (uint64_t)v42);
  sub_4D4B58((uint64_t)v42);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v12 = (void **)v62[0];
  if (v62[0])
  {
    int v13 = (void **)v62[1];
    long long v14 = v62[0];
    if (v62[1] != v62[0])
    {
      do
        int v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      long long v14 = v62[0];
    }
    v62[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v55[8])
  {
    *(void *)&v55[16] = *(void *)&v55[8];
    operator delete(*(void **)&v55[8]);
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  uint64_t v15 = v47[1];
  if (v47[1])
  {
    uint64_t v16 = v48;
    unint64_t v17 = v47[1];
    if ((void *)v48 != v47[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      unint64_t v17 = v47[1];
    }
    *(void *)&long long v48 = v15;
    operator delete(v17);
  }
  if (v41 < 0)
  {
    operator delete(v40[0]);
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  else
  {
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  do
  {
    unint64_t v20 = *(void *)(a3 + 176);
    if (v20 >= *(void *)(a3 + 184))
    {
      uint64_t v21 = sub_4F52DC((void *)(a3 + 168), v18);
    }
    else
    {
      sub_4F54B0(*(void *)(a3 + 176), v18);
      uint64_t v21 = v20 + 800;
      *(void *)(a3 + 176) = v21;
    }
    *(void *)(a3 + 176) = v21;
    sub_4D9344(a2, (std::string *)v47);
    unint64_t v22 = *(void *)(v21 - 16);
    if (v22 >= *(void *)(v21 - 8))
    {
      unint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)v47);
    }
    else
    {
      long long v23 = *(_OWORD *)v47;
      *(void *)(v22 + 16) = v48;
      *(_OWORD *)unint64_t v22 = v23;
      v47[1] = 0;
      *(void *)&long long v48 = 0;
      v47[0] = 0;
      unint64_t v24 = (char *)(v22 + 24);
    }
    *(void *)(v21 - 16) = v24;
    if (SBYTE7(v48) < 0) {
      operator delete(v47[0]);
    }
    long long v18 = (long long *)((char *)v18 + 24);
  }
  while (v18 != v19);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_43;
  }
LABEL_32:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_43;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_73:
      BOOL v26 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_44;
    }
LABEL_43:
    BOOL v26 = 1;
    goto LABEL_44;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v25 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v25 = *(void *)(a2 + 1160);
  }
  BOOL v26 = 1;
  if (!v25 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_73;
  }
LABEL_44:
  *(unsigned char *)(a3 + 160) = v26;
  sub_4EDD10(a2, (uint64_t)v47);
  sub_4F377C(a3 + 352, (uint64_t)v47);
  *(void *)(a3 + 392) = *(void *)v50;
  long long v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v27 = *(_OWORD *)&v50[8];
  *(void *)(a3 + 416) = v51;
  BYTE7(v51) = 0;
  v50[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v51);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v51);
    _OWORD *v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v50[8]);
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    _OWORD *v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    int v29 = v49;
    if (v49 == 1)
    {
LABEL_48:
      uint64_t v30 = v47[1];
      if (!v47[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v48 = v47[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v48) < 0)
  {
    uint64_t v30 = v47[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4EE09C(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v47);
    sub_4D90B4(a3 + 192, (uint64_t)v47);
    sub_4D4B58((uint64_t)v47);
  }
  uint64_t v34 = v46;
  if (v46)
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      uint64_t v34 = v35;
    }
    while (v35);
  }
  char v36 = v45;
  int v45 = 0;
  if (v36) {
    operator delete(v36);
  }
  char v37 = (void **)v43;
  if (v43)
  {
    int v38 = v44;
    char v39 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v43;
    }
    int v44 = v37;
    operator delete(v39);
  }
}

void sub_4EDC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v49);
  _Unwind_Resume(a1);
}

void sub_4EDCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  *(void *)(v32 + 176) = v33;
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

void sub_4EDD10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_605454(a1 + 32))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1175);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a1 + 1160);
    }
    if (v4)
    {
      if (!*(unsigned char *)(a1 + 1144))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v5 = *(int *)(a1 + 768);
      if (v5 > 0x13)
      {
        uint64_t v6 = 4;
        uint64_t v7 = a2;
      }
      else
      {
        uint64_t v6 = dword_20E81F0[v5];
        uint64_t v7 = a2;
      }
LABEL_9:
      sub_524D84(v6, v7);
      return;
    }
  }
  if (*(_DWORD *)(a1 + 1200) == 2)
  {
    if (*(void *)(a1 + 1176) != *(void *)(a1 + 1184))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 42;
      goto LABEL_9;
    }
    if (*(_DWORD *)a1 == 45)
    {
LABEL_22:
      uint64_t v7 = a2;
      uint64_t v6 = 39;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(a1 + 1256) - 2) >= 0xB)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 5;
      goto LABEL_9;
    }
    if (*(void *)(a1 + 1328) != *(void *)(a1 + 1336))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 6;
      goto LABEL_9;
    }
    int v14 = *(_DWORD *)(a1 + 1360);
    if (v14)
    {
      if (v14 == 1)
      {
        int v15 = *(_DWORD *)(a1 + 1352);
        if (v15 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v15 && *(_DWORD *)(a1 + 1364) != 0x7FFFFFFF) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a1 + 1352);
      if (v16 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v16) {
        goto LABEL_22;
      }
    }
    if (sub_4D4CF4((int *)a1) || *(_DWORD *)a1 != 48)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v6 = 51;
    }
    goto LABEL_9;
  }
  uint64_t v8 = a1 + 1232;
  if (*(char *)(a1 + 1255) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1240);
    if (v9)
    {
      int v10 = *(void **)v8;
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(a1 + 1255))
  {
LABEL_36:
    *(_OWORD *)long long __p = *(_OWORD *)v8;
    uint64_t v19 = *(void *)(v8 + 16);
    goto LABEL_48;
  }
  uint64_t v11 = *(void *)(a1 + 1208);
  uint64_t v12 = *(void *)(a1 + 1216);
  if (v11 != v12)
  {
    while (1)
    {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 159);
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v11 + 144);
      }
      if (v13) {
        break;
      }
      v11 += 168;
      if (v11 == v12) {
        goto LABEL_37;
      }
    }
  }
  if (v11 == v12)
  {
LABEL_37:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    goto LABEL_48;
  }
  if ((*(char *)(v11 + 159) & 0x80000000) == 0)
  {
    uint64_t v8 = v11 + 136;
    goto LABEL_36;
  }
  int v10 = *(void **)(v11 + 136);
  unint64_t v9 = *(void *)(v11 + 144);
LABEL_47:
  sub_4200(__p, v10, v9);
LABEL_48:
  sub_524E5C((uint64_t)__p, a2);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_4EE080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4EE09C(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  sub_505610(a1 + 1536, a2, (uint64_t)&v25);
  sub_635CD0((long long **)&v25, (uint64_t)v23);
  uint64_t v5 = (void *)sub_5231C((uint64_t)&v25);
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v44[4] = 0u;
  *(_OWORD *)&v40[4] = 0u;
  long long v41 = 0u;
  uint64_t v34 = 0x7FFFFFFFLL;
  *(_OWORD *)&v36[4] = 0u;
  *(_OWORD *)&v32[8] = 0u;
  uint64_t v31 = 0;
  *(int64x2_t *)uint64_t v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v33 = *(_OWORD *)v32;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  *(_DWORD *)&v32[16] = 0x7FFFFFFF;
  int v35 = 0x7FFFFFFF;
  *(void *)char v36 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v38 = 0u;
  memset(v39, 0, sizeof(v39));
  unint64_t v37 = 0x8000000080000000;
  *(void *)uint64_t v40 = 0x8000000080000000;
  *(_DWORD *)&v40[8] = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)int v44 = 0x7FFFFFFF7FFFFFFFLL;
  long long v45 = _Q1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v23, v5, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v11 = (void **)v46[0];
  if (v46[0])
  {
    uint64_t v12 = (void **)v46[1];
    uint64_t v13 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        uint64_t v12 = sub_4F31D0(v12 - 13);
      while (v12 != v11);
      uint64_t v13 = v46[0];
    }
    v46[1] = v11;
    operator delete(v13);
  }
  if (*(void *)&v39[8])
  {
    *(void *)&v39[16] = *(void *)&v39[8];
    operator delete(*(void **)&v39[8]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  int v14 = v29[1];
  if (v29[1])
  {
    uint64_t v15 = v30;
    int v16 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v15 = sub_4D4B58(v15 - 160);
      while ((void *)v15 != v14);
      int v16 = v29[1];
    }
    *(void *)&long long v30 = v14;
    operator delete(v16);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  unint64_t v17 = v28;
  if (v28)
  {
    do
    {
      long long v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      unint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = v27;
  long long v27 = 0;
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = (void **)v25;
  if (v25)
  {
    uint64_t v21 = v26;
    unint64_t v22 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      unint64_t v22 = v25;
    }
    BOOL v26 = v20;
    operator delete(v22);
  }
}

void sub_4EE330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4EE37C(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 1200);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_4BF330((uint64_t)&v13, *(void *)(a1 + 1208), *(void *)(a1 + 1216), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 1216) - *(void *)(a1 + 1208)) >> 3));
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    if (v13 != (void *)v14)
    {
      uint64_t v6 = (uint64_t)v13 + 56;
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          if (*(void *)(v6 + 8))
          {
LABEL_9:
            if (*(void *)(v6 + 48) != *(void *)(v6 + 56))
            {
              unint64_t v8 = a2[1];
              if (v8 >= a2[2])
              {
                unint64_t v9 = sub_4F7F70(a2);
              }
              else
              {
                bzero((void *)a2[1], 0x300uLL);
                sub_4DC580(v8);
                unint64_t v9 = (char *)(v8 + 768);
                a2[1] = v8 + 768;
              }
              a2[1] = (uint64_t)v9;
              sub_5F3D48((uint64_t)v12, v6);
              sub_4D90B4(a2[1] - 768, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
              sub_5F3D48((uint64_t)v12, *(void *)(v6 + 48));
              sub_4D90B4(a2[1] - 608, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
            }
          }
        }
        else if (*(unsigned char *)(v6 + 23))
        {
          goto LABEL_9;
        }
        uint64_t v7 = v6 + 112;
        v6 += 168;
        if (v7 == v5)
        {
          uint64_t v4 = v13;
          break;
        }
      }
    }
    if (v4)
    {
      uint64_t v10 = v14;
      uint64_t v11 = v4;
      if ((void *)v14 != v4)
      {
        do
          uint64_t v10 = sub_4BCFD0(v10 - 168);
        while ((void *)v10 != v4);
        uint64_t v11 = v13;
      }
      uint64_t v14 = (uint64_t)v4;
      operator delete(v11);
    }
  }
}

void sub_4EE4FC(_Unwind_Exception *a1)
{
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void sub_4EE510(_Unwind_Exception *a1)
{
  sub_4B1DB4((void **)(v2 - 56));
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void sub_4EE554(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_70F9AC((uint64_t *)(a1 + 5264), (void *)(a2 + 1328), &v13);
  sub_5F41E8(a3, (uint64_t)&v13);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_13;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_31:
      BOOL v7 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_14;
    }
LABEL_13:
    BOOL v7 = 1;
    goto LABEL_14;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 1160);
  }
  BOOL v7 = 1;
  if (!v6 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_31;
  }
LABEL_14:
  *(unsigned char *)(a3 + 160) = v7;
  sub_4EDD10(a2, (uint64_t)v14);
  sub_4F377C(a3 + 352, (uint64_t)v14);
  *(void *)(a3 + 392) = v19;
  unint64_t v8 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v8);
  }
  unint64_t v9 = (_OWORD *)(a3 + 432);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v22;
  if ((*(char *)(a3 + 455) & 0x80000000) == 0)
  {
    _OWORD *v9 = v23;
    *(void *)(a3 + 448) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(unsigned char *)(a3 + 456) = v25;
    int v10 = v18;
    if (v18 == 1) {
      goto LABEL_25;
    }
LABEL_21:
    if (v10 || (v17 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    uint64_t v12 = v15;
    goto LABEL_27;
  }
  operator delete(*(void **)(a3 + 432));
  int v11 = SHIBYTE(v21);
  _OWORD *v9 = v23;
  *(void *)(a3 + 448) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  *(unsigned char *)(a3 + 456) = v25;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
  else
  {
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
LABEL_25:
  uint64_t v12 = v15;
  if (!v15) {
    goto LABEL_28;
  }
  int v16 = v15;
LABEL_27:
  operator delete(v12);
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_4EE7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F2FF8(v14);
  _Unwind_Resume(a1);
}

void sub_4EE848(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_504B34(a2, (uint64_t)&v48);
  sub_635CD0((long long **)&v48, (uint64_t)v44);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v48);
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  uint64_t v69 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v65[4] = 0u;
  *(_OWORD *)&v61[4] = 0u;
  long long v62 = 0u;
  *(void *)long long v57 = 0x7FFFFFFFLL;
  *(_OWORD *)&v57[16] = 0u;
  *(_OWORD *)&v55[8] = 0u;
  uint64_t v54 = 0;
  *(int64x2_t *)long long v55 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v56 = *(_OWORD *)v55;
  v52[0] = (void *)0xFFFFFFFFLL;
  long long v53 = 0uLL;
  v52[1] = 0;
  *(_DWORD *)&v55[16] = 0x7FFFFFFF;
  *(_DWORD *)&v57[8] = 0x7FFFFFFF;
  *(void *)&v57[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v59 = 0u;
  memset(v60, 0, sizeof(v60));
  unint64_t v58 = 0x8000000080000000;
  *(void *)long long v61 = 0x8000000080000000;
  *(_DWORD *)&v61[8] = 0x7FFFFFFF;
  LODWORD(v62) = -1;
  uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
  int v64 = 0x7FFFFFFF;
  *(void *)long long v65 = 0x7FFFFFFF7FFFFFFFLL;
  long long v66 = _Q1;
  v67[1] = 0;
  v67[0] = 0;
  uint64_t v68 = 0;
  uint64_t v71 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v72 = 0xFFFFFFFF00000000;
  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v44, v6, v52, (char **)v46);
  sub_4D90B4(a3, (uint64_t)v46);
  sub_4D4B58((uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v67[0];
  if (v67[0])
  {
    std::string v13 = (void **)v67[1];
    uint64_t v14 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v67[0];
    }
    v67[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v60[8])
  {
    *(void *)&v60[16] = *(void *)&v60[8];
    operator delete(*(void **)&v60[8]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  uint64_t v15 = v52[1];
  if (v52[1])
  {
    uint64_t v16 = v53;
    char v17 = v52[1];
    if ((void *)v53 != v52[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v52[1];
    }
    *(void *)&long long v53 = v15;
    operator delete(v17);
  }
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (*(_DWORD *)(a2 + 1360) != 1) {
      goto LABEL_49;
    }
  }
  else if (*(_DWORD *)(a2 + 1360) != 1)
  {
    goto LABEL_49;
  }
  int v18 = *(_DWORD *)(a2 + 1352);
  if (v18 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v18 && *(_DWORD *)(a2 + 1364) != 0x7FFFFFFF)
  {
    sub_635CD0((long long **)&v48, (uint64_t)v46);
    uint64_t v19 = sub_5231C((uint64_t)&v48);
    sub_60E8D8(a1 + 3088, (uint64_t)v46, v19, 0, (uint64_t)v52);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    uint64_t v20 = BYTE7(v53);
    char v21 = BYTE7(v53);
    char v22 = (SBYTE7(v53) & 0x80u) == 0 ? v52 : (void **)v52[0];
    long long v23 = byte_2560967 >= 0 ? &qword_2560950 : (uint64_t *)qword_2560950;
    int64_t v24 = byte_2560967 >= 0 ? byte_2560967 : unk_2560958;
    if (v24)
    {
      if (SBYTE7(v53) < 0) {
        uint64_t v20 = (uint64_t)v52[1];
      }
      if (v20 >= v24)
      {
        char v25 = (char *)v22 + v20;
        int v26 = *(char *)v23;
        long long v27 = v22;
        do
        {
          uint64_t v28 = v20 - v24;
          if (v28 == -1) {
            break;
          }
          int v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          long long v30 = v29;
          if (!memcmp(v29, v23, v24))
          {
            if (v30 == v25 || v30 - (char *)v22 == -1) {
              break;
            }
            goto LABEL_47;
          }
          long long v27 = (void **)(v30 + 1);
          uint64_t v20 = v25 - (v30 + 1);
        }
        while (v20 >= v24);
      }
    }
    else
    {
LABEL_47:
      LODWORD(v46[0]) = *(_DWORD *)(a2 + 1364);
      sub_5F5F70(a3, (long long *)&qword_2560950, v46, a1 + 1488, 0);
      char v21 = BYTE7(v53);
    }
    if (v21 < 0)
    {
      operator delete(v52[0]);
      if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
        goto LABEL_63;
      }
      goto LABEL_50;
    }
  }
LABEL_49:
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_63;
  }
LABEL_50:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_63;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_91:
      BOOL v32 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_64;
    }
LABEL_63:
    BOOL v32 = 1;
    goto LABEL_64;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v31 = *(void *)(a2 + 1160);
  }
  BOOL v32 = 1;
  if (!v31 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_91;
  }
LABEL_64:
  *(unsigned char *)(a3 + 160) = v32;
  sub_4EDD10(a2, (uint64_t)v52);
  sub_4F377C(a3 + 352, (uint64_t)v52);
  *(void *)(a3 + 392) = *(void *)v55;
  long long v33 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v33);
  }
  uint64_t v34 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v33 = *(_OWORD *)&v55[8];
  *(void *)(a3 + 416) = v56;
  BYTE7(v56) = 0;
  v55[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v56);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v37 = SBYTE7(v56);
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    if (v37 < 0)
    {
      operator delete(*(void **)&v55[8]);
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
    else
    {
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
  }
  else
  {
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    int v35 = v54;
    if (v54 == 1)
    {
LABEL_68:
      char v36 = v52[1];
      if (!v52[1]) {
        goto LABEL_76;
      }
      *(void **)&long long v53 = v52[1];
      goto LABEL_75;
    }
  }
  if (!v35 && SHIBYTE(v53) < 0)
  {
    char v36 = v52[1];
LABEL_75:
    operator delete(v36);
  }
LABEL_76:
  int v38 = v51;
  if (v51)
  {
    do
    {
      char v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      int v38 = v39;
    }
    while (v39);
  }
  uint64_t v40 = v50;
  uint64_t v50 = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v48;
  if (v48)
  {
    uint64_t v42 = v49;
    int v43 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      int v43 = v48;
    }
    uint64_t v49 = v41;
    operator delete(v43);
  }
}

void sub_4EEE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a38);
    sub_4F2FF8(v52);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a38);
  sub_4F2FF8(v52);
  _Unwind_Resume(a1);
}

void sub_4EEF1C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EEF30(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EEF5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_501250(a2, (uint64_t)&v34);
  sub_635CD0((long long **)&v34, (uint64_t)v31);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v34);
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v55 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v51[4] = 0u;
  *(_OWORD *)&v47[4] = 0u;
  long long v48 = 0u;
  *(void *)int v43 = 0x7FFFFFFFLL;
  *(_OWORD *)&v43[16] = 0u;
  *(_OWORD *)&v41[8] = 0u;
  uint64_t v40 = 0;
  *(int64x2_t *)long long v41 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v42 = *(_OWORD *)v41;
  v38[0] = (void *)0xFFFFFFFFLL;
  long long v39 = 0uLL;
  v38[1] = 0;
  *(_DWORD *)&v41[16] = 0x7FFFFFFF;
  *(_DWORD *)&v43[8] = 0x7FFFFFFF;
  *(void *)&v43[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)char v45 = 0u;
  memset(v46, 0, sizeof(v46));
  unint64_t v44 = 0x8000000080000000;
  *(void *)char v47 = 0x8000000080000000;
  *(_DWORD *)&v47[8] = 0x7FFFFFFF;
  LODWORD(v48) = -1;
  uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  int v50 = 0x7FFFFFFF;
  *(void *)unint64_t v51 = 0x7FFFFFFF7FFFFFFFLL;
  long long v52 = _Q1;
  v53[1] = 0;
  v53[0] = 0;
  uint64_t v54 = 0;
  uint64_t v57 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v58 = 0xFFFFFFFF00000000;
  uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v31, v6, v38, v33);
  sub_4D90B4(a3, (uint64_t)v33);
  sub_4D4B58((uint64_t)v33);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v53[0];
  if (v53[0])
  {
    std::string v13 = (void **)v53[1];
    uint64_t v14 = v53[0];
    if (v53[1] != v53[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v53[0];
    }
    v53[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v46[8])
  {
    *(void *)&v46[16] = *(void *)&v46[8];
    operator delete(*(void **)&v46[8]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  uint64_t v15 = v38[1];
  if (v38[1])
  {
    uint64_t v16 = v39;
    char v17 = v38[1];
    if ((void *)v39 != v38[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v38[1];
    }
    *(void *)&long long v39 = v15;
    operator delete(v17);
  }
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_60:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_60;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4EDD10(a2, (uint64_t)v38);
  sub_4F377C(a3 + 352, (uint64_t)v38);
  *(void *)(a3 + 392) = *(void *)v41;
  uint64_t v20 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v20);
  }
  char v21 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)&v41[8];
  *(void *)(a3 + 416) = v42;
  BYTE7(v42) = 0;
  v41[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v42);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v23 = SBYTE7(v42);
    *char v21 = *(_OWORD *)v43;
    *(void *)(a3 + 448) = *(void *)&v43[16];
    v43[23] = 0;
    v43[0] = 0;
    *(unsigned char *)(a3 + 456) = v43[24];
    if (v23 < 0)
    {
      operator delete(*(void **)&v41[8]);
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
    else
    {
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
LABEL_44:
    int64_t v24 = v38[1];
    if (!v38[1]) {
      goto LABEL_47;
    }
    *(void **)&long long v39 = v38[1];
    goto LABEL_46;
  }
  *char v21 = *(_OWORD *)v43;
  *(void *)(a3 + 448) = *(void *)&v43[16];
  v43[23] = 0;
  v43[0] = 0;
  *(unsigned char *)(a3 + 456) = v43[24];
  int v22 = v40;
  if (v40 == 1) {
    goto LABEL_44;
  }
LABEL_40:
  if (!v22 && SHIBYTE(v39) < 0)
  {
    int64_t v24 = v38[1];
LABEL_46:
    operator delete(v24);
  }
LABEL_47:
  char v25 = v37;
  if (v37)
  {
    do
    {
      int v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      char v25 = v26;
    }
    while (v26);
  }
  long long v27 = v36;
  char v36 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v34;
  if (v34)
  {
    int v29 = v35;
    long long v30 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      long long v30 = v34;
    }
    int v35 = v28;
    operator delete(v30);
  }
}

void sub_4EF428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4EF488(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4EF49C(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4EF4C8(uint64_t a1)
{
  sub_4DC580((uint64_t)v19);
  sub_506080((uint64_t)&v17);
  sub_635CD0((long long **)&v17, (uint64_t)&v11);
  uint64_t v2 = sub_5231C((uint64_t)&v17);
  sub_60E8D8(a1 + 3088, (uint64_t)&v11, v2, 0, (uint64_t)&__p);
  sub_5F3D48((uint64_t)v18, (uint64_t)&__p);
  sub_4D90B4((uint64_t)v19, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v16 < 0)
  {
    operator delete(__p);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11);
LABEL_3:
  sub_506090((uint64_t)&__p);
  sub_635CD0((long long **)&__p, (uint64_t)v5);
  uint64_t v3 = sub_5231C((uint64_t)&__p);
  sub_60E8D8(a1 + 3088, (uint64_t)v5, v3, 0, (uint64_t)&v11);
  sub_5F3D48((uint64_t)v18, (uint64_t)&v11);
  sub_4D90B4((uint64_t)&v20, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_5:
      if ((byte_2560B47 & 0x80000000) == 0)
      {
LABEL_6:
        *(_OWORD *)long long __dst = xmmword_2560B30;
        uint64_t v14 = unk_2560B40;
        goto LABEL_12;
      }
LABEL_11:
      sub_4200(__dst, (void *)xmmword_2560B30, *((unint64_t *)&xmmword_2560B30 + 1));
LABEL_12:
      sub_5F3D48((uint64_t)v18, (uint64_t)__dst);
      sub_4D90B4((uint64_t)&v21, (uint64_t)v18);
      sub_4D4B58((uint64_t)v18);
      sub_5060A0((uint64_t)&v11);
      sub_635CD0((long long **)&v11, (uint64_t)v8);
      uint64_t v4 = sub_5231C((uint64_t)&v11);
      sub_60E8D8(a1 + 3088, (uint64_t)v8, v4, 0, (uint64_t)v9);
      if (byte_2560B77 < 0)
      {
        sub_4200(v5, (void *)xmmword_2560B60, *((unint64_t *)&xmmword_2560B60 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v5 = xmmword_2560B60;
        uint64_t v6 = unk_2560B70;
      }
      if (SHIBYTE(v10) < 0)
      {
        sub_4200(v7, v9[0], (unint64_t)v9[1]);
      }
      else
      {
        *(_OWORD *)BOOL v7 = *(_OWORD *)v9;
        v7[2] = v10;
      }
      sub_5F2B70(v18, (long long *)__dst);
    }
  }
  else if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v5[0]);
  if ((byte_2560B47 & 0x80000000) == 0) {
    goto LABEL_6;
  }
  goto LABEL_11;
}

void sub_4EFC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        sub_4D4880(&a33);
        if (a47 < 0) {
          operator delete(a42);
        }
        sub_4D4880(&a48);
        sub_4D4880(&a57);
        sub_4F4A98((uint64_t)&STACK[0x208]);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a21);
      goto LABEL_9;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a26 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_4EFE2C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  sub_504C8C(a1 + 1536, a2, a3, a4, (uint64_t)&v27);
  sub_635CD0((long long **)&v27, (uint64_t)v25);
  BOOL v7 = (void *)sub_5231C((uint64_t)&v27);
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  uint64_t v50 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v46[4] = 0u;
  *(_OWORD *)&v42[4] = 0u;
  long long v43 = 0u;
  uint64_t v36 = 0x7FFFFFFFLL;
  *(_OWORD *)&v38[4] = 0u;
  *(_OWORD *)&v34[8] = 0u;
  uint64_t v33 = 0;
  *(int64x2_t *)uint64_t v34 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v35 = *(_OWORD *)v34;
  v31[0] = (void *)0xFFFFFFFFLL;
  long long v32 = 0uLL;
  v31[1] = 0;
  *(_DWORD *)&v34[16] = 0x7FFFFFFF;
  int v37 = 0x7FFFFFFF;
  *(void *)int v38 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v40 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v39 = 0x8000000080000000;
  *(void *)long long v42 = 0x8000000080000000;
  *(_DWORD *)&v42[8] = 0x7FFFFFFF;
  LODWORD(v43) = -1;
  uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  int v45 = 0x7FFFFFFF;
  *(void *)int64x2_t v46 = 0x7FFFFFFF7FFFFFFFLL;
  long long v47 = _Q1;
  v48[0] = 0;
  v48[1] = 0;
  uint64_t v49 = 0;
  __p[1] = 0;
  uint64_t v52 = 0;
  __p[0] = 0;
  unint64_t v53 = 0xFFFFFFFF00000000;
  uint64_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v25, v7, v31, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::string v13 = (void **)v48[0];
  if (v48[0])
  {
    uint64_t v14 = (void **)v48[1];
    uint64_t v15 = v48[0];
    if (v48[1] != v48[0])
    {
      do
        uint64_t v14 = sub_4F31D0(v14 - 13);
      while (v14 != v13);
      uint64_t v15 = v48[0];
    }
    v48[1] = v13;
    operator delete(v15);
  }
  if (*(void *)&v41[8])
  {
    *(void *)&v41[16] = *(void *)&v41[8];
    operator delete(*(void **)&v41[8]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  char v16 = v31[1];
  if (v31[1])
  {
    uint64_t v17 = v32;
    uint64_t v18 = v31[1];
    if ((void *)v32 != v31[1])
    {
      do
        uint64_t v17 = sub_4D4B58(v17 - 160);
      while ((void *)v17 != v16);
      uint64_t v18 = v31[1];
    }
    *(void *)&long long v32 = v16;
    operator delete(v18);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  BOOL v19 = v30;
  if (v30)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      BOOL v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = v29;
  int v29 = 0;
  if (v21) {
    operator delete(v21);
  }
  int v22 = (void **)v27;
  if (v27)
  {
    int v23 = v28;
    int64_t v24 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      int64_t v24 = v27;
    }
    uint64_t v28 = v22;
    operator delete(v24);
  }
}

void sub_4F00C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4F010C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  char v62 = *(unsigned char *)(a2 + 1440);
  if (v62) {
    sub_4C8540((uint64_t)v61, a2);
  }
  char v60 = *(unsigned char *)(a3 + 1440);
  if (v60) {
    sub_4C8540((uint64_t)v59, a3);
  }
  sub_505468(a1 + 1536, (uint64_t)v61, (uint64_t)v59, a4, (uint64_t)&v29);
  if (v60)
  {
    sub_4BD604((uint64_t)v59);
    char v60 = 0;
  }
  if (v62)
  {
    sub_4BD604((uint64_t)v61);
    char v62 = 0;
  }
  sub_635CD0((long long **)&v29, (uint64_t)v27);
  unint64_t v9 = (void *)sub_5231C((uint64_t)&v29);
  uint64_t v56 = 0;
  uint64_t v58 = 0;
  uint64_t v52 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v48[4] = 0u;
  *(_OWORD *)&v44[4] = 0u;
  long long v45 = 0u;
  uint64_t v38 = 0x7FFFFFFFLL;
  *(_OWORD *)&v40[4] = 0u;
  *(_OWORD *)&v36[8] = 0u;
  uint64_t v35 = 0;
  *(int64x2_t *)uint64_t v36 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v37 = *(_OWORD *)v36;
  v33[0] = (void *)0xFFFFFFFFLL;
  long long v34 = 0uLL;
  v33[1] = 0;
  *(_DWORD *)&v36[16] = 0x7FFFFFFF;
  int v39 = 0x7FFFFFFF;
  *(void *)uint64_t v40 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v41 = 0x8000000080000000;
  *(void *)uint64_t v44 = 0x8000000080000000;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  LODWORD(v45) = -1;
  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
  int v47 = 0x7FFFFFFF;
  *(void *)long long v48 = 0x7FFFFFFF7FFFFFFFLL;
  long long v49 = _Q1;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  __p[0] = 0;
  unint64_t v55 = 0xFFFFFFFF00000000;
  uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v27, v9, v33, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v50[0];
  if (v50[0])
  {
    char v16 = (void **)v50[1];
    uint64_t v17 = v50[0];
    if (v50[1] != v50[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v50[0];
    }
    v50[1] = v15;
    operator delete(v17);
  }
  if (*(void *)&v43[8])
  {
    *(void *)&v43[16] = *(void *)&v43[8];
    operator delete(*(void **)&v43[8]);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  uint64_t v18 = v33[1];
  if (v33[1])
  {
    uint64_t v19 = v34;
    uint64_t v20 = v33[1];
    if ((void *)v34 != v33[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v33[1];
    }
    *(void *)&long long v34 = v18;
    operator delete(v20);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  uint64_t v21 = v32;
  if (v32)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v31;
  uint64_t v31 = 0;
  if (v23) {
    operator delete(v23);
  }
  int64_t v24 = (void **)v29;
  if (v29)
  {
    char v25 = v30;
    char v26 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      char v26 = v29;
    }
    long long v30 = v24;
    operator delete(v26);
  }
}

void sub_4F0410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4F044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x758]))
  {
    sub_4BD604((uint64_t)&a64);
    LOBYTE(STACK[0x758]) = 0;
  }
  if (LOBYTE(STACK[0xD00]))
  {
    sub_4BD604((uint64_t)&STACK[0x760]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_4F0498(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  unint64_t v5 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5);
  uint64_t v6 = 2640;
  if (v5 > 1) {
    uint64_t v6 = 2664;
  }
  BOOL v7 = &xmmword_2560800;
  if (v5 <= 1) {
    BOOL v7 = &xmmword_25607E8;
  }
  unint64_t v8 = &byte_25607FF;
  if (v5 > 1) {
    unint64_t v8 = (char *)&word_2560816 + 1;
  }
  if (*v8 < 0)
  {
    if (v5 <= 1) {
      unint64_t v9 = (unint64_t *)&xmmword_25607E8 + 1;
    }
    else {
      unint64_t v9 = (unint64_t *)&xmmword_2560800 + 1;
    }
    sub_4200(__dst, *(void **)((char *)&xmmword_255FD98 + v6), *v9);
  }
  else
  {
    *(_OWORD *)long long __dst = *v7;
    uint64_t v28 = *((void *)v7 + 2);
  }
  *(_OWORD *)int64_t v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  *(_OWORD *)&v44[4] = 0u;
  long long v41 = 0u;
  *(_OWORD *)&v37[4] = 0u;
  uint64_t v35 = 0x7FFFFFFFLL;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  uint64_t v31 = 0;
  int64x2_t v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v33 = 0x7FFFFFFFLL;
  int64x2_t v34 = v32;
  int v36 = 0x7FFFFFFF;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v45 = _Q1;
  *(void *)long long v37 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v39 = 0u;
  memset(v40, 0, sizeof(v40));
  unint64_t v38 = 0x8000000080000000;
  *(void **)((char *)&v40[4] + 4) = (void *)0x8000000080000000;
  HIDWORD(v40[5]) = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)__dst, v24, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v46[0];
  if (v46[0])
  {
    char v16 = (void **)v46[1];
    uint64_t v17 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v46[0];
    }
    v46[1] = v15;
    operator delete(v17);
  }
  if (v40[1])
  {
    v40[2] = v40[1];
    operator delete(v40[1]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  uint64_t v18 = v29[1];
  if (v29[1])
  {
    uint64_t v19 = v30;
    uint64_t v20 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v29[1];
    }
    *(void *)&long long v30 = v18;
    operator delete(v20);
  }
  uint64_t v21 = (void *)v25;
  if ((void)v25)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v24[0];
  v24[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_4F0760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4F078C(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 != 45)
  {
    unint64_t v6 = a3[22];
    if (v6 >= a3[23])
    {
      uint64_t v7 = sub_4F799C(a3 + 21);
    }
    else
    {
      *(_DWORD *)(v6 + 768) = -1;
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 792) = 0;
      *(void *)(v6 + 784) = 0;
      uint64_t v7 = v6 + 800;
    }
    a3[22] = v7;
    sub_4D9344((uint64_t)a2, (std::string *)__p);
    unint64_t v8 = *(void *)(v7 - 16);
    if (v8 >= *(void *)(v7 - 8))
    {
      int v10 = sub_6E8C4((void **)(v7 - 24), (uint64_t)__p);
    }
    else
    {
      long long v9 = *(_OWORD *)__p;
      *(void *)(v8 + 16) = v38;
      *(_OWORD *)unint64_t v8 = v9;
      __p[1] = 0;
      *(void *)&long long v38 = 0;
      __p[0] = 0;
      int v10 = (char *)(v8 + 24);
    }
    *(void *)(v7 - 16) = v10;
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = sub_4DB6A8(a3[22] - 800);
    sub_501654((uint64_t)a2, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v30);
    char v12 = (void *)sub_5231C((uint64_t)&v33);
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v56 = 1;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v52[4] = 0u;
    *(_OWORD *)&v48[4] = 0u;
    long long v49 = 0u;
    uint64_t v42 = 0x7FFFFFFFLL;
    *(_OWORD *)&v44[4] = 0u;
    *(_OWORD *)&v40[8] = 0u;
    uint64_t v39 = 0;
    *(int64x2_t *)uint64_t v40 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    long long v41 = *(_OWORD *)v40;
    __p[0] = (void *)0xFFFFFFFFLL;
    long long v38 = 0uLL;
    __p[1] = 0;
    *(_DWORD *)&v40[16] = 0x7FFFFFFF;
    int v43 = 0x7FFFFFFF;
    *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)uint64_t v46 = 0u;
    memset(v47, 0, sizeof(v47));
    unint64_t v45 = 0x8000000080000000;
    *(void *)uint64_t v48 = 0x8000000080000000;
    *(_DWORD *)&v48[8] = 0x7FFFFFFF;
    LODWORD(v49) = -1;
    uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    int v51 = 0x7FFFFFFF;
    *(void *)uint64_t v52 = 0x7FFFFFFF7FFFFFFFLL;
    long long v53 = _Q1;
    v54[1] = 0;
    v54[0] = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    v57[0] = 0;
    v57[1] = 0;
    unint64_t v59 = 0xFFFFFFFF00000000;
    uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
    sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v30, v12, __p, v32);
    sub_4D90B4(v11, (uint64_t)v32);
    sub_4D4B58((uint64_t)v32);
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    uint64_t v18 = (void **)v54[0];
    if (v54[0])
    {
      uint64_t v19 = (void **)v54[1];
      uint64_t v20 = v54[0];
      if (v54[1] != v54[0])
      {
        do
          uint64_t v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        uint64_t v20 = v54[0];
      }
      v54[1] = v18;
      operator delete(v20);
    }
    if (*(void *)&v47[8])
    {
      *(void *)&v47[16] = *(void *)&v47[8];
      operator delete(*(void **)&v47[8]);
    }
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    uint64_t v21 = __p[1];
    if (__p[1])
    {
      uint64_t v22 = v38;
      int v23 = __p[1];
      if ((void *)v38 != __p[1])
      {
        do
          uint64_t v22 = sub_4D4B58(v22 - 160);
        while ((void *)v22 != v21);
        int v23 = __p[1];
      }
      *(void *)&long long v38 = v21;
      operator delete(v23);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_4F132C((char *)a1, (uint64_t)a2, v11);
    sub_4F173C((char *)a1, (uint64_t)a2, v11);
    sub_4F18FC((char *)a1, (uint64_t)a2, v11);
    sub_4EE09C(a1, 1uLL, (char **)__p);
    sub_4D90B4((uint64_t)(a3 + 24), (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    int64_t v24 = v36;
    if (v36)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        int64_t v24 = v25;
      }
      while (v25);
    }
    int v26 = v35;
    uint64_t v35 = 0;
    if (v26) {
      operator delete(v26);
    }
    long long v27 = (void **)v33;
    if (v33)
    {
      uint64_t v28 = v34;
      int v29 = v33;
      if (v34 != v33)
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        int v29 = v33;
      }
      int64x2_t v34 = v27;
      operator delete(v29);
    }
  }
}

void sub_4F0B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_4F0BC4(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  int v23 = 1065353216;
  sub_60E8D8(a1 + 3088, (uint64_t)&xmmword_25607B8, (uint64_t)__p, 0, (uint64_t)&v26);
  memset(&v25, 0, sizeof(v25));
  sub_5F7A30(a4, &v26, &v25);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_46:
    operator delete(v26.__r_.__value_.__l.__data_);
    unint64_t v8 = v22[0];
    if (!v22[0]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_3:
  unint64_t v8 = v22[0];
  if (!v22[0]) {
    goto LABEL_5;
  }
  do
  {
LABEL_4:
    long long v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    unint64_t v8 = v9;
  }
  while (v9);
LABEL_5:
  int v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    while (1)
    {
      sub_50081C(a1 + 1536, v11, (uint64_t)__p);
      int v14 = (a3 & 1) != 0 || (unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 5)) > 1;
      sub_4EA06C(a1, v14, (uint64_t)__p);
      sub_635CD0((long long **)__p, (uint64_t)&v25);
      uint64_t v15 = sub_5231C((uint64_t)__p);
      sub_60E8D8(a1 + 3088, (uint64_t)&v25, v15, 0, (uint64_t)&v26);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      sub_5F41E8(a4, (uint64_t)&v26);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        char v16 = v24;
        if (v24) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      char v16 = v24;
      if (v24) {
        break;
      }
LABEL_36:
      uint64_t v18 = v22[1];
      v22[1] = 0;
      if (v18) {
        operator delete(v18);
      }
      uint64_t v19 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v20 = (void **)__p[1];
        std::string v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v20 - 1) < 0) {
              operator delete(*(v20 - 3));
            }
            v20 -= 3;
          }
          while (v20 != v19);
          std::string v13 = __p[0];
        }
        __p[1] = v19;
        operator delete(v13);
      }
      v11 += 1440;
      if (v11 == v12) {
        return;
      }
    }
    while (1)
    {
LABEL_24:
      uint64_t v17 = *v16;
      if (*((char *)v16 + 191) < 0)
      {
        operator delete(v16[21]);
        if (*((char *)v16 + 159) < 0) {
          goto LABEL_31;
        }
LABEL_26:
        if ((*((char *)v16 + 135) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_32:
        operator delete(v16[14]);
        if (*((char *)v16 + 95) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        if ((*((char *)v16 + 63) & 0x80000000) == 0) {
          goto LABEL_34;
        }
LABEL_22:
        operator delete(v16[5]);
        if (*((char *)v16 + 39) < 0) {
          goto LABEL_35;
        }
LABEL_23:
        operator delete(v16);
        char v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
      else
      {
        if ((*((char *)v16 + 159) & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_31:
        operator delete(v16[17]);
        if (*((char *)v16 + 135) < 0) {
          goto LABEL_32;
        }
LABEL_27:
        if ((*((char *)v16 + 95) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(v16[9]);
        if (*((char *)v16 + 63) < 0) {
          goto LABEL_22;
        }
LABEL_34:
        if ((*((char *)v16 + 39) & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_35:
        operator delete(v16[2]);
        operator delete(v16);
        char v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_4F0EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    sub_4DD068((uint64_t)&a9);
    sub_4D4B58(v30);
    _Unwind_Resume(a1);
  }
  sub_4DD068((uint64_t)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4F0F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4F0F84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  sub_4F8374(a2, &v3, (uint64_t)&v2);
  sub_65140();
}

void sub_4F1258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  sub_4DD068((uint64_t)&__p);
  sub_4D4880(&a30);
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  sub_651C4((id **)(v30 - 88));
  sub_1A668((void **)(v30 - 80));
  _Unwind_Resume(a1);
}

void sub_4F132C(char *a1, uint64_t a2, uint64_t a3)
{
  sub_501B78((uint64_t)(a1 + 1536), a2, (uint64_t)&v41);
  unint64_t v5 = (uint64_t *)nullsub_1(&v41);
  uint64_t v6 = *v5;
  uint64_t v38 = v5[1];
  if (*v5 != v38)
  {
    int v39 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 160);
    do
    {
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          int v10 = *(char **)v6;
          uint64_t v9 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
          int v10 = (char *)v6;
        }
        uint64_t v11 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v12 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v12)
        {
          if (v9 >= v12)
          {
            std::string v13 = &v10[v9];
            int v14 = *(char *)v11;
            uint64_t v15 = v10;
            do
            {
              uint64_t v16 = v9 - v12;
              if (v16 == -1) {
                break;
              }
              uint64_t v17 = (char *)memchr(v15, v14, v16 + 1);
              if (!v17) {
                break;
              }
              uint64_t v18 = v17;
              if (!memcmp(v17, v11, v12))
              {
                if (v18 == v13 || v18 - v10 == -1) {
                  break;
                }
                goto LABEL_30;
              }
              uint64_t v15 = v18 + 1;
              uint64_t v9 = v13 - (v18 + 1);
            }
            while (v9 >= v12);
          }
          memset(&__p, 0, sizeof(__p));
          sub_5F7A30((uint64_t)v7, (const std::string *)&word_255ECB0, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
LABEL_30:
          if (v39 >= 1)
          {
            memset(&__p, 0, sizeof(__p));
            sub_5F7A30((uint64_t)v7, (const std::string *)&word_255EC80, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          ++v39;
        }
        uint64_t v19 = sub_5231C((uint64_t)&v41);
        sub_60E8D8((uint64_t)(a1 + 3088), v6, v19, 0, (uint64_t)&__p);
        sub_5F41E8((uint64_t)v7, (uint64_t)&__p);
        if (*(char *)(v6 + 23) < 0)
        {
          uint64_t v21 = *(char **)v6;
          uint64_t v20 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v20 = *(unsigned __int8 *)(v6 + 23);
          uint64_t v21 = (char *)v6;
        }
        uint64_t v22 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v23 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v23)
        {
          if (v20 >= v23)
          {
            int64_t v24 = &v21[v20];
            int v25 = *(char *)v22;
            std::string v26 = v21;
            do
            {
              uint64_t v27 = v20 - v23;
              if (v27 == -1) {
                break;
              }
              uint64_t v28 = (char *)memchr(v26, v25, v27 + 1);
              if (!v28) {
                break;
              }
              int v29 = v28;
              if (!memcmp(v28, v22, v23))
              {
                if (v29 == v24 || v29 - v21 == -1) {
                  break;
                }
                goto LABEL_53;
              }
              std::string v26 = v29 + 1;
              uint64_t v20 = v24 - (v29 + 1);
            }
            while (v20 >= v23);
          }
        }
        else
        {
LABEL_53:
          sub_4F1ABC(a1, a2, (uint64_t)&__p, v7);
        }
        if (*(_DWORD *)(a2 + 1256) != 12 && sub_5F7924((char ***)v7, (char *)&qword_2560320))
        {
          unsigned int v8 = *(_DWORD *)(a2 + 1296);
          if ((int)v8 >= 36000)
          {
            if (v8 >= 0xD2F00)
            {
              unsigned int v8 = 864000 * vcvtmd_s64_f64((double)(int)v8 / 864000.0);
            }
            else
            {
              if ((v8 % 0x8CA0) >> 4 <= 0x464) {
                unsigned int v30 = v8 / 0x8CA0;
              }
              else {
                unsigned int v30 = v8 / 0x8CA0 + 1;
              }
              unsigned int v8 = 36000 * v30;
            }
          }
          sub_5F66B8(v7, (uint64_t)&qword_2560320, v8);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        v6 += 24;
        if (v6 == v38) {
          goto LABEL_62;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 24;
    }
    while (v6 != v38);
  }
LABEL_62:
  char v31 = v44;
  if (v44)
  {
    do
    {
      int64x2_t v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      char v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v43;
  int v43 = 0;
  if (v33) {
    operator delete(v33);
  }
  int64x2_t v34 = (void **)v41;
  if (v41)
  {
    uint64_t v35 = v42;
    int v36 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      int v36 = v41;
    }
    uint64_t v42 = v34;
    operator delete(v36);
  }
}

void sub_4F16F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
}

void sub_4F173C(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 432);
  sub_5031BC((uint64_t)(a1 + 1536), a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255ECB0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4F1ABC(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  int v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4F18AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4F18C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4F18FC(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 592);
  sub_50390C(a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255EC80, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4F1ABC(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  int v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4F1A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4F1A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

char *sub_4F1ABC(char *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = result;
  int64_t v7 = *(unsigned __int8 *)(a3 + 23);
  unsigned __int8 v8 = v7;
  uint64_t v9 = *(char **)a3;
  if ((v7 & 0x80u) == 0) {
    int v10 = (char *)a3;
  }
  else {
    int v10 = *(char **)a3;
  }
  if (byte_255F477 >= 0) {
    uint64_t v11 = &qword_255F460;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_255F460;
  }
  if (byte_255F477 >= 0) {
    int64_t v12 = byte_255F477;
  }
  else {
    int64_t v12 = unk_255F468;
  }
  if (!v12) {
    goto LABEL_234;
  }
  if ((v7 & 0x80u) != 0) {
    int64_t v7 = *(void *)(a3 + 8);
  }
  if (v7 >= v12)
  {
    uint64_t v81 = result;
    std::string v13 = &v10[v7];
    int v14 = *(char *)v11;
    result = v10;
    while (1)
    {
      uint64_t v15 = v7 - v12;
      if (v15 == -1) {
        goto LABEL_73;
      }
      result = (char *)memchr(result, v14, v15 + 1);
      if (!result) {
        goto LABEL_73;
      }
      uint64_t v16 = result;
      result = (char *)memcmp(result, v11, v12);
      if (!result) {
        break;
      }
      result = v16 + 1;
      int64_t v7 = v13 - (v16 + 1);
      if (v7 < v12) {
        goto LABEL_73;
      }
    }
    if (v16 != v13)
    {
      uint64_t v6 = v81;
      if (v16 - v10 != -1)
      {
LABEL_234:
        if (*(unsigned char *)(a2 + 1144))
        {
          uint64_t v17 = *(void *)(a2 + 1120);
          if (*(char *)(v17 + 231) < 0)
          {
            sub_4200(&__dst, *(void **)(v17 + 208), *(void *)(v17 + 216));
            if ((*(char *)(v17 + 255) & 0x80000000) == 0) {
              goto LABEL_25;
            }
          }
          else
          {
            long long __dst = *(_OWORD *)(v17 + 208);
            uint64_t v100 = *(void *)(v17 + 224);
            if ((*(char *)(v17 + 255) & 0x80000000) == 0)
            {
LABEL_25:
              long long v101 = *(_OWORD *)(v17 + 232);
              uint64_t v102 = *(void *)(v17 + 248);
              goto LABEL_28;
            }
          }
          sub_4200(&v101, *(void **)(v17 + 232), *(void *)(v17 + 240));
LABEL_28:
          if (!*(unsigned char *)(a2 + 1144))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          if (*(char *)(a2 + 927) < 0)
          {
            sub_4200(v95, *(void **)(a2 + 904), *(void *)(a2 + 912));
          }
          else
          {
            *(_OWORD *)int v95 = *(_OWORD *)(a2 + 904);
            uint64_t v96 = *(void *)(a2 + 920);
          }
          if (*(char *)(a2 + 951) < 0)
          {
            sub_4200(&__src, *(void **)(a2 + 928), *(void *)(a2 + 936));
          }
          else
          {
            long long __src = *(_OWORD *)(a2 + 928);
            uint64_t v98 = *(void *)(a2 + 944);
          }
          if (v102 >= 0) {
            uint64_t v18 = HIBYTE(v102);
          }
          else {
            uint64_t v18 = *((void *)&v101 + 1);
          }
          if (v18)
          {
            if (SHIBYTE(v102) < 0)
            {
              sub_4200(v83, (void *)v101, *((unint64_t *)&v101 + 1));
            }
            else
            {
              *(_OWORD *)int64x2_t v83 = v101;
              *(void *)&long long v84 = v102;
            }
          }
          else
          {
            int64x2_t v93 = operator new(0x38uLL);
            long long v94 = xmmword_20B9A20;
            strcpy((char *)v93, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
            *(_OWORD *)std::string __p = 0u;
            long long v91 = 0u;
            int v92 = 1065353216;
            sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v93, (uint64_t)__p, 0, (uint64_t)v83);
          }
          if (SHIBYTE(v102) < 0) {
            operator delete((void *)v101);
          }
          long long v101 = *(_OWORD *)v83;
          uint64_t v102 = v84;
          BYTE7(v84) = 0;
          LOBYTE(v83[0]) = 0;
          if (v18) {
            goto LABEL_51;
          }
          uint64_t v19 = (void *)v91;
          if ((void)v91)
          {
            do
            {
              uint64_t v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          uint64_t v21 = __p[0];
          __p[0] = 0;
          if (v21) {
            operator delete(v21);
          }
          if (SHIBYTE(v94) < 0)
          {
            operator delete(v93);
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24) {
              goto LABEL_55;
            }
          }
          else
          {
LABEL_51:
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24)
            {
LABEL_55:
              if (v22 < 0)
              {
                sub_4200(&v88, (void *)__src, v23);
              }
              else
              {
                long long v88 = __src;
                uint64_t v89 = v98;
              }
LABEL_63:
              if (SHIBYTE(v98) < 0) {
                operator delete((void *)__src);
              }
              long long __src = v88;
              uint64_t v98 = v89;
              HIBYTE(v89) = 0;
              LOBYTE(v88) = 0;
              if (!v24)
              {
                int v25 = (void *)v84;
                if ((void)v84)
                {
                  do
                  {
                    std::string v26 = (void *)*v25;
                    sub_4F4B48((uint64_t)(v25 + 2));
                    operator delete(v25);
                    int v25 = v26;
                  }
                  while (v26);
                }
                uint64_t v27 = v83[0];
                v83[0] = 0;
                if (v27) {
                  operator delete(v27);
                }
                if (SHIBYTE(v87) < 0) {
                  operator delete(v86);
                }
              }
              sub_5F738C(a4, (uint64_t)&qword_255F460);
            }
          }
          int v86 = operator new(0x38uLL);
          long long v87 = xmmword_20B9A20;
          strcpy((char *)v86, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
          *(_OWORD *)int64x2_t v83 = 0u;
          long long v84 = 0u;
          int v85 = 1065353216;
          sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v86, (uint64_t)v83, 0, (uint64_t)&v88);
          goto LABEL_63;
        }
LABEL_230:
        uint64_t v79 = __cxa_allocate_exception(8uLL);
        void *v79 = &off_2439078;
      }
    }
  }
LABEL_73:
  if ((v8 & 0x80u) == 0) {
    uint64_t v28 = (char *)a3;
  }
  else {
    uint64_t v28 = v9;
  }
  if (byte_255F54F >= 0) {
    int v29 = &qword_255F538;
  }
  else {
    int v29 = (uint64_t *)qword_255F538;
  }
  if (byte_255F54F >= 0) {
    int64_t v30 = byte_255F54F;
  }
  else {
    int64_t v30 = unk_255F540;
  }
  if (!v30) {
    goto LABEL_95;
  }
  int64_t v31 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v31 >= v30)
  {
    int64x2_t v32 = &v28[v31];
    int v33 = *(char *)v29;
    result = v28;
    while (1)
    {
      uint64_t v34 = v31 - v30;
      if (v34 == -1) {
        goto LABEL_105;
      }
      result = (char *)memchr(result, v33, v34 + 1);
      if (!result) {
        goto LABEL_105;
      }
      uint64_t v35 = result;
      result = (char *)memcmp(result, v29, v30);
      if (!result) {
        break;
      }
      result = v35 + 1;
      int64_t v31 = v32 - (v35 + 1);
      if (v31 < v30) {
        goto LABEL_105;
      }
    }
    if (v35 != v32 && v35 - v28 != -1)
    {
LABEL_95:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      float v36 = *(float *)(a2 + 856);
      if (v36 >= 0.0)
      {
        if (v36 < 8388600.0)
        {
          uint64_t v37 = (uint64_t)(float)(v36 + v36) + 1;
LABEL_103:
          float v36 = (float)(v37 >> 1);
        }
      }
      else if (v36 > -8388600.0)
      {
        uint64_t v37 = (uint64_t)(float)(v36 + v36);
        if (v37 >= 1) {
          --v37;
        }
        goto LABEL_103;
      }
      result = sub_5F71A4((uint64_t)a4, (uint64_t)&qword_255F538, v36);
      unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
      uint64_t v9 = *(char **)a3;
    }
  }
LABEL_105:
  uint64_t v38 = a2 + 1152;
  if ((v8 & 0x80u) == 0) {
    int v39 = (char *)a3;
  }
  else {
    int v39 = v9;
  }
  if (byte_255F567 >= 0) {
    uint64_t v40 = &qword_255F550;
  }
  else {
    uint64_t v40 = (uint64_t *)qword_255F550;
  }
  if (byte_255F567 >= 0) {
    int64_t v41 = byte_255F567;
  }
  else {
    int64_t v41 = unk_255F558;
  }
  if (v41)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v42 = v8;
    }
    else {
      int64_t v42 = *(void *)(a3 + 8);
    }
    if (v42 < v41) {
      goto LABEL_130;
    }
    int v43 = &v39[v42];
    int v44 = *(char *)v40;
    result = v39;
    while (1)
    {
      int64_t v45 = v42 - v41;
      if (v45 == -1) {
        goto LABEL_129;
      }
      result = (char *)memchr(result, v44, v45 + 1);
      if (!result) {
        goto LABEL_129;
      }
      uint64_t v46 = result;
      result = (char *)memcmp(result, v40, v41);
      if (!result) {
        break;
      }
      result = v46 + 1;
      int64_t v42 = v43 - (v46 + 1);
      if (v42 < v41) {
        goto LABEL_129;
      }
    }
    if (v46 == v43)
    {
LABEL_129:
      uint64_t v38 = a2 + 1152;
      goto LABEL_130;
    }
    uint64_t v38 = a2 + 1152;
    if (v46 - v39 == -1) {
      goto LABEL_130;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F550, (_DWORD *)(a2 + 860), v38, 4);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_130:
  if ((v8 & 0x80u) == 0) {
    uint64_t v47 = (char *)a3;
  }
  else {
    uint64_t v47 = v9;
  }
  if (byte_255F4BF >= 0) {
    uint64_t v48 = &qword_255F4A8;
  }
  else {
    uint64_t v48 = (uint64_t *)qword_255F4A8;
  }
  if (byte_255F4BF >= 0) {
    int64_t v49 = byte_255F4BF;
  }
  else {
    int64_t v49 = *(void *)&dword_255F4B0;
  }
  if (v49)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v50 = v8;
    }
    else {
      int64_t v50 = *(void *)(a3 + 8);
    }
    if (v50 < v49) {
      goto LABEL_155;
    }
    int v51 = &v47[v50];
    int v52 = *(char *)v48;
    result = v47;
    while (1)
    {
      int64_t v53 = v50 - v49;
      if (v53 == -1) {
        goto LABEL_154;
      }
      result = (char *)memchr(result, v52, v53 + 1);
      if (!result) {
        goto LABEL_154;
      }
      uint64_t v54 = result;
      result = (char *)memcmp(result, v48, v49);
      if (!result) {
        break;
      }
      result = v54 + 1;
      int64_t v50 = v51 - (v54 + 1);
      if (v50 < v49) {
        goto LABEL_154;
      }
    }
    if (v54 == v51)
    {
LABEL_154:
      uint64_t v38 = a2 + 1152;
      goto LABEL_155;
    }
    uint64_t v38 = a2 + 1152;
    if (v54 - v47 == -1) {
      goto LABEL_155;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4A8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 0);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_155:
  if ((v8 & 0x80u) == 0) {
    uint64_t v55 = (char *)a3;
  }
  else {
    uint64_t v55 = v9;
  }
  if (byte_255F4EF >= 0) {
    uint64_t v56 = &qword_255F4D8;
  }
  else {
    uint64_t v56 = (uint64_t *)qword_255F4D8;
  }
  if (byte_255F4EF >= 0) {
    int64_t v57 = byte_255F4EF;
  }
  else {
    int64_t v57 = *(void *)&dword_255F4E0;
  }
  if (!v57) {
    goto LABEL_177;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v58 = v8;
  }
  else {
    int64_t v58 = *(void *)(a3 + 8);
  }
  if (v58 >= v57)
  {
    unint64_t v59 = &v55[v58];
    int v60 = *(char *)v56;
    result = v55;
    while (1)
    {
      uint64_t v61 = v58 - v57;
      if (v61 == -1) {
        goto LABEL_179;
      }
      result = (char *)memchr(result, v60, v61 + 1);
      if (!result) {
        goto LABEL_179;
      }
      uint64_t v62 = result;
      result = (char *)memcmp(result, v56, v57);
      if (!result) {
        break;
      }
      result = v62 + 1;
      int64_t v58 = v59 - (v62 + 1);
      if (v58 < v57) {
        goto LABEL_179;
      }
    }
    if (v62 == v59)
    {
LABEL_179:
      uint64_t v38 = a2 + 1152;
    }
    else
    {
      uint64_t v38 = a2 + 1152;
      if (v62 - v55 != -1)
      {
LABEL_177:
        if (!*(unsigned char *)(a2 + 1144)) {
          goto LABEL_230;
        }
        result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4D8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 3);
        unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
        uint64_t v9 = *(char **)a3;
      }
    }
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v63 = (char *)a3;
  }
  else {
    uint64_t v63 = v9;
  }
  if (byte_255F4A7 >= 0) {
    int v64 = &qword_255F490;
  }
  else {
    int v64 = (uint64_t *)qword_255F490;
  }
  if (byte_255F4A7 >= 0) {
    int64_t v65 = byte_255F4A7;
  }
  else {
    int64_t v65 = unk_255F498;
  }
  if (!v65) {
    goto LABEL_202;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v66 = v8;
  }
  else {
    int64_t v66 = *(void *)(a3 + 8);
  }
  if (v66 < v65) {
    goto LABEL_205;
  }
  unint64_t v67 = &v63[v66];
  int v68 = *(char *)v64;
  result = v63;
  while (1)
  {
    int64_t v69 = v66 - v65;
    if (v69 == -1) {
      goto LABEL_204;
    }
    result = (char *)memchr(result, v68, v69 + 1);
    if (!result) {
      goto LABEL_204;
    }
    uint64_t v70 = result;
    result = (char *)memcmp(result, v64, v65);
    if (!result) {
      break;
    }
    result = v70 + 1;
    int64_t v66 = v67 - (v70 + 1);
    if (v66 < v65) {
      goto LABEL_204;
    }
  }
  if (v70 == v67)
  {
LABEL_204:
    uint64_t v38 = a2 + 1152;
    goto LABEL_205;
  }
  uint64_t v38 = a2 + 1152;
  if (v70 - v63 != -1)
  {
LABEL_202:
    if (!*(unsigned char *)(a2 + 1144)) {
      goto LABEL_230;
    }
    result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F490, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 0);
    unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
    uint64_t v9 = *(char **)a3;
  }
LABEL_205:
  if ((v8 & 0x80u) == 0) {
    uint64_t v71 = (char *)a3;
  }
  else {
    uint64_t v71 = v9;
  }
  if (byte_255F4D7 >= 0) {
    unint64_t v72 = &qword_255F4C0;
  }
  else {
    unint64_t v72 = (uint64_t *)qword_255F4C0;
  }
  if (byte_255F4D7 >= 0) {
    int64_t v73 = byte_255F4D7;
  }
  else {
    int64_t v73 = unk_255F4C8;
  }
  if (!v73) {
    goto LABEL_227;
  }
  int64_t v74 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v74 >= v73)
  {
    uint64_t v75 = &v71[v74];
    int v76 = *(char *)v72;
    result = v71;
    while (1)
    {
      uint64_t v77 = v74 - v73;
      if (v77 == -1) {
        return result;
      }
      result = (char *)memchr(result, v76, v77 + 1);
      if (!result) {
        return result;
      }
      unint64_t v78 = result;
      result = (char *)memcmp(result, v72, v73);
      if (!result) {
        break;
      }
      result = v78 + 1;
      int64_t v74 = v75 - (v78 + 1);
      if (v74 < v73) {
        return result;
      }
    }
    if (v78 != v75 && v78 - v71 != -1)
    {
LABEL_227:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      return sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4C0, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 3);
    }
  }
  return result;
}

void sub_4F2590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_1B23C((uint64_t)&a37);
  sub_1B23C(v42 - 144);
  _Unwind_Resume(a1);
}

int64x2_t sub_4F2678(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  int64x2_t result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 8) = result;
  *(int64x2_t *)(a1 + 24) = result;
  *(int64x2_t *)(a1 + 40) = result;
  *(int64x2_t *)(a1 + 56) = result;
  *(int64x2_t *)(a1 + 72) = result;
  *(int64x2_t *)(a1 + 88) = result;
  *(int64x2_t *)(a1 + 104) = result;
  *(int64x2_t *)(a1 + 120) = result;
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v2 = 0x8000000080000000;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 144) = v2;
  *(_OWORD *)(a1 + 160) = v2;
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = v2;
  *(_DWORD *)(a1 + 208) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 216) = result;
  *(int64x2_t *)(a1 + 232) = result;
  *(_OWORD *)(a1 + 248) = v2;
  *(_OWORD *)(a1 + 264) = v2;
  *(void *)(a1 + 280) = 0x8000000080000000;
  *(int64x2_t *)(a1 + 288) = result;
  *(int64x2_t *)(a1 + 304) = result;
  *(int64x2_t *)(a1 + 320) = result;
  *(int64x2_t *)(a1 + 336) = result;
  *(int64x2_t *)(a1 + 352) = result;
  *(int64x2_t *)(a1 + 368) = result;
  *(int64x2_t *)(a1 + 384) = result;
  *(int64x2_t *)(a1 + 400) = result;
  *(_OWORD *)(a1 + 416) = 0u;
  *(int64x2_t *)(a1 + 432) = result;
  *(int64x2_t *)(a1 + 448) = result;
  *(int64x2_t *)(a1 + 464) = result;
  *(int64x2_t *)(a1 + 480) = result;
  *(int64x2_t *)(a1 + 496) = result;
  *(int64x2_t *)(a1 + 512) = result;
  *(int64x2_t *)(a1 + 528) = result;
  *(int64x2_t *)(a1 + 544) = result;
  *(int64x2_t *)(a1 + 560) = result;
  *(int64x2_t *)(a1 + 576) = result;
  *(int64x2_t *)(a1 + 592) = result;
  *(int64x2_t *)(a1 + 608) = result;
  *(int64x2_t *)(a1 + 624) = result;
  *(int64x2_t *)(a1 + 640) = result;
  *(int64x2_t *)(a1 + 656) = result;
  *(int64x2_t *)(a1 + 672) = result;
  *(int64x2_t *)(a1 + 688) = result;
  *(int64x2_t *)(a1 + 704) = result;
  *(int64x2_t *)(a1 + 720) = result;
  *(int64x2_t *)(a1 + 736) = result;
  *(int64x2_t *)(a1 + 752) = result;
  *(int64x2_t *)(a1 + 768) = result;
  *(int64x2_t *)(a1 + 784) = result;
  *(int64x2_t *)(a1 + 800) = result;
  *(int64x2_t *)(a1 + 816) = result;
  *(int64x2_t *)(a1 + 832) = result;
  *(int64x2_t *)(a1 + 848) = result;
  *(int64x2_t *)(a1 + 864) = result;
  *(int64x2_t *)(a1 + 880) = result;
  *(int64x2_t *)(a1 + 896) = result;
  *(int64x2_t *)(a1 + 912) = result;
  *(int64x2_t *)(a1 + 928) = result;
  *(int64x2_t *)(a1 + 944) = result;
  *(int64x2_t *)(a1 + 960) = result;
  *(int64x2_t *)(a1 + 976) = result;
  *(int64x2_t *)(a1 + 992) = result;
  *(int64x2_t *)(a1 + 1008) = result;
  *(int64x2_t *)(a1 + 1024) = result;
  *(int64x2_t *)(a1 + 1040) = result;
  *(int64x2_t *)(a1 + 1056) = result;
  *(int64x2_t *)(a1 + 1072) = result;
  *(int64x2_t *)(a1 + 1088) = result;
  *(int64x2_t *)(a1 + 1104) = result;
  *(int64x2_t *)(a1 + 1120) = result;
  *(int64x2_t *)(a1 + 1136) = result;
  *(int64x2_t *)(a1 + 1152) = result;
  *(int64x2_t *)(a1 + 1168) = result;
  *(int64x2_t *)(a1 + 1184) = result;
  *(int64x2_t *)(a1 + 1200) = result;
  *(int64x2_t *)(a1 + 1216) = result;
  *(int64x2_t *)(a1 + 1232) = result;
  *(int64x2_t *)(a1 + 1248) = result;
  *(void *)(a1 + 1264) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1272) = 0;
  *(int64x2_t *)(a1 + 1280) = result;
  *(int64x2_t *)(a1 + 1296) = result;
  *(int64x2_t *)(a1 + 1312) = result;
  *(int64x2_t *)(a1 + 1328) = result;
  *(int64x2_t *)(a1 + 1344) = result;
  *(int64x2_t *)(a1 + 1360) = result;
  *(int64x2_t *)(a1 + 1376) = result;
  *(int64x2_t *)(a1 + 1392) = result;
  *(int64x2_t *)(a1 + 1408) = result;
  *(int64x2_t *)(a1 + 1424) = result;
  *(int64x2_t *)(a1 + 1440) = result;
  *(int64x2_t *)(a1 + 1456) = result;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1480) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1488) = 0;
  *(void *)(a1 + 1496) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1504) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1560) = -1;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(a1 + 1528) = v3;
  *(_OWORD *)(a1 + 1544) = v3;
  *(_OWORD *)(a1 + 1512) = v3;
  *(unsigned char *)(a1 + 1568) = 0;
  *(void *)(a1 + 1576) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 1584) = result;
  *(void *)(a1 + 1600) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1612) = 0x7FFFFFFF;
  *(void *)(a1 + 1616) = 0;
  *(_WORD *)(a1 + 1624) = 0;
  *(int64x2_t *)(a1 + 1632) = result;
  *(int64x2_t *)(a1 + 1648) = result;
  *(int64x2_t *)(a1 + 1664) = result;
  *(int64x2_t *)(a1 + 1680) = result;
  *(int64x2_t *)(a1 + 1696) = result;
  *(int64x2_t *)(a1 + 1712) = result;
  *(int64x2_t *)(a1 + 1728) = result;
  *(int64x2_t *)(a1 + 1744) = result;
  *(int64x2_t *)(a1 + 1760) = result;
  *(int64x2_t *)(a1 + 1776) = result;
  *(int64x2_t *)(a1 + 1792) = result;
  *(int64x2_t *)(a1 + 1808) = result;
  *(int64x2_t *)(a1 + 1824) = result;
  *(int64x2_t *)(a1 + 1840) = result;
  *(void *)(a1 + 1871) = 0;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(void *)(a1 + 1880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1888) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1896) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1925) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(int64x2_t *)(a1 + 1936) = result;
  *(int64x2_t *)(a1 + 1952) = result;
  *(unsigned char *)(a1 + 1968) = 1;
  *(void *)(a1 + 1969) = 0;
  *(unsigned char *)(a1 + 1977) = 0;
  *(void *)(a1 + 1984) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1992) = 0;
  *(void *)(a1 + 2000) = 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  return result;
}

uint64_t sub_4F2894(uint64_t a1)
{
  if ((*(char *)(a1 + 2159) & 0x80000000) == 0)
  {
    long long v2 = *(void **)(a1 + 2112);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 2136));
  long long v2 = *(void **)(a1 + 2112);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 2120) = v2;
    operator delete(v2);
  }
LABEL_4:
  long long v3 = *(void **)(a1 + 2080);
  if (v3)
  {
    *(void *)(a1 + 2088) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 1959) < 0)
  {
    operator delete(*(void **)(a1 + 1936));
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v4) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v4) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5) {
      return a1;
    }
    goto LABEL_14;
  }
LABEL_13:
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5) {
    return a1;
  }
LABEL_14:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_4F29BC(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  bzero((void *)a1, 0x220uLL);
  sub_5F3B34(v2);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_5F3B34(a1 + 240);
  *(_DWORD *)(a1 + 432) = -1;
  *(_DWORD *)(a1 + 440) = -1;
  *(_DWORD *)(a1 + 443) = -1;
  *(void *)(a1 + 447) = 0;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 455) = 0;
  *(_WORD *)(a1 + 471) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  bzero((void *)(a1 + 512), 0x210uLL);
  sub_5F3B34(a1 + 544);
  *(unsigned char *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  sub_5F3B34(a1 + 736);
  *(_DWORD *)(a1 + 928) = -1;
  *(_DWORD *)(a1 + 936) = -1;
  *(_DWORD *)(a1 + 939) = -1;
  *(void *)(a1 + 943) = 0;
  *(void *)(a1 + 959) = 0;
  *(void *)(a1 + 951) = 0;
  *(_WORD *)(a1 + 967) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 984) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  return a1;
}

void sub_4F2AC8(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;
  if (*v5)
  {
    int64_t v7 = (void **)v5;
    sub_4F3104((uint64_t)v5, *v5);
    operator delete(*v7);
  }
  sub_4D4B58(v4);
  sub_4F2FF8(v2);
  sub_4F2B74(v1 + 3);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_4F2B1C(_Unwind_Exception *a1)
{
  if (*v3)
  {
    sub_4F3104((uint64_t)v3, *v3);
    operator delete(*v3);
  }
  sub_4D4B58(v2);
  sub_4F2B74(v1 + 3);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_4F2B58(_Unwind_Exception *a1)
{
  sub_4F2B74(v1 + 3);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void **sub_4F2B74(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4F2FF8(v3 - 496);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_4F2BD0(void **a1)
{
  uint64_t v2 = a1[133];
  if (v2)
  {
    uint64_t v3 = (uint64_t)a1[134];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4F2FF8(v3 - 496);
      while ((void *)v3 != v2);
      uint64_t v4 = a1[133];
    }
    a1[134] = v2;
    operator delete(v4);
  }
  unint64_t v5 = a1[130];
  if (v5)
  {
    uint64_t v6 = (uint64_t)a1[131];
    int64_t v7 = a1[130];
    if ((void *)v6 != v5)
    {
      do
        uint64_t v6 = sub_4F2FF8(v6 - 496);
      while ((void *)v6 != v5);
      int64_t v7 = a1[130];
    }
    a1[131] = v5;
    operator delete(v7);
  }
  sub_4F2FF8((uint64_t)(a1 + 68));
  sub_4F2FF8((uint64_t)(a1 + 6));
  unsigned __int8 v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = (uint64_t)a1[4];
    int v10 = a1[3];
    if ((void *)v9 != v8)
    {
      do
        uint64_t v9 = sub_4F2FF8(v9 - 496);
      while ((void *)v9 != v8);
      int v10 = a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  uint64_t v11 = (void **)*a1;
  if (*a1)
  {
    int64_t v12 = (void **)a1[1];
    std::string v13 = *a1;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      std::string v13 = *a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t *sub_4F2CFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_4D4B58(v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_4F2D44(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    for (uint64_t i = *(void *)(a1 + 8); (void *)i != v2; sub_4F2DAC(a1 + 16, i))
      i -= 144;
    *(void *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4F2DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void ***)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = (uint64_t)v3[1];
      uint64_t v6 = *v3;
      if ((void *)v5 != v4)
      {
        do
          uint64_t v5 = sub_4D4B58(v5 - 168);
        while ((void *)v5 != v4);
        uint64_t v6 = *v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    operator delete();
  }
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  if (v7)
  {
    if (*(unsigned char *)(v7 + 24))
    {
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      *(unsigned char *)(v7 + 24) = 0;
    }
    operator delete();
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 8);
    if (v9)
    {
      *(void *)(v8 + 16) = v9;
      operator delete(v9);
    }
    operator delete();
  }
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  if (v10)
  {
    if (*(char *)(v10 + 47) < 0)
    {
      operator delete(*(void **)(v10 + 24));
      if ((*(char *)(v10 + 23) & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else if ((*(char *)(v10 + 23) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(*(void **)v10);
LABEL_21:
    operator delete();
  }
  uint64_t v11 = a2 + 88;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  if (v12) {
    sub_4F48F0(v11, v12);
  }
  uint64_t v13 = *(void *)(a2 + 64);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 72);
    uint64_t v15 = *(void **)(a2 + 64);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 9) < 0) {
          operator delete(*(void **)(v14 - 32));
        }
        v14 -= 40;
      }
      while (v14 != v13);
      uint64_t v15 = *(void **)(a2 + 64);
    }
    *(void *)(a2 + 72) = v13;
    operator delete(v15);
  }
  uint64_t v16 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  if (v16) {
    sub_4F49E8(a2 + 56, v16);
  }
  uint64_t v17 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  if (v17)
  {
    if (*(char *)(v17 + 31) < 0) {
      operator delete(*(void **)(v17 + 8));
    }
    operator delete();
  }
  uint64_t v18 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  if (v18)
  {
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    operator delete();
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v19 = *(void **)a2;
    operator delete(v19);
  }
}

uint64_t sub_4F2FF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 472);
    uint64_t v4 = *(void **)(a1 + 464);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 464);
    }
    *(void *)(a1 + 472) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 423) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_16:
    operator delete(*(void **)(a1 + 400));
    int v5 = *(_DWORD *)(a1 + 384);
    if (v5 != 1) {
      goto LABEL_12;
    }
LABEL_17:
    uint64_t v6 = *(void **)(a1 + 360);
    if (!v6) {
      goto LABEL_20;
    }
    *(void *)(a1 + 368) = v6;
    goto LABEL_19;
  }
  operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 423) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  int v5 = *(_DWORD *)(a1 + 384);
  if (v5 == 1) {
    goto LABEL_17;
  }
LABEL_12:
  if (!v5 && *(char *)(a1 + 383) < 0)
  {
    uint64_t v6 = *(void **)(a1 + 360);
LABEL_19:
    operator delete(v6);
  }
LABEL_20:
  sub_4D4B58(a1 + 192);
  uint64_t v7 = *(void ***)(a1 + 168);
  if (v7)
  {
    sub_4F3104(a1 + 168, v7);
    operator delete(*(void **)(a1 + 168));
  }

  return sub_4D4B58(a1);
}

void sub_4F3104(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  while (v4 != a2)
  {
    int v5 = v4;
    uint64_t v6 = (void **)*(v4 - 3);
    if (v6)
    {
      uint64_t v7 = (void **)*(v5 - 2);
      uint64_t v8 = v6;
      if (v7 != v6)
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        uint64_t v8 = (void **)*(v5 - 3);
      }
      *(v5 - 2) = v6;
      operator delete(v8);
    }
    uint64_t v4 = v5 - 100;
    int v9 = *((_DWORD *)v5 - 8);
    if (v9 == 1)
    {
      sub_4F4A98((uint64_t)(v5 - 100));
    }
    else if (!v9 && *((char *)v5 - 777) < 0)
    {
      operator delete(*v4);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void **sub_4F31D0(void **a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1[5];
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v3 = a1[5];
    if (!v3) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v4 = (void *)*v3;
    sub_4F4B48((uint64_t)(v3 + 2));
    operator delete(v3);
    uint64_t v3 = v4;
  }
  while (v4);
LABEL_5:
  int v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*a1;
  if (*a1)
  {
    uint64_t v7 = (void **)a1[1];
    uint64_t v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

void *sub_4F32CC(void *a1)
{
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)a1[32];
  if (v3)
  {
    uint64_t v4 = (void **)a1[33];
    int v5 = (void *)a1[32];
    if (v4 != v3)
    {
      do
        uint64_t v4 = sub_4F31D0(v4 - 13);
      while (v4 != v3);
      int v5 = (void *)a1[32];
    }
    a1[33] = v3;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[18];
  if (v6)
  {
    a1[19] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[15];
  if (v7)
  {
    a1[16] = v7;
    operator delete(v7);
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v9 = a1[2];
    uint64_t v10 = (void *)a1[1];
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_4D4B58(v9 - 160);
      while (v9 != v8);
      uint64_t v10 = (void *)a1[1];
    }
    a1[2] = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_4F3390(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  switch(*(_DWORD *)(a1 + 736))
  {
    case 1:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v5 = 0x4452415A5A494C42;
      goto LABEL_11;
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&__p, "FLASH_FLOOD");
      goto LABEL_26;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "FLOOD");
      goto LABEL_26;
    case 4:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 69;
      uint64_t v3 = "HURRICANE";
      goto LABEL_16;
    case 5:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 19794;
      uint64_t v6 = "SNOW_STORM";
      goto LABEL_25;
    case 6:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v5 = 0x45524946444C4957;
LABEL_11:
      __p.__r_.__value_.__r.__words[0] = v5;
      __p.__r_.__value_.__s.__data_[8] = 0;
      goto LABEL_26;
    case 7:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1279482179;
      int v4 = 1162760012;
      goto LABEL_22;
    case 8:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 17739;
      uint64_t v6 = "EARTHQUAKE";
      goto LABEL_25;
    case 9:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 77;
      uint64_t v3 = "HAILSTORM";
      goto LABEL_16;
    case 0xA:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 77;
      uint64_t v3 = "ICE_STORM";
      goto LABEL_16;
    case 0xB:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&__p, "THUNDERSTORM");
      goto LABEL_26;
    case 0xC:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "TROPICAL_STORM");
      goto LABEL_26;
    case 0xD:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1314214740;
      int v4 = 1229799758;
      goto LABEL_22;
    case 0xE:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1213225300;
      int v4 = 1313820488;
      goto LABEL_22;
    case 0xF:
    case 0x10:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 69;
      uint64_t v3 = "LANDSLIDE";
LABEL_16:
      __p.__r_.__value_.__r.__words[0] = *(void *)v3;
      goto LABEL_26;
    case 0x11:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1314017108;
      int v4 = 1329873230;
      goto LABEL_22;
    case 0x12:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "VOLCANIC_ERUPTION");
      goto LABEL_26;
    case 0x13:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 20041;
      uint64_t v6 = "SNOW_CHAIN";
LABEL_25:
      __p.__r_.__value_.__r.__words[0] = *(void *)v6;
      __p.__r_.__value_.__s.__data_[10] = 0;
      goto LABEL_26;
    default:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1313558101;
      int v4 = 1314344782;
LABEL_22:
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = v4;
      __p.__r_.__value_.__s.__data_[7] = 0;
LABEL_26:
      if (byte_2560A9F >= 0) {
        uint64_t v7 = (const std::string::value_type *)&qword_2560A88;
      }
      else {
        uint64_t v7 = (const std::string::value_type *)qword_2560A88;
      }
      if (byte_2560A9F >= 0) {
        std::string::size_type v8 = byte_2560A9F;
      }
      else {
        std::string::size_type v8 = unk_2560A90;
      }
      uint64_t v9 = std::string::insert(&__p, 0, v7, v8);
      *a2 = *v9;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
  }
}

void sub_4F3710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4F377C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 != *(_DWORD *)(a2 + 32))
  {
    if (v4 == 1)
    {
      std::string::size_type v8 = *(void **)(a1 + 8);
      if (!v8)
      {
LABEL_19:
        sub_4F38B0((void *)*(unsigned int *)(a2 + 32), (uint64_t *)a2, (void *)a1);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        return a1;
      }
      *(void *)(a1 + 16) = v8;
    }
    else
    {
      if (v4 || (*(char *)(a1 + 31) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      std::string::size_type v8 = *(void **)(a1 + 8);
    }
    operator delete(v8);
    goto LABEL_19;
  }
  if (v4 != 1)
  {
    if (!v4)
    {
      *(void *)a1 = *(void *)a2;
      std::string::size_type v5 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v5);
      }
      long long v6 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)std::string::size_type v5 = v6;
      *(unsigned char *)(a2 + 31) = 0;
      *(unsigned char *)(a2 + 8) = 0;
    }
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = (void *)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(void *)(a1 + 16) = v9;
    operator delete(v9);
    *uint64_t v10 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

void *sub_4F38B0(void *result, uint64_t *a2, void *a3)
{
  if (result == 1)
  {
    uint64_t v6 = *a2;
    a3[1] = 0;
    *a3 = v6;
    a3[2] = 0;
    a3[3] = 0;
    std::string::size_type v8 = (unsigned char *)a2[1];
    uint64_t v7 = (unsigned char *)a2[2];
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (v9 < 0) {
        sub_2E00();
      }
      uint64_t v10 = (char *)operator new(v7 - v8);
      a3[1] = v10;
      a3[2] = v10;
      uint64_t v11 = &v10[8 * (v9 >> 3)];
      a3[3] = v11;
      int64x2_t result = memcpy(v10, v8, v9);
      a3[2] = v11;
    }
  }
  else if (!result)
  {
    *a3 = *a2;
    int v4 = a3 + 1;
    if (*((char *)a2 + 31) < 0)
    {
      unint64_t v12 = a2[2];
      uint64_t v13 = (void *)a2[1];
      return sub_4200(v4, v13, v12);
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      a3[3] = a2[3];
      *(_OWORD *)int v4 = v5;
    }
  }
  return result;
}

void sub_4F399C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4F39B8(uint64_t a1, std::string *__str)
{
  if ((std::string *)a1 == __str) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 == LODWORD(__str[1].__r_.__value_.__r.__words[1]))
  {
    if (v4 == 1)
    {
      *(void *)a1 = __str->__r_.__value_.__r.__words[0];
      sub_326C0((void *)(a1 + 8), (char *)__str->__r_.__value_.__l.__size_, (char *)__str->__r_.__value_.__r.__words[2], (uint64_t)(__str->__r_.__value_.__r.__words[2] - __str->__r_.__value_.__l.__size_) >> 3);
    }
    else if (!v4)
    {
      *(void *)a1 = __str->__r_.__value_.__r.__words[0];
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    return a1;
  }
  if (v4 != 1)
  {
    if (v4 || (*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    uint64_t v6 = *(void **)(a1 + 8);
    goto LABEL_14;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
LABEL_14:
    operator delete(v6);
  }
LABEL_15:
  sub_4F3A90((void *)LODWORD(__str[1].__r_.__value_.__r.__words[1]), (uint64_t *)__str, (void *)a1);
  *(_DWORD *)(a1 + 32) = __str[1].__r_.__value_.__r.__words[1];
  return a1;
}

void *sub_4F3A90(void *result, uint64_t *a2, void *a3)
{
  if (result == 1)
  {
    uint64_t v6 = *a2;
    a3[1] = 0;
    *a3 = v6;
    a3[2] = 0;
    a3[3] = 0;
    std::string::size_type v8 = (unsigned char *)a2[1];
    uint64_t v7 = (unsigned char *)a2[2];
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (v9 < 0) {
        sub_2E00();
      }
      uint64_t v10 = (char *)operator new(v7 - v8);
      a3[1] = v10;
      a3[2] = v10;
      uint64_t v11 = &v10[8 * (v9 >> 3)];
      a3[3] = v11;
      int64x2_t result = memcpy(v10, v8, v9);
      a3[2] = v11;
    }
  }
  else if (!result)
  {
    *a3 = *a2;
    int v4 = a3 + 1;
    if (*((char *)a2 + 31) < 0)
    {
      unint64_t v12 = a2[2];
      uint64_t v13 = (void *)a2[1];
      return sub_4200(v4, v13, v12);
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      a3[3] = a2[3];
      *(_OWORD *)int v4 = v5;
    }
  }
  return result;
}

void sub_4F3B7C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4F3B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 103);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 88);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 103);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 88);
  }
  if (v3 != v4) {
    return 0;
  }
  std::string::size_type v8 = (const void **)(a1 + 80);
  if (v5 >= 0) {
    int64_t v9 = (unsigned __int8 *)(a2 + 80);
  }
  else {
    int64_t v9 = *(unsigned __int8 **)(a2 + 80);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 88))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 103))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      std::string::size_type v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104)) {
    return 0;
  }
  int v11 = *(_DWORD *)(a1 + 32);
  if (v11 == -1) {
    return *(_DWORD *)(a2 + 32) == -1;
  }
  if (v11 != 1)
  {
    if (!v11
      && !*(_DWORD *)(a2 + 32)
      && *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
      && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5)
      && *(unsigned __int8 *)(a1 + 6) == *(unsigned __int8 *)(a2 + 6)
      && *(unsigned __int8 *)(a1 + 7) == *(unsigned __int8 *)(a2 + 7))
    {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 31);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 16);
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + 31);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 16);
      }
      if (v13 == v14)
      {
        uint64_t v16 = (const void **)(a1 + 8);
        uint64_t v19 = *(unsigned __int8 **)(a2 + 8);
        uint64_t v18 = (unsigned __int8 *)(a2 + 8);
        uint64_t v17 = v19;
        if (v15 >= 0) {
          uint64_t v20 = v18;
        }
        else {
          uint64_t v20 = v17;
        }
        if ((v12 & 0x80) != 0) {
          return memcmp(*v16, v20, *(void *)(a1 + 16)) == 0;
        }
        if (!*(unsigned char *)(a1 + 31)) {
          return 1;
        }
        uint64_t v21 = v12 - 1;
        do
        {
          int v23 = *(unsigned __int8 *)v16;
          uint64_t v16 = (const void **)((char *)v16 + 1);
          int v22 = v23;
          int v25 = *v20++;
          int v24 = v25;
          BOOL v27 = v21-- != 0;
          uint64_t result = v22 == v24;
        }
        while (v22 == v24 && v27);
        return result;
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != 1) {
    return 0;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v29 = *(char **)(a1 + 8);
  uint64_t v28 = *(char **)(a1 + 16);
  int64_t v30 = *(_DWORD **)(a2 + 8);
  if (v28 - v29 != *(void *)(a2 + 16) - (void)v30) {
    return 0;
  }
  if (v29 != v28)
  {
    while (*(_DWORD *)v29 == *v30 && *((_DWORD *)v29 + 1) == v30[1])
    {
      v29 += 8;
      v30 += 2;
      if (v29 == v28) {
        goto LABEL_58;
      }
    }
    return 0;
  }
LABEL_58:

  return sub_4F3E14(a1 + 40, a2 + 40);
}

uint64_t sub_4F3E14(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 5) != *(unsigned __int8 *)(a2 + 5)
    || *(unsigned __int8 *)(a1 + 6) != *(unsigned __int8 *)(a2 + 6)
    || *(unsigned __int8 *)(a1 + 7) != *(unsigned __int8 *)(a2 + 7))
  {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 8);
  int64_t v9 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v7 = (unsigned __int8 *)(a2 + 8);
  std::string::size_type v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_4F3F14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v4 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v6 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a2 + 232) = 0u;
  uint64_t v7 = *(void *)(a2 + 256);
  *(_OWORD *)(a2 + 248) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 272) = 0;
  long long v9 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v9;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 296) = 0;
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 352), (uint64_t *)(a2 + 320), (void *)(a1 + 320));
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = v10;
  *(_OWORD *)(a2 + 376) = 0u;
  *(void *)(a2 + 368) = 0;
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  long long v11 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v11;
  *(_OWORD *)(a2 + 408) = 0u;
  *(void *)(a2 + 400) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  *(_OWORD *)(a2 + 456) = 0u;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)(a2 + 504) = 0u;
  uint64_t v12 = *(void *)(a2 + 528);
  *(_OWORD *)(a2 + 520) = 0u;
  *(void *)(a1 + 528) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 536);
  *(unsigned char *)(a1 + 540) = *(unsigned char *)(a2 + 540);
  *(_DWORD *)(a1 + 536) = v12;
  long long v13 = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = v13;
  *(void *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  long long v14 = *(_OWORD *)(a2 + 568);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = v14;
  *(_OWORD *)(a2 + 576) = 0u;
  *(void *)(a2 + 568) = 0;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 640) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(_OWORD *)(a2 + 664) = 0u;
  uint64_t v15 = *(void *)(a2 + 688);
  *(_OWORD *)(a2 + 680) = 0u;
  *(void *)(a1 + 688) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 696);
  *(unsigned char *)(a1 + 700) = *(unsigned char *)(a2 + 700);
  *(_DWORD *)(a1 + 696) = v15;
  long long v16 = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = v16;
  *(void *)(a2 + 704) = 0;
  *(void *)(a2 + 720) = 0;
  *(void *)(a2 + 712) = 0;
  long long v17 = *(_OWORD *)(a2 + 728);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = v17;
  *(void *)(a2 + 744) = 0;
  *(void *)(a2 + 736) = 0;
  *(void *)(a2 + 728) = 0;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  return a1;
}

uint64_t sub_4F4314(uint64_t a1, uint64_t a2)
{
  sub_4D90B4(a1, a2);
  sub_4D90B4(a1 + 160, a2 + 160);
  sub_4F377C(a1 + 320, a2 + 320);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  uint64_t v4 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 391) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  long long v6 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)long long v6 = v7;
  *(unsigned char *)(a2 + 423) = 0;
  *(unsigned char *)(a2 + 400) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  sub_4D90B4(a1 + 432, a2 + 432);
  sub_4D90B4(a1 + 592, a2 + 592);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  return a1;
}

void sub_4F43F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 112)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (!v5 && *(char *)(i - 81) < 0)
      {
        uint64_t v4 = *(void **)(i - 104);
LABEL_2:
        operator delete(v4);
        continue;
      }
      continue;
    }
LABEL_13:
    uint64_t v4 = *(void **)(i - 104);
    if (v4)
    {
      *(void *)(i - 96) = v4;
      goto LABEL_2;
    }
  }
  a1[1] = v2;
}

uint64_t sub_4F4498(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v4 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v6 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v7 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v7;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a2 + 264) = 0u;
  uint64_t v8 = *(void *)(a2 + 288);
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a1 + 288) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 296);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v8;
  long long v9 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v9;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 304) = 0;
  long long v10 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v10;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 328) = 0;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 384), (uint64_t *)(a2 + 352), (void *)(a1 + 352));
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  long long v11 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v11;
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 400) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  long long v12 = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = v12;
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 432) = 0;
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  return a1;
}

uint64_t *sub_4F4710(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(unsigned char *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      *(unsigned char *)(v1 + 24) = 0;
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_4F4774(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_4F47CC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)v1);
LABEL_4:
    operator delete();
  }
  return result;
}

uint64_t *sub_4F4840(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_4F4898(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void sub_4F48F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 95) < 0)
    {
      operator delete(*(void **)(a2 + 72));
      if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v3 = *(void ***)(a2 + 24);
        if (!v3) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 48));
    uint64_t v3 = *(void ***)(a2 + 24);
    if (!v3)
    {
LABEL_5:
      uint64_t v4 = *(void **)a2;
      if (!*(void *)a2) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
LABEL_13:
    long long v5 = *(void ***)(a2 + 32);
    if (v5 == v3)
    {
      *(void *)(a2 + 32) = v3;
      operator delete(v3);
      uint64_t v4 = *(void **)a2;
      if (!*(void *)a2) {
        goto LABEL_7;
      }
    }
    else
    {
      do
      {
        if (*((char *)v5 - 9) < 0) {
          operator delete(*(v5 - 4));
        }
        v5 -= 4;
      }
      while (v5 != v3);
      long long v6 = *(void **)(a2 + 24);
      *(void *)(a2 + 32) = v3;
      operator delete(v6);
      uint64_t v4 = *(void **)a2;
      if (!*(void *)a2)
      {
LABEL_7:
        operator delete();
      }
    }
LABEL_6:
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
    goto LABEL_7;
  }
}

void sub_4F49E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 103) < 0)
    {
      operator delete(*(void **)(a2 + 80));
      if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      {
LABEL_4:
        int v3 = *(_DWORD *)(a2 + 32);
        if (v3 != 1) {
          goto LABEL_5;
        }
        goto LABEL_11;
      }
    }
    else if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 48));
    int v3 = *(_DWORD *)(a2 + 32);
    if (v3 != 1)
    {
LABEL_5:
      if (v3 || (*(char *)(a2 + 31) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      uint64_t v4 = *(void **)(a2 + 8);
      goto LABEL_13;
    }
LABEL_11:
    uint64_t v4 = *(void **)(a2 + 8);
    if (!v4) {
      goto LABEL_14;
    }
    *(void *)(a2 + 16) = v4;
LABEL_13:
    operator delete(v4);
LABEL_14:
    operator delete();
  }
}

uint64_t sub_4F4A98(uint64_t a1)
{
  sub_4D4B58(a1 + 592);
  sub_4D4B58(a1 + 432);
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 391) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 368));
    int v2 = *(_DWORD *)(a1 + 352);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    int v3 = *(void **)(a1 + 328);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 336) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 352);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 351) < 0)
  {
    int v3 = *(void **)(a1 + 328);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

void sub_4F4B48(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  int v2 = *(void **)a1;

  operator delete(v2);
}

uint64_t sub_4F4C08(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x84210842108421) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 4) >= 0x42108421084210) {
    unint64_t v6 = 0x84210842108421;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x84210842108421) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(496 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[496 * v6];
  uint64_t v9 = sub_4F4498((uint64_t)&v7[496 * v3], a2);
  uint64_t v10 = v9 + 496;
  long long v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 496;
    uint64_t v9 = sub_4F4498(v9 - 496, (uint64_t)v11);
  }
  while (v11 != v12);
  long long v13 = (char *)*a1;
  long long v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 496;
      sub_4F2FF8((uint64_t)v11);
    }
    while (v11 != v13);
    long long v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t sub_4F4D64(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 496;
    sub_4F2FF8(i - 496);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_4F4DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x9F49F49F49F49F4ALL * ((v4 - (uint64_t)v6) >> 5);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x2D82D82D82D82ELL) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 1440 * v12;
    uint64_t v15 = (char *)operator new(1440 * v12);
    long long v16 = v15;
    long long v17 = &v15[1440 * v13];
    uint64_t v18 = &v15[v14];
    if (v4 == v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = &v17[v4 - v5];
      uint64_t v20 = (uint64_t)&v15[1440 * v13 + 32];
      uint64_t v21 = v5 + 32;
      do
      {
        *(_DWORD *)(v20 - 32) = *(_DWORD *)(v21 - 32);
        long long v22 = *(_OWORD *)(v21 - 24);
        *(void *)(v20 - 8) = *(void *)(v21 - 8);
        *(_OWORD *)(v20 - 24) = v22;
        *(_OWORD *)(v21 - 16) = 0u;
        *(void *)(v21 - 24) = 0;
        uint64_t v23 = sub_4C09FC(v20, v21);
        long long v24 = *(_OWORD *)(v21 + 1120);
        *(void *)(v23 + 1136) = *(void *)(v21 + 1136);
        *(_OWORD *)(v23 + 1120) = v24;
        *(void *)(v21 + 1136) = 0;
        *(_OWORD *)(v21 + 1120) = 0u;
        *(void *)(v23 + 1144) = *(void *)(v21 + 1144);
        *(void *)(v23 + 1152) = *(void *)(v21 + 1152);
        *(void *)(v23 + 1160) = *(void *)(v21 + 1160);
        *(void *)(v21 + 1160) = 0;
        *(_OWORD *)(v21 + 1144) = 0u;
        *(_DWORD *)(v23 + 1168) = *(_DWORD *)(v21 + 1168);
        *(void *)(v23 + 1176) = *(void *)(v21 + 1176);
        *(void *)(v23 + 1184) = *(void *)(v21 + 1184);
        *(void *)(v23 + 1192) = *(void *)(v21 + 1192);
        *(void *)(v21 + 1192) = 0;
        *(_OWORD *)(v21 + 1176) = 0u;
        long long v25 = *(_OWORD *)(v21 + 1200);
        *(void *)(v23 + 1216) = *(void *)(v21 + 1216);
        *(_OWORD *)(v23 + 1200) = v25;
        *(void *)(v21 + 1200) = 0;
        *(_OWORD *)(v21 + 1208) = 0u;
        long long v26 = *(_OWORD *)(v21 + 1224);
        long long v27 = *(_OWORD *)(v21 + 1240);
        *(_OWORD *)(v23 + 1252) = *(_OWORD *)(v21 + 1252);
        *(_OWORD *)(v23 + 1224) = v26;
        *(_OWORD *)(v23 + 1240) = v27;
        long long v28 = *(_OWORD *)(v21 + 1272);
        *(void *)(v23 + 1288) = *(void *)(v21 + 1288);
        *(_OWORD *)(v23 + 1272) = v28;
        *(_OWORD *)(v21 + 1280) = 0u;
        *(void *)(v21 + 1272) = 0;
        *(_OWORD *)(v23 + 1296) = *(_OWORD *)(v21 + 1296);
        *(void *)(v23 + 1312) = *(void *)(v21 + 1312);
        *(void *)(v21 + 1312) = 0;
        *(_OWORD *)(v21 + 1296) = 0u;
        long long v29 = *(_OWORD *)(v21 + 1320);
        *(_DWORD *)(v23 + 1336) = *(_DWORD *)(v21 + 1336);
        *(_OWORD *)(v23 + 1320) = v29;
        long long v30 = *(_OWORD *)(v21 + 1344);
        *(void *)(v23 + 1360) = *(void *)(v21 + 1360);
        *(_OWORD *)(v23 + 1344) = v30;
        *(_OWORD *)(v21 + 1352) = 0u;
        *(void *)(v21 + 1344) = 0;
        uint64_t v31 = *(void *)(v21 + 1368);
        *(_DWORD *)(v23 + 1376) = *(_DWORD *)(v21 + 1376);
        *(void *)(v23 + 1368) = v31;
        long long v32 = *(_OWORD *)(v21 + 1384);
        *(void *)(v23 + 1400) = *(void *)(v21 + 1400);
        *(_OWORD *)(v23 + 1384) = v32;
        *(void *)(v21 + 1400) = 0;
        *(_OWORD *)(v21 + 1384) = 0u;
        uint64_t v33 = v23 + 1408;
        uint64_t v20 = v23 + 1440;
        v21 += 1440;
      }
      while ((char *)v33 != v19);
      unint64_t v6 = *(void **)a1;
      uint64_t v34 = *(void *)(a1 + 8);
      uint64_t v35 = *(void *)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v19;
      for (*(void *)(a1 + 24) = v18; v35 != v34; uint64_t v35 = sub_4BD604(v35 - 1440))
        ;
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_22;
  }
  uint64_t v7 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v5 - *(void *)a1) >> 5);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v11 = v5 - 1440 * v9;
  }
  else
  {
    do
    {
      sub_4C5BDC(v5 + 1440 * v10, v5);
      v5 += 1440;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v11 = v5 + 1440 * v10;
  }
  *(void *)(a1 + 8) = v4 + 1440 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_22:
  uint64_t result = sub_4C8540(v4, a2);
  *(void *)(a1 + 16) += 1440;
  return result;
}

uint64_t sub_4F50F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0xDEF7BDEF7BDEF7BELL * ((v4 - (uint64_t)v6) >> 4);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x84210842108422) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 496 * v12;
    uint64_t v15 = (char *)operator new(496 * v12);
    long long v16 = v15;
    long long v17 = &v15[496 * v13];
    uint64_t v18 = &v15[v14];
    if (v4 == v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = (uint64_t)(v4 - v5) / 496;
      uint64_t v20 = &v17[496 * v19];
      uint64_t v21 = 496 * v19;
      uint64_t v22 = (uint64_t)v17;
      do
      {
        uint64_t v22 = sub_4F4498(v22, v5) + 496;
        v5 += 496;
        v21 -= 496;
      }
      while (v21);
      unint64_t v6 = *(void **)a1;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v20;
      for (*(void *)(a1 + 24) = v18; v24 != v23; uint64_t v24 = sub_4F2FF8(v24 - 496))
        ;
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v11 = v5 - 496 * v9;
  }
  else
  {
    do
    {
      sub_4D5C2C(v5 + 496 * v10, v5);
      v5 += 496;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v11 = v5 + 496 * v10;
  }
  *(void *)(a1 + 8) = v4 + 496 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_22:
  uint64_t result = sub_4F4498(v4, a2);
  *(void *)(a1 + 16) += 496;
  return result;
}

uint64_t sub_4F52DC(void *a1, long long *a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v6 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(800 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  std::string __p = v7;
  uint64_t v18 = &v7[800 * v3];
  uint64_t v20 = &v7[800 * v6];
  sub_4F54B0((uint64_t)v18, a2);
  uint64_t v19 = v18 + 800;
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t)v18;
  while (1)
  {
    uint64_t v10 = v19;
    if (v19 == (char *)v9) {
      break;
    }
    uint64_t v11 = (void **)(v19 - 800);
    v19 -= 800;
    uint64_t v12 = *((void *)v10 - 3);
    if (v12)
    {
      uint64_t v13 = *((void *)v10 - 2);
      uint64_t v14 = (void *)*((void *)v10 - 3);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 24;
        }
        while (v13 != v12);
        uint64_t v14 = (void *)*((void *)v10 - 3);
      }
      *((void *)v10 - 2) = v12;
      operator delete(v14);
    }
    int v15 = *((_DWORD *)v10 - 8);
    if (v15 == 1)
    {
      sub_4F4A98((uint64_t)(v10 - 800));
    }
    else if (!v15 && *(v10 - 777) < 0)
    {
      operator delete(*v11);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4F549C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4F54B0(uint64_t __dst, long long *a2)
{
  uint64_t v2 = __dst;
  *(_DWORD *)(__dst + 768) = -1;
  *(void *)(__dst + 776) = 0;
  *(void *)(__dst + 792) = 0;
  *(void *)(__dst + 784) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200((unsigned char *)__dst, *(void **)a2, *((void *)a2 + 1));
    *(_DWORD *)(v2 + 768) = 0;
    return v2;
  }
  else
  {
    long long v3 = *a2;
    *(void *)(__dst + 16) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
    *(_DWORD *)(__dst + 768) = 0;
  }
  return __dst;
}

void sub_4F552C(_Unwind_Exception *a1)
{
  long long v3 = v2;
  if (*v3) {
    sub_20A8FB4(v1, *v3);
  }
  sub_20A8F90(v1 + 768, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4F555C(uint64_t result, void *a2)
{
  long long v3 = (uint64_t *)result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v6 = a2[1];
  if (v4 != *(void *)result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = v6 + v7 - 800;
      uint64_t v10 = (void **)(v4 + v7 - 800);
      *(_DWORD *)(v6 + v7 - 32) = *(_DWORD *)(v4 + v7 - 32);
      int v11 = *(_DWORD *)(v4 + v7 - 32);
      switch(v11)
      {
        case 2:
          *(void *)uint64_t result = *v10;
          break;
        case 1:
          uint64_t result = sub_4F56D0(result, (uint64_t)v10);
          break;
        case 0:
          if (*(char *)(v4 + v7 - 777) < 0)
          {
            uint64_t result = (uint64_t)sub_4200((unsigned char *)result, *v10, *(void *)(v4 + v7 - 792));
          }
          else
          {
            long long v12 = *(_OWORD *)v10;
            *(void *)(v6 + v7 - 784) = *(void *)(v4 + v7 - 784);
            *(_OWORD *)uint64_t result = v12;
          }
          break;
      }
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v4 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(v4 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 800;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v13 = *v3;
  *long long v3 = v6;
  a2[1] = v13;
  uint64_t v14 = v3[1];
  v3[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = v3[2];
  v3[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_4F5698(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_4F56D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_4F57A0(a1 + 320, a2 + 320);
  sub_4F58AC(a1 + 432, a2 + 432);
  sub_4F58AC(a1 + 592, a2 + 592);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  return a1;
}

void sub_4F5750(_Unwind_Exception *a1)
{
  sub_4D4B58(v4);
  sub_4D9814(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4F578C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4F57A0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_4F3A90((void *)*(unsigned int *)(a2 + 32), (uint64_t *)a2, (void *)a1);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v5 = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_4200(v5, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

void sub_4F5858(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  int v4 = *(_DWORD *)(v1 + 32);
  if (v4 == 1)
  {
    uint64_t v5 = *(void **)(v1 + 8);
    if (!v5) {
      goto LABEL_10;
    }
    *(void *)(v1 + 16) = v5;
  }
  else
  {
    if (v4 || (*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
    uint64_t v5 = *(void **)(v1 + 8);
  }
  operator delete(v5);
  goto LABEL_10;
}

uint64_t sub_4F58AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v4 = *(long long **)(a2 + 24);
  uint64_t v5 = *(long long **)(a2 + 32);
  int64_t v6 = (char *)v5 - (char *)v4;
  if (v5 != v4)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * (v6 >> 4);
    if (v7 >= 0x1C71C71C71C71C8) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *(void *)(a1 + 40) = &v8[36 * v7];
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v14 = v8;
    do
    {
      sub_4F5C8C(v8, v4);
      v4 += 9;
      uint64_t v8 = v14 + 36;
      v14 += 36;
    }
    while (v4 != v5);
    *(void *)(a1 + 32) = v8;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_8A6F8((char *)(a1 + 48), *(void *)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_4F6924((char *)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5);
  if (*(void *)(a2 + 96)) {
    operator new();
  }
  *(void *)(a1 + 96) = 0;
  int v9 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v9;
  if (*(char *)(a2 + 135) < 0)
  {
    sub_4200((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v10;
  }
  int v11 = (unsigned char *)(a1 + 136);
  if (*(char *)(a2 + 159) < 0)
  {
    sub_4200(v11, *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)int v11 = v12;
  }
  return a1;
}

void sub_4F5AC4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v5);
  }
  sub_4F2CFC((uint64_t *)(v1 + 96));
  sub_3D4D90(v4);
  sub_1A668(v3);
  sub_4F2D44(v2);
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_4F5B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_4F5B8C(&a9);
  sub_1A668(v9);
  _Unwind_Resume(a1);
}

void sub_4F5B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_4F5C24((uint64_t)&a11);
  *(void *)(v11 + 32) = v12;
  sub_4F5B8C(&a9);
  sub_1A668((void **)v11);
  _Unwind_Resume(a1);
}

void ***sub_4F5B8C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      for (uint64_t i = (uint64_t)v2[1]; (void *)i != v3; sub_4F2DAC((uint64_t)(v2 + 2), i))
        i -= 144;
      v2[1] = v3;
      operator delete(**v1);
      return v1;
    }
  }
  return result;
}

uint64_t sub_4F5C24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 144;
        sub_4F2DAC(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

_DWORD *sub_4F5C8C(_DWORD *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    uint64_t v6 = *((void *)a2 + 3);
    __dst[8] = *((_DWORD *)a2 + 8);
    *((void *)__dst + 3) = v6;
    if (*((void *)a2 + 5)) {
LABEL_3:
    }
      operator new();
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    uint64_t v5 = *((void *)a2 + 3);
    __dst[8] = *((_DWORD *)a2 + 8);
    *((void *)__dst + 3) = v5;
    if (*((void *)a2 + 5)) {
      goto LABEL_3;
    }
  }
  *((void *)__dst + 5) = 0;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  *((void *)__dst + 6) = 0;
  if (*((void *)a2 + 7)) {
    operator new();
  }
  *((void *)__dst + 8) = 0;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 9) = 0;
  *((void *)__dst + 10) = 0;
  sub_4F6104((unsigned char *)__dst + 64, *((void *)a2 + 8), *((void *)a2 + 9), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  if (*((void *)a2 + 11)) {
    operator new();
  }
  *((void *)__dst + 11) = 0;
  int v7 = *((_DWORD *)a2 + 24);
  *((unsigned char *)__dst + 100) = *((unsigned char *)a2 + 100);
  __dst[24] = v7;
  sub_4F6578((void *)__dst + 13, (void *)a2 + 13);
  sub_4F6680((void *)__dst + 14, (void *)a2 + 14);
  if (*((void *)a2 + 15)) {
    operator new();
  }
  *((void *)__dst + 15) = 0;
  if (*((void *)a2 + 16)) {
    operator new();
  }
  *((void *)__dst + 16) = 0;
  __dst[34] = *((_DWORD *)a2 + 34);
  return __dst;
}

void sub_4F5FA0()
{
}

void sub_4F60EC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 56) = 0;
  if (!v1) {
    JUMPOUT(0x4F60C4);
  }
  JUMPOUT(0x4F60C0);
}

unsigned char *sub_4F6104(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t result = operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        *(_DWORD *)&v8[v9] = *(_DWORD *)(a2 + v9);
        uint64_t result = &v8[v9 + 8];
        uint64_t v11 = (void **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          uint64_t result = sub_4200(result, *v11, *(void *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v11;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        v8[v9 + 32] = *(unsigned char *)(v10 + 32);
        v9 += 40;
      }
      while (v10 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4F6204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4F6218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_4F6254(&a9);
  _Unwind_Resume(a1);
}

void ***sub_4F6254(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      long long v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 5;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_4F62EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_4F6448((char *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v9;
  }
  uint64_t v10 = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_4200(v10, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)uint64_t v10 = v11;
  }
  return a1;
}

void sub_4F6400(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  sub_3D4D90(v2);
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

char *sub_4F6448(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v8[v9 + 24] = *(unsigned char *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4F6528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4F653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

void *sub_4F6578(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  *uint64_t result = 0;
  return result;
}

void sub_4F6644()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
  operator delete();
}

void *sub_4F6680(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  *uint64_t result = 0;
  return result;
}

void sub_4F6754()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

void *sub_4F6788(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    uint64_t result = operator new(168 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[21 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = (void *)sub_4F58AC(&v8[v9 / 8], a2 + v9);
        *((_DWORD *)result + 40) = *(_DWORD *)(a2 + v9 + 160);
        v9 += 168;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4F6858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4F686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 168)
    sub_4D4B58(v10 - 168 + v11);
  *(void *)(v9 + 8) = v10;
  sub_4F689C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_4F689C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4D4B58(v4 - 168);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_4F6924(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v8[v9 + 24] = *(unsigned char *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4F6A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4F6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

void sub_4F6A54(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 800;
    uint64_t v5 = *(void *)(i - 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 16);
      int v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 24;
        }
        while (v6 != v5);
        int v7 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
    }
    int v8 = *(_DWORD *)(i - 32);
    if (v8 == 1)
    {
      sub_4F4A98(i - 800);
    }
    else if (!v8 && *(char *)(i - 777) < 0)
    {
      operator delete(*(void **)(i - 800));
    }
  }
}

uint64_t sub_4F6B24(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v6 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    int v7 = (char *)operator new(800 * v6);
  }
  else
  {
    int v7 = 0;
  }
  std::string __p = v7;
  uint64_t v18 = &v7[800 * v3];
  uint64_t v20 = &v7[800 * v6];
  sub_4F6CF8((uint64_t)v18, a2);
  uint64_t v19 = v18 + 800;
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t)v18;
  while (1)
  {
    uint64_t v10 = v19;
    if (v19 == (char *)v9) {
      break;
    }
    uint64_t v11 = (void **)(v19 - 800);
    v19 -= 800;
    uint64_t v12 = *((void *)v10 - 3);
    if (v12)
    {
      uint64_t v13 = *((void *)v10 - 2);
      uint64_t v14 = (void *)*((void *)v10 - 3);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 24;
        }
        while (v13 != v12);
        uint64_t v14 = (void *)*((void *)v10 - 3);
      }
      *((void *)v10 - 2) = v12;
      operator delete(v14);
    }
    int v15 = *((_DWORD *)v10 - 8);
    if (v15 == 1)
    {
      sub_4F4A98((uint64_t)(v10 - 800));
    }
    else if (!v15 && *(v10 - 777) < 0)
    {
      operator delete(*v11);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4F6CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4F6CF8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 768) = -1;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  sub_4F56D0(a1, a2);
  *(_DWORD *)(a1 + 768) = 1;
  return a1;
}

void sub_4F6D40(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;
  if (*v3) {
    sub_20A8FB4(v1, *v3);
  }
  sub_20A8F90(v1 + 768, v1);
  _Unwind_Resume(a1);
}

char *sub_4F6D70(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_188D718();
    }
    int v7 = (char *)operator new(112 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[112 * v3];
  uint64_t v9 = (void *)*(unsigned int *)(a2 + 32);
  *((_DWORD *)v8 + 8) = v9;
  sub_4F38B0(v9, (uint64_t *)a2, v8);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  uint64_t v10 = &v7[112 * v6];
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  v8[72] = *(unsigned char *)(a2 + 72);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v8 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  v8[104] = *(unsigned char *)(a2 + 104);
  uint64_t v11 = v8 + 112;
  uint64_t v13 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v8 + 112;
    }
    goto LABEL_30;
  }
  uint64_t v14 = 0;
  do
  {
    int v15 = &v8[v14 * 8];
    long long v16 = &v12[v14];
    *(_DWORD *)&v8[v14 * 8 - 80] = v12[v14 - 10];
    sub_4F38B0((void *)LODWORD(v12[v14 - 10]), (uint64_t *)&v12[v14 - 14], &v8[v14 * 8 - 112]);
    *((void *)v15 - 9) = v12[v14 - 9];
    long long v17 = *(_OWORD *)&v12[v14 - 8];
    *((void *)v15 - 6) = v12[v14 - 6];
    *((_OWORD *)v15 - 4) = v17;
    *(v16 - 7) = 0;
    *(v16 - 6) = 0;
    *(v16 - 8) = 0;
    *(v15 - 40) = (char)v12[v14 - 5];
    long long v18 = *(_OWORD *)&v12[v14 - 4];
    *((void *)v15 - 2) = v12[v14 - 2];
    *((_OWORD *)v15 - 2) = v18;
    *(v16 - 3) = 0;
    *(v16 - 2) = 0;
    *(v16 - 4) = 0;
    *(v15 - 8) = (char)v12[v14 - 1];
    v14 -= 14;
  }
  while (&v12[v14] != v13);
  uint64_t v19 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  *a1 = &v8[v14 * 8];
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v19)
  {
    while (1)
    {
      if (*((char *)v12 - 9) < 0)
      {
        operator delete(*(v12 - 4));
        if ((*((char *)v12 - 41) & 0x80000000) == 0)
        {
LABEL_20:
          int v20 = *((_DWORD *)v12 - 20);
          if (v20 != 1) {
            goto LABEL_21;
          }
          goto LABEL_26;
        }
      }
      else if ((*((char *)v12 - 41) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v12 - 8));
      int v20 = *((_DWORD *)v12 - 20);
      if (v20 != 1)
      {
LABEL_21:
        if (v20 || (*((char *)v12 - 81) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        uint64_t v21 = *(v12 - 13);
        goto LABEL_16;
      }
LABEL_26:
      uint64_t v21 = *(v12 - 13);
      if (!v21) {
        goto LABEL_17;
      }
      *(v12 - 12) = v21;
LABEL_16:
      operator delete(v21);
LABEL_17:
      v12 -= 14;
      if (v12 == v19)
      {
        uint64_t v12 = v19;
        break;
      }
    }
  }
  if (v12) {
LABEL_30:
  }
    operator delete(v12);
  return v8 + 112;
}

uint64_t sub_4F700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      uint64_t v8 = a2;
      do
      {
        uint64_t v11 = v8 + v7;
        sub_4F377C(v8, v8 + v7);
        *(void *)(v8 + 40) = *(void *)(v8 + v7 + 40);
        uint64_t v12 = (void **)(v8 + 48);
        if (*(char *)(v8 + 71) < 0) {
          operator delete(*v12);
        }
        long long v13 = *(_OWORD *)(v11 + 48);
        *(void *)(v8 + 64) = *(void *)(v11 + 64);
        *(_OWORD *)uint64_t v12 = v13;
        *(unsigned char *)(v11 + 71) = 0;
        *(unsigned char *)(v11 + 48) = 0;
        *(unsigned char *)(v8 + 72) = *(unsigned char *)(v11 + 72);
        uint64_t v14 = (void **)(v8 + 80);
        if (*(char *)(v8 + 103) < 0) {
          operator delete(*v14);
        }
        uint64_t v9 = v8 + v7;
        long long v10 = *(_OWORD *)(v8 + v7 + 80);
        *(void *)(v8 + 96) = *(void *)(v8 + v7 + 96);
        *(_OWORD *)uint64_t v14 = v10;
        *(unsigned char *)(v9 + 103) = 0;
        *(unsigned char *)(v9 + 80) = 0;
        *(unsigned char *)(v8 + 104) = *(unsigned char *)(v8 + v7 + 104);
        v8 += 112;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (1)
    {
      if (v5 == v8)
      {
        *(void *)(a1 + 8) = v8;
        return a2;
      }
      if (*(char *)(v5 - 9) < 0)
      {
        operator delete(*(void **)(v5 - 32));
        if ((*(char *)(v5 - 41) & 0x80000000) == 0)
        {
LABEL_16:
          int v15 = *(_DWORD *)(v5 - 80);
          if (v15 != 1) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((*(char *)(v5 - 41) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(*(void **)(v5 - 64));
      int v15 = *(_DWORD *)(v5 - 80);
      if (v15 != 1)
      {
LABEL_17:
        if (!v15 && *(char *)(v5 - 81) < 0)
        {
          long long v16 = *(void **)(v5 - 104);
LABEL_11:
          operator delete(v16);
          goto LABEL_12;
        }
        goto LABEL_12;
      }
LABEL_22:
      long long v16 = *(void **)(v5 - 104);
      if (v16)
      {
        *(void *)(v5 - 96) = v16;
        goto LABEL_11;
      }
LABEL_12:
      v5 -= 112;
    }
  }
  return a2;
}

uint64_t sub_4F71B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v4 = a1 + 112;
      if (a1 + 112 == a2) {
        return a2;
      }
      int v5 = sub_4F3B98(a1, a1 + 112);
      a1 = v4;
    }
    while (!v5);
    uint64_t v6 = v4 + 112;
    uint64_t v7 = v4 - 112;
    while (v6 != a2)
    {
      if ((sub_4F3B98(v7, v6) & 1) == 0)
      {
        sub_4F377C(v7 + 112, v6);
        *(void *)(v7 + 152) = *(void *)(v6 + 40);
        uint64_t v9 = (void **)(v7 + 160);
        if (*(char *)(v7 + 183) < 0) {
          operator delete(*v9);
        }
        long long v10 = *(_OWORD *)(v6 + 48);
        *(void *)(v7 + 176) = *(void *)(v6 + 64);
        *(_OWORD *)uint64_t v9 = v10;
        *(unsigned char *)(v6 + 71) = 0;
        *(unsigned char *)(v6 + 48) = 0;
        *(unsigned char *)(v7 + 184) = *(unsigned char *)(v6 + 72);
        uint64_t v11 = (void **)(v7 + 192);
        if (*(char *)(v7 + 215) < 0) {
          operator delete(*v11);
        }
        long long v8 = *(_OWORD *)(v6 + 80);
        *(void *)(v7 + 208) = *(void *)(v6 + 96);
        *(_OWORD *)uint64_t v11 = v8;
        *(unsigned char *)(v6 + 103) = 0;
        *(unsigned char *)(v6 + 80) = 0;
        *(unsigned char *)(v7 + 216) = *(unsigned char *)(v6 + 104);
        v7 += 112;
      }
      v6 += 112;
    }
    return v7 + 112;
  }
  return v3;
}

uint64_t sub_4F72D0(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v6 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(800 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = v7;
  long long v18 = &v7[800 * v3];
  int v20 = &v7[800 * v6];
  sub_4F74A4(v18, a2);
  uint64_t v19 = v18 + 800;
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v9 = v18;
  while (1)
  {
    long long v10 = v19;
    if (v19 == v9) {
      break;
    }
    uint64_t v11 = (void **)(v19 - 800);
    v19 -= 800;
    uint64_t v12 = *((void *)v10 - 3);
    if (v12)
    {
      uint64_t v13 = *((void *)v10 - 2);
      uint64_t v14 = (void *)*((void *)v10 - 3);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 24;
        }
        while (v13 != v12);
        uint64_t v14 = (void *)*((void *)v10 - 3);
      }
      *((void *)v10 - 2) = v12;
      operator delete(v14);
    }
    int v15 = *((_DWORD *)v10 - 8);
    if (v15 == 1)
    {
      sub_4F4A98((uint64_t)(v10 - 800));
    }
    else if (!v15 && *(v10 - 777) < 0)
    {
      operator delete(*v11);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4F7490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_4F74A4(char *__dst, uint64_t a2)
{
  *((_DWORD *)__dst + 192) = *(_DWORD *)(a2 + 768);
  int v4 = *(_DWORD *)(a2 + 768);
  switch(v4)
  {
    case 2:
      *(void *)long long __dst = *(void *)a2;
      break;
    case 1:
      sub_4F56D0((uint64_t)__dst, a2);
      break;
    case 0:
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(__dst, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v5 = *(_OWORD *)a2;
        *((void *)__dst + 2) = *(void *)(a2 + 16);
        *(_OWORD *)long long __dst = v5;
      }
      break;
  }
  *((void *)__dst + 99) = 0;
  *(_OWORD *)(__dst + 776) = 0u;
  sub_8A6F8(__dst + 776, *(void *)(a2 + 776), *(void *)(a2 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 784) - *(void *)(a2 + 776)) >> 3));
  return __dst;
}

void sub_4F7560(_Unwind_Exception *exception_object)
{
  int v3 = *(_DWORD *)(v1 + 768);
  if (!v3)
  {
    sub_20A6E54((void **)v1);
    _Unwind_Resume(exception_object);
  }
  if (v3 == 1) {
    sub_4F4A98(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4F7594(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  uint64_t v9 = __str;
  uint64_t v11 = a1[2];
  uint64_t v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    uint64_t v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      int v20 = &__str[a5];
      long long v25 = (char *)a1[1];
      goto LABEL_42;
    }
    int v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v23 = (char *)v12 + v21 * 24;
        uint64_t v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          *((void *)v23 + 2) = *((void *)&v24->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v23 = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      long long v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1) {
        return (char *)v7;
      }
LABEL_42:
      uint64_t v39 = v7 + 24 * a5;
      uint64_t v40 = (long long *)&v25[-24 * a5];
      int64_t v41 = v25;
      if (v40 < v12)
      {
        int64_t v41 = v25;
        do
        {
          long long v42 = *v40;
          *((void *)v41 + 2) = *((void *)v40 + 2);
          *(_OWORD *)int64_t v41 = v42;
          v41 += 24;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *(void *)uint64_t v40 = 0;
          uint64_t v40 = (long long *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        int v43 = v25 - 24;
        uint64_t v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0) {
            operator delete(*(void **)v43);
          }
          int64_t v45 = (long long *)(v7 + v44 - 24);
          long long v46 = *v45;
          *((void *)v43 + 2) = *(void *)(v7 + v44 - 8);
          *(_OWORD *)int v43 = v46;
          v43 -= 24;
          *(unsigned char *)(v7 + v44 - 1) = 0;
          *(unsigned char *)int64_t v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        uint64_t v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (char *)v7;
    }
    long long v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1) {
      goto LABEL_42;
    }
    return (char *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v17 = (char *)operator new(24 * v16);
  }
  else
  {
    long long v17 = 0;
  }
  long long v26 = &v17[24 * v6];
  int64_t v49 = v26;
  int64_t v50 = &v17[24 * v16];
  uint64_t v27 = 24 * a5;
  long long v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)long long v26 = v29;
    }
    v26 += 24;
    ++v9;
    v27 -= 24;
  }
  while (v27);
  long long v30 = v49;
  uint64_t v31 = *a1;
  long long v32 = v49;
  if (*a1 != (void *)v7)
  {
    uint64_t v33 = v49;
    uint64_t v34 = v7;
    do
    {
      long long v32 = v33 - 24;
      long long v35 = *(_OWORD *)(v34 - 24);
      *((void *)v33 - 1) = *(void *)(v34 - 8);
      *(_OWORD *)(v33 - 24) = v35;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      *(void *)(v34 - 24) = 0;
      v33 -= 24;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  float v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      long long v37 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)long long v28 = v37;
      v28 += 24;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v38) {
    operator delete(v38);
  }
  return v30;
}

void sub_4F7984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4F799C(void *a1)
{
  unint64_t v2 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v4 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v4 = v3;
  }
  int v20 = a1 + 2;
  if (v4)
  {
    if (v4 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    long long v5 = (char *)operator new(800 * v4);
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v6 = &v5[800 * v2];
  std::string __p = v5;
  long long v17 = v6;
  *((_DWORD *)v6 + 192) = -1;
  *((void *)v6 + 97) = 0;
  *((void *)v6 + 99) = 0;
  *((void *)v6 + 98) = 0;
  uint64_t v18 = v6 + 800;
  uint64_t v19 = &v5[800 * v4];
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v7 = a1[1];
  uint64_t v8 = v17;
  while (1)
  {
    uint64_t v9 = v18;
    if (v18 == v8) {
      break;
    }
    long long v10 = (void **)(v18 - 800);
    v18 -= 800;
    uint64_t v11 = *((void *)v9 - 3);
    if (v11)
    {
      uint64_t v12 = *((void *)v9 - 2);
      unint64_t v13 = (void *)*((void *)v9 - 3);
      if (v12 != v11)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 24;
        }
        while (v12 != v11);
        unint64_t v13 = (void *)*((void *)v9 - 3);
      }
      *((void *)v9 - 2) = v11;
      operator delete(v13);
    }
    int v14 = *((_DWORD *)v9 - 8);
    if (v14 == 1)
    {
      sub_4F4A98((uint64_t)(v9 - 800));
    }
    else if (!v14 && *(v9 - 777) < 0)
    {
      operator delete(*v10);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v7;
}

void sub_4F7B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4F7B6C(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v6 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(800 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = v7;
  uint64_t v18 = &v7[800 * v3];
  int v20 = &v7[800 * v6];
  sub_4F6CF8((uint64_t)v18, a2);
  uint64_t v19 = v18 + 800;
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t)v18;
  while (1)
  {
    long long v10 = v19;
    if (v19 == (char *)v9) {
      break;
    }
    uint64_t v11 = (void **)(v19 - 800);
    v19 -= 800;
    uint64_t v12 = *((void *)v10 - 3);
    if (v12)
    {
      uint64_t v13 = *((void *)v10 - 2);
      int v14 = (void *)*((void *)v10 - 3);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 24;
        }
        while (v13 != v12);
        int v14 = (void *)*((void *)v10 - 3);
      }
      *((void *)v10 - 2) = v12;
      operator delete(v14);
    }
    int v15 = *((_DWORD *)v10 - 8);
    if (v15 == 1)
    {
      sub_4F4A98((uint64_t)(v10 - 800));
    }
    else if (!v15 && *(v10 - 777) < 0)
    {
      operator delete(*v11);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4F7D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4F7D40(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_4F7E48(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1440;
  }
}

void sub_4F7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_4F7E48(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  sub_50081C(*a1 + 1536, a2, (uint64_t)&v14);
  sub_635CD0((long long **)&v14, (uint64_t)__p);
  uint64_t v5 = sub_5231C((uint64_t)&v14);
  sub_60E8D8(v4 + 3088, (uint64_t)__p, v5, 0, a3);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v17;
  if (v17)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = v16;
  unint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    long long v10 = v15;
    char v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v14;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_4F7F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4F7F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

char *sub_4F7F70(uint64_t *a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 8);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x55555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 8) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 8);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 8) >= 0x2AAAAAAAAAAAAALL) {
    unint64_t v4 = 0x55555555555555;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x55555555555555) {
      sub_188D718();
    }
    uint64_t v5 = (char *)operator new(768 * v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v12 = &v5[768 * v2];
  char v13 = &v5[768 * v4];
  bzero(v12, 0x300uLL);
  sub_4DC580((uint64_t)v12);
  uint64_t v6 = (uint64_t)v12;
  uint64_t v7 = v12 + 768;
  uint64_t v9 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  if (v8 == (char *)*a1)
  {
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v8 -= 768;
      uint64_t v6 = sub_4F3F14(v6 - 768, (uint64_t)v8);
    }
    while (v8 != v9);
    long long v10 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    *a1 = v6;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        v8 -= 768;
        sub_4F4A98((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 768;
}

void sub_4F80DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F80F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4F80F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 768;
    sub_4F4A98(i - 768);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4F8144(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_4F824C(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1440;
  }
}

void sub_4F8210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_4F824C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  sub_50081C(*a1 + 1536, a2, (uint64_t)&v14);
  sub_635CD0((long long **)&v14, (uint64_t)__p);
  uint64_t v5 = sub_5231C((uint64_t)&v14);
  sub_60E8D8(v4 + 3088, (uint64_t)__p, v5, 0, a3);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v17;
  if (v17)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = v16;
  unint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    long long v10 = v15;
    char v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v14;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_4F833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4F8350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4F8374(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_4F847C(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1440;
  }
}

void sub_4F8440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_4F847C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  sub_50081C(*a1 + 1536, a2, (uint64_t)&v14);
  sub_635CD0((long long **)&v14, (uint64_t)__p);
  uint64_t v5 = sub_5231C((uint64_t)&v14);
  sub_60E8D8(v4 + 3088, (uint64_t)__p, v5, 0, a3);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v17;
  if (v17)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = v16;
  unint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    long long v10 = v15;
    char v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      char v11 = v14;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_4F856C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4F8580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_4F85A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_4F85B0(uint64_t a1, uint64_t a2)
{
  return sub_4F4A98(a2);
}

void sub_4F85B8(uint64_t a1, void **a2)
{
}

double sub_4F85C0()
{
  strcpy(&byte_255CDD7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_255CDC0, "\x1B\\toi=lhp\\"");
  byte_255CDEF = 11;
  qword_255CDF0 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_255CDF8 = xmmword_20B9250;
  strcpy((char *)qword_255CDF0, "\x1B\\toi=x-sampa-internal\\"");
  byte_255CE1F = 13;
  strcpy((char *)&qword_255CE08, "\x1B\\tn=address\\"");
  strcpy(&byte_255CE37, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_255CE20, "\x1B\\tn=nav\\"");
  byte_255CE4F = 12;
  byte_255CE67 = 7;
  strcpy((char *)&dword_255CE50, "\x1B\\lang=");
  byte_255CE7F = 1;
  word_255CE68 = 92;
  byte_255CE97 = 4;
  strcpy((char *)&qword_255CE80, "DEV:");
  byte_255CEAF = 8;
  strcpy((char *)&qword_255CE98, "Continue");
  byte_255CEC7 = 11;
  strcpy((char *)&qword_255CEB0, "Start_Route");
  byte_255CEDF = 14;
  strcpy((char *)&qword_255CEC8, "Continue_Route");
  byte_255CEF7 = 12;
  strcpy((char *)&qword_255CEE0, "Resume_Route");
  byte_255CF0F = 18;
  strcpy((char *)&xmmword_255CEF8, "Start_Route_U_Turn");
  byte_255CF27 = 7;
  strcpy((char *)&dword_255CF10, "_U_Turn");
  qword_255CF38 = 0x1300000000000000;
  qmemcpy(&unk_255CF40, "Continue_Route", 14);
  dword_255CF30 = 1702131055;
  qword_255CF28 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_255CF34 + 3) = 1852994900;
  dword_255CF34 = 1415533919;
  qword_255CF50 = 0x1500000000000000;
  strcpy(byte_255CF58, "Left_Turn");
  unk_255CF4E = 1415533919;
  *(_DWORD *)((char *)&qword_255CF50 + 1) = 1852994900;
  strcpy(&byte_255CF6F, "\tRight_Turn");
  strcpy(&byte_255CF87, "\nLeft_Turn_At_End");
  byte_255CF9F = 16;
  byte_255CFB7 = 17;
  strcpy((char *)&xmmword_255CFA0, "Right_Turn_At_End");
  byte_255CFCF = 15;
  strcpy((char *)&qword_255CFB8, "Sharp_Left_Turn");
  byte_255CFE7 = 16;
  strcpy((char *)&xmmword_255CFD0, "Sharp_Right_Turn");
  byte_255CFFF = 16;
  strcpy((char *)&xmmword_255CFE8, "Slight_Left_Turn");
  byte_255D017 = 17;
  strcpy((char *)&xmmword_255D000, "Slight_Right_Turn");
  strcpy(&byte_255D02F, "\tKeep_Right");
  strcpy((char *)&qword_255D018, "Keep_Left");
  strcpy(&byte_255D047, "\nU_Turn");
  byte_255D05F = 6;
  byte_255D077 = 14;
  strcpy((char *)&qword_255D060, "Walking_U_Turn");
  byte_255D08F = 20;
  strcpy((char *)&xmmword_255D078, "U_Turn_When_Possible");
  byte_255D0A7 = 20;
  strcpy((char *)&xmmword_255D090, "U_Turn_At_Roundabout");
  byte_255D0BF = 11;
  strcpy((char *)&qword_255D0A8, "Enter_Ferry");
  strcpy(&byte_255D0D7, "\nChange_Ferry");
  strcpy((char *)&qword_255D0C0, "Exit_Ferry");
  strcpy((char *)&xmmword_255D0F0, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_255D108, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_255D120, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_255D138, "End_Of_Navigation");
  strcpy((char *)&xmmword_255D150, "End_Of_Navigation");
  strcpy((char *)&qword_255D168, "Destination");
  strcpy((char *)&xmmword_255D180, "Destination_On_left");
  strcpy((char *)&xmmword_255D198, "Destination_On_Right");
  strcpy((char *)&xmmword_255D1E0, "First_Stop_On_Right");
  strcpy((char *)&xmmword_255D228, "Next_Stop_On_Right");
  byte_255D0EF = 12;
  byte_255D107 = 21;
  byte_255D11F = 20;
  strcpy((char *)&xmmword_255D258, "Waypoint_Stop_On_Left");
  byte_255D137 = 22;
  byte_255D14F = 17;
  byte_255D167 = 17;
  byte_255D17F = 11;
  byte_255D197 = 19;
  byte_255D1AF = 20;
  strcpy(&byte_255D1C7, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_255D1B0, "First_Stop");
  byte_255D1DF = 18;
  byte_255D1F7 = 19;
  strcpy(&byte_255D20F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_255D240, "Waypoint_Stop");
  strcpy((char *)&xmmword_255D270, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_255D288, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_255D1F8, "Next_Stop");
  byte_255D227 = 17;
  byte_255D23F = 18;
  byte_255D257 = 13;
  byte_255D26F = 21;
  byte_255D287 = 22;
  byte_255D29F = 11;
  byte_255D2B7 = 16;
  strcpy((char *)&xmmword_255D2A0, "Enter_Roundabout");
  qword_255D2B8 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_255D2C0 = xmmword_20B91C0;
  strcpy((char *)qword_255D2B8, "Walking_Enter_Roundabout");
  byte_255D2E7 = 16;
  strcpy((char *)&xmmword_255D2D0, "Leave_Roundabout");
  byte_255D2FF = 21;
  strcpy((char *)&xmmword_255D2E8, "Roundabout_First_Exit");
  byte_255D317 = 22;
  strcpy((char *)&xmmword_255D300, "Roundabout_Second_Exit");
  byte_255D32F = 21;
  strcpy((char *)&xmmword_255D318, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_255D330, "Roundabout_Fourth_Exit");
  HIBYTE(word_255D346) = 22;
  byte_255D35F = 21;
  strcpy((char *)&xmmword_255D348, "Roundabout_Fifth_Exit");
  byte_255D377 = 21;
  strcpy((char *)&xmmword_255D360, "Roundabout_Sixth_Exit");
  qword_255D378 = (uint64_t)operator new(0x19uLL);
  xmmword_255D380 = xmmword_20B9250;
  strcpy((char *)qword_255D378, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_255D390, "Roundabout_Eighth_Exit");
  HIBYTE(word_255D3A6) = 22;
  byte_255D3BF = 21;
  strcpy((char *)&xmmword_255D3A8, "Roundabout_Ninth_Exit");
  byte_255D3D7 = 21;
  strcpy((char *)&xmmword_255D3C0, "Roundabout_Tenth_Exit");
  qword_255D3D8 = (uint64_t)operator new(0x20uLL);
  xmmword_255D3E0 = xmmword_20B91C0;
  strcpy((char *)qword_255D3D8, "Roundabout_Eleventh_Exit");
  qword_255D3F0 = (uint64_t)operator new(0x19uLL);
  unk_255D3F8 = xmmword_20B9250;
  strcpy((char *)qword_255D3F0, "Roundabout_Twelfth_Exit");
  qword_255D408 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_255D410 = xmmword_20B5EB0;
  strcpy((char *)qword_255D408, "Roundabout_Thirteenth_Exit");
  qword_255D420 = (uint64_t)operator new(0x20uLL);
  unk_255D428 = xmmword_20B5EB0;
  strcpy((char *)qword_255D420, "Roundabout_Fourteenth_Exit");
  qword_255D438 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_255D440 = xmmword_20B8870;
  strcpy((char *)qword_255D438, "Roundabout_Fifteenth_Exit");
  qword_255D450 = (uint64_t)operator new(0x20uLL);
  unk_255D458 = xmmword_20B8870;
  strcpy((char *)qword_255D450, "Roundabout_Sixteenth_Exit");
  qword_255D468 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_255D470 = xmmword_20B91A0;
  strcpy((char *)qword_255D468, "Roundabout_Seventeenth_Exit");
  qword_255D480 = (uint64_t)operator new(0x20uLL);
  unk_255D488 = xmmword_20B5EB0;
  strcpy((char *)qword_255D480, "Roundabout_Eighteenth_Exit");
  qword_255D498 = (uint64_t)operator new(0x20uLL);
  xmmword_255D4A0 = xmmword_20B5EB0;
  strcpy((char *)qword_255D498, "Roundabout_Nineteenth_Exit");
  byte_255D4C7 = 8;
  strcpy((char *)&qword_255D4B0, "Off_Ramp");
  byte_255D4DF = 16;
  strcpy((char *)&xmmword_255D4C8, "Off_Ramp_On_Left");
  byte_255D4F7 = 17;
  strcpy((char *)&xmmword_255D4E0, "Off_Ramp_On_Right");
  byte_255D50F = 14;
  strcpy((char *)&qword_255D4F8, "Change_Highway");
  strcpy((char *)&xmmword_255D510, "Change_Highway_On_Left");
  HIBYTE(word_255D526) = 22;
  qword_255D528 = (uint64_t)operator new(0x19uLL);
  xmmword_255D530 = xmmword_20B9250;
  strcpy((char *)qword_255D528, "Change_Highway_On_Right");
  byte_255D557 = 5;
  dword_255D540 = 1735550285;
  byte_255D544 = 101;
  byte_255D545 = 0;
  byte_255D56F = 12;
  strcpy((char *)&qword_255D558, "Enter_Detour");
  byte_255D587 = 11;
  strcpy((char *)&qword_255D570, "Exit_Detour");
  byte_255D59F = 18;
  strcpy((char *)&xmmword_255D588, "Walking_Turnaround");
  qword_255D5A0 = (uint64_t)operator new(0x19uLL);
  unk_255D5A8 = xmmword_20B9250;
  strcpy((char *)qword_255D5A0, "Walking_Turnaround_Sign");
  byte_255D5CF = 19;
  strcpy((char *)&xmmword_255D5B8, "Distance_Title_List");
  qword_255D5D0 = (uint64_t)operator new(0x19uLL);
  unk_255D5D8 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_255D5D0, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_255D5FF = 19;
  strcpy((char *)&xmmword_255D5E8, "Arrival_Charge_List");
  byte_255D617 = 15;
  strcpy((char *)&qword_255D600, "Charge_At_Start");
  strcpy(&byte_255D62F, "\tPass_Street");
  strcpy((char *)&qword_255D618, "Pass_Exit");
  byte_255D647 = 11;
  byte_255D65F = 17;
  strcpy((char *)&xmmword_255D648, "Pass_Intersection");
  strcpy(&byte_255D677, "\t_PrevExitNumber");
  strcpy((char *)&qword_255D660, "Next_Exit");
  byte_255D68F = 15;
  strcpy(&byte_255D6A7, "\t_PrevUTurn");
  strcpy((char *)&qword_255D690, "_PrevRoad");
  strcpy(&byte_255D6BF, "\nNext_");
  byte_255D6D7 = 5;
  byte_255D6EF = 15;
  strcpy((char *)&qword_255D6D8, "_At_Next_Street");
  byte_255D707 = 21;
  strcpy((char *)&xmmword_255D6F0, "_At_Next_Intersection");
  byte_255D71F = 14;
  strcpy((char *)&qword_255D708, "Charge_Station");
  byte_255D737 = 15;
  strcpy((char *)&qword_255D720, "_Charge_Station");
  BYTE1(qword_255D748) = 0;
  WORD1(qword_255D748) = 25856;
  HIDWORD(qword_255D748) = 335544320;
  strcpy((char *)&qword_255D738, "_Charge_Station_");
  byte_255D767 = 8;
  strcpy((char *)&qword_255D750, "_Minimum");
  byte_255D77F = 15;
  strcpy((char *)&qword_255D768, "ExitShield_Sign");
  byte_255D797 = 8;
  strcpy((char *)&qword_255D780, "Walking_");
  byte_255D7AF = 16;
  strcpy((char *)&xmmword_255D798, "Walking_Continue");
  byte_255D7C7 = 19;
  strcpy((char *)&xmmword_255D7B0, "Walking_Start_Route");
  qword_255D7C8 = (uint64_t)operator new(0x20uLL);
  xmmword_255D7D0 = xmmword_20B5EB0;
  strcpy((char *)qword_255D7C8, "Walking_Start_Route_U_Turn");
  byte_255D7F7 = 17;
  strcpy((char *)&xmmword_255D7E0, "Walking_Left_Turn");
  byte_255D80F = 18;
  strcpy((char *)&xmmword_255D7F8, "Walking_Right_Turn");
  qword_255D810 = (uint64_t)operator new(0x20uLL);
  unk_255D818 = xmmword_20B5EB0;
  strcpy((char *)qword_255D810, "Walking_Turn_At_Roundabout");
  qword_255D828 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_255D830 = xmmword_20B91B0;
  strcpy((char *)qword_255D828, "Walking_U_Turn_When_Possible");
  qword_255D840 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_255D848 = xmmword_20B9390;
  strcpy((char *)qword_255D840, "Walking_Roundabout_Exit_Continue");
  qword_255D858 = (uint64_t)operator new(0x20uLL);
  xmmword_255D860 = xmmword_20B91B0;
  strcpy((char *)qword_255D858, "Walking_Roundabout_Exit_Left");
  qword_255D870 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_255D878 = xmmword_20B8890;
  strcpy((char *)qword_255D870, "Walking_Roundabout_Exit_Right");
  qword_255D888 = (uint64_t)operator new(0x20uLL);
  xmmword_255D890 = xmmword_20B8870;
  strcpy((char *)qword_255D888, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_255D8A0 = (uint64_t)v0;
  unk_255D8A8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_255D8CF = 8;
  strcpy((char *)&qword_255D8B8, "Walking_");
  qword_255D8D0 = (uint64_t)operator new(0x19uLL);
  unk_255D8D8 = v282;
  strcpy((char *)qword_255D8D0, "Walking_Sharp_Left_Turn");
  qword_255D8E8 = (uint64_t)operator new(0x20uLL);
  xmmword_255D8F0 = v281;
  strcpy((char *)qword_255D8E8, "Walking_Sharp_Right_Turn");
  qword_255D900 = (uint64_t)operator new(0x20uLL);
  unk_255D908 = v281;
  strcpy((char *)qword_255D900, "Walking_Slight_Left_Turn");
  qword_255D918 = (uint64_t)operator new(0x20uLL);
  xmmword_255D920 = v280;
  strcpy((char *)qword_255D918, "Walking_Slight_Right_Turn");
  byte_255D947 = 4;
  strcpy((char *)&dword_255D930, "Exit");
  byte_255D95F = 4;
  strcpy((char *)&dword_255D948, "Road");
  byte_255D977 = 7;
  strcpy((char *)&dword_255D960, "Freeway");
  byte_255D98F = 12;
  strcpy((char *)&qword_255D978, "Intersection");
  byte_255D9A7 = 5;
  strcpy((char *)&dword_255D990, "Ferry");
  byte_255D9BF = 11;
  strcpy((char *)&qword_255D9A8, "ShuttleName");
  byte_255D9D7 = 5;
  strcpy((char *)&dword_255D9C0, "Road1");
  strcpy(&byte_255D9EF, "\tName");
  strcpy((char *)&qword_255D9D8, "Signpost1");
  byte_255DA07 = 4;
  byte_255DA1F = 7;
  strcpy((char *)&dword_255DA08, "Address");
  byte_255DA37 = 7;
  strcpy((char *)&dword_255DA20, "Shield1");
  byte_255DA4F = 13;
  strcpy((char *)&qword_255DA38, "TowardShield1");
  byte_255DA67 = 6;
  strcpy((char *)&dword_255DA50, "Right_");
  byte_255DA7F = 5;
  byte_255DA6C = 95;
  dword_255DA68 = 1952867660;
  byte_255DA6D = 0;
  strcpy(&byte_255DA97, "\tOn_Left_");
  strcpy((char *)&qword_255DA80, "On_Right_");
  byte_255DAAF = 8;
  byte_255DAC7 = 12;
  strcpy((char *)&qword_255DAB0, "ElevatorName");
  byte_255DADF = 13;
  strcpy((char *)&qword_255DAC8, "EscalatorName");
  strcpy(&byte_255DAF7, "\nBridgeName");
  strcpy((char *)&qword_255DAE0, "StairsName");
  strcpy(&byte_255DB0F, "\nTunnelName");
  strcpy(&byte_255DB27, "\nParking");
  byte_255DB3F = 7;
  strcpy(&byte_255DB57, "\t_Escalator");
  strcpy((char *)&qword_255DB40, "_Elevator");
  strcpy(&byte_255DB6F, "\n_ElevatorName");
  byte_255DB87 = 13;
  byte_255DB9F = 14;
  strcpy((char *)&qword_255DB88, "_EscalatorName");
  byte_255DBB7 = 5;
  strcpy((char *)&qword_255DBA0, "_Road");
  byte_255DBCF = 8;
  strcpy((char *)&qword_255DBB8, "_Freeway");
  byte_255DBE7 = 13;
  strcpy((char *)&qword_255DBD0, "_Intersection");
  byte_255DBFF = 6;
  strcpy((char *)&dword_255DBE8, "_Road1");
  byte_255DC17 = 6;
  strcpy((char *)&dword_255DC00, "_Road2");
  strcpy(&byte_255DC2F, "\n_Signpost2");
  strcpy((char *)&qword_255DC18, "_Signpost1");
  strcpy(&byte_255DC47, "\n_Ferry");
  byte_255DC5F = 6;
  byte_255DC77 = 12;
  strcpy((char *)&qword_255DC60, "_Ferry_Ferry");
  byte_255DC8F = 12;
  strcpy((char *)&qword_255DC78, "_ShuttleName");
  qword_255DC90 = (uint64_t)operator new(0x20uLL);
  unk_255DC98 = v279;
  strcpy((char *)qword_255DC90, "_Railway_Shuttle_ShuttleName");
  byte_255DCBF = 11;
  strcpy((char *)&qword_255DCA8, "_ExitNumber");
  byte_255DCD7 = 5;
  dword_255DCC0 = 1769489759;
  byte_255DCC4 = 116;
  byte_255DCC5 = 0;
  byte_255DCEF = 7;
  strcpy((char *)&dword_255DCD8, "_StayOn");
  byte_255DD07 = 7;
  strcpy((char *)&dword_255DCF0, "_Stairs");
  byte_255DD1F = 5;
  strcpy((char *)&dword_255DD08, "_Ramp");
  byte_255DD37 = 11;
  strcpy((char *)&qword_255DD20, "_StairsName");
  strcpy(&byte_255DD4F, "\t_Down");
  strcpy((char *)&qword_255DD38, "_RampName");
  byte_255DD67 = 5;
  byte_255DD7F = 3;
  dword_255DD68 = 7361887;
  byte_255DD97 = 7;
  strcpy((char *)&dword_255DD80, "_Bridge");
  byte_255DDAF = 7;
  strcpy((char *)&dword_255DD98, "_Tunnel");
  byte_255DDC7 = 11;
  strcpy((char *)&qword_255DDB0, "_Roundabout");
  byte_255DDDF = 6;
  strcpy((char *)&dword_255DDC8, "_Cross");
  byte_255DDF7 = 8;
  strcpy((char *)&qword_255DDE0, "_Parking");
  byte_255DE0F = 8;
  strcpy((char *)&qword_255DDF8, "_Shield1");
  byte_255DE27 = 14;
  strcpy((char *)&qword_255DE10, "_TowardShield1");
  byte_255DE3F = 8;
  strcpy((char *)&qword_255DE28, "_Shield2");
  byte_255DE57 = 14;
  strcpy((char *)&qword_255DE40, "_TowardShield2");
  byte_255DE6F = 11;
  strcpy((char *)&qword_255DE58, "_Direction1");
  byte_255DE87 = 11;
  strcpy((char *)&qword_255DE70, "_Direction2");
  strcpy(&byte_255DE9F, "\n_TowardDirection1");
  strcpy((char *)&qword_255DE88, "Direction1");
  byte_255DEB7 = 17;
  byte_255DECF = 17;
  strcpy((char *)&xmmword_255DEB8, "_TowardDirection2");
  byte_255DEE7 = 16;
  strcpy((char *)&xmmword_255DED0, "TowardDirection1");
  byte_255DEFF = 7;
  strcpy((char *)&qword_255DEE8, "_Spoken");
  byte_255DF17 = 5;
  strcpy((char *)&qword_255DF00, "_Sign");
  byte_255DF2F = 15;
  strcpy((char *)&qword_255DF18, "_Secondary_Sign");
  byte_255DF47 = 5;
  byte_255DF34 = 116;
  dword_255DF30 = 1936280671;
  byte_255DF35 = 0;
  byte_255DF5F = 8;
  strcpy((char *)&qword_255DF48, "_Primary");
  qword_255DF70 = 0xF00000000000000;
  strcpy(byte_255DF78, "_Secondary");
  strcpy((char *)&qword_255DF60, "_Spoken_Primary");
  strcpy(&byte_255DF8F, "\n_Secondary");
  strcpy(&byte_255DFA7, "\n_Spoken_Secondar");
  BYTE1(qword_255DFB8) = 0;
  WORD1(qword_255DFB8) = 0;
  HIDWORD(qword_255DFB8) = 285212672;
  byte_255DFD7 = 13;
  strcpy((char *)&qword_255DFC0, "_To_Secondary");
  BYTE1(qword_255DFE8) = 0;
  WORD1(qword_255DFE8) = 0;
  HIDWORD(qword_255DFE8) = 335544320;
  strcpy((char *)&dword_255DFD8, "_Spoken_To_Secon");
  strcpy(&byte_255E007, "\t_ValidDistance");
  strcpy((char *)&qword_255DFF0, "_Distance");
  byte_255E01F = 14;
  byte_255E037 = 6;
  strcpy((char *)&dword_255E020, "_Short");
  byte_255E04F = 1;
  word_255E038 = 95;
  qword_255E050 = (uint64_t)operator new(0x20uLL);
  unk_255E058 = v281;
  strcpy((char *)qword_255E050, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_255E068 = (uint64_t)v1;
  xmmword_255E070 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_255E097 = 12;
  strcpy((char *)&qword_255E080, "Chain_Spoken");
  byte_255E0AF = 15;
  strcpy((char *)&qword_255E098, "Chain_To_Spoken");
  strcpy(&byte_255E0C7, "\nThen_Spoken");
  strcpy((char *)&qword_255E0B0, "And_Spoken");
  byte_255E0DF = 11;
  byte_255E0F7 = 18;
  strcpy((char *)&xmmword_255E0E0, "Concatenate_Spoken");
  qword_255E0F8 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_255E100 = xmmword_20B9240;
  strcpy((char *)qword_255E0F8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_255E110 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_255E118 = xmmword_20B9260;
  strcpy((char *)qword_255E110, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_255E128 = (uint64_t)operator new(0x40uLL);
  xmmword_255E130 = xmmword_20B9A90;
  strcpy((char *)qword_255E128, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_255E140 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_255E148 = xmmword_20B9A40;
  strcpy((char *)qword_255E140, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_255E158 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_255E160 = xmmword_20E12D0;
  strcpy((char *)qword_255E158, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_255E170 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_255E178 = xmmword_20B9960;
  strcpy((char *)qword_255E170, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_255E188 = (uint64_t)operator new(0x28uLL);
  xmmword_255E190 = xmmword_20B93A0;
  strcpy((char *)qword_255E188, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_255E1A0 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_255E1A8 = xmmword_20E1380;
  strcpy((char *)qword_255E1A0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_255E1B8 = (uint64_t)operator new(0x30uLL);
  xmmword_255E1C0 = xmmword_20B93C0;
  strcpy((char *)qword_255E1B8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_255E1D0 = (uint64_t)operator new(0x38uLL);
  unk_255E1D8 = xmmword_20B9A60;
  strcpy((char *)qword_255E1D0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_255E1E8 = (uint64_t)operator new(0x30uLL);
  xmmword_255E1F0 = xmmword_20E1380;
  strcpy((char *)qword_255E1E8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_255E200 = (uint64_t)operator new(0x28uLL);
  unk_255E208 = xmmword_20B9960;
  strcpy((char *)qword_255E200, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_255E218 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_255E220 = xmmword_20B93D0;
  strcpy((char *)qword_255E218, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_255E230 = (uint64_t)operator new(0x20uLL);
  unk_255E238 = v277;
  strcpy((char *)qword_255E230, "Walking_Distance_Chain_Spoken");
  qword_255E248 = (uint64_t)operator new(0x20uLL);
  xmmword_255E250 = v277;
  strcpy((char *)qword_255E248, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_255E260 = (uint64_t)v3;
  unk_255E268 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_255E278 = (uint64_t)operator new(0x28uLL);
  xmmword_255E280 = v271;
  strcpy((char *)qword_255E278, "Distance_Cross_The_Street_Spoken");
  byte_255E2A7 = 22;
  strcpy((char *)&xmmword_255E290, "Walking_Continue_Cross");
  byte_255E2BF = 14;
  strcpy((char *)&qword_255E2A8, "Continue_Cross");
  byte_255E2D7 = 5;
  strcpy((char *)&dword_255E2C0, "Cross");
  byte_255E2EF = 19;
  strcpy((char *)&xmmword_255E2D8, "Cross_Street_Spoken");
  byte_255E307 = 17;
  strcpy((char *)&xmmword_255E2F0, "Cross_Road_Spoken");
  byte_255E31F = 20;
  strcpy((char *)&xmmword_255E308, "Use_Crosswalk_Spoken");
  byte_255E337 = 15;
  strcpy((char *)&qword_255E320, "Distance_Spoken");
  byte_255E34F = 19;
  strcpy((char *)&xmmword_255E338, "Distance_And_Spoken");
  byte_255E367 = 21;
  strcpy((char *)&xmmword_255E350, "Continue_Stage_Spoken");
  byte_255E37F = 13;
  qmemcpy(&qword_255E368, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_255DF70);
  if (qword_255DF70 >= 0) {
    size_t v5 = HIBYTE(qword_255DF70);
  }
  else {
    size_t v5 = unk_255DF68;
  }
  unint64_t v6 = v5 + 13;
  byte_255E375 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = operator new(v8 + 1);
    qword_255E388 = v5 + 13;
    unk_255E390 = v9 | 0x8000000000000000;
    qword_255E380 = (uint64_t)v10;
    *long long v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_255E388) = 0;
    WORD1(qword_255E388) = 0;
    HIDWORD(qword_255E388) = 0;
    unk_255E390 = 0;
    byte_255E397 = v5 + 13;
    uint64_t v7 = (char *)&qword_255E388 + 5;
    strcpy((char *)&qword_255E380, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    char v11 = &qword_255DF60;
  }
  else {
    char v11 = (uint64_t *)qword_255DF60;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_255DBB7;
  if (byte_255DBB7 >= 0) {
    size_t v13 = byte_255DBB7;
  }
  else {
    size_t v13 = qword_255DBA8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    void *v18 = qword_255E368;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_255E368 + 5);
    int v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_255E368 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_255E368;
    int v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_255DBA0;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_255DBA0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    int v20 = (const std::string::value_type *)&qword_255DF60;
  }
  else {
    int v20 = (const std::string::value_type *)qword_255DF60;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_255E3A8 = v21->__r_.__value_.__r.__words[2];
  xmmword_255E398 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_255E3C7 = 5;
  strcpy((char *)&dword_255E3B0, "Merge");
  qword_255E3C8 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  *(_OWORD *)algn_255E3D0 = xmmword_20B8E90;
  strcpy((char *)qword_255E3C8, "Continue_Freeway_Spoken_Primary");
  byte_255E3F7 = 8;
  strcpy((char *)&qword_255E3E0, "Starting");
  byte_255E40F = 14;
  strcpy((char *)&qword_255E3F8, "Starting_Route");
  byte_255E427 = 14;
  strcpy((char *)&qword_255E410, "Resuming_Route");
  byte_255E43F = 16;
  strcpy((char *)&xmmword_255E428, "Continuing_Route");
  byte_255E457 = 9;
  word_255E448 = 112;
  qword_255E440 = *(void *)&v266[48];
  strcpy(&byte_255E46F, "\nEnding");
  strcpy((char *)&word_255E460, "op");
  qword_255E458 = *(void *)&v270[0];
  byte_255E487 = 6;
  strcpy((char *)&qword_255E488, "_Destination");
  byte_255E49F = 12;
  byte_255E4B7 = 15;
  strcpy((char *)&qword_255E4A0, "_At_Destination");
  std::operator+<char>();
  qword_255E4D0 = (uint64_t)operator new(0x20uLL);
  unk_255E4D8 = v281;
  strcpy((char *)qword_255E4D0, "Spoken_Ending_At_Parking");
  qword_255E4E8 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_255E4F0 = xmmword_20B9800;
  strcpy((char *)qword_255E4E8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_255E500, "Sign_Ending_At_Parking");
  HIBYTE(word_255E516) = 22;
  byte_255E52F = 4;
  strcpy((char *)&dword_255E518, "Home");
  byte_255E547 = 4;
  strcpy((char *)&dword_255E530, "Work");
  byte_255E55F = 8;
  strcpy((char *)&qword_255E548, "Business");
  byte_255E577 = 4;
  strcpy((char *)&dword_255E560, "Name");
  byte_255E58F = 13;
  strcpy((char *)&qword_255E578, "Other_Contact");
  byte_255E5A7 = 11;
  strcpy((char *)&qword_255E590, "ContactHome");
  byte_255E5BF = 11;
  *(_DWORD *)((char *)&qword_255E5A8 + 7) = 1802661719;
  byte_255E5D7 = 7;
  *(int *)((char *)&dword_255E5C0 + 3) = 1936942450;
  dword_255E5C0 = 1919181889;
  strcpy((char *)&xmmword_255E5D8, "Discoverability_Prompt");
  HIBYTE(word_255E5EE) = 22;
  byte_255E607 = 6;
  dword_255E5F0 = 1634878303;
  word_255E5F4 = 26739;
  byte_255E61F = 8;
  qword_255E608 = 0x697269535F6F4E5FLL;
  byte_255E637 = 9;
  strcpy((char *)&qword_255E620, "_CityName");
  byte_255E64F = 8;
  qword_255E638 = 0x636972656E65475FLL;
  int v23 = byte_255E3F7;
  if (byte_255E3F7 >= 0) {
    size_t v24 = byte_255E3F7;
  }
  else {
    size_t v24 = qword_255E3E8;
  }
  LODWORD(v272) = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v25 = byte_255D737;
  }
  else {
    size_t v25 = unk_255D728;
  }
  qword_255E5A8 = *(void *)"ContactWork";
  byte_255E5B3 = 0;
  byte_255E5C7 = 0;
  byte_255E5F6 = 0;
  byte_255E610 = 0;
  byte_255E640 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_255E650;
    qword_255E658 = 0;
    unk_255E660 = 0;
    qword_255E650 = 0;
    byte_255E667 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_255E658 = v25 + v24;
  unk_255E660 = v91 | 0x8000000000000000;
  qword_255E650 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      long long v28 = &qword_255E3E0;
    }
    else {
      long long v28 = (uint64_t *)qword_255E3E0;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  long long v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      long long v30 = &qword_255D720;
    }
    else {
      long long v30 = (uint64_t *)qword_255D720;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_255E49F;
  if (byte_255E49F >= 0) {
    size_t v32 = byte_255E49F;
  }
  else {
    size_t v32 = qword_255E490;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_255E668;
    qword_255E670 = 0;
    unk_255E678 = 0;
    qword_255E668 = 0;
    byte_255E67F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_255E670 = v32 + v24;
  unk_255E678 = v93 | 0x8000000000000000;
  qword_255E668 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      long long v35 = &qword_255E3E0;
    }
    else {
      long long v35 = (uint64_t *)qword_255E3E0;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  float v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v37 = &qword_255E488;
    }
    else {
      long long v37 = (uint64_t *)qword_255E488;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_255E680 = (uint64_t)operator new(0x19uLL);
  unk_255E688 = v282;
  strcpy((char *)qword_255E680, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_255E698;
    qword_255E6A0 = 0;
    unk_255E6A8 = 0;
    qword_255E698 = 0;
    byte_255E6AF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_255E6A0 = v32 + v24;
  unk_255E6A8 = v95 | 0x8000000000000000;
  qword_255E698 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_255E3E0;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_255E3E0;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int64_t v41 = &qword_255E488;
    }
    else {
      int64_t v41 = (uint64_t *)qword_255E488;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_255E6B0, "{NewBatteryPercentage}");
  HIBYTE(word_255E6C6) = 22;
  qword_255E6C8 = (uint64_t)operator new(0x20uLL);
  xmmword_255E6D0 = v275;
  strcpy((char *)qword_255E6C8, "{OriginalBatteryPercentage}");
  byte_255E6F7 = 19;
  strcpy((char *)&xmmword_255E6E0, "_Arrival_Percentage");
  int v42 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v43 = byte_255E487;
  }
  else {
    size_t v43 = qword_255E478;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      long long v46 = &qword_255E470;
    }
    else {
      long long v46 = (uint64_t *)qword_255E470;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v48 = &qword_255D720;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_255D720;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  int64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_255E708 = v49->__r_.__value_.__r.__words[2];
  xmmword_255E6F8 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v52 = byte_255E487;
  }
  else {
    size_t v52 = qword_255E478;
  }
  int v53 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v54 = byte_255D737;
  }
  else {
    size_t v54 = unk_255D728;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  uint64_t v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      int64_t v57 = &qword_255E470;
    }
    else {
      int64_t v57 = (uint64_t *)qword_255E470;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  int64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      unint64_t v59 = &qword_255D720;
    }
    else {
      unint64_t v59 = (uint64_t *)qword_255D720;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_255D767 >= 0) {
    int v60 = (const std::string::value_type *)&qword_255D750;
  }
  else {
    int v60 = (const std::string::value_type *)qword_255D750;
  }
  if (byte_255D767 >= 0) {
    std::string::size_type v61 = byte_255D767;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_255D758;
  }
  uint64_t v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  int v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_255E720 = v64->__r_.__value_.__r.__words[2];
  xmmword_255E710 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v67 = byte_255E487;
  }
  else {
    size_t v67 = qword_255E478;
  }
  int v68 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v69 = byte_255D737;
  }
  else {
    size_t v69 = unk_255D728;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      unint64_t v72 = &qword_255E470;
    }
    else {
      unint64_t v72 = (uint64_t *)qword_255E470;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  int64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      int64_t v74 = &qword_255D720;
    }
    else {
      int64_t v74 = (uint64_t *)qword_255D720;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_255E738 = v75->__r_.__value_.__r.__words[2];
  xmmword_255E728 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v78 = byte_255E487;
  }
  else {
    size_t v78 = qword_255E478;
  }
  int v79 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v80 = byte_255D737;
  }
  else {
    size_t v80 = unk_255D728;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_255E748 = 0;
    unk_255E750 = 0;
    qword_255E740 = 0;
    uint64_t v82 = &qword_255E740;
    byte_255E757 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_255E748 = v80 + v78;
  unk_255E750 = v103 | 0x8000000000000000;
  qword_255E740 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      int64x2_t v83 = &qword_255E470;
    }
    else {
      int64x2_t v83 = (uint64_t *)qword_255E470;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  long long v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_255D720;
    }
    else {
      int v85 = (uint64_t *)qword_255D720;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_255E757;
  if (byte_255E757 >= 0) {
    size_t v87 = byte_255E757;
  }
  else {
    size_t v87 = qword_255E748;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_255E760 = v87 + 5;
    unk_255E768 = v105 | 0x8000000000000000;
    qword_255E758 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_255E758;
    qword_255E760 = 0;
    unk_255E768 = 0;
    qword_255E758 = 0;
    byte_255E76F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    int64x2_t v106 = &qword_255E740;
  }
  else {
    int64x2_t v106 = (uint64_t *)qword_255E740;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v108 = byte_255E487;
  }
  else {
    size_t v108 = qword_255E478;
  }
  int v109 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v110 = byte_255D737;
  }
  else {
    size_t v110 = unk_255D728;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    char v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  char v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      int64x2_t v113 = &qword_255E470;
    }
    else {
      int64x2_t v113 = (uint64_t *)qword_255E470;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  int64x2_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_255D720;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_255D720;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  uint64_t v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_255E780 = v116->__r_.__value_.__r.__words[2];
  xmmword_255E770 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_255E780);
  if (qword_255E780 >= 0) {
    size_t v119 = HIBYTE(qword_255E780);
  }
  else {
    size_t v119 = *((void *)&xmmword_255E770 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    std::string v121 = (uint64_t *)operator new(v124 + 1);
    qword_255E790 = v119 + 6;
    unk_255E798 = v125 | 0x8000000000000000;
    qword_255E788 = (uint64_t)v121;
  }
  else
  {
    std::string v121 = &qword_255E788;
    qword_255E790 = 0;
    unk_255E798 = 0;
    qword_255E788 = 0;
    byte_255E79F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_255E770;
  }
  else {
    uint64_t v126 = (long long *)xmmword_255E770;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v128 = byte_255E487;
  }
  else {
    size_t v128 = qword_255E478;
  }
  int v129 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v130 = byte_255D737;
  }
  else {
    size_t v130 = unk_255D728;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  long long v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_255E470;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_255E470;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_255D720;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_255D720;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_255DEFF >= 0) {
    long long v136 = (const std::string::value_type *)&qword_255DEE8;
  }
  else {
    long long v136 = (const std::string::value_type *)qword_255DEE8;
  }
  if (byte_255DEFF >= 0) {
    std::string::size_type v137 = byte_255DEFF;
  }
  else {
    std::string::size_type v137 = unk_255DEF0;
  }
  char v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_255E7B0 = v138->__r_.__value_.__r.__words[2];
  xmmword_255E7A0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_255E487;
  if (byte_255E487 >= 0) {
    size_t v141 = byte_255E487;
  }
  else {
    size_t v141 = qword_255E478;
  }
  int v142 = byte_255D737;
  if (byte_255D737 >= 0) {
    size_t v143 = byte_255D737;
  }
  else {
    size_t v143 = unk_255D728;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    int64x2_t v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  int64x2_t v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      char v146 = &qword_255E470;
    }
    else {
      char v146 = (uint64_t *)qword_255E470;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      long long v148 = &qword_255D720;
    }
    else {
      long long v148 = (uint64_t *)qword_255D720;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_255D767 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_255D750;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_255D750;
  }
  if (byte_255D767 >= 0) {
    std::string::size_type v150 = byte_255D767;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_255D758;
  }
  std::string v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_255DEFF >= 0) {
    std::string v153 = (const std::string::value_type *)&qword_255DEE8;
  }
  else {
    std::string v153 = (const std::string::value_type *)qword_255DEE8;
  }
  if (byte_255DEFF >= 0) {
    std::string::size_type v154 = byte_255DEFF;
  }
  else {
    std::string::size_type v154 = unk_255DEF0;
  }
  char v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_255E7C8 = v155->__r_.__value_.__r.__words[2];
  xmmword_255E7B8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_255E7E7 = 16;
  strcpy((char *)&xmmword_255E7D0, "Use_NACS_Adapter");
  byte_255E7FF = 16;
  strcpy(byte_255E7E8, "Start_Route_Sign");
  qword_255E800 = (uint64_t)operator new(0x20uLL);
  unk_255E808 = v278;
  strcpy((char *)qword_255E800, "Start_Route_Spoken_Primary");
  int v157 = byte_255CE97;
  if (byte_255CE97 >= 0) {
    size_t v158 = byte_255CE97;
  }
  else {
    size_t v158 = qword_255CE88;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_255E818;
    qword_255E820 = 0;
    unk_255E828 = 0;
    qword_255E818 = 0;
    byte_255E82F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_255CE80;
    }
    else {
      v167 = (uint64_t *)qword_255CE80;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_255E820 = v158 + 27;
  unk_255E828 = v166 | 0x8000000000000000;
  qword_255E818 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_255E847, "\t_Two_Lanes");
  strcpy((char *)&qword_255E830, "_One_Lane");
  strcpy(&byte_255E85F, "\n_Three_Lanes");
  byte_255E877 = 12;
  byte_255E88F = 11;
  strcpy((char *)&qword_255E878, "_Four_Lanes");
  byte_255E8A7 = 11;
  strcpy((char *)&qword_255E890, "_Five_Lanes");
  strcpy(&byte_255E8BF, "\n_Seven_Lanes");
  strcpy((char *)&qword_255E8A8, "_Six_Lanes");
  byte_255E8D7 = 12;
  byte_255E8EF = 12;
  strcpy((char *)&qword_255E8D8, "_Eight_Lanes");
  byte_255E907 = 12;
  strcpy((char *)&qword_255E8F0, "_Second_Lane");
  byte_255E91F = 11;
  strcpy((char *)&qword_255E908, "_Third_Lane");
  byte_255E937 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_255E920, "_Second_Third_Lanes");
  byte_255E94F = 4;
  strcpy((char *)&dword_255E938, "Left");
  byte_255E967 = 5;
  byte_255E954 = 116;
  dword_255E950 = 1751607634;
  byte_255E955 = 0;
  byte_255E97F = 6;
  strcpy((char *)&dword_255E968, "Middle");
  BYTE1(qword_255E990) = 0;
  WORD1(qword_255E990) = 0;
  HIDWORD(qword_255E990) = 0x10000000;
  strcpy((char *)dword_255E980, "Left_Second_Lane");
  BYTE1(qword_255E9A8) = 0;
  WORD1(qword_255E9A8) = 0;
  HIDWORD(qword_255E9A8) = 285212672;
  strcpy((char *)&dword_255E998, "Right_Second_Lan");
  qword_255E9C0 = 0xF00000000000000;
  strcpy((char *)&dword_255E9B0, "Left_Third_Lane");
  qword_255E9D8 = 0x1000000000000000;
  byte_255E9CC = 116;
  dword_255E9C8 = 1751607634;
  dword_255E9D4 = 1701732684;
  unk_255E9CD = *(void *)"_Third_Lane";
  uint64_t v168 = (char *)operator new(0x19uLL);
  qword_255E9E0 = (uint64_t)v168;
  unk_255E9E8 = v282;
  *(_DWORD *)uint64_t v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  v169 = (char *)operator new(0x20uLL);
  qword_255E9F8 = (uint64_t)v169;
  xmmword_255EA00 = v281;
  *(_DWORD *)v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_255EA27 = 5;
  strcpy((char *)&dword_255EA10, "_Stay");
  byte_255EA3F = 13;
  strcpy((char *)&qword_255EA28, "Continue_Sign");
  byte_255EA57 = 8;
  strcpy((char *)&qword_255EA40, "Continue");
  int v170 = byte_255DF17;
  if (byte_255DF17 >= 0) {
    size_t v171 = byte_255DF17;
  }
  else {
    size_t v171 = qword_255DF08;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_255EA60 = v171 + 8;
    qword_255EA68 = v175 | 0x8000000000000000;
    qword_255EA58 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    v173 = v176 + 1;
  }
  else
  {
    qword_255EA68 = 0;
    HIBYTE(qword_255EA68) = v171 + 8;
    qword_255EA58 = 0x65756E69746E6F43;
    qword_255EA60 = 0;
    v173 = &qword_255EA60;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_255DF00;
  }
  else {
    v177 = (uint64_t *)qword_255DF00;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_255DF70);
  if (qword_255DF70 >= 0) {
    size_t v179 = HIBYTE(qword_255DF70);
  }
  else {
    size_t v179 = unk_255DF68;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_255EA78 = v179 + 8;
    qword_255EA80 = v183 | 0x8000000000000000;
    qword_255EA70 = (uint64_t)v184;
    void *v184 = qword_255EA40;
    v181 = v184 + 1;
  }
  else
  {
    qword_255EA80 = 0;
    HIBYTE(qword_255EA80) = v179 + 8;
    qword_255EA70 = qword_255EA40;
    qword_255EA78 = 0;
    v181 = &qword_255EA78;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_255DF60;
  }
  else {
    v185 = (uint64_t *)qword_255DF60;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_255EA88, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_255EAB7 = 13;
  strcpy((char *)&qword_255EAA0, "{instruction}");
  byte_255EACF = 20;
  strcpy(byte_255EAB8, "{primaryInstruction}");
  strcpy((char *)&xmmword_255EAD0, "{secondaryInstruction}");
  HIBYTE(word_255EAE6) = 22;
  qword_255EAE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255EAF0 = v280;
  strcpy((char *)qword_255EAE8, "{andSecondaryInstruction}");
  qword_255EB00 = (uint64_t)operator new(0x20uLL);
  unk_255EB08 = v281;
  strcpy((char *)qword_255EB00, "{toSecondaryInstruction}");
  byte_255EB2F = 21;
  strcpy(byte_255EB18, "{continueInstruction}");
  qword_255EB30 = (uint64_t)operator new(0x20uLL);
  unk_255EB38 = v278;
  strcpy((char *)qword_255EB30, "{thenSecondaryInstruction}");
  byte_255EB5F = 14;
  strcpy((char *)&qword_255EB48, "{instruction1}");
  byte_255EB77 = 14;
  strcpy((char *)&qword_255EB60, "{instruction2}");
  strcpy(&byte_255EB8F, "\n{nextDistance}");
  strcpy((char *)&qword_255EB78, "{distance}");
  byte_255EBA7 = 14;
  byte_255EBBF = 16;
  strcpy(byte_255EBA8, "{valid_distance}");
  strcpy(&byte_255EBD7, "\n{valid_distance}");
  strcpy((char *)&qword_255EBC0, "{distance}");
  byte_255EBEF = 16;
  byte_255EC07 = 15;
  strcpy((char *)&qword_255EBF0, "{ClimbDistance}");
  byte_255EC1F = 17;
  strcpy(byte_255EC08, "{DescentDistance}");
  byte_255EC37 = 13;
  strcpy((char *)&qword_255EC20, "{nonBrkSpace}");
  byte_255EC4F = 9;
  strcpy((char *)&qword_255EC38, "{newLine}");
  byte_255EC67 = 6;
  word_255EC54 = -24382;
  dword_255EC50 = -1211981630;
  byte_255EC56 = 0;
  byte_255EC7F = 2;
  word_255EC68 = -24382;
  byte_255EC6A = 0;
  byte_255EC97 = 1;
  word_255EC80 = 10;
  byte_255ECAF = 1;
  word_255EC98 = 32;
  byte_255ECC7 = 2;
  strcpy((char *)&word_255ECB0, "\n\n");
  strcpy(&byte_255ECDF, "\t{TowardShield1}");
  strcpy((char *)&qword_255ECC8, "{Shield1}");
  byte_255ECF7 = 15;
  strcpy(&byte_255ED0F, "\t{TowardShield2}");
  strcpy((char *)&qword_255ECF8, "{Shield2}");
  byte_255ED27 = 15;
  byte_255ED3F = 12;
  strcpy((char *)&qword_255ED28, "{Direction1}");
  byte_255ED57 = 12;
  strcpy((char *)&qword_255ED40, "{Direction2}");
  byte_255ED6F = 18;
  strcpy((char *)&xmmword_255ED58, "{TowardDirection1}");
  byte_255ED87 = 18;
  strcpy((char *)&xmmword_255ED70, "{TowardDirection2}");
  byte_255ED9F = 7;
  strcpy((char *)&dword_255ED88, "{Icon1}");
  byte_255EDB7 = 7;
  strcpy((char *)&dword_255EDA0, "{Icon2}");
  byte_255EDB8[23] = 14;
  strcpy(byte_255EDB8, "{Intersection}");
  byte_255EDE7 = 6;
  strcpy((char *)&xmmword_255EDD0, "{Road}");
  byte_255EDFF = 7;
  strcpy((char *)&dword_255EDE8, "{Road1}");
  byte_255EE17 = 7;
  strcpy((char *)&xmmword_255EE00, "{Road2}");
  strcpy(&byte_255EE2F, "\n{Freeway}");
  strcpy((char *)&qword_255EE18, "{Elevator}");
  strcpy(&byte_255EE47, "\t{Ferry}");
  byte_255EE5F = 7;
  byte_255EE77 = 13;
  strcpy((char *)&xmmword_255EE60, "{ShuttleName}");
  byte_255EE8F = 11;
  strcpy((char *)&qword_255EE78, "{Signpost1}");
  byte_255EEA7 = 11;
  strcpy((char *)&xmmword_255EE90, "{Signpost2}");
  byte_255EEBF = 12;
  strcpy((char *)&xmmword_255EEA8, "{ExitNumber}");
  strcpy(&byte_255EED7, "\t{Name}");
  strcpy((char *)&xmmword_255EEC0, "{Address}");
  byte_255EEEF = 6;
  byte_255EF07 = 11;
  strcpy((char *)&xmmword_255EEF0, "{PlaceName}");
  byte_255EF1F = 14;
  strcpy((char *)&xmmword_255EF08, "{ElevatorName}");
  byte_255EF37 = 15;
  strcpy((char *)&xmmword_255EF20, "{EscalatorName}");
  byte_255EF4F = 12;
  strcpy((char *)&xmmword_255EF38, "{StairsName}");
  strcpy(&byte_255EF67, "\n{BridgeName}");
  strcpy((char *)&xmmword_255EF50, "{RampName}");
  byte_255EF7F = 12;
  byte_255EF97 = 12;
  strcpy((char *)&xmmword_255EF80, "{TunnelName}");
  byte_255EFAF = 13;
  strcpy((char *)&xmmword_255EF98, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_255EDB8;
  *(_OWORD *)v285 = xmmword_255EDD0;
  *(void *)&v285[16] = unk_255EDE0;
  *(_OWORD *)v286 = *(_OWORD *)&dword_255EDE8;
  *(void *)v287 = unk_255EDF8;
  *(_OWORD *)&v287[8] = xmmword_255EE00;
  uint64_t v288 = unk_255EE10;
  *(_OWORD *)v289 = *(_OWORD *)&qword_255EE18;
  uint64_t v290 = unk_255EE28;
  uint64_t v292 = unk_255EE40;
  long long v291 = xmmword_255EE30;
  long long v293 = *(_OWORD *)&dword_255EE48;
  uint64_t v294 = unk_255EE58;
  uint64_t v296 = unk_255EE70;
  long long __p = xmmword_255EE60;
  long long v297 = *(_OWORD *)&qword_255EE78;
  uint64_t v298 = unk_255EE88;
  uint64_t v300 = unk_255EEA0;
  long long v299 = xmmword_255EE90;
  long long v301 = xmmword_255EEA8;
  long long v303 = xmmword_255EEC0;
  uint64_t v302 = unk_255EEB8;
  uint64_t v304 = unk_255EED0;
  long long v305 = xmmword_255EED8;
  long long v307 = xmmword_255EEF0;
  uint64_t v306 = unk_255EEE8;
  uint64_t v308 = unk_255EF00;
  long long v309 = xmmword_255EF08;
  long long v311 = xmmword_255EF20;
  uint64_t v310 = unk_255EF18;
  uint64_t v312 = unk_255EF30;
  long long v313 = xmmword_255EF38;
  long long v315 = xmmword_255EF50;
  uint64_t v314 = unk_255EF48;
  uint64_t v316 = unk_255EF60;
  long long v317 = xmmword_255EF68;
  long long v319 = xmmword_255EF80;
  uint64_t v318 = unk_255EF78;
  uint64_t v320 = unk_255EF90;
  uint64_t v322 = unk_255EFA8;
  long long v321 = xmmword_255EF98;
  sub_4BDC0C(qword_255EFB0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_255EFC8 = (uint64_t)operator new(0x19uLL);
  unk_255EFD0 = v282;
  strcpy((char *)qword_255EFC8, "From_User_Location_List");
  byte_255EFF7 = 20;
  strcpy(byte_255EFE0, "Origin_Waypoint_List");
  qword_255EFF8 = (uint64_t)operator new(0x20uLL);
  unk_255F000 = v278;
  strcpy((char *)qword_255EFF8, "Intermediate_Waypoint_List");
  unk_255F010 = operator new(0x20uLL);
  unk_255F018 = v280;
  strcpy(unk_255F010, "Destination_Waypoint_List");
  byte_255F03F = 15;
  strcpy(byte_255F028, "{toDestination}");
  byte_255F057 = 13;
  strcpy((char *)&xmmword_255F040, "{Destination}");
  byte_255F06F = 7;
  strcpy(byte_255F058, "To_Home");
  byte_255F087 = 14;
  strcpy(byte_255F070, "To_ContactHome");
  byte_255F09F = 7;
  strcpy(byte_255F088, "To_Work");
  byte_255F0B7 = 14;
  strcpy(byte_255F0A0, "To_ContactWork");
  strcpy(&byte_255F0CF, "\nTo_Business");
  strcpy(byte_255F0B8, "To_Address");
  byte_255F0E7 = 11;
  byte_255F0FF = 16;
  strcpy(byte_255F0E8, "To_Other_Contact");
  strcpy(&byte_255F117, "\tTo_ContactSchool");
  strcpy(byte_255F100, "To_School");
  byte_255F12F = 16;
  byte_255F147 = 17;
  strcpy(algn_255F130, "To_PersonLocation");
  qword_255F148 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255F150 = v279;
  strcpy((char *)qword_255F148, "To_ContactCustomLabelAddress");
  byte_255F177 = 7;
  strcpy((char *)&dword_255F160, "At_Home");
  byte_255F18F = 14;
  strcpy((char *)&qword_255F178, "At_ContactHome");
  byte_255F1A7 = 7;
  strcpy((char *)&dword_255F190, "At_Work");
  byte_255F1BF = 14;
  strcpy((char *)&qword_255F1A8, "At_ContactWork");
  strcpy(&byte_255F1D7, "\nAt_Business");
  strcpy((char *)&qword_255F1C0, "At_Address");
  byte_255F1EF = 11;
  byte_255F207 = 16;
  strcpy(algn_255F1F0, "At_Other_Contact");
  byte_255F21F = 4;
  strcpy((char *)&dword_255F208, "Home");
  byte_255F237 = 11;
  strcpy((char *)&qword_255F220 + 7, "Home");
  qword_255F220 = *(void *)&v266[16];
  byte_255F24F = 4;
  strcpy((char *)&dword_255F238, "Work");
  byte_255F267 = 11;
  strcpy((char *)&qword_255F250 + 7, "Work");
  qword_255F250 = *(void *)v266;
  byte_255F27F = 7;
  strcpy((char *)&dword_255F268, "Address");
  byte_255F297 = 8;
  strcpy((char *)&qword_255F280, "Business");
  byte_255F2AF = 13;
  qword_255F298 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_255F298 + 5) = *(void *)&v266[32];
  byte_255F2A5 = 0;
  byte_255F2C7 = 6;
  strcpy((char *)&dword_255F2B0, "School");
  byte_255F2DF = 13;
  strcpy((char *)&qword_255F2C8, "ContactSchool");
  byte_255F2F7 = 14;
  strcpy((char *)&qword_255F2E0, "PersonLocation");
  qword_255F2F8 = (uint64_t)operator new(0x20uLL);
  xmmword_255F300 = v280;
  strcpy((char *)qword_255F2F8, "ContactCustomLabelAddress");
  if (byte_255F057 < 0)
  {
    sub_4200(&xmmword_255F310, (void *)xmmword_255F040, *((unint64_t *)&xmmword_255F040 + 1));
  }
  else
  {
    xmmword_255F310 = xmmword_255F040;
    qword_255F320 = unk_255F050;
  }
  byte_255F33F = 16;
  strcpy((char *)&xmmword_255F328, "{PrevExitNumber}");
  byte_255F357 = 10;
  strcpy((char *)&qword_255F340, "{PrevRoad}");
  qword_255F358 = (uint64_t)operator new(0x20uLL);
  unk_255F360 = v281;
  strcpy((char *)qword_255F358, "{RouteTotalExpectedTime}");
  byte_255F387 = 18;
  strcpy(byte_255F370, "{ChargePercentage}");
  qword_255F388 = (uint64_t)operator new(0x20uLL);
  unk_255F390 = v275;
  strcpy((char *)qword_255F388, "{RemainingChargePercentage}");
  byte_255F3B7 = 16;
  strcpy(byte_255F3A0, "{ChargeDuration}");
  byte_255F3CF = 15;
  strcpy((char *)&qword_255F3B8, "{ConnectorType}");
  byte_255F3E7 = 19;
  strcpy(byte_255F3D0, "{ChargeStationName}");
  byte_255F3FF = 7;
  strcpy((char *)&dword_255F3E8, "{Power}");
  byte_255F417 = 13;
  strcpy((char *)&qword_255F400, "{VehicleName}");
  byte_255F42F = 18;
  strcpy((char *)&xmmword_255F418, "{AreaIncidentName}");
  byte_255F447 = 14;
  strcpy((char *)&qword_255F430, "{AreaIncident}");
  byte_255F45F = 16;
  strcpy((char *)&xmmword_255F448, "{AffectedRegion}");
  byte_255F477 = 21;
  strcpy((char *)&qword_255F460, "{AreaIncidentWeblink}");
  byte_255F48F = 20;
  strcpy((char *)&xmmword_255F478, "{AreaIncidentAgency}");
  byte_255F4A7 = 11;
  strcpy((char *)&qword_255F490, "{IssueTime}");
  byte_255F4BF = 12;
  strcpy((char *)&qword_255F4A8, "{UpdateTime}");
  byte_255F4D7 = 11;
  strcpy((char *)&qword_255F4C0, "{IssueDate}");
  byte_255F4EF = 12;
  strcpy((char *)&qword_255F4D8, "{UpdateDate}");
  qword_255F4F0 = (uint64_t)operator new(0x20uLL);
  unk_255F4F8 = v281;
  strcpy((char *)qword_255F4F0, "{AreaIncidentDataSource}");
  byte_255F51F = 13;
  strcpy((char *)&qword_255F508, "{AreaHectare}");
  byte_255F537 = 10;
  strcpy((char *)&qword_255F520, "{AreaAcre}");
  qword_255F538 = (uint64_t)operator new(0x20uLL);
  unk_255F540 = v277;
  strcpy((char *)qword_255F538, "{WildfirePercentageContained}");
  qword_255F550 = (uint64_t)operator new(0x28uLL);
  unk_255F558 = v270[2];
  strcpy((char *)qword_255F550, "{WildfireExpectedContainmentDate}");
  qword_255F568 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255F570 = v279;
  strcpy((char *)qword_255F568, "{ServerRecommendedRouteName}");
  qword_255F580 = (uint64_t)operator new(0x20uLL);
  unk_255F588 = v279;
  strcpy((char *)qword_255F580, "{ServerNonRecommendedRoute1}");
  qword_255F598 = (uint64_t)operator new(0x20uLL);
  unk_255F5A0 = v279;
  strcpy((char *)qword_255F598, "{ServerNonRecommendedRoute2}");
  byte_255F5C7 = 12;
  strcpy((char *)&qword_255F5B0, "{ClientDest}");
  byte_255F5DF = 6;
  strcpy((char *)&dword_255F5C8, "{Name}");
  qword_255F5E0 = (uint64_t)operator new(0x20uLL);
  unk_255F5E8 = v270[1];
  strcpy((char *)qword_255F5E0, "ProactiveAlert_FasterRouteTitle");
  qword_255F5F8 = (uint64_t)operator new(0x20uLL);
  unk_255F600 = v278;
  strcpy((char *)qword_255F5F8, "ProactiveAlert_RoadClosure");
  qword_255F610 = (uint64_t)operator new(0x30uLL);
  unk_255F618 = v273;
  strcpy((char *)qword_255F610, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_255F628 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255F630 = v276;
  strcpy((char *)qword_255F628, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_255F640 = (uint64_t)operator new(0x28uLL);
  unk_255F648 = v276;
  strcpy((char *)qword_255F640, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_255F658 = (uint64_t)operator new(0x28uLL);
  unk_255F660 = v276;
  strcpy((char *)qword_255F658, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_255F670 = (uint64_t)operator new(0x30uLL);
  unk_255F678 = xmmword_20B93B0;
  strcpy((char *)qword_255F670, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_255F69F = 17;
  strcpy(byte_255F688, "Proactive_Driving");
  strcpy(&byte_255F6B7, "\n{RouteName}");
  strcpy((char *)&qword_255F6A0, "_RouteName");
  byte_255F6CF = 11;
  qword_255F6D0 = (uint64_t)operator new(0x28uLL);
  unk_255F6D8 = v270[2];
  strcpy((char *)qword_255F6D0, "Pass_Traffic_Light_Spoken_Primary");
  qword_255F6E8 = (uint64_t)operator new(0x20uLL);
  unk_255F6F0 = v277;
  strcpy((char *)qword_255F6E8, "Pass_Stop_Sign_Spoken_Primary");
  unk_255F700 = operator new(0x20uLL);
  unk_255F708 = v270[0];
  strcpy(unk_255F700, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_255F72F, "\nBannerBody");
  strcpy(byte_255F718, "BannerHead");
  strcpy(&byte_255F747, "\nBannerDescription");
  byte_255F75F = 17;
  strcpy(&byte_255F777, "\n_Incident");
  strcpy((char *)&qword_255F760, "VoiceAlert");
  strcpy(&byte_255F78F, "\t_Area_Incident");
  byte_255F7A7 = 14;
  byte_255F7BF = 15;
  strcpy((char *)&qword_255F7A8, "_Area_Incidents");
  strcpy(&byte_255F7D7, "\t_Crash");
  strcpy((char *)&qword_255F7C0, "_Accident");
  byte_255F7EF = 6;
  byte_255F807 = 16;
  strcpy((char *)&xmmword_255F7F0, "_Congestion_Zone");
  strcpy(&byte_255F81F, "\n_Environmental_Zone");
  strcpy((char *)&qword_255F808, "_Toll_Zone");
  byte_255F837 = 19;
  BYTE1(qword_255F848) = 116;
  WORD1(qword_255F848) = 0;
  HIDWORD(qword_255F848) = 301989888;
  strcpy(byte_255F850, "_Construction");
  strcpy((char *)&qword_255F838, "_Incident_Accide");
  byte_255F867 = 13;
  byte_255F87F = 7;
  strcpy((char *)&dword_255F868, "_Hazard");
  byte_255F897 = 12;
  strcpy((char *)&qword_255F880, "_LaneClosure");
  byte_255F8AF = 12;
  strcpy((char *)&qword_255F898, "_LaneTrailer");
  qmemcpy(&byte_255F8C7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_255F8B0, "_Shoulder");
  qword_255F8D8 = 0x1500007200000000;
  *(void *)algn_255F8D4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_255F8E0, "_Causing_Traffic_Delay");
  HIBYTE(word_255F8F6) = 22;
  byte_255F90F = 6;
  strcpy((char *)&dword_255F8F8, "_Timed");
  byte_255F927 = 12;
  strcpy((char *)&qword_255F910, "_HasDistance");
  byte_255F93F = 8;
  strcpy((char *)&qword_255F928, "_Closure");
  strcpy(&byte_255F957, "\n_BadRoad");
  strcpy((char *)&qword_255F940, "_NoReroute");
  byte_255F96F = 8;
  byte_255F987 = 12;
  strcpy((char *)&qword_255F970, "_TollTrailer");
  byte_255F99F = 12;
  strcpy((char *)&qword_255F988, "_BestTrailer");
  byte_255F9B7 = 8;
  strcpy((char *)&qword_255F9A0, "_Trailer");
  byte_255F9CF = 18;
  strcpy((char *)&xmmword_255F9B8, "_Secondary_Trailer");
  byte_255F9E7 = 8;
  strcpy((char *)&qword_255F9D0, "_Savings");
  byte_255F9FF = 8;
  strcpy((char *)&qword_255F9E8, "_AltRoad");
  byte_255FA17 = 6;
  strcpy((char *)&dword_255FA00, "_Named");
  byte_255FA2F = 6;
  strcpy((char *)&dword_255FA18, "_NAMED");
  byte_255FA47 = 22;
  strcpy((char *)&xmmword_255FA30, "_Named_Suggested_Route");
  qword_255FA60 = 0x1000000000000000;
  xmmword_255FA50 = xmmword_20E81D0;
  byte_255FA7F = 11;
  strcpy((char *)&qword_255FA68, "_Speed_Trap");
  byte_255FA97 = 4;
  strcpy((char *)&dword_255FA80, "_UGI");
  byte_255FAAF = 12;
  strcpy((char *)&qword_255FA98, "_Safer_Route");
  qword_255FAB0 = (uint64_t)operator new(0x20uLL);
  unk_255FAB8 = v270[1];
  strcpy((char *)qword_255FAB0, "BlockedRouteByBlockingIncident_");
  qword_255FAC8 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  *(_OWORD *)algn_255FAD0 = xmmword_20B9280;
  strcpy((char *)qword_255FAC8, "BlockedRouteByManeuverRestriction_");
  qword_255FAE0 = (uint64_t)operator new(0x20uLL);
  unk_255FAE8 = v270[0];
  strcpy((char *)qword_255FAE0, "BlockedRouteByTimeRestriction_");
  qword_255FAF8 = (uint64_t)operator new(0x28uLL);
  unk_255FB00 = xmmword_20B8FD0;
  strcpy((char *)qword_255FAF8, "SuggestRouteToAvoidBlockingIncident_");
  qword_255FB10 = (uint64_t)operator new(0x30uLL);
  unk_255FB18 = xmmword_20B9380;
  strcpy((char *)qword_255FB10, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_255FB28 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_255FB30 = xmmword_20B93E0;
  strcpy((char *)qword_255FB28, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_255FB57 = 1;
  word_255FB40 = 95;
  strcpy((char *)&xmmword_255FB58, "IncidentsCausingDelay_");
  HIBYTE(word_255FB6E) = 22;
  qword_255FB70 = (uint64_t)operator new(0x19uLL);
  unk_255FB78 = v282;
  strcpy((char *)qword_255FB70, "NonVotableRoadIncident_");
  byte_255FB9F = 20;
  strcpy(byte_255FB88, "VotableRoadIncident_");
  byte_255FBB7 = 13;
  strcpy((char *)&qword_255FBA0, "AreaIncident_");
  byte_255FBCF = 15;
  strcpy((char *)&qword_255FBB8, "CongestionZone_");
  qword_255FBD0 = (uint64_t)operator new(0x20uLL);
  unk_255FBD8 = v281;
  strcpy((char *)qword_255FBD0, "EVModifiedChargingStops_");
  byte_255FBFF = 13;
  strcpy((char *)&qword_255FBE8, "EVDisconnect_");
  byte_255FC17 = 12;
  strcpy((char *)&qword_255FC00, "EVReconnect_");
  qword_255FC18 = (uint64_t)operator new(0x20uLL);
  unk_255FC20 = v279;
  strcpy((char *)qword_255FC18, "EVOfflineToOnlineTransition_");
  byte_255FC47 = 13;
  strcpy((char *)&qword_255FC30, "EVOfflineSAR_");
  byte_255FC5F = 21;
  strcpy((char *)&xmmword_255FC48, "EVTowingNotSupported_");
  byte_255FC77 = 18;
  strcpy(byte_255FC60, "EVInfeasibleRoute_");
  qword_255FC78 = (uint64_t)operator new(0x38uLL);
  unk_255FC80 = xmmword_20B8DF0;
  strcpy((char *)qword_255FC78, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_255FC90 = (uint64_t)operator new(0x40uLL);
  unk_255FC98 = xmmword_20B98C0;
  strcpy((char *)qword_255FC90, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_255FCA8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_255FCB0 = v274;
  strcpy((char *)qword_255FCA8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_255FCC0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_255FCC8 = xmmword_20B9A80;
  strcpy((char *)qword_255FCC0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_255FCD8 = (uint64_t)operator new(0x30uLL);
  unk_255FCE0 = v273;
  strcpy((char *)qword_255FCD8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_255FCF0 = (uint64_t)v186;
  unk_255FCF8 = v274;
  _OWORD *v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_255FD08 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255FD10 = v272;
  strcpy((char *)qword_255FD08, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_255FD20 = (uint64_t)v187;
  unk_255FD28 = *(_OWORD *)&v266[48];
  _OWORD *v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_255FD38 = (uint64_t)operator new(0x28uLL);
  unk_255FD40 = v276;
  strcpy((char *)qword_255FD38, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_255FD50 = (uint64_t)operator new(0x28uLL);
  unk_255FD58 = v269;
  strcpy((char *)qword_255FD50, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_255FD68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255FD70 = v281;
  strcpy((char *)qword_255FD68, "OfflineToOnlineNewRoute_");
  qword_255FD80 = (uint64_t)operator new(0x40uLL);
  unk_255FD88 = xmmword_20B98C0;
  strcpy((char *)qword_255FD80, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_255FDAF = 20;
  strcpy((char *)&xmmword_255FD98, "LPR_OFFLINE_REROUTE_");
  byte_255FDC7 = 16;
  strcpy(algn_255FDB0, "LPR_OFFLINE_SAR_");
  byte_255FDDF = 20;
  strcpy((char *)&xmmword_255FDC8, "LPR_OFFLINE_REROUTE_");
  byte_255FDF7 = 16;
  strcpy(byte_255FDE0, "LPR_OFFLINE_SAR_");
  byte_255FE0F = 19;
  strcpy((char *)&xmmword_255FDF8, "SuggestFasterRoute_");
  qword_255FE10 = (char *)operator new(0x20uLL);
  xmmword_255FE18 = v280;
  strcpy(qword_255FE10, "AreaIncidentSaferReroute_");
  byte_255FE3F = 12;
  strcpy((char *)&qword_255FE28, "_Remove_Stop");
  byte_255FE57 = 13;
  strcpy((char *)&qword_255FE40, "_Remove_Stops");
  strcpy(&byte_255FE6F, "\t_Add_Stops");
  strcpy((char *)&qword_255FE58, "_Add_Stop");
  strcpy(&byte_255FE87, "\n_Change_Route");
  byte_255FE9F = 13;
  byte_255FEB7 = 15;
  strcpy((char *)&qword_255FEA0, "_Different_Stop");
  byte_255FECF = 16;
  strcpy((char *)&xmmword_255FEB8, "_Different_Stops");
  byte_255FEE7 = 15;
  strcpy((char *)&qword_255FED0, "_EV_Remove_Stop");
  byte_255FEFF = 16;
  strcpy((char *)&xmmword_255FEE8, "_EV_Remove_Stops");
  byte_255FF17 = 12;
  strcpy((char *)&qword_255FF00, "_EV_Add_Stop");
  byte_255FF2F = 13;
  strcpy((char *)&qword_255FF18, "_EV_Add_Stops");
  byte_255FF47 = 15;
  strcpy((char *)&qword_255FF30, "_EV_Low_Battery");
  byte_255FF5F = 14;
  strcpy((char *)&qword_255FF48, "_EV_Infeasible");
  byte_255FF77 = 15;
  strcpy((char *)&qword_255FF60, "_EV_Last_Chance");
  qword_255FF78 = (uint64_t)operator new(0x20uLL);
  unk_255FF80 = v281;
  strcpy((char *)qword_255FF78, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_255FE78;
  qword_255FF90 = (uint64_t)operator new(0x20uLL);
  unk_255FF98 = v280;
  strcpy((char *)qword_255FF90, "_EV_Low_Battery_Add_Stops");
  qword_255FFA8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_255FFB0 = v282;
  strcpy((char *)qword_255FFA8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_255FE87;
  if (byte_255FE87 >= 0) {
    size_t v190 = byte_255FE87;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    v196 = (char *)operator new(v194 + 1);
    qword_255FFC8 = v190 + 14;
    unk_255FFD0 = v195 | 0x8000000000000000;
    qword_255FFC0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_255FFC8) = 0;
    WORD1(qword_255FFC8) = 0;
    HIDWORD(qword_255FFC8) = 0;
    unk_255FFD0 = 0;
    byte_255FFD7 = v190 + 14;
    strcpy((char *)&qword_255FFC0, "_EV_Infe");
    v192 = (char *)&qword_255FFC8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_255FE70;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  v198 = (char *)operator new(0x20uLL);
  qword_255FFD8 = (uint64_t)v198;
  unk_255FFE0 = v281;
  *(void *)v198 = qword_255FF60;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_255FF60 + 7);
  *(void *)(v198 + 15) = qword_255FE58;
  v198[23] = word_255FE60;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    v200 = (uint64_t *)operator new(v201 + 1);
    qword_255FFF8 = v190 + 15;
    unk_2560000 = v202 | 0x8000000000000000;
    qword_255FFF0 = (uint64_t)v200;
  }
  else
  {
    v200 = &qword_255FFF0;
    qword_255FFF8 = 0;
    unk_2560000 = 0;
    qword_255FFF0 = 0;
    byte_2560007 = v190 + 15;
  }
  uint64_t *v200 = qword_255FF60;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_255FF60 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_255FE70;
    }
    else {
      v204 = (uint64_t *)qword_255FE70;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_256001F = 17;
  strcpy((char *)&xmmword_2560008, "_EV_Forced_Detour");
  qword_2560020 = (uint64_t)operator new(0x20uLL);
  unk_2560028 = v280;
  strcpy((char *)qword_2560020, "_EV_Higher_Arrival_Charge");
  qword_2560038 = (uint64_t)operator new(0x28uLL);
  unk_2560040 = xmmword_20B8FD0;
  strcpy((char *)qword_2560038, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2560067 = 16;
  strcpy(byte_2560050, "_EV_Out_Of_Range");
  qword_2560068 = (uint64_t)operator new(0x20uLL);
  unk_2560070 = v275;
  strcpy((char *)qword_2560068, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2560080, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2560096) = 22;
  qword_2560098 = (uint64_t)operator new(0x19uLL);
  unk_25600A0 = v282;
  strcpy((char *)qword_2560098, "_EV_Forced_Modify_Stops");
  byte_25600C7 = 19;
  strcpy(byte_25600B0, "_EV_Forced_Add_Stop");
  byte_25600DF = 20;
  strcpy((char *)&xmmword_25600C8, "_EV_Forced_Add_Stops");
  byte_25600F7 = 21;
  strcpy(byte_25600E0, "_EV_Battery_Info_Lost");
  qword_25600F8 = (uint64_t)operator new(0x20uLL);
  unk_2560100 = v280;
  strcpy((char *)qword_25600F8, "_EV_Battery_Info_Restored");
  qword_2560110 = (uint64_t)operator new(0x20uLL);
  unk_2560118 = v281;
  strcpy((char *)qword_2560110, "_EV_Towing_Not_Supported");
  qword_2560128 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2560130 = v271;
  strcpy((char *)qword_2560128, "_EV_Offline_to_Online_Transition");
  byte_2560157 = 15;
  strcpy((char *)&qword_2560140, "_EV_Offline_SAR");
  qword_2560158 = (uint64_t)operator new(0x20uLL);
  unk_2560160 = v279;
  strcpy((char *)qword_2560158, "_Offline_to_Online_New_Route");
  byte_2560187 = 12;
  strcpy((char *)&qword_2560170, "BannerButton");
  byte_256019F = 8;
  strcpy((char *)&qword_2560188, "_Dismiss");
  byte_25601B7 = 3;
  word_25601A0 = 20319;
  byte_25601A2 = 75;
  byte_25601A3 = 0;
  byte_25601CF = 11;
  strcpy((char *)&qword_25601B8, "_Still_Here");
  byte_25601E7 = 8;
  strcpy((char *)&qword_25601D0, "_Cleared");
  qmemcpy(&byte_25601FF, "\nBannerButton", 13);
  strcpy((char *)&qword_25601E8, "_No_Thanks");
  uint64_t v205 = qword_2560178;
  qword_2560210 = 0x1400000000000000;
  *(void *)algn_256020C = 0x7373696D7369445FLL;
  qword_2560228 = 0xF00000000000000;
  qword_2560220 = 0x4B4F5F6E6F7474;
  int v206 = byte_255FF17;
  if (byte_255FF17 >= 0) {
    size_t v207 = byte_255FF17;
  }
  else {
    size_t v207 = qword_255FF08;
  }
  unint64_t v208 = v207 + 12;
  qword_2560218 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2560238 = v207 + 12;
    unk_2560240 = v211 | 0x8000000000000000;
    qword_2560230 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2560238) = 0;
    HIWORD(qword_2560238) = 0;
    unk_2560240 = 0;
    byte_2560247 = v207 + 12;
    strcpy((char *)&qword_2560230, "BannerButton");
    v209 = (char *)&qword_2560238 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_255FF00;
  }
  else {
    v213 = (uint64_t *)qword_255FF00;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_255FF2F;
  if (byte_255FF2F >= 0) {
    size_t v215 = byte_255FF2F;
  }
  else {
    size_t v215 = unk_255FF20;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2560250 = v215 + 12;
    unk_2560258 = v219 | 0x8000000000000000;
    qword_2560248 = (uint64_t)v220;
    *(void *)v220 = qword_2560170;
    *((_DWORD *)v220 + 2) = qword_2560178;
    v217 = v220 + 12;
  }
  else
  {
    qword_2560250 = 0;
    unk_2560258 = 0;
    byte_256025F = v215 + 12;
    LODWORD(qword_2560250) = qword_2560178;
    qword_2560248 = qword_2560170;
    v217 = (char *)&qword_2560250 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_255FF18;
  }
  else {
    v221 = (uint64_t *)qword_255FF18;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_255FEE7;
  if (byte_255FEE7 >= 0) {
    size_t v223 = byte_255FEE7;
  }
  else {
    size_t v223 = unk_255FED8;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2560268 = v223 + 12;
    unk_2560270 = v227 | 0x8000000000000000;
    qword_2560260 = (uint64_t)v228;
    *(void *)v228 = qword_2560170;
    *((_DWORD *)v228 + 2) = qword_2560178;
    v225 = v228 + 12;
  }
  else
  {
    qword_2560268 = 0;
    unk_2560270 = 0;
    byte_2560277 = v223 + 12;
    LODWORD(qword_2560268) = qword_2560178;
    qword_2560260 = qword_2560170;
    v225 = (char *)&qword_2560268 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_255FED0;
  }
  else {
    v229 = (uint64_t *)qword_255FED0;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2560187;
  if (byte_2560187 >= 0) {
    size_t v231 = byte_2560187;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_255FEFF;
  if (byte_255FEFF >= 0) {
    size_t v233 = byte_255FEFF;
  }
  else {
    size_t v233 = *((void *)&xmmword_255FEE8 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2560278;
    qword_2560280 = 0;
    unk_2560288 = 0;
    qword_2560278 = 0;
    byte_256028F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2560280 = v233 + v231;
  unk_2560288 = v243 | 0x8000000000000000;
  qword_2560278 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2560170;
    }
    else {
      v236 = (uint64_t *)qword_2560170;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_255FEE8;
    }
    else {
      v238 = (long long *)xmmword_255FEE8;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_2560298 = v231 + 11;
    unk_25602A0 = v245 | 0x8000000000000000;
    qword_2560290 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_2560290;
    qword_2560298 = 0;
    unk_25602A0 = 0;
    qword_2560290 = 0;
    byte_25602A7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2560290 + 7) = *(_DWORD *)((char *)&qword_25601B8 + 7);
      qword_2560290 = qword_25601B8;
      BYTE3(qword_2560298) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2560170;
  }
  else {
    v246 = (uint64_t *)qword_2560170;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25601B8 + 7);
  *(void *)v247 = qword_25601B8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_25602A8;
    qword_25602B0 = 0;
    unk_25602B8 = 0;
    qword_25602A8 = 0;
    byte_25602BF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  v249 = (uint64_t *)operator new(v264 + 1);
  qword_25602B0 = v231 + 8;
  unk_25602B8 = v265 | 0x8000000000000000;
  qword_25602A8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2560170;
    }
    else {
      v250 = (uint64_t *)qword_2560170;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_25601D0;
  v251[8] = 0;
  int v252 = byte_25601FF;
  if (byte_25601FF >= 0) {
    size_t v253 = byte_25601FF;
  }
  else {
    size_t v253 = qword_25601F0;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_25602C0;
    qword_25602C8 = 0;
    unk_25602D0 = 0;
    qword_25602C0 = 0;
    byte_25602D7 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  v255 = (uint64_t *)operator new(v262 + 1);
  qword_25602C8 = v253 + v231;
  unk_25602D0 = v263 | 0x8000000000000000;
  qword_25602C0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2560170;
    }
    else {
      v256 = (uint64_t *)qword_2560170;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_25601E8;
    }
    else {
      v258 = (uint64_t *)qword_25601E8;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25602EF, "\n{newroute}");
  strcpy((char *)&qword_25602D8, "{roadname}");
  strcpy(&byte_2560307, "\n{count}");
  byte_256031F = 7;
  strcpy(&byte_2560337, "\n{dur}");
  strcpy((char *)&qword_2560320, "{duration}");
  byte_256034F = 5;
  qword_2560350 = (uint64_t)operator new(0x20uLL);
  unk_2560358 = v278;
  strcpy((char *)qword_2560350, "{PleaseProceedWithCaution}");
  byte_256037F = 15;
  strcpy((char *)&qword_2560368, "{UserRouteName}");
  byte_2560397 = 20;
  strcpy((char *)&xmmword_2560380, "{SuggestedRouteName}");
  byte_25603AF = 18;
  strcpy(byte_2560398, "Speed_Camera_Ahead");
  qword_25603B0 = (uint64_t)operator new(0x20uLL);
  unk_25603B8 = v277;
  strcpy((char *)qword_25603B0, "Red_Light_Camera_Ahead_Spoken");
  qword_25603C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25603D0 = v277;
  strcpy((char *)qword_25603C8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25603E0 = (uint64_t)operator new(0x28uLL);
  unk_25603E8 = v272;
  strcpy((char *)qword_25603E0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25603F8 = (uint64_t)operator new(0x28uLL);
  unk_2560400 = v267;
  strcpy((char *)qword_25603F8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2560410 = (uint64_t)operator new(0x20uLL);
  unk_2560418 = v279;
  strcpy((char *)qword_2560410, "Camera_Ahead_Multiple_Spoken");
  qword_2560428 = (uint64_t)operator new(0x30uLL);
  unk_2560430 = v268;
  strcpy((char *)qword_2560428, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2560440 = (char *)operator new(0x30uLL);
  strcpy(qword_2560440, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_256046F = 16;
  xmmword_2560448 = v268;
  strcpy(byte_2560458, "_Speed_Limit_Mph");
  byte_2560487 = 16;
  strcpy(algn_2560470, "_Speed_Limit_Kph");
  byte_256049F = 11;
  strcpy((char *)&qword_2560488, "Watch_Speed");
  byte_25604B7 = 4;
  strcpy((char *)&dword_25604A0, "_One");
  byte_25604CF = 4;
  strcpy((char *)&dword_25604B8, "_Two");
  byte_25604E7 = 4;
  strcpy((char *)&dword_25604D0, "_Few");
  byte_25604FF = 5;
  strcpy((char *)&dword_25604E8, "_Many");
  byte_2560517 = 6;
  strcpy((char *)&dword_2560500, "_Other");
  byte_256052F = 4;
  strcpy((char *)&dword_2560518, "_ONE");
  byte_2560547 = 7;
  strcpy((char *)&dword_2560530, "{Speed}");
  byte_256055F = 8;
  strcpy((char *)&qword_2560548, "Dismount");
  byte_2560577 = 4;
  strcpy((char *)&dword_2560560, "Walk");
  byte_256058F = 5;
  strcpy((char *)&dword_2560578, "Mount");
  byte_25605A7 = 7;
  strcpy((char *)&dword_2560590, "Remount");
  strcpy(&byte_25605BF, "\t_Crosswalk");
  strcpy((char *)&qword_25605A8, "Walk_Road");
  strcpy(&byte_25605D7, "\n_PLURAL");
  byte_25605EF = 7;
  strcpy(&byte_2560607, "\n{description1}");
  strcpy((char *)&qword_25605F0, "_SECONDARY");
  byte_256061F = 14;
  byte_2560637 = 14;
  strcpy((char *)&qword_2560620, "{description2}");
  byte_256064F = 21;
  strcpy((char *)&xmmword_2560638, "TWO_ROAD_DESCRIPTIONS");
  byte_2560667 = 17;
  strcpy((char *)&xmmword_2560650, "{SlopePercentage}");
  byte_256067F = 15;
  strcpy((char *)&qword_2560668, "_Protected_Lane");
  strcpy(&byte_2560697, "\n_Paved_Path");
  strcpy((char *)&qword_2560680, "_Bike_Path");
  byte_25606AF = 11;
  byte_25606C7 = 15;
  strcpy((char *)&qword_25606B0, "_Dedicated_Lane");
  byte_25606DF = 12;
  strcpy((char *)&qword_25606C8, "_Shared_Path");
  strcpy(&byte_25606F7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25606E0, "_Bike_Lane");
  byte_256070F = 12;
  byte_2560727 = 5;
  strcpy((char *)&dword_2560710, "_Path");
  byte_256073F = 6;
  strcpy((char *)&dword_2560728, "_Trail");
  strcpy(&byte_2560757, "\t_Plaza");
  strcpy((char *)&qword_2560740, "_Sidewalk");
  byte_256076F = 6;
  byte_2560787 = 15;
  strcpy((char *)&qword_2560770, "_Moving_Walkway");
  byte_256079F = 14;
  strcpy((char *)&qword_2560788, "Two_Stage_Turn");
  byte_25607B7 = 16;
  strcpy((char *)&xmmword_25607A0, "{OptionalPeriod}");
  byte_25607CF = 18;
  strcpy((char *)&xmmword_25607B8, "Advisory_Separator");
  byte_25607E7 = 6;
  strcpy((char *)&dword_25607D0, "Period");
  byte_25607FF = 21;
  strcpy((char *)&xmmword_25607E8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2560800, "Advisory_Title_Notices");
  HIBYTE(word_2560816) = 22;
  byte_256082F = 7;
  strcpy((char *)&dword_2560818, "_DETAIL");
  byte_2560847 = 17;
  strcpy((char *)&xmmword_2560830, "_LONG_REGION_LIST");
  byte_256085F = 16;
  strcpy((char *)&xmmword_2560848, "Advisory_Grouped");
  byte_2560877 = 11;
  strcpy((char *)&qword_2560860, "_Advisories");
  qword_2560878 = (uint64_t)operator new(0x20uLL);
  unk_2560880 = v275;
  strcpy((char *)qword_2560878, "Advisory_WILDFIRE_METADATA_");
  byte_25608A7 = 8;
  strcpy((char *)&qword_2560890, "Advisory");
  byte_25608BF = 13;
  strcpy((char *)&qword_25608A8, "MPR_NUM_STOPS");
  byte_25608D7 = 17;
  strcpy(byte_25608C0, "EV_CHARGE_STATION");
  byte_25608EF = 11;
  strcpy((char *)&qword_25608D8, "_NAMED_CITY");
  byte_2560907 = 5;
  strcpy((char *)&dword_25608F0, "_Stop");
  strcpy(&byte_256091F, "\n{StopsCount}");
  strcpy((char *)&qword_2560908, "{CityName}");
  byte_2560937 = 12;
  byte_256094F = 11;
  strcpy((char *)&qword_2560938, "_With_Other");
  byte_2560967 = 15;
  strcpy((char *)&qword_2560950, "{DepartureTime}");
  qword_2560968 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2560970 = v276;
  strcpy((char *)qword_2560968, "Ending_Charge_Station_Port_Availability");
  qword_2560980 = (uint64_t)operator new(0x28uLL);
  unk_2560988 = v269;
  strcpy((char *)qword_2560980, "Ending_Charge_Station_No_Availability");
  qword_2560998 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25609A0 = v272;
  strcpy((char *)qword_2560998, "Ending_Charge_Station_No_Real_Time");
  byte_25609C7 = 16;
  strcpy(&algn_25609A0[16], "{AvailablePorts}");
  byte_25609DF = 12;
  strcpy((char *)&qword_25609C8, "{TotalPorts}");
  byte_25609F7 = 14;
  strcpy((char *)&qword_25609E0, "{ManeuverIcon}");
  qword_25609F8 = (uint64_t)operator new(0x38uLL);
  unk_2560A00 = xmmword_20B9A60;
  strcpy((char *)qword_25609F8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2560A10 = (uint64_t)operator new(0x20uLL);
  unk_2560A18 = v275;
  strcpy((char *)qword_2560A10, "Walking_Destination_Unnamed");
  qword_2560A28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2560A30 = v277;
  strcpy((char *)qword_2560A28, "TrafficDelay_Label_Title_Sign");
  qword_2560A40 = (uint64_t)operator new(0x20uLL);
  unk_2560A48 = v279;
  strcpy((char *)qword_2560A40, "Special_Guidance_Instruction");
  byte_2560A6F = 2;
  strcpy((char *)&xmmword_2560A58, "CZ");
  byte_2560A87 = 3;
  LODWORD(xmmword_2560A70) = 5919811;
  *(_WORD *)&byte_2560A9F = 3;
  LODWORD(qword_2560A88) = 6243649;
  byte_2560AB7 = 0;
  byte_2560ACF = 7;
  strcpy((char *)&dword_2560AB8, "TRANSIT");
  byte_2560AE7 = 7;
  strcpy((char *)&dword_2560AD0, "OFFLINE");
  qword_2560AE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2560AF0 = v267;
  strcpy((char *)qword_2560AE8, "Advisory_Card_French_Climate_Law_Title");
  qword_2560B00 = (uint64_t)operator new(0x30uLL);
  unk_2560B08 = xmmword_20B93C0;
  strcpy((char *)qword_2560B00, "Advisory_Card_French_Climate_Law_Details");
  qword_2560B18 = (uint64_t)operator new(0x30uLL);
  unk_2560B20 = v273;
  strcpy((char *)qword_2560B18, "French_Climate_Law_Metadata_Weblink_Title");
  *(void *)&xmmword_2560B30 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_2560B30 + 8) = v279;
  strcpy((char *)xmmword_2560B30, "{ClimateLawLearnMoreWeblink}");
  byte_2560B5F = 3;
  dword_2560B48 = 4280902;
  *(void *)&xmmword_2560B60 = operator new(0x70uLL);
  *(long long *)((char *)&xmmword_2560B60 + 8) = xmmword_20E81E0;
  strcpy((char *)xmmword_2560B60, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  byte_2560B8F = 1;
  word_2560B78 = 65;
  byte_2560BA7 = 1;
  word_2560B90 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_2560C38 = 0u;
  xmmword_2560C48 = 0u;
  dword_2560C58 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2560C38, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2560C38, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_2560C38, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_2560C38, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_2560BBF = 8;
  strcpy((char *)&qword_2560BA8, "any_mode");
  byte_2560BD7 = 7;
  strcpy((char *)&dword_2560BC0, "cycling");
  byte_2560BEF = 7;
  strcpy((char *)&dword_2560BD8, "driving");
  byte_2560C07 = 7;
  strcpy((char *)&dword_2560BF0, "walking");
  qword_2560C08 = 0;
  unk_2560C10 = 0;
  qword_2560C18 = 0;
  v259 = (char *)operator new(9uLL);
  *(void *)v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_2560C08 = (uint64_t)v259;
  unk_2560C10 = v259 + 9;
  qword_2560C18 = (uint64_t)(v259 + 9);
  qword_2560C20 = 0;
  qword_2560C28 = 0;
  unk_2560C30 = 0;
  v260 = (char *)operator new(9uLL);
  qword_2560C28 = (uint64_t)(v260 + 9);
  unk_2560C30 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_2560C20 = (uint64_t)v260;
  return result;
}

void sub_5002F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_50064C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_5007B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(a13);
  }
  sub_651C4(v25);
  sub_4BCED0(v24);
  _Unwind_Resume(a1);
}

double sub_50081C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)a2 != 50) {
    goto LABEL_25;
  }
  if (sub_605454(a2 + 32))
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 1160);
    }
    if (v6) {
      goto LABEL_25;
    }
  }
  BOOL v7 = *(void *)(a2 + 1176) == *(void *)(a2 + 1184) && *(_DWORD *)(a2 + 1200) == 2;
  BOOL v8 = v7 && *(_DWORD *)(a2 + 1256) == 12;
  if (!v8 || *(void *)(a2 + 1328) != *(void *)(a2 + 1336) || sub_5060B0((_DWORD *)a2)) {
    goto LABEL_25;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 1399);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 1384);
  }
  if (!v9 && *(_DWORD *)(a2 + 1400) == -1 && *(_DWORD *)(a2 + 1404) == -1)
  {
    double result = 0.0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
    *(unsigned char *)(a3 + 64) = 1;
  }
  else
  {
    if (!sub_605454(a2 + 32)) {
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v11 = *(unsigned __int8 *)(a2 + 1175);
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a2 + 1160);
    }
    if (v11)
    {
      sub_500A64(a2, a3);
    }
    else
    {
LABEL_29:
      if (*(void *)(a2 + 1176) == *(void *)(a2 + 1184))
      {
        if (*(_DWORD *)(a2 + 1200) == 2)
        {
          if (*(_DWORD *)(a2 + 1256) == 12)
          {
            uint64_t v12 = *(unsigned __int8 *)(a2 + 1399);
            if ((v12 & 0x80u) != 0) {
              uint64_t v12 = *(void *)(a2 + 1384);
            }
            if (v12)
            {
              sub_6352AC(a3, a2 + 1376);
            }
            else
            {
              return sub_50125C((int *)a2, a3);
            }
          }
          else
          {
            return sub_500EF8(a1, a2, a3);
          }
        }
        else
        {
          sub_500DBC(a2, a3);
        }
      }
      else
      {
        sub_500CAC(a1, a2, a3);
      }
    }
  }
  return result;
}

void sub_500A64(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1144))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v4 = (char *)(a1 + 712);
  BOOL v5 = sub_6043CC(a1 + 712, 0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (v5)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B93B0;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ONE_AREA_INCIDENT_NOTICE_DATA_SOURCE");
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!*(unsigned char *)(a1 + 1144))
    {
      BOOL v7 = __cxa_allocate_exception(8uLL);
      *BOOL v7 = &off_2439078;
    }
    sub_604410(v4, 0, (uint64_t)&__p);
    sub_6358A0(a2, (long long *)&qword_2563390, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20E1380;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ROUTE_AFFECTED_BY_ONE_AREA_INCIDENT");
    sub_6351E8((char **)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6358A0(a2, (long long *)&qword_25632D0, (const std::string *)(a1 + 472));
  }
}

void sub_500C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4D4880(v15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_500CAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_503BC8(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1184) - *(void *)(a2 + 1176)) >> 3), (const void **)&xmmword_25636C0, *(_DWORD *)(a1 + 968), 0, &v8);
  if (byte_2564747 >= 0) {
    int v4 = (const std::string::value_type *)&qword_2564730;
  }
  else {
    int v4 = (const std::string::value_type *)qword_2564730;
  }
  if (byte_2564747 >= 0) {
    std::string::size_type v5 = byte_2564747;
  }
  else {
    std::string::size_type v5 = *(void *)&byte_2564738;
  }
  uint64_t v6 = std::string::insert(&v8, 0, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  sub_6352AC(a3, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_500D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_500DBC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 1200);
  if (v3 != 1)
  {
    if (!v3)
    {
      std::string __p = operator new(0x19uLL);
      long long v5 = xmmword_20B9250;
      strcpy((char *)__p, "Advisory_Tolls_required");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_6;
    }
LABEL_8:
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    return;
  }
  if (*(void *)(a1 + 1208) == *(void *)(a1 + 1216)) {
    goto LABEL_8;
  }
  std::string __p = operator new(0x38uLL);
  long long v5 = xmmword_20B9A60;
  strcpy((char *)__p, "Advisory_Toll_congestion_zone_required_new_style");
  sub_6352AC(a2, (uint64_t)&__p);
LABEL_6:
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_500ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_500EF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(*(_DWORD *)(a2 + 1256))
  {
    case 0:
      std::string __p = operator new(0x30uLL);
      long long v9 = xmmword_20E1380;
      strcpy((char *)__p, "EV_ROUTE_NO_STOPS_ARRIVAL_BATTERY_PERCENTAGE");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 1:
      uint64_t v6 = a2 + 1304;
      uint64_t v7 = *(void *)(a2 + 1288);
      sub_504310(a1, v7, v6, a3);
      return result;
    case 2:
    case 3:
      std::string __p = operator new(0x30uLL);
      long long v9 = xmmword_20B93B0;
      strcpy((char *)__p, "Advisory_Route_Planning_Title_EV_Slow_Charger");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 4:
    case 5:
      std::string __p = operator new(0x30uLL);
      long long v9 = xmmword_20B93B0;
      strcpy((char *)__p, "Advisory_Route_Planning_Title_EV_Adapter_Plug");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 7:
      std::string __p = operator new(0x38uLL);
      long long v9 = xmmword_20B9AC0;
      strcpy((char *)__p, "Advisory_Route_Planning_Title_EV_Low_Arrival_Battery");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 8:
      std::string __p = operator new(0x38uLL);
      long long v9 = xmmword_20B99E0;
      strcpy((char *)__p, "Advisory_Route_Planning_Title_EV_No_Chargers_In_Range");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 9:
      long long v5 = (int *)(a2 + 1296);
      sub_5049B0(v5, 1, a3);
      return result;
    case 0xA:
      std::string __p = operator new(0x38uLL);
      long long v9 = xmmword_20B99E0;
      strcpy((char *)__p, "Advisory_Route_Planning_Title_EV_Towing_Affects_Range");
      sub_6352AC(a3, (uint64_t)&__p);
      goto LABEL_12;
    case 0xB:
      std::string __p = operator new(0x28uLL);
      long long v9 = xmmword_20B9240;
      strcpy((char *)__p, "Advisory_EV_Outside_Preferred_Network");
      sub_6352AC(a3, (uint64_t)&__p);
LABEL_12:
      if (SHIBYTE(v9) < 0) {
        operator delete(__p);
      }
      break;
    default:
      double result = 0.0;
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 56) = 1065353216;
      *(unsigned char *)(a3 + 64) = 1;
      break;
  }
  return result;
}

void sub_5011EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_501250@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_6352AC(a2, a1 + 1376);
}

double sub_50125C@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  memset(&v6, 0, sizeof(v6));
  int v4 = "Advisory_CLOSED_SUMMER";
  switch(v3)
  {
    case 0:
      int v4 = "Advisory_Could_not_avoid_tolls";
      goto LABEL_51;
    case 1:
      int v4 = "Advisory_Could_not_avoid_highways";
      goto LABEL_51;
    case 2:
      int v4 = "Advisory_Could_not_avoid_tolls_and_highways";
      goto LABEL_51;
    case 3:
      int v4 = "Advisory_Faster_alternate_with_tolls";
      goto LABEL_51;
    case 4:
      int v4 = "Advisory_Faster_alternate_with_highways";
      goto LABEL_51;
    case 5:
      int v4 = "Advisory_Faster_alternate_with_tolls_and_highways";
      goto LABEL_51;
    case 6:
      int v4 = "Advisory_Faster_alternate_with_hills";
      goto LABEL_51;
    case 7:
      int v4 = "Advisory_Faster_alternate_with_stairs";
      goto LABEL_51;
    case 8:
      int v4 = "Advisory_Faster_alternate_with_busy_roads";
      goto LABEL_51;
    case 9:
      int v4 = "Advisory_Faster_alternate_with_hills_and_stairs";
      goto LABEL_51;
    case 10:
      int v4 = "Advisory_Faster_alternate_with_hills_and_busy_roads";
      goto LABEL_51;
    case 11:
      int v4 = "Advisory_Faster_alternate_with_hills_stairs_and_busy_roads";
      goto LABEL_51;
    case 12:
      int v4 = "Advisory_Faster_alternate_with_stairs_and_busy_roads";
      goto LABEL_51;
    case 13:
      int v4 = "Advisory_Highways_required";
      goto LABEL_51;
    case 14:
      int v4 = "Advisory_Hills_Included";
      goto LABEL_51;
    case 15:
      int v4 = "Advisory_Busy_Roads_included";
      goto LABEL_51;
    case 16:
      int v4 = "Advisory_Stairs_Included";
      goto LABEL_51;
    case 17:
      int v4 = "Advisory_ROUTE_VIOLATES_TIME_BASED_RESTRICTION";
      goto LABEL_51;
    case 18:
      int v4 = "Advisory_CLOSED_WINTER";
      goto LABEL_51;
    case 19:
      goto LABEL_51;
    case 20:
      int v4 = "Advisory_CLOSED_SEASONAL";
      goto LABEL_51;
    case 21:
      int v4 = "TOLL";
      goto LABEL_51;
    case 22:
      int v4 = "Advisory_INTERNATIONAL";
      goto LABEL_51;
    case 23:
      int v4 = "Advisory_RESTRICTED";
      goto LABEL_51;
    case 24:
      int v4 = "Advisory_4X4_REQUIRED";
      goto LABEL_51;
    case 25:
      int v4 = "Advisory_UNPAVED";
      goto LABEL_51;
    case 26:
      int v4 = "Advisory_ROUTE_CLIPPED_ORIG";
      goto LABEL_51;
    case 27:
      int v4 = "Advisory_ROUTE_CLIPPED_DEST";
      goto LABEL_51;
    case 28:
      int v4 = "Advisory_ROUTE_CLIPPED_BOTH";
      goto LABEL_51;
    case 29:
      int v4 = "Advisory_STARTS_ON_CLOSEST_ROAD";
      goto LABEL_51;
    case 30:
      int v4 = "Advisory_ENDS_ON_CLOSEST_ROAD";
      goto LABEL_51;
    case 31:
      int v4 = "Advisory_STARTS_AND_ENDS_ON_CLOSEST_ROAD";
      goto LABEL_51;
    case 32:
      int v4 = "Advisory_PARK_AND_WALK";
      goto LABEL_51;
    case 33:
      int v4 = "Advisory_FERRY";
      goto LABEL_51;
    case 34:
      int v4 = "Advisory_RAILWAY_SHUTTLE";
      goto LABEL_51;
    case 35:
      int v4 = "Advisory_TBT_UNAVAILABLE";
      goto LABEL_51;
    case 36:
      int v4 = "Advisory_STAIRS_REQUIRED";
      goto LABEL_51;
    case 37:
      int v4 = "Advisory_WALKING_REQUIRED";
      goto LABEL_51;
    case 38:
      int v4 = "Advisory_PEDESTRIAN_SHARED_SPACE";
      goto LABEL_51;
    case 39:
      int v4 = "Advisory_Route_Crosses_Timezone";
      goto LABEL_51;
    case 40:
      int v4 = "Annotation_Title_Escalator";
      goto LABEL_51;
    case 41:
      int v4 = "Annotation_Title_Ferry";
      goto LABEL_51;
    case 42:
      int v4 = "Annotation_Title_RailwayShuttle";
      goto LABEL_51;
    case 43:
      int v4 = "HILLS";
      goto LABEL_51;
    case 44:
      int v4 = "Annotation_Title_Stairs";
      goto LABEL_51;
    case 45:
      int v4 = "Advisory_Based_On_Predicted_Traffic";
      goto LABEL_51;
    case 46:
      int v4 = "Advisory_EV_Unavailable_Offline";
      goto LABEL_51;
    case 47:
      int v4 = "Regional_Advisory_EBike_Restrictions_Offline";
      goto LABEL_51;
    case 48:
      int v4 = "Advisory_Reduce_Environment_Impact";
      goto LABEL_51;
    case 49:
      int v4 = "Advisory_FORD_CROSSING";
LABEL_51:
      std::string::assign(&v6, v4);
      goto LABEL_52;
    case 50:
      double result = 0.0;
      *(void *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 56) = 1065353216;
      *(unsigned char *)(a2 + 64) = 1;
      return result;
    default:
LABEL_52:
      sub_6352AC(a2, (uint64_t)&v6);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      return result;
  }
}

void sub_50156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_501654@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 1256) == 12)
  {
    if (!sub_605454(a1 + 32)) {
      goto LABEL_12;
    }
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1175);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a1 + 1160);
    }
    if (v4)
    {
      sub_5019A4(a1, a2);
    }
    else
    {
LABEL_12:
      double result = 0.0;
      *(void *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 56) = 1065353216;
      *(unsigned char *)(a2 + 64) = 1;
    }
  }
  else
  {
    sub_501710(a1, a2);
  }
  return result;
}

void sub_501710(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 1256))
  {
    case 2:
    case 3:
      std::string __p = operator new(0x28uLL);
      long long v4 = xmmword_20B93A0;
      strcpy((char *)__p, "Advisory_Card_Title_EV_Slow_Charger");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_10;
    case 4:
    case 5:
      std::string __p = operator new(0x28uLL);
      long long v4 = xmmword_20B93A0;
      strcpy((char *)__p, "Advisory_Card_Title_EV_Adapter_Plug");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_10;
    case 7:
      std::string __p = operator new(0x30uLL);
      long long v4 = xmmword_20B9A40;
      strcpy((char *)__p, "Advisory_Card_Title_EV_Low_Arrival_Battery");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_10;
    case 8:
      std::string __p = operator new(0x38uLL);
      long long v4 = xmmword_20B99F0;
      strcpy((char *)__p, "Advisory_Card_Title_EV_No_Chargers_Near_Destination");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_10;
    case 9:
      std::string __p = operator new(0x30uLL);
      long long v4 = xmmword_20B93D0;
      strcpy((char *)__p, "Advisory_Card_Title_EV_Stale_Battery_Info");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_10;
    case 0xA:
      std::string __p = operator new(0x30uLL);
      long long v4 = xmmword_20B93E0;
      strcpy((char *)__p, "Advisory_Card_Title_EV_Towing_Affects_Range");
      sub_6352AC(a2, (uint64_t)&__p);
LABEL_10:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p);
      }
      break;
    default:
      *(void *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 56) = 1065353216;
      *(unsigned char *)(a2 + 64) = 1;
      break;
  }
}

void sub_501950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5019A4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
  strcpy(__p.__r_.__value_.__l.__data_, "One_area_incident_included");
  sub_6351E8((char **)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a1 + 1144)) {
    goto LABEL_12;
  }
  if (!sub_604340(a1 + 712, 0))
  {
    if (*(char *)(a1 + 495) < 0) {
      sub_4200(&__p, *(void **)(a1 + 472), *(void *)(a1 + 480));
    }
    else {
      std::string __p = *(std::string *)(a1 + 472);
    }
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 1144))
  {
LABEL_12:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_604384((char *)(a1 + 712), 0, (uint64_t)&__p);
LABEL_10:
  sub_6358A0(a2, (long long *)&qword_25632D0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_501B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(v14);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

void sub_501B78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 1256) == 12)
  {
    if (!sub_605454(a2 + 32)) {
      goto LABEL_13;
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 1160);
    }
    if (v6)
    {
      if (*(unsigned char *)(a1 + 1544))
      {
        sub_502688(a1, a2, a3);
      }
      else
      {
        sub_501F68(a1, a2, a3);
      }
    }
    else
    {
LABEL_13:
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 56) = 1065353216;
      *(unsigned char *)(a3 + 64) = 1;
    }
  }
  else
  {
    sub_501C84(a2, a3);
  }
}

void sub_501C84(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 1256))
  {
    case 2:
      std::string __p = operator new(0x28uLL);
      long long v5 = xmmword_20B9390;
      strcpy((char *)__p, "Advisory_Details_EV_Slow_Charger");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 3:
      std::string __p = operator new(0x30uLL);
      long long v5 = xmmword_20B93D0;
      strcpy((char *)__p, "Advisory_Details_EV_Multiple_Slow_Charger");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 4:
      std::string __p = operator new(0x28uLL);
      long long v5 = xmmword_20B9390;
      strcpy((char *)__p, "Advisory_Details_EV_Adapter_Plug");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 5:
      std::string __p = operator new(0x30uLL);
      long long v5 = xmmword_20B93D0;
      strcpy((char *)__p, "Advisory_Details_EV_Multiple_Adapter_Plug");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 7:
      std::string __p = operator new(0x28uLL);
      long long v5 = xmmword_20B9960;
      strcpy((char *)__p, "Advisory_Details_EV_Low_Arrival_Battery");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 8:
      std::string __p = operator new(0x38uLL);
      long long v5 = xmmword_20B9A60;
      strcpy((char *)__p, "Advisory_Details_EV_No_Chargers_Near_Destination");
      sub_6352AC(a2, (uint64_t)&__p);
      goto LABEL_14;
    case 9:
      int v3 = (int *)(a1 + 1296);
      sub_5049B0(v3, 0, a2);
      return;
    case 0xA:
      std::string __p = operator new(0x30uLL);
      long long v5 = xmmword_20B93C0;
      strcpy((char *)__p, "Advisory_Details_EV_Towing_Affects_Range");
      sub_6352AC(a2, (uint64_t)&__p);
LABEL_14:
      if (SHIBYTE(v5) < 0) {
        operator delete(__p);
      }
      break;
    default:
      *(void *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 56) = 1065353216;
      *(unsigned char *)(a2 + 64) = 1;
      break;
  }
}

void sub_501F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_501F68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  if (!*(unsigned char *)(a2 + 1144))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v6 = (char *)(a2 + 712);
  if (!sub_604458(a2 + 712, 0))
  {
    if (!*(unsigned char *)(a2 + 1144))
    {
      size_t v25 = __cxa_allocate_exception(8uLL);
      void *v25 = &off_2439078;
    }
    uint64_t v7 = *(void *)(a2 + 1120);
    if (*(char *)(v7 + 207) < 0)
    {
      if (*(void *)(v7 + 192)) {
        goto LABEL_10;
      }
    }
    else if (*(unsigned char *)(v7 + 207))
    {
LABEL_10:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B99F0;
      strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ROUTE_AFFECTED_BY_ONE_AREA_INCIDENT_DETAIL");
      sub_635560(a3, (uint64_t)&__p);
      std::string v8 = (const std::string *)(v7 + 184);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_6358A0(a3, &xmmword_25632E8, v8);
      goto LABEL_28;
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      long long v9 = sub_188FC78(&__p, (uint64_t)"Empty localized area name for area incident: ", 45);
      int v10 = *(char *)(a2 + 95);
      if (v10 >= 0) {
        uint64_t v11 = a2 + 72;
      }
      else {
        uint64_t v11 = *(void *)(a2 + 72);
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a2 + 95);
      }
      else {
        uint64_t v12 = *(void *)(a2 + 80);
      }
      sub_188FC78(v9, v11, v12);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v27, 3u);
      if (v28 < 0) {
        operator delete(v27);
      }
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
      if (v33 < 0) {
        operator delete(v32);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ROUTE_AFFECTED_BY_ONE_AREA_INCIDENT_FALLBACK_DETAIL");
    sub_635560(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_28:
    if (*(unsigned char *)(a2 + 1144))
    {
      if (!sub_604340((uint64_t)v6, 0))
      {
        if (*(char *)(a2 + 495) < 0) {
          sub_4200(&__p, *(void **)(a2 + 472), *(void *)(a2 + 480));
        }
        else {
          std::string __p = *(std::string *)(a2 + 472);
        }
        goto LABEL_35;
      }
      if (*(unsigned char *)(a2 + 1144))
      {
        sub_604384(v6, 0, (uint64_t)&__p);
LABEL_35:
        sub_6358A0(a3, (long long *)&qword_25632D0, &__p);
        goto LABEL_36;
      }
    }
    uint64_t v24 = __cxa_allocate_exception(8uLL);
    *uint64_t v24 = &off_2439078;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B93B0;
  strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ONE_AREA_INCIDENT_DETAIL_DATA_SOURCE");
  sub_635560(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a2 + 1144))
  {
    unint64_t v26 = __cxa_allocate_exception(8uLL);
    *unint64_t v26 = &off_2439078;
  }
  sub_60449C(v6, 0, (uint64_t)&__p);
  sub_6358A0(a3, (long long *)&qword_2563390, &__p);
LABEL_36:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_5058D8(a1, a2, (uint64_t)&__p);
  size_t v13 = (uint64_t *)nullsub_1(&__p);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    do
    {
      sub_635560(a3, v14);
      v14 += 24;
    }
    while (v14 != v15);
  }
  for (uint64_t i = sub_5231C((uint64_t)&__p) + 16; ; sub_635C08(a3, (long long *)(i + 16), i + 40, 0))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }
  uint64_t v17 = v31;
  if (v31)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = v30;
  long long v30 = 0;
  if (v19) {
    operator delete(v19);
  }
  std::string::size_type v20 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    long long v22 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v20);
      long long v22 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v20;
    operator delete(v22);
  }
}

void sub_50252C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_4D4880(v21);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_4D4880(v21);
  _Unwind_Resume(a1);
}

void sub_5025A8(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_5025C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_4D4880(v18);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v18);
  _Unwind_Resume(a1);
}

void sub_5025E8(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_5025FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4D4880((void **)va);
  sub_4D4880(v5);
  _Unwind_Resume(a1);
}

void sub_502638(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_50264C(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_502660(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_502688(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  if (!*(unsigned char *)(a2 + 1144))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v6 = (char *)(a2 + 712);
  BOOL v7 = sub_604458(a2 + 712, 0);
  uint64_t v8 = *(void *)(a2 + 888);
  if (*(char *)(a2 + 903) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 903);
  }
  if (!v7)
  {
    if (v8)
    {
      int v9 = byte_2560D37;
      if (byte_2560D37 >= 0) {
        size_t v10 = byte_2560D37;
      }
      else {
        size_t v10 = qword_2560D28;
      }
      unint64_t v11 = v10 + 70;
      if (v10 + 70 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v11 > 0x16)
      {
        uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v17 = v11 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_p = (std::string *)operator new(v17 + 1);
        __p.__r_.__value_.__l.__size_ = v10 + 70;
        __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        if (!v10) {
          goto LABEL_33;
        }
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v10 + 70;
      }
      if (v9 >= 0) {
        uint64_t v19 = &qword_2560D20;
      }
      else {
        uint64_t v19 = (uint64_t *)qword_2560D20;
      }
      memmove(p_p, v19, v10);
LABEL_33:
      strcpy((char *)p_p + v10, "Advisory_ONE_AREA_INCIDENT_DETAIL_ROUTING_TEMPLATE_AND_METADATA_SOURCE");
      sub_635560(a3, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_6358A0(a3, &xmmword_2563318, (const std::string *)(a2 + 880));
      goto LABEL_45;
    }
    int v13 = byte_2560D37;
    if (byte_2560D37 >= 0) {
      size_t v14 = byte_2560D37;
    }
    else {
      size_t v14 = qword_2560D28;
    }
    unint64_t v15 = v14 + 50;
    if (v14 + 50 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v15 > 0x16)
    {
      uint64_t v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v20 = v15 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v16 = (std::string *)operator new(v20 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 50;
      __p.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      if (!v14) {
        goto LABEL_43;
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      uint64_t v16 = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 50;
    }
    if (v13 >= 0) {
      long long v22 = &qword_2560D20;
    }
    else {
      long long v22 = (uint64_t *)qword_2560D20;
    }
    memmove(v16, v22, v14);
LABEL_43:
    strcpy((char *)v16 + v14, "Advisory_ONE_AREA_INCIDENT_DETAIL_ROUTING_TEMPLATE");
    sub_635560(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_45:
    if (*(unsigned char *)(a2 + 1144))
    {
      if (!sub_604340((uint64_t)v6, 0))
      {
        if (*(char *)(a2 + 495) < 0) {
          sub_4200(&__p, *(void **)(a2 + 472), *(void *)(a2 + 480));
        }
        else {
          std::string __p = *(std::string *)(a2 + 472);
        }
        goto LABEL_52;
      }
      if (*(unsigned char *)(a2 + 1144))
      {
        sub_604384(v6, 0, (uint64_t)&__p);
LABEL_52:
        sub_6358A0(a3, (long long *)&qword_25632D0, &__p);
        goto LABEL_53;
      }
    }
    size_t v54 = __cxa_allocate_exception(8uLL);
    *size_t v54 = &off_2439078;
  }
  if (v8)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20E8240;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ONE_AREA_INCIDENT_DETAIL_DATA_SOURCE_AND_METADATA_SOURCE");
    sub_635560(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_6358A0(a3, &xmmword_2563318, (const std::string *)(a2 + 880));
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B93B0;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ONE_AREA_INCIDENT_DETAIL_DATA_SOURCE");
    sub_635560(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!*(unsigned char *)(a2 + 1144))
  {
    unint64_t v55 = __cxa_allocate_exception(8uLL);
    *unint64_t v55 = &off_2439078;
  }
  sub_60449C(v6, 0, (uint64_t)&__p);
  sub_6358A0(a3, (long long *)&qword_2563390, &__p);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v60 = 0;
  std::string::size_type v61 = 0;
  unint64_t v62 = 0;
  if (!*(unsigned char *)(a2 + 1144))
  {
    int v53 = __cxa_allocate_exception(8uLL);
    *int v53 = &off_2439078;
  }
  uint64_t v23 = *(void *)(a2 + 1120);
  uint64_t v24 = *(void *)(a2 + 1128);
  if (v23 == v24)
  {
    size_t v25 = 0;
    unint64_t v26 = 0;
LABEL_75:
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 3);
    goto LABEL_76;
  }
  do
  {
    uint64_t v28 = *(unsigned __int8 *)(v23 + 207);
    int v29 = (char)v28;
    if ((v28 & 0x80u) != 0) {
      uint64_t v28 = *(void *)(v23 + 192);
    }
    if (v28)
    {
      long long v30 = (void **)(v23 + 184);
      if (v29 < 0)
      {
        sub_4200(&__p, *v30, *(void *)(v23 + 192));
      }
      else
      {
        long long v31 = *(_OWORD *)v30;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v23 + 200);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      }
      size_t v32 = v61;
      if ((unint64_t)v61 < v62)
      {
        long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v61 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *size_t v32 = v27;
        std::string::size_type v61 = (char *)v32 + 24;
      }
      else
      {
        std::string::size_type v61 = sub_6E8C4(&v60, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    v23 += 256;
  }
  while (v23 != v24);
  size_t v25 = v60;
  unint64_t v26 = v61;
  if (v60 == v61) {
    goto LABEL_75;
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (unsigned char *)v60) >> 3);
  if (v33 <= 5)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9960;
    strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ROUTE_AFFECTED_BY_AREAS_DETAIL");
    sub_635560(a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&__p, "{AffectedRegions}");
    sub_65214((id **)(a1 + 1536), (uint64_t **)&v60, &v59);
    sub_6358A0(a3, (long long *)&__p, &v59);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    goto LABEL_88;
  }
LABEL_76:
  if (v33 < 6) {
    goto LABEL_90;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
  strcpy(__p.__r_.__value_.__l.__data_, "Advisory_ROUTE_AFFECTED_BY_AREAS_FALLBACK_DETAIL");
  sub_635560(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "{AffectedRegion1}");
  uint64_t v34 = (const std::string *)sub_4D4928(&v60, 0);
  sub_6358A0(a3, (long long *)&__p, v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "{AffectedRegion2}");
  long long v35 = (const std::string *)sub_4D4928(&v60, 1uLL);
  sub_6358A0(a3, (long long *)&__p, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "{AffectedRegion3}");
  float v36 = (const std::string *)sub_4D4928(&v60, 2uLL);
  sub_6358A0(a3, (long long *)&__p, v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "{AffectedRegion4}");
  long long v37 = (const std::string *)sub_4D4928(&v60, 3uLL);
  sub_6358A0(a3, (long long *)&__p, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "{AffectedRegion5}");
  uint64_t v38 = (const std::string *)sub_4D4928(&v60, 4uLL);
  sub_6358A0(a3, (long long *)&__p, v38);
LABEL_88:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_90:
  sub_5058D8(a1, a2, (uint64_t)&__p);
  uint64_t v39 = (uint64_t *)nullsub_1(&__p);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  if (*v39 != v41)
  {
    do
    {
      sub_635560(a3, v40);
      v40 += 24;
    }
    while (v40 != v41);
  }
  for (uint64_t i = sub_5231C((uint64_t)&__p) + 16; ; sub_635C08(a3, (long long *)(i + 16), i + 40, 0))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }
  size_t v43 = v58;
  if (v58)
  {
    do
    {
      unint64_t v44 = (void *)*v43;
      sub_4F4B48((uint64_t)(v43 + 2));
      operator delete(v43);
      size_t v43 = v44;
    }
    while (v44);
  }
  int64_t v45 = v57;
  int64_t v57 = 0;
  if (v45) {
    operator delete(v45);
  }
  std::string::size_type v46 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    uint64_t v48 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v46);
      uint64_t v48 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v46;
    operator delete(v48);
  }
  int64_t v49 = (char *)v60;
  if (v60)
  {
    long long v50 = v61;
    int v51 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*(v50 - 1) < 0) {
          operator delete(*((void **)v50 - 3));
        }
        v50 -= 24;
      }
      while (v50 != v49);
      int v51 = v60;
    }
    std::string::size_type v61 = v49;
    operator delete(v51);
  }
}

void sub_503038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(v28);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v28);
  _Unwind_Resume(a1);
}

double sub_5031BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!sub_605454(a2 + 32)) {
    goto LABEL_8;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 1160);
  }
  if (v6)
  {
    sub_50325C(a1, a2, a3);
  }
  else
  {
LABEL_8:
    double result = 0.0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
    *(unsigned char *)(a3 + 64) = 1;
  }
  return result;
}

void sub_50325C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  if (!*(unsigned char *)(a1 + 1544))
  {
    if (!*(unsigned char *)(a2 + 1144))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v5 = *(unsigned __int8 *)(a2 + 903);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a2 + 888);
    }
    if (v5)
    {
      std::string __p = operator new(0x28uLL);
      long long v25 = xmmword_20E12D0;
      strcpy((char *)__p, "Advisory_AREA_INCIDENT_METADATA_SOURCE");
      sub_635560(a3, (uint64_t)&__p);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
      sub_6358A0(a3, &xmmword_2563318, (const std::string *)(a2 + 880));
    }
    else if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      uint64_t v6 = sub_188FC78(&__p, (uint64_t)"Empty localized area incident source for area incident: ", 56);
      int v7 = *(char *)(a2 + 95);
      if (v7 >= 0) {
        uint64_t v8 = a2 + 72;
      }
      else {
        uint64_t v8 = *(void *)(a2 + 72);
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a2 + 95);
      }
      else {
        uint64_t v9 = *(void *)(a2 + 80);
      }
      sub_188FC78(v6, v8, v9);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v22, 3u);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (v27 < 0) {
        operator delete(v26);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  if (!*(unsigned char *)(a2 + 1144))
  {
    uint64_t v20 = __cxa_allocate_exception(8uLL);
    *uint64_t v20 = &off_2439078;
  }
  uint64_t v10 = *(void *)(a2 + 1120);
  if (*(char *)(v10 + 231) < 0)
  {
    if (*(void *)(v10 + 216)) {
      goto LABEL_29;
    }
  }
  else if (*(unsigned char *)(v10 + 231))
  {
    goto LABEL_29;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 927);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 912);
  }
  if (v11)
  {
LABEL_29:
    if ((*(unsigned char *)(v10 + 231) & 0x80) != 0)
    {
      if (*(void *)(v10 + 216))
      {
LABEL_31:
        if (*(char *)(v10 + 255) < 0)
        {
          if (*(void *)(v10 + 240)) {
            goto LABEL_33;
          }
        }
        else if (*(unsigned char *)(v10 + 255))
        {
LABEL_33:
          std::string __p = operator new(0x28uLL);
          long long v25 = xmmword_20B9960;
          strcpy((char *)__p, "Advisory_AREA_INCIDENT_METADATA_WEBLINK");
          sub_635560(a3, (uint64_t)&__p);
          goto LABEL_55;
        }
        std::string __p = operator new(0x30uLL);
        long long v25 = xmmword_20E1380;
        strcpy((char *)__p, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK");
        sub_635560(a3, (uint64_t)&__p);
LABEL_55:
        if (SHIBYTE(v25) < 0) {
          operator delete(__p);
        }
        return;
      }
    }
    else if (*(unsigned char *)(v10 + 231))
    {
      goto LABEL_31;
    }
    uint64_t v12 = *(unsigned __int8 *)(a2 + 951);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 936);
    }
    if (v12)
    {
      std::string __p = operator new(0x30uLL);
      long long v25 = xmmword_20B9380;
      strcpy((char *)__p, "Advisory_AREA_INCIDENT_METADATA_GENERIC_WEBLINK");
    }
    else
    {
      std::string __p = operator new(0x30uLL);
      long long v25 = xmmword_20E1380;
      strcpy((char *)__p, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK");
    }
    sub_635560(a3, (uint64_t)&__p);
    goto LABEL_55;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&__p);
    int v13 = sub_188FC78(&__p, (uint64_t)"Neither area weblink nor generic weblink were valid for area incident: ", 71);
    uint64_t v16 = *(void *)(a2 + 72);
    uint64_t v15 = a2 + 72;
    uint64_t v14 = v16;
    int v17 = *(char *)(v15 + 23);
    if (v17 >= 0) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v14;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v19 = *(void *)(v15 + 8);
    }
    sub_188FC78(v13, v18, v19);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v22, 3u);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_503848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_4D4880(v20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_4D4880(v20);
  _Unwind_Resume(a1);
}

void sub_5038CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_4D4880(v17);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v17);
  _Unwind_Resume(a1);
}

double sub_50390C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!sub_605454(a1 + 32)) {
    goto LABEL_8;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 1175);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 1160);
  }
  if (v4)
  {
    sub_503998(a1, a2);
  }
  else
  {
LABEL_8:
    double result = 0.0;
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
  }
  return result;
}

void sub_503998(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  if (!*(unsigned char *)(a1 + 1144))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v4 = *(void *)(a1 + 1120);
  if (*(_DWORD *)(v4 + 124) == 0x7FFFFFFF)
  {
    if (*(_DWORD *)(v4 + 120) == 0x7FFFFFFF) {
      goto LABEL_8;
    }
    std::string __p = operator new(0x28uLL);
    long long v7 = xmmword_20B9260;
    strcpy((char *)__p, "Advisory_AREA_INCIDENT_ISSUE_TIME");
    sub_635560(a2, (uint64_t)&__p);
  }
  else
  {
    std::string __p = operator new(0x28uLL);
    long long v7 = xmmword_20B9280;
    strcpy((char *)__p, "Advisory_AREA_INCIDENT_UPDATE_TIME");
    sub_635560(a2, (uint64_t)&__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
LABEL_8:
  if (sub_605478(a1 + 32))
  {
    std::string __p = operator new(0x20uLL);
    long long v7 = xmmword_20B91B0;
    strcpy((char *)__p, "Advisory_WILDFIRE_DISCLAIMER");
    sub_635560(a2, (uint64_t)&__p);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
  }
}

void sub_503B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4D4880(v15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_503BC8(unint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  unsigned int v9 = sub_2D0F10(a1);
  int v10 = sub_64E00(v9, a3);
  if (a4) {
    uint64_t v11 = "es";
  }
  else {
    uint64_t v11 = "s";
  }
  if (a4) {
    size_t v12 = 2;
  }
  else {
    size_t v12 = 1;
  }
  unsigned __int8 v76 = v12;
  memcpy(&__dst, v11, v12);
  *(unsigned char *)((unint64_t)&__dst | v12) = 0;
  switch(v10)
  {
    case 0:
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = (size_t)a2[1];
      }
      if (!v14)
      {
        int v42 = &xmmword_2564340;
        if (byte_2564357 < 0) {
          goto LABEL_70;
        }
        goto LABEL_67;
      }
      int v15 = byte_2564357;
      if (byte_2564357 >= 0) {
        size_t v16 = byte_2564357;
      }
      else {
        size_t v16 = *((void *)&xmmword_2564340 + 1);
      }
      unint64_t v17 = v14 + v16;
      if (v14 + v16 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v17 > 0x16)
      {
        uint64_t v60 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v60 = v17 | 7;
        }
        uint64_t v61 = v60 + 1;
        unint64_t v62 = operator new(v60 + 1);
        a5[1] = v17;
        a5[2] = v61 | 0x8000000000000000;
        *a5 = v62;
        a5 = v62;
      }
      else
      {
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        *((unsigned char *)a5 + 23) = v17;
      }
      if (v16)
      {
        if (v15 >= 0) {
          long long v63 = &xmmword_2564340;
        }
        else {
          long long v63 = (long long *)xmmword_2564340;
        }
        memmove(a5, v63, v16);
      }
      int v64 = (char *)a5 + v16;
      if (v13 >= 0) {
        long long v65 = a2;
      }
      else {
        long long v65 = *a2;
      }
      memmove(v64, v65, v14);
      v64[v14] = 0;
      if ((char)v76 < 0) {
        goto LABEL_154;
      }
      return;
    case 1:
      int v36 = *((char *)a2 + 23);
      if (v36 >= 0) {
        size_t v37 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v37 = (size_t)a2[1];
      }
      if (v37)
      {
        int v38 = byte_256436F;
        if (byte_256436F >= 0) {
          size_t v39 = byte_256436F;
        }
        else {
          size_t v39 = *((void *)&xmmword_2564358 + 1);
        }
        unint64_t v40 = v37 + v39;
        if (v37 + v39 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v40 > 0x16)
        {
          uint64_t v66 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17) {
            uint64_t v66 = v40 | 7;
          }
          uint64_t v67 = v66 + 1;
          p_p = (std::string *)operator new(v66 + 1);
          __p.__r_.__value_.__l.__size_ = v37 + v39;
          __p.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          p_p = &__p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v37 + v39;
        }
        if (v39)
        {
          if (v38 >= 0) {
            int v68 = &xmmword_2564358;
          }
          else {
            int v68 = (long long *)xmmword_2564358;
          }
          memmove(p_p, v68, v39);
        }
        size_t v69 = (char *)p_p + v39;
        if (v36 >= 0) {
          unint64_t v70 = a2;
        }
        else {
          unint64_t v70 = *a2;
        }
        memmove(v69, v70, v37);
        v69[v37] = 0;
        if ((v76 & 0x80u) == 0) {
          p_dst = (const std::string::value_type *)&__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v49 = v76;
        }
        else {
          std::string::size_type v49 = v75;
        }
        goto LABEL_152;
      }
      int v42 = &xmmword_2564358;
      if ((byte_256436F & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_70;
    case 2:
      int v24 = *((char *)a2 + 23);
      if (v24 >= 0) {
        size_t v25 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v25 = (size_t)a2[1];
      }
      if (v25)
      {
        int v26 = byte_2564387;
        if (byte_2564387 >= 0) {
          size_t v27 = byte_2564387;
        }
        else {
          size_t v27 = *((void *)&xmmword_2564370 + 1);
        }
        unint64_t v28 = v25 + v27;
        if (v25 + v27 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v28 > 0x16)
        {
          uint64_t v50 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v50 = v28 | 7;
          }
          uint64_t v51 = v50 + 1;
          int v29 = (std::string *)operator new(v50 + 1);
          __p.__r_.__value_.__l.__size_ = v25 + v27;
          __p.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          int v29 = &__p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v25 + v27;
        }
        if (v27)
        {
          if (v26 >= 0) {
            size_t v52 = &xmmword_2564370;
          }
          else {
            size_t v52 = (long long *)xmmword_2564370;
          }
          memmove(v29, v52, v27);
        }
        int v53 = (char *)v29 + v27;
        if (v24 >= 0) {
          size_t v54 = a2;
        }
        else {
          size_t v54 = *a2;
        }
        memmove(v53, v54, v25);
        v53[v25] = 0;
        if ((v76 & 0x80u) == 0) {
          p_dst = (const std::string::value_type *)&__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v49 = v76;
        }
        else {
          std::string::size_type v49 = v75;
        }
        goto LABEL_152;
      }
      int v42 = &xmmword_2564370;
      if ((byte_2564387 & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_70;
    case 3:
      int v30 = *((char *)a2 + 23);
      if (v30 >= 0) {
        size_t v31 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v31 = (size_t)a2[1];
      }
      if (v31)
      {
        int v32 = byte_256439F;
        if (byte_256439F >= 0) {
          size_t v33 = byte_256439F;
        }
        else {
          size_t v33 = *((void *)&xmmword_2564388 + 1);
        }
        unint64_t v34 = v31 + v33;
        if (v31 + v33 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v34 > 0x16)
        {
          uint64_t v55 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v55 = v34 | 7;
          }
          uint64_t v56 = v55 + 1;
          long long v35 = (std::string *)operator new(v55 + 1);
          __p.__r_.__value_.__l.__size_ = v31 + v33;
          __p.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          long long v35 = &__p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + v33;
        }
        if (v33)
        {
          if (v32 >= 0) {
            int64_t v57 = &xmmword_2564388;
          }
          else {
            int64_t v57 = (long long *)xmmword_2564388;
          }
          memmove(v35, v57, v33);
        }
        int64_t v58 = (char *)v35 + v33;
        if (v30 >= 0) {
          std::string v59 = a2;
        }
        else {
          std::string v59 = *a2;
        }
        memmove(v58, v59, v31);
        v58[v31] = 0;
        if ((v76 & 0x80u) == 0) {
          p_dst = (const std::string::value_type *)&__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v49 = v76;
        }
        else {
          std::string::size_type v49 = v75;
        }
        goto LABEL_152;
      }
      int v42 = &xmmword_2564388;
      if ((byte_256439F & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_70;
    case 4:
      int v18 = *((char *)a2 + 23);
      if (v18 >= 0) {
        size_t v19 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v19 = (size_t)a2[1];
      }
      if (!v19)
      {
        int v42 = &xmmword_25643A0;
        if (byte_25643B7 < 0)
        {
LABEL_70:
          sub_4200(a5, *(void **)v42, *((void *)v42 + 1));
          goto LABEL_153;
        }
LABEL_67:
        *(_OWORD *)a5 = *v42;
        a5[2] = *((void *)v42 + 2);
        if (((char)v76 & 0x80000000) == 0) {
          return;
        }
LABEL_154:
        operator delete(__dst);
        return;
      }
      int v20 = byte_25643B7;
      if (byte_25643B7 >= 0) {
        size_t v21 = byte_25643B7;
      }
      else {
        size_t v21 = *((void *)&xmmword_25643A0 + 1);
      }
      unint64_t v22 = v19 + v21;
      if (v19 + v21 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v22 > 0x16)
      {
        uint64_t v43 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17) {
          uint64_t v43 = v22 | 7;
        }
        uint64_t v44 = v43 + 1;
        char v23 = (std::string *)operator new(v43 + 1);
        __p.__r_.__value_.__l.__size_ = v19 + v21;
        __p.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        char v23 = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v19 + v21;
      }
      if (v21)
      {
        if (v20 >= 0) {
          int64_t v45 = &xmmword_25643A0;
        }
        else {
          int64_t v45 = (long long *)xmmword_25643A0;
        }
        memmove(v23, v45, v21);
      }
      std::string::size_type v46 = (char *)v23 + v21;
      if (v18 >= 0) {
        uint64_t v47 = a2;
      }
      else {
        uint64_t v47 = *a2;
      }
      memmove(v46, v47, v19);
      v46[v19] = 0;
      if ((v76 & 0x80u) == 0) {
        p_dst = (const std::string::value_type *)&__dst;
      }
      else {
        p_dst = __dst;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v49 = v76;
      }
      else {
        std::string::size_type v49 = v75;
      }
LABEL_152:
      uint64_t v71 = std::string::append(&__p, p_dst, v49);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      a5[2] = *((void *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)a5 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_153:
        if (((char)v76 & 0x80000000) == 0) {
          return;
        }
        goto LABEL_154;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((char)v76 < 0) {
        goto LABEL_154;
      }
      return;
    default:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      if ((char)v76 < 0) {
        goto LABEL_154;
      }
      return;
  }
}

void sub_504294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_504310(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 56) = 1065353216;
  *(unsigned char *)(a4 + 64) = 1;
  if (byte_2564760[23] < 0) {
    sub_4200(&v58, *(void **)byte_2564760, *(unint64_t *)&byte_2564760[8]);
  }
  else {
    std::string v58 = *(std::string *)byte_2564760;
  }
  if (a2 == 1)
  {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    if (v8)
    {
      int v9 = byte_256478F;
      if (byte_256478F >= 0) {
        size_t v10 = byte_256478F;
      }
      else {
        size_t v10 = qword_2564780;
      }
      int v11 = byte_2564357;
      if (byte_2564357 >= 0) {
        size_t v12 = byte_2564357;
      }
      else {
        size_t v12 = *((void *)&xmmword_2564340 + 1);
      }
      unint64_t v13 = v12 + v10;
      if (v12 + v10 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v13 > 0x16)
      {
        uint64_t v38 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v38 = v13 | 7;
        }
        uint64_t v39 = v38 + 1;
        p_dst = (std::string *)operator new(v38 + 1);
        __dst.__r_.__value_.__l.__size_ = v12 + v10;
        __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (!v10)
        {
LABEL_21:
          size_t v16 = (char *)p_dst + v10;
          if (v12)
          {
            if (v11 >= 0) {
              unint64_t v17 = &xmmword_2564340;
            }
            else {
              unint64_t v17 = (long long *)xmmword_2564340;
            }
            memmove(v16, v17, v12);
          }
          v16[v12] = 0;
          if (byte_25647A7 >= 0) {
            int v18 = (const std::string::value_type *)&qword_2564790;
          }
          else {
            int v18 = (const std::string::value_type *)qword_2564790;
          }
          if (byte_25647A7 >= 0) {
            std::string::size_type v19 = byte_25647A7;
          }
          else {
            std::string::size_type v19 = unk_2564798;
          }
          int v20 = std::string::append(&__dst, v18, v19);
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          int64_t v56 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v55 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (v56 >= 0) {
            unint64_t v22 = v55;
          }
          else {
            unint64_t v22 = (void **)v55[0];
          }
          if (v56 >= 0) {
            std::string::size_type v23 = HIBYTE(v56);
          }
          else {
            std::string::size_type v23 = (std::string::size_type)v55[1];
          }
          if (v23 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          if (v23 >= 0x17)
          {
            uint64_t v40 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17) {
              uint64_t v40 = v23 | 7;
            }
            uint64_t v41 = v40 + 1;
            int v24 = (std::string *)operator new(v40 + 1);
            __p.__r_.__value_.__l.__size_ = v23;
            __p.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
            if (v23 >= 0x20 && (unint64_t)((char *)v24 - (char *)v22) >= 0x20)
            {
              int v42 = (void **)((char *)v22 + (v23 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v43 = (std::string *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v44 = &v24->__r_.__value_.__r.__words[2];
              int64_t v45 = (long long *)(v22 + 2);
              unint64_t v46 = v23 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v47 = *v45;
                *((_OWORD *)v44 - 1) = *(v45 - 1);
                *(_OWORD *)uint64_t v44 = v47;
                v44 += 4;
                v45 += 2;
                v46 -= 32;
              }
              while (v46);
              if (v23 == (v23 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_93:
                v43->__r_.__value_.__s.__data_[0] = 0;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                do
                {
                  p_p->__r_.__value_.__s.__data_[0] = __toupper(*(char *)v22);
                  p_p = (std::string *)((char *)p_p + 1);
                  unint64_t v22 = (void **)((char *)v22 + 1);
                  --v23;
                }
                while (v23);
LABEL_99:
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v52 = &__p;
                }
                else {
                  size_t v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                }
                std::string::append(&v58, (const std::string::value_type *)v52, size);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v56) & 0x80000000) == 0)
                  {
LABEL_107:
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_108:
                      sub_6358A0(a4, (long long *)&qword_25647A8, (const std::string *)a3);
                      goto LABEL_109;
                    }
LABEL_116:
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    goto LABEL_108;
                  }
                }
                else if ((SHIBYTE(v56) & 0x80000000) == 0)
                {
                  goto LABEL_107;
                }
                operator delete(v55[0]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_108;
                }
                goto LABEL_116;
              }
              do
              {
LABEL_92:
                std::string::value_type v50 = *(unsigned char *)v42;
                int v42 = (void **)((char *)v42 + 1);
                v43->__r_.__value_.__s.__data_[0] = v50;
                uint64_t v43 = (std::string *)((char *)v43 + 1);
              }
              while (v42 != (void **)((char *)v22 + v23));
              goto LABEL_93;
            }
          }
          else
          {
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v23;
            if (!v23)
            {
              __p.__r_.__value_.__s.__data_[0] = 0;
              goto LABEL_99;
            }
            int v24 = &__p;
          }
          int v42 = v22;
          uint64_t v43 = v24;
          goto LABEL_92;
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + v10;
        if (!v10) {
          goto LABEL_21;
        }
      }
      if (v9 >= 0) {
        int v15 = &qword_2564778;
      }
      else {
        int v15 = (uint64_t *)qword_2564778;
      }
      memmove(p_dst, v15, v10);
      goto LABEL_21;
    }
  }
  sub_503BC8(a2, (const void **)&qword_2564790, *(_DWORD *)(a1 + 968), 0, v55);
  if (v56 >= 0) {
    size_t v25 = v55;
  }
  else {
    size_t v25 = (void **)v55[0];
  }
  if (v56 >= 0) {
    std::string::size_type v26 = HIBYTE(v56);
  }
  else {
    std::string::size_type v26 = (std::string::size_type)v55[1];
  }
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v26 >= 0x17)
  {
    uint64_t v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v28 = v26 | 7;
    }
    uint64_t v29 = v28 + 1;
    size_t v27 = (std::string *)operator new(v28 + 1);
    __p.__r_.__value_.__l.__size_ = v26;
    __p.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    if (v26 >= 0x20 && (unint64_t)((char *)v27 - (char *)v25) >= 0x20)
    {
      int v30 = (void **)((char *)v25 + (v26 & 0xFFFFFFFFFFFFFFE0));
      size_t v31 = (std::string *)((char *)v27 + (v26 & 0xFFFFFFFFFFFFFFE0));
      int v32 = &v27->__r_.__value_.__r.__words[2];
      size_t v33 = (long long *)(v25 + 2);
      unint64_t v34 = v26 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)int v32 = v35;
        v32 += 4;
        v33 += 2;
        v34 -= 32;
      }
      while (v34);
      if (v26 == (v26 & 0x7FFFFFFFFFFFFFE0))
      {
LABEL_62:
        v31->__r_.__value_.__s.__data_[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v37 = &__p;
        }
        else {
          size_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        do
        {
          v37->__r_.__value_.__s.__data_[0] = __toupper(*(char *)v25);
          size_t v37 = (std::string *)((char *)v37 + 1);
          size_t v25 = (void **)((char *)v25 + 1);
          --v26;
        }
        while (v26);
        goto LABEL_80;
      }
      do
      {
LABEL_61:
        std::string::value_type v36 = *(unsigned char *)v30;
        int v30 = (void **)((char *)v30 + 1);
        v31->__r_.__value_.__s.__data_[0] = v36;
        size_t v31 = (std::string *)((char *)v31 + 1);
      }
      while (v30 != (void **)((char *)v25 + v26));
      goto LABEL_62;
    }
LABEL_60:
    int v30 = v25;
    size_t v31 = v27;
    goto LABEL_61;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26;
  if (v26)
  {
    size_t v27 = &__p;
    goto LABEL_60;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_80:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v48 = &__p;
  }
  else {
    uint64_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v58, (const std::string::value_type *)v48, v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56) & 0x80000000) == 0) {
      goto LABEL_109;
    }
  }
  else if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
    goto LABEL_109;
  }
  operator delete(v55[0]);
LABEL_109:
  sub_6351E8((char **)a4, (uint64_t)&v58);
  std::to_string(&__p, a2);
  sub_6358A0(a4, (long long *)&qword_25647C0, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_113:
    operator delete(v58.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_113;
  }
}

void sub_5048AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
      {
LABEL_8:
        if (a33 < 0) {
          operator delete(a28);
        }
        sub_4D4880(v33);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_5049B0(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  uint64_t v4 = "Advisory_Details_EV_Stale_Battery_Info";
  if (a2) {
    uint64_t v4 = "Advisory_Route_Planning_Title_EV_Stale_Battery_Info";
  }
  uint64_t v5 = "Advisory_Details_EV_Stale_Battery_Info_At_Least";
  *(_OWORD *)a3 = 0uLL;
  *(_OWORD *)(a3 + 16) = 0uLL;
  if (a2) {
    uint64_t v5 = "Advisory_Route_Planning_Title_EV_Stale_Battery_Info_At_Least";
  }
  if (*a1 <= 863999) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v5;
  }
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_15;
  }
  HIBYTE(v13) = v7;
  int v9 = __dst;
  if (v7) {
LABEL_15:
  }
    memcpy(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  sub_6351E8((char **)a3, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_504AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4D4880(v15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_504B34(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 1368)) {
    BOOL v3 = *(_DWORD *)(a1 + 1360) == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    int v5 = *(_DWORD *)(a1 + 1352);
    uint64_t v4 = "Advisory_Based_On_Predicted_Traffic";
    BOOL v6 = v5 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v5;
    if (v6 && *(_DWORD *)(a1 + 1364) != 0x7FFFFFFF) {
      uint64_t v4 = "Advisory_Leave_By_Time";
    }
  }
  else
  {
    uint64_t v4 = "Advisory_Based_On_Predicted_Traffic";
  }
  size_t v7 = strlen(v4);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v13 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_20;
  }
  HIBYTE(v13) = v7;
  int v9 = __dst;
  if (v7) {
LABEL_20:
  }
    memcpy(v9, v4, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  sub_6352AC(a2, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_504C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_504C8C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v49 = 0;
  *(_OWORD *)long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)unint64_t v46 = 0u;
  int v50 = 1065353216;
  char v51 = 1;
  if (a4)
  {
    if (a2 == 1)
    {
      int v7 = byte_25646FF;
      if (byte_25646FF >= 0) {
        size_t v8 = byte_25646FF;
      }
      else {
        size_t v8 = *((void *)&xmmword_25646E8 + 1);
      }
      int v9 = byte_2564357;
      if (byte_2564357 >= 0) {
        size_t v10 = byte_2564357;
      }
      else {
        size_t v10 = *((void *)&xmmword_2564340 + 1);
      }
      unint64_t v11 = v10 + v8;
      if (v10 + v8 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v11 > 0x16)
      {
        uint64_t v41 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v41 = v11 | 7;
        }
        uint64_t v42 = v41 + 1;
        p_dst = (std::string *)operator new(v41 + 1);
        __dst.__r_.__value_.__l.__size_ = v10 + v8;
        __dst.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (!v8)
        {
LABEL_16:
          size_t v14 = (char *)p_dst + v8;
          if (v10)
          {
            if (v9 >= 0) {
              int v15 = &xmmword_2564340;
            }
            else {
              int v15 = (long long *)xmmword_2564340;
            }
            memmove(v14, v15, v10);
          }
          v14[v10] = 0;
          if (byte_2563647 >= 0) {
            size_t v16 = (const std::string::value_type *)&qword_2563630;
          }
          else {
            size_t v16 = (const std::string::value_type *)qword_2563630;
          }
          if (byte_2563647 >= 0) {
            std::string::size_type v17 = byte_2563647;
          }
          else {
            std::string::size_type v17 = unk_2563638;
          }
          int v18 = std::string::append(&__dst, v16, v17);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (byte_25647EF >= 0) {
            int v20 = (const std::string::value_type *)&qword_25647D8;
          }
          else {
            int v20 = (const std::string::value_type *)qword_25647D8;
          }
          if (byte_25647EF >= 0) {
            std::string::size_type v21 = byte_25647EF;
          }
          else {
            std::string::size_type v21 = unk_25647E0;
          }
          unint64_t v22 = std::string::append(&v44, v20, v21);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v22->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          sub_6351E8((char **)v46, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_35:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_36;
              }
LABEL_68:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
              sub_6358A0((uint64_t)v46, (long long *)&qword_25632D0, *(const std::string **)a3);
              *(_OWORD *)a5 = *(_OWORD *)v46;
              v46[0] = 0;
              v46[1] = 0;
              int v24 = v47[0];
              size_t v25 = v47[1];
              unint64_t v27 = *((void *)&v48 + 1);
              unint64_t v26 = v48;
              v47[1] = 0;
              *(void *)&long long v48 = 0;
              v47[0] = 0;
              *(void *)(a5 + 16) = v24;
              *(void *)(a5 + 24) = v25;
              *(_OWORD *)(a5 + 32) = __PAIR128__(v27, v26);
              uint64_t v28 = a5 + 40;
              uint64_t v29 = v49;
              *(void *)(a5 + 48) = v49;
              *(_DWORD *)(a5 + 56) = v50;
              if (!v29) {
                goto LABEL_47;
              }
              unint64_t v30 = *(void *)(v27 + 8);
              unint64_t v31 = v26 - 1;
              if ((v26 & (v26 - 1)) != 0)
              {
LABEL_38:
                if (v30 >= v26) {
                  v30 %= v26;
                }
                goto LABEL_46;
              }
LABEL_45:
              v30 &= v31;
LABEL_46:
              v25[v30] = v28;
              *((void *)&v48 + 1) = 0;
              uint64_t v49 = 0;
              goto LABEL_47;
            }
          }
          else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_35;
          }
          operator delete(v44.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
          goto LABEL_68;
        }
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + v8;
        if (!v8) {
          goto LABEL_16;
        }
      }
      if (v7 >= 0) {
        unint64_t v13 = &xmmword_25646E8;
      }
      else {
        unint64_t v13 = (long long *)xmmword_25646E8;
      }
      memmove(p_dst, v13, v8);
      goto LABEL_16;
    }
  }
  else if (*(void *)(a3 + 8) - *(void *)a3 == 24)
  {
    *(void *)std::string __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B5EB0;
    strcpy(*(char **)__p, "One_area_incident_included");
    sub_6351E8((char **)v46, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_6358A0((uint64_t)v46, (long long *)&qword_25632D0, *(const std::string **)a3);
    *(_OWORD *)a5 = *(_OWORD *)v46;
    v46[0] = 0;
    v46[1] = 0;
    int v32 = v47[0];
    size_t v25 = v47[1];
    unint64_t v33 = *((void *)&v48 + 1);
    unint64_t v26 = v48;
    v47[1] = 0;
    *(void *)&long long v48 = 0;
    v47[0] = 0;
    *(void *)(a5 + 16) = v32;
    *(void *)(a5 + 24) = v25;
    *(_OWORD *)(a5 + 32) = __PAIR128__(v33, v26);
    uint64_t v28 = a5 + 40;
    uint64_t v34 = v49;
    *(void *)(a5 + 48) = v49;
    *(_DWORD *)(a5 + 56) = v50;
    if (!v34)
    {
LABEL_47:
      *(unsigned char *)(a5 + 64) = v51;
      long long v35 = (void *)*((void *)&v48 + 1);
      if (!*((void *)&v48 + 1)) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    unint64_t v30 = *(void *)(v33 + 8);
    unint64_t v31 = v26 - 1;
    if ((v26 & (v26 - 1)) != 0) {
      goto LABEL_38;
    }
    goto LABEL_45;
  }
  sub_50516C(a1, a2, a4, a5);
  long long v35 = (void *)*((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_51;
  }
  do
  {
LABEL_50:
    std::string::value_type v36 = (void *)*v35;
    sub_4F4B48((uint64_t)(v35 + 2));
    operator delete(v35);
    long long v35 = v36;
  }
  while (v36);
LABEL_51:
  size_t v37 = v47[1];
  v47[1] = 0;
  if (v37) {
    operator delete(v37);
  }
  uint64_t v38 = (void **)v46[0];
  if (v46[0])
  {
    uint64_t v39 = (void **)v46[1];
    uint64_t v40 = v46[0];
    if (v46[1] != v46[0])
    {
      do
      {
        if (*((char *)v39 - 1) < 0) {
          operator delete(*(v39 - 3));
        }
        v39 -= 3;
      }
      while (v39 != v38);
      uint64_t v40 = v46[0];
    }
    v46[1] = v38;
    operator delete(v40);
  }
}

void sub_5050B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      if ((a15 & 0x80000000) == 0)
      {
LABEL_9:
        sub_4D4880(&a30);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a10);
      sub_4D4880(&a30);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_50516C(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 56) = 1065353216;
  *(unsigned char *)(a4 + 64) = 1;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_503BC8(a2, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 968), 0, v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v7 = byte_25646FF;
  if (byte_25646FF >= 0) {
    size_t v8 = byte_25646FF;
  }
  else {
    size_t v8 = *((void *)&xmmword_25646E8 + 1);
  }
  int v9 = (char)v27;
  if ((v27 & 0x80u) == 0) {
    size_t v10 = v27;
  }
  else {
    size_t v10 = (size_t)v26[1];
  }
  unint64_t v11 = v10 + v8;
  if (v10 + v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v11 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + v8;
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v20 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v11 | 7) != 0x17) {
    uint64_t v20 = v11 | 7;
  }
  uint64_t v21 = v20 + 1;
  p_dst = (std::string *)operator new(v20 + 1);
  __dst.__r_.__value_.__l.__size_ = v10 + v8;
  __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v8)
  {
LABEL_12:
    if (v7 >= 0) {
      unint64_t v13 = &xmmword_25646E8;
    }
    else {
      unint64_t v13 = (long long *)xmmword_25646E8;
    }
    memmove(p_dst, v13, v8);
  }
LABEL_16:
  size_t v14 = (char *)p_dst + v8;
  if (v10)
  {
    if (v9 >= 0) {
      int v15 = v26;
    }
    else {
      int v15 = (void **)v26[0];
    }
    memmove(v14, v15, v10);
  }
  v14[v10] = 0;
  if (byte_256365F >= 0) {
    size_t v16 = (const std::string::value_type *)&qword_2563648;
  }
  else {
    size_t v16 = (const std::string::value_type *)qword_2563648;
  }
  if (byte_256365F >= 0) {
    std::string::size_type v17 = byte_256365F;
  }
  else {
    std::string::size_type v17 = unk_2563650;
  }
  int v18 = std::string::append(&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_42;
    }
  }
  else if (!a3)
  {
    goto LABEL_42;
  }
  if (byte_25647EF >= 0) {
    unint64_t v22 = (const std::string::value_type *)&qword_25647D8;
  }
  else {
    unint64_t v22 = (const std::string::value_type *)qword_25647D8;
  }
  if (byte_25647EF >= 0) {
    std::string::size_type v23 = byte_25647EF;
  }
  else {
    std::string::size_type v23 = unk_25647E0;
  }
  std::string::append(&__p, v22, v23);
LABEL_42:
  sub_6351E8((char **)a4, (uint64_t)&__p);
  std::to_string(&__dst, a2);
  sub_6358A0(a4, (long long *)&dword_25641A8, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_44:
      if (((char)v27 & 0x80000000) == 0) {
        return;
      }
LABEL_48:
      operator delete(v26[0]);
      return;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_44;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v27 < 0) {
    goto LABEL_48;
  }
}

void sub_5053E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_4D4880(v27);
  _Unwind_Resume(a1);
}

void sub_505468(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  int v13 = 1065353216;
  char v14 = 1;
  if (*(unsigned char *)(a2 + 1440))
  {
    if (!a4)
    {
      sub_500DBC(a2, a5);
      return;
    }
    std::string __p = operator new(0x28uLL);
    long long v8 = xmmword_20B9240;
    strcpy((char *)__p, "Advisory_Grouped_Toll_Zone_With_Other");
    sub_6352AC(a5, (uint64_t)&__p);
    goto LABEL_6;
  }
  if (a4)
  {
    std::string __p = operator new(0x30uLL);
    long long v8 = xmmword_20B9A80;
    strcpy((char *)__p, "Advisory_Grouped_Environmental_Zone_With_Other");
    sub_6352AC(a5, (uint64_t)&__p);
LABEL_6:
    if (SHIBYTE(v8) < 0) {
      operator delete(__p);
    }
    return;
  }
  if (!*(unsigned char *)(a3 + 1440))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_500CAC(a1, a3, a5);
}

void sub_5055CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a16);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a16);
  _Unwind_Resume(a1);
}

void sub_505610(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_503BC8(a2, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 968), 0, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  int v5 = byte_25646FF;
  if (byte_25646FF >= 0) {
    size_t v6 = byte_25646FF;
  }
  else {
    size_t v6 = *((void *)&xmmword_25646E8 + 1);
  }
  int v7 = (char)v23;
  if ((v23 & 0x80u) == 0) {
    size_t v8 = v23;
  }
  else {
    size_t v8 = (size_t)v22[1];
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + v6;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v18 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v18 = v9 | 7;
  }
  uint64_t v19 = v18 + 1;
  p_dst = (std::string *)operator new(v18 + 1);
  __dst.__r_.__value_.__l.__size_ = v8 + v6;
  __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v6)
  {
LABEL_12:
    if (v5 >= 0) {
      long long v11 = &xmmword_25646E8;
    }
    else {
      long long v11 = (long long *)xmmword_25646E8;
    }
    memmove(p_dst, v11, v6);
  }
LABEL_16:
  uint64_t v12 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      int v13 = v22;
    }
    else {
      int v13 = (void **)v22[0];
    }
    memmove(v12, v13, v8);
  }
  v12[v8] = 0;
  if (byte_2564717 >= 0) {
    char v14 = (const std::string::value_type *)&qword_2564700;
  }
  else {
    char v14 = (const std::string::value_type *)qword_2564700;
  }
  if (byte_2564717 >= 0) {
    std::string::size_type v15 = byte_2564717;
  }
  else {
    std::string::size_type v15 = unk_2564708;
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_6351E8((char **)a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_29:
  std::to_string(&__p, a2);
  sub_6358A0(a3, (long long *)&dword_25641A8, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (((char)v23 & 0x80000000) == 0) {
      return;
    }
LABEL_39:
    operator delete(v22[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v23 < 0) {
    goto LABEL_39;
  }
}

void sub_505858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v27);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_5058D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!sub_605478(a2 + 32))
  {
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
    *(unsigned char *)(a3 + 64) = 1;
    return;
  }
  if (!*(unsigned char *)(a2 + 1144))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(unsigned char *)(a3 + 64) = 1;
  if (*(float *)(a2 + 856) <= 0.0)
  {
LABEL_20:
    unsigned int v13 = *(_DWORD *)(a2 + 852);
    if (!v13) {
      goto LABEL_93;
    }
    goto LABEL_21;
  }
  int v6 = byte_256472F;
  if (byte_256472F >= 0) {
    size_t v7 = byte_256472F;
  }
  else {
    size_t v7 = qword_2564720;
  }
  unint64_t v8 = v7 + 20;
  if (v7 + 20 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v7 + 20;
    unint64_t v57 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    unint64_t v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v57) = v7 + 20;
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (v6 >= 0) {
    uint64_t v12 = &qword_2564718;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_2564718;
  }
  memmove(p_dst, v12, v7);
LABEL_19:
  strcpy((char *)p_dst + v7, "PERCENTAGE_CONTAINED");
  sub_635560(a3, (uint64_t)&__dst);
  if ((SHIBYTE(v57) & 0x80000000) == 0) {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  unsigned int v13 = *(_DWORD *)(a2 + 852);
  if (!v13) {
    goto LABEL_93;
  }
LABEL_21:
  if (*(unsigned char *)(a1 + 1064)) {
    double v14 = (double)v13;
  }
  else {
    double v14 = (double)v13 * 2.471;
  }
  uint64_t v15 = 474;
  if (!*(unsigned char *)(a1 + 1064)) {
    uint64_t v15 = 480;
  }
  size_t v16 = &qword_25633C0;
  if (*(unsigned char *)(a1 + 1064)) {
    size_t v16 = &qword_25633A8;
  }
  long long v17 = &byte_25633BF;
  if (!*(unsigned char *)(a1 + 1064)) {
    long long v17 = &byte_25633D7;
  }
  if (*v17 < 0)
  {
    if (*(unsigned char *)(a1 + 1064)) {
      uint64_t v18 = (unint64_t *)&unk_25633B0;
    }
    else {
      uint64_t v18 = (unint64_t *)&word_25633C8;
    }
    sub_4200(&__dst, *(void **)&dword_2562C40[v15], *v18);
  }
  else
  {
    long long __dst = *(_OWORD *)v16;
    unint64_t v57 = v16[2];
  }
  int v19 = byte_256472F;
  if (byte_256472F >= 0) {
    size_t v20 = byte_256472F;
  }
  else {
    size_t v20 = qword_2564720;
  }
  unint64_t v21 = v20 + 12;
  if (v20 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    unint64_t v22 = operator new(v23 + 1);
    v55.__r_.__value_.__l.__size_ = v20 + 12;
    v55.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    memset(&v55, 0, sizeof(v55));
    unint64_t v22 = &v55;
    *((unsigned char *)&v55.__r_.__value_.__s + 23) = v20 + 12;
    if (!v20) {
      goto LABEL_50;
    }
  }
  if (v19 >= 0) {
    size_t v25 = &qword_2564718;
  }
  else {
    size_t v25 = (uint64_t *)qword_2564718;
  }
  memmove(v22, v25, v20);
LABEL_50:
  strcpy((char *)v22 + v20, "BURNING_AREA");
  char v51 = 0;
  LOBYTE(v50) = 0;
  sub_503BC8(v14, (const void **)&v50, *(_DWORD *)(a1 + 968), 0, __p);
  if ((v53 & 0x80u) == 0) {
    unint64_t v26 = __p;
  }
  else {
    unint64_t v26 = (void **)__p[0];
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v27 = v53;
  }
  else {
    std::string::size_type v27 = (std::string::size_type)__p[1];
  }
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v27 < 0x17)
  {
    *((unsigned char *)&v54.__r_.__value_.__s + 23) = v27;
    if (!v27)
    {
      v54.__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_78;
    }
    uint64_t v28 = (char *)&v54;
    goto LABEL_68;
  }
  uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v29 = v27 | 7;
  }
  uint64_t v30 = v29 + 1;
  uint64_t v28 = (char *)operator new(v29 + 1);
  v54.__r_.__value_.__l.__size_ = v27;
  v54.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  if (v27 < 0x20 || (unint64_t)(v28 - (char *)v26) < 0x20)
  {
LABEL_68:
    unint64_t v31 = v26;
    int v32 = v28;
    do
    {
LABEL_69:
      char v37 = *(unsigned char *)v31;
      unint64_t v31 = (void **)((char *)v31 + 1);
      *v32++ = v37;
    }
    while (v31 != (void **)((char *)v26 + v27));
    goto LABEL_70;
  }
  unint64_t v31 = (void **)((char *)v26 + (v27 & 0xFFFFFFFFFFFFFFE0));
  int v32 = &v28[v27 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v33 = v28 + 16;
  uint64_t v34 = (long long *)(v26 + 2);
  unint64_t v35 = v27 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v36 = *v34;
    *(v33 - 1) = *(v34 - 1);
    *unint64_t v33 = v36;
    v33 += 2;
    v34 += 2;
    v35 -= 32;
  }
  while (v35);
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_69;
  }
LABEL_70:
  *int v32 = 0;
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v38 = &v54;
  }
  else {
    uint64_t v38 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  do
  {
    v38->__r_.__value_.__s.__data_[0] = __toupper(*(char *)v26);
    uint64_t v38 = (std::string *)((char *)v38 + 1);
    unint64_t v26 = (void **)((char *)v26 + 1);
    --v27;
  }
  while (v27);
LABEL_78:
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &v54;
  }
  else {
    uint64_t v39 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  std::string::append(&v55, (const std::string::value_type *)v39, size);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (((char)v53 & 0x80000000) == 0) {
      goto LABEL_86;
    }
LABEL_110:
    operator delete(__p[0]);
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_111;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v53 < 0) {
    goto LABEL_110;
  }
LABEL_86:
  if ((v51 & 0x80000000) == 0) {
    goto LABEL_87;
  }
LABEL_111:
  operator delete(v50);
LABEL_87:
  if (*(unsigned char *)(a1 + 1064)) {
    uint64_t v41 = "_HECTARE";
  }
  else {
    uint64_t v41 = "_ACRE";
  }
  std::string::append(&v55, v41);
  sub_635560(a3, (uint64_t)&v55);
  std::to_string(&v54, v14);
  sub_6358A0(a3, &__dst, &v54);
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_113;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_113:
    operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0) {
      goto LABEL_114;
    }
LABEL_93:
    if (*(_DWORD *)(a2 + 860) == 0x7FFFFFFF) {
      return;
    }
    goto LABEL_94;
  }
LABEL_92:
  if ((SHIBYTE(v57) & 0x80000000) == 0) {
    goto LABEL_93;
  }
LABEL_114:
  operator delete((void *)__dst);
  if (*(_DWORD *)(a2 + 860) == 0x7FFFFFFF) {
    return;
  }
LABEL_94:
  int v42 = byte_256472F;
  if (byte_256472F >= 0) {
    size_t v43 = byte_256472F;
  }
  else {
    size_t v43 = qword_2564720;
  }
  unint64_t v44 = v43 + 26;
  if (v43 + 26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 > 0x16)
  {
    uint64_t v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v46 = v44 | 7;
    }
    uint64_t v47 = v46 + 1;
    int64_t v45 = (long long *)operator new(v46 + 1);
    *((void *)&__dst + 1) = v43 + 26;
    unint64_t v57 = v47 | 0x8000000000000000;
    *(void *)&long long __dst = v45;
    if (!v43) {
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v57 = 0;
    long long __dst = 0uLL;
    int64_t v45 = &__dst;
    HIBYTE(v57) = v43 + 26;
  }
  if (v42 >= 0) {
    long long v48 = &qword_2564718;
  }
  else {
    long long v48 = (uint64_t *)qword_2564718;
  }
  memmove(v45, v48, v43);
LABEL_107:
  strcpy((char *)v45 + v43, "ESTIMATED_CONTAINMENT_TIME");
  sub_635560(a3, (uint64_t)&__dst);
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_505F54(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_505F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if ((a38 & 0x80000000) == 0)
  {
    sub_4D4880(v38);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4880(v38);
  _Unwind_Resume(a1);
}

uint64_t sub_506080@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&qword_2564988);
}

uint64_t sub_506090@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&qword_25649A0);
}

uint64_t sub_5060A0@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&qword_25649B8);
}

BOOL sub_5060B0(_DWORD *a1)
{
  int v1 = a1[340];
  if (v1)
  {
    if (v1 == 1)
    {
      int v2 = a1[338];
      if (v2 == 0x7FFFFFFF) {
        return 0;
      }
      if (a1[339] < v2) {
        return a1[341] != 0x7FFFFFFF;
      }
    }
  }
  else
  {
    int v4 = a1[338];
    if (v4 != 0x7FFFFFFF) {
      return a1[339] < v4;
    }
  }
  return 0;
}

void sub_506120()
{
  strcpy(&byte_2560C77, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2560C60, "\x1B\\toi=lhp\\"");
  byte_2560C8F = 11;
  qword_2560C90 = (uint64_t)operator new(0x19uLL);
  long long v279 = xmmword_20B9250;
  unk_2560C98 = xmmword_20B9250;
  strcpy((char *)qword_2560C90, "\x1B\\toi=x-sampa-internal\\"");
  byte_2560CBF = 13;
  strcpy((char *)&qword_2560CA8, "\x1B\\tn=address\\"");
  strcpy(&byte_2560CD7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2560CC0, "\x1B\\tn=nav\\"");
  byte_2560CEF = 12;
  byte_2560D07 = 7;
  strcpy((char *)&dword_2560CF0, "\x1B\\lang=");
  byte_2560D1F = 1;
  word_2560D08 = 92;
  byte_2560D37 = 4;
  strcpy((char *)&qword_2560D20, "DEV:");
  byte_2560D4F = 8;
  strcpy((char *)&qword_2560D38, "Continue");
  byte_2560D67 = 11;
  strcpy((char *)&qword_2560D50, "Start_Route");
  byte_2560D7F = 14;
  strcpy((char *)&qword_2560D68, "Continue_Route");
  byte_2560D97 = 12;
  strcpy((char *)&qword_2560D80, "Resume_Route");
  byte_2560DAF = 18;
  strcpy((char *)&xmmword_2560D98, "Start_Route_U_Turn");
  byte_2560DC7 = 7;
  strcpy((char *)&dword_2560DB0, "_U_Turn");
  qword_2560DD8 = 0x1300000000000000;
  qmemcpy(&unk_2560DE0, "Continue_Route", 14);
  dword_2560DD0 = 1702131055;
  qword_2560DC8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2560DD4 + 3) = 1852994900;
  dword_2560DD4 = 1415533919;
  qword_2560DF0 = 0x1500000000000000;
  strcpy(byte_2560DF8, "Left_Turn");
  unk_2560DEE = 1415533919;
  *(_DWORD *)((char *)&qword_2560DF0 + 1) = 1852994900;
  strcpy(&byte_2560E0F, "\tRight_Turn");
  strcpy(&byte_2560E27, "\nLeft_Turn_At_End");
  byte_2560E3F = 16;
  byte_2560E57 = 17;
  strcpy((char *)&xmmword_2560E40, "Right_Turn_At_End");
  byte_2560E6F = 15;
  strcpy((char *)&qword_2560E58, "Sharp_Left_Turn");
  byte_2560E87 = 16;
  strcpy((char *)&xmmword_2560E70, "Sharp_Right_Turn");
  byte_2560E9F = 16;
  strcpy((char *)&xmmword_2560E88, "Slight_Left_Turn");
  byte_2560EB7 = 17;
  strcpy((char *)&xmmword_2560EA0, "Slight_Right_Turn");
  strcpy(&byte_2560ECF, "\tKeep_Right");
  strcpy((char *)&qword_2560EB8, "Keep_Left");
  strcpy(&byte_2560EE7, "\nU_Turn");
  byte_2560EFF = 6;
  byte_2560F17 = 14;
  strcpy((char *)&qword_2560F00, "Walking_U_Turn");
  byte_2560F2F = 20;
  strcpy((char *)&xmmword_2560F18, "U_Turn_When_Possible");
  byte_2560F47 = 20;
  strcpy((char *)&xmmword_2560F30, "U_Turn_At_Roundabout");
  byte_2560F5F = 11;
  strcpy((char *)&qword_2560F48, "Enter_Ferry");
  strcpy(&byte_2560F77, "\nChange_Ferry");
  strcpy((char *)&qword_2560F60, "Exit_Ferry");
  strcpy((char *)&xmmword_2560F90, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2560FA8, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2560FC0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2560FD8, "End_Of_Navigation");
  strcpy((char *)&xmmword_2560FF0, "End_Of_Navigation");
  strcpy((char *)&qword_2561008, "Destination");
  strcpy((char *)&xmmword_2561020, "Destination_On_left");
  strcpy((char *)&xmmword_2561038, "Destination_On_Right");
  strcpy((char *)&xmmword_2561080, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25610C8, "Next_Stop_On_Right");
  byte_2560F8F = 12;
  byte_2560FA7 = 21;
  byte_2560FBF = 20;
  strcpy((char *)&xmmword_25610F8, "Waypoint_Stop_On_Left");
  byte_2560FD7 = 22;
  byte_2560FEF = 17;
  byte_2561007 = 17;
  byte_256101F = 11;
  byte_2561037 = 19;
  byte_256104F = 20;
  strcpy(&byte_2561067, "\nFirst_Stop_On_left");
  *(void *)&v267[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2561050, "First_Stop");
  byte_256107F = 18;
  byte_2561097 = 19;
  strcpy(&byte_25610AF, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25610E0, "Waypoint_Stop");
  strcpy((char *)&xmmword_2561110, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2561128, "Roundabout_");
  *(void *)&v263[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2561098, "Next_Stop");
  byte_25610C7 = 17;
  byte_25610DF = 18;
  byte_25610F7 = 13;
  byte_256110F = 21;
  byte_2561127 = 22;
  byte_256113F = 11;
  byte_2561157 = 16;
  strcpy((char *)&xmmword_2561140, "Enter_Roundabout");
  qword_2561158 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B91C0;
  xmmword_2561160 = xmmword_20B91C0;
  strcpy((char *)qword_2561158, "Walking_Enter_Roundabout");
  byte_2561187 = 16;
  strcpy((char *)&xmmword_2561170, "Leave_Roundabout");
  byte_256119F = 21;
  strcpy((char *)&xmmword_2561188, "Roundabout_First_Exit");
  byte_25611B7 = 22;
  strcpy((char *)&xmmword_25611A0, "Roundabout_Second_Exit");
  byte_25611CF = 21;
  strcpy((char *)&xmmword_25611B8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25611D0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25611E6) = 22;
  byte_25611FF = 21;
  strcpy((char *)&xmmword_25611E8, "Roundabout_Fifth_Exit");
  byte_2561217 = 21;
  strcpy((char *)&xmmword_2561200, "Roundabout_Sixth_Exit");
  qword_2561218 = (uint64_t)operator new(0x19uLL);
  xmmword_2561220 = xmmword_20B9250;
  strcpy((char *)qword_2561218, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2561230, "Roundabout_Eighth_Exit");
  HIBYTE(word_2561246) = 22;
  byte_256125F = 21;
  strcpy((char *)&xmmword_2561248, "Roundabout_Ninth_Exit");
  byte_2561277 = 21;
  strcpy((char *)&xmmword_2561260, "Roundabout_Tenth_Exit");
  qword_2561278 = (uint64_t)operator new(0x20uLL);
  xmmword_2561280 = xmmword_20B91C0;
  strcpy((char *)qword_2561278, "Roundabout_Eleventh_Exit");
  qword_2561290 = (uint64_t)operator new(0x19uLL);
  unk_2561298 = xmmword_20B9250;
  strcpy((char *)qword_2561290, "Roundabout_Twelfth_Exit");
  qword_25612A8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B5EB0;
  xmmword_25612B0 = xmmword_20B5EB0;
  strcpy((char *)qword_25612A8, "Roundabout_Thirteenth_Exit");
  qword_25612C0 = (uint64_t)operator new(0x20uLL);
  unk_25612C8 = xmmword_20B5EB0;
  strcpy((char *)qword_25612C0, "Roundabout_Fourteenth_Exit");
  qword_25612D8 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8870;
  xmmword_25612E0 = xmmword_20B8870;
  strcpy((char *)qword_25612D8, "Roundabout_Fifteenth_Exit");
  qword_25612F0 = (uint64_t)operator new(0x20uLL);
  unk_25612F8 = xmmword_20B8870;
  strcpy((char *)qword_25612F0, "Roundabout_Sixteenth_Exit");
  qword_2561308 = (uint64_t)operator new(0x20uLL);
  long long v272 = xmmword_20B91A0;
  xmmword_2561310 = xmmword_20B91A0;
  strcpy((char *)qword_2561308, "Roundabout_Seventeenth_Exit");
  qword_2561320 = (uint64_t)operator new(0x20uLL);
  unk_2561328 = xmmword_20B5EB0;
  strcpy((char *)qword_2561320, "Roundabout_Eighteenth_Exit");
  qword_2561338 = (uint64_t)operator new(0x20uLL);
  xmmword_2561340 = xmmword_20B5EB0;
  strcpy((char *)qword_2561338, "Roundabout_Nineteenth_Exit");
  byte_2561367 = 8;
  strcpy((char *)&qword_2561350, "Off_Ramp");
  byte_256137F = 16;
  strcpy((char *)&xmmword_2561368, "Off_Ramp_On_Left");
  byte_2561397 = 17;
  strcpy((char *)&xmmword_2561380, "Off_Ramp_On_Right");
  byte_25613AF = 14;
  strcpy((char *)&qword_2561398, "Change_Highway");
  strcpy((char *)&xmmword_25613B0, "Change_Highway_On_Left");
  HIBYTE(word_25613C6) = 22;
  qword_25613C8 = (uint64_t)operator new(0x19uLL);
  xmmword_25613D0 = xmmword_20B9250;
  strcpy((char *)qword_25613C8, "Change_Highway_On_Right");
  byte_25613F7 = 5;
  dword_25613E0 = 1735550285;
  byte_25613E4 = 101;
  byte_25613E5 = 0;
  byte_256140F = 12;
  strcpy((char *)&qword_25613F8, "Enter_Detour");
  byte_2561427 = 11;
  strcpy((char *)&qword_2561410, "Exit_Detour");
  byte_256143F = 18;
  strcpy((char *)&xmmword_2561428, "Walking_Turnaround");
  qword_2561440 = (uint64_t)operator new(0x19uLL);
  unk_2561448 = xmmword_20B9250;
  strcpy((char *)qword_2561440, "Walking_Turnaround_Sign");
  byte_256146F = 19;
  strcpy((char *)&xmmword_2561458, "Distance_Title_List");
  qword_2561470 = (uint64_t)operator new(0x19uLL);
  unk_2561478 = xmmword_20B9250;
  long long v269 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2561470, "Cross_The_Street_Spoken");
  *(void *)&v267[1] = *(void *)"t_Spoken";
  byte_256149F = 19;
  strcpy((char *)&xmmword_2561488, "Arrival_Charge_List");
  byte_25614B7 = 15;
  strcpy((char *)&qword_25614A0, "Charge_At_Start");
  strcpy(&byte_25614CF, "\tPass_Street");
  strcpy((char *)&qword_25614B8, "Pass_Exit");
  byte_25614E7 = 11;
  byte_25614FF = 17;
  strcpy((char *)&xmmword_25614E8, "Pass_Intersection");
  strcpy(&byte_2561517, "\t_PrevExitNumber");
  strcpy((char *)&qword_2561500, "Next_Exit");
  byte_256152F = 15;
  strcpy(&byte_2561547, "\t_PrevUTurn");
  strcpy((char *)&qword_2561530, "_PrevRoad");
  strcpy(&byte_256155F, "\nNext_");
  byte_2561577 = 5;
  byte_256158F = 15;
  strcpy((char *)&qword_2561578, "_At_Next_Street");
  byte_25615A7 = 21;
  strcpy((char *)&xmmword_2561590, "_At_Next_Intersection");
  byte_25615BF = 14;
  strcpy((char *)&qword_25615A8, "Charge_Station");
  byte_25615D7 = 15;
  strcpy((char *)&qword_25615C0, "_Charge_Station");
  BYTE1(qword_25615E8) = 0;
  WORD1(qword_25615E8) = 25856;
  HIDWORD(qword_25615E8) = 335544320;
  strcpy((char *)&qword_25615D8, "_Charge_Station_");
  byte_2561607 = 8;
  strcpy((char *)&qword_25615F0, "_Minimum");
  byte_256161F = 15;
  strcpy((char *)&qword_2561608, "ExitShield_Sign");
  byte_2561637 = 8;
  strcpy((char *)&qword_2561620, "Walking_");
  byte_256164F = 16;
  strcpy((char *)&xmmword_2561638, "Walking_Continue");
  byte_2561667 = 19;
  strcpy((char *)&xmmword_2561650, "Walking_Start_Route");
  qword_2561668 = (uint64_t)operator new(0x20uLL);
  xmmword_2561670 = xmmword_20B5EB0;
  strcpy((char *)qword_2561668, "Walking_Start_Route_U_Turn");
  byte_2561697 = 17;
  strcpy((char *)&xmmword_2561680, "Walking_Left_Turn");
  byte_25616AF = 18;
  strcpy((char *)&xmmword_2561698, "Walking_Right_Turn");
  qword_25616B0 = (uint64_t)operator new(0x20uLL);
  unk_25616B8 = xmmword_20B5EB0;
  strcpy((char *)qword_25616B0, "Walking_Turn_At_Roundabout");
  qword_25616C8 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B91B0;
  xmmword_25616D0 = xmmword_20B91B0;
  strcpy((char *)qword_25616C8, "Walking_U_Turn_When_Possible");
  qword_25616E0 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9390;
  unk_25616E8 = xmmword_20B9390;
  strcpy((char *)qword_25616E0, "Walking_Roundabout_Exit_Continue");
  qword_25616F8 = (uint64_t)operator new(0x20uLL);
  xmmword_2561700 = xmmword_20B91B0;
  strcpy((char *)qword_25616F8, "Walking_Roundabout_Exit_Left");
  qword_2561710 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B8890;
  unk_2561718 = xmmword_20B8890;
  strcpy((char *)qword_2561710, "Walking_Roundabout_Exit_Right");
  qword_2561728 = (uint64_t)operator new(0x20uLL);
  xmmword_2561730 = xmmword_20B8870;
  strcpy((char *)qword_2561728, "Walking_End_Of_Navigation");
  long long v271 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2561740 = (uint64_t)v0;
  unk_2561748 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v271;
  v0[25] = 0;
  byte_256176F = 8;
  strcpy((char *)&qword_2561758, "Walking_");
  qword_2561770 = (uint64_t)operator new(0x19uLL);
  unk_2561778 = v279;
  strcpy((char *)qword_2561770, "Walking_Sharp_Left_Turn");
  qword_2561788 = (uint64_t)operator new(0x20uLL);
  xmmword_2561790 = v278;
  strcpy((char *)qword_2561788, "Walking_Sharp_Right_Turn");
  qword_25617A0 = (uint64_t)operator new(0x20uLL);
  unk_25617A8 = v278;
  strcpy((char *)qword_25617A0, "Walking_Slight_Left_Turn");
  qword_25617B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25617C0 = v277;
  strcpy((char *)qword_25617B8, "Walking_Slight_Right_Turn");
  byte_25617E7 = 4;
  strcpy((char *)&dword_25617D0, "Exit");
  byte_25617FF = 4;
  strcpy((char *)&dword_25617E8, "Road");
  byte_2561817 = 7;
  strcpy((char *)&dword_2561800, "Freeway");
  byte_256182F = 12;
  strcpy((char *)&qword_2561818, "Intersection");
  byte_2561847 = 5;
  strcpy((char *)&dword_2561830, "Ferry");
  byte_256185F = 11;
  strcpy((char *)&qword_2561848, "ShuttleName");
  byte_2561877 = 5;
  strcpy((char *)&dword_2561860, "Road1");
  strcpy(&byte_256188F, "\tName");
  strcpy((char *)&qword_2561878, "Signpost1");
  byte_25618A7 = 4;
  byte_25618BF = 7;
  strcpy((char *)&dword_25618A8, "Address");
  byte_25618D7 = 7;
  strcpy((char *)&dword_25618C0, "Shield1");
  byte_25618EF = 13;
  strcpy((char *)&qword_25618D8, "TowardShield1");
  byte_2561907 = 6;
  strcpy((char *)&dword_25618F0, "Right_");
  byte_256191F = 5;
  byte_256190C = 95;
  dword_2561908 = 1952867660;
  byte_256190D = 0;
  strcpy(&byte_2561937, "\tOn_Left_");
  strcpy((char *)&qword_2561920, "On_Right_");
  byte_256194F = 8;
  byte_2561967 = 12;
  strcpy((char *)&qword_2561950, "ElevatorName");
  byte_256197F = 13;
  strcpy((char *)&qword_2561968, "EscalatorName");
  strcpy(&byte_2561997, "\nBridgeName");
  strcpy((char *)&qword_2561980, "StairsName");
  strcpy(&byte_25619AF, "\nTunnelName");
  strcpy(&byte_25619C7, "\nParking");
  byte_25619DF = 7;
  strcpy(&byte_25619F7, "\t_Escalator");
  strcpy((char *)&qword_25619E0, "_Elevator");
  strcpy(&byte_2561A0F, "\n_ElevatorName");
  byte_2561A27 = 13;
  byte_2561A3F = 14;
  strcpy((char *)&qword_2561A28, "_EscalatorName");
  byte_2561A57 = 5;
  strcpy((char *)&qword_2561A40, "_Road");
  byte_2561A6F = 8;
  strcpy((char *)&qword_2561A58, "_Freeway");
  byte_2561A87 = 13;
  strcpy((char *)&qword_2561A70, "_Intersection");
  byte_2561A9F = 6;
  strcpy((char *)&dword_2561A88, "_Road1");
  byte_2561AB7 = 6;
  strcpy((char *)&dword_2561AA0, "_Road2");
  strcpy(&byte_2561ACF, "\n_Signpost2");
  strcpy((char *)&qword_2561AB8, "_Signpost1");
  strcpy(&byte_2561AE7, "\n_Ferry");
  byte_2561AFF = 6;
  byte_2561B17 = 12;
  strcpy((char *)&qword_2561B00, "_Ferry_Ferry");
  byte_2561B2F = 12;
  strcpy((char *)&qword_2561B18, "_ShuttleName");
  qword_2561B30 = (uint64_t)operator new(0x20uLL);
  unk_2561B38 = v276;
  strcpy((char *)qword_2561B30, "_Railway_Shuttle_ShuttleName");
  byte_2561B5F = 11;
  strcpy((char *)&qword_2561B48, "_ExitNumber");
  byte_2561B77 = 5;
  dword_2561B60 = 1769489759;
  byte_2561B64 = 116;
  byte_2561B65 = 0;
  byte_2561B8F = 7;
  strcpy((char *)&dword_2561B78, "_StayOn");
  byte_2561BA7 = 7;
  strcpy((char *)&dword_2561B90, "_Stairs");
  byte_2561BBF = 5;
  strcpy((char *)&dword_2561BA8, "_Ramp");
  byte_2561BD7 = 11;
  strcpy((char *)&qword_2561BC0, "_StairsName");
  strcpy(&byte_2561BEF, "\t_Down");
  strcpy((char *)&qword_2561BD8, "_RampName");
  byte_2561C07 = 5;
  byte_2561C1F = 3;
  dword_2561C08 = 7361887;
  byte_2561C37 = 7;
  strcpy((char *)&dword_2561C20, "_Bridge");
  byte_2561C4F = 7;
  strcpy((char *)&dword_2561C38, "_Tunnel");
  byte_2561C67 = 11;
  strcpy((char *)&qword_2561C50, "_Roundabout");
  byte_2561C7F = 6;
  strcpy((char *)&dword_2561C68, "_Cross");
  byte_2561C97 = 8;
  strcpy((char *)&qword_2561C80, "_Parking");
  byte_2561CAF = 8;
  strcpy((char *)&qword_2561C98, "_Shield1");
  byte_2561CC7 = 14;
  strcpy((char *)&qword_2561CB0, "_TowardShield1");
  byte_2561CDF = 8;
  strcpy((char *)&qword_2561CC8, "_Shield2");
  byte_2561CF7 = 14;
  strcpy((char *)&qword_2561CE0, "_TowardShield2");
  byte_2561D0F = 11;
  strcpy((char *)&qword_2561CF8, "_Direction1");
  byte_2561D27 = 11;
  strcpy((char *)&qword_2561D10, "_Direction2");
  strcpy(&byte_2561D3F, "\n_TowardDirection1");
  strcpy((char *)&qword_2561D28, "Direction1");
  byte_2561D57 = 17;
  byte_2561D6F = 17;
  strcpy((char *)&xmmword_2561D58, "_TowardDirection2");
  byte_2561D87 = 16;
  strcpy((char *)&xmmword_2561D70, "TowardDirection1");
  byte_2561D9F = 7;
  strcpy((char *)&qword_2561D88, "_Spoken");
  byte_2561DB7 = 5;
  strcpy((char *)&qword_2561DA0, "_Sign");
  byte_2561DCF = 15;
  strcpy((char *)&qword_2561DB8, "_Secondary_Sign");
  byte_2561DE7 = 5;
  byte_2561DD4 = 116;
  dword_2561DD0 = 1936280671;
  byte_2561DD5 = 0;
  byte_2561DFF = 8;
  strcpy((char *)&qword_2561DE8, "_Primary");
  qword_2561E10 = 0xF00000000000000;
  strcpy(byte_2561E18, "_Secondary");
  strcpy((char *)&qword_2561E00, "_Spoken_Primary");
  strcpy(&byte_2561E2F, "\n_Secondary");
  strcpy(&byte_2561E47, "\n_Spoken_Secondar");
  BYTE1(qword_2561E58) = 0;
  WORD1(qword_2561E58) = 0;
  HIDWORD(qword_2561E58) = 285212672;
  byte_2561E77 = 13;
  strcpy((char *)&qword_2561E60, "_To_Secondary");
  BYTE1(qword_2561E88) = 0;
  WORD1(qword_2561E88) = 0;
  HIDWORD(qword_2561E88) = 335544320;
  strcpy((char *)&dword_2561E78, "_Spoken_To_Secon");
  strcpy(&byte_2561EA7, "\t_ValidDistance");
  strcpy((char *)&qword_2561E90, "_Distance");
  byte_2561EBF = 14;
  byte_2561ED7 = 6;
  strcpy((char *)&dword_2561EC0, "_Short");
  byte_2561EEF = 1;
  word_2561ED8 = 95;
  qword_2561EF0 = (uint64_t)operator new(0x20uLL);
  unk_2561EF8 = v278;
  strcpy((char *)qword_2561EF0, "Concatenate_Newline_Sign");
  int v1 = (char *)operator new(0x19uLL);
  qword_2561F08 = (uint64_t)v1;
  xmmword_2561F10 = v279;
  *(_OWORD *)int v1 = v269;
  uint64_t v2 = *(void *)&v267[1];
  *(void *)(v1 + 15) = *(void *)&v267[1];
  v1[23] = 0;
  byte_2561F37 = 12;
  strcpy((char *)&qword_2561F20, "Chain_Spoken");
  byte_2561F4F = 15;
  strcpy((char *)&qword_2561F38, "Chain_To_Spoken");
  strcpy(&byte_2561F67, "\nThen_Spoken");
  strcpy((char *)&qword_2561F50, "And_Spoken");
  byte_2561F7F = 11;
  byte_2561F97 = 18;
  strcpy((char *)&xmmword_2561F80, "Concatenate_Spoken");
  qword_2561F98 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20B9240;
  xmmword_2561FA0 = xmmword_20B9240;
  strcpy((char *)qword_2561F98, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2561FB0 = (uint64_t)operator new(0x28uLL);
  v267[2] = xmmword_20B9260;
  unk_2561FB8 = xmmword_20B9260;
  strcpy((char *)qword_2561FB0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2561FC8 = (uint64_t)operator new(0x40uLL);
  xmmword_2561FD0 = xmmword_20B9A90;
  strcpy((char *)qword_2561FC8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2561FE0 = (uint64_t)operator new(0x30uLL);
  long long v265 = xmmword_20B9A40;
  unk_2561FE8 = xmmword_20B9A40;
  strcpy((char *)qword_2561FE0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2561FF8 = (uint64_t)operator new(0x28uLL);
  long long v264 = xmmword_20E12D0;
  xmmword_2562000 = xmmword_20E12D0;
  strcpy((char *)qword_2561FF8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2562010 = (uint64_t)operator new(0x28uLL);
  long long v273 = xmmword_20B9960;
  unk_2562018 = xmmword_20B9960;
  strcpy((char *)qword_2562010, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2562028 = (uint64_t)operator new(0x28uLL);
  xmmword_2562030 = xmmword_20B93A0;
  strcpy((char *)qword_2562028, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2562040 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20E1380;
  unk_2562048 = xmmword_20E1380;
  strcpy((char *)qword_2562040, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2562058 = (uint64_t)operator new(0x30uLL);
  xmmword_2562060 = xmmword_20B93C0;
  strcpy((char *)qword_2562058, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2562070 = (uint64_t)operator new(0x38uLL);
  unk_2562078 = xmmword_20B9A60;
  strcpy((char *)qword_2562070, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2562088 = (uint64_t)operator new(0x30uLL);
  xmmword_2562090 = xmmword_20E1380;
  strcpy((char *)qword_2562088, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25620A0 = (uint64_t)operator new(0x28uLL);
  unk_25620A8 = xmmword_20B9960;
  strcpy((char *)qword_25620A0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25620B8 = (uint64_t)operator new(0x30uLL);
  long long v270 = xmmword_20B93D0;
  xmmword_25620C0 = xmmword_20B93D0;
  strcpy((char *)qword_25620B8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25620D0 = (uint64_t)operator new(0x20uLL);
  unk_25620D8 = v274;
  strcpy((char *)qword_25620D0, "Walking_Distance_Chain_Spoken");
  qword_25620E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25620F0 = v274;
  strcpy((char *)qword_25620E8, "Walking_Continue_Chain_Spoken");
  BOOL v3 = (char *)operator new(0x19uLL);
  qword_2562100 = (uint64_t)v3;
  unk_2562108 = v279;
  *(_OWORD *)BOOL v3 = v269;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_2562118 = (uint64_t)operator new(0x28uLL);
  xmmword_2562120 = v268;
  strcpy((char *)qword_2562118, "Distance_Cross_The_Street_Spoken");
  byte_2562147 = 22;
  strcpy((char *)&xmmword_2562130, "Walking_Continue_Cross");
  byte_256215F = 14;
  strcpy((char *)&qword_2562148, "Continue_Cross");
  byte_2562177 = 5;
  strcpy((char *)&dword_2562160, "Cross");
  byte_256218F = 19;
  strcpy((char *)&xmmword_2562178, "Cross_Street_Spoken");
  byte_25621A7 = 17;
  strcpy((char *)&xmmword_2562190, "Cross_Road_Spoken");
  byte_25621BF = 20;
  strcpy((char *)&xmmword_25621A8, "Use_Crosswalk_Spoken");
  byte_25621D7 = 15;
  strcpy((char *)&qword_25621C0, "Distance_Spoken");
  byte_25621EF = 19;
  strcpy((char *)&xmmword_25621D8, "Distance_And_Spoken");
  byte_2562207 = 21;
  strcpy((char *)&xmmword_25621F0, "Continue_Stage_Spoken");
  byte_256221F = 13;
  qmemcpy(&qword_2562208, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_2561E10);
  if (qword_2561E10 >= 0) {
    size_t v5 = HIBYTE(qword_2561E10);
  }
  else {
    size_t v5 = unk_2561E08;
  }
  unint64_t v6 = v5 + 13;
  byte_2562215 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_2562228 = v5 + 13;
    unk_2562230 = v9 | 0x8000000000000000;
    qword_2562220 = (uint64_t)v10;
    *uint64_t v10 = *(void *)"ContinueStage";
    size_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_2562228) = 0;
    WORD1(qword_2562228) = 0;
    HIDWORD(qword_2562228) = 0;
    unk_2562230 = 0;
    byte_2562237 = v5 + 13;
    size_t v7 = (char *)&qword_2562228 + 5;
    strcpy((char *)&qword_2562220, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_2561E00;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_2561E00;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_2561A57;
  if (byte_2561A57 >= 0) {
    size_t v13 = byte_2561A57;
  }
  else {
    size_t v13 = qword_2561A48;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    void *v18 = qword_2562208;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_2562208 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_2562208 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_2562208;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    int v19 = &qword_2561A40;
  }
  else {
    int v19 = (uint64_t *)qword_2561A40;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    size_t v20 = (const std::string::value_type *)&qword_2561E00;
  }
  else {
    size_t v20 = (const std::string::value_type *)qword_2561E00;
  }
  unint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2562248 = v21->__r_.__value_.__r.__words[2];
  xmmword_2562238 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2562267 = 5;
  strcpy((char *)&dword_2562250, "Merge");
  qword_2562268 = (uint64_t)operator new(0x20uLL);
  v267[1] = xmmword_20B8E90;
  *(_OWORD *)algn_2562270 = xmmword_20B8E90;
  strcpy((char *)qword_2562268, "Continue_Freeway_Spoken_Primary");
  byte_2562297 = 8;
  strcpy((char *)&qword_2562280, "Starting");
  byte_25622AF = 14;
  strcpy((char *)&qword_2562298, "Starting_Route");
  byte_25622C7 = 14;
  strcpy((char *)&qword_25622B0, "Resuming_Route");
  byte_25622DF = 16;
  strcpy((char *)&xmmword_25622C8, "Continuing_Route");
  byte_25622F7 = 9;
  word_25622E8 = 112;
  qword_25622E0 = *(void *)&v263[48];
  strcpy(&byte_256230F, "\nEnding");
  strcpy((char *)&word_2562300, "op");
  qword_25622F8 = *(void *)&v267[0];
  byte_2562327 = 6;
  strcpy((char *)&qword_2562328, "_Destination");
  byte_256233F = 12;
  byte_2562357 = 15;
  strcpy((char *)&qword_2562340, "_At_Destination");
  std::operator+<char>();
  qword_2562370 = (uint64_t)operator new(0x20uLL);
  unk_2562378 = v278;
  strcpy((char *)qword_2562370, "Spoken_Ending_At_Parking");
  qword_2562388 = (uint64_t)operator new(0x20uLL);
  v267[0] = xmmword_20B9800;
  xmmword_2562390 = xmmword_20B9800;
  strcpy((char *)qword_2562388, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25623A0, "Sign_Ending_At_Parking");
  HIBYTE(word_25623B6) = 22;
  byte_25623CF = 4;
  strcpy((char *)&dword_25623B8, "Home");
  byte_25623E7 = 4;
  strcpy((char *)&dword_25623D0, "Work");
  byte_25623FF = 8;
  strcpy((char *)&qword_25623E8, "Business");
  byte_2562417 = 4;
  strcpy((char *)&dword_2562400, "Name");
  byte_256242F = 13;
  strcpy((char *)&qword_2562418, "Other_Contact");
  byte_2562447 = 11;
  strcpy((char *)&qword_2562430, "ContactHome");
  byte_256245F = 11;
  *(_DWORD *)((char *)&qword_2562448 + 7) = 1802661719;
  byte_2562477 = 7;
  *(int *)((char *)&dword_2562460 + 3) = 1936942450;
  dword_2562460 = 1919181889;
  strcpy((char *)&xmmword_2562478, "Discoverability_Prompt");
  HIBYTE(word_256248E) = 22;
  byte_25624A7 = 6;
  dword_2562490 = 1634878303;
  word_2562494 = 26739;
  byte_25624BF = 8;
  qword_25624A8 = 0x697269535F6F4E5FLL;
  byte_25624D7 = 9;
  strcpy((char *)&qword_25624C0, "_CityName");
  byte_25624EF = 8;
  qword_25624D8 = 0x636972656E65475FLL;
  int v23 = byte_2562297;
  if (byte_2562297 >= 0) {
    size_t v24 = byte_2562297;
  }
  else {
    size_t v24 = qword_2562288;
  }
  LODWORD(v269) = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v25 = byte_25615D7;
  }
  else {
    size_t v25 = unk_25615C8;
  }
  qword_2562448 = *(void *)"ContactWork";
  byte_2562453 = 0;
  byte_2562467 = 0;
  byte_2562496 = 0;
  byte_25624B0 = 0;
  byte_25624E0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v263 = *(void *)"ContactWork";
  *(void *)&v263[16] = *(void *)"ContactHome";
  *(void *)&v263[32] = *(void *)"_Contact";
  *(void *)&v263[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    std::string::size_type v27 = &qword_25624F0;
    qword_25624F8 = 0;
    unk_2562500 = 0;
    qword_25624F0 = 0;
    byte_2562507 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  std::string::size_type v27 = (uint64_t *)operator new(v90 + 1);
  qword_25624F8 = v25 + v24;
  unk_2562500 = v91 | 0x8000000000000000;
  qword_25624F0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_2562280;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_2562280;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v269 >= 0) {
      uint64_t v30 = &qword_25615C0;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25615C0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_256233F;
  if (byte_256233F >= 0) {
    size_t v32 = byte_256233F;
  }
  else {
    size_t v32 = qword_2562330;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_2562508;
    qword_2562510 = 0;
    unk_2562518 = 0;
    qword_2562508 = 0;
    byte_256251F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_2562510 = v32 + v24;
  unk_2562518 = v93 | 0x8000000000000000;
  qword_2562508 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_2562280;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_2562280;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      char v37 = &qword_2562328;
    }
    else {
      char v37 = (uint64_t *)qword_2562328;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_2562520 = (uint64_t)operator new(0x19uLL);
  unk_2562528 = v279;
  strcpy((char *)qword_2562520, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_2562538;
    qword_2562540 = 0;
    unk_2562548 = 0;
    qword_2562538 = 0;
    byte_256254F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_2562540 = v32 + v24;
  unk_2562548 = v95 | 0x8000000000000000;
  qword_2562538 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_2562280;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_2562280;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_2562328;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_2562328;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2562550, "{NewBatteryPercentage}");
  HIBYTE(word_2562566) = 22;
  qword_2562568 = (uint64_t)operator new(0x20uLL);
  xmmword_2562570 = v272;
  strcpy((char *)qword_2562568, "{OriginalBatteryPercentage}");
  byte_2562597 = 19;
  strcpy((char *)&xmmword_2562580, "_Arrival_Percentage");
  int v42 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v43 = byte_2562327;
  }
  else {
    size_t v43 = qword_2562318;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      uint64_t v46 = &qword_2562310;
    }
    else {
      uint64_t v46 = (uint64_t *)qword_2562310;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v269 >= 0) {
      long long v48 = &qword_25615C0;
    }
    else {
      long long v48 = (uint64_t *)qword_25615C0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  uint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25625A8 = v49->__r_.__value_.__r.__words[2];
  xmmword_2562598 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v52 = byte_2562327;
  }
  else {
    size_t v52 = qword_2562318;
  }
  int v53 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v54 = byte_25615D7;
  }
  else {
    size_t v54 = unk_25615C8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v280, 0, sizeof(v280));
    int64_t v56 = (char *)&v280;
    *((unsigned char *)&v280.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  int64_t v56 = (char *)operator new(v98 + 1);
  v280.__r_.__value_.__l.__size_ = v54 + v52;
  v280.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      unint64_t v57 = &qword_2562310;
    }
    else {
      unint64_t v57 = (uint64_t *)qword_2562310;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  std::string v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      std::string v59 = &qword_25615C0;
    }
    else {
      std::string v59 = (uint64_t *)qword_25615C0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_2561607 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_25615F0;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_25615F0;
  }
  if (byte_2561607 >= 0) {
    std::string::size_type v61 = byte_2561607;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25615F8;
  }
  unint64_t v62 = std::string::append(&v280, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  int v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25625C0 = v64->__r_.__value_.__r.__words[2];
  xmmword_25625B0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v280.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v67 = byte_2562327;
  }
  else {
    size_t v67 = qword_2562318;
  }
  int v68 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v69 = byte_25615D7;
  }
  else {
    size_t v69 = unk_25615C8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      long long v72 = &qword_2562310;
    }
    else {
      long long v72 = (uint64_t *)qword_2562310;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  int64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      int64_t v74 = &qword_25615C0;
    }
    else {
      int64_t v74 = (uint64_t *)qword_25615C0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  std::string::size_type v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25625D8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25625C8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v78 = byte_2562327;
  }
  else {
    size_t v78 = qword_2562318;
  }
  int v79 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v80 = byte_25615D7;
  }
  else {
    size_t v80 = unk_25615C8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25625E8 = 0;
    unk_25625F0 = 0;
    qword_25625E0 = 0;
    uint64_t v82 = &qword_25625E0;
    byte_25625F7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_25625E8 = v80 + v78;
  unk_25625F0 = v103 | 0x8000000000000000;
  qword_25625E0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      int64x2_t v83 = &qword_2562310;
    }
    else {
      int64x2_t v83 = (uint64_t *)qword_2562310;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  long long v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_25615C0;
    }
    else {
      int v85 = (uint64_t *)qword_25615C0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25625F7;
  if (byte_25625F7 >= 0) {
    size_t v87 = byte_25625F7;
  }
  else {
    size_t v87 = qword_25625E8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_2562600 = v87 + 5;
    unk_2562608 = v105 | 0x8000000000000000;
    qword_25625F8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25625F8;
    qword_2562600 = 0;
    unk_2562608 = 0;
    qword_25625F8 = 0;
    byte_256260F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    int64x2_t v106 = &qword_25625E0;
  }
  else {
    int64x2_t v106 = (uint64_t *)qword_25625E0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v108 = byte_2562327;
  }
  else {
    size_t v108 = qword_2562318;
  }
  int v109 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v110 = byte_25615D7;
  }
  else {
    size_t v110 = unk_25615C8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    char v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  char v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      int64x2_t v113 = &qword_2562310;
    }
    else {
      int64x2_t v113 = (uint64_t *)qword_2562310;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  int64x2_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25615C0;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25615C0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  uint64_t v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_2562620 = v116->__r_.__value_.__r.__words[2];
  xmmword_2562610 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_2562620);
  if (qword_2562620 >= 0) {
    size_t v119 = HIBYTE(qword_2562620);
  }
  else {
    size_t v119 = *((void *)&xmmword_2562610 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    std::string v121 = (uint64_t *)operator new(v124 + 1);
    qword_2562630 = v119 + 6;
    unk_2562638 = v125 | 0x8000000000000000;
    qword_2562628 = (uint64_t)v121;
  }
  else
  {
    std::string v121 = &qword_2562628;
    qword_2562630 = 0;
    unk_2562638 = 0;
    qword_2562628 = 0;
    byte_256263F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_2562610;
  }
  else {
    uint64_t v126 = (long long *)xmmword_2562610;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v128 = byte_2562327;
  }
  else {
    size_t v128 = qword_2562318;
  }
  int v129 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v130 = byte_25615D7;
  }
  else {
    size_t v130 = unk_25615C8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  long long v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_2562310;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_2562310;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25615C0;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25615C0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_2561D9F >= 0) {
    long long v136 = (const std::string::value_type *)&qword_2561D88;
  }
  else {
    long long v136 = (const std::string::value_type *)qword_2561D88;
  }
  if (byte_2561D9F >= 0) {
    std::string::size_type v137 = byte_2561D9F;
  }
  else {
    std::string::size_type v137 = unk_2561D90;
  }
  char v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2562650 = v138->__r_.__value_.__r.__words[2];
  xmmword_2562640 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_2562327;
  if (byte_2562327 >= 0) {
    size_t v141 = byte_2562327;
  }
  else {
    size_t v141 = qword_2562318;
  }
  int v142 = byte_25615D7;
  if (byte_25615D7 >= 0) {
    size_t v143 = byte_25615D7;
  }
  else {
    size_t v143 = unk_25615C8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v280, 0, sizeof(v280));
    int64x2_t v145 = (char *)&v280;
    *((unsigned char *)&v280.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  int64x2_t v145 = (char *)operator new(v163 + 1);
  v280.__r_.__value_.__l.__size_ = v143 + v141;
  v280.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      char v146 = &qword_2562310;
    }
    else {
      char v146 = (uint64_t *)qword_2562310;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      long long v148 = &qword_25615C0;
    }
    else {
      long long v148 = (uint64_t *)qword_25615C0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_2561607 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_25615F0;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_25615F0;
  }
  if (byte_2561607 >= 0) {
    std::string::size_type v150 = byte_2561607;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25615F8;
  }
  std::string v151 = std::string::append(&v280, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_2561D9F >= 0) {
    std::string v153 = (const std::string::value_type *)&qword_2561D88;
  }
  else {
    std::string v153 = (const std::string::value_type *)qword_2561D88;
  }
  if (byte_2561D9F >= 0) {
    std::string::size_type v154 = byte_2561D9F;
  }
  else {
    std::string::size_type v154 = unk_2561D90;
  }
  char v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_2562668 = v155->__r_.__value_.__r.__words[2];
  xmmword_2562658 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v280.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2562687 = 16;
  strcpy((char *)&xmmword_2562670, "Use_NACS_Adapter");
  byte_256269F = 16;
  strcpy(byte_2562688, "Start_Route_Sign");
  qword_25626A0 = (uint64_t)operator new(0x20uLL);
  unk_25626A8 = v275;
  strcpy((char *)qword_25626A0, "Start_Route_Spoken_Primary");
  int v157 = byte_2560D37;
  if (byte_2560D37 >= 0) {
    size_t v158 = byte_2560D37;
  }
  else {
    size_t v158 = qword_2560D28;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25626B8;
    qword_25626C0 = 0;
    unk_25626C8 = 0;
    qword_25626B8 = 0;
    byte_25626CF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_2560D20;
    }
    else {
      v167 = (uint64_t *)qword_2560D20;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25626C0 = v158 + 27;
  unk_25626C8 = v166 | 0x8000000000000000;
  qword_25626B8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25626E7, "\t_Two_Lanes");
  strcpy((char *)&qword_25626D0, "_One_Lane");
  strcpy(&byte_25626FF, "\n_Three_Lanes");
  byte_2562717 = 12;
  byte_256272F = 11;
  strcpy((char *)&qword_2562718, "_Four_Lanes");
  byte_2562747 = 11;
  strcpy((char *)&qword_2562730, "_Five_Lanes");
  strcpy(&byte_256275F, "\n_Seven_Lanes");
  strcpy((char *)&qword_2562748, "_Six_Lanes");
  byte_2562777 = 12;
  byte_256278F = 12;
  strcpy((char *)&qword_2562778, "_Eight_Lanes");
  byte_25627A7 = 12;
  strcpy((char *)&qword_2562790, "_Second_Lane");
  byte_25627BF = 11;
  strcpy((char *)&qword_25627A8, "_Third_Lane");
  byte_25627D7 = 19;
  long long v269 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25627C0, "_Second_Third_Lanes");
  byte_25627EF = 4;
  strcpy((char *)&dword_25627D8, "Left");
  byte_2562807 = 5;
  byte_25627F4 = 116;
  dword_25627F0 = 1751607634;
  byte_25627F5 = 0;
  byte_256281F = 6;
  strcpy((char *)&dword_2562808, "Middle");
  BYTE1(qword_2562830) = 0;
  WORD1(qword_2562830) = 0;
  HIDWORD(qword_2562830) = 0x10000000;
  strcpy((char *)dword_2562820, "Left_Second_Lane");
  BYTE1(qword_2562848) = 0;
  WORD1(qword_2562848) = 0;
  HIDWORD(qword_2562848) = 285212672;
  strcpy((char *)&dword_2562838, "Right_Second_Lan");
  qword_2562860 = 0xF00000000000000;
  strcpy((char *)&dword_2562850, "Left_Third_Lane");
  qword_2562878 = 0x1000000000000000;
  byte_256286C = 116;
  dword_2562868 = 1751607634;
  dword_2562874 = 1701732684;
  unk_256286D = *(void *)"_Third_Lane";
  uint64_t v168 = (char *)operator new(0x19uLL);
  qword_2562880 = (uint64_t)v168;
  unk_2562888 = v279;
  *(_DWORD *)uint64_t v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v269;
  v169 = (char *)operator new(0x20uLL);
  qword_2562898 = (uint64_t)v169;
  xmmword_25628A0 = v278;
  *(_DWORD *)v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v269;
  byte_25628C7 = 5;
  strcpy((char *)&dword_25628B0, "_Stay");
  byte_25628DF = 13;
  strcpy((char *)&qword_25628C8, "Continue_Sign");
  byte_25628F7 = 8;
  strcpy((char *)&qword_25628E0, "Continue");
  int v170 = byte_2561DB7;
  if (byte_2561DB7 >= 0) {
    size_t v171 = byte_2561DB7;
  }
  else {
    size_t v171 = qword_2561DA8;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_2562900 = v171 + 8;
    qword_2562908 = v175 | 0x8000000000000000;
    qword_25628F8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    v173 = v176 + 1;
  }
  else
  {
    qword_2562908 = 0;
    HIBYTE(qword_2562908) = v171 + 8;
    qword_25628F8 = 0x65756E69746E6F43;
    qword_2562900 = 0;
    v173 = &qword_2562900;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_2561DA0;
  }
  else {
    v177 = (uint64_t *)qword_2561DA0;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_2561E10);
  if (qword_2561E10 >= 0) {
    size_t v179 = HIBYTE(qword_2561E10);
  }
  else {
    size_t v179 = unk_2561E08;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_2562918 = v179 + 8;
    qword_2562920 = v183 | 0x8000000000000000;
    qword_2562910 = (uint64_t)v184;
    void *v184 = qword_25628E0;
    v181 = v184 + 1;
  }
  else
  {
    qword_2562920 = 0;
    HIBYTE(qword_2562920) = v179 + 8;
    qword_2562910 = qword_25628E0;
    qword_2562918 = 0;
    v181 = &qword_2562918;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_2561E00;
  }
  else {
    v185 = (uint64_t *)qword_2561E00;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v282[23] = 2;
  strcpy(v282, "SW");
  v284[7] = 1;
  LOWORD(v283[0]) = 87;
  HIBYTE(v285) = 2;
  strcpy(&v284[8], "NW");
  HIBYTE(v287) = 1;
  LOWORD(v286[0]) = 78;
  HIBYTE(v289) = 2;
  strcpy((char *)&v288, "NE");
  HIBYTE(v291) = 1;
  LOWORD(v290) = 69;
  HIBYTE(v293) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_2562928, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v293) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v289) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v288);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v285) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v286[0]);
  if ((SHIBYTE(v285) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v284[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v284[8]);
  if ((v284[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v282[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v282);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v283[0]);
  if ((v282[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_2562957 = 13;
  strcpy((char *)&qword_2562940, "{instruction}");
  byte_256296F = 20;
  strcpy(byte_2562958, "{primaryInstruction}");
  strcpy((char *)&xmmword_2562970, "{secondaryInstruction}");
  HIBYTE(word_2562986) = 22;
  qword_2562988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2562990 = v277;
  strcpy((char *)qword_2562988, "{andSecondaryInstruction}");
  qword_25629A0 = (uint64_t)operator new(0x20uLL);
  unk_25629A8 = v278;
  strcpy((char *)qword_25629A0, "{toSecondaryInstruction}");
  byte_25629CF = 21;
  strcpy(byte_25629B8, "{continueInstruction}");
  qword_25629D0 = (uint64_t)operator new(0x20uLL);
  unk_25629D8 = v275;
  strcpy((char *)qword_25629D0, "{thenSecondaryInstruction}");
  byte_25629FF = 14;
  strcpy((char *)&qword_25629E8, "{instruction1}");
  byte_2562A17 = 14;
  strcpy((char *)&qword_2562A00, "{instruction2}");
  strcpy(&byte_2562A2F, "\n{nextDistance}");
  strcpy((char *)&qword_2562A18, "{distance}");
  byte_2562A47 = 14;
  byte_2562A5F = 16;
  strcpy(byte_2562A48, "{valid_distance}");
  strcpy(&byte_2562A77, "\n{valid_distance}");
  strcpy((char *)&qword_2562A60, "{distance}");
  byte_2562A8F = 16;
  byte_2562AA7 = 15;
  strcpy((char *)&qword_2562A90, "{ClimbDistance}");
  byte_2562ABF = 17;
  strcpy(byte_2562AA8, "{DescentDistance}");
  byte_2562AD7 = 13;
  strcpy((char *)&qword_2562AC0, "{nonBrkSpace}");
  byte_2562AEF = 9;
  strcpy((char *)&qword_2562AD8, "{newLine}");
  byte_2562B07 = 6;
  word_2562AF4 = -24382;
  dword_2562AF0 = -1211981630;
  byte_2562AF6 = 0;
  byte_2562B1F = 2;
  word_2562B08 = -24382;
  byte_2562B0A = 0;
  byte_2562B37 = 1;
  word_2562B20 = 10;
  byte_2562B4F = 1;
  word_2562B38 = 32;
  byte_2562B67 = 2;
  strcpy((char *)&word_2562B50, "\n\n");
  strcpy(&byte_2562B7F, "\t{TowardShield1}");
  strcpy((char *)&qword_2562B68, "{Shield1}");
  byte_2562B97 = 15;
  strcpy(&byte_2562BAF, "\t{TowardShield2}");
  strcpy((char *)&qword_2562B98, "{Shield2}");
  byte_2562BC7 = 15;
  byte_2562BDF = 12;
  strcpy((char *)&qword_2562BC8, "{Direction1}");
  byte_2562BF7 = 12;
  strcpy((char *)&qword_2562BE0, "{Direction2}");
  byte_2562C0F = 18;
  strcpy((char *)&xmmword_2562BF8, "{TowardDirection1}");
  byte_2562C27 = 18;
  strcpy((char *)&xmmword_2562C10, "{TowardDirection2}");
  byte_2562C3F = 7;
  strcpy((char *)&dword_2562C28, "{Icon1}");
  byte_2562C57 = 7;
  strcpy((char *)&dword_2562C40, "{Icon2}");
  byte_2562C58[23] = 14;
  strcpy(byte_2562C58, "{Intersection}");
  byte_2562C87 = 6;
  strcpy((char *)&xmmword_2562C70, "{Road}");
  byte_2562C9F = 7;
  strcpy((char *)&dword_2562C88, "{Road1}");
  byte_2562CB7 = 7;
  strcpy((char *)&xmmword_2562CA0, "{Road2}");
  strcpy(&byte_2562CCF, "\n{Freeway}");
  strcpy((char *)&qword_2562CB8, "{Elevator}");
  strcpy(&byte_2562CE7, "\t{Ferry}");
  byte_2562CFF = 7;
  byte_2562D17 = 13;
  strcpy((char *)&xmmword_2562D00, "{ShuttleName}");
  byte_2562D2F = 11;
  strcpy((char *)&qword_2562D18, "{Signpost1}");
  byte_2562D47 = 11;
  strcpy((char *)&xmmword_2562D30, "{Signpost2}");
  byte_2562D5F = 12;
  strcpy((char *)&xmmword_2562D48, "{ExitNumber}");
  strcpy(&byte_2562D77, "\t{Name}");
  strcpy((char *)&xmmword_2562D60, "{Address}");
  byte_2562D8F = 6;
  byte_2562DA7 = 11;
  strcpy((char *)&xmmword_2562D90, "{PlaceName}");
  byte_2562DBF = 14;
  strcpy((char *)&xmmword_2562DA8, "{ElevatorName}");
  byte_2562DD7 = 15;
  strcpy((char *)&xmmword_2562DC0, "{EscalatorName}");
  byte_2562DEF = 12;
  strcpy((char *)&xmmword_2562DD8, "{StairsName}");
  strcpy(&byte_2562E07, "\n{BridgeName}");
  strcpy((char *)&xmmword_2562DF0, "{RampName}");
  byte_2562E1F = 12;
  byte_2562E37 = 12;
  strcpy((char *)&xmmword_2562E20, "{TunnelName}");
  byte_2562E4F = 13;
  strcpy((char *)&xmmword_2562E38, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2562C58;
  *(_OWORD *)long long v282 = xmmword_2562C70;
  *(void *)&v282[16] = unk_2562C80;
  *(_OWORD *)std::string v283 = *(_OWORD *)&dword_2562C88;
  *(void *)v284 = unk_2562C98;
  *(_OWORD *)&v284[8] = xmmword_2562CA0;
  uint64_t v285 = unk_2562CB0;
  *(_OWORD *)v286 = *(_OWORD *)&qword_2562CB8;
  uint64_t v287 = unk_2562CC8;
  uint64_t v289 = unk_2562CE0;
  long long v288 = xmmword_2562CD0;
  long long v290 = *(_OWORD *)&dword_2562CE8;
  uint64_t v291 = unk_2562CF8;
  uint64_t v293 = unk_2562D10;
  long long __p = xmmword_2562D00;
  long long v294 = *(_OWORD *)&qword_2562D18;
  uint64_t v295 = unk_2562D28;
  uint64_t v297 = unk_2562D40;
  long long v296 = xmmword_2562D30;
  long long v298 = xmmword_2562D48;
  long long v300 = xmmword_2562D60;
  uint64_t v299 = unk_2562D58;
  uint64_t v301 = unk_2562D70;
  long long v302 = xmmword_2562D78;
  long long v304 = xmmword_2562D90;
  uint64_t v303 = unk_2562D88;
  uint64_t v305 = unk_2562DA0;
  long long v306 = xmmword_2562DA8;
  long long v308 = xmmword_2562DC0;
  uint64_t v307 = unk_2562DB8;
  uint64_t v309 = unk_2562DD0;
  long long v310 = xmmword_2562DD8;
  long long v312 = xmmword_2562DF0;
  uint64_t v311 = unk_2562DE8;
  uint64_t v313 = unk_2562E00;
  long long v314 = xmmword_2562E08;
  long long v316 = xmmword_2562E20;
  uint64_t v315 = unk_2562E18;
  uint64_t v317 = unk_2562E30;
  uint64_t v319 = unk_2562E48;
  long long v318 = xmmword_2562E38;
  sub_4BDC0C(qword_2562E50, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v319) < 0)
  {
    operator delete((void *)v318);
    if ((SHIBYTE(v317) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v315) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v316);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v313) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v314);
  if ((SHIBYTE(v313) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v311) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v312);
  if ((SHIBYTE(v311) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v309) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v310);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v307) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v308);
  if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v305) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v306);
  if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v304);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v302);
  if ((SHIBYTE(v301) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v299) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v300);
  if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v297) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v298);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v295) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v296);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v293) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v294);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v288);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v285) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v286[0]);
  if ((SHIBYTE(v285) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v284[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v284[8]);
  if ((v284[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v282[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v282);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v283[0]);
  if ((v282[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2562E68 = (uint64_t)operator new(0x19uLL);
  unk_2562E70 = v279;
  strcpy((char *)qword_2562E68, "From_User_Location_List");
  byte_2562E97 = 20;
  strcpy(byte_2562E80, "Origin_Waypoint_List");
  qword_2562E98 = (uint64_t)operator new(0x20uLL);
  unk_2562EA0 = v275;
  strcpy((char *)qword_2562E98, "Intermediate_Waypoint_List");
  unk_2562EB0 = operator new(0x20uLL);
  unk_2562EB8 = v277;
  strcpy(unk_2562EB0, "Destination_Waypoint_List");
  byte_2562EDF = 15;
  strcpy(byte_2562EC8, "{toDestination}");
  byte_2562EF7 = 13;
  strcpy((char *)&xmmword_2562EE0, "{Destination}");
  byte_2562F0F = 7;
  strcpy(byte_2562EF8, "To_Home");
  byte_2562F27 = 14;
  strcpy(byte_2562F10, "To_ContactHome");
  byte_2562F3F = 7;
  strcpy(byte_2562F28, "To_Work");
  byte_2562F57 = 14;
  strcpy(byte_2562F40, "To_ContactWork");
  strcpy(&byte_2562F6F, "\nTo_Business");
  strcpy(byte_2562F58, "To_Address");
  byte_2562F87 = 11;
  byte_2562F9F = 16;
  strcpy(byte_2562F88, "To_Other_Contact");
  strcpy(&byte_2562FB7, "\tTo_ContactSchool");
  strcpy(byte_2562FA0, "To_School");
  byte_2562FCF = 16;
  byte_2562FE7 = 17;
  strcpy(algn_2562FD0, "To_PersonLocation");
  qword_2562FE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2562FF0 = v276;
  strcpy((char *)qword_2562FE8, "To_ContactCustomLabelAddress");
  byte_2563017 = 7;
  strcpy((char *)&dword_2563000, "At_Home");
  byte_256302F = 14;
  strcpy((char *)&qword_2563018, "At_ContactHome");
  byte_2563047 = 7;
  strcpy((char *)&dword_2563030, "At_Work");
  byte_256305F = 14;
  strcpy((char *)&qword_2563048, "At_ContactWork");
  strcpy(&byte_2563077, "\nAt_Business");
  strcpy((char *)&qword_2563060, "At_Address");
  byte_256308F = 11;
  byte_25630A7 = 16;
  strcpy(algn_2563090, "At_Other_Contact");
  byte_25630BF = 4;
  strcpy((char *)&dword_25630A8, "Home");
  byte_25630D7 = 11;
  strcpy((char *)&qword_25630C0 + 7, "Home");
  qword_25630C0 = *(void *)&v263[16];
  byte_25630EF = 4;
  strcpy((char *)&dword_25630D8, "Work");
  byte_2563107 = 11;
  strcpy((char *)&qword_25630F0 + 7, "Work");
  qword_25630F0 = *(void *)v263;
  byte_256311F = 7;
  strcpy((char *)&dword_2563108, "Address");
  byte_2563137 = 8;
  strcpy((char *)&qword_2563120, "Business");
  byte_256314F = 13;
  qword_2563138 = *(void *)&v263[48];
  *(uint64_t *)((char *)&qword_2563138 + 5) = *(void *)&v263[32];
  byte_2563145 = 0;
  byte_2563167 = 6;
  strcpy((char *)&dword_2563150, "School");
  byte_256317F = 13;
  strcpy((char *)&qword_2563168, "ContactSchool");
  byte_2563197 = 14;
  strcpy((char *)&qword_2563180, "PersonLocation");
  qword_2563198 = (uint64_t)operator new(0x20uLL);
  xmmword_25631A0 = v277;
  strcpy((char *)qword_2563198, "ContactCustomLabelAddress");
  if (byte_2562EF7 < 0)
  {
    sub_4200(&xmmword_25631B0, (void *)xmmword_2562EE0, *((unint64_t *)&xmmword_2562EE0 + 1));
  }
  else
  {
    xmmword_25631B0 = xmmword_2562EE0;
    qword_25631C0 = unk_2562EF0;
  }
  byte_25631DF = 16;
  strcpy((char *)&xmmword_25631C8, "{PrevExitNumber}");
  byte_25631F7 = 10;
  strcpy((char *)&qword_25631E0, "{PrevRoad}");
  qword_25631F8 = (uint64_t)operator new(0x20uLL);
  unk_2563200 = v278;
  strcpy((char *)qword_25631F8, "{RouteTotalExpectedTime}");
  byte_2563227 = 18;
  strcpy(byte_2563210, "{ChargePercentage}");
  qword_2563228 = (uint64_t)operator new(0x20uLL);
  unk_2563230 = v272;
  strcpy((char *)qword_2563228, "{RemainingChargePercentage}");
  byte_2563257 = 16;
  strcpy(byte_2563240, "{ChargeDuration}");
  byte_256326F = 15;
  strcpy((char *)&qword_2563258, "{ConnectorType}");
  byte_2563287 = 19;
  strcpy(byte_2563270, "{ChargeStationName}");
  byte_256329F = 7;
  strcpy((char *)&dword_2563288, "{Power}");
  byte_25632B7 = 13;
  strcpy((char *)&qword_25632A0, "{VehicleName}");
  byte_25632CF = 18;
  strcpy((char *)&xmmword_25632B8, "{AreaIncidentName}");
  byte_25632E7 = 14;
  strcpy((char *)&qword_25632D0, "{AreaIncident}");
  byte_25632FF = 16;
  strcpy((char *)&xmmword_25632E8, "{AffectedRegion}");
  byte_2563317 = 21;
  strcpy(byte_2563300, "{AreaIncidentWeblink}");
  byte_256332F = 20;
  strcpy((char *)&xmmword_2563318, "{AreaIncidentAgency}");
  byte_2563347 = 11;
  strcpy((char *)&qword_2563330, "{IssueTime}");
  byte_256335F = 12;
  strcpy((char *)&qword_2563348, "{UpdateTime}");
  byte_2563377 = 11;
  strcpy((char *)&qword_2563360, "{IssueDate}");
  byte_256338F = 12;
  strcpy((char *)&qword_2563378, "{UpdateDate}");
  qword_2563390 = (uint64_t)operator new(0x20uLL);
  unk_2563398 = v278;
  strcpy((char *)qword_2563390, "{AreaIncidentDataSource}");
  byte_25633BF = 13;
  strcpy((char *)&qword_25633A8, "{AreaHectare}");
  byte_25633D7 = 10;
  strcpy((char *)&qword_25633C0, "{AreaAcre}");
  qword_25633D8 = (uint64_t)operator new(0x20uLL);
  unk_25633E0 = v274;
  strcpy((char *)qword_25633D8, "{WildfirePercentageContained}");
  qword_25633F0 = (uint64_t)operator new(0x28uLL);
  unk_25633F8 = v267[2];
  strcpy((char *)qword_25633F0, "{WildfireExpectedContainmentDate}");
  qword_2563408 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2563410 = v276;
  strcpy((char *)qword_2563408, "{ServerRecommendedRouteName}");
  qword_2563420 = (uint64_t)operator new(0x20uLL);
  unk_2563428 = v276;
  strcpy((char *)qword_2563420, "{ServerNonRecommendedRoute1}");
  qword_2563438 = (uint64_t)operator new(0x20uLL);
  unk_2563440 = v276;
  strcpy((char *)qword_2563438, "{ServerNonRecommendedRoute2}");
  byte_2563467 = 12;
  strcpy((char *)&qword_2563450, "{ClientDest}");
  byte_256347F = 6;
  strcpy((char *)&dword_2563468, "{Name}");
  qword_2563480 = (uint64_t)operator new(0x20uLL);
  unk_2563488 = v267[1];
  strcpy((char *)qword_2563480, "ProactiveAlert_FasterRouteTitle");
  qword_2563498 = (uint64_t)operator new(0x20uLL);
  unk_25634A0 = v275;
  strcpy((char *)qword_2563498, "ProactiveAlert_RoadClosure");
  qword_25634B0 = (uint64_t)operator new(0x30uLL);
  unk_25634B8 = v270;
  strcpy((char *)qword_25634B0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25634C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25634D0 = v273;
  strcpy((char *)qword_25634C8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25634E0 = (uint64_t)operator new(0x28uLL);
  unk_25634E8 = v273;
  strcpy((char *)qword_25634E0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25634F8 = (uint64_t)operator new(0x28uLL);
  unk_2563500 = v273;
  strcpy((char *)qword_25634F8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_2563510 = (uint64_t)operator new(0x30uLL);
  unk_2563518 = xmmword_20B93B0;
  strcpy((char *)qword_2563510, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_256353F = 17;
  strcpy(byte_2563528, "Proactive_Driving");
  strcpy(&byte_2563557, "\n{RouteName}");
  strcpy((char *)&qword_2563540, "_RouteName");
  byte_256356F = 11;
  qword_2563570 = (uint64_t)operator new(0x28uLL);
  unk_2563578 = v267[2];
  strcpy((char *)qword_2563570, "Pass_Traffic_Light_Spoken_Primary");
  qword_2563588 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2563590 = v274;
  strcpy((char *)qword_2563588, "Pass_Stop_Sign_Spoken_Primary");
  *(void *)&algn_2563590[16] = operator new(0x20uLL);
  *(_OWORD *)&algn_2563590[24] = v267[0];
  strcpy(*(char **)&algn_2563590[16], "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25635CF, "\nBannerBody");
  strcpy(&algn_2563590[40], "BannerHead");
  strcpy(&byte_25635E7, "\nBannerDescription");
  byte_25635FF = 17;
  strcpy(&byte_2563617, "\n_Incident");
  strcpy((char *)&qword_2563600, "VoiceAlert");
  strcpy(&byte_256362F, "\t_Area_Incident");
  byte_2563647 = 14;
  byte_256365F = 15;
  strcpy((char *)&qword_2563648, "_Area_Incidents");
  strcpy(&byte_2563677, "\t_Crash");
  strcpy((char *)&qword_2563660, "_Accident");
  byte_256368F = 6;
  byte_25636A7 = 16;
  strcpy((char *)&xmmword_2563690, "_Congestion_Zone");
  strcpy(&byte_25636BF, "\n_Environmental_Zone");
  strcpy((char *)&qword_25636A8, "_Toll_Zone");
  byte_25636D7 = 19;
  BYTE1(qword_25636E8) = 116;
  WORD1(qword_25636E8) = 0;
  HIDWORD(qword_25636E8) = 301989888;
  strcpy(byte_25636F0, "_Construction");
  strcpy((char *)&qword_25636D8, "_Incident_Accide");
  byte_2563707 = 13;
  byte_256371F = 7;
  strcpy((char *)&dword_2563708, "_Hazard");
  byte_2563737 = 12;
  strcpy((char *)&qword_2563720, "_LaneClosure");
  byte_256374F = 12;
  strcpy((char *)&qword_2563738, "_LaneTrailer");
  qmemcpy(&byte_2563767, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2563750, "_Shoulder");
  qword_2563778 = 0x1500007200000000;
  *(void *)algn_2563774 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2563780, "_Causing_Traffic_Delay");
  HIBYTE(word_2563796) = 22;
  byte_25637AF = 6;
  strcpy((char *)&dword_2563798, "_Timed");
  byte_25637C7 = 12;
  strcpy((char *)&qword_25637B0, "_HasDistance");
  byte_25637DF = 8;
  strcpy((char *)&qword_25637C8, "_Closure");
  strcpy(&byte_25637F7, "\n_BadRoad");
  strcpy((char *)&qword_25637E0, "_NoReroute");
  byte_256380F = 8;
  byte_2563827 = 12;
  strcpy((char *)&qword_2563810, "_TollTrailer");
  byte_256383F = 12;
  strcpy((char *)&qword_2563828, "_BestTrailer");
  byte_2563857 = 8;
  strcpy((char *)&qword_2563840, "_Trailer");
  byte_256386F = 18;
  strcpy((char *)&xmmword_2563858, "_Secondary_Trailer");
  byte_2563887 = 8;
  strcpy((char *)&qword_2563870, "_Savings");
  byte_256389F = 8;
  strcpy((char *)&qword_2563888, "_AltRoad");
  byte_25638B7 = 6;
  strcpy((char *)&dword_25638A0, "_Named");
  byte_25638CF = 6;
  strcpy((char *)&dword_25638B8, "_NAMED");
  byte_25638E7 = 22;
  strcpy((char *)&xmmword_25638D0, "_Named_Suggested_Route");
  qword_2563900 = 0x1000000000000000;
  xmmword_25638F0 = xmmword_20E81D0;
  byte_256391F = 11;
  strcpy((char *)&qword_2563908, "_Speed_Trap");
  byte_2563937 = 4;
  strcpy((char *)&dword_2563920, "_UGI");
  byte_256394F = 12;
  strcpy((char *)&qword_2563938, "_Safer_Route");
  qword_2563950 = (uint64_t)operator new(0x20uLL);
  unk_2563958 = v267[1];
  strcpy((char *)qword_2563950, "BlockedRouteByBlockingIncident_");
  qword_2563968 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9280;
  *(_OWORD *)algn_2563970 = xmmword_20B9280;
  strcpy((char *)qword_2563968, "BlockedRouteByManeuverRestriction_");
  qword_2563980 = (uint64_t)operator new(0x20uLL);
  unk_2563988 = v267[0];
  strcpy((char *)qword_2563980, "BlockedRouteByTimeRestriction_");
  qword_2563998 = (uint64_t)operator new(0x28uLL);
  unk_25639A0 = xmmword_20B8FD0;
  strcpy((char *)qword_2563998, "SuggestRouteToAvoidBlockingIncident_");
  qword_25639B0 = (uint64_t)operator new(0x30uLL);
  unk_25639B8 = xmmword_20B9380;
  strcpy((char *)qword_25639B0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25639C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25639D0 = xmmword_20B93E0;
  strcpy((char *)qword_25639C8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25639F7 = 1;
  word_25639E0 = 95;
  strcpy((char *)&xmmword_25639F8, "IncidentsCausingDelay_");
  HIBYTE(word_2563A0E) = 22;
  qword_2563A10 = (uint64_t)operator new(0x19uLL);
  unk_2563A18 = v279;
  strcpy((char *)qword_2563A10, "NonVotableRoadIncident_");
  byte_2563A3F = 20;
  strcpy(byte_2563A28, "VotableRoadIncident_");
  byte_2563A57 = 13;
  strcpy((char *)&qword_2563A40, "AreaIncident_");
  byte_2563A6F = 15;
  strcpy((char *)&qword_2563A58, "CongestionZone_");
  qword_2563A70 = (uint64_t)operator new(0x20uLL);
  unk_2563A78 = v278;
  strcpy((char *)qword_2563A70, "EVModifiedChargingStops_");
  byte_2563A9F = 13;
  strcpy((char *)&qword_2563A88, "EVDisconnect_");
  byte_2563AB7 = 12;
  strcpy((char *)&qword_2563AA0, "EVReconnect_");
  qword_2563AB8 = (uint64_t)operator new(0x20uLL);
  unk_2563AC0 = v276;
  strcpy((char *)qword_2563AB8, "EVOfflineToOnlineTransition_");
  byte_2563AE7 = 13;
  strcpy((char *)&qword_2563AD0, "EVOfflineSAR_");
  byte_2563AFF = 21;
  strcpy((char *)&xmmword_2563AE8, "EVTowingNotSupported_");
  byte_2563B17 = 18;
  strcpy(byte_2563B00, "EVInfeasibleRoute_");
  qword_2563B18 = (uint64_t)operator new(0x38uLL);
  unk_2563B20 = xmmword_20B8DF0;
  strcpy((char *)qword_2563B18, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2563B30 = (uint64_t)operator new(0x40uLL);
  unk_2563B38 = xmmword_20B98C0;
  strcpy((char *)qword_2563B30, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2563B48 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2563B50 = v271;
  strcpy((char *)qword_2563B48, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v267, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v267));
  qword_2563B60 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v263[50] = 0;
  *(_DWORD *)&v263[52] = 0;
  *(void *)&v263[56] = 0x8000000000000030;
  unk_2563B68 = xmmword_20B9A80;
  strcpy((char *)qword_2563B60, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v263, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2563B78 = (uint64_t)operator new(0x30uLL);
  unk_2563B80 = v270;
  strcpy((char *)qword_2563B78, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2563B90 = (uint64_t)v186;
  unk_2563B98 = v271;
  _OWORD *v186 = v267[2];
  v186[1] = v267[1];
  *(_OWORD *)((char *)v186 + 28) = v267[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2563BA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2563BB0 = v269;
  strcpy((char *)qword_2563BA8, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_2563BC0 = (uint64_t)v187;
  unk_2563BC8 = *(_OWORD *)&v263[48];
  _OWORD *v187 = *(_OWORD *)&v263[32];
  v187[1] = *(_OWORD *)&v263[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v263;
  *((unsigned char *)v187 + 46) = 0;
  qword_2563BD8 = (uint64_t)operator new(0x28uLL);
  unk_2563BE0 = v273;
  strcpy((char *)qword_2563BD8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2563BF0 = (uint64_t)operator new(0x28uLL);
  unk_2563BF8 = v266;
  strcpy((char *)qword_2563BF0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2563C08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2563C10 = v278;
  strcpy((char *)qword_2563C08, "OfflineToOnlineNewRoute_");
  qword_2563C20 = (uint64_t)operator new(0x40uLL);
  unk_2563C28 = xmmword_20B98C0;
  strcpy((char *)qword_2563C20, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_2563C4F = 20;
  strcpy((char *)&xmmword_2563C38, "LPR_OFFLINE_REROUTE_");
  byte_2563C67 = 16;
  strcpy(algn_2563C50, "LPR_OFFLINE_SAR_");
  byte_2563C7F = 20;
  strcpy((char *)&xmmword_2563C68, "LPR_OFFLINE_REROUTE_");
  byte_2563C97 = 16;
  strcpy(byte_2563C80, "LPR_OFFLINE_SAR_");
  byte_2563CAF = 19;
  strcpy((char *)&xmmword_2563C98, "SuggestFasterRoute_");
  qword_2563CB0 = (char *)operator new(0x20uLL);
  xmmword_2563CB8 = v277;
  strcpy(qword_2563CB0, "AreaIncidentSaferReroute_");
  byte_2563CDF = 12;
  strcpy((char *)&qword_2563CC8, "_Remove_Stop");
  byte_2563CF7 = 13;
  strcpy((char *)&qword_2563CE0, "_Remove_Stops");
  strcpy(&byte_2563D0F, "\t_Add_Stops");
  strcpy((char *)&qword_2563CF8, "_Add_Stop");
  strcpy(&byte_2563D27, "\n_Change_Route");
  byte_2563D3F = 13;
  byte_2563D57 = 15;
  strcpy((char *)&qword_2563D40, "_Different_Stop");
  byte_2563D6F = 16;
  strcpy((char *)&xmmword_2563D58, "_Different_Stops");
  byte_2563D87 = 15;
  strcpy((char *)&qword_2563D70, "_EV_Remove_Stop");
  byte_2563D9F = 16;
  strcpy((char *)&xmmword_2563D88, "_EV_Remove_Stops");
  byte_2563DB7 = 12;
  strcpy((char *)&qword_2563DA0, "_EV_Add_Stop");
  byte_2563DCF = 13;
  strcpy((char *)&qword_2563DB8, "_EV_Add_Stops");
  byte_2563DE7 = 15;
  strcpy((char *)&qword_2563DD0, "_EV_Low_Battery");
  byte_2563DFF = 14;
  strcpy((char *)&qword_2563DE8, "_EV_Infeasible");
  byte_2563E17 = 15;
  strcpy((char *)&qword_2563E00, "_EV_Last_Chance");
  qword_2563E18 = (uint64_t)operator new(0x20uLL);
  unk_2563E20 = v278;
  strcpy((char *)qword_2563E18, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_2563D18;
  qword_2563E30 = (uint64_t)operator new(0x20uLL);
  unk_2563E38 = v277;
  strcpy((char *)qword_2563E30, "_EV_Low_Battery_Add_Stops");
  qword_2563E48 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2563E50 = v279;
  strcpy((char *)qword_2563E48, "_EV_Infeasible_Add_Stop");
  int v189 = byte_2563D27;
  if (byte_2563D27 >= 0) {
    size_t v190 = byte_2563D27;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    v196 = (char *)operator new(v194 + 1);
    qword_2563E68 = v190 + 14;
    unk_2563E70 = v195 | 0x8000000000000000;
    qword_2563E60 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2563E68) = 0;
    WORD1(qword_2563E68) = 0;
    HIDWORD(qword_2563E68) = 0;
    unk_2563E70 = 0;
    byte_2563E77 = v190 + 14;
    strcpy((char *)&qword_2563E60, "_EV_Infe");
    v192 = (char *)&qword_2563E68 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_2563D10;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  v198 = (char *)operator new(0x20uLL);
  qword_2563E78 = (uint64_t)v198;
  unk_2563E80 = v278;
  *(void *)v198 = qword_2563E00;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_2563E00 + 7);
  *(void *)(v198 + 15) = qword_2563CF8;
  v198[23] = word_2563D00;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    v200 = (uint64_t *)operator new(v201 + 1);
    qword_2563E98 = v190 + 15;
    unk_2563EA0 = v202 | 0x8000000000000000;
    qword_2563E90 = (uint64_t)v200;
  }
  else
  {
    v200 = &qword_2563E90;
    qword_2563E98 = 0;
    unk_2563EA0 = 0;
    qword_2563E90 = 0;
    byte_2563EA7 = v190 + 15;
  }
  uint64_t *v200 = qword_2563E00;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_2563E00 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_2563D10;
    }
    else {
      v204 = (uint64_t *)qword_2563D10;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_2563EBF = 17;
  strcpy((char *)&xmmword_2563EA8, "_EV_Forced_Detour");
  qword_2563EC0 = (uint64_t)operator new(0x20uLL);
  unk_2563EC8 = v277;
  strcpy((char *)qword_2563EC0, "_EV_Higher_Arrival_Charge");
  qword_2563ED8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2563EE0 = xmmword_20B8FD0;
  strcpy((char *)qword_2563ED8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2563F07 = 16;
  strcpy(&algn_2563EE0[16], "_EV_Out_Of_Range");
  qword_2563F08 = (uint64_t)operator new(0x20uLL);
  unk_2563F10 = v272;
  strcpy((char *)qword_2563F08, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2563F20, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2563F36) = 22;
  qword_2563F38 = (uint64_t)operator new(0x19uLL);
  unk_2563F40 = v279;
  strcpy((char *)qword_2563F38, "_EV_Forced_Modify_Stops");
  byte_2563F67 = 19;
  strcpy(byte_2563F50, "_EV_Forced_Add_Stop");
  byte_2563F7F = 20;
  strcpy((char *)&xmmword_2563F68, "_EV_Forced_Add_Stops");
  byte_2563F97 = 21;
  strcpy(byte_2563F80, "_EV_Battery_Info_Lost");
  qword_2563F98 = (uint64_t)operator new(0x20uLL);
  unk_2563FA0 = v277;
  strcpy((char *)qword_2563F98, "_EV_Battery_Info_Restored");
  qword_2563FB0 = (uint64_t)operator new(0x20uLL);
  unk_2563FB8 = v278;
  strcpy((char *)qword_2563FB0, "_EV_Towing_Not_Supported");
  qword_2563FC8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2563FD0 = v268;
  strcpy((char *)qword_2563FC8, "_EV_Offline_to_Online_Transition");
  byte_2563FF7 = 15;
  strcpy((char *)&qword_2563FE0, "_EV_Offline_SAR");
  qword_2563FF8 = (uint64_t)operator new(0x20uLL);
  unk_2564000 = v276;
  strcpy((char *)qword_2563FF8, "_Offline_to_Online_New_Route");
  byte_2564027 = 12;
  strcpy((char *)&qword_2564010, "BannerButton");
  byte_256403F = 8;
  strcpy((char *)&qword_2564028, "_Dismiss");
  byte_2564057 = 3;
  word_2564040 = 20319;
  byte_2564042 = 75;
  byte_2564043 = 0;
  byte_256406F = 11;
  strcpy((char *)&qword_2564058, "_Still_Here");
  byte_2564087 = 8;
  strcpy((char *)&qword_2564070, "_Cleared");
  qmemcpy(&byte_256409F, "\nBannerButton", 13);
  strcpy((char *)&qword_2564088, "_No_Thanks");
  uint64_t v205 = qword_2564018;
  qword_25640B0 = 0x1400000000000000;
  *(void *)algn_25640AC = 0x7373696D7369445FLL;
  qword_25640C8 = 0xF00000000000000;
  qword_25640C0 = 0x4B4F5F6E6F7474;
  int v206 = byte_2563DB7;
  if (byte_2563DB7 >= 0) {
    size_t v207 = byte_2563DB7;
  }
  else {
    size_t v207 = qword_2563DA8;
  }
  unint64_t v208 = v207 + 12;
  qword_25640B8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_25640D8 = v207 + 12;
    unk_25640E0 = v211 | 0x8000000000000000;
    qword_25640D0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25640D8) = 0;
    HIWORD(qword_25640D8) = 0;
    unk_25640E0 = 0;
    byte_25640E7 = v207 + 12;
    strcpy((char *)&qword_25640D0, "BannerButton");
    v209 = (char *)&qword_25640D8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_2563DA0;
  }
  else {
    v213 = (uint64_t *)qword_2563DA0;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_2563DCF;
  if (byte_2563DCF >= 0) {
    size_t v215 = byte_2563DCF;
  }
  else {
    size_t v215 = unk_2563DC0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_25640F0 = v215 + 12;
    unk_25640F8 = v219 | 0x8000000000000000;
    qword_25640E8 = (uint64_t)v220;
    *(void *)v220 = qword_2564010;
    *((_DWORD *)v220 + 2) = qword_2564018;
    v217 = v220 + 12;
  }
  else
  {
    qword_25640F0 = 0;
    unk_25640F8 = 0;
    byte_25640FF = v215 + 12;
    LODWORD(qword_25640F0) = qword_2564018;
    qword_25640E8 = qword_2564010;
    v217 = (char *)&qword_25640F0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_2563DB8;
  }
  else {
    v221 = (uint64_t *)qword_2563DB8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2563D87;
  if (byte_2563D87 >= 0) {
    size_t v223 = byte_2563D87;
  }
  else {
    size_t v223 = unk_2563D78;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2564108 = v223 + 12;
    unk_2564110 = v227 | 0x8000000000000000;
    qword_2564100 = (uint64_t)v228;
    *(void *)v228 = qword_2564010;
    *((_DWORD *)v228 + 2) = qword_2564018;
    v225 = v228 + 12;
  }
  else
  {
    qword_2564108 = 0;
    unk_2564110 = 0;
    byte_2564117 = v223 + 12;
    LODWORD(qword_2564108) = qword_2564018;
    qword_2564100 = qword_2564010;
    v225 = (char *)&qword_2564108 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_2563D70;
  }
  else {
    v229 = (uint64_t *)qword_2563D70;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2564027;
  if (byte_2564027 >= 0) {
    size_t v231 = byte_2564027;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_2563D9F;
  if (byte_2563D9F >= 0) {
    size_t v233 = byte_2563D9F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2563D88 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2564118;
    qword_2564120 = 0;
    unk_2564128 = 0;
    qword_2564118 = 0;
    byte_256412F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2564120 = v233 + v231;
  unk_2564128 = v243 | 0x8000000000000000;
  qword_2564118 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2564010;
    }
    else {
      v236 = (uint64_t *)qword_2564010;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_2563D88;
    }
    else {
      v238 = (long long *)xmmword_2563D88;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_2564138 = v231 + 11;
    unk_2564140 = v245 | 0x8000000000000000;
    qword_2564130 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_2564130;
    qword_2564138 = 0;
    unk_2564140 = 0;
    qword_2564130 = 0;
    byte_2564147 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2564130 + 7) = *(_DWORD *)((char *)&qword_2564058 + 7);
      qword_2564130 = qword_2564058;
      BYTE3(qword_2564138) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2564010;
  }
  else {
    v246 = (uint64_t *)qword_2564010;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2564058 + 7);
  *(void *)v247 = qword_2564058;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2564148;
    qword_2564150 = 0;
    unk_2564158 = 0;
    qword_2564148 = 0;
    byte_256415F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v261 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v261 = v241 | 7;
  }
  uint64_t v262 = v261 + 1;
  v249 = (uint64_t *)operator new(v261 + 1);
  qword_2564150 = v231 + 8;
  unk_2564158 = v262 | 0x8000000000000000;
  qword_2564148 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2564010;
    }
    else {
      v250 = (uint64_t *)qword_2564010;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_2564070;
  v251[8] = 0;
  int v252 = byte_256409F;
  if (byte_256409F >= 0) {
    size_t v253 = byte_256409F;
  }
  else {
    size_t v253 = qword_2564090;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2564160;
    qword_2564168 = 0;
    unk_2564170 = 0;
    qword_2564160 = 0;
    byte_2564177 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v259 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v259 = v254 | 7;
  }
  uint64_t v260 = v259 + 1;
  v255 = (uint64_t *)operator new(v259 + 1);
  qword_2564168 = v253 + v231;
  unk_2564170 = v260 | 0x8000000000000000;
  qword_2564160 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2564010;
    }
    else {
      v256 = (uint64_t *)qword_2564010;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2564088;
    }
    else {
      v258 = (uint64_t *)qword_2564088;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_256418F, "\n{newroute}");
  strcpy((char *)&qword_2564178, "{roadname}");
  strcpy(&byte_25641A7, "\n{count}");
  byte_25641BF = 7;
  strcpy(&byte_25641D7, "\n{dur}");
  strcpy((char *)&qword_25641C0, "{duration}");
  byte_25641EF = 5;
  qword_25641F0 = (uint64_t)operator new(0x20uLL);
  unk_25641F8 = v275;
  strcpy((char *)qword_25641F0, "{PleaseProceedWithCaution}");
  byte_256421F = 15;
  strcpy((char *)&qword_2564208, "{UserRouteName}");
  byte_2564237 = 20;
  strcpy((char *)&xmmword_2564220, "{SuggestedRouteName}");
  byte_256424F = 18;
  strcpy(byte_2564238, "Speed_Camera_Ahead");
  qword_2564250 = (uint64_t)operator new(0x20uLL);
  unk_2564258 = v274;
  strcpy((char *)qword_2564250, "Red_Light_Camera_Ahead_Spoken");
  qword_2564268 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2564270 = v274;
  strcpy((char *)qword_2564268, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2564280 = (uint64_t)operator new(0x28uLL);
  unk_2564288 = v269;
  strcpy((char *)qword_2564280, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2564298 = (uint64_t)operator new(0x28uLL);
  unk_25642A0 = v264;
  strcpy((char *)qword_2564298, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25642B0 = (uint64_t)operator new(0x20uLL);
  unk_25642B8 = v276;
  strcpy((char *)qword_25642B0, "Camera_Ahead_Multiple_Spoken");
  qword_25642C8 = (uint64_t)operator new(0x30uLL);
  unk_25642D0 = v265;
  strcpy((char *)qword_25642C8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25642E0 = (char *)operator new(0x30uLL);
  strcpy(qword_25642E0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_256430F = 16;
  xmmword_25642E8 = v265;
  strcpy(byte_25642F8, "_Speed_Limit_Mph");
  byte_2564327 = 16;
  strcpy(algn_2564310, "_Speed_Limit_Kph");
  byte_256433F = 11;
  strcpy((char *)&qword_2564328, "Watch_Speed");
  byte_2564357 = 4;
  strcpy((char *)&xmmword_2564340, "_One");
  byte_256436F = 4;
  strcpy((char *)&xmmword_2564358, "_Two");
  byte_2564387 = 4;
  strcpy((char *)&xmmword_2564370, "_Few");
  byte_256439F = 5;
  strcpy((char *)&xmmword_2564388, "_Many");
  byte_25643B7 = 6;
  strcpy((char *)&xmmword_25643A0, "_Other");
  byte_25643CF = 4;
  strcpy((char *)&dword_25643B8, "_ONE");
  byte_25643E7 = 7;
  strcpy((char *)&dword_25643D0, "{Speed}");
  byte_25643FF = 8;
  strcpy((char *)&qword_25643E8, "Dismount");
  byte_2564417 = 4;
  strcpy((char *)&dword_2564400, "Walk");
  byte_256442F = 5;
  strcpy((char *)&dword_2564418, "Mount");
  byte_2564447 = 7;
  strcpy((char *)&dword_2564430, "Remount");
  strcpy(&byte_256445F, "\t_Crosswalk");
  strcpy((char *)&qword_2564448, "Walk_Road");
  strcpy(&byte_2564477, "\n_PLURAL");
  byte_256448F = 7;
  strcpy(&byte_25644A7, "\n{description1}");
  strcpy((char *)&qword_2564490, "_SECONDARY");
  byte_25644BF = 14;
  byte_25644D7 = 14;
  strcpy((char *)&qword_25644C0, "{description2}");
  byte_25644EF = 21;
  strcpy((char *)&xmmword_25644D8, "TWO_ROAD_DESCRIPTIONS");
  byte_2564507 = 17;
  strcpy((char *)&xmmword_25644F0, "{SlopePercentage}");
  byte_256451F = 15;
  strcpy((char *)&qword_2564508, "_Protected_Lane");
  strcpy(&byte_2564537, "\n_Paved_Path");
  strcpy((char *)&qword_2564520, "_Bike_Path");
  byte_256454F = 11;
  byte_2564567 = 15;
  strcpy((char *)&qword_2564550, "_Dedicated_Lane");
  byte_256457F = 12;
  strcpy((char *)&qword_2564568, "_Shared_Path");
  strcpy(&byte_2564597, "\n_UnnamedRoad");
  strcpy((char *)&qword_2564580, "_Bike_Lane");
  byte_25645AF = 12;
  byte_25645C7 = 5;
  strcpy((char *)&dword_25645B0, "_Path");
  byte_25645DF = 6;
  strcpy((char *)&dword_25645C8, "_Trail");
  strcpy(&byte_25645F7, "\t_Plaza");
  strcpy((char *)&qword_25645E0, "_Sidewalk");
  byte_256460F = 6;
  byte_2564627 = 15;
  strcpy((char *)&qword_2564610, "_Moving_Walkway");
  byte_256463F = 14;
  strcpy((char *)&qword_2564628, "Two_Stage_Turn");
  byte_2564657 = 16;
  strcpy((char *)&xmmword_2564640, "{OptionalPeriod}");
  byte_256466F = 18;
  strcpy((char *)&xmmword_2564658, "Advisory_Separator");
  byte_2564687 = 6;
  strcpy((char *)&dword_2564670, "Period");
  byte_256469F = 21;
  strcpy((char *)&xmmword_2564688, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25646A0, "Advisory_Title_Notices");
  HIBYTE(word_25646B6) = 22;
  byte_25646CF = 7;
  strcpy((char *)&dword_25646B8, "_DETAIL");
  byte_25646E7 = 17;
  strcpy((char *)&xmmword_25646D0, "_LONG_REGION_LIST");
  byte_25646FF = 16;
  strcpy((char *)&xmmword_25646E8, "Advisory_Grouped");
  byte_2564717 = 11;
  strcpy((char *)&qword_2564700, "_Advisories");
  qword_2564718 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_2564720 = v272;
  strcpy((char *)qword_2564718, "Advisory_WILDFIRE_METADATA_");
  byte_2564747 = 8;
  strcpy((char *)&qword_2564730, "Advisory");
  byte_256475F = 13;
  strcpy((char *)&qword_2564748, "MPR_NUM_STOPS");
  HIBYTE(qword_2564770) = 17;
  strcpy((char *)&xmmword_2564760, "EV_CHARGE_STATION");
  byte_256478F = 11;
  strcpy((char *)&qword_2564778, "_NAMED_CITY");
  byte_25647A7 = 5;
  strcpy((char *)&qword_2564790, "_Stop");
  strcpy(&byte_25647BF, "\n{StopsCount}");
  strcpy((char *)&qword_25647A8, "{CityName}");
  byte_25647D7 = 12;
  byte_25647EF = 11;
  strcpy((char *)&qword_25647D8, "_With_Other");
  byte_2564807 = 15;
  strcpy((char *)&qword_25647F0, "{DepartureTime}");
  qword_2564808 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2564810 = v273;
  strcpy((char *)qword_2564808, "Ending_Charge_Station_Port_Availability");
  qword_2564820 = (uint64_t)operator new(0x28uLL);
  unk_2564828 = v266;
  strcpy((char *)qword_2564820, "Ending_Charge_Station_No_Availability");
  qword_2564838 = (uint64_t)operator new(0x28uLL);
  unk_2564840 = v269;
  strcpy((char *)qword_2564838, "Ending_Charge_Station_No_Real_Time");
  byte_2564867 = 16;
  strcpy(byte_2564850, "{AvailablePorts}");
  byte_256487F = 12;
  strcpy((char *)&qword_2564868, "{TotalPorts}");
  byte_2564897 = 14;
  strcpy((char *)&qword_2564880, "{ManeuverIcon}");
  qword_2564898 = (uint64_t)operator new(0x38uLL);
  unk_25648A0 = xmmword_20B9A60;
  strcpy((char *)qword_2564898, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25648B0 = (uint64_t)operator new(0x20uLL);
  unk_25648B8 = v272;
  strcpy((char *)qword_25648B0, "Walking_Destination_Unnamed");
  qword_25648C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25648D0 = v274;
  strcpy((char *)qword_25648C8, "TrafficDelay_Label_Title_Sign");
  qword_25648E0 = (uint64_t)operator new(0x20uLL);
  unk_25648E8 = v276;
  strcpy((char *)qword_25648E0, "Special_Guidance_Instruction");
  byte_256490F = 2;
  strcpy((char *)&word_25648F8, "CZ");
  byte_2564927 = 3;
  dword_2564910 = 5919811;
  unk_256493F = 3;
  dword_2564928 = 6243649;
  byte_2564957 = 0;
  byte_256496F = 7;
  strcpy((char *)&dword_2564958, "TRANSIT");
  byte_2564987 = 7;
  strcpy((char *)&dword_2564970, "OFFLINE");
  qword_2564988 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2564990 = v264;
  strcpy((char *)qword_2564988, "Advisory_Card_French_Climate_Law_Title");
  qword_25649A0 = (uint64_t)operator new(0x30uLL);
  unk_25649A8 = xmmword_20B93C0;
  strcpy((char *)qword_25649A0, "Advisory_Card_French_Climate_Law_Details");
  qword_25649B8 = (uint64_t)operator new(0x30uLL);
  unk_25649C0 = v270;
  strcpy((char *)qword_25649B8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25649D0 = (uint64_t)operator new(0x20uLL);
  unk_25649D8 = v276;
  strcpy((char *)qword_25649D0, "{ClimateLawLearnMoreWeblink}");
  byte_25649FF = 3;
  dword_25649E8 = 4280902;
  qword_2564A00 = (uint64_t)operator new(0x70uLL);
  unk_2564A08 = xmmword_20E81E0;
  strcpy((char *)qword_2564A00, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  byte_2564A2F = 1;
  word_2564A18 = 65;
  byte_2564A47 = 1;
  word_2564A30 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)long long v282 = 0;
  HIBYTE(v283[0]) = 14;
  strcpy(&v282[8], "ROUTES_THROUGH");
  LODWORD(v283[1]) = 1;
  v284[23] = 9;
  strcpy(v284, "ROUTES_TO");
  LODWORD(v285) = 3;
  HIBYTE(v287) = 11;
  strcpy((char *)v286, "ROUTES_FROM");
  LODWORD(v288) = 2;
  xmmword_2564A48 = 0u;
  xmmword_2564A58 = 0u;
  dword_2564A68 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2564A48, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2564A48, (uint64_t)&v282[8], (uint64_t)&v282[8]);
  sub_3A6EF0((uint64_t)&xmmword_2564A48, (uint64_t)v284, (uint64_t)v284);
  sub_3A6EF0((uint64_t)&xmmword_2564A48, (uint64_t)v286, (uint64_t)v286);
  if (SHIBYTE(v287) < 0)
  {
    operator delete(v286[0]);
    if ((v284[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v283[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
      goto LABEL_547;
    }
  }
  else if ((v284[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v284);
  if ((SHIBYTE(v283[0]) & 0x80000000) == 0)
  {
LABEL_535:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_548:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_547:
  operator delete(*(void **)&v282[8]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
}

void sub_50DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_50E0C8(uint64_t a1, int a2, int a3, uint64_t a4, long long *a5, uint64_t *a6, uint64_t *a7, void *a8, uint64_t a9)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  int v14 = *(unsigned __int8 *)(a4 + 1120);
  *(unsigned char *)(a1 + 1128) = v14;
  if (v14) {
    sub_4BE9F4(a1 + 8, a4);
  }
  sub_50FFE0(a1 + 1136, a5);
  *(void *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  sub_510340(a1 + 1752, *a6, a6[1], 0xAF8AF8AF8AF8AF8BLL * ((a6[1] - *a6) >> 5));
  *(unsigned char *)(a1 + 1788) = 1;
  uint64_t v15 = *a7;
  *(_DWORD *)(a1 + 1784) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 1776) = v15;
  *(void *)(a1 + 1792) = *a8;
  LODWORD(v15) = *(unsigned __int8 *)(a9 + 168);
  *(unsigned char *)(a1 + 1968) = v15;
  if (v15) {
    sub_4BD34C(a1 + 1800, a9);
  }
  return a1;
}

void sub_50E1B4(_Unwind_Exception *a1)
{
  sub_50E1E8(v3);
  if (*(unsigned char *)(v1 + 1128))
  {
    sub_3A6B94(v2);
    *(unsigned char *)(v1 + 1128) = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_50E1E8(void *a1)
{
  uint64_t v2 = (void *)a1[69];
  if (v2)
  {
    a1[70] = v2;
    operator delete(v2);
  }
  sub_510298((uint64_t)(a1 + 10));
  BOOL v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_50E234(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 2;
}

BOOL sub_50E244(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 0;
}

BOOL sub_50E254(_DWORD *a1)
{
  return *a1 == 2;
}

BOOL sub_50E264(_DWORD *a1)
{
  return *a1 == 4;
}

BOOL sub_50E274(_DWORD *a1)
{
  return *a1 == 3;
}

BOOL sub_50E284(_DWORD *a1)
{
  return *a1 == 0;
}

BOOL sub_50E294(_DWORD *a1)
{
  return *a1 == 1;
}

BOOL sub_50E2A4(_DWORD *a1)
{
  return *a1 == 5;
}

BOOL sub_50E2B4(_DWORD *a1)
{
  return *a1 == 6;
}

BOOL sub_50E2C4(_DWORD *a1)
{
  return *a1 == 7;
}

BOOL sub_50E2D4(_DWORD *a1)
{
  return *a1 == 8;
}

uint64_t sub_50E2E4(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      return *(void *)(a1 + 1792);
    case 1:
    case 6:
    case 7:
    case 8:
      return 0;
    case 2:
    case 3:
      if (!*(unsigned char *)(a1 + 1128) || !*(unsigned char *)(a1 + 440)) {
        goto LABEL_11;
      }
      uint64_t result = *(void *)(a1 + 432);
      break;
    case 4:
      return *(void *)(a1 + 1144);
    case 5:
      if (!*(unsigned char *)(a1 + 1968))
      {
LABEL_11:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t result = *(void *)(a1 + 1832);
      break;
    default:
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_50E3F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(result + 1128);
  *(unsigned char *)(a2 + 1120) = v2;
  if (v2) {
    return sub_4BE9F4(a2, result + 8);
  }
  return result;
}

uint64_t sub_50E428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_50FFE0(a2, (long long *)(a1 + 1136));
}

uint64_t sub_50E434@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_510340((uint64_t)a2, *(void *)(a1 + 1752), *(void *)(a1 + 1760), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a1 + 1760) - *(void *)(a1 + 1752)) >> 5));
}

uint64_t sub_50E468@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(result + 1788);
  *(unsigned char *)(a2 + 12) = v2;
  if (v2)
  {
    *(void *)a2 = *(void *)(result + 1776);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 1784);
  }
  return result;
}

uint64_t sub_50E488@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(result + 1968);
  *(unsigned char *)(a2 + 168) = v2;
  if (v2) {
    return sub_4BD34C(a2, result + 1800);
  }
  return result;
}

void sub_50E4B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v47 = 1;
  sub_4BE9F4((uint64_t)v46, a1);
  bzero(&v21, 0x268uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  int64x2_t v25 = v22;
  std::string::size_type v27 = 0;
  uint64_t v28 = 0;
  unint64_t v26 = 0;
  unint64_t v29 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v30);
  sub_5F3B34((uint64_t)v31);
  *(_DWORD *)&v31[192] = -1;
  memset(&v31[200], 255, 7);
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  __int16 v35 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v43 = 1;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v7 = -1;
  int v8 = 0x7FFFFFFF;
  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)size_t v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_50E0C8(a2, 2, 2, (uint64_t)v46, (long long *)&v21, v9, &v7, &v6, (uint64_t)v10);
  if (BYTE8(v20))
  {
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[1]);
    }
    BOOL v3 = (void **)v16[1];
    if (v16[1])
    {
      int v4 = (void **)v17;
      size_t v5 = v16[1];
      if ((void *)v17 != v16[1])
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        size_t v5 = v16[1];
      }
      *(void *)&long long v17 = v3;
      operator delete(v5);
    }
    if (SHIBYTE(v16[0]) < 0)
    {
      operator delete(v15[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v20) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v10[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v13[1]);
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v41 + 1))
  {
    *(void *)&long long v42 = *((void *)&v41 + 1);
    operator delete(*((void **)&v41 + 1));
  }
  sub_510298((uint64_t)&v29);
  if (v26)
  {
    std::string::size_type v27 = v26;
    operator delete(v26);
  }
  if (v47) {
    sub_3A6B94((uint64_t)v46);
  }
}

void sub_50E718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50E780(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0x50E778);
}

void **sub_50E790(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_3A6B94(v3 - 1120);
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_50E7EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v47 = 1;
  sub_4BE9F4((uint64_t)v46, a1);
  bzero(&v21, 0x268uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  int64x2_t v25 = v22;
  std::string::size_type v27 = 0;
  uint64_t v28 = 0;
  unint64_t v26 = 0;
  unint64_t v29 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v30);
  sub_5F3B34((uint64_t)v31);
  *(_DWORD *)&v31[192] = -1;
  memset(&v31[200], 255, 7);
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  __int16 v35 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v43 = 1;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v7 = -1;
  int v8 = 0x7FFFFFFF;
  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)size_t v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_50E0C8(a2, 2, 1, (uint64_t)v46, (long long *)&v21, v9, &v7, &v6, (uint64_t)v10);
  if (BYTE8(v20))
  {
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[1]);
    }
    uint64_t v3 = (void **)v16[1];
    if (v16[1])
    {
      int v4 = (void **)v17;
      size_t v5 = v16[1];
      if ((void *)v17 != v16[1])
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        size_t v5 = v16[1];
      }
      *(void *)&long long v17 = v3;
      operator delete(v5);
    }
    if (SHIBYTE(v16[0]) < 0)
    {
      operator delete(v15[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v20) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v10[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v13[1]);
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v41 + 1))
  {
    *(void *)&long long v42 = *((void *)&v41 + 1);
    operator delete(*((void **)&v41 + 1));
  }
  sub_510298((uint64_t)&v29);
  if (v26)
  {
    std::string::size_type v27 = v26;
    operator delete(v26);
  }
  if (v47) {
    sub_3A6B94((uint64_t)v46);
  }
}

void sub_50EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50EAB4(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0x50EAACLL);
}

void sub_50EAC4(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  bzero(v23, 0x468uLL);
  uint64_t v10 = -1;
  int v11 = 0x7FFFFFFF;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long v17 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  sub_50E0C8(a3, 4, 1, (uint64_t)v23, a1, a2, &v10, &v9, (uint64_t)v12);
  if (!BYTE8(v22)) {
    goto LABEL_16;
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(*((void **)&v20 + 1));
  }
  uint64_t v6 = (void **)v18[1];
  if (v18[1])
  {
    uint64_t v7 = (void **)v19;
    int v8 = v18[1];
    if ((void *)v19 != v18[1])
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = v18[1];
    }
    *(void *)&long long v19 = v6;
    operator delete(v8);
  }
  if ((SHIBYTE(v18[0]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    operator delete(v15[1]);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_21:
    operator delete(v12[1]);
    goto LABEL_15;
  }
  operator delete(v17[0]);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  if (SHIBYTE(v13) < 0) {
    goto LABEL_21;
  }
LABEL_15:
  BYTE8(v22) = 0;
LABEL_16:
  if (v23[1120]) {
    sub_3A6B94((uint64_t)v23);
  }
}

void sub_50EC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36)
{
  if (a34)
  {
    sub_4BCFD0((uint64_t)&a13);
    a34 = 0;
  }
  if (LOBYTE(STACK[0x530])) {
    sub_3A6B94((uint64_t)&a36);
  }
  _Unwind_Resume(a1);
}

void sub_50EC80(uint64_t a1@<X8>)
{
  bzero(v45, 0x468uLL);
  bzero(&v20, 0x268uLL);
  int64x2_t v21 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  int64x2_t v24 = v21;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  int64x2_t v25 = 0;
  unint64_t v28 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v29);
  sub_5F3B34((uint64_t)v30);
  *(_DWORD *)&v30[192] = -1;
  memset(&v30[200], 255, 7);
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  __int16 v34 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v38 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = -1;
  int v7 = 0x7FFFFFFF;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_50E0C8(a1, 6, 0, (uint64_t)v45, (long long *)&v20, v8, &v6, &v5, (uint64_t)v9);
  if (BYTE8(v19))
  {
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[1]);
    }
    int v2 = (void **)v15[1];
    if (v15[1])
    {
      uint64_t v3 = (void **)v16;
      int v4 = v15[1];
      if ((void *)v16 != v15[1])
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        int v4 = v15[1];
      }
      *(void *)&long long v16 = v2;
      operator delete(v4);
    }
    if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v19) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v9[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12[1]);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v40 + 1))
  {
    *(void *)&long long v41 = *((void *)&v40 + 1);
    operator delete(*((void **)&v40 + 1));
  }
  sub_510298((uint64_t)&v28);
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v45[1120]) {
    sub_3A6B94((uint64_t)v45);
  }
}

void sub_50EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50EF38(uint64_t a1@<X8>)
{
  bzero(v45, 0x468uLL);
  bzero(&v20, 0x268uLL);
  int64x2_t v21 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  int64x2_t v24 = v21;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  int64x2_t v25 = 0;
  unint64_t v28 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v29);
  sub_5F3B34((uint64_t)v30);
  *(_DWORD *)&v30[192] = -1;
  memset(&v30[200], 255, 7);
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  __int16 v34 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v38 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = -1;
  int v7 = 0x7FFFFFFF;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_50E0C8(a1, 7, 0, (uint64_t)v45, (long long *)&v20, v8, &v6, &v5, (uint64_t)v9);
  if (BYTE8(v19))
  {
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[1]);
    }
    int v2 = (void **)v15[1];
    if (v15[1])
    {
      uint64_t v3 = (void **)v16;
      int v4 = v15[1];
      if ((void *)v16 != v15[1])
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        int v4 = v15[1];
      }
      *(void *)&long long v16 = v2;
      operator delete(v4);
    }
    if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v19) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v9[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12[1]);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v40 + 1))
  {
    *(void *)&long long v41 = *((void *)&v40 + 1);
    operator delete(*((void **)&v40 + 1));
  }
  sub_510298((uint64_t)&v28);
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v45[1120]) {
    sub_3A6B94((uint64_t)v45);
  }
}

void sub_50F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50F1F0(uint64_t a1@<X8>)
{
  bzero(v45, 0x468uLL);
  bzero(&v20, 0x268uLL);
  int64x2_t v21 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  int64x2_t v24 = v21;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  int64x2_t v25 = 0;
  unint64_t v28 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v29);
  sub_5F3B34((uint64_t)v30);
  *(_DWORD *)&v30[192] = -1;
  memset(&v30[200], 255, 7);
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  __int16 v34 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v38 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = -1;
  int v7 = 0x7FFFFFFF;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_50E0C8(a1, 8, 0, (uint64_t)v45, (long long *)&v20, v8, &v6, &v5, (uint64_t)v9);
  if (BYTE8(v19))
  {
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[1]);
    }
    int v2 = (void **)v15[1];
    if (v15[1])
    {
      uint64_t v3 = (void **)v16;
      int v4 = v15[1];
      if ((void *)v16 != v15[1])
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        int v4 = v15[1];
      }
      *(void *)&long long v16 = v2;
      operator delete(v4);
    }
    if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v19) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v9[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12[1]);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v40 + 1))
  {
    *(void *)&long long v41 = *((void *)&v40 + 1);
    operator delete(*((void **)&v40 + 1));
  }
  sub_510298((uint64_t)&v28);
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v45[1120]) {
    sub_3A6B94((uint64_t)v45);
  }
}

void sub_50F440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50F4A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v47 = 1;
  sub_4BE9F4((uint64_t)v46, a1);
  bzero(&v21, 0x268uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  int64x2_t v25 = v22;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v26 = 0;
  unint64_t v29 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v30);
  sub_5F3B34((uint64_t)v31);
  *(_DWORD *)&v31[192] = -1;
  memset(&v31[200], 255, 7);
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  __int16 v35 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v43 = 1;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v7 = -1;
  int v8 = 0x7FFFFFFF;
  uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_50E0C8(a2, 3, 1, (uint64_t)v46, (long long *)&v21, v9, &v7, &v6, (uint64_t)v10);
  if (BYTE8(v20))
  {
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[1]);
    }
    uint64_t v3 = (void **)v16[1];
    if (v16[1])
    {
      int v4 = (void **)v17;
      uint64_t v5 = v16[1];
      if ((void *)v17 != v16[1])
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = v16[1];
      }
      *(void *)&long long v17 = v3;
      operator delete(v5);
    }
    if (SHIBYTE(v16[0]) < 0)
    {
      operator delete(v15[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v20) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v10[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v13[1]);
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v41 + 1))
  {
    *(void *)&long long v42 = *((void *)&v41 + 1);
    operator delete(*((void **)&v41 + 1));
  }
  sub_510298((uint64_t)&v29);
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v47) {
    sub_3A6B94((uint64_t)v46);
  }
}

void sub_50F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

void sub_50F770(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0x50F768);
}

void sub_50F780(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  bzero(v48, 0x468uLL);
  bzero(&v23, 0x268uLL);
  int64x2_t v24 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v25 = -1;
  uint64_t v26 = -1;
  int64x2_t v27 = v24;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  unint64_t v31 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v32);
  sub_5F3B34((uint64_t)v33);
  *(_DWORD *)&v33[192] = -1;
  memset(&v33[200], 255, 7);
  uint64_t v34 = 0;
  uint64_t v36 = 0;
  uint64_t v35 = 0;
  __int16 v37 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v41 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  char v45 = 1;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = -1;
  int v9 = 0x7FFFFFFF;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  char v22 = 1;
  sub_4BD34C((uint64_t)v11, a1);
  sub_50E0C8(a2, 5, 1, (uint64_t)v48, (long long *)&v23, v10, &v8, &v7, (uint64_t)v11);
  if (v22)
  {
    if (v21 < 0) {
      operator delete(__p);
    }
    int v4 = (void **)v18;
    if (v18)
    {
      uint64_t v5 = v19;
      uint64_t v6 = v18;
      if (v19 != v18)
      {
        do
        {
          if (*((char *)v5 - 1) < 0) {
            operator delete(*(v5 - 3));
          }
          v5 -= 3;
        }
        while (v5 != v4);
        uint64_t v6 = v18;
      }
      long long v19 = v4;
      operator delete(v6);
    }
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_14:
        if ((v13 & 0x80000000) == 0)
        {
LABEL_15:
          char v22 = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v12);
        goto LABEL_15;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v14);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v43 + 1))
  {
    *(void *)&long long v44 = *((void *)&v43 + 1);
    operator delete(*((void **)&v43 + 1));
  }
  sub_510298((uint64_t)&v31);
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v48[1120]) {
    sub_3A6B94((uint64_t)v48);
  }
}

void sub_50F9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38)
{
  if (a37)
  {
    sub_4BCFD0((uint64_t)&a16);
    a37 = 0;
  }
  sub_50E790(&a13);
  sub_50E1E8(&a38);
  if (LOBYTE(STACK[0x7B0])) {
    sub_3A6B94((uint64_t)&STACK[0x350]);
  }
  _Unwind_Resume(a1);
}

void sub_50FA5C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  bzero(v46, 0x468uLL);
  bzero(&v21, 0x268uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v23 = -1;
  uint64_t v24 = -1;
  int64x2_t v25 = v22;
  int64x2_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  unint64_t v29 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v30);
  sub_5F3B34((uint64_t)v31);
  *(_DWORD *)&v31[192] = -1;
  memset(&v31[200], 255, 7);
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  __int16 v35 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v43 = 1;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)char v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)char v15 = 0u;
  *(_OWORD *)long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_50E0C8(a3, 0, 2, (uint64_t)v46, (long long *)&v21, v9, a1, a2, (uint64_t)v10);
  if (BYTE8(v20))
  {
    if (SHIBYTE(v19) < 0) {
      operator delete(*((void **)&v18 + 1));
    }
    uint64_t v6 = (void **)v16[1];
    if (v16[1])
    {
      uint64_t v7 = (void **)v17;
      uint64_t v8 = v16[1];
      if ((void *)v17 != v16[1])
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        uint64_t v8 = v16[1];
      }
      *(void *)&long long v17 = v6;
      operator delete(v8);
    }
    if (SHIBYTE(v16[0]) < 0)
    {
      operator delete(v15[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v20) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v10[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v13[1]);
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v41 + 1))
  {
    *(void *)&long long v42 = *((void *)&v41 + 1);
    operator delete(*((void **)&v41 + 1));
  }
  sub_510298((uint64_t)&v29);
  if (v26)
  {
    int64x2_t v27 = v26;
    operator delete(v26);
  }
  if (v46[1120]) {
    sub_3A6B94((uint64_t)v46);
  }
}

void sub_50FCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36)
{
  if (a34)
  {
    sub_4BCFD0((uint64_t)&a13);
    a34 = 0;
  }
  sub_50E790(&a10);
  sub_50E1E8(&a36);
  if (LOBYTE(STACK[0x7A0])) {
    sub_3A6B94((uint64_t)&STACK[0x340]);
  }
  _Unwind_Resume(a1);
}

void sub_50FD28(uint64_t a1@<X8>)
{
  bzero(v45, 0x468uLL);
  bzero(&v20, 0x268uLL);
  int64x2_t v21 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  int64x2_t v24 = v21;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int64x2_t v25 = 0;
  unint64_t v28 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v29);
  sub_5F3B34((uint64_t)v30);
  *(_DWORD *)&v30[192] = -1;
  memset(&v30[200], 255, 7);
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  __int16 v34 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v38 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 1;
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = -1;
  int v7 = 0x7FFFFFFF;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)int v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)char v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_50E0C8(a1, 1, 2, (uint64_t)v45, (long long *)&v20, v8, &v6, &v5, (uint64_t)v9);
  if (BYTE8(v19))
  {
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[1]);
    }
    int v2 = (void **)v15[1];
    if (v15[1])
    {
      uint64_t v3 = (void **)v16;
      int v4 = v15[1];
      if ((void *)v16 != v15[1])
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        int v4 = v15[1];
      }
      *(void *)&long long v16 = v2;
      operator delete(v4);
    }
    if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_15:
          BYTE8(v19) = 0;
          goto LABEL_16;
        }
LABEL_25:
        operator delete(v9[1]);
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12[1]);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (*((void *)&v40 + 1))
  {
    *(void *)&long long v41 = *((void *)&v40 + 1);
    operator delete(*((void **)&v40 + 1));
  }
  sub_510298((uint64_t)&v28);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v45[1120]) {
    sub_3A6B94((uint64_t)v45);
  }
}

void sub_50FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a38)
  {
    sub_4BCFD0((uint64_t)&a17);
    a38 = 0;
  }
  sub_50E790(&a14);
  sub_50E1E8(&a40);
  if (LOBYTE(STACK[0x7C0])) {
    sub_3A6B94((uint64_t)&STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_50FFE0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = (unsigned char *)*((void *)a2 + 7);
  int v7 = (unsigned char *)*((void *)a2 + 8);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    long long v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10;
    long long v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 72) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 64) = v11;
  }
  sub_510164(a1 + 80, (uint64_t *)a2 + 10);
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v12 = (unsigned char *)*((void *)a2 + 69);
  long long v13 = (unsigned char *)*((void *)a2 + 70);
  int64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    char v15 = (char *)operator new(v14);
    *(void *)(a1 + 552) = v15;
    *(void *)(a1 + 560) = v15;
    long long v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 568) = v16;
    memcpy(v15, v12, v14);
    *(void *)(a1 + 560) = v16;
  }
  long long v17 = a2[36];
  long long v18 = a2[37];
  *(void *)(a1 + 608) = *((void *)a2 + 76);
  *(_OWORD *)(a1 + 576) = v17;
  *(_OWORD *)(a1 + 592) = v18;
  return a1;
}

void sub_510124(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_510164(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  sub_4F58AC(a1 + 16, (uint64_t)(a2 + 2));
  sub_4F58AC(a1 + 176, (uint64_t)(a2 + 22));
  sub_4F57A0(a1 + 336, (uint64_t)(a2 + 42));
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  long long v6 = (unsigned char *)a2[56];
  long long v5 = (unsigned char *)a2[57];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 448) = v8;
    *(void *)(a1 + 456) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 464) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 456) = v9;
  }
  return a1;
}

void sub_510234(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_510250(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_510264(_Unwind_Exception *a1)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 456) = v7;
    operator delete(v7);
  }
  sub_4D9814(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_510298(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(void *)(a1 + 456) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 439) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 407) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 384));
    int v3 = *(_DWORD *)(a1 + 368);
    if (v3 != 1) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 416));
  if (*(char *)(a1 + 407) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  int v3 = *(_DWORD *)(a1 + 368);
  if (v3 != 1)
  {
LABEL_6:
    if (!v3 && *(char *)(a1 + 367) < 0)
    {
      uint64_t v4 = *(void **)(a1 + 344);
LABEL_13:
      operator delete(v4);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    goto LABEL_13;
  }
LABEL_14:
  sub_4D4B58(a1 + 176);
  sub_4D4B58(a1 + 16);
  return a1;
}

uint64_t sub_510340(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x3A83A83A83A83BLL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1120 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 1120 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4BE9F4(v8 + v9, a2 + v9);
        v9 += 1120;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_510404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_510418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1120)
    sub_3A6B94(v10 - 1120 + v11);
  *(void *)(v9 + 8) = v10;
  sub_510448(&a9);
  _Unwind_Resume(a1);
}

void ***sub_510448(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_3A6B94(v4 - 1120);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_5104D0()
{
  byte_2564A87 = 1;
  word_2564A70 = 65;
  byte_2564A9F = 1;
  word_2564A88 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_2564B00 = 0u;
  *(_OWORD *)&qword_2564B10 = 0u;
  dword_2564B20 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2564B00, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_2564B00, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2564B00, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2564B00, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2564AB7 = 8;
  strcpy((char *)&qword_2564AA0, "any_mode");
  byte_2564ACF = 7;
  strcpy((char *)&dword_2564AB8, "cycling");
  byte_2564AE7 = 7;
  strcpy((char *)&dword_2564AD0, "driving");
  byte_2564AFF = 7;
  strcpy((char *)&dword_2564AE8, "walking");
}

void sub_51072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2564B10) {
    sub_20A90AC((void **)qword_2564B10);
  }
  uint64_t v37 = (void *)xmmword_2564B00;
  *(void *)&xmmword_2564B00 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_5107CC(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  uint64_t v6 = sub_3750CC(a2);
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_20B8E30;
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  sub_4BBDC0(a1 + 152, a3);
  HIBYTE(v27[2]) = 18;
  strcpy((char *)v27, "ArrivalInfoBuilder");
  int64x2_t v24 = 0;
  int64x2_t v25 = 0;
  uint64_t v26 = 0;
  char v7 = sub_374CDC((uint64_t)a2, (uint64_t)v27, (uint64_t *)&v24);
  sub_3CB2F0(v7, (uint64_t)v28);
  uint64_t v21 = 0;
  uint64_t v22 = operator new(0x28uLL);
  long long v23 = xmmword_20B9260;
  strcpy((char *)v22, "DrivingToWalkingTransitionChecker");
  long long __p = 0;
  char v20 = 0;
  int v8 = sub_374CDC((uint64_t)a2, (uint64_t)&v22, (uint64_t *)&__p);
  sub_513FF0(a1 + 1688, v28, (uint64_t)v8);
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    char v10 = v20;
    int v11 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p;
    }
    char v20 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22);
  }
  long long v12 = v29;
  if (v29)
  {
    do
    {
      long long v17 = (void **)*v12;
      sub_55198((uint64_t)(v12 + 5));
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      long long v12 = v17;
    }
    while (v17);
  }
  long long v13 = (void *)v28[0];
  v28[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  int64_t v14 = (void **)v24;
  if (v24)
  {
    char v15 = v25;
    long long v16 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      long long v16 = v24;
    }
    int64x2_t v25 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v27[2]) < 0) {
    operator delete(v27[0]);
  }
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(void *)(a1 + 2000) = -1;
  *(_DWORD *)(a1 + 2008) = 0x7FFFFFFF;
  return a1;
}

void sub_510A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_5450C(v29 - 88);
  sub_1A668(&a19);
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v28);
  sub_510AA4(v27);
  _Unwind_Resume(a1);
}

void *sub_510AA4(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    uint64_t v3 = a1[13];
    char v4 = (void *)a1[12];
    if (v3 != v2)
    {
      uint64_t v5 = a1[13];
      do
      {
        char v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      char v4 = (void *)a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  int v8 = (void *)a1[5];
  if (v8)
  {
    a1[6] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

unint64_t sub_510B40(unint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 1688)) {
    return result;
  }
  unint64_t v2 = result;
  if (!*(unsigned char *)(result + 1594)) {
    return result;
  }
  uint64_t result = sub_46C760((void *)a2);
  if (!result) {
    return result;
  }
  uint64_t result = sub_64EFC4(a2);
  if (*(_DWORD *)result == -1 && *(_DWORD *)(result + 4) == -1) {
    return result;
  }
  sub_510E34(v2, a2);
  sub_511304(v2, (void *)a2);
  uint64_t v5 = sub_46C8FC(a2);
  uint64_t v6 = sub_5114A0(v2, *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32));
  if (sub_35E640() && *(_DWORD *)sub_46CAAC(a2) != 0x7FFFFFFF)
  {
    double v8 = *(double *)(v2 + 1760);
    double v9 = v8 * (double)*(int *)sub_46CAAC(a2);
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_19:
        double v9 = (double)(v10 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9);
      if (v10 >= 1) {
        --v10;
      }
      goto LABEL_19;
    }
    int v7 = (int)v9;
    goto LABEL_21;
  }
  int v7 = 0;
LABEL_21:
  sub_511E28(v2, v7, v6, a2 + 10104);
  if (*(unsigned char *)(v2 + 1728))
  {
    sub_515FFC(v2, (void *)a2, a2 + 10104);
    long long v12 = *(uint64_t **)(v2 + 32);
    long long v13 = *(uint64_t **)(v2 + 40);
    if (v12 == v13)
    {
      if (*(_DWORD *)(v2 + 16) != -1 || *(_DWORD *)(v2 + 20) != -1) {
        sub_516158((char **)(a2 + 10120), (uint64_t *)(v2 + 16), (uint64_t *)(v2 + 1736));
      }
      int64_t v14 = *(uint64_t **)(v2 + 56);
      for (i = *(uint64_t **)(v2 + 64); v14 != i; int64_t v14 = (uint64_t *)((char *)v14 + 12))
        sub_516158((char **)(a2 + 10120), v14, (uint64_t *)(v2 + 1736));
    }
    else
    {
      do
      {
        sub_516158((char **)(a2 + 10120), v12, (uint64_t *)(v2 + 1736));
        long long v12 = (uint64_t *)((char *)v12 + 12);
      }
      while (v12 != v13);
    }
  }
  sub_5120D4(v2, v7, a2 + 10104, v11);
  sub_512260(v2, a2, (void *)(a2 + 10104));
  sub_51247C(v2, a2, a2 + 10104);
  sub_512738(v2, a2, a2 + 10104);
  sub_5129C4(v2, a2);
  if (*(void *)(v2 + 1720) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(sub_64EFC4(a2) + 112) != 2) {
    long long v16 = (uint64_t *)(v2 + 1712);
  }
  else {
    long long v16 = (uint64_t *)(v2 + 1720);
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(a2 + 1072);
  if (*(void *)(a2 + 1064) != v18)
  {
    uint64_t v19 = *(void *)(v18 - 1528);
    if (v19 < v17) {
      uint64_t v17 = v19;
    }
  }
  *(void *)(a2 + 10104) = v17;

  return sub_512AE4(v2, (void *)a2, a2 + 10104);
}

BOOL sub_510E34(uint64_t a1, uint64_t a2)
{
  char v4 = (uint64_t *)sub_64EFC4(a2);
  if (sub_64F348(a2))
  {
    LOBYTE(v5) = 1;
    goto LABEL_40;
  }
  if (!*(void *)(a1 + 1288)) {
    goto LABEL_39;
  }
  if (!sub_62D424(a1 + 152))
  {
    unint64_t v6 = *(void *)(a1 + 1288) - 1;
    uint64_t v7 = *(void *)(a1 + 1280);
    uint64_t v8 = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
    goto LABEL_10;
  }
  LODWORD(v6) = *(_DWORD *)(a2 + 288);
  if (*(unsigned char *)(a1 + 1676))
  {
    if (v6 != -1)
    {
      unint64_t v6 = v6;
      if (*(void *)(a1 + 1288) > (unint64_t)v6)
      {
LABEL_8:
        uint64_t v7 = *(void *)(a1 + 1280);
        uint64_t v8 = (v6 >> 3) & 0x1FFFFFF8;
LABEL_10:
        uint64_t v5 = (*(void *)(v7 + v8) >> v6) & 1;
        goto LABEL_40;
      }
      goto LABEL_27;
    }
LABEL_12:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v28);
      double v9 = sub_69510();
      sub_68EE4((uint64_t)v9);
      std::operator+<char>();
      if ((v27 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v11 = v27;
      }
      else {
        uint64_t v11 = v26;
      }
      sub_188FC78(&v28, (uint64_t)p_p, v11);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_39;
  }
  if ((v6 + 1) < 2) {
    goto LABEL_12;
  }
  unint64_t v6 = (v6 - 1);
  if (*(void *)(a1 + 1288) > v6) {
    goto LABEL_8;
  }
LABEL_27:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v28);
    long long v12 = sub_69510();
    sub_68EE4((uint64_t)v12);
    std::operator+<char>();
    if ((v27 & 0x80u) == 0) {
      long long v13 = &__p;
    }
    else {
      long long v13 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v14 = v27;
    }
    else {
      uint64_t v14 = v26;
    }
    sub_188FC78(&v28, (uint64_t)v13, v14);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    sub_111ECAC((uint64_t)&v28);
  }
LABEL_39:
  LOBYTE(v5) = 0;
LABEL_40:
  sub_513A44((uint64_t)&v28, v4, v5);
  char v15 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 24) = v29;
  if (v15)
  {
    *(void *)(a1 + 40) = v15;
    operator delete(v15);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  long long v16 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v30;
  *(void *)(a1 + 48) = v31;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  if (v16)
  {
    *(void *)(a1 + 64) = v16;
    operator delete(v16);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v17 = (void **)(a1 + 112);
  uint64_t v18 = *(char **)(a1 + 112);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v32;
  *(void *)(a1 + 72) = v33;
  v32[1] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  *(unsigned char *)(a1 + 80) = v34;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v35;
  *(void *)(a1 + 104) = v36;
  if (v18)
  {
    uint64_t v19 = *(char **)(a1 + 120);
    char v20 = v18;
    if (v19 != v18)
    {
      uint64_t v21 = *(char **)(a1 + 120);
      do
      {
        long long v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v19 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      char v20 = *v17;
    }
    *(void *)(a1 + 120) = v18;
    operator delete(v20);
    char *v17 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = v37;
  *(void *)(a1 + 128) = v38;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  *(_DWORD *)(a1 + 136) = v39;
  *(unsigned char *)(a1 + 144) = v40;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  BOOL result = sub_64F348(a2);
  *(unsigned char *)(a1 + 80) = result;
  return result;
}

void sub_511284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_511304(uint64_t a1, void *a2)
{
  if (a2[1248] == a2[1249])
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = sub_46C8FC((uint64_t)a2);
    sub_2954EC(v11, *(void *)(v12 + 32), (uint64_t)&v16);
    sub_2E4B5C((uint64_t)&v16, &v19);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v4 = sub_46C760(a2);
    uint64_t v5 = sub_64EF20((uint64_t)a2, v4 - 1);
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint64_t v7 = (const void *)*v5;
    uint64_t v6 = v5[1];
    int64_t v8 = v6 - *v5;
    if (v6 != *v5)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      double v9 = (char *)operator new(v8);
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      uint64_t v19 = v9;
      uint64_t v21 = v10;
      memcpy(v9, v7, v8);
      char v20 = v10;
    }
  }
  unsigned int v13 = sub_46CAC4((uint64_t)a2);
  sub_31854((uint64_t *)&v19, 0, &v16, 0.0, (double)v13 / 1000000000.0);
  uint64_t v14 = v16;
  int v15 = *((_DWORD *)__p - 1);
  *(void *)(a1 + 2000) = *(void *)((char *)__p - 12);
  *(_DWORD *)(a1 + 2008) = v15;
  if (v14)
  {
    long long __p = v14;
    operator delete(v14);
  }
  if (v19)
  {
    char v20 = v19;
    operator delete(v19);
  }
}

void sub_51146C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5114A0(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a2;
  if (!*(unsigned char *)(a1 + 1832)) {
    return *(void *)(a1 + 1960);
  }
  unint64_t v4 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 0x2Fu || (uint64_t v6 = v5[23]) == 0 || *((unsigned char *)v4 + v6) != 47)
  {
    uint64_t v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
    int64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 < 0x2Fu) {
      return *(void *)(a1 + 1960);
    }
    uint64_t v9 = v8[23];
    if (!v9) {
      return *(void *)(a1 + 1960);
    }
    unsigned int v10 = *((unsigned __int8 *)v7 + v9);
    BOOL v11 = v10 > 0x2D;
    uint64_t v12 = (1 << v10) & 0x208040000000;
    if (v11 || v12 == 0) {
      return *(void *)(a1 + 1960);
    }
  }
  sub_29549C(*(void *)(a1 + 8), a2, (uint64_t)v62);
  unint64_t v76 = sub_2E1AA4((uint64_t)v62);
  int v77 = v18;
  if (__p)
  {
    int v64 = __p;
    operator delete(__p);
  }
  uint64_t v19 = *(void *)(a1 + 1952);
  uint64_t v20 = *(void *)(a1 + 1960);
  if (v19 == v20) {
    goto LABEL_18;
  }
  while (!sub_490A0(v19, &v76, v14, v15, v16, v17))
  {
    v19 += 48;
    if (v19 == v20)
    {
      uint64_t v19 = v20;
      break;
    }
  }
  if (v19 == *(void *)(a1 + 1960))
  {
LABEL_18:
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_521480((uint64_t)v62);
    v53[0] = sub_512EC0(a1, &v78, (unsigned int *)&v76);
    sub_512D4C((uint64_t)v62, &v78, v53);
    std::string v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    if (v73)
    {
      do
      {
        *(_OWORD *)int v53 = *((_OWORD *)v65 + *(unsigned int *)v69);
        sub_51325C((uint64_t)v62);
        int64_t v56 = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 0);
        int v21 = sub_5134F0(a1, (unsigned int **)&v56, (unsigned int *)&v76, (uint64_t)v62);
        v51[0] = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 1);
        int v22 = sub_5134F0(a1, (unsigned int **)v51, (unsigned int *)&v76, (uint64_t)v62);
        sub_513680(a1, v53, v21 ^ 1, v22 ^ 1, (uint64_t)&v59);
        long long v23 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        int64x2_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
          uint64_t v26 = *(unsigned int *)((char *)v23 + v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unsigned __int8 v27 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0x2Fu)
        {
          uint64_t v29 = v28[23];
          if (v29)
          {
            unsigned int v30 = *((unsigned __int8 *)v27 + v29);
            BOOL v11 = v30 > 0x2D;
            uint64_t v31 = (1 << v30) & 0x208040000000;
            if (!v11 && v31 != 0) {
              v75 += v26;
            }
          }
        }
        v74 += v26;
      }
      while (v73);
      char v34 = v60;
      if (v59 != v60)
      {
        uint64_t v35 = (unsigned int *)((char *)v59 + 12);
        if ((char *)v59 + 12 != (char *)v60)
        {
          unsigned int v36 = *(_DWORD *)v59;
          while (1)
          {
            unsigned int v37 = v36;
            unsigned int v36 = *v35;
            if (__PAIR64__(*(v35 - 2), v37) == *(void *)v35 && *(v35 - 1) == v35[2]) {
              break;
            }
            v35 += 3;
            if (v35 == v60) {
              goto LABEL_49;
            }
          }
          uint64_t v38 = v35 - 3;
          if (v35 - 3 != v60)
          {
            while (1)
            {
              v35 += 3;
              if (v35 == v34) {
                break;
              }
              if (*v38 != *v35 || v38[1] != v35[1] || v38[2] != v35[2])
              {
                unsigned int v39 = v35[2];
                *(void *)(v38 + 3) = *(void *)v35;
                v38 += 3;
                v38[2] = v39;
              }
            }
            char v34 = v38 + 3;
            if (v38 + 3 != v60) {
              goto LABEL_50;
            }
            goto LABEL_51;
          }
        }
      }
    }
    else
    {
      char v34 = 0;
    }
LABEL_49:
    if (v34 != v60) {
LABEL_50:
    }
      uint64_t v60 = v34;
LABEL_51:
    sub_4909C((uint64_t)&v56, (uint64_t *)&v59, *(double *)(a1 + 1768));
    char v40 = (char *)v56;
    if (v57 - (unsigned char *)v56 != 24 || *(void *)v56 == *((void *)v56 + 1))
    {
      uint64_t v19 = *(void *)(a1 + 1960);
      if (!v56)
      {
LABEL_84:
        if (v59)
        {
          uint64_t v60 = (unsigned int *)v59;
          operator delete(v59);
        }
        if (v71)
        {
          long long v72 = v71;
          operator delete(v71);
        }
        if (v69)
        {
          unint64_t v70 = v69;
          operator delete(v69);
        }
        if (v67)
        {
          int v68 = v67;
          operator delete(v67);
        }
        if (v65)
        {
          int v66 = v65;
          operator delete(v65);
        }
        sub_328138((uint64_t)v62);
        return v19;
      }
    }
    else
    {
      long long v41 = *(void **)(a1 + 1960);
      if ((unint64_t)v41 >= *(void *)(a1 + 1968))
      {
        long long v44 = sub_522344((void **)(a1 + 1952), (uint64_t *)&v56, &v75, &v74);
      }
      else
      {
        uint64_t v43 = v74;
        uint64_t v42 = v75;
        sub_4D4C4(*(void **)(a1 + 1960), (uint64_t *)&v56);
        v41[3] = v58;
        v41[4] = v42;
        v41[5] = v43;
        long long v44 = (char *)(v41 + 6);
        *(void *)(a1 + 1960) = v41 + 6;
      }
      *(void *)(a1 + 1960) = v44;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_49168((uint64_t *)v53, &v56);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_188FC78(v53, (uint64_t)"polygon vertices number: ", 25);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        long long v45 = sub_188FC78(v53, (uint64_t)" parking segment length: ", 25);
        std::ostream::operator<<();
        sub_188FC78(v45, (uint64_t)" drivable segment length: ", 26);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v19 = *(void *)(a1 + 1960) - 48;
      char v40 = (char *)v56;
      if (!v56) {
        goto LABEL_84;
      }
    }
    long long v46 = v57;
    long long v47 = v40;
    if (v57 != v40)
    {
      long long v48 = v57;
      do
      {
        long long v50 = (void *)*((void *)v48 - 3);
        v48 -= 24;
        uint64_t v49 = v50;
        if (v50)
        {
          *((void *)v46 - 2) = v49;
          operator delete(v49);
        }
        long long v46 = v48;
      }
      while (v48 != v40);
      long long v47 = v56;
    }
    unint64_t v57 = v40;
    operator delete(v47);
    goto LABEL_84;
  }
  return v19;
}

void sub_511D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_36094(&a50);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  sub_5139D0(&a57);
  _Unwind_Resume(a1);
}

void sub_511E28(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1689))
  {
    int v7 = *(_DWORD *)(a1 + 136);
    if (v7 == 4 || v7 == 1)
    {
      uint64_t v9 = (long long *)(a1 + 88);
      *(_DWORD *)(a4 + 64) = 1;
      v24[0] = 4;
      unint64_t v10 = *(void *)(a4 + 48);
      if (v10 >= *(void *)(a4 + 56))
      {
        uint64_t v12 = sub_52262C((void **)(a4 + 40), (uint64_t)v9, v24);
      }
      else
      {
        long long v11 = *v9;
        *(void *)(v10 + 16) = *(void *)(a1 + 104);
        *(_OWORD *)unint64_t v10 = v11;
        sub_4D4C4((void *)(v10 + 24), (uint64_t *)(a1 + 112));
        *(_DWORD *)(v10 + 48) = *(_DWORD *)(a1 + 136);
        *(void *)(v10 + 56) = 0x7FFFFFFF00000004;
        *(void *)(v10 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v12 = (char *)(v10 + 72);
        *(void *)(a4 + 48) = v10 + 72;
      }
      *(void *)(a4 + 48) = v12;
      *((_DWORD *)v12 - 3) = *(_DWORD *)(a1 + 1748) + a2;
    }
    else
    {
      uint64_t v13 = 1690;
      if (!*(unsigned char *)(a1 + 80)) {
        uint64_t v13 = 1691;
      }
      if (*(unsigned char *)(a1 + v13)) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = *(void *)(a1 + 32) == *(void *)(a1 + 40);
      }
      if (!v14 && *(void *)(a1 + 1960) != a3)
      {
        sub_3D25C0((uint64_t)v24, a3, 8);
        if (*(void *)(a3 + 32) >= *(void *)(a1 + 1776) && *(void *)(a3 + 40) >= *(void *)(a1 + 1784))
        {
          if (*(unsigned char *)(a1 + 144))
          {
            *(_DWORD *)(a4 + 64) = 3;
            int v23 = 2;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          else
          {
            *(_DWORD *)(a4 + 64) = 2;
            int v23 = 4;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
            if (*(void *)(a3 + 32) >= *(void *)(a1 + 1792) && *(void *)(a3 + 40) >= *(void *)(a1 + 1800)) {
              int v22 = (_DWORD *)(a1 + 1748);
            }
            else {
              int v22 = (_DWORD *)(a1 + 1744);
            }
            *(_DWORD *)(*(void *)(a4 + 48) - 12) = *v22 + a2;
            int v23 = 5;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          sub_513E34((uint64_t)v24);
        }
        else
        {
          double v16 = (char *)__p;
          if (__p)
          {
            double v17 = v26;
            int v18 = __p;
            if (v26 != __p)
            {
              uint64_t v19 = v26;
              do
              {
                int v21 = (void *)*((void *)v19 - 3);
                v19 -= 24;
                uint64_t v20 = v21;
                if (v21)
                {
                  *((void *)v17 - 2) = v20;
                  operator delete(v20);
                }
                double v17 = v19;
              }
              while (v19 != v16);
              int v18 = __p;
            }
            uint64_t v26 = v16;
            operator delete(v18);
          }
        }
      }
    }
  }
}

void sub_512090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5120A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5120B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5120CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_5120D4(uint64_t a1, int a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 1689) && *(unsigned char *)(a1 + 1833) && !*(_DWORD *)(a3 + 64))
  {
    *(_DWORD *)(a3 + 64) = 4;
    sub_365DC((int *)(a1 + 16), (uint64_t *)(a1 + 1824), (uint64_t)&v22, a4);
    sub_3D2710((uint64_t)&v17, &v22, 10);
    int v16 = 4;
    unint64_t v7 = *(void *)(a3 + 48);
    if (v7 >= *(void *)(a3 + 56))
    {
      uint64_t v9 = sub_52295C((void **)(a3 + 40), (uint64_t)&v17, &v16);
    }
    else
    {
      long long v8 = v17;
      *(void *)(v7 + 16) = v18;
      *(_OWORD *)unint64_t v7 = v8;
      sub_4D4C4((void *)(v7 + 24), (uint64_t *)&__p);
      *(_DWORD *)(v7 + 48) = v21;
      *(void *)(v7 + 56) = 0x7FFFFFFF00000004;
      *(void *)(v7 + 64) = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v9 = (char *)(v7 + 72);
      *(void *)(a3 + 48) = v7 + 72;
    }
    *(void *)(a3 + 48) = v9;
    *((_DWORD *)v9 - 3) = *(_DWORD *)(a1 + 1752) + a2;
    unint64_t v10 = (char *)__p;
    if (__p)
    {
      long long v11 = v20;
      uint64_t v12 = __p;
      if (v20 != __p)
      {
        uint64_t v13 = v20;
        do
        {
          double v15 = (void *)*((void *)v13 - 3);
          v13 -= 24;
          BOOL v14 = v15;
          if (v15)
          {
            *((void *)v11 - 2) = v14;
            operator delete(v14);
          }
          long long v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v20 = v10;
      operator delete(v12);
    }
  }
}

void sub_512234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_512248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 48) = v3;
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_512260(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1672) && *(unsigned char *)(a1 + 1834))
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = a3[6];
    long long v8 = (void **)(a3 + 5);
    if (v6 == v7)
    {
LABEL_6:
      if (*(void *)(a2 + 1064) != *(void *)(a2 + 1072) && !sub_64F5D8(a2))
      {
        sub_3AEF0((unsigned int *)(a1 + 2000), *(void *)(a1 + 1848), *(_DWORD *)(a1 + 1864), (uint64_t)&v31);
        sub_3D2668((uint64_t)&v26, (uint64_t)&v31, 8);
        int v25 = 7;
        unint64_t v9 = a3[6];
        if (v9 >= a3[7])
        {
          long long v11 = sub_52262C(v8, (uint64_t)&v26, &v25);
        }
        else
        {
          long long v10 = v26;
          *(void *)(v9 + 16) = v27;
          *(_OWORD *)unint64_t v9 = v10;
          sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
          *(_DWORD *)(v9 + 48) = v30;
          *(void *)(v9 + 56) = 0x7FFFFFFF00000007;
          *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
          long long v11 = (char *)(v9 + 72);
          a3[6] = v9 + 72;
        }
        a3[6] = v11;
        uint64_t v12 = *(void *)(*(void *)(a2 + 1072) - 1528);
        if (v12 >= *(void *)(a1 + 1848)) {
          uint64_t v12 = *(void *)(a1 + 1848);
        }
        *((void *)v11 - 1) = v12;
        uint64_t v13 = (char *)__p;
        if (__p)
        {
          BOOL v14 = v29;
          double v15 = __p;
          if (v29 != __p)
          {
            int v16 = v29;
            do
            {
              uint64_t v18 = (void *)*((void *)v16 - 3);
              v16 -= 24;
              long long v17 = v18;
              if (v18)
              {
                *((void *)v14 - 2) = v17;
                operator delete(v17);
              }
              BOOL v14 = v16;
            }
            while (v16 != v13);
            double v15 = __p;
          }
          uint64_t v29 = v13;
          operator delete(v15);
        }
        uint64_t v19 = (char *)v31;
        if (v31)
        {
          uint64_t v20 = v32;
          int v21 = v31;
          if (v32 != v31)
          {
            __n128 v22 = v32;
            do
            {
              int64x2_t v24 = (void *)*((void *)v22 - 3);
              v22 -= 24;
              int v23 = v24;
              if (v24)
              {
                *((void *)v20 - 2) = v23;
                operator delete(v23);
              }
              uint64_t v20 = v22;
            }
            while (v22 != v19);
            int v21 = v31;
          }
          uint64_t v32 = v19;
          operator delete(v21);
        }
      }
    }
    else
    {
      while (*(_DWORD *)(v6 + 56) != 5)
      {
        v6 += 72;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_512440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_512468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_51247C(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 1672))
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(result + 1838)) {
        return result;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(result + 1839)) {
        return result;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(result + 1840))
    {
      return result;
    }
    BOOL result = sub_64F240(a2);
    if ((result & 1) == 0 && *(void *)(a2 + 1064) != *(void *)(a2 + 1072))
    {
      BOOL result = sub_64F608(a2, 2);
      if (result)
      {
        uint64_t v7 = *(void *)(a3 + 40);
        uint64_t v8 = *(void *)(a3 + 48);
        if (v7 == v8)
        {
LABEL_16:
          BOOL result = (unint64_t)sub_5162C4(v5, a2);
          if (result)
          {
            uint64_t v9 = *(void *)(a2 + 1072);
            while (v9 != *(void *)(a2 + 1064))
            {
              uint64_t v10 = v9 - 2400;
              int v11 = *(_DWORD *)(v9 - 2240);
              BOOL v12 = v11 == 39 || v11 == 16;
              uint64_t v9 = v10;
              if (v12)
              {
                unint64_t v13 = *(void *)(v10 + 24);
                if (v13 > *(void *)(v10 + 40))
                {
                  while (1)
                  {
                    BOOL result = sub_46C8EC((void *)a2, --v13);
                    BOOL v14 = (unsigned __int16 *)(*(void *)result - **(int **)result);
                    if (*v14 >= 0x2Fu)
                    {
                      uint64_t v15 = v14[23];
                      if (v15)
                      {
                        unsigned int v16 = *(unsigned __int8 *)(*(void *)result + v15);
                        BOOL v17 = v16 > 0x2F;
                        uint64_t v18 = (1 << v16) & 0xA08040000000;
                        if (!v17 && v18 != 0) {
                          break;
                        }
                      }
                    }
                    if (v13 <= *(void *)(v10 + 40)) {
                      goto LABEL_35;
                    }
                  }
                  BOOL result = sub_5114A0(v5, *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int16 *)(result + 36) << 32));
                  if (*(void *)(v5 + 1960) != result)
                  {
                    sub_3D25C0((uint64_t)v26, result, 8);
                    LODWORD(v23[0]) = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v26, (int *)v23);
                    BOOL result = sub_513E34((uint64_t)v26);
                  }
                }
LABEL_35:
                uint64_t v20 = *(void *)(a3 + 48);
                if (*(void *)(a3 + 40) == v20 || *(_DWORD *)(v20 - 16) != 8)
                {
                  BOOL result = sub_5166B8(v5, (void *)a2);
                  unint64_t v24 = result;
                  int v25 = v21;
                  if (result != -1 || result <= 0xFFFFFFFEFFFFFFFFLL)
                  {
                    sub_3AEF0((unsigned int *)&v24, *(void *)(v5 + 1848), *(_DWORD *)(v5 + 1864), (uint64_t)v23);
                    sub_3D2668((uint64_t)v26, (uint64_t)v23, 8);
                    int v22 = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v26, &v22);
                    sub_513E34((uint64_t)v26);
                    return (unint64_t)sub_36094(v23);
                  }
                }
                return result;
              }
            }
          }
        }
        else
        {
          while (*(_DWORD *)(v7 + 56) != 5)
          {
            v7 += 72;
            if (v7 == v8) {
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_5126F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_512708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_513E34((uint64_t)va1);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_512724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_512738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1672))
  {
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(a1 + 1835)) {
        return;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(a1 + 1836)) {
        return;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(a1 + 1837))
    {
      return;
    }
    if ((sub_64F240(a2) & 1) == 0
      && *(void *)(a2 + 1064) != *(void *)(a2 + 1072)
      && (!sub_64F5D8(a2) || sub_64F608(a2, 2))
      && sub_5162C4(a1, a2))
    {
      unint64_t v32 = *(void *)(a1 + 2000);
      int v33 = *(_DWORD *)(a1 + 2008);
      if (sub_64F5D8(a2))
      {
        unint64_t v7 = sub_5166B8(a1, (void *)a2);
        if ((v7 & HIDWORD(v7)) != 0xFFFFFFFF)
        {
          unint64_t v32 = v7;
          int v33 = v8;
        }
      }
      sub_3AEF0((unsigned int *)&v32, *(void *)(a1 + 1856), *(_DWORD *)(a1 + 1864), (uint64_t)&v30);
      sub_3D2668((uint64_t)&v25, (uint64_t)&v30, 8);
      int v24 = 6;
      unint64_t v9 = *(void *)(a3 + 48);
      if (v9 >= *(void *)(a3 + 56))
      {
        int v11 = sub_52262C((void **)(a3 + 40), (uint64_t)&v25, &v24);
      }
      else
      {
        long long v10 = v25;
        *(void *)(v9 + 16) = v26;
        *(_OWORD *)unint64_t v9 = v10;
        sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
        *(_DWORD *)(v9 + 48) = v29;
        *(void *)(v9 + 56) = 0x7FFFFFFF00000006;
        *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        int v11 = (char *)(v9 + 72);
        *(void *)(a3 + 48) = v9 + 72;
      }
      *(void *)(a3 + 48) = v11;
      BOOL v12 = (char *)__p;
      if (__p)
      {
        unint64_t v13 = v28;
        BOOL v14 = __p;
        if (v28 != __p)
        {
          uint64_t v15 = v28;
          do
          {
            BOOL v17 = (void *)*((void *)v15 - 3);
            v15 -= 24;
            unsigned int v16 = v17;
            if (v17)
            {
              *((void *)v13 - 2) = v16;
              operator delete(v16);
            }
            unint64_t v13 = v15;
          }
          while (v15 != v12);
          BOOL v14 = __p;
        }
        uint64_t v28 = v12;
        operator delete(v14);
      }
      uint64_t v18 = (char *)v30;
      if (v30)
      {
        uint64_t v19 = v31;
        uint64_t v20 = v30;
        if (v31 != v30)
        {
          int v21 = v31;
          do
          {
            int v23 = (void *)*((void *)v21 - 3);
            v21 -= 24;
            int v22 = v23;
            if (v23)
            {
              *((void *)v19 - 2) = v22;
              operator delete(v22);
            }
            uint64_t v19 = v21;
          }
          while (v21 != v18);
          uint64_t v20 = v30;
        }
        uint64_t v31 = v18;
        operator delete(v20);
      }
    }
  }
}

void sub_512988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_5129B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_5129C4(unint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 10144) != *(void *)(a2 + 10152)
    && (*(_DWORD *)(a2 + 10168) & 0xFFFFFFFE) == 2
    && *(void *)(a2 + 1064) != *(void *)(a2 + 1072))
  {
    uint64_t v3 = result;
    BOOL result = sub_46C760((void *)a2);
    if (result)
    {
      if ((int)(-1775253149 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5)) >= 1)
      {
        uint64_t v4 = -1775253149 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5);
        do
        {
          uint64_t v5 = v4--;
          BOOL result = sub_51690C((void *)(a2 + 1064), v4);
          unint64_t v6 = result;
          uint64_t v7 = *(int *)(result + 24);
          while (v7 > *(int *)(v6 + 40))
          {
            uint64_t v8 = sub_46C8EC((void *)a2, --v7);
            unint64_t v9 = *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32);
            BOOL result = sub_515898(v3, &v9);
            if ((result & 1) == 0) {
              return result;
            }
          }
          *(unsigned char *)(v6 + 2225) = 1;
        }
        while (v5 >= 2);
      }
    }
  }
  return result;
}

unint64_t sub_512AE4(unint64_t result, void *a2, uint64_t a3)
{
  if (a2[63] >= *(void *)(result + 1816)) {
    uint64_t v4 = *(void *)(result + 1816);
  }
  else {
    uint64_t v4 = a2[63];
  }
  if ((*(_DWORD *)(a3 + 64) & 0xFFFFFFFE) != 2) {
    goto LABEL_30;
  }
  uint64_t v6 = result;
  sub_46C7A0(a2, &v25);
  uint64_t v7 = 0;
  while (1)
  {
    BOOL result = sub_46C7C4((uint64_t)a2, v22);
    unint64_t v9 = v26;
    uint64_t v11 = v23;
    unint64_t v10 = v24;
    if (!v26) {
      break;
    }
    unint64_t v12 = v27;
    BOOL result = sub_46C760(v26);
    unint64_t v13 = result;
    if (v11)
    {
      BOOL result = sub_46C760(v11);
      if (v12 >= v13 || v10 >= result)
      {
        if (v12 < v13 == v10 < result) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v15 = sub_46C8EC(v9, v12);
        BOOL result = sub_46C8EC(v11, v10);
        if (v15 == result) {
          goto LABEL_28;
        }
      }
    }
    else if (v12 >= result)
    {
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v16 = sub_46C8EC(v26, v27 - 1);
    v22[0] = *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32);
    if ((sub_515898(v6, (unint64_t *)v22) & 1) == 0)
    {
      BOOL result = sub_5159C8(v6, v22, a3);
      if (!result) {
        goto LABEL_28;
      }
    }
    BOOL v17 = (int *)sub_2D5D58(*(void *)(v6 + 8), v22[0]);
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 9u)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = v18[4];
      if (v8) {
        uint64_t v8 = *(unsigned int *)((char *)v17 + v8);
      }
    }
    v7 += v8;
    --v27;
  }
  if (v23)
  {
    BOOL result = sub_46C760(v23);
    if (v10 < result) {
      goto LABEL_23;
    }
  }
LABEL_28:
  if (v4 <= *(void *)(v6 + 1808) + v7) {
    uint64_t v4 = *(void *)(v6 + 1808) + v7;
  }
LABEL_30:
  uint64_t v19 = *(void *)a3;
  if (*(void *)a3 <= v4) {
    uint64_t v19 = v4;
  }
  *(void *)(a3 + 8) = v19;
  uint64_t v20 = *(void *)(a3 + 40);
  for (uint64_t i = *(void *)(a3 + 48); v20 != i; v20 += 72)
  {
    if (*(_DWORD *)(v20 + 56) == 5 && *(void *)(v20 + 64) == 0x7FFFFFFFFFFFFFFFLL) {
      *(void *)(v20 + 64) = *(void *)(a3 + 8);
    }
  }
  return result;
}

uint64_t *sub_512CF4(unint64_t a1, uint64_t a2)
{
  BOOL result = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    do
    {
      BOOL result = (uint64_t *)sub_510B40(a1, v4);
      v4 += 12328;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_512D4C(uint64_t a1, void *a2, unint64_t *a3)
{
  ++*(_DWORD *)(a1 + 816);
  sub_521670(a1, a2, &v14);
  if (v14)
  {
    *(void *)(*(void *)(a1 + 768) + 16 * *(unsigned int *)(v15 + 8) + 8) = *a3;
    uint64_t v6 = (uint64_t *)(a1 + 824);
    unint64_t v7 = *(unsigned int *)(v15 + 8);
    uint64_t v8 = *(void *)(a1 + 848);
    if (v7 >= (*(void *)(a1 + 856) - v8) >> 2 || *(_DWORD *)(v8 + 4 * v7) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    sub_5221BC(v6, v7, a3);
    return;
  }
  unint64_t v9 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
  sub_5217C8(a1, a2, (uint64_t)&v16);
  uint64_t v10 = v16;
  if (v18)
  {
    uint64_t v11 = *(void *)(v16 + 8) + 12 * v17;
    *(void *)uint64_t v11 = *a2;
    *(_DWORD *)(v11 + 8) = 0;
  }
  *(_DWORD *)(*(void *)(v10 + 8) + 12 * v17 + 8) = v9 >> 4;
  sub_2EA258(a1 + 768, a2, a3);
  uint64_t v6 = (uint64_t *)(a1 + 824);
  unint64_t v12 = (v9 >> 4);
  uint64_t v13 = *(void *)(a1 + 848);
  if (v12 < (*(void *)(a1 + 856) - v13) >> 2 && *(_DWORD *)(v13 + 4 * v12) != -1)
  {
    unint64_t v7 = v9 >> 4;
    goto LABEL_10;
  }
  unint64_t v7 = v9 >> 4;
LABEL_12:
  sub_521F5C((uint64_t)v6, v7, a3);
}

uint64_t sub_512EC0(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v44);
  unint64_t v4 = sub_2E1AA4((uint64_t)v44);
  unint64_t v5 = sub_2E40A4((uint64_t)v44);
  double v6 = (double)v4;
  double v7 = (double)HIDWORD(v4);
  double v8 = (double)HIDWORD(v5);
  double v9 = (double)v5 - (double)v4;
  double v10 = (double)HIDWORD(v5) - (double)HIDWORD(v4);
  double v11 = v9 * v9 + v10 * v10;
  double v12 = fabs(v11);
  unsigned int v14 = *a3;
  unsigned int v13 = a3[1];
  if (v11 == 0.0 || v12 < 2.22044605e-16)
  {
    double v16 = (double)v13;
    double v17 = (double)v14;
    goto LABEL_18;
  }
  double v17 = (double)v14;
  double v16 = (double)v13;
  double v18 = (v9 * ((double)v14 - v6) + v10 * ((double)v13 - v7)) / v11;
  if (v18 <= 0.0)
  {
    double v41 = (double)v4;
    double v8 = (double)HIDWORD(v4);
    goto LABEL_20;
  }
  if (v18 >= 1.0)
  {
LABEL_18:
    double v41 = (double)v5;
    goto LABEL_20;
  }
  double v19 = v10 * v18 + v7;
  double v20 = v9 * v18 + v6;
  if (v20 < 0.0) {
    double v21 = -0.5;
  }
  else {
    double v21 = 0.5;
  }
  unsigned int v22 = (v20 + v21);
  if (v19 < 0.0) {
    double v23 = -0.5;
  }
  else {
    double v23 = 0.5;
  }
  unsigned int v24 = (v19 + v23);
  if (v24 >= 0xFFFFFFFE) {
    unsigned int v24 = -2;
  }
  double v8 = (double)v24;
  double v41 = (double)v22;
LABEL_20:
  long double v25 = exp(3.14159265 - v16 * 6.28318531 / 4294967300.0);
  double v42 = (v17 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  long double v43 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 * 0.0174532925;
  long double v26 = exp(3.14159265 - v8 * 6.28318531 / 4294967300.0);
  long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
  long double v28 = sin((v43 - v27) * 0.5);
  long double v29 = v28 * v28;
  double v30 = cos(v43);
  long double v31 = v30 * cos(v27);
  long double v32 = sin((v42 - (v41 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
  long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
  double v34 = (v33 + v33) * 6372797.56 * 100.0;
  if (v34 >= 0.0)
  {
    double v35 = v34;
    if (v34 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    double v35 = v34;
    if (v34 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34);
    if (v36 >= 1) {
      --v36;
    }
  }
  double v35 = (double)(v36 >> 1);
LABEL_28:
  if (v35 >= 9.22337204e18)
  {
    uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
    unsigned int v39 = __p;
    if (!__p) {
      return v38;
    }
    goto LABEL_40;
  }
  if (v34 >= 0.0)
  {
    if (v34 >= 4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    if (v34 <= -4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v34 = (double)(v37 >> 1);
LABEL_39:
  uint64_t v38 = (uint64_t)v34;
  unsigned int v39 = __p;
  if (__p)
  {
LABEL_40:
    long long v46 = v39;
    operator delete(v39);
  }
  return v38;
}

void sub_51323C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_51325C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 824);
  uint64_t v3 = *(char **)(a1 + 800);
  unint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 808);
  if ((unint64_t)v3 >= v5)
  {
    double v7 = *(char **)(a1 + 792);
    uint64_t v8 = (v3 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_188D718();
      }
      double v12 = operator new(4 * v11);
    }
    else
    {
      double v12 = 0;
    }
    unsigned int v13 = (unsigned int *)&v12[4 * v8];
    unsigned int v14 = &v12[4 * v11];
    unsigned int *v13 = *v2;
    double v6 = v13 + 1;
    if (v3 != v7)
    {
      unint64_t v15 = v3 - v7 - 4;
      if (v15 < 0x2C) {
        goto LABEL_40;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_40;
      }
      uint64_t v16 = (v15 >> 2) + 1;
      uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v4 = &v3[-v17];
      unsigned int v13 = (unsigned int *)((char *)v13 - v17);
      double v18 = &v12[4 * v8 - 16];
      double v19 = v3 - 16;
      uint64_t v20 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 8;
      }
      while (v20);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_40:
        do
        {
          unsigned int v22 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--unsigned int v13 = v22;
        }
        while (v4 != v7);
      }
    }
    *(void *)(a1 + 792) = v13;
    *(void *)(a1 + 800) = v6;
    *(void *)(a1 + 808) = v14;
    if (v7)
    {
      operator delete(v7);
      uint64_t v2 = *(unsigned int **)(a1 + 824);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v3 = *v2;
    double v6 = v3 + 4;
  }
  *(void *)(a1 + 800) = v6;
  *(_DWORD *)(*(void *)(a1 + 848) + 4 * *v2) = -1;
  unsigned int v23 = *(_DWORD *)(a1 + 872) - 1;
  *(_DWORD *)(a1 + 872) = v23;
  if (v23)
  {
    unsigned int v24 = &v2[4 * v23];
    *uint64_t v2 = *v24;
    *((void *)v2 + 1) = *((void *)v24 + 1);
    long double v25 = *(unsigned int **)(a1 + 824);
    *(_DWORD *)(*(void *)(a1 + 848) + 4 * *v25) = 0;
    unsigned int v26 = *(_DWORD *)(a1 + 872);
    if (v26 >= 2)
    {
      int v27 = 0;
      unsigned int v28 = 0;
      unsigned int v29 = 1;
      do
      {
        unsigned int v30 = v27 + 5;
        if (v30 >= v26) {
          unsigned int v31 = v26;
        }
        else {
          unsigned int v31 = v30;
        }
        if (v29 >= v31) {
          break;
        }
        uint64_t v32 = v28;
        long double v33 = &v25[4 * v28];
        uint64_t v36 = *((void *)v33 + 1);
        double v34 = v33 + 2;
        uint64_t v35 = v36;
        uint64_t v37 = &v25[4 * v29 + 2];
        unsigned int v28 = -1;
        uint64_t v38 = v36;
        do
        {
          uint64_t v40 = *(void *)v37;
          v37 += 4;
          uint64_t v39 = v40;
          if (v40 < v38)
          {
            uint64_t v38 = v39;
            unsigned int v28 = v29;
          }
          ++v29;
        }
        while (v31 != v29);
        if (v28 >= v26) {
          break;
        }
        uint64_t v41 = 4 * v28;
        double v42 = &v25[v41];
        uint64_t v43 = 4 * v32;
        unsigned int v44 = v25[v41];
        *double v42 = v25[v43];
        v25[v43] = v44;
        uint64_t v45 = *(void *)&v25[v41 + 2];
        *((void *)v42 + 1) = v35;
        *double v34 = v45;
        long double v25 = *(unsigned int **)(a1 + 824);
        uint64_t v46 = *(void *)(a1 + 848);
        uint64_t v47 = 4 * v25[v41];
        uint64_t v48 = 4 * v25[v43];
        int v49 = *(_DWORD *)(v46 + v47);
        *(_DWORD *)(v46 + v47) = *(_DWORD *)(v46 + v48);
        *(_DWORD *)(v46 + v48) = v49;
        int v27 = 4 * v28;
        unsigned int v29 = (4 * v28) | 1;
        unsigned int v26 = *(_DWORD *)(a1 + 872);
      }
      while (v29 < v26);
    }
  }
  *(void *)(a1 + 832) -= 16;
}

uint64_t sub_5134F0(uint64_t a1, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  sub_2E4F74(*(void *)(a1 + 8), *a2, (unint64_t *)&__p);
  double v7 = (unint64_t *)__p;
  uint64_t v8 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    if (!__p) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    char v9 = sub_515898(a1, v7++);
    if (v7 == v8) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
  }
  while ((v10 & 1) != 0);
  double v7 = (unint64_t *)__p;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = 0;
    if (__p) {
      goto LABEL_28;
    }
    return v19;
  }
  unint64_t v11 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    double v7 = v23;
    if (!v23) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    double v12 = (int *)sub_2D5D58(*(void *)(a1 + 8), *v7);
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (v14 < 0xB)
    {
LABEL_21:
      uint64_t v21 = sub_512EC0(a1, (uint64_t *)v7, a3);
      sub_5156FC(a4, v7, (unint64_t *)&v21);
      goto LABEL_22;
    }
    if (v13[5])
    {
      if (v14 < 0x39 || (*(int *)((char *)v12 + v13[5]) & 3) != 0) {
        goto LABEL_21;
      }
    }
    else if (v14 < 0x39)
    {
      goto LABEL_21;
    }
    uint64_t v16 = v13[28];
    if (!v16) {
      goto LABEL_21;
    }
    int v17 = *(int *)((char *)v12 + v16);
    if ((v17 & 0x23) == 0 && (v17 & 7) != 4) {
      goto LABEL_21;
    }
LABEL_22:
    ++v7;
  }
  while (v7 != v11);
  uint64_t v19 = 1;
  double v7 = (unint64_t *)__p;
  if (!__p) {
    return v19;
  }
LABEL_28:
  unsigned int v23 = v7;
  operator delete(v7);
  return v19;
}

void sub_51365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_513680(uint64_t a1, unint64_t *a2, int a3, int a4, uint64_t a5)
{
  char v10 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x2Fu)
  {
    uint64_t v12 = v11[23];
    if (v12)
    {
      unsigned int v13 = *((unsigned __int8 *)v10 + v12);
      BOOL v14 = v13 > 0x2D;
      uint64_t v15 = (1 << v13) & 0x208040000000;
      if (!v14 && v15 != 0) {
        goto LABEL_11;
      }
    }
  }
  int v17 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  double v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x2Fu)
  {
    uint64_t v19 = v18[23];
    if (v19)
    {
      if (*((unsigned char *)v17 + v19) == 47)
      {
LABEL_11:
        uint64_t v20 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
        uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
          uint64_t v23 = *(unsigned int *)((char *)v20 + v22);
        }
        else {
          uint64_t v23 = 0;
        }
        sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)&v32);
        sub_2E4B5C((uint64_t)&v32, &v34);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        unsigned int v24 = v34;
        if (a3 & a4) {
          goto LABEL_32;
        }
        size_t v25 = v35 - (unsigned char *)v34;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)v34) >> 2);
        if (v26 < 2 || v23 == 0) {
          goto LABEL_32;
        }
        uint64_t v32 = 0;
        __p[0] = 0;
        __p[1] = 0;
        if (v35 == v34)
        {
          unsigned int v29 = 0;
          unsigned int v28 = 0;
          if (a3) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v26 >= 0x1555555555555556) {
            sub_2E00();
          }
          unsigned int v28 = (char *)operator new(v35 - (unsigned char *)v34);
          unsigned int v29 = &v28[12 * v26];
          uint64_t v32 = v28;
          __p[1] = v29;
          memcpy(v28, v24, v25);
          __p[0] = v29;
          if (a3)
          {
LABEL_25:
            sub_515BE4(a1, (uint64_t *)&v34, v23, 1, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            unsigned int v28 = (char *)__src;
            uint64_t v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            unsigned int v29 = (char *)v31;
            if (!a4)
            {
LABEL_28:
              if (v28 == v29) {
                goto LABEL_29;
              }
              goto LABEL_40;
            }
LABEL_37:
            sub_515BE4(a1, (uint64_t *)&v34, v23, 0, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            unsigned int v28 = (char *)__src;
            uint64_t v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            unsigned int v29 = (char *)v31;
            if (__src == (void *)v31)
            {
LABEL_29:
              if (!v29)
              {
LABEL_31:
                unsigned int v24 = v34;
LABEL_32:
                if (v24)
                {
                  uint64_t v35 = v24;
                  operator delete(v24);
                }
                return;
              }
LABEL_30:
              __p[0] = v29;
              operator delete(v29);
              goto LABEL_31;
            }
LABEL_40:
            if (*(unsigned char *)(a1 + 1704))
            {
              sub_46C6C(a5, *(void *)(a5 + 8), v28, v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 2));
              unsigned int v29 = v28;
              if (!v28) {
                goto LABEL_31;
              }
            }
            else
            {
              sub_515D6C((void **)a5, (uint64_t *)v28);
              sub_515D6C((void **)a5, (uint64_t *)((char *)__p[0] - 12));
              unsigned int v29 = v32;
              if (!v32) {
                goto LABEL_31;
              }
            }
            goto LABEL_30;
          }
        }
        if (!a4) {
          goto LABEL_28;
        }
        goto LABEL_37;
      }
    }
  }
}

void sub_51396C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5139D0(void *a1)
{
  uint64_t v2 = (void *)a1[106];
  if (v2)
  {
    a1[107] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[103];
  if (v3)
  {
    a1[104] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[99];
  if (v4)
  {
    a1[100] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[96];
  if (v5)
  {
    a1[97] = v5;
    operator delete(v5);
  }

  return sub_328138((uint64_t)a1);
}

uint64_t sub_513A44(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  long long v6 = *(_OWORD *)(a2 + 39);
  *(void *)(a1 + 88) = a2[41];
  *(_OWORD *)(a1 + 72) = v6;
  sub_4D4C4((void *)(a1 + 96), a2 + 42);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 90);
  *(unsigned char *)(a1 + 128) = a3;
  uint64_t v7 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v7;
  char v9 = (uint64_t *)a2[30];
  for (uint64_t i = (uint64_t *)a2[31]; v9 != i; v9 += 13)
    sub_513B60((void *)a1, v9);
  return a1;
}

void sub_513B14(_Unwind_Exception *exception_object)
{
  unint64_t v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
    unint64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[3] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_513B60(void *a1, uint64_t *a2)
{
  uint64_t v2 = (_DWORD *)a2[9];
  uint64_t v3 = (_DWORD *)a2[10];
  if (v2 != v3)
  {
    double v34 = (void **)(a1 + 5);
    uint64_t v35 = a1 + 2;
    do
    {
      switch(*v2)
      {
        case 0:
        case 6:
          char v9 = (_DWORD *)a1[3];
          unint64_t v8 = a1[4];
          if ((unint64_t)v9 >= v8)
          {
            uint64_t v20 = (_DWORD *)*v35;
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v35) >> 2);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v20) >> 2);
            if (2 * v23 > v22) {
              unint64_t v22 = 2 * v23;
            }
            if (v23 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v24 = 0x1555555555555555;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              if (v24 > 0x1555555555555555) {
LABEL_43:
              }
                sub_188D718();
              size_t v25 = (char *)operator new(12 * v24);
            }
            else
            {
              size_t v25 = 0;
            }
            unsigned int v30 = &v25[12 * v21];
            *(void *)unsigned int v30 = *a2;
            *((_DWORD *)v30 + 2) = *((_DWORD *)a2 + 2);
            long long v31 = v30;
            if (v9 != v20)
            {
              do
              {
                uint64_t v32 = *(void *)(v9 - 3);
                v9 -= 3;
                int v33 = v9[2];
                *(void *)(v31 - 12) = v32;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v9 != v20);
              char v9 = (_DWORD *)*v35;
            }
            unint64_t v11 = v30 + 12;
            a1[2] = v31;
            a1[3] = v30 + 12;
            a1[4] = &v25[12 * v24];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            uint64_t v10 = *a2;
            v9[2] = *((_DWORD *)a2 + 2);
            *(void *)char v9 = v10;
            unint64_t v11 = v9 + 3;
          }
          a1[3] = v11;
          break;
        case 1:
        case 7:
          unsigned int v13 = (char *)a1[6];
          unint64_t v12 = a1[7];
          if ((unint64_t)v13 < v12)
          {
            uint64_t v6 = *a2;
            *((_DWORD *)v13 + 2) = *((_DWORD *)a2 + 2);
            *(void *)unsigned int v13 = v6;
            uint64_t v7 = v13 + 12;
          }
          else
          {
            BOOL v14 = (char *)*v34;
            unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*v34) >> 2);
            unint64_t v16 = v15 + 1;
            if (v15 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 2);
            if (2 * v17 > v16) {
              unint64_t v16 = 2 * v17;
            }
            if (v17 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v18 = 0x1555555555555555;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              if (v18 > 0x1555555555555555) {
                goto LABEL_43;
              }
              uint64_t v19 = (char *)operator new(12 * v18);
            }
            else
            {
              uint64_t v19 = 0;
            }
            unint64_t v26 = &v19[12 * v15];
            *(void *)unint64_t v26 = *a2;
            *((_DWORD *)v26 + 2) = *((_DWORD *)a2 + 2);
            int v27 = v26;
            if (v13 != v14)
            {
              do
              {
                uint64_t v28 = *(void *)(v13 - 12);
                v13 -= 12;
                int v29 = *((_DWORD *)v13 + 2);
                *(void *)(v27 - 12) = v28;
                v27 -= 12;
                *((_DWORD *)v27 + 2) = v29;
              }
              while (v13 != v14);
              unsigned int v13 = (char *)*v34;
            }
            uint64_t v7 = v26 + 12;
            a1[5] = v27;
            a1[6] = v26 + 12;
            a1[7] = &v19[12 * v18];
            if (v13) {
              operator delete(v13);
            }
          }
          a1[6] = v7;
          break;
        default:
          break;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t sub_513E34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL *sub_513EAC(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "waypoint_location_enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  strcpy((char *)__p, "waypoint_place_enabled");
  HIBYTE(__p[2]) = 22;
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "waypoint_id_enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  return a1;
}

void sub_513FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_513FF0(uint64_t a1, void *a2, uint64_t a3)
{
  v75[0] = (char *)operator new(0x20uLL);
  long long v72 = xmmword_20B8E90;
  *(_OWORD *)&v75[1] = xmmword_20B8E90;
  strcpy(v75[0], "enable_arrival_info_calculation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)a1 = v6;
  v75[0] = (char *)operator new(0x28uLL);
  long long v69 = xmmword_20B9260;
  *(_OWORD *)&v75[1] = xmmword_20B9260;
  strcpy(v75[0], "enable_arrival_region_calculation");
  BOOL v7 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  v75[0] = (char *)operator new(0x38uLL);
  long long v68 = xmmword_20B9A10;
  *(_OWORD *)&v75[1] = xmmword_20B9A10;
  strcpy(v75[0], "enable_non_dap_arrival_regions_for_charging_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 2) = v8;
  v75[0] = (char *)operator new(0x28uLL);
  long long v71 = xmmword_20B9280;
  *(_OWORD *)&v75[1] = xmmword_20B9280;
  strcpy(v75[0], "enable_non_dap_pre_arrival_regions");
  BOOL v9 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 3) = v9;
  HIBYTE(v75[2]) = 17;
  strcpy((char *)v75, "pullback_distance");
  double v10 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_17:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_28:
    *(void *)(a1 + 8) = (uint64_t)v10;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v75[0]);
LABEL_30:
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "use_all_segment_geometry_points");
  BOOL v14 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 16) = v14;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "end_of_route_distance_threshold");
  double v15 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v15 >= 0.0)
  {
    double v16 = v15;
    if (v15 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    double v16 = v15;
    if (v15 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15);
    if (v17 >= 1) {
      --v17;
    }
  }
  double v16 = (double)(v17 >> 1);
LABEL_40:
  if (v16 < 9.22337204e18)
  {
    if (v15 >= 0.0)
    {
      if (v15 >= 4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15) + 1;
    }
    else
    {
      if (v15 <= -4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15);
      if (v18 >= 1) {
        --v18;
      }
    }
    double v15 = (double)(v18 >> 1);
LABEL_51:
    *(void *)(a1 + 24) = (uint64_t)v15;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v75[0]);
LABEL_53:
  v75[0] = (char *)operator new(0x30uLL);
  long long v70 = xmmword_20B93C0;
  *(_OWORD *)&v75[1] = xmmword_20B93C0;
  qmemcpy(v67, "ute_distance_thrperson_end_of_ro", sizeof(v67));
  strcpy(v75[0], "person_end_of_route_distance_threshold_m");
  if (!sub_58070(a2, (uint64_t)v75))
  {
    *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  uint64_t v19 = (char *)operator new(0x30uLL);
  long long __p = v19;
  long long v74 = v70;
  *(_OWORD *)uint64_t v19 = v67[1];
  *((_OWORD *)v19 + 1) = v67[0];
  strcpy(v19 + 32, "eshold_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  operator delete(__p);
  if (SHIBYTE(v75[2]) < 0) {
LABEL_75:
  }
    operator delete(v75[0]);
LABEL_56:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v69;
  strcpy(v75[0], "enable_arrival_points_calculation");
  BOOL v20 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 40) = v20;
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "arrival_point_radius");
  double v21 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_66:
  if (v22 < 9.22337204e18)
  {
    if (v21 >= 0.0)
    {
      if (v21 >= 4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21) + 1;
    }
    else
    {
      if (v21 <= -4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21);
      if (v24 >= 1) {
        --v24;
      }
    }
    double v21 = (double)(v24 >> 1);
LABEL_79:
    *(void *)(a1 + 48) = (uint64_t)v21;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  *(void *)(a1 + 48) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v75[0]);
LABEL_81:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A80;
  strcpy(v75[0], "small_polygon_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 56) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "default_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 60) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93D0;
  strcpy(v75[0], "fallback_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 64) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B91A0;
  strcpy(v75[0], "ev_charging_time_multiplier");
  double v25 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 72) = v25;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "concave_polygon_angle_threshold");
  double v26 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 80) = v26;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "min_polygon_parking_segment_length");
  double v27 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v27 >= 0.0)
  {
    double v28 = v27;
    if (v27 >= 4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    double v28 = v27;
    if (v27 <= -4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27);
    if (v29 >= 1) {
      --v29;
    }
  }
  double v28 = (double)(v29 >> 1);
LABEL_99:
  if (v28 < 9.22337204e18)
  {
    if (v27 >= 0.0)
    {
      if (v27 >= 4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27) + 1;
    }
    else
    {
      if (v27 <= -4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27);
      if (v30 >= 1) {
        --v30;
      }
    }
    double v27 = (double)(v30 >> 1);
LABEL_110:
    *(void *)(a1 + 88) = (uint64_t)v27;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  *(void *)(a1 + 88) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v75[0]);
LABEL_112:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93A0;
  strcpy(v75[0], "min_polygon_drivable_segment_length");
  double v31 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v31 >= 0.0)
  {
    double v32 = v31;
    if (v31 >= 4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31) + 1;
  }
  else
  {
    double v32 = v31;
    if (v31 <= -4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31);
    if (v33 >= 1) {
      --v33;
    }
  }
  double v32 = (double)(v33 >> 1);
LABEL_120:
  if (v32 < 9.22337204e18)
  {
    if (v31 >= 0.0)
    {
      if (v31 >= 4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31) + 1;
    }
    else
    {
      if (v31 <= -4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31);
      if (v34 >= 1) {
        --v34;
      }
    }
    double v31 = (double)(v34 >> 1);
LABEL_131:
    *(void *)(a1 + 96) = (uint64_t)v31;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v75[0]);
LABEL_133:
  v75[0] = (char *)operator new(0x28uLL);
  long long v70 = xmmword_20B8FD0;
  *(_OWORD *)&v75[1] = xmmword_20B8FD0;
  strcpy(v75[0], "small_polygon_parking_segment_length");
  double v35 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v35 >= 0.0)
  {
    double v36 = v35;
    if (v35 >= 4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35) + 1;
  }
  else
  {
    double v36 = v35;
    if (v35 <= -4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v36 = (double)(v37 >> 1);
LABEL_141:
  if (v36 < 9.22337204e18)
  {
    if (v35 >= 0.0)
    {
      if (v35 >= 4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35) + 1;
    }
    else
    {
      if (v35 <= -4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35);
      if (v38 >= 1) {
        --v38;
      }
    }
    double v35 = (double)(v38 >> 1);
LABEL_152:
    *(void *)(a1 + 104) = (uint64_t)v35;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v75[0]);
LABEL_154:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9240;
  strcpy(v75[0], "small_polygon_drivable_segment_length");
  double v39 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v39 >= 0.0)
  {
    double v40 = v39;
    if (v39 >= 4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39) + 1;
  }
  else
  {
    double v40 = v39;
    if (v39 <= -4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39);
    if (v41 >= 1) {
      --v41;
    }
  }
  double v40 = (double)(v41 >> 1);
LABEL_162:
  if (v40 < 9.22337204e18)
  {
    if (v39 >= 0.0)
    {
      if (v39 >= 4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      if (v39 <= -4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39);
      if (v42 >= 1) {
        --v42;
      }
    }
    double v39 = (double)(v42 >> 1);
LABEL_173:
    *(void *)(a1 + 112) = (uint64_t)v39;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  *(void *)(a1 + 112) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v75[0]);
LABEL_175:
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20E12D0;
  *(_OWORD *)&v75[1] = xmmword_20E12D0;
  strcpy(v75[0], "extra_arrival_polygon_segment_distance");
  double v43 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v43 >= 0.0)
  {
    double v44 = v43;
    if (v43 >= 4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43) + 1;
  }
  else
  {
    double v44 = v43;
    if (v43 <= -4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_183:
  if (v44 < 9.22337204e18)
  {
    if (v43 >= 0.0)
    {
      if (v43 >= 4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      if (v43 <= -4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v43 = (double)(v46 >> 1);
LABEL_194:
    *(void *)(a1 + 120) = (uint64_t)v43;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v75[0]);
LABEL_196:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "default_arrival_detection_max_distance");
  double v47 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v47 >= 0.0)
  {
    double v48 = v47;
    if (v47 >= 4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47) + 1;
  }
  else
  {
    double v48 = v47;
    if (v47 <= -4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47);
    if (v49 >= 1) {
      --v49;
    }
  }
  double v48 = (double)(v49 >> 1);
LABEL_204:
  if (v48 < 9.22337204e18)
  {
    if (v47 >= 0.0)
    {
      if (v47 >= 4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47) + 1;
    }
    else
    {
      if (v47 <= -4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47);
      if (v50 >= 1) {
        --v50;
      }
    }
    double v47 = (double)(v50 >> 1);
LABEL_215:
    *(void *)(a1 + 128) = (uint64_t)v47;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    goto LABEL_216;
  }
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v75[0]);
LABEL_217:
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "fallback_bbox_radius");
  double v51 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v51 >= 0.0)
  {
    double v52 = v51;
    if (v51 >= 4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51) + 1;
  }
  else
  {
    double v52 = v51;
    if (v51 <= -4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51);
    if (v53 >= 1) {
      --v53;
    }
  }
  double v52 = (double)(v53 >> 1);
LABEL_225:
  if (v52 < 9.22337204e18)
  {
    if (v51 >= 0.0)
    {
      if (v51 >= 4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51) + 1;
    }
    else
    {
      if (v51 <= -4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51);
      if (v54 >= 1) {
        --v54;
      }
    }
    double v51 = (double)(v54 >> 1);
LABEL_236:
    *(void *)(a1 + 136) = (uint64_t)v51;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_238;
    }
    goto LABEL_237;
  }
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_238;
  }
LABEL_237:
  operator delete(v75[0]);
LABEL_238:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93E0;
  strcpy(v75[0], "should_add_parking_lot_based_arrival_region");
  BOOL v55 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 144) = v55;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9390;
  strcpy(v75[0], "should_add_fallback_timeout_bbox");
  BOOL v56 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 145) = v56;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "enable_initiate_approaching_region");
  BOOL v57 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 146) = v57;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9800;
  strcpy(v75[0], "parking_suggest_walking_region");
  uint64_t v58 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v58 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_513EAC((BOOL *)(a1 + 147), (void *)*v58);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  strcpy((char *)v75, "prepare_to_park_region");
  HIBYTE(v75[2]) = 22;
  std::string v59 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v59 + 2) != 2)
  {
    int v66 = __cxa_allocate_exception(8uLL);
    *int v66 = &off_23FDF58;
  }
  sub_513EAC((BOOL *)(a1 + 150), (void *)*v59);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "initiate_approaching_region_radius_m");
  *(void *)(a1 + 160) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20B9960;
  *(_OWORD *)&v75[1] = xmmword_20B9960;
  strcpy(v75[0], "parking_suggest_walking_region_radius_m");
  *(void *)(a1 + 168) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "circle_approximation_num_interpolations");
  int v60 = sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(_DWORD *)(a1 + 176) = v60;
  v75[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A90;
  strcpy(v75[0], "enable_walkable_region_destination_to_ap_distance_threshold");
  BOOL v61 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 180) = v61;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "destination_to_end_distance_threshold_m");
  *(void *)(a1 + 184) = sub_5CDE0(a3, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "walkable_region_poi_excluded_categories");
  sub_5C308(a2, (uint64_t)v75, a1 + 192);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = v68;
  strcpy(v75[0], "walkable_region_poi_address_allowed_country_codes");
  sub_5C568(a2, (uint64_t)v75, a1 + 216);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B99E0;
  strcpy(v75[0], "always_return_walkable_region_for_user_created_routes");
  BOOL v62 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 256) = v62;
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B8DF0;
  strcpy(v75[0], "always_return_walkable_region_for_apple_curated_routes");
  BOOL v63 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 257) = v63;
  return a1;
}

void sub_5155E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5156FC(uint64_t a1, void *a2, unint64_t *a3)
{
  sub_521670(a1, a2, &v18);
  if (v18)
  {
    uint64_t v6 = *(void *)(a1 + 768) + 16 * *(unsigned int *)(v19 + 8);
    int64_t v8 = *(void *)(v6 + 8);
    BOOL v7 = (unint64_t *)(v6 + 8);
    if ((uint64_t)*a3 >= v8) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    *BOOL v7 = *a3;
    BOOL v9 = (uint64_t *)(a1 + 824);
    unint64_t v10 = *(unsigned int *)(v19 + 8);
    uint64_t v11 = *(void *)(a1 + 848);
    if (v10 < (*(void *)(a1 + 856) - v11) >> 2 && *(_DWORD *)(v11 + 4 * v10) != -1) {
      goto LABEL_11;
    }
LABEL_14:
    sub_521F5C((uint64_t)v9, v10, a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v12 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
  sub_5217C8(a1, a2, (uint64_t)&v20);
  uint64_t v13 = v20;
  if (v22)
  {
    uint64_t v14 = *(void *)(v20 + 8) + 12 * v21;
    *(void *)uint64_t v14 = *a2;
    *(_DWORD *)(v14 + 8) = 0;
  }
  *(_DWORD *)(*(void *)(v13 + 8) + 12 * v21 + 8) = v12 >> 4;
  sub_2EA258(a1 + 768, a2, a3);
  BOOL v9 = (uint64_t *)(a1 + 824);
  unint64_t v15 = (v12 >> 4);
  uint64_t v16 = *(void *)(a1 + 848);
  if (v15 >= (*(void *)(a1 + 856) - v16) >> 2 || *(_DWORD *)(v16 + 4 * v15) == -1)
  {
    unint64_t v10 = v12 >> 4;
    goto LABEL_14;
  }
  unint64_t v10 = v12 >> 4;
LABEL_11:
  sub_5221BC(v9, v10, a3);
  return 1;
}

uint64_t sub_515898(uint64_t a1, unint64_t *a2)
{
  BOOL v4 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  BOOL v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0x2Fu)
  {
    uint64_t v6 = v5[23];
    if (v6)
    {
      if (*((unsigned char *)v4 + v6) == 47) {
        return 1;
      }
    }
  }
  BOOL v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  int64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x2Fu)
  {
    uint64_t v9 = v8[23];
    if (v9)
    {
      unsigned int v10 = *((unsigned __int8 *)v7 + v9);
      BOOL v11 = v10 > 0x2D;
      uint64_t v12 = (1 << v10) & 0x208040000000;
      if (!v11 && v12 != 0) {
        return 1;
      }
    }
  }
  unint64_t v15 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  unsigned int v17 = *v16;
  if (v17 < 0xB) {
    return 0;
  }
  if (v16[5])
  {
    if (v17 < 0x39 || (*(int *)((char *)v15 + v16[5]) & 3) != 0) {
      return 0;
    }
  }
  else if (v17 < 0x39)
  {
    return 0;
  }
  uint64_t v19 = v16[28];
  if (!v19) {
    return 0;
  }
  unsigned int v20 = *(int *)((char *)v15 + v19);
  if ((v20 & 3) != 0 || (v20 & 7) == 4) {
    return 1;
  }
  return (v20 >> 5) & 1;
}

BOOL sub_5159C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 40);
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v29);
  if (*(void *)(v3 + 24) == *(void *)(v3 + 32)) {
    goto LABEL_36;
  }
  if (__p == v31) {
    goto LABEL_36;
  }
  unint64_t v4 = sub_2E1AA4((uint64_t)v29);
  BOOL v7 = *(void **)(v3 + 24);
  int64_t v8 = *(void **)(v3 + 32);
  if (v7 == v8) {
    goto LABEL_36;
  }
  int v9 = 0;
  do
  {
    unsigned int v10 = (_DWORD *)v7[1];
    BOOL v11 = (_DWORD *)(*v7 + 12);
    if ((_DWORD *)*v7 != v10 && v11 != v10)
    {
      do
      {
        unsigned int v13 = *(v11 - 2);
        unsigned int v14 = v11[1];
        if (v13 >= HIDWORD(v4))
        {
          if (v14 < HIDWORD(v4))
          {
LABEL_17:
            LODWORD(v5) = *v11;
            LODWORD(v6) = *(v11 - 3);
            double v6 = (double)*(unint64_t *)&v6;
            double v5 = ((double)HIDWORD(v4) - (double)v13)
               / ((double)v14 - (double)v13)
               * ((double)*(unint64_t *)&v5 - v6)
               + v6;
            if (v5 < (double)v4) {
              v9 ^= 1u;
            }
          }
        }
        else if (v14 >= HIDWORD(v4))
        {
          goto LABEL_17;
        }
        v11 += 3;
      }
      while (v11 != v10);
    }
    v7 += 3;
  }
  while (v7 != v8);
  if (!v9)
  {
LABEL_36:
    BOOL v26 = 0;
    double v27 = __p;
    if (!__p) {
      return v26;
    }
LABEL_37:
    double v31 = v27;
    operator delete(v27);
    return v26;
  }
  unint64_t v15 = sub_2E40A4((uint64_t)v29);
  uint64_t v18 = *(void **)(v3 + 24);
  uint64_t v19 = *(void **)(v3 + 32);
  if (v18 != v19)
  {
    int v20 = 0;
    while (1)
    {
      uint64_t v21 = (_DWORD *)v18[1];
      char v22 = (_DWORD *)(*v18 + 12);
      if ((_DWORD *)*v18 != v21 && v22 != v21) {
        break;
      }
LABEL_22:
      v18 += 3;
      if (v18 == v19) {
        goto LABEL_40;
      }
    }
    while (1)
    {
      unsigned int v24 = *(v22 - 2);
      unsigned int v25 = v22[1];
      if (v24 >= HIDWORD(v15))
      {
        if (v25 < HIDWORD(v15))
        {
LABEL_34:
          LODWORD(v16) = *v22;
          LODWORD(v17) = *(v22 - 3);
          double v17 = (double)*(unint64_t *)&v17;
          double v16 = ((double)HIDWORD(v15) - (double)v24)
              / ((double)v25 - (double)v24)
              * ((double)*(unint64_t *)&v16 - v17)
              + v17;
          if (v16 < (double)v15) {
            v20 ^= 1u;
          }
        }
      }
      else if (v25 >= HIDWORD(v15))
      {
        goto LABEL_34;
      }
      v22 += 3;
      if (v22 == v21) {
        goto LABEL_22;
      }
    }
  }
  int v20 = 0;
LABEL_40:
  BOOL v26 = v20 != 0;
  double v27 = __p;
  if (__p) {
    goto LABEL_37;
  }
  return v26;
}

void sub_515BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_515BE4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 1696);
  if (v6 >= a3)
  {
    if (a4)
    {
      uint64_t v8 = a2[1];
      uint64_t v16 = *(void *)(v8 - 12);
      int v9 = *(_DWORD *)(v8 - 4);
    }
    else
    {
      uint64_t v16 = *(void *)*a2;
      int v9 = *(_DWORD *)(*a2 + 8);
    }
    int v17 = v9;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    unsigned int v10 = operator new(0xCuLL);
    a5[1] = v10 + 3;
    a5[2] = v10 + 3;
    *(void *)unsigned int v10 = v16;
    v10[2] = v17;
    *a5 = v10;
  }
  else if (v6)
  {
    double v7 = (double)v6 / (double)a3;
    if (!a4) {
      double v7 = 1.0 - v7;
    }
    sub_32F08(a2, a4 ^ 1, 0, a5, v7);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t v12 = (const void *)*a2;
    uint64_t v11 = a2[1];
    int64_t v13 = v11 - *a2;
    if (v11 != *a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unsigned int v14 = (char *)operator new(v13);
      *a5 = v14;
      a5[1] = v14;
      unint64_t v15 = &v14[4 * (v13 >> 2)];
      a5[2] = v15;
      memcpy(v14, v12, v13);
      a5[1] = v15;
    }
  }
}

void sub_515D50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_515D6C(void **a1, uint64_t *a2)
{
  double v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)double v5 = v6;
    double v7 = v5 + 12;
LABEL_3:
    a1[1] = v7;
    return;
  }
  uint64_t v8 = (char *)*a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x1555555555555555;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 > 0x1555555555555555) {
      sub_188D718();
    }
    int64_t v13 = (char *)operator new(12 * v12);
  }
  else
  {
    int64_t v13 = 0;
  }
  unsigned int v14 = &v13[12 * v9];
  *(void *)unsigned int v14 = *a2;
  *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
  double v7 = v14 + 12;
  if (v5 != v8)
  {
    do
    {
      uint64_t v15 = *(void *)(v5 - 12);
      v5 -= 12;
      int v16 = *((_DWORD *)v5 + 2);
      *(void *)(v14 - 12) = v15;
      v14 -= 12;
      *((_DWORD *)v14 + 2) = v16;
    }
    while (v5 != v8);
    double v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[12 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

char *sub_515EB4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v8 = sub_52262C((void **)a1, a2, a3);
  }
  else
  {
    int v6 = *a3;
    long long v7 = *(_OWORD *)a2;
    *(void *)(v5 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)unint64_t v5 = v7;
    sub_4D4C4((void *)(v5 + 24), (uint64_t *)(a2 + 24));
    *(_DWORD *)(v5 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v5 + 56) = v6;
    *(_DWORD *)(v5 + 60) = 0x7FFFFFFF;
    *(void *)(v5 + 64) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v8 = (char *)(v5 + 72);
    *(void *)(a1 + 8) = v5 + 72;
  }
  *(void *)(a1 + 8) = v8;
  return v8 - 72;
}

void sub_515F50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_515F58(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v8 = sub_52295C((void **)a1, a2, a3);
  }
  else
  {
    int v6 = *a3;
    long long v7 = *(_OWORD *)a2;
    *(void *)(v5 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)unint64_t v5 = v7;
    sub_4D4C4((void *)(v5 + 24), (uint64_t *)(a2 + 24));
    *(_DWORD *)(v5 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v5 + 56) = v6;
    *(_DWORD *)(v5 + 60) = 0x7FFFFFFF;
    *(void *)(v5 + 64) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v8 = (char *)(v5 + 72);
    *(void *)(a1 + 8) = v5 + 72;
  }
  *(void *)(a1 + 8) = v8;
  return v8 - 72;
}

void sub_515FF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_515FFC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[133] != a2[134] && sub_46C760(a2))
  {
    uint64_t v6 = *(void *)(a2[134] - 1528);
    if (v6 >= *(void *)(a1 + 1736)) {
      uint64_t v6 = *(void *)(a1 + 1736);
    }
    uint64_t v15 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = sub_46C8FC((uint64_t)a2);
    sub_2954EC(v7, *(void *)(v8 + 32), (uint64_t)&v11);
    sub_2E4B5C((uint64_t)&v11, v14);
    if (__p)
    {
      int64_t v13 = __p;
      operator delete(__p);
    }
    unsigned int v9 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v14, 0, &v11, 0.0, (double)v9 / 1000000000.0);
    unint64_t v10 = v11;
    if (v11 != __p)
    {
      sub_516158((char **)(a3 + 16), (uint64_t *)((char *)__p - 12), &v15);
      unint64_t v10 = v11;
    }
    if (v10)
    {
      long long __p = v10;
      operator delete(v10);
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
}

void sub_516110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *sub_516158(char **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a2;
    *((_DWORD *)v7 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v7 = v9;
    *((void *)v7 + 2) = v8;
    unint64_t v10 = v7 + 24;
    goto LABEL_14;
  }
  unint64_t v11 = *a1;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v11) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v16 = 24 * v15;
  int v17 = (char *)operator new(24 * v15);
  uint64_t v18 = &v17[24 * v12];
  uint64_t v19 = &v17[v16];
  uint64_t v20 = *a3;
  *(void *)uint64_t v18 = *a2;
  *((_DWORD *)v18 + 2) = *((_DWORD *)a2 + 2);
  *((void *)v18 + 2) = v20;
  unint64_t v10 = v18 + 24;
  if (v7 == v11)
  {
    *a1 = v18;
    a1[1] = v10;
    a1[2] = v19;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v21 = *(_OWORD *)(v7 - 24);
    char v22 = v18 - 24;
    *((void *)v18 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v18 - 24) = v21;
    v7 -= 24;
    v18 -= 24;
  }
  while (v7 != v11);
  *a1 = v22;
  a1[1] = v10;
  a1[2] = v19;
  if (v11) {
LABEL_13:
  }
    operator delete(v11);
LABEL_14:
  a1[1] = v10;
  return v10 - 24;
}

uint64_t *sub_5162C4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 10992);
  if (v4 == 3)
  {
    if (*(unsigned char *)(a1 + 1945)) {
      return (void *)(&def_332C + 1);
    }
  }
  else if (v4 == 4 && *(unsigned char *)(a1 + 1944))
  {
    return (void *)(&def_332C + 1);
  }
  unint64_t v6 = (int **)sub_46C8FC(a2);
  uint64_t v7 = (char *)*v6;
  uint64_t v8 = (unsigned __int16 *)((char *)*v6 - **v6);
  unsigned int v9 = *v8;
  if (v9 >= 0x2F && v8[23])
  {
    unsigned int v10 = v7[v8[23]];
    BOOL v11 = v10 > 0x1A;
    int v12 = (1 << v10) & 0x4810001;
    if (!v11 && v12 != 0)
    {
      if (*((unsigned char *)v6 + 38))
      {
        if (v9 < 0x39) {
          return 0;
        }
        uint64_t v14 = v8[28];
        if (!v14) {
          return 0;
        }
        int v15 = *(_DWORD *)&v7[v14];
        if ((v15 & 2) != 0) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v9 < 0x39) {
          return 0;
        }
        uint64_t v16 = v8[28];
        if (!v16) {
          return 0;
        }
        int v15 = *(_DWORD *)&v7[v16];
        if (v15) {
          goto LABEL_23;
        }
      }
      if ((v15 & 7) == 4 || (v15 & 0x23) == 0x20) {
        goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  if ((*(_DWORD *)(a2 + 10988) - 1) <= 1)
  {
    uint64_t v17 = *(void *)(a2 + 7432);
    if (*(void *)(a2 + 7424) != v17)
    {
      if (*(void *)(a1 + 1928))
      {
        BOOL result = sub_13A8C((void *)(a1 + 1904), v17 - 24);
        if (!result) {
          return result;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 1868))
  {
    sub_5F3038(&v46, 2);
    sub_10A1D50(&v46, (uint64_t *)(a2 + 11120), 1, (uint64_t)&__p);
    uint64_t v18 = (unsigned int *)__p;
    uint64_t v19 = v45;
    v47[0] = (unsigned int *)(a2 + 10880);
    v47[1] = (unsigned int *)a1;
    if (__p == v45)
    {
LABEL_37:
      BOOL v22 = 1;
      uint64_t v23 = v18;
      if (!v18) {
        goto LABEL_47;
      }
    }
    else
    {
      while (!sub_522BD0(v47, v18))
      {
        v18 += 26;
        if (v18 == v19)
        {
          uint64_t v20 = (unsigned int *)__p;
          uint64_t v18 = v45;
          if (__p == v45) {
            goto LABEL_37;
          }
          if (__p)
          {
            do
            {
              long long v21 = (void *)*((void *)v18 - 4);
              if (v21)
              {
                *((void *)v18 - 3) = v21;
                operator delete(v21);
              }
              v18 -= 26;
            }
            while (v18 != v20);
            uint64_t v45 = v20;
            operator delete(__p);
          }
          return 0;
        }
      }
      uint64_t v23 = (unsigned int *)__p;
      uint64_t v18 = v45;
      BOOL v22 = __p == v45;
      if (!__p) {
        goto LABEL_47;
      }
    }
    unsigned int v24 = v23;
    if (!v22)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v18 - 4);
        if (v25)
        {
          *((void *)v18 - 3) = v25;
          operator delete(v25);
        }
        v18 -= 26;
      }
      while (v18 != v23);
      unsigned int v24 = __p;
    }
    uint64_t v45 = v23;
    operator delete(v24);
  }
LABEL_47:
  BOOL v26 = (char *)(a2 + 11095);
  uint64_t v27 = *(unsigned __int8 *)(a2 + 11095);
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a2 + 11080);
  }
  if (!v27) {
    return (void *)(&def_332C + 1);
  }
  double v28 = (void *)sub_DAA2E4(a2 + 10880);
  long long __p = v28;
  uint64_t v29 = *(void *)(a1 + 1976);
  uint64_t v30 = *(void *)(a1 + 1984);
  if (v29 != v30)
  {
    while (*(void **)v29 != v28)
    {
      v29 += 16;
      if (v29 == v30) {
        goto LABEL_57;
      }
    }
  }
  if (v29 == v30)
  {
LABEL_57:
    uint64_t v32 = *(void *)(a1 + 1880);
    uint64_t v33 = *(void *)(a1 + 1888);
    if (v32 == v33)
    {
LABEL_83:
      char v43 = 1;
    }
    else
    {
      char v34 = *v26;
      if (*v26 >= 0) {
        size_t v35 = *v26;
      }
      else {
        size_t v35 = *(void *)(a2 + 11080);
      }
      if (v34 < 0)
      {
        double v36 = *(const void **)(a2 + 11072);
        while (1)
        {
          int v40 = *(char *)(v32 + 23);
          size_t v41 = v40 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v41 <= v35)
          {
            uint64_t v42 = v40 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v42, v36, v41)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        while (1)
        {
          int v37 = *(char *)(v32 + 23);
          size_t v38 = v37 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v38 <= v35)
          {
            double v39 = v37 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v39, (const void *)(a2 + 11072), v38)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_83;
          }
        }
      }
      char v43 = 0;
    }
    LOBYTE(v47[0]) = v43;
    sub_516B4C((char **)(a1 + 1976), &__p, (char *)v47);
    int v31 = LOBYTE(v47[0]);
  }
  else
  {
    int v31 = *(unsigned __int8 *)(v29 + 8);
  }
  return (uint64_t *)(v31 != 0);
}

void sub_5166A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_5166B8(uint64_t a1, void *a2)
{
  for (uint64_t i = a2[134]; i != a2[133]; i -= 2400)
  {
    uint64_t v4 = i - 2400;
    int v5 = *(unsigned __int8 *)(i - 2072);
    if (v5 == 5)
    {
      uint64_t v6 = *(void *)(v4 + 24);
      BOOL v7 = v6 != 0;
      uint64_t v8 = v6 - 1;
      if (!v7) {
        uint64_t v8 = 0;
      }
      if (a2[1248] != a2[1249]) {
        return *(void *)(sub_64EF20((uint64_t)a2, v8)[1] - 12);
      }
      uint64_t v11 = sub_46C8EC(a2, v8);
      sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)&v14);
      unint64_t v9 = sub_2E40A4((uint64_t)&v14);
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      return v9;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v14);
    sub_188FC78(&v14, (uint64_t)"Could not resolve transport mode transition coordinate.", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return -1;
}

void sub_5168C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51690C(void *a1, unint64_t a2)
{
  if (0x2FC962FC962FC963 * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x2FC962FC962FC963 * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v15;
    }
    else {
      unsigned int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 2400 * a2;
}

void sub_516A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_516B4C(char **a1, void *a2, char *a3)
{
  long long v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(void *)long long v7 = *a2;
    v7[8] = *a3;
    uint64_t v8 = v7 + 16;
    goto LABEL_13;
  }
  long long v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  std::string v16 = (char *)operator new(16 * v14);
  std::string v17 = &v16[16 * v10];
  std::string v18 = &v16[v15];
  *(void *)std::string v17 = *a2;
  v17[8] = *a3;
  uint64_t v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    long long v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v19;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

uint64_t sub_516C7C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  uint64_t v6 = sub_3750CC(a2);
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_20B8E30;
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  sub_4BBDC0(a1 + 152, a3);
  HIBYTE(v27[2]) = 18;
  strcpy((char *)v27, "ArrivalInfoBuilder");
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  long long v7 = sub_374CDC((uint64_t)a2, (uint64_t)v27, (uint64_t *)&v24);
  sub_3CB560(v7, (uint64_t)v28);
  uint64_t v21 = 0;
  BOOL v22 = operator new(0x28uLL);
  long long v23 = xmmword_20B9260;
  strcpy((char *)v22, "DrivingToWalkingTransitionChecker");
  long long __p = 0;
  std::string::size_type v20 = 0;
  uint64_t v8 = sub_374CDC((uint64_t)a2, (uint64_t)&v22, (uint64_t *)&__p);
  sub_519D68(a1 + 1688, v28, (uint64_t)v8);
  long long v9 = (void **)__p;
  if (__p)
  {
    uint64_t v10 = v20;
    unint64_t v11 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unint64_t v11 = __p;
    }
    std::string::size_type v20 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22);
  }
  uint64_t v12 = v29;
  if (v29)
  {
    do
    {
      std::string v17 = (void **)*v12;
      sub_55198((uint64_t)(v12 + 5));
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v17;
    }
    while (v17);
  }
  BOOL v13 = (void *)v28[0];
  v28[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  unint64_t v14 = (void **)v24;
  if (v24)
  {
    uint64_t v15 = v25;
    std::string v16 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      std::string v16 = v24;
    }
    unsigned int v25 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v27[2]) < 0) {
    operator delete(v27[0]);
  }
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(void *)(a1 + 2000) = -1;
  *(_DWORD *)(a1 + 2008) = 0x7FFFFFFF;
  return a1;
}

void sub_516EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_5450C(v29 - 88);
  sub_1A668(&a19);
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v28);
  sub_510AA4(v27);
  _Unwind_Resume(a1);
}

unint64_t sub_516F58(unint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 1688)) {
    return result;
  }
  unint64_t v2 = result;
  if (!*(unsigned char *)(result + 1594)) {
    return result;
  }
  BOOL result = sub_46C760((void *)a2);
  if (!result) {
    return result;
  }
  BOOL result = sub_64EFC4(a2);
  if (*(_DWORD *)result == -1 && *(_DWORD *)(result + 4) == -1) {
    return result;
  }
  sub_5171F8(v2, a2);
  sub_5176C8(v2, (void *)a2);
  uint64_t v5 = sub_46C8FC(a2);
  uint64_t v6 = sub_517864(v2, *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32));
  if (!sub_6510C8((void *)a2) || *(_DWORD *)sub_46CAAC(a2) == 0x7FFFFFFF)
  {
    int v7 = 0;
    goto LABEL_21;
  }
  double v8 = *(double *)(v2 + 1760);
  double v9 = v8 * (double)*(int *)sub_46CAAC(a2);
  if (v9 >= 0.0)
  {
    if (v9 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_19:
      double v9 = (double)(v10 >> 1);
    }
  }
  else if (v9 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v9 + v9);
    if (v10 >= 1) {
      --v10;
    }
    goto LABEL_19;
  }
  int v7 = (int)v9;
LABEL_21:
  sub_5181EC(v2, v7, v6, a2 + 10104);
  if (*(unsigned char *)(v2 + 1728))
  {
    sub_51BE60(v2, (void *)a2, a2 + 10104);
    sub_516158((char **)(a2 + 10120), (uint64_t *)(v2 + 16), (uint64_t *)(v2 + 1736));
    uint64_t v12 = *(uint64_t **)(v2 + 32);
    for (i = *(uint64_t **)(v2 + 40); v12 != i; uint64_t v12 = (uint64_t *)((char *)v12 + 12))
      sub_516158((char **)(a2 + 10120), v12, (uint64_t *)(v2 + 1736));
  }
  sub_518498(v2, v7, a2 + 10104, v11);
  sub_518624(v2, a2, (void *)(a2 + 10104));
  sub_518840(v2, a2, a2 + 10104);
  sub_518AFC(v2, a2, a2 + 10104);
  sub_5129C4(v2, a2);
  if (*(void *)(v2 + 1720) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(sub_64EFC4(a2) + 112) != 2) {
    unint64_t v14 = (uint64_t *)(v2 + 1712);
  }
  else {
    unint64_t v14 = (uint64_t *)(v2 + 1720);
  }
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(a2 + 1072);
  if (*(void *)(a2 + 1064) != v16)
  {
    uint64_t v17 = *(void *)(v16 - 1528);
    if (v17 < v15) {
      uint64_t v15 = v17;
    }
  }
  *(void *)(a2 + 10104) = v15;

  return sub_518D88(v2, (void *)a2, a2 + 10104);
}

BOOL sub_5171F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)sub_64EFC4(a2);
  if (sub_64F348(a2))
  {
    LOBYTE(v5) = 1;
    goto LABEL_40;
  }
  if (!*(void *)(a1 + 1288)) {
    goto LABEL_39;
  }
  if (!sub_62D424(a1 + 152))
  {
    unint64_t v6 = *(void *)(a1 + 1288) - 1;
    uint64_t v7 = *(void *)(a1 + 1280);
    uint64_t v8 = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
    goto LABEL_10;
  }
  LODWORD(v6) = *(_DWORD *)(a2 + 288);
  if (*(unsigned char *)(a1 + 1676))
  {
    if (v6 != -1)
    {
      unint64_t v6 = v6;
      if (*(void *)(a1 + 1288) > (unint64_t)v6)
      {
LABEL_8:
        uint64_t v7 = *(void *)(a1 + 1280);
        uint64_t v8 = (v6 >> 3) & 0x1FFFFFF8;
LABEL_10:
        uint64_t v5 = (*(void *)(v7 + v8) >> v6) & 1;
        goto LABEL_40;
      }
      goto LABEL_27;
    }
LABEL_12:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v28);
      double v9 = sub_69510();
      sub_68EE4((uint64_t)v9);
      std::operator+<char>();
      if ((v27 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v11 = v27;
      }
      else {
        uint64_t v11 = v26;
      }
      sub_188FC78(&v28, (uint64_t)p_p, v11);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_39;
  }
  if ((v6 + 1) < 2) {
    goto LABEL_12;
  }
  unint64_t v6 = (v6 - 1);
  if (*(void *)(a1 + 1288) > v6) {
    goto LABEL_8;
  }
LABEL_27:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v28);
    uint64_t v12 = sub_69510();
    sub_68EE4((uint64_t)v12);
    std::operator+<char>();
    if ((v27 & 0x80u) == 0) {
      BOOL v13 = &__p;
    }
    else {
      BOOL v13 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v14 = v27;
    }
    else {
      uint64_t v14 = v26;
    }
    sub_188FC78(&v28, (uint64_t)v13, v14);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    sub_111ECAC((uint64_t)&v28);
  }
LABEL_39:
  LOBYTE(v5) = 0;
LABEL_40:
  sub_51986C((uint64_t)&v28, v4, v5);
  uint64_t v15 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 24) = v29;
  if (v15)
  {
    *(void *)(a1 + 40) = v15;
    operator delete(v15);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v30;
  *(void *)(a1 + 48) = v31;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  if (v16)
  {
    *(void *)(a1 + 64) = v16;
    operator delete(v16);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v17 = (void **)(a1 + 112);
  std::string v18 = *(char **)(a1 + 112);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v32;
  *(void *)(a1 + 72) = v33;
  v32[1] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  *(unsigned char *)(a1 + 80) = v34;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v35;
  *(void *)(a1 + 104) = v36;
  if (v18)
  {
    long long v19 = *(char **)(a1 + 120);
    std::string::size_type v20 = v18;
    if (v19 != v18)
    {
      uint64_t v21 = *(char **)(a1 + 120);
      do
      {
        long long v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        BOOL v22 = v23;
        if (v23)
        {
          *((void *)v19 - 2) = v22;
          operator delete(v22);
        }
        long long v19 = v21;
      }
      while (v21 != v18);
      std::string::size_type v20 = *v17;
    }
    *(void *)(a1 + 120) = v18;
    operator delete(v20);
    char *v17 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = v37;
  *(void *)(a1 + 128) = v38;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  *(_DWORD *)(a1 + 136) = v39;
  *(unsigned char *)(a1 + 144) = v40;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  BOOL result = sub_64F348(a2);
  *(unsigned char *)(a1 + 80) = result;
  return result;
}

void sub_517648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_5176C8(uint64_t a1, void *a2)
{
  if (a2[1248] == a2[1249])
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = sub_46C8FC((uint64_t)a2);
    sub_2954EC(v11, *(void *)(v12 + 32), (uint64_t)&v16);
    sub_2E4B5C((uint64_t)&v16, &v19);
    if (__p)
    {
      std::string v18 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v4 = sub_46C760(a2);
    uint64_t v5 = sub_650EEC((uint64_t)a2, v4 - 1);
    std::string::size_type v20 = 0;
    uint64_t v21 = 0;
    long long v19 = 0;
    uint64_t v7 = (const void *)*v5;
    uint64_t v6 = v5[1];
    int64_t v8 = v6 - *v5;
    if (v6 != *v5)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      double v9 = (char *)operator new(v8);
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      long long v19 = v9;
      uint64_t v21 = v10;
      memcpy(v9, v7, v8);
      std::string::size_type v20 = v10;
    }
  }
  unsigned int v13 = sub_46CAC4((uint64_t)a2);
  sub_31854((uint64_t *)&v19, 0, &v16, 0.0, (double)v13 / 1000000000.0);
  uint64_t v14 = v16;
  int v15 = *((_DWORD *)__p - 1);
  *(void *)(a1 + 2000) = *(void *)((char *)__p - 12);
  *(_DWORD *)(a1 + 2008) = v15;
  if (v14)
  {
    long long __p = v14;
    operator delete(v14);
  }
  if (v19)
  {
    std::string::size_type v20 = v19;
    operator delete(v19);
  }
}

void sub_517830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_517864(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a2;
  if (!*(unsigned char *)(a1 + 1832)) {
    return *(void *)(a1 + 1960);
  }
  unint64_t v4 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 0x2Fu || (uint64_t v6 = v5[23]) == 0 || *((unsigned char *)v4 + v6) != 47)
  {
    uint64_t v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
    int64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 < 0x2Fu) {
      return *(void *)(a1 + 1960);
    }
    uint64_t v9 = v8[23];
    if (!v9) {
      return *(void *)(a1 + 1960);
    }
    unsigned int v10 = *((unsigned __int8 *)v7 + v9);
    BOOL v11 = v10 > 0x2D;
    uint64_t v12 = (1 << v10) & 0x208040000000;
    if (v11 || v12 == 0) {
      return *(void *)(a1 + 1960);
    }
  }
  sub_29549C(*(void *)(a1 + 8), a2, (uint64_t)v62);
  unint64_t v76 = sub_2E1AA4((uint64_t)v62);
  int v77 = v18;
  if (__p)
  {
    int v64 = __p;
    operator delete(__p);
  }
  uint64_t v19 = *(void *)(a1 + 1952);
  uint64_t v20 = *(void *)(a1 + 1960);
  if (v19 == v20) {
    goto LABEL_18;
  }
  while (!sub_490A0(v19, &v76, v14, v15, v16, v17))
  {
    v19 += 48;
    if (v19 == v20)
    {
      uint64_t v19 = v20;
      break;
    }
  }
  if (v19 == *(void *)(a1 + 1960))
  {
LABEL_18:
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_522E7C((uint64_t)v62);
    v53[0] = sub_518FF0(a1, &v78, (unsigned int *)&v76);
    sub_512D4C((uint64_t)v62, &v78, v53);
    std::string v59 = 0;
    int v60 = 0;
    uint64_t v61 = 0;
    if (v73)
    {
      do
      {
        *(_OWORD *)uint64_t v53 = *((_OWORD *)v65 + *(unsigned int *)v69);
        sub_51325C((uint64_t)v62);
        BOOL v56 = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 0);
        int v21 = sub_51938C(a1, (unsigned int **)&v56, (unsigned int *)&v76, (uint64_t)v62);
        v51[0] = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 1);
        int v22 = sub_51938C(a1, (unsigned int **)v51, (unsigned int *)&v76, (uint64_t)v62);
        sub_51951C(a1, v53, v21 ^ 1, v22 ^ 1, (uint64_t)&v59);
        long long v23 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        unsigned int v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
          uint64_t v26 = *(unsigned int *)((char *)v23 + v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unsigned __int8 v27 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0x2Fu)
        {
          uint64_t v29 = v28[23];
          if (v29)
          {
            unsigned int v30 = *((unsigned __int8 *)v27 + v29);
            BOOL v11 = v30 > 0x2D;
            uint64_t v31 = (1 << v30) & 0x208040000000;
            if (!v11 && v31 != 0) {
              v75 += v26;
            }
          }
        }
        v74 += v26;
      }
      while (v73);
      char v34 = v60;
      if (v59 != v60)
      {
        size_t v35 = (unsigned int *)((char *)v59 + 12);
        if ((char *)v59 + 12 != (char *)v60)
        {
          unsigned int v36 = *(_DWORD *)v59;
          while (1)
          {
            unsigned int v37 = v36;
            unsigned int v36 = *v35;
            if (__PAIR64__(*(v35 - 2), v37) == *(void *)v35 && *(v35 - 1) == v35[2]) {
              break;
            }
            v35 += 3;
            if (v35 == v60) {
              goto LABEL_49;
            }
          }
          uint64_t v38 = v35 - 3;
          if (v35 - 3 != v60)
          {
            while (1)
            {
              v35 += 3;
              if (v35 == v34) {
                break;
              }
              if (*v38 != *v35 || v38[1] != v35[1] || v38[2] != v35[2])
              {
                unsigned int v39 = v35[2];
                *(void *)(v38 + 3) = *(void *)v35;
                v38 += 3;
                v38[2] = v39;
              }
            }
            char v34 = v38 + 3;
            if (v38 + 3 != v60) {
              goto LABEL_50;
            }
            goto LABEL_51;
          }
        }
      }
    }
    else
    {
      char v34 = 0;
    }
LABEL_49:
    if (v34 != v60) {
LABEL_50:
    }
      int v60 = v34;
LABEL_51:
    sub_4909C((uint64_t)&v56, (uint64_t *)&v59, *(double *)(a1 + 1768));
    char v40 = (char *)v56;
    if (v57 - (unsigned char *)v56 != 24 || *(void *)v56 == *((void *)v56 + 1))
    {
      uint64_t v19 = *(void *)(a1 + 1960);
      if (!v56)
      {
LABEL_84:
        if (v59)
        {
          int v60 = (unsigned int *)v59;
          operator delete(v59);
        }
        if (v71)
        {
          long long v72 = v71;
          operator delete(v71);
        }
        if (v69)
        {
          long long v70 = v69;
          operator delete(v69);
        }
        if (v67)
        {
          long long v68 = v67;
          operator delete(v67);
        }
        if (v65)
        {
          int v66 = v65;
          operator delete(v65);
        }
        sub_328138((uint64_t)v62);
        return v19;
      }
    }
    else
    {
      size_t v41 = *(void **)(a1 + 1960);
      if ((unint64_t)v41 >= *(void *)(a1 + 1968))
      {
        double v44 = sub_52306C((void **)(a1 + 1952), (uint64_t *)&v56, &v75, &v74);
      }
      else
      {
        uint64_t v43 = v74;
        uint64_t v42 = v75;
        sub_4D4C4(*(void **)(a1 + 1960), (uint64_t *)&v56);
        v41[3] = v58;
        v41[4] = v42;
        v41[5] = v43;
        double v44 = (char *)(v41 + 6);
        *(void *)(a1 + 1960) = v41 + 6;
      }
      *(void *)(a1 + 1960) = v44;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_49168((uint64_t *)v53, &v56);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_188FC78(v53, (uint64_t)"polygon vertices number: ", 25);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        uint64_t v45 = sub_188FC78(v53, (uint64_t)" parking segment length: ", 25);
        std::ostream::operator<<();
        sub_188FC78(v45, (uint64_t)" drivable segment length: ", 26);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v19 = *(void *)(a1 + 1960) - 48;
      char v40 = (char *)v56;
      if (!v56) {
        goto LABEL_84;
      }
    }
    unsigned __int8 v46 = v57;
    double v47 = v40;
    if (v57 != v40)
    {
      double v48 = v57;
      do
      {
        uint64_t v50 = (void *)*((void *)v48 - 3);
        v48 -= 24;
        uint64_t v49 = v50;
        if (v50)
        {
          *((void *)v46 - 2) = v49;
          operator delete(v49);
        }
        unsigned __int8 v46 = v48;
      }
      while (v48 != v40);
      double v47 = v56;
    }
    BOOL v57 = v40;
    operator delete(v47);
    goto LABEL_84;
  }
  return v19;
}

void sub_51811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_36094(&a50);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  sub_5139D0(&a57);
  _Unwind_Resume(a1);
}

void sub_5181EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1689))
  {
    int v7 = *(_DWORD *)(a1 + 136);
    if (v7 == 4 || v7 == 1)
    {
      uint64_t v9 = (long long *)(a1 + 88);
      *(_DWORD *)(a4 + 64) = 1;
      v24[0] = 4;
      unint64_t v10 = *(void *)(a4 + 48);
      if (v10 >= *(void *)(a4 + 56))
      {
        uint64_t v12 = sub_52262C((void **)(a4 + 40), (uint64_t)v9, v24);
      }
      else
      {
        long long v11 = *v9;
        *(void *)(v10 + 16) = *(void *)(a1 + 104);
        *(_OWORD *)unint64_t v10 = v11;
        sub_4D4C4((void *)(v10 + 24), (uint64_t *)(a1 + 112));
        *(_DWORD *)(v10 + 48) = *(_DWORD *)(a1 + 136);
        *(void *)(v10 + 56) = 0x7FFFFFFF00000004;
        *(void *)(v10 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v12 = (char *)(v10 + 72);
        *(void *)(a4 + 48) = v10 + 72;
      }
      *(void *)(a4 + 48) = v12;
      *((_DWORD *)v12 - 3) = *(_DWORD *)(a1 + 1748) + a2;
    }
    else
    {
      uint64_t v13 = 1690;
      if (!*(unsigned char *)(a1 + 80)) {
        uint64_t v13 = 1691;
      }
      if (*(unsigned char *)(a1 + v13)) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = *(void *)(a1 + 32) == *(void *)(a1 + 40);
      }
      if (!v14 && *(void *)(a1 + 1960) != a3)
      {
        sub_3D25C0((uint64_t)v24, a3, 8);
        if (*(void *)(a3 + 32) >= *(void *)(a1 + 1776) && *(void *)(a3 + 40) >= *(void *)(a1 + 1784))
        {
          if (*(unsigned char *)(a1 + 144))
          {
            *(_DWORD *)(a4 + 64) = 3;
            int v23 = 2;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          else
          {
            *(_DWORD *)(a4 + 64) = 2;
            int v23 = 4;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
            if (*(void *)(a3 + 32) >= *(void *)(a1 + 1792) && *(void *)(a3 + 40) >= *(void *)(a1 + 1800)) {
              int v22 = (_DWORD *)(a1 + 1748);
            }
            else {
              int v22 = (_DWORD *)(a1 + 1744);
            }
            *(_DWORD *)(*(void *)(a4 + 48) - 12) = *v22 + a2;
            int v23 = 5;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          sub_513E34((uint64_t)v24);
        }
        else
        {
          double v16 = (char *)__p;
          if (__p)
          {
            double v17 = v26;
            int v18 = __p;
            if (v26 != __p)
            {
              uint64_t v19 = v26;
              do
              {
                int v21 = (void *)*((void *)v19 - 3);
                v19 -= 24;
                uint64_t v20 = v21;
                if (v21)
                {
                  *((void *)v17 - 2) = v20;
                  operator delete(v20);
                }
                double v17 = v19;
              }
              while (v19 != v16);
              int v18 = __p;
            }
            uint64_t v26 = v16;
            operator delete(v18);
          }
        }
      }
    }
  }
}

void sub_518454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_518468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51847C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_518490(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_518498(uint64_t a1, int a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 1689) && *(unsigned char *)(a1 + 1833) && !*(_DWORD *)(a3 + 64))
  {
    *(_DWORD *)(a3 + 64) = 4;
    sub_365DC((int *)(a1 + 16), (uint64_t *)(a1 + 1824), (uint64_t)&v22, a4);
    sub_3D2710((uint64_t)&v17, &v22, 10);
    int v16 = 4;
    unint64_t v7 = *(void *)(a3 + 48);
    if (v7 >= *(void *)(a3 + 56))
    {
      uint64_t v9 = sub_52295C((void **)(a3 + 40), (uint64_t)&v17, &v16);
    }
    else
    {
      long long v8 = v17;
      *(void *)(v7 + 16) = v18;
      *(_OWORD *)unint64_t v7 = v8;
      sub_4D4C4((void *)(v7 + 24), (uint64_t *)&__p);
      *(_DWORD *)(v7 + 48) = v21;
      *(void *)(v7 + 56) = 0x7FFFFFFF00000004;
      *(void *)(v7 + 64) = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v9 = (char *)(v7 + 72);
      *(void *)(a3 + 48) = v7 + 72;
    }
    *(void *)(a3 + 48) = v9;
    *((_DWORD *)v9 - 3) = *(_DWORD *)(a1 + 1752) + a2;
    unint64_t v10 = (char *)__p;
    if (__p)
    {
      long long v11 = v20;
      uint64_t v12 = __p;
      if (v20 != __p)
      {
        uint64_t v13 = v20;
        do
        {
          double v15 = (void *)*((void *)v13 - 3);
          v13 -= 24;
          BOOL v14 = v15;
          if (v15)
          {
            *((void *)v11 - 2) = v14;
            operator delete(v14);
          }
          long long v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v20 = v10;
      operator delete(v12);
    }
  }
}

void sub_5185F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51860C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 48) = v3;
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_518624(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1672) && *(unsigned char *)(a1 + 1834))
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = a3[6];
    long long v8 = (void **)(a3 + 5);
    if (v6 == v7)
    {
LABEL_6:
      if (*(void *)(a2 + 1064) != *(void *)(a2 + 1072) && !sub_651514(a2))
      {
        sub_3AEF0((unsigned int *)(a1 + 2000), *(void *)(a1 + 1848), *(_DWORD *)(a1 + 1864), (uint64_t)&v31);
        sub_3D2668((uint64_t)&v26, (uint64_t)&v31, 8);
        int v25 = 7;
        unint64_t v9 = a3[6];
        if (v9 >= a3[7])
        {
          long long v11 = sub_52262C(v8, (uint64_t)&v26, &v25);
        }
        else
        {
          long long v10 = v26;
          *(void *)(v9 + 16) = v27;
          *(_OWORD *)unint64_t v9 = v10;
          sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
          *(_DWORD *)(v9 + 48) = v30;
          *(void *)(v9 + 56) = 0x7FFFFFFF00000007;
          *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
          long long v11 = (char *)(v9 + 72);
          a3[6] = v9 + 72;
        }
        a3[6] = v11;
        uint64_t v12 = *(void *)(*(void *)(a2 + 1072) - 1528);
        if (v12 >= *(void *)(a1 + 1848)) {
          uint64_t v12 = *(void *)(a1 + 1848);
        }
        *((void *)v11 - 1) = v12;
        uint64_t v13 = (char *)__p;
        if (__p)
        {
          BOOL v14 = v29;
          double v15 = __p;
          if (v29 != __p)
          {
            int v16 = v29;
            do
            {
              uint64_t v18 = (void *)*((void *)v16 - 3);
              v16 -= 24;
              long long v17 = v18;
              if (v18)
              {
                *((void *)v14 - 2) = v17;
                operator delete(v17);
              }
              BOOL v14 = v16;
            }
            while (v16 != v13);
            double v15 = __p;
          }
          uint64_t v29 = v13;
          operator delete(v15);
        }
        uint64_t v19 = (char *)v31;
        if (v31)
        {
          uint64_t v20 = v32;
          int v21 = v31;
          if (v32 != v31)
          {
            __n128 v22 = v32;
            do
            {
              unsigned int v24 = (void *)*((void *)v22 - 3);
              v22 -= 24;
              int v23 = v24;
              if (v24)
              {
                *((void *)v20 - 2) = v23;
                operator delete(v23);
              }
              uint64_t v20 = v22;
            }
            while (v22 != v19);
            int v21 = v31;
          }
          uint64_t v32 = v19;
          operator delete(v21);
        }
      }
    }
    else
    {
      while (*(_DWORD *)(v6 + 56) != 5)
      {
        v6 += 72;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_518804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_51882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_518840(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 1672))
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(result + 1838)) {
        return result;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(result + 1839)) {
        return result;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(result + 1840))
    {
      return result;
    }
    BOOL result = sub_64F240(a2);
    if ((result & 1) == 0 && *(void *)(a2 + 1064) != *(void *)(a2 + 1072))
    {
      BOOL result = sub_651544(a2, 2);
      if (result)
      {
        uint64_t v7 = *(void *)(a3 + 40);
        uint64_t v8 = *(void *)(a3 + 48);
        if (v7 == v8)
        {
LABEL_16:
          BOOL result = (unint64_t)sub_51B818(v5, a2);
          if (result)
          {
            uint64_t v9 = *(void *)(a2 + 1072);
            while (v9 != *(void *)(a2 + 1064))
            {
              uint64_t v10 = v9 - 2400;
              int v11 = *(_DWORD *)(v9 - 2240);
              BOOL v12 = v11 == 39 || v11 == 16;
              uint64_t v9 = v10;
              if (v12)
              {
                unint64_t v13 = *(void *)(v10 + 24);
                if (v13 > *(void *)(v10 + 40))
                {
                  while (1)
                  {
                    BOOL result = sub_46C8EC((void *)a2, --v13);
                    BOOL v14 = (unsigned __int16 *)(*(void *)result - **(int **)result);
                    if (*v14 >= 0x2Fu)
                    {
                      uint64_t v15 = v14[23];
                      if (v15)
                      {
                        unsigned int v16 = *(unsigned __int8 *)(*(void *)result + v15);
                        BOOL v17 = v16 > 0x2F;
                        uint64_t v18 = (1 << v16) & 0xA08040000000;
                        if (!v17 && v18 != 0) {
                          break;
                        }
                      }
                    }
                    if (v13 <= *(void *)(v10 + 40)) {
                      goto LABEL_35;
                    }
                  }
                  BOOL result = sub_517864(v5, *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int16 *)(result + 36) << 32));
                  if (*(void *)(v5 + 1960) != result)
                  {
                    sub_3D25C0((uint64_t)v26, result, 8);
                    LODWORD(v23[0]) = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v26, (int *)v23);
                    BOOL result = sub_513E34((uint64_t)v26);
                  }
                }
LABEL_35:
                uint64_t v20 = *(void *)(a3 + 48);
                if (*(void *)(a3 + 40) == v20 || *(_DWORD *)(v20 - 16) != 8)
                {
                  BOOL result = sub_51BC0C(v5, (void *)a2);
                  unint64_t v24 = result;
                  int v25 = v21;
                  if (result != -1 || result <= 0xFFFFFFFEFFFFFFFFLL)
                  {
                    sub_3AEF0((unsigned int *)&v24, *(void *)(v5 + 1848), *(_DWORD *)(v5 + 1864), (uint64_t)v23);
                    sub_3D2668((uint64_t)v26, (uint64_t)v23, 8);
                    int v22 = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v26, &v22);
                    sub_513E34((uint64_t)v26);
                    return (unint64_t)sub_36094(v23);
                  }
                }
                return result;
              }
            }
          }
        }
        else
        {
          while (*(_DWORD *)(v7 + 56) != 5)
          {
            v7 += 72;
            if (v7 == v8) {
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_518AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_518ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_513E34((uint64_t)va1);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_518AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_518AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1672))
  {
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(a1 + 1835)) {
        return;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(a1 + 1836)) {
        return;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(a1 + 1837))
    {
      return;
    }
    if ((sub_64F240(a2) & 1) == 0
      && *(void *)(a2 + 1064) != *(void *)(a2 + 1072)
      && (!sub_651514(a2) || sub_651544(a2, 2))
      && sub_51B818(a1, a2))
    {
      unint64_t v32 = *(void *)(a1 + 2000);
      int v33 = *(_DWORD *)(a1 + 2008);
      if (sub_651514(a2))
      {
        unint64_t v7 = sub_51BC0C(a1, (void *)a2);
        if ((v7 & HIDWORD(v7)) != 0xFFFFFFFF)
        {
          unint64_t v32 = v7;
          int v33 = v8;
        }
      }
      sub_3AEF0((unsigned int *)&v32, *(void *)(a1 + 1856), *(_DWORD *)(a1 + 1864), (uint64_t)&v30);
      sub_3D2668((uint64_t)&v25, (uint64_t)&v30, 8);
      int v24 = 6;
      unint64_t v9 = *(void *)(a3 + 48);
      if (v9 >= *(void *)(a3 + 56))
      {
        int v11 = sub_52262C((void **)(a3 + 40), (uint64_t)&v25, &v24);
      }
      else
      {
        long long v10 = v25;
        *(void *)(v9 + 16) = v26;
        *(_OWORD *)unint64_t v9 = v10;
        sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
        *(_DWORD *)(v9 + 48) = v29;
        *(void *)(v9 + 56) = 0x7FFFFFFF00000006;
        *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        int v11 = (char *)(v9 + 72);
        *(void *)(a3 + 48) = v9 + 72;
      }
      *(void *)(a3 + 48) = v11;
      BOOL v12 = (char *)__p;
      if (__p)
      {
        unint64_t v13 = v28;
        BOOL v14 = __p;
        if (v28 != __p)
        {
          uint64_t v15 = v28;
          do
          {
            BOOL v17 = (void *)*((void *)v15 - 3);
            v15 -= 24;
            unsigned int v16 = v17;
            if (v17)
            {
              *((void *)v13 - 2) = v16;
              operator delete(v16);
            }
            unint64_t v13 = v15;
          }
          while (v15 != v12);
          BOOL v14 = __p;
        }
        uint64_t v28 = v12;
        operator delete(v14);
      }
      uint64_t v18 = (char *)v30;
      if (v30)
      {
        uint64_t v19 = v31;
        uint64_t v20 = v30;
        if (v31 != v30)
        {
          int v21 = v31;
          do
          {
            int v23 = (void *)*((void *)v21 - 3);
            v21 -= 24;
            int v22 = v23;
            if (v23)
            {
              *((void *)v19 - 2) = v22;
              operator delete(v22);
            }
            uint64_t v19 = v21;
          }
          while (v21 != v18);
          uint64_t v20 = v30;
        }
        uint64_t v31 = v18;
        operator delete(v20);
      }
    }
  }
}

void sub_518D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_518D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_518D88(unint64_t result, void *a2, uint64_t a3)
{
  if (a2[63] >= *(void *)(result + 1816)) {
    uint64_t v4 = *(void *)(result + 1816);
  }
  else {
    uint64_t v4 = a2[63];
  }
  if ((*(_DWORD *)(a3 + 64) & 0xFFFFFFFE) != 2) {
    goto LABEL_30;
  }
  uint64_t v6 = result;
  sub_46C7A0(a2, &v25);
  uint64_t v7 = 0;
  while (1)
  {
    BOOL result = sub_46C7C4((uint64_t)a2, v22);
    uint64_t v9 = v26;
    uint64_t v11 = v23;
    unint64_t v10 = v24;
    if (!v26) {
      break;
    }
    unint64_t v12 = v27;
    BOOL result = sub_46C760(v26);
    unint64_t v13 = result;
    if (v11)
    {
      BOOL result = sub_46C760(v11);
      if (v12 >= v13 || v10 >= result)
      {
        if (v12 < v13 == v10 < result) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v15 = sub_46C8EC(v9, v12);
        BOOL result = sub_46C8EC(v11, v10);
        if (v15 == result) {
          goto LABEL_28;
        }
      }
    }
    else if (v12 >= result)
    {
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v16 = sub_46C8EC(v26, v27 - 1);
    v22[0] = *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32);
    if ((sub_515898(v6, (unint64_t *)v22) & 1) == 0)
    {
      BOOL result = sub_51B474(v6, v22, a3);
      if (!result) {
        goto LABEL_28;
      }
    }
    BOOL v17 = (int *)sub_2D5D58(*(void *)(v6 + 8), v22[0]);
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 9u)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = v18[4];
      if (v8) {
        uint64_t v8 = *(unsigned int *)((char *)v17 + v8);
      }
    }
    v7 += v8;
    --v27;
  }
  if (v23)
  {
    BOOL result = sub_46C760(v23);
    if (v10 < result) {
      goto LABEL_23;
    }
  }
LABEL_28:
  if (v4 <= *(void *)(v6 + 1808) + v7) {
    uint64_t v4 = *(void *)(v6 + 1808) + v7;
  }
LABEL_30:
  uint64_t v19 = *(void *)a3;
  if (*(void *)a3 <= v4) {
    uint64_t v19 = v4;
  }
  *(void *)(a3 + 8) = v19;
  uint64_t v20 = *(void *)(a3 + 40);
  for (uint64_t i = *(void *)(a3 + 48); v20 != i; v20 += 72)
  {
    if (*(_DWORD *)(v20 + 56) == 5 && *(void *)(v20 + 64) == 0x7FFFFFFFFFFFFFFFLL) {
      *(void *)(v20 + 64) = *(void *)(a3 + 8);
    }
  }
  return result;
}

uint64_t *sub_518F98(unint64_t a1, uint64_t a2)
{
  BOOL result = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    do
    {
      BOOL result = (uint64_t *)sub_516F58(a1, v4);
      v4 += 12328;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_518FF0(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v44);
  unint64_t v4 = sub_2E1AA4((uint64_t)v44);
  unint64_t v5 = sub_2E40A4((uint64_t)v44);
  double v6 = (double)v4;
  double v7 = (double)HIDWORD(v4);
  double v8 = (double)HIDWORD(v5);
  double v9 = (double)v5 - (double)v4;
  double v10 = (double)HIDWORD(v5) - (double)HIDWORD(v4);
  double v11 = v9 * v9 + v10 * v10;
  double v12 = fabs(v11);
  unsigned int v14 = *a3;
  unsigned int v13 = a3[1];
  if (v11 == 0.0 || v12 < 2.22044605e-16)
  {
    double v16 = (double)v13;
    double v17 = (double)v14;
    goto LABEL_18;
  }
  double v17 = (double)v14;
  double v16 = (double)v13;
  double v18 = (v9 * ((double)v14 - v6) + v10 * ((double)v13 - v7)) / v11;
  if (v18 <= 0.0)
  {
    double v41 = (double)v4;
    double v8 = (double)HIDWORD(v4);
    goto LABEL_20;
  }
  if (v18 >= 1.0)
  {
LABEL_18:
    double v41 = (double)v5;
    goto LABEL_20;
  }
  double v19 = v10 * v18 + v7;
  double v20 = v9 * v18 + v6;
  if (v20 < 0.0) {
    double v21 = -0.5;
  }
  else {
    double v21 = 0.5;
  }
  unsigned int v22 = (v20 + v21);
  if (v19 < 0.0) {
    double v23 = -0.5;
  }
  else {
    double v23 = 0.5;
  }
  unsigned int v24 = (v19 + v23);
  if (v24 >= 0xFFFFFFFE) {
    unsigned int v24 = -2;
  }
  double v8 = (double)v24;
  double v41 = (double)v22;
LABEL_20:
  long double v25 = exp(3.14159265 - v16 * 6.28318531 / 4294967300.0);
  double v42 = (v17 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  long double v43 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 * 0.0174532925;
  long double v26 = exp(3.14159265 - v8 * 6.28318531 / 4294967300.0);
  long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
  long double v28 = sin((v43 - v27) * 0.5);
  long double v29 = v28 * v28;
  double v30 = cos(v43);
  long double v31 = v30 * cos(v27);
  long double v32 = sin((v42 - (v41 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
  long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
  double v34 = (v33 + v33) * 6372797.56 * 100.0;
  if (v34 >= 0.0)
  {
    double v35 = v34;
    if (v34 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    double v35 = v34;
    if (v34 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34);
    if (v36 >= 1) {
      --v36;
    }
  }
  double v35 = (double)(v36 >> 1);
LABEL_28:
  if (v35 >= 9.22337204e18)
  {
    uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
    unsigned int v39 = __p;
    if (!__p) {
      return v38;
    }
    goto LABEL_40;
  }
  if (v34 >= 0.0)
  {
    if (v34 >= 4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    if (v34 <= -4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v34 = (double)(v37 >> 1);
LABEL_39:
  uint64_t v38 = (uint64_t)v34;
  unsigned int v39 = __p;
  if (__p)
  {
LABEL_40:
    unsigned __int8 v46 = v39;
    operator delete(v39);
  }
  return v38;
}

void sub_51936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51938C(uint64_t a1, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  sub_2E4F74(*(void *)(a1 + 8), *a2, (unint64_t *)&__p);
  double v7 = (unint64_t *)__p;
  double v8 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    if (!__p) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    char v9 = sub_515898(a1, v7++);
    if (v7 == v8) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
  }
  while ((v10 & 1) != 0);
  double v7 = (unint64_t *)__p;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = 0;
    if (__p) {
      goto LABEL_28;
    }
    return v19;
  }
  double v11 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    double v7 = v23;
    if (!v23) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    double v12 = (int *)sub_2D5D58(*(void *)(a1 + 8), *v7);
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (v14 < 0xB)
    {
LABEL_21:
      uint64_t v21 = sub_518FF0(a1, (uint64_t *)v7, a3);
      sub_5156FC(a4, v7, (unint64_t *)&v21);
      goto LABEL_22;
    }
    if (v13[5])
    {
      if (v14 < 0x39 || (*(int *)((char *)v12 + v13[5]) & 3) != 0) {
        goto LABEL_21;
      }
    }
    else if (v14 < 0x39)
    {
      goto LABEL_21;
    }
    uint64_t v16 = v13[28];
    if (!v16) {
      goto LABEL_21;
    }
    int v17 = *(int *)((char *)v12 + v16);
    if ((v17 & 0x23) == 0 && (v17 & 7) != 4) {
      goto LABEL_21;
    }
LABEL_22:
    ++v7;
  }
  while (v7 != v11);
  uint64_t v19 = 1;
  double v7 = (unint64_t *)__p;
  if (!__p) {
    return v19;
  }
LABEL_28:
  double v23 = v7;
  operator delete(v7);
  return v19;
}

void sub_5194F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_51951C(uint64_t a1, unint64_t *a2, int a3, int a4, uint64_t a5)
{
  char v10 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  double v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x2Fu)
  {
    uint64_t v12 = v11[23];
    if (v12)
    {
      unsigned int v13 = *((unsigned __int8 *)v10 + v12);
      BOOL v14 = v13 > 0x2D;
      uint64_t v15 = (1 << v13) & 0x208040000000;
      if (!v14 && v15 != 0) {
        goto LABEL_11;
      }
    }
  }
  int v17 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  double v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x2Fu)
  {
    uint64_t v19 = v18[23];
    if (v19)
    {
      if (*((unsigned char *)v17 + v19) == 47)
      {
LABEL_11:
        double v20 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
        uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
          uint64_t v23 = *(unsigned int *)((char *)v20 + v22);
        }
        else {
          uint64_t v23 = 0;
        }
        sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)&v32);
        sub_2E4B5C((uint64_t)&v32, &v34);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        unsigned int v24 = v34;
        if (a3 & a4) {
          goto LABEL_32;
        }
        size_t v25 = v35 - (unsigned char *)v34;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)v34) >> 2);
        if (v26 < 2 || v23 == 0) {
          goto LABEL_32;
        }
        long double v32 = 0;
        __p[0] = 0;
        __p[1] = 0;
        if (v35 == v34)
        {
          long double v29 = 0;
          long double v28 = 0;
          if (a3) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v26 >= 0x1555555555555556) {
            sub_2E00();
          }
          long double v28 = (char *)operator new(v35 - (unsigned char *)v34);
          long double v29 = &v28[12 * v26];
          long double v32 = v28;
          __p[1] = v29;
          memcpy(v28, v24, v25);
          __p[0] = v29;
          if (a3)
          {
LABEL_25:
            sub_51B690(a1, (uint64_t *)&v34, v23, 1, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            long double v28 = (char *)__src;
            long double v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            long double v29 = (char *)v31;
            if (!a4)
            {
LABEL_28:
              if (v28 == v29) {
                goto LABEL_29;
              }
              goto LABEL_40;
            }
LABEL_37:
            sub_51B690(a1, (uint64_t *)&v34, v23, 0, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            long double v28 = (char *)__src;
            long double v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            long double v29 = (char *)v31;
            if (__src == (void *)v31)
            {
LABEL_29:
              if (!v29)
              {
LABEL_31:
                unsigned int v24 = v34;
LABEL_32:
                if (v24)
                {
                  double v35 = v24;
                  operator delete(v24);
                }
                return;
              }
LABEL_30:
              __p[0] = v29;
              operator delete(v29);
              goto LABEL_31;
            }
LABEL_40:
            if (*(unsigned char *)(a1 + 1704))
            {
              sub_46C6C(a5, *(void *)(a5 + 8), v28, v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 2));
              long double v29 = v28;
              if (!v28) {
                goto LABEL_31;
              }
            }
            else
            {
              sub_515D6C((void **)a5, (uint64_t *)v28);
              sub_515D6C((void **)a5, (uint64_t *)((char *)__p[0] - 12));
              long double v29 = v32;
              if (!v32) {
                goto LABEL_31;
              }
            }
            goto LABEL_30;
          }
        }
        if (!a4) {
          goto LABEL_28;
        }
        goto LABEL_37;
      }
    }
  }
}

void sub_519808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51986C(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  long long v6 = *(_OWORD *)(a2 + 39);
  *(void *)(a1 + 88) = a2[41];
  *(_OWORD *)(a1 + 72) = v6;
  sub_4D4C4((void *)(a1 + 96), a2 + 42);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 90);
  *(unsigned char *)(a1 + 128) = a3;
  uint64_t v7 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v7;
  char v9 = (uint64_t *)a2[30];
  for (uint64_t i = (uint64_t *)a2[31]; v9 != i; v9 += 13)
    sub_519988((void *)a1, v9);
  return a1;
}

void sub_51993C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
    unint64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[3] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_519988(void *a1, uint64_t *a2)
{
  uint64_t v2 = (_DWORD *)a2[9];
  uint64_t v3 = (_DWORD *)a2[10];
  if (v2 != v3)
  {
    double v34 = a1 + 5;
    double v35 = (void **)(a1 + 2);
    do
    {
      if (*v2 == 3)
      {
        unsigned int v13 = (char *)a1[3];
        unint64_t v12 = a1[4];
        if ((unint64_t)v13 < v12)
        {
          uint64_t v6 = *a2;
          *((_DWORD *)v13 + 2) = *((_DWORD *)a2 + 2);
          *(void *)unsigned int v13 = v6;
          uint64_t v7 = v13 + 12;
        }
        else
        {
          BOOL v14 = (char *)*v35;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*v35) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 2);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x1555555555555555;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            if (v18 > 0x1555555555555555) {
              goto LABEL_44;
            }
            uint64_t v19 = (char *)operator new(12 * v18);
          }
          else
          {
            uint64_t v19 = 0;
          }
          unint64_t v26 = &v19[12 * v15];
          *(void *)unint64_t v26 = *a2;
          *((_DWORD *)v26 + 2) = *((_DWORD *)a2 + 2);
          long double v27 = v26;
          if (v13 != v14)
          {
            do
            {
              uint64_t v28 = *(void *)(v13 - 12);
              v13 -= 12;
              int v29 = *((_DWORD *)v13 + 2);
              *(void *)(v27 - 12) = v28;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v29;
            }
            while (v13 != v14);
            unsigned int v13 = (char *)*v35;
          }
          uint64_t v7 = v26 + 12;
          a1[2] = v27;
          a1[3] = v26 + 12;
          a1[4] = &v19[12 * v18];
          if (v13) {
            operator delete(v13);
          }
        }
        a1[3] = v7;
      }
      else if (*v2 == 4)
      {
        char v9 = (_DWORD *)a1[6];
        unint64_t v8 = a1[7];
        if ((unint64_t)v9 >= v8)
        {
          double v20 = (_DWORD *)*v34;
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v34) >> 2);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v20) >> 2);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v24 = 0x1555555555555555;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 > 0x1555555555555555) {
LABEL_44:
            }
              sub_188D718();
            size_t v25 = (char *)operator new(12 * v24);
          }
          else
          {
            size_t v25 = 0;
          }
          double v30 = &v25[12 * v21];
          *(void *)double v30 = *a2;
          *((_DWORD *)v30 + 2) = *((_DWORD *)a2 + 2);
          long long v31 = v30;
          if (v9 != v20)
          {
            do
            {
              uint64_t v32 = *(void *)(v9 - 3);
              v9 -= 3;
              int v33 = v9[2];
              *(void *)(v31 - 12) = v32;
              v31 -= 12;
              *((_DWORD *)v31 + 2) = v33;
            }
            while (v9 != v20);
            char v9 = (_DWORD *)*v34;
          }
          double v11 = v30 + 12;
          a1[5] = v31;
          a1[6] = v30 + 12;
          a1[7] = &v25[12 * v24];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          uint64_t v10 = *a2;
          v9[2] = *((_DWORD *)a2 + 2);
          *(void *)char v9 = v10;
          double v11 = v9 + 3;
        }
        a1[6] = v11;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

BOOL *sub_519C24(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "waypoint_location_enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  strcpy((char *)__p, "waypoint_place_enabled");
  HIBYTE(__p[2]) = 22;
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "waypoint_id_enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  return a1;
}

void sub_519D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_519D68(uint64_t a1, void *a2, uint64_t a3)
{
  v75[0] = (char *)operator new(0x20uLL);
  long long v72 = xmmword_20B8E90;
  *(_OWORD *)&v75[1] = xmmword_20B8E90;
  strcpy(v75[0], "enable_arrival_info_calculation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)a1 = v6;
  v75[0] = (char *)operator new(0x28uLL);
  long long v69 = xmmword_20B9260;
  *(_OWORD *)&v75[1] = xmmword_20B9260;
  strcpy(v75[0], "enable_arrival_region_calculation");
  BOOL v7 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  v75[0] = (char *)operator new(0x38uLL);
  long long v68 = xmmword_20B9A10;
  *(_OWORD *)&v75[1] = xmmword_20B9A10;
  strcpy(v75[0], "enable_non_dap_arrival_regions_for_charging_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 2) = v8;
  v75[0] = (char *)operator new(0x28uLL);
  long long v71 = xmmword_20B9280;
  *(_OWORD *)&v75[1] = xmmword_20B9280;
  strcpy(v75[0], "enable_non_dap_pre_arrival_regions");
  BOOL v9 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 3) = v9;
  HIBYTE(v75[2]) = 17;
  strcpy((char *)v75, "pullback_distance");
  double v10 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_17:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_28:
    *(void *)(a1 + 8) = (uint64_t)v10;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v75[0]);
LABEL_30:
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "use_all_segment_geometry_points");
  BOOL v14 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 16) = v14;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "end_of_route_distance_threshold");
  double v15 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v15 >= 0.0)
  {
    double v16 = v15;
    if (v15 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    double v16 = v15;
    if (v15 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15);
    if (v17 >= 1) {
      --v17;
    }
  }
  double v16 = (double)(v17 >> 1);
LABEL_40:
  if (v16 < 9.22337204e18)
  {
    if (v15 >= 0.0)
    {
      if (v15 >= 4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15) + 1;
    }
    else
    {
      if (v15 <= -4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15);
      if (v18 >= 1) {
        --v18;
      }
    }
    double v15 = (double)(v18 >> 1);
LABEL_51:
    *(void *)(a1 + 24) = (uint64_t)v15;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v75[0]);
LABEL_53:
  v75[0] = (char *)operator new(0x30uLL);
  long long v70 = xmmword_20B93C0;
  *(_OWORD *)&v75[1] = xmmword_20B93C0;
  qmemcpy(v67, "ute_distance_thrperson_end_of_ro", sizeof(v67));
  strcpy(v75[0], "person_end_of_route_distance_threshold_m");
  if (!sub_58070(a2, (uint64_t)v75))
  {
    *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  uint64_t v19 = (char *)operator new(0x30uLL);
  long long __p = v19;
  long long v74 = v70;
  *(_OWORD *)uint64_t v19 = v67[1];
  *((_OWORD *)v19 + 1) = v67[0];
  strcpy(v19 + 32, "eshold_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  operator delete(__p);
  if (SHIBYTE(v75[2]) < 0) {
LABEL_75:
  }
    operator delete(v75[0]);
LABEL_56:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v69;
  strcpy(v75[0], "enable_arrival_points_calculation");
  BOOL v20 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 40) = v20;
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "arrival_point_radius");
  double v21 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_66:
  if (v22 < 9.22337204e18)
  {
    if (v21 >= 0.0)
    {
      if (v21 >= 4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21) + 1;
    }
    else
    {
      if (v21 <= -4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21);
      if (v24 >= 1) {
        --v24;
      }
    }
    double v21 = (double)(v24 >> 1);
LABEL_79:
    *(void *)(a1 + 48) = (uint64_t)v21;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  *(void *)(a1 + 48) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v75[0]);
LABEL_81:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A80;
  strcpy(v75[0], "small_polygon_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 56) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "default_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 60) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93D0;
  strcpy(v75[0], "fallback_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 64) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B91A0;
  strcpy(v75[0], "ev_charging_time_multiplier");
  double v25 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 72) = v25;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "concave_polygon_angle_threshold");
  double v26 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 80) = v26;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "min_polygon_parking_segment_length");
  double v27 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v27 >= 0.0)
  {
    double v28 = v27;
    if (v27 >= 4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    double v28 = v27;
    if (v27 <= -4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27);
    if (v29 >= 1) {
      --v29;
    }
  }
  double v28 = (double)(v29 >> 1);
LABEL_99:
  if (v28 < 9.22337204e18)
  {
    if (v27 >= 0.0)
    {
      if (v27 >= 4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27) + 1;
    }
    else
    {
      if (v27 <= -4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27);
      if (v30 >= 1) {
        --v30;
      }
    }
    double v27 = (double)(v30 >> 1);
LABEL_110:
    *(void *)(a1 + 88) = (uint64_t)v27;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  *(void *)(a1 + 88) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v75[0]);
LABEL_112:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93A0;
  strcpy(v75[0], "min_polygon_drivable_segment_length");
  double v31 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v31 >= 0.0)
  {
    double v32 = v31;
    if (v31 >= 4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31) + 1;
  }
  else
  {
    double v32 = v31;
    if (v31 <= -4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31);
    if (v33 >= 1) {
      --v33;
    }
  }
  double v32 = (double)(v33 >> 1);
LABEL_120:
  if (v32 < 9.22337204e18)
  {
    if (v31 >= 0.0)
    {
      if (v31 >= 4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31) + 1;
    }
    else
    {
      if (v31 <= -4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31);
      if (v34 >= 1) {
        --v34;
      }
    }
    double v31 = (double)(v34 >> 1);
LABEL_131:
    *(void *)(a1 + 96) = (uint64_t)v31;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v75[0]);
LABEL_133:
  v75[0] = (char *)operator new(0x28uLL);
  long long v70 = xmmword_20B8FD0;
  *(_OWORD *)&v75[1] = xmmword_20B8FD0;
  strcpy(v75[0], "small_polygon_parking_segment_length");
  double v35 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v35 >= 0.0)
  {
    double v36 = v35;
    if (v35 >= 4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35) + 1;
  }
  else
  {
    double v36 = v35;
    if (v35 <= -4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v36 = (double)(v37 >> 1);
LABEL_141:
  if (v36 < 9.22337204e18)
  {
    if (v35 >= 0.0)
    {
      if (v35 >= 4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35) + 1;
    }
    else
    {
      if (v35 <= -4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35);
      if (v38 >= 1) {
        --v38;
      }
    }
    double v35 = (double)(v38 >> 1);
LABEL_152:
    *(void *)(a1 + 104) = (uint64_t)v35;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v75[0]);
LABEL_154:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9240;
  strcpy(v75[0], "small_polygon_drivable_segment_length");
  double v39 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v39 >= 0.0)
  {
    double v40 = v39;
    if (v39 >= 4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39) + 1;
  }
  else
  {
    double v40 = v39;
    if (v39 <= -4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39);
    if (v41 >= 1) {
      --v41;
    }
  }
  double v40 = (double)(v41 >> 1);
LABEL_162:
  if (v40 < 9.22337204e18)
  {
    if (v39 >= 0.0)
    {
      if (v39 >= 4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      if (v39 <= -4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39);
      if (v42 >= 1) {
        --v42;
      }
    }
    double v39 = (double)(v42 >> 1);
LABEL_173:
    *(void *)(a1 + 112) = (uint64_t)v39;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  *(void *)(a1 + 112) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v75[0]);
LABEL_175:
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20E12D0;
  *(_OWORD *)&v75[1] = xmmword_20E12D0;
  strcpy(v75[0], "extra_arrival_polygon_segment_distance");
  double v43 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v43 >= 0.0)
  {
    double v44 = v43;
    if (v43 >= 4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43) + 1;
  }
  else
  {
    double v44 = v43;
    if (v43 <= -4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_183:
  if (v44 < 9.22337204e18)
  {
    if (v43 >= 0.0)
    {
      if (v43 >= 4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      if (v43 <= -4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v43 = (double)(v46 >> 1);
LABEL_194:
    *(void *)(a1 + 120) = (uint64_t)v43;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v75[0]);
LABEL_196:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "default_arrival_detection_max_distance");
  double v47 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v47 >= 0.0)
  {
    double v48 = v47;
    if (v47 >= 4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47) + 1;
  }
  else
  {
    double v48 = v47;
    if (v47 <= -4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47);
    if (v49 >= 1) {
      --v49;
    }
  }
  double v48 = (double)(v49 >> 1);
LABEL_204:
  if (v48 < 9.22337204e18)
  {
    if (v47 >= 0.0)
    {
      if (v47 >= 4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47) + 1;
    }
    else
    {
      if (v47 <= -4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47);
      if (v50 >= 1) {
        --v50;
      }
    }
    double v47 = (double)(v50 >> 1);
LABEL_215:
    *(void *)(a1 + 128) = (uint64_t)v47;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    goto LABEL_216;
  }
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v75[0]);
LABEL_217:
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "fallback_bbox_radius");
  double v51 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v51 >= 0.0)
  {
    double v52 = v51;
    if (v51 >= 4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51) + 1;
  }
  else
  {
    double v52 = v51;
    if (v51 <= -4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51);
    if (v53 >= 1) {
      --v53;
    }
  }
  double v52 = (double)(v53 >> 1);
LABEL_225:
  if (v52 < 9.22337204e18)
  {
    if (v51 >= 0.0)
    {
      if (v51 >= 4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51) + 1;
    }
    else
    {
      if (v51 <= -4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51);
      if (v54 >= 1) {
        --v54;
      }
    }
    double v51 = (double)(v54 >> 1);
LABEL_236:
    *(void *)(a1 + 136) = (uint64_t)v51;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_238;
    }
    goto LABEL_237;
  }
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_238;
  }
LABEL_237:
  operator delete(v75[0]);
LABEL_238:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93E0;
  strcpy(v75[0], "should_add_parking_lot_based_arrival_region");
  BOOL v55 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 144) = v55;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9390;
  strcpy(v75[0], "should_add_fallback_timeout_bbox");
  BOOL v56 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 145) = v56;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "enable_initiate_approaching_region");
  BOOL v57 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 146) = v57;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9800;
  strcpy(v75[0], "parking_suggest_walking_region");
  uint64_t v58 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v58 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_519C24((BOOL *)(a1 + 147), (void *)*v58);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  strcpy((char *)v75, "prepare_to_park_region");
  HIBYTE(v75[2]) = 22;
  std::string v59 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v59 + 2) != 2)
  {
    int v66 = __cxa_allocate_exception(8uLL);
    *int v66 = &off_23FDF58;
  }
  sub_519C24((BOOL *)(a1 + 150), (void *)*v59);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "initiate_approaching_region_radius_m");
  *(void *)(a1 + 160) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20B9960;
  *(_OWORD *)&v75[1] = xmmword_20B9960;
  strcpy(v75[0], "parking_suggest_walking_region_radius_m");
  *(void *)(a1 + 168) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "circle_approximation_num_interpolations");
  int v60 = sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(_DWORD *)(a1 + 176) = v60;
  v75[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A90;
  strcpy(v75[0], "enable_walkable_region_destination_to_ap_distance_threshold");
  BOOL v61 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 180) = v61;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "destination_to_end_distance_threshold_m");
  *(void *)(a1 + 184) = sub_5CDE0(a3, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "walkable_region_poi_excluded_categories");
  sub_5C308(a2, (uint64_t)v75, a1 + 192);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = v68;
  strcpy(v75[0], "walkable_region_poi_address_allowed_country_codes");
  sub_5C568(a2, (uint64_t)v75, a1 + 216);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B99E0;
  strcpy(v75[0], "always_return_walkable_region_for_user_created_routes");
  BOOL v62 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 256) = v62;
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B8DF0;
  strcpy(v75[0], "always_return_walkable_region_for_apple_curated_routes");
  BOOL v63 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 257) = v63;
  return a1;
}

void sub_51B360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_51B474(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 40);
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v29);
  if (*(void *)(v3 + 24) == *(void *)(v3 + 32)) {
    goto LABEL_36;
  }
  if (__p == v31) {
    goto LABEL_36;
  }
  unint64_t v4 = sub_2E1AA4((uint64_t)v29);
  BOOL v7 = *(void **)(v3 + 24);
  BOOL v8 = *(void **)(v3 + 32);
  if (v7 == v8) {
    goto LABEL_36;
  }
  int v9 = 0;
  do
  {
    double v10 = (_DWORD *)v7[1];
    double v11 = (_DWORD *)(*v7 + 12);
    if ((_DWORD *)*v7 != v10 && v11 != v10)
    {
      do
      {
        unsigned int v13 = *(v11 - 2);
        unsigned int v14 = v11[1];
        if (v13 >= HIDWORD(v4))
        {
          if (v14 < HIDWORD(v4))
          {
LABEL_17:
            LODWORD(v5) = *v11;
            LODWORD(v6) = *(v11 - 3);
            double v6 = (double)*(unint64_t *)&v6;
            double v5 = ((double)HIDWORD(v4) - (double)v13)
               / ((double)v14 - (double)v13)
               * ((double)*(unint64_t *)&v5 - v6)
               + v6;
            if (v5 < (double)v4) {
              v9 ^= 1u;
            }
          }
        }
        else if (v14 >= HIDWORD(v4))
        {
          goto LABEL_17;
        }
        v11 += 3;
      }
      while (v11 != v10);
    }
    v7 += 3;
  }
  while (v7 != v8);
  if (!v9)
  {
LABEL_36:
    BOOL v26 = 0;
    double v27 = __p;
    if (!__p) {
      return v26;
    }
LABEL_37:
    double v31 = v27;
    operator delete(v27);
    return v26;
  }
  unint64_t v15 = sub_2E40A4((uint64_t)v29);
  uint64_t v18 = *(void **)(v3 + 24);
  uint64_t v19 = *(void **)(v3 + 32);
  if (v18 != v19)
  {
    int v20 = 0;
    while (1)
    {
      double v21 = (_DWORD *)v18[1];
      double v22 = (_DWORD *)(*v18 + 12);
      if ((_DWORD *)*v18 != v21 && v22 != v21) {
        break;
      }
LABEL_22:
      v18 += 3;
      if (v18 == v19) {
        goto LABEL_40;
      }
    }
    while (1)
    {
      unsigned int v24 = *(v22 - 2);
      unsigned int v25 = v22[1];
      if (v24 >= HIDWORD(v15))
      {
        if (v25 < HIDWORD(v15))
        {
LABEL_34:
          LODWORD(v16) = *v22;
          LODWORD(v17) = *(v22 - 3);
          double v17 = (double)*(unint64_t *)&v17;
          double v16 = ((double)HIDWORD(v15) - (double)v24)
              / ((double)v25 - (double)v24)
              * ((double)*(unint64_t *)&v16 - v17)
              + v17;
          if (v16 < (double)v15) {
            v20 ^= 1u;
          }
        }
      }
      else if (v25 >= HIDWORD(v15))
      {
        goto LABEL_34;
      }
      v22 += 3;
      if (v22 == v21) {
        goto LABEL_22;
      }
    }
  }
  int v20 = 0;
LABEL_40:
  BOOL v26 = v20 != 0;
  double v27 = __p;
  if (__p) {
    goto LABEL_37;
  }
  return v26;
}

void sub_51B670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_51B690(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 1696);
  if (v6 >= a3)
  {
    if (a4)
    {
      uint64_t v8 = a2[1];
      uint64_t v16 = *(void *)(v8 - 12);
      int v9 = *(_DWORD *)(v8 - 4);
    }
    else
    {
      uint64_t v16 = *(void *)*a2;
      int v9 = *(_DWORD *)(*a2 + 8);
    }
    int v17 = v9;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    double v10 = operator new(0xCuLL);
    a5[1] = v10 + 3;
    a5[2] = v10 + 3;
    *(void *)double v10 = v16;
    v10[2] = v17;
    *a5 = v10;
  }
  else if (v6)
  {
    double v7 = (double)v6 / (double)a3;
    if (!a4) {
      double v7 = 1.0 - v7;
    }
    sub_32F08(a2, a4 ^ 1, 0, a5, v7);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t v12 = (const void *)*a2;
    uint64_t v11 = a2[1];
    int64_t v13 = v11 - *a2;
    if (v11 != *a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unsigned int v14 = (char *)operator new(v13);
      *a5 = v14;
      a5[1] = v14;
      unint64_t v15 = &v14[4 * (v13 >> 2)];
      a5[2] = v15;
      memcpy(v14, v12, v13);
      a5[1] = v15;
    }
  }
}

void sub_51B7FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_51B818(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 10992);
  if (v4 == 3)
  {
    if (*(unsigned char *)(a1 + 1945)) {
      return (void *)(&def_332C + 1);
    }
  }
  else if (v4 == 4 && *(unsigned char *)(a1 + 1944))
  {
    return (void *)(&def_332C + 1);
  }
  uint64_t v6 = (int **)sub_46C8FC(a2);
  double v7 = (char *)*v6;
  uint64_t v8 = (unsigned __int16 *)((char *)*v6 - **v6);
  unsigned int v9 = *v8;
  if (v9 >= 0x2F && v8[23])
  {
    unsigned int v10 = v7[v8[23]];
    BOOL v11 = v10 > 0x1A;
    int v12 = (1 << v10) & 0x4810001;
    if (!v11 && v12 != 0)
    {
      if (*((unsigned char *)v6 + 38))
      {
        if (v9 < 0x39) {
          return 0;
        }
        uint64_t v14 = v8[28];
        if (!v14) {
          return 0;
        }
        int v15 = *(_DWORD *)&v7[v14];
        if ((v15 & 2) != 0) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v9 < 0x39) {
          return 0;
        }
        uint64_t v16 = v8[28];
        if (!v16) {
          return 0;
        }
        int v15 = *(_DWORD *)&v7[v16];
        if (v15) {
          goto LABEL_23;
        }
      }
      if ((v15 & 7) == 4 || (v15 & 0x23) == 0x20) {
        goto LABEL_23;
      }
      return 0;
    }
  }
LABEL_23:
  if ((*(_DWORD *)(a2 + 10988) - 1) <= 1)
  {
    uint64_t v17 = *(void *)(a2 + 7432);
    if (*(void *)(a2 + 7424) != v17)
    {
      if (*(void *)(a1 + 1928))
      {
        BOOL result = sub_13A8C((void *)(a1 + 1904), v17 - 24);
        if (!result) {
          return result;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 1868))
  {
    sub_5F3038(&v46, 2);
    sub_10A1D50(&v46, (uint64_t *)(a2 + 11120), 1, (uint64_t)&__p);
    uint64_t v18 = (unsigned int *)__p;
    uint64_t v19 = v45;
    v47[0] = (unsigned int *)(a2 + 10880);
    v47[1] = (unsigned int *)a1;
    if (__p == v45)
    {
LABEL_37:
      BOOL v22 = 1;
      uint64_t v23 = v18;
      if (!v18) {
        goto LABEL_47;
      }
    }
    else
    {
      while (!sub_522BD0(v47, v18))
      {
        v18 += 26;
        if (v18 == v19)
        {
          int v20 = (unsigned int *)__p;
          uint64_t v18 = v45;
          if (__p == v45) {
            goto LABEL_37;
          }
          if (__p)
          {
            do
            {
              double v21 = (void *)*((void *)v18 - 4);
              if (v21)
              {
                *((void *)v18 - 3) = v21;
                operator delete(v21);
              }
              v18 -= 26;
            }
            while (v18 != v20);
            uint64_t v45 = v20;
            operator delete(__p);
          }
          return 0;
        }
      }
      uint64_t v23 = (unsigned int *)__p;
      uint64_t v18 = v45;
      BOOL v22 = __p == v45;
      if (!__p) {
        goto LABEL_47;
      }
    }
    unsigned int v24 = v23;
    if (!v22)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v18 - 4);
        if (v25)
        {
          *((void *)v18 - 3) = v25;
          operator delete(v25);
        }
        v18 -= 26;
      }
      while (v18 != v23);
      unsigned int v24 = __p;
    }
    uint64_t v45 = v23;
    operator delete(v24);
  }
LABEL_47:
  BOOL v26 = (char *)(a2 + 11095);
  uint64_t v27 = *(unsigned __int8 *)(a2 + 11095);
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a2 + 11080);
  }
  if (!v27) {
    return (void *)(&def_332C + 1);
  }
  double v28 = (void *)sub_DAA2E4(a2 + 10880);
  long long __p = v28;
  uint64_t v29 = *(void *)(a1 + 1976);
  uint64_t v30 = *(void *)(a1 + 1984);
  if (v29 != v30)
  {
    while (*(void **)v29 != v28)
    {
      v29 += 16;
      if (v29 == v30) {
        goto LABEL_57;
      }
    }
  }
  if (v29 == v30)
  {
LABEL_57:
    uint64_t v32 = *(void *)(a1 + 1880);
    uint64_t v33 = *(void *)(a1 + 1888);
    if (v32 == v33)
    {
LABEL_83:
      char v43 = 1;
    }
    else
    {
      char v34 = *v26;
      if (*v26 >= 0) {
        size_t v35 = *v26;
      }
      else {
        size_t v35 = *(void *)(a2 + 11080);
      }
      if (v34 < 0)
      {
        double v36 = *(const void **)(a2 + 11072);
        while (1)
        {
          int v40 = *(char *)(v32 + 23);
          size_t v41 = v40 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v41 <= v35)
          {
            uint64_t v42 = v40 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v42, v36, v41)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        while (1)
        {
          int v37 = *(char *)(v32 + 23);
          size_t v38 = v37 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v38 <= v35)
          {
            double v39 = v37 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v39, (const void *)(a2 + 11072), v38)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_83;
          }
        }
      }
      char v43 = 0;
    }
    LOBYTE(v47[0]) = v43;
    sub_516B4C((char **)(a1 + 1976), &__p, (char *)v47);
    int v31 = LOBYTE(v47[0]);
  }
  else
  {
    int v31 = *(unsigned __int8 *)(v29 + 8);
  }
  return (uint64_t *)(v31 != 0);
}

void sub_51BBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_51BC0C(uint64_t a1, void *a2)
{
  for (uint64_t i = a2[134]; i != a2[133]; i -= 2400)
  {
    uint64_t v4 = i - 2400;
    int v5 = *(unsigned __int8 *)(i - 2072);
    if (v5 == 5)
    {
      uint64_t v6 = *(void *)(v4 + 24);
      BOOL v7 = v6 != 0;
      uint64_t v8 = v6 - 1;
      if (!v7) {
        uint64_t v8 = 0;
      }
      if (a2[1248] != a2[1249]) {
        return *(void *)(sub_650EEC((uint64_t)a2, v8)[1] - 12);
      }
      uint64_t v11 = sub_46C8EC(a2, v8);
      sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)&v14);
      unint64_t v9 = sub_2E40A4((uint64_t)&v14);
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      return v9;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v14);
    sub_188FC78(&v14, (uint64_t)"Could not resolve transport mode transition coordinate.", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return -1;
}

void sub_51BE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_51BE60(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[133] != a2[134] && sub_46C760(a2))
  {
    uint64_t v6 = *(void *)(a2[134] - 1528);
    if (v6 >= *(void *)(a1 + 1736)) {
      uint64_t v6 = *(void *)(a1 + 1736);
    }
    uint64_t v15 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = sub_46C8FC((uint64_t)a2);
    sub_2954EC(v7, *(void *)(v8 + 32), (uint64_t)&v11);
    sub_2E4B5C((uint64_t)&v11, v14);
    if (__p)
    {
      char v13 = __p;
      operator delete(__p);
    }
    unsigned int v9 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v14, 0, &v11, 0.0, (double)v9 / 1000000000.0);
    unsigned int v10 = v11;
    if (v11 != __p)
    {
      sub_516158((char **)(a3 + 16), (uint64_t *)((char *)__p - 12), &v15);
      unsigned int v10 = v11;
    }
    if (v10)
    {
      long long __p = v10;
      operator delete(v10);
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
}

void sub_51BF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51BFBC(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  uint64_t v6 = sub_3750CC(a2);
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_20B8E30;
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  sub_4BBDC0(a1 + 152, a3);
  HIBYTE(v27[2]) = 18;
  strcpy((char *)v27, "ArrivalInfoBuilder");
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  uint64_t v7 = sub_374CDC((uint64_t)a2, (uint64_t)v27, (uint64_t *)&v24);
  sub_3CB5E0(v7, (uint64_t)v28);
  uint64_t v21 = 0;
  BOOL v22 = operator new(0x28uLL);
  long long v23 = xmmword_20B9260;
  strcpy((char *)v22, "DrivingToWalkingTransitionChecker");
  long long __p = 0;
  int v20 = 0;
  uint64_t v8 = sub_374CDC((uint64_t)a2, (uint64_t)&v22, (uint64_t *)&__p);
  sub_51F230(a1 + 1688, v28, (uint64_t)v8);
  unsigned int v9 = (void **)__p;
  if (__p)
  {
    unsigned int v10 = v20;
    uint64_t v11 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    int v20 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22);
  }
  int v12 = v29;
  if (v29)
  {
    do
    {
      uint64_t v17 = (void **)*v12;
      sub_55198((uint64_t)(v12 + 5));
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      int v12 = v17;
    }
    while (v17);
  }
  char v13 = (void *)v28[0];
  v28[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = (void **)v24;
  if (v24)
  {
    uint64_t v15 = v25;
    uint64_t v16 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v24;
    }
    unsigned int v25 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v27[2]) < 0) {
    operator delete(v27[0]);
  }
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(void *)(a1 + 2000) = -1;
  *(_DWORD *)(a1 + 2008) = 0x7FFFFFFF;
  return a1;
}

void sub_51C21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_5450C(v29 - 88);
  sub_1A668(&a19);
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v28);
  sub_510AA4(v27);
  _Unwind_Resume(a1);
}

unint64_t sub_51C298(unint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 1688)) {
    return result;
  }
  unint64_t v2 = result;
  if (!*(unsigned char *)(result + 1594)) {
    return result;
  }
  BOOL result = sub_470ADC((void *)a2);
  if (!result) {
    return result;
  }
  BOOL result = sub_64EFC4(a2);
  if (*(_DWORD *)result == -1 && *(_DWORD *)(result + 4) == -1) {
    return result;
  }
  sub_51C58C(v2, a2);
  sub_51CA5C(v2, (void *)a2);
  int v5 = (unsigned int *)sub_470B50(a2);
  uint64_t v6 = sub_51CC10(v2, *v5 | ((unint64_t)(v5[1] & 0x1FFFFFFF) << 32));
  if (sub_35E640() && *(_DWORD *)sub_46CAAC(a2) != 0x7FFFFFFF)
  {
    double v8 = *(double *)(v2 + 1760);
    double v9 = v8 * (double)*(int *)sub_46CAAC(a2);
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_19:
        double v9 = (double)(v10 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9);
      if (v10 >= 1) {
        --v10;
      }
      goto LABEL_19;
    }
    int v7 = (int)v9;
    goto LABEL_21;
  }
  int v7 = 0;
LABEL_21:
  sub_51D598(v2, v7, v6, a2 + 10104);
  if (*(unsigned char *)(v2 + 1728))
  {
    sub_520CE0(v2, (void *)a2, a2 + 10104);
    int v12 = *(uint64_t **)(v2 + 32);
    char v13 = *(uint64_t **)(v2 + 40);
    if (v12 == v13)
    {
      if (*(_DWORD *)(v2 + 16) != -1 || *(_DWORD *)(v2 + 20) != -1) {
        sub_516158((char **)(a2 + 10120), (uint64_t *)(v2 + 16), (uint64_t *)(v2 + 1736));
      }
      uint64_t v14 = *(uint64_t **)(v2 + 56);
      for (i = *(uint64_t **)(v2 + 64); v14 != i; uint64_t v14 = (uint64_t *)((char *)v14 + 12))
        sub_516158((char **)(a2 + 10120), v14, (uint64_t *)(v2 + 1736));
    }
    else
    {
      do
      {
        sub_516158((char **)(a2 + 10120), v12, (uint64_t *)(v2 + 1736));
        int v12 = (uint64_t *)((char *)v12 + 12);
      }
      while (v12 != v13);
    }
  }
  sub_51D844(v2, v7, a2 + 10104, v11);
  sub_51D9D0(v2, a2, (void *)(a2 + 10104));
  sub_51DBEC(v2, a2, a2 + 10104);
  sub_51DEA8(v2, a2, a2 + 10104);
  sub_51E134(v2, a2);
  if (*(void *)(v2 + 1720) == 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(sub_64EFC4(a2) + 112) != 2) {
    uint64_t v16 = (uint64_t *)(v2 + 1712);
  }
  else {
    uint64_t v16 = (uint64_t *)(v2 + 1720);
  }
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(a2 + 1072);
  if (*(void *)(a2 + 1064) != v18)
  {
    uint64_t v19 = *(void *)(v18 - 1528);
    if (v19 < v17) {
      uint64_t v17 = v19;
    }
  }
  *(void *)(a2 + 10104) = v17;

  return sub_51E254(v2, (void *)a2, a2 + 10104);
}

BOOL sub_51C58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)sub_64EFC4(a2);
  if (sub_64F348(a2))
  {
    LOBYTE(v5) = 1;
    goto LABEL_40;
  }
  if (!*(void *)(a1 + 1288)) {
    goto LABEL_39;
  }
  if (!sub_62D424(a1 + 152))
  {
    unint64_t v6 = *(void *)(a1 + 1288) - 1;
    uint64_t v7 = *(void *)(a1 + 1280);
    uint64_t v8 = (v6 >> 3) & 0x1FFFFFFFFFFFFFF8;
    goto LABEL_10;
  }
  LODWORD(v6) = *(_DWORD *)(a2 + 288);
  if (*(unsigned char *)(a1 + 1676))
  {
    if (v6 != -1)
    {
      unint64_t v6 = v6;
      if (*(void *)(a1 + 1288) > (unint64_t)v6)
      {
LABEL_8:
        uint64_t v7 = *(void *)(a1 + 1280);
        uint64_t v8 = (v6 >> 3) & 0x1FFFFFF8;
LABEL_10:
        uint64_t v5 = (*(void *)(v7 + v8) >> v6) & 1;
        goto LABEL_40;
      }
      goto LABEL_27;
    }
LABEL_12:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v28);
      double v9 = sub_69510();
      sub_68EE4((uint64_t)v9);
      std::operator+<char>();
      if ((v27 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v11 = v27;
      }
      else {
        uint64_t v11 = v26;
      }
      sub_188FC78(&v28, (uint64_t)p_p, v11);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_39;
  }
  if ((v6 + 1) < 2) {
    goto LABEL_12;
  }
  unint64_t v6 = (v6 - 1);
  if (*(void *)(a1 + 1288) > v6) {
    goto LABEL_8;
  }
LABEL_27:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v28);
    int v12 = sub_69510();
    sub_68EE4((uint64_t)v12);
    std::operator+<char>();
    if ((v27 & 0x80u) == 0) {
      char v13 = &__p;
    }
    else {
      char v13 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v14 = v27;
    }
    else {
      uint64_t v14 = v26;
    }
    sub_188FC78(&v28, (uint64_t)v13, v14);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    sub_111ECAC((uint64_t)&v28);
  }
LABEL_39:
  LOBYTE(v5) = 0;
LABEL_40:
  sub_51ED38((uint64_t)&v28, v4, v5);
  uint64_t v15 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 24) = v29;
  if (v15)
  {
    *(void *)(a1 + 40) = v15;
    operator delete(v15);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v30;
  *(void *)(a1 + 48) = v31;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  if (v16)
  {
    *(void *)(a1 + 64) = v16;
    operator delete(v16);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v17 = (void **)(a1 + 112);
  uint64_t v18 = *(char **)(a1 + 112);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v32;
  *(void *)(a1 + 72) = v33;
  v32[1] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  *(unsigned char *)(a1 + 80) = v34;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v35;
  *(void *)(a1 + 104) = v36;
  if (v18)
  {
    uint64_t v19 = *(char **)(a1 + 120);
    int v20 = v18;
    if (v19 != v18)
    {
      uint64_t v21 = *(char **)(a1 + 120);
      do
      {
        long long v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        BOOL v22 = v23;
        if (v23)
        {
          *((void *)v19 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      int v20 = *v17;
    }
    *(void *)(a1 + 120) = v18;
    operator delete(v20);
    void *v17 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = v37;
  *(void *)(a1 + 128) = v38;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  *(_DWORD *)(a1 + 136) = v39;
  *(unsigned char *)(a1 + 144) = v40;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  BOOL result = sub_64F348(a2);
  *(unsigned char *)(a1 + 80) = result;
  return result;
}

void sub_51C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_51CA5C(uint64_t a1, void *a2)
{
  if (a2[1248] == a2[1249])
  {
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = (unsigned int *)sub_470B50((uint64_t)a2);
    sub_2954EC(v11, (((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | *v12) ^ 0x1000000000000, (uint64_t)&v16);
    sub_2E4B5C((uint64_t)&v16, &v19);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v4 = sub_470ADC(a2);
    uint64_t v5 = sub_652D48((uint64_t)a2, v4 - 1);
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint64_t v7 = (const void *)*v5;
    uint64_t v6 = v5[1];
    int64_t v8 = v6 - *v5;
    if (v6 != *v5)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      double v9 = (char *)operator new(v8);
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      uint64_t v19 = v9;
      uint64_t v21 = v10;
      memcpy(v9, v7, v8);
      int v20 = v10;
    }
  }
  unsigned int v13 = sub_46CAC4((uint64_t)a2);
  sub_31854((uint64_t *)&v19, 0, &v16, 0.0, (double)v13 / 1000000000.0);
  uint64_t v14 = v16;
  int v15 = *((_DWORD *)__p - 1);
  *(void *)(a1 + 2000) = *(void *)((char *)__p - 12);
  *(_DWORD *)(a1 + 2008) = v15;
  if (v14)
  {
    long long __p = v14;
    operator delete(v14);
  }
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
}

void sub_51CBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51CC10(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a2;
  if (!*(unsigned char *)(a1 + 1832)) {
    return *(void *)(a1 + 1960);
  }
  unint64_t v4 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 0x2Fu || (uint64_t v6 = v5[23]) == 0 || *((unsigned char *)v4 + v6) != 47)
  {
    uint64_t v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
    int64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 < 0x2Fu) {
      return *(void *)(a1 + 1960);
    }
    uint64_t v9 = v8[23];
    if (!v9) {
      return *(void *)(a1 + 1960);
    }
    unsigned int v10 = *((unsigned __int8 *)v7 + v9);
    BOOL v11 = v10 > 0x2D;
    uint64_t v12 = (1 << v10) & 0x208040000000;
    if (v11 || v12 == 0) {
      return *(void *)(a1 + 1960);
    }
  }
  sub_29549C(*(void *)(a1 + 8), a2, (uint64_t)v62);
  unint64_t v76 = sub_2E1AA4((uint64_t)v62);
  int v77 = v18;
  if (__p)
  {
    int v64 = __p;
    operator delete(__p);
  }
  uint64_t v19 = *(void *)(a1 + 1952);
  uint64_t v20 = *(void *)(a1 + 1960);
  if (v19 == v20) {
    goto LABEL_18;
  }
  while (!sub_490A0(v19, &v76, v14, v15, v16, v17))
  {
    v19 += 48;
    if (v19 == v20)
    {
      uint64_t v19 = v20;
      break;
    }
  }
  if (v19 == *(void *)(a1 + 1960))
  {
LABEL_18:
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    sub_5232A0((uint64_t)v62);
    v53[0] = sub_51E4BC(a1, &v78, (unsigned int *)&v76);
    sub_512D4C((uint64_t)v62, &v78, v53);
    std::string v59 = 0;
    int v60 = 0;
    uint64_t v61 = 0;
    if (v73)
    {
      do
      {
        *(_OWORD *)uint64_t v53 = *((_OWORD *)v65 + *(unsigned int *)v69);
        sub_51325C((uint64_t)v62);
        BOOL v56 = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 0);
        int v21 = sub_51E858(a1, (unsigned int **)&v56, (unsigned int *)&v76, (uint64_t)v62);
        v51[0] = (void *)sub_2D5EC4(*(void *)(a1 + 8), v53[0], 1);
        int v22 = sub_51E858(a1, (unsigned int **)v51, (unsigned int *)&v76, (uint64_t)v62);
        sub_51E9E8(a1, v53, v21 ^ 1, v22 ^ 1, (uint64_t)&v59);
        long long v23 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        unsigned int v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
          uint64_t v26 = *(unsigned int *)((char *)v23 + v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unsigned __int8 v27 = (int *)sub_2D5D58(*(void *)(a1 + 8), v53[0]);
        uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0x2Fu)
        {
          uint64_t v29 = v28[23];
          if (v29)
          {
            unsigned int v30 = *((unsigned __int8 *)v27 + v29);
            BOOL v11 = v30 > 0x2D;
            uint64_t v31 = (1 << v30) & 0x208040000000;
            if (!v11 && v31 != 0) {
              v75 += v26;
            }
          }
        }
        v74 += v26;
      }
      while (v73);
      char v34 = v60;
      if (v59 != v60)
      {
        size_t v35 = (unsigned int *)((char *)v59 + 12);
        if ((char *)v59 + 12 != (char *)v60)
        {
          unsigned int v36 = *(_DWORD *)v59;
          while (1)
          {
            unsigned int v37 = v36;
            unsigned int v36 = *v35;
            if (__PAIR64__(*(v35 - 2), v37) == *(void *)v35 && *(v35 - 1) == v35[2]) {
              break;
            }
            v35 += 3;
            if (v35 == v60) {
              goto LABEL_49;
            }
          }
          uint64_t v38 = v35 - 3;
          if (v35 - 3 != v60)
          {
            while (1)
            {
              v35 += 3;
              if (v35 == v34) {
                break;
              }
              if (*v38 != *v35 || v38[1] != v35[1] || v38[2] != v35[2])
              {
                unsigned int v39 = v35[2];
                *(void *)(v38 + 3) = *(void *)v35;
                v38 += 3;
                v38[2] = v39;
              }
            }
            char v34 = v38 + 3;
            if (v38 + 3 != v60) {
              goto LABEL_50;
            }
            goto LABEL_51;
          }
        }
      }
    }
    else
    {
      char v34 = 0;
    }
LABEL_49:
    if (v34 != v60) {
LABEL_50:
    }
      int v60 = v34;
LABEL_51:
    sub_4909C((uint64_t)&v56, (uint64_t *)&v59, *(double *)(a1 + 1768));
    char v40 = (char *)v56;
    if (v57 - (unsigned char *)v56 != 24 || *(void *)v56 == *((void *)v56 + 1))
    {
      uint64_t v19 = *(void *)(a1 + 1960);
      if (!v56)
      {
LABEL_84:
        if (v59)
        {
          int v60 = (unsigned int *)v59;
          operator delete(v59);
        }
        if (v71)
        {
          long long v72 = v71;
          operator delete(v71);
        }
        if (v69)
        {
          long long v70 = v69;
          operator delete(v69);
        }
        if (v67)
        {
          long long v68 = v67;
          operator delete(v67);
        }
        if (v65)
        {
          int v66 = v65;
          operator delete(v65);
        }
        sub_328138((uint64_t)v62);
        return v19;
      }
    }
    else
    {
      size_t v41 = *(void **)(a1 + 1960);
      if ((unint64_t)v41 >= *(void *)(a1 + 1968))
      {
        double v44 = sub_523490((void **)(a1 + 1952), (uint64_t *)&v56, &v75, &v74);
      }
      else
      {
        uint64_t v43 = v74;
        uint64_t v42 = v75;
        sub_4D4C4(*(void **)(a1 + 1960), (uint64_t *)&v56);
        v41[3] = v58;
        v41[4] = v42;
        v41[5] = v43;
        double v44 = (char *)(v41 + 6);
        *(void *)(a1 + 1960) = v41 + 6;
      }
      *(void *)(a1 + 1960) = v44;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_49168((uint64_t *)v53, &v56);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        sub_188FC78(v53, (uint64_t)"polygon vertices number: ", 25);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v53);
        uint64_t v45 = sub_188FC78(v53, (uint64_t)" parking segment length: ", 25);
        std::ostream::operator<<();
        sub_188FC78(v45, (uint64_t)" drivable segment length: ", 26);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v51, 2u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v55 < 0) {
          operator delete(v54);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v19 = *(void *)(a1 + 1960) - 48;
      char v40 = (char *)v56;
      if (!v56) {
        goto LABEL_84;
      }
    }
    unsigned __int8 v46 = v57;
    double v47 = v40;
    if (v57 != v40)
    {
      double v48 = v57;
      do
      {
        uint64_t v50 = (void *)*((void *)v48 - 3);
        v48 -= 24;
        uint64_t v49 = v50;
        if (v50)
        {
          *((void *)v46 - 2) = v49;
          operator delete(v49);
        }
        unsigned __int8 v46 = v48;
      }
      while (v48 != v40);
      double v47 = v56;
    }
    BOOL v57 = v40;
    operator delete(v47);
    goto LABEL_84;
  }
  return v19;
}

void sub_51D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_36094(&a50);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  sub_5139D0(&a57);
  _Unwind_Resume(a1);
}

void sub_51D598(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1689))
  {
    int v7 = *(_DWORD *)(a1 + 136);
    if (v7 == 4 || v7 == 1)
    {
      uint64_t v9 = (long long *)(a1 + 88);
      *(_DWORD *)(a4 + 64) = 1;
      v24[0] = 4;
      unint64_t v10 = *(void *)(a4 + 48);
      if (v10 >= *(void *)(a4 + 56))
      {
        uint64_t v12 = sub_52262C((void **)(a4 + 40), (uint64_t)v9, v24);
      }
      else
      {
        long long v11 = *v9;
        *(void *)(v10 + 16) = *(void *)(a1 + 104);
        *(_OWORD *)unint64_t v10 = v11;
        sub_4D4C4((void *)(v10 + 24), (uint64_t *)(a1 + 112));
        *(_DWORD *)(v10 + 48) = *(_DWORD *)(a1 + 136);
        *(void *)(v10 + 56) = 0x7FFFFFFF00000004;
        *(void *)(v10 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v12 = (char *)(v10 + 72);
        *(void *)(a4 + 48) = v10 + 72;
      }
      *(void *)(a4 + 48) = v12;
      *((_DWORD *)v12 - 3) = *(_DWORD *)(a1 + 1748) + a2;
    }
    else
    {
      uint64_t v13 = 1690;
      if (!*(unsigned char *)(a1 + 80)) {
        uint64_t v13 = 1691;
      }
      if (*(unsigned char *)(a1 + v13)) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = *(void *)(a1 + 32) == *(void *)(a1 + 40);
      }
      if (!v14 && *(void *)(a1 + 1960) != a3)
      {
        sub_3D25C0((uint64_t)v24, a3, 8);
        if (*(void *)(a3 + 32) >= *(void *)(a1 + 1776) && *(void *)(a3 + 40) >= *(void *)(a1 + 1784))
        {
          if (*(unsigned char *)(a1 + 144))
          {
            *(_DWORD *)(a4 + 64) = 3;
            int v23 = 2;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          else
          {
            *(_DWORD *)(a4 + 64) = 2;
            int v23 = 4;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
            if (*(void *)(a3 + 32) >= *(void *)(a1 + 1792) && *(void *)(a3 + 40) >= *(void *)(a1 + 1800)) {
              int v22 = (_DWORD *)(a1 + 1748);
            }
            else {
              int v22 = (_DWORD *)(a1 + 1744);
            }
            *(_DWORD *)(*(void *)(a4 + 48) - 12) = *v22 + a2;
            int v23 = 5;
            sub_515F58(a4 + 40, (uint64_t)v24, &v23);
          }
          sub_513E34((uint64_t)v24);
        }
        else
        {
          double v16 = (char *)__p;
          if (__p)
          {
            double v17 = v26;
            int v18 = __p;
            if (v26 != __p)
            {
              uint64_t v19 = v26;
              do
              {
                int v21 = (void *)*((void *)v19 - 3);
                v19 -= 24;
                uint64_t v20 = v21;
                if (v21)
                {
                  *((void *)v17 - 2) = v20;
                  operator delete(v20);
                }
                double v17 = v19;
              }
              while (v19 != v16);
              int v18 = __p;
            }
            uint64_t v26 = v16;
            operator delete(v18);
          }
        }
      }
    }
  }
}

void sub_51D800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51D814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51D828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51D83C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_51D844(uint64_t a1, int a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 1689) && *(unsigned char *)(a1 + 1833) && !*(_DWORD *)(a3 + 64))
  {
    *(_DWORD *)(a3 + 64) = 4;
    sub_365DC((int *)(a1 + 16), (uint64_t *)(a1 + 1824), (uint64_t)&v22, a4);
    sub_3D2710((uint64_t)&v17, &v22, 10);
    int v16 = 4;
    unint64_t v7 = *(void *)(a3 + 48);
    if (v7 >= *(void *)(a3 + 56))
    {
      uint64_t v9 = sub_52295C((void **)(a3 + 40), (uint64_t)&v17, &v16);
    }
    else
    {
      long long v8 = v17;
      *(void *)(v7 + 16) = v18;
      *(_OWORD *)unint64_t v7 = v8;
      sub_4D4C4((void *)(v7 + 24), (uint64_t *)&__p);
      *(_DWORD *)(v7 + 48) = v21;
      *(void *)(v7 + 56) = 0x7FFFFFFF00000004;
      *(void *)(v7 + 64) = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v9 = (char *)(v7 + 72);
      *(void *)(a3 + 48) = v7 + 72;
    }
    *(void *)(a3 + 48) = v9;
    *((_DWORD *)v9 - 3) = *(_DWORD *)(a1 + 1752) + a2;
    unint64_t v10 = (char *)__p;
    if (__p)
    {
      long long v11 = v20;
      uint64_t v12 = __p;
      if (v20 != __p)
      {
        uint64_t v13 = v20;
        do
        {
          double v15 = (void *)*((void *)v13 - 3);
          v13 -= 24;
          BOOL v14 = v15;
          if (v15)
          {
            *((void *)v11 - 2) = v14;
            operator delete(v14);
          }
          long long v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v20 = v10;
      operator delete(v12);
    }
  }
}

void sub_51D9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51D9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 48) = v3;
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51D9D0(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1672) && *(unsigned char *)(a1 + 1834))
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = a3[6];
    long long v8 = (void **)(a3 + 5);
    if (v6 == v7)
    {
LABEL_6:
      if (*(void *)(a2 + 1064) != *(void *)(a2 + 1072) && !sub_652F28(a2))
      {
        sub_3AEF0((unsigned int *)(a1 + 2000), *(void *)(a1 + 1848), *(_DWORD *)(a1 + 1864), (uint64_t)&v31);
        sub_3D2668((uint64_t)&v26, (uint64_t)&v31, 8);
        int v25 = 7;
        unint64_t v9 = a3[6];
        if (v9 >= a3[7])
        {
          long long v11 = sub_52262C(v8, (uint64_t)&v26, &v25);
        }
        else
        {
          long long v10 = v26;
          *(void *)(v9 + 16) = v27;
          *(_OWORD *)unint64_t v9 = v10;
          sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
          *(_DWORD *)(v9 + 48) = v30;
          *(void *)(v9 + 56) = 0x7FFFFFFF00000007;
          *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
          long long v11 = (char *)(v9 + 72);
          a3[6] = v9 + 72;
        }
        a3[6] = v11;
        uint64_t v12 = *(void *)(*(void *)(a2 + 1072) - 1528);
        if (v12 >= *(void *)(a1 + 1848)) {
          uint64_t v12 = *(void *)(a1 + 1848);
        }
        *((void *)v11 - 1) = v12;
        uint64_t v13 = (char *)__p;
        if (__p)
        {
          BOOL v14 = v29;
          double v15 = __p;
          if (v29 != __p)
          {
            int v16 = v29;
            do
            {
              uint64_t v18 = (void *)*((void *)v16 - 3);
              v16 -= 24;
              long long v17 = v18;
              if (v18)
              {
                *((void *)v14 - 2) = v17;
                operator delete(v17);
              }
              BOOL v14 = v16;
            }
            while (v16 != v13);
            double v15 = __p;
          }
          uint64_t v29 = v13;
          operator delete(v15);
        }
        uint64_t v19 = (char *)v31;
        if (v31)
        {
          uint64_t v20 = v32;
          int v21 = v31;
          if (v32 != v31)
          {
            __n128 v22 = v32;
            do
            {
              unsigned int v24 = (void *)*((void *)v22 - 3);
              v22 -= 24;
              int v23 = v24;
              if (v24)
              {
                *((void *)v20 - 2) = v23;
                operator delete(v23);
              }
              uint64_t v20 = v22;
            }
            while (v22 != v19);
            int v21 = v31;
          }
          uint64_t v32 = v19;
          operator delete(v21);
        }
      }
    }
    else
    {
      while (*(_DWORD *)(v6 + 56) != 5)
      {
        v6 += 72;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_51DBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_51DBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_51DBEC(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 1672))
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(result + 1838)) {
        return result;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(result + 1839)) {
        return result;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(result + 1840))
    {
      return result;
    }
    BOOL result = sub_64F240(a2);
    if ((result & 1) == 0 && *(void *)(a2 + 1064) != *(void *)(a2 + 1072))
    {
      BOOL result = sub_652F58(a2, 2);
      if (result)
      {
        uint64_t v7 = *(void *)(a3 + 40);
        uint64_t v8 = *(void *)(a3 + 48);
        if (v7 == v8)
        {
LABEL_16:
          BOOL result = sub_520E54(v5, a2);
          if (result)
          {
            uint64_t v9 = *(void *)(a2 + 1072);
            while (v9 != *(void *)(a2 + 1064))
            {
              uint64_t v10 = v9 - 2400;
              int v11 = *(_DWORD *)(v9 - 2240);
              BOOL v12 = v11 == 39 || v11 == 16;
              uint64_t v9 = v10;
              if (v12)
              {
                unint64_t v13 = *(void *)(v10 + 24);
                if (v13 > *(void *)(v10 + 40))
                {
                  while (1)
                  {
                    BOOL result = sub_470B40((void *)a2, --v13);
                    BOOL v14 = *(int **)(result + 8);
                    double v15 = (unsigned __int16 *)((char *)v14 - *v14);
                    if (*v15 >= 0x2Fu)
                    {
                      uint64_t v16 = v15[23];
                      if (v16)
                      {
                        unsigned int v17 = *((unsigned __int8 *)v14 + v16);
                        BOOL v18 = v17 > 0x2F;
                        uint64_t v19 = (1 << v17) & 0xA08040000000;
                        if (!v18 && v19 != 0) {
                          break;
                        }
                      }
                    }
                    if (v13 <= *(void *)(v10 + 40)) {
                      goto LABEL_35;
                    }
                  }
                  BOOL result = sub_51CC10(v5, *(unsigned int *)result | ((unint64_t)(*(_DWORD *)(result + 4) & 0x1FFFFFFF) << 32));
                  if (*(void *)(v5 + 1960) != result)
                  {
                    sub_3D25C0((uint64_t)v27, result, 8);
                    LODWORD(v24[0]) = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v27, (int *)v24);
                    BOOL result = sub_513E34((uint64_t)v27);
                  }
                }
LABEL_35:
                uint64_t v21 = *(void *)(a3 + 48);
                if (*(void *)(a3 + 40) == v21 || *(_DWORD *)(v21 - 16) != 8)
                {
                  BOOL result = sub_521214(v5, (void *)a2);
                  unint64_t v25 = result;
                  int v26 = v22;
                  if (result != -1 || result <= 0xFFFFFFFEFFFFFFFFLL)
                  {
                    sub_3AEF0((unsigned int *)&v25, *(void *)(v5 + 1848), *(_DWORD *)(v5 + 1864), (uint64_t)v24);
                    sub_3D2668((uint64_t)v27, (uint64_t)v24, 8);
                    int v23 = 8;
                    sub_515EB4(a3 + 40, (uint64_t)v27, &v23);
                    sub_513E34((uint64_t)v27);
                    return (unint64_t)sub_36094(v24);
                  }
                }
                return result;
              }
            }
          }
        }
        else
        {
          while (*(_DWORD *)(v7 + 56) != 5)
          {
            v7 += 72;
            if (v7 == v8) {
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_51DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_513E34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_51DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_513E34((uint64_t)va1);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_51DE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_51DEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1672))
  {
    int v6 = *(_DWORD *)(a2 + 10988);
    if (v6 == 3)
    {
      if (!*(unsigned char *)(a1 + 1835)) {
        return;
      }
    }
    else if (v6 == 2)
    {
      if (!*(unsigned char *)(a1 + 1836)) {
        return;
      }
    }
    else if (v6 != 1 || !*(unsigned char *)(a1 + 1837))
    {
      return;
    }
    if ((sub_64F240(a2) & 1) == 0
      && *(void *)(a2 + 1064) != *(void *)(a2 + 1072)
      && (!sub_652F28(a2) || sub_652F58(a2, 2))
      && sub_520E54(a1, a2))
    {
      unint64_t v32 = *(void *)(a1 + 2000);
      int v33 = *(_DWORD *)(a1 + 2008);
      if (sub_652F28(a2))
      {
        unint64_t v7 = sub_521214(a1, (void *)a2);
        if ((v7 & HIDWORD(v7)) != 0xFFFFFFFF)
        {
          unint64_t v32 = v7;
          int v33 = v8;
        }
      }
      sub_3AEF0((unsigned int *)&v32, *(void *)(a1 + 1856), *(_DWORD *)(a1 + 1864), (uint64_t)&v30);
      sub_3D2668((uint64_t)&v25, (uint64_t)&v30, 8);
      int v24 = 6;
      unint64_t v9 = *(void *)(a3 + 48);
      if (v9 >= *(void *)(a3 + 56))
      {
        int v11 = sub_52262C((void **)(a3 + 40), (uint64_t)&v25, &v24);
      }
      else
      {
        long long v10 = v25;
        *(void *)(v9 + 16) = v26;
        *(_OWORD *)unint64_t v9 = v10;
        sub_4D4C4((void *)(v9 + 24), (uint64_t *)&__p);
        *(_DWORD *)(v9 + 48) = v29;
        *(void *)(v9 + 56) = 0x7FFFFFFF00000006;
        *(void *)(v9 + 64) = 0x7FFFFFFFFFFFFFFFLL;
        int v11 = (char *)(v9 + 72);
        *(void *)(a3 + 48) = v9 + 72;
      }
      *(void *)(a3 + 48) = v11;
      BOOL v12 = (char *)__p;
      if (__p)
      {
        unint64_t v13 = v28;
        BOOL v14 = __p;
        if (v28 != __p)
        {
          double v15 = v28;
          do
          {
            unsigned int v17 = (void *)*((void *)v15 - 3);
            v15 -= 24;
            uint64_t v16 = v17;
            if (v17)
            {
              *((void *)v13 - 2) = v16;
              operator delete(v16);
            }
            unint64_t v13 = v15;
          }
          while (v15 != v12);
          BOOL v14 = __p;
        }
        uint64_t v28 = v12;
        operator delete(v14);
      }
      BOOL v18 = (char *)v30;
      if (v30)
      {
        uint64_t v19 = v31;
        uint64_t v20 = v30;
        if (v31 != v30)
        {
          uint64_t v21 = v31;
          do
          {
            int v23 = (void *)*((void *)v21 - 3);
            v21 -= 24;
            int v22 = v23;
            if (v23)
            {
              *((void *)v19 - 2) = v22;
              operator delete(v22);
            }
            uint64_t v19 = v21;
          }
          while (v21 != v18);
          uint64_t v20 = v30;
        }
        uint64_t v31 = v18;
        operator delete(v20);
      }
    }
  }
}

void sub_51E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_513E34((uint64_t)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_51E120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_51E134(unint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 10144) != *(void *)(a2 + 10152)
    && (*(_DWORD *)(a2 + 10168) & 0xFFFFFFFE) == 2
    && *(void *)(a2 + 1064) != *(void *)(a2 + 1072))
  {
    uint64_t v3 = result;
    BOOL result = sub_470ADC((void *)a2);
    if (result)
    {
      if ((int)(-1775253149 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5)) >= 1)
      {
        uint64_t v4 = -1775253149 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5);
        do
        {
          uint64_t v5 = v4--;
          BOOL result = sub_51690C((void *)(a2 + 1064), v4);
          unint64_t v6 = result;
          uint64_t v7 = *(int *)(result + 24);
          while (v7 > *(int *)(v6 + 40))
          {
            uint64_t v8 = (unsigned int *)sub_470B40((void *)a2, --v7);
            unint64_t v9 = *v8 | ((unint64_t)(v8[1] & 0x1FFFFFFF) << 32);
            BOOL result = sub_515898(v3, &v9);
            if ((result & 1) == 0) {
              return result;
            }
          }
          *(unsigned char *)(v6 + 2225) = 1;
        }
        while (v5 >= 2);
      }
    }
  }
  return result;
}

unint64_t sub_51E254(unint64_t result, void *a2, uint64_t a3)
{
  if (a2[63] >= *(void *)(result + 1816)) {
    uint64_t v4 = *(void *)(result + 1816);
  }
  else {
    uint64_t v4 = a2[63];
  }
  if ((*(_DWORD *)(a3 + 64) & 0xFFFFFFFE) != 2) {
    goto LABEL_30;
  }
  uint64_t v6 = result;
  sub_470B1C(a2, &v25);
  uint64_t v7 = 0;
  while (1)
  {
    BOOL result = sub_46C7C4((uint64_t)a2, v22);
    unint64_t v9 = v26;
    uint64_t v11 = v23;
    unint64_t v10 = v24;
    if (!v26) {
      break;
    }
    unint64_t v12 = v27;
    BOOL result = sub_470ADC(v26);
    unint64_t v13 = result;
    if (v11)
    {
      BOOL result = sub_470ADC(v11);
      if (v12 >= v13 || v10 >= result)
      {
        if (v12 < v13 == v10 < result) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v15 = sub_470B40(v9, v12);
        BOOL result = sub_470B40(v11, v10);
        if (v15 == result) {
          goto LABEL_28;
        }
      }
    }
    else if (v12 >= result)
    {
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v16 = (unsigned int *)sub_470B40(v26, v27 - 1);
    v22[0] = *v16 | ((unint64_t)(v16[1] & 0x1FFFFFFF) << 32);
    if ((sub_515898(v6, (unint64_t *)v22) & 1) == 0)
    {
      BOOL result = sub_52093C(v6, v22, a3);
      if (!result) {
        goto LABEL_28;
      }
    }
    unsigned int v17 = (int *)sub_2D5D58(*(void *)(v6 + 8), v22[0]);
    BOOL v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 9u)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = v18[4];
      if (v8) {
        uint64_t v8 = *(unsigned int *)((char *)v17 + v8);
      }
    }
    v7 += v8;
    --v27;
  }
  if (v23)
  {
    BOOL result = sub_470ADC(v23);
    if (v10 < result) {
      goto LABEL_23;
    }
  }
LABEL_28:
  if (v4 <= *(void *)(v6 + 1808) + v7) {
    uint64_t v4 = *(void *)(v6 + 1808) + v7;
  }
LABEL_30:
  uint64_t v19 = *(void *)a3;
  if (*(void *)a3 <= v4) {
    uint64_t v19 = v4;
  }
  *(void *)(a3 + 8) = v19;
  uint64_t v20 = *(void *)(a3 + 40);
  for (uint64_t i = *(void *)(a3 + 48); v20 != i; v20 += 72)
  {
    if (*(_DWORD *)(v20 + 56) == 5 && *(void *)(v20 + 64) == 0x7FFFFFFFFFFFFFFFLL) {
      *(void *)(v20 + 64) = *(void *)(a3 + 8);
    }
  }
  return result;
}

uint64_t *sub_51E464(unint64_t a1, uint64_t a2)
{
  BOOL result = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    do
    {
      BOOL result = (uint64_t *)sub_51C298(a1, v4);
      v4 += 12328;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_51E4BC(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v44);
  unint64_t v4 = sub_2E1AA4((uint64_t)v44);
  unint64_t v5 = sub_2E40A4((uint64_t)v44);
  double v6 = (double)v4;
  double v7 = (double)HIDWORD(v4);
  double v8 = (double)HIDWORD(v5);
  double v9 = (double)v5 - (double)v4;
  double v10 = (double)HIDWORD(v5) - (double)HIDWORD(v4);
  double v11 = v9 * v9 + v10 * v10;
  double v12 = fabs(v11);
  unsigned int v14 = *a3;
  unsigned int v13 = a3[1];
  if (v11 == 0.0 || v12 < 2.22044605e-16)
  {
    double v16 = (double)v13;
    double v17 = (double)v14;
    goto LABEL_18;
  }
  double v17 = (double)v14;
  double v16 = (double)v13;
  double v18 = (v9 * ((double)v14 - v6) + v10 * ((double)v13 - v7)) / v11;
  if (v18 <= 0.0)
  {
    double v41 = (double)v4;
    double v8 = (double)HIDWORD(v4);
    goto LABEL_20;
  }
  if (v18 >= 1.0)
  {
LABEL_18:
    double v41 = (double)v5;
    goto LABEL_20;
  }
  double v19 = v10 * v18 + v7;
  double v20 = v9 * v18 + v6;
  if (v20 < 0.0) {
    double v21 = -0.5;
  }
  else {
    double v21 = 0.5;
  }
  unsigned int v22 = (v20 + v21);
  if (v19 < 0.0) {
    double v23 = -0.5;
  }
  else {
    double v23 = 0.5;
  }
  unsigned int v24 = (v19 + v23);
  if (v24 >= 0xFFFFFFFE) {
    unsigned int v24 = -2;
  }
  double v8 = (double)v24;
  double v41 = (double)v22;
LABEL_20:
  long double v25 = exp(3.14159265 - v16 * 6.28318531 / 4294967300.0);
  double v42 = (v17 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  long double v43 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 * 0.0174532925;
  long double v26 = exp(3.14159265 - v8 * 6.28318531 / 4294967300.0);
  long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
  long double v28 = sin((v43 - v27) * 0.5);
  long double v29 = v28 * v28;
  double v30 = cos(v43);
  long double v31 = v30 * cos(v27);
  long double v32 = sin((v42 - (v41 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
  long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
  double v34 = (v33 + v33) * 6372797.56 * 100.0;
  if (v34 >= 0.0)
  {
    double v35 = v34;
    if (v34 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    double v35 = v34;
    if (v34 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v36 = (uint64_t)(v34 + v34);
    if (v36 >= 1) {
      --v36;
    }
  }
  double v35 = (double)(v36 >> 1);
LABEL_28:
  if (v35 >= 9.22337204e18)
  {
    uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
    unsigned int v39 = __p;
    if (!__p) {
      return v38;
    }
    goto LABEL_40;
  }
  if (v34 >= 0.0)
  {
    if (v34 >= 4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    if (v34 <= -4.50359963e15) {
      goto LABEL_39;
    }
    uint64_t v37 = (uint64_t)(v34 + v34);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v34 = (double)(v37 >> 1);
LABEL_39:
  uint64_t v38 = (uint64_t)v34;
  unsigned int v39 = __p;
  if (__p)
  {
LABEL_40:
    unsigned __int8 v46 = v39;
    operator delete(v39);
  }
  return v38;
}

void sub_51E838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51E858(uint64_t a1, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  sub_2E4F74(*(void *)(a1 + 8), *a2, (unint64_t *)&__p);
  double v7 = (unint64_t *)__p;
  double v8 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    if (!__p) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    char v9 = sub_515898(a1, v7++);
    if (v7 == v8) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
  }
  while ((v10 & 1) != 0);
  double v7 = (unint64_t *)__p;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = 0;
    if (__p) {
      goto LABEL_28;
    }
    return v19;
  }
  double v11 = v23;
  if (__p == v23)
  {
    uint64_t v19 = 1;
    double v7 = v23;
    if (!v23) {
      return v19;
    }
    goto LABEL_28;
  }
  do
  {
    double v12 = (int *)sub_2D5D58(*(void *)(a1 + 8), *v7);
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (v14 < 0xB)
    {
LABEL_21:
      uint64_t v21 = sub_51E4BC(a1, (uint64_t *)v7, a3);
      sub_5156FC(a4, v7, (unint64_t *)&v21);
      goto LABEL_22;
    }
    if (v13[5])
    {
      if (v14 < 0x39 || (*(int *)((char *)v12 + v13[5]) & 3) != 0) {
        goto LABEL_21;
      }
    }
    else if (v14 < 0x39)
    {
      goto LABEL_21;
    }
    uint64_t v16 = v13[28];
    if (!v16) {
      goto LABEL_21;
    }
    int v17 = *(int *)((char *)v12 + v16);
    if ((v17 & 0x23) == 0 && (v17 & 7) != 4) {
      goto LABEL_21;
    }
LABEL_22:
    ++v7;
  }
  while (v7 != v11);
  uint64_t v19 = 1;
  double v7 = (unint64_t *)__p;
  if (!__p) {
    return v19;
  }
LABEL_28:
  double v23 = v7;
  operator delete(v7);
  return v19;
}

void sub_51E9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_51E9E8(uint64_t a1, unint64_t *a2, int a3, int a4, uint64_t a5)
{
  char v10 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  double v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x2Fu)
  {
    uint64_t v12 = v11[23];
    if (v12)
    {
      unsigned int v13 = *((unsigned __int8 *)v10 + v12);
      BOOL v14 = v13 > 0x2D;
      uint64_t v15 = (1 << v13) & 0x208040000000;
      if (!v14 && v15 != 0) {
        goto LABEL_11;
      }
    }
  }
  int v17 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
  double v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x2Fu)
  {
    uint64_t v19 = v18[23];
    if (v19)
    {
      if (*((unsigned char *)v17 + v19) == 47)
      {
LABEL_11:
        double v20 = (int *)sub_2D5D58(*(void *)(a1 + 8), *a2);
        uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
          uint64_t v23 = *(unsigned int *)((char *)v20 + v22);
        }
        else {
          uint64_t v23 = 0;
        }
        sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)&v32);
        sub_2E4B5C((uint64_t)&v32, &v34);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        unsigned int v24 = v34;
        if (a3 & a4) {
          goto LABEL_32;
        }
        size_t v25 = v35 - (unsigned char *)v34;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)v34) >> 2);
        if (v26 < 2 || v23 == 0) {
          goto LABEL_32;
        }
        long double v32 = 0;
        __p[0] = 0;
        __p[1] = 0;
        if (v35 == v34)
        {
          long double v29 = 0;
          long double v28 = 0;
          if (a3) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v26 >= 0x1555555555555556) {
            sub_2E00();
          }
          long double v28 = (char *)operator new(v35 - (unsigned char *)v34);
          long double v29 = &v28[12 * v26];
          long double v32 = v28;
          __p[1] = v29;
          memcpy(v28, v24, v25);
          __p[0] = v29;
          if (a3)
          {
LABEL_25:
            sub_520B58(a1, (uint64_t *)&v34, v23, 1, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            long double v28 = (char *)__src;
            long double v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            long double v29 = (char *)v31;
            if (!a4)
            {
LABEL_28:
              if (v28 == v29) {
                goto LABEL_29;
              }
              goto LABEL_40;
            }
LABEL_37:
            sub_520B58(a1, (uint64_t *)&v34, v23, 0, &__src);
            if (v28)
            {
              __p[0] = v28;
              operator delete(v28);
            }
            long double v28 = (char *)__src;
            long double v32 = (char *)__src;
            *(_OWORD *)long long __p = v31;
            long double v29 = (char *)v31;
            if (__src == (void *)v31)
            {
LABEL_29:
              if (!v29)
              {
LABEL_31:
                unsigned int v24 = v34;
LABEL_32:
                if (v24)
                {
                  double v35 = v24;
                  operator delete(v24);
                }
                return;
              }
LABEL_30:
              __p[0] = v29;
              operator delete(v29);
              goto LABEL_31;
            }
LABEL_40:
            if (*(unsigned char *)(a1 + 1704))
            {
              sub_46C6C(a5, *(void *)(a5 + 8), v28, v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 2));
              long double v29 = v28;
              if (!v28) {
                goto LABEL_31;
              }
            }
            else
            {
              sub_515D6C((void **)a5, (uint64_t *)v28);
              sub_515D6C((void **)a5, (uint64_t *)((char *)__p[0] - 12));
              long double v29 = v32;
              if (!v32) {
                goto LABEL_31;
              }
            }
            goto LABEL_30;
          }
        }
        if (!a4) {
          goto LABEL_28;
        }
        goto LABEL_37;
      }
    }
  }
}

void sub_51ECD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51ED38(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  long long v6 = *(_OWORD *)(a2 + 39);
  *(void *)(a1 + 88) = a2[41];
  *(_OWORD *)(a1 + 72) = v6;
  sub_4D4C4((void *)(a1 + 96), a2 + 42);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 90);
  *(unsigned char *)(a1 + 128) = a3;
  uint64_t v7 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v7;
  char v9 = (uint64_t *)a2[30];
  for (uint64_t i = (uint64_t *)a2[31]; v9 != i; v9 += 13)
    sub_51EE54((void *)a1, v9);
  return a1;
}

void sub_51EE08(_Unwind_Exception *exception_object)
{
  unint64_t v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
    unint64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[3] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_51EE54(void *a1, uint64_t *a2)
{
  uint64_t v2 = (_DWORD *)a2[9];
  uint64_t v3 = (_DWORD *)a2[10];
  if (v2 != v3)
  {
    double v34 = a1 + 5;
    double v35 = (void **)(a1 + 2);
    do
    {
      if (*v2)
      {
        if (*v2 == 1)
        {
          char v9 = (_DWORD *)a1[6];
          unint64_t v8 = a1[7];
          if ((unint64_t)v9 >= v8)
          {
            double v20 = (_DWORD *)*v34;
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v34) >> 2);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v20) >> 2);
            if (2 * v23 > v22) {
              unint64_t v22 = 2 * v23;
            }
            if (v23 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v24 = 0x1555555555555555;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              if (v24 > 0x1555555555555555) {
LABEL_44:
              }
                sub_188D718();
              size_t v25 = (char *)operator new(12 * v24);
            }
            else
            {
              size_t v25 = 0;
            }
            double v30 = &v25[12 * v21];
            *(void *)double v30 = *a2;
            *((_DWORD *)v30 + 2) = *((_DWORD *)a2 + 2);
            long long v31 = v30;
            if (v9 != v20)
            {
              do
              {
                uint64_t v32 = *(void *)(v9 - 3);
                v9 -= 3;
                int v33 = v9[2];
                *(void *)(v31 - 12) = v32;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v9 != v20);
              char v9 = (_DWORD *)*v34;
            }
            double v11 = v30 + 12;
            a1[5] = v31;
            a1[6] = v30 + 12;
            a1[7] = &v25[12 * v24];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            uint64_t v10 = *a2;
            v9[2] = *((_DWORD *)a2 + 2);
            *(void *)char v9 = v10;
            double v11 = v9 + 3;
          }
          a1[6] = v11;
        }
      }
      else
      {
        unsigned int v13 = (char *)a1[3];
        unint64_t v12 = a1[4];
        if ((unint64_t)v13 < v12)
        {
          uint64_t v6 = *a2;
          *((_DWORD *)v13 + 2) = *((_DWORD *)a2 + 2);
          *(void *)unsigned int v13 = v6;
          uint64_t v7 = v13 + 12;
        }
        else
        {
          BOOL v14 = (char *)*v35;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*v35) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 2);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x1555555555555555;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            if (v18 > 0x1555555555555555) {
              goto LABEL_44;
            }
            uint64_t v19 = (char *)operator new(12 * v18);
          }
          else
          {
            uint64_t v19 = 0;
          }
          unint64_t v26 = &v19[12 * v15];
          *(void *)unint64_t v26 = *a2;
          *((_DWORD *)v26 + 2) = *((_DWORD *)a2 + 2);
          long double v27 = v26;
          if (v13 != v14)
          {
            do
            {
              uint64_t v28 = *(void *)(v13 - 12);
              v13 -= 12;
              int v29 = *((_DWORD *)v13 + 2);
              *(void *)(v27 - 12) = v28;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v29;
            }
            while (v13 != v14);
            unsigned int v13 = (char *)*v35;
          }
          uint64_t v7 = v26 + 12;
          a1[2] = v27;
          a1[3] = v26 + 12;
          a1[4] = &v19[12 * v18];
          if (v13) {
            operator delete(v13);
          }
        }
        a1[3] = v7;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

BOOL *sub_51F0EC(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "waypoint_location_enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  strcpy((char *)__p, "waypoint_place_enabled");
  HIBYTE(__p[2]) = 22;
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "waypoint_id_enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  return a1;
}

void sub_51F20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_51F230(uint64_t a1, void *a2, uint64_t a3)
{
  v75[0] = (char *)operator new(0x20uLL);
  long long v72 = xmmword_20B8E90;
  *(_OWORD *)&v75[1] = xmmword_20B8E90;
  strcpy(v75[0], "enable_arrival_info_calculation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)a1 = v6;
  v75[0] = (char *)operator new(0x28uLL);
  long long v69 = xmmword_20B9260;
  *(_OWORD *)&v75[1] = xmmword_20B9260;
  strcpy(v75[0], "enable_arrival_region_calculation");
  BOOL v7 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  v75[0] = (char *)operator new(0x38uLL);
  long long v68 = xmmword_20B9A10;
  *(_OWORD *)&v75[1] = xmmword_20B9A10;
  strcpy(v75[0], "enable_non_dap_arrival_regions_for_charging_stops");
  BOOL v8 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 2) = v8;
  v75[0] = (char *)operator new(0x28uLL);
  long long v71 = xmmword_20B9280;
  *(_OWORD *)&v75[1] = xmmword_20B9280;
  strcpy(v75[0], "enable_non_dap_pre_arrival_regions");
  BOOL v9 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 3) = v9;
  HIBYTE(v75[2]) = 17;
  strcpy((char *)v75, "pullback_distance");
  double v10 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_17:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_28:
    *(void *)(a1 + 8) = (uint64_t)v10;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v75[0]);
LABEL_30:
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "use_all_segment_geometry_points");
  BOOL v14 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 16) = v14;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "end_of_route_distance_threshold");
  double v15 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v15 >= 0.0)
  {
    double v16 = v15;
    if (v15 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    double v16 = v15;
    if (v15 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v17 = (uint64_t)(v15 + v15);
    if (v17 >= 1) {
      --v17;
    }
  }
  double v16 = (double)(v17 >> 1);
LABEL_40:
  if (v16 < 9.22337204e18)
  {
    if (v15 >= 0.0)
    {
      if (v15 >= 4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15) + 1;
    }
    else
    {
      if (v15 <= -4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v18 = (uint64_t)(v15 + v15);
      if (v18 >= 1) {
        --v18;
      }
    }
    double v15 = (double)(v18 >> 1);
LABEL_51:
    *(void *)(a1 + 24) = (uint64_t)v15;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v75[0]);
LABEL_53:
  v75[0] = (char *)operator new(0x30uLL);
  long long v70 = xmmword_20B93C0;
  *(_OWORD *)&v75[1] = xmmword_20B93C0;
  qmemcpy(v67, "ute_distance_thrperson_end_of_ro", sizeof(v67));
  strcpy(v75[0], "person_end_of_route_distance_threshold_m");
  if (!sub_58070(a2, (uint64_t)v75))
  {
    *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  uint64_t v19 = (char *)operator new(0x30uLL);
  long long __p = v19;
  long long v74 = v70;
  *(_OWORD *)uint64_t v19 = v67[1];
  *((_OWORD *)v19 + 1) = v67[0];
  strcpy(v19 + 32, "eshold_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, &__p);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }
  operator delete(__p);
  if (SHIBYTE(v75[2]) < 0) {
LABEL_75:
  }
    operator delete(v75[0]);
LABEL_56:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v69;
  strcpy(v75[0], "enable_arrival_points_calculation");
  BOOL v20 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 40) = v20;
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "arrival_point_radius");
  double v21 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_66;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_66:
  if (v22 < 9.22337204e18)
  {
    if (v21 >= 0.0)
    {
      if (v21 >= 4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21) + 1;
    }
    else
    {
      if (v21 <= -4.50359963e15) {
        goto LABEL_79;
      }
      uint64_t v24 = (uint64_t)(v21 + v21);
      if (v24 >= 1) {
        --v24;
      }
    }
    double v21 = (double)(v24 >> 1);
LABEL_79:
    *(void *)(a1 + 48) = (uint64_t)v21;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  *(void *)(a1 + 48) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v75[0]);
LABEL_81:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A80;
  strcpy(v75[0], "small_polygon_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 56) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "default_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 60) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93D0;
  strcpy(v75[0], "fallback_end_navigation_timeout_threshold");
  *(_DWORD *)(a1 + 64) = 10 * sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B91A0;
  strcpy(v75[0], "ev_charging_time_multiplier");
  double v25 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 72) = v25;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "concave_polygon_angle_threshold");
  double v26 = sub_5C7E8(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(double *)(a1 + 80) = v26;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "min_polygon_parking_segment_length");
  double v27 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v27 >= 0.0)
  {
    double v28 = v27;
    if (v27 >= 4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    double v28 = v27;
    if (v27 <= -4.50359963e15) {
      goto LABEL_99;
    }
    uint64_t v29 = (uint64_t)(v27 + v27);
    if (v29 >= 1) {
      --v29;
    }
  }
  double v28 = (double)(v29 >> 1);
LABEL_99:
  if (v28 < 9.22337204e18)
  {
    if (v27 >= 0.0)
    {
      if (v27 >= 4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27) + 1;
    }
    else
    {
      if (v27 <= -4.50359963e15) {
        goto LABEL_110;
      }
      uint64_t v30 = (uint64_t)(v27 + v27);
      if (v30 >= 1) {
        --v30;
      }
    }
    double v27 = (double)(v30 >> 1);
LABEL_110:
    *(void *)(a1 + 88) = (uint64_t)v27;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  *(void *)(a1 + 88) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v75[0]);
LABEL_112:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93A0;
  strcpy(v75[0], "min_polygon_drivable_segment_length");
  double v31 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v31 >= 0.0)
  {
    double v32 = v31;
    if (v31 >= 4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31) + 1;
  }
  else
  {
    double v32 = v31;
    if (v31 <= -4.50359963e15) {
      goto LABEL_120;
    }
    uint64_t v33 = (uint64_t)(v31 + v31);
    if (v33 >= 1) {
      --v33;
    }
  }
  double v32 = (double)(v33 >> 1);
LABEL_120:
  if (v32 < 9.22337204e18)
  {
    if (v31 >= 0.0)
    {
      if (v31 >= 4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31) + 1;
    }
    else
    {
      if (v31 <= -4.50359963e15) {
        goto LABEL_131;
      }
      uint64_t v34 = (uint64_t)(v31 + v31);
      if (v34 >= 1) {
        --v34;
      }
    }
    double v31 = (double)(v34 >> 1);
LABEL_131:
    *(void *)(a1 + 96) = (uint64_t)v31;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_132;
  }
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v75[0]);
LABEL_133:
  v75[0] = (char *)operator new(0x28uLL);
  long long v70 = xmmword_20B8FD0;
  *(_OWORD *)&v75[1] = xmmword_20B8FD0;
  strcpy(v75[0], "small_polygon_parking_segment_length");
  double v35 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v35 >= 0.0)
  {
    double v36 = v35;
    if (v35 >= 4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35) + 1;
  }
  else
  {
    double v36 = v35;
    if (v35 <= -4.50359963e15) {
      goto LABEL_141;
    }
    uint64_t v37 = (uint64_t)(v35 + v35);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v36 = (double)(v37 >> 1);
LABEL_141:
  if (v36 < 9.22337204e18)
  {
    if (v35 >= 0.0)
    {
      if (v35 >= 4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35) + 1;
    }
    else
    {
      if (v35 <= -4.50359963e15) {
        goto LABEL_152;
      }
      uint64_t v38 = (uint64_t)(v35 + v35);
      if (v38 >= 1) {
        --v38;
      }
    }
    double v35 = (double)(v38 >> 1);
LABEL_152:
    *(void *)(a1 + 104) = (uint64_t)v35;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v75[0]);
LABEL_154:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9240;
  strcpy(v75[0], "small_polygon_drivable_segment_length");
  double v39 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v39 >= 0.0)
  {
    double v40 = v39;
    if (v39 >= 4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39) + 1;
  }
  else
  {
    double v40 = v39;
    if (v39 <= -4.50359963e15) {
      goto LABEL_162;
    }
    uint64_t v41 = (uint64_t)(v39 + v39);
    if (v41 >= 1) {
      --v41;
    }
  }
  double v40 = (double)(v41 >> 1);
LABEL_162:
  if (v40 < 9.22337204e18)
  {
    if (v39 >= 0.0)
    {
      if (v39 >= 4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      if (v39 <= -4.50359963e15) {
        goto LABEL_173;
      }
      uint64_t v42 = (uint64_t)(v39 + v39);
      if (v42 >= 1) {
        --v42;
      }
    }
    double v39 = (double)(v42 >> 1);
LABEL_173:
    *(void *)(a1 + 112) = (uint64_t)v39;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  *(void *)(a1 + 112) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v75[0]);
LABEL_175:
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20E12D0;
  *(_OWORD *)&v75[1] = xmmword_20E12D0;
  strcpy(v75[0], "extra_arrival_polygon_segment_distance");
  double v43 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v43 >= 0.0)
  {
    double v44 = v43;
    if (v43 >= 4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43) + 1;
  }
  else
  {
    double v44 = v43;
    if (v43 <= -4.50359963e15) {
      goto LABEL_183;
    }
    uint64_t v45 = (uint64_t)(v43 + v43);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_183:
  if (v44 < 9.22337204e18)
  {
    if (v43 >= 0.0)
    {
      if (v43 >= 4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      if (v43 <= -4.50359963e15) {
        goto LABEL_194;
      }
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v43 = (double)(v46 >> 1);
LABEL_194:
    *(void *)(a1 + 120) = (uint64_t)v43;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v75[0]);
LABEL_196:
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "default_arrival_detection_max_distance");
  double v47 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v47 >= 0.0)
  {
    double v48 = v47;
    if (v47 >= 4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47) + 1;
  }
  else
  {
    double v48 = v47;
    if (v47 <= -4.50359963e15) {
      goto LABEL_204;
    }
    uint64_t v49 = (uint64_t)(v47 + v47);
    if (v49 >= 1) {
      --v49;
    }
  }
  double v48 = (double)(v49 >> 1);
LABEL_204:
  if (v48 < 9.22337204e18)
  {
    if (v47 >= 0.0)
    {
      if (v47 >= 4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47) + 1;
    }
    else
    {
      if (v47 <= -4.50359963e15) {
        goto LABEL_215;
      }
      uint64_t v50 = (uint64_t)(v47 + v47);
      if (v50 >= 1) {
        --v50;
      }
    }
    double v47 = (double)(v50 >> 1);
LABEL_215:
    *(void *)(a1 + 128) = (uint64_t)v47;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    goto LABEL_216;
  }
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v75[0]);
LABEL_217:
  HIBYTE(v75[2]) = 20;
  strcpy((char *)v75, "fallback_bbox_radius");
  double v51 = sub_5C7E8(a2, (uint64_t)v75) * 100.0;
  if (v51 >= 0.0)
  {
    double v52 = v51;
    if (v51 >= 4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51) + 1;
  }
  else
  {
    double v52 = v51;
    if (v51 <= -4.50359963e15) {
      goto LABEL_225;
    }
    uint64_t v53 = (uint64_t)(v51 + v51);
    if (v53 >= 1) {
      --v53;
    }
  }
  double v52 = (double)(v53 >> 1);
LABEL_225:
  if (v52 < 9.22337204e18)
  {
    if (v51 >= 0.0)
    {
      if (v51 >= 4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51) + 1;
    }
    else
    {
      if (v51 <= -4.50359963e15) {
        goto LABEL_236;
      }
      uint64_t v54 = (uint64_t)(v51 + v51);
      if (v54 >= 1) {
        --v54;
      }
    }
    double v51 = (double)(v54 >> 1);
LABEL_236:
    *(void *)(a1 + 136) = (uint64_t)v51;
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
      goto LABEL_238;
    }
    goto LABEL_237;
  }
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0) {
    goto LABEL_238;
  }
LABEL_237:
  operator delete(v75[0]);
LABEL_238:
  v75[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v75[1] = xmmword_20B93E0;
  strcpy(v75[0], "should_add_parking_lot_based_arrival_region");
  BOOL v55 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 144) = v55;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9390;
  strcpy(v75[0], "should_add_fallback_timeout_bbox");
  BOOL v56 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 145) = v56;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v71;
  strcpy(v75[0], "enable_initiate_approaching_region");
  BOOL v57 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 146) = v57;
  v75[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9800;
  strcpy(v75[0], "parking_suggest_walking_region");
  uint64_t v58 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v58 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_51F0EC((BOOL *)(a1 + 147), (void *)*v58);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  strcpy((char *)v75, "prepare_to_park_region");
  HIBYTE(v75[2]) = 22;
  std::string v59 = sub_5D58C(a2, (uint64_t)v75);
  if (*((_DWORD *)v59 + 2) != 2)
  {
    int v66 = __cxa_allocate_exception(8uLL);
    *int v66 = &off_23FDF58;
  }
  sub_51F0EC((BOOL *)(a1 + 150), (void *)*v59);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v70;
  strcpy(v75[0], "initiate_approaching_region_radius_m");
  *(void *)(a1 + 160) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  long long v72 = xmmword_20B9960;
  *(_OWORD *)&v75[1] = xmmword_20B9960;
  strcpy(v75[0], "parking_suggest_walking_region_radius_m");
  *(void *)(a1 + 168) = sub_5CDE0(a2, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "circle_approximation_num_interpolations");
  int v60 = sub_319F48(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(_DWORD *)(a1 + 176) = v60;
  v75[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v75[1] = xmmword_20B9A90;
  strcpy(v75[0], "enable_walkable_region_destination_to_ap_distance_threshold");
  BOOL v61 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 180) = v61;
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "destination_to_end_distance_threshold_m");
  *(void *)(a1 + 184) = sub_5CDE0(a3, v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v75[1] = v72;
  strcpy(v75[0], "walkable_region_poi_excluded_categories");
  sub_5C308(a2, (uint64_t)v75, a1 + 192);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = v68;
  strcpy(v75[0], "walkable_region_poi_address_allowed_country_codes");
  sub_5C568(a2, (uint64_t)v75, a1 + 216);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B99E0;
  strcpy(v75[0], "always_return_walkable_region_for_user_created_routes");
  BOOL v62 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 256) = v62;
  v75[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v75[1] = xmmword_20B8DF0;
  strcpy(v75[0], "always_return_walkable_region_for_apple_curated_routes");
  BOOL v63 = sub_29D62C(a2, (uint64_t)v75);
  if (SHIBYTE(v75[2]) < 0) {
    operator delete(v75[0]);
  }
  *(unsigned char *)(a1 + 257) = v63;
  return a1;
}

void sub_520828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_52093C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 40);
  sub_29549C(*(void *)(a1 + 8), *a2, (uint64_t)v29);
  if (*(void *)(v3 + 24) == *(void *)(v3 + 32)) {
    goto LABEL_36;
  }
  if (__p == v31) {
    goto LABEL_36;
  }
  unint64_t v4 = sub_2E1AA4((uint64_t)v29);
  BOOL v7 = *(void **)(v3 + 24);
  BOOL v8 = *(void **)(v3 + 32);
  if (v7 == v8) {
    goto LABEL_36;
  }
  int v9 = 0;
  do
  {
    double v10 = (_DWORD *)v7[1];
    double v11 = (_DWORD *)(*v7 + 12);
    if ((_DWORD *)*v7 != v10 && v11 != v10)
    {
      do
      {
        unsigned int v13 = *(v11 - 2);
        unsigned int v14 = v11[1];
        if (v13 >= HIDWORD(v4))
        {
          if (v14 < HIDWORD(v4))
          {
LABEL_17:
            LODWORD(v5) = *v11;
            LODWORD(v6) = *(v11 - 3);
            double v6 = (double)*(unint64_t *)&v6;
            double v5 = ((double)HIDWORD(v4) - (double)v13)
               / ((double)v14 - (double)v13)
               * ((double)*(unint64_t *)&v5 - v6)
               + v6;
            if (v5 < (double)v4) {
              v9 ^= 1u;
            }
          }
        }
        else if (v14 >= HIDWORD(v4))
        {
          goto LABEL_17;
        }
        v11 += 3;
      }
      while (v11 != v10);
    }
    v7 += 3;
  }
  while (v7 != v8);
  if (!v9)
  {
LABEL_36:
    BOOL v26 = 0;
    double v27 = __p;
    if (!__p) {
      return v26;
    }
LABEL_37:
    double v31 = v27;
    operator delete(v27);
    return v26;
  }
  unint64_t v15 = sub_2E40A4((uint64_t)v29);
  uint64_t v18 = *(void **)(v3 + 24);
  uint64_t v19 = *(void **)(v3 + 32);
  if (v18 != v19)
  {
    int v20 = 0;
    while (1)
    {
      double v21 = (_DWORD *)v18[1];
      double v22 = (_DWORD *)(*v18 + 12);
      if ((_DWORD *)*v18 != v21 && v22 != v21) {
        break;
      }
LABEL_22:
      v18 += 3;
      if (v18 == v19) {
        goto LABEL_40;
      }
    }
    while (1)
    {
      unsigned int v24 = *(v22 - 2);
      unsigned int v25 = v22[1];
      if (v24 >= HIDWORD(v15))
      {
        if (v25 < HIDWORD(v15))
        {
LABEL_34:
          LODWORD(v16) = *v22;
          LODWORD(v17) = *(v22 - 3);
          double v17 = (double)*(unint64_t *)&v17;
          double v16 = ((double)HIDWORD(v15) - (double)v24)
              / ((double)v25 - (double)v24)
              * ((double)*(unint64_t *)&v16 - v17)
              + v17;
          if (v16 < (double)v15) {
            v20 ^= 1u;
          }
        }
      }
      else if (v25 >= HIDWORD(v15))
      {
        goto LABEL_34;
      }
      v22 += 3;
      if (v22 == v21) {
        goto LABEL_22;
      }
    }
  }
  int v20 = 0;
LABEL_40:
  BOOL v26 = v20 != 0;
  double v27 = __p;
  if (__p) {
    goto LABEL_37;
  }
  return v26;
}

void sub_520B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_520B58(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 1696);
  if (v6 >= a3)
  {
    if (a4)
    {
      uint64_t v8 = a2[1];
      uint64_t v16 = *(void *)(v8 - 12);
      int v9 = *(_DWORD *)(v8 - 4);
    }
    else
    {
      uint64_t v16 = *(void *)*a2;
      int v9 = *(_DWORD *)(*a2 + 8);
    }
    int v17 = v9;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    double v10 = operator new(0xCuLL);
    a5[1] = v10 + 3;
    a5[2] = v10 + 3;
    *(void *)double v10 = v16;
    v10[2] = v17;
    *a5 = v10;
  }
  else if (v6)
  {
    double v7 = (double)v6 / (double)a3;
    if (!a4) {
      double v7 = 1.0 - v7;
    }
    sub_32F08(a2, a4 ^ 1, 0, a5, v7);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t v12 = (const void *)*a2;
    uint64_t v11 = a2[1];
    int64_t v13 = v11 - *a2;
    if (v11 != *a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unsigned int v14 = (char *)operator new(v13);
      *a5 = v14;
      a5[1] = v14;
      unint64_t v15 = &v14[4 * (v13 >> 2)];
      a5[2] = v15;
      memcpy(v14, v12, v13);
      a5[1] = v15;
    }
  }
}

void sub_520CC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_520CE0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[133] != a2[134] && sub_470ADC(a2))
  {
    uint64_t v6 = *(void *)(a2[134] - 1528);
    if (v6 >= *(void *)(a1 + 1736)) {
      uint64_t v6 = *(void *)(a1 + 1736);
    }
    uint64_t v15 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = (unsigned int *)sub_470B50((uint64_t)a2);
    sub_2954EC(v7, (((unint64_t)(v8[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v8[1] << 32) | *v8) ^ 0x1000000000000, (uint64_t)&v11);
    sub_2E4B5C((uint64_t)&v11, v14);
    if (__p)
    {
      int64_t v13 = __p;
      operator delete(__p);
    }
    unsigned int v9 = sub_46CAC4((uint64_t)a2);
    sub_31854((uint64_t *)v14, 0, &v11, 0.0, (double)v9 / 1000000000.0);
    double v10 = v11;
    if (v11 != __p)
    {
      sub_516158((char **)(a3 + 16), (uint64_t *)((char *)__p - 12), &v15);
      double v10 = v11;
    }
    if (v10)
    {
      long long __p = v10;
      operator delete(v10);
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
}

void sub_520E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_520E54(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 10992);
  if (v4 == 3)
  {
    if (*(unsigned char *)(a1 + 1945)) {
      return 1;
    }
  }
  else if (v4 == 4 && *(unsigned char *)(a1 + 1944))
  {
    return 1;
  }
  uint64_t v6 = sub_470B50(a2);
  uint64_t v7 = (int **)(v6 + 8);
  uint64_t v8 = *(int **)(v6 + 8);
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x2Fu)
  {
    uint64_t v10 = v9[23];
    if (v10)
    {
      unsigned int v11 = *((unsigned __int8 *)v8 + v10);
      BOOL v12 = v11 > 0x1A;
      int v13 = (1 << v11) & 0x4810001;
      if (!v12 && v13 != 0)
      {
        unsigned int v15 = *(_DWORD *)(v6 + 4);
        int v16 = (v15 & 0x40000000) != 0 ? 2 : v15 >> 31;
        uint64_t result = sub_3F4FC8(v7, v16);
        if (!result) {
          return result;
        }
      }
    }
  }
  if ((*(_DWORD *)(a2 + 10988) - 1) <= 1)
  {
    uint64_t v17 = *(void *)(a2 + 7432);
    if (*(void *)(a2 + 7424) != v17)
    {
      if (*(void *)(a1 + 1928))
      {
        uint64_t result = (uint64_t)sub_13A8C((void *)(a1 + 1904), v17 - 24);
        if (!result) {
          return result;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 1868))
  {
    sub_5F3038(&v46, 2);
    sub_10A1D50(&v46, (uint64_t *)(a2 + 11120), 1, (uint64_t)&__p);
    uint64_t v18 = (unsigned int *)__p;
    uint64_t v19 = v45;
    v47[0] = (unsigned int *)(a2 + 10880);
    v47[1] = (unsigned int *)a1;
    if (__p == v45)
    {
LABEL_31:
      BOOL v22 = 1;
      uint64_t v23 = v18;
      if (!v18) {
        goto LABEL_41;
      }
    }
    else
    {
      while (!sub_522BD0(v47, v18))
      {
        v18 += 26;
        if (v18 == v19)
        {
          int v20 = (unsigned int *)__p;
          uint64_t v18 = v45;
          if (__p == v45) {
            goto LABEL_31;
          }
          if (__p)
          {
            do
            {
              double v21 = (void *)*((void *)v18 - 4);
              if (v21)
              {
                *((void *)v18 - 3) = v21;
                operator delete(v21);
              }
              v18 -= 26;
            }
            while (v18 != v20);
            uint64_t v45 = v20;
            operator delete(__p);
          }
          return 0;
        }
      }
      uint64_t v23 = (unsigned int *)__p;
      uint64_t v18 = v45;
      BOOL v22 = __p == v45;
      if (!__p) {
        goto LABEL_41;
      }
    }
    unsigned int v24 = v23;
    if (!v22)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v18 - 4);
        if (v25)
        {
          *((void *)v18 - 3) = v25;
          operator delete(v25);
        }
        v18 -= 26;
      }
      while (v18 != v23);
      unsigned int v24 = __p;
    }
    uint64_t v45 = v23;
    operator delete(v24);
  }
LABEL_41:
  BOOL v26 = (char *)(a2 + 11095);
  uint64_t v27 = *(unsigned __int8 *)(a2 + 11095);
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a2 + 11080);
  }
  if (!v27) {
    return 1;
  }
  double v28 = (void *)sub_DAA2E4(a2 + 10880);
  long long __p = v28;
  uint64_t v29 = *(void *)(a1 + 1976);
  uint64_t v30 = *(void *)(a1 + 1984);
  if (v29 != v30)
  {
    while (*(void **)v29 != v28)
    {
      v29 += 16;
      if (v29 == v30) {
        goto LABEL_51;
      }
    }
  }
  if (v29 == v30)
  {
LABEL_51:
    uint64_t v32 = *(void *)(a1 + 1880);
    uint64_t v33 = *(void *)(a1 + 1888);
    if (v32 == v33)
    {
LABEL_77:
      char v43 = 1;
    }
    else
    {
      char v34 = *v26;
      if (*v26 >= 0) {
        size_t v35 = *v26;
      }
      else {
        size_t v35 = *(void *)(a2 + 11080);
      }
      if (v34 < 0)
      {
        double v36 = *(const void **)(a2 + 11072);
        while (1)
        {
          int v40 = *(char *)(v32 + 23);
          size_t v41 = v40 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v41 <= v35)
          {
            uint64_t v42 = v40 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v42, v36, v41)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_77;
          }
        }
      }
      else
      {
        while (1)
        {
          int v37 = *(char *)(v32 + 23);
          size_t v38 = v37 >= 0 ? *(unsigned __int8 *)(v32 + 23) : *(void *)(v32 + 8);
          if (v38 <= v35)
          {
            double v39 = v37 >= 0 ? (const void *)v32 : *(const void **)v32;
            if (!memcmp(v39, (const void *)(a2 + 11072), v38)) {
              break;
            }
          }
          v32 += 24;
          if (v32 == v33) {
            goto LABEL_77;
          }
        }
      }
      char v43 = 0;
    }
    LOBYTE(v47[0]) = v43;
    sub_516B4C((char **)(a1 + 1976), &__p, (char *)v47);
    int v31 = LOBYTE(v47[0]);
  }
  else
  {
    int v31 = *(unsigned __int8 *)(v29 + 8);
  }
  return v31 != 0;
}

void sub_521200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_521214(uint64_t a1, void *a2)
{
  for (uint64_t i = a2[134]; i != a2[133]; i -= 2400)
  {
    uint64_t v4 = i - 2400;
    int v5 = *(unsigned __int8 *)(i - 2072);
    if (v5 == 5)
    {
      uint64_t v6 = *(void *)(v4 + 24);
      BOOL v7 = v6 != 0;
      uint64_t v8 = v6 - 1;
      if (!v7) {
        uint64_t v8 = 0;
      }
      if (a2[1248] != a2[1249]) {
        return *(void *)(sub_652D48((uint64_t)a2, v8)[1] - 12);
      }
      unsigned int v11 = (unsigned int *)sub_470B40(a2, v8);
      sub_2954EC(*(void *)(a1 + 8), (((unint64_t)(v11[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v11[1] << 32) | *v11) ^ 0x1000000000000, (uint64_t)&v14);
      unint64_t v9 = sub_2E40A4((uint64_t)&v14);
      if (v15)
      {
        int v16 = v15;
        operator delete(v15);
      }
      return v9;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v14);
    sub_188FC78(&v14, (uint64_t)"Could not resolve transport mode transition coordinate.", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return -1;
}

void sub_521434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_521480(uint64_t a1)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_20E1710;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_20E1710;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_20E1710;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  uint64_t v2 = (char *)operator new(8uLL);
  *(void *)(a1 + 848) = v2;
  *(void *)(a1 + 856) = v2;
  *(void *)(a1 + 864) = v2 + 8;
  uint64_t v3 = (char *)operator new(0x7F0uLL);
  *(void *)(a1 + 824) = v3;
  *(void *)(a1 + 832) = v3;
  *(void *)(a1 + 840) = v3 + 2032;
  return a1;
}

void sub_5215EC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  v1[107] = v3;
  operator delete(v3);
  int v5 = (void *)v1[103];
  if (v5)
  {
    v1[104] = v5;
    operator delete(v5);
    uint64_t v6 = (void *)v1[99];
    if (!v6)
    {
LABEL_3:
      BOOL v7 = (void *)v1[96];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = (void *)v1[99];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[100] = v6;
  operator delete(v6);
  BOOL v7 = (void *)v1[96];
  if (!v7)
  {
LABEL_4:
    sub_328138((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[97] = v7;
  operator delete(v7);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_521670@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = __ROR8__(*a2, 32);
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = (v6 ^ ~(v6 >> 33)) + ((v6 ^ (v6 >> 33)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (uint64_t *)(result
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_11;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v19 = (uint64_t *)(v10[1] + 12 * v18);
    if (*(_DWORD *)v19 == v4 && *((_DWORD *)v19 + 1) == HIDWORD(v4)) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  if (v12 == v18)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v10;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v13 + v18);
  a3[3] = v19;
  a3[4] = (uint64_t *)(v13 + v12);
  return result;
}

unint64_t sub_5217C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  unint64_t v8 = (v7 ^ ~(v7 >> 33)) + ((v7 ^ (v7 >> 33)) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  unint64_t v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  while (1)
  {
    unint64_t v14 = v12 & v13;
    uint64_t v15 = *(void *)(*v11 + v14);
    unint64_t v16 = ((v15 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_8:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_521928(v11, v10);
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v12 = v4 + v14;
  }
  while (1)
  {
    unint64_t result = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    unint64_t v18 = (int *)(v11[1] + 12 * result);
    int v20 = *v18;
    int v19 = v18[1];
    if (v20 == v5 && v19 == HIDWORD(v5)) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_521928(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_521A20((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_521A20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_521A50((char **)a1, v2);
    return;
  }
  sub_521C3C(a1);
}

void sub_521A50(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v8 = (char *)operator new(v7 + 12 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v15 = &v5[12 * (void)i];
        unint64_t v16 = __ROR8__(*(void *)v15, 32);
        unint64_t v17 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
        unint64_t v18 = (v17 ^ ~(v17 >> 33)) + ((v17 ^ (v17 >> 33)) << 21);
        unint64_t v19 = 21 * ((265 * (v18 ^ (v18 >> 24))) ^ ((265 * (v18 ^ (v18 >> 24))) >> 14));
        unint64_t v20 = 2147483649u * (v19 ^ (v19 >> 28));
        double v21 = a1[3];
        BOOL v22 = *a1;
        unint64_t v23 = (unint64_t)v21 & (v20 >> 7);
        unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
        if (!v24)
        {
          uint64_t v25 = 8;
          do
          {
            unint64_t v23 = (v23 + v25) & (unint64_t)v21;
            v25 += 8;
            unint64_t v24 = *(void *)&v22[v23] & (~*(void *)&v22[v23] << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v11 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v21;
        char v12 = v20 & 0x7F;
        v22[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][12 * v11];
        uint64_t v14 = *(void *)v15;
        *(_DWORD *)(v13 + 8) = *((_DWORD *)v15 + 2);
        *(void *)uint64_t v13 = v14;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_521C3C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = __ROR8__(*(void *)(*(void *)(result + 8) + 12 * i), 32);
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) >> 33));
        unint64_t v20 = (v19 ^ ~(v19 >> 33)) + ((v19 ^ (v19 >> 33)) << 21);
        unint64_t v21 = 21 * ((265 * (v20 ^ (v20 >> 24))) ^ ((265 * (v20 ^ (v20 >> 24))) >> 14));
        unint64_t v22 = 2147483649u * (v21 ^ (v21 >> 28));
        unint64_t v23 = v13 & (v22 >> 7);
        unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v23) & (~*(uint64_t *)((char *)v17->i64 + v23) << 7) & 0x8080808080808080;
        if (v24)
        {
          unint64_t v15 = v13 & (v22 >> 7);
        }
        else
        {
          uint64_t v25 = 8;
          unint64_t v15 = v13 & (v22 >> 7);
          do
          {
            unint64_t v15 = (v15 + v25) & v13;
            v25 += 8;
            unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v24)) >> 3)) & v13;
        if ((((v16 - v23) ^ (i - v23)) & v13) > 7)
        {
          int v26 = v17->u8[v16];
          v17->i8[v16] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
          uint64_t v27 = *(void *)(result + 8);
          if (v26 == 128)
          {
            uint64_t v28 = v27 + 12 * v16;
            uint64_t v29 = (uint64_t *)(v27 + 12 * i);
            uint64_t v30 = *v29;
            *(_DWORD *)(v28 + 8) = *((_DWORD *)v29 + 2);
            *(void *)uint64_t v28 = v30;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            int v31 = (uint64_t *)(v27 + 12 * i);
            uint64_t v32 = *v31;
            int v33 = *((_DWORD *)v31 + 2);
            uint64_t v34 = 12 * v16;
            size_t v35 = (uint64_t *)(v27 + v34);
            int v36 = *((_DWORD *)v35 + 2);
            *int v31 = *v35;
            *((_DWORD *)v31 + 2) = v36;
            uint64_t v37 = *(void *)(result + 8) + v34;
            *(void *)uint64_t v37 = v32;
            *(_DWORD *)(v37 + 8) = v33;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v38 = i - (i >> 3);
    BOOL v39 = i == 7;
    uint64_t v40 = 6;
    if (!v39) {
      uint64_t v40 = v38;
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(void *)(result + 40) = v40 - *(void *)(result + 16);
  return result;
}

void sub_521F5C(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  unint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 24;
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 <= v10)
      {
        if (v15 < v10)
        {
          uint64_t v8 = v7 + 4 * v15;
          *(void *)(a1 + 32) = v8;
          uint64_t v9 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v10 < v16) {
LABEL_12:
          }
            memset((void *)(v7 + 4 * v10), 255, v9 - 4 * v10);
        }
        else
        {
          uint64_t v9 = v8 - v7;
          unint64_t v16 = (v8 - v7) >> 2;
          if (v10 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v6, v15 - v10);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v16 = (v8 - v7) >> 2;
        if (v10 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v10 = v16;
    }
    while (v16 <= v5);
  }
  unint64_t v11 = *a3;
  uint64_t v13 = *(unint64_t **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    unint64_t *v13 = v5;
    v13[1] = v11;
    uint64_t v14 = (uint64_t)(v13 + 2);
    goto LABEL_28;
  }
  unint64_t v17 = *(unint64_t **)a1;
  uint64_t v18 = ((uint64_t)v13 - *(void *)a1) >> 4;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v20 = v12 - (void)v17;
  if (v20 >> 3 > v19) {
    unint64_t v19 = v20 >> 3;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (v21 >> 60) {
      sub_188D718();
    }
    unint64_t v22 = (char *)operator new(16 * v21);
    unint64_t v23 = (unint64_t *)&v22[16 * v18];
    unint64_t v24 = &v22[16 * v21];
    *unint64_t v23 = v5;
    v23[1] = v11;
    uint64_t v14 = (uint64_t)(v23 + 2);
    if (v13 == v17) {
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v23 = (unint64_t *)(16 * v18);
    unint64_t v24 = 0;
    *unint64_t v23 = v5;
    v23[1] = v11;
    uint64_t v14 = 16 * v18 + 16;
    if (v13 == v17) {
      goto LABEL_26;
    }
  }
  do
  {
    *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
    v23 -= 2;
    v13 -= 2;
  }
  while (v13 != v17);
  uint64_t v13 = *(unint64_t **)a1;
LABEL_26:
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v24;
  if (v13) {
    operator delete(v13);
  }
LABEL_28:
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5) = *(_DWORD *)(a1 + 48);
  unsigned int v25 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v25 + 1;
  if (v25)
  {
    int v26 = *(unint64_t **)a1;
    do
    {
      unsigned int v27 = v25 - 1;
      uint64_t v28 = (v25 - 1) >> 2;
      uint64_t v29 = &v26[2 * v28];
      unint64_t v32 = v29[1];
      uint64_t v30 = v29 + 1;
      uint64_t v31 = v32;
      int v33 = &v26[2 * v25];
      uint64_t v36 = v33[1];
      uint64_t v34 = v33 + 1;
      uint64_t v35 = v36;
      if (v31 < v36) {
        break;
      }
      uint64_t v37 = 2 * v25;
      int v38 = v26[v37];
      LODWORD(v26[v37]) = v26[2 * v28];
      LODWORD(v26[2 * v28]) = v38;
      *uint64_t v34 = v31;
      *uint64_t v30 = v35;
      int v26 = *(unint64_t **)a1;
      uint64_t v39 = *(void *)(a1 + 24);
      uint64_t v40 = 4 * *(unsigned int *)(*(void *)a1 + v37 * 8);
      uint64_t v41 = 4 * *(unsigned int *)(*(void *)a1 + 16 * v28);
      int v42 = *(_DWORD *)(v39 + v40);
      *(_DWORD *)(v39 + v40) = *(_DWORD *)(v39 + v41);
      *(_DWORD *)(v39 + v41) = v42;
      unsigned int v25 = v27 >> 2;
    }
    while (v27 > 3);
  }
}

uint64_t *sub_5221BC(uint64_t *result, unsigned int a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(result[3] + 4 * a2);
  uint64_t v4 = *result + 16 * v3;
  uint64_t v5 = *(void *)(v4 + 8);
  *(void *)(v4 + 8) = *a3;
  if (*a3 >= v5)
  {
    unsigned int v22 = (4 * v3) | 1;
    unsigned int v23 = *((_DWORD *)result + 12);
    if (v22 < v23)
    {
      int v24 = 4 * v3;
      do
      {
        unsigned int v25 = v24 + 5;
        if (v25 >= v23) {
          unsigned int v26 = v23;
        }
        else {
          unsigned int v26 = v25;
        }
        if (v22 >= v26) {
          break;
        }
        uint64_t v27 = *result;
        uint64_t v28 = v3;
        uint64_t v29 = *result + 16 * v3;
        uint64_t v32 = *(void *)(v29 + 8);
        uint64_t v30 = (void *)(v29 + 8);
        uint64_t v31 = v32;
        int v33 = (uint64_t *)(*result + 16 * v22 + 8);
        LODWORD(v3) = -1;
        uint64_t v34 = v32;
        do
        {
          uint64_t v36 = *v33;
          v33 += 2;
          uint64_t v35 = v36;
          if (v36 < v34)
          {
            uint64_t v34 = v35;
            LODWORD(v3) = v22;
          }
          ++v22;
        }
        while (v26 != v22);
        if (v3 >= v23) {
          break;
        }
        uint64_t v37 = 16 * v3;
        uint64_t v38 = v27 + v37;
        uint64_t v39 = 16 * v28;
        int v40 = *(_DWORD *)(v27 + v37);
        *(_DWORD *)uint64_t v38 = *(_DWORD *)(v27 + v39);
        *(_DWORD *)(v27 + v39) = v40;
        uint64_t v41 = *(void *)(v27 + v37 + 8);
        *(void *)(v38 + 8) = v31;
        *uint64_t v30 = v41;
        uint64_t v42 = result[3];
        uint64_t v43 = 4 * *(unsigned int *)(*result + v37);
        uint64_t v44 = 4 * *(unsigned int *)(*result + v39);
        int v45 = *(_DWORD *)(v42 + v43);
        *(_DWORD *)(v42 + v43) = *(_DWORD *)(v42 + v44);
        *(_DWORD *)(v42 + v44) = v45;
        int v24 = 4 * v3;
        unsigned int v22 = (4 * v3) | 1;
        unsigned int v23 = *((_DWORD *)result + 12);
      }
      while (v22 < v23);
    }
  }
  else if (v3)
  {
    uint64_t v6 = *result;
    do
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 2;
      uint64_t v9 = v6 + 16 * v8;
      uint64_t v12 = *(void *)(v9 + 8);
      unint64_t v10 = (void *)(v9 + 8);
      uint64_t v11 = v12;
      uint64_t v13 = v6 + 16 * v3;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v14 = (void *)(v13 + 8);
      uint64_t v15 = v16;
      if (v11 < v16) {
        break;
      }
      uint64_t v17 = 16 * v3;
      int v18 = *(_DWORD *)(v6 + v17);
      *(_DWORD *)(v6 + v17) = *(_DWORD *)(v6 + 16 * v8);
      *(_DWORD *)(v6 + 16 * v8) = v18;
      void *v14 = v11;
      *unint64_t v10 = v15;
      uint64_t v6 = *result;
      uint64_t v19 = result[3];
      uint64_t v3 = 4 * *(unsigned int *)(*result + v17);
      uint64_t v20 = 4 * *(unsigned int *)(*result + 16 * v8);
      int v21 = *(_DWORD *)(v19 + v3);
      *(_DWORD *)(v19 + v3) = *(_DWORD *)(v19 + v20);
      *(_DWORD *)(v19 + v20) = v21;
      LODWORD(v3) = v7 >> 2;
    }
    while (v7 >= 4);
  }
  return result;
}

char *sub_522344(void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  sub_4D4C4(&v11[6 * v5], a2)[3] = a2[3];
  uint64_t v14 = (char *)&v11[6 * v5];
  *((void *)v14 + 4) = v12;
  *((void *)v14 + 5) = v13;
  uint64_t v15 = v14 + 48;
  uint64_t v16 = (void **)*a1;
  uint64_t v17 = (void **)a1[1];
  if (v17 == *a1)
  {
    int v21 = (void **)a1[1];
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v14[v18 * 8];
      uint64_t v20 = &v17[v18];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *((_OWORD *)v19 - 3) = *(_OWORD *)&v17[v18 - 6];
      *((void *)v19 - 4) = v17[v18 - 4];
      *(v20 - 6) = 0;
      *(v20 - 5) = 0;
      *(v20 - 4) = 0;
      *((void *)v19 - 3) = v17[v18 - 3];
      *((_OWORD *)v19 - 1) = *(_OWORD *)&v17[v18 - 2];
      v18 -= 6;
    }
    while (&v17[v18] != v16);
    int v21 = (void **)*a1;
    uint64_t v17 = (void **)a1[1];
    v14 += v18 * 8;
  }
  *a1 = v14;
  a1[1] = v15;
  a1[2] = &v11[6 * v10];
  if (v17 != v21)
  {
    unsigned int v22 = v17;
    do
    {
      unsigned int v25 = (char *)*(v22 - 6);
      v22 -= 6;
      int v24 = v25;
      if (v25)
      {
        unsigned int v26 = (char *)*(v17 - 5);
        unsigned int v23 = v24;
        if (v26 != v24)
        {
          uint64_t v27 = (char *)*(v17 - 5);
          do
          {
            uint64_t v29 = (void *)*((void *)v27 - 3);
            v27 -= 24;
            uint64_t v28 = v29;
            if (v29)
            {
              *((void *)v26 - 2) = v28;
              operator delete(v28);
            }
            unsigned int v26 = v27;
          }
          while (v27 != v24);
          unsigned int v23 = *v22;
        }
        *(v17 - 5) = v24;
        operator delete(v23);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v21);
    uint64_t v17 = v21;
  }
  if (v17) {
    operator delete(v17);
  }
  return v15;
}

void sub_522564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_522578(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      unsigned int v7 = (char *)*(v4 - 6);
      v4 -= 6;
      unint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        uint64_t v8 = (char *)*(v3 - 5);
        unint64_t v5 = v6;
        if (v8 != v6)
        {
          uint64_t v9 = (char *)*(v3 - 5);
          do
          {
            uint64_t v11 = (void *)*((void *)v9 - 3);
            v9 -= 24;
            unint64_t v10 = v11;
            if (v11)
            {
              *((void *)v8 - 2) = v10;
              operator delete(v10);
            }
            uint64_t v8 = v9;
          }
          while (v9 != v6);
          unint64_t v5 = *v4;
        }
        *(v3 - 5) = v6;
        operator delete(v5);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_52262C(void **a1, uint64_t a2, int *a3)
{
  unint64_t v4 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v8 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(72 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v27 = &v9[72 * v4];
  uint64_t v28 = &v9[72 * v8];
  int v10 = *a3;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)a2;
  *((void *)v27 + 2) = *(void *)(a2 + 16);
  sub_4D4C4((void *)v27 + 3, (uint64_t *)(a2 + 24));
  *((_DWORD *)v27 + 12) = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v27 + 14) = v10;
  *((_DWORD *)v27 + 15) = 0x7FFFFFFF;
  *((void *)v27 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = v27;
  uint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    uint64_t v18 = (char *)a1[1];
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = &v27[v14];
      uint64_t v16 = &v13[v14];
      uint64_t v17 = *(void *)&v13[v14 - 56];
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v13[v14 - 72];
      *((void *)v15 - 7) = v17;
      *((void *)v15 - 6) = 0;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((_OWORD *)v15 - 3) = *(_OWORD *)&v13[v14 - 48];
      *((void *)v15 - 4) = *(void *)&v13[v14 - 32];
      *((void *)v16 - 6) = 0;
      *((void *)v16 - 5) = 0;
      *((void *)v16 - 4) = 0;
      *((_DWORD *)v15 - 6) = *(_DWORD *)&v13[v14 - 24];
      *((_OWORD *)v15 - 1) = *(_OWORD *)&v13[v14 - 16];
      v14 -= 72;
    }
    while (&v13[v14] != v12);
    uint64_t v18 = (char *)*a1;
    uint64_t v13 = (char *)a1[1];
    uint64_t v11 = &v27[v14];
  }
  *a1 = v11;
  a1[1] = v27 + 72;
  a1[2] = v28;
  if (v13 == v18)
  {
    if (v13) {
LABEL_18:
    }
      operator delete(v13);
  }
  else
  {
    do
    {
      int v21 = v13 - 72;
      uint64_t v22 = *((void *)v13 - 6);
      if (v22)
      {
        uint64_t v23 = *((void *)v13 - 5);
        uint64_t v20 = (void *)*((void *)v13 - 6);
        if (v23 != v22)
        {
          uint64_t v24 = *((void *)v13 - 5);
          do
          {
            unsigned int v26 = *(void **)(v24 - 24);
            v24 -= 24;
            unsigned int v25 = v26;
            if (v26)
            {
              *(void *)(v23 - 16) = v25;
              operator delete(v25);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
          uint64_t v20 = (void *)*((void *)v13 - 6);
        }
        *((void *)v13 - 5) = v22;
        operator delete(v20);
      }
      v13 -= 72;
    }
    while (v21 != v18);
    uint64_t v13 = v18;
    if (v18) {
      goto LABEL_18;
    }
  }
  return v27 + 72;
}

void sub_52288C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_5228A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 72;
      *(void *)(a1 + 16) = i - 72;
      uint64_t v5 = *(void *)(i - 48);
      if (v5) {
        break;
      }
      i -= 72;
      if (v4 == v2) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = *(void *)(i - 40);
    unsigned int v7 = *(void **)(i - 48);
    if (v6 != v5)
    {
      uint64_t v8 = *(void *)(i - 40);
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      unsigned int v7 = *(void **)(i - 48);
    }
    *(void *)(i - 40) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_52295C(void **a1, uint64_t a2, int *a3)
{
  unint64_t v4 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v8 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(72 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v27 = &v9[72 * v4];
  uint64_t v28 = &v9[72 * v8];
  int v10 = *a3;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)a2;
  *((void *)v27 + 2) = *(void *)(a2 + 16);
  sub_4D4C4((void *)v27 + 3, (uint64_t *)(a2 + 24));
  *((_DWORD *)v27 + 12) = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v27 + 14) = v10;
  *((_DWORD *)v27 + 15) = 0x7FFFFFFF;
  *((void *)v27 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = v27;
  uint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    uint64_t v18 = (char *)a1[1];
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = &v27[v14];
      uint64_t v16 = &v13[v14];
      uint64_t v17 = *(void *)&v13[v14 - 56];
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v13[v14 - 72];
      *((void *)v15 - 7) = v17;
      *((void *)v15 - 6) = 0;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((_OWORD *)v15 - 3) = *(_OWORD *)&v13[v14 - 48];
      *((void *)v15 - 4) = *(void *)&v13[v14 - 32];
      *((void *)v16 - 6) = 0;
      *((void *)v16 - 5) = 0;
      *((void *)v16 - 4) = 0;
      *((_DWORD *)v15 - 6) = *(_DWORD *)&v13[v14 - 24];
      *((_OWORD *)v15 - 1) = *(_OWORD *)&v13[v14 - 16];
      v14 -= 72;
    }
    while (&v13[v14] != v12);
    uint64_t v18 = (char *)*a1;
    uint64_t v13 = (char *)a1[1];
    uint64_t v11 = &v27[v14];
  }
  *a1 = v11;
  a1[1] = v27 + 72;
  a1[2] = v28;
  if (v13 == v18)
  {
    if (v13) {
LABEL_18:
    }
      operator delete(v13);
  }
  else
  {
    do
    {
      int v21 = v13 - 72;
      uint64_t v22 = *((void *)v13 - 6);
      if (v22)
      {
        uint64_t v23 = *((void *)v13 - 5);
        uint64_t v20 = (void *)*((void *)v13 - 6);
        if (v23 != v22)
        {
          uint64_t v24 = *((void *)v13 - 5);
          do
          {
            unsigned int v26 = *(void **)(v24 - 24);
            v24 -= 24;
            unsigned int v25 = v26;
            if (v26)
            {
              *(void *)(v23 - 16) = v25;
              operator delete(v25);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
          uint64_t v20 = (void *)*((void *)v13 - 6);
        }
        *((void *)v13 - 5) = v22;
        operator delete(v20);
      }
      v13 -= 72;
    }
    while (v21 != v18);
    uint64_t v13 = v18;
    if (v18) {
      goto LABEL_18;
    }
  }
  return v27 + 72;
}

void sub_522BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_522BD0(unsigned int **a1, unsigned int *a2)
{
  uint64_t v2 = (int *)a1[1];
  unsigned int v4 = **a1;
  unsigned int v3 = (*a1)[1];
  BOOL v5 = v4 == -1 && v3 == -1;
  if (v5 || ((v7 = *a2, unsigned int v6 = a2[1], *a2 == -1) ? (v8 = v6 == -1) : (v8 = 0), v8))
  {
    uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    return v24 < *((void *)v2 + 234);
  }
  long double v9 = exp(3.14159265 - (double)v3 * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v4;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v14 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v27 = vsubq_f64((float64x2_t)v14, (float64x2_t)vdupq_laneq_s64(v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v27);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 < 4.50359963e15)
    {
      uint64_t v23 = (uint64_t)(v21 + v21) + 1;
LABEL_18:
      double v22 = (double)(v23 >> 1);
    }
  }
  else
  {
    double v22 = v21;
    if (v21 > -4.50359963e15)
    {
      uint64_t v23 = (uint64_t)(v21 + v21);
      if (v23 >= 1) {
        --v23;
      }
      goto LABEL_18;
    }
  }
  if (v22 < 9.22337204e18)
  {
    if (v21 >= 0.0)
    {
      if (v21 < 4.50359963e15)
      {
        uint64_t v26 = (uint64_t)(v21 + v21) + 1;
LABEL_28:
        double v21 = (double)(v26 >> 1);
      }
    }
    else if (v21 > -4.50359963e15)
    {
      uint64_t v26 = (uint64_t)(v21 + v21);
      if (v26 >= 1) {
        --v26;
      }
      goto LABEL_28;
    }
    uint64_t v24 = (uint64_t)v21;
    return v24 < *((void *)v2 + 234);
  }
  uint64_t v24 = 0x7FFFFFFFFFFFFFFELL;
  return v24 < *((void *)v2 + 234);
}

uint64_t sub_522E7C(uint64_t a1)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_20E1710;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_20E1710;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_20E1710;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  uint64_t v2 = (char *)operator new(8uLL);
  *(void *)(a1 + 848) = v2;
  *(void *)(a1 + 856) = v2;
  *(void *)(a1 + 864) = v2 + 8;
  unsigned int v3 = (char *)operator new(0x7F0uLL);
  *(void *)(a1 + 824) = v3;
  *(void *)(a1 + 832) = v3;
  *(void *)(a1 + 840) = v3 + 2032;
  return a1;
}

void sub_522FE8(_Unwind_Exception *a1)
{
  unsigned int v3 = v2;
  v1[107] = v3;
  operator delete(v3);
  BOOL v5 = (void *)v1[103];
  if (v5)
  {
    v1[104] = v5;
    operator delete(v5);
    unsigned int v6 = (void *)v1[99];
    if (!v6)
    {
LABEL_3:
      unsigned int v7 = (void *)v1[96];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v6 = (void *)v1[99];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[100] = v6;
  operator delete(v6);
  unsigned int v7 = (void *)v1[96];
  if (!v7)
  {
LABEL_4:
    sub_328138((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[97] = v7;
  operator delete(v7);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

char *sub_52306C(void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64x2_t v11 = operator new(48 * v10);
  }
  else
  {
    uint64x2_t v11 = 0;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  sub_4D4C4(&v11[6 * v5], a2)[3] = a2[3];
  int64x2_t v14 = (char *)&v11[6 * v5];
  *((void *)v14 + 4) = v12;
  *((void *)v14 + 5) = v13;
  long double v15 = v14 + 48;
  long double v16 = (void **)*a1;
  double v17 = (void **)a1[1];
  if (v17 == *a1)
  {
    double v21 = (void **)a1[1];
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      long double v19 = &v14[v18 * 8];
      long double v20 = &v17[v18];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *((_OWORD *)v19 - 3) = *(_OWORD *)&v17[v18 - 6];
      *((void *)v19 - 4) = v17[v18 - 4];
      *(v20 - 6) = 0;
      *(v20 - 5) = 0;
      *(v20 - 4) = 0;
      *((void *)v19 - 3) = v17[v18 - 3];
      *((_OWORD *)v19 - 1) = *(_OWORD *)&v17[v18 - 2];
      v18 -= 6;
    }
    while (&v17[v18] != v16);
    double v21 = (void **)*a1;
    double v17 = (void **)a1[1];
    v14 += v18 * 8;
  }
  *a1 = v14;
  a1[1] = v15;
  a1[2] = &v11[6 * v10];
  if (v17 != v21)
  {
    double v22 = v17;
    do
    {
      unsigned int v25 = (char *)*(v22 - 6);
      v22 -= 6;
      uint64_t v24 = v25;
      if (v25)
      {
        uint64_t v26 = (char *)*(v17 - 5);
        uint64_t v23 = v24;
        if (v26 != v24)
        {
          double v27 = (char *)*(v17 - 5);
          do
          {
            uint64_t v29 = (void *)*((void *)v27 - 3);
            v27 -= 24;
            uint64_t v28 = v29;
            if (v29)
            {
              *((void *)v26 - 2) = v28;
              operator delete(v28);
            }
            uint64_t v26 = v27;
          }
          while (v27 != v24);
          uint64_t v23 = *v22;
        }
        *(v17 - 5) = v24;
        operator delete(v23);
      }
      double v17 = v22;
    }
    while (v22 != v21);
    double v17 = v21;
  }
  if (v17) {
    operator delete(v17);
  }
  return v15;
}

void sub_52328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_5232A0(uint64_t a1)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_20E1710;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_20E1710;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_20E1710;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  uint64_t v2 = (char *)operator new(8uLL);
  *(void *)(a1 + 848) = v2;
  *(void *)(a1 + 856) = v2;
  *(void *)(a1 + 864) = v2 + 8;
  unsigned int v3 = (char *)operator new(0x7F0uLL);
  *(void *)(a1 + 824) = v3;
  *(void *)(a1 + 832) = v3;
  *(void *)(a1 + 840) = v3 + 2032;
  return a1;
}

void sub_52340C(_Unwind_Exception *a1)
{
  unsigned int v3 = v2;
  v1[107] = v3;
  operator delete(v3);
  unint64_t v5 = (void *)v1[103];
  if (v5)
  {
    v1[104] = v5;
    operator delete(v5);
    unint64_t v6 = (void *)v1[99];
    if (!v6)
    {
LABEL_3:
      unsigned int v7 = (void *)v1[96];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v6 = (void *)v1[99];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[100] = v6;
  operator delete(v6);
  unsigned int v7 = (void *)v1[96];
  if (!v7)
  {
LABEL_4:
    sub_328138((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[97] = v7;
  operator delete(v7);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

char *sub_523490(void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64x2_t v11 = operator new(48 * v10);
  }
  else
  {
    uint64x2_t v11 = 0;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  sub_4D4C4(&v11[6 * v5], a2)[3] = a2[3];
  int64x2_t v14 = (char *)&v11[6 * v5];
  *((void *)v14 + 4) = v12;
  *((void *)v14 + 5) = v13;
  long double v15 = v14 + 48;
  long double v16 = (void **)*a1;
  double v17 = (void **)a1[1];
  if (v17 == *a1)
  {
    double v21 = (void **)a1[1];
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      long double v19 = &v14[v18 * 8];
      long double v20 = &v17[v18];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *((_OWORD *)v19 - 3) = *(_OWORD *)&v17[v18 - 6];
      *((void *)v19 - 4) = v17[v18 - 4];
      *(v20 - 6) = 0;
      *(v20 - 5) = 0;
      *(v20 - 4) = 0;
      *((void *)v19 - 3) = v17[v18 - 3];
      *((_OWORD *)v19 - 1) = *(_OWORD *)&v17[v18 - 2];
      v18 -= 6;
    }
    while (&v17[v18] != v16);
    double v21 = (void **)*a1;
    double v17 = (void **)a1[1];
    v14 += v18 * 8;
  }
  *a1 = v14;
  a1[1] = v15;
  a1[2] = &v11[6 * v10];
  if (v17 != v21)
  {
    double v22 = v17;
    do
    {
      unsigned int v25 = (char *)*(v22 - 6);
      v22 -= 6;
      uint64_t v24 = v25;
      if (v25)
      {
        uint64_t v26 = (char *)*(v17 - 5);
        uint64_t v23 = v24;
        if (v26 != v24)
        {
          double v27 = (char *)*(v17 - 5);
          do
          {
            uint64_t v29 = (void *)*((void *)v27 - 3);
            v27 -= 24;
            uint64_t v28 = v29;
            if (v29)
            {
              *((void *)v26 - 2) = v28;
              operator delete(v28);
            }
            uint64_t v26 = v27;
          }
          while (v27 != v24);
          uint64_t v23 = *v22;
        }
        *(v17 - 5) = v24;
        operator delete(v23);
      }
      double v17 = v22;
    }
    while (v22 != v21);
    double v17 = v21;
  }
  if (v17) {
    operator delete(v17);
  }
  return v15;
}

void sub_5236B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_5236C4()
{
  byte_2564B3F = 1;
  word_2564B28 = 65;
  byte_2564B57 = 1;
  word_2564B40 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2564BE8 = 0u;
  *(_OWORD *)&qword_2564BF8 = 0u;
  dword_2564C08 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2564BE8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2564BE8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2564BE8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2564BE8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2564B6F = 8;
  strcpy((char *)&qword_2564B58, "any_mode");
  byte_2564B87 = 7;
  strcpy((char *)&dword_2564B70, "cycling");
  byte_2564B9F = 7;
  strcpy((char *)&dword_2564B88, "driving");
  byte_2564BB7 = 7;
  strcpy((char *)&dword_2564BA0, "walking");
  qword_2564BC0 = 0;
  qword_2564BC8 = 0;
  qword_2564BB8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2564BB8 = (uint64_t)v0;
  qword_2564BC0 = (uint64_t)(v0 + 9);
  qword_2564BC8 = (uint64_t)(v0 + 9);
  qword_2564BD0 = 0;
  qword_2564BD8 = 0;
  unk_2564BE0 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_2564BD8 = (uint64_t)(v1 + 9);
  unk_2564BE0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2564BD0 = (uint64_t)v1;
  return result;
}

void sub_52398C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2564BF8) {
    sub_20A90F0((void **)qword_2564BF8);
  }
  uint64_t v37 = (void *)xmmword_2564BE8;
  *(void *)&xmmword_2564BE8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_523A2C(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  unsigned int v5 = *(unsigned __int8 *)(a1 + 72) - 1;
  if (v5 > 6)
  {
    int v7 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v7 | 0x20;
    *(_DWORD *)(a2 + 84) = 0;
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8)
    {
LABEL_3:
      if (v8 == 1)
      {
        *(_DWORD *)(a2 + 40) = v7 | 0x30;
        *(_DWORD *)(a2 + 80) = 2;
        long double v9 = (uint64_t *)a1;
        if (*(_DWORD *)(a1 + 32) != 1)
        {
          if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F6970, memory_order_acquire))
          {
            long double v9 = &qword_24F6950;
          }
          else
          {
            long double v9 = &qword_24F6950;
            if (__cxa_guard_acquire(&qword_24F6970))
            {
              qword_24F6950 = -1;
              qword_24F6960 = 0;
              unk_24F6968 = 0;
              off_24F6958 = 0;
              __cxa_guard_release(&qword_24F6970);
            }
          }
        }
        *(_DWORD *)(a2 + 40) |= 4u;
        char v10 = *(void **)(a2 + 64);
        if (!v10)
        {
          uint64_t v11 = *(void *)(a2 + 8);
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
          char v10 = sub_13DABC0((uint64_t)v12);
          *(void *)(a2 + 64) = v10;
        }
        int v13 = *(_DWORD *)v9;
        if (*(_DWORD *)v9 != -1)
        {
          *((_DWORD *)v10 + 10) |= 2u;
          *((_DWORD *)v10 + 14) = v13;
        }
        int v14 = *((_DWORD *)v9 + 1);
        if (v14 != -1)
        {
          *((_DWORD *)v10 + 10) |= 4u;
          *((_DWORD *)v10 + 15) = v14;
        }
        uint64_t v15 = v9[1];
        uint64_t v16 = v9[2];
        uint64_t v17 = (uint64_t)(v9 + 1);
        if (v15 != v16)
        {
          *((_DWORD *)v10 + 10) |= 1u;
          uint64_t v18 = (void *)v10[6];
          if (!v18)
          {
            uint64_t v19 = v10[1];
            long double v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
            if (v19) {
              long double v20 = (void *)*v20;
            }
            uint64_t v18 = sub_1478C60((uint64_t)v20);
            v10[6] = v18;
          }
          sub_3E9CB0(v17, (uint64_t)v18);
        }
      }
      int v21 = *(char *)(a1 + 103);
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v6 = dword_20E8280[(char)v5];
    int v7 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v7 | 0x20;
    *(_DWORD *)(a2 + 84) = v6;
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8) {
      goto LABEL_3;
    }
  }
  *(_DWORD *)(a2 + 40) = v7 | 0x30;
  *(_DWORD *)(a2 + 80) = 1;
  double v22 = (int *)a1;
  if (*(_DWORD *)(a1 + 32))
  {
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F6998, memory_order_acquire))
    {
      double v22 = &dword_24F6978;
    }
    else
    {
      double v22 = &dword_24F6978;
      if (__cxa_guard_acquire(&qword_24F6998))
      {
        *(int *)((char *)&dword_24F6978 + 3) = -1;
        dword_24F6978 = -1;
        *(void *)&algn_24F697C[3] = 0;
        unk_24F698F = 0;
        unk_24F6987 = 0;
        byte_24F6997 = 0;
        __cxa_guard_release(&qword_24F6998);
      }
    }
  }
  *(_DWORD *)(a2 + 40) |= 2u;
  uint64_t v23 = *(void *)(a2 + 56);
  if (v23)
  {
    sub_523D5C(v22, v23, a3);
    int v21 = *(char *)(a1 + 103);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a2 + 8);
    uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
    if (v29) {
      uint64_t v30 = (void *)*v30;
    }
    uint64_t v31 = sub_13DAB64((uint64_t)v30);
    *(void *)(a2 + 56) = v31;
    sub_523D5C(v22, v31, v32);
    int v21 = *(char *)(a1 + 103);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_22:
      if (!(_BYTE)v21) {
        goto LABEL_34;
      }
      goto LABEL_31;
    }
  }
LABEL_30:
  if (!*(void *)(a1 + 88)) {
    goto LABEL_34;
  }
LABEL_31:
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v24 = *(void *)(a2 + 8);
  unsigned int v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
  if (v24) {
    unsigned int v25 = (uint64_t *)*v25;
  }
  sub_1881DF4((std::string **)(a2 + 48), (long long *)(a1 + 80), v25);
LABEL_34:
  if (*(_DWORD *)(a1 + 40) != -1)
  {
    *(_DWORD *)(a2 + 40) |= 8u;
    uint64_t v26 = *(void *)(a2 + 72);
    if (!v26)
    {
      uint64_t v27 = *(void *)(a2 + 8);
      uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        uint64_t v28 = (void *)*v28;
      }
      uint64_t v26 = sub_13DAB64((uint64_t)v28);
      *(void *)(a2 + 72) = v26;
    }
    sub_523D5C((int *)(a1 + 40), v26, a3);
  }
  if (*(unsigned char *)(a1 + 104) == 1)
  {
    *(_DWORD *)(a2 + 40) |= 0x40u;
    *(_DWORD *)(a2 + 88) = 1;
  }
}

void sub_523D5C(int *a1, uint64_t a2, uint8x8_t a3)
{
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v6 | 4;
  *(_DWORD *)(a2 + 64) = v5;
  uint64_t v7 = *((unsigned __int8 *)a1 + 31);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a1 + 2);
  }
  if (v7)
  {
    *(_DWORD *)(a2 + 40) = v6 | 5;
    uint64_t v8 = *(void *)(a2 + 8);
    long double v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      long double v9 = (uint64_t *)*v9;
    }
    sub_1881DF4((std::string **)(a2 + 48), (long long *)(a1 + 2), v9);
  }
  __int32 v11 = a1[1];
  char v10 = (unsigned __int8 *)(a1 + 1);
  a3.i32[0] = v11;
  if (vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0] != 0xFFFFFF)
  {
    sub_523E70(v10, &__p);
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v12 = *(void *)(a2 + 8);
    int v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      int v13 = (uint64_t *)*v13;
    }
    sub_1881E08((uint64_t *)(a2 + 56), (long long *)&__p, v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_523E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_523E70(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 8uLL);
  std::string::push_back(a2, byte_20E8270[(unint64_t)*a1 >> 4]);
  std::string::push_back(a2, byte_20E8270[*a1 & 0xF]);
  std::string::push_back(a2, byte_20E8270[(unint64_t)a1[1] >> 4]);
  std::string::push_back(a2, byte_20E8270[a1[1] & 0xF]);
  std::string::push_back(a2, byte_20E8270[(unint64_t)a1[2] >> 4]);
  std::string::push_back(a2, byte_20E8270[a1[2] & 0xF]);
  std::string::push_back(a2, byte_20E8270[(unint64_t)a1[3] >> 4]);
  std::string::push_back(a2, byte_20E8270[a1[3] & 0xF]);
}

void sub_523F58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_523F74(_DWORD *a1, char *__s, _DWORD *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    uint64_t v8 = a1;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v8, __s, v7);
LABEL_9:
  *((unsigned char *)v8 + v7) = 0;
  a1[6] = *a3;
  return a1;
}

uint64_t sub_524034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_525478(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_524098(_Unwind_Exception *a1)
{
  unsigned int v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_5240B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2564C10, memory_order_acquire) & 1) == 0)
  {
    int v9 = __cxa_guard_acquire(&qword_2564C10);
    uint64_t v4 = a1;
    if (v9)
    {
      uint64_t v11 = a3;
      int v62 = 16;
      sub_523F74(v63, "ARS", &v62);
      int v61 = 18;
      sub_523F74(v64, "AUD", &v61);
      int v60 = 25;
      sub_523F74(v65, "BBD", &v60);
      int v59 = 36;
      sub_523F74(v66, "BMD", &v59);
      int v58 = 37;
      sub_523F74(v67, "BND", &v58);
      int v57 = 38;
      sub_523F74(v68, "BOB", &v57);
      int v56 = 45;
      sub_523F74(v69, "BRL", &v56);
      int v55 = 49;
      sub_523F74(v70, "BSD", &v55);
      int v54 = 56;
      sub_523F74(v71, "BZD", &v54);
      int v53 = 57;
      sub_523F74(v72, "CAD", &v53);
      int v52 = 64;
      sub_523F74(v73, "CLP", &v52);
      int v51 = 67;
      sub_523F74(v74, "CNY", &v51);
      int v50 = 68;
      sub_523F74(v75, "COP", &v50);
      int v49 = 74;
      sub_523F74(v76, "CUP", &v49);
      int v48 = 82;
      sub_523F74(v77, "DOP", &v48);
      int v47 = 87;
      sub_523F74(v78, "EGP", &v47);
      int v46 = 94;
      sub_523F74(v79, "EUR", &v46);
      int v45 = 96;
      sub_523F74(v80, "FJD", &v45);
      int v44 = 97;
      sub_523F74(v81, "FKP", &v44);
      int v43 = 99;
      sub_523F74(v82, "GBP", &v43);
      int v42 = 104;
      sub_523F74(v83, "GIP", &v42);
      int v41 = 113;
      sub_523F74(v84, "GYD", &v41);
      int v40 = 114;
      sub_523F74(v85, "HKD", &v40);
      int v39 = 125;
      sub_523F74(v86, "INR", &v39);
      int v38 = 131;
      sub_523F74(v87, "JMD", &v38);
      int v37 = 133;
      sub_523F74(v88, "JPY", &v37);
      int v36 = 138;
      sub_523F74(v89, "KPW", &v36);
      int v35 = 141;
      sub_523F74(v90, "KRW", &v35);
      int v34 = 143;
      sub_523F74(v91, "KYD", &v34);
      int v33 = 147;
      sub_523F74(v92, "LKR", &v33);
      int v32 = 148;
      sub_523F74(v93, "LRD", &v32);
      int v31 = 176;
      sub_523F74(v94, "MUR", &v31);
      int v30 = 180;
      sub_523F74(v95, "MXN", &v30);
      int v29 = 187;
      sub_523F74(v96, "NAD", &v29);
      int v28 = 190;
      sub_523F74(v97, "NIO", &v28);
      int v27 = 193;
      sub_523F74(v98, "NPR", &v27);
      int v26 = 194;
      sub_523F74(v99, "NZD", &v26);
      int v25 = 196;
      sub_523F74(v100, "PAB", &v25);
      int v24 = 202;
      sub_523F74(v101, "PKR", &v24);
      int v23 = 212;
      sub_523F74(v102, "RUB", &v23);
      int v22 = 216;
      sub_523F74(v103, "SBD", &v22);
      int v21 = 217;
      sub_523F74(v104, "SCR", &v21);
      int v20 = 222;
      sub_523F74(v105, "SGD", &v20);
      int v19 = 223;
      sub_523F74(v106, "SHP", &v19);
      int v18 = 228;
      sub_523F74(v107, "SRD", &v18);
      int v17 = 235;
      sub_523F74(v108, "SYP", &v17);
      int v16 = 247;
      sub_523F74(v109, "TTD", &v16);
      int v15 = 248;
      sub_523F74(v110, "TWD", &v15);
      int v14 = 254;
      sub_523F74(v111, "USD", &v14);
      int v13 = 259;
      sub_523F74(v112, "UYU", &v13);
      int v12 = 274;
      sub_523F74(v113, "XCD", &v12);
      sub_524034((uint64_t)qword_2564C58, (uint64_t)v63, 51);
      uint64_t v10 = 1632;
      do
      {
        if (*((char *)&v60 + v10 + 3) < 0) {
          operator delete(*(void **)((char *)&v55 + v10));
        }
        v10 -= 32;
      }
      while (v10);
      __cxa_guard_release(&qword_2564C10);
      a3 = v11;
      uint64_t v4 = a1;
    }
  }
  double result = sub_5258EC(qword_2564C58, v4);
  if (result) {
    goto LABEL_3;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7 && (double result = sub_5258EC(qword_2564C58, a2)) != 0)
  {
LABEL_3:
    *(_DWORD *)a3 = *((_DWORD *)result + 10);
    *(unsigned char *)(a3 + 4) = 1;
  }
  else
  {
    *(void *)a3 = 0;
  }
  return result;
}

void sub_5248D0(_Unwind_Exception *a1)
{
  uint64_t v3 = 1632;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_2564C10);
      _Unwind_Resume(a1);
    }
  }
}

void sub_524A28(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 >= 0xB) {
    sub_5AE8("array::at");
  }
  int v2 = dword_20E829C[a1];
  __int16 v3 = -1;
  char v4 = -1;
  long long __p = 0uLL;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_524ADC(a2, (uint64_t)&v2, 0);
  if (v7 < 0) {
    operator delete(*(void **)((char *)&__p + 1));
  }
}

void sub_524AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_524ADC(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 43) = -1;
  *(void *)(a1 + 47) = 0;
  *(void *)(a1 + 63) = 0;
  *(void *)(a1 + 55) = 0;
  *(unsigned char *)(a1 + 71) = 0;
  *(unsigned char *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_524B88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  sub_20A9134(v1, (_DWORD *)(v1 + 32), (void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_524BB4(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 >= 0x13) {
    sub_5AE8("array::at");
  }
  uint64_t v6 = -1;
  uint64_t v4 = operator new(8uLL);
  unint64_t v5 = ((unint64_t)dword_20E82C8[a1] << 32) | 0x5A;
  long long __p = v4;
  void *v4 = v5;
  uint64_t v8 = v4 + 1;
  int v9 = v4 + 1;
  sub_525328(a2, &v6, 0);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_524C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_524C68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5240B8(a1, (uint64_t)&dword_2564C18, (uint64_t)&v5);
  uint64_t v7 = -1;
  __int16 v3 = operator new(8uLL);
  long long __p = v3;
  *__int16 v3 = 0x90000005ALL;
  int v9 = v3 + 1;
  uint64_t v10 = v3 + 1;
  sub_525328(a2, &v7, 0);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    LODWORD(v7) = 93;
    HIDWORD(v7) = v5;
    sub_29603C((void **)(a2 + 8), &v7);
  }
}

void sub_524D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_524D70(_Unwind_Exception *a1)
{
  sub_4D9814(v1);
  _Unwind_Resume(a1);
}

void sub_524D84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 == 999)
  {
    uint64_t v5 = -1;
    __int16 v3 = operator new(8uLL);
    long long __p = v3;
    *__int16 v3 = 0x400010052;
  }
  else
  {
    uint64_t v5 = -1;
    __int16 v3 = operator new(8uLL);
    long long __p = v3;
    *__int16 v3 = (a1 << 32) | 0x10052;
  }
  uint64_t v7 = v3 + 1;
  uint64_t v8 = v3 + 1;
  sub_525328(a2, &v5, 0);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_524E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_524E5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5240B8(a1, (uint64_t)&dword_2564C18, (uint64_t)&v5);
  uint64_t v7 = -1;
  __int16 v3 = operator new(8uLL);
  long long __p = v3;
  *__int16 v3 = 0x300010052;
  int v9 = v3 + 1;
  uint64_t v10 = v3 + 1;
  sub_525328(a2, &v7, 0);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    LODWORD(v7) = 93;
    HIDWORD(v7) = v5;
    sub_29603C((void **)(a2 + 8), &v7);
  }
}

void sub_524F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_524F68(_Unwind_Exception *a1)
{
  sub_4D9814(v1);
  _Unwind_Resume(a1);
}

void sub_524F7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = -1;
  uint64_t v4 = operator new(8uLL);
  long long __p = v4;
  void *v4 = (a1 << 32) | 0x10008;
  uint64_t v7 = v4 + 1;
  uint64_t v8 = v4 + 1;
  sub_525328(a2, &v5, 0);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_524FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_52500C(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 >= 2) {
    sub_5AE8("array::at");
  }
  int v2 = dword_20E8314[a1];
  __int16 v3 = -1;
  char v4 = -1;
  long long __p = 0uLL;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_524ADC(a2, (uint64_t)&v2, 0);
  if (v7 < 0) {
    operator delete(*(void **)((char *)&__p + 1));
  }
}

void sub_5250A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5250C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = -1;
  char v4 = operator new(8uLL);
  long long __p = v4;
  void *v4 = (a1 << 32) | 0x1007D;
  char v7 = v4 + 1;
  uint64_t v8 = v4 + 1;
  sub_525328(a2, &v5, 0);
  if (__p)
  {
    char v7 = __p;
    operator delete(__p);
  }
}

void sub_525134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_525150(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = -1;
  char v4 = operator new(8uLL);
  long long __p = v4;
  void *v4 = (a1 << 32) | 0xBF;
  char v7 = v4 + 1;
  uint64_t v8 = v4 + 1;
  sub_525328(a2, &v5, 0);
  if (__p)
  {
    char v7 = __p;
    operator delete(__p);
  }
}

void sub_5251C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5251DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v9 = *(void *)(a1 + 16);
  }
  __int16 v3 = sub_5258EC(&qword_2564C30, (uint64_t)__p);
  char v4 = v3;
  if (v3)
  {
    unint64_t v5 = ((unint64_t)*((unsigned int *)v3 + 10) << 32) | 4;
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v5 = 4;
  if (SHIBYTE(v9) < 0) {
LABEL_6:
  }
    operator delete(__p[0]);
LABEL_7:
  if (!v4)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v10 = -1;
  uint64_t v6 = operator new(8uLL);
  uint64_t v11 = v6;
  *uint64_t v6 = v5;
  int v12 = v6 + 1;
  int v13 = v6 + 1;
  sub_525328(a2, &v10, 0);
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
}

void sub_5252F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_525328(uint64_t a1, uint64_t *a2, char a3)
{
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 43) = -1;
  *(void *)(a1 + 47) = 0;
  *(void *)(a1 + 63) = 0;
  *(void *)(a1 + 55) = 0;
  *(unsigned char *)(a1 + 71) = 0;
  *(unsigned char *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)a2[1];
  unint64_t v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

void sub_5253F0(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    int v6 = *(_DWORD *)(v1 + 32);
    if (v6 != 1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v1 + 48));
  int v6 = *(_DWORD *)(v1 + 32);
  if (v6 != 1)
  {
LABEL_5:
    if (v6 || (*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
    int64_t v7 = *v2;
LABEL_13:
    operator delete(v7);
    goto LABEL_14;
  }
LABEL_11:
  int64_t v7 = *v2;
  if (!*v2) {
    goto LABEL_14;
  }
  *(void *)(v1 + 16) = v7;
  goto LABEL_13;
}

uint64_t *sub_525478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  int v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)int v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v29 = *(void **)(*(void *)a1 + 8 * v10);
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      int v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int v29 = *(void **)(*(void *)a1 + 8 * v3);
  int v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *int v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_5258C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_5258D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_5258EC(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_525B1C()
{
  __chkstk_darwin();
  byte_2564C2F = 3;
  dword_2564C18 = 4477781;
  uint64_t v0 = &v3;
  char v4 = 3;
  int v3 = 4282948;
  char v7 = 3;
  int v5 = 0;
  int v6 = 5853781;
  char v10 = 3;
  int v8 = 1;
  int v9 = 4543041;
  char v13 = 3;
  int v11 = 2;
  int v12 = 5129538;
  char v16 = 3;
  int v14 = 3;
  int v15 = 5130307;
  int v17 = 4;
  v18[23] = 3;
  strcpy(v18, "HKG");
  char v21 = 3;
  int v19 = 5;
  int v20 = 4278094;
  char v24 = 3;
  int v22 = 6;
  int v23 = 5131599;
  char v27 = 3;
  int v25 = 7;
  int v26 = 5521745;
  int v28 = 8;
  char v30 = 3;
  int v29 = 5066326;
  int v31 = 9;
  v32[23] = 3;
  strcpy(v32, "JPN");
  int v33 = 10;
  char v35 = 3;
  int v34 = 4277826;
  int v36 = 11;
  char v38 = 3;
  int v37 = 5392450;
  int v39 = 12;
  char v41 = 3;
  int v40 = 4805187;
  int v42 = 13;
  char v44 = 3;
  int v43 = 4476488;
  int v45 = 14;
  v46[23] = 3;
  strcpy(v46, "JAM");
  int v47 = 15;
  v48[23] = 3;
  strcpy(v48, "KWT");
  int v49 = 16;
  v50[23] = 3;
  strcpy(v50, "MLI");
  int v51 = 17;
  v52[23] = 3;
  strcpy(v52, "NIC");
  int v53 = 18;
  v54[23] = 3;
  strcpy(v54, "PAN");
  int v55 = 19;
  v56[23] = 3;
  strcpy(v56, "SAU");
  int v57 = 20;
  v58[23] = 3;
  strcpy(v58, "SLV");
  int v59 = 21;
  v60[23] = 3;
  strcpy(v60, "AUS");
  int v61 = 22;
  v62[23] = 3;
  strcpy(v62, "NFK");
  int v63 = 23;
  v64[23] = 3;
  strcpy(v64, "NZL");
  int v65 = 24;
  v66[23] = 3;
  strcpy(v66, "BRA");
  int v67 = 25;
  v68[23] = 3;
  strcpy(v68, "CIV");
  int v69 = 26;
  v70[23] = 3;
  strcpy(v70, "CMR");
  int v71 = 27;
  v72[23] = 3;
  strcpy(v72, "COL");
  int v73 = 28;
  v74[23] = 3;
  strcpy(v74, "DOM");
  int v75 = 29;
  v76[23] = 3;
  strcpy(v76, "ECU");
  int v77 = 30;
  v78[23] = 3;
  strcpy(v78, "ETH");
  int v79 = 31;
  v80[23] = 3;
  strcpy(v80, "GTM");
  int v81 = 32;
  v82[23] = 3;
  strcpy(v82, "JOR");
  int v83 = 33;
  v84[23] = 3;
  strcpy(v84, "KEN");
  int v85 = 34;
  v86[23] = 3;
  strcpy(v86, "NER");
  int v87 = 35;
  v88[23] = 3;
  strcpy(v88, "PSE");
  int v89 = 36;
  v90[23] = 3;
  strcpy(v90, "SEN");
  int v91 = 37;
  v92[23] = 3;
  strcpy(v92, "TZA");
  int v93 = 38;
  v94[23] = 3;
  strcpy(v94, "VEN");
  int v95 = 39;
  v96[23] = 3;
  strcpy(v96, "ABW");
  int v97 = 40;
  v98[23] = 3;
  strcpy(v98, "AFG");
  int v99 = 41;
  v100[23] = 3;
  strcpy(v100, "AGO");
  int v101 = 42;
  v102[23] = 3;
  strcpy(v102, "AIA");
  int v103 = 43;
  v104[23] = 3;
  strcpy(v104, "ANT");
  int v105 = 44;
  v106[23] = 3;
  strcpy(v106, "ARM");
  int v107 = 45;
  v108[23] = 3;
  int v109 = 46;
  strcpy(v110, "CCK");
  int v111 = 47;
  strcpy(v112, "IOT");
  int v113 = 48;
  strcpy(v114, "LSO");
  int v115 = 49;
  int v117 = 50;
  strcpy(v118, "MHL");
  int v119 = 51;
  strcpy(v120, "MTQ");
  int v121 = 52;
  int v123 = 53;
  strcpy(v124, "NRU");
  int v125 = 54;
  strcpy(v126, "PCN");
  int v127 = 55;
  strcpy(v128, "PNG");
  int v129 = 56;
  int v131 = 57;
  int v133 = 58;
  int v135 = 59;
  int v137 = 60;
  strcpy(v138, "XGO");
  int v139 = 61;
  strcpy(v140, "ZAF");
  int v141 = 62;
  int v143 = 63;
  strcpy(v144, "EGY");
  int v145 = 64;
  strcpy(v148, "GHA");
  strcpy(v154, "IDN");
  strcpy(v156, "LIE");
  strcpy(v158, "MCO");
  strcpy(v160, "SJM");
  strcpy(v162, "TWN");
  strcpy(v164, "VAT");
  int v165 = 74;
  strcpy(v108, "ATA");
  v110[23] = 3;
  v112[23] = 3;
  v114[23] = 3;
  v116[23] = 3;
  strcpy(v172, "AND");
  strcpy(v116, "MDV");
  v118[23] = 3;
  v120[23] = 3;
  strcpy(v176, "ARG");
  v122[23] = 3;
  strcpy(v178, "AUT");
  strcpy(v180, "AZE");
  strcpy(v182, "BHS");
  strcpy(v122, "MYT");
  v124[23] = 3;
  v126[23] = 3;
  v128[23] = 3;
  v130[23] = 3;
  strcpy(v130, "SGS");
  int v183 = 83;
  int v151 = 67;
  int v191 = 87;
  int v193 = 88;
  int v187 = 85;
  strcpy(v194, "BMU");
  strcpy(v196, "BTN");
  int v197 = 90;
  strcpy(v198, "BOL");
  int v199 = 91;
  int v161 = 72;
  strcpy(v200, "BIH");
  int v201 = 92;
  strcpy(v202, "BWA");
  int v203 = 93;
  strcpy(v186, "BRB");
  strcpy(v204, "BRN");
  int v205 = 94;
  strcpy(v184, "BGD");
  strcpy(v206, "BGR");
  int v207 = 95;
  strcpy(v208, "BDI");
  int v209 = 96;
  strcpy(v210, "KHM");
  int v211 = 97;
  strcpy(v142, "CAF");
  strcpy(v212, "CAN");
  int v213 = 98;
  int v215 = 99;
  int v217 = 100;
  int v219 = 101;
  int v169 = 76;
  int v221 = 102;
  int v181 = 82;
  strcpy(v222, "CXR");
  int v223 = 103;
  int v171 = 77;
  int v225 = 104;
  int v159 = 71;
  int v227 = 105;
  int v153 = 68;
  int v229 = 106;
  strcpy(v224, "COM");
  strcpy(v226, "COG");
  strcpy(v228, "COD");
  strcpy(v230, "COK");
  int v231 = 107;
  int v189 = 86;
  strcpy(v232, "HRV");
  int v233 = 108;
  int v235 = 109;
  int v177 = 80;
  strcpy(v216, "CYM");
  strcpy(v236, "CYP");
  int v237 = 110;
  int v155 = 69;
  strcpy(v238, "CZE");
  int v239 = 111;
  strcpy(v240, "DNK");
  int v241 = 112;
  strcpy(v242, "DJI");
  int v243 = 113;
  strcpy(v244, "DMA");
  int v245 = 114;
  int v179 = 81;
  strcpy(v152, "GNB");
  strcpy(v246, "GNQ");
  int v247 = 115;
  strcpy(v248, "ERI");
  int v249 = 116;
  int v251 = 117;
  int v167 = 75;
  strcpy(v252, "FLK");
  int v253 = 118;
  int v175 = 79;
  int v255 = 119;
  strcpy(v132, "SLB");
  int v163 = 73;
  strcpy(v256, "FJI");
  int v257 = 120;
  strcpy(v258, "FIN");
  int v259 = 121;
  strcpy(v254, "FRO");
  strcpy(v260, "FRA");
  int v261 = 122;
  int v263 = 123;
  strcpy(v264, "PYF");
  int v265 = 124;
  int v421 = 203;
  strcpy(v420, "SVK");
  strcpy(v422, "SVN");
  int v423 = 204;
  strcpy(v424, "SOM");
  strcpy(v146, "ESH");
  strcpy(v250, "EST");
  strcpy(v426, "ESP");
  int v427 = 206;
  v428[23] = 3;
  int v425 = 205;
  v426[23] = 3;
  v422[23] = 3;
  v424[23] = 3;
  int v173 = 78;
  v420[23] = 3;
  strcpy(v418, "SGP");
  int v419 = 202;
  int v417 = 201;
  v418[23] = 3;
  v416[23] = 3;
  strcpy(v416, "SLE");
  int v415 = 200;
  strcpy(v414, "SYC");
  strcpy(v394, "RUS");
  v414[23] = 3;
  strcpy(v412, "SRB");
  int v413 = 199;
  strcpy(v410, "STP");
  int v411 = 198;
  v412[23] = 3;
  int v409 = 197;
  v410[23] = 3;
  int v395 = 190;
  strcpy(v408, "SMR");
  v408[23] = 3;
  strcpy(v406, "WSM");
  int v407 = 196;
  int v405 = 195;
  v406[23] = 3;
  strcpy(v404, "VCT");
  v404[23] = 3;
  strcpy(v402, "LCA");
  int v403 = 194;
  int v399 = 192;
  int v401 = 193;
  v402[23] = 3;
  v400[23] = 3;
  strcpy(v400, "KNA");
  strcpy(v398, "SHN");
  v398[23] = 3;
  v396[23] = 3;
  int v397 = 191;
  strcpy(v396, "RWA");
  int v393 = 189;
  v394[23] = 3;
  strcpy(v382, "PER");
  strcpy(v392, "ROU");
  v392[23] = 3;
  int v383 = 184;
  strcpy(v390, "REU");
  int v391 = 188;
  int v387 = 186;
  int v389 = 187;
  v390[23] = 3;
  v388[23] = 3;
  strcpy(v388, "PRT");
  strcpy(v384, "PHL");
  strcpy(v386, "POL");
  int v385 = 185;
  v386[23] = 3;
  int v157 = 70;
  v384[23] = 3;
  int v381 = 183;
  v382[23] = 3;
  v380[23] = 3;
  strcpy(v380, "PRY");
  strcpy(v378, "PLW");
  int v379 = 182;
  v378[23] = 3;
  strcpy(v174, "ATG");
  strcpy(v266, "ATF");
  strcpy(v376, "PAK");
  int v377 = 181;
  strcpy(v374, "NOR");
  int v375 = 180;
  v376[23] = 3;
  int v267 = 125;
  int v373 = 179;
  v374[23] = 3;
  int v371 = 178;
  v372[23] = 3;
  strcpy(v372, "MNP");
  int v195 = 89;
  strcpy(v370, "NIU");
  v370[23] = 3;
  strcpy(v368, "NCL");
  int v369 = 177;
  int v367 = 176;
  v368[23] = 3;
  strcpy(v366, "NLD");
  v366[23] = 3;
  strcpy(v364, "NPL");
  int v365 = 175;
  int v363 = 174;
  v364[23] = 3;
  int v361 = 173;
  v362[23] = 3;
  strcpy(v362, "NAM");
  int v325 = 155;
  v360[23] = 3;
  strcpy(v360, "MMR");
  strcpy(v358, "MOZ");
  int v359 = 172;
  int v357 = 171;
  v358[23] = 3;
  v356[23] = 3;
  strcpy(v356, "MAR");
  strcpy(v354, "MSR");
  int v355 = 170;
  strcpy(v326, "LUX");
  strcpy(v352, "MNE");
  int v353 = 169;
  v354[23] = 3;
  strcpy(v334, "MWI");
  int v351 = 168;
  v352[23] = 3;
  int v335 = 160;
  int v349 = 167;
  v350[23] = 3;
  strcpy(v350, "MNG");
  v348[23] = 3;
  strcpy(v348, "MDA");
  strcpy(v336, "MYS");
  strcpy(v346, "FSM");
  int v347 = 166;
  int v345 = 165;
  v346[23] = 3;
  strcpy(v344, "MEX");
  v344[23] = 3;
  strcpy(v342, "MUS");
  int v343 = 164;
  strcpy(v340, "MRT");
  int v341 = 163;
  v342[23] = 3;
  strcpy(v338, "MLT");
  int v339 = 162;
  v340[23] = 3;
  int v337 = 161;
  int v147 = 65;
  v336[23] = 3;
  v338[23] = 3;
  v334[23] = 3;
  v326[23] = 3;
  strcpy(v332, "MDG");
  int v333 = 159;
  strcpy(v330, "MKD");
  int v331 = 158;
  v332[23] = 3;
  int v327 = 156;
  v328[23] = 3;
  int v329 = 157;
  v330[23] = 3;
  strcpy(v328, "MAC");
  strcpy(v324, "LTU");
  v324[23] = 3;
  int v319 = 152;
  v322[23] = 3;
  strcpy(v322, "LBY");
  int v323 = 154;
  int v321 = 153;
  v320[23] = 3;
  strcpy(v320, "LBR");
  int v185 = 84;
  v318[23] = 3;
  strcpy(v318, "LBN");
  strcpy(v316, "LVA");
  int v317 = 151;
  strcpy(v268, "GAB");
  int v315 = 150;
  v316[23] = 3;
  int v269 = 126;
  int v313 = 149;
  v314[23] = 3;
  strcpy(v314, "LAO");
  int v303 = 143;
  v312[23] = 3;
  strcpy(v312, "KGZ");
  strcpy(v310, "KOR");
  int v311 = 148;
  strcpy(v308, "KIR");
  int v309 = 146;
  v310[23] = 3;
  strcpy(v304, "ITA");
  int v307 = 145;
  v308[23] = 3;
  int v305 = 144;
  v306[23] = 3;
  strcpy(v306, "KAZ");
  strcpy(v214, "CPV");
  v304[23] = 3;
  strcpy(v528, "CPT");
  int v301 = 142;
  v302[23] = 3;
  strcpy(v302, "IRL");
  strcpy(v272, "GEO");
  int v273 = 128;
  v300[23] = 3;
  strcpy(v300, "IRQ");
  strcpy(v166, "ISR");
  strcpy(v298, "IRN");
  int v299 = 141;
  strcpy(v296, "IND");
  int v297 = 140;
  v298[23] = 3;
  strcpy(v294, "ISL");
  int v295 = 139;
  v296[23] = 3;
  strcpy(v274, "DEU");
  int v293 = 138;
  v294[23] = 3;
  int v275 = 129;
  strcpy(v292, "HUN");
  v292[23] = 3;
  int v277 = 130;
  strcpy(v290, "HTI");
  int v291 = 137;
  int v289 = 136;
  strcpy(v288, "GUY");
  v290[23] = 3;
  int v279 = 131;
  int v287 = 135;
  v288[23] = 3;
  int v285 = 134;
  strcpy(v150, "GIB");
  v286[23] = 3;
  strcpy(v286, "GIN");
  int v283 = 133;
  strcpy(v262, "GUF");
  strcpy(v284, "GUM");
  v284[23] = 3;
  int v281 = 132;
  strcpy(v282, "GLP");
  v282[23] = 3;
  strcpy(v276, "GRC");
  strcpy(v278, "GRL");
  v280[23] = 3;
  strcpy(v280, "GRD");
  v278[23] = 3;
  int v149 = 66;
  v276[23] = 3;
  v274[23] = 3;
  v270[23] = 3;
  int v271 = 127;
  v272[23] = 3;
  strcpy(v270, "GMB");
  strcpy(v428, "LKA");
  int v429 = 207;
  strcpy(v430, "SDN");
  int v431 = 208;
  strcpy(v432, "SUR");
  int v433 = 209;
  strcpy(v134, "SWZ");
  v268[23] = 3;
  strcpy(v434, "SWE");
  int v435 = 210;
  v266[23] = 3;
  strcpy(v220, "CHL");
  v264[23] = 3;
  strcpy(v436, "CHE");
  int v437 = 211;
  strcpy(v136, "TUV");
  v252[23] = 3;
  v262[23] = 3;
  v254[23] = 3;
  v256[23] = 3;
  v260[23] = 3;
  v258[23] = 3;
  strcpy(v438, "SYR");
  int v439 = 212;
  strcpy(v440, "TJK");
  int v441 = 213;
  strcpy(v442, "THA");
  int v443 = 214;
  strcpy(v444, "TLS");
  int v445 = 215;
  strcpy(v446, "TGO");
  int v447 = 216;
  strcpy(v448, "TON");
  int v449 = 217;
  strcpy(v450, "TTO");
  int v451 = 218;
  int v453 = 219;
  strcpy(v218, "TCD");
  v234[23] = 3;
  v250[23] = 3;
  strcpy(v452, "TUN");
  strcpy(v454, "TUR");
  int v455 = 220;
  int v457 = 221;
  strcpy(v234, "CUB");
  v246[23] = 3;
  v248[23] = 3;
  v236[23] = 3;
  v238[23] = 3;
  v244[23] = 3;
  v240[23] = 3;
  v242[23] = 3;
  strcpy(v458, "TCA");
  int v459 = 222;
  strcpy(v460, "UGA");
  int v461 = 223;
  strcpy(v462, "UKR");
  int v463 = 224;
  strcpy(v464, "GBR");
  int v465 = 225;
  strcpy(v466, "USA");
  int v467 = 226;
  strcpy(v468, "UZB");
  int v469 = 227;
  strcpy(v470, "VUT");
  int v471 = 228;
  strcpy(v472, "VGB");
  int v473 = 229;
  strcpy(v474, "WLF");
  int v475 = 230;
  strcpy(v476, "YEM");
  int v477 = 231;
  strcpy(v478, "ZMB");
  int v479 = 232;
  strcpy(v480, "ZWE");
  int v481 = 233;
  strcpy(v482, "SXM");
  int v483 = 234;
  int v485 = 235;
  v232[23] = 3;
  strcpy(v486, "MAF");
  int v487 = 236;
  v230[23] = 3;
  strcpy(v188, "BLR");
  strcpy(v192, "BLZ");
  v218[23] = 3;
  v226[23] = 3;
  v228[23] = 3;
  v220[23] = 3;
  v222[23] = 3;
  v224[23] = 3;
  strcpy(v488, "BLM");
  int v489 = 237;
  strcpy(v490, "OAU");
  int v491 = 239;
  strcpy(v492, "HMD");
  int v493 = 240;
  strcpy(v494, "SPM");
  int v495 = 241;
  strcpy(v496, "VIR");
  int v497 = 242;
  strcpy(v498, "SSD");
  int v499 = 243;
  strcpy(v456, "TKM");
  strcpy(v500, "TKL");
  int v501 = 244;
  strcpy(v502, "BVT");
  int v503 = 245;
  v216[23] = 3;
  strcpy(v168, "ALB");
  strcpy(v504, "ALA");
  int v505 = 246;
  strcpy(v506, "CUW");
  int v507 = 247;
  strcpy(v190, "BEL");
  v214[23] = 3;
  strcpy(v508, "BES");
  int v509 = 248;
  v212[23] = 3;
  strcpy(v170, "ASM");
  v206[23] = 3;
  v208[23] = 3;
  v210[23] = 3;
  strcpy(v510, "ASC");
  int v511 = 249;
  strcpy(v512, "XKK");
  int v513 = 250;
  strcpy(v514, "UMI");
  int v515 = 251;
  strcpy(v516, "TAA");
  int v517 = 252;
  v200[23] = 3;
  v204[23] = 3;
  v202[23] = 3;
  strcpy(v484, "PRK");
  strcpy(v518, "PRI");
  int v519 = 253;
  strcpy(v520, "JEY");
  int v521 = 254;
  strcpy(v522, "IMN");
  int v523 = 255;
  strcpy(v524, "GGY");
  int v525 = 256;
  strcpy(v526, "DGA");
  v198[23] = 3;
  v134[23] = 3;
  v136[23] = 3;
  v196[23] = 3;
  v138[23] = 3;
  v140[23] = 3;
  v194[23] = 3;
  v142[23] = 3;
  v190[23] = 3;
  v192[23] = 3;
  v144[23] = 3;
  v146[23] = 3;
  v188[23] = 3;
  v148[23] = 3;
  v150[23] = 3;
  v186[23] = 3;
  v152[23] = 3;
  v154[23] = 3;
  v184[23] = 3;
  v156[23] = 3;
  v158[23] = 3;
  v182[23] = 3;
  v160[23] = 3;
  v178[23] = 3;
  v180[23] = 3;
  v162[23] = 3;
  v164[23] = 3;
  v176[23] = 3;
  v166[23] = 3;
  v168[23] = 3;
  v174[23] = 3;
  v170[23] = 3;
  v172[23] = 3;
  v430[23] = 3;
  v432[23] = 3;
  v434[23] = 3;
  v436[23] = 3;
  v438[23] = 3;
  v440[23] = 3;
  v442[23] = 3;
  v444[23] = 3;
  v446[23] = 3;
  v448[23] = 3;
  v450[23] = 3;
  v452[23] = 3;
  v454[23] = 3;
  v456[23] = 3;
  v458[23] = 3;
  v460[23] = 3;
  v462[23] = 3;
  v464[23] = 3;
  v466[23] = 3;
  v468[23] = 3;
  v470[23] = 3;
  v472[23] = 3;
  v474[23] = 3;
  v476[23] = 3;
  v478[23] = 3;
  v480[23] = 3;
  v482[23] = 3;
  v484[23] = 3;
  v486[23] = 3;
  v488[23] = 3;
  v490[23] = 3;
  v492[23] = 3;
  v494[23] = 3;
  v496[23] = 3;
  v498[23] = 3;
  v500[23] = 3;
  v502[23] = 3;
  v504[23] = 3;
  v506[23] = 3;
  v508[23] = 3;
  v510[23] = 3;
  v512[23] = 3;
  v514[23] = 3;
  v516[23] = 3;
  v518[23] = 3;
  v520[23] = 3;
  v522[23] = 3;
  v524[23] = 3;
  v526[23] = 3;
  v132[23] = 3;
  char v529 = 3;
  int v530 = 258;
  dword_2564C50 = 1065353216;
  *(_OWORD *)&qword_2564C40 = 0u;
  *(_OWORD *)&qword_2564C30 = 0u;
  uint64_t v1 = 257;
  int v527 = 257;
  do
  {
    sub_525478((uint64_t)&qword_2564C30, (uint64_t)v0, (uint64_t)v0);
    v0 += 8;
    --v1;
  }
  while (v1);
  for (uint64_t i = 0; i != -8224; i -= 32)
  {
    if (*(&v529 + i) < 0) {
      operator delete(*(void **)&v528[i]);
    }
  }
}

void sub_527B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_2564C40) {
    sub_20A9214((void **)qword_2564C40);
  }
  sub_20A91C0((uint64_t)&STACK[0x2020], (uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_527B88(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  *(void *)a1 = off_2439A88;
  char v10 = (void *)(a1 + 8);
  sub_62B9C4(a1 + 8, (int)a4, 3, *(unsigned __int8 *)(a3 + 1525), a5);
  sub_62B9C4(a1 + 2048, (int)a4, 2, 0, a5);
  sub_4BBDC0(a1 + 4088, a3);
  *(void *)(a1 + 5624) = a4;
  *(void *)(a1 + 5632) = sub_376F8C(a4);
  sub_4D30C8(a1 + 5640);
  sub_70F6C0(a1 + 7816, a2, a3);
  sub_7A4D0C(a1 + 7832, (int)a4, (int)a2, a3, v10);
  int v11 = (uint64_t *)(a1 + 11448);
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_DWORD *)(a1 + 11492) = 0;
  int v12 = (void **)(a1 + 11504);
  *(void *)(a1 + 11504) = 0;
  *(void *)(a1 + 11520) = 0;
  *(void *)(a1 + 11512) = 0;
  *(_OWORD *)(a1 + 11448) = 0u;
  char v13 = *(_DWORD **)(a3 + 1072);
  int v14 = *(_DWORD **)(a3 + 1080);
  if (v13 == v14)
  {
    *(_WORD *)(a1 + 11500) = 0;
    *(unsigned char *)(a1 + 11502) = 0;
    uint64_t v18 = v13;
  }
  else
  {
    int v15 = *(_DWORD **)(a3 + 1072);
    while (*v15 != 2)
    {
      if (++v15 == v14)
      {
        int v15 = *(_DWORD **)(a3 + 1080);
        break;
      }
    }
    *(unsigned char *)(a1 + 11500) = v15 != v14;
    char v16 = v13;
    while (*v16 != 1)
    {
      if (++v16 == v14)
      {
        char v16 = v14;
        break;
      }
    }
    *(unsigned char *)(a1 + 11501) = v16 != v14;
    int v17 = v13;
    while (*v17 != 4)
    {
      if (++v17 == v14)
      {
        int v17 = v14;
        break;
      }
    }
    *(unsigned char *)(a1 + 11502) = v17 != v14;
    uint64_t v18 = v13;
    while (*v18 != 3)
    {
      if (++v18 == v14)
      {
        uint64_t v18 = v14;
        break;
      }
    }
  }
  *(unsigned char *)(a1 + 11503) = v18 != v14;
  sub_688A04(a2, 3u, *(_DWORD *)(a3 + 968), &v40);
  int v19 = *(_DWORD *)(a3 + 1000);
  if (v19)
  {
    sub_6892E8(a2, 3u, v19, &v38);
    uint64_t v20 = v40;
  }
  else
  {
    uint64_t v20 = v40;
    uint64_t v38 = v40;
    int v39 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v34 = v20;
  char v35 = v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = v38;
  int v33 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DE48((uint64_t)&v36, &v34, &v32, (char *)v10, a3);
  sub_4D3210(a1 + 5640, &v36);
  sub_4F2894((uint64_t)&v36);
  char v21 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int v22 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_688A04(a2, 4u, *(_DWORD *)(a3 + 968), (uint64_t *)&v36);
  long long v23 = v36;
  long long v36 = 0uLL;
  char v24 = *(std::__shared_weak_count **)(a1 + 11456);
  *(_OWORD *)int v11 = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  sub_688A04(a2, 0, *(_DWORD *)(a3 + 968), (uint64_t *)&v36);
  long long v26 = v36;
  long long v36 = 0uLL;
  char v27 = *(std::__shared_weak_count **)(a1 + 11472);
  *(_OWORD *)(a1 + 11464) = v26;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  int v28 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  sub_8D8884(*(void *)(a1 + 11464), *v11);
  sub_689794(a2, *(_DWORD *)(a3 + 968), (char *)&v36);
  if (*(char *)(a1 + 11527) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)int v12 = v36;
  *(void *)(a1 + 11520) = v37;
  int v29 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  char v30 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  return a1;
}

void sub_528108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_14A84(v17 - 104);
  if (*(char *)(v15 + 79) < 0) {
    operator delete(*v11);
  }
  sub_14A84(v16);
  sub_14A84(v15);
  sub_528218(v14);
  sub_14A84(v13);
  sub_4F2894(v12);
  sub_4BCED0(a10);
  if (*(char *)(v10 + 3975) < 0) {
    operator delete(*(void **)(v10 + 3952));
  }
  if ((*(char *)(v10 + 1935) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v10 + 1912));
  _Unwind_Resume(a1);
}

void sub_5281B0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v2 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  JUMPOUT(0x528130);
}

void sub_5281C8()
{
  if ((*(char *)(v0 + 79) & 0x80000000) == 0) {
    JUMPOUT(0x528150);
  }
  JUMPOUT(0x528148);
}

void sub_5281D8()
{
}

void sub_5281E0()
{
}

void sub_5281E8()
{
  if ((*(char *)(v0 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x528190);
  }
  JUMPOUT(0x528188);
}

void sub_5281F8()
{
}

void sub_528200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_4BCED0(a10);
  if ((*(char *)(v10 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x528190);
  }
  JUMPOUT(0x528188);
}

uint64_t sub_528218(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 3608);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 3592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 3592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  sub_4BCED0(a1 + 2048);
  if (*(char *)(a1 + 1935) < 0) {
    operator delete(*(void **)(a1 + 1912));
  }
  return a1;
}

void sub_528304(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::string *)*a2;
  int v5 = (std::string *)a2[1];
  if ((std::string *)*a2 != v5)
  {
    do
    {
      sub_5297AC(a1, v4);
      v4 += 315;
    }
    while (v4 != v5);
  }
  sub_529C74(a1, a2);
  int v6 = (std::string *)*a2;
  char v7 = (std::string *)a2[1];
  if ((std::string *)*a2 != v7)
  {
    do
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 32))(a1, v6);
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 24))(a1, v6);
      sub_64900C((uint64_t *)v6);
      sub_648360(v6, (const std::string *)(a1 + 11504));
      v6 += 315;
    }
    while (v6 != v7);
  }
}

void sub_5283FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 24) == 0x7FFFFFFF || *(_DWORD *)(a2 + 60) == 0x7FFFFFFF) {
    return;
  }
  if (!sub_40A45C((int *)(a2 + 32))) {
    return;
  }
  int v7 = *(_DWORD *)(a2 + 136);
  if (v7 == -1) {
    return;
  }
  if (v7 == 1)
  {
    unint64_t v8 = *(void *)(a2 + 128);
    if (v8 > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 128)) {
      return;
    }
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 5632);
    int v102 = *(_DWORD *)(a2 + 136);
    unint64_t v101 = v8;
    unint64_t v10 = sub_28CF4C(v9, &v101);
    int v11 = sub_28F040(*(void *)(a1 + 5632), v10);
    uint64_t v12 = (char **)sub_37D0C0(a1 + 5320);
    int v13 = sub_89DD4(v12);
    int v90 = v13;
    uint64_t v15 = *v11;
    uint64_t v14 = v11[1];
    if (*v11 != v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15;
      do
      {
        if (*(unsigned char *)(v17 + 24) == 1 && (*(_DWORD *)(v17 + 28) & v13) != 0) {
          ++v16;
        }
        v17 += 40;
      }
      while (v17 != v14);
      if (v16)
      {
        unint64_t v18 = v14 - v15 - 40;
        if (v18 >= 0x28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          unint64_t v32 = v18 / 0x28 + 1;
          uint64_t v20 = v15 + 40 * (v32 & 0xFFFFFFFFFFFFFFELL);
          int v33 = (int *)(v15 + 68);
          uint64_t v34 = v32 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            int v35 = *(v33 - 10);
            int v37 = *v33;
            v33 += 20;
            int v36 = v37;
            if ((v35 & v13) != 0) {
              ++v30;
            }
            if ((v36 & v13) != 0) {
              ++v31;
            }
            v34 -= 2;
          }
          while (v34);
          unint64_t v19 = v31 + v30;
          if (v32 == (v32 & 0xFFFFFFFFFFFFFFELL))
          {
LABEL_45:
            memset(&__str, 0, sizeof(__str));
            sub_503BC8(v19, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
            if (byte_25688FF >= 0) {
              uint64_t v38 = (const std::string::value_type *)&qword_25688E8;
            }
            else {
              uint64_t v38 = (const std::string::value_type *)qword_25688E8;
            }
            if (byte_25688FF >= 0) {
              std::string::size_type v39 = byte_25688FF;
            }
            else {
              std::string::size_type v39 = unk_25688F0;
            }
            uint64_t v40 = std::string::insert(&v75, 0, v38, v39);
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            *(void *)&v89[16] = *((void *)&v40->__r_.__value_.__l + 2);
            *(_OWORD *)int v89 = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            sub_6352AC((uint64_t)&v80, (uint64_t)v89);
            std::to_string(&v75, v16);
            sub_6358A0((uint64_t)&v80, &xmmword_2568930, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            std::to_string(&v75, v19);
            sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&__p);
            sub_5F3D48((uint64_t)&v75, (uint64_t)__p);
            sub_5250C0(3, (uint64_t)&__str);
            sub_52FD00(a3 + 408, (uint64_t)&v75);
            sub_4F39B8(a3 + 568, &__str);
            *(void *)(a3 + 608) = v94;
            std::string::operator=((std::string *)(a3 + 616), &v95);
            *(unsigned char *)(a3 + 640) = v96;
            std::string::operator=((std::string *)(a3 + 648), &v97);
            *(unsigned char *)(a3 + 672) = v98;
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v97.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_61:
                int v42 = v93;
                if (v93 != 1) {
                  goto LABEL_62;
                }
                goto LABEL_88;
              }
            }
            else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_61;
            }
            operator delete(v95.__r_.__value_.__l.__data_);
            int v42 = v93;
            if (v93 != 1)
            {
LABEL_62:
              if (v42 || (v92 & 0x80000000) == 0) {
                goto LABEL_91;
              }
              std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
              goto LABEL_90;
            }
LABEL_88:
            std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
            if (!__str.__r_.__value_.__l.__size_)
            {
LABEL_91:
              sub_4D4B58((uint64_t)&v75);
              int v51 = (char *)__p;
              if (__p)
              {
                int v52 = v87;
                int v53 = __p;
                if (v87 != __p)
                {
                  do
                  {
                    if (*(v52 - 1) < 0) {
                      operator delete(*((void **)v52 - 3));
                    }
                    v52 -= 24;
                  }
                  while (v52 != v51);
                  int v53 = __p;
                }
                int v87 = v51;
                operator delete(v53);
              }
              int v54 = v83;
              if (v83)
              {
                do
                {
                  int v55 = (void *)*v54;
                  sub_4F4B48((uint64_t)(v54 + 2));
                  operator delete(v54);
                  int v54 = v55;
                }
                while (v55);
              }
              int v56 = (void *)*((void *)&v81 + 1);
              *((void *)&v81 + 1) = 0;
              if (v56) {
                operator delete(v56);
              }
              uint64_t v57 = v80;
              if ((void)v80)
              {
                uint64_t v58 = *((void *)&v80 + 1);
                int v59 = (void *)v80;
                if (*((void *)&v80 + 1) != (void)v80)
                {
                  do
                  {
                    if (*(char *)(v58 - 1) < 0) {
                      operator delete(*(void **)(v58 - 24));
                    }
                    v58 -= 24;
                  }
                  while (v58 != v57);
                  int v59 = (void *)v80;
                }
                *((void *)&v80 + 1) = v57;
                operator delete(v59);
              }
              if ((v89[23] & 0x80000000) == 0) {
                return;
              }
              int v60 = *(void **)v89;
              goto LABEL_159;
            }
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_90:
            operator delete(size);
            goto LABEL_91;
          }
        }
        else
        {
          unint64_t v19 = 0;
          uint64_t v20 = v15;
        }
        do
        {
          if ((*(_DWORD *)(v20 + 28) & v13) != 0) {
            ++v19;
          }
          v20 += 40;
        }
        while (v20 != v14);
        goto LABEL_45;
      }
      long long v80 = 0u;
      long long v81 = 0u;
      int v82 = 1065353216;
      sub_60E8D8(a1 + 5640, (uint64_t)&qword_2568900, (uint64_t)&v80, 0, (uint64_t)v89);
      sub_5F3D48((uint64_t)&v75, (uint64_t)v89);
      sub_5250C0(2, (uint64_t)&__str);
      sub_52FD00(a3 + 408, (uint64_t)&v75);
      sub_4F39B8(a3 + 568, &__str);
      *(void *)(a3 + 608) = v94;
      std::string::operator=((std::string *)(a3 + 616), &v95);
      *(unsigned char *)(a3 + 640) = v96;
      std::string::operator=((std::string *)(a3 + 648), &v97);
      *(unsigned char *)(a3 + 672) = v98;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v97.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          int v28 = v93;
          if (v93 != 1) {
            goto LABEL_32;
          }
          goto LABEL_115;
        }
      }
      else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(v95.__r_.__value_.__l.__data_);
      int v28 = v93;
      if (v93 != 1)
      {
LABEL_32:
        if (v28 || (v92 & 0x80000000) == 0)
        {
LABEL_118:
          sub_4D4B58((uint64_t)&v75);
          if ((v89[23] & 0x80000000) != 0) {
            operator delete(*(void **)v89);
          }
          int v61 = (void *)v81;
          if ((void)v81)
          {
            do
            {
              int v62 = (void *)*v61;
              sub_4F4B48((uint64_t)(v61 + 2));
              operator delete(v61);
              int v61 = v62;
            }
            while (v62);
          }
          int v60 = (void *)v80;
          *(void *)&long long v80 = 0;
          if (!v60) {
            return;
          }
LABEL_159:
          operator delete(v60);
          return;
        }
        int v29 = (void *)__str.__r_.__value_.__l.__size_;
LABEL_117:
        operator delete(v29);
        goto LABEL_118;
      }
LABEL_115:
      int v29 = (void *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_118;
      }
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      goto LABEL_117;
    }
    char v21 = *(uint64_t **)(a1 + 5632);
    int v100 = v7;
    unint64_t v99 = v8;
    sub_28D048(v21, (uint64_t)&v99, (unint64_t)&v75);
    uint64_t v22 = v76;
    std::string::size_type v23 = v75.__r_.__value_.__r.__words[0];
    *(void *)int v89 = v76;
    uint64_t v24 = v77;
    *(_OWORD *)&_DWORD v89[8] = v77;
    long long v77 = 0uLL;
    uint64_t v76 = 0;
    if (v75.__r_.__value_.__r.__words[0])
    {
      uint64_t v74 = v24;
      std::string::size_type v25 = v75.__r_.__value_.__l.__size_;
      long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
      {
        do
        {
          char v27 = *(void **)(v25 - 24);
          if (v27)
          {
            *(void *)(v25 - 16) = v27;
            operator delete(v27);
          }
          v25 -= 48;
        }
        while (v25 != v23);
        long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      }
      v75.__r_.__value_.__l.__size_ = v23;
      operator delete(v26);
      uint64_t v24 = v74;
    }
    int v87 = 0;
    unint64_t v88 = 0;
    long long __p = &v87;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    sub_533348(v22, v24, (uint64_t **)&__p, (uint64_t *)&v87, (uint64_t)&__str, &v75);
    unint64_t v44 = v88;
    if (!v88)
    {
LABEL_152:
      sub_2F020((uint64_t)&__p, v87);
      if (!v22) {
        return;
      }
      for (uint64_t i = *(void *)&v89[8]; i != v22; i -= 48)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      int v60 = (void *)v22;
      goto LABEL_159;
    }
    memset(&__str, 0, sizeof(__str));
    sub_503BC8(v88, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
    if (byte_256892F >= 0) {
      int v45 = (const std::string::value_type *)&qword_2568918;
    }
    else {
      int v45 = (const std::string::value_type *)qword_2568918;
    }
    if (byte_256892F >= 0) {
      std::string::size_type v46 = byte_256892F;
    }
    else {
      std::string::size_type v46 = unk_2568920;
    }
    int v47 = std::string::insert(&v75, 0, v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    std::string::size_type v85 = v47->__r_.__value_.__r.__words[2];
    long long v84 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_6352AC((uint64_t)&v80, (uint64_t)&v84);
    std::to_string(&v75, v44);
    sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&v78);
    sub_5F3D48((uint64_t)&v75, (uint64_t)v78);
    sub_5250C0(1, (uint64_t)&__str);
    sub_52FD00(a3 + 408, (uint64_t)&v75);
    sub_4F39B8(a3 + 568, &__str);
    *(void *)(a3 + 608) = v94;
    std::string::operator=((std::string *)(a3 + 616), &v95);
    *(unsigned char *)(a3 + 640) = v96;
    std::string::operator=((std::string *)(a3 + 648), &v97);
    *(unsigned char *)(a3 + 672) = v98;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_82:
        int v49 = v93;
        if (v93 != 1) {
          goto LABEL_83;
        }
        goto LABEL_126;
      }
    }
    else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_82;
    }
    operator delete(v95.__r_.__value_.__l.__data_);
    int v49 = v93;
    if (v93 != 1)
    {
LABEL_83:
      if (v49 || (v92 & 0x80000000) == 0) {
        goto LABEL_129;
      }
      int v50 = (void *)__str.__r_.__value_.__l.__size_;
      goto LABEL_128;
    }
LABEL_126:
    int v50 = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_)
    {
LABEL_129:
      sub_4D4B58((uint64_t)&v75);
      int v63 = (void **)v78;
      if (v78)
      {
        int v64 = v79;
        int v65 = v78;
        if (v79 != v78)
        {
          do
          {
            if (*((char *)v64 - 1) < 0) {
              operator delete(*(v64 - 3));
            }
            v64 -= 3;
          }
          while (v64 != v63);
          int v65 = v78;
        }
        int v79 = v63;
        operator delete(v65);
      }
      int v66 = v83;
      if (v83)
      {
        do
        {
          int v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          int v66 = v67;
        }
        while (v67);
      }
      long long v68 = (void *)*((void *)&v81 + 1);
      *((void *)&v81 + 1) = 0;
      if (v68) {
        operator delete(v68);
      }
      uint64_t v69 = v80;
      if ((void)v80)
      {
        uint64_t v70 = *((void *)&v80 + 1);
        int v71 = (void *)v80;
        if (*((void *)&v80 + 1) != (void)v80)
        {
          do
          {
            if (*(char *)(v70 - 1) < 0) {
              operator delete(*(void **)(v70 - 24));
            }
            v70 -= 24;
          }
          while (v70 != v69);
          int v71 = (void *)v80;
        }
        *((void *)&v80 + 1) = v69;
        operator delete(v71);
      }
      if (SHIBYTE(v85) < 0) {
        operator delete((void *)v84);
      }
      uint64_t v22 = *(void *)v89;
      goto LABEL_152;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_128:
    operator delete(v50);
    goto LABEL_129;
  }
  if (v7)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  unint64_t v8 = *(void *)(a2 + 128);
  if (v8 != -1) {
    goto LABEL_13;
  }
}

void sub_528DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,char *a55)
{
  sub_4D4B58((uint64_t)&a12);
  sub_1A668(&a35);
  sub_4D4880(&a38);
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_2F020((uint64_t)&a54, a55);
  sub_28F14C((void **)(v55 - 256));
  _Unwind_Resume(a1);
}

void sub_528F10()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x528F1CLL);
}

void sub_528F44()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x528F50);
}

void sub_528F8C()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  int v10 = *(unsigned __int8 *)(v9 + 328);
  if (v10 == 5 || v10 == 3)
  {
    memcpy(__dst, (const void *)(v0 + 8), 0x76CuLL);
    if (*(char *)(v7 + 1935) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 1912), *(void *)(v7 + 1920));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 1912);
      uint64_t v31 = *(void *)(v7 + 1928);
    }
    long long v12 = *(_OWORD *)(v7 + 1984);
    long long v13 = *(_OWORD *)(v7 + 2016);
    long long v36 = *(_OWORD *)(v7 + 2000);
    v37[0] = v13;
    long long v14 = *(_OWORD *)(v7 + 1952);
    long long v32 = *(_OWORD *)(v7 + 1936);
    long long v33 = v14;
    long long v34 = *(_OWORD *)(v7 + 1968);
    long long v35 = v12;
    *(_OWORD *)((char *)v37 + 10) = *(_OWORD *)(v7 + 2026);
  }
  else
  {
    memcpy(__dst, (const void *)(v0 + 2048), 0x76CuLL);
    if (*(char *)(v7 + 3975) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 3952), *(void *)(v7 + 3960));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 3952);
      uint64_t v31 = *(void *)(v7 + 3968);
    }
    long long v15 = *(_OWORD *)(v7 + 4056);
    long long v36 = *(_OWORD *)(v7 + 4040);
    v37[0] = v15;
    *(_OWORD *)((char *)v37 + 10) = *(_OWORD *)(v7 + 4066);
    long long v16 = *(_OWORD *)(v7 + 3992);
    long long v32 = *(_OWORD *)(v7 + 3976);
    long long v33 = v16;
    long long v17 = *(_OWORD *)(v7 + 4024);
    long long v34 = *(_OWORD *)(v7 + 4008);
    long long v35 = v17;
  }
  sub_7E4FD0((uint64_t)&v40, (uint64_t)__dst, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_7E51F8((uint64_t)&v40, &v38);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v38);
    sub_52F090(&v38);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_7E5514(&v40, (uint64_t)&v38);
    uint64_t v18 = v8 + 2400 * v2;
    unint64_t v19 = (void **)(v18 + 1712);
    uint64_t v20 = *(void **)(v18 + 1712);
    if (v20)
    {
      char v21 = *(void **)(v18 + 1720);
      uint64_t v22 = *(void **)(v18 + 1712);
      if (v21 != v20)
      {
        do
          char v21 = sub_52F1E8((uint64_t)(v21 - 135));
        while (v21 != v20);
        uint64_t v22 = *v19;
      }
      v19[1] = v20;
      operator delete(v22);
      char *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
    }
    *(_OWORD *)unint64_t v19 = v38;
    v19[2] = v39;
    sub_616A8C(v7 + 5640, (uint64_t)v19);
  }
  if (*(unsigned char *)(v7 + 11502))
  {
    sub_7E5908((uint64_t)&v40, v4, (uint64_t *)&v38);
    uint64_t v23 = v8 + 2400 * v2;
    uint64_t v24 = (void **)(v23 + 1736);
    std::string::size_type v25 = *(void **)(v23 + 1736);
    if (v25)
    {
      long long v26 = *(void **)(v23 + 1744);
      char v27 = *(void **)(v23 + 1736);
      if (v26 != v25)
      {
        do
        {
          int v28 = (void *)*(v26 - 6);
          if (v28)
          {
            *(v26 - 5) = v28;
            operator delete(v28);
          }
          v26 -= 51;
          sub_4F32CC(v26);
        }
        while (v26 != v25);
        char v27 = *v24;
      }
      v24[1] = v25;
      operator delete(v27);
      *uint64_t v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
    }
    *(_OWORD *)uint64_t v24 = v38;
    v24[2] = v39;
    sub_616AD8(v7 + 5640, (uint64_t)v24);
  }
  sub_52960C(v7, v9);
  uint64_t v40 = &off_2439B78;
  sub_52F364((uint64_t)&v41);
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
}

void sub_52930C(_Unwind_Exception *a1)
{
  STACK[0xB30] = (unint64_t)&off_2439B78;
  sub_52F364((uint64_t)&STACK[0xB38]);
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

__n128 sub_529364@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 328);
  if (v5 == 5 || v5 == 3)
  {
    memcpy((void *)a3, (const void *)(a1 + 8), 0x76CuLL);
    uint64_t v7 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 1935) < 0)
    {
      sub_4200(v7, *(void **)(a1 + 1912), *(void *)(a1 + 1920));
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 1912);
      *(void *)(a3 + 1920) = *(void *)(a1 + 1928);
    }
    long long v9 = *(_OWORD *)(a1 + 1984);
    long long v10 = *(_OWORD *)(a1 + 2016);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 2000);
    *(_OWORD *)(a3 + 2008) = v10;
    long long v11 = *(_OWORD *)(a1 + 1952);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 1936);
    *(_OWORD *)(a3 + 1944) = v11;
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 1968);
    *(_OWORD *)(a3 + 1976) = v9;
    __n128 result = *(__n128 *)(a1 + 2026);
    *(__n128 *)(a3 + 2018) = result;
  }
  else
  {
    memcpy((void *)a3, (const void *)(a1 + 2048), 0x76CuLL);
    uint64_t v8 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 3975) < 0)
    {
      sub_4200(v8, *(void **)(a1 + 3952), *(void *)(a1 + 3960));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + 3952);
      *(void *)(a3 + 1920) = *(void *)(a1 + 3968);
    }
    long long v13 = *(_OWORD *)(a1 + 4056);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 4040);
    *(_OWORD *)(a3 + 2008) = v13;
    *(_OWORD *)(a3 + 2018) = *(_OWORD *)(a1 + 4066);
    long long v14 = *(_OWORD *)(a1 + 3992);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 3976);
    *(_OWORD *)(a3 + 1944) = v14;
    __n128 result = *(__n128 *)(a1 + 4024);
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 4008);
    *(__n128 *)(a3 + 1976) = result;
  }
  return result;
}

uint64_t sub_529480(uint64_t a1, uint64_t a2)
{
  sub_52ECD8(a1, a2);
  uint64_t v4 = *(void *)(a1 + 344);
  if (v4)
  {
    int v5 = (void **)(a1 + 344);
    uint64_t v6 = *(void *)(a1 + 352);
    uint64_t v7 = *(void **)(a1 + 344);
    if (v6 != v4)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v4);
      uint64_t v7 = *v5;
    }
    *(void *)(a1 + 352) = v4;
    operator delete(v7);
    std::string *v5 = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v8;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  sub_52EF44(a1 + 368, (uint64_t *)(a2 + 368));
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  uint64_t v9 = *(void *)(a1 + 416);
  if (v9)
  {
    long long v10 = (void **)(a1 + 416);
    uint64_t v11 = *(void *)(a1 + 424);
    long long v12 = *(void **)(a1 + 416);
    if (v11 != v9)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v9);
      long long v12 = *v10;
    }
    *(void *)(a1 + 424) = v9;
    operator delete(v12);
    *long long v10 = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
  }
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  sub_52EF44(a1 + 440, (uint64_t *)(a2 + 440));
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  sub_4D90B4(a1 + 488, a2 + 488);
  sub_4D90B4(a1 + 648, a2 + 648);
  long long v13 = (uint64_t *)(a1 + 808);
  uint64_t v14 = *(void *)(a2 + 808);
  if (!v14)
  {
    uint64_t v15 = *v13;
    uint64_t *v13 = 0;
    if (!v15) {
      return a1;
    }
    goto LABEL_19;
  }
  *(void *)(a2 + 808) = 0;
  uint64_t v15 = *v13;
  uint64_t *v13 = v14;
  if (v15) {
LABEL_19:
  }
    sub_4F49E8((uint64_t)v13, v15);
  return a1;
}

void sub_52960C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(std::string **)(a2 + 656);
  for (i = *(std::string **)(a2 + 664); v2 != i; unint64_t v2 = v6 + 1)
  {
    sub_70F6C4(v2, 0, (uint64_t)__p);
    int v5 = (const std::string *)sub_8D7730(*(void *)(a1 + 11464), (uint64_t)__p);
    uint64_t v6 = v2 + 1;
    std::string::operator=(v6, v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_5296AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5296C8(uint64_t a1, void *a2)
{
  uint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = sub_6467E8(a2, v6);
      uint64_t v7 = *(void *)(result + 1072) - *(void *)(result + 1064);
      if (v7)
      {
        uint64_t v8 = result;
        uint64_t v9 = 0;
        uint64_t v10 = v7 / 2400;
        do
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6, v8, v9++);
        while (v10 != v9);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_5297AC(uint64_t a1, std::string *a2)
{
  int v4 = sub_646CE8((uint64_t)a2);
  sub_64A328((uint64_t *)a2, (uint64_t)&qword_25672D8, v4);
  sub_7A541C((uint64_t *)a2, (uint64_t *)&v18);
  sub_647A4C(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  if (!*(unsigned char *)(a1 + 5495))
  {
    sub_7A4D10(a1 + 7832, (uint64_t)a2, (uint64_t)&v18);
    sub_647B8C(a2, (std::string **)&v18);
    std::string::size_type v5 = v18.__r_.__value_.__r.__words[0];
    if (v18.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
      uint64_t v7 = (void *)v18.__r_.__value_.__r.__words[0];
      if (v18.__r_.__value_.__l.__size_ != v18.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v5);
        uint64_t v7 = (void *)v18.__r_.__value_.__r.__words[0];
      }
      v18.__r_.__value_.__l.__size_ = v5;
      operator delete(v7);
    }
    sub_7A5A58(a1 + 7832, (uint64_t *)a2, (uint64_t *)&v18);
    sub_647AA0(a2, (uint64_t)&v18);
    sub_4D4B58((uint64_t)&v18);
    goto LABEL_28;
  }
  sub_7A54A0(a1 + 7832, a2, (uint64_t *)&v18);
  sub_647B38(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  sub_7A5B04(a1 + 7832, (uint64_t)a2, (uint64_t)&v18);
  sub_647C28(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  sub_7A5D98((unsigned char *)(a1 + 7832), (uint64_t)a2, (uint64_t)&v18);
  if (LODWORD(v19.__r_.__value_.__r.__words[1]) == 1)
  {
    if (*(_OWORD *)&v18.__r_.__value_.__l.__data_ == __PAIR128__(v18.__r_.__value_.__r.__words[2], -1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (!LODWORD(v19.__r_.__value_.__r.__words[1]) && LODWORD(v18.__r_.__value_.__l.__data_) != -1) {
LABEL_13:
  }
    sub_647C7C((uint64_t)a2, (uint64_t)&v18);
LABEL_14:
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v20);
    int v8 = v19.__r_.__value_.__r.__words[1];
    if (LODWORD(v19.__r_.__value_.__r.__words[1]) != 1) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v9 = (void *)v18.__r_.__value_.__l.__size_;
    if (!v18.__r_.__value_.__l.__size_) {
      goto LABEL_28;
    }
    v18.__r_.__value_.__r.__words[2] = v18.__r_.__value_.__l.__size_;
    goto LABEL_24;
  }
  operator delete(__p);
  if (SHIBYTE(v22) < 0) {
    goto LABEL_21;
  }
LABEL_16:
  int v8 = v19.__r_.__value_.__r.__words[1];
  if (LODWORD(v19.__r_.__value_.__r.__words[1]) == 1) {
    goto LABEL_22;
  }
LABEL_17:
  if (!v8 && v19.__r_.__value_.__s.__data_[7] < 0)
  {
    uint64_t v9 = (void *)v18.__r_.__value_.__l.__size_;
LABEL_24:
    operator delete(v9);
  }
LABEL_28:
  uint64_t v10 = (void *)sub_64840C((uint64_t)a2);
  sub_70F9AC((uint64_t *)(a1 + 7816), v10, &v18);
  sub_6483BC(a2, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (uint64_t *)nullsub_1(a2);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 == v13)
  {
LABEL_33:
    sub_7A6670(a1 + 7832, (unsigned int **)a2, (uint64_t)&v18);
    std::string::size_type v14 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = v18.__r_.__value_.__l.__size_;
    }
    if (v14) {
      sub_648140((uint64_t)a2, &v18);
    }
    std::string::size_type v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = v19.__r_.__value_.__l.__size_;
    }
    if (v15) {
      sub_648198((uint64_t)a2, &v19);
    }
    if (__p == 1)
    {
      if (v20 == (void *)-1 && v21 == v22)
      {
LABEL_48:
        if (v28 < 0)
        {
          operator delete(v27);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_50:
            int v16 = (int)__p;
            if (__p != 1) {
              goto LABEL_51;
            }
            goto LABEL_56;
          }
        }
        else if ((v26 & 0x80000000) == 0)
        {
          goto LABEL_50;
        }
        operator delete(v25);
        int v16 = (int)__p;
        if (__p != 1)
        {
LABEL_51:
          if (v16 || (v23 & 0x80000000) == 0)
          {
LABEL_59:
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v19.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
            }
            else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              return;
            }
            operator delete(v18.__r_.__value_.__l.__data_);
            return;
          }
          long long v17 = v21;
LABEL_58:
          operator delete(v17);
          goto LABEL_59;
        }
LABEL_56:
        long long v17 = v21;
        if (!v21) {
          goto LABEL_59;
        }
        uint64_t v22 = v21;
        goto LABEL_58;
      }
    }
    else if (__p || v20 == -1)
    {
      goto LABEL_48;
    }
    sub_6481F0((uint64_t)a2, (uint64_t)&v20);
    goto LABEL_48;
  }
  while (1)
  {
    sub_3777C0(*(void **)(a1 + 5624));
    if ((sub_35E640() & 1) == 0) {
      break;
    }
    v12 += 12328;
    if (v12 == v13) {
      goto LABEL_33;
    }
  }
}

void sub_529BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_529BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_529BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_529BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_529C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_529C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_529C74(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)long long __p = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      std::string::size_type v5 = (void *)sub_647C20(v2);
      if (!sub_45FB38(v5))
      {
        uint64_t v6 = (uint64_t *)sub_647C20(v2);
        sub_532E9C((uint64_t)__p, (uint64_t)v6, v6);
        if ((v7 & 1) == 0) {
          break;
        }
      }
      v2 += 7560;
      if (v2 == v3)
      {
        int v8 = 1;
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        if (v9 == v10) {
          goto LABEL_23;
        }
LABEL_9:
        while (2)
        {
          uint64_t v11 = (void *)sub_647C20(v9);
          if (sub_45FB38(v11)) {
            int v12 = 0;
          }
          else {
            int v12 = v8;
          }
          sub_649074(v9, v12);
          uint64_t v13 = sub_647C74(v9);
          int v14 = *(_DWORD *)(v13 + 32);
          if (v14 == 1)
          {
            int v16 = 1;
            if (*(_DWORD *)(v13 + 4) == -1 && *(_DWORD *)v13 == -1)
            {
              BOOL v15 = *(void *)(v13 + 8) == *(void *)(v13 + 16);
              goto LABEL_18;
            }
          }
          else if (v14)
          {
            int v16 = 0;
          }
          else
          {
            BOOL v15 = *(_DWORD *)v13 == -1;
LABEL_18:
            int v16 = !v15;
          }
          sub_649084(v9, v16);
          v9 += 7560;
          if (v9 == v10) {
            goto LABEL_23;
          }
          continue;
        }
      }
    }
    int v8 = 2;
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (v9 != v10) {
      goto LABEL_9;
    }
  }
LABEL_23:
  long long v17 = (void *)v24;
  if ((void)v24)
  {
    do
    {
      uint64_t v20 = (void *)*v17;
      uint64_t v21 = v17[2];
      if (v21)
      {
        uint64_t v22 = v17[3];
        std::string v19 = (void *)v17[2];
        if (v22 != v21)
        {
          do
          {
            if (*(char *)(v22 - 1) < 0) {
              operator delete(*(void **)(v22 - 24));
            }
            v22 -= 24;
          }
          while (v22 != v21);
          std::string v19 = (void *)v17[2];
        }
        v17[3] = v21;
        operator delete(v19);
      }
      operator delete(v17);
      long long v17 = v20;
    }
    while (v20);
  }
  std::string v18 = __p[0];
  __p[0] = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_529E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_529E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_529E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_529E5C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v6 = (void *)*v2;
      uint64_t v7 = v2[2];
      if (v7)
      {
        uint64_t v8 = v2[3];
        std::string::size_type v5 = (void *)v2[2];
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0) {
              operator delete(*(void **)(v8 - 24));
            }
            v8 -= 24;
          }
          while (v8 != v7);
          std::string::size_type v5 = (void *)v2[2];
        }
        v2[3] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

unint64_t sub_529F04(uint64_t a1, void *a2)
{
  unint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = sub_6467E8(a2, v6);
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v6++, v7);
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_529F8C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = (void *)v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0 + 4088;
  sub_7468F0((uint64_t)v23, *(void *)(v0 + 5624), v0 + 4088, v0 + 8, v1, v5);
  sub_7468F8((uint64_t)v23, (uint64_t *)&v21);
  uint64_t v6 = (void **)(v2 + 931);
  uint64_t v7 = (void *)v2[931];
  if (v7)
  {
    uint64_t v8 = (void *)v2[932];
    uint64_t v9 = (void *)v2[931];
    if (v8 != v7)
    {
      do
        uint64_t v8 = sub_52F1E8((uint64_t)(v8 - 135));
      while (v8 != v7);
      uint64_t v9 = *v6;
    }
    v2[932] = v7;
    operator delete(v9);
    *uint64_t v6 = 0;
    v2[932] = 0;
    v2[933] = 0;
  }
  *(_OWORD *)uint64_t v6 = v21;
  v2[933] = v22;
  sub_7484A4(v23, (uint64_t *)&v21);
  uint64_t v10 = (void **)(v2 + 934);
  uint64_t v11 = (void *)v2[934];
  if (v11)
  {
    int v12 = (void *)v2[935];
    uint64_t v13 = (void *)v2[934];
    if (v12 != v11)
    {
      do
      {
        int v14 = (void *)*(v12 - 6);
        if (v14)
        {
          *(v12 - 5) = v14;
          operator delete(v14);
        }
        v12 -= 51;
        sub_4F32CC(v12);
      }
      while (v12 != v11);
      uint64_t v13 = *v10;
    }
    v2[935] = v11;
    operator delete(v13);
    *uint64_t v10 = 0;
    v2[935] = 0;
    v2[936] = 0;
  }
  *((_OWORD *)v2 + 467) = v21;
  v2[936] = v22;
  sub_747C50(v23, &v21);
  int v16 = (void **)(v2 + 937);
  BOOL v15 = (void *)v2[937];
  if (v15)
  {
    long long v17 = (void *)v2[938];
    std::string v18 = (void *)v2[937];
    if (v17 != v15)
    {
      do
        long long v17 = sub_52F090(v17 - 102);
      while (v17 != v15);
      std::string v18 = *v16;
    }
    v2[938] = v15;
    operator delete(v18);
    _DWORD *v16 = 0;
    v2[938] = 0;
    v2[939] = 0;
  }
  *(_OWORD *)(v2 + 937) = v21;
  v2[939] = v22;
  sub_616A8C(v3 + 5640, (uint64_t)(v2 + 931));
  sub_616AD8(v3 + 5640, (uint64_t)(v2 + 934));
  sub_6166CC(v3 + 5640, (uint64_t)(v2 + 937));
  sub_5283FC(v3, (uint64_t)(v2 + 16), (uint64_t)(v2 + 1275));
  sub_5283FC(v3, (uint64_t)(v2 + 36), (uint64_t)(v2 + 1360));
  if (sub_62D404(v4) && *(unsigned char *)(v3 + 5499))
  {
    sub_749B20((uint64_t)v23, 0, (uint64_t *)&v21);
    sub_529480((uint64_t)(v2 + 940), (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v2 + 940);
    sub_749B20((uint64_t)v23, 1, (uint64_t *)&v21);
    std::string v19 = v2 + 1042;
    sub_529480((uint64_t)v19, (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v19);
  }
  return sub_52FBA0((uint64_t)v23);
}

void sub_52A260(_Unwind_Exception *a1)
{
}

void sub_52A274(_Unwind_Exception *a1)
{
}

void sub_52A288(_Unwind_Exception *a1)
{
}

void sub_52A29C(_Unwind_Exception *a1)
{
}

void sub_52A2B0(_Unwind_Exception *a1)
{
}

void sub_52A2C8(_Unwind_Exception *a1)
{
}

uint64_t sub_52A2DC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  *(void *)a1 = off_2439AC8;
  uint64_t v10 = (void *)(a1 + 8);
  sub_62B9C4(a1 + 8, (int)a4, 0, *(unsigned __int8 *)(a3 + 1525), a5);
  sub_62B9C4(a1 + 2048, (int)a4, 2, 0, a5);
  sub_4BBDC0(a1 + 4088, a3);
  *(void *)(a1 + 5624) = a4;
  *(void *)(a1 + 5632) = sub_376F8C(a4);
  sub_4D30C8(a1 + 5640);
  sub_70F6C0(a1 + 7816, a2, a3);
  sub_7A7C44(a1 + 7832, (int)a4, (int)a2, a3, v10);
  uint64_t v11 = (uint64_t *)(a1 + 11448);
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_DWORD *)(a1 + 11492) = 0;
  int v12 = (void **)(a1 + 11504);
  *(void *)(a1 + 11504) = 0;
  *(void *)(a1 + 11520) = 0;
  *(void *)(a1 + 11512) = 0;
  *(_OWORD *)(a1 + 11448) = 0u;
  uint64_t v13 = *(_DWORD **)(a3 + 1072);
  int v14 = *(_DWORD **)(a3 + 1080);
  if (v13 == v14)
  {
    *(_WORD *)(a1 + 11500) = 0;
    *(unsigned char *)(a1 + 11502) = 0;
    std::string v18 = v13;
  }
  else
  {
    BOOL v15 = *(_DWORD **)(a3 + 1072);
    while (*v15 != 2)
    {
      if (++v15 == v14)
      {
        BOOL v15 = *(_DWORD **)(a3 + 1080);
        break;
      }
    }
    *(unsigned char *)(a1 + 11500) = v15 != v14;
    int v16 = v13;
    while (*v16 != 1)
    {
      if (++v16 == v14)
      {
        int v16 = v14;
        break;
      }
    }
    *(unsigned char *)(a1 + 11501) = v16 != v14;
    long long v17 = v13;
    while (*v17 != 4)
    {
      if (++v17 == v14)
      {
        long long v17 = v14;
        break;
      }
    }
    *(unsigned char *)(a1 + 11502) = v17 != v14;
    std::string v18 = v13;
    while (*v18 != 3)
    {
      if (++v18 == v14)
      {
        std::string v18 = v14;
        break;
      }
    }
  }
  *(unsigned char *)(a1 + 11503) = v18 != v14;
  sub_688A04(a2, 3u, *(_DWORD *)(a3 + 968), &v40);
  int v19 = *(_DWORD *)(a3 + 1000);
  if (v19)
  {
    sub_6892E8(a2, 3u, v19, &v38);
    uint64_t v20 = v40;
  }
  else
  {
    uint64_t v20 = v40;
    uint64_t v38 = v40;
    std::string::size_type v39 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v34 = v20;
  long long v35 = v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = v38;
  long long v33 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DE48((uint64_t)&v36, &v34, &v32, (char *)v10, a3);
  sub_4D3210(a1 + 5640, &v36);
  sub_4F2894((uint64_t)&v36);
  long long v21 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_688A04(a2, 4u, *(_DWORD *)(a3 + 968), (uint64_t *)&v36);
  long long v23 = v36;
  long long v36 = 0uLL;
  long long v24 = *(std::__shared_weak_count **)(a1 + 11456);
  *(_OWORD *)uint64_t v11 = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  sub_688A04(a2, 0, *(_DWORD *)(a3 + 968), (uint64_t *)&v36);
  long long v26 = v36;
  long long v36 = 0uLL;
  char v27 = *(std::__shared_weak_count **)(a1 + 11472);
  *(_OWORD *)(a1 + 11464) = v26;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  char v28 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  sub_8D8884(*(void *)(a1 + 11464), *v11);
  sub_689794(a2, *(_DWORD *)(a3 + 968), (char *)&v36);
  if (*(char *)(a1 + 11527) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)int v12 = v36;
  *(void *)(a1 + 11520) = v37;
  int v29 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  return a1;
}

void sub_52A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_14A84(v17 - 104);
  if (*(char *)(v15 + 79) < 0) {
    operator delete(*v11);
  }
  sub_14A84(v16);
  sub_14A84(v15);
  sub_528218(v14);
  sub_14A84(v13);
  sub_4F2894(v12);
  sub_4BCED0(a10);
  if (*(char *)(v10 + 3975) < 0) {
    operator delete(*(void **)(v10 + 3952));
  }
  if ((*(char *)(v10 + 1935) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v10 + 1912));
  _Unwind_Resume(a1);
}

void sub_52A904(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v2 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  JUMPOUT(0x52A884);
}

void sub_52A91C()
{
  if ((*(char *)(v0 + 79) & 0x80000000) == 0) {
    JUMPOUT(0x52A8A4);
  }
  JUMPOUT(0x52A89CLL);
}

void sub_52A92C()
{
}

void sub_52A934()
{
}

void sub_52A93C()
{
  if ((*(char *)(v0 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x52A8E4);
  }
  JUMPOUT(0x52A8DCLL);
}

void sub_52A94C()
{
}

void sub_52A954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_4BCED0(a10);
  if ((*(char *)(v10 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x52A8E4);
  }
  JUMPOUT(0x52A8DCLL);
}

void sub_52A970(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::string *)*a2;
  int v5 = (std::string *)a2[1];
  if ((std::string *)*a2 != v5)
  {
    do
    {
      sub_52BCE0(a1, v4);
      v4 += 315;
    }
    while (v4 != v5);
  }
  sub_52C1A8(a1, a2);
  uint64_t v6 = (std::string *)*a2;
  uint64_t v7 = (std::string *)a2[1];
  if ((std::string *)*a2 != v7)
  {
    do
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 32))(a1, v6);
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 24))(a1, v6);
      sub_64900C((uint64_t *)v6);
      sub_648360(v6, (const std::string *)(a1 + 11504));
      v6 += 315;
    }
    while (v6 != v7);
  }
}

void sub_52AA68(uint64_t a1, uint64_t a2)
{
  sub_52AABC(a1, a2 + 128, a2 + 10200);

  sub_52AABC(a1, a2 + 288, a2 + 10880);
}

void sub_52AABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 24) == 0x7FFFFFFF || *(_DWORD *)(a2 + 60) == 0x7FFFFFFF) {
    return;
  }
  if (!sub_40A45C((int *)(a2 + 32))) {
    return;
  }
  int v7 = *(_DWORD *)(a2 + 136);
  if (v7 == -1) {
    return;
  }
  if (v7 == 1)
  {
    unint64_t v8 = *(void *)(a2 + 128);
    if (v8 > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 128)) {
      return;
    }
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 5632);
    int v102 = *(_DWORD *)(a2 + 136);
    unint64_t v101 = v8;
    unint64_t v10 = sub_28CF4C(v9, &v101);
    uint64_t v11 = sub_28F040(*(void *)(a1 + 5632), v10);
    uint64_t v12 = (char **)sub_37D0C0(a1 + 5320);
    int v13 = sub_89DD4(v12);
    int v90 = v13;
    uint64_t v15 = *v11;
    uint64_t v14 = v11[1];
    if (*v11 != v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15;
      do
      {
        if (*(unsigned char *)(v17 + 24) == 1 && (*(_DWORD *)(v17 + 28) & v13) != 0) {
          ++v16;
        }
        v17 += 40;
      }
      while (v17 != v14);
      if (v16)
      {
        unint64_t v18 = v14 - v15 - 40;
        if (v18 >= 0x28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          unint64_t v32 = v18 / 0x28 + 1;
          uint64_t v20 = v15 + 40 * (v32 & 0xFFFFFFFFFFFFFFELL);
          long long v33 = (int *)(v15 + 68);
          uint64_t v34 = v32 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            int v35 = *(v33 - 10);
            int v37 = *v33;
            v33 += 20;
            int v36 = v37;
            if ((v35 & v13) != 0) {
              ++v30;
            }
            if ((v36 & v13) != 0) {
              ++v31;
            }
            v34 -= 2;
          }
          while (v34);
          unint64_t v19 = v31 + v30;
          if (v32 == (v32 & 0xFFFFFFFFFFFFFFELL))
          {
LABEL_45:
            memset(&__str, 0, sizeof(__str));
            sub_503BC8(v19, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
            if (byte_25688FF >= 0) {
              uint64_t v38 = (const std::string::value_type *)&qword_25688E8;
            }
            else {
              uint64_t v38 = (const std::string::value_type *)qword_25688E8;
            }
            if (byte_25688FF >= 0) {
              std::string::size_type v39 = byte_25688FF;
            }
            else {
              std::string::size_type v39 = unk_25688F0;
            }
            uint64_t v40 = std::string::insert(&v75, 0, v38, v39);
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            *(void *)&v89[16] = *((void *)&v40->__r_.__value_.__l + 2);
            *(_OWORD *)int v89 = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            sub_6352AC((uint64_t)&v80, (uint64_t)v89);
            std::to_string(&v75, v16);
            sub_6358A0((uint64_t)&v80, &xmmword_2568930, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            std::to_string(&v75, v19);
            sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&__p);
            sub_5F3D48((uint64_t)&v75, (uint64_t)__p);
            sub_5250C0(3, (uint64_t)&__str);
            sub_52FD00(a3 + 408, (uint64_t)&v75);
            sub_4F39B8(a3 + 568, &__str);
            *(void *)(a3 + 608) = v94;
            std::string::operator=((std::string *)(a3 + 616), &v95);
            *(unsigned char *)(a3 + 640) = v96;
            std::string::operator=((std::string *)(a3 + 648), &v97);
            *(unsigned char *)(a3 + 672) = v98;
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v97.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_61:
                int v42 = v93;
                if (v93 != 1) {
                  goto LABEL_62;
                }
                goto LABEL_88;
              }
            }
            else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_61;
            }
            operator delete(v95.__r_.__value_.__l.__data_);
            int v42 = v93;
            if (v93 != 1)
            {
LABEL_62:
              if (v42 || (v92 & 0x80000000) == 0) {
                goto LABEL_91;
              }
              std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
              goto LABEL_90;
            }
LABEL_88:
            std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
            if (!__str.__r_.__value_.__l.__size_)
            {
LABEL_91:
              sub_4D4B58((uint64_t)&v75);
              int v51 = (char *)__p;
              if (__p)
              {
                int v52 = v87;
                int v53 = __p;
                if (v87 != __p)
                {
                  do
                  {
                    if (*(v52 - 1) < 0) {
                      operator delete(*((void **)v52 - 3));
                    }
                    v52 -= 24;
                  }
                  while (v52 != v51);
                  int v53 = __p;
                }
                int v87 = v51;
                operator delete(v53);
              }
              int v54 = v83;
              if (v83)
              {
                do
                {
                  uint64_t v55 = (void *)*v54;
                  sub_4F4B48((uint64_t)(v54 + 2));
                  operator delete(v54);
                  int v54 = v55;
                }
                while (v55);
              }
              int v56 = (void *)*((void *)&v81 + 1);
              *((void *)&v81 + 1) = 0;
              if (v56) {
                operator delete(v56);
              }
              uint64_t v57 = v80;
              if ((void)v80)
              {
                uint64_t v58 = *((void *)&v80 + 1);
                int v59 = (void *)v80;
                if (*((void *)&v80 + 1) != (void)v80)
                {
                  do
                  {
                    if (*(char *)(v58 - 1) < 0) {
                      operator delete(*(void **)(v58 - 24));
                    }
                    v58 -= 24;
                  }
                  while (v58 != v57);
                  int v59 = (void *)v80;
                }
                *((void *)&v80 + 1) = v57;
                operator delete(v59);
              }
              if ((v89[23] & 0x80000000) == 0) {
                return;
              }
              int v60 = *(void **)v89;
              goto LABEL_159;
            }
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_90:
            operator delete(size);
            goto LABEL_91;
          }
        }
        else
        {
          unint64_t v19 = 0;
          uint64_t v20 = v15;
        }
        do
        {
          if ((*(_DWORD *)(v20 + 28) & v13) != 0) {
            ++v19;
          }
          v20 += 40;
        }
        while (v20 != v14);
        goto LABEL_45;
      }
      long long v80 = 0u;
      long long v81 = 0u;
      int v82 = 1065353216;
      sub_60E8D8(a1 + 5640, (uint64_t)&qword_2568900, (uint64_t)&v80, 0, (uint64_t)v89);
      sub_5F3D48((uint64_t)&v75, (uint64_t)v89);
      sub_5250C0(2, (uint64_t)&__str);
      sub_52FD00(a3 + 408, (uint64_t)&v75);
      sub_4F39B8(a3 + 568, &__str);
      *(void *)(a3 + 608) = v94;
      std::string::operator=((std::string *)(a3 + 616), &v95);
      *(unsigned char *)(a3 + 640) = v96;
      std::string::operator=((std::string *)(a3 + 648), &v97);
      *(unsigned char *)(a3 + 672) = v98;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v97.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          int v28 = v93;
          if (v93 != 1) {
            goto LABEL_32;
          }
          goto LABEL_115;
        }
      }
      else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(v95.__r_.__value_.__l.__data_);
      int v28 = v93;
      if (v93 != 1)
      {
LABEL_32:
        if (v28 || (v92 & 0x80000000) == 0)
        {
LABEL_118:
          sub_4D4B58((uint64_t)&v75);
          if ((v89[23] & 0x80000000) != 0) {
            operator delete(*(void **)v89);
          }
          int v61 = (void *)v81;
          if ((void)v81)
          {
            do
            {
              int v62 = (void *)*v61;
              sub_4F4B48((uint64_t)(v61 + 2));
              operator delete(v61);
              int v61 = v62;
            }
            while (v62);
          }
          int v60 = (void *)v80;
          *(void *)&long long v80 = 0;
          if (!v60) {
            return;
          }
LABEL_159:
          operator delete(v60);
          return;
        }
        int v29 = (void *)__str.__r_.__value_.__l.__size_;
LABEL_117:
        operator delete(v29);
        goto LABEL_118;
      }
LABEL_115:
      int v29 = (void *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_118;
      }
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      goto LABEL_117;
    }
    long long v21 = *(uint64_t **)(a1 + 5632);
    int v100 = v7;
    unint64_t v99 = v8;
    sub_28D048(v21, (uint64_t)&v99, (unint64_t)&v75);
    uint64_t v22 = v76;
    std::string::size_type v23 = v75.__r_.__value_.__r.__words[0];
    *(void *)int v89 = v76;
    uint64_t v24 = v77;
    *(_OWORD *)&_DWORD v89[8] = v77;
    long long v77 = 0uLL;
    uint64_t v76 = 0;
    if (v75.__r_.__value_.__r.__words[0])
    {
      uint64_t v74 = v24;
      std::string::size_type v25 = v75.__r_.__value_.__l.__size_;
      long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
      {
        do
        {
          char v27 = *(void **)(v25 - 24);
          if (v27)
          {
            *(void *)(v25 - 16) = v27;
            operator delete(v27);
          }
          v25 -= 48;
        }
        while (v25 != v23);
        long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      }
      v75.__r_.__value_.__l.__size_ = v23;
      operator delete(v26);
      uint64_t v24 = v74;
    }
    int v87 = 0;
    unint64_t v88 = 0;
    long long __p = &v87;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    sub_5338D8(v22, v24, (uint64_t **)&__p, (uint64_t *)&v87, (uint64_t)&__str, &v75);
    unint64_t v44 = v88;
    if (!v88)
    {
LABEL_152:
      sub_2F020((uint64_t)&__p, v87);
      if (!v22) {
        return;
      }
      for (uint64_t i = *(void *)&v89[8]; i != v22; i -= 48)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      int v60 = (void *)v22;
      goto LABEL_159;
    }
    memset(&__str, 0, sizeof(__str));
    sub_503BC8(v88, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
    if (byte_256892F >= 0) {
      int v45 = (const std::string::value_type *)&qword_2568918;
    }
    else {
      int v45 = (const std::string::value_type *)qword_2568918;
    }
    if (byte_256892F >= 0) {
      std::string::size_type v46 = byte_256892F;
    }
    else {
      std::string::size_type v46 = unk_2568920;
    }
    int v47 = std::string::insert(&v75, 0, v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    std::string::size_type v85 = v47->__r_.__value_.__r.__words[2];
    long long v84 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_6352AC((uint64_t)&v80, (uint64_t)&v84);
    std::to_string(&v75, v44);
    sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&v78);
    sub_5F3D48((uint64_t)&v75, (uint64_t)v78);
    sub_5250C0(1, (uint64_t)&__str);
    sub_52FD00(a3 + 408, (uint64_t)&v75);
    sub_4F39B8(a3 + 568, &__str);
    *(void *)(a3 + 608) = v94;
    std::string::operator=((std::string *)(a3 + 616), &v95);
    *(unsigned char *)(a3 + 640) = v96;
    std::string::operator=((std::string *)(a3 + 648), &v97);
    *(unsigned char *)(a3 + 672) = v98;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_82:
        int v49 = v93;
        if (v93 != 1) {
          goto LABEL_83;
        }
        goto LABEL_126;
      }
    }
    else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_82;
    }
    operator delete(v95.__r_.__value_.__l.__data_);
    int v49 = v93;
    if (v93 != 1)
    {
LABEL_83:
      if (v49 || (v92 & 0x80000000) == 0) {
        goto LABEL_129;
      }
      int v50 = (void *)__str.__r_.__value_.__l.__size_;
      goto LABEL_128;
    }
LABEL_126:
    int v50 = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_)
    {
LABEL_129:
      sub_4D4B58((uint64_t)&v75);
      int v63 = (void **)v78;
      if (v78)
      {
        int v64 = v79;
        int v65 = v78;
        if (v79 != v78)
        {
          do
          {
            if (*((char *)v64 - 1) < 0) {
              operator delete(*(v64 - 3));
            }
            v64 -= 3;
          }
          while (v64 != v63);
          int v65 = v78;
        }
        int v79 = v63;
        operator delete(v65);
      }
      int v66 = v83;
      if (v83)
      {
        do
        {
          int v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          int v66 = v67;
        }
        while (v67);
      }
      long long v68 = (void *)*((void *)&v81 + 1);
      *((void *)&v81 + 1) = 0;
      if (v68) {
        operator delete(v68);
      }
      uint64_t v69 = v80;
      if ((void)v80)
      {
        uint64_t v70 = *((void *)&v80 + 1);
        int v71 = (void *)v80;
        if (*((void *)&v80 + 1) != (void)v80)
        {
          do
          {
            if (*(char *)(v70 - 1) < 0) {
              operator delete(*(void **)(v70 - 24));
            }
            v70 -= 24;
          }
          while (v70 != v69);
          int v71 = (void *)v80;
        }
        *((void *)&v80 + 1) = v69;
        operator delete(v71);
      }
      if (SHIBYTE(v85) < 0) {
        operator delete((void *)v84);
      }
      uint64_t v22 = *(void *)v89;
      goto LABEL_152;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_128:
    operator delete(v50);
    goto LABEL_129;
  }
  if (v7)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  unint64_t v8 = *(void *)(a2 + 128);
  if (v8 != -1) {
    goto LABEL_13;
  }
}

void sub_52B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,char *a55)
{
  sub_4D4B58((uint64_t)&a12);
  sub_1A668(&a35);
  sub_4D4880(&a38);
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_2F020((uint64_t)&a54, a55);
  sub_28F14C((void **)(v55 - 256));
  _Unwind_Resume(a1);
}

void sub_52B5D0()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x52B5DCLL);
}

void sub_52B604()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x52B610);
}

void sub_52B64C()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  int v10 = *(unsigned __int8 *)(v9 + 328);
  if (v10 == 5 || v10 == 0)
  {
    memcpy(__dst, (const void *)(v0 + 8), 0x76CuLL);
    if (*(char *)(v7 + 1935) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 1912), *(void *)(v7 + 1920));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 1912);
      uint64_t v31 = *(void *)(v7 + 1928);
    }
    long long v12 = *(_OWORD *)(v7 + 1984);
    long long v13 = *(_OWORD *)(v7 + 2016);
    long long v36 = *(_OWORD *)(v7 + 2000);
    v37[0] = v13;
    long long v14 = *(_OWORD *)(v7 + 1952);
    long long v32 = *(_OWORD *)(v7 + 1936);
    long long v33 = v14;
    long long v34 = *(_OWORD *)(v7 + 1968);
    long long v35 = v12;
    *(_OWORD *)((char *)v37 + 10) = *(_OWORD *)(v7 + 2026);
  }
  else
  {
    memcpy(__dst, (const void *)(v0 + 2048), 0x76CuLL);
    if (*(char *)(v7 + 3975) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 3952), *(void *)(v7 + 3960));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 3952);
      uint64_t v31 = *(void *)(v7 + 3968);
    }
    long long v15 = *(_OWORD *)(v7 + 4056);
    long long v36 = *(_OWORD *)(v7 + 4040);
    v37[0] = v15;
    *(_OWORD *)((char *)v37 + 10) = *(_OWORD *)(v7 + 4066);
    long long v16 = *(_OWORD *)(v7 + 3992);
    long long v32 = *(_OWORD *)(v7 + 3976);
    long long v33 = v16;
    long long v17 = *(_OWORD *)(v7 + 4024);
    long long v34 = *(_OWORD *)(v7 + 4008);
    long long v35 = v17;
  }
  sub_7E7330((uint64_t)&v40, (uint64_t)__dst, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_7E7558((uint64_t)&v40, &v38);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v38);
    sub_52F090(&v38);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_7E7848(&v40, (uint64_t)&v38);
    uint64_t v18 = v8 + 2400 * v2;
    unint64_t v19 = (void **)(v18 + 1712);
    uint64_t v20 = *(void **)(v18 + 1712);
    if (v20)
    {
      long long v21 = *(void **)(v18 + 1720);
      uint64_t v22 = *(void **)(v18 + 1712);
      if (v21 != v20)
      {
        do
          long long v21 = sub_52F1E8((uint64_t)(v21 - 135));
        while (v21 != v20);
        uint64_t v22 = *v19;
      }
      v19[1] = v20;
      operator delete(v22);
      void *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
    }
    *(_OWORD *)unint64_t v19 = v38;
    v19[2] = v39;
    sub_616A8C(v7 + 5640, (uint64_t)v19);
  }
  if (*(unsigned char *)(v7 + 11502))
  {
    sub_7E7C3C((uint64_t)&v40, v4, (uint64_t *)&v38);
    uint64_t v23 = v8 + 2400 * v2;
    uint64_t v24 = (void **)(v23 + 1736);
    std::string::size_type v25 = *(void **)(v23 + 1736);
    if (v25)
    {
      long long v26 = *(void **)(v23 + 1744);
      char v27 = *(void **)(v23 + 1736);
      if (v26 != v25)
      {
        do
        {
          int v28 = (void *)*(v26 - 6);
          if (v28)
          {
            *(v26 - 5) = v28;
            operator delete(v28);
          }
          v26 -= 51;
          sub_4F32CC(v26);
        }
        while (v26 != v25);
        char v27 = *v24;
      }
      v24[1] = v25;
      operator delete(v27);
      *uint64_t v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
    }
    *(_OWORD *)uint64_t v24 = v38;
    v24[2] = v39;
    sub_616AD8(v7 + 5640, (uint64_t)v24);
  }
  sub_52BB40(v7, v9);
  uint64_t v40 = &off_2439CA8;
  sub_531E24((uint64_t)&v41);
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
}

void sub_52B9CC(_Unwind_Exception *a1)
{
  STACK[0xB30] = (unint64_t)&off_2439CA8;
  sub_531E24((uint64_t)&STACK[0xB38]);
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

__n128 sub_52BA24@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 328);
  if (v5 == 5 || v5 == 0)
  {
    memcpy((void *)a3, (const void *)(a1 + 8), 0x76CuLL);
    uint64_t v7 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 1935) < 0)
    {
      sub_4200(v7, *(void **)(a1 + 1912), *(void *)(a1 + 1920));
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 1912);
      *(void *)(a3 + 1920) = *(void *)(a1 + 1928);
    }
    long long v9 = *(_OWORD *)(a1 + 1984);
    long long v10 = *(_OWORD *)(a1 + 2016);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 2000);
    *(_OWORD *)(a3 + 2008) = v10;
    long long v11 = *(_OWORD *)(a1 + 1952);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 1936);
    *(_OWORD *)(a3 + 1944) = v11;
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 1968);
    *(_OWORD *)(a3 + 1976) = v9;
    __n128 result = *(__n128 *)(a1 + 2026);
    *(__n128 *)(a3 + 2018) = result;
  }
  else
  {
    memcpy((void *)a3, (const void *)(a1 + 2048), 0x76CuLL);
    uint64_t v8 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 3975) < 0)
    {
      sub_4200(v8, *(void **)(a1 + 3952), *(void *)(a1 + 3960));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + 3952);
      *(void *)(a3 + 1920) = *(void *)(a1 + 3968);
    }
    long long v13 = *(_OWORD *)(a1 + 4056);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 4040);
    *(_OWORD *)(a3 + 2008) = v13;
    *(_OWORD *)(a3 + 2018) = *(_OWORD *)(a1 + 4066);
    long long v14 = *(_OWORD *)(a1 + 3992);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 3976);
    *(_OWORD *)(a3 + 1944) = v14;
    __n128 result = *(__n128 *)(a1 + 4024);
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 4008);
    *(__n128 *)(a3 + 1976) = result;
  }
  return result;
}

void sub_52BB40(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(std::string **)(a2 + 656);
  for (i = *(std::string **)(a2 + 664); v2 != i; unint64_t v2 = v6 + 1)
  {
    sub_70F6C4(v2, 0, (uint64_t)__p);
    int v5 = (const std::string *)sub_8D7730(*(void *)(a1 + 11464), (uint64_t)__p);
    int v6 = v2 + 1;
    std::string::operator=(v6, v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_52BBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_52BBFC(uint64_t a1, void *a2)
{
  uint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = sub_6467E8(a2, v6);
      uint64_t v7 = *(void *)(result + 1072) - *(void *)(result + 1064);
      if (v7)
      {
        uint64_t v8 = result;
        uint64_t v9 = 0;
        uint64_t v10 = v7 / 2400;
        do
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6, v8, v9++);
        while (v10 != v9);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_52BCE0(uint64_t a1, std::string *a2)
{
  int v4 = sub_646CE8((uint64_t)a2);
  sub_647914((uint64_t *)a2, (uint64_t)&qword_25672D8, v4);
  sub_7A8354((uint64_t *)a2, (uint64_t *)&v19);
  sub_647A4C(a2, (uint64_t)&v19);
  sub_4D4B58((uint64_t)&v19);
  if (!*(unsigned char *)(a1 + 5495))
  {
    sub_7A7C48(a1 + 7832, (uint64_t)a2, (uint64_t)&v19);
    sub_647B8C(a2, (std::string **)&v19);
    std::string::size_type v5 = v19.__r_.__value_.__r.__words[0];
    if (v19.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
      uint64_t v7 = (void *)v19.__r_.__value_.__r.__words[0];
      if (v19.__r_.__value_.__l.__size_ != v19.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v5);
        uint64_t v7 = (void *)v19.__r_.__value_.__r.__words[0];
      }
      v19.__r_.__value_.__l.__size_ = v5;
      operator delete(v7);
    }
    sub_7A8A88(a1 + 7832, (uint64_t *)a2, (uint64_t *)&v19);
    sub_647AA0(a2, (uint64_t)&v19);
    sub_4D4B58((uint64_t)&v19);
    goto LABEL_28;
  }
  sub_7A83D8(a1 + 7832, a2, &v19);
  sub_647B38(a2, (uint64_t)&v19);
  sub_4D4B58((uint64_t)&v19);
  sub_7A8B34(a1 + 7832, (uint64_t)a2, (uint64_t)&v19);
  sub_647C28(a2, (uint64_t)&v19);
  sub_4D4B58((uint64_t)&v19);
  sub_7A8DC8((unsigned char *)(a1 + 7832), (uint64_t)a2, (uint64_t)&v19);
  if (LODWORD(v20.__r_.__value_.__r.__words[1]) == 1)
  {
    if (*(_OWORD *)&v19.__r_.__value_.__l.__data_ == __PAIR128__(v19.__r_.__value_.__r.__words[2], -1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (!LODWORD(v20.__r_.__value_.__r.__words[1]) && LODWORD(v19.__r_.__value_.__l.__data_) != -1) {
LABEL_13:
  }
    sub_647C7C((uint64_t)a2, (uint64_t)&v19);
LABEL_14:
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v21);
    int v8 = v20.__r_.__value_.__r.__words[1];
    if (LODWORD(v20.__r_.__value_.__r.__words[1]) != 1) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v9 = (void *)v19.__r_.__value_.__l.__size_;
    if (!v19.__r_.__value_.__l.__size_) {
      goto LABEL_28;
    }
    v19.__r_.__value_.__r.__words[2] = v19.__r_.__value_.__l.__size_;
    goto LABEL_24;
  }
  operator delete(__p);
  if (SHIBYTE(v23) < 0) {
    goto LABEL_21;
  }
LABEL_16:
  int v8 = v20.__r_.__value_.__r.__words[1];
  if (LODWORD(v20.__r_.__value_.__r.__words[1]) == 1) {
    goto LABEL_22;
  }
LABEL_17:
  if (!v8 && v20.__r_.__value_.__s.__data_[7] < 0)
  {
    uint64_t v9 = (void *)v19.__r_.__value_.__l.__size_;
LABEL_24:
    operator delete(v9);
  }
LABEL_28:
  uint64_t v10 = (void *)sub_64840C((uint64_t)a2);
  sub_70F9AC((uint64_t *)(a1 + 7816), v10, &v19);
  sub_6483BC(a2, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = nullsub_1(a2);
  long long v12 = *(void **)v11;
  long long v13 = *(void **)(v11 + 8);
  if (*(void **)v11 == v13)
  {
LABEL_33:
    sub_7A96A0(a1 + 7832, (unsigned int **)a2, (uint64_t)&v19);
    std::string::size_type v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = v19.__r_.__value_.__l.__size_;
    }
    if (v15) {
      sub_648140((uint64_t)a2, &v19);
    }
    std::string::size_type v16 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v16 = v20.__r_.__value_.__l.__size_;
    }
    if (v16) {
      sub_648198((uint64_t)a2, &v20);
    }
    if (__p == 1)
    {
      if (v21 == (void *)-1 && v22 == v23)
      {
LABEL_48:
        if (v29 < 0)
        {
          operator delete(v28);
          if ((v27 & 0x80000000) == 0)
          {
LABEL_50:
            int v17 = (int)__p;
            if (__p != 1) {
              goto LABEL_51;
            }
            goto LABEL_56;
          }
        }
        else if ((v27 & 0x80000000) == 0)
        {
          goto LABEL_50;
        }
        operator delete(v26);
        int v17 = (int)__p;
        if (__p != 1)
        {
LABEL_51:
          if (v17 || (v24 & 0x80000000) == 0)
          {
LABEL_59:
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v20.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
            }
            else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              return;
            }
            operator delete(v19.__r_.__value_.__l.__data_);
            return;
          }
          uint64_t v18 = v22;
LABEL_58:
          operator delete(v18);
          goto LABEL_59;
        }
LABEL_56:
        uint64_t v18 = v22;
        if (!v22) {
          goto LABEL_59;
        }
        uint64_t v23 = v22;
        goto LABEL_58;
      }
    }
    else if (__p || v21 == -1)
    {
      goto LABEL_48;
    }
    sub_6481F0((uint64_t)a2, (uint64_t)&v21);
    goto LABEL_48;
  }
  while (1)
  {
    uint64_t v14 = sub_3777C0(*(void **)(a1 + 5624));
    if ((sub_3D4A98(v14, v12) & 1) == 0) {
      break;
    }
    v12 += 1541;
    if (v12 == v13) {
      goto LABEL_33;
    }
  }
}

void sub_52C0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52C108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52C11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_52C130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52C144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52C158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_52C1A8(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)long long __p = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      std::string::size_type v5 = (void *)sub_647C20(v2);
      if (!sub_45FB38(v5))
      {
        uint64_t v6 = (uint64_t *)sub_647C20(v2);
        sub_532E9C((uint64_t)__p, (uint64_t)v6, v6);
        if ((v7 & 1) == 0) {
          break;
        }
      }
      v2 += 7560;
      if (v2 == v3)
      {
        int v8 = 1;
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        if (v9 == v10) {
          goto LABEL_23;
        }
LABEL_9:
        while (2)
        {
          uint64_t v11 = (void *)sub_647C20(v9);
          if (sub_45FB38(v11)) {
            int v12 = 0;
          }
          else {
            int v12 = v8;
          }
          sub_649074(v9, v12);
          uint64_t v13 = sub_647C74(v9);
          int v14 = *(_DWORD *)(v13 + 32);
          if (v14 == 1)
          {
            int v16 = 1;
            if (*(_DWORD *)(v13 + 4) == -1 && *(_DWORD *)v13 == -1)
            {
              BOOL v15 = *(void *)(v13 + 8) == *(void *)(v13 + 16);
              goto LABEL_18;
            }
          }
          else if (v14)
          {
            int v16 = 0;
          }
          else
          {
            BOOL v15 = *(_DWORD *)v13 == -1;
LABEL_18:
            int v16 = !v15;
          }
          sub_649084(v9, v16);
          v9 += 7560;
          if (v9 == v10) {
            goto LABEL_23;
          }
          continue;
        }
      }
    }
    int v8 = 2;
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (v9 != v10) {
      goto LABEL_9;
    }
  }
LABEL_23:
  int v17 = (void *)v24;
  if ((void)v24)
  {
    do
    {
      std::string v20 = (void *)*v17;
      uint64_t v21 = v17[2];
      if (v21)
      {
        uint64_t v22 = v17[3];
        std::string v19 = (void *)v17[2];
        if (v22 != v21)
        {
          do
          {
            if (*(char *)(v22 - 1) < 0) {
              operator delete(*(void **)(v22 - 24));
            }
            v22 -= 24;
          }
          while (v22 != v21);
          std::string v19 = (void *)v17[2];
        }
        v17[3] = v21;
        operator delete(v19);
      }
      operator delete(v17);
      int v17 = v20;
    }
    while (v20);
  }
  uint64_t v18 = __p[0];
  __p[0] = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_52C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_52C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_52C37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_52C390(uint64_t a1, void *a2)
{
  unint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = sub_6467E8(a2, v6);
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v6++, v7);
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_52C418()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = (void *)v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0 + 4088;
  sub_74C3A0((uint64_t)v23, *(void *)(v0 + 5624), v0 + 4088, v0 + 8, v1, v5);
  sub_74C3A8((uint64_t)v23, (uint64_t *)&v21);
  uint64_t v6 = (void **)(v2 + 931);
  uint64_t v7 = (void *)v2[931];
  if (v7)
  {
    int v8 = (void *)v2[932];
    uint64_t v9 = (void *)v2[931];
    if (v8 != v7)
    {
      do
        int v8 = sub_52F1E8((uint64_t)(v8 - 135));
      while (v8 != v7);
      uint64_t v9 = *v6;
    }
    v2[932] = v7;
    operator delete(v9);
    *uint64_t v6 = 0;
    v2[932] = 0;
    v2[933] = 0;
  }
  *(_OWORD *)uint64_t v6 = v21;
  v2[933] = v22;
  sub_74DF54(v23, (uint64_t *)&v21);
  uint64_t v10 = (void **)(v2 + 934);
  uint64_t v11 = (void *)v2[934];
  if (v11)
  {
    int v12 = (void *)v2[935];
    uint64_t v13 = (void *)v2[934];
    if (v12 != v11)
    {
      do
      {
        int v14 = (void *)*(v12 - 6);
        if (v14)
        {
          *(v12 - 5) = v14;
          operator delete(v14);
        }
        v12 -= 51;
        sub_4F32CC(v12);
      }
      while (v12 != v11);
      uint64_t v13 = *v10;
    }
    v2[935] = v11;
    operator delete(v13);
    *uint64_t v10 = 0;
    v2[935] = 0;
    v2[936] = 0;
  }
  *((_OWORD *)v2 + 467) = v21;
  v2[936] = v22;
  sub_74D700(v23, &v21);
  int v16 = (void **)(v2 + 937);
  BOOL v15 = (void *)v2[937];
  if (v15)
  {
    int v17 = (void *)v2[938];
    uint64_t v18 = (void *)v2[937];
    if (v17 != v15)
    {
      do
        int v17 = sub_52F090(v17 - 102);
      while (v17 != v15);
      uint64_t v18 = *v16;
    }
    v2[938] = v15;
    operator delete(v18);
    _DWORD *v16 = 0;
    v2[938] = 0;
    v2[939] = 0;
  }
  *(_OWORD *)(v2 + 937) = v21;
  v2[939] = v22;
  sub_616A8C(v3 + 5640, (uint64_t)(v2 + 931));
  sub_616AD8(v3 + 5640, (uint64_t)(v2 + 934));
  sub_6166CC(v3 + 5640, (uint64_t)(v2 + 937));
  sub_52AABC(v3, (uint64_t)(v2 + 16), (uint64_t)(v2 + 1275));
  sub_52AABC(v3, (uint64_t)(v2 + 36), (uint64_t)(v2 + 1360));
  if (sub_62D404(v4) && *(unsigned char *)(v3 + 5499))
  {
    sub_74F5D0((uint64_t)v23, 0, (uint64_t *)&v21);
    sub_529480((uint64_t)(v2 + 940), (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v2 + 940);
    sub_74F5D0((uint64_t)v23, 1, (uint64_t *)&v21);
    std::string v19 = v2 + 1042;
    sub_529480((uint64_t)v19, (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v19);
  }
  return sub_52FBA0((uint64_t)v23);
}

void sub_52C6EC(_Unwind_Exception *a1)
{
}

void sub_52C700(_Unwind_Exception *a1)
{
}

void sub_52C714(_Unwind_Exception *a1)
{
}

void sub_52C728(_Unwind_Exception *a1)
{
}

void sub_52C73C(_Unwind_Exception *a1)
{
}

void sub_52C754(_Unwind_Exception *a1)
{
}

uint64_t sub_52C768(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  *(void *)a1 = off_2439B08;
  uint64_t v9 = (void *)(a1 + 8);
  sub_62B9C4(a1 + 8, (int)a4, 2, *(unsigned __int8 *)(a3 + 1525), a5);
  memcpy((void *)(a1 + 2048), v9, 0x76CuLL);
  if (*(char *)(a1 + 1935) < 0)
  {
    sub_4200((unsigned char *)(a1 + 3952), *(void **)(a1 + 1912), *(void *)(a1 + 1920));
  }
  else
  {
    *(_OWORD *)(a1 + 3952) = *(_OWORD *)(a1 + 1912);
    *(void *)(a1 + 3968) = *(void *)(a1 + 1928);
  }
  long long v10 = *(_OWORD *)(a1 + 1984);
  long long v11 = *(_OWORD *)(a1 + 2016);
  *(_OWORD *)(a1 + 4040) = *(_OWORD *)(a1 + 2000);
  *(_OWORD *)(a1 + 4056) = v11;
  long long v12 = *(_OWORD *)(a1 + 1952);
  *(_OWORD *)(a1 + 3976) = *(_OWORD *)(a1 + 1936);
  *(_OWORD *)(a1 + 3992) = v12;
  *(_OWORD *)(a1 + 4008) = *(_OWORD *)(a1 + 1968);
  *(_OWORD *)(a1 + 4024) = v10;
  *(_OWORD *)(a1 + 4066) = *(_OWORD *)(a1 + 2026);
  sub_4BBDC0(a1 + 4088, a3);
  *(void *)(a1 + 5624) = a4;
  *(void *)(a1 + 5632) = sub_376F8C(a4);
  sub_4D30C8(a1 + 5640);
  sub_70F6C0(a1 + 7816, a2, a3);
  sub_7AA6B4(a1 + 7832, (int)a4, (int)a2, a3, v9);
  uint64_t v13 = (uint64_t *)(a1 + 11448);
  *(_OWORD *)(a1 + 11464) = 0u;
  *(_DWORD *)(a1 + 11492) = 0;
  int v14 = (void **)(a1 + 11504);
  *(void *)(a1 + 11504) = 0;
  *(void *)(a1 + 11520) = 0;
  *(void *)(a1 + 11512) = 0;
  *(_OWORD *)(a1 + 11448) = 0u;
  BOOL v15 = *(_DWORD **)(a3 + 1072);
  int v16 = *(_DWORD **)(a3 + 1080);
  if (v15 == v16)
  {
    *(_WORD *)(a1 + 11500) = 0;
    *(unsigned char *)(a1 + 11502) = 0;
    std::string v20 = v15;
  }
  else
  {
    int v17 = *(_DWORD **)(a3 + 1072);
    while (*v17 != 2)
    {
      if (++v17 == v16)
      {
        int v17 = *(_DWORD **)(a3 + 1080);
        break;
      }
    }
    *(unsigned char *)(a1 + 11500) = v17 != v16;
    uint64_t v18 = v15;
    while (*v18 != 1)
    {
      if (++v18 == v16)
      {
        uint64_t v18 = v16;
        break;
      }
    }
    *(unsigned char *)(a1 + 11501) = v18 != v16;
    std::string v19 = v15;
    while (*v19 != 4)
    {
      if (++v19 == v16)
      {
        std::string v19 = v16;
        break;
      }
    }
    *(unsigned char *)(a1 + 11502) = v19 != v16;
    std::string v20 = v15;
    while (*v20 != 3)
    {
      if (++v20 == v16)
      {
        std::string v20 = v16;
        break;
      }
    }
  }
  *(unsigned char *)(a1 + 11503) = v20 != v16;
  sub_688A04(a2, 3u, *(_DWORD *)(a3 + 968), &v42);
  int v21 = *(_DWORD *)(a3 + 1000);
  if (v21)
  {
    sub_6892E8(a2, 3u, v21, &v40);
    uint64_t v22 = v42;
  }
  else
  {
    uint64_t v22 = v42;
    uint64_t v40 = v42;
    uint64_t v41 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v36 = v22;
  int v37 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = v40;
  long long v35 = v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DE48((uint64_t)&v38, &v36, &v34, (char *)v9, a3);
  sub_4D3210(a1 + 5640, &v38);
  sub_4F2894((uint64_t)&v38);
  uint64_t v23 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  long long v24 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  sub_688A04(a2, 4u, *(_DWORD *)(a3 + 968), (uint64_t *)&v38);
  long long v25 = v38;
  long long v38 = 0uLL;
  long long v26 = *(std::__shared_weak_count **)(a1 + 11456);
  *(_OWORD *)uint64_t v13 = v25;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  char v27 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_688A04(a2, 0, *(_DWORD *)(a3 + 968), (uint64_t *)&v38);
  long long v28 = v38;
  long long v38 = 0uLL;
  char v29 = *(std::__shared_weak_count **)(a1 + 11472);
  *(_OWORD *)(a1 + 11464) = v28;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v38 + 1);
  if (*((void *)&v38 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  sub_8D8884(*(void *)(a1 + 11464), *v13);
  sub_689794(a2, *(_DWORD *)(a3 + 968), (char *)&v38);
  if (*(char *)(a1 + 11527) < 0) {
    operator delete(*v14);
  }
  *(_OWORD *)int v14 = v38;
  *(void *)(a1 + 11520) = v39;
  uint64_t v31 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  long long v32 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  return a1;
}

void sub_52CD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12)
{
  if ((*(char *)(v12 + 1935) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*a11);
  _Unwind_Resume(exception_object);
}

void sub_52CDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  JUMPOUT(0x52CD78);
}

void sub_52CE14()
{
  if ((*(char *)(v0 + 79) & 0x80000000) == 0) {
    JUMPOUT(0x52CD98);
  }
  JUMPOUT(0x52CD90);
}

void sub_52CE24()
{
}

void sub_52CE2C()
{
}

void sub_52CE34()
{
  if ((*(char *)(v0 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x52CDD8);
  }
  JUMPOUT(0x52CDD0);
}

void sub_52CE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_4BCED0(a12);
  if ((*(char *)(v12 + 3975) & 0x80000000) == 0) {
    JUMPOUT(0x52CDD8);
  }
  JUMPOUT(0x52CDD0);
}

void sub_52CE60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::string *)*a2;
  int v5 = (std::string *)a2[1];
  if ((std::string *)*a2 != v5)
  {
    do
    {
      sub_52E19C(a1, v4);
      v4 += 315;
    }
    while (v4 != v5);
  }
  sub_52E664(a1, a2);
  uint64_t v6 = (std::string *)*a2;
  uint64_t v7 = (std::string *)a2[1];
  if ((std::string *)*a2 != v7)
  {
    do
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 32))(a1, v6);
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 24))(a1, v6);
      sub_64900C((uint64_t *)v6);
      sub_648360(v6, (const std::string *)(a1 + 11504));
      v6 += 315;
    }
    while (v6 != v7);
  }
}

void sub_52CF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 24) == 0x7FFFFFFF || *(_DWORD *)(a2 + 60) == 0x7FFFFFFF) {
    return;
  }
  if (!sub_40A45C((int *)(a2 + 32))) {
    return;
  }
  int v7 = *(_DWORD *)(a2 + 136);
  if (v7 == -1) {
    return;
  }
  if (v7 == 1)
  {
    unint64_t v8 = *(void *)(a2 + 128);
    if (v8 > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 128)) {
      return;
    }
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 5632);
    int v102 = *(_DWORD *)(a2 + 136);
    unint64_t v101 = v8;
    unint64_t v10 = sub_28CF4C(v9, &v101);
    long long v11 = sub_28F040(*(void *)(a1 + 5632), v10);
    uint64_t v12 = (char **)sub_37D0C0(a1 + 5320);
    int v13 = sub_89DD4(v12);
    int v90 = v13;
    uint64_t v15 = *v11;
    uint64_t v14 = v11[1];
    if (*v11 != v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15;
      do
      {
        if (*(unsigned char *)(v17 + 24) == 1 && (*(_DWORD *)(v17 + 28) & v13) != 0) {
          ++v16;
        }
        v17 += 40;
      }
      while (v17 != v14);
      if (v16)
      {
        unint64_t v18 = v14 - v15 - 40;
        if (v18 >= 0x28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          unint64_t v32 = v18 / 0x28 + 1;
          uint64_t v20 = v15 + 40 * (v32 & 0xFFFFFFFFFFFFFFELL);
          long long v33 = (int *)(v15 + 68);
          uint64_t v34 = v32 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            int v35 = *(v33 - 10);
            int v37 = *v33;
            v33 += 20;
            int v36 = v37;
            if ((v35 & v13) != 0) {
              ++v30;
            }
            if ((v36 & v13) != 0) {
              ++v31;
            }
            v34 -= 2;
          }
          while (v34);
          unint64_t v19 = v31 + v30;
          if (v32 == (v32 & 0xFFFFFFFFFFFFFFELL))
          {
LABEL_45:
            memset(&__str, 0, sizeof(__str));
            sub_503BC8(v19, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
            if (byte_25688FF >= 0) {
              long long v38 = (const std::string::value_type *)&qword_25688E8;
            }
            else {
              long long v38 = (const std::string::value_type *)qword_25688E8;
            }
            if (byte_25688FF >= 0) {
              std::string::size_type v39 = byte_25688FF;
            }
            else {
              std::string::size_type v39 = unk_25688F0;
            }
            uint64_t v40 = std::string::insert(&v75, 0, v38, v39);
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            *(void *)&v89[16] = *((void *)&v40->__r_.__value_.__l + 2);
            *(_OWORD *)int v89 = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            sub_6352AC((uint64_t)&v80, (uint64_t)v89);
            std::to_string(&v75, v16);
            sub_6358A0((uint64_t)&v80, &xmmword_2568930, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            std::to_string(&v75, v19);
            sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&__p);
            sub_5F3D48((uint64_t)&v75, (uint64_t)__p);
            sub_5250C0(3, (uint64_t)&__str);
            sub_52FD00(a3 + 408, (uint64_t)&v75);
            sub_4F39B8(a3 + 568, &__str);
            *(void *)(a3 + 608) = v94;
            std::string::operator=((std::string *)(a3 + 616), &v95);
            *(unsigned char *)(a3 + 640) = v96;
            std::string::operator=((std::string *)(a3 + 648), &v97);
            *(unsigned char *)(a3 + 672) = v98;
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v97.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_61:
                int v42 = v93;
                if (v93 != 1) {
                  goto LABEL_62;
                }
                goto LABEL_88;
              }
            }
            else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_61;
            }
            operator delete(v95.__r_.__value_.__l.__data_);
            int v42 = v93;
            if (v93 != 1)
            {
LABEL_62:
              if (v42 || (v92 & 0x80000000) == 0) {
                goto LABEL_91;
              }
              std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
              goto LABEL_90;
            }
LABEL_88:
            std::string::size_type size = (void *)__str.__r_.__value_.__l.__size_;
            if (!__str.__r_.__value_.__l.__size_)
            {
LABEL_91:
              sub_4D4B58((uint64_t)&v75);
              int v51 = (char *)__p;
              if (__p)
              {
                int v52 = v87;
                int v53 = __p;
                if (v87 != __p)
                {
                  do
                  {
                    if (*(v52 - 1) < 0) {
                      operator delete(*((void **)v52 - 3));
                    }
                    v52 -= 24;
                  }
                  while (v52 != v51);
                  int v53 = __p;
                }
                int v87 = v51;
                operator delete(v53);
              }
              int v54 = v83;
              if (v83)
              {
                do
                {
                  uint64_t v55 = (void *)*v54;
                  sub_4F4B48((uint64_t)(v54 + 2));
                  operator delete(v54);
                  int v54 = v55;
                }
                while (v55);
              }
              int v56 = (void *)*((void *)&v81 + 1);
              *((void *)&v81 + 1) = 0;
              if (v56) {
                operator delete(v56);
              }
              uint64_t v57 = v80;
              if ((void)v80)
              {
                uint64_t v58 = *((void *)&v80 + 1);
                int v59 = (void *)v80;
                if (*((void *)&v80 + 1) != (void)v80)
                {
                  do
                  {
                    if (*(char *)(v58 - 1) < 0) {
                      operator delete(*(void **)(v58 - 24));
                    }
                    v58 -= 24;
                  }
                  while (v58 != v57);
                  int v59 = (void *)v80;
                }
                *((void *)&v80 + 1) = v57;
                operator delete(v59);
              }
              if ((v89[23] & 0x80000000) == 0) {
                return;
              }
              int v60 = *(void **)v89;
              goto LABEL_159;
            }
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_90:
            operator delete(size);
            goto LABEL_91;
          }
        }
        else
        {
          unint64_t v19 = 0;
          uint64_t v20 = v15;
        }
        do
        {
          if ((*(_DWORD *)(v20 + 28) & v13) != 0) {
            ++v19;
          }
          v20 += 40;
        }
        while (v20 != v14);
        goto LABEL_45;
      }
      long long v80 = 0u;
      long long v81 = 0u;
      int v82 = 1065353216;
      sub_60E8D8(a1 + 5640, (uint64_t)&qword_2568900, (uint64_t)&v80, 0, (uint64_t)v89);
      sub_5F3D48((uint64_t)&v75, (uint64_t)v89);
      sub_5250C0(2, (uint64_t)&__str);
      sub_52FD00(a3 + 408, (uint64_t)&v75);
      sub_4F39B8(a3 + 568, &__str);
      *(void *)(a3 + 608) = v94;
      std::string::operator=((std::string *)(a3 + 616), &v95);
      *(unsigned char *)(a3 + 640) = v96;
      std::string::operator=((std::string *)(a3 + 648), &v97);
      *(unsigned char *)(a3 + 672) = v98;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v97.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          int v28 = v93;
          if (v93 != 1) {
            goto LABEL_32;
          }
          goto LABEL_115;
        }
      }
      else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(v95.__r_.__value_.__l.__data_);
      int v28 = v93;
      if (v93 != 1)
      {
LABEL_32:
        if (v28 || (v92 & 0x80000000) == 0)
        {
LABEL_118:
          sub_4D4B58((uint64_t)&v75);
          if ((v89[23] & 0x80000000) != 0) {
            operator delete(*(void **)v89);
          }
          int v61 = (void *)v81;
          if ((void)v81)
          {
            do
            {
              int v62 = (void *)*v61;
              sub_4F4B48((uint64_t)(v61 + 2));
              operator delete(v61);
              int v61 = v62;
            }
            while (v62);
          }
          int v60 = (void *)v80;
          *(void *)&long long v80 = 0;
          if (!v60) {
            return;
          }
LABEL_159:
          operator delete(v60);
          return;
        }
        char v29 = (void *)__str.__r_.__value_.__l.__size_;
LABEL_117:
        operator delete(v29);
        goto LABEL_118;
      }
LABEL_115:
      char v29 = (void *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_118;
      }
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      goto LABEL_117;
    }
    int v21 = *(uint64_t **)(a1 + 5632);
    int v100 = v7;
    unint64_t v99 = v8;
    sub_28D048(v21, (uint64_t)&v99, (unint64_t)&v75);
    uint64_t v22 = v76;
    std::string::size_type v23 = v75.__r_.__value_.__r.__words[0];
    *(void *)int v89 = v76;
    uint64_t v24 = v77;
    *(_OWORD *)&_DWORD v89[8] = v77;
    long long v77 = 0uLL;
    uint64_t v76 = 0;
    if (v75.__r_.__value_.__r.__words[0])
    {
      uint64_t v74 = v24;
      std::string::size_type v25 = v75.__r_.__value_.__l.__size_;
      long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
      {
        do
        {
          char v27 = *(void **)(v25 - 24);
          if (v27)
          {
            *(void *)(v25 - 16) = v27;
            operator delete(v27);
          }
          v25 -= 48;
        }
        while (v25 != v23);
        long long v26 = (void *)v75.__r_.__value_.__r.__words[0];
      }
      v75.__r_.__value_.__l.__size_ = v23;
      operator delete(v26);
      uint64_t v24 = v74;
    }
    int v87 = 0;
    unint64_t v88 = 0;
    long long __p = &v87;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    sub_533A6C(v22, v24, (uint64_t **)&__p, (uint64_t *)&v87, (uint64_t)&__str, &v75);
    unint64_t v44 = v88;
    if (!v88)
    {
LABEL_152:
      sub_2F020((uint64_t)&__p, v87);
      if (!v22) {
        return;
      }
      for (uint64_t i = *(void *)&v89[8]; i != v22; i -= 48)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      int v60 = (void *)v22;
      goto LABEL_159;
    }
    memset(&__str, 0, sizeof(__str));
    sub_503BC8(v88, (const void **)&__str.__r_.__value_.__l.__data_, *(_DWORD *)(a1 + 5056), 0, &v75);
    if (byte_256892F >= 0) {
      int v45 = (const std::string::value_type *)&qword_2568918;
    }
    else {
      int v45 = (const std::string::value_type *)qword_2568918;
    }
    if (byte_256892F >= 0) {
      std::string::size_type v46 = byte_256892F;
    }
    else {
      std::string::size_type v46 = unk_2568920;
    }
    int v47 = std::string::insert(&v75, 0, v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    std::string::size_type v85 = v47->__r_.__value_.__r.__words[2];
    long long v84 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_6352AC((uint64_t)&v80, (uint64_t)&v84);
    std::to_string(&v75, v44);
    sub_6358A0((uint64_t)&v80, (long long *)&qword_2568948, &v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    sub_60EBA4((uint64_t *)(a1 + 5640), (uint64_t)&v80, 0, (uint64_t)&v78);
    sub_5F3D48((uint64_t)&v75, (uint64_t)v78);
    sub_5250C0(1, (uint64_t)&__str);
    sub_52FD00(a3 + 408, (uint64_t)&v75);
    sub_4F39B8(a3 + 568, &__str);
    *(void *)(a3 + 608) = v94;
    std::string::operator=((std::string *)(a3 + 616), &v95);
    *(unsigned char *)(a3 + 640) = v96;
    std::string::operator=((std::string *)(a3 + 648), &v97);
    *(unsigned char *)(a3 + 672) = v98;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_82:
        int v49 = v93;
        if (v93 != 1) {
          goto LABEL_83;
        }
        goto LABEL_126;
      }
    }
    else if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_82;
    }
    operator delete(v95.__r_.__value_.__l.__data_);
    int v49 = v93;
    if (v93 != 1)
    {
LABEL_83:
      if (v49 || (v92 & 0x80000000) == 0) {
        goto LABEL_129;
      }
      int v50 = (void *)__str.__r_.__value_.__l.__size_;
      goto LABEL_128;
    }
LABEL_126:
    int v50 = (void *)__str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_)
    {
LABEL_129:
      sub_4D4B58((uint64_t)&v75);
      int v63 = (void **)v78;
      if (v78)
      {
        int v64 = v79;
        int v65 = v78;
        if (v79 != v78)
        {
          do
          {
            if (*((char *)v64 - 1) < 0) {
              operator delete(*(v64 - 3));
            }
            v64 -= 3;
          }
          while (v64 != v63);
          int v65 = v78;
        }
        int v79 = v63;
        operator delete(v65);
      }
      int v66 = v83;
      if (v83)
      {
        do
        {
          int v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          int v66 = v67;
        }
        while (v67);
      }
      long long v68 = (void *)*((void *)&v81 + 1);
      *((void *)&v81 + 1) = 0;
      if (v68) {
        operator delete(v68);
      }
      uint64_t v69 = v80;
      if ((void)v80)
      {
        uint64_t v70 = *((void *)&v80 + 1);
        int v71 = (void *)v80;
        if (*((void *)&v80 + 1) != (void)v80)
        {
          do
          {
            if (*(char *)(v70 - 1) < 0) {
              operator delete(*(void **)(v70 - 24));
            }
            v70 -= 24;
          }
          while (v70 != v69);
          int v71 = (void *)v80;
        }
        *((void *)&v80 + 1) = v69;
        operator delete(v71);
      }
      if (SHIBYTE(v85) < 0) {
        operator delete((void *)v84);
      }
      uint64_t v22 = *(void *)v89;
      goto LABEL_152;
    }
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
LABEL_128:
    operator delete(v50);
    goto LABEL_129;
  }
  if (v7)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  unint64_t v8 = *(void *)(a2 + 128);
  if (v8 != -1) {
    goto LABEL_13;
  }
}

void sub_52D900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,char *a55)
{
  sub_4D4B58((uint64_t)&a12);
  sub_1A668(&a35);
  sub_4D4880(&a38);
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_2F020((uint64_t)&a54, a55);
  sub_28F14C((void **)(v55 - 256));
  _Unwind_Resume(a1);
}

void sub_52DA6C()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x52DA78);
}

void sub_52DAA0()
{
  sub_4D9814(v0 - 216);
  JUMPOUT(0x52DAACLL);
}

void sub_52DAE8()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 328);
  BOOL v11 = v10 > 5;
  int v12 = (1 << v10) & 0x34;
  if (v11 || v12 == 0)
  {
    memcpy(__dst, (const void *)(v0 + 2048), 0x76CuLL);
    if (*(char *)(v7 + 3975) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 3952), *(void *)(v7 + 3960));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 3952);
      uint64_t v33 = *(void *)(v7 + 3968);
    }
    long long v17 = *(_OWORD *)(v7 + 4056);
    long long v38 = *(_OWORD *)(v7 + 4040);
    v39[0] = v17;
    *(_OWORD *)((char *)v39 + 10) = *(_OWORD *)(v7 + 4066);
    long long v18 = *(_OWORD *)(v7 + 3992);
    long long v34 = *(_OWORD *)(v7 + 3976);
    long long v35 = v18;
    long long v19 = *(_OWORD *)(v7 + 4024);
    long long v36 = *(_OWORD *)(v7 + 4008);
    long long v37 = v19;
  }
  else
  {
    memcpy(__dst, (const void *)(v0 + 8), 0x76CuLL);
    if (*(char *)(v7 + 1935) < 0)
    {
      sub_4200(&__p, *(void **)(v7 + 1912), *(void *)(v7 + 1920));
    }
    else
    {
      long long __p = *(_OWORD *)(v7 + 1912);
      uint64_t v33 = *(void *)(v7 + 1928);
    }
    long long v14 = *(_OWORD *)(v7 + 1984);
    long long v15 = *(_OWORD *)(v7 + 2016);
    long long v38 = *(_OWORD *)(v7 + 2000);
    v39[0] = v15;
    long long v16 = *(_OWORD *)(v7 + 1952);
    long long v34 = *(_OWORD *)(v7 + 1936);
    long long v35 = v16;
    long long v36 = *(_OWORD *)(v7 + 1968);
    long long v37 = v14;
    *(_OWORD *)((char *)v39 + 10) = *(_OWORD *)(v7 + 2026);
  }
  sub_7E9664((uint64_t)&v42, (uint64_t)__dst, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_7E98A4((uint64_t)&v42, &v40);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v40);
    sub_52F090(&v40);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_7E9B94(&v42, (uint64_t)&v40);
    uint64_t v20 = v8 + 2400 * v2;
    int v21 = (void **)(v20 + 1712);
    uint64_t v22 = *(void **)(v20 + 1712);
    if (v22)
    {
      std::string::size_type v23 = *(void **)(v20 + 1720);
      uint64_t v24 = *(void **)(v20 + 1712);
      if (v23 != v22)
      {
        do
          std::string::size_type v23 = sub_52F1E8((uint64_t)(v23 - 135));
        while (v23 != v22);
        uint64_t v24 = *v21;
      }
      v21[1] = v22;
      operator delete(v24);
      *int v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
    }
    *(_OWORD *)int v21 = v40;
    v21[2] = v41;
    sub_616A8C(v7 + 5640, (uint64_t)v21);
  }
  if (*(unsigned char *)(v7 + 11502))
  {
    sub_7E9F88((uint64_t)&v42, v4, (uint64_t *)&v40);
    uint64_t v25 = v8 + 2400 * v2;
    long long v26 = (void **)(v25 + 1736);
    char v27 = *(void **)(v25 + 1736);
    if (v27)
    {
      int v28 = *(void **)(v25 + 1744);
      char v29 = *(void **)(v25 + 1736);
      if (v28 != v27)
      {
        do
        {
          uint64_t v30 = (void *)*(v28 - 6);
          if (v30)
          {
            *(v28 - 5) = v30;
            operator delete(v30);
          }
          v28 -= 51;
          sub_4F32CC(v28);
        }
        while (v28 != v27);
        char v29 = *v26;
      }
      v26[1] = v27;
      operator delete(v29);
      *long long v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
    }
    *(_OWORD *)long long v26 = v40;
    v26[2] = v41;
    sub_616AD8(v7 + 5640, (uint64_t)v26);
  }
  sub_52DFFC(v7, v9);
  int v42 = &off_2439DD8;
  sub_5322CC((uint64_t)&v43);
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
}

void sub_52DE78(_Unwind_Exception *a1)
{
  STACK[0xB30] = (unint64_t)&off_2439DD8;
  sub_5322CC((uint64_t)&STACK[0xB38]);
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

__n128 sub_52DED0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = *(unsigned __int8 *)(a2 + 328);
  BOOL v6 = v5 > 5;
  int v7 = (1 << v5) & 0x34;
  if (v6 || v7 == 0)
  {
    memcpy((void *)a3, (const void *)(a1 + 2048), 0x76CuLL);
    long long v14 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 3975) < 0)
    {
      sub_4200(v14, *(void **)(a1 + 3952), *(void *)(a1 + 3960));
    }
    else
    {
      *(_OWORD *)long long v14 = *(_OWORD *)(a1 + 3952);
      *(void *)(a3 + 1920) = *(void *)(a1 + 3968);
    }
    long long v15 = *(_OWORD *)(a1 + 4056);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 4040);
    *(_OWORD *)(a3 + 2008) = v15;
    *(_OWORD *)(a3 + 2018) = *(_OWORD *)(a1 + 4066);
    long long v16 = *(_OWORD *)(a1 + 3992);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 3976);
    *(_OWORD *)(a3 + 1944) = v16;
    __n128 result = *(__n128 *)(a1 + 4024);
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 4008);
    *(__n128 *)(a3 + 1976) = result;
  }
  else
  {
    memcpy((void *)a3, (const void *)(a1 + 8), 0x76CuLL);
    uint64_t v9 = (unsigned char *)(a3 + 1904);
    if (*(char *)(a1 + 1935) < 0)
    {
      sub_4200(v9, *(void **)(a1 + 1912), *(void *)(a1 + 1920));
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + 1912);
      *(void *)(a3 + 1920) = *(void *)(a1 + 1928);
    }
    long long v10 = *(_OWORD *)(a1 + 1984);
    long long v11 = *(_OWORD *)(a1 + 2016);
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 2000);
    *(_OWORD *)(a3 + 2008) = v11;
    long long v12 = *(_OWORD *)(a1 + 1952);
    *(_OWORD *)(a3 + 1928) = *(_OWORD *)(a1 + 1936);
    *(_OWORD *)(a3 + 1944) = v12;
    *(_OWORD *)(a3 + 1960) = *(_OWORD *)(a1 + 1968);
    *(_OWORD *)(a3 + 1976) = v10;
    __n128 result = *(__n128 *)(a1 + 2026);
    *(__n128 *)(a3 + 2018) = result;
  }
  return result;
}

void sub_52DFFC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(std::string **)(a2 + 656);
  for (i = *(std::string **)(a2 + 664); v2 != i; unint64_t v2 = v6 + 1)
  {
    sub_70F6C4(v2, 0, (uint64_t)__p);
    unsigned int v5 = (const std::string *)sub_8D7730(*(void *)(a1 + 11464), (uint64_t)__p);
    BOOL v6 = v2 + 1;
    std::string::operator=(v6, v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_52E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_52E0B8(uint64_t a1, void *a2)
{
  uint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = sub_6467E8(a2, v6);
      uint64_t v7 = *(void *)(result + 1072) - *(void *)(result + 1064);
      if (v7)
      {
        uint64_t v8 = result;
        uint64_t v9 = 0;
        uint64_t v10 = v7 / 2400;
        do
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6, v8, v9++);
        while (v10 != v9);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_52E19C(uint64_t a1, std::string *a2)
{
  int v4 = sub_646CE8((uint64_t)a2);
  sub_64B8C0((uint64_t *)a2, (uint64_t)&qword_25672D8, v4);
  sub_7AADC4((uint64_t *)a2, (uint64_t *)&v18);
  sub_647A4C(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  if (!*(unsigned char *)(a1 + 5495))
  {
    sub_7AA6B8(a1 + 7832, (uint64_t)a2, (uint64_t)&v18);
    sub_647B8C(a2, (std::string **)&v18);
    std::string::size_type v5 = v18.__r_.__value_.__r.__words[0];
    if (v18.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
      uint64_t v7 = (void *)v18.__r_.__value_.__r.__words[0];
      if (v18.__r_.__value_.__l.__size_ != v18.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v5);
        uint64_t v7 = (void *)v18.__r_.__value_.__r.__words[0];
      }
      v18.__r_.__value_.__l.__size_ = v5;
      operator delete(v7);
    }
    sub_7AB560(a1 + 7832, (uint64_t *)a2, (uint64_t *)&v18);
    sub_647AA0(a2, (uint64_t)&v18);
    sub_4D4B58((uint64_t)&v18);
    goto LABEL_28;
  }
  sub_7AAE48(a1 + 7832, a2, (uint64_t *)&v18);
  sub_647B38(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  sub_7AB60C(a1 + 7832, (uint64_t)a2, (uint64_t)&v18);
  sub_647C28(a2, (uint64_t)&v18);
  sub_4D4B58((uint64_t)&v18);
  sub_7AB8A0((unsigned char *)(a1 + 7832), (uint64_t)a2, (uint64_t)&v18);
  if (LODWORD(v19.__r_.__value_.__r.__words[1]) == 1)
  {
    if (*(_OWORD *)&v18.__r_.__value_.__l.__data_ == __PAIR128__(v18.__r_.__value_.__r.__words[2], -1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (!LODWORD(v19.__r_.__value_.__r.__words[1]) && LODWORD(v18.__r_.__value_.__l.__data_) != -1) {
LABEL_13:
  }
    sub_647C7C((uint64_t)a2, (uint64_t)&v18);
LABEL_14:
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_21:
    operator delete(v20);
    int v8 = v19.__r_.__value_.__r.__words[1];
    if (LODWORD(v19.__r_.__value_.__r.__words[1]) != 1) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v9 = (void *)v18.__r_.__value_.__l.__size_;
    if (!v18.__r_.__value_.__l.__size_) {
      goto LABEL_28;
    }
    v18.__r_.__value_.__r.__words[2] = v18.__r_.__value_.__l.__size_;
    goto LABEL_24;
  }
  operator delete(__p);
  if (SHIBYTE(v22) < 0) {
    goto LABEL_21;
  }
LABEL_16:
  int v8 = v19.__r_.__value_.__r.__words[1];
  if (LODWORD(v19.__r_.__value_.__r.__words[1]) == 1) {
    goto LABEL_22;
  }
LABEL_17:
  if (!v8 && v19.__r_.__value_.__s.__data_[7] < 0)
  {
    uint64_t v9 = (void *)v18.__r_.__value_.__l.__size_;
LABEL_24:
    operator delete(v9);
  }
LABEL_28:
  uint64_t v10 = (void *)sub_64840C((uint64_t)a2);
  sub_70F9AC((uint64_t *)(a1 + 7816), v10, &v18);
  sub_6483BC(a2, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  long long v11 = (uint64_t *)nullsub_1(a2);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*v11 == v13)
  {
LABEL_33:
    sub_7AC178(a1 + 7832, (unsigned int **)a2, (uint64_t)&v18);
    std::string::size_type v14 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v14 = v18.__r_.__value_.__l.__size_;
    }
    if (v14) {
      sub_648140((uint64_t)a2, &v18);
    }
    std::string::size_type v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = v19.__r_.__value_.__l.__size_;
    }
    if (v15) {
      sub_648198((uint64_t)a2, &v19);
    }
    if (__p == 1)
    {
      if (v20 == (void *)-1 && v21 == v22)
      {
LABEL_48:
        if (v28 < 0)
        {
          operator delete(v27);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_50:
            int v16 = (int)__p;
            if (__p != 1) {
              goto LABEL_51;
            }
            goto LABEL_56;
          }
        }
        else if ((v26 & 0x80000000) == 0)
        {
          goto LABEL_50;
        }
        operator delete(v25);
        int v16 = (int)__p;
        if (__p != 1)
        {
LABEL_51:
          if (v16 || (v23 & 0x80000000) == 0)
          {
LABEL_59:
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v19.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
            }
            else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              return;
            }
            operator delete(v18.__r_.__value_.__l.__data_);
            return;
          }
          long long v17 = v21;
LABEL_58:
          operator delete(v17);
          goto LABEL_59;
        }
LABEL_56:
        long long v17 = v21;
        if (!v21) {
          goto LABEL_59;
        }
        uint64_t v22 = v21;
        goto LABEL_58;
      }
    }
    else if (__p || v20 == -1)
    {
      goto LABEL_48;
    }
    sub_6481F0((uint64_t)a2, (uint64_t)&v20);
    goto LABEL_48;
  }
  while (1)
  {
    sub_3777C0(*(void **)(a1 + 5624));
    if ((sub_35E640() & 1) == 0) {
      break;
    }
    v12 += 12328;
    if (v12 == v13) {
      goto LABEL_33;
    }
  }
}

void sub_52E5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52E5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52E5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_52E5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52E600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_52E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_52E664(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)long long __p = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      std::string::size_type v5 = (void *)sub_647C20(v2);
      if (!sub_45FB38(v5))
      {
        uint64_t v6 = (uint64_t *)sub_647C20(v2);
        sub_532E9C((uint64_t)__p, (uint64_t)v6, v6);
        if ((v7 & 1) == 0) {
          break;
        }
      }
      v2 += 7560;
      if (v2 == v3)
      {
        int v8 = 1;
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        if (v9 == v10) {
          goto LABEL_23;
        }
LABEL_9:
        while (2)
        {
          long long v11 = (void *)sub_647C20(v9);
          if (sub_45FB38(v11)) {
            int v12 = 0;
          }
          else {
            int v12 = v8;
          }
          sub_649074(v9, v12);
          uint64_t v13 = sub_647C74(v9);
          int v14 = *(_DWORD *)(v13 + 32);
          if (v14 == 1)
          {
            int v16 = 1;
            if (*(_DWORD *)(v13 + 4) == -1 && *(_DWORD *)v13 == -1)
            {
              BOOL v15 = *(void *)(v13 + 8) == *(void *)(v13 + 16);
              goto LABEL_18;
            }
          }
          else if (v14)
          {
            int v16 = 0;
          }
          else
          {
            BOOL v15 = *(_DWORD *)v13 == -1;
LABEL_18:
            int v16 = !v15;
          }
          sub_649084(v9, v16);
          v9 += 7560;
          if (v9 == v10) {
            goto LABEL_23;
          }
          continue;
        }
      }
    }
    int v8 = 2;
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (v9 != v10) {
      goto LABEL_9;
    }
  }
LABEL_23:
  long long v17 = (void *)v24;
  if ((void)v24)
  {
    do
    {
      uint64_t v20 = (void *)*v17;
      uint64_t v21 = v17[2];
      if (v21)
      {
        uint64_t v22 = v17[3];
        std::string v19 = (void *)v17[2];
        if (v22 != v21)
        {
          do
          {
            if (*(char *)(v22 - 1) < 0) {
              operator delete(*(void **)(v22 - 24));
            }
            v22 -= 24;
          }
          while (v22 != v21);
          std::string v19 = (void *)v17[2];
        }
        v17[3] = v21;
        operator delete(v19);
      }
      operator delete(v17);
      long long v17 = v20;
    }
    while (v20);
  }
  std::string v18 = __p[0];
  __p[0] = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_52E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_52E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_52E838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_52E84C(uint64_t a1, void *a2)
{
  unint64_t result = sub_646938(a2);
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = sub_6467E8(a2, v6);
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v6++, v7);
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_52E8D4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = (void *)v1;
  uint64_t v3 = v0;
  uint64_t v4 = v0 + 4088;
  sub_751E50((uint64_t)v23, *(void *)(v0 + 5624), v0 + 4088, v0 + 8, v1, v5);
  sub_751E58((uint64_t)v23, (uint64_t *)&v21);
  uint64_t v6 = (void **)(v2 + 931);
  uint64_t v7 = (void *)v2[931];
  if (v7)
  {
    int v8 = (void *)v2[932];
    uint64_t v9 = (void *)v2[931];
    if (v8 != v7)
    {
      do
        int v8 = sub_52F1E8((uint64_t)(v8 - 135));
      while (v8 != v7);
      uint64_t v9 = *v6;
    }
    v2[932] = v7;
    operator delete(v9);
    *uint64_t v6 = 0;
    v2[932] = 0;
    v2[933] = 0;
  }
  *(_OWORD *)uint64_t v6 = v21;
  v2[933] = v22;
  sub_753A04(v23, (uint64_t *)&v21);
  uint64_t v10 = (void **)(v2 + 934);
  long long v11 = (void *)v2[934];
  if (v11)
  {
    int v12 = (void *)v2[935];
    uint64_t v13 = (void *)v2[934];
    if (v12 != v11)
    {
      do
      {
        int v14 = (void *)*(v12 - 6);
        if (v14)
        {
          *(v12 - 5) = v14;
          operator delete(v14);
        }
        v12 -= 51;
        sub_4F32CC(v12);
      }
      while (v12 != v11);
      uint64_t v13 = *v10;
    }
    v2[935] = v11;
    operator delete(v13);
    *uint64_t v10 = 0;
    v2[935] = 0;
    v2[936] = 0;
  }
  *((_OWORD *)v2 + 467) = v21;
  v2[936] = v22;
  sub_7531B0(v23, &v21);
  int v16 = (void **)(v2 + 937);
  BOOL v15 = (void *)v2[937];
  if (v15)
  {
    long long v17 = (void *)v2[938];
    std::string v18 = (void *)v2[937];
    if (v17 != v15)
    {
      do
        long long v17 = sub_52F090(v17 - 102);
      while (v17 != v15);
      std::string v18 = *v16;
    }
    v2[938] = v15;
    operator delete(v18);
    _DWORD *v16 = 0;
    v2[938] = 0;
    v2[939] = 0;
  }
  *(_OWORD *)(v2 + 937) = v21;
  v2[939] = v22;
  sub_616A8C(v3 + 5640, (uint64_t)(v2 + 931));
  sub_616AD8(v3 + 5640, (uint64_t)(v2 + 934));
  sub_6166CC(v3 + 5640, (uint64_t)(v2 + 937));
  sub_52CF58(v3, (uint64_t)(v2 + 16), (uint64_t)(v2 + 1275));
  sub_52CF58(v3, (uint64_t)(v2 + 36), (uint64_t)(v2 + 1360));
  if (sub_62D404(v4) && *(unsigned char *)(v3 + 5499))
  {
    sub_755080((uint64_t)v23, 0, (uint64_t *)&v21);
    sub_529480((uint64_t)(v2 + 940), (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v2 + 940);
    sub_755080((uint64_t)v23, 1, (uint64_t *)&v21);
    std::string v19 = v2 + 1042;
    sub_529480((uint64_t)v19, (uint64_t)&v21);
    sub_52F090(&v21);
    sub_61656C((uint64_t *)(v3 + 5640), v19);
  }
  return sub_52FBA0((uint64_t)v23);
}

void sub_52EBA8(_Unwind_Exception *a1)
{
}

void sub_52EBBC(_Unwind_Exception *a1)
{
}

void sub_52EBD0(_Unwind_Exception *a1)
{
}

void sub_52EBE4(_Unwind_Exception *a1)
{
}

void sub_52EBF8(_Unwind_Exception *a1)
{
}

void sub_52EC10(_Unwind_Exception *a1)
{
}

void sub_52EC28(uint64_t a1)
{
  sub_532770(a1);

  operator delete();
}

void sub_52EC64(uint64_t a1)
{
  sub_5329D4(a1);

  operator delete();
}

void sub_52ECA0(uint64_t a1)
{
  sub_532C38(a1);

  operator delete();
}

uint64_t sub_52ECD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    int v8 = v6;
    if ((void *)v7 != v6)
    {
      do
        uint64_t v7 = sub_4D4B58(v7 - 160);
      while ((void *)v7 != v6);
      int v8 = *(void **)v5;
    }
    *(void *)(a1 + 16) = v6;
    operator delete(v8);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v12 = *(void *)(a2 + 112);
  long long v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v13;
  *(void *)(a1 + 112) = v12;
  if (v11)
  {
    *(void *)(a1 + 128) = v11;
    operator delete(v11);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(void *)(a1 + 152) = v14;
    operator delete(v14);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  if (a1 != a2)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 192);
    int v16 = *(_DWORD *)(a2 + 192);
    if (v15 == v16)
    {
      if (v15 <= 1) {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
      }
    }
    else
    {
      if (v16 == 1)
      {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        int v16 = *(_DWORD *)(a2 + 192);
      }
      else if (!v16)
      {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
      }
      *(_DWORD *)(a1 + 192) = v16;
    }
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  long long v17 = *(_OWORD *)(a2 + 216);
  long long v18 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  std::string v19 = *(void ***)(a1 + 256);
  if (v19)
  {
    uint64_t v20 = (void **)(a1 + 256);
    long long v21 = *(void ***)(a1 + 264);
    uint64_t v22 = *(void **)(a1 + 256);
    if (v21 != v19)
    {
      do
        long long v21 = sub_4F31D0(v21 - 13);
      while (v21 != v19);
      uint64_t v22 = *v20;
    }
    *(void *)(a1 + 264) = v19;
    operator delete(v22);
    *uint64_t v20 = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 256) = 0;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  char v23 = *(void **)(a1 + 288);
  if (v23)
  {
    *(void *)(a1 + 296) = v23;
    operator delete(v23);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  long long v24 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 312) = v24;
  return a1;
}

void sub_52EF44(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  long long v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  long long v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    void *v11 = 0;
    v11[1] = 0;
  }
}

uint64_t sub_52F040(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_4D4B58(result);
    operator delete();
  }
  return result;
}

void *sub_52F090(void *a1)
{
  uint64_t v2 = a1[101];
  a1[101] = 0;
  if (v2) {
    sub_4F49E8((uint64_t)(a1 + 101), v2);
  }
  sub_4D4B58((uint64_t)(a1 + 81));
  sub_4D4B58((uint64_t)(a1 + 61));
  uint64_t v3 = (void *)a1[57];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = (void *)a1[55];
  a1[55] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = a1[52];
  if (v6)
  {
    uint64_t v7 = a1[53];
    uint64_t v8 = (void *)a1[52];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[52];
    }
    a1[53] = v6;
    operator delete(v8);
  }
  long long v9 = (void *)a1[48];
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      long long v9 = v10;
    }
    while (v10);
  }
  long long v11 = (void *)a1[46];
  a1[46] = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = a1[43];
  if (v12)
  {
    uint64_t v13 = a1[44];
    uint64_t v14 = (void *)a1[43];
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)a1[43];
    }
    a1[44] = v12;
    operator delete(v14);
  }

  return sub_4F32CC(a1);
}

void *sub_52F1E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1048);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 1032);
  *(void *)(a1 + 1032) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1008);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 1016);
    uint64_t v7 = *(void **)(a1 + 1008);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 1008);
    }
    *(void *)(a1 + 1016) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 968);
  if (v8)
  {
    do
    {
      long long v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = *(void **)(a1 + 952);
  *(void *)(a1 + 952) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 928);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 936);
    uint64_t v13 = *(void **)(a1 + 928);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 928);
    }
    *(void *)(a1 + 936) = v11;
    operator delete(v13);
  }
  if (*(char *)(a1 + 927) < 0)
  {
    operator delete(*(void **)(a1 + 904));
    if ((*(char *)(a1 + 903) & 0x80000000) == 0)
    {
LABEL_27:
      uint64_t v14 = *(void **)(a1 + 832);
      if (!v14) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  else if ((*(char *)(a1 + 903) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(*(void **)(a1 + 880));
  uint64_t v14 = *(void **)(a1 + 832);
  if (v14)
  {
LABEL_28:
    *(void *)(a1 + 840) = v14;
    operator delete(v14);
  }
LABEL_29:

  return sub_52F090((void *)a1);
}

uint64_t sub_52F364(uint64_t a1)
{
  *(void *)a1 = off_2439BF8;
  uint64_t v2 = (uint64_t *)(a1 + 1976);
  if (*(void *)(a1 + 2032))
  {
    sub_52F808((uint64_t *)(a1 + 2032));
    operator delete(*(void **)(a1 + 2032));
  }
  if (*v2)
  {
    sub_52F8B0((uint64_t)v2, *v2);
    operator delete((void *)*v2);
  }
  uint64_t v3 = *(void **)(a1 + 1776);
  if (v3)
  {
    *(void *)(a1 + 1784) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1752);
  if (v4)
  {
    *(void *)(a1 + 1760) = v4;
    operator delete(v4);
  }
  sub_52F970(a1 + 1008);
  if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 960);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 984));
  uint64_t v5 = *(void *)(a1 + 960);
  if (v5)
  {
LABEL_11:
    sub_52FA20(a1 + 960, v5);
    operator delete(*(void **)(a1 + 960));
  }
LABEL_12:
  uint64_t v6 = *(void *)(a1 + 936);
  if (v6)
  {
    sub_52FA20(a1 + 936, v6);
    operator delete(*(void **)(a1 + 936));
  }
  uint64_t v7 = *(void *)(a1 + 912);
  if (v7)
  {
    sub_52FA20(a1 + 912, v7);
    operator delete(*(void **)(a1 + 912));
  }
  if (*(char *)(a1 + 911) < 0)
  {
    operator delete(*(void **)(a1 + 888));
    if ((*(char *)(a1 + 879) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 855) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_55;
    }
  }
  else if ((*(char *)(a1 + 879) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)(a1 + 856));
  if ((*(char *)(a1 + 855) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(a1 + 815) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(*(void **)(a1 + 832));
  if ((*(char *)(a1 + 815) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 783) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(*(void **)(a1 + 792));
  if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(a1 + 759) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 727) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(*(void **)(a1 + 736));
  if ((*(char *)(a1 + 727) & 0x80000000) == 0)
  {
LABEL_23:
    if ((*(char *)(a1 + 703) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 704));
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 663) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(*(void **)(a1 + 680));
  if ((*(char *)(a1 + 663) & 0x80000000) == 0)
  {
LABEL_25:
    if ((*(char *)(a1 + 631) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(*(void **)(a1 + 640));
  if ((*(char *)(a1 + 631) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 607) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(*(void **)(a1 + 608));
  if ((*(char *)(a1 + 607) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(*(void **)(a1 + 584));
  if ((*(char *)(a1 + 575) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(a1 + 552));
  if ((*(char *)(a1 + 551) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 511) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(*(void **)(a1 + 528));
  if ((*(char *)(a1 + 511) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(a1 + 488));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_31:
    if ((*(char *)(a1 + 455) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete(*(void **)(a1 + 456));
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 432));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_33:
    if ((*(char *)(a1 + 399) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)(a1 + 400));
  if ((*(char *)(a1 + 399) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 376));
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
LABEL_35:
    if ((*(char *)(a1 + 327) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 336));
  if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 303) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 304));
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
LABEL_37:
    if ((*(char *)(a1 + 271) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 280));
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
LABEL_38:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_39:
    if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
LABEL_40:
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_77:
    operator delete(*(void **)(a1 + 152));
    uint64_t v8 = *(void **)(a1 + 120);
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    goto LABEL_77;
  }
LABEL_41:
  uint64_t v8 = *(void **)(a1 + 120);
  if (!v8) {
    goto LABEL_43;
  }
  do
  {
LABEL_42:
    long long v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    uint64_t v8 = v9;
  }
  while (v9);
LABEL_43:
  uint64_t v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = *(void **)(a1 + 80);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v11;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 48);
  if (v14)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    std::string v19 = *(void **)(a1 + 8);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 24;
      }
      while (v18 != v17);
      std::string v19 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v17;
    operator delete(v19);
  }
  return a1;
}

void sub_52F7D0(uint64_t a1)
{
  sub_52F364(a1);

  operator delete();
}

void sub_52F808(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 176)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (!v5 && *(char *)(i - 81) < 0)
      {
        uint64_t v4 = *(void **)(i - 104);
LABEL_2:
        operator delete(v4);
        continue;
      }
      continue;
    }
LABEL_13:
    uint64_t v4 = *(void **)(i - 104);
    if (v4)
    {
      *(void *)(i - 96) = v4;
      goto LABEL_2;
    }
  }
  a1[1] = v2;
}

void sub_52F8B0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 184)
  {
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 81) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 81) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 121) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 104));
    if ((*(char *)(i - 121) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 153) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 144));
    if (*(char *)(i - 153) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 176));
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_52F970(uint64_t a1)
{
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 639) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 616));
    int v2 = *(_DWORD *)(a1 + 600);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 576);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 584) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 648));
  if (*(char *)(a1 + 639) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 600);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 599) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 576);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  sub_4D4B58(a1 + 408);
  uint64_t v4 = *(void **)(a1 + 376);
  if (v4)
  {
    *(void *)(a1 + 384) = v4;
    operator delete(v4);
  }

  return sub_402C7C(a1);
}

void sub_52FA20(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 152)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 33) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 57) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 56));
    if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 97) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 97) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 129) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 120));
    if (*(char *)(i - 129) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 152));
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_52FAE0(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 96));
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 != 1) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = *(void **)(a1 + 56);
    if (!v3) {
      goto LABEL_12;
    }
    *(void *)(a1 + 64) = v3;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 == 1) {
    goto LABEL_9;
  }
LABEL_4:
  if (!v2 && *(char *)(a1 + 79) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 56);
LABEL_11:
    operator delete(v3);
  }
LABEL_12:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_52FBA0(uint64_t a1)
{
  sub_4BCED0(a1 + 2552);
  int v2 = *(void **)(a1 + 2472);
  if (v2)
  {
    *(void *)(a1 + 2480) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 2448);
  if (v3)
  {
    *(void *)(a1 + 2456) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 2336);
  if (v4)
  {
    *(void *)(a1 + 2344) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 2312);
  if (v5)
  {
    *(void *)(a1 + 2320) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 2263) < 0)
  {
    operator delete(*(void **)(a1 + 2240));
    if ((*(char *)(a1 + 2239) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(a1 + 2215) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }
  else if ((*(char *)(a1 + 2239) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 2216));
  if ((*(char *)(a1 + 2215) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 2191) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 2192));
  if ((*(char *)(a1 + 2191) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*(char *)(a1 + 2167) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 2168));
  if ((*(char *)(a1 + 2167) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 1959) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    operator delete(*(void **)(a1 + 1936));
    uint64_t v6 = *(void ***)(a1 + 8);
    if (!v6) {
      return a1;
    }
    goto LABEL_23;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 2144));
  if (*(char *)(a1 + 1959) < 0) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v6 = *(void ***)(a1 + 8);
  if (!v6) {
    return a1;
  }
LABEL_23:
  uint64_t v8 = *(void ***)(a1 + 16);
  long long v9 = v6;
  if (v8 != v6)
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 3;
    }
    while (v8 != v6);
    long long v9 = *(void ***)(a1 + 8);
  }
  *(void *)(a1 + 16) = v6;
  operator delete(v9);
  return a1;
}

uint64_t sub_52FD00(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_69208(a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_52FEDC(a1 + 24, *(std::string **)(a2 + 24), *(std::string **)(a2 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
    sub_69208(a1 + 48, *(std::string **)(a2 + 48), *(std::string **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
    sub_531B24(a1 + 72, *(std::string **)(a2 + 72), *(std::string **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5);
  }
  sub_52FDE0((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  char v4 = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  return a1;
}

uint64_t *sub_52FDE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    sub_52FD00(*a1);
    *(void *)(v4 + 160) = *(void *)(v3 + 160);
    return a1;
  }
  else
  {
    sub_52F040(a1);
    return a1;
  }
}

void sub_52FEB8()
{
}

void sub_52FEDC(uint64_t a1, std::string *a2, std::string *a3, size_t __sz)
{
  uint64_t v6 = (uint64_t)a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((v8 - *(void *)a1) >> 4) >= __sz)
  {
    uint64_t v12 = *(std::string **)(a1 + 8);
    if (0x8E38E38E38E38E39 * (((char *)v12 - (char *)v10) >> 4) >= __sz)
    {
      sub_530178((int)&v26, a2, a3, v10);
      uint64_t v24 = v23;
      for (uint64_t i = *(void *)(a1 + 8); i != v24; sub_4F2DAC(v9, i))
        i -= 144;
      *(void *)(a1 + 8) = v24;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)a2 + 16 * (((char *)v12 - (char *)v10) >> 4));
      if (v12 != v10)
      {
        uint64_t v14 = 16 * (((char *)v12 - (char *)v10) >> 4);
        do
        {
          sub_530290((uint64_t)v10, v6);
          v6 += 144;
          v10 += 6;
          v14 -= 144;
        }
        while (v14);
        uint64_t v10 = *(std::string **)(a1 + 8);
      }
      unint64_t v15 = v10;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          sub_4F5C8C(&v10[v16], (long long *)&v13[v16]);
          v16 += 6;
        }
        while (&v13[v16] != a3);
        unint64_t v15 = &v10[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v10)
    {
      for (uint64_t j = *(void *)(a1 + 8); (std::string *)j != v10; sub_4F2DAC(v9, j))
        j -= 144;
      *(void *)(a1 + 8) = v10;
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x1C71C71C71C71C7) {
      goto LABEL_34;
    }
    unint64_t v17 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= __sz) {
      uint64_t v18 = __sz;
    }
    unint64_t v19 = v17 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v18;
    if (v19 > 0x1C71C71C71C71C7) {
LABEL_34:
    }
      sub_2E00();
    uint64_t v20 = 144 * v19;
    long long v21 = (char *)operator new(144 * v19);
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = &v21[v20];
    if ((std::string *)v6 != a3)
    {
      uint64_t v22 = 0;
      do
      {
        sub_4F5C8C(&v21[v22], (long long *)(v6 + v22));
        v22 += 144;
      }
      while ((std::string *)(v6 + v22) != a3);
      v21 += v22;
    }
    *(void *)(a1 + 8) = v21;
  }
}

std::string *sub_530178(int a1, std::string *__str, std::string *a3, std::string *this)
{
  int v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    int v8 = v5[1].__r_.__value_.__r.__words[1];
    this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v8;
    sub_53036C((uint64_t *)&this[1].__r_.__value_.__r.__words[2], (const std::string **)&v5[1].__r_.__value_.__r.__words[2]);
    sub_530480((uint64_t *)&this[2], (uint64_t *)&v5[2]);
    sub_5305BC((uint64_t *)&this[2].__r_.__value_.__l.__size_, (std::string **)&v5[2].__r_.__value_.__l.__size_);
    if (this != v5) {
      sub_530ED8((void **)&this[2].__r_.__value_.__r.__words[2], v5[2].__r_.__value_.__r.__words[2], (uint64_t)v5[3].__r_.__value_.__l.__data_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5[3].__r_.__value_.__r.__words[0] - v5[2].__r_.__value_.__r.__words[2]) >> 3));
    }
    sub_5306D0((std::string **)&this[3].__r_.__value_.__r.__words[2], (uint64_t *)&v5[3].__r_.__value_.__r.__words[2]);
    std::string::value_type v7 = v5[4].__r_.__value_.__s.__data_[4];
    LODWORD(this[4].__r_.__value_.__l.__data_) = v5[4].__r_.__value_.__l.__data_;
    this[4].__r_.__value_.__s.__data_[4] = v7;
    sub_5307F0((std::string **)&this[4].__r_.__value_.__l.__size_, (const std::string **)&v5[4].__r_.__value_.__l.__size_);
    sub_530978((uint64_t *)&this[4].__r_.__value_.__r.__words[2], (uint64_t *)&v5[4].__r_.__value_.__r.__words[2]);
    sub_530B1C((std::string **)&this[5], (const std::string **)&v5[5]);
    sub_530CA0((void ***)&this[5].__r_.__value_.__l.__size_, (uint64_t **)&v5[5].__r_.__value_.__l.__size_);
    LODWORD(this[5].__r_.__value_.__r.__words[2]) = v5[5].__r_.__value_.__r.__words[2];
    this += 6;
    v5 += 6;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_530290(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  int v4 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = v4;
  sub_53036C((uint64_t *)(a1 + 40), (const std::string **)(a2 + 40));
  sub_530480((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  sub_5305BC((uint64_t *)(a1 + 56), (std::string **)(a2 + 56));
  if (a1 != a2) {
    sub_530ED8((void **)(a1 + 64), *(void *)(a2 + 64), *(void *)(a2 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  }
  sub_5306D0((std::string **)(a1 + 88), (uint64_t *)(a2 + 88));
  char v5 = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = v5;
  sub_5307F0((std::string **)(a1 + 104), (const std::string **)(a2 + 104));
  sub_530978((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  sub_530B1C((std::string **)(a1 + 120), (const std::string **)(a2 + 120));
  sub_530CA0((void ***)(a1 + 128), (uint64_t **)(a2 + 128));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t *sub_53036C(uint64_t *a1, const std::string **a2)
{
  uint64_t v3 = *a2;
  if (v3)
  {
    int v4 = (std::string *)*a1;
    if (!*a1) {
      operator new();
    }
    std::string::operator=(v4, v3);
    return a1;
  }
  else
  {
    sub_530E08(a1);
    return a1;
  }
}

void sub_53045C()
{
}

uint64_t *sub_530480(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    *(_DWORD *)uint64_t v4 = *(_DWORD *)v3;
    std::string::operator=((std::string *)(v4 + 8), (const std::string *)(v3 + 8));
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 32);
    return a1;
  }
  else
  {
    sub_530E70(a1);
    return a1;
  }
}

void sub_530598()
{
}

uint64_t *sub_5305BC(uint64_t *a1, std::string **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2)
  {
    if (!v4) {
      operator new();
    }
    sub_4F39B8(*a1, *a2);
    *(void *)(v4 + 40) = *((void *)&v3[1].__r_.__value_.__l + 2);
    std::string::operator=((std::string *)(v4 + 48), v3 + 2);
    *(unsigned char *)(v4 + 72) = v3[3].__r_.__value_.__s.__data_[0];
    std::string::operator=((std::string *)(v4 + 80), (std::string *)((char *)v3 + 80));
    *(unsigned char *)(v4 + 104) = v3[4].__r_.__value_.__s.__data_[8];
    return a1;
  }
  *a1 = 0;
  if (!v4) {
    return a1;
  }
  sub_4F49E8((uint64_t)a1, v4);
  return a1;
}

void sub_5306AC()
{
}

std::string **sub_5306D0(std::string **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2)
  {
    if (!v4) {
      operator new();
    }
    if (v4 != (std::string *)v3)
    {
      sub_147D0(*a1, *(char **)v3, *(char **)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
      sub_531220((uint64_t)&v4[1], *(std::string **)(v3 + 24), *(std::string **)(v3 + 32), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 5);
    }
    std::string::operator=(v4 + 2, (const std::string *)(v3 + 48));
    std::string::operator=(v4 + 3, (const std::string *)(v3 + 72));
    return a1;
  }
  *a1 = 0;
  if (!v4) {
    return a1;
  }
  sub_4F48F0((uint64_t)a1, (uint64_t)v4);
  return a1;
}

void sub_5307CC()
{
}

std::string **sub_5307F0(std::string **a1, const std::string **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    std::string::operator=(*a1, *a2);
    std::string::operator=(v4 + 1, v3 + 1);
    return a1;
  }
  else
  {
    sub_53151C((uint64_t *)a1);
    return a1;
  }
}

void sub_53093C()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
  operator delete();
}

uint64_t *sub_530978(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    *(_DWORD *)uint64_t v4 = *(_DWORD *)v3;
    if (v4 != v3) {
      sub_531608((void *)(v4 + 8), *(char **)(v3 + 8), *(char **)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
    }
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 32);
    *(unsigned char *)(v4 + 40) = *(unsigned char *)(v3 + 40);
    return a1;
  }
  else
  {
    sub_5315A0(a1);
    return a1;
  }
}

void sub_530AE8()
{
  int v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

std::string **sub_530B1C(std::string **a1, const std::string **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    if (v3[1].__r_.__value_.__s.__data_[0])
    {
      if (v4[1].__r_.__value_.__s.__data_[0])
      {
        std::string::operator=(*a1, *a2);
      }
      else
      {
        if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(*a1, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v5 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
          v4->__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
        }
        v4[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    else if (v4[1].__r_.__value_.__s.__data_[0])
    {
      if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v4->__r_.__value_.__l.__data_);
      }
      v4[1].__r_.__value_.__s.__data_[0] = 0;
    }
    LOWORD(v4[1].__r_.__value_.__r.__words[1]) = v3[1].__r_.__value_.__r.__words[1];
    return a1;
  }
  else
  {
    sub_531758((uint64_t *)a1);
    return a1;
  }
}

void ***sub_530CA0(void ***a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      operator new();
    }
    if (v4 != (void **)v3) {
      sub_53185C((uint64_t *)v4, *v3, v3[1], 0xCF3CF3CF3CF3CF3DLL * ((v3[1] - *v3) >> 3));
    }
    return a1;
  }
  else
  {
    sub_5317CC(a1);
    return a1;
  }
}

void sub_530DE4()
{
}

uint64_t *sub_530E08(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_530E70(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_530ED8(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 9) < 0) {
            operator delete(*((void **)v10 - 4));
          }
          v10 -= 40;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_46;
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= a4) {
      uint64_t v22 = a4;
    }
    unint64_t v23 = v21 >= 0x333333333333333 ? 0x666666666666666 : v22;
    if (v23 > 0x666666666666666) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v24 = 5 * v23;
    uint64_t v20 = (void **)operator new(40 * v23);
    *a1 = v20;
    a1[1] = v20;
    a1[2] = &v20[v24];
    if (v6 != a3)
    {
      unint64_t v25 = 0;
      do
      {
        uint64_t v26 = v6 + v25;
        LODWORD(v20[v25 / 8]) = *(_DWORD *)(v6 + v25);
        char v27 = (char *)&v20[v25 / 8 + 1];
        char v28 = (void **)(v6 + v25 + 8);
        if (*(char *)(v6 + v25 + 31) < 0)
        {
          sub_4200(v27, *v28, *(void *)(v26 + 16));
        }
        else
        {
          *(_OWORD *)char v27 = *(_OWORD *)v28;
          v20[v25 / 8 + 3] = *(void **)(v6 + v25 + 24);
        }
        LOBYTE(v20[v25 / 8 + 4]) = *(unsigned char *)(v26 + 32);
        v25 += 40;
      }
      while (v26 + 40 != a3);
      uint64_t v20 = (void **)((char *)v20 + v25);
    }
LABEL_38:
    a1[1] = v20;
    return;
  }
  uint64_t v12 = (void **)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v20 = (void **)*a1;
    }
    else
    {
      uint64_t v20 = (void **)*a1;
      do
      {
        *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
        std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
        v9[32] = *(unsigned char *)(v6 + 32);
        v20 += 5;
        v6 += 40;
        v9 += 40;
      }
      while (v6 != a3);
      uint64_t v12 = (void **)a1[1];
    }
    while (v12 != v20)
    {
      if (*((char *)v12 - 9) < 0) {
        operator delete(*(v12 - 4));
      }
      v12 -= 5;
    }
    goto LABEL_38;
  }
  uint64_t v13 = a2 + 8 * (((char *)v12 - v9) >> 3);
  if (v12 != (void **)v9)
  {
    do
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
      std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
      v9[32] = *(unsigned char *)(v6 + 32);
      v6 += 40;
      v9 += 40;
    }
    while (v6 != v13);
    uint64_t v9 = (char *)a1[1];
  }
  uint64_t v14 = v9;
  if (v13 != a3)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v17 = v13 + v15;
      *(_DWORD *)&v9[v15] = *(_DWORD *)(v13 + v15);
      uint64_t v18 = &v9[v15 + 8];
      unint64_t v19 = (void **)(v13 + v15 + 8);
      if (*(char *)(v13 + v15 + 31) < 0)
      {
        sub_4200(v18, *v19, *(void *)(v17 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)v19;
        *(void *)&v9[v15 + 24] = *(void *)(v13 + v15 + 24);
        *(_OWORD *)uint64_t v18 = v16;
      }
      v9[v15 + 32] = *(unsigned char *)(v17 + 32);
      v15 += 40;
    }
    while (v17 + 40 != a3);
    uint64_t v14 = &v9[v15];
  }
  a1[1] = v14;
}

void sub_5311EC(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 40)
  {
    if (*(char *)(v2 + v3 - 9) < 0) {
      operator delete(*(void **)(v2 + v3 - 32));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_531220(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 5)
  {
    uint64_t v12 = *(std::string **)(a1 + 8);
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          uint64_t v20 = (std::string *)((char *)v20 + 32);
          uint64_t v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != a3);
        uint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (v12[-1].__r_.__value_.__s.__data_[15] < 0) {
          operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
        }
        uint64_t v12 = (std::string *)((char *)v12 - 32);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v14 = (std::string *)((char *)__str + 32 * v13);
      if (v12 != v9)
      {
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          uint64_t v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v14 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v18 = (char *)v9 + v16;
          unint64_t v19 = (char *)v14 + v16;
          if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            *((void *)v18 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v18 = v17;
          }
          v9[1].__r_.__value_.__s.__data_[v16] = v14[1].__r_.__value_.__s.__data_[v16];
          v16 += 32;
        }
        while ((std::string *)((char *)v14 + v16) != a3);
        uint64_t v15 = (std::string *)((char *)v9 + v16);
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      uint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        uint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_46;
    }
    uint64_t v21 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v21 = __sz;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v24 = 32 * v23;
    unint64_t v25 = operator new(32 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        char v27 = &v25[v26];
        char v28 = (char *)v6 + v26;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v26 / 8 + 2]) < 0)
        {
          sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
        }
        else
        {
          *(_OWORD *)char v27 = *(_OWORD *)v28;
          *((void *)v27 + 2) = *((void *)v28 + 2);
        }
        v25[v26 + 24] = v6[1].__r_.__value_.__s.__data_[v26];
        v26 += 32;
      }
      while ((std::string *)((char *)v6 + v26) != a3);
      v25 += v26;
    }
    *(void *)(a1 + 8) = v25;
  }
}

uint64_t *sub_53151C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)v1);
LABEL_4:
    operator delete();
  }
  return result;
}

uint64_t *sub_5315A0(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_531608(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  std::string::value_type v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *std::string::value_type v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    *std::string::value_type v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 1);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 1;
    uint64_t v20 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 1);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 1;
    uint64_t v20 = v9;
    long long __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

uint64_t *sub_531758(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(unsigned char *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      *(unsigned char *)(v1 + 24) = 0;
    }
    operator delete();
  }
  return result;
}

void ***sub_5317CC(void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v3 = (uint64_t)v1[1];
      uint64_t v4 = *v1;
      if ((void *)v3 != v2)
      {
        do
          uint64_t v3 = sub_4D4B58(v3 - 168);
        while ((void *)v3 != v2);
        uint64_t v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_53185C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = (_DWORD *)*a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((result - (uint64_t)v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        BOOL v22 = v9;
      }
      else
      {
        BOOL v22 = v9;
        do
        {
          sub_52FD00((int)v9);
          v9[40] = *(_DWORD *)(v6 + 160);
          v22 += 42;
          v6 += 168;
          v9 += 42;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while ((_DWORD *)result != v22)
        uint64_t result = sub_4D4B58(result - 168);
      a1[1] = (uint64_t)v22;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - (uint64_t)v9) >> 3);
      if ((_DWORD *)result != v9)
      {
        do
        {
          uint64_t result = sub_52FD00((int)v9);
          v9[40] = *(_DWORD *)(v6 + 160);
          v6 += 168;
          v9 += 42;
        }
        while (v6 != v19);
        uint64_t v9 = (_DWORD *)a1[1];
      }
      uint64_t v20 = v9;
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t result = sub_4F58AC((uint64_t)&v9[v21], v19 + v21 * 4);
          *(_DWORD *)(result + 160) = *(_DWORD *)(v19 + v21 * 4 + 160);
          v21 += 42;
        }
        while (v19 + v21 * 4 != a3);
        uint64_t v20 = &v9[v21];
      }
      a1[1] = (uint64_t)v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      BOOL v11 = v9;
      if ((_DWORD *)v10 != v9)
      {
        do
          uint64_t v10 = sub_4D4B58(v10 - 168);
        while ((_DWORD *)v10 != v9);
        BOOL v11 = (void *)*a1;
      }
      a1[1] = (uint64_t)v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x186186186186186) {
      goto LABEL_36;
    }
    unint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v13;
    if (v14 > 0x186186186186186) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v15 = 168 * v14;
    uint64_t result = (uint64_t)operator new(168 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_4F58AC(v17 + v18, v6 + v18);
        *(_DWORD *)(result + 160) = *(_DWORD *)(v6 + v18 + 160);
        v18 += 168;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_531B24(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 5)
  {
    unint64_t v12 = *(std::string **)(a1 + 8);
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          uint64_t v20 = (std::string *)((char *)v20 + 32);
          uint64_t v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != a3);
        unint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (v12[-1].__r_.__value_.__s.__data_[15] < 0) {
          operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
        }
        unint64_t v12 = (std::string *)((char *)v12 - 32);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      unint64_t v14 = (std::string *)((char *)__str + 32 * v13);
      if (v12 != v9)
      {
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          uint64_t v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v14 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v18 = (char *)v9 + v16;
          uint64_t v19 = (char *)v14 + v16;
          if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            *((void *)v18 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v18 = v17;
          }
          v9[1].__r_.__value_.__s.__data_[v16] = v14[1].__r_.__value_.__s.__data_[v16];
          v16 += 32;
        }
        while ((std::string *)((char *)v14 + v16) != a3);
        uint64_t v15 = (std::string *)((char *)v9 + v16);
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      BOOL v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        BOOL v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_46;
    }
    uint64_t v21 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v21 = __sz;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v24 = 32 * v23;
    unint64_t v25 = operator new(32 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        char v27 = &v25[v26];
        char v28 = (char *)v6 + v26;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v26 / 8 + 2]) < 0)
        {
          sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
        }
        else
        {
          *(_OWORD *)char v27 = *(_OWORD *)v28;
          *((void *)v27 + 2) = *((void *)v28 + 2);
        }
        v25[v26 + 24] = v6[1].__r_.__value_.__s.__data_[v26];
        v26 += 32;
      }
      while ((std::string *)((char *)v6 + v26) != a3);
      v25 += v26;
    }
    *(void *)(a1 + 8) = v25;
  }
}

uint64_t sub_531E24(uint64_t a1)
{
  *(void *)a1 = off_2439D28;
  uint64_t v2 = (uint64_t *)(a1 + 1976);
  if (*(void *)(a1 + 2032))
  {
    sub_52F808((uint64_t *)(a1 + 2032));
    operator delete(*(void **)(a1 + 2032));
  }
  if (*v2)
  {
    sub_52F8B0((uint64_t)v2, *v2);
    operator delete((void *)*v2);
  }
  uint64_t v3 = *(void **)(a1 + 1776);
  if (v3)
  {
    *(void *)(a1 + 1784) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1752);
  if (v4)
  {
    *(void *)(a1 + 1760) = v4;
    operator delete(v4);
  }
  sub_52F970(a1 + 1008);
  if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 960);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 984));
  uint64_t v5 = *(void *)(a1 + 960);
  if (v5)
  {
LABEL_11:
    sub_52FA20(a1 + 960, v5);
    operator delete(*(void **)(a1 + 960));
  }
LABEL_12:
  uint64_t v6 = *(void *)(a1 + 936);
  if (v6)
  {
    sub_52FA20(a1 + 936, v6);
    operator delete(*(void **)(a1 + 936));
  }
  uint64_t v7 = *(void *)(a1 + 912);
  if (v7)
  {
    sub_52FA20(a1 + 912, v7);
    operator delete(*(void **)(a1 + 912));
  }
  if (*(char *)(a1 + 911) < 0)
  {
    operator delete(*(void **)(a1 + 888));
    if ((*(char *)(a1 + 879) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 855) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_55;
    }
  }
  else if ((*(char *)(a1 + 879) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)(a1 + 856));
  if ((*(char *)(a1 + 855) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(a1 + 815) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(*(void **)(a1 + 832));
  if ((*(char *)(a1 + 815) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 783) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(*(void **)(a1 + 792));
  if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(a1 + 759) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 727) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(*(void **)(a1 + 736));
  if ((*(char *)(a1 + 727) & 0x80000000) == 0)
  {
LABEL_23:
    if ((*(char *)(a1 + 703) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 704));
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 663) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(*(void **)(a1 + 680));
  if ((*(char *)(a1 + 663) & 0x80000000) == 0)
  {
LABEL_25:
    if ((*(char *)(a1 + 631) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(*(void **)(a1 + 640));
  if ((*(char *)(a1 + 631) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 607) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(*(void **)(a1 + 608));
  if ((*(char *)(a1 + 607) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(*(void **)(a1 + 584));
  if ((*(char *)(a1 + 575) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(a1 + 552));
  if ((*(char *)(a1 + 551) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 511) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(*(void **)(a1 + 528));
  if ((*(char *)(a1 + 511) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(a1 + 488));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_31:
    if ((*(char *)(a1 + 455) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete(*(void **)(a1 + 456));
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 432));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_33:
    if ((*(char *)(a1 + 399) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)(a1 + 400));
  if ((*(char *)(a1 + 399) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 376));
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
LABEL_35:
    if ((*(char *)(a1 + 327) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 336));
  if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 303) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 304));
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
LABEL_37:
    if ((*(char *)(a1 + 271) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 280));
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
LABEL_38:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_39:
    if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
LABEL_40:
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_77:
    operator delete(*(void **)(a1 + 152));
    uint64_t v8 = *(void **)(a1 + 120);
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    goto LABEL_77;
  }
LABEL_41:
  uint64_t v8 = *(void **)(a1 + 120);
  if (!v8) {
    goto LABEL_43;
  }
  do
  {
LABEL_42:
    uint64_t v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    uint64_t v8 = v9;
  }
  while (v9);
LABEL_43:
  uint64_t v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    unint64_t v13 = *(void **)(a1 + 80);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      unint64_t v13 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v11;
    operator delete(v13);
  }
  unint64_t v14 = *(void **)(a1 + 48);
  if (v14)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void **)(a1 + 8);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 24;
      }
      while (v18 != v17);
      uint64_t v19 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v17;
    operator delete(v19);
  }
  return a1;
}

void sub_532290(uint64_t a1)
{
  sub_531E24(a1);

  operator delete();
}

uint64_t sub_5322CC(uint64_t a1)
{
  *(void *)a1 = off_2439E58;
  uint64_t v2 = (uint64_t *)(a1 + 1976);
  if (*(void *)(a1 + 2032))
  {
    sub_52F808((uint64_t *)(a1 + 2032));
    operator delete(*(void **)(a1 + 2032));
  }
  if (*v2)
  {
    sub_52F8B0((uint64_t)v2, *v2);
    operator delete((void *)*v2);
  }
  uint64_t v3 = *(void **)(a1 + 1776);
  if (v3)
  {
    *(void *)(a1 + 1784) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1752);
  if (v4)
  {
    *(void *)(a1 + 1760) = v4;
    operator delete(v4);
  }
  sub_52F970(a1 + 1008);
  if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 960);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 984));
  uint64_t v5 = *(void *)(a1 + 960);
  if (v5)
  {
LABEL_11:
    sub_52FA20(a1 + 960, v5);
    operator delete(*(void **)(a1 + 960));
  }
LABEL_12:
  uint64_t v6 = *(void *)(a1 + 936);
  if (v6)
  {
    sub_52FA20(a1 + 936, v6);
    operator delete(*(void **)(a1 + 936));
  }
  uint64_t v7 = *(void *)(a1 + 912);
  if (v7)
  {
    sub_52FA20(a1 + 912, v7);
    operator delete(*(void **)(a1 + 912));
  }
  if (*(char *)(a1 + 911) < 0)
  {
    operator delete(*(void **)(a1 + 888));
    if ((*(char *)(a1 + 879) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 855) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_55;
    }
  }
  else if ((*(char *)(a1 + 879) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)(a1 + 856));
  if ((*(char *)(a1 + 855) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(a1 + 815) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(*(void **)(a1 + 832));
  if ((*(char *)(a1 + 815) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 783) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(*(void **)(a1 + 792));
  if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(a1 + 759) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 727) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(*(void **)(a1 + 736));
  if ((*(char *)(a1 + 727) & 0x80000000) == 0)
  {
LABEL_23:
    if ((*(char *)(a1 + 703) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 704));
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 663) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(*(void **)(a1 + 680));
  if ((*(char *)(a1 + 663) & 0x80000000) == 0)
  {
LABEL_25:
    if ((*(char *)(a1 + 631) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(*(void **)(a1 + 640));
  if ((*(char *)(a1 + 631) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 607) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(*(void **)(a1 + 608));
  if ((*(char *)(a1 + 607) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(*(void **)(a1 + 584));
  if ((*(char *)(a1 + 575) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(a1 + 552));
  if ((*(char *)(a1 + 551) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 511) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(*(void **)(a1 + 528));
  if ((*(char *)(a1 + 511) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(a1 + 488));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_31:
    if ((*(char *)(a1 + 455) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete(*(void **)(a1 + 456));
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 432));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_33:
    if ((*(char *)(a1 + 399) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)(a1 + 400));
  if ((*(char *)(a1 + 399) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 376));
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
LABEL_35:
    if ((*(char *)(a1 + 327) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 336));
  if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 303) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 304));
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
LABEL_37:
    if ((*(char *)(a1 + 271) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 280));
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
LABEL_38:
    if ((*(char *)(a1 + 247) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_39:
    if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
LABEL_40:
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_77:
    operator delete(*(void **)(a1 + 152));
    uint64_t v8 = *(void **)(a1 + 120);
    if (!v8) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    goto LABEL_77;
  }
LABEL_41:
  uint64_t v8 = *(void **)(a1 + 120);
  if (!v8) {
    goto LABEL_43;
  }
  do
  {
LABEL_42:
    uint64_t v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    uint64_t v8 = v9;
  }
  while (v9);
LABEL_43:
  uint64_t v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    unint64_t v13 = *(void **)(a1 + 80);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      unint64_t v13 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v11;
    operator delete(v13);
  }
  unint64_t v14 = *(void **)(a1 + 48);
  if (v14)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void **)(a1 + 8);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 24;
      }
      while (v18 != v17);
      uint64_t v19 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v17;
    operator delete(v19);
  }
  return a1;
}

void sub_532738(uint64_t a1)
{
  sub_5322CC(a1);

  operator delete();
}

uint64_t sub_532770(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 9767);
  *(void *)a1 = off_2439A88;
  if (*(char *)(a1 + 11527) < 0)
  {
    operator delete(*(void **)(a1 + 11504));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_7:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_10:
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 11440);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_16:
  sub_4BCED0(a1 + 9880);
  if (*v2 < 0)
  {
    operator delete(*(void **)(a1 + 9744));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_22:
  sub_4F2894(a1 + 5640);
  sub_4BCED0(a1 + 4088);
  if (*(char *)(a1 + 3975) < 0)
  {
    operator delete(*(void **)(a1 + 3952));
    if ((*(char *)(a1 + 1935) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 1912));
  return a1;
}

uint64_t sub_5329D4(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 9767);
  *(void *)a1 = off_2439AC8;
  if (*(char *)(a1 + 11527) < 0)
  {
    operator delete(*(void **)(a1 + 11504));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_7:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_10:
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 11440);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_16:
  sub_4BCED0(a1 + 9880);
  if (*v2 < 0)
  {
    operator delete(*(void **)(a1 + 9744));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_22:
  sub_4F2894(a1 + 5640);
  sub_4BCED0(a1 + 4088);
  if (*(char *)(a1 + 3975) < 0)
  {
    operator delete(*(void **)(a1 + 3952));
    if ((*(char *)(a1 + 1935) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 1912));
  return a1;
}

uint64_t sub_532C38(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 9767);
  *(void *)a1 = off_2439B08;
  if (*(char *)(a1 + 11527) < 0)
  {
    operator delete(*(void **)(a1 + 11504));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 11472);
    if (!v3)
    {
LABEL_6:
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 11456);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_7:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_10:
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 11440);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 11424);
    if (!v6) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_16:
  sub_4BCED0(a1 + 9880);
  if (*v2 < 0)
  {
    operator delete(*(void **)(a1 + 9744));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 7824);
    if (!v7) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_22:
  sub_4F2894(a1 + 5640);
  sub_4BCED0(a1 + 4088);
  if (*(char *)(a1 + 3975) < 0)
  {
    operator delete(*(void **)(a1 + 3952));
    if ((*(char *)(a1 + 1935) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 1912));
  return a1;
}

void *sub_532E9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_4BF0D4(a1 + 24, (long long **)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = (void *)*v13;
      if (*v13)
      {
        long long v41 = a3;
        int v42 = v7;
        uint64_t v43 = *(long long **)a2;
        uint64_t v15 = *(void *)(a2 + 8) - *(void *)a2;
        while (1)
        {
          unint64_t v16 = v14[1];
          if (v16 == v9)
          {
            uint64_t v18 = v14[2];
            uint64_t v17 = v14[3];
            if (v17 - v18 == v15)
            {
              if (v18 == v17) {
                return v14;
              }
              for (uint64_t i = v43; ; uint64_t i = (long long *)((char *)i + 24))
              {
                uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
                if ((v20 & 0x80u) == 0) {
                  uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
                }
                else {
                  uint64_t v21 = *(void *)(v18 + 8);
                }
                uint64_t v22 = *((unsigned __int8 *)i + 23);
                int v23 = (char)v22;
                if ((v22 & 0x80u) != 0) {
                  uint64_t v22 = *((void *)i + 1);
                }
                if (v21 != v22) {
                  break;
                }
                if (v23 >= 0) {
                  uint64_t v24 = i;
                }
                else {
                  uint64_t v24 = *(long long **)i;
                }
                if ((v20 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v18, v24, *(void *)(v18 + 8))) {
                    break;
                  }
                }
                else if (*(unsigned char *)(v18 + 23))
                {
                  uint64_t v25 = 0;
                  while (*(unsigned __int8 *)(v18 + v25) == *((unsigned __int8 *)v24 + v25))
                  {
                    if (v20 == ++v25) {
                      goto LABEL_21;
                    }
                  }
                  break;
                }
LABEL_21:
                v18 += 24;
                if (v18 == v17) {
                  return v14;
                }
              }
            }
          }
          else
          {
            if (v12 <= 1)
            {
              v16 &= v10 - 1;
            }
            else if (v16 >= v10)
            {
              v16 %= v10;
            }
            if (v16 != v3)
            {
LABEL_37:
              a3 = v41;
              uint64_t v7 = v42;
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_37;
          }
        }
      }
    }
  }
  unint64_t v44 = operator new(0x28uLL);
  *(void *)unint64_t v44 = 0;
  *((void *)v44 + 1) = v9;
  *((void *)v44 + 3) = 0;
  *((void *)v44 + 4) = 0;
  *((void *)v44 + 2) = 0;
  sub_8A6F8((char *)v44 + 16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v10 || (float)(v27 * (float)v10) < v26)
  {
    BOOL v30 = 1;
    if (v10 >= 3) {
      BOOL v30 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v10);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_52:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v38 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        char v28 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        char v29 = v44;
        if (v28) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v3 = v9;
        char v28 = *(void **)(*(void *)a1 + 8 * v9);
        char v29 = v44;
        if (v28) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v9;
      char v28 = *(void **)(*(void *)a1 + 8 * (v38 & v9));
      char v29 = v44;
      if (v28) {
        goto LABEL_41;
      }
    }
LABEL_66:
    void *v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44)
    {
      unint64_t v39 = *(void *)(*(void *)v44 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v39 >= v10) {
          v39 %= v10;
        }
      }
      else
      {
        v39 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v44;
    }
    goto LABEL_77;
  }
  char v28 = *(void **)(*(void *)a1 + 8 * v3);
  char v29 = v44;
  if (!v28) {
    goto LABEL_66;
  }
LABEL_41:
  void *v29 = *v28;
  void *v28 = v44;
LABEL_77:
  unint64_t v14 = v44;
  ++*v7;
  return v14;
}

void sub_533290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_5332B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5332A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_5332B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5332B8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[2];
      if (v3)
      {
        uint64_t v4 = v2[3];
        uint64_t v5 = (void *)v2[2];
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0) {
              operator delete(*(void **)(v4 - 24));
            }
            v4 -= 24;
          }
          while (v4 != v3);
          uint64_t v5 = (void *)v2[2];
        }
        v2[3] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_533348(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4, uint64_t a5, _DWORD **a6)
{
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    while (((**a6 >> *(unsigned char *)v10) & 1) == 0)
    {
LABEL_3:
      v10 += 48;
      if (v10 == a2) {
        return a3;
      }
    }
    if (*(char *)(v10 + 47) < 0)
    {
      sub_4200(__p, *(void **)(v10 + 24), *(void *)(v10 + 32));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v10 + 24);
      uint64_t v20 = *(void *)(v10 + 40);
    }
    uint8x8_t v11 = sub_5334DC(a3, a4, &v22, &v21, (const void **)__p);
    uint64_t v12 = *v11;
    if (*v11)
    {
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13)
      {
        do
        {
LABEL_16:
          a4 = *(uint64_t **)(v12 + 16);
          BOOL v17 = *a4 == v12;
          uint64_t v12 = (uint64_t)a4;
        }
        while (!v17);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)operator new(0x38uLL);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)__p;
      *(void *)(v12 + 48) = v20;
      __p[1] = 0;
      uint64_t v20 = 0;
      __p[0] = 0;
      unint64_t v14 = v22;
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = v14;
      uint64_t *v11 = v12;
      uint64_t v15 = (uint64_t *)**a3;
      unint64_t v16 = (uint64_t *)v12;
      if (v15)
      {
        *a3 = v15;
        unint64_t v16 = (uint64_t *)*v11;
      }
      sub_2F250(a3[1], v16);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13) {
        goto LABEL_16;
      }
    }
    do
    {
      a4 = v13;
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_18:
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_3;
  }
  return a3;
}

void sub_5334C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_5334DC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  unint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_20;
  }
  int v10 = *((char *)a2 + 55);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v14 = a2[5];
  }
  if (v10 >= 0) {
    uint64_t v15 = a2 + 4;
  }
  else {
    uint64_t v15 = (const void *)a2[4];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
LABEL_20:
    uint64_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      uint64_t v20 = (uint64_t *)*a2;
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      float v26 = a2;
      do
      {
        uint64_t v21 = (uint64_t *)v26[2];
        BOOL v27 = *v21 == (void)v26;
        float v26 = v21;
      }
      while (v27);
    }
    int v28 = *((char *)a5 + 23);
    int v29 = *((char *)v21 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      size_t v30 = v21[5];
    }
    if (v29 >= 0) {
      unint64_t v31 = v21 + 4;
    }
    else {
      unint64_t v31 = (const void *)v21[4];
    }
    if (v28 >= 0) {
      size_t v32 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v32 = (size_t)a5[1];
    }
    if (v28 >= 0) {
      uint64_t v33 = a5;
    }
    else {
      uint64_t v33 = *a5;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36) {
      goto LABEL_53;
    }
    uint64_t v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          unint64_t v38 = (uint64_t **)v37;
          long long v41 = (const void *)v37[4];
          unint64_t v39 = v37 + 4;
          long long v40 = v41;
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = v39[1];
          }
          if (v42 >= 0) {
            unint64_t v44 = v39;
          }
          else {
            unint64_t v44 = v40;
          }
          if (v43 >= v32) {
            size_t v45 = v32;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v33, v44, v45);
          BOOL v47 = v32 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (!v47) {
            break;
          }
          uint64_t v37 = *v38;
          unint64_t v8 = v38;
          if (!*v38) {
            goto LABEL_74;
          }
        }
        int v48 = memcmp(v44, v33, v45);
        BOOL v49 = v43 < v32;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          break;
        }
        unint64_t v8 = v38 + 1;
        uint64_t v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      unint64_t v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  int v22 = memcmp(v15, v13, v16);
  BOOL v23 = v14 < v12;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    uint64_t v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      uint64_t v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    int v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      BOOL v27 = *a4 == v50;
      int v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    int v51 = *((char *)a4 + 55);
    if (v51 >= 0) {
      size_t v52 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v52 = (size_t)a4[5];
    }
    if (v51 >= 0) {
      int v53 = (uint64_t *)(a4 + 4);
    }
    else {
      int v53 = a4[4];
    }
    if (v52 >= v12) {
      size_t v54 = v12;
    }
    else {
      size_t v54 = v52;
    }
    int v55 = memcmp(v13, v53, v54);
    BOOL v56 = v12 < v52;
    if (v55) {
      BOOL v56 = v55 < 0;
    }
    if (!v56)
    {
      uint64_t v57 = *v8;
      if (*v8)
      {
        uint64_t v58 = a3;
        do
        {
          while (1)
          {
            int v59 = (uint64_t **)v57;
            int v62 = (const void *)v57[4];
            int v60 = v57 + 4;
            int v61 = v62;
            int v63 = *((char *)v60 + 23);
            if (v63 >= 0) {
              size_t v64 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              size_t v64 = v60[1];
            }
            if (v63 >= 0) {
              int v65 = v60;
            }
            else {
              int v65 = v61;
            }
            if (v64 >= v12) {
              size_t v66 = v12;
            }
            else {
              size_t v66 = v64;
            }
            int v67 = memcmp(v13, v65, v66);
            BOOL v68 = v12 < v64;
            if (v67) {
              BOOL v68 = v67 < 0;
            }
            if (!v68) {
              break;
            }
            uint64_t v57 = *v59;
            unint64_t v8 = v59;
            if (!*v59) {
              goto LABEL_119;
            }
          }
          int v69 = memcmp(v65, v13, v66);
          BOOL v70 = v64 < v12;
          if (v69) {
            BOOL v70 = v69 < 0;
          }
          if (!v70) {
            break;
          }
          unint64_t v8 = v59 + 1;
          uint64_t v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        int v59 = v8;
        uint64_t v58 = a3;
      }
LABEL_119:
      *uint64_t v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t **sub_5338D8(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4, uint64_t a5, _DWORD **a6)
{
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    while (((**a6 >> *(unsigned char *)v10) & 1) == 0)
    {
LABEL_3:
      v10 += 48;
      if (v10 == a2) {
        return a3;
      }
    }
    if (*(char *)(v10 + 47) < 0)
    {
      sub_4200(__p, *(void **)(v10 + 24), *(void *)(v10 + 32));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v10 + 24);
      uint64_t v20 = *(void *)(v10 + 40);
    }
    int v11 = sub_5334DC(a3, a4, &v22, &v21, (const void **)__p);
    uint64_t v12 = *v11;
    if (*v11)
    {
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13)
      {
        do
        {
LABEL_16:
          a4 = *(uint64_t **)(v12 + 16);
          BOOL v17 = *a4 == v12;
          uint64_t v12 = (uint64_t)a4;
        }
        while (!v17);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)operator new(0x38uLL);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)__p;
      *(void *)(v12 + 48) = v20;
      __p[1] = 0;
      uint64_t v20 = 0;
      __p[0] = 0;
      size_t v14 = v22;
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = v14;
      uint64_t *v11 = v12;
      uint64_t v15 = (uint64_t *)**a3;
      size_t v16 = (uint64_t *)v12;
      if (v15)
      {
        *a3 = v15;
        size_t v16 = (uint64_t *)*v11;
      }
      sub_2F250(a3[1], v16);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13) {
        goto LABEL_16;
      }
    }
    do
    {
      a4 = v13;
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_18:
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_3;
  }
  return a3;
}

void sub_533A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_533A6C(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4, uint64_t a5, _DWORD **a6)
{
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    while (((**a6 >> *(unsigned char *)v10) & 1) == 0)
    {
LABEL_3:
      v10 += 48;
      if (v10 == a2) {
        return a3;
      }
    }
    if (*(char *)(v10 + 47) < 0)
    {
      sub_4200(__p, *(void **)(v10 + 24), *(void *)(v10 + 32));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v10 + 24);
      uint64_t v20 = *(void *)(v10 + 40);
    }
    int v11 = sub_5334DC(a3, a4, &v22, &v21, (const void **)__p);
    uint64_t v12 = *v11;
    if (*v11)
    {
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13)
      {
        do
        {
LABEL_16:
          a4 = *(uint64_t **)(v12 + 16);
          BOOL v17 = *a4 == v12;
          uint64_t v12 = (uint64_t)a4;
        }
        while (!v17);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)operator new(0x38uLL);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)__p;
      *(void *)(v12 + 48) = v20;
      __p[1] = 0;
      uint64_t v20 = 0;
      __p[0] = 0;
      size_t v14 = v22;
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = v14;
      uint64_t *v11 = v12;
      uint64_t v15 = (uint64_t *)**a3;
      size_t v16 = (uint64_t *)v12;
      if (v15)
      {
        *a3 = v15;
        size_t v16 = (uint64_t *)*v11;
      }
      sub_2F250(a3[1], v16);
      a3[2] = (uint64_t *)((char *)a3[2] + 1);
      unint64_t v13 = *(uint64_t **)(v12 + 8);
      if (!v13) {
        goto LABEL_16;
      }
    }
    do
    {
      a4 = v13;
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_18:
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_3;
  }
  return a3;
}

void sub_533BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_533C00()
{
  byte_2564C97 = 1;
  word_2564C80 = 65;
  byte_2564CAF = 1;
  word_2564C98 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)int v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_2568AF8 = 0u;
  *(_OWORD *)&qword_2568B08 = 0u;
  dword_2568B18 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2568AF8, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2568AF8, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_2568AF8, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_2568AF8, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_2564CC7 = 8;
  strcpy((char *)&qword_2564CB0, "any_mode");
  byte_2564CDF = 7;
  strcpy((char *)&dword_2564CC8, "cycling");
  byte_2564CF7 = 7;
  strcpy((char *)&dword_2564CE0, "driving");
  byte_2564D0F = 7;
  strcpy((char *)&dword_2564CF8, "walking");
  qword_2564D18 = 0;
  qword_2564D20 = 0;
  qword_2564D10 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2564D10 = (uint64_t)v0;
  qword_2564D18 = (uint64_t)(v0 + 9);
  qword_2564D20 = (uint64_t)(v0 + 9);
  qword_2564D28 = 0;
  qword_2564D30 = 0;
  qword_2564D38 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2564D28 = (uint64_t)v1;
  qword_2564D30 = (uint64_t)(v1 + 9);
  strcpy(&byte_2564D57, "\n\x1B\\toi=orth\\"");
  qword_2564D38 = (uint64_t)(v1 + 9);
  strcpy(byte_2564D40, "\x1B\\toi=lhp\\"");
  byte_2564D6F = 11;
  qword_2564D70 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_2564D78 = xmmword_20B9250;
  strcpy(qword_2564D70, "\x1B\\toi=x-sampa-internal\\"");
  byte_2564D9F = 13;
  strcpy((char *)&qword_2564D88, "\x1B\\tn=address\\"");
  strcpy(&byte_2564DB7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2564DA0, "\x1B\\tn=nav\\"");
  byte_2564DCF = 12;
  byte_2564DE7 = 7;
  strcpy((char *)&dword_2564DD0, "\x1B\\lang=");
  byte_2564DFF = 1;
  word_2564DE8 = 92;
  byte_2564E17 = 4;
  strcpy((char *)&qword_2564E00, "DEV:");
  byte_2564E2F = 8;
  strcpy((char *)&qword_2564E18, "Continue");
  byte_2564E47 = 11;
  strcpy((char *)&qword_2564E30, "Start_Route");
  byte_2564E5F = 14;
  strcpy((char *)&qword_2564E48, "Continue_Route");
  byte_2564E77 = 12;
  strcpy((char *)&qword_2564E60, "Resume_Route");
  byte_2564E8F = 18;
  strcpy((char *)&xmmword_2564E78, "Start_Route_U_Turn");
  byte_2564EA7 = 7;
  strcpy((char *)&dword_2564E90, "_U_Turn");
  qword_2564EB8 = 0x1300000000000000;
  qmemcpy(&unk_2564EC0, "Continue_Route", 14);
  qword_2564EA8 = *(void *)"Resume_Route";
  unk_2564EB0 = 0x545F555F6574756FLL;
  unk_2564EB7 = 1852994900;
  qword_2564ED0 = 0x1500000000000000;
  strcpy(byte_2564ED8, "Left_Turn");
  unk_2564ECE = 1415533919;
  *(_DWORD *)((char *)&qword_2564ED0 + 1) = 1852994900;
  strcpy(&byte_2564EEF, "\tRight_Turn");
  strcpy(&byte_2564F07, "\nLeft_Turn_At_End");
  byte_2564F1F = 16;
  byte_2564F37 = 17;
  strcpy((char *)&xmmword_2564F20, "Right_Turn_At_End");
  byte_2564F4F = 15;
  strcpy((char *)&qword_2564F38, "Sharp_Left_Turn");
  byte_2564F67 = 16;
  strcpy((char *)&xmmword_2564F50, "Sharp_Right_Turn");
  byte_2564F7F = 16;
  strcpy((char *)&xmmword_2564F68, "Slight_Left_Turn");
  byte_2564F97 = 17;
  strcpy((char *)&xmmword_2564F80, "Slight_Right_Turn");
  strcpy(&byte_2564FAF, "\tKeep_Right");
  strcpy((char *)&qword_2564F98, "Keep_Left");
  strcpy(&byte_2564FC7, "\nU_Turn");
  byte_2564FDF = 6;
  byte_2564FF7 = 14;
  strcpy((char *)&qword_2564FE0, "Walking_U_Turn");
  byte_256500F = 20;
  strcpy((char *)&xmmword_2564FF8, "U_Turn_When_Possible");
  byte_2565027 = 20;
  strcpy((char *)&xmmword_2565010, "U_Turn_At_Roundabout");
  byte_256503F = 11;
  strcpy((char *)&qword_2565028, "Enter_Ferry");
  strcpy(&byte_2565057, "\nChange_Ferry");
  strcpy((char *)&qword_2565040, "Exit_Ferry");
  byte_256506F = 12;
  byte_2565087 = 21;
  strcpy((char *)&xmmword_2565070, "Enter_Railway_Shuttle");
  byte_256509F = 20;
  strcpy((char *)&xmmword_2565088, "Exit_Railway_Shuttle");
  byte_25650B7 = 22;
  strcpy((char *)&xmmword_25650A0, "Change_Railway_Shuttle");
  byte_25650CF = 17;
  strcpy((char *)&xmmword_25650B8, "End_Of_Navigation");
  byte_25650E7 = 17;
  strcpy((char *)&xmmword_25650D0, "End_Of_Navigation");
  byte_25650FF = 11;
  strcpy((char *)&qword_25650E8, "Destination");
  byte_2565117 = 19;
  strcpy((char *)&xmmword_2565100, "Destination_On_left");
  byte_256512F = 20;
  strcpy((char *)&xmmword_2565118, "Destination_On_Right");
  strcpy(&byte_2565147, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2565130, "First_Stop");
  byte_256515F = 18;
  byte_2565177 = 19;
  strcpy((char *)&xmmword_2565160, "First_Stop_On_Right");
  strcpy(&byte_256518F, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2565178, "Next_Stop");
  byte_25651A7 = 17;
  byte_25651BF = 18;
  strcpy((char *)&xmmword_25651A8, "Next_Stop_On_Right");
  byte_25651D7 = 13;
  strcpy((char *)&qword_25651C0, "Waypoint_Stop");
  byte_25651EF = 21;
  strcpy((char *)&xmmword_25651D8, "Waypoint_Stop_On_Left");
  byte_2565207 = 22;
  strcpy((char *)&xmmword_25651F0, "Waypoint_Stop_On_Right");
  byte_256521F = 11;
  strcpy((char *)&qword_2565208, "Roundabout_");
  byte_2565237 = 16;
  strcpy((char *)&xmmword_2565220, "Enter_Roundabout");
  qword_2565238 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_2565240 = xmmword_20B91C0;
  strcpy((char *)qword_2565238, "Walking_Enter_Roundabout");
  byte_2565267 = 16;
  strcpy(byte_2565250, "Leave_Roundabout");
  byte_256527F = 21;
  strcpy((char *)&xmmword_2565268, "Roundabout_First_Exit");
  byte_2565297 = 22;
  strcpy(byte_2565280, "Roundabout_Second_Exit");
  byte_25652AF = 21;
  strcpy((char *)&xmmword_2565298, "Roundabout_Third_Exit");
  strcpy(byte_25652B0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25652C6) = 22;
  byte_25652DF = 21;
  strcpy((char *)&xmmword_25652C8, "Roundabout_Fifth_Exit");
  byte_25652F7 = 21;
  strcpy(byte_25652E0, "Roundabout_Sixth_Exit");
  qword_25652F8 = (uint64_t)operator new(0x19uLL);
  unk_2565300 = xmmword_20B9250;
  strcpy((char *)qword_25652F8, "Roundabout_Seventh_Exit");
  strcpy(byte_2565310, "Roundabout_Eighth_Exit");
  HIBYTE(word_2565326) = 22;
  byte_256533F = 21;
  strcpy((char *)&xmmword_2565328, "Roundabout_Ninth_Exit");
  byte_2565357 = 21;
  strcpy(byte_2565340, "Roundabout_Tenth_Exit");
  qword_2565358 = (uint64_t)operator new(0x20uLL);
  unk_2565360 = xmmword_20B91C0;
  strcpy((char *)qword_2565358, "Roundabout_Eleventh_Exit");
  qword_2565370 = (uint64_t)operator new(0x19uLL);
  unk_2565378 = xmmword_20B9250;
  strcpy((char *)qword_2565370, "Roundabout_Twelfth_Exit");
  qword_2565388 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  *(_OWORD *)algn_2565390 = xmmword_20B5EB0;
  strcpy((char *)qword_2565388, "Roundabout_Thirteenth_Exit");
  qword_25653A0 = (uint64_t)operator new(0x20uLL);
  unk_25653A8 = xmmword_20B5EB0;
  strcpy((char *)qword_25653A0, "Roundabout_Fourteenth_Exit");
  qword_25653B8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  unk_25653C0 = xmmword_20B8870;
  strcpy((char *)qword_25653B8, "Roundabout_Fifteenth_Exit");
  qword_25653D0 = (uint64_t)operator new(0x20uLL);
  unk_25653D8 = xmmword_20B8870;
  strcpy((char *)qword_25653D0, "Roundabout_Sixteenth_Exit");
  qword_25653E8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  *(_OWORD *)algn_25653F0 = xmmword_20B91A0;
  strcpy((char *)qword_25653E8, "Roundabout_Seventeenth_Exit");
  qword_2565400 = (uint64_t)operator new(0x20uLL);
  unk_2565408 = xmmword_20B5EB0;
  strcpy((char *)qword_2565400, "Roundabout_Eighteenth_Exit");
  qword_2565418 = (uint64_t)operator new(0x20uLL);
  unk_2565420 = xmmword_20B5EB0;
  strcpy((char *)qword_2565418, "Roundabout_Nineteenth_Exit");
  byte_2565447 = 8;
  strcpy((char *)&qword_2565430, "Off_Ramp");
  byte_256545F = 16;
  strcpy((char *)&xmmword_2565448, "Off_Ramp_On_Left");
  byte_2565477 = 17;
  strcpy(byte_2565460, "Off_Ramp_On_Right");
  byte_256548F = 14;
  strcpy((char *)&qword_2565478, "Change_Highway");
  strcpy(byte_2565490, "Change_Highway_On_Left");
  HIBYTE(word_25654A6) = 22;
  qword_25654A8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25654B0 = xmmword_20B9250;
  strcpy((char *)qword_25654A8, "Change_Highway_On_Right");
  byte_25654D7 = 5;
  strcpy((char *)&dword_25654C0, "Merge");
  byte_25654EF = 12;
  strcpy((char *)&qword_25654D8, "Enter_Detour");
  byte_2565507 = 11;
  strcpy((char *)&qword_25654F0, "Exit_Detour");
  byte_256551F = 18;
  strcpy((char *)&xmmword_2565508, "Walking_Turnaround");
  qword_2565520 = (uint64_t)operator new(0x19uLL);
  unk_2565528 = xmmword_20B9250;
  strcpy((char *)qword_2565520, "Walking_Turnaround_Sign");
  byte_256554F = 19;
  strcpy(byte_2565538, "Distance_Title_List");
  unk_2565550 = operator new(0x19uLL);
  unk_2565558 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_2565550, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_256557F = 19;
  strcpy(byte_2565568, "Arrival_Charge_List");
  byte_2565597 = 15;
  strcpy(byte_2565580, "Charge_At_Start");
  strcpy(&byte_25655AF, "\tPass_Street");
  strcpy(byte_2565598, "Pass_Exit");
  byte_25655C7 = 11;
  byte_25655DF = 17;
  strcpy(byte_25655C8, "Pass_Intersection");
  strcpy(&byte_25655F7, "\t_PrevExitNumber");
  strcpy(byte_25655E0, "Next_Exit");
  byte_256560F = 15;
  strcpy(&byte_2565627, "\t_PrevUTurn");
  strcpy(byte_2565610, "_PrevRoad");
  strcpy(&byte_256563F, "\nNext_");
  byte_2565657 = 5;
  byte_256566F = 15;
  strcpy(byte_2565658, "_At_Next_Street");
  byte_2565687 = 21;
  strcpy(byte_2565670, "_At_Next_Intersection");
  byte_256569F = 14;
  strcpy((char *)&qword_2565688, "Charge_Station");
  byte_25656B7 = 15;
  strcpy((char *)&qword_25656A0, "_Charge_Station");
  BYTE1(qword_25656C8) = 0;
  WORD1(qword_25656C8) = 25856;
  HIDWORD(qword_25656C8) = 335544320;
  strcpy((char *)&qword_25656B8, "_Charge_Station_");
  byte_25656E7 = 8;
  strcpy((char *)&qword_25656D0, "_Minimum");
  byte_25656FF = 15;
  strcpy((char *)&qword_25656E8, "ExitShield_Sign");
  byte_2565717 = 8;
  strcpy((char *)&qword_2565700, "Walking_");
  byte_256572F = 16;
  strcpy((char *)&xmmword_2565718, "Walking_Continue");
  byte_2565747 = 19;
  strcpy((char *)&xmmword_2565730, "Walking_Start_Route");
  qword_2565748 = (uint64_t)operator new(0x20uLL);
  unk_2565750 = xmmword_20B5EB0;
  strcpy((char *)qword_2565748, "Walking_Start_Route_U_Turn");
  byte_2565777 = 17;
  strcpy(byte_2565760, "Walking_Left_Turn");
  byte_256578F = 18;
  strcpy((char *)&xmmword_2565778, "Walking_Right_Turn");
  qword_2565790 = (uint64_t)operator new(0x20uLL);
  unk_2565798 = xmmword_20B5EB0;
  strcpy((char *)qword_2565790, "Walking_Turn_At_Roundabout");
  qword_25657A8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  *(_OWORD *)algn_25657B0 = xmmword_20B91B0;
  strcpy((char *)qword_25657A8, "Walking_U_Turn_When_Possible");
  qword_25657C0 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25657C8 = xmmword_20B9390;
  strcpy((char *)qword_25657C0, "Walking_Roundabout_Exit_Continue");
  qword_25657D8 = (uint64_t)operator new(0x20uLL);
  unk_25657E0 = xmmword_20B91B0;
  strcpy((char *)qword_25657D8, "Walking_Roundabout_Exit_Left");
  qword_25657F0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25657F8 = xmmword_20B8890;
  strcpy((char *)qword_25657F0, "Walking_Roundabout_Exit_Right");
  qword_2565808 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2565810 = xmmword_20B8870;
  strcpy((char *)qword_2565808, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v2 = (char *)operator new(0x20uLL);
  qword_2565820 = (uint64_t)v2;
  unk_2565828 = xmmword_20B8870;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v2 + 9) = v274;
  v2[25] = 0;
  byte_256584F = 8;
  strcpy((char *)&qword_2565838, "Walking_");
  qword_2565850 = (uint64_t)operator new(0x19uLL);
  unk_2565858 = v282;
  strcpy((char *)qword_2565850, "Walking_Sharp_Left_Turn");
  qword_2565868 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2565870 = v281;
  strcpy((char *)qword_2565868, "Walking_Sharp_Right_Turn");
  qword_2565880 = (uint64_t)operator new(0x20uLL);
  unk_2565888 = v281;
  strcpy((char *)qword_2565880, "Walking_Slight_Left_Turn");
  qword_2565898 = (uint64_t)operator new(0x20uLL);
  unk_25658A0 = v280;
  strcpy((char *)qword_2565898, "Walking_Slight_Right_Turn");
  byte_25658C7 = 4;
  strcpy((char *)&dword_25658B0, "Exit");
  byte_25658DF = 4;
  strcpy((char *)&dword_25658C8, "Road");
  byte_25658F7 = 7;
  strcpy((char *)&dword_25658E0, "Freeway");
  byte_256590F = 12;
  strcpy((char *)&qword_25658F8, "Intersection");
  byte_2565927 = 5;
  strcpy((char *)&dword_2565910, "Ferry");
  byte_256593F = 11;
  strcpy((char *)&qword_2565928, "ShuttleName");
  byte_2565957 = 5;
  strcpy((char *)&dword_2565940, "Road1");
  strcpy(&byte_256596F, "\tName");
  strcpy((char *)&qword_2565958, "Signpost1");
  byte_2565987 = 4;
  byte_256599F = 7;
  strcpy((char *)&dword_2565988, "Address");
  byte_25659B7 = 7;
  strcpy((char *)&dword_25659A0, "Shield1");
  byte_25659CF = 13;
  strcpy((char *)&qword_25659B8, "TowardShield1");
  byte_25659E7 = 6;
  strcpy((char *)&dword_25659D0, "Right_");
  byte_25659FF = 5;
  strcpy((char *)&dword_25659E8, "Left_");
  strcpy(&byte_2565A17, "\tOn_Left_");
  strcpy((char *)&qword_2565A00, "On_Right_");
  byte_2565A2F = 8;
  byte_2565A47 = 12;
  strcpy((char *)&qword_2565A30, "ElevatorName");
  byte_2565A5F = 13;
  strcpy((char *)&qword_2565A48, "EscalatorName");
  strcpy(&byte_2565A77, "\nBridgeName");
  strcpy((char *)&qword_2565A60, "StairsName");
  strcpy(&byte_2565A8F, "\nTunnelName");
  strcpy(&byte_2565AA7, "\nParking");
  byte_2565ABF = 7;
  strcpy(&byte_2565AD7, "\t_Escalator");
  strcpy((char *)&qword_2565AC0, "_Elevator");
  strcpy(&byte_2565AEF, "\n_ElevatorName");
  byte_2565B07 = 13;
  byte_2565B1F = 14;
  strcpy((char *)&qword_2565B08, "_EscalatorName");
  byte_2565B37 = 5;
  strcpy((char *)&qword_2565B20, "_Road");
  byte_2565B4F = 8;
  strcpy((char *)&qword_2565B38, "_Freeway");
  byte_2565B67 = 13;
  strcpy((char *)&qword_2565B50, "_Intersection");
  byte_2565B7F = 6;
  strcpy((char *)&dword_2565B68, "_Road1");
  byte_2565B97 = 6;
  strcpy((char *)&dword_2565B80, "_Road2");
  strcpy(&byte_2565BAF, "\n_Signpost2");
  strcpy((char *)&qword_2565B98, "_Signpost1");
  strcpy(&byte_2565BC7, "\n_Ferry");
  byte_2565BDF = 6;
  byte_2565BF7 = 12;
  strcpy((char *)&qword_2565BE0, "_Ferry_Ferry");
  byte_2565C0F = 12;
  strcpy((char *)&qword_2565BF8, "_ShuttleName");
  qword_2565C10 = (uint64_t)operator new(0x20uLL);
  unk_2565C18 = v279;
  strcpy((char *)qword_2565C10, "_Railway_Shuttle_ShuttleName");
  byte_2565C3F = 11;
  strcpy((char *)&qword_2565C28, "_ExitNumber");
  byte_2565C57 = 5;
  strcpy((char *)&dword_2565C40, "_Exit");
  byte_2565C6F = 7;
  strcpy((char *)&dword_2565C58, "_StayOn");
  byte_2565C87 = 7;
  strcpy((char *)&dword_2565C70, "_Stairs");
  byte_2565C9F = 5;
  strcpy((char *)&dword_2565C88, "_Ramp");
  byte_2565CB7 = 11;
  strcpy((char *)&qword_2565CA0, "_StairsName");
  strcpy(&byte_2565CCF, "\t_Down");
  strcpy((char *)&qword_2565CB8, "_RampName");
  byte_2565CE7 = 5;
  byte_2565CFF = 3;
  dword_2565CE8 = 7361887;
  byte_2565D17 = 7;
  strcpy((char *)&dword_2565D00, "_Bridge");
  byte_2565D2F = 7;
  strcpy((char *)&dword_2565D18, "_Tunnel");
  byte_2565D47 = 11;
  strcpy((char *)&qword_2565D30, "_Roundabout");
  byte_2565D5F = 6;
  strcpy((char *)&dword_2565D48, "_Cross");
  byte_2565D77 = 8;
  strcpy((char *)&qword_2565D60, "_Parking");
  byte_2565D8F = 8;
  strcpy((char *)&qword_2565D78, "_Shield1");
  byte_2565DA7 = 14;
  strcpy((char *)&qword_2565D90, "_TowardShield1");
  byte_2565DBF = 8;
  strcpy((char *)&qword_2565DA8, "_Shield2");
  byte_2565DD7 = 14;
  strcpy((char *)&qword_2565DC0, "_TowardShield2");
  byte_2565DEF = 11;
  strcpy((char *)&qword_2565DD8, "_Direction1");
  byte_2565E07 = 11;
  strcpy((char *)&qword_2565DF0, "_Direction2");
  strcpy(&byte_2565E1F, "\n_TowardDirection1");
  strcpy((char *)&qword_2565E08, "Direction1");
  byte_2565E37 = 17;
  byte_2565E4F = 17;
  strcpy((char *)&xmmword_2565E38, "_TowardDirection2");
  byte_2565E67 = 16;
  strcpy((char *)&xmmword_2565E50, "TowardDirection1");
  byte_2565E7F = 7;
  strcpy((char *)&qword_2565E68, "_Spoken");
  byte_2565E97 = 5;
  strcpy((char *)&qword_2565E80, "_Sign");
  byte_2565EAF = 15;
  strcpy((char *)&qword_2565E98, "_Secondary_Sign");
  byte_2565EC7 = 5;
  byte_2565EB4 = 116;
  dword_2565EB0 = 1936280671;
  byte_2565EB5 = 0;
  byte_2565EDF = 8;
  strcpy((char *)&qword_2565EC8, "_Primary");
  qword_2565EF0 = 0xF00000000000000;
  strcpy((char *)&qword_2565EE0, "_Spoken_Primary");
  strcpy(&byte_2565F0F, "\n_Secondary");
  strcpy((char *)&qword_2565EF8, "_Secondary");
  strcpy(&byte_2565F27, "\n_Spoken_Secondar");
  BYTE1(qword_2565F38) = 0;
  WORD1(qword_2565F38) = 0;
  HIDWORD(qword_2565F38) = 285212672;
  byte_2565F57 = 13;
  strcpy((char *)&qword_2565F40, "_To_Secondary");
  BYTE1(qword_2565F68) = 0;
  WORD1(qword_2565F68) = 0;
  HIDWORD(qword_2565F68) = 335544320;
  strcpy((char *)&dword_2565F58, "_Spoken_To_Secon");
  strcpy(&byte_2565F87, "\t_ValidDistance");
  strcpy((char *)&qword_2565F70, "_Distance");
  byte_2565F9F = 14;
  byte_2565FB7 = 6;
  strcpy((char *)&dword_2565FA0, "_Short");
  byte_2565FCF = 1;
  word_2565FB8 = 95;
  qword_2565FD0 = (uint64_t)operator new(0x20uLL);
  unk_2565FD8 = v281;
  strcpy((char *)qword_2565FD0, "Concatenate_Newline_Sign");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_2565FE8 = (uint64_t)v3;
  *(_OWORD *)algn_2565FF0 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v271;
  v3[23] = 0;
  byte_2566017 = 12;
  strcpy((char *)&qword_2566000, "Chain_Spoken");
  byte_256602F = 15;
  strcpy((char *)&qword_2566018, "Chain_To_Spoken");
  strcpy(&byte_2566047, "\nThen_Spoken");
  strcpy((char *)&qword_2566030, "And_Spoken");
  byte_256605F = 11;
  byte_2566077 = 18;
  strcpy(byte_2566060, "Concatenate_Spoken");
  qword_2566078 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  unk_2566080 = xmmword_20B9240;
  strcpy((char *)qword_2566078, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2566090 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_2566098 = xmmword_20B9260;
  strcpy((char *)qword_2566090, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25660A8 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_25660B0 = xmmword_20B9A90;
  strcpy((char *)qword_25660A8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25660C0 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25660C8 = xmmword_20B9A40;
  strcpy((char *)qword_25660C0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25660D8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  unk_25660E0 = xmmword_20E12D0;
  strcpy((char *)qword_25660D8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25660F0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25660F8 = xmmword_20B9960;
  strcpy((char *)qword_25660F0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2566108 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2566110 = xmmword_20B93A0;
  strcpy((char *)qword_2566108, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2566120 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_2566128 = xmmword_20E1380;
  strcpy((char *)qword_2566120, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2566138 = (uint64_t)operator new(0x30uLL);
  unk_2566140 = xmmword_20B93C0;
  strcpy((char *)qword_2566138, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2566150 = (uint64_t)operator new(0x38uLL);
  unk_2566158 = xmmword_20B9A60;
  strcpy((char *)qword_2566150, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2566168 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2566170 = xmmword_20E1380;
  strcpy((char *)qword_2566168, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2566180 = (uint64_t)operator new(0x28uLL);
  unk_2566188 = xmmword_20B9960;
  strcpy((char *)qword_2566180, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2566198 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  unk_25661A0 = xmmword_20B93D0;
  strcpy((char *)qword_2566198, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25661B0 = (uint64_t)operator new(0x20uLL);
  unk_25661B8 = v277;
  strcpy((char *)qword_25661B0, "Walking_Distance_Chain_Spoken");
  qword_25661C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25661D0 = v277;
  strcpy((char *)qword_25661C8, "Walking_Continue_Chain_Spoken");
  uint64_t v4 = (char *)operator new(0x19uLL);
  qword_25661E0 = (uint64_t)v4;
  unk_25661E8 = v282;
  *(_OWORD *)uint64_t v4 = v272;
  *(void *)(v4 + 15) = v271;
  v4[23] = 0;
  unk_25661F8 = operator new(0x28uLL);
  unk_2566200 = v270;
  strcpy(unk_25661F8, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_2566210, "Walking_Continue_Cross");
  HIBYTE(word_2566226) = 22;
  byte_256623F = 14;
  strcpy(byte_2566228, "Continue_Cross");
  byte_2566257 = 5;
  strcpy(byte_2566240, "Cross");
  byte_256626F = 19;
  strcpy(byte_2566258, "Cross_Street_Spoken");
  byte_2566287 = 17;
  strcpy(algn_2566270, "Cross_Road_Spoken");
  byte_256629F = 20;
  strcpy(byte_2566288, "Use_Crosswalk_Spoken");
  byte_25662B7 = 15;
  strcpy(byte_25662A0, "Distance_Spoken");
  byte_25662CF = 19;
  strcpy(byte_25662B8, "Distance_And_Spoken");
  byte_25662E7 = 21;
  strcpy(byte_25662D0, "Continue_Stage_Spoken");
  byte_25662FF = 13;
  qmemcpy(&qword_25662E8, "ContinueStage", 13);
  int v5 = SHIBYTE(qword_2565EF0);
  if (qword_2565EF0 >= 0) {
    size_t v6 = HIBYTE(qword_2565EF0);
  }
  else {
    size_t v6 = unk_2565EE8;
  }
  unint64_t v7 = v6 + 13;
  byte_25662F5 = 0;
  if (v6 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v11 = (char *)operator new(v9 + 1);
    qword_2566308 = v6 + 13;
    unk_2566310 = v10 | 0x8000000000000000;
    qword_2566300 = (uint64_t)v11;
    qmemcpy(v11, "ContinueStage", 13);
    unint64_t v8 = v11 + 13;
  }
  else
  {
    BYTE1(qword_2566308) = 0;
    WORD1(qword_2566308) = 0;
    HIDWORD(qword_2566308) = 0;
    unk_2566310 = 0;
    byte_2566317 = v6 + 13;
    strcpy((char *)&qword_2566300, "Continue");
    unint64_t v8 = (char *)&qword_2566308 + 5;
    if (!v6) {
      goto LABEL_19;
    }
  }
  if (v5 >= 0) {
    uint64_t v12 = &qword_2565EE0;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_2565EE0;
  }
  memmove(v8, v12, v6);
LABEL_19:
  v8[v6] = 0;
  int v13 = byte_2565B37;
  if (byte_2565B37 >= 0) {
    size_t v14 = byte_2565B37;
  }
  else {
    size_t v14 = qword_2565B28;
  }
  unint64_t v15 = v14 + 13;
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    void *v19 = qword_25662E8;
    *(void *)((char *)v19 + 5) = *(uint64_t *)((char *)&qword_25662E8 + 5);
    size_t v16 = (char *)v19 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25662E8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25662E8;
    size_t v16 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (v13 >= 0) {
    uint64_t v20 = &qword_2565B20;
  }
  else {
    uint64_t v20 = (uint64_t *)qword_2565B20;
  }
  memmove(v16, v20, v14);
LABEL_33:
  v16[v14] = 0;
  if (v5 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&qword_2565EE0;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)qword_2565EE0;
  }
  int v22 = std::string::append(&__dst, v21, v6);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_2566328 = v22->__r_.__value_.__r.__words[2];
  xmmword_2566318 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2566347 = 5;
  strcpy((char *)&dword_2566330, "Merge");
  qword_2566348 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  *(_OWORD *)algn_2566350 = xmmword_20B8E90;
  strcpy((char *)qword_2566348, "Continue_Freeway_Spoken_Primary");
  byte_2566377 = 8;
  strcpy((char *)&qword_2566360, "Starting");
  byte_256638F = 14;
  strcpy((char *)&qword_2566378, "Starting_Route");
  byte_25663A7 = 14;
  strcpy((char *)&qword_2566390, "Resuming_Route");
  byte_25663BF = 16;
  strcpy((char *)&xmmword_25663A8, "Continuing_Route");
  byte_25663D7 = 9;
  word_25663C8 = 112;
  qword_25663C0 = *(void *)&v265[48];
  strcpy(&byte_25663EF, "\nEnding");
  strcpy((char *)&word_25663E0, "op");
  qword_25663D8 = *(void *)&v269[0];
  byte_2566407 = 6;
  strcpy((char *)&qword_2566408, "_Destination");
  byte_256641F = 12;
  byte_2566437 = 15;
  strcpy((char *)&qword_2566420, "_At_Destination");
  std::operator+<char>();
  qword_2566450 = (uint64_t)operator new(0x20uLL);
  unk_2566458 = v281;
  strcpy((char *)qword_2566450, "Spoken_Ending_At_Parking");
  qword_2566468 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_2566470 = xmmword_20B9800;
  strcpy((char *)qword_2566468, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2566480, "Sign_Ending_At_Parking");
  HIBYTE(word_2566496) = 22;
  byte_25664AF = 4;
  strcpy((char *)&dword_2566498, "Home");
  byte_25664C7 = 4;
  strcpy((char *)&dword_25664B0, "Work");
  byte_25664DF = 8;
  strcpy((char *)&qword_25664C8, "Business");
  byte_25664F7 = 4;
  strcpy((char *)&dword_25664E0, "Name");
  byte_256650F = 13;
  strcpy((char *)&qword_25664F8, "Other_Contact");
  byte_2566527 = 11;
  strcpy((char *)&qword_2566510, "ContactHome");
  byte_256653F = 11;
  *(_DWORD *)((char *)&qword_2566528 + 7) = 1802661719;
  byte_2566557 = 7;
  *(int *)((char *)&dword_2566540 + 3) = 1936942450;
  dword_2566540 = 1919181889;
  strcpy((char *)&xmmword_2566558, "Discoverability_Prompt");
  HIBYTE(word_256656E) = 22;
  byte_2566587 = 6;
  dword_2566570 = 1634878303;
  word_2566574 = 26739;
  byte_256659F = 8;
  qword_2566588 = 0x697269535F6F4E5FLL;
  byte_25665B7 = 9;
  strcpy((char *)&qword_25665A0, "_CityName");
  byte_25665CF = 8;
  qword_25665B8 = 0x636972656E65475FLL;
  int v24 = byte_2566377;
  if (byte_2566377 >= 0) {
    size_t v25 = byte_2566377;
  }
  else {
    size_t v25 = qword_2566368;
  }
  LODWORD(v272) = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v26 = byte_25656B7;
  }
  else {
    size_t v26 = unk_25656A8;
  }
  qword_2566528 = *(void *)"ContactWork";
  byte_2566533 = 0;
  byte_2566547 = 0;
  byte_2566576 = 0;
  byte_2566590 = 0;
  byte_25665C0 = 0;
  unint64_t v27 = v26 + v25;
  if (v26 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)int v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v27 <= 0x16)
  {
    int v28 = &qword_25665D0;
    qword_25665D8 = 0;
    unk_25665E0 = 0;
    qword_25665D0 = 0;
    byte_25665E7 = v26 + v25;
    if (!v25) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v91 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v91 = v27 | 7;
  }
  uint64_t v92 = v91 + 1;
  int v28 = (uint64_t *)operator new(v91 + 1);
  qword_25665D8 = v26 + v25;
  unk_25665E0 = v92 | 0x8000000000000000;
  qword_25665D0 = (uint64_t)v28;
  if (v25)
  {
LABEL_47:
    if (v24 >= 0) {
      int v29 = &qword_2566360;
    }
    else {
      int v29 = (uint64_t *)qword_2566360;
    }
    memmove(v28, v29, v25);
  }
LABEL_51:
  size_t v30 = (char *)v28 + v25;
  if (v26)
  {
    if ((int)v272 >= 0) {
      unint64_t v31 = &qword_25656A0;
    }
    else {
      unint64_t v31 = (uint64_t *)qword_25656A0;
    }
    memmove(v30, v31, v26);
  }
  v30[v26] = 0;
  int v32 = byte_256641F;
  if (byte_256641F >= 0) {
    size_t v33 = byte_256641F;
  }
  else {
    size_t v33 = qword_2566410;
  }
  unint64_t v34 = v33 + v25;
  if (v33 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 <= 0x16)
  {
    int v35 = &qword_25665E8;
    qword_25665F0 = 0;
    unk_25665F8 = 0;
    qword_25665E8 = 0;
    byte_25665FF = v33 + v25;
    if (!v25) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v93 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v93 = v34 | 7;
  }
  uint64_t v94 = v93 + 1;
  int v35 = (uint64_t *)operator new(v93 + 1);
  qword_25665F0 = v33 + v25;
  unk_25665F8 = v94 | 0x8000000000000000;
  qword_25665E8 = (uint64_t)v35;
  if (v25)
  {
LABEL_62:
    if (v24 >= 0) {
      BOOL v36 = &qword_2566360;
    }
    else {
      BOOL v36 = (uint64_t *)qword_2566360;
    }
    memmove(v35, v36, v25);
  }
LABEL_66:
  uint64_t v37 = (char *)v35 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      unint64_t v38 = &qword_2566408;
    }
    else {
      unint64_t v38 = (uint64_t *)qword_2566408;
    }
    memmove(v37, v38, v33);
  }
  v37[v33] = 0;
  qword_2566600 = (uint64_t)operator new(0x19uLL);
  unk_2566608 = v282;
  strcpy((char *)qword_2566600, "{ChargeStationCityName}");
  if (v34 < 0x17)
  {
    unint64_t v39 = &qword_2566618;
    qword_2566620 = 0;
    unk_2566628 = 0;
    qword_2566618 = 0;
    byte_256662F = v33 + v25;
    if (!v25) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v95 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v95 = v34 | 7;
  }
  uint64_t v96 = v95 + 1;
  unint64_t v39 = (uint64_t *)operator new(v95 + 1);
  qword_2566620 = v33 + v25;
  unk_2566628 = v96 | 0x8000000000000000;
  qword_2566618 = (uint64_t)v39;
  if (v25)
  {
LABEL_73:
    if (v24 >= 0) {
      long long v40 = &qword_2566360;
    }
    else {
      long long v40 = (uint64_t *)qword_2566360;
    }
    memmove(v39, v40, v25);
  }
LABEL_77:
  long long v41 = (char *)v39 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      int v42 = &qword_2566408;
    }
    else {
      int v42 = (uint64_t *)qword_2566408;
    }
    memmove(v41, v42, v33);
  }
  v41[v33] = 0;
  strcpy((char *)&xmmword_2566630, "{NewBatteryPercentage}");
  HIBYTE(word_2566646) = 22;
  qword_2566648 = (uint64_t)operator new(0x20uLL);
  xmmword_2566650 = v275;
  strcpy((char *)qword_2566648, "{OriginalBatteryPercentage}");
  byte_2566677 = 19;
  strcpy((char *)&xmmword_2566660, "_Arrival_Percentage");
  int v43 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v44 = byte_2566407;
  }
  else {
    size_t v44 = qword_25663F8;
  }
  unint64_t v45 = v44 + v26;
  if (v44 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v45 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v26;
    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v97 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17) {
    uint64_t v97 = v45 | 7;
  }
  uint64_t v98 = v97 + 1;
  p_dst = (char *)operator new(v97 + 1);
  __dst.__r_.__value_.__l.__size_ = v44 + v26;
  __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v44)
  {
LABEL_88:
    if (v43 >= 0) {
      BOOL v47 = &qword_25663F0;
    }
    else {
      BOOL v47 = (uint64_t *)qword_25663F0;
    }
    memmove(p_dst, v47, v44);
  }
LABEL_92:
  int v48 = &p_dst[v44];
  if (v26)
  {
    if ((int)v272 >= 0) {
      BOOL v49 = &qword_25656A0;
    }
    else {
      BOOL v49 = (uint64_t *)qword_25656A0;
    }
    memmove(v48, v49, v26);
  }
  v48[v26] = 0;
  int v50 = std::string::append(&__dst, "_Percentage");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  qword_2566688 = v50->__r_.__value_.__r.__words[2];
  xmmword_2566678 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v52 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v53 = byte_2566407;
  }
  else {
    size_t v53 = qword_25663F8;
  }
  int v54 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v55 = byte_25656B7;
  }
  else {
    size_t v55 = unk_25656A8;
  }
  unint64_t v56 = v55 + v53;
  if (v55 + v53 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v56 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v57 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v55 + v53;
    if (!v53) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v99 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v56 | 7) != 0x17) {
    uint64_t v99 = v56 | 7;
  }
  uint64_t v100 = v99 + 1;
  uint64_t v57 = (char *)operator new(v99 + 1);
  v283.__r_.__value_.__l.__size_ = v55 + v53;
  v283.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  if (v53)
  {
LABEL_108:
    if (v52 >= 0) {
      uint64_t v58 = &qword_25663F0;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_25663F0;
    }
    memmove(v57, v58, v53);
  }
LABEL_112:
  int v59 = &v57[v53];
  if (v55)
  {
    if (v54 >= 0) {
      int v60 = &qword_25656A0;
    }
    else {
      int v60 = (uint64_t *)qword_25656A0;
    }
    memmove(v59, v60, v55);
  }
  v59[v55] = 0;
  if (byte_25656E7 >= 0) {
    int v61 = (const std::string::value_type *)&qword_25656D0;
  }
  else {
    int v61 = (const std::string::value_type *)qword_25656D0;
  }
  if (byte_25656E7 >= 0) {
    std::string::size_type v62 = byte_25656E7;
  }
  else {
    std::string::size_type v62 = *(void *)&byte_25656D8;
  }
  int v63 = std::string::append(&v283, v61, v62);
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  int v65 = std::string::append(&__dst, "_Percentage");
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  qword_25666A0 = v65->__r_.__value_.__r.__words[2];
  xmmword_2566690 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v67 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v68 = byte_2566407;
  }
  else {
    size_t v68 = qword_25663F8;
  }
  int v69 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v70 = byte_25656B7;
  }
  else {
    size_t v70 = unk_25656A8;
  }
  unint64_t v71 = v70 + v68;
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v72 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v101 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17) {
    uint64_t v101 = v71 | 7;
  }
  uint64_t v102 = v101 + 1;
  long long v72 = (char *)operator new(v101 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  if (v68)
  {
LABEL_134:
    if (v67 >= 0) {
      int v73 = &qword_25663F0;
    }
    else {
      int v73 = (uint64_t *)qword_25663F0;
    }
    memmove(v72, v73, v68);
  }
LABEL_138:
  uint64_t v74 = &v72[v68];
  if (v70)
  {
    if (v69 >= 0) {
      std::string v75 = &qword_25656A0;
    }
    else {
      std::string v75 = (uint64_t *)qword_25656A0;
    }
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  uint64_t v76 = std::string::append(&__dst, "_Duration");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  qword_25666B8 = v76->__r_.__value_.__r.__words[2];
  xmmword_25666A8 = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v78 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v79 = byte_2566407;
  }
  else {
    size_t v79 = qword_25663F8;
  }
  int v80 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v81 = byte_25656B7;
  }
  else {
    size_t v81 = unk_25656A8;
  }
  unint64_t v82 = v81 + v79;
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v82 <= 0x16)
  {
    qword_25666C8 = 0;
    unk_25666D0 = 0;
    qword_25666C0 = 0;
    int v83 = &qword_25666C0;
    byte_25666D7 = v81 + v79;
    if (!v79) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v103 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v82 | 7) != 0x17) {
    uint64_t v103 = v82 | 7;
  }
  uint64_t v104 = v103 + 1;
  int v83 = (uint64_t *)operator new(v103 + 1);
  qword_25666C8 = v81 + v79;
  unk_25666D0 = v104 | 0x8000000000000000;
  qword_25666C0 = (uint64_t)v83;
  if (v79)
  {
LABEL_154:
    if (v78 >= 0) {
      long long v84 = &qword_25663F0;
    }
    else {
      long long v84 = (uint64_t *)qword_25663F0;
    }
    memmove(v83, v84, v79);
  }
LABEL_158:
  std::string::size_type v85 = (char *)v83 + v79;
  if (v81)
  {
    if (v80 >= 0) {
      int v86 = &qword_25656A0;
    }
    else {
      int v86 = (uint64_t *)qword_25656A0;
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  int v87 = byte_25666D7;
  if (byte_25666D7 >= 0) {
    size_t v88 = byte_25666D7;
  }
  else {
    size_t v88 = qword_25666C8;
  }
  unint64_t v89 = v88 + 5;
  if (v88 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v89 >= 0x17)
  {
    uint64_t v105 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17) {
      uint64_t v105 = v89 | 7;
    }
    uint64_t v106 = v105 + 1;
    int v90 = (uint64_t *)operator new(v105 + 1);
    qword_25666E0 = v88 + 5;
    unk_25666E8 = v106 | 0x8000000000000000;
    qword_25666D8 = (uint64_t)v90;
  }
  else
  {
    int v90 = &qword_25666D8;
    qword_25666E0 = 0;
    unk_25666E8 = 0;
    qword_25666D8 = 0;
    byte_25666EF = v88 + 5;
    if (!v88) {
      goto LABEL_205;
    }
  }
  if (v87 >= 0) {
    int v107 = &qword_25666C0;
  }
  else {
    int v107 = (uint64_t *)qword_25666C0;
  }
  memmove(v90, v107, v88);
LABEL_205:
  strcpy((char *)v90 + v88, "_Name");
  int v108 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v109 = byte_2566407;
  }
  else {
    size_t v109 = qword_25663F8;
  }
  int v110 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v111 = byte_25656B7;
  }
  else {
    size_t v111 = unk_25656A8;
  }
  unint64_t v112 = v111 + v109;
  if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v112 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v113 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v111 + v109;
    if (!v109) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v123 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v112 | 7) != 0x17) {
    uint64_t v123 = v112 | 7;
  }
  uint64_t v124 = v123 + 1;
  int v113 = (char *)operator new(v123 + 1);
  __dst.__r_.__value_.__l.__size_ = v111 + v109;
  __dst.__r_.__value_.__r.__words[2] = v124 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
  if (v109)
  {
LABEL_214:
    if (v108 >= 0) {
      int64x2_t v114 = &qword_25663F0;
    }
    else {
      int64x2_t v114 = (uint64_t *)qword_25663F0;
    }
    memmove(v113, v114, v109);
  }
LABEL_218:
  int v115 = &v113[v109];
  if (v111)
  {
    if (v110 >= 0) {
      uint64_t v116 = &qword_25656A0;
    }
    else {
      uint64_t v116 = (uint64_t *)qword_25656A0;
    }
    memmove(v115, v116, v111);
  }
  v115[v111] = 0;
  int v117 = std::string::append(&__dst, "_Connector_Type");
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  qword_2566700 = v117->__r_.__value_.__r.__words[2];
  xmmword_25666F0 = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v119 = SHIBYTE(qword_2566700);
  if (qword_2566700 >= 0) {
    size_t v120 = HIBYTE(qword_2566700);
  }
  else {
    size_t v120 = *((void *)&xmmword_25666F0 + 1);
  }
  unint64_t v121 = v120 + 6;
  if (v120 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v121 >= 0x17)
  {
    uint64_t v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17) {
      uint64_t v125 = v121 | 7;
    }
    uint64_t v126 = v125 + 1;
    uint64_t v122 = (uint64_t *)operator new(v125 + 1);
    qword_2566710 = v120 + 6;
    unk_2566718 = v126 | 0x8000000000000000;
    qword_2566708 = (uint64_t)v122;
  }
  else
  {
    uint64_t v122 = &qword_2566708;
    qword_2566710 = 0;
    unk_2566718 = 0;
    qword_2566708 = 0;
    byte_256671F = v120 + 6;
    if (!v120) {
      goto LABEL_243;
    }
  }
  if (v119 >= 0) {
    int v127 = &xmmword_25666F0;
  }
  else {
    int v127 = (long long *)xmmword_25666F0;
  }
  memmove(v122, v127, v120);
LABEL_243:
  strcpy((char *)v122 + v120, "_Power");
  int v128 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v129 = byte_2566407;
  }
  else {
    size_t v129 = qword_25663F8;
  }
  int v130 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v131 = byte_25656B7;
  }
  else {
    size_t v131 = unk_25656A8;
  }
  unint64_t v132 = v131 + v129;
  if (v131 + v129 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v132 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v133 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v131 + v129;
    if (!v129) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v162 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v132 | 7) != 0x17) {
    uint64_t v162 = v132 | 7;
  }
  uint64_t v163 = v162 + 1;
  int v133 = (char *)operator new(v162 + 1);
  __dst.__r_.__value_.__l.__size_ = v131 + v129;
  __dst.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
  if (v129)
  {
LABEL_252:
    if (v128 >= 0) {
      int v134 = &qword_25663F0;
    }
    else {
      int v134 = (uint64_t *)qword_25663F0;
    }
    memmove(v133, v134, v129);
  }
LABEL_256:
  int v135 = &v133[v129];
  if (v131)
  {
    if (v130 >= 0) {
      long long v136 = &qword_25656A0;
    }
    else {
      long long v136 = (uint64_t *)qword_25656A0;
    }
    memmove(v135, v136, v131);
  }
  v135[v131] = 0;
  if (byte_2565E7F >= 0) {
    int v137 = (const std::string::value_type *)&qword_2565E68;
  }
  else {
    int v137 = (const std::string::value_type *)qword_2565E68;
  }
  if (byte_2565E7F >= 0) {
    std::string::size_type v138 = byte_2565E7F;
  }
  else {
    std::string::size_type v138 = unk_2565E70;
  }
  int v139 = std::string::append(&__dst, v137, v138);
  long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  qword_2566730 = v139->__r_.__value_.__r.__words[2];
  xmmword_2566720 = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v141 = byte_2566407;
  if (byte_2566407 >= 0) {
    size_t v142 = byte_2566407;
  }
  else {
    size_t v142 = qword_25663F8;
  }
  int v143 = byte_25656B7;
  if (byte_25656B7 >= 0) {
    size_t v144 = byte_25656B7;
  }
  else {
    size_t v144 = unk_25656A8;
  }
  unint64_t v145 = v144 + v142;
  if (v144 + v142 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v145 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    char v146 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v144 + v142;
    if (!v142) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v164 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v145 | 7) != 0x17) {
    uint64_t v164 = v145 | 7;
  }
  uint64_t v165 = v164 + 1;
  char v146 = (char *)operator new(v164 + 1);
  v283.__r_.__value_.__l.__size_ = v144 + v142;
  v283.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
  if (v142)
  {
LABEL_278:
    if (v141 >= 0) {
      int v147 = &qword_25663F0;
    }
    else {
      int v147 = (uint64_t *)qword_25663F0;
    }
    memmove(v146, v147, v142);
  }
LABEL_282:
  long long v148 = &v146[v142];
  if (v144)
  {
    if (v143 >= 0) {
      int v149 = &qword_25656A0;
    }
    else {
      int v149 = (uint64_t *)qword_25656A0;
    }
    memmove(v148, v149, v144);
  }
  v148[v144] = 0;
  if (byte_25656E7 >= 0) {
    std::string::size_type v150 = (const std::string::value_type *)&qword_25656D0;
  }
  else {
    std::string::size_type v150 = (const std::string::value_type *)qword_25656D0;
  }
  if (byte_25656E7 >= 0) {
    std::string::size_type v151 = byte_25656E7;
  }
  else {
    std::string::size_type v151 = *(void *)&byte_25656D8;
  }
  long long v152 = std::string::append(&v283, v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (byte_2565E7F >= 0) {
    std::string::size_type v154 = (const std::string::value_type *)&qword_2565E68;
  }
  else {
    std::string::size_type v154 = (const std::string::value_type *)qword_2565E68;
  }
  if (byte_2565E7F >= 0) {
    std::string::size_type v155 = byte_2565E7F;
  }
  else {
    std::string::size_type v155 = unk_2565E70;
  }
  long long v156 = std::string::append(&__dst, v154, v155);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  qword_2566748 = v156->__r_.__value_.__r.__words[2];
  xmmword_2566738 = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_2566767 = 16;
  strcpy((char *)&xmmword_2566750, "Use_NACS_Adapter");
  byte_256677F = 16;
  strcpy(byte_2566768, "Start_Route_Sign");
  qword_2566780 = (uint64_t)operator new(0x20uLL);
  unk_2566788 = v278;
  strcpy((char *)qword_2566780, "Start_Route_Spoken_Primary");
  int v158 = byte_2564E17;
  if (byte_2564E17 >= 0) {
    size_t v159 = byte_2564E17;
  }
  else {
    size_t v159 = qword_2564E08;
  }
  unint64_t v160 = v159 + 27;
  if (v159 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v160 <= 0x16)
  {
    int v161 = &qword_2566798;
    qword_25667A0 = 0;
    unk_25667A8 = 0;
    qword_2566798 = 0;
    byte_25667AF = v159 + 27;
LABEL_318:
    if (v158 >= 0) {
      uint64_t v168 = &qword_2564E00;
    }
    else {
      uint64_t v168 = (uint64_t *)qword_2564E00;
    }
    memmove(v161, v168, v159);
    goto LABEL_322;
  }
  uint64_t v166 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v160 | 7) != 0x17) {
    uint64_t v166 = v160 | 7;
  }
  uint64_t v167 = v166 + 1;
  int v161 = (uint64_t *)operator new(v166 + 1);
  qword_25667A0 = v159 + 27;
  unk_25667A8 = v167 | 0x8000000000000000;
  qword_2566798 = (uint64_t)v161;
  if (v159) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v161 + v159, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25667C7, "\t_Two_Lanes");
  strcpy((char *)&qword_25667B0, "_One_Lane");
  strcpy(&byte_25667DF, "\n_Three_Lanes");
  byte_25667F7 = 12;
  byte_256680F = 11;
  strcpy((char *)&qword_25667F8, "_Four_Lanes");
  byte_2566827 = 11;
  strcpy((char *)&qword_2566810, "_Five_Lanes");
  strcpy(&byte_256683F, "\n_Seven_Lanes");
  strcpy((char *)&qword_2566828, "_Six_Lanes");
  byte_2566857 = 12;
  byte_256686F = 12;
  strcpy((char *)&qword_2566858, "_Eight_Lanes");
  byte_2566887 = 12;
  strcpy((char *)&qword_2566870, "_Second_Lane");
  byte_256689F = 11;
  strcpy((char *)&qword_2566888, "_Third_Lane");
  byte_25668B7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25668A0, "_Second_Third_Lanes");
  byte_25668CF = 4;
  strcpy((char *)&dword_25668B8, "Left");
  byte_25668E7 = 5;
  byte_25668D4 = 116;
  dword_25668D0 = 1751607634;
  byte_25668D5 = 0;
  byte_25668FF = 6;
  strcpy((char *)&dword_25668E8, "Middle");
  BYTE1(qword_2566910) = 0;
  WORD1(qword_2566910) = 0;
  HIDWORD(qword_2566910) = 0x10000000;
  strcpy((char *)dword_2566900, "Left_Second_Lane");
  BYTE1(qword_2566928) = 0;
  WORD1(qword_2566928) = 0;
  HIDWORD(qword_2566928) = 285212672;
  strcpy((char *)&dword_2566918, "Right_Second_Lan");
  qword_2566940 = 0xF00000000000000;
  strcpy((char *)&dword_2566930, "Left_Third_Lane");
  qword_2566958 = 0x1000000000000000;
  byte_256694C = 116;
  dword_2566948 = 1751607634;
  dword_2566954 = 1701732684;
  unk_256694D = *(void *)"_Third_Lane";
  int v169 = (char *)operator new(0x19uLL);
  qword_2566960 = (uint64_t)v169;
  unk_2566968 = v282;
  *(_DWORD *)int v169 = 1952867660;
  strcpy(v169 + 19, "anes");
  *(_OWORD *)(v169 + 4) = v272;
  int v170 = (char *)operator new(0x20uLL);
  qword_2566978 = (uint64_t)v170;
  xmmword_2566980 = v281;
  *(_DWORD *)int v170 = 1751607634;
  v170[4] = 116;
  strcpy(v170 + 20, "anes");
  *(_OWORD *)(v170 + 5) = v272;
  byte_25669A7 = 5;
  strcpy((char *)&dword_2566990, "_Stay");
  byte_25669BF = 13;
  strcpy((char *)&qword_25669A8, "Continue_Sign");
  byte_25669D7 = 8;
  strcpy((char *)&qword_25669C0, "Continue");
  int v171 = byte_2565E97;
  if (byte_2565E97 >= 0) {
    size_t v172 = byte_2565E97;
  }
  else {
    size_t v172 = qword_2565E88;
  }
  unint64_t v173 = v172 + 8;
  if (v172 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v173 >= 0x17)
  {
    uint64_t v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17) {
      uint64_t v175 = v173 | 7;
    }
    uint64_t v176 = v175 + 1;
    int v177 = operator new(v175 + 1);
    qword_25669E0 = v172 + 8;
    qword_25669E8 = v176 | 0x8000000000000000;
    qword_25669D8 = (uint64_t)v177;
    void *v177 = 0x65756E69746E6F43;
    uint64_t v174 = v177 + 1;
  }
  else
  {
    qword_25669E8 = 0;
    HIBYTE(qword_25669E8) = v172 + 8;
    qword_25669D8 = 0x65756E69746E6F43;
    qword_25669E0 = 0;
    uint64_t v174 = &qword_25669E0;
    if (!v172) {
      goto LABEL_336;
    }
  }
  if (v171 >= 0) {
    int v178 = &qword_2565E80;
  }
  else {
    int v178 = (uint64_t *)qword_2565E80;
  }
  memmove(v174, v178, v172);
LABEL_336:
  *((unsigned char *)v174 + v172) = 0;
  int v179 = SHIBYTE(qword_2565EF0);
  if (qword_2565EF0 >= 0) {
    size_t v180 = HIBYTE(qword_2565EF0);
  }
  else {
    size_t v180 = unk_2565EE8;
  }
  unint64_t v181 = v180 + 8;
  if (v180 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v181 >= 0x17)
  {
    uint64_t v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17) {
      uint64_t v183 = v181 | 7;
    }
    uint64_t v184 = v183 + 1;
    int v185 = operator new(v183 + 1);
    qword_25669F8 = v180 + 8;
    qword_2566A00 = v184 | 0x8000000000000000;
    qword_25669F0 = (uint64_t)v185;
    void *v185 = qword_25669C0;
    uint64_t v182 = v185 + 1;
  }
  else
  {
    qword_2566A00 = 0;
    HIBYTE(qword_2566A00) = v180 + 8;
    qword_25669F0 = qword_25669C0;
    qword_25669F8 = 0;
    uint64_t v182 = &qword_25669F8;
    if (!v180) {
      goto LABEL_350;
    }
  }
  if (v179 >= 0) {
    v186 = &qword_2565EE0;
  }
  else {
    v186 = (uint64_t *)qword_2565EE0;
  }
  memmove(v182, v186, v180);
LABEL_350:
  *((unsigned char *)v182 + v180) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_2566A08, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_2566A37 = 13;
  strcpy((char *)&qword_2566A20, "{instruction}");
  byte_2566A4F = 20;
  strcpy(byte_2566A38, "{primaryInstruction}");
  strcpy((char *)&xmmword_2566A50, "{secondaryInstruction}");
  HIBYTE(word_2566A66) = 22;
  qword_2566A68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2566A70 = v280;
  strcpy((char *)qword_2566A68, "{andSecondaryInstruction}");
  qword_2566A80 = (uint64_t)operator new(0x20uLL);
  unk_2566A88 = v281;
  strcpy((char *)qword_2566A80, "{toSecondaryInstruction}");
  byte_2566AAF = 21;
  strcpy(byte_2566A98, "{continueInstruction}");
  qword_2566AB0 = (uint64_t)operator new(0x20uLL);
  unk_2566AB8 = v278;
  strcpy((char *)qword_2566AB0, "{thenSecondaryInstruction}");
  byte_2566ADF = 14;
  strcpy((char *)&qword_2566AC8, "{instruction1}");
  byte_2566AF7 = 14;
  strcpy((char *)&qword_2566AE0, "{instruction2}");
  strcpy(&byte_2566B0F, "\n{nextDistance}");
  strcpy((char *)&qword_2566AF8, "{distance}");
  byte_2566B27 = 14;
  byte_2566B3F = 16;
  strcpy(byte_2566B28, "{valid_distance}");
  strcpy(&byte_2566B57, "\n{valid_distance}");
  strcpy((char *)&qword_2566B40, "{distance}");
  byte_2566B6F = 16;
  byte_2566B87 = 15;
  strcpy((char *)&qword_2566B70, "{ClimbDistance}");
  byte_2566B9F = 17;
  strcpy(byte_2566B88, "{DescentDistance}");
  byte_2566BB7 = 13;
  strcpy((char *)&qword_2566BA0, "{nonBrkSpace}");
  byte_2566BCF = 9;
  strcpy((char *)&qword_2566BB8, "{newLine}");
  byte_2566BE7 = 6;
  word_2566BD4 = -24382;
  dword_2566BD0 = -1211981630;
  byte_2566BD6 = 0;
  byte_2566BFF = 2;
  word_2566BE8 = -24382;
  byte_2566BEA = 0;
  byte_2566C17 = 1;
  word_2566C00 = 10;
  byte_2566C2F = 1;
  word_2566C18 = 32;
  byte_2566C47 = 2;
  strcpy((char *)&word_2566C30, "\n\n");
  strcpy(&byte_2566C5F, "\t{TowardShield1}");
  strcpy((char *)&qword_2566C48, "{Shield1}");
  byte_2566C77 = 15;
  strcpy(&byte_2566C8F, "\t{TowardShield2}");
  strcpy((char *)&qword_2566C78, "{Shield2}");
  byte_2566CA7 = 15;
  byte_2566CBF = 12;
  strcpy((char *)&qword_2566CA8, "{Direction1}");
  byte_2566CD7 = 12;
  strcpy((char *)&qword_2566CC0, "{Direction2}");
  byte_2566CEF = 18;
  strcpy(byte_2566CD8, "{TowardDirection1}");
  byte_2566D07 = 18;
  strcpy((char *)&xmmword_2566CF0, "{TowardDirection2}");
  byte_2566D1F = 7;
  strcpy((char *)&dword_2566D08, "{Icon1}");
  byte_2566D37 = 7;
  strcpy((char *)&dword_2566D20, "{Icon2}");
  byte_2566D38[23] = 14;
  strcpy(byte_2566D38, "{Intersection}");
  byte_2566D67 = 6;
  strcpy((char *)&xmmword_2566D50, "{Road}");
  byte_2566D7F = 7;
  strcpy((char *)&xmmword_2566D68, "{Road1}");
  byte_2566D97 = 7;
  strcpy((char *)&xmmword_2566D80, "{Road2}");
  strcpy(&byte_2566DAF, "\n{Freeway}");
  strcpy((char *)&xmmword_2566D98, "{Elevator}");
  strcpy(&byte_2566DC7, "\t{Ferry}");
  byte_2566DDF = 7;
  byte_2566DF7 = 13;
  strcpy((char *)&xmmword_2566DE0, "{ShuttleName}");
  byte_2566E0F = 11;
  strcpy((char *)&xmmword_2566DF8, "{Signpost1}");
  byte_2566E27 = 11;
  strcpy((char *)&xmmword_2566E10, "{Signpost2}");
  byte_2566E3F = 12;
  strcpy((char *)&xmmword_2566E28, "{ExitNumber}");
  strcpy(&byte_2566E57, "\t{Name}");
  strcpy((char *)&xmmword_2566E40, "{Address}");
  byte_2566E6F = 6;
  byte_2566E87 = 11;
  strcpy((char *)&xmmword_2566E70, "{PlaceName}");
  byte_2566E9F = 14;
  strcpy((char *)&xmmword_2566E88, "{ElevatorName}");
  byte_2566EB7 = 15;
  strcpy((char *)&xmmword_2566EA0, "{EscalatorName}");
  byte_2566ECF = 12;
  strcpy((char *)&xmmword_2566EB8, "{StairsName}");
  strcpy(&byte_2566EE7, "\n{BridgeName}");
  strcpy((char *)&xmmword_2566ED0, "{RampName}");
  byte_2566EFF = 12;
  byte_2566F17 = 12;
  strcpy((char *)&xmmword_2566F00, "{TunnelName}");
  byte_2566F2F = 13;
  strcpy((char *)&xmmword_2566F18, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2566D38;
  *(_OWORD *)int v285 = xmmword_2566D50;
  *(void *)&v285[16] = unk_2566D60;
  *(_OWORD *)v286 = xmmword_2566D68;
  *(void *)int v287 = unk_2566D78;
  *(_OWORD *)&v287[8] = xmmword_2566D80;
  uint64_t v288 = unk_2566D90;
  *(_OWORD *)long long __p = xmmword_2566D98;
  uint64_t v290 = unk_2566DA8;
  uint64_t v292 = unk_2566DC0;
  long long v291 = xmmword_2566DB0;
  long long v293 = xmmword_2566DC8;
  uint64_t v294 = unk_2566DD8;
  uint64_t v296 = unk_2566DF0;
  long long v295 = xmmword_2566DE0;
  long long v297 = xmmword_2566DF8;
  uint64_t v298 = unk_2566E08;
  uint64_t v300 = unk_2566E20;
  long long v299 = xmmword_2566E10;
  long long v301 = xmmword_2566E28;
  long long v303 = xmmword_2566E40;
  uint64_t v302 = unk_2566E38;
  uint64_t v304 = unk_2566E50;
  long long v305 = xmmword_2566E58;
  long long v307 = xmmword_2566E70;
  uint64_t v306 = unk_2566E68;
  uint64_t v308 = unk_2566E80;
  long long v309 = xmmword_2566E88;
  long long v311 = xmmword_2566EA0;
  uint64_t v310 = unk_2566E98;
  uint64_t v312 = unk_2566EB0;
  long long v313 = xmmword_2566EB8;
  long long v315 = xmmword_2566ED0;
  uint64_t v314 = unk_2566EC8;
  uint64_t v316 = unk_2566EE0;
  long long v317 = xmmword_2566EE8;
  long long v319 = xmmword_2566F00;
  uint64_t v318 = unk_2566EF8;
  uint64_t v320 = unk_2566F10;
  uint64_t v322 = unk_2566F28;
  long long v321 = xmmword_2566F18;
  sub_4BDC0C(qword_2566F30, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_2566F48 = (uint64_t)operator new(0x19uLL);
  unk_2566F50 = v282;
  strcpy((char *)qword_2566F48, "From_User_Location_List");
  byte_2566F77 = 20;
  strcpy(byte_2566F60, "Origin_Waypoint_List");
  qword_2566F78 = (uint64_t)operator new(0x20uLL);
  unk_2566F80 = v278;
  strcpy((char *)qword_2566F78, "Intermediate_Waypoint_List");
  unk_2566F90 = operator new(0x20uLL);
  unk_2566F98 = v280;
  strcpy(unk_2566F90, "Destination_Waypoint_List");
  byte_2566FBF = 15;
  strcpy(byte_2566FA8, "{toDestination}");
  byte_2566FD7 = 13;
  strcpy((char *)&xmmword_2566FC0, "{Destination}");
  byte_2566FEF = 7;
  strcpy(byte_2566FD8, "To_Home");
  byte_2567007 = 14;
  strcpy(byte_2566FF0, "To_ContactHome");
  byte_256701F = 7;
  strcpy(byte_2567008, "To_Work");
  byte_2567037 = 14;
  strcpy(byte_2567020, "To_ContactWork");
  strcpy(&byte_256704F, "\nTo_Business");
  strcpy(byte_2567038, "To_Address");
  byte_2567067 = 11;
  byte_256707F = 16;
  strcpy(byte_2567068, "To_Other_Contact");
  strcpy(&byte_2567097, "\tTo_ContactSchool");
  strcpy(byte_2567080, "To_School");
  byte_25670AF = 16;
  byte_25670C7 = 17;
  strcpy(algn_25670B0, "To_PersonLocation");
  qword_25670C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25670D0 = v279;
  strcpy((char *)qword_25670C8, "To_ContactCustomLabelAddress");
  byte_25670F7 = 7;
  strcpy((char *)&dword_25670E0, "At_Home");
  byte_256710F = 14;
  strcpy((char *)&qword_25670F8, "At_ContactHome");
  byte_2567127 = 7;
  strcpy((char *)&dword_2567110, "At_Work");
  byte_256713F = 14;
  strcpy((char *)&qword_2567128, "At_ContactWork");
  strcpy(&byte_2567157, "\nAt_Business");
  strcpy((char *)&qword_2567140, "At_Address");
  byte_256716F = 11;
  byte_2567187 = 16;
  strcpy(algn_2567170, "At_Other_Contact");
  byte_256719F = 4;
  strcpy((char *)&dword_2567188, "Home");
  byte_25671B7 = 11;
  strcpy((char *)&qword_25671A0 + 7, "Home");
  qword_25671A0 = *(void *)&v265[16];
  byte_25671CF = 4;
  strcpy((char *)&dword_25671B8, "Work");
  byte_25671E7 = 11;
  strcpy((char *)&qword_25671D0 + 7, "Work");
  qword_25671D0 = *(void *)v265;
  byte_25671FF = 7;
  strcpy((char *)&dword_25671E8, "Address");
  byte_2567217 = 8;
  strcpy((char *)&qword_2567200, "Business");
  byte_256722F = 13;
  qword_2567218 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_2567218 + 5) = *(void *)&v265[32];
  byte_2567225 = 0;
  byte_2567247 = 6;
  strcpy((char *)&dword_2567230, "School");
  byte_256725F = 13;
  strcpy((char *)&qword_2567248, "ContactSchool");
  byte_2567277 = 14;
  strcpy((char *)&qword_2567260, "PersonLocation");
  qword_2567278 = (uint64_t)operator new(0x20uLL);
  xmmword_2567280 = v280;
  strcpy((char *)qword_2567278, "ContactCustomLabelAddress");
  if (byte_2566FD7 < 0)
  {
    sub_4200(&xmmword_2567290, (void *)xmmword_2566FC0, *((unint64_t *)&xmmword_2566FC0 + 1));
  }
  else
  {
    xmmword_2567290 = xmmword_2566FC0;
    qword_25672A0 = unk_2566FD0;
  }
  byte_25672BF = 16;
  strcpy((char *)&xmmword_25672A8, "{PrevExitNumber}");
  byte_25672D7 = 10;
  strcpy((char *)&qword_25672C0, "{PrevRoad}");
  qword_25672D8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25672E0 = v281;
  strcpy((char *)qword_25672D8, "{RouteTotalExpectedTime}");
  byte_2567307 = 18;
  strcpy(&algn_25672E0[16], "{ChargePercentage}");
  qword_2567308 = (uint64_t)operator new(0x20uLL);
  unk_2567310 = v275;
  strcpy((char *)qword_2567308, "{RemainingChargePercentage}");
  byte_2567337 = 16;
  strcpy(byte_2567320, "{ChargeDuration}");
  byte_256734F = 15;
  strcpy((char *)&qword_2567338, "{ConnectorType}");
  byte_2567367 = 19;
  strcpy(byte_2567350, "{ChargeStationName}");
  byte_256737F = 7;
  strcpy((char *)&dword_2567368, "{Power}");
  byte_2567397 = 13;
  strcpy((char *)&qword_2567380, "{VehicleName}");
  byte_25673AF = 18;
  strcpy((char *)&xmmword_2567398, "{AreaIncidentName}");
  byte_25673C7 = 14;
  strcpy((char *)&qword_25673B0, "{AreaIncident}");
  byte_25673DF = 16;
  strcpy((char *)&xmmword_25673C8, "{AffectedRegion}");
  byte_25673F7 = 21;
  strcpy(byte_25673E0, "{AreaIncidentWeblink}");
  byte_256740F = 20;
  strcpy((char *)&xmmword_25673F8, "{AreaIncidentAgency}");
  byte_2567427 = 11;
  strcpy((char *)&qword_2567410, "{IssueTime}");
  byte_256743F = 12;
  strcpy((char *)&qword_2567428, "{UpdateTime}");
  byte_2567457 = 11;
  strcpy((char *)&qword_2567440, "{IssueDate}");
  byte_256746F = 12;
  strcpy((char *)&qword_2567458, "{UpdateDate}");
  qword_2567470 = (uint64_t)operator new(0x20uLL);
  unk_2567478 = v281;
  strcpy((char *)qword_2567470, "{AreaIncidentDataSource}");
  byte_256749F = 13;
  strcpy((char *)&qword_2567488, "{AreaHectare}");
  byte_25674B7 = 10;
  strcpy((char *)&qword_25674A0, "{AreaAcre}");
  qword_25674B8 = (uint64_t)operator new(0x20uLL);
  unk_25674C0 = v277;
  strcpy((char *)qword_25674B8, "{WildfirePercentageContained}");
  qword_25674D0 = (uint64_t)operator new(0x28uLL);
  unk_25674D8 = v269[1];
  strcpy((char *)qword_25674D0, "{WildfireExpectedContainmentDate}");
  qword_25674E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25674F0 = v279;
  strcpy((char *)qword_25674E8, "{ServerRecommendedRouteName}");
  qword_2567500 = (uint64_t)operator new(0x20uLL);
  unk_2567508 = v279;
  strcpy((char *)qword_2567500, "{ServerNonRecommendedRoute1}");
  qword_2567518 = (uint64_t)operator new(0x20uLL);
  unk_2567520 = v279;
  strcpy((char *)qword_2567518, "{ServerNonRecommendedRoute2}");
  byte_2567547 = 12;
  strcpy((char *)&qword_2567530, "{ClientDest}");
  byte_256755F = 6;
  strcpy((char *)&dword_2567548, "{Name}");
  qword_2567560 = (uint64_t)operator new(0x20uLL);
  unk_2567568 = v271;
  strcpy((char *)qword_2567560, "ProactiveAlert_FasterRouteTitle");
  qword_2567578 = (uint64_t)operator new(0x20uLL);
  unk_2567580 = v278;
  strcpy((char *)qword_2567578, "ProactiveAlert_RoadClosure");
  qword_2567590 = (uint64_t)operator new(0x30uLL);
  unk_2567598 = v273;
  strcpy((char *)qword_2567590, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25675A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25675B0 = v276;
  strcpy((char *)qword_25675A8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25675C0 = (uint64_t)operator new(0x28uLL);
  unk_25675C8 = v276;
  strcpy((char *)qword_25675C0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25675D8 = (uint64_t)operator new(0x28uLL);
  unk_25675E0 = v276;
  strcpy((char *)qword_25675D8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25675F0 = (uint64_t)operator new(0x30uLL);
  unk_25675F8 = xmmword_20B93B0;
  strcpy((char *)qword_25675F0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_256761F = 17;
  strcpy(byte_2567608, "Proactive_Driving");
  strcpy(&byte_2567637, "\n{RouteName}");
  strcpy((char *)&qword_2567620, "_RouteName");
  byte_256764F = 11;
  qword_2567650 = (uint64_t)operator new(0x28uLL);
  unk_2567658 = v269[1];
  strcpy((char *)qword_2567650, "Pass_Traffic_Light_Spoken_Primary");
  qword_2567668 = (uint64_t)operator new(0x20uLL);
  unk_2567670 = v277;
  strcpy((char *)qword_2567668, "Pass_Stop_Sign_Spoken_Primary");
  unk_2567680 = operator new(0x20uLL);
  unk_2567688 = v269[0];
  strcpy(unk_2567680, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25676AF, "\nBannerBody");
  strcpy(byte_2567698, "BannerHead");
  strcpy(&byte_25676C7, "\nBannerDescription");
  byte_25676DF = 17;
  strcpy(&byte_25676F7, "\n_Incident");
  strcpy((char *)&qword_25676E0, "VoiceAlert");
  strcpy(&byte_256770F, "\t_Area_Incident");
  byte_2567727 = 14;
  byte_256773F = 15;
  strcpy((char *)&qword_2567728, "_Area_Incidents");
  strcpy(&byte_2567757, "\t_Crash");
  strcpy((char *)&qword_2567740, "_Accident");
  byte_256776F = 6;
  byte_2567787 = 16;
  strcpy((char *)&xmmword_2567770, "_Congestion_Zone");
  strcpy(&byte_256779F, "\n_Environmental_Zone");
  strcpy((char *)&qword_2567788, "_Toll_Zone");
  byte_25677B7 = 19;
  BYTE1(qword_25677C8) = 116;
  WORD1(qword_25677C8) = 0;
  HIDWORD(qword_25677C8) = 301989888;
  strcpy(byte_25677D0, "_Construction");
  strcpy((char *)&qword_25677B8, "_Incident_Accide");
  byte_25677E7 = 13;
  byte_25677FF = 7;
  strcpy((char *)&dword_25677E8, "_Hazard");
  byte_2567817 = 12;
  strcpy((char *)&qword_2567800, "_LaneClosure");
  byte_256782F = 12;
  strcpy((char *)&qword_2567818, "_LaneTrailer");
  qmemcpy(&byte_2567847, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2567830, "_Shoulder");
  qword_2567858 = 0x1500007200000000;
  *(void *)algn_2567854 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2567860, "_Causing_Traffic_Delay");
  HIBYTE(word_2567876) = 22;
  byte_256788F = 6;
  strcpy((char *)&dword_2567878, "_Timed");
  byte_25678A7 = 12;
  strcpy((char *)&qword_2567890, "_HasDistance");
  byte_25678BF = 8;
  strcpy((char *)&qword_25678A8, "_Closure");
  strcpy(&byte_25678D7, "\n_BadRoad");
  strcpy((char *)&qword_25678C0, "_NoReroute");
  byte_25678EF = 8;
  byte_2567907 = 12;
  strcpy((char *)&qword_25678F0, "_TollTrailer");
  byte_256791F = 12;
  strcpy((char *)&qword_2567908, "_BestTrailer");
  byte_2567937 = 8;
  strcpy((char *)&qword_2567920, "_Trailer");
  byte_256794F = 18;
  strcpy((char *)&xmmword_2567938, "_Secondary_Trailer");
  byte_2567967 = 8;
  strcpy((char *)&qword_2567950, "_Savings");
  byte_256797F = 8;
  strcpy((char *)&qword_2567968, "_AltRoad");
  byte_2567997 = 6;
  strcpy((char *)&dword_2567980, "_Named");
  byte_25679AF = 6;
  strcpy((char *)&dword_2567998, "_NAMED");
  byte_25679C7 = 22;
  strcpy((char *)&xmmword_25679B0, "_Named_Suggested_Route");
  qword_25679E0 = 0x1000000000000000;
  xmmword_25679D0 = xmmword_20E81D0;
  byte_25679FF = 11;
  strcpy((char *)&qword_25679E8, "_Speed_Trap");
  byte_2567A17 = 4;
  strcpy((char *)&dword_2567A00, "_UGI");
  byte_2567A2F = 12;
  strcpy((char *)&qword_2567A18, "_Safer_Route");
  qword_2567A30 = (uint64_t)operator new(0x20uLL);
  unk_2567A38 = v271;
  strcpy((char *)qword_2567A30, "BlockedRouteByBlockingIncident_");
  qword_2567A48 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  *(_OWORD *)algn_2567A50 = xmmword_20B9280;
  strcpy((char *)qword_2567A48, "BlockedRouteByManeuverRestriction_");
  qword_2567A60 = (uint64_t)operator new(0x20uLL);
  unk_2567A68 = v269[0];
  strcpy((char *)qword_2567A60, "BlockedRouteByTimeRestriction_");
  qword_2567A78 = (uint64_t)operator new(0x28uLL);
  unk_2567A80 = xmmword_20B8FD0;
  strcpy((char *)qword_2567A78, "SuggestRouteToAvoidBlockingIncident_");
  qword_2567A90 = (uint64_t)operator new(0x30uLL);
  unk_2567A98 = xmmword_20B9380;
  strcpy((char *)qword_2567A90, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2567AA8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2567AB0 = xmmword_20B93E0;
  strcpy((char *)qword_2567AA8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_2567AD7 = 1;
  word_2567AC0 = 95;
  strcpy((char *)&xmmword_2567AD8, "IncidentsCausingDelay_");
  HIBYTE(word_2567AEE) = 22;
  qword_2567AF0 = (uint64_t)operator new(0x19uLL);
  unk_2567AF8 = v282;
  strcpy((char *)qword_2567AF0, "NonVotableRoadIncident_");
  byte_2567B1F = 20;
  strcpy(byte_2567B08, "VotableRoadIncident_");
  byte_2567B37 = 13;
  strcpy((char *)&qword_2567B20, "AreaIncident_");
  byte_2567B4F = 15;
  strcpy((char *)&qword_2567B38, "CongestionZone_");
  qword_2567B50 = (uint64_t)operator new(0x20uLL);
  unk_2567B58 = v281;
  strcpy((char *)qword_2567B50, "EVModifiedChargingStops_");
  byte_2567B7F = 13;
  strcpy((char *)&qword_2567B68, "EVDisconnect_");
  byte_2567B97 = 12;
  strcpy((char *)&qword_2567B80, "EVReconnect_");
  qword_2567B98 = (uint64_t)operator new(0x20uLL);
  unk_2567BA0 = v279;
  strcpy((char *)qword_2567B98, "EVOfflineToOnlineTransition_");
  byte_2567BC7 = 13;
  strcpy((char *)&qword_2567BB0, "EVOfflineSAR_");
  byte_2567BDF = 21;
  strcpy((char *)&xmmword_2567BC8, "EVTowingNotSupported_");
  byte_2567BF7 = 18;
  strcpy(byte_2567BE0, "EVInfeasibleRoute_");
  qword_2567BF8 = (uint64_t)operator new(0x38uLL);
  unk_2567C00 = xmmword_20B8DF0;
  strcpy((char *)qword_2567BF8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2567C10 = (uint64_t)operator new(0x40uLL);
  unk_2567C18 = xmmword_20B98C0;
  strcpy((char *)qword_2567C10, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2567C28 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2567C30 = v274;
  strcpy((char *)qword_2567C28, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_2567C40 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_2567C48 = xmmword_20B9A80;
  strcpy((char *)qword_2567C40, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2567C58 = (uint64_t)operator new(0x30uLL);
  unk_2567C60 = v273;
  strcpy((char *)qword_2567C58, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  int v187 = operator new(0x30uLL);
  qword_2567C70 = (uint64_t)v187;
  unk_2567C78 = v274;
  _OWORD *v187 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v187[1] = v269[1];
  *(_OWORD *)((char *)v187 + 28) = v269[0];
  *((unsigned char *)v187 + 44) = 0;
  qword_2567C88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2567C90 = v272;
  strcpy((char *)qword_2567C88, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v188 = operator new(0x30uLL);
  qword_2567CA0 = (uint64_t)v188;
  unk_2567CA8 = *(_OWORD *)&v265[48];
  *uint64_t v188 = *(_OWORD *)&v265[32];
  v188[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v188 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v188 + 46) = 0;
  qword_2567CB8 = (uint64_t)operator new(0x28uLL);
  unk_2567CC0 = v276;
  strcpy((char *)qword_2567CB8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2567CD0 = (uint64_t)operator new(0x28uLL);
  unk_2567CD8 = v268;
  strcpy((char *)qword_2567CD0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2567CE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2567CF0 = v281;
  strcpy((char *)qword_2567CE8, "OfflineToOnlineNewRoute_");
  qword_2567D00 = (uint64_t)operator new(0x40uLL);
  unk_2567D08 = xmmword_20B98C0;
  strcpy((char *)qword_2567D00, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_2567D2F = 20;
  strcpy(byte_2567D18, "LPR_OFFLINE_REROUTE_");
  byte_2567D47 = 16;
  strcpy((char *)&xmmword_2567D30, "LPR_OFFLINE_SAR_");
  byte_2567D5F = 20;
  strcpy(byte_2567D48, "LPR_OFFLINE_REROUTE_");
  byte_2567D77 = 16;
  strcpy((char *)&xmmword_2567D60, "LPR_OFFLINE_SAR_");
  byte_2567D8F = 19;
  strcpy(byte_2567D78, "SuggestFasterRoute_");
  qword_2567D90 = (char *)operator new(0x20uLL);
  xmmword_2567D98 = v280;
  strcpy(qword_2567D90, "AreaIncidentSaferReroute_");
  byte_2567DBF = 12;
  strcpy((char *)&qword_2567DA8, "_Remove_Stop");
  byte_2567DD7 = 13;
  strcpy((char *)&qword_2567DC0, "_Remove_Stops");
  strcpy(&byte_2567DEF, "\t_Add_Stops");
  strcpy((char *)&qword_2567DD8, "_Add_Stop");
  strcpy(&byte_2567E07, "\n_Change_Route");
  byte_2567E1F = 13;
  byte_2567E37 = 15;
  strcpy((char *)&qword_2567E20, "_Different_Stop");
  byte_2567E4F = 16;
  strcpy((char *)&xmmword_2567E38, "_Different_Stops");
  byte_2567E67 = 15;
  strcpy((char *)&qword_2567E50, "_EV_Remove_Stop");
  byte_2567E7F = 16;
  strcpy((char *)&xmmword_2567E68, "_EV_Remove_Stops");
  byte_2567E97 = 12;
  strcpy((char *)&qword_2567E80, "_EV_Add_Stop");
  byte_2567EAF = 13;
  strcpy((char *)&qword_2567E98, "_EV_Add_Stops");
  byte_2567EC7 = 15;
  strcpy((char *)&qword_2567EB0, "_EV_Low_Battery");
  byte_2567EDF = 14;
  strcpy((char *)&qword_2567EC8, "_EV_Infeasible");
  byte_2567EF7 = 15;
  strcpy((char *)&qword_2567EE0, "_EV_Last_Chance");
  qword_2567EF8 = (uint64_t)operator new(0x20uLL);
  unk_2567F00 = v281;
  strcpy((char *)qword_2567EF8, "_EV_Low_Battery_Add_Stop");
  uint64_t v189 = qword_2567DF8;
  qword_2567F10 = (uint64_t)operator new(0x20uLL);
  unk_2567F18 = v280;
  strcpy((char *)qword_2567F10, "_EV_Low_Battery_Add_Stops");
  qword_2567F28 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2567F30 = v282;
  strcpy((char *)qword_2567F28, "_EV_Infeasible_Add_Stop");
  int v190 = byte_2567E07;
  if (byte_2567E07 >= 0) {
    size_t v191 = byte_2567E07;
  }
  else {
    size_t v191 = v189;
  }
  unint64_t v192 = v191 + 14;
  if (v191 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v192 >= 0x17)
  {
    uint64_t v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17) {
      uint64_t v195 = v192 | 7;
    }
    uint64_t v196 = v195 + 1;
    int v197 = (char *)operator new(v195 + 1);
    qword_2567F48 = v191 + 14;
    unk_2567F50 = v196 | 0x8000000000000000;
    qword_2567F40 = (uint64_t)v197;
    qmemcpy(v197, "_EV_Infeasible", 14);
    int v193 = v197 + 14;
  }
  else
  {
    BYTE1(qword_2567F48) = 0;
    WORD1(qword_2567F48) = 0;
    HIDWORD(qword_2567F48) = 0;
    unk_2567F50 = 0;
    byte_2567F57 = v191 + 14;
    strcpy((char *)&qword_2567F40, "_EV_Infe");
    int v193 = (char *)&qword_2567F48 + 6;
    if (!v191)
    {
      char v194 = 1;
      goto LABEL_433;
    }
  }
  if (v190 >= 0) {
    uint64_t v198 = (uint64_t)&qword_2567DF0;
  }
  else {
    uint64_t v198 = 0x6F74535F6464415FLL;
  }
  memmove(v193, (const void *)v198, v191);
  char v194 = 0;
LABEL_433:
  v193[v191] = 0;
  int v199 = (char *)operator new(0x20uLL);
  qword_2567F58 = (uint64_t)v199;
  unk_2567F60 = v281;
  *(void *)int v199 = qword_2567EE0;
  *(void *)(v199 + 7) = *(uint64_t *)((char *)&qword_2567EE0 + 7);
  *(void *)(v199 + 15) = qword_2567DD8;
  v199[23] = word_2567DE0;
  v199[24] = 0;
  unint64_t v200 = v191 + 15;
  if (v191 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v200 > 0x16)
  {
    uint64_t v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17) {
      uint64_t v202 = v200 | 7;
    }
    uint64_t v203 = v202 + 1;
    int v201 = (uint64_t *)operator new(v202 + 1);
    qword_2567F78 = v191 + 15;
    unk_2567F80 = v203 | 0x8000000000000000;
    qword_2567F70 = (uint64_t)v201;
  }
  else
  {
    int v201 = &qword_2567F70;
    qword_2567F78 = 0;
    unk_2567F80 = 0;
    qword_2567F70 = 0;
    byte_2567F87 = v191 + 15;
  }
  *int v201 = qword_2567EE0;
  *(uint64_t *)((char *)v201 + 7) = *(uint64_t *)((char *)&qword_2567EE0 + 7);
  v204 = (char *)v201 + 15;
  if ((v194 & 1) == 0)
  {
    if (v190 >= 0) {
      int v205 = &qword_2567DF0;
    }
    else {
      int v205 = (uint64_t *)qword_2567DF0;
    }
    memmove((char *)v201 + 15, v205, v191);
  }
  v204[v191] = 0;
  byte_2567F9F = 17;
  strcpy((char *)&xmmword_2567F88, "_EV_Forced_Detour");
  qword_2567FA0 = (uint64_t)operator new(0x20uLL);
  unk_2567FA8 = v280;
  strcpy((char *)qword_2567FA0, "_EV_Higher_Arrival_Charge");
  qword_2567FB8 = (uint64_t)operator new(0x28uLL);
  unk_2567FC0 = xmmword_20B8FD0;
  strcpy((char *)qword_2567FB8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2567FE7 = 16;
  strcpy(byte_2567FD0, "_EV_Out_Of_Range");
  qword_2567FE8 = (uint64_t)operator new(0x20uLL);
  unk_2567FF0 = v275;
  strcpy((char *)qword_2567FE8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2568000, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2568016) = 22;
  qword_2568018 = (uint64_t)operator new(0x19uLL);
  unk_2568020 = v282;
  strcpy((char *)qword_2568018, "_EV_Forced_Modify_Stops");
  byte_2568047 = 19;
  strcpy(byte_2568030, "_EV_Forced_Add_Stop");
  byte_256805F = 20;
  strcpy((char *)&xmmword_2568048, "_EV_Forced_Add_Stops");
  byte_2568077 = 21;
  strcpy(byte_2568060, "_EV_Battery_Info_Lost");
  qword_2568078 = (uint64_t)operator new(0x20uLL);
  unk_2568080 = v280;
  strcpy((char *)qword_2568078, "_EV_Battery_Info_Restored");
  qword_2568090 = (uint64_t)operator new(0x20uLL);
  unk_2568098 = v281;
  strcpy((char *)qword_2568090, "_EV_Towing_Not_Supported");
  qword_25680A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25680B0 = v270;
  strcpy((char *)qword_25680A8, "_EV_Offline_to_Online_Transition");
  byte_25680D7 = 15;
  strcpy((char *)&qword_25680C0, "_EV_Offline_SAR");
  qword_25680D8 = (uint64_t)operator new(0x20uLL);
  unk_25680E0 = v279;
  strcpy((char *)qword_25680D8, "_Offline_to_Online_New_Route");
  byte_2568107 = 12;
  strcpy((char *)&qword_25680F0, "BannerButton");
  byte_256811F = 8;
  strcpy((char *)&qword_2568108, "_Dismiss");
  byte_2568137 = 3;
  word_2568120 = 20319;
  byte_2568122 = 75;
  byte_2568123 = 0;
  byte_256814F = 11;
  strcpy((char *)&qword_2568138, "_Still_Here");
  byte_2568167 = 8;
  strcpy((char *)&qword_2568150, "_Cleared");
  qmemcpy(&byte_256817F, "\nBannerButton", 13);
  strcpy((char *)&qword_2568168, "_No_Thanks");
  uint64_t v206 = qword_25680F8;
  qword_2568190 = 0x1400000000000000;
  *(void *)algn_256818C = 0x7373696D7369445FLL;
  qword_25681A8 = 0xF00000000000000;
  qword_25681A0 = 0x4B4F5F6E6F7474;
  int v207 = byte_2567E97;
  if (byte_2567E97 >= 0) {
    size_t v208 = byte_2567E97;
  }
  else {
    size_t v208 = qword_2567E88;
  }
  unint64_t v209 = v208 + 12;
  qword_2568198 = *(void *)"BannerButton";
  if (v208 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 >= 0x17)
  {
    uint64_t v211 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v211 = v209 | 7;
    }
    uint64_t v212 = v211 + 1;
    int v213 = (char *)operator new(v211 + 1);
    qword_25681B8 = v208 + 12;
    unk_25681C0 = v212 | 0x8000000000000000;
    qword_25681B0 = (uint64_t)v213;
    *((_DWORD *)v213 + 2) = 1852798068;
    *(void *)int v213 = *(void *)"BannerButton";
    uint64_t v210 = v213 + 12;
  }
  else
  {
    BYTE5(qword_25681B8) = 0;
    HIWORD(qword_25681B8) = 0;
    unk_25681C0 = 0;
    byte_25681C7 = v208 + 12;
    strcpy((char *)&qword_25681B0, "BannerButton");
    uint64_t v210 = (char *)&qword_25681B8 + 4;
    if (!v208) {
      goto LABEL_458;
    }
  }
  if (v207 >= 0) {
    int v214 = &qword_2567E80;
  }
  else {
    int v214 = (uint64_t *)qword_2567E80;
  }
  memmove(v210, v214, v208);
LABEL_458:
  v210[v208] = 0;
  int v215 = byte_2567EAF;
  if (byte_2567EAF >= 0) {
    size_t v216 = byte_2567EAF;
  }
  else {
    size_t v216 = unk_2567EA0;
  }
  unint64_t v217 = v216 + 12;
  if (v216 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v217 >= 0x17)
  {
    uint64_t v219 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17) {
      uint64_t v219 = v217 | 7;
    }
    uint64_t v220 = v219 + 1;
    int v221 = (char *)operator new(v219 + 1);
    qword_25681D0 = v216 + 12;
    unk_25681D8 = v220 | 0x8000000000000000;
    qword_25681C8 = (uint64_t)v221;
    *(void *)int v221 = qword_25680F0;
    *((_DWORD *)v221 + 2) = qword_25680F8;
    uint64_t v218 = v221 + 12;
  }
  else
  {
    qword_25681D0 = 0;
    unk_25681D8 = 0;
    byte_25681DF = v216 + 12;
    LODWORD(qword_25681D0) = qword_25680F8;
    qword_25681C8 = qword_25680F0;
    uint64_t v218 = (char *)&qword_25681D0 + 4;
    if (!v216) {
      goto LABEL_472;
    }
  }
  if (v215 >= 0) {
    int v222 = &qword_2567E98;
  }
  else {
    int v222 = (uint64_t *)qword_2567E98;
  }
  memmove(v218, v222, v216);
LABEL_472:
  v218[v216] = 0;
  int v223 = byte_2567E67;
  if (byte_2567E67 >= 0) {
    size_t v224 = byte_2567E67;
  }
  else {
    size_t v224 = unk_2567E58;
  }
  unint64_t v225 = v224 + 12;
  if (v224 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 >= 0x17)
  {
    uint64_t v227 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v227 = v225 | 7;
    }
    uint64_t v228 = v227 + 1;
    int v229 = (char *)operator new(v227 + 1);
    qword_25681E8 = v224 + 12;
    unk_25681F0 = v228 | 0x8000000000000000;
    qword_25681E0 = (uint64_t)v229;
    *(void *)int v229 = qword_25680F0;
    *((_DWORD *)v229 + 2) = qword_25680F8;
    uint64_t v226 = v229 + 12;
  }
  else
  {
    qword_25681E8 = 0;
    unk_25681F0 = 0;
    byte_25681F7 = v224 + 12;
    LODWORD(qword_25681E8) = qword_25680F8;
    qword_25681E0 = qword_25680F0;
    uint64_t v226 = (char *)&qword_25681E8 + 4;
    if (!v224) {
      goto LABEL_486;
    }
  }
  if (v223 >= 0) {
    int v230 = &qword_2567E50;
  }
  else {
    int v230 = (uint64_t *)qword_2567E50;
  }
  memmove(v226, v230, v224);
LABEL_486:
  v226[v224] = 0;
  int v231 = byte_2568107;
  if (byte_2568107 >= 0) {
    size_t v232 = byte_2568107;
  }
  else {
    size_t v232 = v206;
  }
  int v233 = byte_2567E7F;
  if (byte_2567E7F >= 0) {
    size_t v234 = byte_2567E7F;
  }
  else {
    size_t v234 = *((void *)&xmmword_2567E68 + 1);
  }
  unint64_t v235 = v234 + v232;
  if (v234 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v235 <= 0x16)
  {
    v236 = &qword_25681F8;
    qword_2568200 = 0;
    unk_2568208 = 0;
    qword_25681F8 = 0;
    byte_256820F = v234 + v232;
    if (!v232) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v243 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v235 | 7) != 0x17) {
    uint64_t v243 = v235 | 7;
  }
  uint64_t v244 = v243 + 1;
  v236 = (uint64_t *)operator new(v243 + 1);
  qword_2568200 = v234 + v232;
  unk_2568208 = v244 | 0x8000000000000000;
  qword_25681F8 = (uint64_t)v236;
  if (v232)
  {
LABEL_495:
    if (v231 >= 0) {
      int v237 = &qword_25680F0;
    }
    else {
      int v237 = (uint64_t *)qword_25680F0;
    }
    memmove(v236, v237, v232);
  }
LABEL_499:
  v238 = (char *)v236 + v232;
  if (v234)
  {
    if (v233 >= 0) {
      int v239 = &xmmword_2567E68;
    }
    else {
      int v239 = (long long *)xmmword_2567E68;
    }
    memmove(v238, v239, v234);
  }
  v238[v234] = 0;
  unint64_t v240 = v232 + 11;
  if (v232 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 >= 0x17)
  {
    uint64_t v245 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17) {
      uint64_t v245 = v240 | 7;
    }
    uint64_t v246 = v245 + 1;
    int v241 = (uint64_t *)operator new(v245 + 1);
    qword_2568218 = v232 + 11;
    unk_2568220 = v246 | 0x8000000000000000;
    qword_2568210 = (uint64_t)v241;
  }
  else
  {
    int v241 = &qword_2568210;
    qword_2568218 = 0;
    unk_2568220 = 0;
    qword_2568210 = 0;
    byte_2568227 = v232 + 11;
    if (!v232)
    {
      *(_DWORD *)((char *)&qword_2568210 + 7) = *(_DWORD *)((char *)&qword_2568138 + 7);
      qword_2568210 = qword_2568138;
      BYTE3(qword_2568218) = 0;
      LOBYTE(v242) = 8;
      goto LABEL_520;
    }
  }
  if (v231 >= 0) {
    int v247 = &qword_25680F0;
  }
  else {
    int v247 = (uint64_t *)qword_25680F0;
  }
  memmove(v241, v247, v232);
  int v248 = (char *)v241 + v232;
  int v249 = *(_DWORD *)((char *)&qword_2568138 + 7);
  *(void *)int v248 = qword_2568138;
  *(_DWORD *)(v248 + 7) = v249;
  v248[11] = 0;
  unint64_t v242 = v232 + 8;
  if (v232 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v242 <= 0x16)
  {
LABEL_520:
    v250 = &qword_2568228;
    qword_2568230 = 0;
    unk_2568238 = 0;
    qword_2568228 = 0;
    byte_256823F = v242;
    if (!v232) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v242 | 7) != 0x17) {
    uint64_t v263 = v242 | 7;
  }
  uint64_t v264 = v263 + 1;
  v250 = (uint64_t *)operator new(v263 + 1);
  qword_2568230 = v232 + 8;
  unk_2568238 = v264 | 0x8000000000000000;
  qword_2568228 = (uint64_t)v250;
  if (v232)
  {
LABEL_521:
    if (v231 >= 0) {
      int v251 = &qword_25680F0;
    }
    else {
      int v251 = (uint64_t *)qword_25680F0;
    }
    memmove(v250, v251, v232);
  }
LABEL_525:
  int v252 = (char *)v250 + v232;
  *(void *)int v252 = qword_2568150;
  v252[8] = 0;
  int v253 = byte_256817F;
  if (byte_256817F >= 0) {
    size_t v254 = byte_256817F;
  }
  else {
    size_t v254 = qword_2568170;
  }
  unint64_t v255 = v254 + v232;
  if (v254 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v255 <= 0x16)
  {
    v256 = &qword_2568240;
    qword_2568248 = 0;
    unk_2568250 = 0;
    qword_2568240 = 0;
    byte_2568257 = v254 + v232;
    if (!v232) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v255 | 7) != 0x17) {
    uint64_t v261 = v255 | 7;
  }
  uint64_t v262 = v261 + 1;
  v256 = (uint64_t *)operator new(v261 + 1);
  qword_2568248 = v254 + v232;
  unk_2568250 = v262 | 0x8000000000000000;
  qword_2568240 = (uint64_t)v256;
  if (v232)
  {
LABEL_531:
    if (v231 >= 0) {
      int v257 = &qword_25680F0;
    }
    else {
      int v257 = (uint64_t *)qword_25680F0;
    }
    memmove(v256, v257, v232);
  }
LABEL_535:
  v258 = (char *)v256 + v232;
  if (v254)
  {
    if (v253 >= 0) {
      int v259 = &qword_2568168;
    }
    else {
      int v259 = (uint64_t *)qword_2568168;
    }
    memmove(v258, v259, v254);
  }
  v258[v254] = 0;
  strcpy(&byte_256826F, "\n{newroute}");
  strcpy((char *)&qword_2568258, "{roadname}");
  strcpy(&byte_2568287, "\n{count}");
  byte_256829F = 7;
  strcpy(&byte_25682B7, "\n{dur}");
  strcpy((char *)&qword_25682A0, "{duration}");
  byte_25682CF = 5;
  qword_25682D0 = (uint64_t)operator new(0x20uLL);
  unk_25682D8 = v278;
  strcpy((char *)qword_25682D0, "{PleaseProceedWithCaution}");
  byte_25682FF = 15;
  strcpy((char *)&qword_25682E8, "{UserRouteName}");
  byte_2568317 = 20;
  strcpy((char *)&xmmword_2568300, "{SuggestedRouteName}");
  byte_256832F = 18;
  strcpy(byte_2568318, "Speed_Camera_Ahead");
  qword_2568330 = (uint64_t)operator new(0x20uLL);
  unk_2568338 = v277;
  strcpy((char *)qword_2568330, "Red_Light_Camera_Ahead_Spoken");
  qword_2568348 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2568350 = v277;
  strcpy((char *)qword_2568348, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2568360 = (uint64_t)operator new(0x28uLL);
  unk_2568368 = v272;
  strcpy((char *)qword_2568360, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2568378 = (uint64_t)operator new(0x28uLL);
  unk_2568380 = v266;
  strcpy((char *)qword_2568378, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2568390 = (uint64_t)operator new(0x20uLL);
  unk_2568398 = v279;
  strcpy((char *)qword_2568390, "Camera_Ahead_Multiple_Spoken");
  qword_25683A8 = (uint64_t)operator new(0x30uLL);
  unk_25683B0 = v267;
  strcpy((char *)qword_25683A8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25683C0 = (char *)operator new(0x30uLL);
  strcpy(qword_25683C0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25683EF = 16;
  xmmword_25683C8 = v267;
  strcpy(byte_25683D8, "_Speed_Limit_Mph");
  byte_2568407 = 16;
  strcpy(algn_25683F0, "_Speed_Limit_Kph");
  byte_256841F = 11;
  strcpy((char *)&qword_2568408, "Watch_Speed");
  byte_2568437 = 4;
  strcpy((char *)&dword_2568420, "_One");
  byte_256844F = 4;
  strcpy((char *)&dword_2568438, "_Two");
  byte_2568467 = 4;
  strcpy((char *)&dword_2568450, "_Few");
  byte_256847F = 5;
  strcpy((char *)&dword_2568468, "_Many");
  byte_2568497 = 6;
  strcpy((char *)&dword_2568480, "_Other");
  byte_25684AF = 4;
  strcpy((char *)&dword_2568498, "_ONE");
  byte_25684C7 = 7;
  strcpy((char *)&dword_25684B0, "{Speed}");
  byte_25684DF = 8;
  strcpy((char *)&qword_25684C8, "Dismount");
  byte_25684F7 = 4;
  strcpy((char *)&dword_25684E0, "Walk");
  byte_256850F = 5;
  strcpy((char *)&dword_25684F8, "Mount");
  byte_2568527 = 7;
  strcpy((char *)&dword_2568510, "Remount");
  strcpy(&byte_256853F, "\t_Crosswalk");
  strcpy((char *)&qword_2568528, "Walk_Road");
  strcpy(&byte_2568557, "\n_PLURAL");
  byte_256856F = 7;
  strcpy(&byte_2568587, "\n{description1}");
  strcpy((char *)&qword_2568570, "_SECONDARY");
  byte_256859F = 14;
  byte_25685B7 = 14;
  strcpy((char *)&qword_25685A0, "{description2}");
  byte_25685CF = 21;
  strcpy((char *)&xmmword_25685B8, "TWO_ROAD_DESCRIPTIONS");
  byte_25685E7 = 17;
  strcpy((char *)&xmmword_25685D0, "{SlopePercentage}");
  byte_25685FF = 15;
  strcpy((char *)&qword_25685E8, "_Protected_Lane");
  strcpy(&byte_2568617, "\n_Paved_Path");
  strcpy((char *)&qword_2568600, "_Bike_Path");
  byte_256862F = 11;
  byte_2568647 = 15;
  strcpy((char *)&qword_2568630, "_Dedicated_Lane");
  byte_256865F = 12;
  strcpy((char *)&qword_2568648, "_Shared_Path");
  strcpy(&byte_2568677, "\n_UnnamedRoad");
  strcpy((char *)&qword_2568660, "_Bike_Lane");
  byte_256868F = 12;
  byte_25686A7 = 5;
  strcpy((char *)&dword_2568690, "_Path");
  byte_25686BF = 6;
  strcpy((char *)&dword_25686A8, "_Trail");
  strcpy(&byte_25686D7, "\t_Plaza");
  strcpy((char *)&qword_25686C0, "_Sidewalk");
  byte_25686EF = 6;
  byte_2568707 = 15;
  strcpy((char *)&qword_25686F0, "_Moving_Walkway");
  byte_256871F = 14;
  strcpy((char *)&qword_2568708, "Two_Stage_Turn");
  byte_2568737 = 16;
  strcpy((char *)&xmmword_2568720, "{OptionalPeriod}");
  byte_256874F = 18;
  strcpy((char *)&xmmword_2568738, "Advisory_Separator");
  byte_2568767 = 6;
  strcpy((char *)&dword_2568750, "Period");
  byte_256877F = 21;
  strcpy((char *)&xmmword_2568768, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2568780, "Advisory_Title_Notices");
  HIBYTE(word_2568796) = 22;
  byte_25687AF = 7;
  strcpy((char *)&dword_2568798, "_DETAIL");
  byte_25687C7 = 17;
  strcpy((char *)&xmmword_25687B0, "_LONG_REGION_LIST");
  byte_25687DF = 16;
  strcpy((char *)&xmmword_25687C8, "Advisory_Grouped");
  byte_25687F7 = 11;
  strcpy((char *)&qword_25687E0, "_Advisories");
  qword_25687F8 = (uint64_t)operator new(0x20uLL);
  unk_2568800 = v275;
  strcpy((char *)qword_25687F8, "Advisory_WILDFIRE_METADATA_");
  byte_2568827 = 8;
  strcpy((char *)&qword_2568810, "Advisory");
  byte_256883F = 13;
  strcpy((char *)&qword_2568828, "MPR_NUM_STOPS");
  byte_2568857 = 17;
  strcpy(byte_2568840, "EV_CHARGE_STATION");
  byte_256886F = 11;
  strcpy((char *)&qword_2568858, "_NAMED_CITY");
  byte_2568887 = 5;
  strcpy((char *)&dword_2568870, "_Stop");
  strcpy(&byte_256889F, "\n{StopsCount}");
  strcpy((char *)&qword_2568888, "{CityName}");
  byte_25688B7 = 12;
  byte_25688CF = 11;
  strcpy((char *)&qword_25688B8, "_With_Other");
  byte_25688E7 = 15;
  strcpy((char *)&qword_25688D0, "{DepartureTime}");
  qword_25688E8 = (uint64_t)operator new(0x28uLL);
  unk_25688F0 = v276;
  strcpy((char *)qword_25688E8, "Ending_Charge_Station_Port_Availability");
  qword_2568900 = (uint64_t)operator new(0x28uLL);
  unk_2568908 = v268;
  strcpy((char *)qword_2568900, "Ending_Charge_Station_No_Availability");
  qword_2568918 = (uint64_t)operator new(0x28uLL);
  unk_2568920 = v272;
  strcpy((char *)qword_2568918, "Ending_Charge_Station_No_Real_Time");
  byte_2568947 = 16;
  strcpy((char *)&xmmword_2568930, "{AvailablePorts}");
  byte_256895F = 12;
  strcpy((char *)&qword_2568948, "{TotalPorts}");
  byte_2568977 = 14;
  strcpy((char *)&qword_2568960, "{ManeuverIcon}");
  qword_2568978 = (uint64_t)operator new(0x38uLL);
  unk_2568980 = xmmword_20B9A60;
  strcpy((char *)qword_2568978, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2568990 = (uint64_t)operator new(0x20uLL);
  unk_2568998 = v275;
  strcpy((char *)qword_2568990, "Walking_Destination_Unnamed");
  qword_25689A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25689B0 = v277;
  strcpy((char *)qword_25689A8, "TrafficDelay_Label_Title_Sign");
  qword_25689C0 = (uint64_t)operator new(0x20uLL);
  unk_25689C8 = v279;
  strcpy((char *)qword_25689C0, "Special_Guidance_Instruction");
  byte_25689EF = 2;
  strcpy((char *)&word_25689D8, "CZ");
  byte_2568A07 = 3;
  dword_25689F0 = 5919811;
  unk_2568A1F = 3;
  dword_2568A08 = 6243649;
  byte_2568A37 = 0;
  byte_2568A4F = 7;
  strcpy((char *)&dword_2568A38, "TRANSIT");
  byte_2568A67 = 7;
  strcpy((char *)&dword_2568A50, "OFFLINE");
  qword_2568A68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2568A70 = v266;
  strcpy((char *)qword_2568A68, "Advisory_Card_French_Climate_Law_Title");
  qword_2568A80 = (uint64_t)operator new(0x30uLL);
  unk_2568A88 = xmmword_20B93C0;
  strcpy((char *)qword_2568A80, "Advisory_Card_French_Climate_Law_Details");
  qword_2568A98 = (uint64_t)operator new(0x30uLL);
  unk_2568AA0 = v273;
  strcpy((char *)qword_2568A98, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2568AB0 = (uint64_t)operator new(0x20uLL);
  unk_2568AB8 = v279;
  strcpy((char *)qword_2568AB0, "{ClimateLawLearnMoreWeblink}");
  byte_2568ADF = 3;
  dword_2568AC8 = 4280902;
  qword_2568AE0 = (uint64_t)operator new(0x70uLL);
  unk_2568AE8 = xmmword_20E81E0;
  strcpy((char *)qword_2568AE0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_53B91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t *sub_53BC74(uint64_t *a1, void *a2, uint64_t a3)
{
  size_t v6 = sub_3D9344(a1, a2);
  sub_3E1B78(v6 + 11, a2);
  a1[17] = sub_3750CC(a2);
  a1[18] = sub_375394(a2);
  sub_4BBDC0((uint64_t)(a1 + 19), a3);
  char v9 = 0;
  LOBYTE(__p) = 0;
  sub_5F2D5C((uint64_t)(a1 + 211), &__p, *(unsigned char *)(a3 + 1414));
  if (v9 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_53BD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v16);
  if (*(char *)(v15 + 135) < 0)
  {
    operator delete(*(void **)(v15 + 112));
    if ((*(char *)(v15 + 63) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v15 + 63) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v15 + 40));
  _Unwind_Resume(a1);
}

void **sub_53BD98(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_2DF404(v3 - 144);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_53BDF4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_3DCBBC(a1);
  sub_3E1B78((uint64_t *)(v6 + 88), a2);
  *(void *)(a1 + 136) = sub_3750CC(a2);
  *(void *)(a1 + 144) = sub_375394(a2);
  sub_4BBDC0(a1 + 152, a3);
  char v9 = 0;
  LOBYTE(__p) = 0;
  sub_5F2D5C(a1 + 1688, &__p, *(unsigned char *)(a3 + 1414));
  if (v9 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_53BEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v16);
  if (*(char *)(v15 + 135) < 0)
  {
    operator delete(*(void **)(v15 + 112));
    if ((*(char *)(v15 + 63) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v15 + 63) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v15 + 40));
  _Unwind_Resume(a1);
}

void sub_53BF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)sub_3E2234(*(void *)(a1 + 144), *(void *)a2);
  int v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u)
  {
    uint64_t v6 = v5[4];
    if (v6)
    {
      unint64_t v7 = (unsigned int *)((char *)v4 + v6);
      uint64_t v8 = *v7;
      uint64_t v10 = (char *)v7 + v8 + 4;
      std::string::size_type v9 = *(unsigned int *)((char *)v7 + v8);
      if (v9 >= 0x17)
      {
        if ((v9 | 7) == 0x17) {
          uint64_t v12 = (v9 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v12 = v9 | 7;
        }
        p_dst = (std::string *)operator new(v12 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v12 - 0x7FFFFFFFFFFFFFFFLL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v7 + v8);
        p_dst = &__dst;
        if (!v9) {
          goto LABEL_12;
        }
      }
      memcpy(p_dst, v10, v9);
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      goto LABEL_13;
    }
  }
  memset(&__dst, 0, sizeof(__dst));
LABEL_13:
  std::string::operator=((std::string *)(a1 + 1688), &__dst);
  int v13 = (int *)sub_3E2234(*(void *)(a1 + 144), *(void *)a2);
  size_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0x11u && (uint64_t v15 = v14[8]) != 0) {
    uint64_t v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  }
  else {
    uint64_t v16 = 0;
  }
  sub_53D46C(v16, (uint64_t)&v79);
  memset(&__p, 0, sizeof(__p));
  sub_6F60AC((unsigned __int16 *)(a1 + 1688), (uint64_t *)&v79, (uint64_t *)&__p, a1 + 1120, (uint64_t)&__str);
  std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    uint64_t v19 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 9) < 0) {
          operator delete(*(void **)(size - 32));
        }
        size -= 40;
      }
      while (size != v17);
      uint64_t v19 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v17;
    operator delete(v19);
  }
  std::string::operator=((std::string *)(a2 + 56), &__str);
  uint64_t v20 = (int *)sub_3E2234(*(void *)(a1 + 144), *(void *)a2);
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 0x13u && (uint64_t v22 = v21[9]) != 0) {
    long long v23 = (unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
  }
  else {
    long long v23 = 0;
  }
  sub_53D46C(v23, (uint64_t)&v68);
  v47[0] = 0;
  v47[1] = 0;
  uint64_t v48 = 0;
  sub_6F60AC((unsigned __int16 *)(a1 + 1688), (uint64_t *)&v68, (uint64_t *)v47, a1 + 1120, (uint64_t)&__p);
  int v24 = (void **)v47[0];
  if (v47[0])
  {
    size_t v25 = (void **)v47[1];
    size_t v26 = v47[0];
    if (v47[1] != v47[0])
    {
      do
      {
        if (*((char *)v25 - 9) < 0) {
          operator delete(*(v25 - 4));
        }
        v25 -= 5;
      }
      while (v25 != v24);
      size_t v26 = v47[0];
    }
    v47[1] = v24;
    operator delete(v26);
  }
  std::string::operator=((std::string *)(a2 + 80), &__p);
  unint64_t v27 = (int *)sub_3E2234(*(void *)(a1 + 144), *(void *)a2);
  int v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x15u && (uint64_t v29 = v28[10]) != 0) {
    size_t v30 = (unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  }
  else {
    size_t v30 = 0;
  }
  sub_53D46C(v30, (uint64_t)&v57);
  memset(&v46, 0, sizeof(v46));
  sub_6F60AC((unsigned __int16 *)(a1 + 1688), (uint64_t *)&v57, (uint64_t *)&v46, a1 + 1120, (uint64_t)v47);
  std::string::size_type v31 = v46.__r_.__value_.__r.__words[0];
  if (v46.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v32 = v46.__r_.__value_.__l.__size_;
    size_t v33 = (void *)v46.__r_.__value_.__r.__words[0];
    if (v46.__r_.__value_.__l.__size_ != v46.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v32 - 9) < 0) {
          operator delete(*(void **)(v32 - 32));
        }
        v32 -= 40;
      }
      while (v32 != v31);
      size_t v33 = (void *)v46.__r_.__value_.__r.__words[0];
    }
    v46.__r_.__value_.__l.__size_ = v31;
    operator delete(v33);
  }
  unint64_t v34 = *(void *)(a2 + 112);
  if (v34 >= *(void *)(a2 + 120))
  {
    *(void *)(a2 + 112) = sub_1D740((char **)(a2 + 104), (uint64_t)v47);
    if (!*(unsigned char *)(a2 + 129)) {
      goto LABEL_60;
    }
  }
  else
  {
    if (SHIBYTE(v48) < 0)
    {
      sub_4200(*(unsigned char **)(a2 + 112), v47[0], (unint64_t)v47[1]);
    }
    else
    {
      long long v35 = *(_OWORD *)v47;
      *(void *)(v34 + 16) = v48;
      *(_OWORD *)unint64_t v34 = v35;
    }
    *(void *)(a2 + 112) = v34 + 24;
    *(void *)(a2 + 112) = v34 + 24;
    if (!*(unsigned char *)(a2 + 129)) {
      goto LABEL_60;
    }
  }
  std::string::size_type v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v36 = __dst.__r_.__value_.__l.__size_;
  }
  if (!v36
    || (sub_64C48((unsigned __int8 *)&__dst, &v46),
        std::string::operator=((std::string *)(a2 + 136), &v46),
        (SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
LABEL_60:
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_87;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_61:
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v55);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_62:
    if ((v52 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v53);
  if ((v52 & 0x80000000) == 0)
  {
LABEL_63:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v51);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v48) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v49);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
  {
LABEL_65:
    uint64_t v37 = v57;
    if (v57) {
      goto LABEL_66;
    }
LABEL_92:
    if (v67 < 0) {
      goto LABEL_70;
    }
    goto LABEL_93;
  }
LABEL_91:
  operator delete(v47[0]);
  uint64_t v37 = v57;
  if (!v57) {
    goto LABEL_92;
  }
LABEL_66:
  uint64_t v38 = (uint64_t)v58;
  unint64_t v39 = v37;
  if (v58 != v37)
  {
    do
      uint64_t v38 = sub_2DF404(v38 - 144);
    while ((void *)v38 != v37);
    unint64_t v39 = v57;
  }
  uint64_t v58 = v37;
  operator delete(v39);
  if (v67 < 0)
  {
LABEL_70:
    operator delete(v66);
    if (v65 < 0) {
      goto LABEL_71;
    }
    goto LABEL_94;
  }
LABEL_93:
  if (v65 < 0)
  {
LABEL_71:
    operator delete(v64);
    if (v63 < 0) {
      goto LABEL_72;
    }
    goto LABEL_95;
  }
LABEL_94:
  if (v63 < 0)
  {
LABEL_72:
    operator delete(v62);
    if (v61 < 0) {
      goto LABEL_73;
    }
    goto LABEL_96;
  }
LABEL_95:
  if (v61 < 0)
  {
LABEL_73:
    operator delete(v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_74;
    }
    goto LABEL_97;
  }
LABEL_96:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_74:
    operator delete(__p.__r_.__value_.__l.__data_);
    long long v40 = v68;
    if (!v68) {
      goto LABEL_75;
    }
    goto LABEL_98;
  }
LABEL_97:
  long long v40 = v68;
  if (!v68)
  {
LABEL_75:
    if ((v78 & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_102;
  }
LABEL_98:
  uint64_t v44 = (uint64_t)v69;
  unint64_t v45 = v40;
  if (v69 != v40)
  {
    do
      uint64_t v44 = sub_2DF404(v44 - 144);
    while ((void *)v44 != v40);
    unint64_t v45 = v68;
  }
  int v69 = v40;
  operator delete(v45);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_76:
    if ((v76 & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v77);
  if ((v76 & 0x80000000) == 0)
  {
LABEL_77:
    if ((v74 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(v75);
  if ((v74 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v72 & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete(v73);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_106;
  }
LABEL_105:
  operator delete(v71);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_80:
    uint64_t v41 = (uint64_t)v79;
    if (v79) {
      goto LABEL_81;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(__str.__r_.__value_.__l.__data_);
  uint64_t v41 = (uint64_t)v79;
  if (v79)
  {
LABEL_81:
    uint64_t v42 = v80;
    int v43 = (void *)v41;
    if (v80 != v41)
    {
      do
        uint64_t v42 = sub_2DF404(v42 - 144);
      while (v42 != v41);
      int v43 = v79;
    }
    uint64_t v80 = v41;
    operator delete(v43);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_85;
    }
    return;
  }
LABEL_107:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_85:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_53C52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59)
{
  *(void *)(v59 + 112) = v60;
  sub_4A50F4((uint64_t)&a15);
  sub_53BD98(&a34);
  sub_4A50F4((uint64_t)&a37);
  sub_53BD98(&a56);
  sub_4A50F4((uint64_t)&a59);
  sub_53BD98((void **)(v61 - 112));
  if (*(char *)(v61 - 65) < 0) {
    operator delete(*(void **)(v61 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_53C608()
{
  if ((*(char *)(v0 - 65) & 0x80000000) == 0) {
    JUMPOUT(0x53C600);
  }
  JUMPOUT(0x53C5F8);
}

uint64_t *sub_53C618(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_3E19B8(a1, a2);
  sub_3E1B78(v6 + 11, a2);
  a1[17] = sub_3750CC(a2);
  a1[18] = sub_375394(a2);
  sub_4BBDC0((uint64_t)(a1 + 19), a3);
  char v9 = 0;
  LOBYTE(__p) = 0;
  sub_5F2D5C((uint64_t)(a1 + 211), &__p, *(unsigned char *)(a3 + 1414));
  if (v9 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_53C6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v16);
  if (*(char *)(v15 + 135) < 0)
  {
    operator delete(*(void **)(v15 + 112));
    if ((*(char *)(v15 + 63) & 0x80000000) == 0) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v15 + 63) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v15 + 40));
  _Unwind_Resume(a1);
}

void sub_53C73C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 1595))
  {
    uint64_t v4 = a1;
    int v5 = *(unsigned __int8 *)(a1 + 1379);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5 == 2)
    {
      uint64_t v6 = a2;
      sub_3E03C4(a1, a2, (uint64_t)&v48);
      unint64_t v7 = v48;
      size_t v26 = v49;
      if (v48 != v49)
      {
        uint64_t v25 = v4 + 88;
        while (1)
        {
          uint64_t v8 = v7[2];
          unint64_t v47 = *v7;
          sub_53CAEC(v25, &v47, &v46);
          uint64_t v10 = sub_46CE8C(v6, v8, v9);
          char v11 = *((unsigned char *)v7 + 24);
          uint64_t v12 = v4;
          uint64_t v13 = *(void *)(v4 + 136);
          size_t v14 = v6;
          uint64_t v15 = sub_46C8EC(v6, v8);
          sub_2954EC(v13, *(void *)(v15 + 32), (uint64_t)v43);
          unint64_t v16 = v47;
          unint64_t v17 = sub_2E1AA4((uint64_t)v43);
          int v19 = v18;
          unint64_t v27 = v16;
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            sub_4200(&v28, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          }
          else {
            std::string v28 = v46;
          }
          uint64_t v29 = v10;
          unint64_t v30 = v17;
          int v31 = v19;
          uint64_t v36 = 0;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          char v37 = v11 ^ 1;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          long long __p = 0;
          __int16 v42 = *((_WORD *)v7 + 12);
          BOOL v38 = *((unsigned char *)v7 + 8) != 0;
          uint64_t v4 = v12;
          sub_53BF18(v12, (uint64_t)&v27);
          uint64_t v6 = v14;
          unint64_t v20 = a3[1];
          if (v20 >= a3[2])
          {
            uint64_t v21 = sub_53DE68(a3, (uint64_t)&v27);
          }
          else
          {
            sub_4BD34C(a3[1], (uint64_t)&v27);
            uint64_t v21 = v20 + 168;
            a3[1] = v20 + 168;
          }
          a3[1] = v21;
          if (SHIBYTE(v41) < 0)
          {
            operator delete(__p);
            uint64_t v22 = (void **)v35;
            if (!(void)v35)
            {
LABEL_14:
              if ((SHIBYTE(v34) & 0x80000000) == 0) {
                goto LABEL_15;
              }
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v22 = (void **)v35;
            if (!(void)v35) {
              goto LABEL_14;
            }
          }
          int v24 = (void **)*((void *)&v35 + 1);
          if (*((void ***)&v35 + 1) == v22)
          {
            *((void *)&v35 + 1) = v22;
            operator delete(v22);
            if ((SHIBYTE(v34) & 0x80000000) == 0) {
              goto LABEL_15;
            }
          }
          else
          {
            do
            {
              if (*((char *)v24 - 1) < 0) {
                operator delete(*(v24 - 3));
              }
              v24 -= 3;
            }
            while (v24 != v22);
            *((void *)&v35 + 1) = v22;
            operator delete((void *)v35);
            if ((SHIBYTE(v34) & 0x80000000) == 0)
            {
LABEL_15:
              if ((SBYTE7(v33) & 0x80000000) == 0) {
                goto LABEL_16;
              }
              goto LABEL_30;
            }
          }
LABEL_29:
          operator delete(*((void **)&v33 + 1));
          if ((SBYTE7(v33) & 0x80000000) == 0)
          {
LABEL_16:
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_31;
            }
            goto LABEL_17;
          }
LABEL_30:
          operator delete((void *)v32);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_31:
            operator delete(v28.__r_.__value_.__l.__data_);
            long long v23 = v44;
            if (!v44) {
              goto LABEL_19;
            }
LABEL_18:
            unint64_t v45 = v23;
            operator delete(v23);
            goto LABEL_19;
          }
LABEL_17:
          long long v23 = v44;
          if (v44) {
            goto LABEL_18;
          }
LABEL_19:
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
          v7 += 4;
          if (v7 == v26)
          {
            unint64_t v7 = v48;
            break;
          }
        }
      }
      if (v7)
      {
        BOOL v49 = v7;
        operator delete(v7);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_53CA28(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

void sub_53CA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 + 8) = v6;
  sub_4BCFD0((uint64_t)va);
  double v9 = *(void **)(v7 - 176);
  if (v9)
  {
    *(void *)(v7 - 168) = v9;
    operator delete(v9);
    if ((*(char *)(v7 - 121) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v10 = *(void **)(v7 - 112);
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v7 - 121) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v7 - 144));
  uint64_t v10 = *(void **)(v7 - 112);
  if (!v10)
  {
LABEL_4:
    sub_4B1DB4((void **)v5);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v7 - 104) = v10;
  operator delete(v10);
  sub_4B1DB4((void **)v5);
  _Unwind_Resume(a1);
}

void sub_53CAEC(uint64_t a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = (int *)sub_3E2234(*(void *)a1, *a2);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0)
  {
    uint64_t v8 = *(void *)((char *)v5 + v7);
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!*(unsigned char *)(a1 + 16))
    {
LABEL_4:
      std::to_string(&v16, v8);
      char v11 = *(const std::string::value_type **)(a1 + 24);
      uint64_t v10 = a1 + 24;
      double v9 = v11;
      int v12 = *(char *)(v10 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v10;
      }
      else {
        uint64_t v13 = v9;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        std::string::size_type v14 = *(void *)(v10 + 8);
      }
      uint64_t v15 = std::string::insert(&v16, 0, v13, v14);
      *a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_16;
      }
      return;
    }
  }
  sub_29AEFC(*(uint64_t **)(a1 + 8), v8, (uint64_t)&v16);
  *a3 = v16;
  memset(&v16, 0, sizeof(v16));
  if (v18 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_16:
    }
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_53CC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_53CC20(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_53C73C(a1, a2, (uint64_t *)&v10);
  uint64_t v4 = (uint64_t)v10;
  uint64_t v5 = v11;
  if (v10 == (void *)v11)
  {
    if (!v10) {
      return;
    }
    goto LABEL_11;
  }
  do
  {
    if (!*(unsigned char *)(v4 + 129))
    {
      unint64_t v7 = a3[1];
      if (v7 >= a3[2])
      {
        uint64_t v6 = sub_53DE68(a3, v4);
      }
      else
      {
        sub_4BD34C(a3[1], v4);
        uint64_t v6 = v7 + 168;
        a3[1] = v7 + 168;
      }
      a3[1] = v6;
    }
    v4 += 168;
  }
  while (v4 != v5);
  uint64_t v4 = (uint64_t)v10;
  if (v10)
  {
LABEL_11:
    uint64_t v8 = v11;
    double v9 = (void *)v4;
    if (v11 != v4)
    {
      do
        uint64_t v8 = sub_4BCFD0(v8 - 168);
      while (v8 != v4);
      double v9 = v10;
    }
    uint64_t v11 = v4;
    operator delete(v9);
  }
}

void sub_53CD04(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

void sub_53CD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_4B1DB4((void **)va);
  sub_4B1DB4((void **)v2);
  _Unwind_Resume(a1);
}

void sub_53CD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4B1DB4((void **)va);
  sub_4B1DB4(v2);
  _Unwind_Resume(a1);
}

void sub_53CD54(uint64_t a1, void *a2, char **a3)
{
  *(_OWORD *)size_t v53 = 0u;
  *(_OWORD *)char v54 = 0u;
  int v55 = 1065353216;
  uint64_t v4 = (void *)nullsub_1(a2);
  uint64_t v5 = v4[1] - *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v45 = 0xF83E0F83E0F83E1 * (v5 >> 5);
    while (1)
    {
      uint64_t v8 = (void *)sub_45FB28(a2, v6);
      double v9 = (uint64_t *)sub_6467E8(a3, v6);
      sub_53C73C(a1, v8, (uint64_t *)&__p);
      uint64_t v11 = __p;
      uint64_t v10 = v51;
      if (__p != v51)
      {
        do
        {
          if (v53[1])
          {
            uint64_t v13 = *v11;
            unint64_t v14 = __ROR8__(*v11, 32);
            unint64_t v15 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
            unint64_t v16 = v15 ^ (v15 >> 33);
            uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v53[1]);
            v17.i16[0] = vaddlv_u8(v17);
            if (v17.u32[0] > 1uLL)
            {
              unint64_t v18 = v16;
              if ((void *)v16 >= v53[1]) {
                unint64_t v18 = v16 % (unint64_t)v53[1];
              }
            }
            else
            {
              unint64_t v18 = v16 & ((unint64_t)v53[1] - 1);
            }
            int v19 = (uint64_t **)*((void *)v53[0] + v18);
            if (v19)
            {
              unint64_t v20 = *v19;
              if (v20)
              {
                if (v17.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v24 = v20[1];
                    if (v24 == v16)
                    {
                      if (*((_DWORD *)v20 + 4) == v13 && *((_DWORD *)v20 + 5) == HIDWORD(v13)) {
                        goto LABEL_10;
                      }
                    }
                    else if ((v24 & ((unint64_t)v53[1] - 1)) != v18)
                    {
                      goto LABEL_37;
                    }
                    unint64_t v20 = (uint64_t *)*v20;
                    if (!v20) {
                      goto LABEL_37;
                    }
                  }
                }
                do
                {
                  unint64_t v22 = v20[1];
                  if (v22 == v16)
                  {
                    if (*((_DWORD *)v20 + 4) == v13 && *((_DWORD *)v20 + 5) == HIDWORD(v13)) {
                      goto LABEL_10;
                    }
                  }
                  else
                  {
                    if ((void *)v22 >= v53[1]) {
                      v22 %= (unint64_t)v53[1];
                    }
                    if (v22 != v18) {
                      break;
                    }
                  }
                  unint64_t v20 = (uint64_t *)*v20;
                }
                while (v20);
              }
            }
          }
LABEL_37:
          sub_53E0F8((uint64_t)v53, v11, v11);
          if (*((unsigned char *)v11 + 129))
          {
            unint64_t v25 = v9[1452];
            if (v25 >= v9[1453])
            {
              v9[1452] = sub_53E460(v9 + 1451, (uint64_t)v11);
            }
            else
            {
              sub_4BD34C(v9[1452], (uint64_t)v11);
              v9[1452] = v25 + 168;
              v9[1452] = v25 + 168;
            }
          }
          else
          {
            unint64_t v26 = v9[1449];
            if (v26 >= v9[1450])
            {
              uint64_t v12 = sub_53E460(v9 + 1448, (uint64_t)v11);
            }
            else
            {
              sub_4BD34C(v9[1449], (uint64_t)v11);
              uint64_t v12 = v26 + 168;
              v9[1449] = v26 + 168;
            }
            v9[1449] = v12;
          }
LABEL_10:
          v11 += 21;
        }
        while (v11 != v10);
        uint64_t v11 = __p;
      }
      if (!v11) {
        goto LABEL_5;
      }
      unint64_t v27 = v51;
      unint64_t v7 = v11;
      if (v51 != v11) {
        break;
      }
LABEL_4:
      long long v51 = v11;
      operator delete(v7);
LABEL_5:
      if (++v6 == v45) {
        goto LABEL_65;
      }
    }
    while (1)
    {
      if (*((char *)v27 - 9) < 0)
      {
        operator delete((void *)*(v27 - 4));
        std::string v28 = (void **)*(v27 - 8);
        if (!v28)
        {
LABEL_50:
          if ((*((char *)v27 - 65) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_62;
        }
      }
      else
      {
        std::string v28 = (void **)*(v27 - 8);
        if (!v28) {
          goto LABEL_50;
        }
      }
      uint64_t v29 = (void **)*(v27 - 7);
      if (v29 == v28)
      {
        *(v27 - 7) = v28;
        operator delete(v28);
        if ((*((char *)v27 - 65) & 0x80000000) == 0) {
          goto LABEL_51;
        }
      }
      else
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 3;
        }
        while (v29 != v28);
        unint64_t v30 = (void *)*(v27 - 8);
        *(v27 - 7) = v28;
        operator delete(v30);
        if ((*((char *)v27 - 65) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*((char *)v27 - 89) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_63;
        }
      }
LABEL_62:
      operator delete((void *)*(v27 - 11));
      if ((*((char *)v27 - 89) & 0x80000000) == 0)
      {
LABEL_52:
        if (*((char *)v27 - 137) < 0) {
          goto LABEL_64;
        }
        goto LABEL_47;
      }
LABEL_63:
      operator delete((void *)*(v27 - 14));
      if (*((char *)v27 - 137) < 0) {
LABEL_64:
      }
        operator delete((void *)*(v27 - 20));
LABEL_47:
      v27 -= 21;
      if (v27 == v11)
      {
        unint64_t v7 = __p;
        goto LABEL_4;
      }
    }
  }
LABEL_65:
  long long __p = 0;
  long long v51 = 0;
  uint64_t v52 = 0;
  int v31 = v54[0];
  if (v54[0])
  {
    do
    {
      long long v32 = (int *)sub_3E2234(*(void *)(a1 + 144), v31[2]);
      long long v33 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v33 >= 7u)
      {
        uint64_t v34 = v33[3];
        if (v34)
        {
          if (*((unsigned char *)v32 + v34))
          {
            long long v35 = (int *)sub_3E2234(*(void *)(a1 + 144), v31[2]);
            uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
            if (*v36 < 0x19u)
            {
              uint64_t v37 = 0;
            }
            else
            {
              uint64_t v37 = v36[12];
              if (v37) {
                uint64_t v37 = *(void *)((char *)v35 + v37);
              }
            }
            uint64_t v49 = v37;
            BOOL v38 = (int *)sub_3E2234(*(void *)(a1 + 144), v31[2]);
            uint64_t v39 = (uint64_t)v38 + *(unsigned __int16 *)((char *)v38 - *v38 + 26);
            LODWORD(v40) = *(_DWORD *)(v39 + 4);
            if (v40 >= 0xFFFFFFFE) {
              uint64_t v40 = 4294967294;
            }
            else {
              uint64_t v40 = v40;
            }
            unint64_t v58 = *(unsigned int *)v39 | (unint64_t)(v40 << 32);
            int v59 = 0x7FFFFFFF;
            uint64_t v41 = *(unsigned int *)(v39 + 8);
            LODWORD(v39) = *(_DWORD *)(v39 + 12);
            if (v39 >= 0xFFFFFFFE) {
              uint64_t v39 = 4294967294;
            }
            else {
              uint64_t v39 = v39;
            }
            uint64_t v56 = v41 | (v39 << 32);
            int v57 = 0x7FFFFFFF;
            sub_3392C((uint64_t)&v48, (unsigned int *)&v58, (unsigned int *)&v56);
            LODWORD(v58) = 1;
            sub_53D2F0((char **)&__p, &v49, &v58, &v48);
          }
        }
      }
      int v31 = (void *)*v31;
    }
    while (v31);
  }
  sub_647D34(a3, (char **)&__p);
  if (__p)
  {
    long long v51 = __p;
    operator delete(__p);
  }
  __int16 v42 = v54[0];
  if (v54[0])
  {
    do
    {
      int v43 = (void *)*v42;
      operator delete(v42);
      __int16 v42 = v43;
    }
    while (v43);
  }
  uint64_t v44 = v53[0];
  v53[0] = 0;
  if (v44) {
    operator delete(v44);
  }
}

void sub_53D238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    sub_12168((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

char *sub_53D2F0(char **a1, void *a2, _DWORD *a3, long long *a4)
{
  double v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x666666666666666) {
        sub_188D718();
      }
      uint8x8_t v17 = (char *)operator new(40 * v16);
    }
    else
    {
      uint8x8_t v17 = 0;
    }
    unint64_t v18 = &v17[40 * v13];
    *(void *)unint64_t v18 = *a2;
    *((_DWORD *)v18 + 2) = *a3;
    *(_OWORD *)(v18 + 12) = *a4;
    *(void *)(v18 + 28) = *((void *)a4 + 2);
    uint64_t v11 = v18 + 40;
    if (v9 != v12)
    {
      do
      {
        long long v19 = *(_OWORD *)(v9 - 40);
        long long v20 = *(_OWORD *)(v9 - 24);
        *((_DWORD *)v18 - 2) = *((_DWORD *)v9 - 2);
        *(_OWORD *)(v18 - 24) = v20;
        *(_OWORD *)(v18 - 40) = v19;
        v18 -= 40;
        v9 -= 40;
      }
      while (v9 != v12);
      double v9 = *a1;
    }
    *a1 = v18;
    a1[1] = v11;
    a1[2] = &v17[40 * v16];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)double v9 = *a2;
    *((_DWORD *)v9 + 2) = *a3;
    long long v10 = *a4;
    *(void *)(v9 + 28) = *((void *)a4 + 2);
    *(_OWORD *)(v9 + 12) = v10;
    uint64_t v11 = v9 + 40;
  }
  a1[1] = v11;
  return v11 - 40;
}

void sub_53D46C(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (!a1) {
    return;
  }
  sub_53DA48((char **)a2, *a1);
  unsigned int v6 = *a1;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = v6;
  if (!v6) {
    return;
  }
  uint64_t v45 = &v5[v4];
  do
  {
    while (2)
    {
      uint64_t v7 = *v5;
      v46[0] = 0;
      long long v47 = 0u;
      memset(v48, 0, sizeof(v48));
      unint64_t v8 = (int *)((char *)v5 + v7);
      uint64_t v49 = sub_1133328();
      uint64_t v53 = 0;
      long long v52 = 0uLL;
      *(_OWORD *)char v50 = 0u;
      memset(v51, 0, 35);
      double v9 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0)
      {
        uint64_t v11 = (unsigned int *)((char *)v8 + v10);
        uint64_t v12 = *v11;
        unint64_t v14 = (char *)v11 + v12 + 4;
        size_t v13 = *(unsigned int *)((char *)v11 + v12);
        if (v13 >= 0x17)
        {
          uint64_t v28 = (v13 & 0xFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17) {
            uint64_t v28 = v13 | 7;
          }
          uint64_t v29 = v28 + 1;
          p_dst = (long long *)operator new(v28 + 1);
          *((void *)&__dst + 1) = v13;
          *(void *)&long long v55 = v29 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
          uint64_t v2 = a2;
LABEL_42:
          memcpy(p_dst, v14, v13);
          *((unsigned char *)p_dst + v13) = 0;
          if ((SHIBYTE(v48[0]) & 0x80000000) == 0) {
            goto LABEL_14;
          }
LABEL_13:
          operator delete((void *)v47);
          goto LABEL_14;
        }
        BYTE7(v55) = *(unsigned int *)((char *)v11 + v12);
        p_dst = &__dst;
        if (v13) {
          goto LABEL_42;
        }
        *((unsigned char *)&__dst + v13) = 0;
        if (SHIBYTE(v48[0]) < 0) {
          goto LABEL_13;
        }
      }
      else
      {
        long long __dst = 0uLL;
        *(void *)&long long v55 = 0;
        if (SHIBYTE(v48[0]) < 0) {
          goto LABEL_13;
        }
      }
LABEL_14:
      long long v47 = __dst;
      v48[0] = v55;
      unint64_t v16 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v16 < 9u || (uint64_t v17 = v16[4]) == 0)
      {
        long long __dst = 0uLL;
        *(void *)&long long v55 = 0;
        if ((SHIBYTE(v48[3]) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      unint64_t v18 = (unsigned int *)((char *)v8 + v17);
      uint64_t v19 = *v18;
      uint64_t v21 = (char *)v18 + v19 + 4;
      size_t v20 = *(unsigned int *)((char *)v18 + v19);
      if (v20 >= 0x17)
      {
        uint64_t v30 = (v20 & 0xFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v30 = v20 | 7;
        }
        uint64_t v31 = v30 + 1;
        unint64_t v22 = (long long *)operator new(v30 + 1);
        *((void *)&__dst + 1) = v20;
        *(void *)&long long v55 = v31 | 0x8000000000000000;
        *(void *)&long long __dst = v22;
        uint64_t v2 = a2;
      }
      else
      {
        BYTE7(v55) = *(unsigned int *)((char *)v18 + v19);
        unint64_t v22 = &__dst;
        if (!v20)
        {
          *((unsigned char *)&__dst + v20) = 0;
          if ((SHIBYTE(v48[3]) & 0x80000000) == 0) {
            goto LABEL_22;
          }
LABEL_21:
          operator delete((void *)v48[1]);
          goto LABEL_22;
        }
      }
      memcpy(v22, v21, v20);
      *((unsigned char *)v22 + v20) = 0;
      if (SHIBYTE(v48[3]) < 0) {
        goto LABEL_21;
      }
LABEL_22:
      v48[3] = v55;
      *(_OWORD *)&v48[1] = __dst;
      unint64_t v23 = BYTE7(v55);
      if ((SBYTE7(v55) & 0x80u) == 0) {
        unint64_t v24 = (unsigned __int8 *)&v48[1];
      }
      else {
        unint64_t v24 = (unsigned __int8 *)v48[1];
      }
      if (SBYTE7(v55) < 0) {
        unint64_t v23 = v48[2];
      }
      if (v23 >= 0x1F) {
        uint64_t v25 = 31;
      }
      else {
        uint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 == 1)
        {
          *(void *)&long long __dst = *v24;
          uint64_t v26 = 1;
        }
        else
        {
          if (v25 != 2)
          {
            sub_76DEC(v24, v25, (uint64_t)&__dst);
            goto LABEL_50;
          }
          unint64_t v27 = (unsigned __int8 *)&v48[1] + 1;
          if (SBYTE7(v55) < 0) {
            unint64_t v27 = (unsigned __int8 *)(v48[1] + 1);
          }
          *(void *)&long long __dst = *v24 | ((unint64_t)*v27 << 8);
          uint64_t v26 = 2;
        }
        *((void *)&__dst + 1) = v26;
        long long v55 = 0u;
        long long v56 = 0u;
      }
      else
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long __dst = 0u;
      }
LABEL_50:
      uint64_t v49 = sub_1133038((uint64_t)&__dst, 0);
      long long v32 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v32 >= 0xBu && (uint64_t v33 = v32[5]) != 0)
      {
        char v34 = *((unsigned char *)v8 + v33);
        v46[0] = v34;
        unint64_t v35 = *(void *)(v2 + 8);
        if (v35 < *(void *)(v2 + 16)) {
          goto LABEL_67;
        }
      }
      else
      {
        char v34 = 0;
        v46[0] = 0;
        unint64_t v35 = *(void *)(v2 + 8);
        if (v35 < *(void *)(v2 + 16))
        {
LABEL_67:
          *(unsigned char *)unint64_t v35 = v34;
          long long v40 = v47;
          *(void *)(v35 + 24) = v48[0];
          *(_OWORD *)(v35 + 8) = v40;
          v48[0] = 0;
          long long v47 = 0uLL;
          uint64_t v41 = v48[3];
          *(_OWORD *)(v35 + 32) = *(_OWORD *)&v48[1];
          *(void *)(v35 + 48) = v41;
          memset(&v48[1], 0, 24);
          *(void *)(v35 + 56) = v49;
          *(void *)(v35 + 64) = 0;
          *(void *)(v35 + 72) = 0;
          *(void *)(v35 + 80) = 0;
          *(_OWORD *)(v35 + 64) = *(_OWORD *)v50;
          *(void *)(v35 + 80) = v51[0];
          v50[0] = 0;
          v50[1] = 0;
          v51[0] = 0;
          long long v42 = *(_OWORD *)&v51[1];
          *(void *)(v35 + 104) = v51[3];
          *(_OWORD *)(v35 + 88) = v42;
          memset(&v51[1], 0, 24);
          LOWORD(v41) = v51[4];
          *(unsigned char *)(v35 + 114) = BYTE2(v51[4]);
          *(_WORD *)(v35 + 112) = v41;
          long long v43 = v52;
          *(void *)(v35 + 136) = v53;
          *(_OWORD *)(v35 + 120) = v43;
          uint64_t v53 = 0;
          long long v52 = 0uLL;
          *(void *)(v2 + 8) = v35 + 144;
          if (SHIBYTE(v51[3]) < 0) {
            goto LABEL_68;
          }
          goto LABEL_55;
        }
      }
      uint64_t v36 = sub_53DBF8((void **)v2, v46);
      int v37 = SHIBYTE(v53);
      *(void *)(v2 + 8) = v36;
      if (v37 < 0)
      {
        operator delete((void *)v52);
        if (SHIBYTE(v51[3]) < 0)
        {
LABEL_68:
          operator delete((void *)v51[1]);
          BOOL v38 = (void **)v50[0];
          if (!v50[0])
          {
LABEL_69:
            if (SHIBYTE(v48[3]) < 0) {
              break;
            }
            goto LABEL_70;
          }
          goto LABEL_56;
        }
      }
      else if (SHIBYTE(v51[3]) < 0)
      {
        goto LABEL_68;
      }
LABEL_55:
      BOOL v38 = (void **)v50[0];
      if (!v50[0]) {
        goto LABEL_69;
      }
LABEL_56:
      uint64_t v39 = (void **)v50[1];
      if (v50[1] == v38)
      {
        v50[1] = v38;
        operator delete(v38);
        if (SHIBYTE(v48[3]) < 0) {
          break;
        }
        goto LABEL_70;
      }
      do
      {
        while (*((char *)v39 - 9) < 0)
        {
          operator delete(*(v39 - 4));
          if (*((char *)v39 - 33) < 0) {
            goto LABEL_63;
          }
LABEL_60:
          v39 -= 7;
          if (v39 == v38) {
            goto LABEL_64;
          }
        }
        if ((*((char *)v39 - 33) & 0x80000000) == 0) {
          goto LABEL_60;
        }
LABEL_63:
        operator delete(*(v39 - 7));
        v39 -= 7;
      }
      while (v39 != v38);
LABEL_64:
      v50[1] = v38;
      operator delete(v50[0]);
      if ((SHIBYTE(v48[3]) & 0x80000000) == 0)
      {
LABEL_70:
        if (SHIBYTE(v48[0]) < 0) {
          goto LABEL_71;
        }
LABEL_5:
        if (++v5 == v45) {
          return;
        }
        continue;
      }
      break;
    }
    operator delete((void *)v48[1]);
    if ((SHIBYTE(v48[0]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_71:
    operator delete((void *)v47);
    ++v5;
  }
  while (v5 != v45);
}

void sub_53D9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_53D9D4(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2DF404((uint64_t)va);
  sub_53BD98(a3);
  _Unwind_Resume(a1);
}

void sub_53D9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    sub_53BD98(a10);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  sub_53BD98(a10);
  _Unwind_Resume(a1);
}

void sub_53DA48(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 144 * a2;
  unsigned int v6 = (char *)operator new(144 * a2);
  uint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *(v10 - 144) = v4[v9 - 144];
    long long v12 = *(_OWORD *)&v4[v9 - 136];
    *((void *)v10 - 15) = *(void *)&v4[v9 - 120];
    *(_OWORD *)(v10 - 136) = v12;
    *((void *)v11 - 16) = 0;
    *((void *)v11 - 15) = 0;
    *((void *)v11 - 17) = 0;
    long long v13 = *(_OWORD *)&v4[v9 - 112];
    *((void *)v10 - 12) = *(void *)&v4[v9 - 96];
    *((_OWORD *)v10 - 7) = v13;
    *((void *)v11 - 13) = 0;
    *((void *)v11 - 12) = 0;
    *((void *)v11 - 14) = 0;
    *((void *)v10 - 11) = *(void *)&v4[v9 - 88];
    *((_OWORD *)v10 - 5) = *(_OWORD *)&v4[v9 - 80];
    *((void *)v10 - 8) = *(void *)&v4[v9 - 64];
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    long long v14 = *(_OWORD *)&v4[v9 - 56];
    *((void *)v10 - 5) = *(void *)&v4[v9 - 40];
    *(_OWORD *)(v10 - 56) = v14;
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    __int16 v15 = *(_WORD *)&v4[v9 - 32];
    char v16 = v4[v9 - 30];
    *((void *)v11 - 7) = 0;
    *(v10 - 30) = v16;
    *((_WORD *)v10 - 16) = v15;
    long long v17 = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *(_OWORD *)(v10 - 24) = v17;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    *((void *)v11 - 3) = 0;
    v9 -= 144;
  }
  while (&v4[v9] != v2);
  unint64_t v18 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v18)
  {
    do
    {
      v2 -= 144;
      sub_2DF404((uint64_t)v2);
    }
    while (v2 != v18);
    uint64_t v2 = v18;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

char *sub_53DBF8(void **a1, char *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[144 * v3];
  *unint64_t v8 = *a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v9 = &v7[144 * v6];
  *((void *)v8 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((_OWORD *)v8 + 2) = *((_OWORD *)a2 + 2);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  uint64_t v10 = *((void *)a2 + 6);
  uint64_t v11 = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)v8 + 6) = v10;
  *((void *)v8 + 7) = v11;
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = 0;
  *((_OWORD *)v8 + 4) = *((_OWORD *)a2 + 4);
  *((void *)v8 + 10) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  long long v12 = *(_OWORD *)(a2 + 88);
  *((void *)v8 + 13) = *((void *)a2 + 13);
  *(_OWORD *)(v8 + 88) = v12;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  LOWORD(v10) = *((_WORD *)a2 + 56);
  v8[114] = a2[114];
  *((_WORD *)v8 + 56) = v10;
  long long v13 = *(_OWORD *)(a2 + 120);
  *((void *)v8 + 17) = *((void *)a2 + 17);
  *(_OWORD *)(v8 + 120) = v13;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  long long v14 = v8 + 144;
  char v16 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v9;
    if (!v15) {
      return v14;
    }
    goto LABEL_18;
  }
  uint64_t v17 = 0;
  do
  {
    unint64_t v18 = &v15[v17];
    uint64_t v19 = &v8[v17];
    *(v19 - 144) = v15[v17 - 144];
    long long v20 = *(_OWORD *)&v15[v17 - 136];
    *((void *)v19 - 15) = *(void *)&v15[v17 - 120];
    *(_OWORD *)(v19 - 136) = v20;
    *((void *)v18 - 16) = 0;
    *((void *)v18 - 15) = 0;
    *((void *)v18 - 17) = 0;
    long long v21 = *(_OWORD *)&v15[v17 - 112];
    *((void *)v19 - 12) = *(void *)&v15[v17 - 96];
    *((_OWORD *)v19 - 7) = v21;
    *((void *)v18 - 13) = 0;
    *((void *)v18 - 12) = 0;
    *((void *)v18 - 14) = 0;
    *((void *)v19 - 11) = *(void *)&v15[v17 - 88];
    *((void *)v19 - 9) = 0;
    *((void *)v19 - 8) = 0;
    *((_OWORD *)v19 - 5) = *(_OWORD *)&v15[v17 - 80];
    *((void *)v19 - 8) = *(void *)&v15[v17 - 64];
    *((void *)v18 - 10) = 0;
    *((void *)v18 - 9) = 0;
    *((void *)v18 - 8) = 0;
    long long v22 = *(_OWORD *)&v15[v17 - 56];
    *((void *)v19 - 5) = *(void *)&v15[v17 - 40];
    *(_OWORD *)(v19 - 56) = v22;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    __int16 v23 = *(_WORD *)&v15[v17 - 32];
    char v24 = v15[v17 - 30];
    *((void *)v18 - 7) = 0;
    *(v19 - 30) = v24;
    *((_WORD *)v19 - 16) = v23;
    long long v25 = *(_OWORD *)&v15[v17 - 24];
    *((void *)v19 - 1) = *(void *)&v15[v17 - 8];
    *(_OWORD *)(v19 - 24) = v25;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 1) = 0;
    *((void *)v18 - 3) = 0;
    v17 -= 144;
  }
  while (&v15[v17] != v16);
  uint64_t v26 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  *a1 = &v8[v17];
  a1[1] = v14;
  a1[2] = v9;
  if (v15 != v26)
  {
    do
      __int16 v15 = (char *)sub_2DF404((uint64_t)(v15 - 144));
    while (v15 != v26);
    __int16 v15 = v26;
  }
  if (v15) {
LABEL_18:
  }
    operator delete(v15);
  return v14;
}

uint64_t sub_53DE68(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x186186186186186) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(168 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v21 = (uint64_t)&v7[168 * v3];
  long long v22 = &v7[168 * v6];
  sub_4BD34C(v21, a2);
  uint64_t v8 = v21 + 168;
  uint64_t v10 = (char *)*a1;
  uint64_t v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v21;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v21 + v11;
      long long v13 = &v9[v11];
      *(void *)(v12 - 168) = *(void *)&v9[v11 - 168];
      long long v14 = *(_OWORD *)&v9[v11 - 160];
      *(void *)(v12 - 144) = *(void *)&v9[v11 - 144];
      *(_OWORD *)(v12 - 160) = v14;
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 20) = 0;
      long long v15 = *(_OWORD *)&v9[v11 - 136];
      *(_DWORD *)(v12 - 120) = *(_DWORD *)&v9[v11 - 120];
      *(_OWORD *)(v12 - 136) = v15;
      long long v16 = *(_OWORD *)&v9[v11 - 112];
      *(void *)(v12 - 96) = *(void *)&v9[v11 - 96];
      *(_OWORD *)(v12 - 112) = v16;
      *((void *)v13 - 13) = 0;
      *((void *)v13 - 12) = 0;
      *((void *)v13 - 14) = 0;
      long long v17 = *(_OWORD *)&v9[v11 - 88];
      *(void *)(v12 - 72) = *(void *)&v9[v11 - 72];
      *(_OWORD *)(v12 - 88) = v17;
      *((void *)v13 - 11) = 0;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 48) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v12 - 48) = *(void *)&v9[v11 - 48];
      *((void *)v13 - 8) = 0;
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *(_WORD *)(v12 - 40) = *(_WORD *)&v9[v11 - 40];
      long long v18 = *(_OWORD *)&v9[v11 - 32];
      *(void *)(v12 - 16) = *(void *)&v9[v11 - 16];
      *(_OWORD *)(v12 - 32) = v18;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 4) = 0;
      *(_WORD *)(v12 - 8) = *(_WORD *)&v9[v11 - 8];
      v11 -= 168;
    }
    while (&v9[v11] != v10);
    uint64_t v19 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    *a1 = v21 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
    if (v9 != v19)
    {
      do
        uint64_t v9 = (char *)sub_4BCFD0((uint64_t)(v9 - 168));
      while (v9 != v19);
      uint64_t v9 = v19;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v21 + 168;
}

void sub_53E090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_53E0A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_53E0A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    sub_4BCFD0(i - 168);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_53E0F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            long long v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x18uLL);
  void *v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    __int16 v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      *__int16 v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        __int16 v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        __int16 v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      __int16 v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    __int16 v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_53E44C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_53E460(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x186186186186186) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(168 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v21 = (uint64_t)&v7[168 * v3];
  uint64_t v22 = &v7[168 * v6];
  sub_4BD34C(v21, a2);
  uint64_t v8 = v21 + 168;
  unint64_t v10 = (char *)*a1;
  unint64_t v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v21;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v21 + v11;
      long long v13 = &v9[v11];
      *(void *)(v12 - 168) = *(void *)&v9[v11 - 168];
      long long v14 = *(_OWORD *)&v9[v11 - 160];
      *(void *)(v12 - 144) = *(void *)&v9[v11 - 144];
      *(_OWORD *)(v12 - 160) = v14;
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 20) = 0;
      long long v15 = *(_OWORD *)&v9[v11 - 136];
      *(_DWORD *)(v12 - 120) = *(_DWORD *)&v9[v11 - 120];
      *(_OWORD *)(v12 - 136) = v15;
      long long v16 = *(_OWORD *)&v9[v11 - 112];
      *(void *)(v12 - 96) = *(void *)&v9[v11 - 96];
      *(_OWORD *)(v12 - 112) = v16;
      *((void *)v13 - 13) = 0;
      *((void *)v13 - 12) = 0;
      *((void *)v13 - 14) = 0;
      long long v17 = *(_OWORD *)&v9[v11 - 88];
      *(void *)(v12 - 72) = *(void *)&v9[v11 - 72];
      *(_OWORD *)(v12 - 88) = v17;
      *((void *)v13 - 11) = 0;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 48) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v12 - 48) = *(void *)&v9[v11 - 48];
      *((void *)v13 - 8) = 0;
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *(_WORD *)(v12 - 40) = *(_WORD *)&v9[v11 - 40];
      long long v18 = *(_OWORD *)&v9[v11 - 32];
      *(void *)(v12 - 16) = *(void *)&v9[v11 - 16];
      *(_OWORD *)(v12 - 32) = v18;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 4) = 0;
      *(_WORD *)(v12 - 8) = *(_WORD *)&v9[v11 - 8];
      v11 -= 168;
    }
    while (&v9[v11] != v10);
    uint64_t v19 = (char *)*a1;
    unint64_t v9 = (char *)a1[1];
    *a1 = v21 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
    if (v9 != v19)
    {
      do
        unint64_t v9 = (char *)sub_4BCFD0((uint64_t)(v9 - 168));
      while (v9 != v19);
      unint64_t v9 = v19;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v21 + 168;
}

void sub_53E688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_53E0A4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_53E69C()
{
  byte_2568B37 = 1;
  word_2568B20 = 65;
  byte_2568B4F = 1;
  word_2568B38 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2568BE0 = 0u;
  *(_OWORD *)&qword_2568BF0 = 0u;
  dword_2568C00 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2568BE0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2568BE0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2568BE0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2568BE0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2568B67 = 8;
  strcpy((char *)&qword_2568B50, "any_mode");
  byte_2568B7F = 7;
  strcpy((char *)&dword_2568B68, "cycling");
  byte_2568B97 = 7;
  strcpy((char *)&dword_2568B80, "driving");
  byte_2568BAF = 7;
  strcpy((char *)&dword_2568B98, "walking");
  qword_2568BB8 = 0;
  qword_2568BC0 = 0;
  qword_2568BB0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2568BB0 = (uint64_t)v0;
  qword_2568BB8 = (uint64_t)(v0 + 9);
  qword_2568BC0 = (uint64_t)(v0 + 9);
  qword_2568BC8 = 0;
  qword_2568BD0 = 0;
  unk_2568BD8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2568BD0 = (uint64_t)(v1 + 9);
  unk_2568BD8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2568BC8 = (uint64_t)v1;
  return result;
}

void sub_53E964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2568BF0) {
    sub_20A929C((void **)qword_2568BF0);
  }
  int v37 = (void *)xmmword_2568BE0;
  *(void *)&xmmword_2568BE0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_53EA04(uint64_t a1, int **a2, int **a3)
{
  unint64_t v3 = (char *)*a2;
  char v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a2 + 38))
  {
    if (v5 < 0x47) {
      return 0;
    }
    unsigned int v6 = v4[35];
    if (!v6 || (*(_DWORD *)&v3[v6] & 2) == 0) {
      return 0;
    }
  }
  else
  {
    if (v5 < 0x47) {
      return 0;
    }
    unsigned int v7 = v4[35];
    if (!v7 || (*(_DWORD *)&v3[v7] & 1) == 0) {
      return 0;
    }
  }
  int v8 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v9 = *v8;
  if (*((unsigned char *)a3 + 38))
  {
    if (v9 >= 0x47)
    {
      unsigned int v10 = v8[35];
      if (v10)
      {
        LODWORD(result) = 2;
        return (*(int *)((char *)*a3 + v10) & result) == 0;
      }
    }
    return 1;
  }
  if (v9 < 0x47) {
    return 1;
  }
  unsigned int v10 = v8[35];
  uint64_t result = 1;
  if (v10) {
    return (*(int *)((char *)*a3 + v10) & result) == 0;
  }
  return result;
}

BOOL sub_53EABC(uint64_t a1, uint64_t **a2)
{
  if (!*(unsigned char *)(a1 + 760)) {
    return 0;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = **a2;
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  unsigned int v7 = (int *)sub_2D5D58(*(void *)a1, v5 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v4 + 7772)) {
    sub_2DB8E0(v4 + 3896, v5, 0);
  }
  uint64_t v55 = sub_2E5C38(v4, v5 & 0xFFFFFFFFFFFFLL, 1);
  long long v56 = v8;
  uint64_t v9 = v5 & 0xFF000000000000;
  uint64_t v10 = (v5 & 0xFF000000000000) != 0;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(a2[1] - 1);
  char v13 = (int *)sub_2D5D58(*(void *)a1, v12 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v11 + 7772)) {
    sub_2DB8E0(v11 + 3896, v12, 0);
  }
  sub_2E5C38(v11, v12 & 0xFFFFFFFFFFFFLL, 1);
  int v14 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v15 = *v14;
  if (v9)
  {
    if (v15 < 0x47 || !v14[35] || (*(int *)((char *)v7 + v14[35]) & 2) == 0) {
      return 0;
    }
  }
  else if (v15 < 0x47 || !v14[35] || (*(int *)((char *)v7 + v14[35]) & 1) == 0)
  {
    return 0;
  }
  long long v16 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v17 = *v16;
  if ((v12 & 0xFF000000000000) != 0)
  {
    if (v17 < 0x47 || !v16[35] || (*(int *)((char *)v13 + v16[35]) & 2) == 0) {
      return 0;
    }
  }
  else if (v17 < 0x47 || !v16[35] || (*(int *)((char *)v13 + v16[35]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v18 = v14[23];
  if (v18)
  {
    unsigned int v19 = *((unsigned __int8 *)v7 + v18);
    BOOL v50 = v19 > 0x2D;
    uint64_t v20 = (1 << v19) & 0x208040000000;
    BOOL v21 = v50 || v20 == 0;
    if (!v21 && v16[23])
    {
      unsigned int v22 = *((unsigned __int8 *)v13 + v16[23]);
      BOOL v50 = v22 > 0x2D;
      uint64_t v23 = (1 << v22) & 0x208040000000;
      if (!v50 && v23 != 0) {
        return 0;
      }
    }
  }
  uint64_t v25 = v6 | (v10 << 48);
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = (int *)sub_2D5D58(*(void *)a1, v6);
  unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  unsigned int v29 = *v28;
  if (v9)
  {
    if (v29 < 0x29) {
      goto LABEL_43;
    }
    unsigned int v30 = v28[20];
    if (!v30) {
      goto LABEL_43;
    }
  }
  else
  {
    if (v29 < 0x27) {
      goto LABEL_43;
    }
    unsigned int v30 = v28[19];
    if (!v30) {
      goto LABEL_43;
    }
  }
  if (!*(int *)((char *)v27 + v30 + *(int *)((char *)v27 + v30))) {
    goto LABEL_43;
  }
  unint64_t v31 = (int *)sub_53F764(v26, v25, 0);
  int v32 = 0;
  uint64_t v33 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v33 >= 5u)
  {
    uint64_t v34 = v33[2];
    if (v34)
    {
      int v32 = (*((unsigned __int8 *)v31 + v34) >> 2) & 1;
      goto LABEL_44;
    }
LABEL_43:
    int v32 = 0;
  }
LABEL_44:
  unint64_t v35 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v36 = *v35;
  if (v36 >= 0xB && v35[5])
  {
    if (v32) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    if (v32) {
      int v38 = 1;
    }
    else {
      int v38 = 2;
    }
    if ((*(int *)((char *)v7 + v35[5]) & 0x8000) == 0) {
      int v38 = v37;
    }
  }
  else if (v32)
  {
    int v38 = 2;
  }
  else
  {
    int v38 = 1;
  }
  if (*((_DWORD *)a2 + 6) != v38) {
    return 0;
  }
  if (v9)
  {
    if (v36 >= 0x4D && v35[38] && (*((unsigned char *)v7 + v35[38]) & 0xA) != 0)
    {
      uint64_t v39 = v56;
      unsigned int v40 = v35[8];
      if (!v40)
      {
        double v41 = -1.0;
        double v42 = -1.0;
        if (!v56) {
          goto LABEL_79;
        }
        goto LABEL_74;
      }
      goto LABEL_71;
    }
    return 0;
  }
  if (v36 < 0x4D || !v35[38] || (*((unsigned char *)v7 + v35[38]) & 5) == 0) {
    return 0;
  }
  unsigned int v40 = v35[7];
  if (!v40)
  {
    double v41 = -1.0;
    uint64_t v39 = (int *)v55;
    double v42 = -1.0;
    if (!v55) {
      goto LABEL_79;
    }
    goto LABEL_74;
  }
  uint64_t v39 = (int *)v55;
LABEL_71:
  unsigned int v43 = *((unsigned __int8 *)v7 + v40);
  double v41 = (double)v43;
  if (!v43) {
    double v41 = -1.0;
  }
  double v42 = -1.0;
  if (v39)
  {
LABEL_74:
    uint64_t v44 = (unsigned __int16 *)((char *)v39 - *v39);
    if (*v44 >= 9u)
    {
      uint64_t v45 = v44[4];
      if (v45)
      {
        unsigned int v46 = *(unsigned __int16 *)((char *)v39 + v45);
        if ((unsigned __int16)(v46 - 1) <= 0xFFFDu) {
          double v42 = (double)v46 / 100.0;
        }
      }
    }
  }
LABEL_79:
  BOOL result = 0;
  BOOL v50 = (*(uint64_t *)&v41 <= -1 || ((*(void *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
     && *(void *)&v41 != 0
     || v41 <= 0.0;
  if (v50) {
    double v41 = 0.0;
  }
  if ((*(uint64_t *)&v42 <= -1 || ((*(void *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v42 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    double v42 = 0.0;
  }
  if (v41 < v42) {
    double v41 = v42;
  }
  if (*(void *)&v41 >> 52 <= 0x7FEuLL && v41 > 0.0)
  {
    if (v41 >= *(double *)(a1 + 768))
    {
      unsigned int v53 = sub_53EF50(*(void *)a1, v25);
      sub_53F0AC(*(void *)a1, v25, v12 & 0xFFFFFFFFFFFFLL | ((unint64_t)((v12 & 0xFF000000000000) != 0) << 48), (uint64_t)v57);
      uint64_t v54 = v59 - v58;
      sub_53F1AC((uint64_t)v57);
      return (unint64_t)*(unsigned __int8 *)(a1 + 761) + (v54 >> 5) <= v53;
    }
    return 0;
  }
  return result;
}

uint64_t sub_53EF50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 & 0xFF000000000000;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (!v3)
  {
    if (v7 < 0x27) {
      goto LABEL_8;
    }
    unsigned int v8 = v6[19];
    if (!v8) {
      goto LABEL_8;
    }
LABEL_7:
    unsigned int v9 = *(int *)((char *)v5 + v8 + *(int *)((char *)v5 + v8));
    goto LABEL_9;
  }
  if (v7 >= 0x29)
  {
    unsigned int v8 = v6[20];
    if (v8) {
      goto LABEL_7;
    }
  }
LABEL_8:
  unsigned int v9 = 0;
LABEL_9:
  uint64_t v10 = (int *)sub_2D5D58(a1, v4);
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v3)
  {
    if (v12 < 0x29) {
      return v9;
    }
    unsigned int v13 = v11[20];
    if (!v13) {
      return v9;
    }
  }
  else
  {
    if (v12 < 0x27) {
      return v9;
    }
    unsigned int v13 = v11[19];
    if (!v13) {
      return v9;
    }
  }
  int v14 = (unsigned int *)((char *)v10 + v13 + *(int *)((char *)v10 + v13));
  uint64_t v15 = *v14;
  if (v15)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 4 * v15;
    do
    {
      uint64_t v19 = v14[v16 / 4 + 1];
      uint64_t v20 = (char *)&v14[v16 / 4] + v19 - *(int *)((char *)&v14[v16 / 4 + 1] + v19);
      if (*((unsigned __int16 *)v20 + 2) >= 5u)
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 4);
        if (v21) {
          v17 += (*((unsigned __int8 *)&v14[v16 / 4 + 1] + v19 + v21) >> 2) & 1;
        }
      }
      v16 += 4;
    }
    while (v18 != v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  return v9 - sub_2E2964(v17);
}

double sub_53F0AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_53F9B8(a1, a2, 0, (void **)(a1 + 7776));
  uint64_t v7 = *(void *)(a1 + 7776);
  uint64_t v8 = *(void *)(a1 + 7784);
  if (v7 != v8)
  {
    while (__PAIR64__(*(unsigned __int16 *)(v7 + 4), *(_DWORD *)v7) != __PAIR64__(WORD2(a3), a3)
         || (HIWORD(a3) & 1) == (*(unsigned char *)(v7 + 6) == 0))
    {
      v7 += 48;
      if (v7 == v8) {
        goto LABEL_8;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_8:
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(unsigned char *)(a4 + 6) = 1;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a4 + 32) = 0;
    *(_WORD *)(a4 + 40) = 0;
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v7;
    sub_5404E8((void *)(a4 + 16), (uint64_t *)(v7 + 16));
    *(_WORD *)(a4 + 40) = *(_WORD *)(v7 + 40);
  }
  return result;
}

uint64_t sub_53F1AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    unint64_t v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_53F220(uint64_t a1, char **a2, char **a3, void *a4)
{
  uint64_t v7 = a1 + 1160;
  int v8 = sub_6D7A80(a1 + 1160, a2);
  return v8 == sub_6D7A80(v7, a3) || *a4 >= *(void *)(a1 + 992);
}

BOOL sub_53F2A4(uint64_t a1, uint64_t a2, int **a3, int **a4)
{
  unint64_t v4 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a3 + 38))
  {
    if (v5 < 0x49) {
      goto LABEL_11;
    }
    unsigned int v6 = v4[36];
    if (!v6) {
      goto LABEL_11;
    }
  }
  else if (v5 < 0x4B || (unsigned int v6 = v4[37]) == 0)
  {
LABEL_11:
    __int16 v7 = -1;
    int v8 = (char *)*a4;
    unsigned int v9 = (unsigned __int16 *)((char *)*a4 - **a4);
    unsigned int v10 = *v9;
    if (*((unsigned char *)a4 + 38)) {
      goto LABEL_12;
    }
LABEL_8:
    if (v10 >= 0x49)
    {
      unsigned int v11 = v9[36];
      if (v11) {
        goto LABEL_14;
      }
    }
    goto LABEL_15;
  }
  __int16 v7 = *(_WORD *)((char *)*a3 + v6);
  int v8 = (char *)*a4;
  unsigned int v9 = (unsigned __int16 *)((char *)*a4 - **a4);
  unsigned int v10 = *v9;
  if (!*((unsigned char *)a4 + 38)) {
    goto LABEL_8;
  }
LABEL_12:
  if (v10 >= 0x4B)
  {
    unsigned int v11 = v9[37];
    if (v11)
    {
LABEL_14:
      int v12 = *(unsigned __int16 *)&v8[v11];
      goto LABEL_16;
    }
  }
LABEL_15:
  int v12 = 0xFFFF;
LABEL_16:
  unsigned __int16 v13 = v7 + 18000;
  unsigned __int16 v14 = v7 - 18000;
  if ((unsigned __int16)(v13 >> 5) < 0x465u) {
    unsigned __int16 v14 = v13;
  }
  int v15 = v12 - v14;
  if (v15 > 18000) {
    v15 -= 36000;
  }
  if (v15 < -17999) {
    v15 += 36000;
  }
  return fabs((double)v15 / 100.0) > *(double *)(a1 + 200);
}

uint64_t sub_53F3B0(uint64_t a1, int **a2, int **a3, void *a4)
{
  if (sub_69C254(a1, a2, a3)) {
    return 1;
  }
  unsigned int v9 = *a2;
  unsigned int v10 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v11 = *v10;
  if (*((unsigned char *)a2 + 38))
  {
    if (v11 < 0x47 || (unsigned int v12 = v10[35]) == 0 || (*(int *)((char *)v9 + v12) & 2) == 0)
    {
LABEL_15:
      unsigned int v17 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if (v11 < 0x47) {
      goto LABEL_15;
    }
    unsigned int v13 = v10[35];
    if (!v13 || (*(int *)((char *)v9 + v13) & 1) == 0) {
      goto LABEL_15;
    }
  }
  unsigned __int16 v14 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v15 = *v14;
  if (*((unsigned char *)a3 + 38))
  {
    if (v15 >= 0x47)
    {
      unsigned int v16 = v14[35];
      if (v16)
      {
        unsigned int v17 = 2;
LABEL_23:
        unsigned int v17 = (*(int *)((char *)*a3 + v16) & v17) == 0;
        goto LABEL_16;
      }
    }
  }
  else if (v15 >= 0x47)
  {
    unsigned int v16 = v14[35];
    unsigned int v17 = 1;
    if (!v16) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v17 = 1;
LABEL_16:
  if (fabs(sub_6D82EC(a1 + 1160, a2, a3)) < *(double *)(a1 + 200)) {
    return 0;
  }
  if (*a4 > *(void *)(a1 + 992)) {
    return 1;
  }
  return v17;
}

BOOL sub_53F508(uint64_t a1, int **a2, int **a3, int **a4)
{
  unint64_t v4 = (char *)*a2;
  unsigned int v5 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v6 = *v5;
  if (v6 < 0x2F || !v5[23]) {
    return 0;
  }
  BOOL result = 0;
  switch(v4[v5[23]])
  {
    case 6:
    case 12:
    case 43:
      if (v5[5] && (v4[v5[5] + 2] & 0x20) != 0) {
        return 0;
      }
      goto LABEL_6;
    case 44:
LABEL_6:
      if (*((unsigned char *)a2 + 38))
      {
        if (v6 < 0x47) {
          return 0;
        }
        uint64_t v8 = v5[35];
        if (!v8) {
          return 0;
        }
        int v9 = *(_DWORD *)&v4[v8];
        if ((v9 & 0x141510) == 0)
        {
          int v10 = 64;
          goto LABEL_15;
        }
      }
      else
      {
        if (v6 < 0x47) {
          return 0;
        }
        uint64_t v11 = v5[35];
        if (!v11) {
          return 0;
        }
        int v9 = *(_DWORD *)&v4[v11];
        if ((v9 & 0xA0A88) == 0)
        {
          int v10 = 32;
LABEL_15:
          if ((v10 & v9) == 0) {
            return 0;
          }
        }
      }
      unsigned int v12 = (char *)*a3;
      unsigned int v13 = (unsigned __int16 *)((char *)*a3 - **a3);
      unsigned int v14 = *v13;
      if (*((unsigned char *)a3 + 38))
      {
        if (v14 >= 0x47)
        {
          uint64_t v15 = v13[35];
          if (v15)
          {
            int v16 = *(_DWORD *)&v12[v15];
            if ((v16 & 0x141510) != 0) {
              goto LABEL_26;
            }
            int v17 = 64;
            goto LABEL_25;
          }
        }
        return 0;
      }
      if (v14 < 0x47) {
        return 0;
      }
      uint64_t v18 = v13[35];
      if (!v18) {
        return 0;
      }
      int v16 = *(_DWORD *)&v12[v18];
      if ((v16 & 0xA0A88) != 0) {
        goto LABEL_26;
      }
      int v17 = 32;
LABEL_25:
      if ((v17 & v16) == 0) {
        return 0;
      }
LABEL_26:
      uint64_t v19 = (char *)*a4;
      uint64_t v20 = (unsigned __int16 *)((char *)*a4 - **a4);
      unsigned int v21 = *v20;
      if (!*((unsigned char *)a4 + 38))
      {
        if (v21 >= 0x47)
        {
          uint64_t v25 = v20[35];
          if (v25)
          {
            int v23 = *(_DWORD *)&v19[v25];
            if ((v23 & 0xA0A88) != 0) {
              return 0;
            }
            int v24 = 32;
            return (v24 & v23) == 0;
          }
        }
        return 1;
      }
      if (v21 < 0x47) {
        return 1;
      }
      uint64_t v22 = v20[35];
      if (!v22) {
        return 1;
      }
      int v23 = *(_DWORD *)&v19[v22];
      if ((v23 & 0x141510) != 0) {
        return 0;
      }
      int v24 = 64;
      return (v24 & v23) == 0;
    default:
      return result;
  }
}

uint64_t sub_53F764(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = BYTE6(a2);
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v6 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  __int16 v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v4)
  {
    if (v8 < 0x29 || (unsigned int v9 = v7[20]) == 0)
    {
LABEL_8:
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v23 = v5;
      sub_296D50((unsigned int *)&v23, &v24);
      unsigned int v13 = std::string::insert(&v24, 0, "Lane info access could not find data for DRS ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = std::string::append(&v25, ",");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v22, v4 != 0);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v17 = &v22;
      }
      else {
        int v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v26, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v28 = v19->__r_.__value_.__r.__words[2];
      long long v27 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v27);
    }
  }
  else
  {
    if (v8 < 0x27) {
      goto LABEL_8;
    }
    unsigned int v9 = v7[19];
    if (!v9) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = (uint64_t)&v6[a3] + v9 + *(int *)((char *)v6 + v9);
  return v10 + 4 + *(unsigned int *)(v10 + 4);
}

void sub_53F8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a23);
  if ((a22 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_53F9B8(uint64_t a1, uint64_t a2, int a3, void **a4)
{
  int v4 = a4;
  unsigned int v6 = (char *)*a4;
  for (uint64_t i = (char *)a4[1]; i != v6; i -= 48)
  {
    uint64_t v9 = *((void *)i - 4);
    if (v9)
    {
      uint64_t v10 = *((void *)i - 3);
      unsigned int v8 = (void *)*((void *)i - 4);
      if (v10 != v9)
      {
        do
        {
          uint64_t v11 = *(void **)(v10 - 24);
          if (v11)
          {
            *(void *)(v10 - 16) = v11;
            operator delete(v11);
          }
          v10 -= 32;
        }
        while (v10 != v9);
        unsigned int v8 = (void *)*((void *)i - 4);
      }
      *((void *)i - 3) = v9;
      operator delete(v8);
    }
  }
  v4[1] = v6;
  unsigned int v12 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if ((a2 & 0xFF000000000000) != 0)
  {
    int v15 = a3;
    if (v14 < 0x29) {
      return;
    }
    unsigned int v16 = v13[20];
    if (!v16) {
      return;
    }
    goto LABEL_18;
  }
  int v15 = a3;
  if (v14 >= 0x27)
  {
    unsigned int v16 = v13[19];
    if (v16)
    {
LABEL_18:
      int v17 = (char *)v12 + v16 + *(int *)((char *)v12 + v16);
      uint64_t v93 = *v17;
      if (!*v17) {
        return;
      }
      uint64_t v18 = 0;
      uint64_t v92 = v17 + 4;
      uint64_t v94 = v4;
      while (1)
      {
        uint64_t v19 = (int *)&v92[4 * v18 + *(unsigned int *)&v92[4 * v18]];
        long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 >= 0xDu)
        {
          uint64_t v21 = v20[6];
          if (v21)
          {
            std::string v22 = (unsigned int *)((char *)v19 + v21);
            uint64_t v23 = *v22;
            std::string v25 = (unsigned int *)((char *)v22 + v23 + 4);
            uint64_t v24 = *(unsigned int *)((char *)v22 + v23);
            if (v24) {
              break;
            }
          }
        }
LABEL_20:
        if (++v18 == v93) {
          return;
        }
      }
      std::string v26 = &v25[v24];
      uint64_t v91 = v18;
      uint64_t v98 = v26;
      while (1)
      {
        long long v27 = (int *)((char *)v25 + *v25);
        std::string::size_type v28 = (unsigned __int16 *)((char *)v27 - *v27);
        unsigned int v29 = *v28;
        if (v29 < 9) {
          break;
        }
        if (v28[4] && *((unsigned char *)v27 + v28[4]))
        {
          if ((v15 & 1) == 0) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v29 < 0xB || !v28[5]) {
            break;
          }
          if (((*((unsigned char *)v27 + v28[5]) != 0) ^ v15)) {
            goto LABEL_25;
          }
        }
LABEL_36:
        uint64_t v30 = *(void *)((char *)v27 + v28[2]);
        uint64_t v31 = v30 & 0xFF000000000000;
        if (!v30) {
          goto LABEL_25;
        }
        if (*(unsigned char *)(a1 + 7774))
        {
          int v32 = sub_290DEC(a1 + 3896, v30, 1);
          if (!v32) {
            goto LABEL_25;
          }
          uint64_t v33 = &v32[-*(int *)v32];
          if (*(unsigned __int16 *)v33 < 5u) {
            goto LABEL_25;
          }
          uint64_t v34 = *((unsigned __int16 *)v33 + 2);
          if (!v34
            || *(_DWORD *)&v32[v34 + *(unsigned int *)&v32[v34]] <= WORD2(v30)
            || !sub_295DB4(a1, v30 & 0xFFFFFFFFFFFFLL))
          {
            goto LABEL_25;
          }
        }
        uint64_t v35 = (int *)sub_2D5D58(a1, v30 & 0xFFFFFFFFFFFFLL);
        unsigned int v36 = (unsigned __int16 *)((char *)v35 - *v35);
        unsigned int v37 = *v36;
        if (v31)
        {
          if (v37 >= 0x27)
          {
            unsigned int v38 = v36[19];
            if (v38) {
              goto LABEL_49;
            }
          }
        }
        else if (v37 >= 0x29)
        {
          unsigned int v38 = v36[20];
          if (v38)
          {
LABEL_49:
            unsigned int v99 = *(int *)((char *)v35 + v38 + *(int *)((char *)v35 + v38));
            goto LABEL_51;
          }
        }
        unsigned int v99 = 0;
LABEL_51:
        long long v105 = 0uLL;
        uint64_t v106 = 0;
        uint64_t v39 = *v27;
        if (*(unsigned __int16 *)((char *)v27 - v39) >= 7u && *(_WORD *)((char *)v27 - v39 + 6))
        {
          unsigned int v40 = v4;
          double v41 = (unsigned int *)((char *)v27 + *(unsigned __int16 *)((char *)v27 - v39 + 6));
          uint64_t v42 = *v41;
          uint64_t v43 = *(unsigned int *)((char *)v41 + v42);
          if (v43)
          {
            uint64_t v44 = (char *)operator new(*(unsigned int *)((char *)v41 + v42));
            *(void *)&long long v105 = v44;
            *((void *)&v105 + 1) = v44;
            uint64_t v106 = &v44[v43];
            uint64_t v39 = *v27;
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v45 = (unsigned int *)((char *)v27 + *(unsigned __int16 *)((char *)v27 - v39 + 6));
          uint64_t v46 = *v45;
          long long v48 = (char *)v45 + v46 + 4;
          uint64_t v47 = *(unsigned int *)((char *)v45 + v46);
          std::string v26 = v98;
          int v4 = v40;
          if (v47)
          {
            uint64_t v49 = &v48[v47];
            uint64_t v96 = &v48[v47];
            do
            {
              while (1)
              {
                unsigned int v50 = *v48;
                if (v99 <= v50)
                {
                  *((void *)&v105 + 1) = v105;
                  goto LABEL_95;
                }
                long long v51 = v4;
                uint64_t v52 = v31;
                char v53 = *v48;
                if (v44 >= v106) {
                  break;
                }
                *v44++ = v50;
                uint64_t v31 = v52;
                int v4 = v51;
                *((void *)&v105 + 1) = v44;
                if (++v48 == v49) {
                  goto LABEL_95;
                }
              }
              unint64_t v54 = v105;
              unint64_t v55 = (unint64_t)&v44[-v105];
              uint64_t v56 = (uint64_t)&v44[-v105 + 1];
              if (v56 < 0) {
                sub_2E00();
              }
              unint64_t v57 = (unint64_t)&v106[-v105];
              if (2 * (uint64_t)&v106[-v105] > (unint64_t)v56) {
                uint64_t v56 = 2 * v57;
              }
              if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v58 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v58 = v56;
              }
              if (v58)
              {
                size_t v59 = v58;
                uint64_t v60 = operator new(v58);
                size_t v58 = v59;
                uint64_t v61 = (char *)v60 + v55;
                *((unsigned char *)v60 + v55) = v53;
                uint64_t v62 = (uint64_t)v60 + v55 + 1;
                if (v44 == (char *)v54) {
                  goto LABEL_78;
                }
              }
              else
              {
                uint64_t v60 = 0;
                uint64_t v61 = &v44[-v105];
                *(unsigned char *)unint64_t v55 = v53;
                uint64_t v62 = v55 + 1;
                if (v44 == (char *)v54)
                {
LABEL_78:
                  uint64_t v31 = v52;
                  *(void *)&long long v105 = v61;
                  *((void *)&v105 + 1) = v62;
                  uint64_t v106 = (char *)v60 + v58;
                  int v4 = v94;
                  int v15 = a3;
                  if (!v44) {
                    goto LABEL_75;
                  }
LABEL_74:
                  operator delete(v44);
                  goto LABEL_75;
                }
              }
              uint64_t v31 = v52;
              if (v55 < 8
                || (char *)v60 + v55 + v54 - (void)v44 > (char *)v60 + v55 - 1
                || v54 > (unint64_t)(v44 - 1)
                || v54 - (unint64_t)v60 < 0x20)
              {
                char v63 = v44;
                goto LABEL_71;
              }
              if (v55 >= 0x20)
              {
                unint64_t v66 = v55 & 0xFFFFFFFFFFFFFFE0;
                char v67 = (char *)v60 + v55 - 16;
                size_t v68 = (long long *)(v44 - 16);
                unint64_t v69 = v55 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v70 = *v68;
                  *(v67 - 1) = *(v68 - 1);
                  _OWORD *v67 = v70;
                  v67 -= 2;
                  v68 -= 2;
                  v69 -= 32;
                }
                while (v69);
                if (v55 == v66) {
                  goto LABEL_73;
                }
                if ((v55 & 0x18) == 0)
                {
                  v61 -= v66;
                  char v63 = &v44[-v66];
LABEL_71:
                  long long v64 = v61 - 1;
                  do
                  {
                    char v65 = *--v63;
                    *v64-- = v65;
                  }
                  while (v63 != (char *)v54);
                  goto LABEL_73;
                }
              }
              else
              {
                unint64_t v66 = 0;
              }
              char v63 = &v44[-(v55 & 0xFFFFFFFFFFFFFFF8)];
              v61 -= v55 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v71 = &v44[-v66 - v54 - 8 + (void)v60];
              char v72 = (uint64_t *)&v44[-v66 - 8];
              unint64_t v73 = v66 - (v55 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v74 = *v72--;
                *(void *)unint64_t v71 = v74;
                v71 -= 8;
                v73 += 8;
              }
              while (v73);
              if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_71;
              }
LABEL_73:
              uint64_t v44 = (char *)v105;
              *(void *)&long long v105 = v60;
              *((void *)&v105 + 1) = v62;
              uint64_t v106 = (char *)v60 + v58;
              int v4 = v94;
              int v15 = a3;
              if (v44) {
                goto LABEL_74;
              }
LABEL_75:
              std::string v26 = v98;
              uint64_t v49 = v96;
              *((void *)&v105 + 1) = v62;
              ++v48;
              uint64_t v44 = (char *)v62;
            }
            while (v48 != v96);
          }
        }
LABEL_95:
        char v76 = *v4;
        std::string v75 = v4[1];
        if (*v4 == v75)
        {
          uint64_t v18 = v91;
LABEL_104:
          BOOL v79 = 0;
          *((void *)&v101 + 1) = 0x7FFFFFFFFFFFFFFFLL;
          __p[1] = 0;
          uint64_t v103 = 0;
          __p[0] = 0;
          __int16 v104 = 0;
          LODWORD(v101) = v30;
          WORD2(v101) = WORD2(v30);
          BYTE6(v101) = (v30 & 0xFF000000000000) == 0;
          uint64_t v80 = (unsigned __int16 *)((char *)v27 - *v27);
          unsigned int v81 = *v80;
          if (v81 >= 9)
          {
            uint64_t v82 = v80[4];
            if (v80[4]) {
              LOBYTE(v82) = *((unsigned char *)v27 + v82) != 0;
            }
            LOBYTE(v104) = v82;
            BOOL v79 = v81 >= 0xB && (v83 = v80[5]) != 0 && *((unsigned char *)v27 + v83) != 0;
          }
          HIBYTE(v104) = v79;
          char v100 = v18;
          __p[1] = sub_5401BC(__p, &v100, (uint64_t)&v105);
          long long v84 = v4[1];
          if (v84 < v4[2])
          {
            *(_OWORD *)long long v84 = v101;
            v84[3] = 0;
            v84[4] = 0;
            v84[2] = 0;
            *((_OWORD *)v84 + 1) = *(_OWORD *)__p;
            v84[4] = v103;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v103 = 0;
            *((_WORD *)v84 + 20) = v104;
            v4[1] = v84 + 6;
            std::string::size_type v85 = (void *)v105;
            if (!(void)v105) {
              goto LABEL_25;
            }
            goto LABEL_123;
          }
          int v86 = sub_540324(v4, (uint64_t)&v101);
          int v87 = (char *)__p[0];
          v4[1] = v86;
          if (v87)
          {
            size_t v88 = (char *)__p[1];
            unint64_t v89 = v87;
            if (__p[1] != v87)
            {
              do
              {
                int v90 = (void *)*((void *)v88 - 3);
                if (v90)
                {
                  *((void *)v88 - 2) = v90;
                  operator delete(v90);
                }
                v88 -= 32;
              }
              while (v88 != v87);
              unint64_t v89 = (char *)__p[0];
            }
            __p[1] = v87;
            operator delete(v89);
            std::string::size_type v85 = (void *)v105;
            if (!(void)v105) {
              goto LABEL_25;
            }
LABEL_123:
            *((void *)&v105 + 1) = v85;
            operator delete(v85);
            goto LABEL_25;
          }
          goto LABEL_122;
        }
        uint64_t v18 = v91;
        while (__PAIR64__(*((unsigned __int16 *)v76 + 2), *v76) != __PAIR64__(WORD2(v30), v30)
             || (v31 == 0) == (*((unsigned char *)v76 + 6) == 0))
        {
          v76 += 12;
          if (v76 == v75) {
            goto LABEL_104;
          }
        }
        if (v76 == v75) {
          goto LABEL_104;
        }
        LOBYTE(v101) = v91;
        unint64_t v77 = *((void *)v76 + 3);
        if (v77 >= *((void *)v76 + 4))
        {
          char v78 = sub_5401BC((void **)v76 + 2, (char *)&v101, (uint64_t)&v105);
        }
        else
        {
          *(unsigned char *)unint64_t v77 = v91;
          *(void *)(v77 + 16) = 0;
          *(void *)(v77 + 24) = 0;
          *(_OWORD *)(v77 + 8) = v105;
          *(void *)(v77 + 24) = v106;
          long long v105 = 0uLL;
          uint64_t v106 = 0;
          char v78 = (char *)(v77 + 32);
        }
        *((void *)v76 + 3) = v78;
LABEL_122:
        std::string::size_type v85 = (void *)v105;
        if ((void)v105) {
          goto LABEL_123;
        }
LABEL_25:
        if (++v25 == v26) {
          goto LABEL_20;
        }
      }
      if (v15) {
        goto LABEL_25;
      }
      goto LABEL_36;
    }
  }
}

void sub_540180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::string v25 = *(void **)(v23 - 112);
  if (v25)
  {
    *(void *)(v23 - 104) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

char *sub_5401BC(void **a1, char *a2, uint64_t a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 4 > v5) {
    unint64_t v5 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    unint64_t v8 = v5;
  }
  if (v8 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v8;
  unsigned int v12 = (char *)operator new(32 * v8);
  unsigned int v13 = &v12[32 * v4];
  unsigned int v14 = &v12[v11];
  char *v13 = *a2;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a3;
  *((void *)v13 + 3) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v15 = v13 + 32;
  unsigned int v16 = (char *)*a1;
  int v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (!v17) {
      return v15;
    }
    goto LABEL_17;
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = &v13[v18];
    long long v20 = &v17[v18];
    *(v19 - 32) = v17[v18 - 32];
    *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
    *((void *)v19 - 1) = *(void *)&v17[v18 - 8];
    *((void *)v20 - 3) = 0;
    *((void *)v20 - 2) = 0;
    *((void *)v20 - 1) = 0;
    v18 -= 32;
  }
  while (&v17[v18] != v16);
  uint64_t v21 = (char *)*a1;
  int v17 = (char *)a1[1];
  *a1 = &v13[v18];
  a1[1] = v15;
  a1[2] = v14;
  if (v17 != v21)
  {
    do
    {
      std::string v22 = (void *)*((void *)v17 - 3);
      if (v22)
      {
        *((void *)v17 - 2) = v22;
        operator delete(v22);
      }
      v17 -= 32;
    }
    while (v17 != v21);
    int v17 = v21;
  }
  if (v17) {
LABEL_17:
  }
    operator delete(v17);
  return v15;
}

char *sub_540324(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v5 = 0x555555555555555;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x555555555555555) {
    sub_188D718();
  }
  uint64_t v7 = 48 * v5;
  unint64_t v8 = (char *)operator new(48 * v5);
  uint64_t v9 = &v8[48 * v3];
  uint64_t v10 = &v8[v7];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *((_WORD *)v9 + 20) = *(_WORD *)(a2 + 40);
  unsigned int v12 = v9 + 48;
  unsigned int v13 = (char *)*a1;
  unsigned int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v12;
    }
    goto LABEL_24;
  }
  uint64_t v15 = 0;
  do
  {
    unsigned int v16 = &v9[v15];
    int v17 = &v14[v15];
    *((_OWORD *)v16 - 3) = *(_OWORD *)&v14[v15 - 48];
    *((_OWORD *)v16 - 2) = *(_OWORD *)&v14[v15 - 32];
    *((void *)v16 - 2) = *(void *)&v14[v15 - 16];
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((_WORD *)v16 - 4) = *(_WORD *)&v14[v15 - 8];
    v15 -= 48;
  }
  while (&v14[v15] != v13);
  uint64_t v18 = (char *)*a1;
  unsigned int v14 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v18)
  {
    do
    {
      uint64_t v20 = *((void *)v14 - 4);
      if (v20)
      {
        uint64_t v21 = *((void *)v14 - 3);
        uint64_t v19 = (void *)*((void *)v14 - 4);
        if (v21 != v20)
        {
          do
          {
            std::string v22 = *(void **)(v21 - 24);
            if (v22)
            {
              *(void *)(v21 - 16) = v22;
              operator delete(v22);
            }
            v21 -= 32;
          }
          while (v21 != v20);
          uint64_t v19 = (void *)*((void *)v14 - 4);
        }
        *((void *)v14 - 3) = v20;
        operator delete(v19);
      }
      v14 -= 48;
    }
    while (v14 != v18);
    unsigned int v14 = v18;
  }
  if (v14) {
LABEL_24:
  }
    operator delete(v14);
  return v12;
}

void *sub_5404E8(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * (v6 >> 5)];
    a1[1] = sub_5405A4(v3, v4, v5, (uint64_t)v7);
  }
  return a1;
}

void sub_540578(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A92E0((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5405A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(unsigned char *)a4 = *(unsigned char *)v6;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 8) = 0;
      uint64_t v9 = *(unsigned char **)(v6 + 8);
      unint64_t v8 = *(unsigned char **)(v6 + 16);
      size_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        long long v11 = (char *)operator new(v8 - v9);
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = v11;
        uint64_t v7 = &v11[v10];
        *(void *)(a4 + 24) = &v11[v10];
        memcpy(v11, v9, v10);
        *(void *)(a4 + 16) = v7;
      }
      a4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_540674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  sub_54069C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_54069C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

double sub_540700()
{
  byte_2568C1F = 1;
  word_2568C08 = 65;
  byte_2568C37 = 1;
  word_2568C20 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2568C68 = 0u;
  *(_OWORD *)&qword_2568C78 = 0u;
  dword_2568C88 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2568C68, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2568C68, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2568C68, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2568C68, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2568C40 = 0;
  qword_2568C48 = 0;
  qword_2568C38 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2568C38 = (uint64_t)v0;
  qword_2568C40 = (uint64_t)(v0 + 9);
  qword_2568C48 = (uint64_t)(v0 + 9);
  qword_2568C50 = 0;
  qword_2568C58 = 0;
  unk_2568C60 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2568C58 = (uint64_t)(v1 + 9);
  unk_2568C60 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2568C50 = (uint64_t)v1;
  return result;
}

void sub_54093C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2568C78) {
    sub_20A9354((void **)qword_2568C78);
  }
  unsigned int v37 = (void *)xmmword_2568C68;
  *(void *)&xmmword_2568C68 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_5409DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = a1 + 24;
  sub_4D30C8(a1 + 24);
  uint64_t v8 = *(void *)a1;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "DodgeballBannerInfoBuilder");
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v9 = sub_374CDC(v8, (uint64_t)__p, (uint64_t *)&v33);
  sub_559508(a1 + 2200, v9);
  uint64_t v10 = (uint64_t)v33;
  if (v33)
  {
    int v11 = v34;
    unsigned int v12 = v33;
    if (v34 != v33)
    {
      do
      {
        if (SHIBYTE(v11[-1].__shared_weak_owners_) < 0) {
          operator delete(v11[-1].__vftable);
        }
        --v11;
      }
      while (v11 != (std::__shared_weak_count *)v10);
      unsigned int v12 = v33;
    }
    uint64_t v34 = (std::__shared_weak_count *)v10;
    operator delete(v12);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_4BBDC0(a1 + 2528, a3);
  memcpy((void *)(a1 + 4064), (const void *)a4, 0x76CuLL);
  if (*(char *)(a4 + 1927) < 0)
  {
    sub_4200((unsigned char *)(a1 + 5968), *(void **)(a4 + 1904), *(void *)(a4 + 1912));
  }
  else
  {
    long long v13 = *(_OWORD *)(a4 + 1904);
    *(void *)(a1 + 5984) = *(void *)(a4 + 1920);
    *(_OWORD *)(a1 + 5968) = v13;
  }
  long long v14 = *(_OWORD *)(a4 + 1928);
  long long v15 = *(_OWORD *)(a4 + 1960);
  *(_OWORD *)(a1 + 6008) = *(_OWORD *)(a4 + 1944);
  *(_OWORD *)(a1 + 6024) = v15;
  *(_OWORD *)(a1 + 5992) = v14;
  long long v16 = *(_OWORD *)(a4 + 1976);
  long long v17 = *(_OWORD *)(a4 + 1992);
  long long v18 = *(_OWORD *)(a4 + 2008);
  *(_OWORD *)(a1 + 6082) = *(_OWORD *)(a4 + 2018);
  *(_OWORD *)(a1 + 6056) = v17;
  *(_OWORD *)(a1 + 6072) = v18;
  *(_OWORD *)(a1 + 6040) = v16;
  uint64_t v19 = (uint64_t *)sub_374EF4(*(uint64_t **)a1);
  sub_688A04(v19, 2u, *(_DWORD *)(a1 + 3496), (uint64_t *)__p);
  long long v20 = *(_OWORD *)__p;
  *(void *)long long __p = 0;
  *(void *)&__p[8] = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v20;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string v22 = *(std::__shared_weak_count **)&__p[8];
  if (*(void *)&__p[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_6892E8(v19, 2u, *(_DWORD *)(a3 + 1000), (uint64_t *)&v33);
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v31 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = (uint64_t)v33;
  unsigned int v29 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DE48((uint64_t)__p, &v30, &v28, (char *)(a1 + 4064), a3);
  sub_4D3210(v7, (long long *)__p);
  sub_4F2894((uint64_t)__p);
  uint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::string v25 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::string v26 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  return a1;
}

void sub_540D90(_Unwind_Exception *a1)
{
  sub_4BCED0(v3);
  sub_4F2894(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_540DF8(_Unwind_Exception *a1)
{
  sub_4F2894(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_540E18(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_540E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668((void **)(v20 - 104));
  if (a18 < 0)
  {
    operator delete(__p);
    sub_4F2894(v19);
    sub_14A84(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x540DE0);
}

void sub_540E64(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  if (*(unsigned char *)(a1 + 3975)) {
    int v6 = 34;
  }
  else {
    int v6 = 35;
  }
  *a3 = v6;
  a3[249] = sub_564E5C(v6);
  sub_564578((uint64_t)&v16, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v16);
  if (v18)
  {
    sub_55BCE8((uint64_t)&v17);
    char v18 = 0;
  }
  uint64_t v7 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v7 + 504));
  v11[0] = 0;
  sub_564A54((unsigned int *)a3, v11);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v8 = (int *)(a1 + 2328);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v8 = (int *)(a1 + 2296);
      break;
    case 5:
      uint64_t v8 = (int *)(a1 + 2308);
      break;
    case 6:
      uint64_t v8 = (int *)(a1 + 2312);
      break;
    case 7:
      uint64_t v8 = (int *)(a1 + 2316);
      break;
    case 8:
      uint64_t v8 = (int *)(a1 + 2324);
      break;
    case 9:
      uint64_t v8 = (int *)(a1 + 2320);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v8 = (int *)(a1 + 2304);
      break;
    case 22:
    case 31:
      uint64_t v8 = (int *)(a1 + 2300);
      break;
    case 32:
    case 33:
      uint64_t v8 = (int *)(a1 + 2332);
      break;
    case 34:
    case 35:
      uint64_t v8 = (int *)(a1 + 2336);
      break;
    default:
      uint64_t v8 = (int *)(a1 + 2340);
      break;
  }
  int v15 = *v8;
  sub_564A80((uint64_t)a3, &v15);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v11[0]) = *v9;
  sub_564A8C((uint64_t)a3, v11);
  uint64_t v10 = 2496;
  if (!*(unsigned char *)(a1 + 3975)) {
    uint64_t v10 = 2500;
  }
  sub_564A98((uint64_t)a3, *(_DWORD *)(a1 + v10));
  sub_541538(a1, (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v13);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v14);
  sub_4D4B58((uint64_t)v14);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_541120(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_54129C(unsigned int *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 1:
    case 2:
    case 3:
      return a1[51];
    case 4:
      return a1[59];
    case 5:
      sub_564628((uint64_t)a2, (uint64_t)v6);
      switch(v7)
      {
        case 0u:
          char v4 = a1 + 64;
          break;
        case 1u:
          char v4 = a1 + 68;
          break;
        case 4u:
          char v4 = a1 + 65;
          break;
        case 5u:
          char v4 = a1 + 67;
          break;
        case 0xDu:
          char v4 = a1 + 66;
          break;
        default:
          char v4 = a1 + 63;
          break;
      }
      goto LABEL_14;
    case 6:
      sub_564628((uint64_t)a2, (uint64_t)v6);
      if (v7 > 0xE || ((1 << v7) & 0x7EEE) != 0) {
        goto LABEL_13;
      }
      if (v7)
      {
        if (v7 == 4) {
          char v4 = a1 + 62;
        }
        else {
LABEL_13:
        }
          char v4 = a1 + 60;
      }
      else
      {
        char v4 = a1 + 61;
      }
LABEL_14:
      uint64_t v3 = *v4;
      sub_3A6B94((uint64_t)v6);
      return v3;
    case 7:
      return a1[69];
    case 8:
      return a1[71];
    case 9:
      return a1[70];
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x15:
      return a1[49];
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1F:
      return a1[50];
    case 0x19:
      return a1[58];
    case 0x1A:
      return a1[52];
    case 0x1B:
      return a1[53];
    case 0x1C:
      return a1[54];
    case 0x1D:
      return a1[55];
    case 0x1E:
      return a1[56];
    case 0x20:
    case 0x21:
      return a1[72];
    case 0x22:
    case 0x23:
      return a1[73];
    case 0x24:
      return a1[57];
    default:
      return 0;
  }
}

void sub_541538(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  uint64_t v4 = *(void *)(a1 + 8);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "BannerHead_E_Bike_Offline_SAR_or_Reroute");
  int v5 = sub_8D7730(v4, (uint64_t)__p);
  if (*((char *)v5 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    uint64_t v33 = v5[2];
    long long __dst = v6;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "BannerBody_E_Bike_Offline_SAR_or_Reroute");
  uint64_t v8 = sub_8D7730(v7, (uint64_t)__p);
  if (*((char *)v8 + 23) < 0)
  {
    sub_4200(&v30, (void *)*v8, v8[1]);
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v31 = v8[2];
    long long v30 = v9;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = operator new(0x30uLL);
  long long v25 = xmmword_20B93C0;
  strcpy((char *)v24, "VoiceAlert_E_Bike_Offline_SAR_or_Reroute");
  memset(__p, 0, sizeof(__p));
  int v23 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v24, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v26);
  *(_OWORD *)uint64_t v28 = v26;
  uint64_t v29 = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  uint64_t v10 = __p[2];
  if (__p[2])
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  unsigned int v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    unint64_t v13 = *(void *)(a2 + 8);
    if (v13 < *(void *)(a2 + 16)) {
      goto LABEL_17;
    }
LABEL_20:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&__dst);
    unint64_t v15 = *(void *)(a2 + 168);
    if (v15 >= *(void *)(a2 + 176)) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  operator delete(v24);
  unint64_t v13 = *(void *)(a2 + 8);
  if (v13 >= *(void *)(a2 + 16)) {
    goto LABEL_20;
  }
LABEL_17:
  if (SHIBYTE(v33) < 0)
  {
    sub_4200((unsigned char *)v13, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v14 = __dst;
    *(void *)(v13 + 16) = v33;
    *(_OWORD *)unint64_t v13 = v14;
  }
  *(void *)(a2 + 8) = v13 + 24;
  *(void *)(a2 + 8) = v13 + 24;
  unint64_t v15 = *(void *)(a2 + 168);
  if (v15 >= *(void *)(a2 + 176))
  {
LABEL_25:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v30);
    unint64_t v17 = *(void *)(a2 + 328);
    if (v17 < *(void *)(a2 + 336)) {
      goto LABEL_26;
    }
LABEL_30:
    uint64_t v20 = sub_6E6EC((char **)(a2 + 320), (uint64_t)v28);
    char v21 = HIBYTE(v29);
    *(void *)(a2 + 328) = v20;
    if ((v21 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_21:
  if (SHIBYTE(v31) < 0)
  {
    sub_4200((unsigned char *)v15, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    long long v16 = v30;
    *(void *)(v15 + 16) = v31;
    *(_OWORD *)unint64_t v15 = v16;
  }
  *(void *)(a2 + 168) = v15 + 24;
  *(void *)(a2 + 168) = v15 + 24;
  unint64_t v17 = *(void *)(a2 + 328);
  if (v17 >= *(void *)(a2 + 336)) {
    goto LABEL_30;
  }
LABEL_26:
  char v18 = HIBYTE(v29);
  if (SHIBYTE(v29) < 0)
  {
    sub_4200((unsigned char *)v17, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    long long v19 = *(_OWORD *)v28;
    *(void *)(v17 + 16) = v29;
    *(_OWORD *)unint64_t v17 = v19;
  }
  *(void *)(a2 + 328) = v17 + 24;
  *(void *)(a2 + 328) = v17 + 24;
  if (v18 < 0) {
LABEL_34:
  }
    operator delete(v28[0]);
LABEL_35:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      return;
    }
LABEL_39:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v30);
  if (SHIBYTE(v33) < 0) {
    goto LABEL_39;
  }
}

void sub_5418BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 328) = v35;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  sub_5419D4(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_5419D4(uint64_t a1)
{
  sub_4D4B58(a1 + 480);
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

void sub_541A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_37B3A8(*(void *)a1);
  std::to_string(&v6, *(_DWORD *)(v4 + 4));
  sub_5661D4((unsigned int *)a2, (uint64_t)&v6, *(unsigned char *)(a1 + 4044));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
LABEL_3:
    std::string __p = *(std::string *)(a2 + 8);
    goto LABEL_6;
  }
  sub_4200(&__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
LABEL_6:
  sub_5649DC(&v6, &__p);
  sub_50A04(a2, &v6);
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_541B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_541B4C(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, void **a4@<X3>, uint64_t *a5@<X4>, __n128 *a6@<X5>, unsigned char *a7@<X6>, uint64_t a8@<X8>)
{
  long long v16 = (void *)sub_6467E8(a3, 0);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  sub_510340((uint64_t)&v35, v16[919], v16[920], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v16[920] - v16[919]) >> 5));
  int v38 = sub_646CE8((uint64_t)a3);
  BOOL v17 = sub_6548F8(&v38, a5, *(double *)(a1 + 5928));
  switch(*(_DWORD *)a2)
  {
    case 1:
    case 2:
    case 3:
      sub_542680(a1, (uint64_t)v16, a2, a8);
      break;
    case 4:
      sub_5430C8(a1, a3, (int *)a8);
      break;
    case 5:
      sub_5477EC(a1, (uint64_t)v16, a2, v17, a7, a8);
      break;
    case 6:
      sub_547D54(a1, v16, a2, v17, a7, a8);
      break;
    case 7:
      sub_548434(a1, (uint64_t)v16, a2, a8);
      break;
    case 8:
      sub_548CFC();
      break;
    case 9:
      if (*(unsigned char *)(a2 + 1984))
      {
        sub_50E488(a2 + 8, (uint64_t)&v38);
        sub_5492E4(a1, (uint64_t)v16, (uint64_t)&v38, a8);
      }
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    case 0xA:
    case 0xB:
    case 0xC:
      if (!*((unsigned char *)a4 + 8))
      {
        int v23 = __cxa_allocate_exception(8uLL);
        *int v23 = &off_2439078;
      }
      uint64_t v18 = sub_6467E8(*a4, 0);
      sub_542B90(a1, (uint64_t)v16, v18, a2, a8);
      break;
    case 0xD:
    case 0xE:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v24 = __cxa_allocate_exception(8uLL);
        *uint64_t v24 = &off_2439078;
      }
      sub_545C6C(a1, a3, *a4, a2, (unsigned int *)a8);
      break;
    case 0xF:
    case 0x10:
      if (!*((unsigned char *)a4 + 8))
      {
        long long v25 = __cxa_allocate_exception(8uLL);
        void *v25 = &off_2439078;
      }
      sub_546188(a1, a3, *a4, a2, (unsigned int *)a8);
      break;
    case 0x11:
    case 0x14:
      if (!*((unsigned char *)a4 + 8))
      {
        long long v26 = __cxa_allocate_exception(8uLL);
        *long long v26 = &off_2439078;
      }
      sub_546F40(a1, a3, *a4, a2, 0, (unsigned int *)a8);
      break;
    case 0x12:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v27 = __cxa_allocate_exception(8uLL);
        void *v27 = &off_2439078;
      }
      sub_5466A4(a1, a3, *a4, a2, (unsigned int *)a8);
      break;
    case 0x13:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v29 = __cxa_allocate_exception(8uLL);
        void *v29 = &off_2439078;
      }
      sub_546AF4(a1, a3, *a4, a2, (unsigned int *)a8);
      break;
    case 0x15:
      if (!*((unsigned char *)a4 + 8))
      {
        long long v30 = __cxa_allocate_exception(8uLL);
        *long long v30 = &off_2439078;
      }
      sub_5473BC(a1, a3, *a4, (int *)a8);
      break;
    case 0x16:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v34 = __cxa_allocate_exception(8uLL);
        *uint64_t v34 = &off_2439078;
      }
      sub_54973C(a1, a3, *a4, (uint64_t *)&v35, a8);
      break;
    case 0x17:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v33 = __cxa_allocate_exception(8uLL);
        *uint64_t v33 = &off_2439078;
      }
      sub_545728(a1, a3, *a4, (int *)a8);
      break;
    case 0x18:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v28 = __cxa_allocate_exception(8uLL);
        void *v28 = &off_2439078;
      }
      sub_5451E4(a1, a3, *a4, (int *)a8);
      break;
    case 0x19:
      sub_5434F0(a1, a3, (int *)a8);
      break;
    case 0x1A:
      sub_54390C(a1, a3, (int *)a8);
      break;
    case 0x1B:
      sub_543D28(a1, a3, (int *)a8);
      break;
    case 0x1C:
      sub_544144(a1, a3, (int *)a8);
      break;
    case 0x1D:
      sub_54456C(a1, a3, (int *)a8);
      break;
    case 0x1E:
      sub_544994(a1, a3, (int *)a8);
      break;
    case 0x1F:
      if (!*((unsigned char *)a4 + 8))
      {
        uint64_t v31 = __cxa_allocate_exception(8uLL);
        *uint64_t v31 = &off_2439078;
      }
      long long v19 = *a4;
      sub_564628(a2, (uint64_t)&v38);
      sub_549BE8(a1, a3, v19, (uint64_t)&v38, a8);
      sub_3A6B94((uint64_t)&v38);
      break;
    case 0x20:
    case 0x21:
      sub_54A04C(a1, a3, (int *)a8);
      break;
    case 0x24:
      sub_544DBC(a1, a3, a6, (int *)a8);
      break;
    default:
      *(_DWORD *)a8 = 0;
      bzero((void *)(a8 + 8), 0x2C8uLL);
      sub_5F3B34(a8 + 80);
      sub_5F3B34(a8 + 240);
      sub_5F3B34(a8 + 400);
      sub_5F3B34(a8 + 560);
      *(_DWORD *)(a8 + 720) = 0x7FFFFFFF;
      *(_OWORD *)(a8 + 736) = 0u;
      *(_OWORD *)(a8 + 752) = 0u;
      *(void *)(a8 + 728) = 0x7FFFFFFFFFFFFFFFLL;
      *(void *)(a8 + 744) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(a8 + 760) = 0x7FFFFFFF;
      *(_OWORD *)(a8 + 776) = 0u;
      *(_OWORD *)(a8 + 792) = 0u;
      *(void *)(a8 + 768) = 0x7FFFFFFFFFFFFFFFLL;
      *(void *)(a8 + 784) = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)(a8 + 800) = 0x7FFFFFFF;
      *(void *)(a8 + 808) = 0x9600000000;
      *(_DWORD *)(a8 + 816) = 100;
      *(_OWORD *)(a8 + 824) = 0u;
      *(_OWORD *)(a8 + 840) = 0u;
      *(_OWORD *)(a8 + 856) = 0u;
      *(_OWORD *)(a8 + 872) = 0u;
      *(_OWORD *)(a8 + 888) = 0u;
      *(_OWORD *)(a8 + 904) = 0u;
      *(_DWORD *)(a8 + 856) = -1;
      *(_DWORD *)(a8 + 867) = -1;
      *(_OWORD *)(a8 + 920) = 0u;
      *(_DWORD *)(a8 + 864) = -1;
      *(_WORD *)(a8 + 895) = 0;
      *(void *)(a8 + 887) = 0;
      *(_OWORD *)(a8 + 871) = 0u;
      *(unsigned char *)(a8 + 928) = 0;
      *(void *)(a8 + 920) = 0;
      *(_OWORD *)(a8 + 904) = 0u;
      *(_OWORD *)(a8 + 936) = 0u;
      *(_OWORD *)(a8 + 952) = 0u;
      *(void *)(a8 + 968) = 0x7FFFFFFFFFFFFFFFLL;
      *(_OWORD *)(a8 + 976) = 0u;
      *(unsigned char *)(a8 + 992) = 1;
      *(void *)(a8 + 1048) = 0;
      *(_OWORD *)(a8 + 1032) = 0u;
      *(unsigned char *)(a8 + 1028) = 0;
      *(_OWORD *)(a8 + 996) = 0u;
      *(_OWORD *)(a8 + 1012) = 0u;
      break;
  }
  uint64_t v20 = v35;
  if (v35)
  {
    uint64_t v21 = (uint64_t)v36;
    std::string v22 = v35;
    if (v36 != v35)
    {
      do
        uint64_t v21 = sub_3A6B94(v21 - 1120);
      while ((void *)v21 != v20);
      std::string v22 = v35;
    }
    uint64_t v36 = v20;
    operator delete(v22);
  }
}

void sub_5424C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
  {
    sub_4BCFD0((uint64_t)&a12);
    sub_50E790(&a9);
    _Unwind_Resume(a1);
  }
  sub_50E790(&a9);
  _Unwind_Resume(a1);
}

void sub_542680(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_55B8C8(a4);
  *(_DWORD *)a4 = *(_DWORD *)a3;
  if (sub_56472C(a3))
  {
    uint64_t v8 = sub_5645C8(a3);
    sub_50E468(v8, (uint64_t)&v15);
    if (!v17)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    int v9 = *(unsigned __int8 *)(a4 + 988);
    *(void *)(a4 + 976) = v15;
    *(_DWORD *)(a4 + 984) = v16;
    if (!v9) {
      *(unsigned char *)(a4 + 988) = 1;
    }
  }
  *(_DWORD *)(a4 + 996) = sub_564E5C(*(_DWORD *)a4);
  int v21 = *(_DWORD *)a3;
  char v23 = *(unsigned char *)(a3 + 1984);
  if (v23) {
    sub_55BBD8((uint64_t)v22, a3 + 8);
  }
  *(_DWORD *)(a4 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v21);
  if (v23)
  {
    sub_55BCE8((uint64_t)v22);
    char v23 = 0;
  }
  uint64_t v10 = (_DWORD *)sub_5645C8(a3);
  sub_55823C(a1, *(void *)(a1 + 8), (const void **)&qword_256B8A0, v10, (uint64_t)&v15);
  sub_4D90B4(a4 + 80, (uint64_t)&v15);
  sub_4D90B4(a4 + 240, (uint64_t)v18);
  sub_4D90B4(a4 + 400, (uint64_t)v19);
  sub_4D90B4(a4 + 560, (uint64_t)v20);
  sub_4D4B58((uint64_t)v20);
  sub_4D4B58((uint64_t)v19);
  sub_4D4B58((uint64_t)v18);
  sub_4D4B58((uint64_t)&v15);
  uint64_t v15 = sub_64F5D0(a2);
  sub_564A28((unsigned int *)a4, &v15);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      int v11 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      int v11 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      int v11 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      int v11 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      int v11 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      int v11 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      int v11 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      int v11 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      int v11 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      int v11 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      int v11 = (_DWORD *)(a1 + 2336);
      break;
    default:
      int v11 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(v15) = *v11;
  sub_564A80(a4, &v15);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      unsigned int v12 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      unsigned int v12 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      unsigned int v12 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      unsigned int v12 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      unsigned int v12 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      unsigned int v12 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      unsigned int v12 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      unsigned int v12 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      unsigned int v12 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      unsigned int v12 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      unsigned int v12 = (_DWORD *)(a1 + 2388);
      break;
    default:
      unsigned int v12 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v15) = *v12;
  sub_564A8C(a4, &v15);
  if (sub_564714(a3))
  {
    uint64_t v13 = sub_564628(a3, (uint64_t)&v15);
    sub_54A494(v13, (uint64_t)&v15, a2, a4);
    sub_3A6B94((uint64_t)&v15);
  }
  sub_541A20(a1, a4);
}

void sub_5429F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_3A6B94((uint64_t)&a9);
  sub_55BA78(v9);
  _Unwind_Resume(a1);
}

void sub_542B90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_55B8C8(a5);
  int v10 = *(_DWORD *)a4;
  *(_DWORD *)a5 = *(_DWORD *)a4;
  *(_DWORD *)(a5 + 996) = sub_564E5C(v10);
  int v24 = *(_DWORD *)a4;
  char v26 = *(unsigned char *)(a4 + 1984);
  if (v26) {
    sub_55BBD8((uint64_t)v25, a4 + 8);
  }
  *(_DWORD *)(a5 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v24);
  if (v26)
  {
    sub_55BCE8((uint64_t)v25);
    char v26 = 0;
  }
  int v11 = (_DWORD *)sub_5645C8(a4);
  sub_55823C(a1, *(void *)(a1 + 8), (const void **)&qword_256B888, v11, (uint64_t)&v18);
  sub_558848(a1, a2, a3, (uint64_t)&v18, 1);
  sub_4D90B4(a5 + 80, (uint64_t)&v18);
  sub_4D90B4(a5 + 240, (uint64_t)v21);
  sub_4D90B4(a5 + 400, (uint64_t)v22);
  sub_4D90B4(a5 + 560, (uint64_t)v23);
  sub_4D4B58((uint64_t)v23);
  sub_4D4B58((uint64_t)v22);
  sub_4D4B58((uint64_t)v21);
  sub_4D4B58((uint64_t)&v18);
  uint64_t v18 = sub_64F5D0(a2);
  sub_564A28((unsigned int *)a5, &v18);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      unsigned int v12 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      unsigned int v12 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      unsigned int v12 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      unsigned int v12 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      unsigned int v12 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      unsigned int v12 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      unsigned int v12 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      unsigned int v12 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      unsigned int v12 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      unsigned int v12 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      unsigned int v12 = (_DWORD *)(a1 + 2336);
      break;
    default:
      unsigned int v12 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(v18) = *v12;
  sub_564A80(a5, &v18);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v13 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v13 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v13 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v13 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v13 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v13 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v13 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v13 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v13 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      uint64_t v13 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      uint64_t v13 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v18) = *v13;
  sub_564A8C(a5, &v18);
  if (sub_564714(a4))
  {
    uint64_t v14 = sub_564628(a4, (uint64_t)&v18);
    sub_54A494(v14, (uint64_t)&v18, a2, a5);
    sub_3A6B94((uint64_t)&v18);
  }
  if (sub_56472C(a4))
  {
    uint64_t v15 = sub_5645C8(a4);
    sub_50E468(v15, (uint64_t)&v18);
    if (!v20)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    int v16 = *(unsigned __int8 *)(a5 + 988);
    *(void *)(a5 + 976) = v18;
    *(_DWORD *)(a5 + 984) = v19;
    if (!v16) {
      *(unsigned char *)(a5 + 988) = 1;
    }
  }
  sub_541A20(a1, a5);
}

void sub_542F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_3A6B94((uint64_t)&a9);
  sub_55BA78(v9);
  _Unwind_Resume(a1);
}

void sub_5430C8(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 4;
  a3[249] = sub_564E5C(4);
  sub_564578((uint64_t)&v14, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v14);
  if (v16)
  {
    sub_55BCE8((uint64_t)&v15);
    char v16 = 0;
  }
  BOOL v6 = sub_64695C(a2) != 0;
  sub_5505B8(a1, v6, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  uint64_t v7 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v7 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v8 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v8 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      uint64_t v8 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      uint64_t v8 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      uint64_t v8 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      uint64_t v8 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      uint64_t v8 = (_DWORD *)(a1 + 2320);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v8 = (_DWORD *)(a1 + 2304);
      break;
    case 22:
    case 31:
      uint64_t v8 = (_DWORD *)(a1 + 2300);
      break;
    case 32:
    case 33:
      uint64_t v8 = (_DWORD *)(a1 + 2332);
      break;
    case 34:
    case 35:
      uint64_t v8 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v8 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(v10[0]) = *v8;
  sub_564A80((uint64_t)a3, v10);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_543374(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_5434F0(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 25;
  a3[249] = sub_564E5C(25);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_551094(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_543794(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_54390C(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 26;
  a3[249] = sub_564E5C(26);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_5517B4(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_543BB0(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_543D28(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 27;
  a3[249] = sub_564E5C(27);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_5527A4(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_543FCC(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_544144(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 28;
  a3[249] = sub_564E5C(28);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_564A98((uint64_t)a3, *(_DWORD *)(a1 + 2508));
  sub_552EC4(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_5443F4(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_54456C(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 29;
  a3[249] = sub_564E5C(29);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_564A98((uint64_t)a3, *(_DWORD *)(a1 + 2504));
  sub_5535E4(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_54481C(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_544994(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  *a3 = 30;
  a3[249] = sub_564E5C(30);
  sub_564578((uint64_t)&v15, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v15);
  if (v17)
  {
    sub_55BCE8((uint64_t)&v16);
    char v17 = 0;
  }
  uint64_t v6 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v6 + 504));
  v10[0] = 0;
  sub_564A54((unsigned int *)a3, v10);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v7 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v7 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v7 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v7 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v7 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v7 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v7 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v7 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v7 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v7 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v7 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v7 = (int *)(a1 + 2340);
        break;
    }
    int v8 = *v7;
  }
  else
  {
    int v8 = 2147483646;
  }
  int v14 = v8;
  sub_564A80((uint64_t)a3, &v14);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v9 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v9 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v9 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v9 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v9 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v9 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v9 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v9 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v9 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v9 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v9 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v10[0]) = *v9;
  sub_564A8C((uint64_t)a3, v10);
  sub_564A98((uint64_t)a3, *(_DWORD *)(a1 + 2520));
  sub_553D04(a1, (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v10);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v11);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_4D4B58((uint64_t)v11);
  sub_4D4B58((uint64_t)v10);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_544C44(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_544DBC(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, int *a4@<X8>)
{
  sub_55B8C8((uint64_t)a4);
  *a4 = 36;
  a4[249] = sub_564E5C(36);
  sub_564578((uint64_t)&v17, *a4);
  a4[202] = sub_54129C((unsigned int *)(a1 + 2200), &v17);
  if (v19)
  {
    sub_55BCE8((uint64_t)&v18);
    char v19 = 0;
  }
  uint64_t v8 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a4, (void *)(v8 + 504));
  v12[0] = 0;
  sub_564A54((unsigned int *)a4, v12);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a4)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v9 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v9 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v9 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v9 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v9 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v9 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v9 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v9 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v9 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v9 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v9 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v9 = (int *)(a1 + 2340);
        break;
    }
    int v10 = *v9;
  }
  else
  {
    int v10 = 2147483646;
  }
  int v16 = v10;
  sub_564A80((uint64_t)a4, &v16);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      int v11 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      int v11 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      int v11 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      int v11 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      int v11 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      int v11 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      int v11 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      int v11 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      int v11 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      int v11 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      int v11 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v11 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v12[0]) = *v11;
  sub_564A8C((uint64_t)a4, v12);
  sub_551ED4((void **)a1, a2, a3, (uint64_t)v12);
  sub_4D90B4((uint64_t)(a4 + 20), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a4 + 60), (uint64_t)v13);
  sub_4D90B4((uint64_t)(a4 + 100), (uint64_t)v14);
  sub_4D90B4((uint64_t)(a4 + 140), (uint64_t)v15);
  sub_4D4B58((uint64_t)v15);
  sub_4D4B58((uint64_t)v14);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_541A20(a1, (uint64_t)a4);
}

void sub_54506C(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_5451E4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, int *a4@<X8>)
{
  unint64_t v8 = sub_64695C(a3);
  unint64_t v9 = sub_64695C(a2);
  sub_55B8C8((uint64_t)a4);
  *a4 = 24;
  a4[249] = sub_564E5C(24);
  sub_564578((uint64_t)&v25, *a4);
  a4[202] = sub_54129C((unsigned int *)(a1 + 2200), &v25);
  if (v27)
  {
    sub_55BCE8((uint64_t)&v26);
    char v27 = 0;
  }
  uint64_t v10 = sub_6467E8(a2, 0);
  int v11 = sub_564A28((unsigned int *)a4, (void *)(v10 + 504));
  sub_54A58C((uint64_t)v11, a2, a3, (unsigned int *)a4);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      unsigned int v12 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      unsigned int v12 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      unsigned int v12 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      unsigned int v12 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      unsigned int v12 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      unsigned int v12 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      unsigned int v12 = (_DWORD *)(a1 + 2320);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      unsigned int v12 = (_DWORD *)(a1 + 2304);
      break;
    case 22:
    case 31:
      unsigned int v12 = (_DWORD *)(a1 + 2300);
      break;
    case 32:
    case 33:
      unsigned int v12 = (_DWORD *)(a1 + 2332);
      break;
    case 34:
    case 35:
      unsigned int v12 = (_DWORD *)(a1 + 2336);
      break;
    default:
      unsigned int v12 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(__p[0]) = *v12;
  sub_564A80((uint64_t)a4, __p);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v13 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v13 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v13 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v13 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v13 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v13 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v13 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v13 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v13 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v13 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v13 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(__p[0]) = *v13;
  sub_564A8C((uint64_t)a4, __p);
  unint64_t v14 = v9 - v8;
  sub_54C3F4(a1, 0, v9 - v8 > 1, (uint64_t)__p);
  sub_4D90B4((uint64_t)(a4 + 20), (uint64_t)__p);
  sub_4D90B4((uint64_t)(a4 + 60), (uint64_t)v22);
  sub_4D90B4((uint64_t)(a4 + 100), (uint64_t)v23);
  sub_4D90B4((uint64_t)(a4 + 140), (uint64_t)v24);
  sub_4D4B58((uint64_t)v24);
  sub_4D4B58((uint64_t)v23);
  sub_4D4B58((uint64_t)v22);
  sub_4D4B58((uint64_t)__p);
  uint64_t v15 = 171;
  if (v9 - v8 > 1) {
    uint64_t v15 = 174;
  }
  int v16 = &qword_256C1D8;
  if (v14 <= 1) {
    int v16 = &qword_256C1C0;
  }
  int v17 = &byte_256C1D7;
  if (v14 > 1) {
    int v17 = &byte_256C1EF;
  }
  if (*v17 < 0)
  {
    uint64_t v18 = (void *)qword_256BC68[v15];
    char v19 = &qword_256C1E0;
    if (v14 <= 1) {
      char v19 = &qword_256C1C8;
    }
    sub_4200(__p, v18, *v19);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v16;
    uint64_t v21 = v16[2];
  }
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)__p, (uint64_t)a4, 1, 1);
  sub_541A20(a1, (uint64_t)a4);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
}

void sub_54554C(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545560(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545574(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545588(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_54559C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xA40]))
  {
    sub_55BCE8((uint64_t)&STACK[0x288]);
    LOBYTE(STACK[0xA40]) = 0;
    sub_55BA78(v1);
    _Unwind_Resume(a1);
  }
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545728(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, int *a4@<X8>)
{
  unint64_t v8 = sub_64695C(a3);
  unint64_t v9 = sub_64695C(a2);
  sub_55B8C8((uint64_t)a4);
  *a4 = 23;
  a4[249] = sub_564E5C(23);
  sub_564578((uint64_t)&v25, *a4);
  a4[202] = sub_54129C((unsigned int *)(a1 + 2200), &v25);
  if (v27)
  {
    sub_55BCE8((uint64_t)&v26);
    char v27 = 0;
  }
  uint64_t v10 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a4, (void *)(v10 + 504));
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      int v11 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      int v11 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      int v11 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      int v11 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      int v11 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      int v11 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      int v11 = (_DWORD *)(a1 + 2320);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      int v11 = (_DWORD *)(a1 + 2304);
      break;
    case 22:
    case 31:
      int v11 = (_DWORD *)(a1 + 2300);
      break;
    case 32:
    case 33:
      int v11 = (_DWORD *)(a1 + 2332);
      break;
    case 34:
    case 35:
      int v11 = (_DWORD *)(a1 + 2336);
      break;
    default:
      int v11 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(__p[0]) = *v11;
  sub_564A80((uint64_t)a4, __p);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      unsigned int v12 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      unsigned int v12 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      unsigned int v12 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      unsigned int v12 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      unsigned int v12 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      unsigned int v12 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      unsigned int v12 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      unsigned int v12 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      unsigned int v12 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      unsigned int v12 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      unsigned int v12 = (_DWORD *)(a1 + 2388);
      break;
    default:
      unsigned int v12 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(__p[0]) = *v12;
  uint64_t v13 = sub_564A8C((uint64_t)a4, __p);
  sub_54A58C(v13, a2, a3, (unsigned int *)a4);
  unint64_t v14 = v8 - v9;
  sub_54C3F4(a1, 1, v14 > 1, (uint64_t)__p);
  sub_4D90B4((uint64_t)(a4 + 20), (uint64_t)__p);
  sub_4D90B4((uint64_t)(a4 + 60), (uint64_t)v22);
  sub_4D90B4((uint64_t)(a4 + 100), (uint64_t)v23);
  sub_4D90B4((uint64_t)(a4 + 140), (uint64_t)v24);
  sub_4D4B58((uint64_t)v24);
  sub_4D4B58((uint64_t)v23);
  sub_4D4B58((uint64_t)v22);
  sub_4D4B58((uint64_t)__p);
  uint64_t v15 = 165;
  if (v14 > 1) {
    uint64_t v15 = 168;
  }
  int v16 = &qword_256C1A8;
  if (v14 <= 1) {
    int v16 = &qword_256C190;
  }
  int v17 = &byte_256C1A7;
  if (v14 > 1) {
    int v17 = &byte_256C1BF;
  }
  if (*v17 < 0)
  {
    uint64_t v18 = (void *)qword_256BC68[v15];
    char v19 = &qword_256C1B0;
    if (v14 <= 1) {
      char v19 = &qword_256C198;
    }
    sub_4200(__p, v18, *v19);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v16;
    uint64_t v21 = v16[2];
  }
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)__p, (uint64_t)a4, 1, 1);
  sub_541A20(a1, (uint64_t)a4);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
}

void sub_545A90(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545AA4(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545AB8(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545ACC(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545AE0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xA40]))
  {
    sub_55BCE8((uint64_t)&STACK[0x288]);
    LOBYTE(STACK[0xA40]) = 0;
    sub_55BA78(v1);
    _Unwind_Resume(a1);
  }
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_545C6C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  unint64_t v10 = sub_64695C(a3);
  unint64_t v11 = sub_64695C(a2);
  sub_55B8C8((uint64_t)a5);
  int v12 = *(_DWORD *)a4;
  *a5 = *(_DWORD *)a4;
  a5[249] = sub_564E5C(v12);
  int v29 = *(_DWORD *)a4;
  char v31 = *(unsigned char *)(a4 + 1984);
  if (v31) {
    sub_55BBD8((uint64_t)v30, a4 + 8);
  }
  a5[202] = sub_54129C((unsigned int *)(a1 + 2200), &v29);
  if (v31)
  {
    sub_55BCE8((uint64_t)v30);
    char v31 = 0;
  }
  uint64_t v13 = sub_6467E8(a2, 0);
  unint64_t v14 = sub_564A28(a5, (void *)(v13 + 504));
  sub_54A58C((uint64_t)v14, a2, a3, a5);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      uint64_t v15 = (_DWORD *)(a1 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      uint64_t v15 = (_DWORD *)(a1 + 2296);
      break;
    case 5u:
      uint64_t v15 = (_DWORD *)(a1 + 2308);
      break;
    case 6u:
      uint64_t v15 = (_DWORD *)(a1 + 2312);
      break;
    case 7u:
      uint64_t v15 = (_DWORD *)(a1 + 2316);
      break;
    case 8u:
      uint64_t v15 = (_DWORD *)(a1 + 2324);
      break;
    case 9u:
      uint64_t v15 = (_DWORD *)(a1 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      uint64_t v15 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      uint64_t v15 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      uint64_t v15 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      uint64_t v15 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v15 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(__p[0]) = *v15;
  sub_564A80((uint64_t)a5, __p);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      int v16 = (_DWORD *)(a1 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      int v16 = (_DWORD *)(a1 + 2344);
      break;
    case 5u:
      int v16 = (_DWORD *)(a1 + 2356);
      break;
    case 6u:
      int v16 = (_DWORD *)(a1 + 2360);
      break;
    case 7u:
      int v16 = (_DWORD *)(a1 + 2364);
      break;
    case 8u:
      int v16 = (_DWORD *)(a1 + 2372);
      break;
    case 9u:
      int v16 = (_DWORD *)(a1 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      int v16 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      int v16 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      int v16 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      int v16 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v16 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(__p[0]) = *v16;
  sub_564A8C((uint64_t)a5, __p);
  int v17 = sub_5647D0((_DWORD *)a4);
  unint64_t v18 = v10 - v11;
  sub_54CC90(a1, v10 - v11 > 1, v17, (uint64_t)__p);
  sub_4D90B4((uint64_t)(a5 + 20), (uint64_t)__p);
  sub_4D90B4((uint64_t)(a5 + 60), (uint64_t)v26);
  sub_4D90B4((uint64_t)(a5 + 100), (uint64_t)v27);
  sub_4D90B4((uint64_t)(a5 + 140), (uint64_t)v28);
  sub_4D4B58((uint64_t)v28);
  sub_4D4B58((uint64_t)v27);
  sub_4D4B58((uint64_t)v26);
  sub_4D4B58((uint64_t)__p);
  uint64_t v19 = 165;
  if (v10 - v11 > 1) {
    uint64_t v19 = 168;
  }
  char v20 = &qword_256C1A8;
  if (v18 <= 1) {
    char v20 = &qword_256C190;
  }
  uint64_t v21 = &byte_256C1A7;
  if (v18 > 1) {
    uint64_t v21 = &byte_256C1BF;
  }
  if (*v21 < 0)
  {
    std::string v22 = (void *)qword_256BC68[v19];
    char v23 = &qword_256C1B0;
    if (v18 <= 1) {
      char v23 = &qword_256C198;
    }
    sub_4200(__p, v22, *v23);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v20;
    uint64_t v25 = v20[2];
  }
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)__p, (uint64_t)a5, 1, 1);
  sub_541A20(a1, (uint64_t)a5);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
}

void sub_545FF4(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_546188(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  unint64_t v10 = sub_64695C(a3);
  unint64_t v11 = sub_64695C(a2);
  sub_55B8C8((uint64_t)a5);
  int v12 = *(_DWORD *)a4;
  *a5 = *(_DWORD *)a4;
  a5[249] = sub_564E5C(v12);
  int v29 = *(_DWORD *)a4;
  char v31 = *(unsigned char *)(a4 + 1984);
  if (v31) {
    sub_55BBD8((uint64_t)v30, a4 + 8);
  }
  a5[202] = sub_54129C((unsigned int *)(a1 + 2200), &v29);
  if (v31)
  {
    sub_55BCE8((uint64_t)v30);
    char v31 = 0;
  }
  uint64_t v13 = sub_6467E8(a2, 0);
  unint64_t v14 = sub_564A28(a5, (void *)(v13 + 504));
  sub_54A58C((uint64_t)v14, a2, a3, a5);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      uint64_t v15 = (_DWORD *)(a1 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      uint64_t v15 = (_DWORD *)(a1 + 2296);
      break;
    case 5u:
      uint64_t v15 = (_DWORD *)(a1 + 2308);
      break;
    case 6u:
      uint64_t v15 = (_DWORD *)(a1 + 2312);
      break;
    case 7u:
      uint64_t v15 = (_DWORD *)(a1 + 2316);
      break;
    case 8u:
      uint64_t v15 = (_DWORD *)(a1 + 2324);
      break;
    case 9u:
      uint64_t v15 = (_DWORD *)(a1 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      uint64_t v15 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      uint64_t v15 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      uint64_t v15 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      uint64_t v15 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v15 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(__p[0]) = *v15;
  sub_564A80((uint64_t)a5, __p);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      int v16 = (_DWORD *)(a1 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      int v16 = (_DWORD *)(a1 + 2344);
      break;
    case 5u:
      int v16 = (_DWORD *)(a1 + 2356);
      break;
    case 6u:
      int v16 = (_DWORD *)(a1 + 2360);
      break;
    case 7u:
      int v16 = (_DWORD *)(a1 + 2364);
      break;
    case 8u:
      int v16 = (_DWORD *)(a1 + 2372);
      break;
    case 9u:
      int v16 = (_DWORD *)(a1 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      int v16 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      int v16 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      int v16 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      int v16 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v16 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(__p[0]) = *v16;
  sub_564A8C((uint64_t)a5, __p);
  int v17 = sub_5647D0((_DWORD *)a4);
  unint64_t v18 = v10 - v11;
  sub_54D6C4(a1, v10 - v11 > 1, v17, (uint64_t)__p);
  sub_4D90B4((uint64_t)(a5 + 20), (uint64_t)__p);
  sub_4D90B4((uint64_t)(a5 + 60), (uint64_t)v26);
  sub_4D90B4((uint64_t)(a5 + 100), (uint64_t)v27);
  sub_4D90B4((uint64_t)(a5 + 140), (uint64_t)v28);
  sub_4D4B58((uint64_t)v28);
  sub_4D4B58((uint64_t)v27);
  sub_4D4B58((uint64_t)v26);
  sub_4D4B58((uint64_t)__p);
  uint64_t v19 = 165;
  if (v10 - v11 > 1) {
    uint64_t v19 = 168;
  }
  char v20 = &qword_256C1A8;
  if (v18 <= 1) {
    char v20 = &qword_256C190;
  }
  uint64_t v21 = &byte_256C1A7;
  if (v18 > 1) {
    uint64_t v21 = &byte_256C1BF;
  }
  if (*v21 < 0)
  {
    std::string v22 = (void *)qword_256BC68[v19];
    char v23 = &qword_256C1B0;
    if (v18 <= 1) {
      char v23 = &qword_256C198;
    }
    sub_4200(__p, v22, *v23);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v20;
    uint64_t v25 = v20[2];
  }
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)__p, (uint64_t)a5, 1, 1);
  sub_541A20(a1, (uint64_t)a5);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
}

void sub_546510(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_5466A4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  sub_55B8C8((uint64_t)a5);
  int v10 = *(_DWORD *)a4;
  *a5 = *(_DWORD *)a4;
  a5[249] = sub_564E5C(v10);
  int v19 = *(_DWORD *)a4;
  char v21 = *(unsigned char *)(a4 + 1984);
  if (v21) {
    sub_55BBD8((uint64_t)v20, a4 + 8);
  }
  a5[202] = sub_54129C((unsigned int *)(a1 + 2200), &v19);
  if (v21)
  {
    sub_55BCE8((uint64_t)v20);
    char v21 = 0;
  }
  uint64_t v11 = sub_6467E8(a2, 0);
  int v12 = sub_564A28(a5, (void *)(v11 + 504));
  sub_54A58C((uint64_t)v12, a2, a3, a5);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      uint64_t v13 = (_DWORD *)(a1 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      uint64_t v13 = (_DWORD *)(a1 + 2296);
      break;
    case 5u:
      uint64_t v13 = (_DWORD *)(a1 + 2308);
      break;
    case 6u:
      uint64_t v13 = (_DWORD *)(a1 + 2312);
      break;
    case 7u:
      uint64_t v13 = (_DWORD *)(a1 + 2316);
      break;
    case 8u:
      uint64_t v13 = (_DWORD *)(a1 + 2324);
      break;
    case 9u:
      uint64_t v13 = (_DWORD *)(a1 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      uint64_t v13 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      uint64_t v13 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      uint64_t v13 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      uint64_t v13 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2340);
      break;
  }
  v15[0] = *v13;
  sub_564A80((uint64_t)a5, v15);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      unint64_t v14 = (_DWORD *)(a1 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      unint64_t v14 = (_DWORD *)(a1 + 2344);
      break;
    case 5u:
      unint64_t v14 = (_DWORD *)(a1 + 2356);
      break;
    case 6u:
      unint64_t v14 = (_DWORD *)(a1 + 2360);
      break;
    case 7u:
      unint64_t v14 = (_DWORD *)(a1 + 2364);
      break;
    case 8u:
      unint64_t v14 = (_DWORD *)(a1 + 2372);
      break;
    case 9u:
      unint64_t v14 = (_DWORD *)(a1 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      unint64_t v14 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      unint64_t v14 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      unint64_t v14 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      unint64_t v14 = (_DWORD *)(a1 + 2388);
      break;
    default:
      unint64_t v14 = (_DWORD *)(a1 + 2392);
      break;
  }
  v15[0] = *v14;
  sub_564A8C((uint64_t)a5, v15);
  sub_54E0B4(a1, a3, a2, (uint64_t)v15);
  sub_4D90B4((uint64_t)(a5 + 20), (uint64_t)v15);
  sub_4D90B4((uint64_t)(a5 + 60), (uint64_t)v16);
  sub_4D90B4((uint64_t)(a5 + 100), (uint64_t)v17);
  sub_4D90B4((uint64_t)(a5 + 140), (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  sub_4D4B58((uint64_t)v17);
  sub_4D4B58((uint64_t)v16);
  sub_4D4B58((uint64_t)v15);
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)&qword_256C178, (uint64_t)a5, 1, 1);
  sub_541A20(a1, (uint64_t)a5);
}

void sub_54697C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_546AF4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  sub_55B8C8((uint64_t)a5);
  int v10 = *(_DWORD *)a4;
  *a5 = *(_DWORD *)a4;
  a5[249] = sub_564E5C(v10);
  int v19 = *(_DWORD *)a4;
  char v21 = *(unsigned char *)(a4 + 1984);
  if (v21) {
    sub_55BBD8((uint64_t)v20, a4 + 8);
  }
  a5[202] = sub_54129C((unsigned int *)(a1 + 2200), &v19);
  if (v21)
  {
    sub_55BCE8((uint64_t)v20);
    char v21 = 0;
  }
  uint64_t v11 = sub_6467E8(a2, 0);
  int v12 = sub_564A28(a5, (void *)(v11 + 504));
  sub_54A58C((uint64_t)v12, a2, a3, a5);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      uint64_t v13 = (_DWORD *)(a1 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      uint64_t v13 = (_DWORD *)(a1 + 2296);
      break;
    case 5u:
      uint64_t v13 = (_DWORD *)(a1 + 2308);
      break;
    case 6u:
      uint64_t v13 = (_DWORD *)(a1 + 2312);
      break;
    case 7u:
      uint64_t v13 = (_DWORD *)(a1 + 2316);
      break;
    case 8u:
      uint64_t v13 = (_DWORD *)(a1 + 2324);
      break;
    case 9u:
      uint64_t v13 = (_DWORD *)(a1 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      uint64_t v13 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      uint64_t v13 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      uint64_t v13 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      uint64_t v13 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2340);
      break;
  }
  v15[0] = *v13;
  sub_564A80((uint64_t)a5, v15);
  switch(*a5)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      unint64_t v14 = (_DWORD *)(a1 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      unint64_t v14 = (_DWORD *)(a1 + 2344);
      break;
    case 5u:
      unint64_t v14 = (_DWORD *)(a1 + 2356);
      break;
    case 6u:
      unint64_t v14 = (_DWORD *)(a1 + 2360);
      break;
    case 7u:
      unint64_t v14 = (_DWORD *)(a1 + 2364);
      break;
    case 8u:
      unint64_t v14 = (_DWORD *)(a1 + 2372);
      break;
    case 9u:
      unint64_t v14 = (_DWORD *)(a1 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      unint64_t v14 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      unint64_t v14 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      unint64_t v14 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      unint64_t v14 = (_DWORD *)(a1 + 2388);
      break;
    default:
      unint64_t v14 = (_DWORD *)(a1 + 2392);
      break;
  }
  v15[0] = *v14;
  sub_564A8C((uint64_t)a5, v15);
  sub_54E9A8(a1, a3, (uint64_t)v15);
  sub_4D90B4((uint64_t)(a5 + 20), (uint64_t)v15);
  sub_4D90B4((uint64_t)(a5 + 60), (uint64_t)v16);
  sub_4D90B4((uint64_t)(a5 + 100), (uint64_t)v17);
  sub_4D90B4((uint64_t)(a5 + 140), (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  sub_4D4B58((uint64_t)v17);
  sub_4D4B58((uint64_t)v16);
  sub_4D4B58((uint64_t)v15);
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)&qword_256C178, (uint64_t)a5, 1, 1);
  sub_541A20(a1, (uint64_t)a5);
}

void sub_546DC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_546F40(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unsigned int *a6@<X8>)
{
  unint64_t v12 = sub_64695C(a3);
  sub_55B8C8((uint64_t)a6);
  int v13 = *(_DWORD *)a4;
  *a6 = *(_DWORD *)a4;
  a6[249] = sub_564E5C(v13);
  int v23 = *(_DWORD *)a4;
  char v25 = *(unsigned char *)(a4 + 1984);
  if (v25) {
    sub_55BBD8((uint64_t)v24, a4 + 8);
  }
  a6[202] = sub_54129C((unsigned int *)(a1 + 2200), &v23);
  if (v25)
  {
    sub_55BCE8((uint64_t)v24);
    char v25 = 0;
  }
  uint64_t v14 = sub_6467E8(a2, 0);
  uint64_t v15 = sub_564A28(a6, (void *)(v14 + 504));
  sub_54A58C((uint64_t)v15, a2, a3, a6);
  switch(*a6)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      int v16 = (_DWORD *)(a1 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      int v16 = (_DWORD *)(a1 + 2296);
      break;
    case 5u:
      int v16 = (_DWORD *)(a1 + 2308);
      break;
    case 6u:
      int v16 = (_DWORD *)(a1 + 2312);
      break;
    case 7u:
      int v16 = (_DWORD *)(a1 + 2316);
      break;
    case 8u:
      int v16 = (_DWORD *)(a1 + 2324);
      break;
    case 9u:
      int v16 = (_DWORD *)(a1 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      int v16 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      int v16 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      int v16 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      int v16 = (_DWORD *)(a1 + 2336);
      break;
    default:
      int v16 = (_DWORD *)(a1 + 2340);
      break;
  }
  v19[0] = *v16;
  sub_564A80((uint64_t)a6, v19);
  switch(*a6)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      int v17 = (_DWORD *)(a1 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      int v17 = (_DWORD *)(a1 + 2344);
      break;
    case 5u:
      int v17 = (_DWORD *)(a1 + 2356);
      break;
    case 6u:
      int v17 = (_DWORD *)(a1 + 2360);
      break;
    case 7u:
      int v17 = (_DWORD *)(a1 + 2364);
      break;
    case 8u:
      int v17 = (_DWORD *)(a1 + 2372);
      break;
    case 9u:
      int v17 = (_DWORD *)(a1 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      int v17 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      int v17 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      int v17 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      int v17 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v17 = (_DWORD *)(a1 + 2392);
      break;
  }
  v19[0] = *v17;
  sub_564A8C((uint64_t)a6, v19);
  int v18 = sub_5647D0((_DWORD *)a4);
  sub_54F198(a1, v12 > 1, v18, a5, (uint64_t)v19);
  sub_4D90B4((uint64_t)(a6 + 20), (uint64_t)v19);
  sub_4D90B4((uint64_t)(a6 + 60), (uint64_t)v20);
  sub_4D90B4((uint64_t)(a6 + 100), (uint64_t)v21);
  sub_4D90B4((uint64_t)(a6 + 140), (uint64_t)v22);
  sub_4D4B58((uint64_t)v22);
  sub_4D4B58((uint64_t)v21);
  sub_4D4B58((uint64_t)v20);
  sub_4D4B58((uint64_t)v19);
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)&qword_256C178, (uint64_t)a6, 1, 1);
  sub_541A20(a1, (uint64_t)a6);
}

void sub_547240(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_5473BC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, int *a4@<X8>)
{
  sub_55B8C8((uint64_t)a4);
  *a4 = 21;
  a4[249] = sub_564E5C(21);
  sub_564578((uint64_t)&v16, *a4);
  a4[202] = sub_54129C((unsigned int *)(a1 + 2200), &v16);
  if (v18)
  {
    sub_55BCE8((uint64_t)&v17);
    char v18 = 0;
  }
  uint64_t v8 = sub_6467E8(a2, 0);
  unint64_t v9 = sub_564A28((unsigned int *)a4, (void *)(v8 + 504));
  sub_54A58C((uint64_t)v9, a2, a3, (unsigned int *)a4);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      int v10 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      int v10 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      int v10 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      int v10 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      int v10 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      int v10 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      int v10 = (_DWORD *)(a1 + 2320);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      int v10 = (_DWORD *)(a1 + 2304);
      break;
    case 22:
    case 31:
      int v10 = (_DWORD *)(a1 + 2300);
      break;
    case 32:
    case 33:
      int v10 = (_DWORD *)(a1 + 2332);
      break;
    case 34:
    case 35:
      int v10 = (_DWORD *)(a1 + 2336);
      break;
    default:
      int v10 = (_DWORD *)(a1 + 2340);
      break;
  }
  v12[0] = *v10;
  sub_564A80((uint64_t)a4, v12);
  switch(*a4)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v11 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v11 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v11 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v11 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v11 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v11 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v11 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v11 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v11 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v11 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v11 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v11 = (_DWORD *)(a1 + 2392);
      break;
  }
  v12[0] = *v11;
  sub_564A8C((uint64_t)a4, v12);
  sub_54FC70(a1, (uint64_t)a3, (uint64_t)v12);
  sub_4D90B4((uint64_t)(a4 + 20), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a4 + 60), (uint64_t)v13);
  sub_4D90B4((uint64_t)(a4 + 100), (uint64_t)v14);
  sub_4D90B4((uint64_t)(a4 + 140), (uint64_t)v15);
  sub_4D4B58((uint64_t)v15);
  sub_4D4B58((uint64_t)v14);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_54B708(a1, (uint64_t)&qword_256C160, (uint64_t)&qword_256C178, (uint64_t)a4, 1, 1);
  sub_541A20(a1, (uint64_t)a4);
}

void sub_547678(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5477EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  sub_564628(a3, (uint64_t)v40);
  BOOL v12 = sub_605754((uint64_t)v40);
  uint64_t v13 = sub_55B8C8(a6);
  sub_54A494(v13, (uint64_t)v40, a2, a6);
  if (*(unsigned char *)(a1 + 4047)) {
    char v14 = v12;
  }
  else {
    char v14 = 1;
  }
  if ((v14 & 1) == 0) {
    sub_566594(a6, v41);
  }
  int v15 = *(_DWORD *)a3;
  *(_DWORD *)a6 = *(_DWORD *)a3;
  *(_DWORD *)(a6 + 996) = sub_564E5C(v15);
  int v37 = *(_DWORD *)a3;
  char v39 = *(unsigned char *)(a3 + 1984);
  if (v39) {
    sub_55BBD8((uint64_t)v38, a3 + 8);
  }
  *(_DWORD *)(a6 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v37);
  if (v39)
  {
    sub_55BCE8((uint64_t)v38);
    char v39 = 0;
  }
  uint64_t v36 = sub_64F5D0(a2);
  uint64_t v16 = sub_64F5D0(a2);
  uint64_t v17 = *(void *)(a1 + 2208) + *(void *)(a6 + 968);
  if (v17 >= v16) {
    uint64_t v17 = v16;
  }
  uint64_t v35 = v17;
  if (v12 && *(unsigned char *)(a1 + 3980))
  {
    uint64_t v18 = sub_64F5D0(a2);
    uint64_t v19 = *(void *)(a6 + 968);
    uint64_t v20 = *(void *)(a1 + 2240) + v19;
    if (v20 >= v18) {
      uint64_t v20 = v18;
    }
    uint64_t v36 = v20;
    uint64_t v21 = *(void *)(a1 + 2216);
    BOOL v22 = v19 < v21;
    uint64_t v23 = v19 - v21;
    if (v22) {
      uint64_t v23 = 0;
    }
    uint64_t v35 = v23;
    *a5 = 1;
  }
  sub_564A28((unsigned int *)a6, &v36);
  sub_564A54((unsigned int *)a6, &v35);
  if (v12)
  {
    int v34 = *(_DWORD *)(a1 + 2292);
    int v24 = (int *)(a1 + 2380);
  }
  else
  {
    unsigned int v27 = *(_DWORD *)a6;
    switch(*(_DWORD *)a6)
    {
      case 0:
        int v34 = *(_DWORD *)(a1 + 2340);
LABEL_38:
        int v24 = (int *)(a1 + 2392);
        break;
      case 1:
      case 2:
      case 3:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v28 = (int *)(a1 + 2328);
        goto LABEL_30;
      case 4:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x24:
        uint64_t v28 = (int *)(a1 + 2296);
        goto LABEL_30;
      case 5:
        int v34 = *(_DWORD *)(a1 + 2308);
LABEL_40:
        int v24 = (int *)(a1 + 2356);
        break;
      case 6:
        int v34 = *(_DWORD *)(a1 + 2312);
LABEL_42:
        int v24 = (int *)(a1 + 2360);
        break;
      case 7:
        int v34 = *(_DWORD *)(a1 + 2316);
LABEL_44:
        int v24 = (int *)(a1 + 2364);
        break;
      case 8:
        int v34 = *(_DWORD *)(a1 + 2324);
LABEL_46:
        int v24 = (int *)(a1 + 2372);
        break;
      case 9:
        int v34 = *(_DWORD *)(a1 + 2320);
LABEL_48:
        int v24 = (int *)(a1 + 2368);
        break;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x18:
        uint64_t v28 = (int *)(a1 + 2304);
        goto LABEL_30;
      case 0x16:
      case 0x1F:
        uint64_t v28 = (int *)(a1 + 2300);
        goto LABEL_30;
      case 0x20:
      case 0x21:
        uint64_t v28 = (int *)(a1 + 2332);
        goto LABEL_30;
      case 0x22:
      case 0x23:
        uint64_t v28 = (int *)(a1 + 2336);
        goto LABEL_30;
      default:
        uint64_t v28 = (int *)(a1 + 2340);
LABEL_30:
        int v34 = *v28;
        switch(v27)
        {
          case 1u:
          case 2u:
          case 3u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
            int v24 = (int *)(a1 + 2376);
            break;
          case 4u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x24u:
            int v24 = (int *)(a1 + 2344);
            break;
          case 5u:
            goto LABEL_40;
          case 6u:
            goto LABEL_42;
          case 7u:
            goto LABEL_44;
          case 8u:
            goto LABEL_46;
          case 9u:
            goto LABEL_48;
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x17u:
          case 0x18u:
            int v24 = (int *)(a1 + 2352);
            break;
          case 0x16u:
          case 0x1Fu:
            int v24 = (int *)(a1 + 2348);
            break;
          case 0x20u:
          case 0x21u:
            int v24 = (int *)(a1 + 2384);
            break;
          case 0x22u:
          case 0x23u:
            int v24 = (int *)(a1 + 2388);
            break;
          default:
            goto LABEL_38;
        }
        break;
    }
  }
  int v33 = *v24;
  sub_564A80(a6, &v34);
  sub_564A8C(a6, &v33);
  sub_554424(a1, (uint64_t)v40, a4, (uint64_t)v29);
  sub_4D90B4(a6 + 80, (uint64_t)v29);
  sub_4D90B4(a6 + 240, (uint64_t)v30);
  sub_4D90B4(a6 + 400, (uint64_t)v31);
  sub_4D90B4(a6 + 560, (uint64_t)v32);
  sub_4D4B58((uint64_t)v32);
  sub_4D4B58((uint64_t)v31);
  sub_4D4B58((uint64_t)v30);
  sub_4D4B58((uint64_t)v29);
  long long v25 = *(_OWORD *)(a6 + 744);
  *(_OWORD *)(a6 + 768) = *(_OWORD *)(a6 + 728);
  *(_OWORD *)(a6 + 784) = v25;
  *(_DWORD *)(a6 + 800) = *(_DWORD *)(a6 + 760);
  sub_541A20(a1, a6);
  return sub_3A6B94((uint64_t)v40);
}

void sub_547B94(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  sub_3A6B94((uint64_t)&STACK[0xA68]);
  _Unwind_Resume(a1);
}

uint64_t sub_547D54@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  sub_564628(a3, (uint64_t)v41);
  uint64_t v12 = sub_55B8C8(a6);
  sub_54A494(v12, (uint64_t)v41, (uint64_t)a2, a6);
  if (!v47)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!v45)
  {
    uint64_t v28 = __cxa_allocate_exception(8uLL);
    void *v28 = &off_2439078;
  }
  if (!v49)
  {
    int v29 = __cxa_allocate_exception(8uLL);
    void *v29 = &off_2439078;
  }
  unint64_t v13 = v46;
  uint64_t v14 = v44;
  uint64_t v15 = v48;
  *(_DWORD *)a6 = 6;
  *(_DWORD *)(a6 + 996) = sub_564E5C(6);
  int v38 = *(_DWORD *)a3;
  char v40 = *(unsigned char *)(a3 + 1984);
  if (v40) {
    sub_55BBD8((uint64_t)v39, a3 + 8);
  }
  *(_DWORD *)(a6 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v38);
  if (v40)
  {
    sub_55BCE8((uint64_t)v39);
    char v40 = 0;
  }
  sub_554424(a1, (uint64_t)v41, a4, (uint64_t)v33);
  sub_4D90B4(a6 + 80, (uint64_t)v33);
  sub_4D90B4(a6 + 240, (uint64_t)v35);
  sub_4D90B4(a6 + 400, (uint64_t)v36);
  sub_4D90B4(a6 + 560, (uint64_t)v37);
  sub_4D4B58((uint64_t)v37);
  sub_4D4B58((uint64_t)v36);
  sub_4D4B58((uint64_t)v35);
  sub_4D4B58((uint64_t)v33);
  if (v43 == 4) {
    int v16 = 1;
  }
  else {
    int v16 = 2 * (v43 == 3);
  }
  sub_54B708(a1, (uint64_t)&qword_256C208, (uint64_t)&qword_256C1F0, a6, v16, v16);
  BOOL v17 = sub_605754((uint64_t)v41);
  if (v17) {
    int v18 = 1;
  }
  else {
    int v18 = 2;
  }
  uint64_t v32 = sub_555C2C(a1, a2, v13, v15, v14, *(_DWORD *)(a1 + 2272), v18);
  sub_564A28((unsigned int *)a6, &v32);
  uint64_t v19 = 2280;
  if (!*(unsigned char *)(a1 + 4044)) {
    uint64_t v19 = 2276;
  }
  uint64_t v31 = sub_555D6C(a1, (uint64_t)a2, v13, v15, v14, *(unsigned int *)(a1 + v19), v18);
  sub_564A54((unsigned int *)a6, &v31);
  if (v17)
  {
    sub_564A80(a6, (_DWORD *)(a1 + 2292));
    uint64_t v20 = (int *)(a1 + 2380);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 4044))
    {
      switch(*(_DWORD *)a6)
      {
        case 1:
        case 2:
        case 3:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v21 = (_DWORD *)(a1 + 2328);
          break;
        case 4:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x24:
          uint64_t v21 = (_DWORD *)(a1 + 2296);
          break;
        case 5:
          uint64_t v21 = (_DWORD *)(a1 + 2308);
          break;
        case 6:
          uint64_t v21 = (_DWORD *)(a1 + 2312);
          break;
        case 7:
          uint64_t v21 = (_DWORD *)(a1 + 2316);
          break;
        case 8:
          uint64_t v21 = (_DWORD *)(a1 + 2324);
          break;
        case 9:
          uint64_t v21 = (_DWORD *)(a1 + 2320);
          break;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
        case 0x18:
          uint64_t v21 = (_DWORD *)(a1 + 2304);
          break;
        case 0x16:
        case 0x1F:
          uint64_t v21 = (_DWORD *)(a1 + 2300);
          break;
        case 0x20:
        case 0x21:
          uint64_t v21 = (_DWORD *)(a1 + 2332);
          break;
        case 0x22:
        case 0x23:
          uint64_t v21 = (_DWORD *)(a1 + 2336);
          break;
        default:
          uint64_t v21 = (_DWORD *)(a1 + 2340);
          break;
      }
      LODWORD(v33[0]) = *v21;
      sub_564A80(a6, v33);
    }
    switch(*(_DWORD *)a6)
    {
      case 1:
      case 2:
      case 3:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v20 = (int *)(a1 + 2376);
        break;
      case 4:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x24:
        uint64_t v20 = (int *)(a1 + 2344);
        break;
      case 5:
        uint64_t v20 = (int *)(a1 + 2356);
        break;
      case 6:
        uint64_t v20 = (int *)(a1 + 2360);
        break;
      case 7:
        uint64_t v20 = (int *)(a1 + 2364);
        break;
      case 8:
        uint64_t v20 = (int *)(a1 + 2372);
        break;
      case 9:
        uint64_t v20 = (int *)(a1 + 2368);
        break;
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x18:
        uint64_t v20 = (int *)(a1 + 2352);
        break;
      case 0x16:
      case 0x1F:
        uint64_t v20 = (int *)(a1 + 2348);
        break;
      case 0x20:
      case 0x21:
        uint64_t v20 = (int *)(a1 + 2384);
        break;
      case 0x22:
      case 0x23:
        uint64_t v20 = (int *)(a1 + 2388);
        break;
      default:
        uint64_t v20 = (int *)(a1 + 2392);
        break;
    }
  }
  int v30 = *v20;
  uint64_t v22 = sub_564A8C(a6, &v30);
  sub_54A494(v22, (uint64_t)v41, (uint64_t)a2, a6);
  if (*(unsigned char *)(a1 + 4044)) {
    char v23 = v17;
  }
  else {
    char v23 = 1;
  }
  if ((v23 & 1) == 0)
  {
    sub_564844((uint64_t)v33, (void *)(a6 + 968), (_DWORD *)(a1 + 2276));
    long long v24 = v33[1];
    *(_OWORD *)(a6 + 768) = v33[0];
    *(_OWORD *)(a6 + 784) = v24;
    *(_DWORD *)(a6 + 800) = v34;
  }
  if (*(unsigned char *)(a1 + 4047)) {
    char v25 = v17;
  }
  else {
    char v25 = 1;
  }
  if ((v25 & 1) == 0) {
    sub_566594(a6, v42);
  }
  *a5 = 1;
  sub_541A20(a1, a6);
  return sub_3A6B94((uint64_t)v41);
}

void sub_548260(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  sub_3A6B94((uint64_t)&STACK[0xA60]);
  _Unwind_Resume(a1);
}

uint64_t sub_548434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_564628(a3, (uint64_t)v34);
  uint64_t v8 = sub_55B8C8(a4);
  sub_54A494(v8, (uint64_t)v34, a2, a4);
  int v9 = *(_DWORD *)a3;
  *(_DWORD *)a4 = *(_DWORD *)a3;
  *(_DWORD *)(a4 + 996) = sub_564E5C(v9);
  int v31 = *(_DWORD *)a3;
  char v33 = *(unsigned char *)(a3 + 1984);
  if (v33) {
    sub_55BBD8((uint64_t)v32, a3 + 8);
  }
  *(_DWORD *)(a4 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v31);
  if (v33)
  {
    sub_55BCE8((uint64_t)v32);
    char v33 = 0;
  }
  __p[0].__r_.__value_.__r.__words[0] = sub_64F5D0(a2);
  sub_564A28((unsigned int *)a4, __p);
  uint64_t v10 = sub_64F5D0(a2);
  uint64_t v11 = *(void *)(a1 + 2224) + *(void *)(a4 + 968);
  if (v11 >= v10) {
    uint64_t v11 = v10;
  }
  uint64_t v29 = v11;
  sub_564A54((unsigned int *)a4, &v29);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v12 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v12 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      uint64_t v12 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      uint64_t v12 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      uint64_t v12 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      uint64_t v12 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      uint64_t v12 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v12 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v12 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      uint64_t v12 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      uint64_t v12 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v12 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = *v12;
  sub_564A80(a4, __p);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      unint64_t v13 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      unint64_t v13 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      unint64_t v13 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      unint64_t v13 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      unint64_t v13 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      unint64_t v13 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      unint64_t v13 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      unint64_t v13 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      unint64_t v13 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      unint64_t v13 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      unint64_t v13 = (_DWORD *)(a1 + 2388);
      break;
    default:
      unint64_t v13 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = *v13;
  sub_564A8C(a4, __p);
  sub_555F20(a1, (uint64_t)v34, (uint64_t)__p);
  sub_4D90B4(a4 + 80, (uint64_t)__p);
  sub_4D90B4(a4 + 240, (uint64_t)v26);
  sub_4D90B4(a4 + 400, (uint64_t)v27);
  sub_4D90B4(a4 + 560, (uint64_t)v28);
  sub_4D4B58((uint64_t)v28);
  sub_4D4B58((uint64_t)v27);
  sub_4D4B58((uint64_t)v26);
  sub_4D4B58((uint64_t)__p);
  if (!v36)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  switch(v35)
  {
    case 1:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 8;
      std::string::size_type v16 = 0x4452415A5A494C42;
      goto LABEL_51;
    case 2:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 11;
      strcpy((char *)__p, "FLASH_FLOOD");
      goto LABEL_58;
    case 3:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 5;
      strcpy((char *)__p, "FLOOD");
      goto LABEL_58;
    case 4:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 9;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 69;
      uint64_t v14 = "HURRICANE";
      goto LABEL_53;
    case 5:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 10;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 19794;
      BOOL v17 = "SNOW_STORM";
      goto LABEL_57;
    case 6:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 8;
      std::string::size_type v16 = 0x45524946444C4957;
LABEL_51:
      __p[0].__r_.__value_.__r.__words[0] = v16;
      __p[0].__r_.__value_.__s.__data_[8] = 0;
      goto LABEL_58;
    case 7:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 1279482179;
      int v15 = 1162760012;
      goto LABEL_49;
    case 8:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 10;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 17739;
      BOOL v17 = "EARTHQUAKE";
      goto LABEL_57;
    case 9:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 9;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 77;
      uint64_t v14 = "HAILSTORM";
      goto LABEL_53;
    case 10:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 9;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 77;
      uint64_t v14 = "ICE_STORM";
      goto LABEL_53;
    case 11:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 12;
      strcpy((char *)__p, "THUNDERSTORM");
      goto LABEL_58;
    case 12:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 14;
      strcpy((char *)__p, "TROPICAL_STORM");
      goto LABEL_58;
    case 13:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 1314214740;
      int v15 = 1229799758;
      goto LABEL_49;
    case 14:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 1213225300;
      int v15 = 1313820488;
      goto LABEL_49;
    case 15:
    case 16:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 9;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 69;
      uint64_t v14 = "LANDSLIDE";
LABEL_53:
      __p[0].__r_.__value_.__r.__words[0] = *(void *)v14;
      goto LABEL_58;
    case 17:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 1314017108;
      int v15 = 1329873230;
      goto LABEL_49;
    case 18:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 17;
      strcpy((char *)__p, "VOLCANIC_ERUPTION");
      goto LABEL_58;
    case 19:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 10;
      LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 20041;
      BOOL v17 = "SNOW_CHAIN";
LABEL_57:
      __p[0].__r_.__value_.__r.__words[0] = *(void *)v17;
      __p[0].__r_.__value_.__s.__data_[10] = 0;
      goto LABEL_58;
    default:
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 1313558101;
      int v15 = 1314344782;
LABEL_49:
      *(_DWORD *)((char *)__p[0].__r_.__value_.__r.__words + 3) = v15;
      __p[0].__r_.__value_.__s.__data_[7] = 0;
LABEL_58:
      if (byte_256C9FF >= 0) {
        int v18 = (const std::string::value_type *)&qword_256C9E8;
      }
      else {
        int v18 = (const std::string::value_type *)qword_256C9E8;
      }
      if (byte_256C9FF >= 0) {
        std::string::size_type v19 = byte_256C9FF;
      }
      else {
        std::string::size_type v19 = unk_256C9F0;
      }
      uint64_t v20 = std::string::insert(__p, 0, v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v30[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a4 + 1055) < 0) {
        operator delete(*(void **)(a4 + 1032));
      }
      *(void *)(a4 + 1032) = v21;
      *(void *)(a4 + 1040) = v30[0];
      *(void *)(a4 + 1047) = *(void *)((char *)v30 + 7);
      *(unsigned char *)(a4 + 1055) = v22;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_541A20(a1, a4);
      return sub_3A6B94((uint64_t)v34);
  }
}

void sub_548AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_55BA78(v14);
    sub_3A6B94((uint64_t)&STACK[0xA68]);
    _Unwind_Resume(a1);
  }
  sub_55BA78(v14);
  sub_3A6B94((uint64_t)&STACK[0xA68]);
  _Unwind_Resume(a1);
}

uint64_t sub_548CFC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v11 = v10;
  uint64_t v12 = sub_5645C8(v5);
  sub_55BBD8((uint64_t)v43, v12);
  sub_50E434((uint64_t)v43, &v29);
  uint64_t v13 = (uint64_t)v29;
  sub_50E428((uint64_t)v43, (uint64_t)v34);
  uint64_t v14 = sub_55B8C8((uint64_t)v11);
  sub_54A494(v14, v13, (uint64_t)v8, (uint64_t)v11);
  if (*(unsigned char *)(v9 + 4047))
  {
    int v15 = v29;
    for (uint64_t i = v30; v15 != (char *)i; v15 += 1120)
      sub_566594((uint64_t)v11, (uint64_t *)(v15 + 28));
  }
  unsigned int *v11 = 8;
  v11[249] = sub_564E5C(8);
  int v31 = *(_DWORD *)v6;
  char v33 = *(unsigned char *)(v6 + 1984);
  if (v33) {
    sub_55BBD8((uint64_t)v32, v6 + 8);
  }
  v11[202] = sub_54129C((unsigned int *)(v9 + 2200), &v31);
  if (v33)
  {
    sub_55BCE8((uint64_t)v32);
    char v33 = 0;
  }
  sub_5569A0(v9, &v29, v4, (uint64_t)v25);
  sub_4D90B4((uint64_t)(v11 + 20), (uint64_t)v25);
  sub_4D90B4((uint64_t)(v11 + 60), (uint64_t)v26);
  sub_4D90B4((uint64_t)(v11 + 100), (uint64_t)v27);
  sub_4D90B4((uint64_t)(v11 + 140), (uint64_t)v28);
  sub_4D4B58((uint64_t)v28);
  sub_4D4B58((uint64_t)v27);
  sub_4D4B58((uint64_t)v26);
  sub_4D4B58((uint64_t)v25);
  v25[0] = sub_555C2C(v9, v8, v36, v37, v35, *(_DWORD *)(v9 + 2284), 3);
  sub_564A28(v11, v25);
  uint64_t v24 = sub_555D6C(v9, (uint64_t)v8, v36, v37, v35, *(unsigned int *)(v9 + 2288), 3);
  sub_564A54(v11, &v24);
  switch(*v11)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      BOOL v17 = (int *)(v9 + 2328);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      BOOL v17 = (int *)(v9 + 2296);
      break;
    case 5u:
      BOOL v17 = (int *)(v9 + 2308);
      break;
    case 6u:
      BOOL v17 = (int *)(v9 + 2312);
      break;
    case 7u:
      BOOL v17 = (int *)(v9 + 2316);
      break;
    case 8u:
      BOOL v17 = (int *)(v9 + 2324);
      break;
    case 9u:
      BOOL v17 = (int *)(v9 + 2320);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      BOOL v17 = (int *)(v9 + 2304);
      break;
    case 0x16u:
    case 0x1Fu:
      BOOL v17 = (int *)(v9 + 2300);
      break;
    case 0x20u:
    case 0x21u:
      BOOL v17 = (int *)(v9 + 2332);
      break;
    case 0x22u:
    case 0x23u:
      BOOL v17 = (int *)(v9 + 2336);
      break;
    default:
      BOOL v17 = (int *)(v9 + 2340);
      break;
  }
  int v23 = *v17;
  sub_564A80((uint64_t)v11, &v23);
  switch(*v11)
  {
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      int v18 = (int *)(v9 + 2376);
      break;
    case 4u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x24u:
      int v18 = (int *)(v9 + 2344);
      break;
    case 5u:
      int v18 = (int *)(v9 + 2356);
      break;
    case 6u:
      int v18 = (int *)(v9 + 2360);
      break;
    case 7u:
      int v18 = (int *)(v9 + 2364);
      break;
    case 8u:
      int v18 = (int *)(v9 + 2372);
      break;
    case 9u:
      int v18 = (int *)(v9 + 2368);
      break;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x17u:
    case 0x18u:
      int v18 = (int *)(v9 + 2352);
      break;
    case 0x16u:
    case 0x1Fu:
      int v18 = (int *)(v9 + 2348);
      break;
    case 0x20u:
    case 0x21u:
      int v18 = (int *)(v9 + 2384);
      break;
    case 0x22u:
    case 0x23u:
      int v18 = (int *)(v9 + 2388);
      break;
    default:
      int v18 = (int *)(v9 + 2392);
      break;
  }
  int v23 = *v18;
  sub_564A8C((uint64_t)v11, &v23);
  *uint64_t v2 = 1;
  sub_541A20(v9, (uint64_t)v11);
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  sub_510298((uint64_t)&v40);
  if (v38)
  {
    char v39 = v38;
    operator delete(v38);
  }
  std::string::size_type v19 = v29;
  if (v29)
  {
    uint64_t v20 = v30;
    std::string::size_type v21 = v29;
    if ((char *)v30 != v29)
    {
      do
        uint64_t v20 = sub_3A6B94(v20 - 1120);
      while ((char *)v20 != v19);
      std::string::size_type v21 = v29;
    }
    uint64_t v30 = (uint64_t)v19;
    operator delete(v21);
  }
  return sub_55BCE8((uint64_t)v43);
}

void sub_549104(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_549190(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  sub_50E1E8(&STACK[0xA78]);
  sub_50E790((void **)&STACK[0x298]);
  sub_55BCE8((uint64_t)&STACK[0xCE0]);
  _Unwind_Resume(a1);
}

void sub_5492E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_55B8C8(a4);
  *(void *)(a4 + 968) = sub_64F5D0(a2) - *(void *)(a3 + 32);
  std::string::operator=((std::string *)(a4 + 936), (const std::string *)(a3 + 8));
  *(_DWORD *)a4 = 9;
  *(_DWORD *)(a4 + 996) = sub_564E5C(9);
  sub_564578((uint64_t)&v14, *(_DWORD *)a4);
  *(_DWORD *)(a4 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v14);
  if (v16)
  {
    sub_55BCE8((uint64_t)&v15);
    char v16 = 0;
  }
  v12[0] = sub_64F5D0(a2);
  sub_564A28((unsigned int *)a4, v12);
  uint64_t v8 = sub_64F5D0(a2);
  uint64_t v9 = *(void *)(a1 + 2232) + *(void *)(a4 + 968);
  if (v9 >= v8) {
    uint64_t v9 = v8;
  }
  uint64_t v13 = v9;
  sub_564A54((unsigned int *)a4, &v13);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v10 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v10 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      uint64_t v10 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      uint64_t v10 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      uint64_t v10 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      uint64_t v10 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      uint64_t v10 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v10 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v10 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      uint64_t v10 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      uint64_t v10 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v10 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(v12[0]) = *v10;
  sub_564A80(a4, v12);
  switch(*(_DWORD *)a4)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v11 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v11 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v11 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v11 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v11 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v11 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v11 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v11 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v11 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      uint64_t v11 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      uint64_t v11 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v11 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v12[0]) = *v11;
  sub_564A8C(a4, v12);
  sub_5576E4(a1, (uint64_t)v12);
}

void sub_5495BC(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_54973C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_55B8C8(a5);
  *(_DWORD *)a5 = 22;
  *(_DWORD *)(a5 + 996) = sub_564E5C(22);
  sub_564578((uint64_t)&v22, *(_DWORD *)a5);
  *(_DWORD *)(a5 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v22);
  if (v24)
  {
    sub_55BCE8((uint64_t)&v23);
    char v24 = 0;
  }
  uint64_t v10 = (unsigned int *)sub_6467E8(a2, 0);
  uint64_t v11 = sub_6467E8(a3, 0);
  v18[0] = sub_64F5D0((uint64_t)v10);
  uint64_t v12 = sub_564A28((unsigned int *)a5, v18);
  sub_54A58C((uint64_t)v12, a2, a3, (unsigned int *)a5);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v13 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v13 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      uint64_t v13 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      uint64_t v13 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      uint64_t v13 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      uint64_t v13 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      uint64_t v13 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v13 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v13 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      uint64_t v13 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      uint64_t v13 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2340);
      break;
  }
  LODWORD(v18[0]) = *v13;
  sub_564A80(a5, v18);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      int v14 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      int v14 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      int v14 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      int v14 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      int v14 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      int v14 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      int v14 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      int v14 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      int v14 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      int v14 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      int v14 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v14 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v18[0]) = *v14;
  sub_564A8C(a5, v18);
  int v15 = sub_646CE8((uint64_t)a2);
  int v16 = sub_646CE8((uint64_t)a3);
  *(_DWORD *)(a5 + 720) = (v15 - v16) & ~((v15 - v16) >> 31);
  sub_54A7EC(a1, v10, v11, a4, (uint64_t)v18);
  sub_4D90B4(a5 + 80, (uint64_t)v18);
  sub_4D90B4(a5 + 240, (uint64_t)v19);
  sub_4D90B4(a5 + 400, (uint64_t)v20);
  sub_4D90B4(a5 + 560, (uint64_t)v21);
  sub_4D4B58((uint64_t)v21);
  sub_4D4B58((uint64_t)v20);
  sub_4D4B58((uint64_t)v19);
  sub_4D4B58((uint64_t)v18);
  sub_54B708(a1, (uint64_t)&qword_256C220, (uint64_t)&qword_256C178, a5, 1, 1);
  *(_DWORD *)(a5 + 800) = *(_DWORD *)(a5 + 760);
  long long v17 = *(_OWORD *)(a5 + 744);
  *(_OWORD *)(a5 + 768) = *(_OWORD *)(a5 + 728);
  *(_OWORD *)(a5 + 784) = v17;
  sub_541A20(a1, a5);
}

void sub_549A60(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_549BE8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_6467E8(a2, 0);
  uint64_t v11 = sub_55B8C8(a5);
  sub_54A494(v11, a4, v10, a5);
  *(_DWORD *)a5 = 31;
  *(_DWORD *)(a5 + 996) = sub_564E5C(31);
  sub_564578((uint64_t)&v20, *(_DWORD *)a5);
  *(_DWORD *)(a5 + 808) = sub_54129C((unsigned int *)(a1 + 2200), &v20);
  if (v22)
  {
    sub_55BCE8((uint64_t)&v21);
    char v22 = 0;
  }
  uint64_t v12 = sub_564A28((unsigned int *)a5, (void *)(v10 + 504));
  sub_54A58C((uint64_t)v12, a2, a3, (unsigned int *)a5);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t v13 = (_DWORD *)(a1 + 2328);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      uint64_t v13 = (_DWORD *)(a1 + 2296);
      break;
    case 5:
      uint64_t v13 = (_DWORD *)(a1 + 2308);
      break;
    case 6:
      uint64_t v13 = (_DWORD *)(a1 + 2312);
      break;
    case 7:
      uint64_t v13 = (_DWORD *)(a1 + 2316);
      break;
    case 8:
      uint64_t v13 = (_DWORD *)(a1 + 2324);
      break;
    case 9:
      uint64_t v13 = (_DWORD *)(a1 + 2320);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      uint64_t v13 = (_DWORD *)(a1 + 2304);
      break;
    case 0x16:
    case 0x1F:
      uint64_t v13 = (_DWORD *)(a1 + 2300);
      break;
    case 0x20:
    case 0x21:
      uint64_t v13 = (_DWORD *)(a1 + 2332);
      break;
    case 0x22:
    case 0x23:
      uint64_t v13 = (_DWORD *)(a1 + 2336);
      break;
    default:
      uint64_t v13 = (_DWORD *)(a1 + 2340);
      break;
  }
  v16[0] = *v13;
  sub_564A80(a5, v16);
  switch(*(_DWORD *)a5)
  {
    case 1:
    case 2:
    case 3:
    case 0xA:
    case 0xB:
    case 0xC:
      int v14 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
      int v14 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      int v14 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      int v14 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      int v14 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      int v14 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      int v14 = (_DWORD *)(a1 + 2368);
      break;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x18:
      int v14 = (_DWORD *)(a1 + 2352);
      break;
    case 0x16:
    case 0x1F:
      int v14 = (_DWORD *)(a1 + 2348);
      break;
    case 0x20:
    case 0x21:
      int v14 = (_DWORD *)(a1 + 2384);
      break;
    case 0x22:
    case 0x23:
      int v14 = (_DWORD *)(a1 + 2388);
      break;
    default:
      int v14 = (_DWORD *)(a1 + 2392);
      break;
  }
  v16[0] = *v14;
  sub_564A8C(a5, v16);
  sub_54B928(a1, a4, (uint64_t)v16);
  sub_4D90B4(a5 + 80, (uint64_t)v16);
  sub_4D90B4(a5 + 240, (uint64_t)v17);
  sub_4D90B4(a5 + 400, (uint64_t)v18);
  sub_4D90B4(a5 + 560, (uint64_t)v19);
  sub_4D4B58((uint64_t)v19);
  sub_4D4B58((uint64_t)v18);
  sub_4D4B58((uint64_t)v17);
  sub_4D4B58((uint64_t)v16);
  sub_54B708(a1, (uint64_t)&qword_256C220, (uint64_t)&qword_256C178, a5, 1, 1);
  *(_DWORD *)(a5 + 800) = *(_DWORD *)(a5 + 760);
  long long v15 = *(_OWORD *)(a5 + 744);
  *(_OWORD *)(a5 + 768) = *(_OWORD *)(a5 + 728);
  *(_OWORD *)(a5 + 784) = v15;
  sub_541A20(a1, a5);
}

void sub_549ED8(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

void sub_54A04C(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  sub_55B8C8((uint64_t)a3);
  if (*(unsigned char *)(a1 + 3975)) {
    int v6 = 32;
  }
  else {
    int v6 = 33;
  }
  *a3 = v6;
  a3[249] = sub_564E5C(v6);
  sub_564578((uint64_t)&v17, *a3);
  a3[202] = sub_54129C((unsigned int *)(a1 + 2200), &v17);
  if (v19)
  {
    sub_55BCE8((uint64_t)&v18);
    char v19 = 0;
  }
  uint64_t v7 = sub_6467E8(a2, 0);
  sub_564A28((unsigned int *)a3, (void *)(v7 + 504));
  v12[0] = 0;
  sub_564A54((unsigned int *)a3, v12);
  if (*(unsigned char *)(a1 + 4044))
  {
    switch(*a3)
    {
      case 1:
      case 2:
      case 3:
      case 10:
      case 11:
      case 12:
        uint64_t v8 = (int *)(a1 + 2328);
        break;
      case 4:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
        uint64_t v8 = (int *)(a1 + 2296);
        break;
      case 5:
        uint64_t v8 = (int *)(a1 + 2308);
        break;
      case 6:
        uint64_t v8 = (int *)(a1 + 2312);
        break;
      case 7:
        uint64_t v8 = (int *)(a1 + 2316);
        break;
      case 8:
        uint64_t v8 = (int *)(a1 + 2324);
        break;
      case 9:
        uint64_t v8 = (int *)(a1 + 2320);
        break;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 24:
        uint64_t v8 = (int *)(a1 + 2304);
        break;
      case 22:
      case 31:
        uint64_t v8 = (int *)(a1 + 2300);
        break;
      case 32:
      case 33:
        uint64_t v8 = (int *)(a1 + 2332);
        break;
      case 34:
      case 35:
        uint64_t v8 = (int *)(a1 + 2336);
        break;
      default:
        uint64_t v8 = (int *)(a1 + 2340);
        break;
    }
    int v9 = *v8;
  }
  else
  {
    int v9 = 2147483646;
  }
  int v16 = v9;
  sub_564A80((uint64_t)a3, &v16);
  switch(*a3)
  {
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
      uint64_t v10 = (_DWORD *)(a1 + 2376);
      break;
    case 4:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 36:
      uint64_t v10 = (_DWORD *)(a1 + 2344);
      break;
    case 5:
      uint64_t v10 = (_DWORD *)(a1 + 2356);
      break;
    case 6:
      uint64_t v10 = (_DWORD *)(a1 + 2360);
      break;
    case 7:
      uint64_t v10 = (_DWORD *)(a1 + 2364);
      break;
    case 8:
      uint64_t v10 = (_DWORD *)(a1 + 2372);
      break;
    case 9:
      uint64_t v10 = (_DWORD *)(a1 + 2368);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
      uint64_t v10 = (_DWORD *)(a1 + 2352);
      break;
    case 22:
    case 31:
      uint64_t v10 = (_DWORD *)(a1 + 2348);
      break;
    case 32:
    case 33:
      uint64_t v10 = (_DWORD *)(a1 + 2384);
      break;
    case 34:
    case 35:
      uint64_t v10 = (_DWORD *)(a1 + 2388);
      break;
    default:
      uint64_t v10 = (_DWORD *)(a1 + 2392);
      break;
  }
  LODWORD(v12[0]) = *v10;
  sub_564A8C((uint64_t)a3, v12);
  uint64_t v11 = 2512;
  if (!*(unsigned char *)(a1 + 3975)) {
    uint64_t v11 = 2516;
  }
  sub_564A98((uint64_t)a3, *(_DWORD *)(a1 + v11));
  sub_557DA0(a1, (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 20), (uint64_t)v12);
  sub_4D90B4((uint64_t)(a3 + 60), (uint64_t)v13);
  sub_4D90B4((uint64_t)(a3 + 100), (uint64_t)v14);
  sub_4D90B4((uint64_t)(a3 + 140), (uint64_t)v15);
  sub_4D4B58((uint64_t)v15);
  sub_4D4B58((uint64_t)v14);
  sub_4D4B58((uint64_t)v13);
  sub_4D4B58((uint64_t)v12);
  sub_541A20(a1, (uint64_t)a3);
}

void sub_54A318(_Unwind_Exception *a1)
{
  sub_55BA78(v1);
  _Unwind_Resume(a1);
}

double sub_54A494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_64F5D0(a3);
  if (!*(unsigned char *)(a2 + 432)) {
    goto LABEL_9;
  }
  if (v7 > *(void *)(a2 + 424))
  {
    uint64_t v8 = sub_64F5D0(a3);
    if (*(unsigned char *)(a2 + 432))
    {
      uint64_t v9 = v8 - *(void *)(a2 + 424);
      goto LABEL_6;
    }
LABEL_9:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v9 = 0;
LABEL_6:
  uint64_t v16 = v9;
  sub_56496C(&v13, (long long *)(a2 + 40), (_DWORD *)(a2 + 88), &v16);
  uint64_t v10 = (void **)(a4 + 936);
  if (*(char *)(a4 + 959) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)uint64_t v10 = v13;
  *(void *)(a4 + 952) = v14;
  double result = *(double *)&v15;
  *(_OWORD *)(a4 + 960) = v15;
  return result;
}

unsigned int *sub_54A58C(uint64_t a1, void *a2, void *a3, unsigned int *a4)
{
  sub_6467F8(a2, a3, (uint64_t)&v30);
  if (!v31)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v7 = v30;
  uint64_t v8 = (void *)sub_6467E8(a2, v30);
  sub_6467E8(a3, v7);
  sub_6513A8(&v28);
  if (v29)
  {
    unint64_t v9 = v28;
    sub_46B058();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_46B060();
    uint64_t v16 = v14;
    unint64_t v17 = v15;
    if (v11)
    {
      if (v14)
      {
        for (uint64_t i = 0; ; i += sub_46CCC8(v8, v9++, v19))
        {
          unint64_t v20 = sub_46C760(v11);
          unint64_t v21 = sub_46C760(v16);
          if (v13 + v9 >= v20 || v17 >= v21)
          {
            if (v13 + v9 < v20 == v17 < v21) {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v22 = sub_46C8EC(v11, v13 + v9);
            if (v22 == sub_46C8EC(v16, v17)) {
              goto LABEL_23;
            }
          }
          sub_46C8EC(v11, v13 + v9);
        }
      }
      if (v13 + v9 < sub_46C760(v11))
      {
        uint64_t i = 0;
        do
        {
          sub_46C8EC(v11, v13 + v9);
          i += sub_46CCC8(v8, v9++, v24);
        }
        while (v13 + v9 < sub_46C760(v11));
        goto LABEL_23;
      }
    }
    else if (v14 && v15 < sub_46C760(v14))
    {
      uint64_t i = 0;
      do
      {
        sub_46C8EC(0, v13 + v9);
        i += sub_46CCC8(v8, v9++, v23);
      }
      while (v17 < sub_46C760(v16));
      goto LABEL_23;
    }
    uint64_t i = 0;
LABEL_23:
    uint64_t v27 = i;
    return sub_564A54(a4, &v27);
  }
  uint64_t v27 = 0;
  return sub_564A54(a4, &v27);
}

void sub_54A7EC(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_5F3B34(a5);
  int v117 = (std::string **)(a5 + 160);
  uint64_t v118 = a5;
  sub_5F3B34(a5 + 160);
  sub_5F3B34(a5 + 320);
  sub_5F3B34(a5 + 480);
  uint64_t v10 = *(long long **)(a3 + 1112);
  uint64_t v11 = *(long long **)(a3 + 1120);
  if (v10 == v11)
  {
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_6;
  }
  if (*((char *)v10 + 23) < 0)
  {
    sub_4200(&__str, *(void **)v10, *((void *)v10 + 1));
    uint64_t v10 = *(long long **)(a3 + 1112);
    if (v10 != *(long long **)(a3 + 1120)) {
      goto LABEL_8;
    }
LABEL_6:
    *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
    v134.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_9;
  }
  long long v12 = *v10;
  __str.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
  if (v10 == v11) {
    goto LABEL_6;
  }
LABEL_8:
  sub_6F3178(&v134, v10);
LABEL_9:
  uint64_t v116 = (uint64_t *)(a5 + 320);
  sub_771DEC(a4, (uint64_t *)(a3 + 7352), (uint64_t)&v136);
  int v13 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v14 = byte_256B68F;
  }
  else {
    size_t v14 = qword_256B680;
  }
  int v15 = byte_256B947;
  if (byte_256B947 >= 0) {
    size_t v16 = byte_256B947;
  }
  else {
    size_t v16 = qword_256B938;
  }
  unint64_t v17 = v16 + v14;
  if (v16 + v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  int v115 = a2;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v17 <= 0x16)
  {
    unint64_t v122 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v122) = v16 + v14;
    if (!v14) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v35 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v35 = v17 | 7;
  }
  uint64_t v36 = v35 + 1;
  p_dst = (long long *)operator new(v35 + 1);
  *((void *)&__dst + 1) = v16 + v14;
  unint64_t v122 = v36 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v14)
  {
LABEL_18:
    if (v13 >= 0) {
      unint64_t v20 = &qword_256B678;
    }
    else {
      unint64_t v20 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v20, v14);
  }
LABEL_22:
  unint64_t v21 = (char *)p_dst + v14;
  if (v16)
  {
    if (v15 >= 0) {
      uint64_t v22 = &qword_256B930;
    }
    else {
      uint64_t v22 = (uint64_t *)qword_256B930;
    }
    memmove(v21, v22, v16);
  }
  v21[v16] = 0;
  double v23 = sub_8D7730(v18, (uint64_t)&__dst);
  sub_5F3D48((uint64_t)__p, (uint64_t)v23);
  sub_4D90B4(v118, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v26 = byte_256B6A7;
    if (byte_256B6A7 >= 0) {
      size_t v27 = byte_256B6A7;
    }
    else {
      size_t v27 = qword_256B698;
    }
    int v28 = byte_256B9C7;
    if (byte_256B9C7 >= 0) {
      size_t v29 = byte_256B9C7;
    }
    else {
      size_t v29 = *((void *)&xmmword_256B9B0 + 1);
    }
    unint64_t v30 = v29 + v27;
    if (v29 + v27 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v30 > 0x16)
      {
        uint64_t v104 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v104 = v30 | 7;
        }
        uint64_t v105 = v104 + 1;
        char v31 = (long long *)operator new(v104 + 1);
        *((void *)&__dst + 1) = v29 + v27;
        unint64_t v122 = v105 | 0x8000000000000000;
        *(void *)&long long __dst = v31;
        if (!v27) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v122 = 0;
        long long __dst = 0uLL;
        char v31 = &__dst;
        HIBYTE(v122) = v29 + v27;
        if (!v27)
        {
LABEL_46:
          char v33 = (char *)v31 + v27;
          if (!v29) {
            goto LABEL_71;
          }
          int v34 = (const void **)&xmmword_256B9B0;
          goto LABEL_67;
        }
      }
      if (v26 >= 0) {
        uint64_t v32 = &qword_256B690;
      }
      else {
        uint64_t v32 = (uint64_t *)qword_256B690;
      }
      memmove(v31, v32, v27);
      goto LABEL_46;
    }
LABEL_235:
    sub_188D690();
  }
  int v37 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v38 = byte_256B6A7;
  }
  else {
    size_t v38 = qword_256B698;
  }
  int v28 = byte_256B947;
  if (byte_256B947 >= 0) {
    size_t v29 = byte_256B947;
  }
  else {
    size_t v29 = qword_256B938;
  }
  unint64_t v39 = v29 + v38;
  if (v29 + v38 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_235;
  }
  if (v39 > 0x16)
  {
    uint64_t v110 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17) {
      uint64_t v110 = v39 | 7;
    }
    uint64_t v111 = v110 + 1;
    uint64_t v40 = (long long *)operator new(v110 + 1);
    *((void *)&__dst + 1) = v29 + v38;
    unint64_t v122 = v111 | 0x8000000000000000;
    *(void *)&long long __dst = v40;
    if (!v38) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  unint64_t v122 = 0;
  long long __dst = 0uLL;
  uint64_t v40 = &__dst;
  HIBYTE(v122) = v29 + v38;
  if (v38)
  {
LABEL_61:
    if (v37 >= 0) {
      double v41 = &qword_256B690;
    }
    else {
      double v41 = (uint64_t *)qword_256B690;
    }
    memmove(v40, v41, v38);
  }
LABEL_65:
  char v33 = (char *)v40 + v38;
  if (!v29) {
    goto LABEL_71;
  }
  int v34 = (const void **)&qword_256B930;
LABEL_67:
  if (v28 >= 0) {
    uint64_t v42 = v34;
  }
  else {
    uint64_t v42 = *v34;
  }
  memmove(v33, v42, v29);
LABEL_71:
  v33[v29] = 0;
  char v43 = sub_8D7730(v24, (uint64_t)&__dst);
  sub_5F3D48((uint64_t)__p, (uint64_t)v43);
  sub_4D90B4((uint64_t)v117, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  if (SHIBYTE(v122) < 0)
  {
    operator delete((void *)__dst);
    if (v137)
    {
LABEL_73:
      int v44 = byte_256B6D7;
      if (byte_256B6D7 >= 0) {
        size_t v45 = byte_256B6D7;
      }
      else {
        size_t v45 = qword_256B6C8;
      }
      int v46 = byte_256B7AF;
      if (byte_256B7AF >= 0) {
        size_t v47 = byte_256B7AF;
      }
      else {
        size_t v47 = qword_256B7A0;
      }
      unint64_t v48 = v47 + v45;
      if (v47 + v45 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v48 > 0x16)
      {
        uint64_t v106 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17) {
          uint64_t v106 = v48 | 7;
        }
        uint64_t v107 = v106 + 1;
        char v49 = (char *)operator new(v106 + 1);
        size_t v129 = v47 + v45;
        int64_t v130 = v107 | 0x8000000000000000;
        int v128 = v49;
        if (!v45)
        {
LABEL_86:
          long long v51 = &v49[v45];
          if (v47)
          {
            if (v46 >= 0) {
              uint64_t v52 = &qword_256B798;
            }
            else {
              uint64_t v52 = (uint64_t *)qword_256B798;
            }
            memmove(v51, v52, v47);
          }
          v51[v47] = 0;
          std::string::size_type v53 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
          if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v53 = v134.__r_.__value_.__l.__size_;
          }
          if (v53) {
            goto LABEL_94;
          }
          goto LABEL_113;
        }
      }
      else
      {
        size_t v129 = 0;
        int64_t v130 = 0;
        int v128 = 0;
        char v49 = (char *)&v128;
        HIBYTE(v130) = v47 + v45;
        if (!v45) {
          goto LABEL_86;
        }
      }
      if (v44 >= 0) {
        unsigned int v50 = &qword_256B6C0;
      }
      else {
        unsigned int v50 = (uint64_t *)qword_256B6C0;
      }
      memmove(v49, v50, v45);
      goto LABEL_86;
    }
  }
  else if (v137)
  {
    goto LABEL_73;
  }
  HIBYTE(v130) = 0;
  LOBYTE(v128) = 0;
  std::string::size_type v63 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v63 = v134.__r_.__value_.__l.__size_;
  }
  if (v63)
  {
LABEL_94:
    int v54 = byte_256B6D7;
    if (byte_256B6D7 >= 0) {
      size_t v55 = byte_256B6D7;
    }
    else {
      size_t v55 = qword_256B6C8;
    }
    int v56 = byte_256B9C7;
    if (byte_256B9C7 >= 0) {
      size_t v57 = byte_256B9C7;
    }
    else {
      size_t v57 = *((void *)&xmmword_256B9B0 + 1);
    }
    unint64_t v58 = v57 + v55;
    if (v57 + v55 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v58 > 0x16)
      {
        uint64_t v108 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v58 | 7) != 0x17) {
          uint64_t v108 = v58 | 7;
        }
        uint64_t v109 = v108 + 1;
        size_t v59 = (char *)operator new(v108 + 1);
        size_t v126 = v57 + v55;
        int64_t v127 = v109 | 0x8000000000000000;
        uint64_t v125 = v59;
        if (!v55) {
          goto LABEL_107;
        }
      }
      else
      {
        size_t v126 = 0;
        int64_t v127 = 0;
        uint64_t v125 = 0;
        size_t v59 = (char *)&v125;
        HIBYTE(v127) = v57 + v55;
        if (!v55)
        {
LABEL_107:
          uint64_t v61 = &v59[v55];
          if (!v57) {
            goto LABEL_132;
          }
          uint64_t v62 = (const void **)&xmmword_256B9B0;
          goto LABEL_128;
        }
      }
      if (v54 >= 0) {
        uint64_t v60 = &qword_256B6C0;
      }
      else {
        uint64_t v60 = (uint64_t *)qword_256B6C0;
      }
      memmove(v59, v60, v55);
      goto LABEL_107;
    }
LABEL_236:
    sub_188D690();
  }
LABEL_113:
  int v64 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v65 = byte_256B6D7;
  }
  else {
    size_t v65 = qword_256B6C8;
  }
  int v56 = byte_256B947;
  if (byte_256B947 >= 0) {
    size_t v57 = byte_256B947;
  }
  else {
    size_t v57 = qword_256B938;
  }
  unint64_t v66 = v57 + v65;
  if (v57 + v65 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_236;
  }
  if (v66 > 0x16)
  {
    uint64_t v112 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17) {
      uint64_t v112 = v66 | 7;
    }
    uint64_t v113 = v112 + 1;
    char v67 = (char *)operator new(v112 + 1);
    size_t v126 = v57 + v65;
    int64_t v127 = v113 | 0x8000000000000000;
    uint64_t v125 = v67;
    if (!v65) {
      goto LABEL_126;
    }
    goto LABEL_122;
  }
  size_t v126 = 0;
  int64_t v127 = 0;
  uint64_t v125 = 0;
  char v67 = (char *)&v125;
  HIBYTE(v127) = v57 + v65;
  if (v65)
  {
LABEL_122:
    if (v64 >= 0) {
      size_t v68 = &qword_256B6C0;
    }
    else {
      size_t v68 = (uint64_t *)qword_256B6C0;
    }
    memmove(v67, v68, v65);
  }
LABEL_126:
  uint64_t v61 = &v67[v65];
  if (!v57) {
    goto LABEL_132;
  }
  uint64_t v62 = (const void **)&qword_256B930;
LABEL_128:
  if (v56 >= 0) {
    unint64_t v69 = v62;
  }
  else {
    unint64_t v69 = *v62;
  }
  memmove(v61, v69, v57);
LABEL_132:
  v61[v57] = 0;
  size_t v70 = HIBYTE(v130);
  if (v130 < 0) {
    size_t v70 = v129;
  }
  if (!v70)
  {
    HIBYTE(v124) = 0;
    LOBYTE(v123[0]) = 0;
    size_t v79 = HIBYTE(v127);
    if (v127 < 0) {
      size_t v79 = v126;
    }
    if (v79) {
      goto LABEL_142;
    }
LABEL_150:
    unsigned int v78 = 0;
    HIBYTE(v120) = 0;
    LOBYTE(v119[0]) = 0;
    goto LABEL_151;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v132 = 0u;
  int v133 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v128, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&__dst);
  *(_OWORD *)uint64_t v123 = __dst;
  int64_t v124 = v122;
  unint64_t v122 = 0;
  long long __dst = 0uLL;
  unint64_t v71 = (void *)v132;
  if ((void)v132)
  {
    do
    {
      char v72 = (void *)*v71;
      sub_4F4B48((uint64_t)(v71 + 2));
      operator delete(v71);
      unint64_t v71 = v72;
    }
    while (v72);
  }
  unint64_t v73 = __p[0];
  __p[0] = 0;
  if (v73) {
    operator delete(v73);
  }
  size_t v74 = HIBYTE(v127);
  if (v127 < 0) {
    size_t v74 = v126;
  }
  if (!v74) {
    goto LABEL_150;
  }
LABEL_142:
  *(_OWORD *)std::string __p = 0u;
  long long v132 = 0u;
  int v133 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v125, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&__dst);
  *(_OWORD *)int v119 = __dst;
  unint64_t v120 = v122;
  unint64_t v122 = 0;
  long long __dst = 0uLL;
  std::string v75 = (void *)v132;
  if ((void)v132)
  {
    do
    {
      char v76 = (void *)*v75;
      sub_4F4B48((uint64_t)(v75 + 2));
      operator delete(v75);
      std::string v75 = v76;
    }
    while (v76);
  }
  unint64_t v77 = __p[0];
  __p[0] = 0;
  if (v77) {
    operator delete(v77);
  }
  unsigned int v78 = HIBYTE(v120);
LABEL_151:
  int v80 = SHIBYTE(v124);
  if (v124 >= 0) {
    size_t v81 = HIBYTE(v124);
  }
  else {
    size_t v81 = (size_t)v123[1];
  }
  if ((v78 & 0x80u) == 0) {
    size_t v82 = v78;
  }
  else {
    size_t v82 = (size_t)v119[1];
  }
  unint64_t v83 = v82 + v81;
  if (v82 + v81 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v83 <= 0x16)
  {
    unint64_t v122 = 0;
    long long __dst = 0uLL;
    long long v84 = &__dst;
    HIBYTE(v122) = v82 + v81;
    if (!v81) {
      goto LABEL_164;
    }
    goto LABEL_160;
  }
  uint64_t v88 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v83 | 7) != 0x17) {
    uint64_t v88 = v83 | 7;
  }
  uint64_t v89 = v88 + 1;
  long long v84 = (long long *)operator new(v88 + 1);
  *((void *)&__dst + 1) = v82 + v81;
  unint64_t v122 = v89 | 0x8000000000000000;
  *(void *)&long long __dst = v84;
  if (v81)
  {
LABEL_160:
    if (v80 >= 0) {
      std::string::size_type v85 = v123;
    }
    else {
      std::string::size_type v85 = (void **)v123[0];
    }
    memmove(v84, v85, v81);
  }
LABEL_164:
  int v86 = (char *)v84 + v81;
  if (v82)
  {
    if ((v78 & 0x80u) == 0) {
      int v87 = v119;
    }
    else {
      int v87 = (void **)v119[0];
    }
    memmove(v86, v87, v82);
  }
  v86[v82] = 0;
  sub_5F3D48((uint64_t)__p, (uint64_t)&__dst);
  sub_4D90B4((uint64_t)v116, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  if (SHIBYTE(v122) < 0)
  {
    operator delete((void *)__dst);
    if (!v137) {
      goto LABEL_179;
    }
  }
  else if (!v137)
  {
    goto LABEL_179;
  }
  if (!*(unsigned char *)(v136 + 432))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  LOBYTE(__p[0]) = 1;
  sub_5F6090(v116, (uint64_t)&qword_256AAD8, (uint64_t *)(v136 + 424), (char *)__p);
LABEL_179:
  int v90 = sub_46E120(v115, 0);
  int v91 = sub_46E120((unsigned int *)a3, 0);
  if (v90 < v91) {
    char v92 = -5;
  }
  else {
    char v92 = 5;
  }
  signed int v93 = (v90 - v91) / 10
      + (((103 * (char)(v92 + (v90 - v91) % 10)) >> 15) & 1)
      + ((103 * (char)(v92 + (v90 - v91) % 10)) >> 10);
  int v94 = *(_DWORD *)(a1 + 2200);
  if (v94 < 0) {
    char v95 = -5;
  }
  else {
    char v95 = 5;
  }
  if (v93 % 60 < (int)(v94 / 10
                      + (((103 * (char)(v95 + v94 % 10)) >> 15) & 1)
                      + ((103 * (char)(v95 + v94 % 10)) >> 10)))
    int v96 = v93 / 60;
  else {
    int v96 = v93 / 60 + 1;
  }
  int v97 = 600 * v96;
  sub_5F67F4(v118, (uint64_t)&qword_256C280, 600 * v96);
  sub_5F69FC((uint64_t)v116, (uint64_t)&qword_256C280, v97);
  std::string::size_type v98 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v98 = __str.__r_.__value_.__l.__size_;
  }
  if (v98)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v132 = 0u;
    int v133 = 1065353216;
    *(void *)&long long __dst = &qword_256C250;
    unsigned int v99 = sub_31B300((uint64_t)__p, (uint64_t)&qword_256C250, (uint64_t)&unk_20F06E0, (long long **)&__dst);
    std::string::operator=((std::string *)(v99 + 5), &__str);
    sub_6582D0(*v117, (uint64_t)__p);
    *(void *)&long long __dst = &qword_256C250;
    char v100 = sub_31B300((uint64_t)__p, (uint64_t)&qword_256C250, (uint64_t)&unk_20F06E0, (long long **)&__dst);
    std::string::operator=((std::string *)(v100 + 5), &v134);
    sub_6582D0((std::string *)*v116, (uint64_t)__p);
    long long v101 = (char *)v132;
    if (!(void)v132)
    {
LABEL_198:
      uint64_t v103 = __p[0];
      __p[0] = 0;
      if (v103) {
        operator delete(v103);
      }
      goto LABEL_200;
    }
    while (1)
    {
      uint64_t v102 = *(char **)v101;
      if (v101[63] < 0)
      {
        operator delete(*((void **)v101 + 5));
        if ((v101[39] & 0x80000000) == 0) {
          goto LABEL_194;
        }
LABEL_197:
        operator delete(*((void **)v101 + 2));
        operator delete(v101);
        long long v101 = v102;
        if (!v102) {
          goto LABEL_198;
        }
      }
      else
      {
        if (v101[39] < 0) {
          goto LABEL_197;
        }
LABEL_194:
        operator delete(v101);
        long long v101 = v102;
        if (!v102) {
          goto LABEL_198;
        }
      }
    }
  }
LABEL_200:
  if ((v78 & 0x80) != 0)
  {
    operator delete(v119[0]);
    if ((v80 & 0x80000000) == 0)
    {
LABEL_202:
      if ((SHIBYTE(v127) & 0x80000000) == 0) {
        goto LABEL_203;
      }
      goto LABEL_209;
    }
  }
  else if ((v80 & 0x80000000) == 0)
  {
    goto LABEL_202;
  }
  operator delete(v123[0]);
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_203:
    if ((SHIBYTE(v130) & 0x80000000) == 0) {
      goto LABEL_204;
    }
    goto LABEL_210;
  }
LABEL_209:
  operator delete(v125);
  if ((SHIBYTE(v130) & 0x80000000) == 0)
  {
LABEL_204:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_205;
    }
    goto LABEL_211;
  }
LABEL_210:
  operator delete(v128);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_205:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_212:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
LABEL_211:
  operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_212;
  }
}

void sub_54B4DC(_Unwind_Exception *a1)
{
  sub_5419D4(v1);
  _Unwind_Resume(a1);
}

void sub_54B4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if ((*(char *)(v44 - 121) & 0x80000000) == 0)
  {
    sub_5419D4(v43);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v44 - 144));
  sub_5419D4(v43);
  _Unwind_Resume(a1);
}

void sub_54B708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v22 = a6;
  int v23 = a5;
  if (*(unsigned char *)(a1 + 3935))
  {
    unint64_t v9 = sub_8D7730(*(void *)(a1 + 8), a2);
    if (*((char *)v9 + 23) < 0)
    {
      sub_4200(__dst, (void *)*v9, v9[1]);
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      uint64_t v21 = v9[2];
      *(_OWORD *)long long __dst = v10;
    }
    LODWORD(__p[0]) = 1;
    unint64_t v11 = *(void *)(a4 + 1008);
    if (v11 >= *(void *)(a4 + 1016))
    {
      uint64_t v12 = sub_55BDA0((uint64_t *)(a4 + 1000), (uint64_t)__dst, __p, &v23);
    }
    else
    {
      sub_564938(*(void *)(a4 + 1008), (uint64_t)__dst, __p, &v23);
      uint64_t v12 = v11 + 168;
      *(void *)(a4 + 1008) = v11 + 168;
    }
    *(void *)(a4 + 1008) = v12;
    int v13 = sub_8D7730(*(void *)(a1 + 8), a3);
    if (*((char *)v13 + 23) < 0)
    {
      sub_4200(__p, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v19 = v13[2];
      *(_OWORD *)std::string __p = v14;
    }
    int v17 = 2;
    unint64_t v15 = *(void *)(a4 + 1008);
    if (v15 >= *(void *)(a4 + 1016))
    {
      uint64_t v16 = sub_55BDA0((uint64_t *)(a4 + 1000), (uint64_t)__p, &v17, &v22);
    }
    else
    {
      sub_564938(*(void *)(a4 + 1008), (uint64_t)__p, &v17, &v22);
      uint64_t v16 = v15 + 168;
      *(void *)(a4 + 1008) = v15 + 168;
    }
    *(void *)(a4 + 1008) = v16;
    *(_DWORD *)(a4 + 1024) = 1;
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        return;
      }
LABEL_18:
      operator delete(__dst[0]);
      return;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v21) < 0) {
      goto LABEL_18;
    }
  }
}

void sub_54B8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_54B928(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a3;
  sub_5F3B34(a3);
  uint64_t v100 = v5;
  sub_5F3B34(v5 + 160);
  sub_5F3B34(v5 + 320);
  sub_5F3B34(v5 + 480);
  if (!*(unsigned char *)(a2 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v101 = v5 + 320;
  int v6 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v7 = byte_256B68F;
  }
  else {
    size_t v7 = qword_256B680;
  }
  int v8 = byte_256BA0F;
  if (byte_256BA0F >= 0) {
    size_t v9 = byte_256BA0F;
  }
  else {
    size_t v9 = qword_256BA00;
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v102 = v5 + 160;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v10 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9 + v7;
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  uint64_t v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17) {
    uint64_t v29 = v10 | 7;
  }
  uint64_t v30 = v29 + 1;
  p_dst = (std::string *)operator new(v29 + 1);
  __dst.__r_.__value_.__l.__size_ = v9 + v7;
  __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  uint64_t v5 = v100;
  if (v7)
  {
LABEL_11:
    if (v6 >= 0) {
      int v13 = &qword_256B678;
    }
    else {
      int v13 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v13, v7);
  }
LABEL_15:
  long long v14 = (char *)p_dst + v7;
  if (v9)
  {
    if (v8 >= 0) {
      unint64_t v15 = &qword_256B9F8;
    }
    else {
      unint64_t v15 = (uint64_t *)qword_256B9F8;
    }
    memmove(v14, v15, v9);
  }
  v14[v9] = 0;
  uint64_t v16 = sub_8D7730(v11, (uint64_t)&__dst);
  sub_5F3D48((uint64_t)__p, (uint64_t)v16);
  sub_4D90B4(v5, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v17 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v18 = byte_256B6A7;
  }
  else {
    size_t v18 = qword_256B698;
  }
  int v19 = byte_256BA0F;
  if (byte_256BA0F >= 0) {
    size_t v20 = byte_256BA0F;
  }
  else {
    size_t v20 = qword_256BA00;
  }
  unint64_t v21 = v20 + v18;
  if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v22 = *(void *)(a1 + 8);
  if (v21 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v109 = 0;
    __p[0] = 0;
    int v23 = (char *)__p;
    BYTE7(v109) = v20 + v18;
    if (!v18) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  uint64_t v31 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v31 = v21 | 7;
  }
  uint64_t v32 = v31 + 1;
  int v23 = (char *)operator new(v31 + 1);
  __p[1] = (void *)(v20 + v18);
  *(void *)&long long v109 = v32 | 0x8000000000000000;
  __p[0] = v23;
  if (v18)
  {
LABEL_31:
    if (v17 >= 0) {
      uint64_t v24 = &qword_256B690;
    }
    else {
      uint64_t v24 = (uint64_t *)qword_256B690;
    }
    memmove(v23, v24, v18);
  }
LABEL_35:
  char v25 = &v23[v18];
  if (v20)
  {
    if (v19 >= 0) {
      int v26 = &qword_256B9F8;
    }
    else {
      int v26 = (uint64_t *)qword_256B9F8;
    }
    memmove(v25, v26, v20);
  }
  v25[v20] = 0;
  size_t v27 = sub_8D7730(v22, (uint64_t)__p);
  if (*((char *)v27 + 23) < 0)
  {
    sub_4200(&v113, (void *)*v27, v27[1]);
  }
  else
  {
    long long v28 = *(_OWORD *)v27;
    v113.__r_.__value_.__r.__words[2] = v27[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v28;
  }
  if (SBYTE7(v109) < 0) {
    operator delete(__p[0]);
  }
  int64_t size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v34 = &v113;
  }
  else {
    int v34 = (std::string *)v113.__r_.__value_.__r.__words[0];
  }
  if (byte_256B3A7 >= 0) {
    uint64_t v35 = &qword_256B390;
  }
  else {
    uint64_t v35 = (uint64_t *)qword_256B390;
  }
  if (byte_256B3A7 >= 0) {
    int64_t v36 = byte_256B3A7;
  }
  else {
    int64_t v36 = unk_256B398;
  }
  if (v36)
  {
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = v113.__r_.__value_.__l.__size_;
    }
    if (size >= v36)
    {
      int v37 = (char *)v34 + size;
      int v38 = *(char *)v35;
      unint64_t v39 = v34;
      do
      {
        int64_t v40 = size - v36;
        if (v40 == -1) {
          break;
        }
        double v41 = (char *)memchr(v39, v38, v40 + 1);
        if (!v41) {
          break;
        }
        uint64_t v42 = v41;
        if (!memcmp(v41, v35, v36))
        {
          if (v42 != v37)
          {
            std::string::size_type v43 = v42 - (char *)v34;
            if (v42 - (char *)v34 != -1) {
              goto LABEL_73;
            }
          }
          break;
        }
        unint64_t v39 = (std::string *)(v42 + 1);
        int64_t size = v37 - (v42 + 1);
      }
      while (size >= v36);
    }
  }
  else
  {
    std::string::size_type v43 = 0;
LABEL_73:
    int v44 = *(char *)(a2 + 463);
    if (v44 >= 0) {
      size_t v45 = (const std::string::value_type *)(a2 + 440);
    }
    else {
      size_t v45 = *(const std::string::value_type **)(a2 + 440);
    }
    if (v44 >= 0) {
      std::string::size_type v46 = *(unsigned __int8 *)(a2 + 463);
    }
    else {
      std::string::size_type v46 = *(void *)(a2 + 448);
    }
    std::string::replace(&v113, v43, v36, v45, v46);
  }
  sub_5F3D48((uint64_t)__p, (uint64_t)&v113);
  sub_4D90B4(v102, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  uint64_t v47 = *(unsigned __int8 *)(a2 + 871);
  if ((v47 & 0x80u) != 0) {
    uint64_t v47 = *(void *)(a2 + 856);
  }
  if (!v47)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      char v72 = sub_188FC78(__p, (uint64_t)"Empty localized area incident source for area incident: ", 56);
      uint64_t v75 = *(void *)(a2 + 40);
      uint64_t v74 = a2 + 40;
      uint64_t v73 = v75;
      int v76 = *(char *)(v74 + 23);
      if (v76 >= 0) {
        uint64_t v77 = v74;
      }
      else {
        uint64_t v77 = v73;
      }
      if (v76 >= 0) {
        uint64_t v78 = *(unsigned __int8 *)(v74 + 23);
      }
      else {
        uint64_t v78 = *(void *)(v74 + 8);
      }
      sub_188FC78(v72, v77, v78);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__dst, 3u);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v112 < 0) {
        operator delete(v111);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_5F3D48((uint64_t)__p, (uint64_t)&v113);
    sub_4D90B4(v101, (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_139;
    }
    return;
  }
  int v48 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v49 = byte_256B6D7;
  }
  else {
    size_t v49 = qword_256B6C8;
  }
  int v50 = byte_256BA0F;
  if (byte_256BA0F >= 0) {
    size_t v51 = byte_256BA0F;
  }
  else {
    size_t v51 = qword_256BA00;
  }
  unint64_t v52 = v51 + v49;
  if (v51 + v49 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v52 > 0x16)
  {
    uint64_t v79 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17) {
      uint64_t v79 = v52 | 7;
    }
    uint64_t v80 = v79 + 1;
    std::string::size_type v53 = (char *)operator new(v79 + 1);
    size_t v104 = v51 + v49;
    unint64_t v105 = v80 | 0x8000000000000000;
    uint64_t v103 = v53;
    if (!v49) {
      goto LABEL_96;
    }
    goto LABEL_92;
  }
  size_t v104 = 0;
  unint64_t v105 = 0;
  uint64_t v103 = 0;
  std::string::size_type v53 = (char *)&v103;
  HIBYTE(v105) = v51 + v49;
  if (v49)
  {
LABEL_92:
    if (v48 >= 0) {
      int v54 = &qword_256B6C0;
    }
    else {
      int v54 = (uint64_t *)qword_256B6C0;
    }
    memmove(v53, v54, v49);
  }
LABEL_96:
  size_t v55 = &v53[v49];
  if (v51)
  {
    if (v50 >= 0) {
      int v56 = &qword_256B9F8;
    }
    else {
      int v56 = (uint64_t *)qword_256B9F8;
    }
    memmove(v55, v56, v51);
  }
  v55[v51] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v109 = 0u;
  int v110 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v103, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&__dst);
  std::string v107 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  size_t v57 = (void *)v109;
  if ((void)v109)
  {
    do
    {
      unint64_t v58 = (void *)*v57;
      sub_4F4B48((uint64_t)(v57 + 2));
      operator delete(v57);
      size_t v57 = v58;
    }
    while (v58);
  }
  size_t v59 = __p[0];
  __p[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete(v103);
  }
  int64_t v60 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  unsigned __int8 v61 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  std::string::size_type v62 = v107.__r_.__value_.__r.__words[0];
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = &v107;
  }
  else {
    std::string::size_type v63 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  if (byte_256B3A7 >= 0) {
    int v64 = &qword_256B390;
  }
  else {
    int v64 = (uint64_t *)qword_256B390;
  }
  if (byte_256B3A7 >= 0) {
    int64_t v65 = byte_256B3A7;
  }
  else {
    int64_t v65 = unk_256B398;
  }
  if (v65)
  {
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v60 = v107.__r_.__value_.__l.__size_;
    }
    if (v60 >= v65)
    {
      unint64_t v66 = (char *)v63 + v60;
      int v67 = *(char *)v64;
      size_t v68 = v63;
      do
      {
        int64_t v69 = v60 - v65;
        if (v69 == -1) {
          break;
        }
        size_t v70 = (char *)memchr(v68, v67, v69 + 1);
        if (!v70) {
          break;
        }
        unint64_t v71 = v70;
        if (!memcmp(v70, v64, v65))
        {
          if (v71 != v66)
          {
            std::string::size_type v81 = v71 - (char *)v63;
            if (v71 - (char *)v63 != -1) {
              goto LABEL_145;
            }
          }
          break;
        }
        size_t v68 = (std::string *)(v71 + 1);
        int64_t v60 = v66 - (v71 + 1);
      }
      while (v60 >= v65);
    }
  }
  else
  {
    std::string::size_type v81 = 0;
LABEL_145:
    char v82 = *(unsigned char *)(a2 + 463);
    if (v82 >= 0) {
      unint64_t v83 = (const std::string::value_type *)(a2 + 440);
    }
    else {
      unint64_t v83 = *(const std::string::value_type **)(a2 + 440);
    }
    if (v82 >= 0) {
      std::string::size_type v84 = *(unsigned __int8 *)(a2 + 463);
    }
    else {
      std::string::size_type v84 = *(void *)(a2 + 448);
    }
    std::string::replace(&v107, v81, v65, v83, v84);
    unsigned __int8 v61 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
    std::string::size_type v62 = v107.__r_.__value_.__r.__words[0];
  }
  if ((v61 & 0x80u) == 0) {
    std::string::size_type v85 = &v107;
  }
  else {
    std::string::size_type v85 = (std::string *)v62;
  }
  if (byte_256B3EF >= 0) {
    int v86 = &xmmword_256B3D8;
  }
  else {
    int v86 = (long long *)xmmword_256B3D8;
  }
  if (byte_256B3EF >= 0) {
    int64_t v87 = byte_256B3EF;
  }
  else {
    int64_t v87 = *((void *)&xmmword_256B3D8 + 1);
  }
  if (v87)
  {
    if ((v61 & 0x80u) == 0) {
      int64_t v88 = v61;
    }
    else {
      int64_t v88 = v107.__r_.__value_.__l.__size_;
    }
    if (v88 >= v87)
    {
      uint64_t v89 = (char *)v85 + v88;
      int v90 = *(char *)v86;
      int v91 = v85;
      do
      {
        int64_t v92 = v88 - v87;
        if (v92 == -1) {
          break;
        }
        signed int v93 = (char *)memchr(v91, v90, v92 + 1);
        if (!v93) {
          break;
        }
        int v94 = v93;
        if (!memcmp(v93, v86, v87))
        {
          if (v94 != v89)
          {
            std::string::size_type v95 = v94 - (char *)v85;
            if (v94 - (char *)v85 != -1) {
              goto LABEL_173;
            }
          }
          break;
        }
        int v91 = (std::string *)(v94 + 1);
        int64_t v88 = v89 - (v94 + 1);
      }
      while (v88 >= v87);
    }
  }
  else
  {
    std::string::size_type v95 = 0;
LABEL_173:
    int v96 = *(char *)(a2 + 871);
    if (v96 >= 0) {
      int v97 = (const std::string::value_type *)(a2 + 848);
    }
    else {
      int v97 = *(const std::string::value_type **)(a2 + 848);
    }
    if (v96 >= 0) {
      std::string::size_type v98 = *(unsigned __int8 *)(a2 + 871);
    }
    else {
      std::string::size_type v98 = *(void *)(a2 + 856);
    }
    std::string::replace(&v107, v95, v87, v97, v98);
  }
  sub_5F3D48((uint64_t)__p, (uint64_t)&v107);
  sub_4D90B4(v101, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_139:
    operator delete(v113.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_139;
  }
}

void sub_54C294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a32);
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  sub_5419D4(a9);
  _Unwind_Resume(a1);
}

void sub_54C3E0(_Unwind_Exception *a1)
{
  sub_5419D4(v1);
  _Unwind_Resume(a1);
}

void sub_54C3F4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 78;
  if (a3) {
    uint64_t v8 = 81;
  }
  size_t v9 = &qword_256BEF0;
  if (!a3) {
    size_t v9 = &qword_256BED8;
  }
  unint64_t v10 = (char *)&unk_256BEEF;
  if (a3) {
    unint64_t v10 = (char *)&unk_256BF07;
  }
  if (*v10 < 0)
  {
    uint64_t v11 = (void *)qword_256BC68[v8];
    uint64_t v12 = 78;
    if (a3) {
      uint64_t v12 = 81;
    }
    sub_4200(&v91, v11, qword_256BC68[v12 + 1]);
  }
  else
  {
    long long v91 = *(_OWORD *)v9;
    uint64_t v92 = v9[2];
  }
  uint64_t v13 = 57;
  if (a3) {
    uint64_t v13 = 60;
  }
  long long v14 = (uint64_t *)&xmmword_256BE48;
  if (!a3) {
    long long v14 = &qword_256BE30;
  }
  unint64_t v15 = &byte_256BE47;
  if (a3) {
    unint64_t v15 = &byte_256BE5F;
  }
  if (*v15 < 0)
  {
    uint64_t v16 = (void *)qword_256BC68[v13];
    uint64_t v17 = 57;
    if (a3) {
      uint64_t v17 = 60;
    }
    sub_4200(&v89, v16, qword_256BC68[v17 + 1]);
  }
  else
  {
    long long v89 = *(_OWORD *)v14;
    uint64_t v90 = v14[2];
  }
  size_t v18 = &v89;
  if (a2) {
    int v19 = &v91;
  }
  else {
    int v19 = &v89;
  }
  size_t v20 = (char *)&v92 + 7;
  if (!a2) {
    size_t v20 = (char *)&v90 + 7;
  }
  if (*v20 < 0)
  {
    if (a2) {
      size_t v18 = &v91;
    }
    sub_4200(&v87, *(void **)v19, *((void *)v18 + 1));
  }
  else
  {
    long long v87 = *v19;
    uint64_t v88 = *((void *)v19 + 2);
  }
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  char v72 = (char **)sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  int v21 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v22 = byte_256B68F;
  }
  else {
    size_t v22 = qword_256B680;
  }
  int v23 = SHIBYTE(v88);
  if (v88 >= 0) {
    size_t v24 = HIBYTE(v88);
  }
  else {
    size_t v24 = *((void *)&v87 + 1);
  }
  unint64_t v25 = v24 + v22;
  if (v24 + v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v26 = *(void *)(a1 + 8);
  if (v25 <= 0x16)
  {
    *(void *)&long long v74 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v74) = v24 + v22;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  uint64_t v33 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v33 = v25 | 7;
  }
  uint64_t v34 = v33 + 1;
  p_dst = (long long *)operator new(v33 + 1);
  *((void *)&__dst + 1) = v24 + v22;
  *(void *)&long long v74 = v34 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v22)
  {
LABEL_42:
    if (v21 >= 0) {
      long long v28 = &qword_256B678;
    }
    else {
      long long v28 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v28, v22);
  }
LABEL_46:
  uint64_t v29 = (char *)p_dst + v22;
  if (v24)
  {
    if (v23 >= 0) {
      uint64_t v30 = &v87;
    }
    else {
      uint64_t v30 = (long long *)v87;
    }
    memmove(v29, v30, v24);
  }
  v29[v24] = 0;
  uint64_t v31 = sub_8D7730(v26, (uint64_t)&__dst);
  if (*((char *)v31 + 23) < 0)
  {
    sub_4200(v85, (void *)*v31, v31[1]);
  }
  else
  {
    long long v32 = *(_OWORD *)v31;
    uint64_t v86 = v31[2];
    *(_OWORD *)std::string::size_type v85 = v32;
  }
  if (SBYTE7(v74) < 0) {
    operator delete((void *)__dst);
  }
  int v35 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v36 = byte_256B6A7;
  }
  else {
    size_t v36 = qword_256B698;
  }
  int v37 = SHIBYTE(v88);
  if (v88 >= 0) {
    size_t v38 = HIBYTE(v88);
  }
  else {
    size_t v38 = *((void *)&v87 + 1);
  }
  unint64_t v39 = v38 + v36;
  if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v40 = *(void *)(a1 + 8);
  if (v39 <= 0x16)
  {
    *(void *)&long long v74 = 0;
    long long __dst = 0uLL;
    double v41 = &__dst;
    BYTE7(v74) = v38 + v36;
    if (!v36) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v47 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v39 | 7) != 0x17) {
    uint64_t v47 = v39 | 7;
  }
  uint64_t v48 = v47 + 1;
  double v41 = (long long *)operator new(v47 + 1);
  *((void *)&__dst + 1) = v38 + v36;
  *(void *)&long long v74 = v48 | 0x8000000000000000;
  *(void *)&long long __dst = v41;
  if (v36)
  {
LABEL_69:
    if (v35 >= 0) {
      uint64_t v42 = &qword_256B690;
    }
    else {
      uint64_t v42 = (uint64_t *)qword_256B690;
    }
    memmove(v41, v42, v36);
  }
LABEL_73:
  std::string::size_type v43 = (char *)v41 + v36;
  if (v38)
  {
    if (v37 >= 0) {
      int v44 = &v87;
    }
    else {
      int v44 = (long long *)v87;
    }
    memmove(v43, v44, v38);
  }
  v43[v38] = 0;
  size_t v45 = sub_8D7730(v40, (uint64_t)&__dst);
  if (*((char *)v45 + 23) < 0)
  {
    sub_4200(v83, (void *)*v45, v45[1]);
  }
  else
  {
    long long v46 = *(_OWORD *)v45;
    uint64_t v84 = v45[2];
    *(_OWORD *)unint64_t v83 = v46;
  }
  if (SBYTE7(v74) < 0) {
    operator delete((void *)__dst);
  }
  int v49 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v50 = byte_256B6D7;
  }
  else {
    size_t v50 = qword_256B6C8;
  }
  int v51 = SHIBYTE(v88);
  if (v88 >= 0) {
    size_t v52 = HIBYTE(v88);
  }
  else {
    size_t v52 = *((void *)&v87 + 1);
  }
  unint64_t v53 = v52 + v50;
  if (v52 + v50 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v53 <= 0x16)
  {
    size_t v77 = 0;
    unint64_t v78 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v78) = v52 + v50;
    if (!v50) {
      goto LABEL_100;
    }
    goto LABEL_96;
  }
  uint64_t v63 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v53 | 7) != 0x17) {
    uint64_t v63 = v53 | 7;
  }
  uint64_t v64 = v63 + 1;
  p_p = (char *)operator new(v63 + 1);
  size_t v77 = v52 + v50;
  unint64_t v78 = v64 | 0x8000000000000000;
  std::string __p = p_p;
  if (v50)
  {
LABEL_96:
    if (v49 >= 0) {
      size_t v55 = &qword_256B6C0;
    }
    else {
      size_t v55 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v55, v50);
  }
LABEL_100:
  int v56 = &p_p[v50];
  if (v52)
  {
    if (v51 >= 0) {
      size_t v57 = &v87;
    }
    else {
      size_t v57 = (long long *)v87;
    }
    memmove(v56, v57, v52);
  }
  v56[v52] = 0;
  long long __dst = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v79);
  *(_OWORD *)std::string::size_type v81 = v79;
  uint64_t v82 = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  unint64_t v58 = (void *)v74;
  if ((void)v74)
  {
    do
    {
      size_t v59 = (void *)*v58;
      sub_4F4B48((uint64_t)(v58 + 2));
      operator delete(v58);
      unint64_t v58 = v59;
    }
    while (v59);
  }
  int64_t v60 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v60) {
    operator delete(v60);
  }
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
    unint64_t v61 = *(void *)(a4 + 8);
    if (v61 < *(void *)(a4 + 16)) {
      goto LABEL_111;
    }
LABEL_118:
    *(void *)(a4 + 8) = sub_6E6EC((char **)a4, (uint64_t)v85);
    unint64_t v65 = *(void *)(a4 + 168);
    if (v65 >= *(void *)(a4 + 176)) {
      goto LABEL_123;
    }
    goto LABEL_119;
  }
  operator delete(__p);
  unint64_t v61 = *(void *)(a4 + 8);
  if (v61 >= *(void *)(a4 + 16)) {
    goto LABEL_118;
  }
LABEL_111:
  if (SHIBYTE(v86) < 0)
  {
    sub_4200((unsigned char *)v61, v85[0], (unint64_t)v85[1]);
  }
  else
  {
    long long v62 = *(_OWORD *)v85;
    *(void *)(v61 + 16) = v86;
    *(_OWORD *)unint64_t v61 = v62;
  }
  *(void *)(a4 + 8) = v61 + 24;
  *(void *)(a4 + 8) = v61 + 24;
  unint64_t v65 = *(void *)(a4 + 168);
  if (v65 >= *(void *)(a4 + 176))
  {
LABEL_123:
    *(void *)(a4 + 168) = sub_6E6EC((char **)(a4 + 160), (uint64_t)v83);
    unint64_t v67 = *(void *)(a4 + 328);
    if (v67 < *(void *)(a4 + 336)) {
      goto LABEL_124;
    }
LABEL_128:
    size_t v70 = sub_6E6EC(v72, (uint64_t)v81);
    char v71 = HIBYTE(v82);
    *(void *)(a4 + 328) = v70;
    if ((v71 & 0x80) == 0) {
      goto LABEL_133;
    }
    goto LABEL_132;
  }
LABEL_119:
  if (SHIBYTE(v84) < 0)
  {
    sub_4200((unsigned char *)v65, v83[0], (unint64_t)v83[1]);
  }
  else
  {
    long long v66 = *(_OWORD *)v83;
    *(void *)(v65 + 16) = v84;
    *(_OWORD *)unint64_t v65 = v66;
  }
  *(void *)(a4 + 168) = v65 + 24;
  *(void *)(a4 + 168) = v65 + 24;
  unint64_t v67 = *(void *)(a4 + 328);
  if (v67 >= *(void *)(a4 + 336)) {
    goto LABEL_128;
  }
LABEL_124:
  char v68 = HIBYTE(v82);
  if (SHIBYTE(v82) < 0)
  {
    sub_4200((unsigned char *)v67, v81[0], (unint64_t)v81[1]);
  }
  else
  {
    long long v69 = *(_OWORD *)v81;
    *(void *)(v67 + 16) = v82;
    *(_OWORD *)unint64_t v67 = v69;
  }
  *(void *)(a4 + 328) = v67 + 24;
  *(void *)(a4 + 328) = v67 + 24;
  if (v68 < 0) {
LABEL_132:
  }
    operator delete(v81[0]);
LABEL_133:
  if (SHIBYTE(v84) < 0)
  {
    operator delete(v83[0]);
    if ((SHIBYTE(v86) & 0x80000000) == 0)
    {
LABEL_135:
      if ((SHIBYTE(v88) & 0x80000000) == 0) {
        goto LABEL_136;
      }
      goto LABEL_141;
    }
  }
  else if ((SHIBYTE(v86) & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(v85[0]);
  if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_136:
    if ((SHIBYTE(v90) & 0x80000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_142;
  }
LABEL_141:
  operator delete((void *)v87);
  if ((SHIBYTE(v90) & 0x80000000) == 0)
  {
LABEL_137:
    if ((SHIBYTE(v92) & 0x80000000) == 0) {
      return;
    }
LABEL_143:
    operator delete((void *)v91);
    return;
  }
LABEL_142:
  operator delete((void *)v89);
  if (SHIBYTE(v92) < 0) {
    goto LABEL_143;
  }
}

void sub_54CB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  *(void *)(v48 + 328) = v49;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_5419D4(v48);
  if (*(char *)(v50 - 153) < 0)
  {
    operator delete(*(void **)(v50 - 176));
    if ((*(char *)(v50 - 121) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v50 - 89) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v50 - 121) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v50 - 144));
  if ((*(char *)(v50 - 89) & 0x80000000) == 0) {
LABEL_10:
  }
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(*(void **)(v50 - 112));
  _Unwind_Resume(a1);
}

void sub_54CC90(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  uint64_t v8 = 72;
  if (a3) {
    uint64_t v8 = 75;
  }
  size_t v9 = &qword_256BEC0;
  if (!a3) {
    size_t v9 = &qword_256BEA8;
  }
  unint64_t v10 = &byte_256BEBF;
  if (a3) {
    unint64_t v10 = &byte_256BED7;
  }
  if (*v10 < 0)
  {
    uint64_t v11 = (void *)qword_256BC68[v8];
    uint64_t v12 = 72;
    if (a3) {
      uint64_t v12 = 75;
    }
    sub_4200(&v102, v11, qword_256BC68[v12 + 1]);
  }
  else
  {
    long long v102 = *(_OWORD *)v9;
    uint64_t v103 = v9[2];
  }
  int v13 = a2 ^ 1 | a3;
  if (v13) {
    uint64_t v14 = 42;
  }
  else {
    uint64_t v14 = 45;
  }
  if (v13) {
    unint64_t v15 = &qword_256BDB8;
  }
  else {
    unint64_t v15 = &qword_256BDD0;
  }
  char v16 = byte_256BDCF;
  char v17 = byte_256BDE7;
  if (v13) {
    char v18 = byte_256BDCF;
  }
  else {
    char v18 = byte_256BDE7;
  }
  if (v18 < 0)
  {
    uint64_t v19 = 45;
    if (v13) {
      uint64_t v19 = 42;
    }
    sub_4200(&v100, (void *)qword_256BC68[v14], qword_256BC68[v19 + 1]);
    char v17 = byte_256BDE7;
    char v16 = byte_256BDCF;
  }
  else
  {
    long long v100 = *(_OWORD *)v15;
    uint64_t v101 = v15[2];
  }
  uint64_t v20 = 45;
  if (!a2) {
    uint64_t v20 = 42;
  }
  int v21 = &qword_256BDD0;
  if (!a2)
  {
    int v21 = &qword_256BDB8;
    char v17 = v16;
  }
  if (v17 < 0)
  {
    uint64_t v22 = 42;
    if (a2) {
      uint64_t v22 = 45;
    }
    sub_4200(&v98, (void *)qword_256BC68[v20], qword_256BC68[v22 + 1]);
  }
  else
  {
    long long v98 = *(_OWORD *)v21;
    uint64_t v99 = v21[2];
  }
  int v23 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v24 = byte_256B68F;
  }
  else {
    size_t v24 = qword_256B680;
  }
  int v25 = SHIBYTE(v103);
  if (v103 >= 0) {
    size_t v26 = HIBYTE(v103);
  }
  else {
    size_t v26 = *((void *)&v102 + 1);
  }
  unint64_t v27 = v26 + v24;
  if (v26 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v28 = *(void *)(a1 + 8);
  if (v27 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v26 + v24;
    if (!v24) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  uint64_t v39 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v39 = v27 | 7;
  }
  uint64_t v40 = v39 + 1;
  p_dst = (std::string *)operator new(v39 + 1);
  __dst.__r_.__value_.__l.__size_ = v26 + v24;
  __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v24)
  {
LABEL_44:
    if (v23 >= 0) {
      uint64_t v30 = &qword_256B678;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v30, v24);
  }
LABEL_48:
  uint64_t v31 = (char *)p_dst + v24;
  if (v26)
  {
    if (v25 >= 0) {
      long long v32 = &v102;
    }
    else {
      long long v32 = (long long *)v102;
    }
    memmove(v31, v32, v26);
  }
  v31[v26] = 0;
  if (v101 >= 0) {
    uint64_t v33 = (const std::string::value_type *)&v100;
  }
  else {
    uint64_t v33 = (const std::string::value_type *)v100;
  }
  if (v101 >= 0) {
    std::string::size_type v34 = HIBYTE(v101);
  }
  else {
    std::string::size_type v34 = *((void *)&v100 + 1);
  }
  int v35 = std::string::append(&__dst, v33, v34);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  *(void *)&long long v87 = *((void *)&v35->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  int v37 = sub_8D7730(v28, (uint64_t)__p);
  if (*((char *)v37 + 23) < 0)
  {
    sub_4200(v96, (void *)*v37, v37[1]);
  }
  else
  {
    long long v38 = *(_OWORD *)v37;
    uint64_t v97 = v37[2];
    *(_OWORD *)int v96 = v38;
  }
  if (SBYTE7(v87) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_68;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_68:
  int v41 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v42 = byte_256B6A7;
  }
  else {
    size_t v42 = qword_256B698;
  }
  int v43 = SHIBYTE(v103);
  if (v103 >= 0) {
    size_t v44 = HIBYTE(v103);
  }
  else {
    size_t v44 = *((void *)&v102 + 1);
  }
  unint64_t v45 = v44 + v42;
  if (v44 + v42 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v46 = *(void *)(a1 + 8);
  if (v45 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v47 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v42;
    if (!v42) {
      goto LABEL_81;
    }
    goto LABEL_77;
  }
  uint64_t v57 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17) {
    uint64_t v57 = v45 | 7;
  }
  uint64_t v58 = v57 + 1;
  uint64_t v47 = (std::string *)operator new(v57 + 1);
  __dst.__r_.__value_.__l.__size_ = v44 + v42;
  __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
  if (v42)
  {
LABEL_77:
    if (v41 >= 0) {
      uint64_t v48 = &qword_256B690;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_256B690;
    }
    memmove(v47, v48, v42);
  }
LABEL_81:
  uint64_t v49 = (char *)v47 + v42;
  if (v44)
  {
    if (v43 >= 0) {
      uint64_t v50 = &v102;
    }
    else {
      uint64_t v50 = (long long *)v102;
    }
    memmove(v49, v50, v44);
  }
  v49[v44] = 0;
  if (v101 >= 0) {
    int v51 = (const std::string::value_type *)&v100;
  }
  else {
    int v51 = (const std::string::value_type *)v100;
  }
  if (v101 >= 0) {
    std::string::size_type v52 = HIBYTE(v101);
  }
  else {
    std::string::size_type v52 = *((void *)&v100 + 1);
  }
  unint64_t v53 = std::string::append(&__dst, v51, v52);
  long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  *(void *)&long long v87 = *((void *)&v53->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  size_t v55 = sub_8D7730(v46, (uint64_t)__p);
  if (*((char *)v55 + 23) < 0)
  {
    sub_4200(v94, (void *)*v55, v55[1]);
  }
  else
  {
    long long v56 = *(_OWORD *)v55;
    uint64_t v95 = v55[2];
    *(_OWORD *)int v94 = v56;
  }
  if (SBYTE7(v87) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_103;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_103:
  int v59 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v60 = byte_256B6D7;
  }
  else {
    size_t v60 = qword_256B6C8;
  }
  int v61 = SHIBYTE(v103);
  if (v103 >= 0) {
    size_t v62 = HIBYTE(v103);
  }
  else {
    size_t v62 = *((void *)&v102 + 1);
  }
  unint64_t v63 = v62 + v60;
  if (v62 + v60 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v63 <= 0x16)
  {
    memset(&v89, 0, sizeof(v89));
    uint64_t v64 = (char *)&v89;
    *((unsigned char *)&v89.__r_.__value_.__s + 23) = v62 + v60;
    if (!v60) {
      goto LABEL_116;
    }
    goto LABEL_112;
  }
  uint64_t v77 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v63 | 7) != 0x17) {
    uint64_t v77 = v63 | 7;
  }
  uint64_t v78 = v77 + 1;
  uint64_t v64 = (char *)operator new(v77 + 1);
  v89.__r_.__value_.__l.__size_ = v62 + v60;
  v89.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
  if (v60)
  {
LABEL_112:
    if (v59 >= 0) {
      unint64_t v65 = &qword_256B6C0;
    }
    else {
      unint64_t v65 = (uint64_t *)qword_256B6C0;
    }
    memmove(v64, v65, v60);
  }
LABEL_116:
  long long v66 = &v64[v60];
  if (v62)
  {
    if (v61 >= 0) {
      unint64_t v67 = &v102;
    }
    else {
      unint64_t v67 = (long long *)v102;
    }
    memmove(v66, v67, v62);
  }
  v66[v62] = 0;
  if (v99 >= 0) {
    char v68 = (const std::string::value_type *)&v98;
  }
  else {
    char v68 = (const std::string::value_type *)v98;
  }
  if (v99 >= 0) {
    std::string::size_type v69 = HIBYTE(v99);
  }
  else {
    std::string::size_type v69 = *((void *)&v98 + 1);
  }
  size_t v70 = std::string::append(&v89, v68, v69);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  std::string::size_type v91 = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v90 = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v87 = 0u;
  int v88 = 1065353216;
  sub_6102F0(a1 + 24, (char **)v90, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&__dst);
  std::string v93 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  char v72 = (void *)v87;
  if ((void)v87)
  {
    do
    {
      uint64_t v73 = (void *)*v72;
      sub_4F4B48((uint64_t)(v72 + 2));
      operator delete(v72);
      char v72 = v73;
    }
    while (v73);
  }
  long long v74 = __p[0];
  __p[0] = 0;
  if (v74) {
    operator delete(v74);
  }
  if (SHIBYTE(v91) < 0)
  {
    operator delete(v90[0]);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_133:
      unint64_t v75 = *(void *)(a4 + 8);
      if (v75 < *(void *)(a4 + 16)) {
        goto LABEL_134;
      }
LABEL_144:
      *(void *)(a4 + 8) = sub_6E6EC((char **)a4, (uint64_t)v96);
      unint64_t v79 = *(void *)(a4 + 168);
      if (v79 >= *(void *)(a4 + 176)) {
        goto LABEL_149;
      }
      goto LABEL_145;
    }
  }
  else if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_133;
  }
  operator delete(v89.__r_.__value_.__l.__data_);
  unint64_t v75 = *(void *)(a4 + 8);
  if (v75 >= *(void *)(a4 + 16)) {
    goto LABEL_144;
  }
LABEL_134:
  if (SHIBYTE(v97) < 0)
  {
    sub_4200((unsigned char *)v75, v96[0], (unint64_t)v96[1]);
  }
  else
  {
    long long v76 = *(_OWORD *)v96;
    *(void *)(v75 + 16) = v97;
    *(_OWORD *)unint64_t v75 = v76;
  }
  *(void *)(a4 + 8) = v75 + 24;
  *(void *)(a4 + 8) = v75 + 24;
  unint64_t v79 = *(void *)(a4 + 168);
  if (v79 >= *(void *)(a4 + 176))
  {
LABEL_149:
    *(void *)(a4 + 168) = sub_6E6EC((char **)(a4 + 160), (uint64_t)v94);
    unint64_t v81 = *(void *)(a4 + 328);
    if (v81 < *(void *)(a4 + 336)) {
      goto LABEL_150;
    }
LABEL_154:
    uint64_t v84 = sub_6E6EC((char **)(a4 + 320), (uint64_t)&v93);
    char v85 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    *(void *)(a4 + 328) = v84;
    if ((v85 & 0x80) == 0) {
      goto LABEL_159;
    }
    goto LABEL_158;
  }
LABEL_145:
  if (SHIBYTE(v95) < 0)
  {
    sub_4200((unsigned char *)v79, v94[0], (unint64_t)v94[1]);
  }
  else
  {
    long long v80 = *(_OWORD *)v94;
    *(void *)(v79 + 16) = v95;
    *(_OWORD *)unint64_t v79 = v80;
  }
  *(void *)(a4 + 168) = v79 + 24;
  *(void *)(a4 + 168) = v79 + 24;
  unint64_t v81 = *(void *)(a4 + 328);
  if (v81 >= *(void *)(a4 + 336)) {
    goto LABEL_154;
  }
LABEL_150:
  char v82 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)v81, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v83 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *(void *)(v81 + 16) = *((void *)&v93.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v81 = v83;
  }
  *(void *)(a4 + 328) = v81 + 24;
  *(void *)(a4 + 328) = v81 + 24;
  if (v82 < 0) {
LABEL_158:
  }
    operator delete(v93.__r_.__value_.__l.__data_);
LABEL_159:
  if (SHIBYTE(v95) < 0)
  {
    operator delete(v94[0]);
    if ((SHIBYTE(v97) & 0x80000000) == 0)
    {
LABEL_161:
      if ((SHIBYTE(v99) & 0x80000000) == 0) {
        goto LABEL_162;
      }
      goto LABEL_167;
    }
  }
  else if ((SHIBYTE(v97) & 0x80000000) == 0)
  {
    goto LABEL_161;
  }
  operator delete(v96[0]);
  if ((SHIBYTE(v99) & 0x80000000) == 0)
  {
LABEL_162:
    if ((SHIBYTE(v101) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_168;
  }
LABEL_167:
  operator delete((void *)v98);
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v103) & 0x80000000) == 0) {
      return;
    }
LABEL_169:
    operator delete((void *)v102);
    return;
  }
LABEL_168:
  operator delete((void *)v100);
  if (SHIBYTE(v103) < 0) {
    goto LABEL_169;
  }
}

void sub_54D4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  *(void *)(v58 + 328) = v59;
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (*(char *)(v60 - 153) < 0)
  {
    operator delete(*(void **)(v60 - 176));
    if ((*(char *)(v60 - 121) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v60 - 89) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v60 - 121) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v60 - 144));
  if ((*(char *)(v60 - 89) & 0x80000000) == 0)
  {
LABEL_10:
    sub_5419D4(v58);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v60 - 112));
  sub_5419D4(v58);
  _Unwind_Resume(a1);
}

void sub_54D6C4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  uint64_t v8 = 72;
  if (a3) {
    uint64_t v8 = 75;
  }
  size_t v9 = &qword_256BEC0;
  if (!a3) {
    size_t v9 = &qword_256BEA8;
  }
  unint64_t v10 = &byte_256BEBF;
  if (a3) {
    unint64_t v10 = &byte_256BED7;
  }
  if (*v10 < 0)
  {
    uint64_t v11 = (void *)qword_256BC68[v8];
    uint64_t v12 = 72;
    if (a3) {
      uint64_t v12 = 75;
    }
    sub_4200(&v111, v11, qword_256BC68[v12 + 1]);
  }
  else
  {
    long long v111 = *(_OWORD *)v9;
    uint64_t v112 = v9[2];
  }
  int v13 = SHIBYTE(v112);
  if (v112 >= 0) {
    size_t v14 = HIBYTE(v112);
  }
  else {
    size_t v14 = *((void *)&v111 + 1);
  }
  int v15 = byte_256BDFF;
  if (byte_256BDFF >= 0) {
    size_t v16 = byte_256BDFF;
  }
  else {
    size_t v16 = qword_256BDF0;
  }
  unint64_t v17 = v16 + v14;
  if (v16 + v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v17 <= 0x16)
  {
    size_t v109 = 0;
    int64_t v110 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v110) = v16 + v14;
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  uint64_t v48 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v48 = v17 | 7;
  }
  uint64_t v49 = v48 + 1;
  p_dst = (void **)operator new(v48 + 1);
  size_t v109 = v16 + v14;
  int64_t v110 = v49 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v14)
  {
LABEL_21:
    if (v13 >= 0) {
      uint64_t v19 = &v111;
    }
    else {
      uint64_t v19 = (long long *)v111;
    }
    memmove(p_dst, v19, v14);
  }
LABEL_25:
  uint64_t v90 = a1;
  uint64_t v20 = (char *)p_dst + v14;
  if (v16)
  {
    if (v15 >= 0) {
      int v21 = &qword_256BDE8;
    }
    else {
      int v21 = (uint64_t *)qword_256BDE8;
    }
    memmove(v20, v21, v16);
  }
  v20[v16] = 0;
  int v22 = SHIBYTE(v110);
  if (v110 >= 0) {
    size_t v23 = HIBYTE(v110);
  }
  else {
    size_t v23 = v109;
  }
  if (a2) {
    uint64_t v24 = 45;
  }
  else {
    uint64_t v24 = 42;
  }
  if (a2) {
    int v25 = &qword_256BDD0;
  }
  else {
    int v25 = &qword_256BDB8;
  }
  size_t v26 = &byte_256BDE7;
  if (!a2) {
    size_t v26 = &byte_256BDCF;
  }
  size_t v27 = *v26;
  int v28 = (char)v27;
  uint64_t v29 = &word_256BDC0;
  if (a2) {
    uint64_t v29 = (__int16 *)&qword_256BDD8;
  }
  size_t v30 = *(void *)v29;
  if ((v27 & 0x80u) == 0) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v30;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    size_t v106 = 0;
    int64_t v107 = 0;
    unint64_t v105 = 0;
    uint64_t v33 = (void **)&v105;
    HIBYTE(v107) = v31 + v23;
    uint64_t v34 = v90;
    if (!v23) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v50 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v50 = v32 | 7;
  }
  uint64_t v51 = v50 + 1;
  uint64_t v33 = (void **)operator new(v50 + 1);
  size_t v106 = v31 + v23;
  int64_t v107 = v51 | 0x8000000000000000;
  unint64_t v105 = v33;
  uint64_t v34 = v90;
  if (v23)
  {
LABEL_49:
    if (v22 >= 0) {
      int v35 = (void **)&__dst;
    }
    else {
      int v35 = __dst;
    }
    memmove(v33, v35, v23);
  }
LABEL_53:
  long long v36 = (char *)v33 + v23;
  if (v31)
  {
    if (v28 >= 0) {
      int v37 = v25;
    }
    else {
      int v37 = (uint64_t *)qword_256BC68[v24];
    }
    memmove(v36, v37, v31);
  }
  v36[v31] = 0;
  int v38 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v39 = byte_256B68F;
  }
  else {
    size_t v39 = qword_256B680;
  }
  unint64_t v40 = v39 + v23;
  if (v39 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v41 = *(void *)(v34 + 8);
  if (v40 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v92 = 0;
    __p[0] = 0;
    size_t v42 = (char *)__p;
    BYTE7(v92) = v39 + v23;
    if (!v39) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v52 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v40 | 7) != 0x17) {
    uint64_t v52 = v40 | 7;
  }
  uint64_t v53 = v52 + 1;
  size_t v42 = (char *)operator new(v52 + 1);
  __p[1] = (void *)(v39 + v23);
  *(void *)&long long v92 = v53 | 0x8000000000000000;
  __p[0] = v42;
  if (v39)
  {
LABEL_64:
    if (v38 >= 0) {
      int v43 = &qword_256B678;
    }
    else {
      int v43 = (uint64_t *)qword_256B678;
    }
    memmove(v42, v43, v39);
  }
LABEL_68:
  size_t v44 = &v42[v39];
  if (v23)
  {
    if (v22 >= 0) {
      unint64_t v45 = (void **)&__dst;
    }
    else {
      unint64_t v45 = __dst;
    }
    memmove(v44, v45, v23);
  }
  v44[v23] = 0;
  uint64_t v46 = sub_8D7730(v41, (uint64_t)__p);
  if (*((char *)v46 + 23) < 0)
  {
    sub_4200(v103, (void *)*v46, v46[1]);
  }
  else
  {
    long long v47 = *(_OWORD *)v46;
    uint64_t v104 = v46[2];
    *(_OWORD *)uint64_t v103 = v47;
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  int v54 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v55 = byte_256B6A7;
  }
  else {
    size_t v55 = qword_256B698;
  }
  unint64_t v56 = v23 + v55;
  if (v23 + v55 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v57 = *(void *)(v34 + 8);
  if (v56 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v92 = 0;
    __p[0] = 0;
    uint64_t v58 = (char *)__p;
    BYTE7(v92) = v23 + v55;
    if (!v55) {
      goto LABEL_100;
    }
    goto LABEL_96;
  }
  uint64_t v64 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v56 | 7) != 0x17) {
    uint64_t v64 = v56 | 7;
  }
  uint64_t v65 = v64 + 1;
  uint64_t v58 = (char *)operator new(v64 + 1);
  __p[1] = (void *)(v23 + v55);
  *(void *)&long long v92 = v65 | 0x8000000000000000;
  __p[0] = v58;
  if (v55)
  {
LABEL_96:
    if (v54 >= 0) {
      uint64_t v59 = &qword_256B690;
    }
    else {
      uint64_t v59 = (uint64_t *)qword_256B690;
    }
    memmove(v58, v59, v55);
  }
LABEL_100:
  uint64_t v60 = &v58[v55];
  if (v23)
  {
    if (v22 >= 0) {
      int v61 = (void **)&__dst;
    }
    else {
      int v61 = __dst;
    }
    memmove(v60, v61, v23);
  }
  v60[v23] = 0;
  size_t v62 = sub_8D7730(v57, (uint64_t)__p);
  if (*((char *)v62 + 23) < 0)
  {
    sub_4200(v101, (void *)*v62, v62[1]);
  }
  else
  {
    long long v63 = *(_OWORD *)v62;
    uint64_t v102 = v62[2];
    *(_OWORD *)uint64_t v101 = v63;
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  int v66 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v67 = byte_256B6D7;
  }
  else {
    size_t v67 = qword_256B6C8;
  }
  int v68 = SHIBYTE(v107);
  if (v107 >= 0) {
    size_t v69 = HIBYTE(v107);
  }
  else {
    size_t v69 = v106;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    size_t v95 = 0;
    unint64_t v96 = 0;
    int v94 = 0;
    long long v71 = (char *)&v94;
    HIBYTE(v96) = v69 + v67;
    uint64_t v72 = v90;
    if (!v67) {
      goto LABEL_127;
    }
    goto LABEL_123;
  }
  uint64_t v81 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v81 = v70 | 7;
  }
  uint64_t v82 = v81 + 1;
  long long v71 = (char *)operator new(v81 + 1);
  size_t v95 = v69 + v67;
  unint64_t v96 = v82 | 0x8000000000000000;
  int v94 = v71;
  uint64_t v72 = v90;
  if (v67)
  {
LABEL_123:
    if (v66 >= 0) {
      uint64_t v73 = &qword_256B6C0;
    }
    else {
      uint64_t v73 = (uint64_t *)qword_256B6C0;
    }
    memmove(v71, v73, v67);
  }
LABEL_127:
  long long v74 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      unint64_t v75 = (void **)&v105;
    }
    else {
      unint64_t v75 = v105;
    }
    memmove(v74, v75, v69);
  }
  v74[v69] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  sub_6102F0(v72 + 24, (char **)&v94, (uint64_t)__p, *(unsigned __int8 *)(v72 + 2525), (uint64_t)&v97);
  *(_OWORD *)uint64_t v99 = v97;
  uint64_t v100 = v98;
  uint64_t v98 = 0;
  long long v97 = 0uLL;
  long long v76 = (void *)v92;
  if ((void)v92)
  {
    do
    {
      uint64_t v77 = (void *)*v76;
      sub_4F4B48((uint64_t)(v76 + 2));
      operator delete(v76);
      long long v76 = v77;
    }
    while (v77);
  }
  uint64_t v78 = __p[0];
  __p[0] = 0;
  if (v78) {
    operator delete(v78);
  }
  if ((SHIBYTE(v96) & 0x80000000) == 0)
  {
    unint64_t v79 = *(void *)(a4 + 8);
    if (v79 < *(void *)(a4 + 16)) {
      goto LABEL_138;
    }
LABEL_145:
    *(void *)(a4 + 8) = sub_6E6EC((char **)a4, (uint64_t)v103);
    unint64_t v83 = *(void *)(a4 + 168);
    if (v83 >= *(void *)(a4 + 176)) {
      goto LABEL_150;
    }
    goto LABEL_146;
  }
  operator delete(v94);
  unint64_t v79 = *(void *)(a4 + 8);
  if (v79 >= *(void *)(a4 + 16)) {
    goto LABEL_145;
  }
LABEL_138:
  if (SHIBYTE(v104) < 0)
  {
    sub_4200((unsigned char *)v79, v103[0], (unint64_t)v103[1]);
  }
  else
  {
    long long v80 = *(_OWORD *)v103;
    *(void *)(v79 + 16) = v104;
    *(_OWORD *)unint64_t v79 = v80;
  }
  *(void *)(a4 + 8) = v79 + 24;
  *(void *)(a4 + 8) = v79 + 24;
  unint64_t v83 = *(void *)(a4 + 168);
  if (v83 >= *(void *)(a4 + 176))
  {
LABEL_150:
    *(void *)(a4 + 168) = sub_6E6EC((char **)(a4 + 160), (uint64_t)v101);
    unint64_t v85 = *(void *)(a4 + 328);
    if (v85 < *(void *)(a4 + 336)) {
      goto LABEL_151;
    }
LABEL_155:
    int v88 = sub_6E6EC((char **)(a4 + 320), (uint64_t)v99);
    char v89 = HIBYTE(v100);
    *(void *)(a4 + 328) = v88;
    if ((v89 & 0x80) == 0) {
      goto LABEL_160;
    }
    goto LABEL_159;
  }
LABEL_146:
  if (SHIBYTE(v102) < 0)
  {
    sub_4200((unsigned char *)v83, v101[0], (unint64_t)v101[1]);
  }
  else
  {
    long long v84 = *(_OWORD *)v101;
    *(void *)(v83 + 16) = v102;
    *(_OWORD *)unint64_t v83 = v84;
  }
  *(void *)(a4 + 168) = v83 + 24;
  *(void *)(a4 + 168) = v83 + 24;
  unint64_t v85 = *(void *)(a4 + 328);
  if (v85 >= *(void *)(a4 + 336)) {
    goto LABEL_155;
  }
LABEL_151:
  char v86 = HIBYTE(v100);
  if (SHIBYTE(v100) < 0)
  {
    sub_4200((unsigned char *)v85, v99[0], (unint64_t)v99[1]);
  }
  else
  {
    long long v87 = *(_OWORD *)v99;
    *(void *)(v85 + 16) = v100;
    *(_OWORD *)unint64_t v85 = v87;
  }
  *(void *)(a4 + 328) = v85 + 24;
  *(void *)(a4 + 328) = v85 + 24;
  if (v86 < 0) {
LABEL_159:
  }
    operator delete(v99[0]);
LABEL_160:
  if (SHIBYTE(v102) < 0)
  {
    operator delete(v101[0]);
    if ((SHIBYTE(v104) & 0x80000000) == 0)
    {
LABEL_162:
      if ((SHIBYTE(v107) & 0x80000000) == 0) {
        goto LABEL_163;
      }
      goto LABEL_168;
    }
  }
  else if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
    goto LABEL_162;
  }
  operator delete(v103[0]);
  if ((SHIBYTE(v107) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v110) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_169;
  }
LABEL_168:
  operator delete(v105);
  if ((SHIBYTE(v110) & 0x80000000) == 0)
  {
LABEL_164:
    if ((SHIBYTE(v112) & 0x80000000) == 0) {
      return;
    }
LABEL_170:
    operator delete((void *)v111);
    return;
  }
LABEL_169:
  operator delete(__dst);
  if (SHIBYTE(v112) < 0) {
    goto LABEL_170;
  }
}

void sub_54DF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  *(void *)(v50 + 328) = v51;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v52 - 137) < 0)
  {
    operator delete(*(void **)(v52 - 160));
    if ((*(char *)(v52 - 113) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v52 - 89) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v52 - 113) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v52 - 136));
  if ((*(char *)(v52 - 89) & 0x80000000) == 0)
  {
LABEL_10:
    sub_5419D4(v50);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v52 - 112));
  sub_5419D4(v50);
  _Unwind_Resume(a1);
}

void sub_54E0B4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  uint64_t v72 = a3;
  long long v71 = (char **)sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  uint64_t v73 = a2;
  int v8 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v9 = byte_256B68F;
  }
  else {
    size_t v9 = qword_256B680;
  }
  int v10 = byte_256BF97;
  if (byte_256BF97 >= 0) {
    size_t v11 = byte_256BF97;
  }
  else {
    size_t v11 = *((void *)&xmmword_256BF80 + 1);
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v12 <= 0x16)
  {
    *(void *)&long long v75 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v75) = v11 + v9;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    uint64_t v20 = v12 | 7;
  }
  uint64_t v21 = v20 + 1;
  p_dst = (long long *)operator new(v20 + 1);
  *((void *)&__dst + 1) = v11 + v9;
  *(void *)&long long v75 = v21 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v9)
  {
LABEL_10:
    if (v8 >= 0) {
      int v15 = &qword_256B678;
    }
    else {
      int v15 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v15, v9);
  }
LABEL_14:
  size_t v16 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      unint64_t v17 = &xmmword_256BF80;
    }
    else {
      unint64_t v17 = (long long *)xmmword_256BF80;
    }
    memmove(v16, v17, v11);
  }
  v16[v11] = 0;
  char v18 = sub_8D7730(v13, (uint64_t)&__dst);
  if (*((char *)v18 + 23) < 0)
  {
    sub_4200(&v86, (void *)*v18, v18[1]);
  }
  else
  {
    long long v19 = *(_OWORD *)v18;
    uint64_t v87 = v18[2];
    long long v86 = v19;
  }
  if (SBYTE7(v75) < 0) {
    operator delete((void *)__dst);
  }
  int v22 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v23 = byte_256B6A7;
  }
  else {
    size_t v23 = qword_256B698;
  }
  int v24 = byte_256BF97;
  if (byte_256BF97 >= 0) {
    size_t v25 = byte_256BF97;
  }
  else {
    size_t v25 = *((void *)&xmmword_256BF80 + 1);
  }
  unint64_t v26 = v25 + v23;
  if (v25 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v27 = *(void *)(a1 + 8);
  if (v26 <= 0x16)
  {
    *(void *)&long long v75 = 0;
    long long __dst = 0uLL;
    int v28 = &__dst;
    BYTE7(v75) = v25 + v23;
    if (!v23) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v34 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v34 = v26 | 7;
  }
  uint64_t v35 = v34 + 1;
  int v28 = (long long *)operator new(v34 + 1);
  *((void *)&__dst + 1) = v25 + v23;
  *(void *)&long long v75 = v35 | 0x8000000000000000;
  *(void *)&long long __dst = v28;
  if (v23)
  {
LABEL_37:
    if (v22 >= 0) {
      uint64_t v29 = &qword_256B690;
    }
    else {
      uint64_t v29 = (uint64_t *)qword_256B690;
    }
    memmove(v28, v29, v23);
  }
LABEL_41:
  size_t v30 = (char *)v28 + v23;
  if (v25)
  {
    if (v24 >= 0) {
      size_t v31 = &xmmword_256BF80;
    }
    else {
      size_t v31 = (long long *)xmmword_256BF80;
    }
    memmove(v30, v31, v25);
  }
  v30[v25] = 0;
  unint64_t v32 = sub_8D7730(v27, (uint64_t)&__dst);
  if (*((char *)v32 + 23) < 0)
  {
    sub_4200(&v84, (void *)*v32, v32[1]);
  }
  else
  {
    long long v33 = *(_OWORD *)v32;
    uint64_t v85 = v32[2];
    long long v84 = v33;
  }
  if (SBYTE7(v75) < 0) {
    operator delete((void *)__dst);
  }
  int v36 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v37 = byte_256B6D7;
  }
  else {
    size_t v37 = qword_256B6C8;
  }
  int v38 = byte_256BF97;
  if (byte_256BF97 >= 0) {
    size_t v39 = byte_256BF97;
  }
  else {
    size_t v39 = *((void *)&xmmword_256BF80 + 1);
  }
  unint64_t v40 = v39 + v37;
  if (v39 + v37 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v40 <= 0x16)
  {
    size_t v78 = 0;
    unint64_t v79 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v79) = v39 + v37;
    if (!v37) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v40 | 7) != 0x17) {
    uint64_t v50 = v40 | 7;
  }
  uint64_t v51 = v50 + 1;
  p_p = (char *)operator new(v50 + 1);
  size_t v78 = v39 + v37;
  unint64_t v79 = v51 | 0x8000000000000000;
  std::string __p = p_p;
  if (v37)
  {
LABEL_64:
    if (v36 >= 0) {
      size_t v42 = &qword_256B6C0;
    }
    else {
      size_t v42 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v42, v37);
  }
LABEL_68:
  int v43 = &p_p[v37];
  if (v39)
  {
    if (v38 >= 0) {
      size_t v44 = &xmmword_256BF80;
    }
    else {
      size_t v44 = (long long *)xmmword_256BF80;
    }
    memmove(v43, v44, v39);
  }
  v43[v39] = 0;
  long long __dst = 0u;
  long long v75 = 0u;
  int v76 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v80);
  *(_OWORD *)uint64_t v82 = v80;
  uint64_t v83 = v81;
  uint64_t v81 = 0;
  long long v80 = 0uLL;
  unint64_t v45 = (void *)v75;
  if ((void)v75)
  {
    do
    {
      uint64_t v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      unint64_t v45 = v46;
    }
    while (v46);
  }
  long long v47 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v47) {
    operator delete(v47);
  }
  if (SHIBYTE(v79) < 0)
  {
    operator delete(__p);
    unint64_t v48 = *(void *)(a4 + 8);
    if (v48 < *(void *)(a4 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    uint64_t v52 = sub_6E6EC((char **)a4, (uint64_t)&v86);
    goto LABEL_89;
  }
  unint64_t v48 = *(void *)(a4 + 8);
  if (v48 >= *(void *)(a4 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v87) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v86, *((unint64_t *)&v86 + 1));
  }
  else
  {
    long long v49 = v86;
    *(void *)(v48 + 16) = v87;
    *(_OWORD *)unint64_t v48 = v49;
  }
  uint64_t v52 = (char *)(v48 + 24);
  *(void *)(a4 + 8) = v48 + 24;
LABEL_89:
  *(void *)(a4 + 8) = v52;
  uint64_t v53 = (_DWORD *)sub_6467E8(v73, 0);
  sub_64EDB4(v53, (uint64_t)&__dst);
  float v54 = (float)sub_3FB38C((uint64_t)&__dst);
  LOBYTE(v80) = 12;
  sub_5F3030((float *)&__dst, v54);
  unint64_t v55 = *(void *)(a4 + 32);
  if (v55 >= *(void *)(a4 + 40))
  {
    unint64_t v56 = sub_55C070((char **)(a4 + 24), &xmmword_256A610, (char *)&v80, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a4 + 32), &xmmword_256A610, v80, &__dst);
    unint64_t v56 = (char *)(v55 + 144);
    *(void *)(a4 + 32) = v55 + 144;
  }
  *(void *)(a4 + 32) = v56;
  unint64_t v57 = *(void *)(a4 + 168);
  if (v57 >= *(void *)(a4 + 176))
  {
    uint64_t v59 = sub_6E6EC((char **)(a4 + 160), (uint64_t)&v84);
  }
  else
  {
    if (SHIBYTE(v85) < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 168), (void *)v84, *((unint64_t *)&v84 + 1));
    }
    else
    {
      long long v58 = v84;
      *(void *)(v57 + 16) = v85;
      *(_OWORD *)unint64_t v57 = v58;
    }
    uint64_t v59 = (char *)(v57 + 24);
    *(void *)(a4 + 168) = v57 + 24;
  }
  *(void *)(a4 + 168) = v59;
  uint64_t v60 = (_DWORD *)sub_6467E8(v72, 0);
  sub_64EDB4(v60, (uint64_t)&__dst);
  float v61 = (float)sub_3FB38C((uint64_t)&__dst);
  LOBYTE(v80) = 12;
  sub_5F3030((float *)&__dst, v61);
  unint64_t v62 = *(void *)(a4 + 192);
  if (v62 >= *(void *)(a4 + 200))
  {
    long long v63 = sub_55C070((char **)(a4 + 184), (long long *)&qword_256A628, (char *)&v80, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a4 + 192), (long long *)&qword_256A628, v80, &__dst);
    long long v63 = (char *)(v62 + 144);
    *(void *)(a4 + 192) = v62 + 144;
  }
  *(void *)(a4 + 192) = v63;
  unint64_t v64 = *(void *)(a4 + 328);
  if (v64 >= *(void *)(a4 + 336))
  {
    int v66 = sub_6E6EC(v71, (uint64_t)v82);
  }
  else
  {
    if (SHIBYTE(v83) < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 328), v82[0], (unint64_t)v82[1]);
    }
    else
    {
      long long v65 = *(_OWORD *)v82;
      *(void *)(v64 + 16) = v83;
      *(_OWORD *)unint64_t v64 = v65;
    }
    int v66 = (char *)(v64 + 24);
    *(void *)(a4 + 328) = v64 + 24;
  }
  *(void *)(a4 + 328) = v66;
  LOBYTE(v80) = 12;
  sub_5F3030((float *)&__dst, v61);
  unint64_t v67 = *(void *)(a4 + 352);
  if (v67 >= *(void *)(a4 + 360))
  {
    int v68 = sub_55C070((char **)(a4 + 344), (long long *)&qword_256A628, (char *)&v80, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a4 + 352), (long long *)&qword_256A628, 12, &__dst);
    int v68 = (char *)(v67 + 144);
    *(void *)(a4 + 352) = v67 + 144;
  }
  *(void *)(a4 + 352) = v68;
  LOBYTE(v80) = 12;
  sub_5F3030((float *)&__dst, v54);
  unint64_t v69 = *(void *)(a4 + 352);
  if (v69 >= *(void *)(a4 + 360))
  {
    unint64_t v70 = sub_55C070((char **)(a4 + 344), &xmmword_256A610, (char *)&v80, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a4 + 352), &xmmword_256A610, 12, &__dst);
    unint64_t v70 = (char *)(v69 + 144);
    *(void *)(a4 + 352) = v69 + 144;
  }
  *(void *)(a4 + 352) = v70;
  if (SHIBYTE(v83) < 0)
  {
    operator delete(v82[0]);
    if ((SHIBYTE(v85) & 0x80000000) == 0)
    {
LABEL_115:
      if ((SHIBYTE(v87) & 0x80000000) == 0) {
        return;
      }
LABEL_119:
      operator delete((void *)v86);
      return;
    }
  }
  else if ((SHIBYTE(v85) & 0x80000000) == 0)
  {
    goto LABEL_115;
  }
  operator delete((void *)v84);
  if (SHIBYTE(v87) < 0) {
    goto LABEL_119;
  }
}

void sub_54E850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  *(void *)(v38 + 328) = v39;
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 137) < 0) {
    operator delete(*(void **)(v40 - 160));
  }
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  sub_5419D4(v38);
  _Unwind_Resume(a1);
}

void sub_54E9A8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  sub_5F3B34(a3 + 160);
  unint64_t v62 = (char **)sub_5F3B34(a3 + 320);
  sub_5F3B34(a3 + 480);
  long long v63 = a2;
  int v6 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v7 = byte_256B68F;
  }
  else {
    size_t v7 = qword_256B680;
  }
  int v8 = byte_256BFAF;
  if (byte_256BFAF >= 0) {
    size_t v9 = byte_256BFAF;
  }
  else {
    size_t v9 = qword_256BFA0;
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v10 <= 0x16)
  {
    *(void *)&long long v65 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v65) = v9 + v7;
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17) {
    uint64_t v18 = v10 | 7;
  }
  uint64_t v19 = v18 + 1;
  p_dst = (long long *)operator new(v18 + 1);
  *((void *)&__dst + 1) = v9 + v7;
  *(void *)&long long v65 = v19 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v7)
  {
LABEL_10:
    if (v6 >= 0) {
      uint64_t v13 = &qword_256B678;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v13, v7);
  }
LABEL_14:
  size_t v14 = (char *)p_dst + v7;
  if (v9)
  {
    if (v8 >= 0) {
      int v15 = &qword_256BF98;
    }
    else {
      int v15 = (uint64_t *)qword_256BF98;
    }
    memmove(v14, v15, v9);
  }
  v14[v9] = 0;
  size_t v16 = sub_8D7730(v11, (uint64_t)&__dst);
  if (*((char *)v16 + 23) < 0)
  {
    sub_4200(&v76, (void *)*v16, v16[1]);
  }
  else
  {
    long long v17 = *(_OWORD *)v16;
    uint64_t v77 = v16[2];
    long long v76 = v17;
  }
  if (SBYTE7(v65) < 0) {
    operator delete((void *)__dst);
  }
  int v20 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v21 = byte_256B6A7;
  }
  else {
    size_t v21 = qword_256B698;
  }
  int v22 = byte_256BFAF;
  if (byte_256BFAF >= 0) {
    size_t v23 = byte_256BFAF;
  }
  else {
    size_t v23 = qword_256BFA0;
  }
  unint64_t v24 = v23 + v21;
  if (v23 + v21 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v25 = *(void *)(a1 + 8);
  if (v24 <= 0x16)
  {
    *(void *)&long long v65 = 0;
    long long __dst = 0uLL;
    unint64_t v26 = &__dst;
    BYTE7(v65) = v23 + v21;
    if (!v21) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v32 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v32 = v24 | 7;
  }
  uint64_t v33 = v32 + 1;
  unint64_t v26 = (long long *)operator new(v32 + 1);
  *((void *)&__dst + 1) = v23 + v21;
  *(void *)&long long v65 = v33 | 0x8000000000000000;
  *(void *)&long long __dst = v26;
  if (v21)
  {
LABEL_37:
    if (v20 >= 0) {
      uint64_t v27 = &qword_256B690;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256B690;
    }
    memmove(v26, v27, v21);
  }
LABEL_41:
  int v28 = (char *)v26 + v21;
  if (v23)
  {
    if (v22 >= 0) {
      uint64_t v29 = &qword_256BF98;
    }
    else {
      uint64_t v29 = (uint64_t *)qword_256BF98;
    }
    memmove(v28, v29, v23);
  }
  v28[v23] = 0;
  size_t v30 = sub_8D7730(v25, (uint64_t)&__dst);
  if (*((char *)v30 + 23) < 0)
  {
    sub_4200(v74, (void *)*v30, v30[1]);
  }
  else
  {
    long long v31 = *(_OWORD *)v30;
    uint64_t v75 = v30[2];
    *(_OWORD *)long long v74 = v31;
  }
  if (SBYTE7(v65) < 0) {
    operator delete((void *)__dst);
  }
  int v34 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v35 = byte_256B6D7;
  }
  else {
    size_t v35 = qword_256B6C8;
  }
  int v36 = byte_256BFAF;
  if (byte_256BFAF >= 0) {
    size_t v37 = byte_256BFAF;
  }
  else {
    size_t v37 = qword_256BFA0;
  }
  unint64_t v38 = v37 + v35;
  if (v37 + v35 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v38 <= 0x16)
  {
    size_t v68 = 0;
    unint64_t v69 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v69) = v37 + v35;
    if (!v35) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v38 | 7) != 0x17) {
    uint64_t v48 = v38 | 7;
  }
  uint64_t v49 = v48 + 1;
  p_p = (char *)operator new(v48 + 1);
  size_t v68 = v37 + v35;
  unint64_t v69 = v49 | 0x8000000000000000;
  std::string __p = p_p;
  if (v35)
  {
LABEL_64:
    if (v34 >= 0) {
      uint64_t v40 = &qword_256B6C0;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v40, v35);
  }
LABEL_68:
  uint64_t v41 = &p_p[v35];
  if (v37)
  {
    if (v36 >= 0) {
      size_t v42 = &qword_256BF98;
    }
    else {
      size_t v42 = (uint64_t *)qword_256BF98;
    }
    memmove(v41, v42, v37);
  }
  v41[v37] = 0;
  long long __dst = 0u;
  long long v65 = 0u;
  int v66 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v70);
  *(_OWORD *)uint64_t v72 = v70;
  uint64_t v73 = v71;
  uint64_t v71 = 0;
  long long v70 = 0uLL;
  int v43 = (void *)v65;
  if ((void)v65)
  {
    do
    {
      size_t v44 = (void *)*v43;
      sub_4F4B48((uint64_t)(v43 + 2));
      operator delete(v43);
      int v43 = v44;
    }
    while (v44);
  }
  unint64_t v45 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v45) {
    operator delete(v45);
  }
  if (SHIBYTE(v69) < 0)
  {
    operator delete(__p);
    unint64_t v46 = *(void *)(a3 + 8);
    if (v46 < *(void *)(a3 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    uint64_t v50 = sub_6E6EC((char **)a3, (uint64_t)&v76);
    goto LABEL_89;
  }
  unint64_t v46 = *(void *)(a3 + 8);
  if (v46 >= *(void *)(a3 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v77) < 0)
  {
    sub_4200((unsigned char *)v46, (void *)v76, *((unint64_t *)&v76 + 1));
  }
  else
  {
    long long v47 = v76;
    *(void *)(v46 + 16) = v77;
    *(_OWORD *)unint64_t v46 = v47;
  }
  uint64_t v50 = (char *)(v46 + 24);
  *(void *)(a3 + 8) = v46 + 24;
LABEL_89:
  *(void *)(a3 + 8) = v50;
  uint64_t v51 = (_DWORD *)sub_6467E8(v63, 0);
  sub_64EDB4(v51, (uint64_t)&__dst);
  float v52 = (float)sub_3FB38C((uint64_t)&__dst);
  LOBYTE(v70) = 12;
  sub_5F3030((float *)&__dst, v52);
  unint64_t v53 = *(void *)(a3 + 32);
  if (v53 >= *(void *)(a3 + 40))
  {
    float v54 = sub_55C070((char **)(a3 + 24), &xmmword_256A610, (char *)&v70, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a3 + 32), &xmmword_256A610, v70, &__dst);
    float v54 = (char *)(v53 + 144);
    *(void *)(a3 + 32) = v53 + 144;
  }
  *(void *)(a3 + 32) = v54;
  unint64_t v55 = *(void *)(a3 + 168);
  if (v55 >= *(void *)(a3 + 176))
  {
    *(void *)(a3 + 168) = sub_6E6EC((char **)(a3 + 160), (uint64_t)v74);
    unint64_t v57 = *(void *)(a3 + 328);
    if (v57 >= *(void *)(a3 + 336))
    {
LABEL_100:
      uint64_t v59 = sub_6E6EC(v62, (uint64_t)v72);
      goto LABEL_103;
    }
  }
  else
  {
    if (SHIBYTE(v75) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 168), v74[0], (unint64_t)v74[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v74;
      *(void *)(v55 + 16) = v75;
      *(_OWORD *)unint64_t v55 = v56;
    }
    *(void *)(a3 + 168) = v55 + 24;
    *(void *)(a3 + 168) = v55 + 24;
    unint64_t v57 = *(void *)(a3 + 328);
    if (v57 >= *(void *)(a3 + 336)) {
      goto LABEL_100;
    }
  }
  if (SHIBYTE(v73) < 0)
  {
    sub_4200((unsigned char *)v57, v72[0], (unint64_t)v72[1]);
  }
  else
  {
    long long v58 = *(_OWORD *)v72;
    *(void *)(v57 + 16) = v73;
    *(_OWORD *)unint64_t v57 = v58;
  }
  uint64_t v59 = (char *)(v57 + 24);
  *(void *)(a3 + 328) = v57 + 24;
LABEL_103:
  *(void *)(a3 + 328) = v59;
  LOBYTE(v70) = 12;
  sub_5F3030((float *)&__dst, v52);
  unint64_t v60 = *(void *)(a3 + 352);
  if (v60 >= *(void *)(a3 + 360))
  {
    float v61 = sub_55C070((char **)(a3 + 344), &xmmword_256A610, (char *)&v70, &__dst);
  }
  else
  {
    sub_5F2564(*(char **)(a3 + 352), &xmmword_256A610, 12, &__dst);
    float v61 = (char *)(v60 + 144);
    *(void *)(a3 + 352) = v60 + 144;
  }
  *(void *)(a3 + 352) = v61;
  if (SHIBYTE(v73) < 0)
  {
    operator delete(v72[0]);
    if ((SHIBYTE(v75) & 0x80000000) == 0)
    {
LABEL_108:
      if ((SHIBYTE(v77) & 0x80000000) == 0) {
        return;
      }
LABEL_112:
      operator delete((void *)v76);
      return;
    }
  }
  else if ((SHIBYTE(v75) & 0x80000000) == 0)
  {
    goto LABEL_108;
  }
  operator delete(v74[0]);
  if (SHIBYTE(v77) < 0) {
    goto LABEL_112;
  }
}

void sub_54F060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  *(void *)(v43 + 328) = v44;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  sub_5419D4(v43);
  _Unwind_Resume(a1);
}

void sub_54F198(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  sub_5F3B34(a5);
  sub_5F3B34(a5 + 160);
  sub_5F3B34(a5 + 320);
  sub_5F3B34(a5 + 480);
  if (byte_256BF97 < 0)
  {
    sub_4200(&v113, (void *)xmmword_256BF80, *((unint64_t *)&xmmword_256BF80 + 1));
  }
  else
  {
    long long v113 = xmmword_256BF80;
    int64_t v114 = unk_256BF90;
  }
  if (SHIBYTE(v114) < 0)
  {
    sub_4200(&v111, (void *)v113, *((unint64_t *)&v113 + 1));
  }
  else
  {
    long long v111 = v113;
    int64_t v112 = v114;
  }
  if (a4) {
    goto LABEL_69;
  }
  uint64_t v10 = 72;
  if (a3) {
    uint64_t v10 = 75;
  }
  uint64_t v11 = &qword_256BEC0;
  if (!a3) {
    uint64_t v11 = &qword_256BEA8;
  }
  unint64_t v12 = &byte_256BEBF;
  if (a3) {
    unint64_t v12 = &byte_256BED7;
  }
  if (*v12 < 0)
  {
    uint64_t v13 = (void *)qword_256BC68[v10];
    uint64_t v14 = 72;
    if (a3) {
      uint64_t v14 = 75;
    }
    sub_4200(__p, v13, qword_256BC68[v14 + 1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v11;
    *(void *)&long long v98 = v11[2];
  }
  int v15 = SBYTE7(v98);
  if ((SBYTE7(v98) & 0x80u) == 0) {
    size_t v16 = BYTE7(v98);
  }
  else {
    size_t v16 = (size_t)__p[1];
  }
  int v17 = byte_256BDFF;
  if (byte_256BDFF >= 0) {
    size_t v18 = byte_256BDFF;
  }
  else {
    size_t v18 = qword_256BDF0;
  }
  unint64_t v19 = v18 + v16;
  if (v18 + v16 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v19 <= 0x16)
  {
    unint64_t v104 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v104) = v18 + v16;
    if (!v16) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  uint64_t v86 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v86 = v19 | 7;
  }
  uint64_t v87 = v86 + 1;
  p_dst = (long long *)operator new(v86 + 1);
  *((void *)&__dst + 1) = v18 + v16;
  unint64_t v104 = v87 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v16)
  {
LABEL_28:
    if (v15 >= 0) {
      size_t v21 = __p;
    }
    else {
      size_t v21 = (void **)__p[0];
    }
    memmove(p_dst, v21, v16);
  }
LABEL_32:
  int v22 = (char *)p_dst + v16;
  if (v18)
  {
    if (v17 >= 0) {
      size_t v23 = &qword_256BDE8;
    }
    else {
      size_t v23 = (uint64_t *)qword_256BDE8;
    }
    memmove(v22, v23, v18);
  }
  uint64_t v96 = a1;
  v22[v18] = 0;
  if (SHIBYTE(v114) < 0) {
    operator delete((void *)v113);
  }
  int64_t v114 = v104;
  long long v113 = __dst;
  int v24 = SHIBYTE(v104);
  if ((v104 & 0x8000000000000000) == 0) {
    size_t v25 = HIBYTE(v104);
  }
  else {
    size_t v25 = *((void *)&v113 + 1);
  }
  if (a2) {
    uint64_t v26 = 432;
  }
  else {
    uint64_t v26 = 408;
  }
  if (a2) {
    uint64_t v27 = (uint64_t *)&xmmword_256BE18;
  }
  else {
    uint64_t v27 = &qword_256BE00;
  }
  int v28 = &byte_256BE2F;
  if (!a2) {
    int v28 = &byte_256BE17;
  }
  size_t v29 = *v28;
  int v30 = (char)v29;
  long long v31 = (size_t *)&unk_256BE08;
  if (a2) {
    long long v31 = (size_t *)&xmmword_256BE18 + 1;
  }
  size_t v32 = *v31;
  if ((v29 & 0x80u) == 0) {
    size_t v33 = v29;
  }
  else {
    size_t v33 = v32;
  }
  unint64_t v34 = v33 + v25;
  if (v33 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 <= 0x16)
  {
    unint64_t v104 = 0;
    long long __dst = 0uLL;
    size_t v35 = &__dst;
    HIBYTE(v104) = v33 + v25;
    a1 = v96;
    if (!v25) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v88 = v26;
  uint64_t v89 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v89 = v34 | 7;
  }
  uint64_t v90 = v89 + 1;
  size_t v35 = (long long *)operator new(v89 + 1);
  *((void *)&__dst + 1) = v33 + v25;
  unint64_t v104 = v90 | 0x8000000000000000;
  *(void *)&long long __dst = v35;
  uint64_t v26 = v88;
  a1 = v96;
  if (v25)
  {
LABEL_58:
    if (v24 >= 0) {
      int v36 = &v113;
    }
    else {
      int v36 = (long long *)v113;
    }
    memmove(v35, v36, v25);
  }
LABEL_62:
  size_t v37 = (char *)v35 + v25;
  if (v33)
  {
    if (v30 >= 0) {
      unint64_t v38 = v27;
    }
    else {
      unint64_t v38 = *(uint64_t **)((char *)qword_256BC68 + v26);
    }
    memmove(v37, v38, v33);
  }
  v37[v33] = 0;
  if (SHIBYTE(v112) < 0)
  {
    operator delete((void *)v111);
    long long v111 = __dst;
    int64_t v112 = v104;
    if ((SBYTE7(v98) & 0x80000000) == 0) {
      goto LABEL_69;
    }
  }
  else
  {
    long long v111 = __dst;
    int64_t v112 = v104;
    if ((SBYTE7(v98) & 0x80000000) == 0) {
      goto LABEL_69;
    }
  }
  operator delete(__p[0]);
LABEL_69:
  int v39 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v40 = byte_256B68F;
  }
  else {
    size_t v40 = qword_256B680;
  }
  int v41 = SHIBYTE(v114);
  if (v114 >= 0) {
    size_t v42 = HIBYTE(v114);
  }
  else {
    size_t v42 = *((void *)&v113 + 1);
  }
  unint64_t v43 = v42 + v40;
  if (v42 + v40 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v44 = *(void *)(a1 + 8);
  if (v43 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v98 = 0;
    __p[0] = 0;
    uint64_t v45 = (char *)__p;
    BYTE7(v98) = v42 + v40;
    if (!v40) {
      goto LABEL_82;
    }
    goto LABEL_78;
  }
  uint64_t v51 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v51 = v43 | 7;
  }
  uint64_t v52 = v51 + 1;
  uint64_t v45 = (char *)operator new(v51 + 1);
  __p[1] = (void *)(v42 + v40);
  *(void *)&long long v98 = v52 | 0x8000000000000000;
  __p[0] = v45;
  if (v40)
  {
LABEL_78:
    if (v39 >= 0) {
      unint64_t v46 = &qword_256B678;
    }
    else {
      unint64_t v46 = (uint64_t *)qword_256B678;
    }
    memmove(v45, v46, v40);
  }
LABEL_82:
  long long v47 = &v45[v40];
  if (v42)
  {
    if (v41 >= 0) {
      uint64_t v48 = &v113;
    }
    else {
      uint64_t v48 = (long long *)v113;
    }
    memmove(v47, v48, v42);
  }
  v47[v42] = 0;
  uint64_t v49 = sub_8D7730(v44, (uint64_t)__p);
  if (*((char *)v49 + 23) < 0)
  {
    sub_4200(&v109, (void *)*v49, v49[1]);
  }
  else
  {
    long long v50 = *(_OWORD *)v49;
    uint64_t v110 = v49[2];
    long long v109 = v50;
  }
  if (SBYTE7(v98) < 0) {
    operator delete(__p[0]);
  }
  int v53 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v54 = byte_256B6A7;
  }
  else {
    size_t v54 = qword_256B698;
  }
  int v55 = SHIBYTE(v114);
  if (v114 >= 0) {
    size_t v56 = HIBYTE(v114);
  }
  else {
    size_t v56 = *((void *)&v113 + 1);
  }
  unint64_t v57 = v56 + v54;
  if (v56 + v54 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v58 = *(void *)(a1 + 8);
  if (v57 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v98 = 0;
    __p[0] = 0;
    uint64_t v59 = (char *)__p;
    BYTE7(v98) = v56 + v54;
    if (!v54) {
      goto LABEL_109;
    }
    goto LABEL_105;
  }
  uint64_t v65 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v57 | 7) != 0x17) {
    uint64_t v65 = v57 | 7;
  }
  uint64_t v66 = v65 + 1;
  uint64_t v59 = (char *)operator new(v65 + 1);
  __p[1] = (void *)(v56 + v54);
  *(void *)&long long v98 = v66 | 0x8000000000000000;
  __p[0] = v59;
  if (v54)
  {
LABEL_105:
    if (v53 >= 0) {
      unint64_t v60 = &qword_256B690;
    }
    else {
      unint64_t v60 = (uint64_t *)qword_256B690;
    }
    memmove(v59, v60, v54);
  }
LABEL_109:
  float v61 = &v59[v54];
  if (v56)
  {
    if (v55 >= 0) {
      unint64_t v62 = &v113;
    }
    else {
      unint64_t v62 = (long long *)v113;
    }
    memmove(v61, v62, v56);
  }
  v61[v56] = 0;
  long long v63 = sub_8D7730(v58, (uint64_t)__p);
  if (*((char *)v63 + 23) < 0)
  {
    sub_4200(v107, (void *)*v63, v63[1]);
  }
  else
  {
    long long v64 = *(_OWORD *)v63;
    uint64_t v108 = v63[2];
    *(_OWORD *)int64_t v107 = v64;
  }
  uint64_t v67 = a1;
  if (SBYTE7(v98) < 0) {
    operator delete(__p[0]);
  }
  int v68 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v69 = byte_256B6D7;
  }
  else {
    size_t v69 = qword_256B6C8;
  }
  int v70 = SHIBYTE(v112);
  if (v112 >= 0) {
    size_t v71 = HIBYTE(v112);
  }
  else {
    size_t v71 = *((void *)&v111 + 1);
  }
  unint64_t v72 = v71 + v69;
  if (v71 + v69 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v72 <= 0x16)
  {
    size_t v101 = 0;
    unint64_t v102 = 0;
    uint64_t v100 = 0;
    uint64_t v73 = (char *)&v100;
    HIBYTE(v102) = v71 + v69;
    if (!v69) {
      goto LABEL_136;
    }
    goto LABEL_132;
  }
  uint64_t v82 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v72 | 7) != 0x17) {
    uint64_t v82 = v72 | 7;
  }
  uint64_t v83 = v82 + 1;
  uint64_t v73 = (char *)operator new(v82 + 1);
  size_t v101 = v71 + v69;
  unint64_t v102 = v83 | 0x8000000000000000;
  uint64_t v100 = v73;
  if (v69)
  {
LABEL_132:
    if (v68 >= 0) {
      long long v74 = &qword_256B6C0;
    }
    else {
      long long v74 = (uint64_t *)qword_256B6C0;
    }
    memmove(v73, v74, v69);
  }
LABEL_136:
  uint64_t v75 = &v73[v69];
  if (v71)
  {
    if (v70 >= 0) {
      long long v76 = &v111;
    }
    else {
      long long v76 = (long long *)v111;
    }
    memmove(v75, v76, v71);
  }
  v75[v71] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v98 = 0u;
  int v99 = 1065353216;
  sub_6102F0(v67 + 24, (char **)&v100, (uint64_t)__p, *(unsigned __int8 *)(v67 + 2525), (uint64_t)&__dst);
  *(_OWORD *)unint64_t v105 = __dst;
  unint64_t v106 = v104;
  unint64_t v104 = 0;
  long long __dst = 0uLL;
  uint64_t v77 = (void *)v98;
  if ((void)v98)
  {
    do
    {
      size_t v78 = (void *)*v77;
      sub_4F4B48((uint64_t)(v77 + 2));
      operator delete(v77);
      uint64_t v77 = v78;
    }
    while (v78);
  }
  unint64_t v79 = __p[0];
  __p[0] = 0;
  if (v79) {
    operator delete(v79);
  }
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
    unint64_t v80 = *(void *)(a5 + 8);
    if (v80 < *(void *)(a5 + 16)) {
      goto LABEL_147;
    }
LABEL_154:
    *(void *)(a5 + 8) = sub_6E6EC((char **)a5, (uint64_t)&v109);
    unint64_t v84 = *(void *)(a5 + 168);
    if (v84 >= *(void *)(a5 + 176)) {
      goto LABEL_169;
    }
    goto LABEL_155;
  }
  operator delete(v100);
  unint64_t v80 = *(void *)(a5 + 8);
  if (v80 >= *(void *)(a5 + 16)) {
    goto LABEL_154;
  }
LABEL_147:
  if (SHIBYTE(v110) < 0)
  {
    sub_4200((unsigned char *)v80, (void *)v109, *((unint64_t *)&v109 + 1));
  }
  else
  {
    long long v81 = v109;
    *(void *)(v80 + 16) = v110;
    *(_OWORD *)unint64_t v80 = v81;
  }
  *(void *)(a5 + 8) = v80 + 24;
  *(void *)(a5 + 8) = v80 + 24;
  unint64_t v84 = *(void *)(a5 + 168);
  if (v84 >= *(void *)(a5 + 176))
  {
LABEL_169:
    *(void *)(a5 + 168) = sub_6E6EC((char **)(a5 + 160), (uint64_t)v107);
    unint64_t v91 = *(void *)(a5 + 328);
    if (v91 < *(void *)(a5 + 336)) {
      goto LABEL_170;
    }
LABEL_174:
    int v94 = sub_6E6EC((char **)(a5 + 320), (uint64_t)v105);
    char v95 = HIBYTE(v106);
    *(void *)(a5 + 328) = v94;
    if ((v95 & 0x80) == 0) {
      goto LABEL_178;
    }
    goto LABEL_183;
  }
LABEL_155:
  if (SHIBYTE(v108) < 0)
  {
    sub_4200((unsigned char *)v84, v107[0], (unint64_t)v107[1]);
  }
  else
  {
    long long v85 = *(_OWORD *)v107;
    *(void *)(v84 + 16) = v108;
    *(_OWORD *)unint64_t v84 = v85;
  }
  *(void *)(a5 + 168) = v84 + 24;
  *(void *)(a5 + 168) = v84 + 24;
  unint64_t v91 = *(void *)(a5 + 328);
  if (v91 >= *(void *)(a5 + 336)) {
    goto LABEL_174;
  }
LABEL_170:
  char v92 = HIBYTE(v106);
  if (SHIBYTE(v106) < 0)
  {
    sub_4200((unsigned char *)v91, v105[0], (unint64_t)v105[1]);
  }
  else
  {
    long long v93 = *(_OWORD *)v105;
    *(void *)(v91 + 16) = v106;
    *(_OWORD *)unint64_t v91 = v93;
  }
  *(void *)(a5 + 328) = v91 + 24;
  *(void *)(a5 + 328) = v91 + 24;
  if ((v92 & 0x80) == 0)
  {
LABEL_178:
    if ((SHIBYTE(v108) & 0x80000000) == 0) {
      goto LABEL_179;
    }
    goto LABEL_184;
  }
LABEL_183:
  operator delete(v105[0]);
  if ((SHIBYTE(v108) & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v110) & 0x80000000) == 0) {
      goto LABEL_180;
    }
    goto LABEL_185;
  }
LABEL_184:
  operator delete(v107[0]);
  if ((SHIBYTE(v110) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v112) & 0x80000000) == 0) {
      goto LABEL_181;
    }
    goto LABEL_186;
  }
LABEL_185:
  operator delete((void *)v109);
  if ((SHIBYTE(v112) & 0x80000000) == 0)
  {
LABEL_181:
    if ((SHIBYTE(v114) & 0x80000000) == 0) {
      return;
    }
LABEL_187:
    operator delete((void *)v113);
    return;
  }
LABEL_186:
  operator delete((void *)v111);
  if (SHIBYTE(v114) < 0) {
    goto LABEL_187;
  }
}

void sub_54FAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  *(void *)(v43 + 328) = v44;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v45 - 153) < 0) {
    operator delete(*(void **)(v45 - 176));
  }
  if (*(char *)(v45 - 121) < 0)
  {
    operator delete(*(void **)(v45 - 144));
    if ((*(char *)(v45 - 89) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v45 - 89) & 0x80000000) == 0)
  {
LABEL_9:
    sub_5419D4(v43);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v45 - 112));
  sub_5419D4(v43);
  _Unwind_Resume(a1);
}

void sub_54FC70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  sub_5F3B34(a3 + 160);
  uint64_t v65 = (char **)sub_5F3B34(a3 + 320);
  sub_5F3B34(a3 + 480);
  int v6 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v7 = byte_256B68F;
  }
  else {
    size_t v7 = qword_256B680;
  }
  int v8 = byte_256BF7F;
  if (byte_256BF7F >= 0) {
    size_t v9 = byte_256BF7F;
  }
  else {
    size_t v9 = *((void *)&xmmword_256BF68 + 1);
  }
  unint64_t v10 = v9 + v7;
  if (v9 + v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v66 = a2;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v10 <= 0x16)
  {
    v68[0] = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v68[0]) = v9 + v7;
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v18 = a1;
  uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17) {
    uint64_t v19 = v10 | 7;
  }
  uint64_t v20 = v19 + 1;
  p_dst = (long long *)operator new(v19 + 1);
  *((void *)&__dst + 1) = v9 + v7;
  v68[0] = (void *)(v20 | 0x8000000000000000);
  *(void *)&long long __dst = p_dst;
  a1 = v18;
  if (v7)
  {
LABEL_10:
    if (v6 >= 0) {
      uint64_t v13 = &qword_256B678;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v13, v7);
  }
LABEL_14:
  uint64_t v14 = (char *)p_dst + v7;
  if (v9)
  {
    if (v8 >= 0) {
      int v15 = &xmmword_256BF68;
    }
    else {
      int v15 = (long long *)xmmword_256BF68;
    }
    memmove(v14, v15, v9);
  }
  v14[v9] = 0;
  size_t v16 = sub_8D7730(v11, (uint64_t)&__dst);
  if (*((char *)v16 + 23) < 0)
  {
    sub_4200(&v80, (void *)*v16, v16[1]);
  }
  else
  {
    long long v17 = *(_OWORD *)v16;
    uint64_t v81 = v16[2];
    long long v80 = v17;
  }
  if (SHIBYTE(v68[0]) < 0) {
    operator delete((void *)__dst);
  }
  int v21 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v22 = byte_256B6A7;
  }
  else {
    size_t v22 = qword_256B698;
  }
  int v23 = byte_256BF7F;
  if (byte_256BF7F >= 0) {
    size_t v24 = byte_256BF7F;
  }
  else {
    size_t v24 = *((void *)&xmmword_256BF68 + 1);
  }
  unint64_t v25 = v24 + v22;
  if (v24 + v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v26 = *(void *)(a1 + 8);
  if (v25 <= 0x16)
  {
    v68[0] = 0;
    long long __dst = 0uLL;
    uint64_t v27 = &__dst;
    HIBYTE(v68[0]) = v24 + v22;
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v33 = a1;
  uint64_t v34 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v34 = v25 | 7;
  }
  uint64_t v35 = v34 + 1;
  uint64_t v27 = (long long *)operator new(v34 + 1);
  *((void *)&__dst + 1) = v24 + v22;
  v68[0] = (void *)(v35 | 0x8000000000000000);
  *(void *)&long long __dst = v27;
  a1 = v33;
  if (v22)
  {
LABEL_37:
    if (v21 >= 0) {
      int v28 = &qword_256B690;
    }
    else {
      int v28 = (uint64_t *)qword_256B690;
    }
    memmove(v27, v28, v22);
  }
LABEL_41:
  size_t v29 = (char *)v27 + v22;
  if (v24)
  {
    if (v23 >= 0) {
      int v30 = &xmmword_256BF68;
    }
    else {
      int v30 = (long long *)xmmword_256BF68;
    }
    memmove(v29, v30, v24);
  }
  v29[v24] = 0;
  long long v31 = sub_8D7730(v26, (uint64_t)&__dst);
  if (*((char *)v31 + 23) < 0)
  {
    sub_4200(&v78, (void *)*v31, v31[1]);
  }
  else
  {
    long long v32 = *(_OWORD *)v31;
    uint64_t v79 = v31[2];
    long long v78 = v32;
  }
  if (SHIBYTE(v68[0]) < 0) {
    operator delete((void *)__dst);
  }
  sub_648520(v66, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (byte_256B9A7 < 0)
    {
      sub_4200(v75, (void *)xmmword_256B990, *((unint64_t *)&xmmword_256B990 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v75 = xmmword_256B990;
      uint64_t v76 = unk_256B9A0;
    }
  }
  else
  {
    HIBYTE(v76) = 0;
    LOBYTE(v75[0]) = 0;
  }
  int v37 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v38 = byte_256B6D7;
  }
  else {
    size_t v38 = qword_256B6C8;
  }
  int v39 = byte_256BF7F;
  if (byte_256BF7F >= 0) {
    size_t v40 = byte_256BF7F;
  }
  else {
    size_t v40 = *((void *)&xmmword_256BF68 + 1);
  }
  unint64_t v41 = v40 + v38;
  if (v40 + v38 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v41 <= 0x16)
  {
    memset(&v70, 0, sizeof(v70));
    size_t v42 = (char *)&v70;
    *((unsigned char *)&v70.__r_.__value_.__s + 23) = v40 + v38;
    if (!v38) {
      goto LABEL_75;
    }
    goto LABEL_71;
  }
  uint64_t v56 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v41 | 7) != 0x17) {
    uint64_t v56 = v41 | 7;
  }
  uint64_t v57 = v56 + 1;
  size_t v42 = (char *)operator new(v56 + 1);
  v70.__r_.__value_.__l.__size_ = v40 + v38;
  v70.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  if (v38)
  {
LABEL_71:
    if (v37 >= 0) {
      uint64_t v43 = &qword_256B6C0;
    }
    else {
      uint64_t v43 = (uint64_t *)qword_256B6C0;
    }
    memmove(v42, v43, v38);
  }
LABEL_75:
  uint64_t v44 = &v42[v38];
  if (v40)
  {
    if (v39 >= 0) {
      uint64_t v45 = &xmmword_256BF68;
    }
    else {
      uint64_t v45 = (long long *)xmmword_256BF68;
    }
    memmove(v44, v45, v40);
  }
  v44[v40] = 0;
  if (v76 >= 0) {
    unint64_t v46 = v75;
  }
  else {
    unint64_t v46 = (void **)v75[0];
  }
  if (v76 >= 0) {
    std::string::size_type v47 = HIBYTE(v76);
  }
  else {
    std::string::size_type v47 = (std::string::size_type)v75[1];
  }
  uint64_t v48 = std::string::append(&v70, (const std::string::value_type *)v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  std::string::size_type v72 = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  long long __dst = 0u;
  *(_OWORD *)int v68 = 0u;
  int v69 = 1065353216;
  sub_6102F0(a1 + 24, (char **)__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v73);
  std::string v74 = v73;
  memset(&v73, 0, sizeof(v73));
  long long v50 = v68[0];
  if (v68[0])
  {
    do
    {
      uint64_t v51 = (void *)*v50;
      sub_4F4B48((uint64_t)(v50 + 2));
      operator delete(v50);
      long long v50 = v51;
    }
    while (v51);
  }
  uint64_t v52 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v52) {
    operator delete(v52);
  }
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_92;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_92:
  long long __dst = 0u;
  *(_OWORD *)int v68 = 0u;
  int v69 = 1065353216;
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&xmmword_256C2E0;
  int v53 = sub_31B300((uint64_t)&__dst, (uint64_t)&xmmword_256C2E0, (uint64_t)&unk_20F06E0, (long long **)&v73);
  std::string::operator=((std::string *)(v53 + 5), &__str);
  sub_6582D0(&v74, (uint64_t)&__dst);
  unint64_t v54 = *(void *)(a3 + 8);
  if (v54 >= *(void *)(a3 + 16))
  {
    *(void *)(a3 + 8) = sub_6E6EC((char **)a3, (uint64_t)&v80);
    unint64_t v58 = *(void *)(a3 + 168);
    if (v58 >= *(void *)(a3 + 176)) {
      goto LABEL_106;
    }
  }
  else
  {
    if (SHIBYTE(v81) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 8), (void *)v80, *((unint64_t *)&v80 + 1));
    }
    else
    {
      long long v55 = v80;
      *(void *)(v54 + 16) = v81;
      *(_OWORD *)unint64_t v54 = v55;
    }
    *(void *)(a3 + 8) = v54 + 24;
    *(void *)(a3 + 8) = v54 + 24;
    unint64_t v58 = *(void *)(a3 + 168);
    if (v58 >= *(void *)(a3 + 176))
    {
LABEL_106:
      *(void *)(a3 + 168) = sub_55C330((char **)(a3 + 160), (uint64_t)&v78);
      unint64_t v60 = *(void *)(a3 + 328);
      if (v60 < *(void *)(a3 + 336)) {
        goto LABEL_107;
      }
      goto LABEL_111;
    }
  }
  if (SHIBYTE(v79) < 0)
  {
    sub_4200((unsigned char *)v58, (void *)v78, *((unint64_t *)&v78 + 1));
  }
  else
  {
    long long v59 = v78;
    *(void *)(v58 + 16) = v79;
    *(_OWORD *)unint64_t v58 = v59;
  }
  *(void *)(a3 + 168) = v58 + 24;
  *(void *)(a3 + 168) = v58 + 24;
  unint64_t v60 = *(void *)(a3 + 328);
  if (v60 < *(void *)(a3 + 336))
  {
LABEL_107:
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200((unsigned char *)v60, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v61 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
      *(void *)(v60 + 16) = *((void *)&v74.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v60 = v61;
    }
    *(void *)(a3 + 328) = v60 + 24;
    *(void *)(a3 + 328) = v60 + 24;
    unint64_t v62 = (void **)v68[0];
    if (!v68[0]) {
      goto LABEL_115;
    }
    while (1)
    {
LABEL_124:
      long long v64 = (void **)*v62;
      if (*((char *)v62 + 63) < 0)
      {
        operator delete(v62[5]);
        if (*((char *)v62 + 39) < 0) {
LABEL_128:
        }
          operator delete(v62[2]);
      }
      else if (*((char *)v62 + 39) < 0)
      {
        goto LABEL_128;
      }
      operator delete(v62);
      unint64_t v62 = v64;
      if (!v64) {
        goto LABEL_115;
      }
    }
  }
LABEL_111:
  *(void *)(a3 + 328) = sub_55C330(v65, (uint64_t)&v74);
  unint64_t v62 = (void **)v68[0];
  if (v68[0]) {
    goto LABEL_124;
  }
LABEL_115:
  long long v63 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v63) {
    operator delete(v63);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v75[0]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v79) & 0x80000000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_132;
  }
LABEL_131:
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
LABEL_121:
    if ((SHIBYTE(v81) & 0x80000000) == 0) {
      return;
    }
LABEL_133:
    operator delete((void *)v80);
    return;
  }
LABEL_132:
  operator delete((void *)v78);
  if (SHIBYTE(v81) < 0) {
    goto LABEL_133;
  }
}

void sub_550404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  *(void *)(v50 + 328) = v51;
  sub_50828((uint64_t)&a13);
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((*(char *)(v52 - 145) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v52 - 121) & 0x80000000) == 0)
      {
LABEL_10:
        if (*(char *)(v52 - 89) < 0) {
          operator delete(*(void **)(v52 - 112));
        }
        sub_5419D4(v50);
        _Unwind_Resume(a1);
      }
LABEL_9:
      operator delete(*(void **)(v52 - 144));
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v52 - 145) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v52 - 168));
  if ((*(char *)(v52 - 121) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_5505B8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  sub_5F3B34(a3 + 160);
  sub_5F3B34(a3 + 320);
  uint64_t v6 = sub_5F3B34(a3 + 480);
  size_t v7 = &qword_256A3E8;
  if (a2) {
    int v8 = &qword_2569680;
  }
  else {
    int v8 = &qword_256A3E8;
  }
  size_t v9 = &byte_2569697;
  if (!a2) {
    size_t v9 = &byte_256A3FF;
  }
  uint64_t v90 = (char **)v6;
  if (*v9 < 0)
  {
    if (a2) {
      size_t v7 = &qword_2569680;
    }
    sub_4200(&v105, (void *)*v8, v7[1]);
  }
  else
  {
    long long v105 = *(_OWORD *)v8;
    uint64_t v106 = v8[2];
  }
  int v10 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v11 = byte_256B68F;
  }
  else {
    size_t v11 = qword_256B680;
  }
  int v12 = byte_256BFC7;
  if (byte_256BFC7 >= 0) {
    size_t v13 = byte_256BFC7;
  }
  else {
    size_t v13 = qword_256BFB8;
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if (v14 <= 0x16)
  {
    *(void *)&long long v92 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v92) = v13 + v11;
    if (!v11) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  uint64_t v22 = a1;
  uint64_t v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v23 = v14 | 7;
  }
  uint64_t v24 = v23 + 1;
  p_dst = (long long *)operator new(v23 + 1);
  *((void *)&__dst + 1) = v13 + v11;
  *(void *)&long long v92 = v24 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  a1 = v22;
  if (v11)
  {
LABEL_20:
    if (v10 >= 0) {
      long long v17 = &qword_256B678;
    }
    else {
      long long v17 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v17, v11);
  }
LABEL_24:
  uint64_t v18 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      uint64_t v19 = &qword_256BFB0;
    }
    else {
      uint64_t v19 = (uint64_t *)qword_256BFB0;
    }
    memmove(v18, v19, v13);
  }
  v18[v13] = 0;
  uint64_t v20 = sub_8D7730(v15, (uint64_t)&__dst);
  if (*((char *)v20 + 23) < 0)
  {
    sub_4200(&v103, (void *)*v20, v20[1]);
  }
  else
  {
    long long v21 = *(_OWORD *)v20;
    uint64_t v104 = v20[2];
    long long v103 = v21;
  }
  if (SBYTE7(v92) < 0) {
    operator delete((void *)__dst);
  }
  int v25 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v26 = byte_256B6A7;
  }
  else {
    size_t v26 = qword_256B698;
  }
  int v27 = byte_256BFC7;
  if (byte_256BFC7 >= 0) {
    size_t v28 = byte_256BFC7;
  }
  else {
    size_t v28 = qword_256BFB8;
  }
  unint64_t v29 = v28 + v26;
  if (v28 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v30 = *(void *)(a1 + 8);
  if (v29 <= 0x16)
  {
    memset(&v97, 0, sizeof(v97));
    long long v31 = (char *)&v97;
    *((unsigned char *)&v97.__r_.__value_.__s + 23) = v28 + v26;
    if (!v26) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v41 = a1;
  uint64_t v42 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v42 = v29 | 7;
  }
  uint64_t v43 = v42 + 1;
  long long v31 = (char *)operator new(v42 + 1);
  v97.__r_.__value_.__l.__size_ = v28 + v26;
  v97.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  a1 = v41;
  if (v26)
  {
LABEL_47:
    if (v25 >= 0) {
      long long v32 = &qword_256B690;
    }
    else {
      long long v32 = (uint64_t *)qword_256B690;
    }
    memmove(v31, v32, v26);
  }
LABEL_51:
  uint64_t v33 = &v31[v26];
  if (v28)
  {
    if (v27 >= 0) {
      uint64_t v34 = &qword_256BFB0;
    }
    else {
      uint64_t v34 = (uint64_t *)qword_256BFB0;
    }
    memmove(v33, v34, v28);
  }
  v33[v28] = 0;
  if (v106 >= 0) {
    uint64_t v35 = (const std::string::value_type *)&v105;
  }
  else {
    uint64_t v35 = (const std::string::value_type *)v105;
  }
  if (v106 >= 0) {
    std::string::size_type v36 = HIBYTE(v106);
  }
  else {
    std::string::size_type v36 = *((void *)&v105 + 1);
  }
  int v37 = std::string::append(&v97, v35, v36);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(void *)&long long v92 = *((void *)&v37->__r_.__value_.__l + 2);
  long long __dst = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  int v39 = sub_8D7730(v30, (uint64_t)&__dst);
  if (*((char *)v39 + 23) < 0)
  {
    sub_4200(&v101, (void *)*v39, v39[1]);
  }
  else
  {
    long long v40 = *(_OWORD *)v39;
    uint64_t v102 = v39[2];
    long long v101 = v40;
  }
  if (SBYTE7(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v97.__r_.__value_.__l.__data_);
LABEL_71:
  int v44 = byte_256B6BF;
  if (byte_256B6BF >= 0) {
    size_t v45 = byte_256B6BF;
  }
  else {
    size_t v45 = qword_256B6B0;
  }
  int v46 = byte_256BFC7;
  if (byte_256BFC7 >= 0) {
    size_t v47 = byte_256BFC7;
  }
  else {
    size_t v47 = qword_256BFB8;
  }
  unint64_t v48 = v47 + v45;
  if (v47 + v45 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v49 = *(void *)(a1 + 8);
  if (v48 <= 0x16)
  {
    memset(&v97, 0, sizeof(v97));
    uint64_t v50 = (char *)&v97;
    *((unsigned char *)&v97.__r_.__value_.__s + 23) = v47 + v45;
    if (!v45) {
      goto LABEL_84;
    }
    goto LABEL_80;
  }
  uint64_t v89 = *(void *)(a1 + 8);
  uint64_t v60 = a1;
  uint64_t v61 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v48 | 7) != 0x17) {
    uint64_t v61 = v48 | 7;
  }
  uint64_t v62 = v61 + 1;
  uint64_t v50 = (char *)operator new(v61 + 1);
  v97.__r_.__value_.__l.__size_ = v47 + v45;
  v97.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  a1 = v60;
  uint64_t v49 = v89;
  if (v45)
  {
LABEL_80:
    if (v44 >= 0) {
      uint64_t v51 = &qword_256B6A8;
    }
    else {
      uint64_t v51 = (uint64_t *)qword_256B6A8;
    }
    memmove(v50, v51, v45);
  }
LABEL_84:
  uint64_t v52 = &v50[v45];
  if (v47)
  {
    if (v46 >= 0) {
      int v53 = &qword_256BFB0;
    }
    else {
      int v53 = (uint64_t *)qword_256BFB0;
    }
    memmove(v52, v53, v47);
  }
  v52[v47] = 0;
  if (v106 >= 0) {
    unint64_t v54 = (const std::string::value_type *)&v105;
  }
  else {
    unint64_t v54 = (const std::string::value_type *)v105;
  }
  if (v106 >= 0) {
    std::string::size_type v55 = HIBYTE(v106);
  }
  else {
    std::string::size_type v55 = *((void *)&v105 + 1);
  }
  uint64_t v56 = std::string::append(&v97, v54, v55);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  *(void *)&long long v92 = *((void *)&v56->__r_.__value_.__l + 2);
  long long __dst = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  unint64_t v58 = sub_8D7730(v49, (uint64_t)&__dst);
  if (*((char *)v58 + 23) < 0)
  {
    sub_4200(v99, (void *)*v58, v58[1]);
  }
  else
  {
    long long v59 = *(_OWORD *)v58;
    uint64_t v100 = v58[2];
    *(_OWORD *)int v99 = v59;
  }
  if (SBYTE7(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_106;
    }
  }
  else if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_106;
  }
  operator delete(v97.__r_.__value_.__l.__data_);
LABEL_106:
  int v63 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v64 = byte_256B6D7;
  }
  else {
    size_t v64 = qword_256B6C8;
  }
  int v65 = byte_256BFC7;
  if (byte_256BFC7 >= 0) {
    size_t v66 = byte_256BFC7;
  }
  else {
    size_t v66 = qword_256BFB8;
  }
  unint64_t v67 = v66 + v64;
  if (v66 + v64 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v67 <= 0x16)
  {
    memset(&v94, 0, sizeof(v94));
    int v68 = (char *)&v94;
    *((unsigned char *)&v94.__r_.__value_.__s + 23) = v66 + v64;
    if (!v64) {
      goto LABEL_119;
    }
    goto LABEL_115;
  }
  uint64_t v81 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v67 | 7) != 0x17) {
    uint64_t v81 = v67 | 7;
  }
  uint64_t v82 = v81 + 1;
  int v68 = (char *)operator new(v81 + 1);
  v94.__r_.__value_.__l.__size_ = v66 + v64;
  v94.__r_.__value_.__r.__words[2] = v82 | 0x8000000000000000;
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
  if (v64)
  {
LABEL_115:
    if (v63 >= 0) {
      int v69 = &qword_256B6C0;
    }
    else {
      int v69 = (uint64_t *)qword_256B6C0;
    }
    memmove(v68, v69, v64);
  }
LABEL_119:
  std::string v70 = &v68[v64];
  if (v66)
  {
    if (v65 >= 0) {
      size_t v71 = &qword_256BFB0;
    }
    else {
      size_t v71 = (uint64_t *)qword_256BFB0;
    }
    memmove(v70, v71, v66);
  }
  v70[v66] = 0;
  if (v106 >= 0) {
    std::string::size_type v72 = (const std::string::value_type *)&v105;
  }
  else {
    std::string::size_type v72 = (const std::string::value_type *)v105;
  }
  if (v106 >= 0) {
    std::string::size_type v73 = HIBYTE(v106);
  }
  else {
    std::string::size_type v73 = *((void *)&v105 + 1);
  }
  std::string v74 = std::string::append(&v94, v72, v73);
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  std::string::size_type v96 = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  long long __dst = 0u;
  long long v92 = 0u;
  int v93 = 1065353216;
  sub_6102F0(a1 + 24, (char **)__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v97);
  std::string v98 = v97;
  memset(&v97, 0, sizeof(v97));
  uint64_t v76 = (void *)v92;
  if ((void)v92)
  {
    do
    {
      uint64_t v77 = (void *)*v76;
      sub_4F4B48((uint64_t)(v76 + 2));
      operator delete(v76);
      uint64_t v76 = v77;
    }
    while (v77);
  }
  long long v78 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v78) {
    operator delete(v78);
  }
  if (SHIBYTE(v96) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_136:
      unint64_t v79 = *(void *)(a3 + 8);
      if (v79 < *(void *)(a3 + 16)) {
        goto LABEL_137;
      }
LABEL_147:
      *(void *)(a3 + 8) = sub_6E6EC((char **)a3, (uint64_t)&v103);
      unint64_t v83 = *(void *)(a3 + 168);
      if (v83 >= *(void *)(a3 + 176)) {
        goto LABEL_152;
      }
      goto LABEL_148;
    }
  }
  else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_136;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  unint64_t v79 = *(void *)(a3 + 8);
  if (v79 >= *(void *)(a3 + 16)) {
    goto LABEL_147;
  }
LABEL_137:
  if (SHIBYTE(v104) < 0)
  {
    sub_4200((unsigned char *)v79, (void *)v103, *((unint64_t *)&v103 + 1));
  }
  else
  {
    long long v80 = v103;
    *(void *)(v79 + 16) = v104;
    *(_OWORD *)unint64_t v79 = v80;
  }
  *(void *)(a3 + 8) = v79 + 24;
  *(void *)(a3 + 8) = v79 + 24;
  unint64_t v83 = *(void *)(a3 + 168);
  if (v83 >= *(void *)(a3 + 176))
  {
LABEL_152:
    *(void *)(a3 + 168) = sub_6E6EC((char **)(a3 + 160), (uint64_t)&v101);
    unint64_t v85 = *(void *)(a3 + 328);
    if (v85 < *(void *)(a3 + 336)) {
      goto LABEL_153;
    }
LABEL_157:
    *(void *)(a3 + 328) = sub_6E6EC((char **)(a3 + 320), (uint64_t)&v98);
    unint64_t v87 = *(void *)(a3 + 488);
    if (v87 >= *(void *)(a3 + 496)) {
      goto LABEL_162;
    }
    goto LABEL_158;
  }
LABEL_148:
  if (SHIBYTE(v102) < 0)
  {
    sub_4200((unsigned char *)v83, (void *)v101, *((unint64_t *)&v101 + 1));
  }
  else
  {
    long long v84 = v101;
    *(void *)(v83 + 16) = v102;
    *(_OWORD *)unint64_t v83 = v84;
  }
  *(void *)(a3 + 168) = v83 + 24;
  *(void *)(a3 + 168) = v83 + 24;
  unint64_t v85 = *(void *)(a3 + 328);
  if (v85 >= *(void *)(a3 + 336)) {
    goto LABEL_157;
  }
LABEL_153:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)v85, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v86 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
    *(void *)(v85 + 16) = *((void *)&v98.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v85 = v86;
  }
  *(void *)(a3 + 328) = v85 + 24;
  *(void *)(a3 + 328) = v85 + 24;
  unint64_t v87 = *(void *)(a3 + 488);
  if (v87 >= *(void *)(a3 + 496))
  {
LABEL_162:
    *(void *)(a3 + 488) = sub_6E6EC(v90, (uint64_t)v99);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_170;
  }
LABEL_158:
  if (SHIBYTE(v100) < 0)
  {
    sub_4200((unsigned char *)v87, v99[0], (unint64_t)v99[1]);
  }
  else
  {
    long long v88 = *(_OWORD *)v99;
    *(void *)(v87 + 16) = v100;
    *(_OWORD *)unint64_t v87 = v88;
  }
  *(void *)(a3 + 488) = v87 + 24;
  *(void *)(a3 + 488) = v87 + 24;
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v100) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_171;
  }
LABEL_170:
  operator delete(v98.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
LABEL_164:
    if ((SHIBYTE(v102) & 0x80000000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v99[0]);
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v104) & 0x80000000) == 0) {
      goto LABEL_166;
    }
    goto LABEL_173;
  }
LABEL_172:
  operator delete((void *)v101);
  if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
LABEL_166:
    if ((SHIBYTE(v106) & 0x80000000) == 0) {
      return;
    }
LABEL_174:
    operator delete((void *)v105);
    return;
  }
LABEL_173:
  operator delete((void *)v103);
  if (SHIBYTE(v106) < 0) {
    goto LABEL_174;
  }
}

void sub_550EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  *(void *)(v55 + 488) = v56;
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (*(char *)(v57 - 153) < 0) {
    operator delete(*(void **)(v57 - 176));
  }
  if (*(char *)(v57 - 121) < 0) {
    operator delete(*(void **)(v57 - 144));
  }
  if (*(char *)(v57 - 89) < 0) {
    operator delete(*(void **)(v57 - 112));
  }
  sub_5419D4(a14);
  _Unwind_Resume(a1);
}

void sub_551094(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C087;
  if (byte_256C087 >= 0) {
    size_t v7 = byte_256C087;
  }
  else {
    size_t v7 = qword_256C078;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      size_t v11 = &qword_256B678;
    }
    else {
      size_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      size_t v13 = &qword_256C070;
    }
    else {
      size_t v13 = (uint64_t *)qword_256C070;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C087;
  if (byte_256C087 >= 0) {
    size_t v21 = byte_256C087;
  }
  else {
    size_t v21 = qword_256C078;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      int v25 = &qword_256B690;
    }
    else {
      int v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  size_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      int v27 = &qword_256C070;
    }
    else {
      int v27 = (uint64_t *)qword_256C070;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  size_t v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C087;
  if (byte_256C087 >= 0) {
    size_t v35 = byte_256C087;
  }
  else {
    size_t v35 = qword_256C078;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      long long v38 = &qword_256B6C0;
    }
    else {
      long long v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  int v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      long long v40 = &qword_256C070;
    }
    else {
      long long v40 = (uint64_t *)qword_256C070;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      uint64_t v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  uint64_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    int v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_551680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_5517B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C057;
  if (byte_256C057 >= 0) {
    size_t v7 = byte_256C057;
  }
  else {
    size_t v7 = qword_256C048;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      size_t v11 = &qword_256B678;
    }
    else {
      size_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      size_t v13 = &qword_256C040;
    }
    else {
      size_t v13 = (uint64_t *)qword_256C040;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C057;
  if (byte_256C057 >= 0) {
    size_t v21 = byte_256C057;
  }
  else {
    size_t v21 = qword_256C048;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      int v25 = &qword_256B690;
    }
    else {
      int v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  size_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      int v27 = &qword_256C040;
    }
    else {
      int v27 = (uint64_t *)qword_256C040;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  size_t v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C057;
  if (byte_256C057 >= 0) {
    size_t v35 = byte_256C057;
  }
  else {
    size_t v35 = qword_256C048;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      uint64_t v38 = &qword_256B6C0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  int v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      long long v40 = &qword_256C040;
    }
    else {
      long long v40 = (uint64_t *)qword_256C040;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      uint64_t v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  uint64_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    int v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_551DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_551ED4(void **a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  sub_4050DC(a2, *a1, &v97);
  sub_40506C(a3, *a1, &v95);
  *((unsigned char *)&v94.__r_.__value_.__s + 23) = 0;
  v94.__r_.__value_.__s.__data_[0] = 0;
  unint64_t v7 = ((char *)v96 - (char *)v95) >> 3;
  unint64_t v8 = ((char *)v98 - (char *)v97) >> 3;
  if (v98 == v97 || v96 == v95)
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (v97->i64[v10] == v95->i64[v11]) {
        ++v11;
      }
      ++v10;
    }
    while (v10 < v8 && v11 < v7);
  }
  if (v11 != v7)
  {
    int v12 = (const std::string *)&qword_256BFF8;
    if (v98 == v97 || v8 != v7) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v96 - (char *)v95) >= 0x20)
    {
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      long long v15 = v97 + 1;
      uint64_t v16 = v95 + 1;
      int64x2_t v17 = 0uLL;
      int8x16_t v18 = (int8x16_t)vdupq_n_s64(1uLL);
      unint64_t v19 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v20 = 0uLL;
      do
      {
        int64x2_t v17 = vaddq_s64(v17, (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqq_s64(v15[-1], v16[-1])));
        int64x2_t v20 = vaddq_s64(v20, (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqq_s64(*v15, *v16)));
        v15 += 2;
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      uint64_t v13 = vaddvq_s64(vaddq_s64(v20, v17));
      if (v7 == v14) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
    }
    unint64_t v21 = v7 - v14;
    uint64_t v22 = v14;
    uint64_t v23 = &v95->i64[v22];
    uint64_t v24 = &v97->i64[v22];
    do
    {
      uint64_t v26 = *v24++;
      uint64_t v25 = v26;
      uint64_t v27 = *v23++;
      v13 += v25 != v27;
      --v21;
    }
    while (v21);
LABEL_24:
    if (v13 == 1) {
      int v12 = (const std::string *)byte_256BFE0;
    }
    else {
      int v12 = (const std::string *)&qword_256BFF8;
    }
    goto LABEL_27;
  }
  if (v8 - v7 == 1) {
    int v12 = (const std::string *)byte_256C010;
  }
  else {
    int v12 = (const std::string *)&xmmword_256C028;
  }
LABEL_27:
  std::string::operator=(&v94, v12);
  int v28 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v29 = byte_256B68F;
  }
  else {
    size_t v29 = qword_256B680;
  }
  int v30 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v94.__r_.__value_.__l.__size_;
  }
  unint64_t v32 = size + v29;
  if (size + v29 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v33 = (uint64_t)a1[1];
  if (v32 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v81 = 0;
    __p[0] = 0;
    int v34 = (char *)__p;
    BYTE7(v81) = size + v29;
    if (!v29) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  uint64_t v40 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v40 = v32 | 7;
  }
  uint64_t v41 = v40 + 1;
  int v34 = (char *)operator new(v40 + 1);
  __p[1] = (void *)(size + v29);
  *(void *)&long long v81 = v41 | 0x8000000000000000;
  __p[0] = v34;
  if (v29)
  {
LABEL_36:
    if (v28 >= 0) {
      size_t v35 = &qword_256B678;
    }
    else {
      size_t v35 = (uint64_t *)qword_256B678;
    }
    memmove(v34, v35, v29);
  }
LABEL_40:
  uint64_t v36 = &v34[v29];
  if (size)
  {
    if (v30 >= 0) {
      uint64_t v37 = &v94;
    }
    else {
      uint64_t v37 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    memmove(v36, v37, size);
  }
  v36[size] = 0;
  uint64_t v38 = sub_8D7730(v33, (uint64_t)__p);
  if (*((char *)v38 + 23) < 0)
  {
    sub_4200(v92, (void *)*v38, v38[1]);
  }
  else
  {
    long long v39 = *(_OWORD *)v38;
    uint64_t v93 = v38[2];
    *(_OWORD *)long long v92 = v39;
  }
  if (SBYTE7(v81) < 0) {
    operator delete(__p[0]);
  }
  int v42 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v43 = byte_256B6A7;
  }
  else {
    size_t v43 = qword_256B698;
  }
  int v44 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v45 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v45 = v94.__r_.__value_.__l.__size_;
  }
  unint64_t v46 = v45 + v43;
  if (v45 + v43 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v47 = (uint64_t)a1[1];
  if (v46 <= 0x16)
  {
    __p[1] = 0;
    *(void *)&long long v81 = 0;
    __p[0] = 0;
    unint64_t v48 = (char *)__p;
    BYTE7(v81) = v45 + v43;
    if (!v43) {
      goto LABEL_67;
    }
    goto LABEL_63;
  }
  uint64_t v54 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v46 | 7) != 0x17) {
    uint64_t v54 = v46 | 7;
  }
  uint64_t v55 = v54 + 1;
  unint64_t v48 = (char *)operator new(v54 + 1);
  __p[1] = (void *)(v45 + v43);
  *(void *)&long long v81 = v55 | 0x8000000000000000;
  __p[0] = v48;
  if (v43)
  {
LABEL_63:
    if (v42 >= 0) {
      long long v49 = &qword_256B690;
    }
    else {
      long long v49 = (uint64_t *)qword_256B690;
    }
    memmove(v48, v49, v43);
  }
LABEL_67:
  unint64_t v50 = &v48[v43];
  if (v45)
  {
    if (v44 >= 0) {
      char v51 = &v94;
    }
    else {
      char v51 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    memmove(v50, v51, v45);
  }
  v50[v45] = 0;
  long long v52 = sub_8D7730(v47, (uint64_t)__p);
  if (*((char *)v52 + 23) < 0)
  {
    sub_4200(v90, (void *)*v52, v52[1]);
  }
  else
  {
    long long v53 = *(_OWORD *)v52;
    uint64_t v91 = v52[2];
    *(_OWORD *)uint64_t v90 = v53;
  }
  if (SBYTE7(v81) < 0) {
    operator delete(__p[0]);
  }
  int v56 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v57 = byte_256B6D7;
  }
  else {
    size_t v57 = qword_256B6C8;
  }
  int v58 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v59 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v59 = v94.__r_.__value_.__l.__size_;
  }
  unint64_t v60 = v59 + v57;
  if (v59 + v57 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v60 <= 0x16)
  {
    size_t v84 = 0;
    unint64_t v85 = 0;
    long long __dst = 0;
    p_dst = (char *)&__dst;
    HIBYTE(v85) = v59 + v57;
    if (!v57) {
      goto LABEL_94;
    }
    goto LABEL_90;
  }
  uint64_t v70 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v60 | 7) != 0x17) {
    uint64_t v70 = v60 | 7;
  }
  uint64_t v71 = v70 + 1;
  p_dst = (char *)operator new(v70 + 1);
  size_t v84 = v59 + v57;
  unint64_t v85 = v71 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v57)
  {
LABEL_90:
    if (v56 >= 0) {
      long long v62 = &qword_256B6C0;
    }
    else {
      long long v62 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_dst, v62, v57);
  }
LABEL_94:
  uint64_t v63 = &p_dst[v57];
  if (v59)
  {
    if (v58 >= 0) {
      size_t v64 = &v94;
    }
    else {
      size_t v64 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    memmove(v63, v64, v59);
  }
  v63[v59] = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v81 = 0u;
  int v82 = 1065353216;
  sub_6102F0((uint64_t)(a1 + 3), &__dst, (uint64_t)__p, *((unsigned __int8 *)a1 + 2525), (uint64_t)&v86);
  *(_OWORD *)long long v88 = v86;
  uint64_t v89 = v87;
  uint64_t v87 = 0;
  long long v86 = 0uLL;
  uint64_t v65 = (void *)v81;
  if ((void)v81)
  {
    do
    {
      long long v66 = (void *)*v65;
      sub_4F4B48((uint64_t)(v65 + 2));
      operator delete(v65);
      uint64_t v65 = v66;
    }
    while (v66);
  }
  uint64_t v67 = __p[0];
  __p[0] = 0;
  if (v67) {
    operator delete(v67);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__dst);
  }
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  unint64_t v68 = *(void *)(a4 + 8);
  if (v68 >= *(void *)(a4 + 16))
  {
    *(void *)(a4 + 8) = sub_6E6EC((char **)a4, (uint64_t)v92);
    unint64_t v72 = *(void *)(a4 + 168);
    if (v72 >= *(void *)(a4 + 176)) {
      goto LABEL_117;
    }
  }
  else
  {
    if (SHIBYTE(v93) < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 8), v92[0], (unint64_t)v92[1]);
    }
    else
    {
      long long v69 = *(_OWORD *)v92;
      *(void *)(v68 + 16) = v93;
      *(_OWORD *)unint64_t v68 = v69;
    }
    *(void *)(a4 + 8) = v68 + 24;
    *(void *)(a4 + 8) = v68 + 24;
    unint64_t v72 = *(void *)(a4 + 168);
    if (v72 >= *(void *)(a4 + 176))
    {
LABEL_117:
      *(void *)(a4 + 168) = sub_6E6EC((char **)(a4 + 160), (uint64_t)v90);
      unint64_t v74 = *(void *)(a4 + 328);
      if (v74 < *(void *)(a4 + 336)) {
        goto LABEL_118;
      }
LABEL_122:
      uint64_t v77 = sub_6E6EC((char **)(a4 + 320), (uint64_t)v88);
      char v78 = HIBYTE(v89);
      *(void *)(a4 + 328) = v77;
      if ((v78 & 0x80) == 0) {
        goto LABEL_127;
      }
      goto LABEL_126;
    }
  }
  if (SHIBYTE(v91) < 0)
  {
    sub_4200((unsigned char *)v72, v90[0], (unint64_t)v90[1]);
  }
  else
  {
    long long v73 = *(_OWORD *)v90;
    *(void *)(v72 + 16) = v91;
    *(_OWORD *)unint64_t v72 = v73;
  }
  *(void *)(a4 + 168) = v72 + 24;
  *(void *)(a4 + 168) = v72 + 24;
  unint64_t v74 = *(void *)(a4 + 328);
  if (v74 >= *(void *)(a4 + 336)) {
    goto LABEL_122;
  }
LABEL_118:
  char v75 = HIBYTE(v89);
  if (SHIBYTE(v89) < 0)
  {
    sub_4200((unsigned char *)v74, v88[0], (unint64_t)v88[1]);
  }
  else
  {
    long long v76 = *(_OWORD *)v88;
    *(void *)(v74 + 16) = v89;
    *(_OWORD *)unint64_t v74 = v76;
  }
  *(void *)(a4 + 328) = v74 + 24;
  *(void *)(a4 + 328) = v74 + 24;
  if (v75 < 0) {
LABEL_126:
  }
    operator delete(v88[0]);
LABEL_127:
  if (SHIBYTE(v91) < 0)
  {
    operator delete(v90[0]);
    if ((SHIBYTE(v93) & 0x80000000) == 0)
    {
LABEL_129:
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_130;
      }
      goto LABEL_137;
    }
  }
  else if ((SHIBYTE(v93) & 0x80000000) == 0)
  {
    goto LABEL_129;
  }
  operator delete(v92[0]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_130:
    unint64_t v79 = v95;
    if (!v95) {
      goto LABEL_132;
    }
    goto LABEL_131;
  }
LABEL_137:
  operator delete(v94.__r_.__value_.__l.__data_);
  unint64_t v79 = v95;
  if (v95)
  {
LABEL_131:
    std::string::size_type v96 = v79;
    operator delete(v79);
  }
LABEL_132:
  if (v97)
  {
    std::string v98 = v97;
    operator delete(v97);
  }
}

void sub_552638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 328) = v47;
  sub_5419D4(v46);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v48 - 137) < 0)
  {
    operator delete(*(void **)(v48 - 160));
    unint64_t v50 = *(void **)(v48 - 136);
    if (!v50)
    {
LABEL_9:
      char v51 = *(void **)(v48 - 112);
      if (!v51) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v50 = *(void **)(v48 - 136);
    if (!v50) {
      goto LABEL_9;
    }
  }
  *(void *)(v48 - 128) = v50;
  operator delete(v50);
  char v51 = *(void **)(v48 - 112);
  if (!v51) {
LABEL_10:
  }
    _Unwind_Resume(a1);
LABEL_13:
  *(void *)(v48 - 104) = v51;
  operator delete(v51);
  _Unwind_Resume(a1);
}

void sub_5527A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C06F;
  if (byte_256C06F >= 0) {
    size_t v7 = byte_256C06F;
  }
  else {
    size_t v7 = qword_256C060;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      unint64_t v11 = &qword_256B678;
    }
    else {
      unint64_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      uint64_t v13 = &qword_256C058;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256C058;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C06F;
  if (byte_256C06F >= 0) {
    size_t v21 = byte_256C06F;
  }
  else {
    size_t v21 = qword_256C060;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      uint64_t v25 = &qword_256B690;
    }
    else {
      uint64_t v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  uint64_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      uint64_t v27 = &qword_256C058;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256C058;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  int v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C06F;
  if (byte_256C06F >= 0) {
    size_t v35 = byte_256C06F;
  }
  else {
    size_t v35 = qword_256C060;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      uint64_t v38 = &qword_256B6C0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  long long v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      uint64_t v40 = &qword_256C058;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256C058;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      int v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  size_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    long long v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_552D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_552EC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C09F;
  if (byte_256C09F >= 0) {
    size_t v7 = byte_256C09F;
  }
  else {
    size_t v7 = qword_256C090;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      unint64_t v11 = &qword_256B678;
    }
    else {
      unint64_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      uint64_t v13 = &qword_256C088;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256C088;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C09F;
  if (byte_256C09F >= 0) {
    size_t v21 = byte_256C09F;
  }
  else {
    size_t v21 = qword_256C090;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      uint64_t v25 = &qword_256B690;
    }
    else {
      uint64_t v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  uint64_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      uint64_t v27 = &qword_256C088;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256C088;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  int v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C09F;
  if (byte_256C09F >= 0) {
    size_t v35 = byte_256C09F;
  }
  else {
    size_t v35 = qword_256C090;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      uint64_t v38 = &qword_256B6C0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  long long v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      uint64_t v40 = &qword_256C088;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256C088;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      int v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  size_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    long long v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_5534B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_5535E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C0B7;
  if (byte_256C0B7 >= 0) {
    size_t v7 = byte_256C0B7;
  }
  else {
    size_t v7 = qword_256C0A8;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      unint64_t v11 = &qword_256B678;
    }
    else {
      unint64_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      uint64_t v13 = &qword_256C0A0;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256C0A0;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C0B7;
  if (byte_256C0B7 >= 0) {
    size_t v21 = byte_256C0B7;
  }
  else {
    size_t v21 = qword_256C0A8;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      uint64_t v25 = &qword_256B690;
    }
    else {
      uint64_t v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  uint64_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      uint64_t v27 = &qword_256C0A0;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256C0A0;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  int v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C0B7;
  if (byte_256C0B7 >= 0) {
    size_t v35 = byte_256C0B7;
  }
  else {
    size_t v35 = qword_256C0A8;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      uint64_t v38 = &qword_256B6C0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  long long v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      uint64_t v40 = &qword_256C0A0;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256C0A0;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      int v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  size_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    long long v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_553BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_553D04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  uint64_t v55 = (char **)sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  int v4 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v5 = byte_256B68F;
  }
  else {
    size_t v5 = qword_256B680;
  }
  int v6 = byte_256C0CF;
  if (byte_256C0CF >= 0) {
    size_t v7 = byte_256C0CF;
  }
  else {
    size_t v7 = qword_256C0C0;
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v8 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v57) = v7 + v5;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v16 = v8 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_dst = (long long *)operator new(v16 + 1);
  *((void *)&__dst + 1) = v7 + v5;
  *(void *)&long long v57 = v17 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v5)
  {
LABEL_10:
    if (v4 >= 0) {
      unint64_t v11 = &qword_256B678;
    }
    else {
      unint64_t v11 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v11, v5);
  }
LABEL_14:
  int v12 = (char *)p_dst + v5;
  if (v7)
  {
    if (v6 >= 0) {
      uint64_t v13 = &qword_256C0B8;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_256C0B8;
    }
    memmove(v12, v13, v7);
  }
  v12[v7] = 0;
  unint64_t v14 = sub_8D7730(v9, (uint64_t)&__dst);
  if (*((char *)v14 + 23) < 0)
  {
    sub_4200(&v68, (void *)*v14, v14[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    uint64_t v69 = v14[2];
    long long v68 = v15;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  int v20 = byte_256C0CF;
  if (byte_256C0CF >= 0) {
    size_t v21 = byte_256C0CF;
  }
  else {
    size_t v21 = qword_256C0C0;
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v22 <= 0x16)
  {
    *(void *)&long long v57 = 0;
    long long __dst = 0uLL;
    uint64_t v24 = &__dst;
    BYTE7(v57) = v21 + v19;
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v30 = v22 | 7;
  }
  uint64_t v31 = v30 + 1;
  uint64_t v24 = (long long *)operator new(v30 + 1);
  *((void *)&__dst + 1) = v21 + v19;
  *(void *)&long long v57 = v31 | 0x8000000000000000;
  *(void *)&long long __dst = v24;
  if (v19)
  {
LABEL_37:
    if (v18 >= 0) {
      uint64_t v25 = &qword_256B690;
    }
    else {
      uint64_t v25 = (uint64_t *)qword_256B690;
    }
    memmove(v24, v25, v19);
  }
LABEL_41:
  uint64_t v26 = (char *)v24 + v19;
  if (v21)
  {
    if (v20 >= 0) {
      uint64_t v27 = &qword_256C0B8;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256C0B8;
    }
    memmove(v26, v27, v21);
  }
  v26[v21] = 0;
  int v28 = sub_8D7730(v23, (uint64_t)&__dst);
  if (*((char *)v28 + 23) < 0)
  {
    sub_4200(&v66, (void *)*v28, v28[1]);
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    uint64_t v67 = v28[2];
    long long v66 = v29;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)__dst);
  }
  int v32 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v33 = byte_256B6D7;
  }
  else {
    size_t v33 = qword_256B6C8;
  }
  int v34 = byte_256C0CF;
  if (byte_256C0CF >= 0) {
    size_t v35 = byte_256C0CF;
  }
  else {
    size_t v35 = qword_256C0C0;
  }
  unint64_t v36 = v35 + v33;
  if (v35 + v33 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v36 <= 0x16)
  {
    size_t v60 = 0;
    unint64_t v61 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v61) = v35 + v33;
    if (!v33) {
      goto LABEL_68;
    }
    goto LABEL_64;
  }
  uint64_t v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v36 | 7) != 0x17) {
    uint64_t v46 = v36 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_p = (char *)operator new(v46 + 1);
  size_t v60 = v35 + v33;
  unint64_t v61 = v47 | 0x8000000000000000;
  std::string __p = p_p;
  if (v33)
  {
LABEL_64:
    if (v32 >= 0) {
      uint64_t v38 = &qword_256B6C0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v38, v33);
  }
LABEL_68:
  long long v39 = &p_p[v33];
  if (v35)
  {
    if (v34 >= 0) {
      uint64_t v40 = &qword_256C0B8;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256C0B8;
    }
    memmove(v39, v40, v35);
  }
  v39[v35] = 0;
  long long __dst = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v62);
  *(_OWORD *)size_t v64 = v62;
  uint64_t v65 = v63;
  uint64_t v63 = 0;
  long long v62 = 0uLL;
  uint64_t v41 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      int v42 = (void *)*v41;
      sub_4F4B48((uint64_t)(v41 + 2));
      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  size_t v43 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v43) {
    operator delete(v43);
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < *(void *)(a2 + 16)) {
      goto LABEL_79;
    }
LABEL_86:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&v68);
    unint64_t v48 = *(void *)(a2 + 168);
    if (v48 >= *(void *)(a2 + 176)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  operator delete(__p);
  unint64_t v44 = *(void *)(a2 + 8);
  if (v44 >= *(void *)(a2 + 16)) {
    goto LABEL_86;
  }
LABEL_79:
  if (SHIBYTE(v69) < 0)
  {
    sub_4200((unsigned char *)v44, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    long long v45 = v68;
    *(void *)(v44 + 16) = v69;
    *(_OWORD *)unint64_t v44 = v45;
  }
  *(void *)(a2 + 8) = v44 + 24;
  *(void *)(a2 + 8) = v44 + 24;
  unint64_t v48 = *(void *)(a2 + 168);
  if (v48 >= *(void *)(a2 + 176))
  {
LABEL_91:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v66);
    unint64_t v50 = *(void *)(a2 + 328);
    if (v50 < *(void *)(a2 + 336)) {
      goto LABEL_92;
    }
LABEL_96:
    long long v53 = sub_6E6EC(v55, (uint64_t)v64);
    char v54 = HIBYTE(v65);
    *(void *)(a2 + 328) = v53;
    if ((v54 & 0x80) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_87:
  if (SHIBYTE(v67) < 0)
  {
    sub_4200((unsigned char *)v48, (void *)v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    long long v49 = v66;
    *(void *)(v48 + 16) = v67;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(void *)(a2 + 168) = v48 + 24;
  *(void *)(a2 + 168) = v48 + 24;
  unint64_t v50 = *(void *)(a2 + 328);
  if (v50 >= *(void *)(a2 + 336)) {
    goto LABEL_96;
  }
LABEL_92:
  char v51 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    sub_4200((unsigned char *)v50, v64[0], (unint64_t)v64[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v64;
    *(void *)(v50 + 16) = v65;
    *(_OWORD *)unint64_t v50 = v52;
  }
  *(void *)(a2 + 328) = v50 + 24;
  *(void *)(a2 + 328) = v50 + 24;
  if (v51 < 0) {
LABEL_100:
  }
    operator delete(v64[0]);
LABEL_101:
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return;
    }
LABEL_105:
    operator delete((void *)v68);
    return;
  }
  operator delete((void *)v66);
  if (SHIBYTE(v69) < 0) {
    goto LABEL_105;
  }
}

void sub_5542F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 328) = v37;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0)
  {
    operator delete(*(void **)(v38 - 112));
    sub_5419D4(v36);
    _Unwind_Resume(a1);
  }
  sub_5419D4(v36);
  _Unwind_Resume(a1);
}

void sub_554424(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  uint64_t v161 = a4;
  uint64_t v162 = (char **)(a4 + 160);
  sub_5F3B34(a4 + 160);
  sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  *(_OWORD *)uint64_t v188 = 0u;
  long long v189 = 0u;
  int v190 = 1065353216;
  *(_OWORD *)int v185 = 0u;
  long long v186 = 0u;
  int v187 = 1065353216;
  sub_60516C(a2, *(unsigned __int8 *)(a1 + 2525), *(unsigned __int8 *)(a1 + 2524), &__str);
  sub_60531C(a2, *(unsigned __int8 *)(a1 + 2524), (uint64_t)&v183);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_10;
  }
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v183.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*((unsigned char *)&v183.__r_.__value_.__s + 23))
  {
LABEL_9:
    *(void *)size_t v191 = &qword_256C238;
    unint64_t v8 = sub_31B300((uint64_t)v185, (uint64_t)&qword_256C238, (uint64_t)&unk_20F06E0, (long long **)v191);
    std::string::operator=((std::string *)(v8 + 5), &__str);
    *(void *)size_t v191 = &qword_256C238;
    uint64_t v9 = sub_31B300((uint64_t)v188, (uint64_t)&qword_256C238, (uint64_t)&unk_20F06E0, (long long **)v191);
    std::string::operator=((std::string *)(v9 + 5), &v183);
  }
LABEL_10:
  std::string __p = 0;
  long long v182 = 0uLL;
  memset(v180, 0, sizeof(v180));
  int v178 = 0;
  long long v179 = 0uLL;
  memset(&v177, 0, sizeof(v177));
  sub_558C38(a1, *(_DWORD *)(a2 + 88), *(unsigned __int8 *)(a2 + 156), (uint64_t)&v174);
  uint64_t v159 = a1;
  unint64_t v160 = (char **)(a4 + 320);
  int v157 = a3;
  BOOL v158 = sub_358878(a2);
  if (v158)
  {
    int v10 = byte_256B68F;
    if (byte_256B68F >= 0) {
      size_t v11 = byte_256B68F;
    }
    else {
      size_t v11 = qword_256B680;
    }
    int v12 = byte_256B6EF;
    if (byte_256B6EF >= 0) {
      size_t v13 = byte_256B6EF;
    }
    else {
      size_t v13 = qword_256B6E0;
    }
    unint64_t v14 = v13 + v11;
    if (v13 + v11 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v14 > 0x16)
    {
      uint64_t v42 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v42 = v14 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_dst = (std::string *)operator new(v42 + 1);
      __dst.__r_.__value_.__l.__size_ = v13 + v11;
      __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v11)
      {
LABEL_24:
        uint64_t v17 = (char *)p_dst + v11;
        if (v13)
        {
          if (v12 >= 0) {
            int v18 = &qword_256B6D8;
          }
          else {
            int v18 = (uint64_t *)qword_256B6D8;
          }
          memmove(v17, v18, v13);
        }
        v17[v13] = 0;
        if (byte_256B9F7 >= 0) {
          size_t v19 = (const std::string::value_type *)&xmmword_256B9E0;
        }
        else {
          size_t v19 = (const std::string::value_type *)xmmword_256B9E0;
        }
        if (byte_256B9F7 >= 0) {
          std::string::size_type v20 = byte_256B9F7;
        }
        else {
          std::string::size_type v20 = *((void *)&xmmword_256B9E0 + 1);
        }
        size_t v21 = std::string::append(&__dst, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        *(void *)&v191[16] = *((void *)&v21->__r_.__value_.__l + 2);
        *(_OWORD *)size_t v191 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v176 & 0x80u) == 0) {
          uint64_t v23 = (const std::string::value_type *)&v174;
        }
        else {
          uint64_t v23 = (const std::string::value_type *)v174;
        }
        if ((v176 & 0x80u) == 0) {
          std::string::size_type v24 = v176;
        }
        else {
          std::string::size_type v24 = v175;
        }
        uint64_t v25 = std::string::append((std::string *)v191, v23, v24);
        uint64_t v26 = (void *)v25->__r_.__value_.__r.__words[0];
        v195.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v195.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
        char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v182) < 0) {
          operator delete(__p);
        }
        std::string __p = v26;
        *(void *)&long long v182 = v195.__r_.__value_.__r.__words[0];
        *(void *)((char *)&v182 + 7) = *(std::string::size_type *)((char *)v195.__r_.__value_.__r.__words + 7);
        HIBYTE(v182) = v27;
        if ((v191[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v191);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_45:
        if (sub_31B0D0(v185, (uint64_t)&qword_256C238))
        {
          if (byte_2569B17 < 0)
          {
            sub_4200(v191, (void *)xmmword_2569B00, *((unint64_t *)&xmmword_2569B00 + 1));
          }
          else
          {
            *(_OWORD *)size_t v191 = xmmword_2569B00;
            *(void *)&v191[16] = unk_2569B10;
          }
        }
        else
        {
          v191[23] = 0;
          v191[0] = 0;
        }
        std::string::operator=(&v177, (const std::string *)v191);
        if ((v191[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v191);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v177.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_132:
            int v64 = byte_256B6A7;
            if (byte_256B6A7 >= 0) {
              size_t v65 = byte_256B6A7;
            }
            else {
              size_t v65 = qword_256B698;
            }
            int v66 = byte_256B6EF;
            if (byte_256B6EF >= 0) {
              size_t v67 = byte_256B6EF;
            }
            else {
              size_t v67 = qword_256B6E0;
            }
            unint64_t v68 = v67 + v65;
            if (v67 + v65 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v68 > 0x16)
            {
              uint64_t v86 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v68 | 7) != 0x17) {
                uint64_t v86 = v68 | 7;
              }
              uint64_t v87 = v86 + 1;
              uint64_t v69 = (char *)operator new(v86 + 1);
              v172.__r_.__value_.__l.__size_ = v67 + v65;
              v172.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
              v172.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
              if (!v65)
              {
LABEL_145:
                uint64_t v71 = &v69[v65];
                if (v67)
                {
                  if (v66 >= 0) {
                    unint64_t v72 = &qword_256B6D8;
                  }
                  else {
                    unint64_t v72 = (uint64_t *)qword_256B6D8;
                  }
                  memmove(v71, v72, v67);
                }
                v71[v67] = 0;
                if (byte_256B9F7 >= 0) {
                  long long v73 = (const std::string::value_type *)&xmmword_256B9E0;
                }
                else {
                  long long v73 = (const std::string::value_type *)xmmword_256B9E0;
                }
                if (byte_256B9F7 >= 0) {
                  std::string::size_type v74 = byte_256B9F7;
                }
                else {
                  std::string::size_type v74 = *((void *)&xmmword_256B9E0 + 1);
                }
                char v75 = std::string::append(&v172, v73, v74);
                long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v173.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                if ((v176 & 0x80u) == 0) {
                  uint64_t v77 = (const std::string::value_type *)&v174;
                }
                else {
                  uint64_t v77 = (const std::string::value_type *)v174;
                }
                if ((v176 & 0x80u) == 0) {
                  std::string::size_type v78 = v176;
                }
                else {
                  std::string::size_type v78 = v175;
                }
                unint64_t v79 = std::string::append(&v173, v77, v78);
                long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                v195.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v80;
                v79->__r_.__value_.__l.__size_ = 0;
                v79->__r_.__value_.__r.__words[2] = 0;
                v79->__r_.__value_.__r.__words[0] = 0;
                if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v81 = &v177;
                }
                else {
                  long long v81 = (std::string *)v177.__r_.__value_.__r.__words[0];
                }
                if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v82 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v82 = v177.__r_.__value_.__l.__size_;
                }
                unint64_t v83 = std::string::append(&v195, (const std::string::value_type *)v81, v82);
                std::string::value_type v84 = v83->__r_.__value_.__s.__data_[0];
                *(_OWORD *)size_t v191 = *(_OWORD *)((char *)&v83->__r_.__value_.__l.__data_ + 1);
                *(void *)&v191[14] = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
                char v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
                v83->__r_.__value_.__l.__size_ = 0;
                v83->__r_.__value_.__r.__words[2] = 0;
                v83->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v180[2]) < 0) {
                  goto LABEL_169;
                }
                goto LABEL_170;
              }
            }
            else
            {
              memset(&v172, 0, sizeof(v172));
              uint64_t v69 = (char *)&v172;
              *((unsigned char *)&v172.__r_.__value_.__s + 23) = v67 + v65;
              if (!v65) {
                goto LABEL_145;
              }
            }
            if (v64 >= 0) {
              uint64_t v70 = &qword_256B690;
            }
            else {
              uint64_t v70 = (uint64_t *)qword_256B690;
            }
            memmove(v69, v70, v65);
            goto LABEL_145;
          }
        }
        else
        {
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v177.__r_.__value_.__l.__size_;
          }
          if (size) {
            goto LABEL_132;
          }
        }
        char v85 = 0;
        std::string::value_type v84 = 0;
        if (SHIBYTE(v180[2]) < 0) {
LABEL_169:
        }
          operator delete(v180[0]);
LABEL_170:
        LOBYTE(v180[0]) = v84;
        *(_OWORD *)((char *)v180 + 1) = *(_OWORD *)v191;
        *(void **)((char *)&v180[1] + 7) = *(void **)&v191[14];
        HIBYTE(v180[2]) = v85;
        if (!size) {
          goto LABEL_189;
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v195.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_173:
            if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_189;
            }
LABEL_187:
            size_t v60 = (void *)v172.__r_.__value_.__r.__words[0];
            goto LABEL_188;
          }
        }
        else if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_173;
        }
        operator delete(v173.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_189;
        }
        goto LABEL_187;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + v11;
      if (!v11) {
        goto LABEL_24;
      }
    }
    if (v10 >= 0) {
      uint64_t v16 = &qword_256B678;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v16, v11);
    goto LABEL_24;
  }
  int v28 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v29 = byte_256B68F;
  }
  else {
    size_t v29 = qword_256B680;
  }
  int v30 = byte_256B6EF;
  if (byte_256B6EF >= 0) {
    size_t v31 = byte_256B6EF;
  }
  else {
    size_t v31 = qword_256B6E0;
  }
  unint64_t v32 = v31 + v29;
  if (v31 + v29 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    memset(v191, 0, 24);
    size_t v33 = v191;
    v191[23] = v31 + v29;
    if (!v29) {
      goto LABEL_61;
    }
    goto LABEL_57;
  }
  uint64_t v44 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v44 = v32 | 7;
  }
  uint64_t v45 = v44 + 1;
  size_t v33 = operator new(v44 + 1);
  *(void *)&v191[8] = v31 + v29;
  *(void *)&v191[16] = v45 | 0x8000000000000000;
  *(void *)size_t v191 = v33;
  if (v29)
  {
LABEL_57:
    if (v28 >= 0) {
      int v34 = &qword_256B678;
    }
    else {
      int v34 = (uint64_t *)qword_256B678;
    }
    memmove(v33, v34, v29);
  }
LABEL_61:
  size_t v35 = &v33[v29];
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v36 = &qword_256B6D8;
    }
    else {
      uint64_t v36 = (uint64_t *)qword_256B6D8;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  if ((v176 & 0x80u) == 0) {
    uint64_t v37 = (const std::string::value_type *)&v174;
  }
  else {
    uint64_t v37 = (const std::string::value_type *)v174;
  }
  if ((v176 & 0x80u) == 0) {
    std::string::size_type v38 = v176;
  }
  else {
    std::string::size_type v38 = v175;
  }
  long long v39 = std::string::append((std::string *)v191, v37, v38);
  uint64_t v40 = (void *)v39->__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
  char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v182) < 0) {
    operator delete(__p);
  }
  std::string __p = v40;
  *(void *)&long long v182 = __dst.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v182 + 7) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  HIBYTE(v182) = v41;
  if ((v191[23] & 0x80000000) != 0) {
    operator delete(*(void **)v191);
  }
  if (sub_31B0D0(v185, (uint64_t)&qword_256C238))
  {
    if (byte_256B8CF < 0)
    {
      sub_4200(v191, (void *)xmmword_256B8B8, *((unint64_t *)&xmmword_256B8B8 + 1));
    }
    else
    {
      *(_OWORD *)size_t v191 = xmmword_256B8B8;
      *(void *)&v191[16] = unk_256B8C8;
    }
  }
  else
  {
    v191[23] = 0;
    v191[0] = 0;
  }
  std::string::operator=(&v177, (const std::string *)v191);
  if ((v191[23] & 0x80000000) != 0) {
    operator delete(*(void **)v191);
  }
  int v46 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v47 = byte_256B6A7;
  }
  else {
    size_t v47 = qword_256B698;
  }
  int v48 = byte_256B6EF;
  if (byte_256B6EF >= 0) {
    size_t v49 = byte_256B6EF;
  }
  else {
    size_t v49 = qword_256B6E0;
  }
  unint64_t v50 = v49 + v47;
  if (v49 + v47 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v50 <= 0x16)
  {
    memset(v191, 0, 24);
    char v51 = v191;
    v191[23] = v49 + v47;
    if (!v47) {
      goto LABEL_107;
    }
    goto LABEL_103;
  }
  uint64_t v61 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v50 | 7) != 0x17) {
    uint64_t v61 = v50 | 7;
  }
  uint64_t v62 = v61 + 1;
  char v51 = operator new(v61 + 1);
  *(void *)&v191[8] = v49 + v47;
  *(void *)&v191[16] = v62 | 0x8000000000000000;
  *(void *)size_t v191 = v51;
  if (v47)
  {
LABEL_103:
    if (v46 >= 0) {
      long long v52 = &qword_256B690;
    }
    else {
      long long v52 = (uint64_t *)qword_256B690;
    }
    memmove(v51, v52, v47);
  }
LABEL_107:
  long long v53 = &v51[v47];
  if (v49)
  {
    if (v48 >= 0) {
      char v54 = &qword_256B6D8;
    }
    else {
      char v54 = (uint64_t *)qword_256B6D8;
    }
    memmove(v53, v54, v49);
  }
  v53[v49] = 0;
  if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v55 = &v177;
  }
  else {
    uint64_t v55 = (std::string *)v177.__r_.__value_.__r.__words[0];
  }
  if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v56 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v56 = v177.__r_.__value_.__l.__size_;
  }
  long long v57 = std::string::append((std::string *)v191, (const std::string::value_type *)v55, v56);
  int v58 = (void *)v57->__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
  char v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v180[2]) < 0) {
    operator delete(v180[0]);
  }
  v180[0] = v58;
  v180[1] = __dst.__r_.__value_.__l.__data_;
  *(void **)((char *)&v180[1] + 7) = *(void **)((char *)__dst.__r_.__value_.__r.__words + 7);
  HIBYTE(v180[2]) = v59;
  if ((v191[23] & 0x80000000) != 0)
  {
    size_t v60 = *(void **)v191;
LABEL_188:
    operator delete(v60);
  }
LABEL_189:
  if ((sub_35884C(a2) | v158) == 1)
  {
    if (byte_256B9F7 < 0)
    {
      sub_4200(v170, (void *)xmmword_256B9E0, *((unint64_t *)&xmmword_256B9E0 + 1));
    }
    else
    {
      *(_OWORD *)int v170 = xmmword_256B9E0;
      uint64_t v171 = unk_256B9F0;
    }
  }
  else
  {
    HIBYTE(v171) = 0;
    LOBYTE(v170[0]) = 0;
  }
  int v88 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v89 = byte_256B6D7;
  }
  else {
    size_t v89 = qword_256B6C8;
  }
  int v90 = byte_256B6EF;
  if (byte_256B6EF >= 0) {
    size_t v91 = byte_256B6EF;
  }
  else {
    size_t v91 = qword_256B6E0;
  }
  unint64_t v92 = v91 + v89;
  if (v91 + v89 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v92 <= 0x16)
  {
    memset(&v169, 0, sizeof(v169));
    uint64_t v93 = (char *)&v169;
    *((unsigned char *)&v169.__r_.__value_.__s + 23) = v91 + v89;
    if (!v89) {
      goto LABEL_207;
    }
    goto LABEL_203;
  }
  uint64_t v114 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v92 | 7) != 0x17) {
    uint64_t v114 = v92 | 7;
  }
  uint64_t v115 = v114 + 1;
  uint64_t v93 = (char *)operator new(v114 + 1);
  v169.__r_.__value_.__l.__size_ = v91 + v89;
  v169.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  if (v89)
  {
LABEL_203:
    if (v88 >= 0) {
      std::string v94 = &qword_256B6C0;
    }
    else {
      std::string v94 = (uint64_t *)qword_256B6C0;
    }
    memmove(v93, v94, v89);
  }
LABEL_207:
  char v95 = &v93[v89];
  if (v91)
  {
    if (v90 >= 0) {
      std::string::size_type v96 = &qword_256B6D8;
    }
    else {
      std::string::size_type v96 = (uint64_t *)qword_256B6D8;
    }
    memmove(v95, v96, v91);
  }
  v95[v91] = 0;
  if (v171 >= 0) {
    std::string v97 = v170;
  }
  else {
    std::string v97 = (void **)v170[0];
  }
  if (v171 >= 0) {
    std::string::size_type v98 = HIBYTE(v171);
  }
  else {
    std::string::size_type v98 = (std::string::size_type)v170[1];
  }
  int v99 = std::string::append(&v169, (const std::string::value_type *)v97, v98);
  uint64_t v100 = v160;
  long long v101 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v101;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if ((v176 & 0x80u) == 0) {
    uint64_t v102 = (const std::string::value_type *)&v174;
  }
  else {
    uint64_t v102 = (const std::string::value_type *)v174;
  }
  if ((v176 & 0x80u) == 0) {
    std::string::size_type v103 = v176;
  }
  else {
    std::string::size_type v103 = v175;
  }
  uint64_t v104 = std::string::append(&__dst, v102, v103);
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  *(void *)&v191[16] = *((void *)&v104->__r_.__value_.__l + 2);
  *(_OWORD *)size_t v191 = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v106 = &v177;
  }
  else {
    uint64_t v106 = (std::string *)v177.__r_.__value_.__r.__words[0];
  }
  if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v107 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v107 = v177.__r_.__value_.__l.__size_;
  }
  uint64_t v108 = std::string::append((std::string *)v191, (const std::string::value_type *)v106, v107);
  long long v109 = (void *)v108->__r_.__value_.__r.__words[0];
  v194.__r_.__value_.__r.__words[0] = v108->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v108->__r_.__value_.__r.__words[1] + 7);
  char v110 = HIBYTE(v108->__r_.__value_.__r.__words[2]);
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v179) < 0) {
    operator delete(v178);
  }
  int v178 = v109;
  *(void *)&long long v179 = v194.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v179 + 7) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
  HIBYTE(v179) = v110;
  if ((v191[23] & 0x80000000) == 0)
  {
    uint64_t v111 = v161;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_234;
    }
LABEL_242:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_243;
  }
  operator delete(*(void **)v191);
  uint64_t v111 = v161;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_242;
  }
LABEL_234:
  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_235;
  }
LABEL_243:
  operator delete(v169.__r_.__value_.__l.__data_);
LABEL_235:
  int64_t v112 = sub_8D7730(*(void *)(v159 + 8), (uint64_t)&__p);
  if (*((char *)v112 + 23) < 0)
  {
    sub_4200(&v169, (void *)*v112, v112[1]);
  }
  else
  {
    long long v113 = *(_OWORD *)v112;
    v169.__r_.__value_.__r.__words[2] = v112[2];
    *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v113;
  }
  memset(&v194, 0, sizeof(v194));
  uint64_t v116 = (void *)HIBYTE(v180[2]);
  if (SHIBYTE(v180[2]) < 0) {
    uint64_t v116 = v180[1];
  }
  if (v116)
  {
    int v117 = (const std::string *)sub_8D7730(*(void *)(v159 + 8), (uint64_t)v180);
    std::string::operator=(&v194, v117);
  }
  memset(v191, 0, sizeof(v191));
  int v192 = 1065353216;
  sub_6102F0(v159 + 24, (char **)&v178, (uint64_t)v191, *(unsigned __int8 *)(v159 + 2525), (uint64_t)&__dst);
  std::string v168 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v118 = *(void **)&v191[16];
  if (*(void *)&v191[16])
  {
    do
    {
      int v119 = (void *)*v118;
      sub_4F4B48((uint64_t)(v118 + 2));
      operator delete(v118);
      uint64_t v118 = v119;
    }
    while (v119);
  }
  unint64_t v120 = *(void **)v191;
  *(void *)size_t v191 = 0;
  if (v120) {
    operator delete(v120);
  }
  sub_558E28(*(unsigned __int8 *)(a2 + 156), *(unsigned __int8 *)(a2 + 157), *(_DWORD *)(a2 + 88), (uint64_t)v166);
  unint64_t v121 = v167;
  if ((v167 & 0x80u) != 0) {
    unint64_t v121 = (unint64_t)v166[1];
  }
  if (v121)
  {
    memset(v191, 0, sizeof(v191));
    int v192 = 1065353216;
    sub_6102F0(v159 + 24, (char **)v166, (uint64_t)v191, *(unsigned __int8 *)(v159 + 2525), (uint64_t)&__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v122 = &__dst;
    }
    else {
      unint64_t v122 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v123 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v123 = __dst.__r_.__value_.__l.__size_;
    }
    std::string::append(&v168, (const std::string::value_type *)v122, v123);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    int64_t v124 = *(void **)&v191[16];
    if (*(void *)&v191[16])
    {
      do
      {
        uint64_t v125 = (void *)*v124;
        sub_4F4B48((uint64_t)(v124 + 2));
        operator delete(v124);
        int64_t v124 = v125;
      }
      while (v125);
    }
    size_t v126 = *(void **)v191;
    *(void *)size_t v191 = 0;
    if (v126) {
      operator delete(v126);
    }
  }
  if (v157 && !sub_358878(a2))
  {
    int v127 = byte_256B6D7;
    if (byte_256B6D7 >= 0) {
      size_t v128 = byte_256B6D7;
    }
    else {
      size_t v128 = qword_256B6C8;
    }
    int v129 = byte_256B8FF;
    if (byte_256B8FF >= 0) {
      size_t v130 = byte_256B8FF;
    }
    else {
      size_t v130 = qword_256B8F0;
    }
    unint64_t v131 = v130 + v128;
    if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v131 > 0x16)
    {
      uint64_t v154 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17) {
        uint64_t v154 = v131 | 7;
      }
      uint64_t v155 = v154 + 1;
      long long v132 = (char *)operator new(v154 + 1);
      size_t v164 = v130 + v128;
      unint64_t v165 = v155 | 0x8000000000000000;
      uint64_t v163 = v132;
      if (!v128) {
        goto LABEL_283;
      }
    }
    else
    {
      size_t v164 = 0;
      unint64_t v165 = 0;
      uint64_t v163 = 0;
      long long v132 = (char *)&v163;
      HIBYTE(v165) = v130 + v128;
      if (!v128)
      {
LABEL_283:
        std::string v134 = &v132[v128];
        if (v130)
        {
          if (v129 >= 0) {
            int v135 = &qword_256B8E8;
          }
          else {
            int v135 = (uint64_t *)qword_256B8E8;
          }
          memmove(v134, v135, v130);
        }
        v134[v130] = 0;
        memset(v191, 0, sizeof(v191));
        int v192 = 1065353216;
        sub_6102F0(v159 + 24, (char **)&v163, (uint64_t)v191, *(unsigned __int8 *)(v159 + 2525), (uint64_t)&__dst);
        uint64_t v100 = v160;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v136 = &__dst;
        }
        else {
          uint64_t v136 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v137 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v137 = __dst.__r_.__value_.__l.__size_;
        }
        uint64_t v111 = v161;
        std::string::append(&v168, (const std::string::value_type *)v136, v137);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::string::size_type v138 = *(void **)&v191[16];
        if (*(void *)&v191[16])
        {
          do
          {
            int v139 = (void *)*v138;
            sub_4F4B48((uint64_t)(v138 + 2));
            operator delete(v138);
            std::string::size_type v138 = v139;
          }
          while (v139);
        }
        long long v140 = *(void **)v191;
        *(void *)size_t v191 = 0;
        if (v140) {
          operator delete(v140);
        }
        if (SHIBYTE(v165) < 0) {
          operator delete(v163);
        }
        goto LABEL_302;
      }
    }
    if (v127 >= 0) {
      int v133 = &qword_256B6C0;
    }
    else {
      int v133 = (uint64_t *)qword_256B6C0;
    }
    memmove(v132, v133, v128);
    goto LABEL_283;
  }
LABEL_302:
  sub_6582D0(&v169, (uint64_t)v188);
  sub_6582D0(&v194, (uint64_t)v188);
  sub_6582D0(&v168, (uint64_t)v185);
  unint64_t v141 = *(void *)(v111 + 8);
  if (v141 >= *(void *)(v111 + 16))
  {
    *(void *)(v111 + 8) = sub_55C330((char **)v111, (uint64_t)&v169);
    unint64_t v143 = *(void *)(v111 + 168);
    if (v143 >= *(void *)(v111 + 176)) {
      goto LABEL_310;
    }
LABEL_306:
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200((unsigned char *)v143, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v144 = *(_OWORD *)&v194.__r_.__value_.__l.__data_;
      *(void *)(v143 + 16) = *((void *)&v194.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v143 = v144;
    }
    *(void *)(v111 + 168) = v143 + 24;
    *(void *)(v111 + 168) = v143 + 24;
    unint64_t v145 = *(void *)(v111 + 328);
    if (v145 < *(void *)(v111 + 336)) {
      goto LABEL_311;
    }
LABEL_315:
    int v147 = sub_55C330(v100, (uint64_t)&v168);
    goto LABEL_318;
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200(*(unsigned char **)(v111 + 8), v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v142 = *(_OWORD *)&v169.__r_.__value_.__l.__data_;
    *(void *)(v141 + 16) = *((void *)&v169.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v141 = v142;
  }
  *(void *)(v111 + 8) = v141 + 24;
  *(void *)(v111 + 8) = v141 + 24;
  unint64_t v143 = *(void *)(v111 + 168);
  if (v143 < *(void *)(v111 + 176)) {
    goto LABEL_306;
  }
LABEL_310:
  *(void *)(v111 + 168) = sub_55C330(v162, (uint64_t)&v194);
  unint64_t v145 = *(void *)(v111 + 328);
  if (v145 >= *(void *)(v111 + 336)) {
    goto LABEL_315;
  }
LABEL_311:
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)v145, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v146 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
    *(void *)(v145 + 16) = *((void *)&v168.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v145 = v146;
  }
  int v147 = (char *)(v145 + 24);
  *(void *)(v111 + 328) = v145 + 24;
LABEL_318:
  *(void *)(v111 + 328) = v147;
  if (!*(unsigned char *)(a2 + 432)
    || (sub_5F61C0((uint64_t)v162, (uint64_t)&qword_256AAD8, (uint64_t *)(a2 + 424)), !*(unsigned char *)(a2 + 432)))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_5F61C0((uint64_t)v100, (uint64_t)&qword_256AAD8, (uint64_t *)(a2 + 424));
  sub_5F63D0((uint64_t)v100, (uint64_t)&dword_256C268, *(unsigned __int8 *)(a2 + 157));
  if ((char)v167 < 0)
  {
    operator delete(v166[0]);
    if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_322:
      if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_323;
      }
      goto LABEL_336;
    }
  }
  else if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_322;
  }
  operator delete(v168.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_323:
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_324;
    }
    goto LABEL_337;
  }
LABEL_336:
  operator delete(v194.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_324:
    if ((SHIBYTE(v171) & 0x80000000) == 0) {
      goto LABEL_325;
    }
    goto LABEL_338;
  }
LABEL_337:
  operator delete(v169.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v171) & 0x80000000) == 0)
  {
LABEL_325:
    if (((char)v176 & 0x80000000) == 0) {
      goto LABEL_326;
    }
    goto LABEL_339;
  }
LABEL_338:
  operator delete(v170[0]);
  if (((char)v176 & 0x80000000) == 0)
  {
LABEL_326:
    if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_327;
    }
    goto LABEL_340;
  }
LABEL_339:
  operator delete(v174);
  if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_327:
    if ((SHIBYTE(v179) & 0x80000000) == 0) {
      goto LABEL_328;
    }
    goto LABEL_341;
  }
LABEL_340:
  operator delete(v177.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v179) & 0x80000000) == 0)
  {
LABEL_328:
    if ((SHIBYTE(v180[2]) & 0x80000000) == 0) {
      goto LABEL_329;
    }
    goto LABEL_342;
  }
LABEL_341:
  operator delete(v178);
  if ((SHIBYTE(v180[2]) & 0x80000000) == 0)
  {
LABEL_329:
    if ((SHIBYTE(v182) & 0x80000000) == 0) {
      goto LABEL_330;
    }
    goto LABEL_343;
  }
LABEL_342:
  operator delete(v180[0]);
  if ((SHIBYTE(v182) & 0x80000000) == 0)
  {
LABEL_330:
    if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_331;
    }
    goto LABEL_344;
  }
LABEL_343:
  operator delete(__p);
  if ((SHIBYTE(v183.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_331:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_332;
    }
    goto LABEL_345;
  }
LABEL_344:
  operator delete(v183.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_345:
    operator delete(__str.__r_.__value_.__l.__data_);
    long long v148 = (char *)v186;
    if (!(void)v186) {
      goto LABEL_352;
    }
    while (1)
    {
LABEL_349:
      int v149 = *(char **)v148;
      if (v148[63] < 0)
      {
        operator delete(*((void **)v148 + 5));
        if ((v148[39] & 0x80000000) == 0) {
          goto LABEL_348;
        }
LABEL_351:
        operator delete(*((void **)v148 + 2));
        operator delete(v148);
        long long v148 = v149;
        if (!v149) {
          goto LABEL_352;
        }
      }
      else
      {
        if (v148[39] < 0) {
          goto LABEL_351;
        }
LABEL_348:
        operator delete(v148);
        long long v148 = v149;
        if (!v149) {
          goto LABEL_352;
        }
      }
    }
  }
LABEL_332:
  long long v148 = (char *)v186;
  if ((void)v186) {
    goto LABEL_349;
  }
LABEL_352:
  std::string::size_type v150 = v185[0];
  v185[0] = 0;
  if (v150) {
    operator delete(v150);
  }
  std::string::size_type v151 = (char *)v189;
  if ((void)v189)
  {
    while (1)
    {
      long long v152 = *(char **)v151;
      if (v151[63] < 0)
      {
        operator delete(*((void **)v151 + 5));
        if ((v151[39] & 0x80000000) == 0) {
          goto LABEL_357;
        }
LABEL_360:
        operator delete(*((void **)v151 + 2));
        operator delete(v151);
        std::string::size_type v151 = v152;
        if (!v152) {
          break;
        }
      }
      else
      {
        if (v151[39] < 0) {
          goto LABEL_360;
        }
LABEL_357:
        operator delete(v151);
        std::string::size_type v151 = v152;
        if (!v152) {
          break;
        }
      }
    }
  }
  long long v153 = v188[0];
  v188[0] = 0;
  if (v153) {
    operator delete(v153);
  }
}

void sub_555748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a43 < 0)
  {
    operator delete(a38);
    if (a49 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a55 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (a49 < 0)
  {
    goto LABEL_3;
  }
  if ((a55 & 0x80000000) == 0)
  {
LABEL_4:
    if (a61 < 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a50);
  if (a61 < 0)
  {
LABEL_5:
    operator delete(a56);
    if ((a67 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  if ((a67 & 0x80000000) == 0)
  {
LABEL_6:
    if (a72 < 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a62);
  if (a72 < 0)
  {
LABEL_7:
    operator delete(a68);
    if ((a74 & 0x80000000) == 0)
    {
LABEL_16:
      sub_50828((uint64_t)&a75);
      sub_50828((uint64_t)&a76);
      sub_5419D4(a13);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(a73);
    goto LABEL_16;
  }
LABEL_14:
  if ((a74 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t sub_555C2C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (sub_64F5D0((uint64_t)a2) >= a5)
  {
    uint64_t v15 = sub_64F5D0((uint64_t)a2) - a5;
    if (a7 != 1) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t result = sub_64F5D0((uint64_t)a2);
    a4 = *(void *)(a1 + 2240);
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  if (a7 == 1) {
    goto LABEL_8;
  }
LABEL_3:
  if (a6 < 1)
  {
    a4 = 0;
  }
  else
  {
    int v16 = sub_652F8C(a2, a3, a4, v14);
    if (v16 <= a6)
    {
      if (a3)
      {
        int v18 = v16;
        --a3;
        do
        {
          if (v18 >= a6) {
            break;
          }
          uint64_t v20 = sub_46CCC8(a2, a3, v17);
          int v22 = sub_652F8C(a2, a3, v20, v21);
          if (v22 + v18 > a6) {
            goto LABEL_6;
          }
          a4 += v20;
          --a3;
          v18 += v22;
        }
        while (a3 != -1);
      }
    }
    else
    {
      a4 = 0;
      int v18 = 0;
LABEL_6:
      a4 += sub_653138(a2, a3, a6 - v18, v17);
    }
  }
  uint64_t result = sub_64F5D0((uint64_t)a2);
LABEL_16:
  if (a4 + v15 < result) {
    return a4 + v15;
  }
  return result;
}

uint64_t sub_555D6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  size_t v11 = (void *)a2;
  uint64_t v42 = sub_64F5D0(a2);
  if (a7 == 1)
  {
    uint64_t v13 = *(void *)(a1 + 2216);
  }
  else
  {
    uint64_t v13 = 0;
    if (sub_46C760(v11) <= a3 || (int)a6 < 1) {
      goto LABEL_19;
    }
    uint64_t v13 = sub_46CCC8(v11, a3, v14) - a4;
    int v16 = sub_652F8C(v11, a3, v13, v15);
    if (v16 <= (int)a6)
    {
      int v19 = v16;
      if (a3 + 1 >= sub_46C760(v11) || v19 >= (int)a6) {
        goto LABEL_19;
      }
      int v21 = v19;
      uint64_t v22 = 0;
      while (1)
      {
        unint64_t v23 = a3;
        uint64_t v24 = a6;
        uint64_t v25 = a3 + v22;
        a3 += v22 + 1;
        int v26 = v21;
        uint64_t v27 = sub_46CCC8(v11, a3, v20);
        BOOL v29 = __CFADD__(v22++, 1);
        uint64_t v30 = a4;
        uint64_t v31 = v29 ? a4 : 0;
        uint64_t v32 = v27 - v31;
        int v33 = sub_652F8C(v11, a3, v27 - v31, v28);
        int v18 = v26;
        int v34 = v33 + v26;
        size_t v35 = v11;
        uint64_t v36 = v24;
        if (v34 > (int)v24) {
          break;
        }
        v13 += v32;
        uint64_t v37 = v35;
        if (v25 + 2 < sub_46C760(v35))
        {
          int v21 = v34;
          a6 = v36;
          BOOL v38 = v34 < (int)v36;
          a4 = v30;
          a3 = v23;
          size_t v11 = v37;
          if (v38) {
            continue;
          }
        }
        goto LABEL_19;
      }
      LODWORD(a6) = v24;
      size_t v11 = v35;
    }
    else
    {
      int v18 = 0;
      uint64_t v13 = 0;
    }
    v13 += sub_653138(v11, a3, (int)a6 - v18, v17);
  }
LABEL_19:
  uint64_t v39 = (v42 - a5) & ~((v42 - a5) >> 63);
  BOOL v38 = v39 < v13;
  uint64_t v40 = v39 - v13;
  if (v38) {
    return 0;
  }
  else {
    return v40;
  }
}

void sub_555F20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  sub_5F3B34(a3 + 160);
  uint64_t v86 = (char **)(a3 + 160);
  sub_5F3B34(a3 + 320);
  sub_5F3B34(a3 + 480);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "BannerHead_One_Area_Incident");
  size_t v7 = sub_8D7730(v6, (uint64_t)__p);
  if (*((char *)v7 + 23) < 0)
  {
    sub_4200(&v96, (void *)*v7, v7[1]);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v96.__r_.__value_.__r.__words[2] = v7[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v8;
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v87 = (const std::string::value_type *)(a2 + 440);
  int64_t size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &v96;
  }
  else {
    int v10 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (byte_256B3A7 >= 0) {
    size_t v11 = &qword_256B390;
  }
  else {
    size_t v11 = (uint64_t *)qword_256B390;
  }
  if (byte_256B3A7 >= 0) {
    int64_t v12 = byte_256B3A7;
  }
  else {
    int64_t v12 = unk_256B398;
  }
  if (v12)
  {
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = v96.__r_.__value_.__l.__size_;
    }
    if (size >= v12)
    {
      uint64_t v13 = (char *)v10 + size;
      int v14 = *(char *)v11;
      double v15 = v10;
      do
      {
        int64_t v16 = size - v12;
        if (v16 == -1) {
          break;
        }
        double v17 = (char *)memchr(v15, v14, v16 + 1);
        if (!v17) {
          break;
        }
        int v18 = v17;
        if (!memcmp(v17, v11, v12))
        {
          if (v18 != v13)
          {
            std::string::size_type v19 = v18 - (char *)v10;
            if (v18 - (char *)v10 != -1) {
              goto LABEL_26;
            }
          }
          break;
        }
        double v15 = (std::string *)(v18 + 1);
        int64_t size = v13 - (v18 + 1);
      }
      while (size >= v12);
    }
  }
  else
  {
    std::string::size_type v19 = 0;
LABEL_26:
    char v20 = *(unsigned char *)(a2 + 463);
    if (v20 >= 0) {
      int v21 = (const std::string::value_type *)(a2 + 440);
    }
    else {
      int v21 = *(const std::string::value_type **)(a2 + 440);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 463);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 448);
    }
    std::string::replace(&v96, v19, v12, v21, v22);
  }
  unint64_t v23 = *(void *)(a3 + 8);
  if (v23 >= *(void *)(a3 + 16))
  {
    uint64_t v25 = sub_55C330((char **)a3, (uint64_t)&v96);
  }
  else
  {
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 8), v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v24 = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
      *(void *)(v23 + 16) = *((void *)&v96.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v23 = v24;
    }
    uint64_t v25 = (char *)(v23 + 24);
    *(void *)(a3 + 8) = v23 + 24;
  }
  *(void *)(a3 + 8) = v25;
  if (!*(unsigned char *)(a2 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v26 = *(unsigned __int8 *)(a2 + 871);
  if ((v26 & 0x80u) != 0) {
    uint64_t v26 = *(void *)(a2 + 856);
  }
  if (!v26)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      uint64_t v40 = sub_188FC78(__p, (uint64_t)"Empty localized area incident source for area incident: ", 56);
      int v41 = *(char *)(a2 + 63);
      if (v41 >= 0) {
        uint64_t v42 = a2 + 40;
      }
      else {
        uint64_t v42 = *(void *)(a2 + 40);
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a2 + 63);
      }
      else {
        uint64_t v43 = *(void *)(a2 + 48);
      }
      sub_188FC78(v40, v42, v43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__dst, 3u);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v95 < 0) {
        operator delete(v94);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    unint64_t v44 = *(void *)(a3 + 168);
    if (v44 >= *(void *)(a3 + 176))
    {
      int v64 = sub_55C330(v86, (uint64_t)&v96);
    }
    else
    {
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 168), v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v45 = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
        *(void *)(v44 + 16) = *((void *)&v96.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v44 = v45;
      }
      int v64 = (char *)(v44 + 24);
      *(void *)(a3 + 168) = v44 + 24;
    }
    *(void *)(a3 + 168) = v64;
    goto LABEL_127;
  }
  uint64_t v85 = a2;
  uint64_t v27 = a1;
  int v28 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v29 = byte_256B6A7;
  }
  else {
    size_t v29 = qword_256B698;
  }
  int v30 = byte_256B707;
  if (byte_256B707 >= 0) {
    size_t v31 = byte_256B707;
  }
  else {
    size_t v31 = qword_256B6F8;
  }
  unint64_t v32 = v31 + v29;
  if (v31 + v29 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v33 = *(void *)(v27 + 8);
  if (v32 > 0x16)
  {
    uint64_t v46 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v46 = v32 | 7;
    }
    uint64_t v47 = v46 + 1;
    p_dst = (std::string *)operator new(v46 + 1);
    __dst.__r_.__value_.__l.__size_ = v31 + v29;
    __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    if (!v29) {
      goto LABEL_56;
    }
    goto LABEL_52;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v31 + v29;
  if (v29)
  {
LABEL_52:
    if (v28 >= 0) {
      size_t v35 = &qword_256B690;
    }
    else {
      size_t v35 = (uint64_t *)qword_256B690;
    }
    memmove(p_dst, v35, v29);
  }
LABEL_56:
  uint64_t v36 = (char *)p_dst + v29;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v37 = &qword_256B6F0;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_256B6F0;
    }
    memmove(v36, v37, v31);
  }
  v36[v31] = 0;
  BOOL v38 = sub_8D7730(v33, (uint64_t)&__dst);
  a1 = v27;
  a2 = v85;
  if (*((char *)v38 + 23) < 0)
  {
    sub_4200(__p, (void *)*v38, v38[1]);
  }
  else
  {
    long long v39 = *(_OWORD *)v38;
    *(void *)&__p[16] = v38[2];
    *(_OWORD *)std::string __p = v39;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v48 = __p[23];
  if (__p[23] >= 0) {
    size_t v49 = __p;
  }
  else {
    size_t v49 = *(unsigned char **)__p;
  }
  if (byte_256B3EF >= 0) {
    unint64_t v50 = &xmmword_256B3D8;
  }
  else {
    unint64_t v50 = (long long *)xmmword_256B3D8;
  }
  if (byte_256B3EF >= 0) {
    int64_t v51 = byte_256B3EF;
  }
  else {
    int64_t v51 = *((void *)&xmmword_256B3D8 + 1);
  }
  if (v51)
  {
    if (__p[23] < 0) {
      uint64_t v48 = *(void *)&__p[8];
    }
    if (v48 >= v51)
    {
      long long v52 = &v49[v48];
      int v53 = *(char *)v50;
      char v54 = v49;
      do
      {
        uint64_t v55 = v48 - v51;
        if (v55 == -1) {
          break;
        }
        std::string::size_type v56 = (char *)memchr(v54, v53, v55 + 1);
        if (!v56) {
          break;
        }
        long long v57 = v56;
        if (!memcmp(v56, v50, v51))
        {
          if (v57 != v52)
          {
            std::string::size_type v58 = v57 - v49;
            if (v57 - v49 != -1) {
              goto LABEL_105;
            }
          }
          break;
        }
        char v54 = v57 + 1;
        uint64_t v48 = v52 - (v57 + 1);
      }
      while (v48 >= v51);
    }
  }
  else
  {
    std::string::size_type v58 = 0;
LABEL_105:
    int v59 = *(char *)(v85 + 871);
    if (v59 >= 0) {
      size_t v60 = (const std::string::value_type *)(v85 + 848);
    }
    else {
      size_t v60 = *(const std::string::value_type **)(v85 + 848);
    }
    if (v59 >= 0) {
      std::string::size_type v61 = *(unsigned __int8 *)(v85 + 871);
    }
    else {
      std::string::size_type v61 = *(void *)(v85 + 856);
    }
    std::string::replace((std::string *)__p, v58, v51, v60, v61);
  }
  unint64_t v62 = *(void *)(a3 + 168);
  if (v62 >= *(void *)(a3 + 176))
  {
    *(void *)(a3 + 168) = sub_55C330(v86, (uint64_t)__p);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_120;
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    sub_4200(*(unsigned char **)(a3 + 168), *(void **)__p, *(unint64_t *)&__p[8]);
  }
  else
  {
    long long v63 = *(_OWORD *)__p;
    *(void *)(v62 + 16) = *(void *)&__p[16];
    *(_OWORD *)unint64_t v62 = v63;
  }
  *(void *)(a3 + 168) = v62 + 24;
  *(void *)(a3 + 168) = v62 + 24;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_120:
  }
    operator delete(*(void **)__p);
LABEL_127:
  int v88 = operator new(0x20uLL);
  long long v89 = xmmword_20B91B0;
  strcpy((char *)v88, "VoiceAlert_One_Area_Incident");
  memset(__p, 0, sizeof(__p));
  int v93 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v88, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&__dst);
  std::string v91 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  size_t v65 = *(void **)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      int v66 = (void *)*v65;
      sub_4F4B48((uint64_t)(v65 + 2));
      operator delete(v65);
      size_t v65 = v66;
    }
    while (v66);
  }
  size_t v67 = *(void **)__p;
  *(void *)std::string __p = 0;
  if (v67) {
    operator delete(v67);
  }
  if (SHIBYTE(v89) < 0) {
    operator delete(v88);
  }
  int64_t v68 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v69 = &v91;
  }
  else {
    uint64_t v69 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  if (byte_256B3A7 >= 0) {
    uint64_t v70 = &qword_256B390;
  }
  else {
    uint64_t v70 = (uint64_t *)qword_256B390;
  }
  if (byte_256B3A7 >= 0) {
    int64_t v71 = byte_256B3A7;
  }
  else {
    int64_t v71 = unk_256B398;
  }
  if (v71)
  {
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v68 = v91.__r_.__value_.__l.__size_;
    }
    if (v68 >= v71)
    {
      unint64_t v72 = (char *)v69 + v68;
      int v73 = *(char *)v70;
      std::string::size_type v74 = v69;
      do
      {
        int64_t v75 = v68 - v71;
        if (v75 == -1) {
          break;
        }
        long long v76 = (char *)memchr(v74, v73, v75 + 1);
        if (!v76) {
          break;
        }
        uint64_t v77 = v76;
        if (!memcmp(v76, v70, v71))
        {
          if (v77 != v72)
          {
            std::string::size_type v78 = v77 - (char *)v69;
            if (v77 - (char *)v69 != -1) {
              goto LABEL_153;
            }
          }
          break;
        }
        std::string::size_type v74 = (std::string *)(v77 + 1);
        int64_t v68 = v72 - (v77 + 1);
      }
      while (v68 >= v71);
    }
  }
  else
  {
    std::string::size_type v78 = 0;
LABEL_153:
    char v79 = *(unsigned char *)(a2 + 463);
    if (v79 >= 0) {
      long long v80 = v87;
    }
    else {
      long long v80 = *(const std::string::value_type **)(a2 + 440);
    }
    if (v79 >= 0) {
      std::string::size_type v81 = *(unsigned __int8 *)(a2 + 463);
    }
    else {
      std::string::size_type v81 = *(void *)(a2 + 448);
    }
    std::string::replace(&v91, v78, v71, v80, v81);
  }
  unint64_t v82 = *(void *)(a3 + 328);
  if (v82 >= *(void *)(a3 + 336))
  {
    *(void *)(a3 + 328) = sub_55C330((char **)(a3 + 320), (uint64_t)&v91);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_168;
    }
  }
  else
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 328), v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v83 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
      *(void *)(v82 + 16) = *((void *)&v91.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v82 = v83;
    }
    *(void *)(a3 + 328) = v82 + 24;
    *(void *)(a3 + 328) = v82 + 24;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_168:
      operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_169;
      }
      return;
    }
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
LABEL_169:
  }
    operator delete(v96.__r_.__value_.__l.__data_);
}

void sub_556838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v41 + 168) = v42;
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }
  sub_5419D4(v41);
  _Unwind_Resume(a1);
}

void sub_5569A0(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  sub_5F3B34(a4 + 160);
  sub_5F3B34(a4 + 320);
  sub_5F3B34(a4 + 480);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  unint64_t v10 = v9 - v8 - 1120;
  if (v10 < 0x460)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a2;
    do
    {
LABEL_12:
      if (!*(_DWORD *)(v12 + 88)) {
        ++v11;
      }
      v12 += 1120;
    }
    while (v12 != v9);
    goto LABEL_15;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = v10 / 0x460 + 1;
  uint64_t v12 = v8 + 1120 * (v15 & 0x7FFFFFFFFFFFFELL);
  uint64_t v16 = v15 & 0x7FFFFFFFFFFFFELL;
  uint64_t v17 = *a2;
  do
  {
    if (!*(_DWORD *)(v17 + 88)) {
      ++v13;
    }
    if (!*(_DWORD *)(v17 + 1208)) {
      ++v14;
    }
    v17 += 2240;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v14 + v13;
  if (v15 != (v15 & 0x7FFFFFFFFFFFFELL)) {
    goto LABEL_12;
  }
LABEL_15:
  unint64_t v18 = 0xAF8AF8AF8AF8AF8BLL * ((v9 - v8) >> 5);
  uint64_t v19 = 363;
  if (v18 == v11) {
    uint64_t v19 = 345;
  }
  char v20 = &xmmword_256B7C8;
  if (v18 == v11) {
    char v20 = (long long *)&dword_256B738;
  }
  int v21 = &byte_256B7DF;
  if (v18 == v11) {
    int v21 = &byte_256B74F;
  }
  if (*v21 < 0)
  {
    std::string::size_type v22 = (void *)qword_256AC70[v19];
    unint64_t v23 = (unint64_t *)&unk_256B740;
    if (v18 != v11) {
      unint64_t v23 = (unint64_t *)&xmmword_256B7C8 + 1;
    }
    sub_4200(&v130, v22, *v23);
  }
  else
  {
    long long v130 = *v20;
    uint64_t v131 = *((void *)v20 + 2);
  }
  int v107 = a3;
  sub_503BC8(v18, (const void **)&v130, *(_DWORD *)(a1 + 3496), v18 == v11, &v127);
  int v24 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v25 = byte_256B68F;
  }
  else {
    size_t v25 = qword_256B680;
  }
  int v26 = (char)v129;
  if ((v129 & 0x80u) == 0) {
    size_t v27 = v129;
  }
  else {
    size_t v27 = v128;
  }
  unint64_t v28 = v27 + v25;
  if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v28 <= 0x16)
  {
    *(void *)&long long v113 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v113) = v27 + v25;
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v69 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v28 | 7) != 0x17) {
    uint64_t v69 = v28 | 7;
  }
  uint64_t v70 = v69 + 1;
  p_dst = (long long *)operator new(v69 + 1);
  *((void *)&__dst + 1) = v27 + v25;
  *(void *)&long long v113 = v70 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v25)
  {
LABEL_35:
    if (v24 >= 0) {
      int v30 = &qword_256B678;
    }
    else {
      int v30 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v30, v25);
  }
LABEL_39:
  uint64_t v108 = a1;
  size_t v31 = (char *)p_dst + v25;
  if (v27)
  {
    if (v26 >= 0) {
      unint64_t v32 = (void **)&v127;
    }
    else {
      unint64_t v32 = v127;
    }
    memmove(v31, v32, v27);
  }
  v31[v27] = 0;
  if (byte_256B857 >= 0) {
    uint64_t v33 = (const std::string::value_type *)&xmmword_256B840;
  }
  else {
    uint64_t v33 = (const std::string::value_type *)xmmword_256B840;
  }
  if (byte_256B857 >= 0) {
    std::string::size_type v34 = byte_256B857;
  }
  else {
    std::string::size_type v34 = *((void *)&xmmword_256B840 + 1);
  }
  size_t v35 = std::string::append((std::string *)&__dst, v33, v34);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  std::string::size_type v126 = v35->__r_.__value_.__r.__words[2];
  long long v125 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v113) < 0) {
    operator delete((void *)__dst);
  }
  int v37 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v38 = byte_256B6A7;
  }
  else {
    size_t v38 = qword_256B698;
  }
  int v39 = byte_2569F67;
  if (byte_2569F67 >= 0) {
    size_t v40 = byte_2569F67;
  }
  else {
    size_t v40 = qword_2569F58;
  }
  unint64_t v41 = v40 + v38;
  if (v40 + v38 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v41 <= 0x16)
  {
    memset(&v115, 0, sizeof(v115));
    uint64_t v42 = (char *)&v115;
    *((unsigned char *)&v115.__r_.__value_.__s + 23) = v40 + v38;
    if (!v38) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  uint64_t v71 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v41 | 7) != 0x17) {
    uint64_t v71 = v41 | 7;
  }
  uint64_t v72 = v71 + 1;
  uint64_t v42 = (char *)operator new(v71 + 1);
  v115.__r_.__value_.__l.__size_ = v40 + v38;
  v115.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  if (v38)
  {
LABEL_61:
    if (v37 >= 0) {
      uint64_t v43 = &qword_256B690;
    }
    else {
      uint64_t v43 = (uint64_t *)qword_256B690;
    }
    memmove(v42, v43, v38);
  }
LABEL_65:
  unint64_t v44 = &v42[v38];
  if (v40)
  {
    if (v39 >= 0) {
      long long v45 = &qword_2569F50;
    }
    else {
      long long v45 = (uint64_t *)qword_2569F50;
    }
    memmove(v44, v45, v40);
  }
  v44[v40] = 0;
  if (byte_256B6EF >= 0) {
    uint64_t v46 = (const std::string::value_type *)&qword_256B6D8;
  }
  else {
    uint64_t v46 = (const std::string::value_type *)qword_256B6D8;
  }
  if (byte_256B6EF >= 0) {
    std::string::size_type v47 = byte_256B6EF;
  }
  else {
    std::string::size_type v47 = qword_256B6E0;
  }
  uint64_t v48 = std::string::append(&v115, v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(void *)&long long v113 = *((void *)&v48->__r_.__value_.__l + 2);
  long long __dst = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (byte_256B857 >= 0) {
    unint64_t v50 = (const std::string::value_type *)&xmmword_256B840;
  }
  else {
    unint64_t v50 = (const std::string::value_type *)xmmword_256B840;
  }
  if (byte_256B857 >= 0) {
    std::string::size_type v51 = byte_256B857;
  }
  else {
    std::string::size_type v51 = *((void *)&xmmword_256B840 + 1);
  }
  long long v52 = std::string::append((std::string *)&__dst, v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  std::string::size_type v124 = v52->__r_.__value_.__r.__words[2];
  long long v123 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v113) < 0)
  {
    operator delete((void *)__dst);
    uint64_t v106 = a2;
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v106 = a2;
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_84;
    }
  }
  operator delete(v115.__r_.__value_.__l.__data_);
LABEL_84:
  int v54 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v55 = byte_256B6D7;
  }
  else {
    size_t v55 = qword_256B6C8;
  }
  int v56 = (char)v129;
  if ((v129 & 0x80u) == 0) {
    size_t v57 = v129;
  }
  else {
    size_t v57 = v128;
  }
  unint64_t v58 = v57 + v55;
  if (v57 + v55 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v58 <= 0x16)
  {
    *(void *)&long long v113 = 0;
    long long __dst = 0uLL;
    int v59 = &__dst;
    BYTE7(v113) = v57 + v55;
    if (!v55) {
      goto LABEL_97;
    }
    goto LABEL_93;
  }
  uint64_t v73 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v58 | 7) != 0x17) {
    uint64_t v73 = v58 | 7;
  }
  uint64_t v74 = v73 + 1;
  int v59 = (long long *)operator new(v73 + 1);
  *((void *)&__dst + 1) = v57 + v55;
  *(void *)&long long v113 = v74 | 0x8000000000000000;
  *(void *)&long long __dst = v59;
  if (v55)
  {
LABEL_93:
    if (v54 >= 0) {
      size_t v60 = &qword_256B6C0;
    }
    else {
      size_t v60 = (uint64_t *)qword_256B6C0;
    }
    memmove(v59, v60, v55);
  }
LABEL_97:
  std::string::size_type v61 = (char *)v59 + v55;
  if (v57)
  {
    if (v56 >= 0) {
      unint64_t v62 = (void **)&v127;
    }
    else {
      unint64_t v62 = v127;
    }
    memmove(v61, v62, v57);
  }
  v61[v57] = 0;
  if (byte_256B857 >= 0) {
    long long v63 = (const std::string::value_type *)&xmmword_256B840;
  }
  else {
    long long v63 = (const std::string::value_type *)xmmword_256B840;
  }
  if (byte_256B857 >= 0) {
    std::string::size_type v64 = byte_256B857;
  }
  else {
    std::string::size_type v64 = *((void *)&xmmword_256B840 + 1);
  }
  size_t v65 = std::string::append((std::string *)&__dst, v63, v64);
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  std::string::size_type v122 = v65->__r_.__value_.__r.__words[2];
  long long v121 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v113) < 0) {
    operator delete((void *)__dst);
  }
  size_t v67 = sub_8D7730(*(void *)(a1 + 8), (uint64_t)&v125);
  if (*((char *)v67 + 23) < 0)
  {
    sub_4200(&v119, (void *)*v67, v67[1]);
  }
  else
  {
    long long v68 = *(_OWORD *)v67;
    uint64_t v120 = v67[2];
    long long v119 = v68;
  }
  int64_t v75 = sub_8D7730(*(void *)(a1 + 8), (uint64_t)&v123);
  if (*((char *)v75 + 23) < 0)
  {
    sub_4200(&v117, (void *)*v75, v75[1]);
  }
  else
  {
    long long v76 = *(_OWORD *)v75;
    uint64_t v118 = v75[2];
    long long v117 = v76;
  }
  long long __dst = 0u;
  long long v113 = 0u;
  int v114 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v121, (uint64_t)&__dst, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v115);
  std::string v116 = v115;
  memset(&v115, 0, sizeof(v115));
  uint64_t v77 = (void *)v113;
  if ((void)v113)
  {
    do
    {
      std::string::size_type v78 = (void *)*v77;
      sub_4F4B48((uint64_t)(v77 + 2));
      operator delete(v77);
      uint64_t v77 = v78;
    }
    while (v78);
  }
  char v79 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v79) {
    operator delete(v79);
  }
  if (!v107) {
    goto LABEL_166;
  }
  int v80 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v81 = byte_256B6D7;
  }
  else {
    size_t v81 = qword_256B6C8;
  }
  int v82 = byte_256B8FF;
  if (byte_256B8FF >= 0) {
    size_t v83 = byte_256B8FF;
  }
  else {
    size_t v83 = qword_256B8F0;
  }
  unint64_t v84 = v83 + v81;
  if (v83 + v81 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v84 <= 0x16)
  {
    size_t v110 = 0;
    unint64_t v111 = 0;
    std::string __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v111) = v83 + v81;
    if (!v81) {
      goto LABEL_148;
    }
    goto LABEL_144;
  }
  uint64_t v97 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v84 | 7) != 0x17) {
    uint64_t v97 = v84 | 7;
  }
  uint64_t v98 = v97 + 1;
  p_p = (char *)operator new(v97 + 1);
  size_t v110 = v83 + v81;
  unint64_t v111 = v98 | 0x8000000000000000;
  std::string __p = p_p;
  if (v81)
  {
LABEL_144:
    if (v80 >= 0) {
      uint64_t v86 = &qword_256B6C0;
    }
    else {
      uint64_t v86 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_p, v86, v81);
  }
LABEL_148:
  uint64_t v87 = &p_p[v81];
  if (v83)
  {
    if (v82 >= 0) {
      int v88 = &qword_256B8E8;
    }
    else {
      int v88 = (uint64_t *)qword_256B8E8;
    }
    memmove(v87, v88, v83);
  }
  v87[v83] = 0;
  long long __dst = 0u;
  long long v113 = 0u;
  int v114 = 1065353216;
  sub_6102F0(v108 + 24, (char **)&__p, (uint64_t)&__dst, *(unsigned __int8 *)(v108 + 2525), (uint64_t)&v115);
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v89 = &v115;
  }
  else {
    long long v89 = (std::string *)v115.__r_.__value_.__r.__words[0];
  }
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v115.__r_.__value_.__l.__size_;
  }
  std::string::append(&v116, (const std::string::value_type *)v89, size);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  std::string v91 = (void *)v113;
  if ((void)v113)
  {
    do
    {
      unint64_t v92 = (void *)*v91;
      sub_4F4B48((uint64_t)(v91 + 2));
      operator delete(v91);
      std::string v91 = v92;
    }
    while (v92);
  }
  int v93 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v93) {
    operator delete(v93);
  }
  if (SHIBYTE(v111) < 0)
  {
    operator delete(__p);
    unint64_t v94 = *(void *)(a4 + 8);
    if (v94 < *(void *)(a4 + 16)) {
      goto LABEL_167;
    }
LABEL_176:
    int v99 = sub_55C330((char **)a4, (uint64_t)&v119);
    char v95 = (char **)(a4 + 160);
    goto LABEL_177;
  }
LABEL_166:
  unint64_t v94 = *(void *)(a4 + 8);
  if (v94 >= *(void *)(a4 + 16)) {
    goto LABEL_176;
  }
LABEL_167:
  char v95 = (char **)(a4 + 160);
  if (SHIBYTE(v120) < 0)
  {
    sub_4200((unsigned char *)v94, (void *)v119, *((unint64_t *)&v119 + 1));
  }
  else
  {
    long long v96 = v119;
    *(void *)(v94 + 16) = v120;
    *(_OWORD *)unint64_t v94 = v96;
  }
  int v99 = (char *)(v94 + 24);
  *(void *)(a4 + 8) = v94 + 24;
LABEL_177:
  *(void *)(a4 + 8) = v99;
  unint64_t v100 = *(void *)(a4 + 168);
  if (v100 >= *(void *)(a4 + 176))
  {
    *(void *)(a4 + 168) = sub_55C330(v95, (uint64_t)&v117);
    unint64_t v102 = *(void *)(a4 + 328);
    if (v102 >= *(void *)(a4 + 336))
    {
LABEL_185:
      uint64_t v104 = sub_55C330((char **)(a4 + 320), (uint64_t)&v116);
      goto LABEL_188;
    }
  }
  else
  {
    if (SHIBYTE(v118) < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 168), (void *)v117, *((unint64_t *)&v117 + 1));
    }
    else
    {
      long long v101 = v117;
      *(void *)(v100 + 16) = v118;
      *(_OWORD *)unint64_t v100 = v101;
    }
    *(void *)(a4 + 168) = v100 + 24;
    *(void *)(a4 + 168) = v100 + 24;
    unint64_t v102 = *(void *)(a4 + 328);
    if (v102 >= *(void *)(a4 + 336)) {
      goto LABEL_185;
    }
  }
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)v102, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v103 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    *(void *)(v102 + 16) = *((void *)&v116.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v102 = v103;
  }
  uint64_t v104 = (char *)(v102 + 24);
  *(void *)(a4 + 328) = v102 + 24;
LABEL_188:
  *(void *)(a4 + 328) = v104;
  if (!*(unsigned char *)(*v106 + 432))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_5F61C0((uint64_t)v95, (uint64_t)&qword_256AAD8, (uint64_t *)(*v106 + 424));
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v116.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v118) & 0x80000000) == 0)
    {
LABEL_191:
      if ((SHIBYTE(v120) & 0x80000000) == 0) {
        goto LABEL_192;
      }
      goto LABEL_200;
    }
  }
  else if ((SHIBYTE(v118) & 0x80000000) == 0)
  {
    goto LABEL_191;
  }
  operator delete((void *)v117);
  if ((SHIBYTE(v120) & 0x80000000) == 0)
  {
LABEL_192:
    if ((SHIBYTE(v122) & 0x80000000) == 0) {
      goto LABEL_193;
    }
    goto LABEL_201;
  }
LABEL_200:
  operator delete((void *)v119);
  if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
LABEL_193:
    if ((SHIBYTE(v124) & 0x80000000) == 0) {
      goto LABEL_194;
    }
    goto LABEL_202;
  }
LABEL_201:
  operator delete((void *)v121);
  if ((SHIBYTE(v124) & 0x80000000) == 0)
  {
LABEL_194:
    if ((SHIBYTE(v126) & 0x80000000) == 0) {
      goto LABEL_195;
    }
    goto LABEL_203;
  }
LABEL_202:
  operator delete((void *)v123);
  if ((SHIBYTE(v126) & 0x80000000) == 0)
  {
LABEL_195:
    if (((char)v129 & 0x80000000) == 0) {
      goto LABEL_196;
    }
    goto LABEL_204;
  }
LABEL_203:
  operator delete((void *)v125);
  if (((char)v129 & 0x80000000) == 0)
  {
LABEL_196:
    if ((SHIBYTE(v131) & 0x80000000) == 0) {
      return;
    }
LABEL_205:
    operator delete((void *)v130);
    return;
  }
LABEL_204:
  operator delete(v127);
  if (SHIBYTE(v131) < 0) {
    goto LABEL_205;
  }
}