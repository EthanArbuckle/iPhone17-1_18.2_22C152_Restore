uint64_t sub_478614(uint64_t result, int a2)
{
  void *exception;
  void *v3;
  long long v4;

  if ((a2 + 1) >= (unint64_t)((uint64_t)(*(void *)(result + 56) - *(void *)(result + 48)) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_478694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_4786C4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a1 == a2) {
    return 1;
  }
  v7 = a1;
  while (1)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = *a4;
    v10 = sub_29BA30(*(uint64_t **)(a3 + 16), *(void *)(*v7 + 16));
    uint64_t v11 = *(unsigned int *)(v8 + 24);
    sub_478614((uint64_t)(v10 + 3), v11);
    v12 = (_DWORD *)(v10[12] + 4 * *(unsigned int *)(v10[9] + 4 * v11));
    sub_478614((uint64_t)(v10 + 3), v11);
    uint64_t v13 = v10[9];
    uint64_t v14 = v10[12] + 4 * *(unsigned int *)(v13 + 4 * (v11 + 1));
    BOOL result = v12 != (_DWORD *)v14;
    if (v12 == (_DWORD *)v14) {
      return result;
    }
    uint64_t v16 = v10[10] - v13;
    unint64_t v17 = v16 >> 2;
    unint64_t v18 = ((unint64_t)v16 >> 2) - 1;
    uint64_t v19 = v10[15];
    if (v18 > (v10[16] - v19) >> 3)
    {
      if (v17 > (*v12 + 1))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        *(void *)&v25[0] = operator new(0x28uLL);
        *(long long *)((char *)v25 + 8) = xmmword_20B93A0;
        strcpy(*(char **)&v25[0], "no or incomplete vertex data stored");
        v22 = (void *)sub_2F404((uint64_t)exception, v25);
      }
LABEL_14:
      v23 = __cxa_allocate_exception(0x40uLL);
      strcpy((char *)v25, "vertex id out of range");
      BYTE7(v25[1]) = 22;
      v24 = (void *)sub_2F404((uint64_t)v23, v25);
    }
    while (1)
    {
      uint64_t v20 = *v12;
      if (v17 <= (v20 + 1)) {
        goto LABEL_14;
      }
      if (*(void *)(v19 + 8 * v20) == v9) {
        break;
      }
      if (++v12 == (_DWORD *)v14) {
        return 0;
      }
    }
    if (++v7 == a2) {
      return 1;
    }
  }
}

void sub_4788C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4788F4(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v4) {
    unint64_t v4 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 58) {
    sub_188D718();
  }
  unint64_t v9 = v7 << 6;
  v10 = (char *)operator new(v7 << 6);
  long long v11 = *(_OWORD *)(a2 + 16);
  v12 = &v10[64 * v3];
  uint64_t v13 = &v10[v9];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *((_OWORD *)v12 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *((void *)v12 + 6) = v14;
  *((void *)v12 + 7) = v15;
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (char *)*a1;
  unint64_t v18 = (char *)a1[1];
  if (v18 == *a1)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v13;
    if (!v18) {
      return v16;
    }
    goto LABEL_22;
  }
  do
  {
    long long v19 = *((_OWORD *)v18 - 3);
    *((_OWORD *)v12 - 4) = *((_OWORD *)v18 - 4);
    *((_OWORD *)v12 - 3) = v19;
    *((_OWORD *)v12 - 2) = *((_OWORD *)v18 - 2);
    *((void *)v12 - 2) = *((void *)v18 - 2);
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v12 - 1) = *((void *)v18 - 1);
    v12 -= 64;
    v18 -= 64;
  }
  while (v18 != v17);
  uint64_t v20 = (char *)*a1;
  unint64_t v18 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v13;
  if (v18 != v20)
  {
    do
    {
      uint64_t v22 = *((void *)v18 - 4);
      if (v22)
      {
        uint64_t v23 = *((void *)v18 - 3);
        v21 = (void *)*((void *)v18 - 4);
        if (v23 != v22)
        {
          uint64_t v24 = *((void *)v18 - 3);
          do
          {
            v26 = *(void **)(v24 - 24);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *(void *)(v23 - 16) = v25;
              operator delete(v25);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
          v21 = (void *)*((void *)v18 - 4);
        }
        *((void *)v18 - 3) = v22;
        operator delete(v21);
      }
      v18 -= 64;
    }
    while (v18 != v20);
    unint64_t v18 = v20;
  }
  if (v18) {
LABEL_22:
  }
    operator delete(v18);
  return v16;
}

uint64_t sub_478A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = a2;
    if (a3 != v6)
    {
      do
      {
        long long v9 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v5;
        *(_OWORD *)(v7 + 16) = v9;
        v10 = (void **)(v7 + 32);
        uint64_t v11 = *(void *)(v7 + 32);
        if (v11)
        {
          uint64_t v12 = *(void *)(v7 + 40);
          uint64_t v8 = *(void **)(v7 + 32);
          if (v12 != v11)
          {
            uint64_t v13 = *(void *)(v7 + 40);
            do
            {
              uint64_t v15 = *(void **)(v13 - 24);
              v13 -= 24;
              uint64_t v14 = v15;
              if (v15)
              {
                *(void *)(v12 - 16) = v14;
                operator delete(v14);
              }
              uint64_t v12 = v13;
            }
            while (v13 != v11);
            uint64_t v8 = *v10;
          }
          *(void *)(v7 + 40) = v11;
          operator delete(v8);
          char *v10 = 0;
          *(void *)(v7 + 40) = 0;
          *(void *)(v7 + 48) = 0;
        }
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v5 + 32);
        *(void *)(v7 + 48) = *(void *)(v5 + 48);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        *(void *)(v7 + 56) = *(void *)(v5 + 56);
        v5 += 64;
        v7 += 64;
      }
      while (v5 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v7)
    {
      uint64_t v17 = *(void *)(v5 - 32);
      if (v17)
      {
        uint64_t v18 = *(void *)(v5 - 24);
        uint64_t v16 = *(void **)(v5 - 32);
        if (v18 != v17)
        {
          uint64_t v19 = *(void *)(v5 - 24);
          do
          {
            v21 = *(void **)(v19 - 24);
            v19 -= 24;
            uint64_t v20 = v21;
            if (v21)
            {
              *(void *)(v18 - 16) = v20;
              operator delete(v20);
            }
            uint64_t v18 = v19;
          }
          while (v19 != v17);
          uint64_t v16 = *(void **)(v5 - 32);
        }
        *(void *)(v5 - 24) = v17;
        operator delete(v16);
      }
      v5 -= 64;
    }
    *(void *)(a1 + 8) = v7;
  }
  return a2;
}

uint64_t sub_478BE4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (1)
  {
    sub_46B058();
    uint64_t v5 = v4;
    unint64_t v7 = v6 + *(void *)v3;
    sub_46B058();
    if (sub_478D74(v5, v7, v9, *(void *)(v3 + 8) + v8 + 1)) {
      break;
    }
    v3 += 64;
    if (v3 == a2) {
      return a2;
    }
  }
  if (v3 == a2) {
    return v3;
  }
  uint64_t v12 = v3 + 64;
  if (v3 + 64 == a2) {
    return v3;
  }
  uint64_t v10 = v3;
  do
  {
    uint64_t v14 = v12;
    sub_46B058();
    uint64_t v16 = v15;
    unint64_t v18 = v17 + *(void *)v14;
    sub_46B058();
    if (!sub_478D74(v16, v18, v20, *(void *)(v3 + 72) + v19 + 1))
    {
      long long v21 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v14;
      *(_OWORD *)(v10 + 16) = v21;
      uint64_t v22 = (void **)(v10 + 32);
      uint64_t v23 = *(void *)(v10 + 32);
      if (v23)
      {
        uint64_t v24 = *(void *)(v10 + 40);
        uint64_t v13 = *(void **)(v10 + 32);
        if (v24 != v23)
        {
          uint64_t v25 = *(void *)(v10 + 40);
          do
          {
            v27 = *(void **)(v25 - 24);
            v25 -= 24;
            v26 = v27;
            if (v27)
            {
              *(void *)(v24 - 16) = v26;
              operator delete(v26);
            }
            uint64_t v24 = v25;
          }
          while (v25 != v23);
          uint64_t v13 = *v22;
        }
        *(void *)(v10 + 40) = v23;
        operator delete(v13);
        void *v22 = 0;
        *(void *)(v10 + 40) = 0;
        *(void *)(v10 + 48) = 0;
      }
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v3 + 96);
      *(void *)(v10 + 48) = *(void *)(v3 + 112);
      *(void *)(v3 + 96) = 0;
      *(void *)(v3 + 104) = 0;
      *(void *)(v3 + 112) = 0;
      *(void *)(v10 + 56) = *(void *)(v3 + 120);
      v10 += 64;
    }
    uint64_t v12 = v14 + 64;
    uint64_t v3 = v14;
  }
  while (v14 + 64 != a2);
  return v10;
}

BOOL sub_478D74(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v8 = sub_46C760(a1);
        unint64_t v9 = sub_46C760(a3);
        if (a2 >= v8 || a4 >= v9)
        {
          if (a2 < v8 == a4 < v9) {
            return 0;
          }
        }
        else
        {
          uint64_t v10 = sub_46C8EC(a1, a2);
          if (v10 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v11 = *(int **)(sub_46C8EC(a1, a2) + 8);
        uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v12 < 0x11u) {
          break;
        }
        uint64_t v13 = v12[8];
        if (!v13) {
          break;
        }
        ++a2;
      }
      while ((*(_WORD *)((unsigned char *)v11 + v13) & 0x40) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v17 = sub_46C760(a1);
        BOOL v18 = a2 >= v17;
        BOOL result = a2 < v17;
        if (v18) {
          break;
        }
        uint64_t v14 = *(int **)(sub_46C8EC(a1, a2) + 8);
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0x11u)
        {
          uint64_t v16 = v15[8];
          if (v16)
          {
            ++a2;
            if ((*(_WORD *)((unsigned char *)v14 + v16) & 0x40) != 0) {
              continue;
            }
          }
        }
        return 1;
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v20 = sub_46C760(a3);
      BOOL v18 = a4 >= v20;
      BOOL result = a4 < v20;
      if (v18) {
        break;
      }
      long long v21 = *(int **)(sub_46C8EC(0, a2) + 8);
      uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 0x11u)
      {
        uint64_t v23 = v22[8];
        if (v23)
        {
          ++a2;
          if ((*(_WORD *)((unsigned char *)v21 + v23) & 0x40) != 0) {
            continue;
          }
        }
      }
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL sub_478F24(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v15 = sub_46C760(a1);
        unint64_t v16 = sub_46C760(a3);
        if (a2 >= v15 || a4 >= v16)
        {
          if (a2 < v15 == a4 < v16) {
            return 0;
          }
        }
        else
        {
          uint64_t v17 = sub_46C8EC(a1, a2);
          if (v17 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v14 = sub_46C8EC(a1, a2++);
        if (sub_479090(a5, *(void *)(v14 + 32))) {
          return 1;
        }
      }
    }
    while (1)
    {
      unint64_t v11 = sub_46C760(a1);
      BOOL v12 = a2 >= v11;
      BOOL result = a2 < v11;
      if (v12) {
        break;
      }
      uint64_t v10 = sub_46C8EC(a1, a2++);
      if (sub_479090(a5, *(void *)(v10 + 32))) {
        return 1;
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v18 = sub_46C760(a3);
      BOOL v12 = a4 >= v18;
      BOOL result = a4 < v18;
      if (v12) {
        break;
      }
      uint64_t v19 = sub_46C8EC(0, a2++);
      if (sub_479090(a5, *(void *)(v19 + 32))) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t sub_479090(uint64_t a1, unint64_t a2)
{
  v2 = *(unsigned int **)(a1 + 288);
  uint64_t v3 = *(unsigned int **)(a1 + 296);
  uint64_t v4 = (char *)v3 - (char *)v2;
  if ((char *)v3 - (char *)v2 >= 8)
  {
    uint64_t v5 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
    uint64_t v6 = a2 & 0xFF000000000000;
    if (v4 != 8)
    {
      unint64_t v7 = v4 >> 3;
      do
      {
        unint64_t v8 = (2 * v7) & 0xFFFFFFFFFFFFFFF8;
        _X16 = (char *)v2 + v8;
        __asm { PRFM            #0, [X16] }
        unint64_t v15 = &v2[2 * (v7 >> 1)];
        _X15 = (char *)v15 + v8;
        __asm { PRFM            #0, [X15] }
        if ((((unint64_t)*v15 << 32) | ((unint64_t)*((unsigned __int16 *)v15 + 2) << 16) | (*((unsigned char *)v15 + 6) == 0)) >= (v5 | (unint64_t)(v6 == 0))) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = v7 >> 1;
        }
        v2 += 2 * v18;
        v7 -= v7 >> 1;
      }
      while ((uint64_t)v7 > 1);
    }
    v2 += 2
        * ((((unint64_t)*v2 << 32) | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 16) | (*((unsigned char *)v2 + 6) == 0)) < (v5 | (unint64_t)(v6 == 0)));
  }
  if (v2 != v3 && *v2 == a2 && *((unsigned __int16 *)v2 + 2) == WORD2(a2)) {
    return HIWORD(a2) & 1 ^ (*((unsigned char *)v2 + 6) == 0);
  }
  else {
    return 0;
  }
}

void sub_47919C(uint64_t a1, uint64_t a2)
{
  sub_2954EC(*(void *)(*(void *)a1 + 24), a2, (uint64_t)&v34);
  if (**(unsigned char **)(a1 + 8))
  {
    sub_2E51EC((uint64_t)&v34, (uint64_t)v33);
    if (v37)
    {
      if (__p != v36)
      {
        uint64_t v3 = v34;
        long long v30 = 0u;
        long long v31 = 0u;
        uint64_t v32 = 0;
        char v4 = 1;
        LODWORD(v5) = -1;
        int v6 = -1;
LABEL_11:
        uint64_t v23 = *(char ***)(a1 + 16);
        long long v47 = v33[0];
        long long v48 = v33[1];
        long long v49 = v33[2];
        long long v50 = v33[3];
        long long v40 = v30;
        long long v41 = v31;
        uint64_t v39 = v3;
        uint64_t v42 = v32;
        int v43 = v5;
        int v44 = v6;
        char v45 = v4;
        *(_DWORD *)v46 = v29[0];
        *(_DWORD *)&v46[3] = *(_DWORD *)((char *)v29 + 3);
        sub_4794B8(&v47, (uint64_t)&v39, v23, (uint64_t)v38);
        goto LABEL_16;
      }
    }
    else if (__p != v36)
    {
      unint64_t v17 = *((void *)v36 - 1);
      unint64_t v18 = sub_2964C4(v34, v17, 1);
      char v4 = 0;
      uint64_t v19 = &v18[*(unsigned __int16 *)&v18[-*(int *)v18 + 4]];
      uint64_t v20 = (uint64_t)&v19[4 * HIDWORD(v17) + *(unsigned int *)v19];
      long long v21 = (int *)(v20 + 4 + *(unsigned int *)(v20 + 4));
      uint64_t v22 = (unsigned int *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 6));
      int v6 = *(unsigned int *)((char *)v22 + *v22);
      uint64_t v3 = v34;
      unint64_t v5 = (unint64_t)(v36 - (unsigned char *)__p) >> 3;
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v32 = 0;
      goto LABEL_11;
    }
    uint64_t v3 = 0;
    LODWORD(v5) = 0;
    int v6 = 0;
    char v4 = 0;
    uint64_t v32 = 0;
    long long v31 = 0u;
    long long v30 = 0u;
    v29[0] = 0;
    *(_DWORD *)((char *)v29 + 3) = 0;
    goto LABEL_11;
  }
  sub_3A5CB4((uint64_t)&v34, (uint64_t)v28);
  if (!v37)
  {
    if (__p != v36)
    {
      uint64_t v15 = v34;
      long long v26 = 0u;
      long long v27 = 0u;
      char v9 = 1;
      LODWORD(v16) = -1;
      int v14 = -1;
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v15 = 0;
    LODWORD(v16) = 0;
    int v14 = 0;
    char v9 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    memset(v25, 0, 7);
    goto LABEL_15;
  }
  if (__p == v36) {
    goto LABEL_14;
  }
  unint64_t v7 = *((void *)v36 - 1);
  unint64_t v8 = sub_2964C4(v34, v7, 1);
  char v9 = 0;
  uint64_t v10 = &v8[*(unsigned __int16 *)&v8[-*(int *)v8 + 4]];
  uint64_t v11 = (uint64_t)&v10[4 * HIDWORD(v7) + *(unsigned int *)v10];
  BOOL v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
  uint64_t v13 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
  int v14 = *(unsigned int *)((char *)v13 + *v13);
  uint64_t v15 = v34;
  unint64_t v16 = (unint64_t)(v36 - (unsigned char *)__p) >> 3;
  long long v26 = 0u;
  long long v27 = 0u;
LABEL_15:
  long long v47 = v28[0];
  long long v48 = v28[1];
  long long v49 = v28[2];
  long long v50 = v28[3];
  long long v40 = v26;
  uint64_t v24 = *(char ***)(a1 + 16);
  long long v41 = v27;
  uint64_t v39 = v15;
  uint64_t v42 = 0;
  int v43 = v16;
  int v44 = v14;
  char v45 = v9;
  *(_DWORD *)v46 = v25[0];
  *(_DWORD *)&v46[3] = *(_DWORD *)((char *)v25 + 3);
  sub_4794B8(&v47, (uint64_t)&v39, v24, (uint64_t)v38);
LABEL_16:
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_47949C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_4794B8@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *(_DWORD *)(a2 + 48);
  uint64_t v42 = *(unsigned int *)(a2 + 52);
  long long v6 = a1[1];
  long long v43 = *a1;
  long long v44 = v6;
  long long v7 = a1[3];
  long long v45 = a1[2];
  long long v46 = v7;
  uint64_t v8 = DWORD1(v7);
  if (v7 != v5 || DWORD1(v7) != v42)
  {
    while (1)
    {
      uint64_t v12 = *((void *)&v44 + 1) + 4 * v8;
      int v13 = *(unsigned __int16 *)(v12 + 4);
      int v14 = *(unsigned __int16 *)(v12 + 6);
      unsigned int v15 = sub_511FC(DWORD2(v45));
      unsigned int v16 = DWORD2(v45) & ~(-1 << (v15 & 0xFE));
      int v17 = sub_51938(v16);
      int v18 = sub_51938(v16 >> 1);
      uint64_t v19 = (unsigned __int16 *)(v44 - *(int *)v44);
      unsigned int v20 = *v19;
      if (v20 < 0xD) {
        break;
      }
      if (!v19[6]) {
        goto LABEL_11;
      }
      int v21 = *(_DWORD *)(v44 + v19[6] + *(unsigned int *)(v44 + v19[6]) + 4 * DWORD1(v46) + 4);
LABEL_18:
      int v25 = 1 << -(v15 >> 1);
      if (v15 < 2) {
        int v25 = -2;
      }
      LODWORD(v26) = v25 * v18 + 4 * v14;
      if (v26 >= 0xFFFFFFFE) {
        uint64_t v26 = 4294967294;
      }
      else {
        uint64_t v26 = v26;
      }
      unint64_t v27 = (v25 * v17 + 4 * v13) | (unint64_t)(v26 << 32);
      v29 = a3[1];
      unint64_t v28 = (unint64_t)a3[2];
      if ((unint64_t)v29 >= v28)
      {
        long long v31 = *a3;
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 2);
        unint64_t v33 = v32 + 1;
        if (v32 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v31) >> 2);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v35 = 0x1555555555555555;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 > 0x1555555555555555) {
            sub_188D718();
          }
          v36 = (char *)operator new(12 * v35);
        }
        else
        {
          v36 = 0;
        }
        char v37 = &v36[12 * v32];
        *(void *)char v37 = v27;
        *((_DWORD *)v37 + 2) = v21;
        v38 = v37;
        if (v29 != v31)
        {
          do
          {
            uint64_t v39 = *(void *)(v29 - 12);
            v29 -= 12;
            int v40 = *((_DWORD *)v29 + 2);
            *(void *)(v38 - 12) = v39;
            v38 -= 12;
            *((_DWORD *)v38 + 2) = v40;
          }
          while (v29 != v31);
          v29 = *a3;
        }
        long long v30 = v37 + 12;
        *a3 = v38;
        a3[1] = v37 + 12;
        a3[2] = &v36[12 * v35];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)v29 = v27;
        *((_DWORD *)v29 + 2) = v21;
        long long v30 = v29 + 12;
      }
      a3[1] = v30;
      if (BYTE8(v46))
      {
        sub_2E7608((uint64_t)&v43);
        uint64_t v8 = DWORD1(v46);
        if (v46 == v5) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_2E74E8((uint64_t)&v43);
        uint64_t v8 = DWORD1(v46);
        if (v46 == v5)
        {
LABEL_6:
          if (v8 == v42) {
            goto LABEL_3;
          }
        }
      }
    }
    if (v20 >= 0xB)
    {
LABEL_11:
      if (v19[5])
      {
        int v22 = *(unsigned __int16 *)(v44 + v19[5] + *(unsigned int *)(v44 + v19[5]) + 2 * DWORD1(v46) + 4);
        if (v22 != 0xFFFF)
        {
          uint64_t v23 = v19[4];
          if (v23) {
            int v24 = *(_DWORD *)(v44 + v23);
          }
          else {
            int v24 = 0;
          }
          int v21 = HIDWORD(v45) + v22 + v24;
          goto LABEL_18;
        }
      }
    }
    int v21 = 0x7FFFFFFF;
    goto LABEL_18;
  }
LABEL_3:
  long long v9 = v44;
  *(_OWORD *)a4 = v43;
  *(_OWORD *)(a4 + 16) = v9;
  double result = *(double *)&v45;
  long long v11 = v46;
  *(_OWORD *)(a4 + 32) = v45;
  *(_OWORD *)(a4 + 48) = v11;
  *(void *)(a4 + 64) = a3;
  return result;
}

void sub_47979C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  sub_2954EC(*(void *)(*(void *)a1 + 24), a2, (uint64_t)&v15);
  sub_2E51EC((uint64_t)&v15, (uint64_t)v14);
  if (v18)
  {
    if (v16 != v17)
    {
      *(void *)&v12[0] = v15;
      memset((char *)v12 + 8, 0, 40);
      *(void *)&long long v13 = -1;
      BYTE8(v13) = 1;
      goto LABEL_7;
    }
  }
  else if (v16 != v17)
  {
    unint64_t v3 = *((void *)v17 - 1);
    char v4 = sub_2964C4(v15, v3, 1);
    int v5 = &v4[*(unsigned __int16 *)&v4[-*(int *)v4 + 4]];
    uint64_t v6 = (uint64_t)&v5[4 * HIDWORD(v3) + *(unsigned int *)v5];
    long long v7 = (int *)(v6 + 4 + *(unsigned int *)(v6 + 4));
    uint64_t v8 = (unsigned int *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
    LODWORD(v8) = *(unsigned int *)((char *)v8 + *v8);
    *(void *)&v12[0] = v15;
    memset((char *)v12 + 8, 0, 40);
    LODWORD(v13) = (unint64_t)(v17 - v16) >> 3;
    DWORD1(v13) = v8;
    BYTE8(v13) = 0;
    goto LABEL_7;
  }
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
LABEL_7:
  long long v9 = *(_OWORD *)(a1 + 24);
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v9;
  long long v11 = &v19;
  sub_47991C((uint64_t)v14, (uint64_t)v12, (uint64_t)v10);
  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }
}

void sub_4798FC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_47991C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(result + 52) != *(_DWORD *)(a2 + 52))
  {
    long long v6 = *(_OWORD *)(result + 16);
    v18[0] = *(_OWORD *)result;
    v18[1] = v6;
    long long v7 = *(_OWORD *)(result + 48);
    v18[2] = *(_OWORD *)(result + 32);
    long long v19 = v7;
    if (*(unsigned char *)(result + 56))
    {
      double result = sub_2E7608(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
    else
    {
      double result = sub_2E74E8(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(a2 + 52))
    {
      while (1)
      {
LABEL_9:
        unint64_t v16 = sub_2E1BC0((uint64_t)v18);
        int v17 = v8;
        unint64_t v14 = sub_2E1BC0(v5);
        int v15 = v9;
        sub_479A64(a3, &v16, &v14, v10, v11, v12, v13);
        if (*(unsigned char *)(v5 + 56))
        {
          sub_2E7608(v5);
          if (!BYTE8(v19)) {
            goto LABEL_13;
          }
LABEL_15:
          double result = sub_2E7608((uint64_t)v18);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
        else
        {
          sub_2E74E8(v5);
          if (BYTE8(v19)) {
            goto LABEL_15;
          }
LABEL_13:
          double result = sub_2E74E8((uint64_t)v18);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

void sub_479A64(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  int v9 = *(unsigned int **)a1;
  int v8 = *(unsigned int **)(a1 + 8);
  LODWORD(a4) = *a2;
  LODWORD(a5) = a2[1];
  double v10 = (double)*(unint64_t *)&a4;
  double v11 = (double)*(unint64_t *)&a5;
  LODWORD(a6) = *a3;
  LODWORD(a7) = a3[1];
  double v12 = (double)*(unint64_t *)&a6 - v10;
  double v13 = (double)*(unint64_t *)&a7 - v11;
  double v14 = v12 * v12 + v13 * v13;
  double v15 = fabs(v14);
  HIDWORD(v16) = 1018167296;
  if (v14 == 0.0 || v15 < 2.22044605e-16) {
    goto LABEL_6;
  }
  LODWORD(v15) = *v9;
  LODWORD(v16) = v9[1];
  double v20 = (v12 * ((double)*(unint64_t *)&v15 - v10) + v13 * ((double)v16 - v11)) / v14;
  if (v20 <= 0.0)
  {
    uint64_t v18 = *(void *)a2;
    unsigned int v19 = a2[2];
    goto LABEL_12;
  }
  if (v20 >= 1.0)
  {
LABEL_6:
    uint64_t v18 = *(void *)a3;
    unsigned int v19 = a3[2];
LABEL_12:
    v8[2] = v19;
    *(void *)int v8 = v18;
    goto LABEL_13;
  }
  int v21 = a2[2];
  if (v21 == 0x7FFFFFFF)
  {
    BOOL v22 = 0;
    double v23 = 0.0;
  }
  else
  {
    double v42 = (double)v21;
    int v43 = a3[2];
    BOOL v44 = v43 == 0x7FFFFFFF;
    double v23 = v20 * ((double)v43 - v42) + v42;
    BOOL v22 = v43 != 0x7FFFFFFF;
    if (v44) {
      double v23 = 0.0;
    }
  }
  double v45 = v13 * v20 + v11;
  double v46 = v12 * v20 + v10;
  if (v46 < 0.0) {
    double v47 = -0.5;
  }
  else {
    double v47 = 0.5;
  }
  uint64_t v48 = (v46 + v47);
  if (v45 < 0.0) {
    double v49 = -0.5;
  }
  else {
    double v49 = 0.5;
  }
  unsigned int v50 = (v45 + v49);
  if (v23 < 0.0) {
    double v51 = -0.5;
  }
  else {
    double v51 = 0.5;
  }
  double v10 = v23 + v51;
  if (v22) {
    unsigned int v52 = v10;
  }
  else {
    unsigned int v52 = 0x7FFFFFFF;
  }
  if (v50 >= 0xFFFFFFFE) {
    uint64_t v53 = 4294967294;
  }
  else {
    uint64_t v53 = v50;
  }
  *(void *)int v8 = v48 | (v53 << 32);
  v8[2] = v52;
LABEL_13:
  LODWORD(v10) = v9[1];
  long double v24 = exp(3.14159265 - (double)*(unint64_t *)&v10 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v25 = atan((v24 - 1.0 / v24) * 0.5) * 57.2957795;
  long double v26 = *(double *)&v25 * 0.0174532925;
  LODWORD(v25) = v8[1];
  long double v27 = exp(3.14159265 - (double)v25 * 6.28318531 / 4294967300.0);
  unsigned int v54 = *v9;
  long double v28 = atan((v27 - 1.0 / v27) * 0.5) * 57.2957795 * 0.0174532925;
  v29.i64[0] = v54;
  v29.i64[1] = *v8;
  int64x2_t v30 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v55 = vsubq_f64((float64x2_t)v30, (float64x2_t)vdupq_laneq_s64(v30, 1)).f64[0];
  long double v31 = sin((v26 - v28) * 0.5);
  long double v32 = v31 * v31;
  double v33 = cos(v26);
  long double v34 = v33 * cos(v28);
  long double v35 = sin(0.5 * v55);
  long double v36 = atan2(sqrt(v32 + v34 * (v35 * v35)), sqrt(1.0 - (v32 + v34 * (v35 * v35))));
  double v37 = (v36 + v36) * 6372797.56;
  v38 = *(double **)(a1 + 16);
  if (v37 < *v38)
  {
    double *v38 = v37;
    int v40 = *(_DWORD **)(a1 + 24);
    uint64_t v39 = *(int **)(a1 + 32);
    int v41 = *v39;
    *(_DWORD *)((char *)v40 + 3) = *(int *)((char *)v39 + 3);
    *int v40 = v41;
  }
}

void sub_479D84(uint64_t a1, uint64_t a2)
{
  if (!**(unsigned char **)a1)
  {
    uint64_t v3 = **(void **)(a1 + 8);
    if ((a2 & 0xFFFFFFFFFFFFLL) == (v3 & 0xFFFFFFFFFFFFLL)
      && ((a2 & 0xFF000000000000) == 0) == ((v3 & 0x1000000000000) == 0))
    {
      sub_2954EC(*(void *)(*(void *)(a1 + 24) + 24), a2, (uint64_t)&v15);
      sub_2E4B5C((uint64_t)&v15, &v18);
      if (__p)
      {
        int v17 = __p;
        operator delete(__p);
      }
      unint64_t v9 = sub_450B4C((uint64_t *)&v18, 0, 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)v18) >> 2) - 1, *(_DWORD **)(a1 + 32), 0, 0x7FFFFFFFFFFFFFFFLL, 1, v5, v6, v7, v8);
      double v10 = (uint64_t *)v18;
      if (**(unsigned char **)(a1 + 40))
      {
        double v15 = *(char ***)(a1 + 48);
        if (v9 != -1)
        {
          uint64_t v11 = 12 * v9 + 12;
          do
          {
            sub_3BDEE8(&v15, v10);
            double v10 = (uint64_t *)((char *)v10 + 12);
            v11 -= 12;
          }
          while (v11);
        }
      }
      else
      {
        uint64_t v12 = 0x5555555555555555 * ((v19 - (unsigned char *)v18) >> 2);
        double v15 = *(char ***)(a1 + 48);
        if (v9 + v12 != -1)
        {
          double v13 = (uint64_t *)(v19 - 12);
          uint64_t v14 = 12 * (v12 + v9) + 12;
          do
          {
            sub_3BDEE8(&v15, v13);
            double v13 = (uint64_t *)((char *)v13 - 12);
            v14 += 12;
          }
          while (v14);
        }
      }
      **(unsigned char **)a1 = 1;
      if (v18)
      {
        unsigned int v19 = v18;
        operator delete(v18);
      }
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 16);
      sub_47919C(v4, a2);
    }
  }
}

void sub_479F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_479F80(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v4 = *a2;
  unsigned int v3 = a2[1];
  if (*a2 == -1 && v3 == -1) {
    return 0;
  }
  unsigned int v7 = *a3;
  unsigned int v6 = a3[1];
  if (*a3 == -1 && v6 == -1) {
    return 0;
  }
  long double v9 = exp(3.14159265 - (double)v3 * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v4;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v14 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v26 = vsubq_f64((float64x2_t)v14, (float64x2_t)vdupq_laneq_s64(v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v26);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_17:
  if (v22 >= 9.22337204e18) {
    return 0;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v24 = (uint64_t)(v21 + v21) + 1;
LABEL_26:
      double v21 = (double)(v24 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v24 = (uint64_t)(v21 + v21);
    if (v24 >= 1) {
      --v24;
    }
    goto LABEL_26;
  }
  return (uint64_t)v21 < 11;
}

uint64_t sub_47A214(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = **a1;
  uint64_t v5 = v4 + 12 * a3;
  unsigned int v7 = *(_DWORD *)(v5 - 12);
  unsigned int v6 = *(_DWORD *)(v5 - 8);
  BOOL v8 = v7 == -1 && v6 == -1;
  if (v8
    || ((long double v9 = (unsigned int *)(v4 + 12 * a3), v11 = *v9, v10 = v9[1], *v9 == -1) ? (v12 = v10 == -1) : (v12 = 0), v12))
  {
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    return v28 + a2;
  }
  long double v13 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
  long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
  v15.i64[0] = v7;
  v15.i64[1] = v11;
  long double v16 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  long double v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v18 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v31 = vsubq_f64((float64x2_t)v18, (float64x2_t)vdupq_laneq_s64(v18, 1)).f64[0];
  long double v19 = sin((v14 - v17) * 0.5);
  long double v20 = v19 * v19;
  double v21 = cos(v14);
  long double v22 = v21 * cos(v17);
  long double v23 = sin(0.5 * v31);
  long double v24 = atan2(sqrt(v23 * v23 * v22 + v20), sqrt(1.0 - (v23 * v23 * v22 + v20)));
  double v25 = (v24 + v24) * 6372797.56 * 100.0;
  if (v25 >= 0.0)
  {
    double v26 = v25;
    if (v25 < 4.50359963e15)
    {
      uint64_t v27 = (uint64_t)(v25 + v25) + 1;
LABEL_18:
      double v26 = (double)(v27 >> 1);
    }
  }
  else
  {
    double v26 = v25;
    if (v25 > -4.50359963e15)
    {
      uint64_t v27 = (uint64_t)(v25 + v25);
      if (v27 >= 1) {
        --v27;
      }
      goto LABEL_18;
    }
  }
  if (v26 < 9.22337204e18)
  {
    if (v25 >= 0.0)
    {
      if (v25 < 4.50359963e15)
      {
        uint64_t v30 = (uint64_t)(v25 + v25) + 1;
LABEL_28:
        double v25 = (double)(v30 >> 1);
      }
    }
    else if (v25 > -4.50359963e15)
    {
      uint64_t v30 = (uint64_t)(v25 + v25);
      if (v30 >= 1) {
        --v30;
      }
      goto LABEL_28;
    }
    uint64_t v28 = (uint64_t)v25;
    return v28 + a2;
  }
  uint64_t v28 = 0x7FFFFFFFFFFFFFFELL;
  return v28 + a2;
}

void sub_47A4D0()
{
  unk_255880F = 16641;
  word_25587F8 = 65;
  byte_2558827 = 1;
  byte_2558811 = 0;
}

void sub_47A4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(a1 + 1032);
  v94 = *(uint64_t **)(a1 + 1040);
  if (v3 != v94)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    double v7 = 1.0;
    double v8 = 0.5;
    float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v102 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v99 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v100 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v9 = *(int *)(a3 + 32);
      int v10 = v9 - 1;
      uint64_t v11 = v3[2];
      if ((int)v4 < (int)v9 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v11)
        {
          uint64_t v12 = *(void *)(a3 + 40);
          uint64_t v13 = v9 - 2;
          do
          {
            uint64_t v5 = v6;
            uint64_t v14 = v12 + 8 * v4;
            uint64x2_t v15 = *(uint64_t (****)())(*(void *)(v14 + 8) + 32);
            if (!v15) {
              uint64x2_t v15 = &off_24F8110;
            }
            double v16 = (double)*((int *)v15 + 7) / 10000000.0;
            uint64_t v17 = -1;
            if (v16 <= 180.0)
            {
              double v18 = (double)*((int *)v15 + 6) / 10000000.0;
              if (v18 >= -85.0511288 && v18 <= 85.0511288 && v16 >= -180.0)
              {
                double v19 = fmax(v18, -85.0511288);
                double v20 = v19 * 3.14159265 / 180.0;
                BOOL v21 = v19 < 85.0511288;
                double v22 = 1.48442223;
                if (v21) {
                  double v22 = v20;
                }
                long double v23 = sin(v22);
                LODWORD(v24) = ((log((v23 + v7) / (v7 - v23)) / -12.5663706 + v8) * 4294967300.0);
                if (v24 >= 0xFFFFFFFE) {
                  uint64_t v24 = 4294967294;
                }
                else {
                  uint64_t v24 = v24;
                }
                uint64_t v17 = ((v16 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v24 << 32);
              }
            }
            double v25 = *(uint64_t (****)())(*(void *)(v14 + 16) + 32);
            if (!v25) {
              double v25 = &off_24F8110;
            }
            double v26 = (double)*((int *)v25 + 7) / 10000000.0;
            uint64_t v27 = -1;
            if (v26 <= 180.0)
            {
              double v28 = (double)*((int *)v25 + 6) / 10000000.0;
              if (v28 >= -85.0511288 && v28 <= 85.0511288 && v26 >= -180.0)
              {
                double v29 = fmax(v28, -85.0511288);
                double v30 = v29 * 3.14159265 / 180.0;
                BOOL v21 = v29 < 85.0511288;
                double v31 = 1.48442223;
                if (v21) {
                  double v31 = v30;
                }
                long double v32 = sin(v31);
                LODWORD(v33) = ((log((v32 + v7) / (v7 - v32)) / -12.5663706 + v8) * 4294967300.0);
                if (v33 >= 0xFFFFFFFE) {
                  uint64_t v33 = 4294967294;
                }
                else {
                  uint64_t v33 = v33;
                }
                uint64_t v27 = ((v26 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v33 << 32);
              }
            }
            if (v17 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v27 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            long double v34 = exp(3.14159265 - (double)HIDWORD(v17) * 6.28318531 / 4294967300.0);
            long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
            v36.i64[0] = v17;
            v36.i64[1] = v27;
            long double v37 = exp(3.14159265 - (double)HIDWORD(v27) * 6.28318531 / 4294967300.0);
            long double v38 = atan((v37 - 1.0 / v37) * 0.5) * 57.2957795 * 0.0174532925;
            int64x2_t v39 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v36), v102), v101), v100), v99);
            double v103 = vsubq_f64((float64x2_t)v39, (float64x2_t)vdupq_laneq_s64(v39, 1)).f64[0];
            long double v40 = sin((v35 - v38) * 0.5);
            long double v41 = v40 * v40;
            double v42 = cos(v35);
            long double v43 = v42 * cos(v38);
            double v7 = 1.0;
            long double v44 = sin(0.5 * v103);
            long double v45 = atan2(sqrt(v44 * v44 * v43 + v41), sqrt(1.0 - (v44 * v44 * v43 + v41)));
            double v46 = (v45 + v45) * 6372797.56 * 100.0;
            if (v46 >= 0.0)
            {
              double v47 = v46;
              if (v46 >= 4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              double v47 = v46;
              if (v46 <= -4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46);
              if (v48 >= 1) {
                --v48;
              }
            }
            double v47 = (double)(v48 >> 1);
LABEL_45:
            double v8 = 0.5;
            if (v47 >= 9.22337204e18)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFELL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v46 >= 0.0)
            {
              if (v46 >= 4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              if (v46 <= -4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46);
              if (v49 >= 1) {
                --v49;
              }
            }
            double v46 = (double)(v49 >> 1);
LABEL_56:
            uint64_t v6 = (uint64_t)v46 + v5;
            if (v13 == v4)
            {
LABEL_59:
              LODWORD(v4) = v10;
              break;
            }
LABEL_57:
            ++v4;
          }
          while (v6 < v11);
        }
      }
      uint64_t v50 = v11 - v5;
      uint64_t v51 = v6 - v11;
      int v97 = v4 - (v50 < v51);
      sub_47B044(a1, *v3, v97, a2, a3);
      int v52 = *(_DWORD *)(a3 + 32);
      v98 = v3;
      uint64_t v53 = v3[3];
      if ((int)v4 < v52 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v53) {
          break;
        }
      }
LABEL_118:
      int v93 = v4 - (v53 - v5 < v6 - v53);
      if (v93 != v97) {
        sub_47B044(a1, v3[1], v93, a2, a3);
      }
      v3 += 8;
      if (v98 + 8 == v94) {
        return;
      }
    }
    if (v50 >= v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = -1;
    }
    uint64_t v55 = *(void *)(a3 + 40) + 8 * (int)v4 + 16;
    while (1)
    {
      uint64_t v5 = v6;
      uint64_t v56 = *(void *)(v55 - 8);
      v57 = *(uint64_t (****)())(v56 + 32);
      if (!v57) {
        v57 = &off_24F8110;
      }
      double v58 = (double)*((int *)v57 + 7) / 10000000.0;
      uint64_t v59 = -1;
      if (v58 <= 180.0)
      {
        double v60 = (double)*((int *)v57 + 6) / 10000000.0;
        if (v60 >= -85.0511288 && v60 <= 85.0511288 && v58 >= -180.0)
        {
          double v61 = fmax(v60, -85.0511288);
          double v62 = v61 * 3.14159265 / 180.0;
          BOOL v21 = v61 < 85.0511288;
          double v63 = 1.48442223;
          if (v21) {
            double v63 = v62;
          }
          long double v64 = sin(v63);
          LODWORD(v65) = ((log((v64 + v7) / (v7 - v64)) / -12.5663706 + v8) * 4294967300.0);
          if (v65 >= 0xFFFFFFFE) {
            uint64_t v65 = 4294967294;
          }
          else {
            uint64_t v65 = v65;
          }
          uint64_t v59 = ((v58 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v65 << 32);
        }
      }
      v66 = *(uint64_t (****)())(*(void *)v55 + 32);
      if (!v66) {
        v66 = &off_24F8110;
      }
      double v67 = (double)*((int *)v66 + 7) / 10000000.0;
      uint64_t v68 = -1;
      if (v67 <= 180.0)
      {
        double v69 = (double)*((int *)v66 + 6) / 10000000.0;
        if (v69 >= -85.0511288 && v69 <= 85.0511288 && v67 >= -180.0)
        {
          double v70 = fmax(v69, -85.0511288);
          double v71 = v70 * 3.14159265 / 180.0;
          BOOL v21 = v70 < 85.0511288;
          double v72 = 1.48442223;
          if (v21) {
            double v72 = v71;
          }
          long double v73 = sin(v72);
          LODWORD(v74) = ((log((v73 + v7) / (v7 - v73)) / -12.5663706 + v8) * 4294967300.0);
          if (v74 >= 0xFFFFFFFE) {
            uint64_t v74 = 4294967294;
          }
          else {
            uint64_t v74 = v74;
          }
          uint64_t v68 = ((v67 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v74 << 32);
        }
      }
      if (v59 == -1 || v68 == -1)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_93;
      }
      long double v77 = exp(3.14159265 - (double)HIDWORD(v59) * 6.28318531 / 4294967300.0);
      long double v78 = atan((v77 - 1.0 / v77) * 0.5) * 57.2957795 * 0.0174532925;
      v79.i64[0] = v59;
      v79.i64[1] = v68;
      long double v80 = exp(3.14159265 - (double)HIDWORD(v68) * 6.28318531 / 4294967300.0);
      long double v81 = atan((v80 - 1.0 / v80) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v82 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v79), v102), v101), v100), v99);
      double v104 = vsubq_f64((float64x2_t)v82, (float64x2_t)vdupq_laneq_s64(v82, 1)).f64[0];
      long double v83 = sin((v78 - v81) * 0.5);
      long double v84 = v83 * v83;
      double v85 = cos(v78);
      long double v86 = v85 * cos(v81);
      double v7 = 1.0;
      long double v87 = sin(0.5 * v104);
      long double v88 = atan2(sqrt(v87 * v87 * v86 + v84), sqrt(1.0 - (v87 * v87 * v86 + v84)));
      double v89 = (v88 + v88) * 6372797.56 * 100.0;
      if (v89 >= 0.0)
      {
        double v90 = v89;
        if (v89 >= 4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89) + 1;
      }
      else
      {
        double v90 = v89;
        if (v89 <= -4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89);
        if (v91 >= 1) {
          --v91;
        }
      }
      double v90 = (double)(v91 >> 1);
LABEL_107:
      double v8 = 0.5;
      if (v90 >= 9.22337204e18)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_93;
      }
      if (v89 >= 0.0)
      {
        if (v89 < 4.50359963e15)
        {
          uint64_t v92 = (uint64_t)(v89 + v89) + 1;
LABEL_116:
          double v89 = (double)(v92 >> 1);
        }
      }
      else if (v89 > -4.50359963e15)
      {
        uint64_t v92 = (uint64_t)(v89 + v89);
        if (v92 >= 1) {
          --v92;
        }
        goto LABEL_116;
      }
      uint64_t v75 = (uint64_t)v89;
LABEL_93:
      if (v54 && *(_DWORD *)(v56 + 84) != 2)
      {
        int v76 = *(_DWORD *)(v56 + 16);
        *(_DWORD *)(v56 + 84) = 2;
        *(void *)(v56 + 48) = 0;
        *(void *)(v56 + 68) = 0;
        *(void *)(v56 + 60) = 0;
        *(unsigned char *)(v56 + 76) = 0;
        *(_DWORD *)(v56 + 16) = v76 & 0xFFFFF417 | 0x800;
        int v52 = *(_DWORD *)(a3 + 32);
      }
      uint64_t v6 = v75 + v5;
      if (++v4 < v52 - 1)
      {
        --v54;
        v55 += 8;
        if (v6 < v53) {
          continue;
        }
      }
      goto LABEL_118;
    }
  }
}

void sub_47B044(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a5 + 40) + 8 * a3 + 8) + 84) == 1) {
    return;
  }
  uint64_t v8 = a3;
  sub_46B058();
  int v10 = v9;
  unint64_t v12 = v11 + a2;
  uint64_t v13 = &off_24F8110;
  if (*(void *)(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32)) {
    uint64_t v13 = *(uint64_t (****)())(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32);
  }
  double v14 = (double)*((int *)v13 + 7) / 10000000.0;
  uint64_t v15 = -1;
  if (v14 <= 180.0)
  {
    double v16 = (double)*((int *)v13 + 6) / 10000000.0;
    if (v16 >= -85.0511288 && v16 <= 85.0511288 && v14 >= -180.0)
    {
      double v17 = fmax(v16, -85.0511288);
      double v18 = v17 * 3.14159265 / 180.0;
      BOOL v19 = v17 < 85.0511288;
      double v20 = 1.48442223;
      if (v19) {
        double v20 = v18;
      }
      long double v21 = sin(v20);
      LODWORD(v22) = ((log((v21 + 1.0) / (1.0 - v21)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v22 >= 0xFFFFFFFE) {
        uint64_t v22 = 4294967294;
      }
      else {
        uint64_t v22 = v22;
      }
      uint64_t v15 = ((v14 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v22 << 32);
    }
  }
  uint64_t v82 = v15;
  int v83 = 0x7FFFFFFF;
  sub_46B058();
  double v25 = v23;
  unint64_t v26 = v24;
  if (v23)
  {
    if (v10)
    {
      for (uint64_t i = 0; ; i += sub_46CCC8(v25, v26++, v30))
      {
        unint64_t v28 = sub_46C760(v25);
        unint64_t v29 = sub_46C760(v10);
        if (v26 >= v28 || v12 >= v29)
        {
          if (v26 < v28 == v12 < v29) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v31 = sub_46C8EC(v25, v26);
          if (v31 == sub_46C8EC(v10, v12)) {
            goto LABEL_33;
          }
        }
      }
    }
    if (v24 < sub_46C760(v23))
    {
      uint64_t i = 0;
      do
        i += sub_46CCC8(v25, v26++, v33);
      while (v26 < sub_46C760(v25));
      goto LABEL_33;
    }
LABEL_32:
    LODWORD(i) = 0;
    goto LABEL_33;
  }
  if (!v10 || v12 >= sub_46C760(v10)) {
    goto LABEL_32;
  }
  uint64_t i = 0;
  do
    i += sub_46CCC8(0, v26++, v32);
  while (v12 < sub_46C760(v10));
LABEL_33:
  uint64_t v34 = sub_46C8EC(v10, v12);
  sub_2954EC(a4, *(void *)(v34 + 32), (uint64_t)&v84);
  sub_2E4B5C((uint64_t)&v84, &v88);
  if (__p)
  {
    long double v86 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v39 = sub_450B4C((uint64_t *)&v88, 0, 0xAAAAAAAAAAAAAAABLL * ((v89 - (unsigned char *)v88) >> 2) - 1, &v82, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v35, v36, v37, v38);
  uint64_t v40 = sub_46C8EC(v10, v12);
  long double v41 = (int *)sub_2D5D58(a4, *(unsigned int *)(v40 + 32) | ((unint64_t)*(unsigned __int16 *)(v40 + 36) << 32));
  long double v43 = (unsigned __int16 *)((char *)v41 - *v41);
  double v44 = 0.0;
  if (*v43 >= 9u)
  {
    uint64_t v45 = v43[4];
    if (v45)
    {
      LODWORD(v42) = *(int *)((char *)v41 + v45);
      double v44 = (double)*(unint64_t *)&v42;
    }
  }
  double v91 = 0.0;
  double v92 = 0.0;
  uint64_t v90 = 0x7FEFFFFFFFFFFFFFLL;
  long double v84 = (double *)&v82;
  __p = &v90;
  long double v86 = &v91;
  long double v87 = &v92;
  double v46 = (unsigned int *)v88;
  double v47 = v89;
  if (v88 == v89 || (char *)v88 + 12 == v89)
  {
    double v49 = 0.0;
  }
  else
  {
    do
    {
      double v42 = sub_4582C8(&v84, (uint64_t)v46, v46 + 3, v42);
      uint64_t v48 = (char *)(v46 + 6);
      v46 += 3;
    }
    while (v48 != v47);
    double v49 = 0.0;
    if (v92 != 0.0)
    {
      double v49 = v91 / v92;
      if (v91 / v92 > 1.0) {
        double v49 = 1.0;
      }
    }
  }
  double v50 = v44 * v49;
  uint64_t v51 = (uint64_t)(v50 + v50);
  uint64_t v52 = v51 - 1;
  if (v51 < 1) {
    uint64_t v52 = (uint64_t)(v50 + v50);
  }
  uint64_t v53 = v52 >> 1;
  if (v50 > -4.50359963e15) {
    double v54 = (double)v53;
  }
  else {
    double v54 = v50;
  }
  double v55 = (double)((v51 + 1) >> 1);
  if (v50 >= 4.50359963e15) {
    double v55 = v50;
  }
  if (v50 >= 0.0) {
    double v56 = v55;
  }
  else {
    double v56 = v54;
  }
  v57 = (char *)v88;
  unsigned int v58 = v82 - *((_DWORD *)v88 + 3 * v39);
  if (v58)
  {
    unsigned int v60 = HIDWORD(v82);
    unsigned int v59 = *((_DWORD *)v88 + 3 * v39 + 1);
LABEL_60:
    double v62 = -(double)(*((_DWORD *)v88 + 3 * v39) - v82);
    if ((int)v82 - *((_DWORD *)v88 + 3 * v39) < (*((_DWORD *)v88 + 3 * v39) - v82)) {
      double v62 = (double)v58;
    }
    for (double j = (atan2((double)v60 - (double)v59, v62) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
      ;
    for (; j < -180.0; double j = j + 360.0)
      ;
    if (!v57) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  unsigned int v59 = *((_DWORD *)v88 + 3 * v39 + 1);
  unsigned int v60 = HIDWORD(v82);
  double j = 0.0;
  if (v59 != HIDWORD(v82)) {
    goto LABEL_60;
  }
LABEL_67:
  double v89 = v57;
  operator delete(v57);
LABEL_68:
  unsigned int v63 = (int)llround(j * 100.0) % 36000;
  if (v63 <= 0xFFFF735F) {
    unsigned __int16 v64 = v63;
  }
  else {
    unsigned __int16 v64 = v63 - 29536;
  }
  uint64_t v65 = *(void *)(*(void *)(a5 + 40) + 8 * v8 + 8);
  *(_DWORD *)(v65 + 16) |= 0x800u;
  *(_DWORD *)(v65 + 84) = 1;
  uint64_t v66 = *(void *)(sub_46C8EC(v10, v12) + 32);
  double v67 = (int *)sub_2D5D58(a4, v66 & 0xFFFFFFFFFFFFLL);
  uint64_t v68 = (unsigned __int16 *)((char *)v67 - *v67);
  if (*v68 >= 0x1Du && (uint64_t v69 = v68[14]) != 0) {
    uint64_t v70 = *(void *)((char *)v67 + v69);
  }
  else {
    uint64_t v70 = 0;
  }
  if ((v66 & 0xFF000000000000) != 0) {
    uint64_t v71 = -v70;
  }
  else {
    uint64_t v71 = v70;
  }
  int v72 = *(_DWORD *)(v65 + 16);
  *(_DWORD *)(v65 + 16) = v72 | 8;
  *(void *)(v65 + 48) = v71;
  double v73 = (double)v64 / 100.0;
  if (v73 < 4.50359963e15) {
    double v73 = (double)(((uint64_t)(v73 + v73) + 1) >> 1);
  }
  *(_DWORD *)(v65 + 16) = v72 | 0x28;
  *(_DWORD *)(v65 + 60) = v73;
  uint64_t v74 = sub_46C8EC(v10, v12);
  uint64_t v75 = (int *)sub_2D5D58(a4, *(unsigned int *)(v74 + 32) | ((unint64_t)*(unsigned __int16 *)(v74 + 36) << 32));
  int v76 = (unsigned __int16 *)((char *)v75 - *v75);
  if (*v76 < 0x1Bu)
  {
    LODWORD(v77) = 0;
  }
  else
  {
    uint64_t v77 = v76[13];
    if (v77) {
      LODWORD(v77) = *((unsigned __int8 *)v75 + v77);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x40u;
  *(_DWORD *)(v65 + 64) = v77;
  uint64_t v78 = sub_46C8EC(v10, v12);
  uint64x2_t v79 = (int *)sub_2D5D58(a4, *(unsigned int *)(v78 + 32) | ((unint64_t)*(unsigned __int16 *)(v78 + 36) << 32));
  long double v80 = (unsigned __int16 *)((char *)v79 - *v79);
  if (*v80 < 0x13u)
  {
    LODWORD(v81) = 0;
  }
  else
  {
    uint64_t v81 = v80[9];
    if (v81) {
      LODWORD(v81) = *((char *)v79 + v81);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x180u;
  *(_DWORD *)(v65 + 68) = v81;
  *(_DWORD *)(v65 + 72) = i + (uint64_t)v56;
}

void sub_47B790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_47B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(a1 + 1032);
  v94 = *(uint64_t **)(a1 + 1040);
  if (v3 != v94)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    double v7 = 1.0;
    double v8 = 0.5;
    float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v102 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v99 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v100 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v9 = *(int *)(a3 + 32);
      int v10 = v9 - 1;
      uint64_t v11 = v3[2];
      if ((int)v4 < (int)v9 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v11)
        {
          uint64_t v12 = *(void *)(a3 + 40);
          uint64_t v13 = v9 - 2;
          do
          {
            uint64_t v5 = v6;
            uint64_t v14 = v12 + 8 * v4;
            uint64_t v15 = *(uint64_t (****)())(*(void *)(v14 + 8) + 32);
            if (!v15) {
              uint64_t v15 = &off_24F8110;
            }
            double v16 = (double)*((int *)v15 + 7) / 10000000.0;
            uint64_t v17 = -1;
            if (v16 <= 180.0)
            {
              double v18 = (double)*((int *)v15 + 6) / 10000000.0;
              if (v18 >= -85.0511288 && v18 <= 85.0511288 && v16 >= -180.0)
              {
                double v19 = fmax(v18, -85.0511288);
                double v20 = v19 * 3.14159265 / 180.0;
                BOOL v21 = v19 < 85.0511288;
                double v22 = 1.48442223;
                if (v21) {
                  double v22 = v20;
                }
                long double v23 = sin(v22);
                LODWORD(v24) = ((log((v23 + v7) / (v7 - v23)) / -12.5663706 + v8) * 4294967300.0);
                if (v24 >= 0xFFFFFFFE) {
                  uint64_t v24 = 4294967294;
                }
                else {
                  uint64_t v24 = v24;
                }
                uint64_t v17 = ((v16 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v24 << 32);
              }
            }
            double v25 = *(uint64_t (****)())(*(void *)(v14 + 16) + 32);
            if (!v25) {
              double v25 = &off_24F8110;
            }
            double v26 = (double)*((int *)v25 + 7) / 10000000.0;
            uint64_t v27 = -1;
            if (v26 <= 180.0)
            {
              double v28 = (double)*((int *)v25 + 6) / 10000000.0;
              if (v28 >= -85.0511288 && v28 <= 85.0511288 && v26 >= -180.0)
              {
                double v29 = fmax(v28, -85.0511288);
                double v30 = v29 * 3.14159265 / 180.0;
                BOOL v21 = v29 < 85.0511288;
                double v31 = 1.48442223;
                if (v21) {
                  double v31 = v30;
                }
                long double v32 = sin(v31);
                LODWORD(v33) = ((log((v32 + v7) / (v7 - v32)) / -12.5663706 + v8) * 4294967300.0);
                if (v33 >= 0xFFFFFFFE) {
                  uint64_t v33 = 4294967294;
                }
                else {
                  uint64_t v33 = v33;
                }
                uint64_t v27 = ((v26 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v33 << 32);
              }
            }
            if (v17 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v27 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            long double v34 = exp(3.14159265 - (double)HIDWORD(v17) * 6.28318531 / 4294967300.0);
            long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
            v36.i64[0] = v17;
            v36.i64[1] = v27;
            long double v37 = exp(3.14159265 - (double)HIDWORD(v27) * 6.28318531 / 4294967300.0);
            long double v38 = atan((v37 - 1.0 / v37) * 0.5) * 57.2957795 * 0.0174532925;
            int64x2_t v39 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v36), v102), v101), v100), v99);
            double v103 = vsubq_f64((float64x2_t)v39, (float64x2_t)vdupq_laneq_s64(v39, 1)).f64[0];
            long double v40 = sin((v35 - v38) * 0.5);
            long double v41 = v40 * v40;
            double v42 = cos(v35);
            long double v43 = v42 * cos(v38);
            double v7 = 1.0;
            long double v44 = sin(0.5 * v103);
            long double v45 = atan2(sqrt(v44 * v44 * v43 + v41), sqrt(1.0 - (v44 * v44 * v43 + v41)));
            double v46 = (v45 + v45) * 6372797.56 * 100.0;
            if (v46 >= 0.0)
            {
              double v47 = v46;
              if (v46 >= 4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              double v47 = v46;
              if (v46 <= -4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46);
              if (v48 >= 1) {
                --v48;
              }
            }
            double v47 = (double)(v48 >> 1);
LABEL_45:
            double v8 = 0.5;
            if (v47 >= 9.22337204e18)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFELL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v46 >= 0.0)
            {
              if (v46 >= 4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              if (v46 <= -4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46);
              if (v49 >= 1) {
                --v49;
              }
            }
            double v46 = (double)(v49 >> 1);
LABEL_56:
            uint64_t v6 = (uint64_t)v46 + v5;
            if (v13 == v4)
            {
LABEL_59:
              LODWORD(v4) = v10;
              break;
            }
LABEL_57:
            ++v4;
          }
          while (v6 < v11);
        }
      }
      uint64_t v50 = v11 - v5;
      uint64_t v51 = v6 - v11;
      int v97 = v4 - (v50 < v51);
      sub_47C314(a1, *v3, v97, a2, a3);
      int v52 = *(_DWORD *)(a3 + 32);
      v98 = v3;
      uint64_t v53 = v3[3];
      if ((int)v4 < v52 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v53) {
          break;
        }
      }
LABEL_118:
      int v93 = v4 - (v53 - v5 < v6 - v53);
      if (v93 != v97) {
        sub_47C314(a1, v3[1], v93, a2, a3);
      }
      v3 += 8;
      if (v98 + 8 == v94) {
        return;
      }
    }
    if (v50 >= v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = -1;
    }
    uint64_t v55 = *(void *)(a3 + 40) + 8 * (int)v4 + 16;
    while (1)
    {
      uint64_t v5 = v6;
      uint64_t v56 = *(void *)(v55 - 8);
      v57 = *(uint64_t (****)())(v56 + 32);
      if (!v57) {
        v57 = &off_24F8110;
      }
      double v58 = (double)*((int *)v57 + 7) / 10000000.0;
      uint64_t v59 = -1;
      if (v58 <= 180.0)
      {
        double v60 = (double)*((int *)v57 + 6) / 10000000.0;
        if (v60 >= -85.0511288 && v60 <= 85.0511288 && v58 >= -180.0)
        {
          double v61 = fmax(v60, -85.0511288);
          double v62 = v61 * 3.14159265 / 180.0;
          BOOL v21 = v61 < 85.0511288;
          double v63 = 1.48442223;
          if (v21) {
            double v63 = v62;
          }
          long double v64 = sin(v63);
          LODWORD(v65) = ((log((v64 + v7) / (v7 - v64)) / -12.5663706 + v8) * 4294967300.0);
          if (v65 >= 0xFFFFFFFE) {
            uint64_t v65 = 4294967294;
          }
          else {
            uint64_t v65 = v65;
          }
          uint64_t v59 = ((v58 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v65 << 32);
        }
      }
      uint64_t v66 = *(uint64_t (****)())(*(void *)v55 + 32);
      if (!v66) {
        uint64_t v66 = &off_24F8110;
      }
      double v67 = (double)*((int *)v66 + 7) / 10000000.0;
      uint64_t v68 = -1;
      if (v67 <= 180.0)
      {
        double v69 = (double)*((int *)v66 + 6) / 10000000.0;
        if (v69 >= -85.0511288 && v69 <= 85.0511288 && v67 >= -180.0)
        {
          double v70 = fmax(v69, -85.0511288);
          double v71 = v70 * 3.14159265 / 180.0;
          BOOL v21 = v70 < 85.0511288;
          double v72 = 1.48442223;
          if (v21) {
            double v72 = v71;
          }
          long double v73 = sin(v72);
          LODWORD(v74) = ((log((v73 + v7) / (v7 - v73)) / -12.5663706 + v8) * 4294967300.0);
          if (v74 >= 0xFFFFFFFE) {
            uint64_t v74 = 4294967294;
          }
          else {
            uint64_t v74 = v74;
          }
          uint64_t v68 = ((v67 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v74 << 32);
        }
      }
      if (v59 == -1 || v68 == -1)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_93;
      }
      long double v77 = exp(3.14159265 - (double)HIDWORD(v59) * 6.28318531 / 4294967300.0);
      long double v78 = atan((v77 - 1.0 / v77) * 0.5) * 57.2957795 * 0.0174532925;
      v79.i64[0] = v59;
      v79.i64[1] = v68;
      long double v80 = exp(3.14159265 - (double)HIDWORD(v68) * 6.28318531 / 4294967300.0);
      long double v81 = atan((v80 - 1.0 / v80) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v82 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v79), v102), v101), v100), v99);
      double v104 = vsubq_f64((float64x2_t)v82, (float64x2_t)vdupq_laneq_s64(v82, 1)).f64[0];
      long double v83 = sin((v78 - v81) * 0.5);
      long double v84 = v83 * v83;
      double v85 = cos(v78);
      long double v86 = v85 * cos(v81);
      double v7 = 1.0;
      long double v87 = sin(0.5 * v104);
      long double v88 = atan2(sqrt(v87 * v87 * v86 + v84), sqrt(1.0 - (v87 * v87 * v86 + v84)));
      double v89 = (v88 + v88) * 6372797.56 * 100.0;
      if (v89 >= 0.0)
      {
        double v90 = v89;
        if (v89 >= 4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89) + 1;
      }
      else
      {
        double v90 = v89;
        if (v89 <= -4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89);
        if (v91 >= 1) {
          --v91;
        }
      }
      double v90 = (double)(v91 >> 1);
LABEL_107:
      double v8 = 0.5;
      if (v90 >= 9.22337204e18)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_93;
      }
      if (v89 >= 0.0)
      {
        if (v89 < 4.50359963e15)
        {
          uint64_t v92 = (uint64_t)(v89 + v89) + 1;
LABEL_116:
          double v89 = (double)(v92 >> 1);
        }
      }
      else if (v89 > -4.50359963e15)
      {
        uint64_t v92 = (uint64_t)(v89 + v89);
        if (v92 >= 1) {
          --v92;
        }
        goto LABEL_116;
      }
      uint64_t v75 = (uint64_t)v89;
LABEL_93:
      if (v54 && *(_DWORD *)(v56 + 84) != 2)
      {
        int v76 = *(_DWORD *)(v56 + 16);
        *(_DWORD *)(v56 + 84) = 2;
        *(void *)(v56 + 48) = 0;
        *(void *)(v56 + 68) = 0;
        *(void *)(v56 + 60) = 0;
        *(unsigned char *)(v56 + 76) = 0;
        *(_DWORD *)(v56 + 16) = v76 & 0xFFFFF417 | 0x800;
        int v52 = *(_DWORD *)(a3 + 32);
      }
      uint64_t v6 = v75 + v5;
      if (++v4 < v52 - 1)
      {
        --v54;
        v55 += 8;
        if (v6 < v53) {
          continue;
        }
      }
      goto LABEL_118;
    }
  }
}

void sub_47C314(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a5 + 40) + 8 * a3 + 8) + 84) == 1) {
    return;
  }
  uint64_t v8 = a3;
  sub_46B058();
  int v10 = v9;
  unint64_t v12 = v11 + a2;
  uint64_t v13 = &off_24F8110;
  if (*(void *)(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32)) {
    uint64_t v13 = *(uint64_t (****)())(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32);
  }
  double v14 = (double)*((int *)v13 + 7) / 10000000.0;
  uint64_t v15 = -1;
  if (v14 <= 180.0)
  {
    double v16 = (double)*((int *)v13 + 6) / 10000000.0;
    if (v16 >= -85.0511288 && v16 <= 85.0511288 && v14 >= -180.0)
    {
      double v17 = fmax(v16, -85.0511288);
      double v18 = v17 * 3.14159265 / 180.0;
      BOOL v19 = v17 < 85.0511288;
      double v20 = 1.48442223;
      if (v19) {
        double v20 = v18;
      }
      long double v21 = sin(v20);
      LODWORD(v22) = ((log((v21 + 1.0) / (1.0 - v21)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v22 >= 0xFFFFFFFE) {
        uint64_t v22 = 4294967294;
      }
      else {
        uint64_t v22 = v22;
      }
      uint64_t v15 = ((v14 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v22 << 32);
    }
  }
  uint64_t v82 = v15;
  int v83 = 0x7FFFFFFF;
  sub_46B058();
  double v25 = v23;
  unint64_t v26 = v24;
  if (v23)
  {
    if (v10)
    {
      for (uint64_t i = 0; ; i += sub_46CCC8(v25, v26++, v30))
      {
        unint64_t v28 = sub_46C760(v25);
        unint64_t v29 = sub_46C760(v10);
        if (v26 >= v28 || v12 >= v29)
        {
          if (v26 < v28 == v12 < v29) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v31 = sub_46C8EC(v25, v26);
          if (v31 == sub_46C8EC(v10, v12)) {
            goto LABEL_33;
          }
        }
      }
    }
    if (v24 < sub_46C760(v23))
    {
      uint64_t i = 0;
      do
        i += sub_46CCC8(v25, v26++, v33);
      while (v26 < sub_46C760(v25));
      goto LABEL_33;
    }
LABEL_32:
    LODWORD(i) = 0;
    goto LABEL_33;
  }
  if (!v10 || v12 >= sub_46C760(v10)) {
    goto LABEL_32;
  }
  uint64_t i = 0;
  do
    i += sub_46CCC8(0, v26++, v32);
  while (v12 < sub_46C760(v10));
LABEL_33:
  uint64_t v34 = sub_46C8EC(v10, v12);
  sub_2954EC(a4, *(void *)(v34 + 32), (uint64_t)&v84);
  sub_2E4B5C((uint64_t)&v84, &v88);
  if (__p)
  {
    long double v86 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v39 = sub_450B4C((uint64_t *)&v88, 0, 0xAAAAAAAAAAAAAAABLL * ((v89 - (unsigned char *)v88) >> 2) - 1, &v82, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v35, v36, v37, v38);
  uint64_t v40 = sub_46C8EC(v10, v12);
  long double v41 = (int *)sub_2D5D58(a4, *(unsigned int *)(v40 + 32) | ((unint64_t)*(unsigned __int16 *)(v40 + 36) << 32));
  long double v43 = (unsigned __int16 *)((char *)v41 - *v41);
  double v44 = 0.0;
  if (*v43 >= 9u)
  {
    uint64_t v45 = v43[4];
    if (v45)
    {
      LODWORD(v42) = *(int *)((char *)v41 + v45);
      double v44 = (double)*(unint64_t *)&v42;
    }
  }
  double v91 = 0.0;
  double v92 = 0.0;
  uint64_t v90 = 0x7FEFFFFFFFFFFFFFLL;
  long double v84 = (double *)&v82;
  __p = &v90;
  long double v86 = &v91;
  long double v87 = &v92;
  double v46 = (unsigned int *)v88;
  double v47 = v89;
  if (v88 == v89 || (char *)v88 + 12 == v89)
  {
    double v49 = 0.0;
  }
  else
  {
    do
    {
      double v42 = sub_4582C8(&v84, (uint64_t)v46, v46 + 3, v42);
      uint64_t v48 = (char *)(v46 + 6);
      v46 += 3;
    }
    while (v48 != v47);
    double v49 = 0.0;
    if (v92 != 0.0)
    {
      double v49 = v91 / v92;
      if (v91 / v92 > 1.0) {
        double v49 = 1.0;
      }
    }
  }
  double v50 = v44 * v49;
  uint64_t v51 = (uint64_t)(v50 + v50);
  uint64_t v52 = v51 - 1;
  if (v51 < 1) {
    uint64_t v52 = (uint64_t)(v50 + v50);
  }
  uint64_t v53 = v52 >> 1;
  if (v50 > -4.50359963e15) {
    double v54 = (double)v53;
  }
  else {
    double v54 = v50;
  }
  double v55 = (double)((v51 + 1) >> 1);
  if (v50 >= 4.50359963e15) {
    double v55 = v50;
  }
  if (v50 >= 0.0) {
    double v56 = v55;
  }
  else {
    double v56 = v54;
  }
  v57 = (char *)v88;
  unsigned int v58 = v82 - *((_DWORD *)v88 + 3 * v39);
  if (v58)
  {
    unsigned int v60 = HIDWORD(v82);
    unsigned int v59 = *((_DWORD *)v88 + 3 * v39 + 1);
LABEL_60:
    double v62 = -(double)(*((_DWORD *)v88 + 3 * v39) - v82);
    if ((int)v82 - *((_DWORD *)v88 + 3 * v39) < (*((_DWORD *)v88 + 3 * v39) - v82)) {
      double v62 = (double)v58;
    }
    for (double j = (atan2((double)v60 - (double)v59, v62) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
      ;
    for (; j < -180.0; double j = j + 360.0)
      ;
    if (!v57) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  unsigned int v59 = *((_DWORD *)v88 + 3 * v39 + 1);
  unsigned int v60 = HIDWORD(v82);
  double j = 0.0;
  if (v59 != HIDWORD(v82)) {
    goto LABEL_60;
  }
LABEL_67:
  double v89 = v57;
  operator delete(v57);
LABEL_68:
  unsigned int v63 = (int)llround(j * 100.0) % 36000;
  if (v63 <= 0xFFFF735F) {
    unsigned __int16 v64 = v63;
  }
  else {
    unsigned __int16 v64 = v63 - 29536;
  }
  uint64_t v65 = *(void *)(*(void *)(a5 + 40) + 8 * v8 + 8);
  *(_DWORD *)(v65 + 16) |= 0x800u;
  *(_DWORD *)(v65 + 84) = 1;
  uint64_t v66 = *(void *)(sub_46C8EC(v10, v12) + 32);
  double v67 = (int *)sub_2D5D58(a4, v66 & 0xFFFFFFFFFFFFLL);
  uint64_t v68 = (unsigned __int16 *)((char *)v67 - *v67);
  if (*v68 >= 0x1Du && (uint64_t v69 = v68[14]) != 0) {
    uint64_t v70 = *(void *)((char *)v67 + v69);
  }
  else {
    uint64_t v70 = 0;
  }
  if ((v66 & 0xFF000000000000) != 0) {
    uint64_t v71 = -v70;
  }
  else {
    uint64_t v71 = v70;
  }
  int v72 = *(_DWORD *)(v65 + 16);
  *(_DWORD *)(v65 + 16) = v72 | 8;
  *(void *)(v65 + 48) = v71;
  double v73 = (double)v64 / 100.0;
  if (v73 < 4.50359963e15) {
    double v73 = (double)(((uint64_t)(v73 + v73) + 1) >> 1);
  }
  *(_DWORD *)(v65 + 16) = v72 | 0x28;
  *(_DWORD *)(v65 + 60) = v73;
  uint64_t v74 = sub_46C8EC(v10, v12);
  uint64_t v75 = (int *)sub_2D5D58(a4, *(unsigned int *)(v74 + 32) | ((unint64_t)*(unsigned __int16 *)(v74 + 36) << 32));
  int v76 = (unsigned __int16 *)((char *)v75 - *v75);
  if (*v76 < 0x1Bu)
  {
    LODWORD(v77) = 0;
  }
  else
  {
    uint64_t v77 = v76[13];
    if (v77) {
      LODWORD(v77) = *((unsigned __int8 *)v75 + v77);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x40u;
  *(_DWORD *)(v65 + 64) = v77;
  uint64_t v78 = sub_46C8EC(v10, v12);
  uint64x2_t v79 = (int *)sub_2D5D58(a4, *(unsigned int *)(v78 + 32) | ((unint64_t)*(unsigned __int16 *)(v78 + 36) << 32));
  long double v80 = (unsigned __int16 *)((char *)v79 - *v79);
  if (*v80 < 0x13u)
  {
    LODWORD(v81) = 0;
  }
  else
  {
    uint64_t v81 = v80[9];
    if (v81) {
      LODWORD(v81) = *((char *)v79 + v81);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x180u;
  *(_DWORD *)(v65 + 68) = v81;
  *(_DWORD *)(v65 + 72) = i + (uint64_t)v56;
}

void sub_47CA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_47CA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(a1 + 1032);
  v94 = *(uint64_t **)(a1 + 1040);
  if (v3 != v94)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    double v7 = 1.0;
    double v8 = 0.5;
    float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v102 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v99 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v100 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v9 = *(int *)(a3 + 32);
      int v10 = v9 - 1;
      uint64_t v11 = v3[2];
      if ((int)v4 < (int)v9 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v11)
        {
          uint64_t v12 = *(void *)(a3 + 40);
          uint64_t v13 = v9 - 2;
          do
          {
            uint64_t v5 = v6;
            uint64_t v14 = v12 + 8 * v4;
            uint64_t v15 = *(uint64_t (****)())(*(void *)(v14 + 8) + 32);
            if (!v15) {
              uint64_t v15 = &off_24F8110;
            }
            double v16 = (double)*((int *)v15 + 7) / 10000000.0;
            uint64_t v17 = -1;
            if (v16 <= 180.0)
            {
              double v18 = (double)*((int *)v15 + 6) / 10000000.0;
              if (v18 >= -85.0511288 && v18 <= 85.0511288 && v16 >= -180.0)
              {
                double v19 = fmax(v18, -85.0511288);
                double v20 = v19 * 3.14159265 / 180.0;
                BOOL v21 = v19 < 85.0511288;
                double v22 = 1.48442223;
                if (v21) {
                  double v22 = v20;
                }
                long double v23 = sin(v22);
                LODWORD(v24) = ((log((v23 + v7) / (v7 - v23)) / -12.5663706 + v8) * 4294967300.0);
                if (v24 >= 0xFFFFFFFE) {
                  uint64_t v24 = 4294967294;
                }
                else {
                  uint64_t v24 = v24;
                }
                uint64_t v17 = ((v16 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v24 << 32);
              }
            }
            double v25 = *(uint64_t (****)())(*(void *)(v14 + 16) + 32);
            if (!v25) {
              double v25 = &off_24F8110;
            }
            double v26 = (double)*((int *)v25 + 7) / 10000000.0;
            uint64_t v27 = -1;
            if (v26 <= 180.0)
            {
              double v28 = (double)*((int *)v25 + 6) / 10000000.0;
              if (v28 >= -85.0511288 && v28 <= 85.0511288 && v26 >= -180.0)
              {
                double v29 = fmax(v28, -85.0511288);
                double v30 = v29 * 3.14159265 / 180.0;
                BOOL v21 = v29 < 85.0511288;
                double v31 = 1.48442223;
                if (v21) {
                  double v31 = v30;
                }
                long double v32 = sin(v31);
                LODWORD(v33) = ((log((v32 + v7) / (v7 - v32)) / -12.5663706 + v8) * 4294967300.0);
                if (v33 >= 0xFFFFFFFE) {
                  uint64_t v33 = 4294967294;
                }
                else {
                  uint64_t v33 = v33;
                }
                uint64_t v27 = ((v26 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v33 << 32);
              }
            }
            if (v17 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v27 == -1)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFFLL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            long double v34 = exp(3.14159265 - (double)HIDWORD(v17) * 6.28318531 / 4294967300.0);
            long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
            v36.i64[0] = v17;
            v36.i64[1] = v27;
            long double v37 = exp(3.14159265 - (double)HIDWORD(v27) * 6.28318531 / 4294967300.0);
            long double v38 = atan((v37 - 1.0 / v37) * 0.5) * 57.2957795 * 0.0174532925;
            int64x2_t v39 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v36), v102), v101), v100), v99);
            double v103 = vsubq_f64((float64x2_t)v39, (float64x2_t)vdupq_laneq_s64(v39, 1)).f64[0];
            long double v40 = sin((v35 - v38) * 0.5);
            long double v41 = v40 * v40;
            double v42 = cos(v35);
            long double v43 = v42 * cos(v38);
            double v7 = 1.0;
            long double v44 = sin(0.5 * v103);
            long double v45 = atan2(sqrt(v44 * v44 * v43 + v41), sqrt(1.0 - (v44 * v44 * v43 + v41)));
            double v46 = (v45 + v45) * 6372797.56 * 100.0;
            if (v46 >= 0.0)
            {
              double v47 = v46;
              if (v46 >= 4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              double v47 = v46;
              if (v46 <= -4.50359963e15) {
                goto LABEL_45;
              }
              uint64_t v48 = (uint64_t)(v46 + v46);
              if (v48 >= 1) {
                --v48;
              }
            }
            double v47 = (double)(v48 >> 1);
LABEL_45:
            double v8 = 0.5;
            if (v47 >= 9.22337204e18)
            {
              uint64_t v6 = v5 + 0x7FFFFFFFFFFFFFFELL;
              if (v13 == v4) {
                goto LABEL_59;
              }
              goto LABEL_57;
            }
            if (v46 >= 0.0)
            {
              if (v46 >= 4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46) + 1;
            }
            else
            {
              if (v46 <= -4.50359963e15) {
                goto LABEL_56;
              }
              uint64_t v49 = (uint64_t)(v46 + v46);
              if (v49 >= 1) {
                --v49;
              }
            }
            double v46 = (double)(v49 >> 1);
LABEL_56:
            uint64_t v6 = (uint64_t)v46 + v5;
            if (v13 == v4)
            {
LABEL_59:
              LODWORD(v4) = v10;
              break;
            }
LABEL_57:
            ++v4;
          }
          while (v6 < v11);
        }
      }
      uint64_t v50 = v11 - v5;
      uint64_t v51 = v6 - v11;
      int v97 = v4 - (v50 < v51);
      sub_47D5E4(a1, *v3, v97, a2, a3);
      int v52 = *(_DWORD *)(a3 + 32);
      v98 = v3;
      uint64_t v53 = v3[3];
      if ((int)v4 < v52 - 1)
      {
        uint64_t v4 = (int)v4;
        if (v6 < v53) {
          break;
        }
      }
LABEL_118:
      int v93 = v4 - (v53 - v5 < v6 - v53);
      if (v93 != v97) {
        sub_47D5E4(a1, v3[1], v93, a2, a3);
      }
      v3 += 8;
      if (v98 + 8 == v94) {
        return;
      }
    }
    if (v50 >= v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = -1;
    }
    uint64_t v55 = *(void *)(a3 + 40) + 8 * (int)v4 + 16;
    while (1)
    {
      uint64_t v5 = v6;
      uint64_t v56 = *(void *)(v55 - 8);
      v57 = *(uint64_t (****)())(v56 + 32);
      if (!v57) {
        v57 = &off_24F8110;
      }
      double v58 = (double)*((int *)v57 + 7) / 10000000.0;
      uint64_t v59 = -1;
      if (v58 <= 180.0)
      {
        double v60 = (double)*((int *)v57 + 6) / 10000000.0;
        if (v60 >= -85.0511288 && v60 <= 85.0511288 && v58 >= -180.0)
        {
          double v61 = fmax(v60, -85.0511288);
          double v62 = v61 * 3.14159265 / 180.0;
          BOOL v21 = v61 < 85.0511288;
          double v63 = 1.48442223;
          if (v21) {
            double v63 = v62;
          }
          long double v64 = sin(v63);
          LODWORD(v65) = ((log((v64 + v7) / (v7 - v64)) / -12.5663706 + v8) * 4294967300.0);
          if (v65 >= 0xFFFFFFFE) {
            uint64_t v65 = 4294967294;
          }
          else {
            uint64_t v65 = v65;
          }
          uint64_t v59 = ((v58 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v65 << 32);
        }
      }
      uint64_t v66 = *(uint64_t (****)())(*(void *)v55 + 32);
      if (!v66) {
        uint64_t v66 = &off_24F8110;
      }
      double v67 = (double)*((int *)v66 + 7) / 10000000.0;
      uint64_t v68 = -1;
      if (v67 <= 180.0)
      {
        double v69 = (double)*((int *)v66 + 6) / 10000000.0;
        if (v69 >= -85.0511288 && v69 <= 85.0511288 && v67 >= -180.0)
        {
          double v70 = fmax(v69, -85.0511288);
          double v71 = v70 * 3.14159265 / 180.0;
          BOOL v21 = v70 < 85.0511288;
          double v72 = 1.48442223;
          if (v21) {
            double v72 = v71;
          }
          long double v73 = sin(v72);
          LODWORD(v74) = ((log((v73 + v7) / (v7 - v73)) / -12.5663706 + v8) * 4294967300.0);
          if (v74 >= 0xFFFFFFFE) {
            uint64_t v74 = 4294967294;
          }
          else {
            uint64_t v74 = v74;
          }
          uint64_t v68 = ((v67 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v74 << 32);
        }
      }
      if (v59 == -1 || v68 == -1)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_93;
      }
      long double v77 = exp(3.14159265 - (double)HIDWORD(v59) * 6.28318531 / 4294967300.0);
      long double v78 = atan((v77 - 1.0 / v77) * 0.5) * 57.2957795 * 0.0174532925;
      v79.i64[0] = v59;
      v79.i64[1] = v68;
      long double v80 = exp(3.14159265 - (double)HIDWORD(v68) * 6.28318531 / 4294967300.0);
      long double v81 = atan((v80 - 1.0 / v80) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v82 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v79), v102), v101), v100), v99);
      double v104 = vsubq_f64((float64x2_t)v82, (float64x2_t)vdupq_laneq_s64(v82, 1)).f64[0];
      long double v83 = sin((v78 - v81) * 0.5);
      long double v84 = v83 * v83;
      double v85 = cos(v78);
      long double v86 = v85 * cos(v81);
      double v7 = 1.0;
      long double v87 = sin(0.5 * v104);
      long double v88 = atan2(sqrt(v87 * v87 * v86 + v84), sqrt(1.0 - (v87 * v87 * v86 + v84)));
      double v89 = (v88 + v88) * 6372797.56 * 100.0;
      if (v89 >= 0.0)
      {
        double v90 = v89;
        if (v89 >= 4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89) + 1;
      }
      else
      {
        double v90 = v89;
        if (v89 <= -4.50359963e15) {
          goto LABEL_107;
        }
        uint64_t v91 = (uint64_t)(v89 + v89);
        if (v91 >= 1) {
          --v91;
        }
      }
      double v90 = (double)(v91 >> 1);
LABEL_107:
      double v8 = 0.5;
      if (v90 >= 9.22337204e18)
      {
        uint64_t v75 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_93;
      }
      if (v89 >= 0.0)
      {
        if (v89 < 4.50359963e15)
        {
          uint64_t v92 = (uint64_t)(v89 + v89) + 1;
LABEL_116:
          double v89 = (double)(v92 >> 1);
        }
      }
      else if (v89 > -4.50359963e15)
      {
        uint64_t v92 = (uint64_t)(v89 + v89);
        if (v92 >= 1) {
          --v92;
        }
        goto LABEL_116;
      }
      uint64_t v75 = (uint64_t)v89;
LABEL_93:
      if (v54 && *(_DWORD *)(v56 + 84) != 2)
      {
        int v76 = *(_DWORD *)(v56 + 16);
        *(_DWORD *)(v56 + 84) = 2;
        *(void *)(v56 + 48) = 0;
        *(void *)(v56 + 68) = 0;
        *(void *)(v56 + 60) = 0;
        *(unsigned char *)(v56 + 76) = 0;
        *(_DWORD *)(v56 + 16) = v76 & 0xFFFFF417 | 0x800;
        int v52 = *(_DWORD *)(a3 + 32);
      }
      uint64_t v6 = v75 + v5;
      if (++v4 < v52 - 1)
      {
        --v54;
        v55 += 8;
        if (v6 < v53) {
          continue;
        }
      }
      goto LABEL_118;
    }
  }
}

void sub_47D5E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a5 + 40) + 8 * a3 + 8) + 84) == 1) {
    return;
  }
  uint64_t v8 = a3;
  sub_46B058();
  int v10 = v9;
  unint64_t v12 = v11 + a2;
  uint64_t v13 = &off_24F8110;
  if (*(void *)(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32)) {
    uint64_t v13 = *(uint64_t (****)())(*(void *)(*(void *)(a5 + 40) + 8 * v8 + 8) + 32);
  }
  double v14 = (double)*((int *)v13 + 7) / 10000000.0;
  uint64_t v15 = -1;
  if (v14 <= 180.0)
  {
    double v16 = (double)*((int *)v13 + 6) / 10000000.0;
    if (v16 >= -85.0511288 && v16 <= 85.0511288 && v14 >= -180.0)
    {
      double v17 = fmax(v16, -85.0511288);
      double v18 = v17 * 3.14159265 / 180.0;
      BOOL v19 = v17 < 85.0511288;
      double v20 = 1.48442223;
      if (v19) {
        double v20 = v18;
      }
      long double v21 = sin(v20);
      LODWORD(v22) = ((log((v21 + 1.0) / (1.0 - v21)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v22 >= 0xFFFFFFFE) {
        uint64_t v22 = 4294967294;
      }
      else {
        uint64_t v22 = v22;
      }
      uint64_t v15 = ((v14 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v22 << 32);
    }
  }
  uint64_t v83 = v15;
  int v84 = 0x7FFFFFFF;
  sub_46B058();
  double v25 = v23;
  unint64_t v26 = v24;
  if (v23)
  {
    if (v10)
    {
      for (uint64_t i = 0; ; i += sub_470F2C(v25, v26++, v30))
      {
        unint64_t v28 = sub_470ADC(v25);
        unint64_t v29 = sub_470ADC(v10);
        if (v26 >= v28 || v12 >= v29)
        {
          if (v26 < v28 == v12 < v29) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v31 = sub_470B40(v25, v26);
          if (v31 == sub_470B40(v10, v12)) {
            goto LABEL_33;
          }
        }
      }
    }
    if (v24 < sub_470ADC(v23))
    {
      uint64_t i = 0;
      do
        i += sub_470F2C(v25, v26++, v33);
      while (v26 < sub_470ADC(v25));
      goto LABEL_33;
    }
LABEL_32:
    LODWORD(i) = 0;
    goto LABEL_33;
  }
  if (!v10 || v12 >= sub_470ADC(v10)) {
    goto LABEL_32;
  }
  uint64_t i = 0;
  do
    i += sub_470F2C(0, v26++, v32);
  while (v12 < sub_470ADC(v10));
LABEL_33:
  long double v34 = (unsigned int *)sub_470B40(v10, v12);
  sub_2954EC(a4, (((unint64_t)(v34[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v34[1] << 32) | *v34) ^ 0x1000000000000, (uint64_t)&v85);
  sub_2E4B5C((uint64_t)&v85, &v89);
  if (__p)
  {
    long double v87 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v39 = sub_450B4C((uint64_t *)&v89, 0, 0xAAAAAAAAAAAAAAABLL * ((v90 - (unsigned char *)v89) >> 2) - 1, &v83, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v35, v36, v37, v38);
  long double v40 = (unsigned int *)sub_470B40(v10, v12);
  long double v41 = (int *)sub_2D5D58(a4, *v40 | ((unint64_t)(v40[1] & 0x1FFFFFFF) << 32));
  long double v43 = (unsigned __int16 *)((char *)v41 - *v41);
  double v44 = 0.0;
  if (*v43 >= 9u)
  {
    uint64_t v45 = v43[4];
    if (v45)
    {
      LODWORD(v42) = *(int *)((char *)v41 + v45);
      double v44 = (double)*(unint64_t *)&v42;
    }
  }
  double v92 = 0.0;
  double v93 = 0.0;
  uint64_t v91 = 0x7FEFFFFFFFFFFFFFLL;
  double v85 = (double *)&v83;
  __p = &v91;
  long double v87 = &v92;
  long double v88 = &v93;
  double v46 = (unsigned int *)v89;
  double v47 = v90;
  if (v89 == v90 || (char *)v89 + 12 == v90)
  {
    double v49 = 0.0;
  }
  else
  {
    do
    {
      double v42 = sub_4582C8(&v85, (uint64_t)v46, v46 + 3, v42);
      uint64_t v48 = (char *)(v46 + 6);
      v46 += 3;
    }
    while (v48 != v47);
    double v49 = 0.0;
    if (v93 != 0.0)
    {
      double v49 = v92 / v93;
      if (v92 / v93 > 1.0) {
        double v49 = 1.0;
      }
    }
  }
  double v50 = v44 * v49;
  uint64_t v51 = (uint64_t)(v50 + v50);
  uint64_t v52 = v51 - 1;
  if (v51 < 1) {
    uint64_t v52 = (uint64_t)(v50 + v50);
  }
  uint64_t v53 = v52 >> 1;
  if (v50 > -4.50359963e15) {
    double v54 = (double)v53;
  }
  else {
    double v54 = v50;
  }
  double v55 = (double)((v51 + 1) >> 1);
  if (v50 >= 4.50359963e15) {
    double v55 = v50;
  }
  if (v50 >= 0.0) {
    double v56 = v55;
  }
  else {
    double v56 = v54;
  }
  v57 = (char *)v89;
  unsigned int v58 = v83 - *((_DWORD *)v89 + 3 * v39);
  if (v58)
  {
    unsigned int v60 = HIDWORD(v83);
    unsigned int v59 = *((_DWORD *)v89 + 3 * v39 + 1);
LABEL_60:
    double v62 = -(double)(*((_DWORD *)v89 + 3 * v39) - v83);
    if ((int)v83 - *((_DWORD *)v89 + 3 * v39) < (*((_DWORD *)v89 + 3 * v39) - v83)) {
      double v62 = (double)v58;
    }
    for (double j = (atan2((double)v60 - (double)v59, v62) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
      ;
    for (; j < -180.0; double j = j + 360.0)
      ;
    if (!v57) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  unsigned int v59 = *((_DWORD *)v89 + 3 * v39 + 1);
  unsigned int v60 = HIDWORD(v83);
  double j = 0.0;
  if (v59 != HIDWORD(v83)) {
    goto LABEL_60;
  }
LABEL_67:
  double v90 = v57;
  operator delete(v57);
LABEL_68:
  unsigned int v63 = (int)llround(j * 100.0) % 36000;
  if (v63 <= 0xFFFF735F) {
    unsigned __int16 v64 = v63;
  }
  else {
    unsigned __int16 v64 = v63 - 29536;
  }
  uint64_t v65 = *(void *)(*(void *)(a5 + 40) + 8 * v8 + 8);
  *(_DWORD *)(v65 + 16) |= 0x800u;
  *(_DWORD *)(v65 + 84) = 1;
  uint64_t v66 = (unsigned int *)sub_470B40(v10, v12);
  unsigned int v67 = v66[1];
  uint64_t v68 = (int *)sub_2D5D58(a4, *v66 | ((unint64_t)(unsigned __int16)v67 << 32));
  double v69 = (unsigned __int16 *)((char *)v68 - *v68);
  if (*v69 >= 0x1Du && (uint64_t v70 = v69[14]) != 0) {
    uint64_t v71 = *(void *)((char *)v68 + v70);
  }
  else {
    uint64_t v71 = 0;
  }
  if ((v67 & 0x20000000) != 0) {
    uint64_t v72 = v71;
  }
  else {
    uint64_t v72 = -v71;
  }
  int v73 = *(_DWORD *)(v65 + 16);
  *(_DWORD *)(v65 + 16) = v73 | 8;
  *(void *)(v65 + 48) = v72;
  double v74 = (double)v64 / 100.0;
  if (v74 < 4.50359963e15) {
    double v74 = (double)(((uint64_t)(v74 + v74) + 1) >> 1);
  }
  *(_DWORD *)(v65 + 16) = v73 | 0x28;
  *(_DWORD *)(v65 + 60) = v74;
  uint64_t v75 = (unsigned int *)sub_470B40(v10, v12);
  int v76 = (int *)sub_2D5D58(a4, *v75 | ((unint64_t)(v75[1] & 0x1FFFFFFF) << 32));
  long double v77 = (unsigned __int16 *)((char *)v76 - *v76);
  if (*v77 < 0x1Bu)
  {
    LODWORD(v78) = 0;
  }
  else
  {
    uint64_t v78 = v77[13];
    if (v78) {
      LODWORD(v78) = *((unsigned __int8 *)v76 + v78);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x40u;
  *(_DWORD *)(v65 + 64) = v78;
  uint64x2_t v79 = (unsigned int *)sub_470B40(v10, v12);
  long double v80 = (int *)sub_2D5D58(a4, *v79 | ((unint64_t)(v79[1] & 0x1FFFFFFF) << 32));
  long double v81 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v81 < 0x13u)
  {
    LODWORD(v82) = 0;
  }
  else
  {
    uint64_t v82 = v81[9];
    if (v82) {
      LODWORD(v82) = *((char *)v80 + v82);
    }
  }
  *(_DWORD *)(v65 + 16) |= 0x180u;
  *(_DWORD *)(v65 + 68) = v82;
  *(_DWORD *)(v65 + 72) = i + (uint64_t)v56;
}

void sub_47DD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_47DD84()
{
  byte_255883F = 1;
  word_2558828 = 65;
  byte_2558857 = 1;
  word_2558840 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558888 = 0u;
  *(_OWORD *)&qword_2558898 = 0u;
  dword_25588A8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558888, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558888, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558888, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558888, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2558860 = 0;
  qword_2558868 = 0;
  qword_2558858 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558858 = (uint64_t)v0;
  qword_2558860 = (uint64_t)(v0 + 9);
  qword_2558868 = (uint64_t)(v0 + 9);
  qword_2558870 = 0;
  qword_2558878 = 0;
  unk_2558880 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558878 = (uint64_t)(v1 + 9);
  unk_2558880 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558870 = (uint64_t)v1;
  return result;
}

void sub_47DFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558898) {
    sub_20A8A04((void **)qword_2558898);
  }
  double v37 = (void *)xmmword_2558888;
  *(void *)&xmmword_2558888 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void **sub_47E060(void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    unsigned int v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 9);
        if (v5)
        {
          *((void *)v3 - 8) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 12);
        if (v6)
        {
          *((void *)v3 - 11) = v6;
          operator delete(v6);
        }
        v3 -= 136;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_47E0E4(_OWORD *a1)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

__n128 sub_47E0F4(void *a1, uint64_t a2, __n128 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 3) = *a3;
  a1[5] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

BOOL sub_47E138(void *a1)
{
  return *a1 != a1[1] && a1[3] != a1[4];
}

uint64_t sub_47E15C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_3B1DC8(a3, (long long *)(*a1 + 136 * a2));
}

double sub_47E170@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 + 1 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[4] - a1[3]) >> 3)))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(void *)(a3 + 112) = 0;
    *(_DWORD *)a3 = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    *(void *)(a3 + 12) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a3 + 32) = 0x8000000080000000;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(unsigned char *)(a3 + 88) = 0;
    *(void *)(a3 + 92) = 0x8000000080000000;
    *(_DWORD *)(a3 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 112) = -1;
    double result = 0.0;
    *(_OWORD *)(a3 + 120) = xmmword_20E8160;
  }
  else
  {
    sub_3B1DC8(a3, (long long *)(*a1 + 136 * (a2 + 1)));
  }
  return result;
}

uint64_t sub_47E214(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(result + 24) != v1) {
    return sub_475224(v1 - 56);
  }
  return result;
}

uint64_t sub_47E22C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = (void *)result;
    if (a4 >= 0x1E1E1E1E1E1E1E2) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(136 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result + 136 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_3B1DC8(v8 + v9, (long long *)(a2 + v9));
        v9 += 136;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_47E2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_47E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A8A48(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_47E328(&a9);
  _Unwind_Resume(a1);
}

void ***sub_47E328(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    v2 = *result;
    unsigned int v3 = (char *)**result;
    if (v3)
    {
      char v4 = (char *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 9);
          if (v6)
          {
            *((void *)v4 - 8) = v6;
            operator delete(v6);
          }
          char v7 = (void *)*((void *)v4 - 12);
          if (v7)
          {
            *((void *)v4 - 11) = v7;
            operator delete(v7);
          }
          v4 -= 136;
        }
        while (v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_47E3D0(void *a1, uint64_t **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  char v4 = *a2;
  int v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_47E4B4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_47E488(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A8A98((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_47E4B4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      uint64_t v9 = *v6;
      *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 + 2);
      *(void *)a4 = v9;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t v11 = (unsigned char *)v6[2];
      uint64_t v10 = (unsigned char *)v6[3];
      int64_t v12 = v10 - v11;
      if (v10 != v11)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        char v13 = (char *)operator new(v12);
        *(void *)(a4 + 16) = v13;
        *(void *)(a4 + 24) = v13;
        unint64_t v7 = &v13[4 * (v12 >> 2)];
        *(void *)(a4 + 32) = v7;
        memcpy(v13, v11, v12);
        *(void *)(a4 + 24) = v7;
      }
      uint64_t v8 = v6[5];
      *(_DWORD *)(a4 + 48) = *((_DWORD *)v6 + 12);
      *(void *)(a4 + 40) = v8;
      a4 += 56;
      v6 += 7;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_47E5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 16);
  if (v11)
  {
    *(void *)(v9 + 24) = v11;
    operator delete(v11);
  }
  sub_47E5F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_47E5F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      int v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(void *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 56;
    }
  }
  return a1;
}

unint64_t sub_47E65C@<X0>(void *a1@<X8>)
{
  sub_46B058();
  unint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_46B060();
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  sub_46B058();
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_46B060();

  return sub_480A40(v3, v5, v7, v9, v11, v13, v14, v15, a1);
}

uint64_t sub_47E704(uint64_t a1, char a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  char v13 = a2;
  char v12 = a3;
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = a3 == 2 ? v7 - 1056 : v7;
  v10[0] = &v11;
  v10[1] = &v13;
  _OWORD v10[2] = &v12;
  if (v6 == (unsigned int *)v8) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = sub_480C2C((uint64_t)v10, result, v6);
    v6 += 264;
  }
  while (v6 != (unsigned int *)v8);
  return result;
}

uint64_t sub_47E7BC(uint64_t a1, char a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  char v13 = a2;
  char v12 = a3;
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = a3 == 2 ? v7 - 12328 : v7;
  v10[0] = &v11;
  v10[1] = &v13;
  _OWORD v10[2] = &v12;
  if (v6 == (unsigned int *)v8) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = sub_480E68((uint64_t)v10, result, v6);
    v6 += 3082;
  }
  while (v6 != (unsigned int *)v8);
  return result;
}

uint64_t sub_47E87C(uint64_t a1, char a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  char v13 = a2;
  char v12 = a3;
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = a3 == 2 ? v7 - 12328 : v7;
  v10[0] = &v11;
  v10[1] = &v13;
  _OWORD v10[2] = &v12;
  if (v6 == (unsigned int *)v8) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = sub_4810A4((uint64_t)v10, result, v6);
    v6 += 3082;
  }
  while (v6 != (unsigned int *)v8);
  return result;
}

uint64_t sub_47E93C(uint64_t a1, char a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  char v13 = a2;
  char v12 = a3;
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = a3 == 2 ? v7 - 12328 : v7;
  v10[0] = &v11;
  v10[1] = &v13;
  _OWORD v10[2] = &v12;
  if (v6 == (unsigned int *)v8) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = sub_4812E0((uint64_t)v10, result, v6);
    v6 += 3082;
  }
  while (v6 != (unsigned int *)v8);
  return result;
}

uint64_t sub_47E9FC(unsigned int *a1, unsigned int *a2, int a3, int a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  LODWORD(v8) = 0;
  unint64_t v9 = a1;
  do
  {
    uint64_t v8 = sub_46E120(v9, a3) + v8;
    v9 += 264;
  }
  while (v9 != a2);
  if (a4)
  {
    char v16 = a3;
    char v15 = a4;
    if (a4 == 2) {
      uint64_t v10 = a2 - 264;
    }
    else {
      uint64_t v10 = a2;
    }
    v13[0] = &v14;
    v13[1] = &v16;
    v13[2] = &v15;
    if (v7 == v10)
    {
      unsigned int v11 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      do
      {
        unsigned int v11 = sub_480C2C((uint64_t)v13, v11, v7);
        v7 += 264;
      }
      while (v7 != v10);
    }
    return v11 + v8;
  }
  return v8;
}

uint64_t sub_47EAD8(unsigned int *a1, unsigned int *a2, int a3, int a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  LODWORD(v8) = 0;
  unint64_t v9 = a1;
  do
  {
    uint64_t v8 = sub_46E120(v9, a3) + v8;
    v9 += 3082;
  }
  while (v9 != a2);
  if (a4)
  {
    char v16 = a3;
    char v15 = a4;
    if (a4 == 2) {
      uint64_t v10 = a2 - 3082;
    }
    else {
      uint64_t v10 = a2;
    }
    v13[0] = &v14;
    v13[1] = &v16;
    v13[2] = &v15;
    if (v7 == v10)
    {
      unsigned int v11 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      do
      {
        unsigned int v11 = sub_480E68((uint64_t)v13, v11, v7);
        v7 += 3082;
      }
      while (v7 != v10);
    }
    return v11 + v8;
  }
  return v8;
}

uint64_t sub_47EBC8(unsigned int *a1, unsigned int *a2, int a3, int a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  LODWORD(v8) = 0;
  unint64_t v9 = a1;
  do
  {
    uint64_t v8 = sub_46CF0C(v9, a3) + v8;
    v9 += 3082;
  }
  while (v9 != a2);
  if (a4)
  {
    char v16 = a3;
    char v15 = a4;
    if (a4 == 2) {
      uint64_t v10 = a2 - 3082;
    }
    else {
      uint64_t v10 = a2;
    }
    v13[0] = &v14;
    v13[1] = &v16;
    v13[2] = &v15;
    if (v7 == v10)
    {
      unsigned int v11 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      do
      {
        unsigned int v11 = sub_4810A4((uint64_t)v13, v11, v7);
        v7 += 3082;
      }
      while (v7 != v10);
    }
    return v11 + v8;
  }
  return v8;
}

uint64_t sub_47ECB8(unsigned int *a1, unsigned int *a2, int a3, int a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = a1;
  LODWORD(v8) = 0;
  unint64_t v9 = a1;
  do
  {
    uint64_t v8 = sub_471160(v9, a3) + v8;
    v9 += 3082;
  }
  while (v9 != a2);
  if (a4)
  {
    char v16 = a3;
    char v15 = a4;
    if (a4 == 2) {
      uint64_t v10 = a2 - 3082;
    }
    else {
      uint64_t v10 = a2;
    }
    v13[0] = &v14;
    v13[1] = &v16;
    v13[2] = &v15;
    if (v7 == v10)
    {
      unsigned int v11 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      do
      {
        unsigned int v11 = sub_4812E0((uint64_t)v13, v11, v7);
        v7 += 3082;
      }
      while (v7 != v10);
    }
    return v11 + v8;
  }
  return v8;
}

uint64_t sub_47EDA8(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_46CF0C(v10, a2) + v9;
    v10 += 264;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 264;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_48151C((uint64_t)v14, v12, v6);
        v6 += 264;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47EE94(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_46E120(v10, a2) + v9;
    v10 += 264;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 264;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_480C2C((uint64_t)v14, v12, v6);
        v6 += 264;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47EF80(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_471160(v10, a2) + v9;
    v10 += 264;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 264;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_481758((uint64_t)v14, v12, v6);
        v6 += 264;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47F06C(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_46CF0C(v10, a2) + v9;
    v10 += 3082;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 3082;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_4810A4((uint64_t)v14, v12, v6);
        v6 += 3082;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47F16C(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_46E120(v10, a2) + v9;
    v10 += 3082;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 3082;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_480E68((uint64_t)v14, v12, v6);
        v6 += 3082;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47F26C(uint64_t a1, int a2, int a3)
{
  int64_t v6 = (unsigned int *)sub_40EFE8(a1);
  uint64_t v7 = sub_52058(a1);
  if (v6 == (unsigned int *)v7) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)v7;
  LODWORD(v9) = 0;
  uint64_t v10 = v6;
  do
  {
    uint64_t v9 = sub_471160(v10, a2) + v9;
    v10 += 3082;
  }
  while (v10 != v8);
  if (a3)
  {
    char v17 = a2;
    char v16 = a3;
    if (a3 == 2) {
      unsigned int v11 = v8 - 3082;
    }
    else {
      unsigned int v11 = v8;
    }
    v14[0] = &v15;
    v14[1] = &v17;
    v14[2] = &v16;
    if (v6 == v11)
    {
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      do
      {
        unsigned int v12 = sub_4812E0((uint64_t)v14, v12, v6);
        v6 += 3082;
      }
      while (v6 != v11);
    }
    return v12 + v9;
  }
  return v9;
}

uint64_t sub_47F36C(uint64_t a1, char a2, double a3)
{
  char v13 = a2;
  uint64_t v12 = 0;
  *(_OWORD *)int64_t v6 = 0u;
  *(_OWORD *)__p = 0u;
  long long v8 = 0u;
  char v11 = 0;
  double v10 = sub_481994(a1, a2) * a3;
  v9[0] = &v11;
  v9[1] = v6;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v10;
  sub_481B20(a1, (uint64_t)v9);
  uint64_t v4 = *(void *)((char *)v6[1] - 12);
  if (__p[1])
  {
    *(void **)&long long v8 = __p[1];
    operator delete(__p[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return v4;
}

void sub_47F424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    char v14 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v14 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_47F470(char *a1, uint64_t a2)
{
  if (sub_45FB38(a1)) {
    return -1;
  }
  sub_4604B4(a1, (uint64_t)v25);
  uint64_t v5 = sub_4806A0((uint64_t)v25);
  sub_2954EC(a2, *(void *)(v5 + 32), (uint64_t)v22);
  sub_3BD6C8((uint64_t)&v10, &v30);
  sub_480720((void **)&v10);
  long long v16 = v10;
  uint64_t v17 = v11;
  uint64_t v9 = v12[0];
  long long v18 = *(_OWORD *)v12;
  uint64_t v19 = v13;
  v12[0] = 0;
  v12[1] = 0;
  long long v8 = __p[0];
  long long v20 = *(_OWORD *)__p;
  uint64_t v21 = v15;
  uint64_t v13 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  unsigned int v6 = sub_46CB48(v10, *((unint64_t *)&v10 + 1));
  if (v8) {
    operator delete(v8);
  }
  if (v9) {
    operator delete(v9);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  uint64_t v4 = sub_47F36C((uint64_t)v22, 0, (double)v6 / 1000000000.0);
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  if (v33)
  {
    long double v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    double v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v4;
}

void sub_47F610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    operator delete(__p);
    sub_39EB0C((void *)(v34 - 192));
    _Unwind_Resume(a1);
  }
  sub_39EB0C((void *)(v34 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_47F66C(char *a1, uint64_t a2)
{
  if (sub_45FB38(a1)) {
    return -1;
  }
  sub_45EC9C(a1, (uint64_t)v25);
  uint64_t v5 = sub_480830((uint64_t)v25);
  sub_2954EC(a2, *(void *)(v5 + 32), (uint64_t)v22);
  sub_39ECCC((uint64_t)&v10, &v30);
  sub_480720((void **)&v10);
  long long v16 = v10;
  uint64_t v17 = v11;
  uint64_t v9 = v12[0];
  long long v18 = *(_OWORD *)v12;
  uint64_t v19 = v13;
  v12[0] = 0;
  v12[1] = 0;
  long long v8 = __p[0];
  long long v20 = *(_OWORD *)__p;
  uint64_t v21 = v15;
  uint64_t v13 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  unsigned int v6 = sub_46CB48(v10, *((unint64_t *)&v10 + 1));
  if (v8) {
    operator delete(v8);
  }
  if (v9) {
    operator delete(v9);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  uint64_t v4 = sub_47F36C((uint64_t)v22, 0, (double)v6 / 1000000000.0);
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    double v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v4;
}

void sub_47F80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    operator delete(__p);
    sub_39EB0C((void *)(v34 - 192));
    _Unwind_Resume(a1);
  }
  sub_39EB0C((void *)(v34 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_47F868(char *a1, uint64_t a2)
{
  if (sub_45FB38(a1)) {
    return -1;
  }
  sub_460C5C(a1, (uint64_t)v25);
  uint64_t v5 = (unsigned int *)sub_4808B0((uint64_t)v25);
  sub_2954EC(a2, (((unint64_t)(v5[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v5[1] << 32) | *v5) ^ 0x1000000000000, (uint64_t)v22);
  sub_3BD7E4((uint64_t)&v10, &v30);
  sub_480930((void **)&v10);
  long long v16 = v10;
  uint64_t v17 = v11;
  uint64_t v9 = v12[0];
  long long v18 = *(_OWORD *)v12;
  uint64_t v19 = v13;
  v12[0] = 0;
  v12[1] = 0;
  long long v8 = __p[0];
  long long v20 = *(_OWORD *)__p;
  uint64_t v21 = v15;
  uint64_t v13 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  unsigned int v6 = sub_470DAC(v10, *((unint64_t *)&v10 + 1));
  if (v8) {
    operator delete(v8);
  }
  if (v9) {
    operator delete(v9);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  uint64_t v4 = sub_47F36C((uint64_t)v22, 0, (double)v6 / 1000000000.0);
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    double v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v4;
}

void sub_47FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    operator delete(__p);
    sub_39EB0C((void *)(v34 - 192));
    _Unwind_Resume(a1);
  }
  sub_39EB0C((void *)(v34 - 192));
  _Unwind_Resume(a1);
}

void sub_47FA7C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_45FC68(a1);
  unint64_t v7 = *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32);
  uint64_t v8 = sub_45FC70((uint64_t)a1);
  unint64_t v9 = *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32);
  sub_3D63DC(a2, v7, __n);
  sub_3D63DC(a2, v9, __p);
  uint64_t v10 = HIBYTE(v21);
  unint64_t v11 = __n[1];
  if (v21 >= 0) {
    size_t v12 = HIBYTE(v21);
  }
  else {
    size_t v12 = __n[1];
  }
  unint64_t v13 = v19;
  unsigned __int8 v14 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v12 != v13) {
    goto LABEL_18;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v21))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v21;
      if ((v14 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    long long v16 = __n;
    while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
    {
      long long v16 = (size_t *)((char *)v16 + 1);
      uint64_t v15 = (void **)((char *)v15 + 1);
      if (!--v10) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  uint64_t v17 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v15, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    if ((v14 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v17, v11);
  if ((v19 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_23;
  }
}

void sub_47FBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void *sub_47FC34@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned __int8 *)result + 23);
  size_t v5 = *((void *)result + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v6 = *((void *)result + 1);
  }
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v6 != v7) {
    goto LABEL_16;
  }
  if (v8 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) == 0)
  {
    if (!*((unsigned char *)result + 23))
    {
LABEL_14:
      *(_OWORD *)a3 = *(_OWORD *)result;
      *(void *)(a3 + 16) = *((void *)result + 2);
      return result;
    }
    unint64_t v9 = (unsigned __int8 *)result;
    while (*v9 == *a2)
    {
      ++v9;
      ++a2;
      if (!--v4) {
        goto LABEL_14;
      }
    }
    goto LABEL_16;
  }
  uint64_t v10 = *(void **)result;
  uint64_t result = (void *)memcmp(*(const void **)result, a2, v5);
  if (result)
  {
LABEL_16:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }

  return sub_4200((unsigned char *)a3, v10, v5);
}

void sub_47FD2C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_45FC68(a1);
  unint64_t v7 = *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32);
  uint64_t v8 = sub_45FC70((uint64_t)a1);
  unint64_t v9 = *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32);
  sub_3D63DC(a2, v7, __n);
  sub_3D63DC(a2, v9, __p);
  uint64_t v10 = HIBYTE(v21);
  unint64_t v11 = __n[1];
  if (v21 >= 0) {
    size_t v12 = HIBYTE(v21);
  }
  else {
    size_t v12 = __n[1];
  }
  unint64_t v13 = v19;
  unsigned __int8 v14 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v12 != v13) {
    goto LABEL_18;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v21))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v21;
      if ((v14 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    long long v16 = __n;
    while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
    {
      long long v16 = (size_t *)((char *)v16 + 1);
      uint64_t v15 = (void **)((char *)v15 + 1);
      if (!--v10) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  uint64_t v17 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v15, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    if ((v14 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v17, v11);
  if ((v19 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_23;
  }
}

void sub_47FE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_47FEE4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (unsigned int *)sub_45FC68(a1);
  unint64_t v7 = *v6 | ((unint64_t)(v6[1] & 0x1FFFFFFF) << 32);
  uint64_t v8 = (unsigned int *)sub_460E10((uint64_t)a1);
  unint64_t v9 = *v8 | ((unint64_t)(v8[1] & 0x1FFFFFFF) << 32);
  sub_3D63DC(a2, v7, __n);
  sub_3D63DC(a2, v9, __p);
  uint64_t v10 = HIBYTE(v21);
  unint64_t v11 = __n[1];
  if (v21 >= 0) {
    size_t v12 = HIBYTE(v21);
  }
  else {
    size_t v12 = __n[1];
  }
  unint64_t v13 = v19;
  unsigned __int8 v14 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v12 != v13) {
    goto LABEL_18;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v21))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v21;
      if ((v14 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    long long v16 = __n;
    while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
    {
      long long v16 = (size_t *)((char *)v16 + 1);
      uint64_t v15 = (void **)((char *)v15 + 1);
      if (!--v10) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  uint64_t v17 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v15, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    if ((v14 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v17, v11);
  if ((v19 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_23;
  }
}

void sub_480050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_48009C(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 == a1[1])
  {
    a3[23] = 0;
    *a3 = 0;
  }
  else
  {
    sub_47FA7C(v4, a2, (uint64_t)a3);
  }
}

void sub_4800C0(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 == a1[1])
  {
    a3[23] = 0;
    *a3 = 0;
  }
  else
  {
    sub_47FD2C(v4, a2, (uint64_t)a3);
  }
}

void sub_4800E4(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 == a1[1])
  {
    a3[23] = 0;
    *a3 = 0;
  }
  else
  {
    sub_47FEE4(v4, a2, (uint64_t)a3);
  }
}

void sub_480108(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_470ADC((void *)a2);
  uint64_t v5 = *(void *)(a2 + 9992);
  uint64_t v6 = *(void *)(a2 + 9984);
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      uint64_t v8 = v6 + 40 * v4;
      if (v5 != v8)
      {
        uint64_t v9 = *(void *)(a2 + 9992);
        do
        {
          unint64_t v11 = *(void **)(v9 - 40);
          v9 -= 40;
          uint64_t v10 = v11;
          if (v11)
          {
            *(void *)(v5 - 32) = v10;
            operator delete(v10);
          }
          uint64_t v5 = v9;
        }
        while (v9 != v8);
      }
      *(void *)(a2 + 9992) = v8;
    }
  }
  else
  {
    sub_481D90((void **)(a2 + 9984), v4 - v7);
  }
  unint64_t v12 = sub_470ADC((void *)a2);
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      long long v16 = (unsigned int *)sub_470B40((void *)a2, i);
      sub_2954EC(a1, (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000, (uint64_t)v20);
      uint64_t v17 = *(void *)(a2 + 9984);
      sub_2E4B5C((uint64_t)v20, __p);
      sub_E9C190(v17 + v14, (char **)__p, v18);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      v14 += 40;
    }
  }
}

void sub_480260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_4802AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_46C760((void *)a2);
  uint64_t v5 = *(void *)(a2 + 9992);
  uint64_t v6 = *(void *)(a2 + 9984);
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      uint64_t v8 = v6 + 40 * v4;
      if (v5 != v8)
      {
        uint64_t v9 = *(void *)(a2 + 9992);
        do
        {
          unint64_t v11 = *(void **)(v9 - 40);
          v9 -= 40;
          uint64_t v10 = v11;
          if (v11)
          {
            *(void *)(v5 - 32) = v10;
            operator delete(v10);
          }
          uint64_t v5 = v9;
        }
        while (v9 != v8);
      }
      *(void *)(a2 + 9992) = v8;
    }
  }
  else
  {
    sub_481D90((void **)(a2 + 9984), v4 - v7);
  }
  unint64_t v12 = sub_46C760((void *)a2);
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      uint64_t v16 = sub_46C8EC((void *)a2, i);
      sub_2954EC(a1, *(void *)(v16 + 32), (uint64_t)v20);
      uint64_t v17 = *(void *)(a2 + 9984);
      sub_2E4B5C((uint64_t)v20, __p);
      sub_E9C190(v17 + v14, (char **)__p, v18);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      v14 += 40;
    }
  }
}

void sub_4803EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_480438(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_46C760((void *)a2);
  uint64_t v5 = *(void *)(a2 + 9992);
  uint64_t v6 = *(void *)(a2 + 9984);
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      uint64_t v8 = v6 + 40 * v4;
      if (v5 != v8)
      {
        uint64_t v9 = *(void *)(a2 + 9992);
        do
        {
          unint64_t v11 = *(void **)(v9 - 40);
          v9 -= 40;
          uint64_t v10 = v11;
          if (v11)
          {
            *(void *)(v5 - 32) = v10;
            operator delete(v10);
          }
          uint64_t v5 = v9;
        }
        while (v9 != v8);
      }
      *(void *)(a2 + 9992) = v8;
    }
  }
  else
  {
    sub_481D90((void **)(a2 + 9984), v4 - v7);
  }
  unint64_t v12 = sub_46C760((void *)a2);
  if (v12)
  {
    unint64_t v13 = v12;
    uint64_t v14 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      uint64_t v16 = sub_46C8EC((void *)a2, i);
      sub_2954EC(a1, *(void *)(v16 + 32), (uint64_t)v20);
      uint64_t v17 = *(void *)(a2 + 9984);
      sub_2E4B5C((uint64_t)v20, __p);
      sub_E9C190(v17 + v14, (char **)__p, v18);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v21)
      {
        uint64_t v22 = v21;
        operator delete(v21);
      }
      v14 += 40;
    }
  }
}

void sub_480578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_4805C4(void *a1, void *a2)
{
  uint64_t v4 = sub_45FC7C(a1);
  if (v4 != sub_45FC7C(a2)) {
    return 0;
  }
  uint64_t v5 = sub_40EFE8((uint64_t)a1);
  uint64_t v6 = sub_40EFE8((uint64_t)a2);
  uint64_t v7 = sub_52058((uint64_t)a1);
  sub_52058((uint64_t)a2);
  if (v5 == v7) {
    return 1;
  }
  uint64_t v8 = v5;
  do
  {
    v10[0] = v5;
    v10[1] = v6;
    BOOL result = sub_482044((uint64_t)&v11, v10);
    if (!result) {
      break;
    }
    v8 += 1056;
    v6 += 1056;
    v5 += 1056;
  }
  while (v8 != v7);
  return result;
}

uint64_t sub_4806A0(uint64_t a1)
{
  sub_3BD6C8((uint64_t)v4, (long long *)(a1 + 72));
  uint64_t v1 = sub_480720(v4);
  uint64_t v2 = sub_46C8EC(*v1, (uint64_t)v1[1]);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  return v2;
}

void sub_48070C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **sub_480720(void **a1)
{
  uint64_t v2 = (char *)a1[2];
  if (v2)
  {
    do
    {
      uint64_t v4 = a1[3];
      uint64_t v5 = (void **)&v4[2 * (void)v2];
      if (*a1)
      {
        uint64_t v6 = a1[1];
        unint64_t v7 = sub_46C760(*a1);
        BOOL v8 = (unint64_t)v6 < v7;
        if (*v5)
        {
          uint64_t v9 = &v4[2 * (void)v2];
          unint64_t v12 = v9[1];
          char v11 = v9 + 1;
          unint64_t v10 = v12;
          unint64_t v13 = sub_46C760(*v5);
          if (!v8 || v10 >= v13) {
            goto LABEL_3;
          }
          uint64_t v15 = sub_46C8EC(*a1, (uint64_t)a1[1]);
          if (v15 != sub_46C8EC(*v5, *v11)) {
            break;
          }
        }
        else if ((unint64_t)v6 < v7)
        {
          break;
        }
      }
      else if (*v5)
      {
        BOOL v8 = 0;
        unint64_t v10 = v4[2 * (void)v2 + 1];
        unint64_t v13 = sub_46C760(*v5);
LABEL_3:
        if ((v8 ^ (v10 < v13))) {
          break;
        }
      }
      unint64_t v3 = a1[2];
      uint64_t v2 = (char *)v3 - 1;
      a1[2] = (void *)((char *)v3 - 1);
      *(_OWORD *)a1 = *(_OWORD *)&a1[6][2 * ((void)v3 - 1)];
    }
    while (v3 != (void *)((char *)&def_332C + 1));
  }
  a1[1] = (void *)((char *)a1[1] - 1);
  return a1;
}

uint64_t sub_480830(uint64_t a1)
{
  sub_39ECCC((uint64_t)v4, (long long *)(a1 + 72));
  uint64_t v1 = sub_480720(v4);
  uint64_t v2 = sub_46C8EC(*v1, (uint64_t)v1[1]);
  if (__p)
  {
    BOOL v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  return v2;
}

void sub_48089C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4808B0(uint64_t a1)
{
  sub_3BD7E4((uint64_t)v4, (long long *)(a1 + 72));
  uint64_t v1 = sub_480930(v4);
  uint64_t v2 = sub_470B40(*v1, (uint64_t)v1[1]);
  if (__p)
  {
    BOOL v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  return v2;
}

void sub_48091C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **sub_480930(void **a1)
{
  uint64_t v2 = (char *)a1[2];
  if (v2)
  {
    do
    {
      uint64_t v4 = a1[3];
      uint64_t v5 = (void **)&v4[2 * (void)v2];
      if (*a1)
      {
        uint64_t v6 = a1[1];
        unint64_t v7 = sub_470ADC(*a1);
        BOOL v8 = (unint64_t)v6 < v7;
        if (*v5)
        {
          uint64_t v9 = &v4[2 * (void)v2];
          unint64_t v12 = v9[1];
          char v11 = v9 + 1;
          unint64_t v10 = v12;
          unint64_t v13 = sub_470ADC(*v5);
          if (!v8 || v10 >= v13) {
            goto LABEL_3;
          }
          uint64_t v15 = sub_470B40(*a1, (uint64_t)a1[1]);
          if (v15 != sub_470B40(*v5, *v11)) {
            break;
          }
        }
        else if ((unint64_t)v6 < v7)
        {
          break;
        }
      }
      else if (*v5)
      {
        BOOL v8 = 0;
        unint64_t v10 = v4[2 * (void)v2 + 1];
        unint64_t v13 = sub_470ADC(*v5);
LABEL_3:
        if ((v8 ^ (v10 < v13))) {
          break;
        }
      }
      unint64_t v3 = a1[2];
      uint64_t v2 = (char *)v3 - 1;
      a1[2] = (void *)((char *)v3 - 1);
      *(_OWORD *)a1 = *(_OWORD *)&a1[6][2 * ((void)v3 - 1)];
    }
    while (v3 != (void *)((char *)&def_332C + 1));
  }
  a1[1] = (void *)((char *)a1[1] - 1);
  return a1;
}

unint64_t sub_480A40@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, unint64_t a6@<X5>, void *a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v16 = (void *)result;
  if (!result) {
    goto LABEL_7;
  }
LABEL_2:
  BOOL result = sub_46C760(v16);
  unint64_t v18 = result;
  if (a3)
  {
    BOOL result = sub_46C760(a3);
    if (a2 >= v18 || a4 >= result)
    {
      if (a2 < v18 != a4 < result)
      {
        do
        {
LABEL_13:
          if (a5)
          {
            BOOL result = sub_46C760(a5);
            unint64_t v20 = result;
            if (a7)
            {
              BOOL result = sub_46C760(a7);
              if (a6 >= v20 || a8 >= result)
              {
                if (a6 < v20 == a8 < result) {
                  break;
                }
              }
              else
              {
                uint64_t v21 = sub_46C8EC(a5, a6);
                BOOL result = sub_46C8EC(a7, a8);
                if (v21 == result) {
                  break;
                }
              }
            }
            else if (a6 >= result)
            {
              break;
            }
          }
          else
          {
            if (!a7) {
              break;
            }
            BOOL result = sub_46C760(a7);
            if (a8 >= result) {
              break;
            }
          }
          uint64_t v22 = sub_46C8EC(v16, a2);
          BOOL result = sub_46C8EC(a5, a6);
          unint64_t v23 = *(void *)(result + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v22 + 36), *(_DWORD *)(v22 + 32)) != __PAIR64__(WORD2(v23), v23)
            || (HIWORD(v23) & 1) == (*(unsigned char *)(v22 + 38) == 0))
          {
            break;
          }
          ++a2;
          ++a6;
          if (v16) {
            goto LABEL_2;
          }
LABEL_7:
          if (!a3) {
            break;
          }
          BOOL result = sub_46C760(a3);
        }
        while (a4 < result);
      }
    }
    else
    {
      uint64_t v19 = sub_46C8EC(v16, a2);
      BOOL result = sub_46C8EC(a3, a4);
      if (v19 != result) {
        goto LABEL_13;
      }
    }
  }
  else if (a2 < result)
  {
    goto LABEL_13;
  }
  *a9 = v16;
  a9[1] = a2;
  a9[2] = a5;
  a9[3] = a6;
  return result;
}

uint64_t sub_480C2C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_46E120(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_480E68(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_46E120(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_4810A4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_46CF0C(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_4812E0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_471160(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_48151C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_46CF0C(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_481758(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v6 = sub_471160(a3, **(unsigned __int8 **)(a1 + 8));
  int v7 = sub_46CEFC((uint64_t)a3);
  int v8 = *(_DWORD *)sub_374DF4((uint64_t)a3);
  int v9 = *(_DWORD *)(sub_374DF4((uint64_t)a3) + 36);
  switch(**(unsigned char **)(a1 + 16))
  {
    case 0:
      return a2;
    case 1:
      if (v7 == 0x7FFFFFFF) {
        int v10 = 0;
      }
      else {
        int v10 = v7;
      }
      return (v10 + a2);
    case 2:
      if (v6 == 0x7FFFFFFF) {
        int v12 = 0;
      }
      else {
        int v12 = v6;
      }
      if (v12 < 0) {
        char v13 = -5;
      }
      else {
        char v13 = 5;
      }
      int v14 = 103 * (char)(v13 + v12 % 10);
      int v15 = 10 * (v12 / 10 + ((v14 >> 15) & 1) + (v14 >> 10));
      if (v15 % 600 <= 0) {
        int v16 = 0;
      }
      else {
        int v16 = 600;
      }
      return (v15 + a2 - v12 - v15 % 600 + v16);
    case 3:
      if (v7 == 0x7FFFFFFF) {
        int v17 = 0;
      }
      else {
        int v17 = v7;
      }
      int v18 = v17 + a2;
      if (v8 == 0x7FFFFFFF) {
        int v19 = 0;
      }
      else {
        int v19 = v8;
      }
      return (v18 + v19);
    case 4:
      if (v7 == 0x7FFFFFFF) {
        int v20 = 0;
      }
      else {
        int v20 = v7;
      }
      int v21 = v20 + a2;
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      return (v21 + v9);
    case 5:
      if (v8 == 0x7FFFFFFF) {
        int v9 = 0;
      }
      else {
        int v9 = v8;
      }
      goto LABEL_36;
    case 6:
      if (v9 == 0x7FFFFFFF) {
        int v9 = 0;
      }
LABEL_36:
      uint64_t result = (v9 + a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

double sub_481994(uint64_t a1, char a2)
{
  sub_2E51EC(a1, (uint64_t)v19);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v8)
    {
      unint64_t v9 = *(void *)(v8 - 8);
      int v10 = sub_2964C4(*(void *)a1, v9, 1);
      char v5 = 0;
      char v11 = &v10[*(unsigned __int16 *)&v10[-*(int *)v10 + 4]];
      uint64_t v12 = (uint64_t)&v11[4 * HIDWORD(v9) + *(unsigned int *)v11];
      char v13 = (int *)(v12 + 4 + *(unsigned int *)(v12 + 4));
      int v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
      int v7 = *(unsigned int *)((char *)v14 + *v14);
      uint64_t v4 = *(void *)a1;
      uint64_t v6 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      long long v17 = 0u;
      long long v18 = 0u;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v4 = 0;
    LODWORD(v6) = 0;
    int v7 = 0;
    char v5 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    memset(v16, 0, 7);
    goto LABEL_7;
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)a1;
  long long v17 = 0u;
  long long v18 = 0u;
  char v5 = 1;
  LODWORD(v6) = -1;
  int v7 = -1;
LABEL_7:
  v29[0] = v19[0];
  v29[1] = v19[1];
  _DWORD v29[2] = v19[2];
  v29[3] = v19[3];
  long long v22 = v17;
  char v31 = a2;
  double v30 = 0.0;
  long long v23 = v18;
  uint64_t v21 = v4;
  uint64_t v24 = 0;
  int v25 = v6;
  int v26 = v7;
  char v27 = v5;
  *(_DWORD *)&v28[3] = *(_DWORD *)((char *)v16 + 3);
  *(_DWORD *)unint64_t v28 = v16[0];
  v20[0] = &v30;
  v20[1] = (double *)&v31;
  sub_40458C((uint64_t)v29, (uint64_t)&v21, v20);
  return v30;
}

uint64_t sub_481B20(uint64_t a1, uint64_t a2)
{
  sub_2E51EC(a1, (uint64_t)v15);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v4)
    {
      unint64_t v5 = *(void *)(v4 - 8);
      uint64_t v6 = sub_2964C4(*(void *)a1, v5, 1);
      int v7 = &v6[*(unsigned __int16 *)&v6[-*(int *)v6 + 4]];
      uint64_t v8 = (uint64_t)&v7[4 * HIDWORD(v5) + *(unsigned int *)v7];
      unint64_t v9 = (int *)(v8 + 4 + *(unsigned int *)(v8 + 4));
      uint64_t v10 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      char v11 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6));
      LODWORD(v11) = *(unsigned int *)((char *)v11 + *v11);
      *(void *)&v13[0] = *(void *)a1;
      memset((char *)v13 + 8, 0, 40);
      *(void *)&long long v14 = __PAIR64__(v11, v10);
      BYTE8(v14) = 0;
      return sub_481C48((uint64_t)v15, (uint64_t)v13, a2);
    }
LABEL_6:
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    return sub_481C48((uint64_t)v15, (uint64_t)v13, a2);
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  *(void *)&v13[0] = *(void *)a1;
  memset((char *)v13 + 8, 0, 40);
  *(void *)&long long v14 = -1;
  BYTE8(v14) = 1;
  return sub_481C48((uint64_t)v15, (uint64_t)v13, a2);
}

uint64_t sub_481C48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(result + 52) != *(_DWORD *)(a2 + 52))
  {
    long long v6 = *(_OWORD *)(result + 16);
    v14[0] = *(_OWORD *)result;
    v14[1] = v6;
    long long v7 = *(_OWORD *)(result + 48);
    v14[2] = *(_OWORD *)(result + 32);
    long long v15 = v7;
    if (*(unsigned char *)(result + 56))
    {
      uint64_t result = sub_2E7608(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t result = sub_2E74E8(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(a2 + 52))
    {
      while (1)
      {
LABEL_9:
        unint64_t v12 = sub_2E1BC0((uint64_t)v14);
        int v13 = v8;
        unint64_t v10 = sub_2E1BC0(v5);
        int v11 = v9;
        sub_33350(a3, (uint64_t)&v12, (unsigned int *)&v10);
        if (*(unsigned char *)(v5 + 56))
        {
          sub_2E7608(v5);
          if (!BYTE8(v15)) {
            goto LABEL_13;
          }
LABEL_15:
          uint64_t result = sub_2E7608((uint64_t)v14);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
        else
        {
          sub_2E74E8(v5);
          if (BYTE8(v15)) {
            goto LABEL_15;
          }
LABEL_13:
          uint64_t result = sub_2E74E8((uint64_t)v14);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

void sub_481D90(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = (char *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      int v11 = &v5[40 * a2];
      do
      {
        *(_OWORD *)uint64_t v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((void *)v5 + 4) = 0x7FFFFFFFFFFFFFFFLL;
        v5 += 40;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x666666666666666) {
        sub_188D718();
      }
      unint64_t v10 = (char *)operator new(40 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    unint64_t v12 = &v10[40 * v6];
    int v13 = &v10[40 * v9];
    long long v23 = v13;
    long long v14 = &v12[40 * a2];
    long long v15 = v12;
    do
    {
      *(_OWORD *)long long v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((void *)v15 + 4) = 0x7FFFFFFFFFFFFFFFLL;
      v15 += 40;
    }
    while (v15 != v14);
    long long v22 = &v12[40 * a2];
    int v16 = (char *)*a1;
    if (v5 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        sub_E9BD88((uint64_t)&v12[v17 - 40], (uint64_t)&v5[v17 - 40]);
        v17 -= 40;
      }
      while (&v5[v17] != v16);
      long long v18 = (char *)*a1;
      uint64_t v5 = (char *)a1[1];
      *a1 = &v12[v17];
      a1[1] = v22;
      a1[2] = v23;
      if (v5 != v18)
      {
        int v19 = v5;
        do
        {
          uint64_t v21 = (void *)*((void *)v19 - 5);
          v19 -= 40;
          int v20 = v21;
          if (v21)
          {
            *((void *)v5 - 4) = v20;
            operator delete(v20);
          }
          uint64_t v5 = v19;
        }
        while (v19 != v18);
        uint64_t v5 = v18;
      }
    }
    if (v5) {
      operator delete(v5);
    }
  }
}

uint64_t sub_481FD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 40;
        uint64_t v4 = *(void **)(v2 - 40);
        *(void *)(a1 + 16) = v2 - 40;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 32) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 40;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_482044(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  int v16 = *(_DWORD *)(v3 + 128);
  long long v17 = *(_OWORD *)(v3 + 136);
  sub_3B1DC8((uint64_t)&v18, (long long *)(v3 + 152));
  int v4 = *(_DWORD *)(v2 + 264);
  if (v4 != v24) {
    goto LABEL_15;
  }
  if (v4 != -1)
  {
    if (v4 == 1)
    {
      if (*(void *)(v2 + 256) != v23)
      {
LABEL_15:
        BOOL v6 = 0;
        goto LABEL_16;
      }
    }
    else if (v4 || *(void *)(v2 + 256) != v23)
    {
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(v2 + 128) != v16) {
    goto LABEL_15;
  }
  int v8 = *(_DWORD *)(v3 + 288);
  sub_3B1DC8((uint64_t)&v9, (long long *)(v3 + 312));
  int v5 = *(_DWORD *)(v2 + 424);
  if (v5 != v15) {
    goto LABEL_23;
  }
  if (v5 == -1) {
    goto LABEL_22;
  }
  if (v5 == 1)
  {
    if (*(void *)(v2 + 416) == v14) {
      goto LABEL_22;
    }
LABEL_23:
    BOOL v6 = 0;
    goto LABEL_24;
  }
  if (v5 || *(void *)(v2 + 416) != v14) {
    goto LABEL_23;
  }
LABEL_22:
  BOOL v6 = *(_DWORD *)(v2 + 288) == v8;
LABEL_24:
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    int v11 = v10;
    operator delete(v10);
  }
LABEL_16:
  if (__p)
  {
    long long v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
  return v6;
}

void sub_482208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20A8AFC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_482234(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double sub_482240()
{
  byte_25588C7 = 1;
  word_25588B0 = 65;
  byte_25588DF = 1;
  word_25588C8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558970 = 0u;
  *(_OWORD *)&qword_2558980 = 0u;
  dword_2558990 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558970, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558970, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558970, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558970, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25588F7 = 8;
  strcpy((char *)&qword_25588E0, "any_mode");
  byte_255890F = 7;
  strcpy((char *)&dword_25588F8, "cycling");
  byte_2558927 = 7;
  strcpy((char *)&dword_2558910, "driving");
  byte_255893F = 7;
  strcpy((char *)&dword_2558928, "walking");
  qword_2558948 = 0;
  qword_2558950 = 0;
  qword_2558940 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558940 = (uint64_t)v0;
  qword_2558948 = (uint64_t)(v0 + 9);
  qword_2558950 = (uint64_t)(v0 + 9);
  qword_2558958 = 0;
  qword_2558960 = 0;
  unk_2558968 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558960 = (uint64_t)(v1 + 9);
  unk_2558968 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558958 = (uint64_t)v1;
  return result;
}

void sub_482508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558980) {
    sub_20A8B20((void **)qword_2558980);
  }
  double v37 = (void *)xmmword_2558970;
  *(void *)&xmmword_2558970 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_4825A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  strcpy((char *)v22, "FilteredRerouteHistory");
  HIBYTE(v22[2]) = 22;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  char v10 = sub_374CDC(a2, (uint64_t)v22, (uint64_t *)&__p);
  sub_4844F0(&v23, v10);
  int v11 = (void **)__p;
  if (__p)
  {
    unint64_t v12 = v20;
    char v13 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      char v13 = __p;
    }
    int v20 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v22[2]) < 0) {
    operator delete(v22[0]);
  }
  __int16 v24 = 256;
  sub_4844F4(a5, (unsigned __int8 *)a4, (uint64_t *)(a4 + 24), *(_DWORD *)(a4 + 36), 1u, 0, (uint64_t)&v23, a1);
  *(void *)(a1 + 24) = a3;
  HIBYTE(v22[2]) = 18;
  strcpy((char *)v22, "AutoAdvanceHandler");
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  int v14 = sub_374CDC(a2, (uint64_t)v22, (uint64_t *)&__p);
  sub_48366C(a1 + 32, v14);
  int v15 = (void **)__p;
  if (__p)
  {
    int v16 = v20;
    long long v17 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      long long v17 = __p;
    }
    int v20 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v22[2]) < 0) {
    operator delete(v22[0]);
  }
  return a1;
}

void sub_482768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  int v20 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

BOOL sub_4827BC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v7 = *(void *)(a1 + 48);
  sub_45E970(a1);
  if (a3 == v8) {
    return 0;
  }
  uint64_t v9 = v8;
  if (a3 - 4 == v8) {
    return 0;
  }
  unsigned int v88 = *(_DWORD *)(a1 + 36);
  unsigned int v11 = *a4;
  unsigned int v10 = a4[1];
  long double v12 = exp((double)v10 * -6.28318531 / 4294967300.0 + 3.14159265);
  unsigned int v13 = 0;
  char v14 = 0;
  BOOL v85 = (v11 & v10) != -1;
  double v15 = 0.5;
  double __x = (v12 + -1.0 / v12) * 0.5;
  double v86 = ((double)v11 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  BOOL v16 = (v11 & v10) == -1;
  long long v17 = a3 - 3;
  float64x2_t v82 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v83 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v80 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v81 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  do
  {
    unsigned int v25 = *v17;
    unsigned int v24 = v17[1];
    unsigned int v26 = *(v17 - 4);
    unsigned int v27 = *(v17 - 3);
    if (*v17 != -1 || v24 != -1)
    {
      BOOL v29 = v26 == -1 && v27 == -1;
      double v30 = (double)v24;
      if (v29)
      {
        uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v85) {
          goto LABEL_69;
        }
        goto LABEL_36;
      }
      long double v31 = exp(3.14159265 - v30 * 6.28318531 / 4294967300.0);
      long double v32 = atan((v31 - 1.0 / v31) * 0.5) * 57.2957795 * 0.0174532925;
      v33.i64[0] = v25;
      v33.i64[1] = v26;
      double v15 = 0.5;
      long double v34 = exp(3.14159265 - (double)v27 * 6.28318531 / 4294967300.0);
      long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v36 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v33), v83), v82), v81), v80);
      double v84 = vsubq_f64((float64x2_t)v36, (float64x2_t)vdupq_laneq_s64(v36, 1)).f64[0];
      long double v37 = sin((v32 - v35) * 0.5);
      long double v38 = v37 * v37;
      double v39 = cos(v32);
      long double v40 = v39 * cos(v35);
      long double v41 = sin(0.5 * v84);
      long double v42 = atan2(sqrt(v41 * v41 * v40 + v38), sqrt(1.0 - (v41 * v41 * v40 + v38)));
      double v43 = (v42 + v42) * 6372797.56 * 100.0;
      if (v43 >= 0.0)
      {
        double v44 = v43;
        if (v43 < 4.50359963e15)
        {
          if ((double)(((uint64_t)(v43 + v43) + 1) >> 1) >= 9.22337204e18) {
            goto LABEL_44;
          }
          goto LABEL_47;
        }
      }
      else
      {
        double v44 = v43;
        if (v43 > -4.50359963e15)
        {
          uint64_t v45 = (uint64_t)(v43 + v43);
          if (v45 >= 1) {
            --v45;
          }
          if ((double)(v45 >> 1) >= 9.22337204e18)
          {
LABEL_44:
            uint64_t v46 = 0x7FFFFFFFFFFFFFFELL;
            if (!v85) {
              goto LABEL_69;
            }
            goto LABEL_36;
          }
LABEL_47:
          if (v43 >= 0.0)
          {
            if (v43 >= 4.50359963e15) {
              goto LABEL_68;
            }
            uint64_t v61 = (uint64_t)(v43 + v43) + 1;
          }
          else
          {
            if (v43 <= -4.50359963e15) {
              goto LABEL_68;
            }
            uint64_t v61 = (uint64_t)(v43 + v43);
            if (v61 >= 1) {
              --v61;
            }
          }
          double v43 = (double)(v61 >> 1);
LABEL_68:
          uint64_t v46 = (uint64_t)v43;
          if (!v85)
          {
LABEL_69:
            uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
            char v64 = (v26 & v27) == 0xFFFFFFFF || v16;
            if (v64) {
              goto LABEL_4;
            }
            goto LABEL_81;
          }
LABEL_36:
          long double v49 = exp(v30 * -6.28318531 / 4294967300.0 + 3.14159265);
          long double v50 = atan((v49 - 1.0 / v49) * v15) * 57.2957795 * 0.0174532925;
          long double v51 = atan(__x) * 57.2957795 * 0.0174532925;
          long double v52 = sin((v50 - v51) * v15);
          long double v53 = v52 * v52;
          double v54 = cos(v50);
          long double v55 = v54 * cos(v51);
          long double v56 = sin((((double)v25 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925 - v86) * v15);
          long double v57 = atan2(sqrt(v56 * v56 * v55 + v53), sqrt(1.0 - (v56 * v56 * v55 + v53)));
          double v58 = (v57 + v57) * 6372797.56 * 100.0;
          if (v58 >= 0.0)
          {
            double v59 = v58;
            if (v58 < 4.50359963e15)
            {
              if ((double)(((uint64_t)(v58 + v58) + 1) >> 1) >= 9.22337204e18) {
                goto LABEL_54;
              }
              goto LABEL_60;
            }
          }
          else
          {
            double v59 = v58;
            if (v58 > -4.50359963e15)
            {
              uint64_t v60 = (uint64_t)(v58 + v58);
              if (v60 >= 1) {
                --v60;
              }
              if ((double)(v60 >> 1) >= 9.22337204e18)
              {
LABEL_54:
                uint64_t v47 = 0x7FFFFFFFFFFFFFFELL;
                char v62 = (v26 & v27) == 0xFFFFFFFF || v16;
                if (v62) {
                  goto LABEL_4;
                }
                goto LABEL_81;
              }
LABEL_60:
              if (v58 >= 0.0)
              {
                if (v58 >= 4.50359963e15) {
                  goto LABEL_77;
                }
                uint64_t v63 = (uint64_t)(v58 + v58) + 1;
              }
              else
              {
                if (v58 <= -4.50359963e15) {
                  goto LABEL_77;
                }
                uint64_t v63 = (uint64_t)(v58 + v58);
                if (v63 >= 1) {
                  --v63;
                }
              }
              double v58 = (double)(v63 >> 1);
LABEL_77:
              uint64_t v47 = (uint64_t)v58;
              char v65 = (v26 & v27) == 0xFFFFFFFF || v16;
              if (v65) {
                goto LABEL_4;
              }
              goto LABEL_81;
            }
          }
          if (v59 >= 9.22337204e18) {
            goto LABEL_54;
          }
          goto LABEL_60;
        }
      }
      if (v44 >= 9.22337204e18) {
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
    char v48 = (v26 & v27) == 0xFFFFFFFF || v16;
    if (v48)
    {
LABEL_4:
      uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    }
LABEL_81:
    long double v66 = exp((double)v27 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v67 = atan((v66 - 1.0 / v66) * v15) * 57.2957795 * 0.0174532925;
    long double v68 = atan(__x) * 57.2957795 * 0.0174532925;
    long double v69 = sin((v67 - v68) * v15);
    long double v70 = v69 * v69;
    double v71 = cos(v67);
    long double v72 = v71 * cos(v68);
    long double v73 = sin((((double)v26 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925 - v86) * v15);
    long double v74 = atan2(sqrt(v73 * v73 * v72 + v70), sqrt(1.0 - (v73 * v73 * v72 + v70)));
    double v75 = (v74 + v74) * 6372797.56 * 100.0;
    if (v75 >= 0.0)
    {
      double v76 = v75;
      if (v75 >= 4.50359963e15) {
        goto LABEL_89;
      }
      uint64_t v77 = (uint64_t)(v75 + v75) + 1;
    }
    else
    {
      double v76 = v75;
      if (v75 <= -4.50359963e15) {
        goto LABEL_89;
      }
      uint64_t v77 = (uint64_t)(v75 + v75);
      if (v77 >= 1) {
        --v77;
      }
    }
    double v76 = (double)(v77 >> 1);
LABEL_89:
    if (v76 >= 9.22337204e18)
    {
      uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_5;
    }
    if (v75 >= 0.0)
    {
      if (v75 < 4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v75 + v75) + 1;
LABEL_98:
        double v75 = (double)(v78 >> 1);
      }
    }
    else if (v75 > -4.50359963e15)
    {
      uint64_t v78 = (uint64_t)(v75 + v75);
      if (v78 >= 1) {
        --v78;
      }
      goto LABEL_98;
    }
    uint64_t v18 = (uint64_t)v75;
LABEL_5:
    BOOL v19 = v18 < v47;
    BOOL v20 = v18 > v47;
    char v21 = v19;
    if (v46 <= v7) {
      BOOL v20 = 0;
    }
    unsigned int v22 = v13 + v20;
    if (v22 >= v88) {
      char v14 = 1;
    }
    if ((v21 & (v46 > v7)) != 0) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v22;
    }
    char v23 = v17 - 5;
    v17 -= 4;
  }
  while (v23 != v9);
  return v14 != 0;
}

uint64_t sub_482FC8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL
                        * ((uint64_t)(*(void *)(*(void *)(a1 + 24) + 8) - **(void **)(a1 + 24)) >> 3)) < 3)
    return 0;
  if (sub_45FB38((void *)a1)) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1 + 36);
  if (sub_4847A8((void *)a1) <= v3) {
    return 0;
  }
  uint64_t v4 = **(void **)(a1 + 24);
  long long v21 = *(_OWORD *)(v4 + 592);
  uint64_t v22 = *(void *)(v4 + 608);
  uint64_t result = sub_51D60((unsigned __int8 *)&v21);
  if (result)
  {
    int v5 = (unsigned int *)(v4 + 376);
    if (*(_DWORD *)(v4 + 376) != -1 || *(_DWORD *)(v4 + 380) != -1)
    {
      BOOL v6 = *(void **)(a1 + 24);
      uint64_t v7 = v6[1];
      uint64_t v8 = *v6 + 752;
      if (v8 == v7)
      {
LABEL_13:
        v20[0] = *(void *)(a1 + 40);
        uint64_t v9 = sub_45E964(a1);
        uint64_t v11 = v10;
        uint64_t v12 = sub_45E970(a1);
        sub_483214(v9, v11, v12, v13, v5, v20);
        uint64_t v14 = v9;
        BOOL v16 = v15;
        sub_45E970(a1);
        if (v3 < (((unint64_t)v16 - v17) >> 4)) {
          return sub_4827BC(a1, v14, v16, v5);
        }
      }
      else
      {
        while (!sub_52068((unsigned __int8 *)(v8 + 216), (unsigned __int8 *)&v21))
        {
          v8 += 376;
          if (v8 == v7) {
            goto LABEL_13;
          }
        }
      }
      return 0;
    }
    uint64_t result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v20);
      sub_188FC78(v20, (uint64_t)"AutoAdvanceHandler::upcoming waypoint location is invalid", 57);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v19 < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v20);
      return 0;
    }
  }
  return result;
}

void sub_4831C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_483214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  uint64_t v6 = a2;
  if (a2 != a4)
  {
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v33 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    do
    {
      unsigned int v11 = *(_DWORD *)(v6 - 12);
      unsigned int v10 = *(_DWORD *)(v6 - 8);
      if (v11 == -1 && v10 == -1) {
        goto LABEL_31;
      }
      unsigned int v14 = *a5;
      unsigned int v13 = a5[1];
      if (*a5 == -1 && v13 == -1) {
        goto LABEL_31;
      }
      long double v16 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
      long double v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795 * 0.0174532925;
      v18.i64[0] = v11;
      v18.i64[1] = v14;
      long double v19 = exp(3.14159265 - (double)v13 * 6.28318531 / 4294967300.0);
      long double v20 = atan((v19 - 1.0 / v19) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v21 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v18), v35), v34), v33), v32);
      double v36 = vsubq_f64((float64x2_t)v21, (float64x2_t)vdupq_laneq_s64(v21, 1)).f64[0];
      long double v22 = sin((v17 - v20) * 0.5);
      long double v23 = v22 * v22;
      double v24 = cos(v17);
      long double v25 = v24 * cos(v20);
      long double v26 = sin(0.5 * v36);
      long double v27 = atan2(sqrt(v26 * v26 * v25 + v23), sqrt(1.0 - (v26 * v26 * v25 + v23)));
      double v28 = (v27 + v27) * 6372797.56 * 100.0;
      if (v28 >= 0.0)
      {
        double v29 = v28;
        if (v28 < 4.50359963e15)
        {
          uint64_t v30 = (uint64_t)(v28 + v28) + 1;
LABEL_20:
          double v29 = (double)(v30 >> 1);
        }
      }
      else
      {
        double v29 = v28;
        if (v28 > -4.50359963e15)
        {
          uint64_t v30 = (uint64_t)(v28 + v28);
          if (v30 >= 1) {
            --v30;
          }
          goto LABEL_20;
        }
      }
      if (v29 < 9.22337204e18)
      {
        if (v28 >= 0.0)
        {
          if (v28 < 4.50359963e15)
          {
            uint64_t v31 = (uint64_t)(v28 + v28) + 1;
            goto LABEL_29;
          }
        }
        else if (v28 > -4.50359963e15)
        {
          uint64_t v31 = (uint64_t)(v28 + v28);
          if (v31 >= 1) {
            --v31;
          }
LABEL_29:
          double v28 = (double)(v31 >> 1);
        }
        if ((uint64_t)v28 < *a6) {
          return;
        }
        goto LABEL_31;
      }
      if (*a6 == 0x7FFFFFFFFFFFFFFFLL) {
        return;
      }
LABEL_31:
      v6 -= 16;
    }
    while (v6 != a4);
  }
}

uint64_t sub_483530@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_48381C((uint64_t)v9, **(void **)(a1 + 24));
  sub_483E44(a2, (uint64_t)v9, 1uLL);
  uint64_t result = sub_402C7C((uint64_t)v9);
  int v5 = *(void **)(a1 + 24);
  uint64_t v6 = v5[1];
  uint64_t v7 = *v5 + 752;
  if (v7 != v6)
  {
    unint64_t v8 = a2[1];
    do
    {
      if (v8 >= a2[2])
      {
        uint64_t result = sub_483F60(a2, v7);
        unint64_t v8 = result;
      }
      else
      {
        uint64_t result = sub_48381C(v8, v7);
        v8 += 376;
        a2[1] = v8;
      }
      a2[1] = v8;
      v7 += 376;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_483628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_402C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_483640(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_483654(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_48366C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "num_divergent_reroutes_allowed");
  int v5 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v5;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "approach_distance_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "location_change_tolerance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_4837F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_48381C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  unint64_t v8 = *(unsigned char **)(a2 + 72);
  uint64_t v7 = *(unsigned char **)(a2 + 80);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    unsigned int v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v10;
    unsigned int v11 = &v10[4 * (v9 >> 2)];
    *(void *)(a1 + 88) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 80) = v11;
  }
  int v12 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v12;
  uint64_t v13 = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 104) = v13;
  if (*(char *)(a2 + 143) < 0)
  {
    sub_4200((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v14;
  }
  if (*(char *)(a2 + 167) < 0)
  {
    sub_4200((unsigned char *)(a1 + 144), *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v15;
  }
  if (*(char *)(a2 + 191) < 0)
  {
    sub_4200((unsigned char *)(a1 + 168), *(void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v16;
  }
  if (*(char *)(a2 + 215) < 0)
  {
    sub_4200((unsigned char *)(a1 + 192), *(void **)(a2 + 192), *(void *)(a2 + 200));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v17;
  }
  long long v18 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v18;
  sub_483C30((void *)(a1 + 240), (uint64_t *)(a2 + 240));
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long double v20 = *(unsigned char **)(a2 + 264);
  long double v19 = *(unsigned char **)(a2 + 272);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v21 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    long double v22 = (char *)operator new(v21);
    *(void *)(a1 + 264) = v22;
    *(void *)(a1 + 272) = v22;
    long double v23 = &v22[8 * (v21 >> 3)];
    *(void *)(a1 + 280) = v23;
    memcpy(v22, v20, v21 - 4);
    *(void *)(a1 + 272) = v23;
  }
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  long double v25 = *(unsigned char **)(a2 + 288);
  double v24 = *(unsigned char **)(a2 + 296);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (0x8E38E38E38E38E39 * (v26 >> 3) >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    long double v27 = (char *)operator new(v26);
    *(void *)(a1 + 288) = v27;
    *(void *)(a1 + 296) = v27;
    double v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 304) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 296) = v28;
  }
  long long v29 = *(_OWORD *)(a2 + 312);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v29;
  sub_4D4C4((void *)(a1 + 336), (uint64_t *)(a2 + 336));
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  return a1;
}

void sub_483B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11)
{
  if (*(char *)(v11 + 191) < 0)
  {
    operator delete(*v13);
    if ((*(char *)(v11 + 167) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v11 + 143) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v11 + 167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v12);
  if ((*(char *)(v11 + 143) & 0x80000000) == 0)
  {
LABEL_4:
    long long v15 = *a11;
    if (!*a11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*a10);
  long long v15 = *a11;
  if (!*a11) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  *(void *)(v11 + 80) = v15;
  operator delete(v15);
  goto LABEL_6;
}

void sub_483C20()
{
  if (!*v0) {
    JUMPOUT(0x483BCCLL);
  }
  JUMPOUT(0x483BC4);
}

void *sub_483C30(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 3);
    if (v7 >= 0x276276276276277) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[104 * v7];
    a1[1] = sub_483D14(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_483CE8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A8B64((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_483D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a4 + 72;
    do
    {
      *(_OWORD *)(v6 - 72) = *(_OWORD *)v5;
      long long v9 = *(_OWORD *)(v5 + 16);
      long long v10 = *(_OWORD *)(v5 + 32);
      long long v11 = *(_OWORD *)(v5 + 48);
      *(_DWORD *)(v6 - 9) = *(_DWORD *)(v5 + 63);
      *(_OWORD *)(v6 - 24) = v11;
      *(_OWORD *)(v6 - 40) = v10;
      *(_OWORD *)(v6 - 56) = v9;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      uint64_t v13 = *(unsigned char **)(v5 + 72);
      int v12 = *(unsigned char **)(v5 + 80);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_2E00();
        }
        long long v15 = (char *)operator new(v12 - v13);
        *(void *)uint64_t v6 = v15;
        *(void *)(v6 + 8) = v15;
        unint64_t v7 = &v15[4 * (v14 >> 2)];
        *(void *)(v6 + 16) = v7;
        memcpy(v15, v13, v14);
        *(void *)(v6 + 8) = v7;
      }
      int v8 = *(_DWORD *)(v5 + 96);
      *(unsigned char *)(v6 + 28) = *(unsigned char *)(v5 + 100);
      *(_DWORD *)(v6 + 24) = v8;
      v6 += 104;
      v5 += 104;
    }
    while (v5 != a3);
    return v6 - 72;
  }
  return a4;
}

void sub_483E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_446798((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_483E44(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(376 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 376 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_48381C((uint64_t)&v6[v7], a2 + v7);
      v7 += 376;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_483EF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_402C7C(v4 - 376);
      while ((void *)v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_483F60(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(376 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v12 = (uint64_t)&v7[376 * v3];
  uint64_t v13 = &v7[376 * v6];
  sub_48381C(v12, a2);
  sub_484124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  uint64_t v9 = (void *)*a1;
  uint64_t v8 = a1[1];
  *a1 = v10;
  a1[1] = v12 + 376;
  for (a1[2] = (uint64_t)v13; (void *)v8 != v9; uint64_t v8 = sub_402C7C(v8 - 376))
    ;
  if (v9) {
    operator delete(v9);
  }
  return v12 + 376;
}

void sub_4840BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4840D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 376;
    sub_402C7C(i - 376);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_484124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      uint64_t v10 = a7 + v7 - 376;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(a3 + v7 - 376);
      long long v11 = *(_OWORD *)(a3 + v7 - 360);
      long long v12 = *(_OWORD *)(a3 + v7 - 344);
      long long v13 = *(_OWORD *)(a3 + v7 - 328);
      *(_DWORD *)(v10 + 63) = *(_DWORD *)(a3 + v7 - 313);
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      int64_t v14 = (void *)(a7 + v7 - 304);
      uint64_t v15 = a3 + v7 - 304;
      *(_OWORD *)(v10 + 16) = v11;
      v14[1] = 0;
      v14[2] = 0;
      *int64_t v14 = 0;
      *(_OWORD *)int64_t v14 = *(_OWORD *)v15;
      *(void *)(a7 + v7 - 288) = *(void *)(a3 + v7 - 288);
      *(void *)(a3 + v7 - 296) = 0;
      *(void *)uint64_t v15 = 0;
      *(void *)(v15 + 16) = 0;
      uint64_t v16 = a7 + v7 - 280;
      LODWORD(v15) = *(_DWORD *)(a3 + v7 - 280);
      *(unsigned char *)(v16 + 4) = *(unsigned char *)(a3 + v7 - 276);
      *(_DWORD *)uint64_t v16 = v15;
      uint64_t v17 = a7 + v7 - 272;
      uint64_t v18 = *(void *)(a3 + v7 - 272);
      *(_DWORD *)(v17 + 8) = *(_DWORD *)(a3 + v7 - 264);
      *(void *)uint64_t v17 = v18;
      long long v19 = *(_OWORD *)(a3 + v7 - 256);
      *(void *)(v8 - 240) = *(void *)(a3 + v7 - 240);
      *(_OWORD *)(v8 - 256) = v19;
      *(void *)(v9 - 248) = 0;
      *(void *)(v9 - 240) = 0;
      *(void *)(v9 - 256) = 0;
      long long v20 = *(_OWORD *)(a3 + v7 - 232);
      *(void *)(v8 - 216) = *(void *)(a3 + v7 - 216);
      *(_OWORD *)(v8 - 232) = v20;
      *(void *)(v9 - 232) = 0;
      *(void *)(v9 - 224) = 0;
      *(void *)(v9 - 216) = 0;
      long long v21 = *(_OWORD *)(a3 + v7 - 208);
      *(void *)(v8 - 192) = *(void *)(a3 + v7 - 192);
      *(_OWORD *)(v8 - 208) = v21;
      *(void *)(v9 - 208) = 0;
      *(void *)(v9 - 200) = 0;
      long long v22 = *(_OWORD *)(a3 + v7 - 184);
      uint64_t v23 = *(void *)(a3 + v7 - 168);
      *(void *)(v9 - 192) = 0;
      *(void *)(v8 - 168) = v23;
      *(_OWORD *)(v8 - 184) = v22;
      *(void *)(v9 - 184) = 0;
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      uint64_t v24 = *(void *)(a3 + v7 - 144);
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 120) = 0;
      *(void *)(v8 - 144) = v24;
      *(void *)(v8 - 136) = 0;
      *(_OWORD *)(v8 - 136) = *(_OWORD *)(a3 + v7 - 136);
      *(void *)(v8 - 120) = *(void *)(a3 + v7 - 120);
      *(void *)(v9 - 136) = 0;
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 120) = 0;
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v8 - 96) = *(void *)(a3 + v7 - 96);
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)(a3 + v7 - 72);
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      uint64_t v25 = *(void *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = v25;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v8 - 40) = result;
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      LODWORD(v25) = *(_DWORD *)(a3 + v7 - 16);
      *(void *)(v9 - 24) = 0;
      *(_DWORD *)(v8 - 16) = v25;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      v7 -= 376;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_4842F0()
{
  unk_25589AF = 16641;
  word_2558998 = 65;
  byte_25589C7 = 1;
  byte_25589B1 = 0;
}

uint64_t sub_484318(uint64_t a1, void *a2)
{
  __p = operator new(0x28uLL);
  long long v9 = xmmword_20B93A0;
  strcpy((char *)__p, "exclude_reroutes_from_previous_legs");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9A40;
  strcpy((char *)__p, "exclude_reroutes_before_terminal_fow_roads");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p = operator new(0x19uLL);
  long long v9 = xmmword_20B9250;
  strcpy((char *)__p, "include_current_request");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p = operator new(0x19uLL);
  long long v9 = xmmword_20B9250;
  strcpy((char *)__p, "time_change_tolerance_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_4844C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4844F4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  if (*(unsigned char *)(a7 + 2) && sub_DE7FB0(a5) && (a6 != 2 || !*(unsigned char *)(a7 + 1)))
  {
    int v23 = 0;
    sub_484668((char **)a8, &v23, a3);
    int v15 = 0;
  }
  else
  {
    int v15 = 0x7FFFFFFF;
  }
  uint64_t result = sub_486CB4(a1);
  uint64_t v17 = *(void *)(result + 160);
  uint64_t v18 = *(void *)(result + 168);
  if (v18 != v17)
  {
    do
    {
      uint64_t v19 = v18 - 56;
      if (*(unsigned char *)a7)
      {
        uint64_t result = sub_52098((unsigned __int8 *)(v18 - 56), a2);
        if (result) {
          break;
        }
      }
      if (*(unsigned char *)(a7 + 1) && *(unsigned char *)(v18 - 16) == 2) {
        break;
      }
      int v21 = 10 * (a4 - *(_DWORD *)(v18 - 20));
      int v22 = v21;
      if (v15 == 0x7FFFFFFF || v21 - v15 >= *(_DWORD *)(a7 + 4))
      {
        uint64_t result = (uint64_t)sub_484668((char **)a8, &v22, (uint64_t *)(v18 - 32));
        int v15 = v22;
      }
      v18 -= 56;
    }
    while (v19 != v17);
  }
  return result;
}

void sub_48463C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_484668(char **a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    int v9 = *((_DWORD *)a3 + 2);
    *(_DWORD *)uint64_t v7 = *a2;
    *(void *)(v7 + 4) = v8;
    *((_DWORD *)v7 + 3) = v9;
    uint64_t v10 = v7 + 16;
    goto LABEL_13;
  }
  long long v11 = *a1;
  uint64_t v12 = (v7 - *a1) >> 4;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v14 = v6 - (void)v11;
  if (v14 >> 3 > v13) {
    unint64_t v13 = v14 >> 3;
  }
  BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  if (!v15) {
    unint64_t v16 = v13;
  }
  if (v16 >> 60) {
    sub_188D718();
  }
  uint64_t v17 = 16 * v16;
  uint64_t v18 = (char *)operator new(16 * v16);
  uint64_t v19 = &v18[16 * v12];
  long long v20 = &v18[v17];
  uint64_t v21 = *a3;
  int v22 = *((_DWORD *)a3 + 2);
  *(_DWORD *)uint64_t v19 = *a2;
  *(void *)(v19 + 4) = v21;
  *((_DWORD *)v19 + 3) = v22;
  uint64_t v10 = v19 + 16;
  if (v7 == v11)
  {
    *a1 = v19;
    a1[1] = v10;
    a1[2] = v20;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    int v23 = v19 - 16;
    *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v19 -= 16;
  }
  while (v7 != v11);
  *a1 = v23;
  a1[1] = v10;
  a1[2] = v20;
  if (v11) {
LABEL_12:
  }
    operator delete(v11);
LABEL_13:
  a1[1] = v10;
  return v10 - 16;
}

uint64_t sub_4847A8(void *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 4;
}

void sub_4847B8()
{
  unk_25589DF = 16641;
  word_25589C8 = 65;
  byte_25589F7 = 1;
  byte_25589E1 = 0;
}

uint64_t sub_4847E0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t (****)())(a2 + 24);
  *(void *)a1 = *(void *)(a2 + 32);
  if (v4) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = &off_253F2E8;
  }
  unint64_t v6 = (uint64_t (***)())v5[6];
  uint64_t v7 = &off_253F1A0;
  if (v6) {
    uint64_t v7 = v6;
  }
  double v8 = *((double *)v7 + 7);
  uint64_t v9 = -1;
  if (v8 <= 180.0)
  {
    double v10 = *((double *)v7 + 6);
    if (v10 >= -85.0511288 && v10 <= 85.0511288 && v8 >= -180.0)
    {
      double v11 = fmax(v10, -85.0511288);
      double v12 = v11 * 3.14159265 / 180.0;
      BOOL v13 = v11 < 85.0511288;
      double v14 = 1.48442223;
      if (v13) {
        double v14 = v12;
      }
      long double v15 = sin(v14);
      LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v16 >= 0xFFFFFFFE) {
        uint64_t v16 = 4294967294;
      }
      else {
        uint64_t v16 = v16;
      }
      uint64_t v9 = ((v8 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v16 << 32);
    }
  }
  *(void *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  uint64_t v17 = *(uint64_t (****)())(a2 + 24);
  if (!v17) {
    uint64_t v17 = &off_253F2E8;
  }
  unsigned int v18 = (int)llround(*((double *)v17 + 13) * 100.0) % 36000;
  if (v18 > 0xFFFF735F) {
    LOWORD(v18) = v18 - 29536;
  }
  *(_WORD *)(a1 + 20) = v18;
  int v19 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 22) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 22) = v19 & 0xFFFF00FF | (*(_DWORD *)(a2 + 44) << 8);
  return a1;
}

uint64_t sub_4849B8(uint64_t a1, void *a2, double *a3)
{
  if (*(double *)(a1 + 40) > *a3) {
    return 3;
  }
  if (sub_45FB38(a2)) {
    return 0;
  }
  uint64_t v5 = sub_40EFE8((uint64_t)a2);
  unint64_t v6 = (int **)sub_40EFE8(v5);
  uint64_t v7 = (char *)*v6;
  double v8 = (unsigned __int16 *)((char *)*v6 - **v6);
  unsigned int v9 = *v8;
  if (!*((unsigned char *)v6 + 38))
  {
    if (v9 < 0xB || !v8[5] || (*(_DWORD *)&v7[v8[5]] & 1) == 0) {
      return 2;
    }
LABEL_14:
    if (v9 < 0x2F) {
      return 1;
    }
    uint64_t v10 = v8[23];
    if (!v10) {
      return 1;
    }
    unsigned int v11 = v7[v10];
    BOOL v12 = v11 > 0x2F;
    uint64_t v13 = (1 << v11) & 0xE2E040048000;
    if (v12 || v13 == 0) {
      return 1;
    }
    return 2;
  }
  if (v9 < 0xB) {
    return 2;
  }
  uint64_t result = 2;
  if (v8[5])
  {
    if ((*(_DWORD *)&v7[v8[5]] & 2) == 0) {
      return 2;
    }
    goto LABEL_14;
  }
  return result;
}

double *sub_484AC4(double *a1, void *a2)
{
  strcpy(__p, "gps_accuracy_threshold");
  char v6 = 22;
  double v3 = sub_5C7E8(a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(*(void **)__p);
  }
  *a1 = v3;
  return a1;
}

void sub_484B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_484B5C(uint64_t a1, double *a2)
{
  if (*(double *)(a1 + 40) <= *a2) {
    return 0;
  }
  else {
    return 3;
  }
}

double sub_484B74()
{
  byte_2558A0F = 1;
  word_25589F8 = 65;
  byte_2558A27 = 1;
  word_2558A10 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558AB8 = 0u;
  *(_OWORD *)&qword_2558AC8 = 0u;
  dword_2558AD8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558AB8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558AB8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558AB8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558AB8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2558A3F = 8;
  strcpy((char *)&qword_2558A28, "any_mode");
  byte_2558A57 = 7;
  strcpy((char *)&dword_2558A40, "cycling");
  byte_2558A6F = 7;
  strcpy((char *)&dword_2558A58, "driving");
  byte_2558A87 = 7;
  strcpy((char *)&dword_2558A70, "walking");
  qword_2558A90 = 0;
  qword_2558A98 = 0;
  qword_2558A88 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558A88 = (uint64_t)v0;
  qword_2558A90 = (uint64_t)(v0 + 9);
  qword_2558A98 = (uint64_t)(v0 + 9);
  qword_2558AA0 = 0;
  qword_2558AA8 = 0;
  unk_2558AB0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558AA8 = (uint64_t)(v1 + 9);
  unk_2558AB0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558AA0 = (uint64_t)v1;
  return result;
}

void sub_484E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558AC8) {
    sub_20A8BD8((void **)qword_2558AC8);
  }
  long double v37 = (void *)xmmword_2558AB8;
  *(void *)&xmmword_2558AB8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_484EDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_48927C(a2, a1);
  if (*(unsigned char *)(a2 + 128))
  {
    double v3 = *(void **)(a2 + 104);
    if (v3)
    {
      *(void *)(a2 + 112) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void *)(a2 + 72);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 80);
      char v6 = *(void **)(a2 + 72);
      if (v5 != v4)
      {
        do
          uint64_t v5 = sub_489CF4(v5 - 144);
        while (v5 != v4);
        char v6 = *(void **)(a2 + 72);
      }
      *(void *)(a2 + 80) = v4;
      operator delete(v6);
    }
    char v7 = *(void **)(a2 + 24);
    if (v7)
    {
      *(void *)(a2 + 32) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a2 + 128) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 272);

  sub_48A070(a2 + 272, v8);
}

void sub_484F84(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v2 = *(void **)(a1 + 104);
    if (v2)
    {
      *(void *)(a1 + 112) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      uint64_t v5 = *(void **)(a1 + 72);
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_489CF4(v4 - 144);
        while (v4 != v3);
        uint64_t v5 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 80) = v3;
      operator delete(v5);
    }
    char v6 = *(void **)(a1 + 24);
    if (v6)
    {
      *(void *)(a1 + 32) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
}

uint32x2_t sub_485008(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = *(void *)(a1 + 280);
  if (v5 >= *(void *)(a1 + 288))
  {
    uint64_t v8 = sub_48CD78((int64x2_t *)(a1 + 272), a2);
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v5 = v6;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(v5 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v7 = *(void *)(a2 + 64);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(v5 + 64) = v7;
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = 0;
    *(void *)(v5 + 88) = 0;
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(v5 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(_DWORD *)(v5 + 96) = *(_DWORD *)(a2 + 96);
    *(void *)(v5 + 112) = 0;
    *(void *)(v5 + 120) = 0;
    *(void *)(v5 + 104) = 0;
    *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(v5 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    uint64_t v8 = (char *)(v5 + 128);
  }
  *(void *)(a1 + 280) = v8;
  uint32x2_t result = vmax_u32(*(uint32x2_t *)(a1 + 296), (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a3, sub_4F44((unsigned int *)v8 - 32)), (int32x2_t)0x100000001));
  *(uint32x2_t *)(a1 + 296) = result;
  return result;
}

uint64_t sub_4850F4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 128))
  {
    sub_484F84(a1);
    return a1;
  }
  if (!*(unsigned char *)(a1 + 128))
  {
    long long v3 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = v4;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = 1;
    return a1;
  }
  sub_48CF88(a1, (long long *)a2);
  return a1;
}

uint64_t sub_4851DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v2 = *(void **)(a1 + 104);
    if (v2)
    {
      *(void *)(a1 + 112) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      unint64_t v5 = *(void **)(a1 + 72);
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_489CF4(v4 - 144);
        while (v4 != v3);
        unint64_t v5 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 80) = v3;
      operator delete(v5);
    }
    long long v6 = *(void **)(a1 + 24);
    if (v6)
    {
      *(void *)(a1 + 32) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  return a1;
}

void sub_485264(uint64_t a1, long long *a2)
{
  char v16 = 1;
  long long v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t v7 = *(long long *)((char *)a2 + 24);
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v9 = a2[3];
  uint64_t v10 = *((void *)a2 + 8);
  *(_OWORD *)int v11 = *(long long *)((char *)a2 + 72);
  uint64_t v12 = *((void *)a2 + 11);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 9) = 0;
  int v13 = *((_DWORD *)a2 + 24);
  *(_OWORD *)__p = *(long long *)((char *)a2 + 104);
  uint64_t v15 = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  sub_4850F4(a1, (uint64_t)&v5);
  if (v16)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v2 = v11[0];
    if (v11[0])
    {
      uint64_t v3 = v11[1];
      uint64_t v4 = v11[0];
      if (v11[1] != v11[0])
      {
        do
          uint64_t v3 = (void *)sub_489CF4((uint64_t)v3 - 144);
        while (v3 != v2);
        uint64_t v4 = v11[0];
      }
      v11[1] = v2;
      operator delete(v4);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
}

uint64_t sub_485394(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t result = a1 + 72;
    if ((uint64_t *)result != a2)
    {
      uint64_t result = sub_48D0B4((uint64_t *)result, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4));
      if (!*(unsigned char *)(a1 + 128))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
    }
    *(_DWORD *)(a1 + 96) = a3;
  }
  else
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v9);
      sub_188FC78(v9, (uint64_t)"Updating user route data failed due to missing user route.", 58);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v8 < 0) {
        operator delete(__p);
      }
      if (v10 < 0) {
        operator delete((void *)v9[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_485594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_4855E0(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 128))
  {
    if (a2) {
      int v2 = 8;
    }
    else {
      int v2 = 0;
    }
    *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFFFFF7 | v2;
  }
  else
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Updating user route data failed due to missing user route.", 58);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_485774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_4857C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    unsigned int v4 = sub_491B8C(a1);
    uint64_t v5 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5 / 72;
      uint64_t v8 = 144 * v4 + 80;
      do
      {
        if (!*(unsigned char *)(a1 + 128))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        uint64_t v9 = *(void *)(a2 + 8);
        char v10 = (void **)(*(void *)(a1 + 72) + v8);
        if ((void **)(v9 + v6) != v10) {
          sub_48D578(v10, *(std::string **)(v9 + v6), *(std::string **)(v9 + v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + v6 + 8) - *(void *)(v9 + v6)) >> 4));
        }
        v8 += 144;
        v6 += 72;
        --v7;
      }
      while (v7);
    }
  }
  else if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"Updating user route trip data failed due to missing user route", 62);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_485A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_485A5C(uint64_t result, long long *a2)
{
  if (*(unsigned char *)(result + 128))
  {
    long long v2 = *a2;
    *(void *)(result + 64) = *((void *)a2 + 2);
    *(_OWORD *)(result + 48) = v2;
  }
  else
  {
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Updating user display eta failed due to missing user route.", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_485BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_485C30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 128);
  *(_DWORD *)a2 = -1;
  *(void *)(a2 + 8) = 0;
  char v4 = (char ***)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (v3)
  {
    *(_DWORD *)a2 = sub_4F44((unsigned int *)a1);
    if (!*(unsigned char *)(a1 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(a1, &v20);
    uint64_t v6 = v20;
    uint64_t v7 = v21;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    if (v20 != v21)
    {
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v28 = 0;
        long long v26 = 0u;
        *(_OWORD *)long double v27 = 0u;
        *(_OWORD *)__p = 0u;
        *(_OWORD *)uint64_t v25 = 0u;
        if ((void **)(v6 + 80) != __p) {
          sub_48D578(__p, *(std::string **)(v6 + 80), *(std::string **)(v6 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 88) - *(void *)(v6 + 80)) >> 4));
        }
        char v10 = sub_48DA18((char **)&v22, v8, (uint64_t)__p);
        if (SHIBYTE(v28) < 0) {
          break;
        }
        int v11 = v25[1];
        if (v25[1]) {
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v12 = (char *)__p[0];
        if (__p[0])
        {
          char v13 = (char *)__p[1];
          uint64_t v9 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              int v14 = (void *)*((void *)v13 - 6);
              if (v14)
              {
                *((void *)v13 - 5) = v14;
                operator delete(v14);
              }
              if (*(v13 - 57) < 0) {
                operator delete(*((void **)v13 - 10));
              }
              v13 -= 80;
            }
            while (v13 != v12);
            uint64_t v9 = __p[0];
          }
          __p[1] = v12;
          operator delete(v9);
        }
        uint64_t v8 = (uint64_t)(v10 + 72);
        v6 += 144;
        if (v6 == v7) {
          goto LABEL_23;
        }
      }
      operator delete(v27[0]);
      int v11 = v25[1];
      if (!v25[1]) {
        goto LABEL_13;
      }
LABEL_12:
      *(void *)&long long v26 = v11;
      operator delete(v11);
      goto LABEL_13;
    }
LABEL_23:
    char v15 = *v4;
    if (*v4)
    {
      char v16 = *(char ***)(a2 + 16);
      uint64_t v17 = *v4;
      if (v16 != v15)
      {
        do
        {
          v16 -= 9;
          sub_3A688C(a2 + 24, v16);
        }
        while (v16 != v15);
        uint64_t v17 = *v4;
      }
      *(void *)(a2 + 16) = v15;
      operator delete(v17);
      *char v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
    }
    double result = *(double *)&v22;
    *(_OWORD *)(a2 + 8) = v22;
    *(void *)(a2 + 24) = v23;
  }
  return result;
}

void sub_485E54(_Unwind_Exception *a1)
{
  sub_485FC0(v1);
  _Unwind_Resume(a1);
}

void sub_485E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char **a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    uint64_t v28 = a18;
    if (!a18)
    {
LABEL_3:
      long long v29 = a15;
      if (!a15) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v28 = a18;
    if (!a18) {
      goto LABEL_3;
    }
  }
  a19 = (uint64_t)v28;
  operator delete(v28);
  long long v29 = a15;
  if (!a15) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v30 = (uint64_t)a16;
  uint64_t v31 = v29;
  if (a16 != v29)
  {
    do
    {
      float64x2_t v32 = *(void **)(v30 - 48);
      if (v32)
      {
        *(void *)(v30 - 40) = v32;
        operator delete(v32);
      }
      if (*(char *)(v30 - 57) < 0) {
        operator delete(*(void **)(v30 - 80));
      }
      v30 -= 80;
    }
    while ((void *)v30 != v29);
    uint64_t v31 = a15;
  }
  a16 = v29;
  operator delete(v31);
LABEL_16:
  sub_485F54(&a11);
  sub_485FC0(v26);
  _Unwind_Resume(a1);
}

void sub_485F40(_Unwind_Exception *a1)
{
  sub_485FC0(v1);
  _Unwind_Resume(a1);
}

char ***sub_485F54(char ***a1)
{
  long long v2 = *a1;
  if (*a1)
  {
    int v3 = a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 9;
        sub_3A688C((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_485FC0(uint64_t a1)
{
  long long v2 = *(char ***)(a1 + 8);
  if (v2)
  {
    int v3 = *(char ***)(a1 + 16);
    char v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 9;
        sub_3A688C(a1 + 24, v3);
      }
      while (v3 != v2);
      char v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_48602C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 264) && sub_491B94(a1 + 136);
}

uint64_t sub_486044(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 264))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return a1 + 136;
}

uint64_t sub_4860A4(uint64_t a1, uint64_t a2)
{
  return sub_4860AC(a1 + 136, a2);
}

uint64_t sub_4860AC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 128))
  {
    sub_4895AC(a1, (long long *)a2);
    *(unsigned char *)(a1 + 128) = 1;
    return a1;
  }
  long long v5 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)a1 = v5;
  if (a1 == a2) {
    return a1;
  }
  sub_48E1E8((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  sub_48D0B4((uint64_t *)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  sub_48E338((void *)(a1 + 104), *(char **)(a2 + 104), *(char **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  return a1;
}

uint64_t sub_486180(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

char *sub_486188(uint64_t a1, uint64_t a2)
{
  double result = (char *)sub_486214(a1, (unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 312);
    if (v5 >= *(void *)(a1 + 320))
    {
      double result = sub_6E6EC((char **)(a1 + 304), a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 312), *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)a2;
        *(void *)(v5 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v5 = v6;
      }
      double result = (char *)(v5 + 24);
      *(void *)(a1 + 312) = v5 + 24;
    }
    *(void *)(a1 + 312) = result;
  }
  return result;
}

void sub_48620C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 312) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_486214(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *(unsigned __int8 **)(a1 + 304);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 312);
  if (v3 == v2) {
    return 0;
  }
  size_t v4 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if ((a2[23] & 0x80) != 0)
  {
    char v13 = *(const void **)a2;
    while (1)
    {
      uint64_t v14 = v3[23];
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *((void *)v3 + 1);
      }
      if (v5 == v14)
      {
        char v16 = v15 >= 0 ? v3 : *(unsigned __int8 **)v3;
        if (!memcmp(v13, v16, v4)) {
          break;
        }
      }
      v3 += 24;
      if (v3 == v2) {
        return 0;
      }
    }
    return 1;
  }
  else if (a2[23])
  {
    do
    {
      uint64_t v8 = v3[23];
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)v3 + 1);
      }
      if (v5 == v8)
      {
        if (v9 >= 0) {
          char v10 = v3;
        }
        else {
          char v10 = *(unsigned __int8 **)v3;
        }
        int v11 = a2;
        uint64_t v12 = a2[23];
        while (*v11 == *v10)
        {
          ++v11;
          ++v10;
          if (!--v12) {
            return 1;
          }
        }
      }
      BOOL result = 0;
      v3 += 24;
    }
    while (v3 != v2);
  }
  else
  {
    uint64_t v6 = v3[23];
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)v3 + 1);
    }
    if (v6 == a2[23])
    {
      return 1;
    }
    else
    {
      for (uint64_t i = v3 + 24; ; i += 24)
      {
        BOOL result = i != v2;
        if (i == v2) {
          break;
        }
        uint64_t v18 = i[23];
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = *((void *)i + 1);
        }
        if (v5 == v18) {
          return 1;
        }
      }
    }
  }
  return result;
}

char *sub_4863C8(uint64_t a1, uint64_t *a2, double a3)
{
  BOOL result = (char *)sub_486418(a1, a2, a3);
  if ((result & 1) == 0)
  {
    return sub_30C0C((char **)(a1 + 352), a2);
  }
  return result;
}

BOOL sub_486418(uint64_t a1, _DWORD *a2, double a3)
{
  uint64_t v5 = *(int **)(a1 + 352);
  uint64_t v6 = *(int **)(a1 + 360);
  if (v5 == v6) {
    return 0;
  }
  LODWORD(a3) = a2[1];
  long double v8 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  LODWORD(v3) = *a2;
  double v21 = ((double)v3 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  long double v22 = atan((v8 + -1.0 / v8) * 0.5) * 57.2957795 * 0.0174532925;
  double v9 = cos(v22);
  double v10 = v9;
  do
  {
    LODWORD(v9) = v5[1];
    long double v11 = exp((double)*(unint64_t *)&v9 * -6.28318531 / 4294967300.0 + 3.14159265);
    int v12 = *v5;
    v5 += 3;
    LODWORD(v4) = v12;
    long double v13 = atan((v11 - 1.0 / v11) * 0.5) * 57.2957795 * 0.0174532925;
    double v14 = v21 - ((double)*(unint64_t *)&v4 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    long double v15 = sin((v22 - v13) * 0.5);
    double v4 = v15 * v15;
    long double v16 = v10 * cos(v13);
    long double v17 = sin(v14 * 0.5);
    long double v18 = atan2(sqrt(v4 + v16 * (v17 * v17)), sqrt(1.0 - (v4 + v16 * (v17 * v17))));
    double v9 = (v18 + v18) * 6372797.56;
    BOOL result = v9 < 1.0;
  }
  while (v9 >= 1.0 && v5 != v6);
  return result;
}

char *sub_4865FC(uint64_t a1, uint64_t a2)
{
  BOOL result = (char *)sub_486688(a1, (unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 384);
    if (v5 >= *(void *)(a1 + 392))
    {
      BOOL result = sub_6E6EC((char **)(a1 + 376), a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 384), *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)a2;
        *(void *)(v5 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v5 = v6;
      }
      BOOL result = (char *)(v5 + 24);
      *(void *)(a1 + 384) = v5 + 24;
    }
    *(void *)(a1 + 384) = result;
  }
  return result;
}

void sub_486680(_Unwind_Exception *a1)
{
  *(void *)(v1 + 384) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_486688(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3 = *(unsigned __int8 **)(a1 + 376);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 384);
  if (v3 == v2) {
    return 0;
  }
  size_t v4 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if ((a2[23] & 0x80) != 0)
  {
    long double v13 = *(const void **)a2;
    while (1)
    {
      uint64_t v14 = v3[23];
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *((void *)v3 + 1);
      }
      if (v5 == v14)
      {
        long double v16 = v15 >= 0 ? v3 : *(unsigned __int8 **)v3;
        if (!memcmp(v13, v16, v4)) {
          break;
        }
      }
      v3 += 24;
      if (v3 == v2) {
        return 0;
      }
    }
    return 1;
  }
  else if (a2[23])
  {
    do
    {
      uint64_t v8 = v3[23];
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)v3 + 1);
      }
      if (v5 == v8)
      {
        if (v9 >= 0) {
          double v10 = v3;
        }
        else {
          double v10 = *(unsigned __int8 **)v3;
        }
        long double v11 = a2;
        uint64_t v12 = a2[23];
        while (*v11 == *v10)
        {
          ++v11;
          ++v10;
          if (!--v12) {
            return 1;
          }
        }
      }
      BOOL result = 0;
      v3 += 24;
    }
    while (v3 != v2);
  }
  else
  {
    uint64_t v6 = v3[23];
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)v3 + 1);
    }
    if (v6 == a2[23])
    {
      return 1;
    }
    else
    {
      for (uint64_t i = v3 + 24; ; i += 24)
      {
        BOOL result = i != v2;
        if (i == v2) {
          break;
        }
        uint64_t v18 = i[23];
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = *((void *)i + 1);
        }
        if (v5 == v18) {
          return 1;
        }
      }
    }
  }
  return result;
}

char *sub_48683C(char *result, uint64_t a2)
{
  if (result[128])
  {
    uint64_t v2 = *((void *)result + 3);
    uint64_t v3 = *((void *)result + 4);
    result += 24;
    if (v2 != v3)
    {
      while (*(void *)v2 != *(void *)a2)
      {
        v2 += 16;
        if (v2 == v3) {
          return sub_486894((char **)result, (_OWORD *)a2);
        }
      }
    }
    if (v2 == v3)
    {
      return sub_486894((char **)result, (_OWORD *)a2);
    }
    else
    {
      int v4 = *(_DWORD *)(v2 + 8);
      if (v4 <= *(_DWORD *)(a2 + 8)) {
        int v4 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(v2 + 8) = v4;
    }
  }
  return result;
}

char *sub_486894(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    long double v13 = &v12[16 * v8];
    *(_OWORD *)long double v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 2);
        v5 -= 16;
        int v15 = *((_DWORD *)v5 + 2);
        *((void *)v13 - 2) = v14;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

uint64_t sub_486998(uint64_t result, int a2)
{
  int v9 = a2;
  if (*(unsigned char *)(result + 128))
  {
    uint64_t v3 = result;
    BOOL result = sub_491B28(result);
    int v8 = result;
    unint64_t v4 = &v9;
    uint64_t v5 = &v8;
    if ((int)result >= a2) {
      uint64_t v6 = &v9;
    }
    else {
      uint64_t v6 = &v8;
    }
    if (a2 != 0x7FFFFFFF) {
      uint64_t v5 = v6;
    }
    if (result != 0x7FFFFFFF) {
      unint64_t v4 = v5;
    }
    if (!*(unsigned char *)(v3 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    *(_DWORD *)(v3 + 16) = *v4;
  }
  return result;
}

uint64_t sub_486A4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 400);
}

uint64_t sub_486A54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 400) = a2;
  return result;
}

uint64_t sub_486A5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 504);
}

uint64_t sub_486A64(uint64_t result, char a2)
{
  *(unsigned char *)(result + 504) = a2;
  return result;
}

uint64_t sub_486A6C(uint64_t a1, uint64_t a2)
{
  return sub_486A74(a1 + 408, a2);
}

uint64_t sub_486A74(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(void *)BOOL result = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 12);
  if (v4)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    char v4 = 1;
  }
  *(unsigned char *)(result + 12) = v4;
  if (result == a2)
  {
    *(void *)(result + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(result + 96) = *(unsigned char *)(a2 + 96);
    *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
    return result;
  }
  uint64_t v5 = (void *)(result + 16);
  unint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = (const void **)(v7 + 8 * (v6 >> 7));
  if (v8 == v7)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = (long long *)((char *)*v9 + 32 * (v6 & 0x7F));
    unint64_t v11 = *(void *)(a2 + 56) + v6;
    uint64_t v12 = (char *)(v7 + 8 * (v11 >> 7));
    uint64_t v13 = *(void *)v12 + 32 * (v11 & 0x7F);
    if ((long long *)v13 != v10)
    {
      unint64_t v14 = ((v13 - *(void *)v12) >> 5) + 16 * (v12 - (char *)v9) - ((uint64_t)(32 * (v6 & 0x7F)) >> 5);
      goto LABEL_10;
    }
  }
  unint64_t v14 = 0;
LABEL_10:
  sub_48BC78(v5, v9, v10, v14);
  *(void *)(v3 + 64) = *(void *)(a2 + 64);
  sub_48D578((void **)(v3 + 72), *(std::string **)(a2 + 72), *(std::string **)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
  *(unsigned char *)(v3 + 96) = *(unsigned char *)(a2 + 96);
  unint64_t v15 = *(void *)(a2 + 136);
  uint64_t v16 = *(void *)(a2 + 112);
  long double v17 = (const void **)(v16 + 8 * (v15 / 0xAA));
  if (*(void *)(a2 + 120) == v16)
  {
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  uint64_t v18 = (unsigned char *)(*(void *)(v16 + 8 * (v15 / 0xAA)) + 24 * (v15 % 0xAA));
  unint64_t v19 = *(void *)(a2 + 144) + v15;
  uint64_t v20 = (void *)(v16 + 8 * (v19 / 0xAA));
  unint64_t v21 = *v20 + 24 * (v19 % 0xAA);
  if ((unsigned char *)v21 == v18)
  {
LABEL_14:
    unint64_t v22 = 0;
    goto LABEL_15;
  }
  unint64_t v22 = 170 * ((const void **)v20 - v17)
      - 0x5555555555555555 * ((uint64_t)(v21 - *v20) >> 3)
      + 0x5555555555555555 * ((v18 - (unsigned char *)*v17) >> 3);
LABEL_15:
  sub_48C1A0((void *)(v3 + 104), v17, v18, v22);
  *(_DWORD *)(v3 + 152) = *(_DWORD *)(a2 + 152);
  sub_48C830((char *)(v3 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3));
  return v3;
}

uint64_t sub_486CB4(uint64_t a1)
{
  return a1 + 408;
}

uint64_t sub_486CBC(uint64_t result)
{
  return result;
}

uint64_t sub_486CCC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 412);
  if (v1 != -1) {
    *(_DWORD *)(result + 412) = v1 + 1;
  }
  return result;
}

uint64_t sub_486CE4(uint64_t result)
{
  *(_DWORD *)(result + 412) = 0;
  return result;
}

uint64_t sub_486CEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 412);
}

uint64_t sub_486CF4(void *a1, uint64_t a2, _OWORD *a3, void *a4)
{
  unint64_t v8 = a1[57];
  if (!v8)
  {
    sub_48E488((uint64_t)(a1 + 53));
    unint64_t v8 = a1[57];
  }
  uint64_t v9 = a1[54];
  uint64_t v10 = (void *)(v9 + 8 * (v8 >> 7));
  uint64_t v11 = *v10 + 32 * (v8 & 0x7F);
  if (a1[55] == v9) {
    uint64_t v11 = 0;
  }
  if (v11 == *v10) {
    uint64_t v11 = *(v10 - 1) + 4096;
  }
  long long v12 = a3[1];
  *(_OWORD *)(v11 - 32) = *a3;
  *(_OWORD *)(v11 - 16) = v12;
  unint64_t v13 = a1[58] + 1;
  --a1[57];
  a1[58] = v13;
  long long v52 = xmmword_20B8870;
  qmemcpy(v51, "story_max_lengthev_soc_history_m", sizeof(v51));
  while (1)
  {
    unint64_t v14 = operator new(0x20uLL);
    __p = v14;
    long long v56 = v52;
    *unint64_t v14 = v51[1];
    *(_OWORD *)((char *)v14 + 9) = v51[0];
    *((unsigned char *)v14 + 25) = 0;
    unsigned int v15 = sub_31AC04(a4, (uint64_t)&__p);
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    if (v13 <= v15) {
      break;
    }
    uint64_t v17 = a1[54];
    uint64_t v16 = a1[55];
    uint64_t v18 = 16 * (v16 - v17) - 1;
    BOOL v19 = v16 == v17;
    uint64_t v21 = a1[57];
    uint64_t v20 = a1[58];
    if (v19) {
      uint64_t v18 = 0;
    }
    unint64_t v13 = v20 - 1;
    a1[58] = v20 - 1;
    if ((unint64_t)(v18 - (v20 + v21) + 1) >= 0x100)
    {
      operator delete(*(void **)(v16 - 8));
      a1[55] -= 8;
      unint64_t v13 = a1[58];
    }
  }
  uint64_t result = sub_48716C(a1, a2, a4);
  if (result)
  {
    unint64_t v23 = a1[57];
    uint64_t v24 = *(void *)(a1[54] + ((v23 >> 4) & 0xFFFFFFFFFFFFFF8));
    uint64_t v25 = sub_69510();
    sub_29AEBC(a2);
    sub_491B8C(a2);
    sub_68E9C((uint64_t)v25);
    sub_6912C((uint64_t)v25);
    sub_69134((uint64_t)v25);
    uint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)&__p);
      uint64_t v26 = sub_188FC78(&__p, (uint64_t)"Encountered static SoC info for EV with consumption_model_id=", 61);
      std::ostream::operator<<();
      long double v27 = sub_188FC78(v26, (uint64_t)"\",charging_model_id=\"", 21);
      std::ostream::operator<<();
      uint64_t v28 = sub_188FC78(v27, (uint64_t)"\",trip_id=\"", 11);
      uint64_t v29 = sub_68E9C((uint64_t)v25);
      uint64_t v30 = sub_520C8(v28, v29);
      uint64_t v31 = sub_188FC78(v30, (uint64_t)"\",app_id=\"", 10);
      uint64_t v32 = sub_6912C((uint64_t)v25);
      int v33 = *(char *)(v32 + 23);
      if (v33 >= 0) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = *(void *)v32;
      }
      if (v33 >= 0) {
        uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        uint64_t v35 = *(void *)(v32 + 8);
      }
      double v36 = sub_188FC78(v31, v34, v35);
      long double v37 = sub_188FC78(v36, (uint64_t)"\",os_version=\"", 14);
      uint64_t v38 = sub_69134((uint64_t)v25);
      int v39 = *(char *)(v38 + 23);
      if (v39 >= 0) {
        uint64_t v40 = v38;
      }
      else {
        uint64_t v40 = *(void *)v38;
      }
      if (v39 >= 0) {
        uint64_t v41 = *(unsigned __int8 *)(v38 + 23);
      }
      else {
        uint64_t v41 = *(void *)(v38 + 8);
      }
      long double v42 = sub_188FC78(v37, v40, v41);
      double v43 = sub_188FC78(v42, (uint64_t)"\",location=\"", 12);
      uint64_t v45 = sub_36644(v43, v24 + 32 * (v23 & 0x7F) + 20, v44);
      uint64_t v46 = sub_188FC78(v45, (uint64_t)"\",request=\"", 11);
      uint64_t v47 = sub_68EE4((uint64_t)v25);
      int v48 = *(char *)(v47 + 23);
      if (v48 >= 0) {
        uint64_t v49 = v47;
      }
      else {
        uint64_t v49 = *(void *)v47;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
      }
      else {
        uint64_t v50 = *(void *)(v47 + 8);
      }
      sub_188FC78(v46, v49, v50);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v53, 1u);
      if (v54 < 0) {
        operator delete(v53);
      }
      if (v58 < 0) {
        operator delete(v57);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_487120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_487150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_48716C(void *a1, uint64_t a2, void *a3)
{
  if (!a1[58]) {
    return 0;
  }
  __p = operator new(0x20uLL);
  long long v51 = xmmword_20B91A0;
  strcpy((char *)__p, "ev_info_staleness_limit_min");
  int v6 = sub_5D2EC(a3, &__p);
  if (SHIBYTE(v51) < 0)
  {
    operator delete(__p);
    if ((int)sub_46CABC(a2) > v6) {
      return 0;
    }
  }
  else if ((int)sub_46CABC(a2) > v6)
  {
    return 0;
  }
  __p = operator new(0x20uLL);
  long long v51 = xmmword_20B91B0;
  strcpy((char *)__p, "static_soc_min_required_size");
  int v7 = sub_319F48(a3, (uint64_t)&__p);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    uint64_t v8 = a1[54];
    if (a1[55] != v8) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  operator delete(__p);
  uint64_t v8 = a1[54];
  if (a1[55] == v8) {
    goto LABEL_14;
  }
LABEL_8:
  unint64_t v9 = a1[57];
  uint64_t v10 = (void *)(v8 + 8 * (v9 >> 7));
  uint64_t v11 = *v10 + 32 * (v9 & 0x7F);
  uint64_t v12 = *(void *)(v8 + (((a1[58] + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[58] + v9) & 0x7F);
  if (v11 != v12)
  {
    uint64_t v13 = 0;
    do
    {
      BOOL v14 = sub_40A554((_DWORD *)(v11 + 4), (_DWORD *)(*(void *)(a1[54] + ((a1[57] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (a1[57] & 0x7FLL) + 4));
      v11 += 32;
      if (v11 - *v10 == 4096)
      {
        uint64_t v15 = v10[1];
        ++v10;
        uint64_t v11 = v15;
      }
      v13 += v14;
    }
    while (v11 != v12);
LABEL_15:
    if (v13 >= v7) {
      goto LABEL_16;
    }
    return 0;
  }
  if (v7 > 0) {
    return 0;
  }
LABEL_16:
  unint64_t v16 = a1[57];
  unint64_t v17 = v16 >> 7;
  uint64_t v18 = a1[54];
  BOOL v19 = (void *)(v18 + 8 * (v16 >> 7));
  if (a1[55] == v18)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = *v19 + 32 * (a1[57] & 0x7FLL);
    uint64_t v21 = *(void *)(v18 + (((a1[58] + v16) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[58] + v16) & 0x7F);
    if (v20 != v21)
    {
      while (1)
      {
        unint64_t v22 = (_DWORD *)nullsub_1(a2);
        if (sub_40A590((_DWORD *)(v20 + 4), v22)) {
          break;
        }
        v20 += 32;
        if (v20 - *v19 == 4096)
        {
          uint64_t v23 = v19[1];
          ++v19;
          uint64_t v20 = v23;
        }
        if (v20 == v21)
        {
          uint64_t v20 = v21;
          break;
        }
      }
      uint64_t v18 = a1[54];
      unint64_t v16 = a1[57];
      unint64_t v17 = v16 >> 7;
    }
  }
  uint64_t v24 = (int *)(*(void *)(v18 + 8 * v17) + 32 * (v16 & 0x7F));
  uint64_t v25 = v20 - *v19;
  uint64_t v26 = v25 >> 5;
  if (v25 < 33) {
    long double v27 = (int *)(v19[-((unint64_t)(128 - v26) >> 7)] + 32 * (~(0x80 - (_BYTE)v26) & 0x7F));
  }
  else {
    long double v27 = (int *)(*(void *)((char *)v19 + (((unint64_t)(v26 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
  }
                + 32 * ((v26 - 1) & 0x7F));
  int v28 = *v24;
  int v29 = *v27;
  __p = operator new(0x20uLL);
  long long v51 = xmmword_20B8870;
  strcpy((char *)__p, "static_soc_info_limit_min");
  int v30 = sub_5D2EC(a3, &__p);
  int v31 = v30;
  int v32 = 10 * (v28 - v29);
  if (SHIBYTE(v51) < 0)
  {
    operator delete(__p);
    if (v32 < v31) {
      return 0;
    }
  }
  else if (v32 < v30)
  {
    return 0;
  }
  uint64_t v35 = a1[54];
  double v36 = (uint64_t *)(v35 + 8 * (a1[57] >> 7));
  if (a1[55] == v35)
  {
    uint64_t v37 = 0;
    if (!v20) {
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v37 = *v36 + 32 * (a1[57] & 0x7FLL);
    if (v37 == v20) {
      goto LABEL_68;
    }
  }
  uint64_t v38 = v37 + 32;
  uint64_t v39 = *v36;
  uint64_t v40 = *v36;
  uint64_t v41 = v36;
  if (v37 + 32 - *v36 == 4096)
  {
    uint64_t v41 = v36 + 1;
    uint64_t v40 = v36[1];
    uint64_t v38 = v40;
  }
  if (v38 != v20)
  {
    uint64_t v42 = 0;
    while (1)
    {
      double v43 = sqrt((double)((*(unsigned int *)(v37 + 20) - (unint64_t)*(unsigned int *)(v38 + 20))
                        * (*(unsigned int *)(v37 + 20) - (unint64_t)*(unsigned int *)(v38 + 20))
                        + (*(unsigned int *)(v37 + 24) - (unint64_t)*(unsigned int *)(v38 + 24))
                        * (*(unsigned int *)(v37 + 24) - (unint64_t)*(unsigned int *)(v38 + 24))))
          / 100.0
          * 100.0;
      if (v43 >= 0.0)
      {
        double v44 = v43;
        if (v43 >= 4.50359963e15) {
          goto LABEL_53;
        }
        uint64_t v45 = (uint64_t)(v43 + v43) + 1;
      }
      else
      {
        double v44 = v43;
        if (v43 <= -4.50359963e15) {
          goto LABEL_53;
        }
        uint64_t v45 = (uint64_t)(v43 + v43);
        if (v45 >= 1) {
          --v45;
        }
      }
      double v44 = (double)(v45 >> 1);
LABEL_53:
      if (v44 >= 9.22337204e18)
      {
        uint64_t v47 = 0x7FFFFFFFFFFFFFFELL;
        v38 += 32;
        if (v38 - v40 != 4096) {
          goto LABEL_66;
        }
LABEL_65:
        uint64_t v48 = v41[1];
        ++v41;
        uint64_t v40 = v48;
        uint64_t v38 = v48;
        goto LABEL_66;
      }
      if (v43 >= 0.0)
      {
        if (v43 >= 4.50359963e15) {
          goto LABEL_64;
        }
        uint64_t v46 = (uint64_t)(v43 + v43) + 1;
      }
      else
      {
        if (v43 <= -4.50359963e15) {
          goto LABEL_64;
        }
        uint64_t v46 = (uint64_t)(v43 + v43);
        if (v46 >= 1) {
          --v46;
        }
      }
      double v43 = (double)(v46 >> 1);
LABEL_64:
      uint64_t v47 = (uint64_t)v43;
      v38 += 32;
      if (v38 - v40 == 4096) {
        goto LABEL_65;
      }
LABEL_66:
      v37 += 32;
      if (v37 - v39 == 4096)
      {
        uint64_t v49 = v36[1];
        ++v36;
        uint64_t v39 = v49;
        uint64_t v37 = v49;
      }
      v42 += v47;
      if (v38 == v20) {
        goto LABEL_69;
      }
    }
  }
LABEL_68:
  uint64_t v42 = 0;
LABEL_69:
  __p = operator new(0x28uLL);
  long long v51 = xmmword_20B9280;
  strcpy((char *)__p, "static_soc_min_distance_traveled_m");
  BOOL v33 = v42 > sub_5CDE0(a3, &__p);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p);
  }
  return v33;
}

void sub_4876DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_487704(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 4);
  if (v2)
  {
    *(_DWORD *)(result + 416) = *(_DWORD *)a2;
    char v2 = 1;
  }
  *(unsigned char *)(result + 420) = v2;
  return result;
}

std::string *sub_487720(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 592), a2);
}

__n128 sub_487728(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 640) = *(unsigned char *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 648) = result;
  return result;
}

uint64_t sub_487740(uint64_t a1)
{
  return a1 + 640;
}

std::string *sub_487748(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 616), a2);
}

uint64_t sub_487750(uint64_t a1)
{
  return a1 + 616;
}

uint64_t sub_487758(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 672) = *((_DWORD *)a2 + 2);
  *(void *)(result + 664) = v2;
  return result;
}

uint64_t sub_48776C(uint64_t a1)
{
  return *(void *)(a1 + 664);
}

uint64_t sub_48777C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 676) = a2;
  return result;
}

uint64_t sub_487784(uint64_t result)
{
  return result;
}

uint64_t sub_487794(uint64_t a1)
{
  return *(unsigned int *)(a1 + 676);
}

uint64_t sub_48779C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = result;
  if (a3)
  {
    __n128 result = nullsub_1(a2);
    a2 = result;
  }
  *(void *)(v5 + 688) = a2;
  *(_DWORD *)(v5 + 696) = a4;
  return result;
}

uint64_t sub_4877D8(uint64_t a1)
{
  return *(void *)(a1 + 688);
}

uint64_t sub_4877E8(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  if (*a5 == -1 && a5[1] == -1) {
    return result;
  }
  uint64_t v10 = (void *)result;
  int v11 = sub_DAFFC8(a2);
  uint64_t v12 = nullsub_1(a2);
  char v13 = sub_63A048(a2);
  LODWORD(v29) = v11;
  int v14 = *(_DWORD *)(v12 + 8);
  *(void *)((char *)&v29 + 4) = *(void *)v12;
  HIDWORD(v29) = v14;
  char v30 = v13;
  uint64_t v31 = *(void *)a5;
  int v32 = a5[2];
  if (a4 && (v13 & 1) == 0)
  {
    uint64_t v15 = (void **)v10[54];
    uint64_t v16 = v10[55];
    v10[58] = 0;
    unint64_t v17 = v16 - (void)v15;
    if (v17 >= 0x11)
    {
      do
      {
        operator delete(*v15);
        uint64_t v18 = v10[55];
        uint64_t v15 = (void **)(v10[54] + 8);
        v10[54] = v15;
        unint64_t v17 = v18 - (void)v15;
      }
      while (v17 > 0x10);
    }
    if (v17 >> 3 == 1)
    {
      uint64_t v19 = 64;
      goto LABEL_13;
    }
    if (v17 >> 3 == 2)
    {
      uint64_t v19 = 128;
LABEL_13:
      v10[57] = v19;
    }
  }
  __n128 result = sub_40A45C((int *)&v29 + 1);
  if (result && v31 != -1)
  {
    char v28 = 9;
    uint64_t v26 = 0;
    strcpy((char *)v27, "EVRouting");
    __p = 0;
    uint64_t v25 = 0;
    uint64_t v20 = sub_374CDC(a3, (uint64_t)v27, (uint64_t *)&__p);
    uint64_t v21 = (void **)__p;
    if (__p)
    {
      unint64_t v22 = v25;
      uint64_t v23 = __p;
      if (v25 != __p)
      {
        do
        {
          if (*((char *)v22 - 1) < 0) {
            operator delete(*(v22 - 3));
          }
          v22 -= 3;
        }
        while (v22 != v21);
        uint64_t v23 = __p;
      }
      uint64_t v25 = v21;
      operator delete(v23);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    __n128 result = sub_486CF4(v10, a2, &v29, v20);
    v10[59] = 0x3FF0000000000000;
  }
  return result;
}

void sub_4879C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_4879EC(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(char **)(a1 + 488);
  if ((unint64_t)v3 >= *(void *)(a1 + 496))
  {
    __n128 result = sub_48E84C((char **)(a1 + 480), a2);
    *(void *)(a1 + 488) = result;
  }
  else
  {
    sub_48EA48(a1 + 496, v3, a2);
    __n128 result = v3 + 80;
    *(void *)(a1 + 488) = v3 + 80;
    *(void *)(a1 + 488) = v3 + 80;
  }
  return result;
}

void sub_487A50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 488) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_487A58(uint64_t a1)
{
  return a1 + 480;
}

uint64_t sub_487A60@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10F5D3C((uint64_t)v201, 0, 0);
  v198 = 0;
  v199 = 0;
  uint64_t v200 = 0;
  __p[0] = v201;
  __p[1] = &v198;
  if (*(unsigned char *)(a1 + 128))
  {
    if (!*(unsigned char *)(a1 + 264)) {
      goto LABEL_5;
    }
    int v4 = sub_4F44((unsigned int *)(a1 + 136));
    if (!*(unsigned char *)(a1 + 128))
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if (v4 != sub_4F44((unsigned int *)a1)) {
LABEL_5:
    }
      sub_48EB2C(__p, a1);
  }
  if (*(unsigned char *)(a1 + 264)) {
    sub_48EB2C(__p, a1 + 136);
  }
  uint64_t v6 = *(void *)(a1 + 272);
  uint64_t v5 = *(void *)(a1 + 280);
  v194[0] = v201;
  for (v194[1] = &v198; v6 != v5; v6 += 128)
    sub_48EB2C(v194, v6);
  if (*(unsigned char *)(a1 + 264))
  {
    int v7 = sub_4F44((unsigned int *)(a1 + 136));
    int v8 = v203 | 0x800;
    int v222 = v7;
  }
  else
  {
    int v8 = v203;
  }
  int v203 = v8 | 0x300;
  double v9 = *(double *)(a1 + 296);
  double v220 = v9;
  int v11 = *(const std::string **)(a1 + 304);
  for (uint64_t i = *(const std::string **)(a1 + 312); v11 != i; ++v11)
  {
    if (v206 && (uint64_t v12 = v205, v205 < *v206))
    {
      ++v205;
      char v13 = *(std::string **)&v206[2 * v12 + 2];
    }
    else
    {
      if (!v204) {
        operator new();
      }
      *uint64_t v15 = v14;
      v15[1] = sub_3A6EDC;
      *int v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      char v13 = (std::string *)sub_188CDC8((uint64_t)&v204, (uint64_t)v14);
    }
    std::string::operator=(v13, v11);
  }
  v190 = a2;
  uint64_t v16 = *(int **)(a1 + 352);
  for (double j = *(int **)(a1 + 360); v16 != j; *(double *)(v18 + 56) = v9)
  {
    if (v209 && (uint64_t v23 = v208, v208 < *v209))
    {
      ++v208;
      uint64_t v18 = *(void *)&v209[2 * v23 + 2];
    }
    else
    {
      uint64_t v24 = sub_15C1918(v207);
      uint64_t v18 = sub_188CDC8((uint64_t)&v207, v24);
    }
    LODWORD(v9) = v16[1];
    long double v19 = exp((double)*(unint64_t *)&v9 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v20 = atan((v19 + -1.0 / v19) * 0.5) * 57.2957795;
    int v21 = *(_DWORD *)(v18 + 40);
    *(_DWORD *)(v18 + 40) = v21 | 1;
    *(long double *)(v18 + 48) = v20;
    int v22 = *v16;
    v16 += 3;
    LODWORD(v20) = v22;
    double v9 = (double)*(unint64_t *)&v20 * 360.0 / 4294967300.0 + -180.0;
    *(_DWORD *)(v18 + 40) = v21 | 3;
  }
  uint64_t v26 = *(const std::string **)(a1 + 376);
  for (k = *(const std::string **)(a1 + 384); v26 != k; ++v26)
  {
    if (v212 && (uint64_t v27 = v211, v211 < *v212))
    {
      ++v211;
      char v28 = *(std::string **)&v212[2 * v27 + 2];
    }
    else
    {
      if (!v210) {
        operator new();
      }
      *char v30 = v29;
      v30[1] = sub_3A6EDC;
      void *v29 = 0;
      v29[1] = 0;
      _DWORD v29[2] = 0;
      char v28 = (std::string *)sub_188CDC8((uint64_t)&v210, (uint64_t)v29);
    }
    std::string::operator=(v28, v26);
  }
  BOOL v221 = *(_DWORD *)(a1 + 400) != 0;
  v203 |= 0x408u;
  uint64_t v31 = v216;
  if (!v216)
  {
    int v32 = (void *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
    if (v202) {
      int v32 = (void *)*v32;
    }
    sub_10F98DC((uint64_t)v32);
    uint64_t v31 = v33;
    uint64_t v216 = v33;
  }
  int v34 = *(_DWORD *)(a1 + 408);
  int v35 = *(_DWORD *)(v31 + 16);
  *(_DWORD *)(v31 + 16) = v35 | 2;
  *(_DWORD *)(v31 + 104) = v34;
  int v36 = *(_DWORD *)(a1 + 412);
  unsigned int v37 = v35 & 0xFFFFFFF5 | 2;
  int v38 = v35 | 0xA;
  BOOL v39 = v36 == -1;
  if (v36 == -1) {
    int v36 = 0;
  }
  if (v39) {
    int v38 = v37;
  }
  *(_DWORD *)(v31 + 112) = v36;
  *(_DWORD *)(v31 + 16) = v38;
  int v40 = *(_DWORD *)(a1 + 412);
  *(_DWORD *)(v31 + 16) = v38 | 8;
  *(_DWORD *)(v31 + 112) = v40;
  int v41 = *(unsigned __int8 *)(a1 + 420);
  if (*(unsigned char *)(a1 + 420))
  {
    int v41 = *(_DWORD *)(a1 + 416);
    unsigned int v42 = v38 | 0xC;
  }
  else
  {
    unsigned int v42 = v38 & 0xFFFFFFF3 | 8;
  }
  *(_DWORD *)(v31 + 108) = v41;
  *(_DWORD *)(v31 + 16) = v42;
  int v43 = sub_E124B8(*(unsigned __int8 *)(a1 + 504));
  *(_DWORD *)(v31 + 16) |= 0x40u;
  *(_DWORD *)(v31 + 124) = v43;
  uint64_t v44 = *(void *)(a1 + 568);
  uint64_t v191 = a1;
  for (uint64_t m = *(void *)(a1 + 576); v44 != m; v44 += 56)
  {
    uint64_t v46 = *(_DWORD **)(v31 + 88);
    if (v46 && (uint64_t v47 = *(int *)(v31 + 80), (int)v47 < *v46))
    {
      *(_DWORD *)(v31 + 80) = v47 + 1;
      uint64_t v48 = *(void *)&v46[2 * v47 + 2];
    }
    else
    {
      sub_10F985C(*(void *)(v31 + 72));
      uint64_t v48 = sub_188CDC8(v31 + 72, v49);
    }
    int v50 = *(_DWORD *)(v44 + 36) - 978307200;
    *(_DWORD *)(v48 + 16) |= 4u;
    *(_DWORD *)(v48 + 40) = v50;
    if (sub_51D60((unsigned __int8 *)v44))
    {
      *(_DWORD *)(v48 + 16) |= 1u;
      long long v52 = *(void **)(v48 + 24);
      if (!v52)
      {
        uint64_t v53 = *(void *)(v48 + 8);
        char v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
        if (v53) {
          char v54 = (void *)*v54;
        }
        long long v52 = sub_1479600((uint64_t)v54);
        *(void *)(v48 + 24) = v52;
      }
      uint64_t v55 = sub_52058(v44);
      *((_DWORD *)v52 + 4) |= 1u;
      v52[3] = v55;
      *(_DWORD *)(v48 + 16) |= 1u;
      long long v56 = *(void **)(v48 + 24);
      if (!v56)
      {
        uint64_t v57 = *(void *)(v48 + 8);
        char v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
        if (v57) {
          char v58 = (void *)*v58;
        }
        long long v56 = sub_1479600((uint64_t)v58);
        *(void *)(v48 + 24) = v56;
      }
      uint64_t v59 = sub_52060(v44);
      *((_DWORD *)v56 + 4) |= 2u;
      v56[4] = v59;
    }
    *(_DWORD *)(v48 + 16) |= 2u;
    uint64_t v60 = *(void *)(v48 + 32);
    if (!v60)
    {
      uint64_t v61 = *(void *)(v48 + 8);
      char v62 = (void *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
      if (v61) {
        char v62 = (void *)*v62;
      }
      uint64_t v60 = sub_15C1918((uint64_t)v62);
      *(void *)(v48 + 32) = v60;
    }
    LODWORD(v51) = *(_DWORD *)(v44 + 28);
    long double v63 = exp((double)v51 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v64 = atan((v63 + -1.0 / v63) * 0.5) * 57.2957795;
    *(_DWORD *)(v60 + 40) |= 1u;
    *(long double *)(v60 + 48) = v64;
    *(_DWORD *)(v48 + 16) |= 2u;
    LODWORD(v64) = *(_DWORD *)(v44 + 24);
    *(_DWORD *)(v60 + 40) |= 2u;
    *(double *)(v60 + 56) = (double)*(unint64_t *)&v64 * 360.0 / 4294967300.0 + -180.0;
    int v65 = *(unsigned __int8 *)(v44 + 40);
    int v66 = v65 == 2;
    if (v65 == 3) {
      int v66 = 2;
    }
    int v67 = *(_DWORD *)(v48 + 16);
    *(_DWORD *)(v48 + 16) = v67 | 8;
    *(_DWORD *)(v48 + 44) = v66;
    uint64_t v68 = *(void *)(v44 + 48);
    if (v68 != 0x7FFFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)(v48 + 16) = v67 | 0x18;
      *(void *)(v48 + 48) = v68;
    }
  }
  int v69 = *(_DWORD *)(a1 + 560);
  if (v69 != 0x7FFFFFFF)
  {
    int v70 = v69 - 978307200;
    *(_DWORD *)(v31 + 16) |= 0x20u;
    *(_DWORD *)(v31 + 120) = v70;
    if (v70 == 1169176447 && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v194);
      double v71 = sub_188FC78(v194, (uint64_t)"Serialized original request time fails to convert back to a valid timestamp (", 77);
      long double v72 = (void *)sub_266E4((uint64_t)v71);
      long double v73 = sub_188FC78(v72, (uint64_t)"): ", 3);
      long double v74 = sub_69510();
      uint64_t v75 = sub_68EE4((uint64_t)v74);
      int v76 = *(char *)(v75 + 23);
      if (v76 >= 0) {
        uint64_t v77 = v75;
      }
      else {
        uint64_t v77 = *(void *)v75;
      }
      if (v76 >= 0) {
        uint64_t v78 = *(unsigned __int8 *)(v75 + 23);
      }
      else {
        uint64_t v78 = *(void *)(v75 + 8);
      }
      sub_188FC78(v73, v77, v78);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v193 < 0) {
        operator delete(__p[0]);
      }
      if (v197 < 0) {
        operator delete(v196);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  *(_DWORD *)(v31 + 16) |= 1u;
  uint64x2_t v79 = *(void **)(v31 + 96);
  if (v79)
  {
    uint64_t v80 = *(void *)(a1 + 432);
    if (*(void *)(a1 + 440) == v80) {
      goto LABEL_119;
    }
  }
  else
  {
    uint64_t v81 = *(void *)(v31 + 8);
    float64x2_t v82 = (void *)(v81 & 0xFFFFFFFFFFFFFFFCLL);
    if (v81) {
      float64x2_t v82 = (void *)*v82;
    }
    uint64x2_t v79 = sub_10F9614((uint64_t)v82);
    *(void *)(v31 + 96) = v79;
    uint64_t v80 = *(void *)(a1 + 432);
    if (*(void *)(a1 + 440) == v80) {
      goto LABEL_119;
    }
  }
  unint64_t v83 = *(void *)(a1 + 456);
  double v84 = (void *)(v80 + 8 * (v83 >> 7));
  uint64_t v85 = *v84 + 32 * (v83 & 0x7F);
  uint64_t v86 = *(void *)(v80 + (((*(void *)(a1 + 464) + v83) >> 4) & 0xFFFFFFFFFFFFFF8))
      + 32 * ((*(void *)(a1 + 464) + v83) & 0x7F);
  if (v85 != v86)
  {
    while (1)
    {
      long double v87 = (_DWORD *)v79[5];
      if (v87 && (uint64_t v88 = *((int *)v79 + 8), (int)v88 < *v87))
      {
        *((_DWORD *)v79 + 8) = v88 + 1;
        uint64_t v89 = *(void *)&v87[2 * v88 + 2];
      }
      else
      {
        sub_10F9594(v79[3]);
        uint64_t v89 = sub_188CDC8((uint64_t)(v79 + 3), v90);
      }
      int v91 = sub_4F44((unsigned int *)(v85 + 4));
      *(_DWORD *)(v89 + 16) |= 2u;
      *(_DWORD *)(v89 + 32) = v91;
      int v92 = sub_40A44C(v85 + 4);
      *(_DWORD *)(v89 + 16) |= 4u;
      *(_DWORD *)(v89 + 36) = v92;
      int v93 = sub_53FA4(v85 + 4);
      int v95 = *(_DWORD *)(v89 + 16);
      *(_DWORD *)(v89 + 16) = v95 | 8;
      *(_DWORD *)(v89 + 40) = v93;
      *(_DWORD *)(v89 + 44) = *(_DWORD *)v85;
      *(_DWORD *)(v89 + 16) = v95 | 0x19;
      uint64_t v96 = *(void *)(v89 + 24);
      if (v96) {
        break;
      }
      uint64_t v98 = *(void *)(v89 + 8);
      float64x2_t v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFFCLL);
      if (v98) {
        float64x2_t v99 = (void *)*v99;
      }
      uint64_t v96 = sub_15C1CB4((uint64_t)v99);
      *(void *)(v89 + 24) = v96;
      *(_DWORD *)(v96 + 40) |= 1u;
      uint64_t v97 = *(void *)(v96 + 48);
      if (!v97) {
        goto LABEL_105;
      }
LABEL_108:
      LODWORD(v94) = *(_DWORD *)(v85 + 24);
      long double v102 = exp((double)v94 * -6.28318531 / 4294967300.0 + 3.14159265);
      double v103 = atan((v102 + -1.0 / v102) * 0.5) * 57.2957795;
      *(_DWORD *)(v97 + 40) |= 1u;
      *(double *)(v97 + 48) = v103;
      *(_DWORD *)(v89 + 16) |= 1u;
      if (!v96)
      {
        uint64_t v105 = *(void *)(v89 + 8);
        v106 = (void *)(v105 & 0xFFFFFFFFFFFFFFFCLL);
        if (v105) {
          v106 = (void *)*v106;
        }
        uint64_t v96 = sub_15C1CB4((uint64_t)v106);
        *(void *)(v89 + 24) = v96;
        *(_DWORD *)(v96 + 40) |= 1u;
        uint64_t v104 = *(void *)(v96 + 48);
        if (v104) {
          goto LABEL_117;
        }
LABEL_114:
        uint64_t v107 = *(void *)(v96 + 8);
        v108 = (void *)(v107 & 0xFFFFFFFFFFFFFFFCLL);
        if (v107) {
          v108 = (void *)*v108;
        }
        uint64_t v104 = sub_15C1918((uint64_t)v108);
        *(void *)(v96 + 48) = v104;
        goto LABEL_117;
      }
      *(_DWORD *)(v96 + 40) |= 1u;
      uint64_t v104 = *(void *)(v96 + 48);
      if (!v104) {
        goto LABEL_114;
      }
LABEL_117:
      LODWORD(v103) = *(_DWORD *)(v85 + 20);
      *(_DWORD *)(v104 + 40) |= 2u;
      *(double *)(v104 + 56) = (double)*(unint64_t *)&v103 * 360.0 / 4294967300.0 + -180.0;
      char v109 = *(unsigned char *)(v85 + 16);
      *(_DWORD *)(v89 + 16) |= 0x20u;
      *(unsigned char *)(v89 + 48) = v109;
      v85 += 32;
      if (v85 - *v84 == 4096)
      {
        uint64_t v110 = v84[1];
        ++v84;
        uint64_t v85 = v110;
      }
      if (v85 == v86) {
        goto LABEL_119;
      }
    }
    *(_DWORD *)(v96 + 40) |= 1u;
    uint64_t v97 = *(void *)(v96 + 48);
    if (v97) {
      goto LABEL_108;
    }
LABEL_105:
    uint64_t v100 = *(void *)(v96 + 8);
    float64x2_t v101 = (void *)(v100 & 0xFFFFFFFFFFFFFFFCLL);
    if (v100) {
      float64x2_t v101 = (void *)*v101;
    }
    uint64_t v97 = sub_15C1918((uint64_t)v101);
    *(void *)(v96 + 48) = v97;
    uint64_t v96 = *(void *)(v89 + 24);
    goto LABEL_108;
  }
LABEL_119:
  uint64_t v112 = *(void *)(v191 + 480);
  for (uint64_t n = *(void *)(v191 + 488); v112 != n; v112 += 80)
  {
    v113 = *(_DWORD **)(v31 + 40);
    if (v113 && (uint64_t v114 = *(int *)(v31 + 32), (int)v114 < *v113))
    {
      *(_DWORD *)(v31 + 32) = v114 + 1;
      uint64_t v115 = *(void *)&v113[2 * v114 + 2];
    }
    else
    {
      v116 = sub_10F9004(*(void *)(v31 + 24));
      uint64_t v115 = sub_188CDC8(v31 + 24, (uint64_t)v116);
    }
    *(_DWORD *)(v115 + 16) |= 1u;
    uint64_t v117 = *(void *)(v115 + 8);
    v118 = (uint64_t *)(v117 & 0xFFFFFFFFFFFFFFFCLL);
    if (v117) {
      v118 = (uint64_t *)*v118;
    }
    sub_1881DF4((std::string **)(v115 + 48), (long long *)v112, v118);
    *(_DWORD *)(v115 + 16) |= 2u;
    uint64_t v119 = *(void *)(v115 + 56);
    if (!v119)
    {
      uint64_t v120 = *(void *)(v115 + 8);
      v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFFCLL);
      if (v120) {
        v121 = (void *)*v121;
      }
      uint64_t v119 = sub_10F8F10((uint64_t)v121);
      *(void *)(v115 + 56) = v119;
    }
    int v122 = *(_DWORD *)(v112 + 24);
    *(_DWORD *)(v119 + 16) |= 1u;
    *(_DWORD *)(v119 + 24) = v122;
    uint64_t v123 = *(void *)(v112 + 32);
    for (iuint64_t i = *(void *)(v112 + 40); v123 != ii; ++v123)
    {
      v125 = *(_DWORD **)(v115 + 40);
      if (v125 && (int v126 = *(_DWORD *)(v115 + 32), v126 < *v125))
      {
        *(_DWORD *)(v115 + 32) = v126 + 1;
      }
      else
      {
        uint64_t v127 = sub_10F8F8C(*(void *)(v115 + 24));
        sub_188CDC8(v115 + 24, v127);
      }
    }
  }
  uint64_t v128 = *(void *)(v191 + 520);
  unint64_t v129 = *(void *)(v191 + 544);
  v130 = (void *)(v128 + 8 * (v129 / 0xAA));
  uint64_t v131 = *(void *)(v191 + 528);
  if (v131 == v128) {
    unint64_t v132 = 0;
  }
  else {
    unint64_t v132 = *v130 + 24 * (v129 % 0xAA);
  }
  while (1)
  {
    if (v131 != v128)
    {
      if (v132 == *(void *)(v128 + 8 * ((*(void *)(v191 + 552) + v129) / 0xAA))
                 + 24 * ((*(void *)(v191 + 552) + v129) % 0xAA))
        break;
      if (v132 == *(void *)(v128 + 8 * (v129 / 0xAA)) + 24 * (v129 % 0xAA)) {
        goto LABEL_152;
      }
      goto LABEL_148;
    }
    if (!v132) {
      break;
    }
LABEL_148:
    uint64_t v133 = v132 - *v130;
    unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * (v133 >> 3);
    if (v133 < 25)
    {
      if (*(_DWORD *)(v130[-((170 - v134) / 0xAA)] + 24 * (170 * ((170 - v134) / 0xAA) - (170 - v134)) + 4068) == *(_DWORD *)(v132 + 12)) {
        goto LABEL_164;
      }
    }
    else if (*(_DWORD *)(v130[(v134 - 1) / 0xAA] + 24 * ((v134 - 1) % 0xAA) + 12) == *(_DWORD *)(v132 + 12))
    {
      goto LABEL_164;
    }
LABEL_152:
    v135 = *(_DWORD **)(v31 + 64);
    if (v135 && (uint64_t v136 = *(int *)(v31 + 56), (int)v136 < *v135))
    {
      *(_DWORD *)(v31 + 56) = v136 + 1;
      uint64_t v137 = *(void *)&v135[2 * v136 + 2];
      *(_DWORD *)(v137 + 16) |= 1u;
      uint64_t v138 = *(void *)(v137 + 48);
      if (!v138) {
        goto LABEL_157;
      }
    }
    else
    {
      v139 = sub_10F97B4(*(void *)(v31 + 48));
      uint64_t v137 = sub_188CDC8(v31 + 48, (uint64_t)v139);
      *(_DWORD *)(v137 + 16) |= 1u;
      uint64_t v138 = *(void *)(v137 + 48);
      if (!v138)
      {
LABEL_157:
        uint64_t v140 = *(void *)(v137 + 8);
        v141 = (void *)(v140 & 0xFFFFFFFFFFFFFFFCLL);
        if (v140) {
          v141 = (void *)*v141;
        }
        uint64_t v138 = sub_10F9738((uint64_t)v141);
        *(void *)(v137 + 48) = v138;
      }
    }
    int v142 = *(_DWORD *)(v132 + 16);
    int v143 = v142 / 1000;
    int v144 = v142 % 1000;
    if (v142 < 0) {
      int v145 = 65036;
    }
    else {
      int v145 = 500;
    }
    unsigned int v146 = v145 + v144 + ((-31981 * (__int16)(v145 + v144)) >> 16);
    int v147 = v143 + ((__int16)v146 >> 9) + ((unsigned __int16)(v146 & 0x8000) >> 15);
    int v148 = *(_DWORD *)(v138 + 16);
    *(_DWORD *)(v138 + 16) = v148 | 2;
    *(_DWORD *)(v138 + 28) = v147;
    *(_DWORD *)(v138 + 24) = *(_DWORD *)(v132 + 12);
    *(_WORD *)(v138 + 32) = *(_WORD *)(v132 + 20);
    *(_DWORD *)(v138 + 16) = v148 | 0xF;
LABEL_164:
    uint64_t v149 = *(void *)(v31 + 64);
    if (v149) {
      uint64_t v150 = v149 + 8;
    }
    else {
      uint64_t v150 = 0;
    }
    uint64_t v151 = *(void *)(v150 + 8 * *(int *)(v31 + 56) - 8);
    v152 = *(_DWORD **)(v151 + 40);
    if (v152 && (uint64_t v153 = *(int *)(v151 + 32), (int)v153 < *v152))
    {
      *(_DWORD *)(v151 + 32) = v153 + 1;
      v154 = *(_DWORD **)&v152[2 * v153 + 2];
    }
    else
    {
      uint64_t v155 = v151 + 24;
      uint64_t v156 = sub_10F96BC(*(void *)(v151 + 24));
      v154 = (_DWORD *)sub_188CDC8(v155, v156);
    }
    int v157 = *(_DWORD *)v132;
    int v158 = v154[4];
    v154[4] = v158 | 1;
    v154[6] = v157;
    int v159 = *(_DWORD *)(v132 + 8);
    int v160 = v159 / 1000;
    int v161 = v159 % 1000;
    if (v159 < 0) {
      int v162 = 65036;
    }
    else {
      int v162 = 500;
    }
    unsigned int v163 = v162 + v161 + ((-31981 * (__int16)(v162 + v161)) >> 16);
    v154[4] = v158 | 5;
    v154[8] = v160 + ((__int16)v163 >> 9) + ((unsigned __int16)(v163 & 0x8000) >> 15);
    int v164 = *(_DWORD *)(v132 + 4);
    v154[4] = v158 | 7;
    v154[7] = v164;
    v132 += 24;
    if (v132 - *v130 == 4080)
    {
      unint64_t v165 = v130[1];
      ++v130;
      unint64_t v132 = v165;
    }
    unint64_t v129 = *(void *)(v191 + 544);
    uint64_t v128 = *(void *)(v191 + 520);
    uint64_t v131 = *(void *)(v191 + 528);
  }
  v203 |= 1u;
  v166 = (uint64_t *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
  if (v202) {
    v166 = (uint64_t *)*v166;
  }
  sub_1881DF4(&v213, (long long *)(v191 + 592), v166);
  v203 |= 4u;
  v167 = (uint64_t *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
  if (v202) {
    v167 = (uint64_t *)*v167;
  }
  sub_1881DF4(&v215, (long long *)(v191 + 616), v167);
  if (sub_51D60((unsigned __int8 *)(v191 + 640)))
  {
    sub_51D74(v191 + 640, (uint64_t)v194);
    v203 |= 2u;
    v169 = (uint64_t *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
    if (v202) {
      v169 = (uint64_t *)*v169;
    }
    sub_1881E08(&v214, (long long *)v194, v169);
    if (v195 < 0)
    {
      operator delete(v194[0]);
      v203 |= 0x40u;
      v170 = v219;
      if (!v219) {
        goto LABEL_187;
      }
    }
    else
    {
      v203 |= 0x40u;
      v170 = v219;
      if (!v219)
      {
LABEL_187:
        v171 = (void *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
        if (v202) {
          v171 = (void *)*v171;
        }
        v170 = sub_147967C((uint64_t)v171);
        v219 = v170;
      }
    }
    sub_E15E68(v191 + 640, (uint64_t)v170);
  }
  int v172 = *(_DWORD *)(v191 + 676);
  int v173 = v203;
  v203 |= 0x1000u;
  int v223 = v172;
  if (*(_DWORD *)(v191 + 664) != -1 || *(_DWORD *)(v191 + 668) != -1)
  {
    int v174 = v173 | 0x1010;
    int v203 = v173 | 0x1010;
    uint64_t v175 = v217;
    if (!v217)
    {
      v176 = (void *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
      if (v202) {
        v176 = (void *)*v176;
      }
      uint64_t v175 = sub_15C1918((uint64_t)v176);
      uint64_t v217 = v175;
      int v174 = v203 | 0x10;
    }
    LODWORD(v168) = *(_DWORD *)(v191 + 668);
    long double v177 = exp((double)v168 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v178 = atan((v177 + -1.0 / v177) * 0.5) * 57.2957795;
    int v179 = *(_DWORD *)(v175 + 40);
    *(_DWORD *)(v175 + 40) = v179 | 1;
    *(long double *)(v175 + 48) = v178;
    int v203 = v174;
    LODWORD(v178) = *(_DWORD *)(v191 + 664);
    *(_DWORD *)(v175 + 40) = v179 | 3;
    *(double *)(v175 + 56) = (double)*(unint64_t *)&v178 * 360.0 / 4294967300.0 + -180.0;
  }
  if (*(unsigned char *)(v191 + 681))
  {
    char v180 = *(unsigned char *)(v191 + 680);
    v203 |= 0x2000u;
    char v224 = v180;
  }
  if (*(unsigned char *)(v191 + 683))
  {
    char v181 = *(unsigned char *)(v191 + 682);
    v203 |= 0x4000u;
    char v225 = v181;
  }
  uint64_t v182 = *(void *)(v191 + 688);
  if (v182 != -1 && *(_DWORD *)(v191 + 696) != -1)
  {
    v203 |= 0x20u;
    uint64_t v183 = v218;
    if (!v218)
    {
      v184 = (void *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
      if (v202) {
        v184 = (void *)*v184;
      }
      uint64_t v183 = sub_10F999C((uint64_t)v184);
      uint64_t v218 = v183;
      uint64_t v182 = *(void *)(v191 + 688);
    }
    uint64_t v185 = nullsub_1(v182);
    int v186 = *(_DWORD *)(v183 + 16);
    *(_DWORD *)(v183 + 16) = v186 | 1;
    *(void *)(v183 + 24) = v185;
    int v187 = *(_DWORD *)(v191 + 696);
    *(_DWORD *)(v183 + 16) = v186 | 3;
    *(_DWORD *)(v183 + 32) = v187;
  }
  v190->__r_.__value_.__r.__words[0] = 0;
  v190->__r_.__value_.__l.__size_ = 0;
  v190->__r_.__value_.__r.__words[2] = 0;
  sub_1880F60((uint64_t)v201, v190);
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  return sub_10F6120(v201);
}

void sub_488DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a18);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  sub_10F6120(&a57);
  _Unwind_Resume(a1);
}

BOOL sub_488E94(uint64_t a1)
{
  return *(unsigned char *)(a1 + 683) && *(unsigned char *)(a1 + 682) != 0;
}

uint64_t sub_488EB4(uint64_t result)
{
  *(_WORD *)(result + 682) = 257;
  return result;
}

uint64_t sub_488EC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 681);
}

BOOL sub_488EC8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 681) && *(unsigned char *)(a1 + 680) != 0;
}

uint64_t sub_488EE8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 680) = a2;
  *(unsigned char *)(result + 681) = 1;
  return result;
}

void sub_488EF8(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  *(_OWORD *)long double v19 = 0u;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  *(_OWORD *)uint64_t v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 0x7FFFFFFF;
  int v32 = 0;
  uint64_t v33 = 0;
  __p = 0;
  char v26 = *(unsigned char *)(a1 + 504);
  sub_486A74(a1 + 408, (uint64_t)&v18);
  *(unsigned char *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 676) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(_WORD *)(a1 + 680) = 257;
  *(void *)(a1 + 688) = -1;
  *(_DWORD *)(a1 + 696) = -1;
  if (__p)
  {
    int v32 = __p;
    operator delete(__p);
  }
  uint64_t v2 = (void **)v27[1];
  uint64_t v3 = (void **)v28;
  *((void *)&v29 + 1) = 0;
  unint64_t v4 = v28 - (unint64_t)v27[1];
  if ((unint64_t)v28 - (unint64_t)v27[1] >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)v28;
      uint64_t v2 = (void **)((char *)v27[1] + 8);
      v27[1] = v2;
      unint64_t v4 = v28 - (void)v2;
    }
    while ((void)v28 - (void)v2 > 0x10uLL);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
    goto LABEL_9;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 170;
LABEL_9:
    *(void *)&long long v29 = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    if ((void *)v28 != v27[1]) {
      *(void *)&long long v28 = v28 + (((unint64_t)v27[1] - v28 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v27[0]) {
    operator delete(v27[0]);
  }
  int v8 = (char *)v23;
  if (v23)
  {
    double v9 = v24;
    uint64_t v10 = v23;
    if (v24 != v23)
    {
      do
      {
        int v11 = (void *)*((void *)v9 - 6);
        if (v11)
        {
          *((void *)v9 - 5) = v11;
          operator delete(v11);
        }
        if (*(v9 - 57) < 0) {
          operator delete(*((void **)v9 - 10));
        }
        v9 -= 80;
      }
      while (v9 != v8);
      uint64_t v10 = v23;
    }
    uint64_t v24 = v8;
    operator delete(v10);
  }
  uint64_t v12 = (void **)v19[1];
  char v13 = (void **)v20;
  *((void *)&v21 + 1) = 0;
  unint64_t v14 = v20 - (unint64_t)v19[1];
  if ((unint64_t)v20 - (unint64_t)v19[1] >= 0x11)
  {
    do
    {
      operator delete(*v12);
      char v13 = (void **)v20;
      uint64_t v12 = (void **)((char *)v19[1] + 8);
      v19[1] = v12;
      unint64_t v14 = v20 - (void)v12;
    }
    while ((void)v20 - (void)v12 > 0x10uLL);
  }
  unint64_t v15 = v14 >> 3;
  if (v15 == 1)
  {
    uint64_t v16 = 64;
    goto LABEL_32;
  }
  if (v15 == 2)
  {
    uint64_t v16 = 128;
LABEL_32:
    *(void *)&long long v21 = v16;
  }
  if (v12 != v13)
  {
    do
    {
      unint64_t v17 = *v12++;
      operator delete(v17);
    }
    while (v12 != v13);
    if ((void *)v20 != v19[1]) {
      *(void *)&long long v20 = v20 + (((unint64_t)v19[1] - v20 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v19[0]) {
    operator delete(v19[0]);
  }
}

void sub_489130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_489144(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 6);
        if (v5)
        {
          *((void *)v3 - 5) = v5;
          operator delete(v5);
        }
        if (*(v3 - 57) < 0) {
          operator delete(*((void **)v3 - 10));
        }
        v3 -= 80;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_4891C8(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  sub_48CB50((uint64_t)(a1 + 13));
  uint64_t v3 = a1[9];
  if (v3)
  {
    uint64_t v4 = a1[10];
    unint64_t v5 = (void *)a1[9];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 48);
        if (v6)
        {
          *(void *)(v4 - 40) = v6;
          operator delete(v6);
        }
        if (*(char *)(v4 - 57) < 0) {
          operator delete(*(void **)(v4 - 80));
        }
        v4 -= 80;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  sub_48CA88((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_48926C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 704) = a2;
  return result;
}

uint64_t sub_489274(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 704);
}

uint64_t sub_48927C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 128);
  *(unsigned char *)(a1 + 128) = v4;
  if (v4) {
    sub_4895AC(a1, (long long *)a2);
  }
  int v5 = *(unsigned __int8 *)(a2 + 264);
  *(unsigned char *)(a1 + 264) = v5;
  if (v5) {
    sub_4895AC(a1 + 136, (long long *)(a2 + 136));
  }
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  sub_489DC4(a1 + 272, *(void *)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 7);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  sub_8A6F8((char *)(a1 + 304), *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3));
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  sub_8A6F8((char *)(a1 + 328), *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 3));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  int v7 = *(unsigned char **)(a2 + 352);
  uint64_t v6 = *(unsigned char **)(a2 + 360);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    double v9 = (char *)operator new(v8);
    *(void *)(a1 + 352) = v9;
    *(void *)(a1 + 360) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 368) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 360) = v10;
  }
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  sub_8A6F8((char *)(a1 + 376), *(void *)(a2 + 376), *(void *)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 3));
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  sub_48A1C8(a1 + 408, a2 + 408);
  if (*(char *)(a2 + 615) < 0)
  {
    sub_4200((unsigned char *)(a1 + 592), *(void **)(a2 + 592), *(void *)(a2 + 600));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 592);
    *(void *)(a1 + 608) = *(void *)(a2 + 608);
    *(_OWORD *)(a1 + 592) = v11;
  }
  uint64_t v12 = (unsigned char *)(a1 + 616);
  if (*(char *)(a2 + 639) < 0)
  {
    sub_4200(v12, *(void **)(a2 + 616), *(void *)(a2 + 624));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 616);
    *(void *)(a1 + 632) = *(void *)(a2 + 632);
    *(_OWORD *)uint64_t v12 = v13;
  }
  long long v14 = *(_OWORD *)(a2 + 640);
  long long v15 = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(_OWORD *)(a1 + 640) = v14;
  *(_OWORD *)(a1 + 656) = v15;
  *(_WORD *)(a1 + 680) = *(_WORD *)(a2 + 680);
  *(_WORD *)(a1 + 682) = *(_WORD *)(a2 + 682);
  long long v16 = *(_OWORD *)(a2 + 688);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = v16;
  return a1;
}

void sub_4894B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 615) < 0) {
    operator delete(*v17);
  }
  sub_4891C8(v16);
  sub_1A668(v15);
  long double v19 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 360) = v19;
    operator delete(v19);
  }
  sub_1A668(v14);
  sub_1A668(v13);
  sub_489570(v12);
  sub_4851DC(v11);
  sub_4851DC(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_489570(uint64_t *a1)
{
  if (*a1)
  {
    sub_48A070((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_4895AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  int v5 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    int64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    double v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7 - 4);
    *(void *)(a1 + 32) = v9;
  }
  long long v10 = a2[3];
  uint64_t v11 = *((void *)a2 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_48977C(a1 + 72, *((void *)a2 + 9), *((void *)a2 + 10), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 4));
  int v12 = *((_DWORD *)a2 + 24);
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  long long v14 = (unsigned char *)*((void *)a2 + 13);
  long long v13 = (unsigned char *)*((void *)a2 + 14);
  uint64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    long long v16 = (char *)operator new(v13 - v14);
    *(void *)(a1 + 104) = v16;
    *(void *)(a1 + 112) = v16;
    unint64_t v17 = &v16[16 * (v15 >> 4)];
    *(void *)(a1 + 120) = v17;
    memcpy(v16, v14, v15 - 7);
    *(void *)(a1 + 112) = v17;
  }
  return a1;
}

void sub_4896E0(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void **sub_489720(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_489CF4(v3 - 144);
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_48977C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = (void *)result;
    if (a4 >= 0x1C71C71C71C71C8) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(144 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result + 144 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_48990C(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 144;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_489840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_489854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 144)
    sub_489CF4(v10 - 144 + v11);
  *(void *)(v9 + 8) = v10;
  sub_489884(&a9);
  _Unwind_Resume(a1);
}

void ***sub_489884(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      int v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_489CF4(v4 - 144);
        while ((void *)v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_48990C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)a2[1];
  int v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = (unsigned char *)a2[4];
  uint64_t v10 = (unsigned char *)a2[5];
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    long long v14 = &v13[32 * (v12 >> 5)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12 - 6);
    *(void *)(a1 + 40) = v14;
  }
  if (*((char *)a2 + 79) < 0)
  {
    sub_4200((unsigned char *)(a1 + 56), (void *)a2[7], a2[8]);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 7);
    *(void *)(a1 + 72) = a2[9];
    *(_OWORD *)(a1 + 56) = v15;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_489B48((char **)(a1 + 80), a2[10], a2[11], 0xCCCCCCCCCCCCCCCDLL * ((a2[11] - a2[10]) >> 4));
  long long v16 = *(_OWORD *)(a2 + 13);
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v18 = (unsigned char *)a2[15];
  unint64_t v17 = (unsigned char *)a2[16];
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    long long v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 120) = v20;
    *(void *)(a1 + 128) = v20;
    long long v21 = &v20[32 * (v19 >> 5)];
    *(void *)(a1 + 136) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 128) = v21;
  }
  return a1;
}

void sub_489AA8(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_4;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  goto LABEL_4;
}

void sub_489B38()
{
  if (!*v0) {
    JUMPOUT(0x489AFCLL);
  }
  JUMPOUT(0x489AF4);
}

void sub_489B48(char **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(80 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_3A8F44(a1 + 16, &v8[v9], (long long *)(a2 + v9));
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_489C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_489C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A8CA8(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_489C4C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_489C4C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 6);
          if (v6)
          {
            *((void *)v4 - 5) = v6;
            operator delete(v6);
          }
          if (*(v4 - 57) < 0) {
            operator delete(*((void **)v4 - 10));
          }
          v4 -= 80;
        }
        while (v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_489CF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    int v5 = *(void **)(a1 + 80);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 48);
        if (v6)
        {
          *(void *)(v4 - 40) = v6;
          operator delete(v6);
        }
        if (*(char *)(v4 - 57) < 0) {
          operator delete(*(void **)(v4 - 80));
        }
        v4 -= 80;
      }
      while (v4 != v3);
      int v5 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v3;
    operator delete(v5);
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int64_t v7 = *(void **)(a1 + 32);
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 56));
  int64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
LABEL_15:
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
LABEL_16:
  uint64_t v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(void *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_489DC4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = (void *)result;
    if (a4 >> 57) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(a4 << 7);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result + (a4 << 7);
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_4895AC(v8 + v9, (long long *)(a2 + v9));
        v9 += 128;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_489E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_489E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_489F20(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_489EC8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_489EC8(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_48A070((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_489F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 == a5) {
    return;
  }
  uint64_t v6 = a3;
  do
  {
    int64_t v7 = *(void **)(v6 - 24);
    if (v7)
    {
      *(void *)(v6 - 16) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void *)(v6 - 56);
    if (v8)
    {
      uint64_t v9 = *(void *)(v6 - 48);
      uint64_t v10 = *(void **)(v6 - 56);
      if (v9 == v8)
      {
LABEL_30:
        *(void *)(v6 - 48) = v8;
        operator delete(v10);
        goto LABEL_31;
      }
      while (1)
      {
        uint64_t v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(void *)(v9 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v12 = *(void *)(v9 - 64);
        if (v12)
        {
          uint64_t v13 = *(void *)(v9 - 56);
          long long v14 = *(void **)(v9 - 64);
          if (v13 != v12)
          {
            do
            {
              long long v15 = *(void **)(v13 - 48);
              if (v15)
              {
                *(void *)(v13 - 40) = v15;
                operator delete(v15);
              }
              if (*(char *)(v13 - 57) < 0) {
                operator delete(*(void **)(v13 - 80));
              }
              v13 -= 80;
            }
            while (v13 != v12);
            long long v14 = *(void **)(v9 - 64);
          }
          *(void *)(v9 - 56) = v12;
          operator delete(v14);
        }
        if (*(char *)(v9 - 65) < 0) {
          break;
        }
        long long v16 = *(void **)(v9 - 112);
        if (v16) {
          goto LABEL_24;
        }
LABEL_25:
        unint64_t v17 = *(void **)(v9 - 136);
        if (v17)
        {
          *(void *)(v9 - 128) = v17;
          operator delete(v17);
        }
        v9 -= 144;
        if (v9 == v8)
        {
          uint64_t v10 = *(void **)(v6 - 56);
          goto LABEL_30;
        }
      }
      operator delete(*(void **)(v9 - 88));
      long long v16 = *(void **)(v9 - 112);
      if (!v16) {
        goto LABEL_25;
      }
LABEL_24:
      *(void *)(v9 - 104) = v16;
      operator delete(v16);
      goto LABEL_25;
    }
LABEL_31:
    long long v18 = *(void **)(v6 - 104);
    if (v18)
    {
      *(void *)(v6 - 96) = v18;
      operator delete(v18);
    }
    v6 -= 128;
  }
  while (v6 != a5);
}

void sub_48A070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == a2) {
    goto LABEL_2;
  }
  do
  {
    int v5 = *(void **)(v4 - 24);
    if (v5)
    {
      *(void *)(v4 - 16) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void *)(v4 - 56);
    if (v6)
    {
      uint64_t v7 = *(void *)(v4 - 48);
      uint64_t v8 = *(void **)(v4 - 56);
      if (v7 == v6)
      {
LABEL_30:
        *(void *)(v4 - 48) = v6;
        operator delete(v8);
        goto LABEL_31;
      }
      while (1)
      {
        uint64_t v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(void *)(v7 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v10 = *(void *)(v7 - 64);
        if (v10)
        {
          uint64_t v11 = *(void *)(v7 - 56);
          uint64_t v12 = *(void **)(v7 - 64);
          if (v11 != v10)
          {
            do
            {
              uint64_t v13 = *(void **)(v11 - 48);
              if (v13)
              {
                *(void *)(v11 - 40) = v13;
                operator delete(v13);
              }
              if (*(char *)(v11 - 57) < 0) {
                operator delete(*(void **)(v11 - 80));
              }
              v11 -= 80;
            }
            while (v11 != v10);
            uint64_t v12 = *(void **)(v7 - 64);
          }
          *(void *)(v7 - 56) = v10;
          operator delete(v12);
        }
        if (*(char *)(v7 - 65) < 0) {
          break;
        }
        long long v14 = *(void **)(v7 - 112);
        if (v14) {
          goto LABEL_24;
        }
LABEL_25:
        long long v15 = *(void **)(v7 - 136);
        if (v15)
        {
          *(void *)(v7 - 128) = v15;
          operator delete(v15);
        }
        v7 -= 144;
        if (v7 == v6)
        {
          uint64_t v8 = *(void **)(v4 - 56);
          goto LABEL_30;
        }
      }
      operator delete(*(void **)(v7 - 88));
      long long v14 = *(void **)(v7 - 112);
      if (!v14) {
        goto LABEL_25;
      }
LABEL_24:
      *(void *)(v7 - 104) = v14;
      operator delete(v14);
      goto LABEL_25;
    }
LABEL_31:
    long long v16 = *(void **)(v4 - 104);
    if (v16)
    {
      *(void *)(v4 - 96) = v16;
      operator delete(v16);
    }
    v4 -= 128;
  }
  while (v4 != a2);
LABEL_2:
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_48A1C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_48A4DC(a1 + 16, (void *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_489B48((char **)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  sub_48A390(a1 + 104, (void *)(a2 + 104));
  int v5 = *(_DWORD *)(a2 + 152);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v5;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v7 = *(unsigned char **)(a2 + 160);
  uint64_t v6 = *(unsigned char **)(a2 + 168);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v8 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 160) = v9;
    *(void *)(a1 + 168) = v9;
    *(void *)(a1 + 176) = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, 56 * ((v8 - 56) / 0x38uLL) + 56);
    *(void *)(a1 + 168) = &v9[56 * ((v8 - 56) / 0x38uLL) + 56];
  }
  return a1;
}

void sub_48A32C(_Unwind_Exception *a1)
{
  sub_489144(v2);
  sub_48CA88(v1);
  _Unwind_Resume(a1);
}

void sub_48A348(_Unwind_Exception *a1)
{
  sub_48CA88(v1);
  _Unwind_Resume(a1);
}

void sub_48A35C(_Unwind_Exception *a1)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 168) = v7;
    operator delete(v7);
  }
  sub_48CB50(v4);
  sub_489144(v3);
  sub_48CA88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_48A390(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (void *)(v5 + 8 * (v4 / 0xAA));
  if (v6 == v5)
  {
    int64_t v8 = 0;
    goto LABEL_5;
  }
  int64_t v8 = (long long *)(*(void *)(v5 + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
  unint64_t v9 = a2[5] + v4;
  uint64_t v10 = (void *)(v5 + 8 * (v9 / 0xAA));
  unint64_t v11 = *v10 + 24 * (v9 % 0xAA);
  if ((long long *)v11 == v8)
  {
LABEL_5:
    unint64_t v12 = 0;
    goto LABEL_6;
  }
  unint64_t v12 = 170 * (v10 - v7)
      - 0x5555555555555555 * ((uint64_t)(v11 - *v10) >> 3)
      + 0x5555555555555555 * (((uint64_t)v8 - *v7) >> 3);
LABEL_6:
  sub_48B0D8((void *)a1, v7, v8, v12);
  return a1;
}

void sub_48A494(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 == v4)
  {
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  else
  {
    *(void *)(v1 + 16) = v3 + ((v4 - v3 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t sub_48A4DC(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 7));
  if (v6 == v5)
  {
    int64_t v8 = 0;
    goto LABEL_5;
  }
  int64_t v8 = (long long *)(*(void *)v7 + 32 * (v4 & 0x7F));
  unint64_t v9 = a2[5] + v4;
  uint64_t v10 = (char *)(v5 + 8 * (v9 >> 7));
  uint64_t v11 = *(void *)v10 + 32 * (v9 & 0x7F);
  if ((long long *)v11 == v8)
  {
LABEL_5:
    unint64_t v12 = 0;
    goto LABEL_6;
  }
  unint64_t v12 = ((v11 - *(void *)v10) >> 5) + 16 * (v10 - v7) - ((uint64_t)(32 * (v4 & 0x7F)) >> 5);
LABEL_6:
  sub_48A5F0((void *)a1, v7, v8, v12);
  return a1;
}

void sub_48A5A8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 == v4)
  {
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  else
  {
    *(void *)(v1 + 16) = v3 + ((v4 - v3 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_48A5F0(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = 16 * (v9 - v8) - 1;
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a1[5];
  unint64_t v12 = v11 + a1[4];
  unint64_t v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_48A76C((uint64_t)a1, a4 - v13);
    uint64_t v11 = a1[5];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v12 = a1[4] + v11;
  }
  long long v14 = (void *)(v8 + 8 * (v12 >> 7));
  if (v9 == v8)
  {
    uint64_t v15 = 0;
    if (a4) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v18 = v15;
    unint64_t v17 = v14;
    goto LABEL_24;
  }
  uint64_t v15 = *v14 + 32 * (v12 & 0x7F);
  if (!a4) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v16 = a4 + ((v15 - *v14) >> 5);
  if (v16 < 1)
  {
    unint64_t v19 = 127 - v16;
    LOBYTE(v16) = ~(127 - v16);
    unint64_t v17 = &v14[-(v19 >> 7)];
  }
  else
  {
    unint64_t v17 = &v14[(unint64_t)v16 >> 7];
  }
  uint64_t v18 = *v17 + 32 * (v16 & 0x7F);
LABEL_24:
  while (v15 != v18)
  {
    uint64_t v20 = v18;
    if (v14 != v17) {
      uint64_t v20 = *v14 + 4096;
    }
    if (v15 == v20)
    {
      a1[5] = v11;
      if (v14 == v17) {
        return;
      }
    }
    else
    {
      long long v21 = (_OWORD *)v15;
      do
      {
        long long v22 = *a3;
        long long v23 = a3[1];
        a3 += 2;
        _OWORD *v21 = v22;
        v21[1] = v23;
        if ((uint32_t *)((char *)a3 - *a2) == &stru_FF0.dylib.current_version)
        {
          uint64_t v24 = (long long *)a2[1];
          ++a2;
          a3 = v24;
        }
        v21 += 2;
      }
      while (v21 != (_OWORD *)v20);
      uint64_t v11 = a1[5] + ((v20 - v15) >> 5);
      a1[5] = v11;
      if (v14 == v17) {
        return;
      }
    }
    uint64_t v25 = v14[1];
    ++v14;
    uint64_t v15 = v25;
  }
}

void sub_48A76C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x7F) != 0) {
    unint64_t v6 = (v5 >> 7) + 1;
  }
  else {
    unint64_t v6 = v5 >> 7;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 7) {
    unint64_t v8 = v7 >> 7;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 7)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 7);
    if (!v8) {
      return;
    }
    while (1)
    {
      uint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          uint64_t v27 = (char *)operator new(8 * v24);
          long long v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          uint64_t v3 = v28;
          if (!v29)
          {
            uint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              int v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            int v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            int v32 = &v28[v34];
            v16 += v34;
            int v35 = (long long *)(v15 + 3);
            int v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)int v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)int v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            uint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        long long v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          uint64_t v3 = *(char **)(a1 + 8);
        }
        long long v14 = &v3[-8 * v21];
        uint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)uint64_t v3 = v17;
      uint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        int v145 = operator new(0x1000uLL);
        sub_22368((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        int v145 = operator new(0x1000uLL);
        sub_224F8((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 127;
        }
        else {
          uint64_t v116 = 128;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 7);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 7;
      if (!v8) {
        return;
      }
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          unint64_t v132 = (char *)operator new(8 * v129);
          uint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              uint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            uint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v136 = &v133[v138];
            v121 += v138;
            v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)uint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        uint64_t v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)v118 = v122;
      v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_188D718();
    unint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 7;
  int v40 = &v13[8 * (v11 - v8)];
  int v41 = &v13[8 * v12];
  unsigned int v42 = v40;
  int v43 = v13;
  do
  {
    uint64_t v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      uint64_t v49 = &v40[-8 * (v47 >> 1)];
      int v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        int v50 = v40;
      }
      unsigned int v42 = &v49[v41 - v40];
      int v40 = &v50[-8 * v48];
      int v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_188D718();
    }
    long long v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    unsigned int v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      unsigned int v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        long double v64 = (long long *)(v40 + 16);
        int v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)int v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    int v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    int v40 = &v52[8 * (v51 >> 2)];
    int v43 = v52;
LABEL_49:
    *(void *)unsigned int v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_188D718();
          }
          uint64x2_t v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          int v69 = &v79[8 * (v78 >> 2)];
          unsigned int v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            unsigned int v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              uint64_t v85 = &v79[8 * (v78 >> 2)];
              uint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v85 = &v69[v89];
            uint64_t v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            int v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)int v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)uint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          int v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          int v43 = v80;
          goto LABEL_81;
        }
        long double v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        int v76 = &v40[-8 * (v74 >> 1)];
        uint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          uint64_t v77 = v40;
        }
        unsigned int v42 = &v76[v41 - v40];
        int v69 = &v77[-8 * v75];
        int v43 = v72;
      }
      else
      {
        int v69 = v40;
      }
LABEL_81:
      *(void *)unsigned int v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      int v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  int v69 = v40;
LABEL_75:
  int v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_188D718();
          }
          float64x2_t v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          int v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          unsigned int v42 = v69;
          if (!v29)
          {
            unsigned int v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            uint64_t v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            uint64_t v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v105 = &v69[v109];
            v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)uint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          int v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          int v69 = &v97[8 * (v96 >> 1)];
          float64x2_t v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            float64x2_t v99 = v42;
          }
          unsigned int v42 = &v99[8 * v98];
        }
        int v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  double v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_48B06C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_48B0B8()
{
}

void sub_48B0D8(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = 170 * ((v9 - v8) >> 3) - 1;
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a1[5];
  unint64_t v12 = v11 + a1[4];
  unint64_t v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_48B2E4((uint64_t)a1, a4 - v13);
    uint64_t v11 = a1[5];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v12 = a1[4] + v11;
  }
  long long v14 = (void *)(v8 + 8 * (v12 / 0xAA));
  if (v9 == v8)
  {
    unint64_t v15 = 0;
    if (!a4) {
      return;
    }
  }
  else
  {
    unint64_t v15 = *v14 + 24 * (v12 % 0xAA);
    if (!a4) {
      return;
    }
  }
  uint64_t v16 = a4 - 0x5555555555555555 * ((uint64_t)(v15 - *v14) >> 3);
  if (v16 < 1)
  {
    unint64_t v19 = 169 - v16;
    uint64_t v17 = &v14[-(v19 / 0xAA)];
    unint64_t v18 = *v17 + 24 * (170 * (v19 / 0xAA) - v19) + 4056;
    if (v15 != v18)
    {
      do
      {
LABEL_13:
        uint64_t v20 = v18;
        if (v14 != v17) {
          uint64_t v20 = *v14 + 4080;
        }
        if (v15 == v20)
        {
          a1[5] = v11;
          if (v14 == v17) {
            return;
          }
        }
        else
        {
          unint64_t v21 = v15;
          do
          {
            long long v22 = *a3;
            *(void *)(v21 + 16) = *((void *)a3 + 2);
            *(_OWORD *)unint64_t v21 = v22;
            a3 = (long long *)((char *)a3 + 24);
            if ((dylib_command *)((char *)a3 - *a2) == &stru_FF0)
            {
              int64_t v23 = (long long *)a2[1];
              ++a2;
              a3 = v23;
            }
            v21 += 24;
          }
          while (v21 != v20);
          uint64_t v11 = a1[5] - 0x5555555555555555 * ((uint64_t)(v20 - v15) >> 3);
          a1[5] = v11;
          if (v14 == v17) {
            return;
          }
        }
        unint64_t v24 = v14[1];
        ++v14;
        unint64_t v15 = v24;
      }
      while (v24 != v18);
    }
  }
  else
  {
    uint64_t v17 = &v14[v16 / 0xAAuLL];
    unint64_t v18 = *v17 + 24 * (v16 % 0xAAuLL);
    if (v15 != v18) {
      goto LABEL_13;
    }
  }
}

void sub_48B2E4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    *(void *)(a1 + 32) = v7 - 170 * v8;
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        unint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          uint64_t v27 = (char *)operator new(8 * v24);
          long long v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          uint64_t v3 = v28;
          if (!v29)
          {
            uint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              int v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            int v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            int v32 = &v28[v34];
            v16 += v34;
            int v35 = (long long *)(v15 + 3);
            int v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)int v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)int v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            uint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        long long v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          uint64_t v3 = *(char **)(a1 + 8);
        }
        long long v14 = &v3[-8 * v21];
        uint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)uint64_t v3 = v17;
      uint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        int v145 = operator new(0xFF0uLL);
        sub_22368((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        int v145 = operator new(0xFF0uLL);
        sub_224F8((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 169;
        }
        else {
          uint64_t v116 = 170;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - 170 * v6;
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= 170 * v8;
      if (!v8) {
        return;
      }
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          unint64_t v132 = (char *)operator new(8 * v129);
          uint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              uint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            uint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v136 = &v133[v138];
            v121 += v138;
            v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)uint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        uint64_t v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)v118 = v122;
      v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_188D718();
    unint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v144 = -170 * v8;
  int v40 = &v13[8 * (v11 - v8)];
  int v41 = &v13[8 * v12];
  unsigned int v42 = v40;
  int v43 = v13;
  do
  {
    uint64_t v44 = operator new(0xFF0uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      uint64_t v49 = &v40[-8 * (v47 >> 1)];
      int v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        int v50 = v40;
      }
      unsigned int v42 = &v49[v41 - v40];
      int v40 = &v50[-8 * v48];
      int v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_188D718();
    }
    long long v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    unsigned int v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      unsigned int v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        long double v64 = (long long *)(v40 + 16);
        int v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)int v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    int v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    int v40 = &v52[8 * (v51 >> 2)];
    int v43 = v52;
LABEL_49:
    *(void *)unsigned int v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_188D718();
          }
          uint64x2_t v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          int v69 = &v79[8 * (v78 >> 2)];
          unsigned int v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            unsigned int v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              uint64_t v85 = &v79[8 * (v78 >> 2)];
              uint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v85 = &v69[v89];
            uint64_t v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            int v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)int v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)uint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          int v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          int v43 = v80;
          goto LABEL_81;
        }
        long double v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        int v76 = &v40[-8 * (v74 >> 1)];
        uint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          uint64_t v77 = v40;
        }
        unsigned int v42 = &v76[v41 - v40];
        int v69 = &v77[-8 * v75];
        int v43 = v72;
      }
      else
      {
        int v69 = v40;
      }
LABEL_81:
      *(void *)unsigned int v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      int v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  int v69 = v40;
LABEL_75:
  int v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_188D718();
          }
          float64x2_t v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          int v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          unsigned int v42 = v69;
          if (!v29)
          {
            unsigned int v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            uint64_t v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            uint64_t v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v105 = &v69[v109];
            v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)uint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          int v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          int v69 = &v97[8 * (v96 >> 1)];
          float64x2_t v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            float64x2_t v99 = v42;
          }
          unsigned int v42 = &v99[8 * v98];
        }
        int v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  double v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) += v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_48BC0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_48BC58()
{
}

void sub_48BC78(void *a1, const void **a2, long long *__src, unint64_t a4)
{
  unint64_t v6 = a1[5];
  if (v6 < a4)
  {
    if (v6)
    {
      uint64_t v7 = v6 + (((char *)__src - (unsigned char *)*a2) >> 5);
      if (v7 >= 1)
      {
        unint64_t v8 = &a2[(unint64_t)v7 >> 7];
        unint64_t v9 = (long long *)((char *)*v8 + 32 * (v7 & 0x7F));
        unint64_t v10 = a1[4];
        uint64_t v11 = a1[1];
        unint64_t v12 = (char *)(v11 + 8 * (v10 >> 7));
        if (a1[2] == v11) {
          goto LABEL_15;
        }
LABEL_11:
        uint64_t v19 = *(void *)v12 + 32 * (v10 & 0x7F);
LABEL_16:
        int v35 = v12;
        uint64_t v36 = v19;
        sub_48BF1C(a2, __src, v8, v9, (uint64_t)&v35);
        sub_48A5F0(a1, v8, v9, a4 - a1[5]);
        return;
      }
      unint64_t v21 = 127 - v7;
      unint64_t v8 = &a2[-(v21 >> 7)];
      unint64_t v9 = (long long *)((char *)*v8 + 32 * (~(_BYTE)v21 & 0x7F));
      unint64_t v10 = a1[4];
      uint64_t v22 = a1[1];
      unint64_t v12 = (char *)(v22 + 8 * (v10 >> 7));
      if (a1[2] != v22) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v9 = __src;
      unint64_t v8 = a2;
      unint64_t v10 = a1[4];
      uint64_t v18 = a1[1];
      unint64_t v12 = (char *)(v18 + 8 * (v10 >> 7));
      if (a1[2] != v18) {
        goto LABEL_11;
      }
    }
LABEL_15:
    uint64_t v19 = 0;
    goto LABEL_16;
  }
  uint64_t v13 = a1[1];
  long long v14 = (char *)(v13 + 8 * (a1[4] >> 7));
  if (a1[2] == v13)
  {
    uint64_t v15 = 0;
    if (a4) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v20 = __src;
    uint64_t v17 = a2;
    goto LABEL_19;
  }
  uint64_t v15 = *(void *)v14 + 32 * (a1[4] & 0x7FLL);
  if (!a4) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v16 = a4 + (((char *)__src - (unsigned char *)*a2) >> 5);
  if (v16 < 1)
  {
    unint64_t v23 = 127 - v16;
    LOBYTE(v16) = ~(127 - v16);
    uint64_t v17 = &a2[-(v23 >> 7)];
  }
  else
  {
    uint64_t v17 = &a2[(unint64_t)v16 >> 7];
  }
  uint64_t v20 = (long long *)((char *)*v17 + 32 * (v16 & 0x7F));
LABEL_19:
  int v35 = v14;
  uint64_t v36 = v15;
  sub_48BF1C(a2, __src, v17, v20, (uint64_t)&v35);
  uint64_t v24 = a1[4];
  uint64_t v25 = a1[5];
  uint64_t v27 = a1[1];
  uint64_t v26 = a1[2];
  long long v28 = (char *)(v27 + 8 * ((unint64_t)(v24 + v25) >> 7));
  if (v26 == v27)
  {
    uint64_t v29 = 0;
    if (!v36) {
      return;
    }
  }
  else
  {
    uint64_t v29 = *(void *)v28 + 32 * (((_BYTE)v24 + (_BYTE)v25) & 0x7F);
    if (v29 == v36) {
      return;
    }
  }
  uint64_t v30 = ((v29 - *(void *)v28) >> 5) + 16 * (v28 - v35) - ((v36 - *(void *)v35) >> 5);
  if (v30 >= 1)
  {
    uint64_t v31 = v26 == v27 ? 0 : 16 * (v26 - v27) - 1;
    uint64_t v32 = v25 - v30;
    a1[5] = v32;
    if ((unint64_t)(v31 - v24 - v32) >= 0x100)
    {
      do
      {
        operator delete(*(void **)(v26 - 8));
        uint64_t v33 = a1[1];
        uint64_t v26 = a1[2] - 8;
        a1[2] = v26;
        if (v26 == v33) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = 16 * (v26 - v33) - 1;
        }
      }
      while ((unint64_t)(v34 - (a1[5] + a1[4])) > 0xFF);
    }
  }
}

const void **sub_48BF1C(const void **result, unsigned char *__src, const void **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = __src;
  unint64_t v9 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    uint64_t v11 = result;
    unint64_t v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      long long v14 = (char *)*v9++;
      uint64_t v13 = v14;
      while (1)
      {
        uint64_t v15 = (v13 - v8 + 4096) >> 5;
        if ((v12 - v7) >> 5 >= v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = (v12 - v7) >> 5;
        }
        if (v16) {
          __n128 result = (const void **)memmove(v8, v7, 32 * v16);
        }
        v7 += 32 * v16;
        if (v7 == v12) {
          break;
        }
        uint64_t v17 = (char *)*v9++;
        uint64_t v13 = v17;
        unint64_t v8 = v17;
      }
      v8 += 32 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        unint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + 8) = v8;
        uint64_t i = v11 + 1;
        if (v11 + 1 != a3) {
          goto LABEL_16;
        }
LABEL_39:
        uint64_t v33 = *a3;
        if (v33 == a4) {
          goto LABEL_50;
        }
        int v35 = (char *)*v9++;
        uint64_t v34 = v35;
        while (1)
        {
          uint64_t v36 = (v34 - v8 + 4096) >> 5;
          uint64_t v37 = (a4 - v33) >> 5 >= v36 ? v36 : (a4 - v33) >> 5;
          if (v37) {
            __n128 result = (const void **)memmove(v8, v33, 32 * v37);
          }
          v33 += 32 * v37;
          if (v33 == a4) {
            break;
          }
          long long v38 = (char *)*v9++;
          uint64_t v34 = v38;
          unint64_t v8 = v38;
        }
        v8 += 32 * v37;
        uint64_t v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          unint64_t v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(void *)a5 = v9;
    *(void *)(a5 + 8) = v8;
    for (uint64_t i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (char *)*i;
        uint64_t v22 = (char *)*v9++;
        unint64_t v21 = v22;
        while (1)
        {
          uint64_t v23 = (v21 - v8 + 4096) >> 5;
          if ((4096 - 32 * v19) >> 5 >= v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = (4096 - 32 * v19) >> 5;
          }
          if (v24) {
            __n128 result = (const void **)memmove(v8, &v20[32 * v19], 32 * v24);
          }
          v19 += v24;
          if (v19 == 128) {
            break;
          }
          uint64_t v25 = (char *)*v9++;
          unint64_t v21 = v25;
          unint64_t v8 = v25;
        }
        v8 += 32 * v24;
        uint64_t v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8) {
          break;
        }
        unint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + 8) = v8;
        if (++i == a3) {
          goto LABEL_39;
        }
      }
      --v9;
      *(void *)a5 = v26;
      *(void *)(a5 + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    long long v28 = (char *)*v9++;
    uint64_t v27 = v28;
    while (1)
    {
      uint64_t v29 = (v27 - v8 + 4096) >> 5;
      if ((a4 - v7) >> 5 >= v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (a4 - v7) >> 5;
      }
      if (v30) {
        __n128 result = (const void **)memmove(v8, v7, 32 * v30);
      }
      v7 += 32 * v30;
      if (v7 == a4) {
        break;
      }
      uint64_t v31 = (char *)*v9++;
      uint64_t v27 = v31;
      unint64_t v8 = v31;
    }
    v8 += 32 * v30;
    uint64_t v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8) {
      goto LABEL_49;
    }
LABEL_37:
    unint64_t v8 = (char *)*v9;
  }
LABEL_50:
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v8;
  return result;
}

void sub_48C1A0(void *a1, const void **a2, unsigned char *__src, unint64_t a4)
{
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    uint64_t v13 = (void *)(v12 + 8 * (v11 / 0xAA));
    if (a1[2] == v12)
    {
      unint64_t v14 = 0;
      if (a4)
      {
LABEL_7:
        uint64_t v15 = a4 - 0x5555555555555555 * ((__src - (unsigned char *)*a2) >> 3);
        if (v15 < 1)
        {
          unint64_t v23 = 169 - v15;
          uint64_t v16 = &a2[-(v23 / 0xAA)];
          uint64_t v17 = (char *)*v16 + 24 * (170 * (v23 / 0xAA) - v23) + 4056;
        }
        else
        {
          uint64_t v16 = &a2[v15 / 0xAAuLL];
          uint64_t v17 = (char *)*v16 + 24 * (v15 % 0xAAuLL);
        }
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v14 = *v13 + 24 * (v11 % 0xAA);
      if (a4) {
        goto LABEL_7;
      }
    }
    uint64_t v17 = __src;
    uint64_t v16 = a2;
LABEL_18:
    uint64_t v24 = v13;
    unint64_t v25 = v14;
    sub_48C524(a2, __src, v16, v17, (uint64_t)&v24);
    sub_48C3F4(a1, v24, v25);
    return;
  }
  if (v7)
  {
    uint64_t v8 = v7 - 0x5555555555555555 * ((__src - (unsigned char *)*a2) >> 3);
    if (v8 < 1)
    {
      unint64_t v18 = 169 - v8;
      unint64_t v9 = &a2[-(v18 / 0xAA)];
      unint64_t v10 = (long long *)((char *)*v9 + 24 * (170 * (v18 / 0xAA) - v18) + 4056);
    }
    else
    {
      unint64_t v9 = &a2[v8 / 0xAAuLL];
      unint64_t v10 = (long long *)((char *)*v9 + 24 * (v8 % 0xAAuLL));
    }
  }
  else
  {
    unint64_t v10 = (long long *)__src;
    unint64_t v9 = a2;
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  unint64_t v21 = (void *)(v20 + 8 * (v19 / 0xAA));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 24 * (v19 % 0xAA);
  }
  uint64_t v24 = v21;
  unint64_t v25 = v22;
  sub_48C524(a2, __src, v9, v10, (uint64_t)&v24);
  sub_48B0D8(a1, v9, v10, a4 - a1[5]);
}

void sub_48C3F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = (void *)(v7 + 8 * ((v4 + v5) / 0xAAuLL));
  if (v6 == v7)
  {
    unint64_t v9 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    unint64_t v9 = *v8 + 24 * ((v4 + v5) % 0xAAuLL);
    if (v9 == a3) {
      return;
    }
  }
  uint64_t v10 = 170 * (v8 - a2) - 0x5555555555555555 * ((uint64_t)(v9 - *v8) >> 3) + 0x5555555555555555 * ((a3 - *a2) >> 3);
  if (v10 >= 1)
  {
    uint64_t v11 = v6 == v7 ? 0 : 170 * ((v6 - v7) >> 3) - 1;
    uint64_t v12 = v5 - v10;
    a1[5] = v12;
    if ((unint64_t)(v11 - (v12 + v4)) >= 0x154)
    {
      do
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v6 = a1[2] - 8;
        BOOL v13 = v6 == a1[1];
        uint64_t v14 = 170 * ((v6 - a1[1]) >> 3) - 1;
        a1[2] = v6;
        if (v13) {
          uint64_t v14 = 0;
        }
      }
      while ((unint64_t)(v14 - (a1[5] + a1[4])) > 0x153);
    }
  }
}

const void **sub_48C524(const void **result, unsigned char *__src, const void **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v6 = __src;
  uint64_t v8 = *(void ***)a5;
  uint64_t v7 = *(char **)(a5 + 8);
  if (result == a3)
  {
    if (__src == a4) {
      goto LABEL_47;
    }
    uint64_t v31 = (char *)*v8++;
    uint64_t v30 = v31;
    while (1)
    {
      int64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v7 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - v6) >> 3)) >= v32) {
        unint64_t v28 = v32;
      }
      else {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v6) >> 3);
      }
      if (v28) {
        __n128 result = (const void **)memmove(v7, v6, 24 * v28);
      }
      v6 += 24 * v28;
      if (v6 == a4) {
        break;
      }
      uint64_t v33 = (char *)*v8++;
      uint64_t v30 = v33;
      uint64_t v7 = v33;
    }
    goto LABEL_44;
  }
  unint64_t v9 = result;
  uint64_t v10 = (char *)*result + 4080;
  if (v10 == __src) {
    goto LABEL_13;
  }
  uint64_t v12 = (char *)*v8++;
  uint64_t v11 = v12;
  while (1)
  {
    int64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v7 + 4080) >> 3);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3)) >= v13) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3);
    }
    if (v14) {
      __n128 result = (const void **)memmove(v7, v6, 24 * v14);
    }
    v6 += 24 * v14;
    if (v6 == v10) {
      break;
    }
    uint64_t v15 = (char *)*v8++;
    uint64_t v11 = v15;
    uint64_t v7 = v15;
  }
  v7 += 24 * v14;
  if ((char *)*(v8 - 1) + 4080 != v7)
  {
    --v8;
LABEL_13:
    *(void *)a5 = v8;
    *(void *)(a5 + 8) = v7;
    for (uint64_t i = v9 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        uint64_t v17 = 0;
        unint64_t v18 = (char *)*i;
        uint64_t v20 = (char *)*v8++;
        unint64_t v19 = v20;
        while (1)
        {
          int64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v7 + 4080) >> 3);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v17) >> 3)) >= v21) {
            unint64_t v22 = v21;
          }
          else {
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v17) >> 3);
          }
          if (v22) {
            __n128 result = (const void **)memmove(v7, &v18[24 * v17], 24 * v22);
          }
          v17 += v22;
          if (v17 == 170) {
            break;
          }
          unint64_t v23 = (char *)*v8++;
          unint64_t v19 = v23;
          uint64_t v7 = v23;
        }
        v7 += 24 * v22;
        if ((char *)*(v8 - 1) + 4080 != v7) {
          break;
        }
        uint64_t v7 = (char *)*v8;
        *(void *)a5 = v8;
        *(void *)(a5 + 8) = v7;
        if (++i == a3) {
          goto LABEL_26;
        }
      }
      *(void *)a5 = --v8;
      *(void *)(a5 + 8) = v7;
    }
    goto LABEL_26;
  }
  uint64_t v7 = (char *)*v8;
  *(void *)a5 = v8;
  *(void *)(a5 + 8) = v7;
  uint64_t i = v9 + 1;
  if (v9 + 1 != a3) {
    goto LABEL_16;
  }
LABEL_26:
  uint64_t v24 = *a3;
  if (*a3 == a4) {
    goto LABEL_47;
  }
  uint64_t v26 = (char *)*v8++;
  unint64_t v25 = v26;
  while (1)
  {
    int64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v7 + 4080) >> 3);
    unint64_t v28 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - v24) >> 3)) >= v27 ? v27 : 0xAAAAAAAAAAAAAAABLL * ((a4 - v24) >> 3);
    if (v28) {
      __n128 result = (const void **)memmove(v7, v24, 24 * v28);
    }
    v24 += 24 * v28;
    if (v24 == a4) {
      break;
    }
    uint64_t v29 = (char *)*v8++;
    unint64_t v25 = v29;
    uint64_t v7 = v29;
  }
LABEL_44:
  v7 += 24 * v28;
  if ((char *)*(v8 - 1) + 4080 == v7) {
    uint64_t v7 = (char *)*v8;
  }
  else {
    --v8;
  }
LABEL_47:
  *(void *)a5 = v8;
  *(void *)(a5 + 8) = v7;
  return result;
}

char *sub_48C830(char *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 3) >= a4)
  {
    uint64_t v16 = (void **)(result + 8);
    uint64_t v17 = (unsigned char *)*((void *)result + 1);
    if (0x6DB6DB6DB6DB6DB7 * ((v17 - v9) >> 3) >= a4)
    {
      uint64_t v25 = *(void *)result;
      if (a2 != a3)
      {
        uint64_t v26 = *(void *)result;
        do
        {
          *(unsigned char *)uint64_t v26 = *v6;
          *(_OWORD *)(v26 + 8) = *(_OWORD *)(v6 + 8);
          long long v27 = *(_OWORD *)(v6 + 24);
          *(_OWORD *)(v26 + 40) = *(_OWORD *)(v6 + 40);
          *(_OWORD *)(v26 + 24) = v27;
          v25 += 56;
          v6 += 56;
          v26 += 56;
        }
        while (v6 != a3);
      }
      uint64_t v15 = v25 - (void)v9;
    }
    else
    {
      unint64_t v18 = &a2[8 * ((v17 - v9) >> 3)];
      if (v17 != v9)
      {
        do
        {
          *unint64_t v9 = *v6;
          *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 8);
          long long v19 = *(_OWORD *)(v6 + 24);
          *(_OWORD *)(v9 + 40) = *(_OWORD *)(v6 + 40);
          *(_OWORD *)(v9 + 24) = v19;
          v6 += 56;
          v9 += 56;
        }
        while (v6 != v18);
        unint64_t v9 = (char *)*v16;
      }
      uint64_t v20 = v9;
      if (v18 != a3)
      {
        uint64_t v20 = v9;
        int64_t v21 = v9;
        do
        {
          long long v22 = *(_OWORD *)v18;
          long long v23 = *((_OWORD *)v18 + 1);
          long long v24 = *((_OWORD *)v18 + 2);
          *((void *)v21 + 6) = *((void *)v18 + 6);
          *((_OWORD *)v21 + 1) = v23;
          *((_OWORD *)v21 + 2) = v24;
          *(_OWORD *)int64_t v21 = v22;
          v21 += 56;
          v18 += 56;
          v20 += 56;
        }
        while (v18 != a3);
      }
      uint64_t v15 = v20 - v9;
    }
  }
  else
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_27;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492) {
LABEL_27:
    }
      sub_2E00();
    uint64_t v13 = 56 * v12;
    __n128 result = (char *)operator new(56 * v12);
    unint64_t v9 = result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    unint64_t v14 = result;
    if (v6 != a3)
    {
      __n128 result = (char *)memcpy(result, v6, 56 * ((a3 - v6 - 56) / 0x38uLL) + 56);
      unint64_t v14 = &v9[56 * ((a3 - v6 - 56) / 0x38uLL) + 56];
    }
    uint64_t v15 = v14 - v9;
    uint64_t v16 = (void **)(v7 + 1);
  }
  *uint64_t v16 = &v9[v15];
  return result;
}

uint64_t sub_48CA88(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_48CB50(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_48CC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == a2) {
    return;
  }
  do
  {
    *(void *)(a1 + 16) = v2 - 128;
    unint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void *)(v2 - 56);
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 - 48);
      uint64_t v8 = *(void **)(v2 - 56);
      if (v7 == v6)
      {
LABEL_30:
        *(void *)(v2 - 48) = v6;
        operator delete(v8);
        goto LABEL_31;
      }
      while (1)
      {
        uint64_t v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(void *)(v7 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v10 = *(void *)(v7 - 64);
        if (v10)
        {
          uint64_t v11 = *(void *)(v7 - 56);
          unint64_t v12 = *(void **)(v7 - 64);
          if (v11 != v10)
          {
            do
            {
              uint64_t v13 = *(void **)(v11 - 48);
              if (v13)
              {
                *(void *)(v11 - 40) = v13;
                operator delete(v13);
              }
              if (*(char *)(v11 - 57) < 0) {
                operator delete(*(void **)(v11 - 80));
              }
              v11 -= 80;
            }
            while (v11 != v10);
            unint64_t v12 = *(void **)(v7 - 64);
          }
          *(void *)(v7 - 56) = v10;
          operator delete(v12);
        }
        if (*(char *)(v7 - 65) < 0) {
          break;
        }
        unint64_t v14 = *(void **)(v7 - 112);
        if (v14) {
          goto LABEL_24;
        }
LABEL_25:
        uint64_t v15 = *(void **)(v7 - 136);
        if (v15)
        {
          *(void *)(v7 - 128) = v15;
          operator delete(v15);
        }
        v7 -= 144;
        if (v7 == v6)
        {
          uint64_t v8 = *(void **)(v2 - 56);
          goto LABEL_30;
        }
      }
      operator delete(*(void **)(v7 - 88));
      unint64_t v14 = *(void **)(v7 - 112);
      if (!v14) {
        goto LABEL_25;
      }
LABEL_24:
      *(void *)(v7 - 104) = v14;
      operator delete(v14);
      goto LABEL_25;
    }
LABEL_31:
    uint64_t v16 = *(void **)(v2 - 104);
    if (v16)
    {
      *(void *)(v2 - 96) = v16;
      operator delete(v16);
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  while (v2 != a2);
}

char *sub_48CD78(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1->i64[1] - a1->i64[0]) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    sub_2E00();
  }
  uint64_t v5 = a1[1].i64[0] - a1->i64[0];
  if (v5 >> 6 > v4) {
    unint64_t v4 = v5 >> 6;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFF80;
  unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  uint64_t v26 = a1 + 1;
  if (v7 >> 57) {
    sub_188D718();
  }
  unint64_t v9 = v7 << 7;
  uint64_t v10 = (char *)operator new(v7 << 7);
  uint64_t v11 = &v10[128 * v3];
  __p = v10;
  v24.i64[0] = (uint64_t)v11;
  v24.i64[1] = (uint64_t)v11;
  uint64_t v25 = &v10[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v11 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((_DWORD *)v11 + 24) = *(_DWORD *)(a2 + 96);
  *((void *)v11 + 14) = 0;
  *((void *)v11 + 15) = 0;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  *((void *)v11 + 15) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  unint64_t v12 = v11 + 128;
  uint64_t v14 = a1->i64[0];
  unint64_t v13 = a1->u64[1];
  if (v13 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v13);
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = &v11[v15];
      uint64_t v17 = v13 + v15;
      long long v18 = *(_OWORD *)(v13 + v15 - 128);
      *((_DWORD *)v16 - 28) = *(_DWORD *)(v13 + v15 - 112);
      *((void *)v16 - 12) = 0;
      *((void *)v16 - 11) = 0;
      *((void *)v16 - 13) = 0;
      *((_OWORD *)v16 - 8) = v18;
      *(_OWORD *)(v16 - 104) = *(_OWORD *)(v13 + v15 - 104);
      *((void *)v16 - 11) = *(void *)(v13 + v15 - 88);
      *(void *)(v17 - 104) = 0;
      *(void *)(v17 - 96) = 0;
      *(void *)(v17 - 88) = 0;
      uint64_t v19 = *(void *)(v13 + v15 - 64);
      *((_OWORD *)v16 - 5) = *(_OWORD *)(v13 + v15 - 80);
      *((void *)v16 - 8) = v19;
      *((void *)v16 - 7) = 0;
      *((void *)v16 - 6) = 0;
      *((void *)v16 - 5) = 0;
      *(_OWORD *)(v16 - 56) = *(_OWORD *)(v13 + v15 - 56);
      *((void *)v16 - 5) = *(void *)(v13 + v15 - 40);
      *(void *)(v17 - 48) = 0;
      *(void *)(v17 - 40) = 0;
      *(void *)(v17 - 56) = 0;
      LODWORD(v19) = *(_DWORD *)(v13 + v15 - 32);
      *((void *)v16 - 2) = 0;
      *((void *)v16 - 1) = 0;
      *((_DWORD *)v16 - 8) = v19;
      *((void *)v16 - 3) = 0;
      *(_OWORD *)(v16 - 24) = *(_OWORD *)(v13 + v15 - 24);
      *((void *)v16 - 1) = *(void *)(v13 + v15 - 8);
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 8) = 0;
      v15 -= 128;
    }
    while (v13 + v15 != v14);
    int64x2_t v20 = *a1;
    v11 += v15;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v12;
  int64x2_t v24 = v20;
  int64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v10[v9];
  uint64_t v25 = v21;
  __p = (void *)v20.i64[0];
  sub_48CC18((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

uint64_t sub_48CF88(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  BOOL v6 = (void *)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 24);
  unint64_t v7 = (void *)a2 + 3;
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *BOOL v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  long long v8 = a2[3];
  unint64_t v9 = (void **)(a1 + 72);
  uint64_t v10 = *(void **)(a1 + 72);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v8;
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 80);
    unint64_t v12 = v10;
    if ((void *)v11 != v10)
    {
      do
        uint64_t v11 = sub_489CF4(v11 - 144);
      while ((void *)v11 != v10);
      unint64_t v12 = *v9;
    }
    *(void *)(a1 + 80) = v10;
    operator delete(v12);
    *unint64_t v9 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  unint64_t v13 = *(void **)(a1 + 104);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  if (v13)
  {
    *(void *)(a1 + 112) = v13;
    operator delete(v13);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  return a1;
}

uint64_t sub_48D0B4(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - *a1) >> 4) >= __sz)
  {
    uint64_t result = a1[1];
    if (0x8E38E38E38E38E39 * ((result - v9) >> 4) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_48D35C(v9, v6);
          v6 += 144;
          v9 += 144;
          v23 += 144;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_489CF4(result - 144);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_48D35C(v9, v6);
          v6 += 144;
          v9 += 144;
          v20 -= 144;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_48990C(v9 + v22, (uint64_t *)(v19 + v22));
          v22 += 144;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_489CF4(v10 - 144);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1C71C71C71C71C7) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= __sz) {
      uint64_t v13 = __sz;
    }
    unint64_t v14 = v12 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v13;
    if (v14 > 0x1C71C71C71C71C7) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 144 * v14;
    uint64_t result = (uint64_t)operator new(144 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_48990C(v17 + v18, (uint64_t *)(v6 + v18));
        v18 += 144;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_48D35C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else
  {
    sub_326C0((void *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_48D428((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    sub_48D578((void **)(a1 + 80), *(std::string **)(a2 + 80), *(std::string **)(a2 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    sub_47257C((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 5);
  }
  return a1;
}

void *sub_48D428(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(32 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 6);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 6;
    uint64_t v20 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 6);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 6;
    uint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_48D578(void **a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = (std::string *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) < __sz)
  {
    if (v10)
    {
      BOOL v11 = (std::string *)a1[1];
      unint64_t v12 = *a1;
      if (v11 != v10)
      {
        do
        {
          std::string::pointer data = v11[-2].__r_.__value_.__l.__data_;
          if (data)
          {
            v11[-2].__r_.__value_.__l.__size_ = (std::string::size_type)data;
            operator delete(data);
          }
          if (v11[-3].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v11[-4].__r_.__value_.__r.__words[2]);
          }
          BOOL v11 = (std::string *)((char *)v11 - 80);
        }
        while (v11 != v10);
        unint64_t v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333) {
      goto LABEL_50;
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x199999999999999 ? 0x333333333333333 : v21;
    if (v22 > 0x333333333333333) {
LABEL_50:
    }
      sub_2E00();
    uint64_t v23 = 80 * v22;
    int64x2_t v24 = (char *)operator new(80 * v22);
    *a1 = v24;
    a1[1] = v24;
    a1[2] = &v24[v23];
    if (v6 != a3)
    {
      uint64_t v25 = 0;
      do
      {
        sub_3A8F44(v9, &v24[v25], (long long *)((char *)v6 + v25));
        v25 += 80;
      }
      while ((std::string *)((char *)v6 + v25) != a3);
      v24 += v25;
    }
    a1[1] = v24;
    return;
  }
  uint64_t v14 = (std::string *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v14 - (char *)v10) >> 4) < __sz)
  {
    uint64_t v15 = (std::string *)((char *)__str + 16 * (((char *)v14 - (char *)v10) >> 4));
    if (v14 == v10)
    {
      uint64_t v16 = (char *)*a1;
      if (v15 == a3)
      {
LABEL_40:
        a1[1] = v16;
        return;
      }
    }
    else
    {
      do
      {
        std::string::operator=(v10, v6);
        LODWORD(v10[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
        if (v10 != v6) {
          sub_48D8C8(&v10[1].__r_.__value_.__l.__size_, (char *)v6[1].__r_.__value_.__l.__size_, (char *)v6[1].__r_.__value_.__r.__words[2], v6[1].__r_.__value_.__r.__words[2] - v6[1].__r_.__value_.__l.__size_);
        }
        long long v17 = *(_OWORD *)&v6[2].__r_.__value_.__r.__words[1];
        v10[3].__r_.__value_.__r.__words[0] = v6[3].__r_.__value_.__r.__words[0];
        *(_OWORD *)&v10[2].__r_.__value_.__r.__words[1] = v17;
        uint64_t v6 = (std::string *)((char *)v6 + 80);
        uint64_t v10 = (std::string *)((char *)v10 + 80);
      }
      while (v6 != v15);
      uint64_t v10 = (std::string *)a1[1];
      uint64_t v16 = (char *)v10;
      if (v15 == a3) {
        goto LABEL_40;
      }
    }
    uint64_t v26 = 0;
    do
    {
      sub_3A8F44(v9, (char *)v10 + v26, (long long *)((char *)v15 + v26));
      v26 += 80;
    }
    while ((std::string *)((char *)v15 + v26) != a3);
    uint64_t v16 = (char *)v10 + v26;
    goto LABEL_40;
  }
  if (__str == a3)
  {
    uint64_t v18 = (std::string *)*a1;
  }
  else
  {
    uint64_t v18 = (std::string *)*a1;
    do
    {
      std::string::operator=(v10, v6);
      LODWORD(v10[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
      if (v10 != v6) {
        sub_48D8C8(&v10[1].__r_.__value_.__l.__size_, (char *)v6[1].__r_.__value_.__l.__size_, (char *)v6[1].__r_.__value_.__r.__words[2], v6[1].__r_.__value_.__r.__words[2] - v6[1].__r_.__value_.__l.__size_);
      }
      long long v19 = *(_OWORD *)&v6[2].__r_.__value_.__r.__words[1];
      v10[3].__r_.__value_.__r.__words[0] = v6[3].__r_.__value_.__r.__words[0];
      *(_OWORD *)&v10[2].__r_.__value_.__r.__words[1] = v19;
      uint64_t v18 = (std::string *)((char *)v18 + 80);
      uint64_t v6 = (std::string *)((char *)v6 + 80);
      uint64_t v10 = (std::string *)((char *)v10 + 80);
    }
    while (v6 != a3);
    uint64_t v14 = (std::string *)a1[1];
  }
  while (v14 != v18)
  {
    std::string::pointer v27 = v14[-2].__r_.__value_.__l.__data_;
    if (v27)
    {
      v14[-2].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      operator delete(v27);
    }
    if (v14[-3].__r_.__value_.__s.__data_[15] < 0) {
      operator delete((void *)v14[-4].__r_.__value_.__r.__words[2]);
    }
    uint64_t v14 = (std::string *)((char *)v14 - 80);
  }
  a1[1] = v18;
}

void sub_48D888(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20A8CA8(v3 + v2, v3);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void *sub_48D8C8(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v7 = result;
  unint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      sub_2E00();
    uint64_t result = operator new(v11);
    int v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    uint64_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12 - 1);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  uint64_t v13 = (unsigned char *)result[1];
  uint64_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    uint64_t v12 = a3 - __src;
    if (a3 != __src) {
      uint64_t result = memmove((void *)*result, __src, v12 - 1);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - 1);
    int v9 = (char *)v7[1];
  }
  uint64_t v16 = a3 - v15;
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, v16 - 1);
  }
  v7[1] = &v9[v16];
  return result;
}

char *sub_48DA18(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 72;
  unint64_t v8 = &(*a1)[72 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v15 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x1C71C71C71C71C7) {
      unint64_t v17 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v39 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(72 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v35 = v18;
    uint64_t v36 = &v18[72 * v7];
    uint64_t v37 = v36;
    long long v38 = &v18[72 * v17];
    sub_48DF30((uint64_t)&v35, a3);
    uint64_t v21 = v36;
    unint64_t v22 = *a1;
    uint64_t v23 = v36;
    if (*a1 != v8)
    {
      uint64_t v23 = v36;
      int64x2_t v24 = v8;
      do
      {
        *((void *)v23 - 9) = 0;
        *((void *)v23 - 8) = 0;
        v23 -= 72;
        *((void *)v23 + 2) = 0;
        long long v25 = *(_OWORD *)(v24 - 72);
        v24 -= 72;
        *(_OWORD *)uint64_t v23 = v25;
        *((void *)v23 + 2) = *((void *)v24 + 2);
        *(void *)int64x2_t v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        *((void *)v23 + 3) = 0;
        *((void *)v23 + 4) = 0;
        *((void *)v23 + 5) = 0;
        *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
        *((void *)v23 + 5) = *((void *)v24 + 5);
        *((void *)v24 + 3) = 0;
        *((void *)v24 + 4) = 0;
        *((void *)v24 + 5) = 0;
        long long v26 = *((_OWORD *)v24 + 3);
        *((void *)v23 + 8) = *((void *)v24 + 8);
        *((_OWORD *)v23 + 3) = v26;
        *((void *)v24 + 7) = 0;
        *((void *)v24 + 8) = 0;
        *((void *)v24 + 6) = 0;
      }
      while (v24 != v22);
    }
    uint64_t v36 = v23;
    std::string::pointer v27 = a1[1];
    unint64_t v28 = v37;
    if (v27 != v8)
    {
      do
      {
        *(void *)unint64_t v28 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *(_OWORD *)unint64_t v28 = *(_OWORD *)v8;
        *((void *)v28 + 2) = *((void *)v8 + 2);
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *((void *)v28 + 3) = 0;
        *((void *)v28 + 4) = 0;
        *((void *)v28 + 5) = 0;
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v8 + 24);
        *((void *)v28 + 5) = *((void *)v8 + 5);
        *((void *)v8 + 3) = 0;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        long long v29 = *((_OWORD *)v8 + 3);
        *((void *)v28 + 8) = *((void *)v8 + 8);
        *((_OWORD *)v28 + 3) = v29;
        *((void *)v8 + 7) = 0;
        *((void *)v8 + 8) = 0;
        *((void *)v8 + 6) = 0;
        v28 += 72;
        v8 += 72;
      }
      while (v8 != v27);
      uint64_t v23 = v36;
      unint64_t v8 = a1[1];
    }
    uint64_t v30 = *a1;
    *a1 = v23;
    a1[1] = v28;
    uint64_t v31 = a1[2];
    a1[2] = v38;
    uint64_t v37 = v8;
    long long v38 = v31;
    int v35 = v30;
    uint64_t v36 = v30;
    if (v8 != v30)
    {
      do
      {
        uint64_t v37 = v8 - 72;
        sub_3A688C((uint64_t)v39, (char **)v8 - 9);
        unint64_t v8 = v37;
      }
      while (v37 != v30);
      unint64_t v8 = v35;
    }
    if (v8) {
      operator delete(v8);
    }
    return v21;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      uint64_t v10 = v8 + 72;
      size_t v11 = (char **)(v6 - 72);
      if (v6 < 0x48)
      {
        a1[1] = (char *)v6;
        if ((void *)v6 == v10)
        {
LABEL_34:
          sub_48DE24((char **)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 72;
        uint64_t v13 = a1[1];
        do
        {
          *(void *)uint64_t v13 = 0;
          *((void *)v13 + 1) = 0;
          *((void *)v13 + 2) = 0;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
          *((void *)v13 + 2) = *(void *)(v12 + 16);
          *(void *)unint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *((void *)v13 + 3) = 0;
          *((void *)v13 + 4) = 0;
          *((void *)v13 + 5) = 0;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)(v12 + 24);
          *((void *)v13 + 5) = *(void *)(v12 + 40);
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          long long v14 = *(_OWORD *)(v12 + 48);
          *((void *)v13 + 8) = *(void *)(v12 + 64);
          *((_OWORD *)v13 + 3) = v14;
          *(void *)(v12 + 56) = 0;
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 48) = 0;
          v13 += 72;
          v12 += 72;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((void *)v6 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v32 = 8 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v33 = (uint64_t)&v5[72 * v7 - 72];
      do
      {
        sub_48DE24(v11, v33 + v32);
        v11 -= 9;
        v32 -= 72;
      }
      while (v32);
      goto LABEL_34;
    }
    *(void *)unint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v19 = &v5[72 * v7];
    *((void *)v19 + 3) = 0;
    *((void *)v19 + 4) = 0;
    *((void *)v19 + 5) = 0;
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)v19 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v20 = *(_OWORD *)(a3 + 48);
    *((void *)v19 + 8) = *(void *)(a3 + 64);
    *((_OWORD *)v19 + 3) = v20;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 48) = 0;
    a1[1] = v8 + 72;
  }
  return v8;
}

void sub_48DE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_48E190((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_48DE24(char **a1, uint64_t a2)
{
  long long v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    unint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 6);
        if (v7)
        {
          *((void *)v5 - 5) = v7;
          operator delete(v7);
        }
        if (*(v5 - 57) < 0) {
          operator delete(*((void **)v5 - 10));
        }
        v5 -= 80;
      }
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v8 = a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  unint64_t v9 = (void **)(a1 + 6);
  if (*((char *)a1 + 71) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 48);
  a1[8] = *(char **)(a2 + 64);
  *(_OWORD *)unint64_t v9 = v10;
  *(unsigned char *)(a2 + 71) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return a1;
}

__n128 sub_48DF30(uint64_t a1, uint64_t a2)
{
  long long v4 = *(__n128 **)(a1 + 16);
  if (v4 != *(__n128 **)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(__n128 **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x1C71C71C71C71C72 * (((char *)v4 - (char *)v6) >> 3);
    if (v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x38E38E38E38E38FLL) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 72 * v12;
    unint64_t v16 = (char *)operator new(72 * v12);
    unint64_t v17 = &v16[72 * v14];
    uint64_t v18 = &v16[v15];
    if (v4 == (__n128 *)v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      long long v19 = (char *)v4 + (void)v17 - v5;
      uint64_t v20 = 72 * v14;
      do
      {
        uint64_t v21 = &v16[v20];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v5;
        *((void *)v21 + 2) = *(void *)(v5 + 16);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)(v5 + 24);
        *((void *)v21 + 5) = *(void *)(v5 + 40);
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        long long v22 = *(_OWORD *)(v5 + 48);
        *((void *)v21 + 8) = *(void *)(v5 + 64);
        *((_OWORD *)v21 + 3) = v22;
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 48) = 0;
        v20 += 72;
        v5 += 72;
      }
      while (v21 + 72 != v19);
      unint64_t v6 = *(__n128 **)a1;
      uint64_t v23 = *(char ***)(a1 + 8);
      int64x2_t v24 = *(char ***)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v18;
      while (v24 != v23)
      {
        v24 -= 9;
        sub_3A688C(v13, v24);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    long long v4 = *(__n128 **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((__n128 *)v5 == v4)
  {
    size_t v11 = (__n128 *)(v5 - 72 * v9);
  }
  else
  {
    do
    {
      sub_48DE24((char **)(v5 + 72 * v10), v5);
      v5 += 72;
    }
    while ((__n128 *)v5 != v4);
    long long v4 = *(__n128 **)(a1 + 8);
    size_t v11 = (__n128 *)(v5 + 72 * v10);
  }
  *(void *)(a1 + 8) = (char *)v4 + 72 * v10;
  *(void *)(a1 + 16) = v11;
  long long v4 = v11;
LABEL_22:
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  *long long v4 = *(__n128 *)a2;
  v4[1].n128_u64[0] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4[1].n128_u64[1] = 0;
  v4[2].n128_u64[0] = 0;
  v4[2].n128_u64[1] = 0;
  *(__n128 *)((char *)v4 + 24) = *(__n128 *)(a2 + 24);
  v4[2].n128_u64[1] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  __n128 result = *(__n128 *)(a2 + 48);
  v4[4].n128_u64[0] = *(void *)(a2 + 64);
  v4[3] = result;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 16) += 72;
  return result;
}

uint64_t sub_48E190(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 72;
    sub_3A688C(v4, (char **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_48E1E8(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  int64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    __n128 result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 4);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 4;
    uint64_t v20 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 4;
    uint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void *sub_48E338(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  int64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    __n128 result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 7);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 7;
    uint64_t v20 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 7);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 7;
    uint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_48E488(uint64_t a1)
{
  uint64_t v3 = *(char **)(a1 + 8);
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 16 * (v2 - v3) - 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)(v4 - (*(void *)(a1 + 40) + v5)) >= 0x80)
  {
    *(void *)(a1 + 32) = v5 + 128;
    uint64_t v47 = (void *)*((void *)v2 - 1);
    *(void *)(a1 + 16) = v2 - 8;
    sub_224F8((void **)a1, &v47);
    return;
  }
  unint64_t v6 = *(char **)(a1 + 24);
  int64_t v7 = *(char **)a1;
  uint64_t v8 = (uint64_t)&v6[-*(void *)a1];
  if (v2 - v3 < (unint64_t)v8)
  {
    if (v3 == v7)
    {
      uint64_t v47 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v47);
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v47 = *(void **)(v17 - 8);
      *(void *)(a1 + 16) = v17 - 8;
      sub_224F8((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v47 = operator new(0x1000uLL);
      sub_224F8((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v9 = 64;
LABEL_19:
        *(void *)(a1 + 32) = v9;
        return;
      }
    }
    uint64_t v9 = *(void *)(a1 + 32) + 128;
    goto LABEL_19;
  }
  if (v6 == v7) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v8 >> 2;
  }
  if (v10 >> 61) {
    sub_188D718();
  }
  BOOL v11 = (char *)operator new(8 * v10);
  unint64_t v12 = operator new(0x1000uLL);
  uint64_t v13 = v12;
  if (v10)
  {
    uint64_t v14 = &v11[8 * v10];
    *(void *)BOOL v11 = v12;
    uint64_t v15 = v11 + 8;
    unint64_t v16 = v11;
    if (v3 != v2) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  uint64_t v18 = (char *)operator new(8uLL);
  uint64_t v14 = v18 + 8;
  operator delete(v11);
  uint64_t v3 = *(char **)(a1 + 8);
  size_t v19 = *(char **)(a1 + 16);
  BOOL v11 = v18;
  *(void *)uint64_t v18 = v13;
  uint64_t v15 = v18 + 8;
  unint64_t v16 = v18;
  if (v3 != v19)
  {
    while (1)
    {
LABEL_29:
      if (v15 == v14)
      {
        if (v11 <= v16)
        {
          if (v15 == v16) {
            unint64_t v31 = 1;
          }
          else {
            unint64_t v31 = (v15 - v16) >> 2;
          }
          if (v31 >> 61) {
            sub_188D718();
          }
          uint64_t v32 = (char *)operator new(8 * v31);
          uint64_t v33 = v32;
          unint64_t v34 = v31 >> 2;
          uint64_t v20 = &v32[8 * (v31 >> 2)];
          uint64_t v23 = v20;
          int64_t v35 = v15 - v11;
          if (v15 != v11)
          {
            uint64_t v23 = &v20[v35 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v36 = v35 - 8;
            if (v36 < 0x38 || (uint64_t v37 = 8 * v34, (unint64_t)(&v32[8 * v34] - v11) < 0x20))
            {
              long long v38 = &v32[8 * (v31 >> 2)];
              uint64_t v39 = v11;
              goto LABEL_45;
            }
            uint64_t v41 = (v36 >> 3) + 1;
            uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            long long v38 = &v20[v42];
            uint64_t v39 = &v11[v42];
            int v43 = (long long *)(v11 + 16);
            uint64_t v44 = &v32[v37 + 16];
            uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v46 = *v43;
              *((_OWORD *)v44 - 1) = *(v43 - 1);
              *(_OWORD *)uint64_t v44 = v46;
              v43 += 2;
              v44 += 32;
              v45 -= 4;
            }
            while (v45);
            if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_45:
                uint64_t v40 = *(void *)v39;
                v39 += 8;
                *(void *)long long v38 = v40;
                v38 += 8;
              }
              while (v38 != v23);
            }
          }
          uint64_t v15 = &v32[8 * v31];
          if (v16) {
            operator delete(v16);
          }
          unint64_t v16 = v33;
          goto LABEL_28;
        }
        uint64_t v25 = (v11 - v16) >> 3;
        if (v25 >= -1) {
          uint64_t v26 = v25 + 1;
        }
        else {
          uint64_t v26 = v25 + 2;
        }
        uint64_t v27 = v26 >> 1;
        unint64_t v28 = &v11[-8 * (v26 >> 1)];
        long long v29 = v15;
        if (v15 != v11)
        {
          memmove(v28, v11, v15 - v11);
          long long v29 = v11;
        }
        uint64_t v30 = -v27;
        uint64_t v23 = &v28[v15 - v11];
        uint64_t v20 = &v29[8 * v30];
      }
      else
      {
        uint64_t v20 = v11;
        uint64_t v23 = v15;
        uint64_t v15 = v14;
      }
LABEL_28:
      uint64_t v14 = v15;
      uint64_t v24 = *(void *)v3;
      v3 += 8;
      *(void *)uint64_t v23 = v24;
      uint64_t v21 = v23 + 8;
      uint64_t v15 = v21;
      BOOL v11 = v20;
      if (v3 == *(char **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  uint64_t v20 = v11;
  uint64_t v21 = v15;
LABEL_22:
  long long v22 = *(void **)a1;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v14;
  if (v21 - v20 == 8)
  {
    *(void *)(a1 + 32) = 64;
    if (!v22) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 128;
    if (!v22) {
      return;
    }
  }

  operator delete(v22);
}

void sub_48E810(_Unwind_Exception *a1)
{
  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_48E84C(char **a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  size_t v19 = &v7[80 * v3];
  uint64_t v20 = &v7[80 * v6];
  sub_48EA48(a1 + 16, v19, a2);
  uint64_t v8 = v19 + 80;
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = v20;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = &v19[v11];
      uint64_t v13 = &v10[v11];
      long long v14 = *(_OWORD *)&v10[v11 - 80];
      *((void *)v12 - 8) = *(void *)&v10[v11 - 64];
      *((_OWORD *)v12 - 5) = v14;
      *((void *)v13 - 9) = 0;
      *((void *)v13 - 8) = 0;
      *((void *)v13 - 10) = 0;
      *((_DWORD *)v12 - 14) = *(_DWORD *)&v10[v11 - 56];
      *((void *)v12 - 5) = 0;
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 6) = 0;
      *((_OWORD *)v12 - 3) = *(_OWORD *)&v10[v11 - 48];
      *((void *)v12 - 4) = *(void *)&v10[v11 - 32];
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      long long v15 = *(_OWORD *)&v10[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v10[v11 - 8];
      *(_OWORD *)(v12 - 24) = v15;
      v11 -= 80;
    }
    while (&v10[v11] != v9);
    unint64_t v16 = *a1;
    unint64_t v10 = a1[1];
    *a1 = &v19[v11];
    a1[1] = v8;
    a1[2] = v20;
    if (v10 != v16)
    {
      do
      {
        uint64_t v17 = (void *)*((void *)v10 - 6);
        if (v17)
        {
          *((void *)v10 - 5) = v17;
          operator delete(v17);
        }
        if (*(v10 - 57) < 0) {
          operator delete(*((void **)v10 - 10));
        }
        v10 -= 80;
      }
      while (v10 != v16);
      unint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 80;
}

void sub_48EA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A9028((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_48EA48(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  int v6 = *((_DWORD *)a3 + 6);
  *((void *)__dst + 4) = 0;
  *((_DWORD *)__dst + 6) = v6;
  *((void *)__dst + 5) = 0;
  *((void *)__dst + 6) = 0;
  uint64_t v8 = (unsigned char *)*((void *)a3 + 4);
  int64_t v7 = (unsigned char *)*((void *)a3 + 5);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    *((void *)__dst + 4) = v10;
    *((void *)__dst + 5) = v10;
    uint64_t v11 = &v10[v9];
    *((void *)__dst + 6) = &v10[v9];
    memcpy(v10, v8, v9 - 1);
    *((void *)__dst + 5) = v11;
  }
  __n128 result = *(__n128 *)((char *)a3 + 56);
  *((void *)__dst + 9) = *((void *)a3 + 9);
  *(__n128 *)(__dst + 56) = result;
  return result;
}

void sub_48EB08(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_48EB2C(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *(_DWORD **)(*a1 + 40);
  if (v4 && (uint64_t v5 = *(int *)(v3 + 32), (int)v5 < *v4))
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    uint64_t v6 = *(void *)&v4[2 * v5 + 2];
  }
  else
  {
    uint64_t v7 = v3 + 24;
    sub_10F94B8(*(void *)(v3 + 24));
    uint64_t v6 = sub_188CDC8(v7, v8);
  }
  int v9 = sub_4F44((unsigned int *)a2);
  *(_DWORD *)(v6 + 16) |= 2u;
  *(_DWORD *)(v6 + 144) = v9;
  int v10 = sub_491B10(a2);
  int v11 = sub_E150CC(v10);
  *(_DWORD *)(v6 + 16) |= 4u;
  *(_DWORD *)(v6 + 148) = v11;
  int v12 = sub_491B18(a2);
  int v13 = sub_DBFB20(v12);
  *(_DWORD *)(v6 + 16) |= 0x1000u;
  *(_DWORD *)(v6 + 176) = v13;
  int v14 = sub_491B20(a2);
  int v15 = sub_DBFB20(v14);
  *(_DWORD *)(v6 + 16) |= 0x2000u;
  *(_DWORD *)(v6 + 180) = v15;
  char v16 = sub_40A44C(a2);
  *(_DWORD *)(v6 + 16) |= 0x40u;
  *(unsigned char *)(v6 + 161) = v16 & 1;
  char v17 = sub_40A44C(a2);
  *(_DWORD *)(v6 + 16) |= 0x80u;
  *(unsigned char *)(v6 + 162) = (v17 & 2) != 0;
  char v18 = sub_40A44C(a2);
  *(_DWORD *)(v6 + 16) |= 0x100u;
  *(unsigned char *)(v6 + 163) = (v18 & 4) != 0;
  char v19 = sub_40A44C(a2);
  *(_DWORD *)(v6 + 16) |= 0x200u;
  *(unsigned char *)(v6 + 164) = (v19 & 8) != 0;
  int v20 = sub_40AB24(a2);
  if (v20 < 0) {
    char v21 = -5;
  }
  else {
    char v21 = 5;
  }
  *(_DWORD *)(v6 + 16) |= 0x400u;
  *(_DWORD *)(v6 + 168) = v20 / 10
                        + (((103 * (char)(v21 + v20 % 10)) >> 15) & 1)
                        + ((103 * (char)(v21 + v20 % 10)) >> 10);
  if (sub_491B28(a2) != 0x7FFFFFFF)
  {
    int v22 = sub_491B28(a2);
    if (v22 < 0) {
      int v23 = 65036;
    }
    else {
      int v23 = 500;
    }
    unsigned int v24 = v23 + v22 % 1000 + ((-31981 * (__int16)(v23 + v22 % 1000)) >> 16);
    *(_DWORD *)(v6 + 16) |= 0x800u;
    *(_DWORD *)(v6 + 172) = v22 / 1000 + ((__int16)v24 >> 9) + ((unsigned __int16)(v24 & 0x8000) >> 15);
  }
  uint64_t v25 = (uint64_t *)sub_68EAC(a2);
  uint64_t v27 = *v25;
  uint64_t v28 = v25[1];
  if (*v25 != v28)
  {
    do
    {
      uint64_t v32 = *(_DWORD **)(v6 + 128);
      if (v32 && (uint64_t v33 = *(int *)(v6 + 120), (int)v33 < *v32))
      {
        *(_DWORD *)(v6 + 120) = v33 + 1;
        uint64_t v34 = *(void *)&v32[2 * v33 + 2];
        *(_DWORD *)(v34 + 16) |= 1u;
        long long v29 = *(void **)(v34 + 24);
        if (!v29) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v35 = sub_13D9CE0(*(void *)(v6 + 112));
        uint64_t v34 = sub_188CDC8(v6 + 112, v35);
        *(_DWORD *)(v34 + 16) |= 1u;
        long long v29 = *(void **)(v34 + 24);
        if (!v29)
        {
LABEL_22:
          uint64_t v36 = *(void *)(v34 + 8);
          uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if (v36) {
            uint64_t v37 = (void *)*v37;
          }
          long long v29 = sub_13D9C64((uint64_t)v37);
          *(void *)(v34 + 24) = v29;
        }
      }
      uint64_t v30 = nullsub_1(*(void *)v27);
      *((_DWORD *)v29 + 4) |= 1u;
      v29[3] = v30;
      int v31 = sub_E15F90(*(unsigned __int8 *)(v27 + 8));
      *(_DWORD *)(v34 + 16) |= 2u;
      *(_DWORD *)(v34 + 32) = v31;
      v27 += 16;
    }
    while (v27 != v28);
  }
  uint64_t v158 = v6;
  uint64_t v38 = *(void *)(a2 + 72);
  uint64_t v156 = *(void *)(a2 + 80);
  if (v38 != v156)
  {
    uint64_t v155 = (uint64_t *)(v6 + 64);
    do
    {
      uint64_t v39 = *(_DWORD **)(v158 + 80);
      if (v39 && (uint64_t v40 = *(int *)(v158 + 72), (int)v40 < *v39))
      {
        *(_DWORD *)(v158 + 72) = v40 + 1;
        uint64_t v41 = *(void *)&v39[2 * v40 + 2];
        uint64_t v42 = *(void *)v38;
        if (*(void *)v38 != 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v43 = sub_10F9284(*v155);
        uint64_t v41 = sub_188CDC8((uint64_t)v155, v43);
        uint64_t v42 = *(void *)v38;
        if (*(void *)v38 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_32:
          int v44 = (int)v42 / 100;
          int v45 = (int)v42 % 100;
          if (v42 < 0) {
            __int16 v46 = -50;
          }
          else {
            __int16 v46 = 50;
          }
          *(_DWORD *)(v41 + 16) |= 0x10u;
          *(_DWORD *)(v41 + 144) = v44
                                 + ((5243 * (__int16)(v46 + v45)) >> 19)
                                 + ((5243 * (__int16)(v46 + v45)) >> 31);
        }
      }
      uint64_t v47 = *(int **)(v38 + 8);
      uint64_t v48 = *(int **)(v38 + 16);
      if (v47 != v48)
      {
        int v50 = (unsigned int *)(v41 + 24);
        unsigned int v49 = *(_DWORD *)(v41 + 24);
        do
        {
          while (1)
          {
            int v51 = *v47;
            if (v49 == *(_DWORD *)(v41 + 28)) {
              break;
            }
            *(_DWORD *)(*(void *)(v41 + 32) + 4 * v49++) = v51;
            *int v50 = v49;
            v47 += 2;
            if (v47 == v48) {
              goto LABEL_41;
            }
          }
          sub_188C80C((unsigned int *)(v41 + 24), v49 + 1);
          *(_DWORD *)(*(void *)(v41 + 32) + 4 * v49++) = v51;
          *int v50 = v49;
          v47 += 2;
        }
        while (v47 != v48);
      }
LABEL_41:
      uint64_t v53 = *(void *)(v38 + 32);
      uint64_t v52 = *(void *)(v38 + 40);
      while (v53 != v52)
      {
        *(_DWORD *)(v41 + 16) |= 2u;
        uint64_t v59 = *(void *)(v41 + 120);
        if (v59)
        {
          uint64_t v60 = *(_DWORD **)(v59 + 32);
          if (!v60) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v61 = *(void *)(v41 + 8);
          uint64_t v62 = (uint64_t *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
          if (v61)
          {
            uint64_t v59 = sub_10F8DE8(*v62);
            *(void *)(v41 + 120) = v59;
            uint64_t v60 = *(_DWORD **)(v59 + 32);
            if (!v60) {
              goto LABEL_53;
            }
          }
          else
          {
            uint64_t v59 = sub_10F8DE8((uint64_t)v62);
            *(void *)(v41 + 120) = v59;
            uint64_t v60 = *(_DWORD **)(v59 + 32);
            if (!v60) {
              goto LABEL_53;
            }
          }
        }
        uint64_t v63 = *(int *)(v59 + 24);
        if ((int)v63 < *v60)
        {
          *(_DWORD *)(v59 + 24) = v63 + 1;
          uint64_t v64 = *(void *)&v60[2 * v63 + 2];
          goto LABEL_54;
        }
LABEL_53:
        uint64_t v65 = v59 + 16;
        sub_10F8D64(*(void *)(v59 + 16));
        uint64_t v64 = sub_188CDC8(v65, v66);
LABEL_54:
        int v67 = *(_DWORD *)(v64 + 16);
        *(_DWORD *)(v64 + 48) = 1;
        *(void *)(v64 + 32) = *(void *)v53;
        *(_DWORD *)(v64 + 16) = v67 | 0x13;
        uint64_t v54 = *(void *)(v64 + 24);
        if (v54)
        {
          *(_DWORD *)(v54 + 40) |= 1u;
          uint64_t v68 = *(void *)(v54 + 48);
          if (v68) {
            goto LABEL_63;
          }
LABEL_60:
          uint64_t v71 = *(void *)(v54 + 8);
          long double v72 = (void *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if (v71) {
            long double v72 = (void *)*v72;
          }
          uint64_t v68 = sub_15C1918((uint64_t)v72);
          *(void *)(v54 + 48) = v68;
          uint64_t v54 = *(void *)(v64 + 24);
          goto LABEL_63;
        }
        uint64_t v69 = *(void *)(v64 + 8);
        int v70 = (void *)(v69 & 0xFFFFFFFFFFFFFFFCLL);
        if (v69) {
          int v70 = (void *)*v70;
        }
        uint64_t v54 = sub_15C1CB4((uint64_t)v70);
        *(void *)(v64 + 24) = v54;
        *(_DWORD *)(v54 + 40) |= 1u;
        uint64_t v68 = *(void *)(v54 + 48);
        if (!v68) {
          goto LABEL_60;
        }
LABEL_63:
        v26.n128_u32[0] = *(_DWORD *)(v53 + 12);
        long double v73 = exp((double)v26.n128_u64[0] * -6.28318531 / 4294967300.0 + 3.14159265);
        double v74 = atan((v73 + -1.0 / v73) * 0.5) * 57.2957795;
        *(_DWORD *)(v68 + 40) |= 1u;
        *(double *)(v68 + 48) = v74;
        *(_DWORD *)(v64 + 16) |= 1u;
        if (v54)
        {
          *(_DWORD *)(v54 + 40) |= 1u;
          uint64_t v75 = *(void *)(v54 + 48);
          if (v75) {
            goto LABEL_72;
          }
LABEL_69:
          uint64_t v78 = *(void *)(v54 + 8);
          uint64x2_t v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFCLL);
          if (v78) {
            uint64x2_t v79 = (void *)*v79;
          }
          uint64_t v75 = sub_15C1918((uint64_t)v79);
          *(void *)(v54 + 48) = v75;
          uint64_t v54 = *(void *)(v64 + 24);
          goto LABEL_72;
        }
        uint64_t v76 = *(void *)(v64 + 8);
        uint64_t v77 = (void *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
        if (v76) {
          uint64_t v77 = (void *)*v77;
        }
        uint64_t v54 = sub_15C1CB4((uint64_t)v77);
        *(void *)(v64 + 24) = v54;
        *(_DWORD *)(v54 + 40) |= 1u;
        uint64_t v75 = *(void *)(v54 + 48);
        if (!v75) {
          goto LABEL_69;
        }
LABEL_72:
        LODWORD(v74) = *(_DWORD *)(v53 + 8);
        double v55 = (double)*(unint64_t *)&v74 * 360.0 / 4294967300.0 + -180.0;
        *(_DWORD *)(v75 + 40) |= 2u;
        *(double *)(v75 + 56) = v55;
        *(_DWORD *)(v64 + 16) |= 1u;
        if (!v54)
        {
          uint64_t v80 = *(void *)(v64 + 8);
          unint64_t v81 = (void *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
          if (v80) {
            unint64_t v81 = (void *)*v81;
          }
          uint64_t v54 = sub_15C1CB4((uint64_t)v81);
          *(void *)(v64 + 24) = v54;
        }
        LOWORD(v55) = *(_WORD *)(v53 + 20);
        v26.n128_f64[0] = (double)*(unint64_t *)&v55 / 100.0;
        *(_DWORD *)(v54 + 40) |= 0x100u;
        *(void *)(v54 + 104) = v26.n128_u64[0];
        int v56 = *(unsigned __int8 *)(v53 + 22);
        int v57 = *(_DWORD *)(v64 + 16);
        *(_DWORD *)(v64 + 16) = v57 | 4;
        *(_DWORD *)(v64 + 40) = v56;
        int v58 = *(unsigned __int8 *)(v53 + 23);
        *(_DWORD *)(v64 + 16) = v57 | 0xC;
        *(_DWORD *)(v64 + 44) = v58;
        v53 += 32;
      }
      if (*(char *)(v38 + 79) < 0)
      {
        if (!*(void *)(v38 + 64)) {
          goto LABEL_82;
        }
      }
      else if (!*(unsigned char *)(v38 + 79))
      {
        goto LABEL_82;
      }
      *(_DWORD *)(v41 + 16) |= 1u;
      uint64_t v82 = *(void *)(v41 + 8);
      unint64_t v83 = (uint64_t *)(v82 & 0xFFFFFFFFFFFFFFFCLL);
      if (v82) {
        unint64_t v83 = (uint64_t *)*v83;
      }
      sub_1881DF4((std::string **)(v41 + 112), (long long *)(v38 + 56), v83);
LABEL_82:
      uint64_t v85 = *(void *)(v38 + 80);
      uint64_t v84 = *(void *)(v38 + 88);
      if (v85 != v84)
      {
        while (2)
        {
          uint64_t v86 = *(_DWORD **)(v41 + 56);
          if (v86 && (uint64_t v87 = *(int *)(v41 + 48), (int)v87 < *v86))
          {
            *(_DWORD *)(v41 + 48) = v87 + 1;
            uint64_t v88 = *(void *)&v86[2 * v87 + 2];
            *(_DWORD *)(v88 + 16) |= 1u;
            uint64_t v89 = *(void *)(v88 + 8);
            uint64_t v90 = (uint64_t *)(v89 & 0xFFFFFFFFFFFFFFFCLL);
            if (v89) {
              goto LABEL_88;
            }
          }
          else
          {
            int v91 = sub_10F9004(*(void *)(v41 + 40));
            uint64_t v88 = sub_188CDC8(v41 + 40, (uint64_t)v91);
            *(_DWORD *)(v88 + 16) |= 1u;
            uint64_t v92 = *(void *)(v88 + 8);
            uint64_t v90 = (uint64_t *)(v92 & 0xFFFFFFFFFFFFFFFCLL);
            if (v92) {
LABEL_88:
            }
              uint64_t v90 = (uint64_t *)*v90;
          }
          sub_1881DF4((std::string **)(v88 + 48), (long long *)v85, v90);
          *(_DWORD *)(v88 + 16) |= 2u;
          uint64_t v93 = *(void *)(v88 + 56);
          if (!v93)
          {
            uint64_t v94 = *(void *)(v88 + 8);
            uint64_t v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
            if (v94) {
              uint64_t v95 = (void *)*v95;
            }
            uint64_t v93 = sub_10F8F10((uint64_t)v95);
            *(void *)(v88 + 56) = v93;
          }
          int v96 = *(_DWORD *)(v85 + 24);
          *(_DWORD *)(v93 + 16) |= 1u;
          *(_DWORD *)(v93 + 24) = v96;
          uint64_t v97 = *(void *)(v85 + 32);
          for (uint64_t i = *(void *)(v85 + 40); v97 != i; ++v97)
          {
            while (1)
            {
              unint64_t v100 = *(_DWORD **)(v88 + 40);
              if (v100)
              {
                int v101 = *(_DWORD *)(v88 + 32);
                if (v101 < *v100) {
                  break;
                }
              }
              uint64_t v99 = sub_10F8F8C(*(void *)(v88 + 24));
              sub_188CDC8(v88 + 24, v99);
              if (++v97 == i) {
                goto LABEL_84;
              }
            }
            *(_DWORD *)(v88 + 32) = v101 + 1;
          }
LABEL_84:
          v85 += 80;
          if (v85 == v84) {
            break;
          }
          continue;
        }
      }
      if (sub_490BEC((void *)(v38 + 104)))
      {
        *(_DWORD *)(v41 + 16) |= 4u;
        int64_t v103 = *(_DWORD **)(v41 + 128);
        if (!v103)
        {
          uint64_t v104 = *(void *)(v41 + 8);
          uint64_t v105 = (void *)(v104 & 0xFFFFFFFFFFFFFFFCLL);
          if (v104) {
            uint64_t v105 = (void *)*v105;
          }
          int64_t v103 = sub_10F93C4((uint64_t)v105);
          *(void *)(v41 + 128) = v103;
        }
        uint64_t v106 = *(void *)(v38 + 104);
        int v107 = (int)v106 / 100;
        int v108 = (int)v106 % 100;
        if (v106 < 0) {
          __int16 v109 = -50;
        }
        else {
          __int16 v109 = 50;
        }
        unsigned int v110 = v107 + ((5243 * (__int16)(v109 + v108)) >> 19) + ((5243 * (__int16)(v109 + v108)) >> 31);
        int v111 = v103[4];
        v103[6] = v110;
        uint64_t v112 = *(void *)(v38 + 112);
        int v113 = (int)v112 / 100;
        int v114 = (int)v112 % 100;
        if (v112 < 0) {
          __int16 v115 = -50;
        }
        else {
          __int16 v115 = 50;
        }
        v103[4] = v111 | 3;
        v103[7] = v113 + ((5243 * (__int16)(v115 + v114)) >> 19) + ((5243 * (__int16)(v115 + v114)) >> 31);
      }
      uint64_t v116 = (unint64_t *)(v38 + 120);
      uint64_t v117 = (void *)a1[1];
      if (v117 != (void *)(v38 + 120))
      {
        sub_47257C(v117, *(char **)(v38 + 120), *(char **)(v38 + 128), (uint64_t)(*(void *)(v38 + 128) - *(void *)(v38 + 120)) >> 5);
        uint64_t v116 = (unint64_t *)a1[1];
      }
      unint64_t v118 = *v116;
      uint64_t v119 = (__n128 *)v116[1];
      unint64_t v120 = 126 - 2 * __clz((uint64_t)((uint64_t)v119 - *v116) >> 5);
      if (v119 == (__n128 *)v118) {
        uint64_t v121 = 0;
      }
      else {
        uint64_t v121 = v120;
      }
      __n128 v26 = sub_48F83C(v118, v119, v121, 1, v102);
      uint64_t v122 = (uint64_t *)a1[1];
      uint64_t v123 = *v122;
      uint64_t v124 = v122[1];
      if (*v122 != v124)
      {
        uint64_t v125 = 0;
        int v126 = -1;
        do
        {
          int v131 = *(_DWORD *)v123;
          if (v126 != *(_DWORD *)v123)
          {
            unint64_t v132 = *(_DWORD **)(v41 + 104);
            if (v132 && (uint64_t v133 = *(int *)(v41 + 96), (int)v133 < *v132))
            {
              *(_DWORD *)(v41 + 96) = v133 + 1;
              uint64_t v125 = *(void *)&v132[2 * v133 + 2];
            }
            else
            {
              uint64_t v134 = sub_10F91DC(*(void *)(v41 + 88));
              uint64_t v125 = sub_188CDC8(v41 + 88, v134);
            }
            *(_DWORD *)(v125 + 16) |= 1u;
            *(_DWORD *)(v125 + 48) = v131;
            int v126 = v131;
          }
          unint64_t v135 = *(_DWORD **)(v125 + 40);
          if (v135 && (uint64_t v136 = *(int *)(v125 + 32), (int)v136 < *v135))
          {
            *(_DWORD *)(v125 + 32) = v136 + 1;
            uint64_t v128 = *(void *)&v135[2 * v136 + 2];
          }
          else
          {
            uint64_t v127 = sub_10F915C(*(void *)(v125 + 24));
            uint64_t v128 = sub_188CDC8(v125 + 24, v127);
          }
          int v129 = *(_DWORD *)(v128 + 16);
          *(void *)(v128 + 24) = *(void *)(v123 + 8);
          *(void *)(v128 + 32) = *(void *)(v123 + 16);
          uint64_t v130 = *(void *)(v123 + 24);
          *(_DWORD *)(v128 + 16) = v129 | 7;
          *(_DWORD *)(v128 + 40) = v130;
          v123 += 32;
        }
        while (v123 != v124);
      }
      v38 += 144;
    }
    while (v38 != v156);
  }
  sub_46DD68(a2, &v159);
  unint64_t v138 = v159.n128_u64[1];
  for (unint64_t j = v159.n128_u64[0]; j != v138; j += 16)
  {
    unsigned int v146 = *(_DWORD **)(v158 + 104);
    if (v146 && (uint64_t v147 = *(int *)(v158 + 96), (int)v147 < *v146))
    {
      *(_DWORD *)(v158 + 96) = v147 + 1;
      uint64_t v140 = *(void *)&v146[2 * v147 + 2];
    }
    else
    {
      uint64_t v139 = sub_10F9348(*(void *)(v158 + 88));
      uint64_t v140 = sub_188CDC8(v158 + 88, v139);
    }
    uint64_t v141 = *(void *)j;
    int v142 = *(_DWORD *)(v140 + 16);
    *(_DWORD *)(v140 + 16) = v142 | 1;
    *(void *)(v140 + 24) = v141;
    LODWORD(v141) = *(_DWORD *)(j + 8);
    int v143 = (int)v141 / 10;
    int v144 = (int)v141 % 10;
    if ((int)v141 < 0) {
      char v145 = -5;
    }
    else {
      char v145 = 5;
    }
    *(_DWORD *)(v140 + 16) = v142 | 3;
    *(_DWORD *)(v140 + 32) = v143
                           + (((103 * (char)(v145 + v144)) >> 15) & 1)
                           + ((103 * (char)(v145 + v144)) >> 10);
  }
  __n128 result = (_DWORD *)sub_50BE8(a2);
  if (*result != 0x7FFFFFFF
    && result[1] != 0x7FFFFFFF
    && *((void *)result + 2) != 0x7FFFFFFFFFFFFFFFLL
    && result[2] != 0x7FFFFFFF)
  {
    uint64_t v149 = sub_50BE8(a2);
    *(_DWORD *)(v158 + 16) |= 1u;
    __n128 result = *(_DWORD **)(v158 + 136);
    if (!result)
    {
      uint64_t v150 = *(void *)(v158 + 8);
      uint64_t v151 = (void *)(v150 & 0xFFFFFFFFFFFFFFFCLL);
      if (v150) {
        uint64_t v151 = (void *)*v151;
      }
      __n128 result = sub_10F943C((uint64_t)v151);
      *(void *)(v158 + 136) = result;
    }
    int v152 = *(_DWORD *)v149;
    int v153 = result[4];
    result[4] = v153 | 1;
    result[6] = v152;
    result[7] = *(_DWORD *)(v149 + 4);
    uint64_t v154 = *(void *)(v149 + 16);
    result[4] = v153 | 0xB;
    result[9] = v154;
    LODWORD(v154) = *(_DWORD *)(v149 + 8);
    result[4] = v153 | 0xF;
    result[8] = v154;
  }
  return result;
}

__n128 sub_48F83C(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
BOOL sub_490468(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = a2 - 2;
      if (a2[-2].n128_u32[0] < *(_DWORD *)a1) {
        goto LABEL_9;
      }
      return result;
    case 3:
      uint64_t v16 = (__n128 *)(a1 + 32);
      unsigned int v17 = *(_DWORD *)(a1 + 32);
      uint64_t v7 = a2 - 2;
      unsigned int v18 = a2[-2].n128_u32[0];
      if (v17 >= *(_DWORD *)a1)
      {
        if (v18 < v17)
        {
          __n128 v46 = *v16;
          __n128 v45 = *(__n128 *)(a1 + 48);
          __n128 v47 = a2[-1];
          *uint64_t v16 = *v7;
          *(__n128 *)(a1 + 48) = v47;
          __n128 *v7 = v46;
          a2[-1] = v45;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)a1)
          {
            __n128 v49 = *(__n128 *)a1;
            long long v48 = *(_OWORD *)(a1 + 16);
            long long v50 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v50;
            *uint64_t v16 = v49;
            *(_OWORD *)(a1 + 48) = v48;
          }
        }
      }
      else
      {
        if (v18 < v17)
        {
LABEL_9:
          __n128 v20 = *(__n128 *)a1;
          __n128 v19 = *(__n128 *)(a1 + 16);
          __n128 v21 = v7[1];
          *(__n128 *)a1 = *v7;
          *(__n128 *)(a1 + 16) = v21;
LABEL_10:
          __n128 *v7 = v20;
          v7[1] = v19;
          return result;
        }
        __n128 v64 = *(__n128 *)a1;
        long long v63 = *(_OWORD *)(a1 + 16);
        long long v65 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v16;
        *(_OWORD *)(a1 + 16) = v65;
        *uint64_t v16 = v64;
        *(_OWORD *)(a1 + 48) = v63;
        if (v7->n128_u32[0] < *(_DWORD *)(a1 + 32))
        {
          __n128 v20 = *v16;
          __n128 v19 = *(__n128 *)(a1 + 48);
          __n128 v66 = a2[-1];
          *uint64_t v16 = *v7;
          *(__n128 *)(a1 + 48) = v66;
          goto LABEL_10;
        }
      }
      return result;
    case 4:
      sub_4907E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), a2 - 2, a3);
      return 1;
    case 5:
      unsigned int v22 = (__n128 *)(a1 + 32);
      __n128 v23 = (__n128 *)(a1 + 64);
      __n128 v24 = (__n128 *)(a1 + 96);
      sub_4907E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), a3);
      unsigned int v26 = a2[-2].n128_u32[0];
      __n128 v25 = a2 - 2;
      if (v26 < *(_DWORD *)(a1 + 96))
      {
        __n128 v28 = *v24;
        __n128 v27 = *(__n128 *)(a1 + 112);
        __n128 v29 = v25[1];
        __n128 *v24 = *v25;
        *(__n128 *)(a1 + 112) = v29;
        __n128 *v25 = v28;
        v25[1] = v27;
        if (v24->n128_u32[0] < v23->n128_u32[0])
        {
          __n128 v31 = *v23;
          long long v30 = *(_OWORD *)(a1 + 80);
          long long v32 = *(_OWORD *)(a1 + 112);
          __n128 *v23 = *v24;
          *(_OWORD *)(a1 + 80) = v32;
          __n128 *v24 = v31;
          *(_OWORD *)(a1 + 112) = v30;
          if (v23->n128_u32[0] < v22->n128_u32[0])
          {
            __n128 v34 = *v22;
            long long v33 = *(_OWORD *)(a1 + 48);
            long long v35 = *(_OWORD *)(a1 + 80);
            __n128 *v22 = *v23;
            *(_OWORD *)(a1 + 48) = v35;
            __n128 *v23 = v34;
            *(_OWORD *)(a1 + 80) = v33;
            if (*(_DWORD *)(a1 + 32) < *(_DWORD *)a1)
            {
              __n128 v37 = *(__n128 *)a1;
              long long v36 = *(_OWORD *)(a1 + 16);
              long long v38 = *(_OWORD *)(a1 + 48);
              *(__n128 *)a1 = *v22;
              *(_OWORD *)(a1 + 16) = v38;
              __n128 *v22 = v37;
              *(_OWORD *)(a1 + 48) = v36;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = (__n128 *)(a1 + 64);
      unsigned int v9 = *(_DWORD *)(a1 + 64);
      int v10 = (__n128 *)(a1 + 32);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
      unsigned __int32 v12 = *(_DWORD *)a1;
      if (v11 >= *(_DWORD *)a1)
      {
        if (v9 < v11)
        {
          __n128 v40 = *v10;
          long long v39 = *(_OWORD *)(a1 + 48);
          long long v41 = *(_OWORD *)(a1 + 80);
          __n128 *v10 = *v8;
          *(_OWORD *)(a1 + 48) = v41;
          *uint64_t v8 = v40;
          *(_OWORD *)(a1 + 80) = v39;
          if (v10->n128_u32[0] < v12)
          {
            __n128 v43 = *(__n128 *)a1;
            long long v42 = *(_OWORD *)(a1 + 16);
            long long v44 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v44;
            __n128 *v10 = v43;
            *(_OWORD *)(a1 + 48) = v42;
          }
        }
      }
      else
      {
        if (v9 >= v11)
        {
          __n128 v52 = *(__n128 *)a1;
          long long v51 = *(_OWORD *)(a1 + 16);
          long long v53 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v10;
          *(_OWORD *)(a1 + 16) = v53;
          __n128 *v10 = v52;
          *(_OWORD *)(a1 + 48) = v51;
          if (v9 >= *(_DWORD *)(a1 + 32)) {
            goto LABEL_26;
          }
          __n128 v14 = *v10;
          long long v13 = *(_OWORD *)(a1 + 48);
          long long v54 = *(_OWORD *)(a1 + 80);
          __n128 *v10 = *v8;
          *(_OWORD *)(a1 + 48) = v54;
        }
        else
        {
          __n128 v14 = *(__n128 *)a1;
          long long v13 = *(_OWORD *)(a1 + 16);
          long long v15 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v8;
          *(_OWORD *)(a1 + 16) = v15;
        }
        *uint64_t v8 = v14;
        *(_OWORD *)(a1 + 80) = v13;
      }
LABEL_26:
      __n128 v55 = (__n128 *)(a1 + 96);
      if ((__n128 *)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v56 = 0;
      int v57 = 0;
      while (1)
      {
        unsigned int v59 = v55->n128_u32[0];
        if (v55->n128_u32[0] < v8->n128_u32[0])
        {
          *(__n128 *)__n128 v67 = *(__n128 *)((char *)v55 + 4);
          *(__n128 *)&v67[12] = v55[1];
          uint64_t v60 = v56;
          do
          {
            uint64_t v61 = a1 + v60;
            long long v62 = *(_OWORD *)(a1 + v60 + 80);
            *(_OWORD *)(v61 + 96) = *(_OWORD *)(a1 + v60 + 64);
            *(_OWORD *)(v61 + 112) = v62;
            if (v60 == -64)
            {
              uint64_t v58 = a1;
              goto LABEL_29;
            }
            v60 -= 32;
          }
          while (v59 < *(_DWORD *)(v61 + 32));
          uint64_t v58 = a1 + v60 + 96;
LABEL_29:
          *(_DWORD *)uint64_t v58 = v59;
          *(_OWORD *)(v58 + 4) = *(_OWORD *)v67;
          *(_OWORD *)(v58 + 16) = *(_OWORD *)&v67[12];
          if (++v57 == 8) {
            return &v55[2] == a2;
          }
        }
        uint64_t v8 = v55;
        v56 += 32;
        v55 += 2;
        if (v55 == a2) {
          return 1;
        }
      }
  }
}

__n128 sub_4907E4(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unsigned __int32 v5 = a2->n128_u32[0];
  unsigned __int32 v6 = a3->n128_u32[0];
  if (a2->n128_u32[0] >= a1->n128_u32[0])
  {
    if (v6 < v5)
    {
      __n128 v9 = *a2;
      BOOL result = a2[1];
      __n128 v10 = a3[1];
      *a2 = *a3;
      a2[1] = v10;
      *a3 = v9;
      a3[1] = result;
      if (a2->n128_u32[0] < a1->n128_u32[0])
      {
        __n128 v11 = *a1;
        BOOL result = a1[1];
        __n128 v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        *a2 = v11;
        a2[1] = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      __n128 v7 = *a1;
      BOOL result = a1[1];
      __n128 v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
LABEL_9:
      *a3 = v7;
      a3[1] = result;
      goto LABEL_10;
    }
    __n128 v13 = *a1;
    BOOL result = a1[1];
    __n128 v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    *a2 = v13;
    a2[1] = result;
    if (a3->n128_u32[0] < a2->n128_u32[0])
    {
      __n128 v7 = *a2;
      BOOL result = a2[1];
      __n128 v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u32[0] < a3->n128_u32[0])
  {
    __n128 v16 = *a3;
    BOOL result = a3[1];
    __n128 v17 = a4[1];
    *a3 = *a4;
    a3[1] = v17;
    *a4 = v16;
    a4[1] = result;
    if (a3->n128_u32[0] < a2->n128_u32[0])
    {
      __n128 v18 = *a2;
      BOOL result = a2[1];
      __n128 v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = result;
      if (a2->n128_u32[0] < a1->n128_u32[0])
      {
        __n128 v20 = *a1;
        BOOL result = a1[1];
        __n128 v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *a2 = v20;
        a2[1] = result;
      }
    }
  }
  return result;
}

void sub_4908F0()
{
  byte_2558AF7 = 1;
  word_2558AE0 = 65;
  byte_2558B0F = 1;
  word_2558AF8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_2558B70 = 0u;
  *(_OWORD *)&qword_2558B80 = 0u;
  dword_2558B90 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558B70, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_2558B70, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558B70, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558B70, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2558B27 = 8;
  strcpy((char *)&qword_2558B10, "any_mode");
  byte_2558B3F = 7;
  strcpy((char *)&dword_2558B28, "cycling");
  byte_2558B57 = 7;
  strcpy((char *)&dword_2558B40, "driving");
  byte_2558B6F = 7;
  strcpy((char *)&dword_2558B58, "walking");
}

void sub_490B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558B80) {
    sub_20A8CF8((void **)qword_2558B80);
  }
  __n128 v37 = (void *)xmmword_2558B70;
  *(void *)&xmmword_2558B70 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL sub_490BEC(void *a1)
{
  return *a1 != 0x7FFFFFFFFFFFFFFFLL && a1[1] != 0x7FFFFFFFFFFFFFFFLL;
}

void *sub_490C14(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 100 * *(unsigned int *)(a2 + 144);
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  int v5 = (std::string *)(a1 + 56);
  __n128 v37 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(int64x2_t *)(a1 + 104) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 120) = 0;
  unsigned __int32 v6 = (char **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  sub_490FD8((int *)(a2 + 24), (unint64_t *)(a1 + 8), sub_491174);
  char v7 = *(uint64_t (****)())(a2 + 120);
  if (!v7) {
    char v7 = &off_24F7798;
  }
  sub_49117C((uint64_t)(v7 + 2), v4);
  std::string::operator=(v5, (const std::string *)(*(void *)(a2 + 112) & 0xFFFFFFFFFFFFFFFELL));
  long long v36 = (void *)a1;
  sub_492300(v37, *(int *)(a2 + 48) - 0x3333333333333333 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4));
  uint64_t v8 = *(int *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  if (v9) {
    uint64_t v10 = v9 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8)
  {
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = 8 * v8;
    do
    {
      __n128 v13 = *(uint64_t (****)())(*(void *)v10 + 56);
      unint64_t v14 = *(void *)(*(void *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (!v13) {
        __n128 v13 = &off_24F7800;
      }
      int v15 = *((_DWORD *)v13 + 6);
      size_t v16 = *(unsigned int *)(*(void *)v10 + 32);
      if (*(char *)(v14 + 23) < 0)
      {
        sub_4200(__dst, *(void **)v14, *(void *)(v14 + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)v14;
        *(void *)&__dst[16] = *(void *)(v14 + 16);
        *(_OWORD *)__dst = v17;
      }
      LODWORD(v39) = 0;
      long long v41 = 0;
      long long v42 = 0;
      __p = 0;
      if (v16)
      {
        __n128 v18 = (char *)operator new(v16);
        long long v41 = &v18[v16];
        long long v42 = &v18[v16];
        __p = v18;
      }
      uint64_t v43 = 0;
      int v44 = 0x7FFFFFFF;
      uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(v39) = v15;
      uint64_t v19 = sub_492474(v37, v11, (uint64_t)__dst);
      if (__p)
      {
        long long v41 = (char *)__p;
        operator delete(__p);
      }
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      uint64_t v11 = v19 + 80;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  if ((*(unsigned char *)(a2 + 16) & 4) != 0)
  {
    uint64_t v20 = *(void *)(a2 + 128);
    uint64_t v21 = 100 * *(unsigned int *)(v20 + 24);
    uint64_t v22 = 100 * *(unsigned int *)(v20 + 28);
    v36[13] = v21;
    v36[14] = v22;
  }
  uint64_t v23 = *(void *)(a2 + 104);
  if (v23) {
    uint64_t v24 = v23 + 8;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(int *)(a2 + 96);
  if (v25)
  {
    uint64_t v26 = v24 + 8 * v25;
    do
    {
      uint64_t v27 = *(int *)(*(void *)v24 + 32);
      uint64_t v28 = *(void *)(*(void *)v24 + 40);
      if (v28) {
        __n128 v29 = (uint64_t *)(v28 + 8);
      }
      else {
        __n128 v29 = 0;
      }
      if (v27)
      {
        int v30 = *(_DWORD *)(*(void *)v24 + 48);
        __n128 v31 = (char *)v36[16];
        uint64_t v32 = 8 * v27;
        do
        {
          uint64_t v33 = *v29;
          if ((*(_DWORD *)(*v29 + 16) & 4) != 0) {
            uint64_t v34 = *(unsigned int *)(*v29 + 40);
          }
          else {
            uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          }
          *(_DWORD *)__dst = v30;
          *(_OWORD *)&__dst[8] = *(_OWORD *)(v33 + 24);
          uint64_t v39 = v34;
          __n128 v31 = sub_492C5C(v6, v31, __dst) + 32;
          ++v29;
          v32 -= 8;
        }
        while (v32);
      }
      v24 += 8;
    }
    while (v24 != v26);
  }
  return v36;
}

void sub_490F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v25 = *v23;
  if (*v23)
  {
    *(void *)(a13 + 128) = v25;
    operator delete(v25);
    sub_489144(a14);
    if (*(char *)(a13 + 79) < 0)
    {
LABEL_3:
      operator delete(*a9);
      uint64_t v26 = *a10;
      if (*a10) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    sub_489144(a14);
    if (*(char *)(a13 + 79) < 0) {
      goto LABEL_3;
    }
  }
  uint64_t v26 = *a10;
  if (*a10)
  {
LABEL_4:
    *(void *)(a13 + 40) = v26;
    operator delete(v26);
    uint64_t v27 = *a11;
    if (*a11) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v27 = *a11;
  if (*a11)
  {
LABEL_5:
    *(void *)(a13 + 16) = v27;
    operator delete(v27);
    _Unwind_Resume(a1);
  }
LABEL_9:
  _Unwind_Resume(a1);
}

void sub_490FD8(int *__sz, unint64_t *a2, uint64_t (*a3)(void))
{
  int v5 = __sz;
  unsigned __int32 v6 = (char *)*a2;
  char v7 = (char *)a2[1];
  uint64_t v8 = v7;
  uint64_t v9 = (uint64_t)&v7[-*a2];
  uint64_t v10 = v9 >> 3;
  int v11 = *__sz;
  uint64_t v12 = *__sz;
  unint64_t v13 = (v9 >> 3) + v12;
  if (v13 <= (uint64_t)(a2[2] - *a2) >> 3)
  {
    long long v17 = (char *)a2[1];
    goto LABEL_14;
  }
  int v31 = *__sz;
  uint64_t v32 = v11;
  if (v13 >> 61) {
    sub_2E00();
  }
  uint64_t v15 = 8 * v13;
  size_t v16 = (char *)operator new(8 * v13);
  long long v17 = &v16[8 * v10];
  __n128 v18 = &v16[v15];
  uint64_t v19 = v17;
  int v5 = __sz;
  int v11 = v31;
  if (v7 != v6)
  {
    unint64_t v20 = v7 - v6 - 8;
    if (v20 < 0x58)
    {
      uint64_t v19 = &v16[8 * v10];
      do
      {
LABEL_11:
        uint64_t v27 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v8 != v6);
      goto LABEL_12;
    }
    uint64_t v19 = &v16[8 * v10];
    if ((unint64_t)(&v7[-v9] - v16) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v7[-v22];
    uint64_t v19 = &v17[-v22];
    uint64_t v23 = &v16[8 * v10 - 16];
    uint64_t v24 = v7 - 16;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  *a2 = (unint64_t)v19;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v18;
  uint64_t v12 = v32;
  if (v6)
  {
    operator delete(v6);
    long long v17 = (char *)a2[1];
    int v11 = *v5;
    uint64_t v12 = *v5;
  }
LABEL_14:
  if (v11)
  {
    uint64_t v28 = (unsigned int *)*((void *)v5 + 1);
    uint64_t v29 = 4 * v12;
    do
    {
      unsigned int v30 = *v28++;
      uint64_t v33 = a3(v30);
      long long v17 = sub_491D3C(a2, v17, &v33) + 8;
      v29 -= 4;
    }
    while (v29);
  }
}

uint64_t sub_491174(uint64_t result)
{
  return result;
}

void sub_49117C(uint64_t a1, void **a2)
{
  char v4 = *a2;
  int v5 = a2[1];
  uint64_t v6 = (v5 - (unsigned char *)*a2) >> 5;
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = v7;
  unint64_t v9 = v6 + v7;
  if (v9 <= ((unsigned char *)a2[2] - (unsigned char *)*a2) >> 5)
  {
    uint64_t v12 = (char *)a2[1];
  }
  else
  {
    if (v9 >> 59) {
      sub_2E00();
    }
    uint64_t v10 = 32 * v9;
    int v11 = (char *)operator new(32 * v9);
    uint64_t v12 = &v11[32 * v6];
    unint64_t v13 = v12;
    if (v5 != v4)
    {
      unint64_t v14 = v12;
      do
      {
        long long v15 = *((_OWORD *)v5 - 2);
        unint64_t v13 = v14 - 32;
        *(_OWORD *)(v14 - 22) = *(_OWORD *)(v5 - 22);
        *((_OWORD *)v14 - 2) = v15;
        v5 -= 32;
        v14 -= 32;
      }
      while (v5 != v4);
    }
    *a2 = v13;
    a2[1] = v12;
    a2[2] = &v11[v10];
    if (v4)
    {
      operator delete(v4);
      uint64_t v12 = (char *)a2[1];
      int v7 = *(_DWORD *)(a1 + 8);
      uint64_t v8 = v7;
    }
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16) {
    long long v17 = (uint64_t *)(v16 + 8);
  }
  else {
    long long v17 = 0;
  }
  if (v7)
  {
    uint64_t v18 = 8 * v8;
    do
    {
      uint64_t v19 = *v17++;
      sub_4849B4((uint64_t)v20, v19);
      uint64_t v12 = sub_4920AC(a2, v12, v20) + 32;
      v18 -= 8;
    }
    while (v18);
  }
}

uint64_t sub_4912AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, long long *a6, uint64_t a7)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v13 = *(const void **)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  int64_t v14 = v12 - *(void *)a3;
  if (v12 != *(void *)a3)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    long long v15 = (char *)operator new(v12 - *(void *)a3);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 24) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 16) = v16;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v17 = *(const void **)a4;
  int64_t v18 = *(void *)(a4 + 8) - *(void *)a4;
  if (v18)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v19 = (char *)operator new(v18);
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v19;
    unint64_t v20 = &v19[32 * (v18 >> 5)];
    *(void *)(a1 + 48) = v20;
    memcpy(v19, v17, v18 - 6);
    *(void *)(a1 + 40) = v20;
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_489B48((char **)(a1 + 80), *a5, a5[1], 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 4));
  long long v21 = *a6;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = v21;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v22 = *(const void **)a7;
  int64_t v23 = *(void *)(a7 + 8) - *(void *)a7;
  if (v23)
  {
    if (v23 < 0) {
      sub_2E00();
    }
    uint64_t v24 = (char *)operator new(v23);
    *(void *)(a1 + 120) = v24;
    *(void *)(a1 + 128) = v24;
    uint64_t v25 = &v24[32 * (v23 >> 5)];
    *(void *)(a1 + 136) = v25;
    memcpy(v24, v22, v23);
    *(void *)(a1 + 128) = v25;
  }
  return a1;
}

void sub_491430(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v4);
    uint64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      int v7 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 40) = v6;
  operator delete(v6);
  int v7 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v1 + 16) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_4914B0()
{
  if (!*v0) {
    JUMPOUT(0x491474);
  }
  JUMPOUT(0x49146CLL);
}

uint64_t sub_4914C4(uint64_t a1)
{
  if (*(void *)(a1 + 40) - *(void *)(a1 + 32) > 0x20uLL) {
    return 1;
  }
  if (*(char *)(a1 + 79) < 0) {
    return *(void *)(a1 + 64) != 0;
  }
  return *(unsigned __int8 *)(a1 + 79) != 0;
}

uint64_t sub_491504(uint64_t result, uint64_t a2, int a3)
{
  *(void *)BOOL result = a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

uint64_t sub_491510(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 4) = sub_DC6B5C(*(_DWORD *)(a2 + 148));
  *(unsigned char *)(a1 + 5) = sub_DBFB20(*(_DWORD *)(a2 + 176));
  char v4 = sub_DBFB20(*(_DWORD *)(a2 + 180));
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 6) = v4;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 48) = 0x8000000080000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  int v5 = *(unsigned __int8 *)(a2 + 161);
  if (*(unsigned char *)(a2 + 162)) {
    v5 |= 2u;
  }
  if (*(unsigned char *)(a2 + 163)) {
    v5 |= 4u;
  }
  if (*(unsigned char *)(a2 + 164)) {
    v5 |= 8u;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = 10 * *(_DWORD *)(a2 + 168);
  if ((*(_DWORD *)(a2 + 16) & 0x800) != 0) {
    int v6 = 1000 * *(_DWORD *)(a2 + 172);
  }
  else {
    int v6 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(int *)(a2 + 96);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v8;
      uint64_t v37 = *(void *)(*v8 + 24);
      LODWORD(v38) = 10 * *(_DWORD *)(v12 + 32);
      uint64_t v10 = sub_492EA8((char **)(a1 + 24), v10, &v37) + 16;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v13 = *(void *)(a2 + 136);
    int v14 = *(_DWORD *)(v13 + 32);
    uint64_t v15 = *(unsigned int *)(v13 + 36);
    *(void *)(a1 + 48) = *(void *)(v13 + 24);
    *(_DWORD *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v15;
  }
  uint64_t v16 = *(void *)(a2 + 80);
  if (v16) {
    long long v17 = (uint64_t *)(v16 + 8);
  }
  else {
    long long v17 = 0;
  }
  sub_4930EC(v17, &v17[*(int *)(a2 + 72)], (uint64_t *)(a1 + 72), *(void *)(a1 + 80));
  int64_t v18 = *(unsigned char **)(a1 + 104);
  uint64_t v19 = *(unsigned char **)(a1 + 112);
  uint64_t v20 = (v19 - v18) >> 4;
  int v21 = *(_DWORD *)(a2 + 120);
  uint64_t v22 = v21;
  unint64_t v23 = v20 + v21;
  if (v23 > (uint64_t)(*(void *)(a1 + 120) - (void)v18) >> 4)
  {
    if (v23 >> 60) {
      sub_2E00();
    }
    uint64_t v24 = (char *)operator new(16 * v23);
    uint64_t v25 = &v24[16 * v20];
    if (v19 != v18)
    {
      uint64_t v25 = &v24[16 * v20];
      do
      {
        uint64_t v26 = *((void *)v19 - 2);
        v19 -= 16;
        char v27 = v19[8];
        *((void *)v25 - 2) = v26;
        v25 -= 16;
        v25[8] = v27;
      }
      while (v19 != v18);
    }
    *(void *)(a1 + 104) = v25;
    *(void *)(a1 + 112) = &v24[16 * v20];
    *(void *)(a1 + 120) = &v24[16 * v23];
    uint64_t v22 = v21;
    if (v18)
    {
      operator delete(v18);
      int v21 = *(_DWORD *)(a2 + 120);
      uint64_t v22 = v21;
    }
  }
  uint64_t v28 = *(void *)(a2 + 128);
  if (v28) {
    uint64_t v29 = (uint64_t *)(v28 + 8);
  }
  else {
    uint64_t v29 = 0;
  }
  if (v21)
  {
    unsigned int v30 = *(char **)(a1 + 112);
    uint64_t v31 = 8 * v22;
    do
    {
      uint64_t v32 = *v29;
      uint64_t v33 = *(uint64_t (****)())(*v29 + 24);
      if (!v33) {
        uint64_t v33 = &off_2536278;
      }
      uint64_t v34 = nullsub_1(v33[3]);
      unsigned int v35 = sub_DBB90C(v32);
      uint64_t v37 = v34;
      uint64_t v38 = v35;
      unsigned int v30 = sub_493C80((char **)(a1 + 104), v30, &v37) + 16;
      ++v29;
      v31 -= 8;
    }
    while (v31);
  }
  return a1;
}

void sub_4917E0(_Unwind_Exception *a1)
{
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 112) = v6;
    operator delete(v6);
    sub_489720(v2);
    uint64_t v7 = *v3;
    if (!*v3) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_489720(v2);
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_49183C(uint64_t a1, int a2, long long **a3)
{
  *(_DWORD *)a1 = a2;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(void *)(a1 + 72) = 0;
  int v5 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3);
  *(unsigned char *)(a1 + 6) = 0;
  *(void *)(a1 + 48) = 0x8000000080000000;
  *(void *)(a1 + 64) = 0x7FFFFFFFFFFFFFFFLL;
  sub_493EC4((char **)(a1 + 72), v6);
  sub_494064(*a3, a3[1], v5, *(void *)(a1 + 80));
  return a1;
}

void sub_491900(_Unwind_Exception *a1)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 112) = v6;
    operator delete(v6);
    sub_489720(v2);
    uint64_t v7 = *v3;
    if (!*v3) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_489720(v2);
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_49194C(uint64_t a1, int a2, long long **a3)
{
  return sub_49183C(a1, a2, a3);
}

uint64_t sub_491954(uint64_t a1, int a2, char a3, int a4, char a5, char a6, int a7, int a8, int a9, uint64_t a10, long long *a11, uint64_t *a12, uint64_t a13)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 5) = a5;
  *(unsigned char *)(a1 + 6) = a6;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a7;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v15 = *(const void **)a10;
  uint64_t v14 = *(void *)(a10 + 8);
  uint64_t v16 = v14 - *(void *)a10;
  if (v14 != *(void *)a10)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    long long v17 = (char *)operator new(v14 - (void)v15);
    *(void *)(a1 + 24) = v17;
    *(void *)(a1 + 32) = v17;
    int64_t v18 = &v17[16 * (v16 >> 4)];
    *(void *)(a1 + 40) = v18;
    memcpy(v17, v15, v16 - 4);
    *(void *)(a1 + 32) = v18;
  }
  long long v19 = *a11;
  uint64_t v20 = *((void *)a11 + 2);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 48) = v19;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_48977C(a1 + 72, *a12, a12[1], 0x8E38E38E38E38E39 * ((a12[1] - *a12) >> 4));
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = a9;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v22 = *(const void **)a13;
  uint64_t v21 = *(void *)(a13 + 8);
  uint64_t v23 = v21 - *(void *)a13;
  if (v21 != *(void *)a13)
  {
    if (v23 < 0) {
      sub_2E00();
    }
    uint64_t v24 = (char *)operator new(v21 - (void)v22);
    *(void *)(a1 + 104) = v24;
    *(void *)(a1 + 112) = v24;
    uint64_t v25 = &v24[16 * (v23 >> 4)];
    *(void *)(a1 + 120) = v25;
    memcpy(v24, v22, v23 - 7);
    *(void *)(a1 + 112) = v25;
  }
  return a1;
}

void sub_491A98(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_491ADC(uint64_t a1, int a2, char a3, int a4, char a5, char a6, int a7, int a8, int a9, uint64_t a10, long long *a11, uint64_t *a12, uint64_t a13)
{
  return sub_491954(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_491B10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_491B18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

uint64_t sub_491B20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 6);
}

uint64_t sub_491B28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_491B30(uint64_t a1)
{
  return *(void *)(a1 + 72) + 144 * *(unsigned int *)(a1 + 96);
}

uint64_t sub_491B44@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 80);
  *a2 = *(void *)(result + 72) + 144 * *(unsigned int *)(result + 96);
  a2[1] = v2;
  return result;
}

__n128 sub_491B5C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 72);
  *a2 = result;
  return result;
}

uint64_t sub_491B68(uint64_t a1)
{
  return 954437177 * ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4) - *(_DWORD *)(a1 + 96);
}

uint64_t sub_491B8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

BOOL sub_491B94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v1 = *(void *)(a1 + 80);
  if (v2 == v1) {
    return 1;
  }
  uint64_t v3 = v2 + 144;
  do
  {
    uint64_t v4 = *(void *)(v3 - 80);
    if (*(char *)(v3 - 65) >= 0) {
      uint64_t v4 = *(unsigned __int8 *)(v3 - 65);
    }
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = v3 == v1;
    }
    else {
      BOOL v6 = 1;
    }
    v3 += 144;
  }
  while (!v6);
  return result;
}

void sub_491BD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4));
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (*(char *)(v4 + 79) < 0)
      {
        sub_4200(__p, *(void **)(v4 + 56), *(void *)(v4 + 64));
      }
      else
      {
        long long v7 = *(_OWORD *)(v4 + 56);
        uint64_t v10 = *(void *)(v4 + 72);
        *(_OWORD *)__p = v7;
      }
      uint64_t v8 = sub_8B3D0((void ***)a2, v6, (__n128 *)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v8 + 24;
      v4 += 144;
    }
    while (v4 != v5);
  }
}

void sub_491CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = (void **)*v14;
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  long long v17 = (void **)v14[1];
  int64_t v18 = *v14;
  if (v17 != v16)
  {
    do
    {
      if (*((char *)v17 - 1) < 0) {
        operator delete(*(v17 - 3));
      }
      v17 -= 3;
    }
    while (v17 != v16);
    int64_t v18 = *v14;
  }
  v14[1] = v16;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

char *sub_491D3C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      long long v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        long long v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        long long v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          long long v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    long long v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      __n128 v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unsigned int v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unsigned int v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  __n128 v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    __n128 v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  __n128 v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_492094(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4920AC(void *a1, char *__src, _OWORD *a3)
{
  uint64_t v4 = __src;
  unint64_t v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      long long v23 = a3[1];
      *(_OWORD *)__src = *a3;
      *((_OWORD *)__src + 1) = v23;
      a1[1] = __src + 32;
    }
    else
    {
      uint64_t v8 = __src + 32;
      uint64_t v9 = v6 - 32;
      unint64_t v10 = (_OWORD *)a1[1];
      if ((unint64_t)v6 >= 0x20)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          long long v12 = *((_OWORD *)v9 + 1);
          v9 += 32;
          _OWORD *v10 = v11;
          v10[1] = v12;
          v10 += 2;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8) {
        memmove(&v6[-32 * ((v6 - v8) >> 5)], __src, v6 - v8 - 6);
      }
      long long v13 = *a3;
      *(_OWORD *)(v4 + 10) = *(_OWORD *)((char *)a3 + 10);
      *(_OWORD *)uint64_t v4 = v13;
    }
    return v4;
  }
  unint64_t v14 = (char *)*a1;
  unint64_t v15 = ((uint64_t)&v6[-*a1] >> 5) + 1;
  if (v15 >> 59) {
    sub_2E00();
  }
  uint64_t v16 = v7 - (void)v14;
  if (v16 >> 4 > v15) {
    unint64_t v15 = v16 >> 4;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 59) {
      sub_188D718();
    }
    unint64_t v18 = (char *)operator new(32 * v17);
    uint64_t v19 = v4 - v14;
    uint64_t v20 = (v4 - v14) >> 5;
    uint64_t v21 = &v18[32 * v20];
    uint64_t v22 = &v18[32 * v17];
    if (v20 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v18 = 0;
  uint64_t v19 = __src - v14;
  uint64_t v20 = (__src - v14) >> 5;
  uint64_t v21 = (char *)(32 * v20);
  uint64_t v22 = 0;
  if (!v20)
  {
LABEL_20:
    if (v19 < 1)
    {
      if (v14 == v4) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v19 >> 4;
      }
      if (v25 >> 59) {
        sub_188D718();
      }
      unint64_t v26 = (char *)operator new(32 * v25);
      uint64_t v21 = &v26[32 * (v25 >> 2)];
      uint64_t v22 = &v26[32 * v25];
      if (v18)
      {
        operator delete(v18);
        unint64_t v14 = (char *)*a1;
      }
    }
    else
    {
      if (v20 >= -1) {
        unint64_t v24 = v20 + 1;
      }
      else {
        unint64_t v24 = v20 + 2;
      }
      v21 -= 32 * (v24 >> 1);
    }
  }
LABEL_31:
  long long v27 = a3[1];
  *(_OWORD *)uint64_t v21 = *a3;
  *((_OWORD *)v21 + 1) = v27;
  uint64_t v28 = v21;
  if (v14 != v4)
  {
    unint64_t v29 = v4;
    unsigned int v30 = v21;
    do
    {
      long long v31 = *((_OWORD *)v29 - 2);
      uint64_t v28 = (char *)(v30 - 2);
      *(_OWORD *)((char *)v30 - 22) = *(_OWORD *)(v29 - 22);
      *(v30 - 2) = v31;
      v29 -= 32;
      v30 -= 2;
    }
    while (v29 != v14);
  }
  uint64_t v32 = (char *)a1[1];
  int64_t v33 = v32 - v4;
  if (v32 != v4) {
    memmove(v21 + 32, v4, v33 - 6);
  }
  uint64_t v34 = (char *)*a1;
  *a1 = v28;
  a1[1] = &v21[v33 + 32];
  a1[2] = v22;
  if (v34) {
    operator delete(v34);
  }
  return v21;
}

void sub_4922E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_492300(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x333333333333334) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 80 * a2;
  unint64_t v6 = (char *)operator new(80 * a2);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9];
    long long v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 80];
    *((void *)v10 - 8) = *(void *)&v4[v9 - 64];
    *((_OWORD *)v10 - 5) = v12;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    *((void *)v11 - 10) = 0;
    *((_DWORD *)v10 - 14) = *(_DWORD *)&v4[v9 - 56];
    *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
    *((void *)v10 - 4) = *(void *)&v4[v9 - 32];
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    long long v13 = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *(_OWORD *)(v10 - 24) = v13;
    v9 -= 80;
  }
  while (&v4[v9] != v2);
  unint64_t v14 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      unint64_t v15 = (void *)*((void *)v2 - 6);
      if (v15)
      {
        *((void *)v2 - 5) = v15;
        operator delete(v15);
      }
      if (*(v2 - 57) < 0) {
        operator delete(*((void **)v2 - 10));
      }
      v2 -= 80;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_15:
    operator delete(v2);
  }
}

uint64_t sub_492474(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)*a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v17 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x199999999999999) {
      unint64_t v19 = 0x333333333333333;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v44 = a1 + 2;
    if (v19)
    {
      if (v19 > 0x333333333333333) {
        sub_188D718();
      }
      uint64_t v20 = (char *)operator new(80 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v40 = v20;
    uint64_t v41 = &v20[80 * v8];
    long long v42 = v41;
    uint64_t v43 = &v20[80 * v19];
    sub_492998((uint64_t)&v40, (long long *)a3);
    unint64_t v24 = v41;
    unint64_t v25 = *a1;
    unint64_t v26 = v41;
    if (*a1 != (char *)v4)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = &v24[v27];
        uint64_t v29 = v4 + v27;
        long long v30 = *(_OWORD *)(v4 + v27 - 80);
        *((void *)v28 - 8) = *(void *)(v4 + v27 - 64);
        *((_OWORD *)v28 - 5) = v30;
        *(void *)(v29 - 72) = 0;
        *(void *)(v29 - 64) = 0;
        *(void *)(v29 - 80) = 0;
        *((_DWORD *)v28 - 14) = *(_DWORD *)(v4 + v27 - 56);
        *((void *)v28 - 5) = 0;
        *((void *)v28 - 4) = 0;
        *((void *)v28 - 6) = 0;
        *((_OWORD *)v28 - 3) = *(_OWORD *)(v4 + v27 - 48);
        *((void *)v28 - 4) = *(void *)(v4 + v27 - 32);
        *(void *)(v29 - 48) = 0;
        *(void *)(v29 - 40) = 0;
        *(void *)(v29 - 32) = 0;
        long long v31 = *(_OWORD *)(v4 + v27 - 24);
        *((void *)v28 - 1) = *(void *)(v4 + v27 - 8);
        *(_OWORD *)(v28 - 24) = v31;
        v27 -= 80;
      }
      while ((char *)(v4 + v27) != v25);
      unint64_t v26 = &v24[v27];
    }
    uint64_t v41 = v26;
    uint64_t v32 = a1[1];
    int64_t v33 = v42;
    if (v32 != (char *)v4)
    {
      do
      {
        long long v34 = *(_OWORD *)v4;
        *((void *)v33 + 2) = *(void *)(v4 + 16);
        *(_OWORD *)int64_t v33 = v34;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)uint64_t v4 = 0;
        *((_DWORD *)v33 + 6) = *(_DWORD *)(v4 + 24);
        *((void *)v33 + 5) = 0;
        *((void *)v33 + 6) = 0;
        *((void *)v33 + 4) = 0;
        *((_OWORD *)v33 + 2) = *(_OWORD *)(v4 + 32);
        *((void *)v33 + 6) = *(void *)(v4 + 48);
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
        *(void *)(v4 + 48) = 0;
        long long v35 = *(_OWORD *)(v4 + 56);
        *((void *)v33 + 9) = *(void *)(v4 + 72);
        *(_OWORD *)(v33 + 56) = v35;
        v33 += 80;
        v4 += 80;
      }
      while ((char *)v4 != v32);
      unint64_t v26 = v41;
      uint64_t v4 = (uint64_t)a1[1];
    }
    long long v36 = *a1;
    *a1 = v26;
    a1[1] = v33;
    uint64_t v37 = a1[2];
    a1[2] = v43;
    long long v42 = (char *)v4;
    uint64_t v43 = v37;
    uint64_t v40 = v36;
    uint64_t v41 = v36;
    if ((char *)v4 == v36)
    {
      if (!v4) {
        return (uint64_t)v24;
      }
    }
    else
    {
      do
      {
        long long v42 = (char *)(v4 - 80);
        uint64_t v39 = *(void **)(v4 - 48);
        if (v39)
        {
          *(void *)(v4 - 40) = v39;
          operator delete(v39);
        }
        if (*(char *)(v4 - 57) < 0) {
          operator delete(*(void **)(v4 - 80));
        }
        uint64_t v4 = (uint64_t)v42;
      }
      while (v42 != v36);
      uint64_t v4 = (uint64_t)v40;
      if (!v40) {
        return (uint64_t)v24;
      }
    }
    operator delete((void *)v4);
    return (uint64_t)v24;
  }
  if (a2 == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v21;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v22 = &v7[80 * v8];
    *((_DWORD *)v22 + 6) = *(_DWORD *)(a3 + 24);
    *((void *)v22 + 5) = 0;
    *((void *)v22 + 6) = 0;
    *((void *)v22 + 4) = 0;
    *((_OWORD *)v22 + 2) = *(_OWORD *)(a3 + 32);
    *((void *)v22 + 6) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    long long v23 = *(_OWORD *)(a3 + 56);
    *((void *)v22 + 9) = *(void *)(a3 + 72);
    *(_OWORD *)(v22 + 56) = v23;
    a1[1] = (char *)(a2 + 80);
  }
  else
  {
    sub_492814((uint64_t)a1, a2, v6, a2 + 80);
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    long long v10 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v4 = v10;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    long long v11 = &v7[80 * v8];
    unint64_t v14 = (void *)*((void *)v11 + 4);
    long long v13 = v11 + 32;
    long long v12 = v14;
    *((_DWORD *)v13 - 2) = *(_DWORD *)(a3 + 24);
    if (v14)
    {
      *(void *)&v7[80 * v8 + 40] = v12;
      operator delete(v12);
      *long long v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    *(_OWORD *)long long v13 = *(_OWORD *)(a3 + 32);
    unint64_t v15 = &v7[80 * v8];
    *((void *)v15 + 6) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    long long v16 = *(_OWORD *)(a3 + 56);
    *((void *)v15 + 9) = *(void *)(a3 + 72);
    *(_OWORD *)(v15 + 56) = v16;
  }
  return v4;
}

void sub_492800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A9028((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_492814(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    *(void *)(a1 + 8) = v4;
    if (v4 == a4) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = (long long *)(a2 + v4 - a4);
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      long long v8 = *v6;
      *(void *)(v7 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = 0;
      *(_DWORD *)(v7 + 24) = *((_DWORD *)v6 + 6);
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      *(_OWORD *)(v7 + 32) = v6[2];
      *(void *)(v7 + 48) = *((void *)v6 + 6);
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 6) = 0;
      __n128 result = *(__n128 *)((char *)v6 + 56);
      *(void *)(v7 + 72) = *((void *)v6 + 9);
      *(__n128 *)(v7 + 56) = result;
      v7 += 80;
      v6 += 5;
    }
    while ((unint64_t)v6 < a3);
    *(void *)(a1 + 8) = v7;
    if (v4 == a4) {
      return result;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = -16 * ((v4 - a4) >> 4);
  do
  {
    uint64_t v14 = v4 + v10;
    unint64_t v15 = (void **)(v4 + v10 - 80);
    if (*(char *)(v4 + v10 - 57) < 0) {
      operator delete(*v15);
    }
    long long v16 = (long long *)(v5 + v10 - 80);
    long long v17 = *v16;
    *(void *)(v4 + v10 - 64) = *(void *)(v5 + v10 - 64);
    *(_OWORD *)unint64_t v15 = v17;
    *(unsigned char *)(v5 + v10 - 57) = 0;
    *(unsigned char *)long long v16 = 0;
    uint64_t v20 = *(void **)(v14 - 48);
    unint64_t v19 = (void *)(v14 - 48);
    unint64_t v18 = v20;
    *((_DWORD *)v19 - 2) = *(_DWORD *)(v5 + v10 - 56);
    if (v20)
    {
      *(void *)(v4 + v10 - 40) = v18;
      operator delete(v18);
      *unint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
    }
    uint64_t v12 = v5 + v10;
    *(_OWORD *)unint64_t v19 = *(_OWORD *)(v5 + v10 - 48);
    uint64_t v13 = v4 + v10;
    *(void *)(v13 - 32) = *(void *)(v5 + v10 - 32);
    *(void *)(v12 - 48) = 0;
    *(void *)(v12 - 40) = 0;
    *(void *)(v12 - 32) = 0;
    __n128 result = *(__n128 *)(v5 + v10 - 24);
    *(void *)(v13 - 8) = *(void *)(v5 + v10 - 8);
    *(__n128 *)(v13 - 24) = result;
    v10 -= 80;
  }
  while (v11 != v10);
  return result;
}

__n128 sub_492998(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(long long **)(a1 + 16);
  if (v4 == *(long long **)(a1 + 24))
  {
    unint64_t v5 = *(long long **)a1;
    unint64_t v6 = *(long long **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v19 = 0x999999999999999ALL * (v4 - v5);
      if (v4 == v5) {
        unint64_t v19 = 1;
      }
      if (v19 >= 0x333333333333334) {
        sub_188D718();
      }
      unint64_t v20 = v19 >> 2;
      uint64_t v21 = 80 * v19;
      uint64_t v22 = (char *)operator new(80 * v19);
      long long v23 = &v22[80 * v20];
      unint64_t v24 = &v22[v21];
      if (v4 == v6)
      {
        *(void *)a1 = v22;
        *(void *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = v23;
        *(void *)(a1 + 24) = v24;
      }
      else
      {
        unint64_t v25 = &v23[(char *)v4 - (char *)v6];
        uint64_t v26 = 80 * v20;
        do
        {
          uint64_t v27 = &v22[v26];
          long long v28 = *v6;
          *((void *)v27 + 2) = *((void *)v6 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          *(void *)unint64_t v6 = 0;
          *((_DWORD *)v27 + 6) = *((_DWORD *)v6 + 6);
          *((_OWORD *)v27 + 2) = v6[2];
          *((void *)v27 + 6) = *((void *)v6 + 6);
          *((void *)v6 + 4) = 0;
          *((void *)v6 + 5) = 0;
          *((void *)v6 + 6) = 0;
          long long v29 = *(long long *)((char *)v6 + 56);
          *((void *)v27 + 9) = *((void *)v6 + 9);
          *(_OWORD *)(v27 + 56) = v29;
          v26 += 80;
          v6 += 5;
        }
        while (v27 + 80 != v25);
        unint64_t v5 = *(long long **)a1;
        uint64_t v30 = *(void *)(a1 + 8);
        uint64_t v31 = *(void *)(a1 + 16);
        *(void *)a1 = v22;
        *(void *)(a1 + 8) = v23;
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = v24;
        while (v31 != v30)
        {
          uint64_t v32 = *(void **)(v31 - 48);
          if (v32)
          {
            *(void *)(v31 - 40) = v32;
            operator delete(v32);
          }
          if (*(char *)(v31 - 57) < 0) {
            operator delete(*(void **)(v31 - 80));
          }
          v31 -= 80;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(long long **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        int64_t v33 = &v6[-5 * v9];
      }
      else
      {
        uint64_t v11 = -5 * v9;
        do
        {
          uint64_t v14 = &v6[v11];
          if (SBYTE7(v6[v11 + 1]) < 0) {
            operator delete(*(void **)v14);
          }
          long long v15 = *v6;
          *((void *)v14 + 2) = *((void *)v6 + 2);
          *uint64_t v14 = v15;
          *((unsigned char *)v6 + 23) = 0;
          *(unsigned char *)unint64_t v6 = 0;
          unint64_t v18 = (void *)*((void *)v14 + 4);
          long long v17 = v14 + 2;
          long long v16 = v18;
          *((_DWORD *)v17 - 2) = *((_DWORD *)v6 + 6);
          if (v18)
          {
            *((void *)&v6[v11 + 2] + 1) = v16;
            operator delete(v16);
            *long long v17 = 0;
            v17[1] = 0;
            v17[2] = 0;
          }
          *(_OWORD *)long long v17 = v6[2];
          uint64_t v12 = &v6[v11];
          *((void *)v12 + 6) = *((void *)v6 + 6);
          *((void *)v6 + 4) = 0;
          *((void *)v6 + 5) = 0;
          *((void *)v6 + 6) = 0;
          long long v13 = *(long long *)((char *)v6 + 56);
          *((void *)v12 + 9) = *((void *)v6 + 9);
          *(long long *)((char *)v12 + 56) = v13;
          v6 += 5;
        }
        while (v6 != v4);
        uint64_t v4 = *(long long **)(a1 + 8);
        int64_t v33 = &v6[5 * v10];
      }
      *(void *)(a1 + 8) = &v4[5 * v10];
      *(void *)(a1 + 16) = v33;
      uint64_t v4 = v33;
    }
  }
  long long v34 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *uint64_t v4 = v34;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *((_DWORD *)v4 + 6) = *((_DWORD *)a2 + 6);
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 4) = 0;
  v4[2] = a2[2];
  *((void *)v4 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *((void *)v4 + 9) = *((void *)a2 + 9);
  *(long long *)((char *)v4 + 56) = (__int128)result;
  *(void *)(a1 + 16) += 80;
  return result;
}

char *sub_492C5C(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      long long v24 = a3[1];
      *(_OWORD *)uint64_t v8 = *a3;
      *((_OWORD *)v8 + 1) = v24;
      a1[1] = v8 + 32;
    }
    else
    {
      uint64_t v10 = v8 + 32;
      uint64_t v11 = (long long *)(v5 - 32);
      uint64_t v12 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          long long v13 = *v11;
          long long v14 = v11[1];
          v11 += 2;
          *(_OWORD *)uint64_t v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 32;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 32 * ((uint64_t)(v5 - (void)v10) >> 5)), v8, v5 - (void)v10);
      }
      long long v15 = a3[1];
      *(_OWORD *)uint64_t v8 = *a3;
      *((_OWORD *)v8 + 1) = v15;
    }
    return v8;
  }
  unint64_t v16 = ((uint64_t)(v5 - (void)v6) >> 5) + 1;
  if (v16 >> 59) {
    sub_2E00();
  }
  uint64_t v18 = v9 - (void)v6;
  if (v18 >> 4 > v16) {
    unint64_t v16 = v18 >> 4;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v16;
  }
  if (v19)
  {
    if (v19 >> 59) {
      sub_188D718();
    }
    unint64_t v20 = (char *)operator new(32 * v19);
    uint64_t v21 = v7 >> 5;
    uint64_t v22 = &v20[32 * (v7 >> 5)];
    long long v23 = &v20[32 * v19];
    if (v7 >> 5 != v19) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v20 = 0;
  uint64_t v21 = v7 >> 5;
  uint64_t v22 = (char *)(32 * (v7 >> 5));
  long long v23 = 0;
  if (!(v7 >> 5))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v26 = 1;
      }
      else {
        unint64_t v26 = v7 >> 4;
      }
      if (v26 >> 59) {
        sub_188D718();
      }
      uint64_t v27 = (char *)operator new(32 * v26);
      uint64_t v22 = &v27[32 * (v26 >> 2)];
      long long v23 = &v27[32 * v26];
      if (v20)
      {
        operator delete(v20);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      if (v21 >= -1) {
        unint64_t v25 = v21 + 1;
      }
      else {
        unint64_t v25 = v21 + 2;
      }
      v22 -= 32 * (v25 >> 1);
    }
  }
LABEL_31:
  long long v28 = a3[1];
  *(_OWORD *)uint64_t v22 = *a3;
  *((_OWORD *)v22 + 1) = v28;
  long long v29 = v22;
  if (v6 != v8)
  {
    uint64_t v30 = v8;
    uint64_t v31 = v22;
    do
    {
      long long v32 = *((_OWORD *)v30 - 1);
      long long v29 = v31 - 32;
      *((_OWORD *)v31 - 2) = *((_OWORD *)v30 - 2);
      *((_OWORD *)v31 - 1) = v32;
      v30 -= 32;
      v31 -= 32;
    }
    while (v30 != v6);
  }
  int64_t v33 = a1[1];
  int64_t v34 = v33 - v8;
  if (v33 != v8) {
    memmove(v22 + 32, v8, v33 - v8);
  }
  long long v35 = *a1;
  *a1 = v29;
  a1[1] = &v22[v34 + 32];
  a1[2] = v23;
  if (v35) {
    operator delete(v35);
  }
  return v22;
}

void sub_492E90(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_492EA8(char **a1, char *__src, uint64_t *a3)
{
  uint64_t v4 = __src;
  unint64_t v6 = a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      *(_OWORD *)__src = *(_OWORD *)a3;
      a1[1] = __src + 16;
    }
    else
    {
      uint64_t v8 = __src + 16;
      unint64_t v9 = v6 - 16;
      uint64_t v10 = a1[1];
      if ((unint64_t)v6 >= 0x10)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          v9 += 16;
          *(_OWORD *)uint64_t v10 = v11;
          v10 += 16;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8) {
        memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8 - 4);
      }
      uint64_t v12 = *a3;
      *((_DWORD *)v4 + 2) = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v4 = v12;
    }
    return v4;
  }
  long long v13 = *a1;
  unint64_t v14 = ((v6 - *a1) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v15 = v7 - (void)v13;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_188D718();
    }
    long long v17 = (char *)operator new(16 * v16);
    uint64_t v18 = v4 - v13;
    uint64_t v19 = (v4 - v13) >> 4;
    unint64_t v20 = &v17[16 * v19];
    uint64_t v21 = &v17[16 * v16];
    if (v19 != v16) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  long long v17 = 0;
  uint64_t v18 = __src - v13;
  uint64_t v19 = (__src - v13) >> 4;
  unint64_t v20 = (char *)(16 * v19);
  uint64_t v21 = 0;
  if (!v19)
  {
LABEL_20:
    if (v18 < 1)
    {
      if (v13 == v4) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v18 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      long long v24 = (char *)operator new(16 * v23);
      unint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v17)
      {
        operator delete(v17);
        long long v13 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)unint64_t v20 = *(_OWORD *)a3;
  unint64_t v25 = v20;
  if (v13 != v4)
  {
    unint64_t v26 = v4;
    unint64_t v25 = v20;
    do
    {
      uint64_t v27 = *((void *)v26 - 2);
      v26 -= 16;
      int v28 = *((_DWORD *)v26 + 2);
      *((void *)v25 - 2) = v27;
      v25 -= 16;
      *((_DWORD *)v25 + 2) = v28;
    }
    while (v26 != v13);
  }
  long long v29 = a1[1];
  int64_t v30 = v29 - v4;
  if (v29 != v4) {
    memmove(v20 + 16, v4, v30 - 4);
  }
  uint64_t v31 = *a1;
  *a1 = v25;
  a1[1] = &v20[v30 + 16];
  a1[2] = v21;
  if (v31) {
    operator delete(v31);
  }
  return v20;
}

void sub_4930D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4930EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v7 = a1;
    while (1)
    {
      sub_490C14((uint64_t)&v15, *v7);
      uint64_t v8 = sub_493230(a3, a4, (uint64_t)&v15);
      if (__p)
      {
        unint64_t v25 = __p;
        operator delete(__p);
      }
      unint64_t v9 = (char *)v22;
      if (v22)
      {
        uint64_t v10 = v23;
        long long v11 = v22;
        if (v23 != v22)
        {
          do
          {
            uint64_t v12 = (void *)*((void *)v10 - 6);
            if (v12)
            {
              *((void *)v10 - 5) = v12;
              operator delete(v12);
            }
            if (*(v10 - 57) < 0) {
              operator delete(*((void **)v10 - 10));
            }
            v10 -= 80;
          }
          while (v10 != v9);
          long long v11 = v22;
        }
        unint64_t v23 = v9;
        operator delete(v11);
      }
      if (v21 < 0) {
        break;
      }
      long long v13 = v18;
      if (v18) {
        goto LABEL_18;
      }
LABEL_19:
      if (v16)
      {
        long long v17 = v16;
        operator delete(v16);
      }
      a4 = (uint64_t)(v8 + 18);
      if (++v7 == a2) {
        return a3;
      }
    }
    operator delete(v20);
    long long v13 = v18;
    if (!v18) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v19 = v13;
    operator delete(v13);
    goto LABEL_19;
  }
  return a3;
}

void sub_49321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_493230(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 144;
  uint64_t v8 = (void *)(*a1 + 144 * v7);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v15 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xE38E38E38E38E3) {
      unint64_t v17 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v17 = v15;
    }
    int64_t v30 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(144 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    __p = v18;
    uint64_t v27 = &v18[144 * v7];
    int v28 = v27;
    long long v29 = &v18[144 * v17];
    sub_493764((uint64_t)&__p, a3);
    uint64_t v8 = (void *)sub_493A48(a1, &__p, (uint64_t)v8);
    unint64_t v22 = v27;
    for (uint64_t i = v28; v28 != v22; uint64_t i = v28)
    {
      int v28 = i - 144;
      sub_489CF4((uint64_t)(i - 144));
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (v8 != (void *)v6)
    {
      uint64_t v10 = v8 + 18;
      uint64_t v11 = v6 - 144;
      if (v6 < 0x90)
      {
        a1[1] = v6;
        if ((void *)v6 == v10)
        {
LABEL_26:
          sub_4935C8((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 144;
        uint64_t v13 = a1[1];
        do
        {
          *(void *)uint64_t v13 = *(void *)v12;
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
          *(void *)(v13 + 24) = *(void *)(v12 + 24);
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 40) = 0;
          *(void *)(v13 + 48) = 0;
          *(_OWORD *)(v13 + 32) = *(_OWORD *)(v12 + 32);
          *(void *)(v13 + 48) = *(void *)(v12 + 48);
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          *(void *)(v12 + 48) = 0;
          long long v14 = *(_OWORD *)(v12 + 56);
          *(void *)(v13 + 72) = *(void *)(v12 + 72);
          *(_OWORD *)(v13 + 56) = v14;
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 72) = 0;
          *(void *)(v12 + 56) = 0;
          *(void *)(v13 + 80) = 0;
          *(void *)(v13 + 88) = 0;
          *(void *)(v13 + 96) = 0;
          *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
          *(void *)(v13 + 96) = *(void *)(v12 + 96);
          *(void *)(v12 + 88) = 0;
          *(void *)(v12 + 96) = 0;
          *(void *)(v12 + 80) = 0;
          *(_OWORD *)(v13 + 104) = *(_OWORD *)(v12 + 104);
          *(void *)(v13 + 128) = 0;
          *(void *)(v13 + 136) = 0;
          *(void *)(v13 + 120) = 0;
          *(_OWORD *)(v13 + 120) = *(_OWORD *)(v12 + 120);
          *(void *)(v13 + 136) = *(void *)(v12 + 136);
          *(void *)(v12 + 120) = 0;
          *(void *)(v12 + 128) = 0;
          *(void *)(v12 + 136) = 0;
          v13 += 144;
          v12 += 144;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((void *)v6 == v10) {
          goto LABEL_26;
        }
      }
      uint64_t v23 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v24 = 144 * v7 + v5 - 144;
      do
      {
        sub_4935C8(v11, v24 + v23);
        v11 -= 144;
        v23 -= 144;
      }
      while (v23);
      goto LABEL_26;
    }
    *uint64_t v8 = *(void *)a3;
    uint64_t v19 = v5 + 144 * v7;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 8) = 0;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(v19 + 24) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    *(void *)(v19 + 48) = 0;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(a3 + 32);
    *(void *)(v19 + 48) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    long long v20 = *(_OWORD *)(a3 + 56);
    *(void *)(v19 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(v19 + 56) = v20;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(v19 + 80) = 0;
    *(void *)(v19 + 88) = 0;
    *(void *)(v19 + 96) = 0;
    *(_OWORD *)(v19 + 80) = *(_OWORD *)(a3 + 80);
    *(void *)(v19 + 96) = *(void *)(a3 + 96);
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(v19 + 104) = *(_OWORD *)(a3 + 104);
    *(void *)(v19 + 128) = 0;
    *(void *)(v19 + 136) = 0;
    *(void *)(v19 + 120) = 0;
    *(_OWORD *)(v19 + 120) = *(_OWORD *)(a3 + 120);
    *(void *)(v19 + 136) = *(void *)(a3 + 136);
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    a1[1] = (uint64_t)(v8 + 18);
  }
  return v8;
}

void sub_4935B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_493C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4935C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
    *unint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  uint64_t v10 = (void **)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = *(void **)(a1 + 80);
    if (v12 != v11)
    {
      do
      {
        long long v14 = *(void **)(v12 - 48);
        if (v14)
        {
          *(void *)(v12 - 40) = v14;
          operator delete(v14);
        }
        if (*(char *)(v12 - 57) < 0) {
          operator delete(*(void **)(v12 - 80));
        }
        v12 -= 80;
      }
      while (v12 != v11);
      uint64_t v13 = *v10;
    }
    *(void *)(a1 + 88) = v11;
    operator delete(v13);
    void *v10 = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  unint64_t v15 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  if (v15)
  {
    *(void *)(a1 + 128) = v15;
    operator delete(v15);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return a1;
}

__n128 sub_493764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 != *(void **)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x1C71C71C71C71C72 * (((char *)v4 - v6) >> 4);
    if (v4 == (void *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x1C71C71C71C71C8) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 144 * v12;
    unint64_t v15 = (char *)operator new(144 * v12);
    unint64_t v16 = &v15[144 * v13];
    unint64_t v17 = &v15[v14];
    if (v4 == (void *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v18 = (char *)v4 + (void)v16 - v5;
      uint64_t v19 = 144 * v13;
      do
      {
        long long v20 = &v15[v19];
        *(void *)long long v20 = *(void *)v5;
        *(_OWORD *)(v20 + 8) = *(_OWORD *)(v5 + 8);
        *((void *)v20 + 3) = *(void *)(v5 + 24);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *((_OWORD *)v20 + 2) = *(_OWORD *)(v5 + 32);
        *((void *)v20 + 6) = *(void *)(v5 + 48);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        long long v21 = *(_OWORD *)(v5 + 56);
        *((void *)v20 + 9) = *(void *)(v5 + 72);
        *(_OWORD *)(v20 + 56) = v21;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 56) = 0;
        *((_OWORD *)v20 + 5) = *(_OWORD *)(v5 + 80);
        *((void *)v20 + 12) = *(void *)(v5 + 96);
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        *(void *)(v5 + 96) = 0;
        *(_OWORD *)(v20 + 104) = *(_OWORD *)(v5 + 104);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(v5 + 120);
        *((void *)v20 + 17) = *(void *)(v5 + 136);
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        *(void *)(v5 + 136) = 0;
        v19 += 144;
        v5 += 144;
      }
      while (v20 + 144 != v18);
      unint64_t v6 = *(unsigned char **)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(void *)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v17;
      while (v23 != v22)
      {
        v23 -= 144;
        sub_489CF4(v23);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((void *)v5 == v4)
  {
    unint64_t v11 = v5 - 144 * v9;
  }
  else
  {
    do
    {
      sub_4935C8(v5 + 144 * v10, v5);
      v5 += 144;
    }
    while ((void *)v5 != v4);
    uint64_t v4 = *(void **)(a1 + 8);
    unint64_t v11 = v5 + 144 * v10;
  }
  *(void *)(a1 + 8) = &v4[18 * v10];
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = (void *)v11;
LABEL_22:
  *uint64_t v4 = *(void *)a2;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(a2 + 8);
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  v4[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  long long v24 = *(_OWORD *)(a2 + 56);
  v4[9] = *(void *)(a2 + 72);
  *(_OWORD *)(v4 + 7) = v24;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *((_OWORD *)v4 + 5) = *(_OWORD *)(a2 + 80);
  v4[12] = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(v4 + 13) = *(_OWORD *)(a2 + 104);
  v4[16] = 0;
  v4[17] = 0;
  v4[15] = 0;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(v4 + 15) = result;
  v4[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 16) += 144;
  return result;
}

uint64_t sub_493A48(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = result + v7;
      *(void *)(v9 - 144) = *(void *)(a3 + v7 - 144);
      *(void *)(v9 - 136) = 0;
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 120) = 0;
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(a3 + v7 - 136);
      *(void *)(v9 - 120) = *(void *)(a3 + v7 - 120);
      *(void *)(v8 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 120) = 0;
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v9 - 96) = *(void *)(a3 + v7 - 96);
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      long long v10 = *(_OWORD *)(a3 + v7 - 88);
      uint64_t v11 = *(void *)(a3 + v7 - 72);
      *(void *)(v8 - 96) = 0;
      *(void *)(v9 - 72) = v11;
      *(_OWORD *)(v9 - 88) = v10;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v9 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 64) = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(_OWORD *)(v9 - 40) = v12;
      *(void *)(v9 - 24) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 144;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v13 = a1[1];
  uint64_t v14 = a2[2];
  if (v13 != a3)
  {
    do
    {
      *(void *)uint64_t v14 = *(void *)a3;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(v14 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v14 + 48) = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      long long v15 = *(_OWORD *)(a3 + 56);
      *(void *)(v14 + 72) = *(void *)(a3 + 72);
      *(_OWORD *)(v14 + 56) = v15;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(v14 + 80) = 0;
      *(void *)(v14 + 88) = 0;
      *(void *)(v14 + 96) = 0;
      *(_OWORD *)(v14 + 80) = *(_OWORD *)(a3 + 80);
      *(void *)(v14 + 96) = *(void *)(a3 + 96);
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 80) = 0;
      *(_OWORD *)(v14 + 104) = *(_OWORD *)(a3 + 104);
      *(void *)(v14 + 128) = 0;
      *(void *)(v14 + 136) = 0;
      *(void *)(v14 + 120) = 0;
      *(_OWORD *)(v14 + 120) = *(_OWORD *)(a3 + 120);
      *(void *)(v14 + 136) = *(void *)(a3 + 136);
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 136) = 0;
      v14 += 144;
      a3 += 144;
    }
    while (a3 != v13);
    uint64_t v6 = a2[1];
  }
  a2[2] = v14;
  uint64_t v16 = *a1;
  *a1 = v6;
  a2[1] = v16;
  uint64_t v17 = a1[1];
  a1[1] = a2[2];
  a2[2] = v17;
  uint64_t v18 = a1[2];
  a1[2] = a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

uint64_t sub_493C2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_489CF4(i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_493C80(char **a1, char *__src, uint64_t *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      *(_OWORD *)__src = *(_OWORD *)a3;
      a1[1] = __src + 16;
    }
    else
    {
      uint64_t v8 = __src + 16;
      uint64_t v9 = v6 - 16;
      long long v10 = a1[1];
      if ((unint64_t)v6 >= 0x10)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          v9 += 16;
          *(_OWORD *)long long v10 = v11;
          v10 += 16;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8) {
        memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8 - 7);
      }
      uint64_t v12 = *a3;
      v4[8] = *((unsigned char *)a3 + 8);
      *(void *)uint64_t v4 = v12;
    }
    return v4;
  }
  uint64_t v13 = *a1;
  unint64_t v14 = ((v6 - *a1) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v15 = v7 - (void)v13;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(16 * v16);
    uint64_t v18 = v4 - v13;
    uint64_t v19 = (v4 - v13) >> 4;
    long long v20 = &v17[16 * v19];
    long long v21 = &v17[16 * v16];
    if (v19 != v16) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v17 = 0;
  uint64_t v18 = __src - v13;
  uint64_t v19 = (__src - v13) >> 4;
  long long v20 = (char *)(16 * v19);
  long long v21 = 0;
  if (!v19)
  {
LABEL_20:
    if (v18 < 1)
    {
      if (v13 == v4) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v18 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      long long v24 = (char *)operator new(16 * v23);
      long long v20 = &v24[16 * (v23 >> 2)];
      long long v21 = &v24[16 * v23];
      if (v17)
      {
        operator delete(v17);
        uint64_t v13 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)long long v20 = *(_OWORD *)a3;
  unint64_t v25 = v20;
  if (v13 != v4)
  {
    unint64_t v26 = v4;
    unint64_t v25 = v20;
    do
    {
      uint64_t v27 = *((void *)v26 - 2);
      v26 -= 16;
      char v28 = v26[8];
      *((void *)v25 - 2) = v27;
      v25 -= 16;
      v25[8] = v28;
    }
    while (v26 != v13);
  }
  long long v29 = a1[1];
  int64_t v30 = v29 - v4;
  if (v29 != v4) {
    memmove(v20 + 16, v4, v30 - 7);
  }
  uint64_t v31 = *a1;
  *a1 = v25;
  a1[1] = &v20[v30 + 16];
  a1[2] = v21;
  if (v31) {
    operator delete(v31);
  }
  return v20;
}

void sub_493EAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_493EC4(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 144 * a2;
  uint64_t v6 = (char *)operator new(144 * a2);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  do
  {
    long long v10 = &v4[v9];
    long long v11 = &v8[v9];
    *((void *)v11 - 18) = *(void *)&v4[v9 - 144];
    *(_OWORD *)(v11 - 136) = *(_OWORD *)&v4[v9 - 136];
    *((void *)v11 - 15) = *(void *)&v4[v9 - 120];
    *((void *)v10 - 17) = 0;
    *((void *)v10 - 16) = 0;
    *((void *)v10 - 15) = 0;
    *((_OWORD *)v11 - 7) = *(_OWORD *)&v4[v9 - 112];
    *((void *)v11 - 12) = *(void *)&v4[v9 - 96];
    *((void *)v10 - 14) = 0;
    *((void *)v10 - 13) = 0;
    long long v12 = *(_OWORD *)&v4[v9 - 88];
    uint64_t v13 = *(void *)&v4[v9 - 72];
    *((void *)v10 - 12) = 0;
    *((void *)v11 - 9) = v13;
    *(_OWORD *)(v11 - 88) = v12;
    *((void *)v10 - 10) = 0;
    *((void *)v10 - 9) = 0;
    long long v14 = *(_OWORD *)&v4[v9 - 64];
    *((void *)v10 - 11) = 0;
    *((_OWORD *)v11 - 4) = v14;
    *((void *)v11 - 6) = *(void *)&v4[v9 - 48];
    *((void *)v10 - 8) = 0;
    *((void *)v10 - 7) = 0;
    *((void *)v10 - 6) = 0;
    *(_OWORD *)(v11 - 40) = *(_OWORD *)&v4[v9 - 40];
    *(_OWORD *)(v11 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v11 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v10 - 3) = 0;
    *((void *)v10 - 2) = 0;
    *((void *)v10 - 1) = 0;
    v9 -= 144;
  }
  while (&v4[v9] != v2);
  uint64_t v15 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v15)
  {
    do
    {
      v2 -= 144;
      sub_489CF4((uint64_t)v2);
    }
    while (v2 != v15);
    uint64_t v2 = v15;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t *sub_494064(long long *a1, long long *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v7 = a1;
    int64x2_t v16 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    while (1)
    {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      if (*((char *)v7 + 23) < 0)
      {
        sub_4200(&v21, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        uint64_t v22 = *((void *)v7 + 2);
        long long v21 = v8;
      }
      unint64_t v23 = 0;
      long long v24 = 0;
      uint64_t v25 = 0;
      int64x2_t v26 = v16;
      char v28 = 0;
      uint64_t v29 = 0;
      __p = 0;
      uint64_t v9 = sub_493230(a3, a4, (uint64_t)&v17);
      if (__p)
      {
        char v28 = __p;
        operator delete(__p);
      }
      long long v10 = (char *)v23;
      if (v23)
      {
        long long v11 = v24;
        long long v12 = v23;
        if (v24 != v23)
        {
          do
          {
            uint64_t v13 = (void *)*((void *)v11 - 6);
            if (v13)
            {
              *((void *)v11 - 5) = v13;
              operator delete(v13);
            }
            if (*(v11 - 57) < 0) {
              operator delete(*((void **)v11 - 10));
            }
            v11 -= 80;
          }
          while (v11 != v10);
          long long v12 = v23;
        }
        long long v24 = v10;
        operator delete(v12);
      }
      if (SHIBYTE(v22) < 0) {
        break;
      }
      long long v14 = (void *)*((void *)&v19 + 1);
      if (*((void *)&v19 + 1)) {
        goto LABEL_21;
      }
LABEL_22:
      if ((void)v18)
      {
        *((void *)&v18 + 1) = v18;
        operator delete((void *)v18);
      }
      a4 = (uint64_t)(v9 + 18);
      unint64_t v7 = (long long *)((char *)v7 + 24);
      if (v7 == a2) {
        return a3;
      }
    }
    operator delete((void *)v21);
    long long v14 = (void *)*((void *)&v19 + 1);
    if (!*((void *)&v19 + 1)) {
      goto LABEL_22;
    }
LABEL_21:
    *(void *)&long long v20 = v14;
    operator delete(v14);
    goto LABEL_22;
  }
  return a3;
}

void sub_49420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    long long v18 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v18 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_494248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_489CF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_49425C()
{
  unk_2558BAF = 16641;
  word_2558B98 = 65;
  byte_2558BC7 = 1;
  byte_2558BB1 = 0;
}

uint64_t sub_494284(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_69510();
  sub_51C5C((uint64_t)v10);
  nullsub_1(v6);
  unint64_t v7 = (unsigned __int8 *)sub_487740(a3);
  if (sub_51D60(v7))
  {
    sub_487740(a3);
    return nullsub_1(v6);
  }
  long long v8 = (unsigned __int8 *)sub_68E9C((uint64_t)v6);
  uint64_t result = sub_51D60(v8);
  if (a1 == 1 && (result & 1) == 0 && a2 <= 0xC && ((1 << a2) & 0x1C09) != 0)
  {
    sub_68EA4((uint64_t)v6);
    return nullsub_1(v6);
  }
  return result;
}

BOOL sub_49433C(uint64_t a1)
{
  if (sub_486CEC(a1) == -1) {
    return 0;
  }
  uint64_t v2 = sub_487750(a1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  if (!v3 || !*(unsigned char *)(nullsub_1(a1) + 128)) {
    return 0;
  }
  uint64_t v4 = nullsub_1(a1);
  if (!*(unsigned char *)(v4 + 128))
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return sub_491B68(v4) != 0;
}

void sub_494404()
{
  unk_2558BDF = 16641;
  word_2558BC8 = 65;
  byte_2558BF7 = 1;
  byte_2558BE1 = 0;
}

uint64_t sub_49442C(unsigned int a1)
{
  uint64_t result = 3;
  switch(a1)
  {
    case 0u:
      return result;
    case 1u:
    case 0xCu:
      return 1;
    case 2u:
      return 2;
    case 3u:
      return 4;
    case 4u:
      return 5;
    case 5u:
    case 6u:
    case 7u:
      return 0;
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
      goto LABEL_5;
    default:
      if (a1 != 900)
      {
LABEL_5:
        uint64_t v3 = ((5243 * (a1 >> 2)) >> 17) - 1;
        if (v3 > 0x11) {
          return 0;
        }
        else {
          return byte_20E8170[v3];
        }
      }
      return result;
  }
}

BOOL sub_4944F0(char a1, int **a2)
{
  return (a1 & 1) != 0 || sub_C9A8(a2, 9000, 1);
}

BOOL sub_49450C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v42);
    sub_188FC78(v42, (uint64_t)"Journey has an invalid static departure time", 44);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_20;
  }
  int v10 = *(_DWORD *)(a1 + 128);
  if (v10 == 2)
  {
    int v11 = *(_DWORD *)(a1 + 4);
    if (v11 == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v42);
      sub_188FC78(v42, (uint64_t)"Journey based on realtime data has an invalid expected departure time", 69);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) == 0x7FFFFFFF)
    {
LABEL_18:
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v42);
      sub_188FC78(v42, (uint64_t)"Journey has an invalid static arrival time", 42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_20;
    }
    int v14 = *(_DWORD *)(a1 + 16);
    if (v14 == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v42);
        sub_188FC78(v42, (uint64_t)"Journey based on realtime data has an invalid expected arrival time", 67);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
LABEL_20:
        if (v41 < 0) {
          operator delete(__p[0]);
        }
        if (v43 < 0) {
          operator delete((void *)v42[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
      return result;
    }
    if (v11 > v14 && a2)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v42);
      sub_188FC78(v42, (uint64_t)"Journey based on realtime data has a negative expected duration of ", 67);
      uint64_t v15 = (void *)std::ostream::operator<<();
      sub_188FC78(v15, (uint64_t)" sec", 4);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_14;
    }
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 12);
    if (v12 == 0x7FFFFFFF) {
      goto LABEL_18;
    }
    if (!v10 && v4 > v12 && a2)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v42);
      sub_188FC78(v42, (uint64_t)"Journey has a negative static duration of ", 42);
      uint64_t v13 = (void *)std::ostream::operator<<();
      sub_188FC78(v13, (uint64_t)" sec", 4);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_14;
    }
  }
  uint64_t v17 = *(_DWORD **)(a1 + 72);
  int64x2_t v16 = *(_DWORD **)(a1 + 80);
  if (v17 != v16)
  {
    if (v10 == 2)
    {
      while (*v17 != 0x7FFFFFFF)
      {
        if (v17[1] == 0x7FFFFFFF)
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v42);
          sub_188FC78(v42, (uint64_t)"Journey based on realtime data has an invalid future expected departure time entry", 82);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_14;
        }
        if (*v17 < v4) {
          goto LABEL_53;
        }
        v17 += 3;
        if (v17 == v16) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      while (*v17 != 0x7FFFFFFF)
      {
        if (*v17 < v4)
        {
LABEL_53:
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v42);
          long long v20 = sub_188FC78(v42, (uint64_t)"Journey has a future static departure time which is before the journey's static departure time: ", 96);
          long long v21 = (void *)sub_266E4((uint64_t)v20);
          uint64_t v22 = sub_188FC78(v21, (uint64_t)" < ", 3);
          sub_266E4((uint64_t)v22);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_14;
        }
        v17 += 3;
        if (v17 == v16) {
          goto LABEL_44;
        }
      }
    }
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v42);
    sub_188FC78(v42, (uint64_t)"Journey has an invalid future static departure time entry", 57);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
LABEL_14:
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    sub_111ECAC((uint64_t)v42);
    return 0;
  }
LABEL_44:
  long long v19 = *(_DWORD **)(a1 + 48);
  long long v18 = *(_DWORD **)(a1 + 56);
  if (v19 != v18)
  {
    if (v10 == 2)
    {
      while (*v19 != 0x7FFFFFFF)
      {
        if (v19[1] == 0x7FFFFFFF)
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v42);
          sub_188FC78(v42, (uint64_t)"Journey based on realtime data has an invalid past expected departure time entry", 80);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_14;
        }
        if (*v19 > v4) {
          goto LABEL_83;
        }
        v19 += 3;
        if (v19 == v18) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      while (*v19 != 0x7FFFFFFF)
      {
        if (*v19 > v4)
        {
LABEL_83:
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v42);
          long long v35 = sub_188FC78(v42, (uint64_t)"Journey has a past static departure time which is after the journey's static departure time: ", 93);
          long long v36 = (void *)sub_266E4((uint64_t)v35);
          uint64_t v37 = sub_188FC78(v36, (uint64_t)" > ", 3);
          sub_266E4((uint64_t)v37);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_14;
        }
        v19 += 3;
        if (v19 == v18) {
          goto LABEL_58;
        }
      }
    }
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v42);
    sub_188FC78(v42, (uint64_t)"Journey has an invalid past static departure time entry", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_14;
  }
LABEL_58:
  unint64_t v23 = *(char ***)(a1 + 24);
  if (v23 == *(char ***)(a1 + 32))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v42);
    sub_188FC78(v42, (uint64_t)"Journey has an empty set of journey segment bundles", 51);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_14;
  }
  uint64_t v39 = *(char ***)(a1 + 24);
LABEL_60:
  uint64_t v25 = *v23;
  long long v24 = v23[1];
  if (*v23 != v24)
  {
    unint64_t v26 = v24 - v25 - 144;
    if (v26 >= 0x90)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = v26 / 0x90 + 1;
      char v28 = &v25[144 * (v31 & 0x3FFFFFFFFFFFFFELL)];
      uint64_t v32 = v31 & 0x3FFFFFFFFFFFFFELL;
      int64_t v33 = *v23;
      do
      {
        if (!*(_DWORD *)v33) {
          ++v29;
        }
        if (!*((_DWORD *)v33 + 36)) {
          ++v30;
        }
        v33 += 288;
        v32 -= 2;
      }
      while (v32);
      uint64_t v27 = v30 + v29;
      if (v31 == (v31 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_73:
        if (v27 == 1)
        {
          v42[0] = *v23;
          while (sub_4950FC(a1, (uint64_t *)&v39, (uint64_t)v42, a2, a3, a4))
          {
            v25 += 144;
            v42[0] = v25;
            if (v25 == v23[1])
            {
              v23 += 8;
              uint64_t v39 = v23;
              if (v23 != *(char ***)(a1 + 32)) {
                goto LABEL_60;
              }
              return 1;
            }
          }
          return 0;
        }
        BOOL result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)v42);
          sub_188FC78(v42, (uint64_t)"Journey segment bundle has ", 27);
          unint64_t v38 = (void *)std::ostream::operator<<();
          sub_188FC78(v38, (uint64_t)" segments of type MAIN", 22);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_20;
        }
        return result;
      }
    }
    else
    {
      uint64_t v27 = 0;
      char v28 = *v23;
    }
    do
    {
      int v34 = *(_DWORD *)v28;
      v28 += 144;
      if (!v34) {
        ++v27;
      }
    }
    while (v28 != v24);
    goto LABEL_73;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v42);
    sub_188FC78(v42, (uint64_t)"Journey segment bundle has an empty set of journey segments", 59);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_20;
  }
  return result;
}

void sub_494DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_49507C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5) {
    return 1;
  }
  do
  {
    BOOL result = sub_49450C(v4, a2, a3, a4);
    if (!result) {
      break;
    }
    v4 += 176;
  }
  while (v4 != v5);
  return result;
}

BOOL sub_4950FC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(unsigned int **)(*(void *)a3 + 8);
  uint64_t v6 = *(unsigned int **)(*(void *)a3 + 16);
  if (v7 == v6)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v77);
      sub_188FC78(v77, (uint64_t)"Journey segment has an empty sequence of journey legs", 53);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_15;
    }
    return 0;
  }
  int v14 = v7 + 274;
  while (v14 != v6)
  {
    int v15 = *((unsigned __int8 *)v14 - 1044);
    int v16 = *(v14 - 2);
    int v17 = *((unsigned __int8 *)v14 + 52);
    unsigned int v18 = v14[272];
    v14 += 274;
    if (v16) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == 0;
    }
    if (v19 && v15 != v17)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey segment contains public transport journey legs with differing risk statuses", 83);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_15;
      }
      return 0;
    }
  }
  while (2)
  {
    uint64_t v22 = v7;
    if (sub_499F10(v7) == 0x7FFFFFFF)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey leg has an invalid static departure time", 48);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_15;
      }
      return 0;
    }
    if (*(_DWORD *)(a1 + 128) == 2 && sub_499F10(v7) >> 32 == 0x7FFFFFFF)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey based on realtime data has a journey leg with an invalid expected departure time", 88);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_15;
      }
      return 0;
    }
    if (sub_49A0F4(v7) == 0x7FFFFFFF)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey leg has an invalid static arrival time", 46);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_15;
      }
      return 0;
    }
    int v23 = *(_DWORD *)(a1 + 128);
    if (v23 == 2)
    {
      if (sub_49A0F4(v7) >> 32 == 0x7FFFFFFF)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Journey based on realtime data has a journey leg with an invalid expected arrival time", 86);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        return 0;
      }
      int v23 = *(_DWORD *)(a1 + 128);
    }
    if (v23)
    {
      if (v23 != 2) {
        goto LABEL_36;
      }
LABEL_35:
      unint64_t v25 = sub_499F10(v22);
      if (SHIDWORD(v25) > (int)(sub_49A0F4(v22) >> 32))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Journey based on realtime data has a journey leg with a negative expected duration of ", 86);
          sub_49A0F4(v22);
          sub_499F10(v22);
          long long v51 = (void *)std::ostream::operator<<();
          sub_188FC78(v51, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        return 0;
      }
      goto LABEL_36;
    }
    int v24 = sub_499F10(v7);
    if (v24 > (int)sub_49A0F4(v22))
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey leg has a negative static duration of ", 46);
        sub_49A0F4(v22);
        sub_499F10(v22);
        __n128 v52 = (void *)std::ostream::operator<<();
        sub_188FC78(v52, (uint64_t)" sec", 4);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_15;
      }
      return 0;
    }
    if (*(_DWORD *)(a1 + 128) == 2) {
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v7 = v22 + 274;
    if (v22 + 274 == *(unsigned int **)(*(void *)a3 + 16))
    {
      uint64_t v33 = *a2;
      if (*a2 + 64 != *(void *)(a1 + 32))
      {
        uint64_t v34 = *(void *)(v33 + 64);
        uint64_t v35 = *(void *)(v33 + 72);
        if (v34 != v35)
        {
          while (*(_DWORD *)v34)
          {
            v34 += 144;
            if (v34 == v35) {
              goto LABEL_113;
            }
          }
        }
        if (v34 == v35 || (unint64_t v73 = *(unsigned int **)(v34 + 8), v73 == *(unsigned int **)(v34 + 16)))
        {
LABEL_113:
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v77);
            sub_188FC78(v77, (uint64_t)"Unable to resolve subsequent journey leg", 40);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            goto LABEL_15;
          }
          return 0;
        }
        int v36 = *(_DWORD *)(a1 + 128);
        if (a4 && !v36)
        {
          int v37 = sub_49A0F4(v22);
          if (v37 > (int)sub_499F10(v73))
          {
            if (!sub_723EC(1u)) {
              return 0;
            }
            sub_6BAC((uint64_t)v77);
            long long v62 = sub_188FC78(v77, (uint64_t)"Journey leg has a static arrival time after the subsequent leg's static departure time: ", 88);
            __p = (void *)sub_49A0F4(v22);
            int v75 = v63;
            __n128 v64 = (void *)sub_266E4((uint64_t)v62);
            long long v65 = sub_188FC78(v64, (uint64_t)" > ", 3);
            sub_499F10(v73);
            sub_266E4((uint64_t)v65);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            goto LABEL_172;
          }
          int v36 = *(_DWORD *)(a1 + 128);
        }
        if (a4)
        {
          if (v36 == 2)
          {
            unint64_t v38 = a2;
            uint64_t v39 = a6;
            uint64_t v40 = a5;
            unint64_t v41 = sub_49A0F4(v22);
            unint64_t v42 = sub_499F10(v73);
            unint64_t v43 = HIDWORD(v41);
            a5 = v40;
            a6 = v39;
            a2 = v38;
            if ((int)v43 > SHIDWORD(v42))
            {
              if (!sub_723EC(1u)) {
                return 0;
              }
              sub_6BAC((uint64_t)v77);
              __n128 v67 = sub_188FC78(v77, (uint64_t)"Journey based on realtime data has a journey leg with an expected arrival time after the subsequent leg's expected departure time: ", 131);
              __p = (void *)sub_49A0F4(v22);
              int v75 = v68;
              __n128 v69 = (void *)sub_266E4((uint64_t)v67);
              __n128 v70 = sub_188FC78(v69, (uint64_t)" > ", 3);
              sub_499F10(v73);
              sub_266E4((uint64_t)v70);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              goto LABEL_172;
            }
          }
        }
      }
    }
    if (a4)
    {
      unint64_t v26 = *(unsigned int **)(*(void *)a3 + 16);
      int v27 = *(_DWORD *)(a1 + 128);
      if (v7 != v26 && v27 == 0)
      {
        int v29 = sub_49A0F4(v22);
        if (v29 > (int)sub_499F10(v22 + 274))
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          unint64_t v53 = sub_188FC78(v77, (uint64_t)"Journey leg has a static arrival time after the subsequent leg's static departure time: ", 88);
          __p = (void *)sub_49A0F4(v22);
          int v75 = v54;
          __n128 v55 = (void *)sub_266E4((uint64_t)v53);
          uint64_t v56 = sub_188FC78(v55, (uint64_t)" > ", 3);
          sub_499F10(v7);
          sub_266E4((uint64_t)v56);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
LABEL_172:
          if (v76 < 0) {
            operator delete(__p);
          }
          sub_111ECAC((uint64_t)v77);
          return 0;
        }
        unint64_t v26 = *(unsigned int **)(*(void *)a3 + 16);
        int v27 = *(_DWORD *)(a1 + 128);
      }
      if (v7 != v26 && v27 == 2)
      {
        unint64_t v31 = sub_49A0F4(v22);
        if (SHIDWORD(v31) > (int)(sub_499F10(v22 + 274) >> 32))
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          int v57 = sub_188FC78(v77, (uint64_t)"Journey based on realtime data has a journey leg with an expected arrival time after the subsequent leg's expected departure time: ", 131);
          __p = (void *)sub_49A0F4(v22);
          int v75 = v58;
          unsigned int v59 = (void *)sub_266E4((uint64_t)v57);
          uint64_t v60 = sub_188FC78(v59, (uint64_t)" > ", 3);
          sub_499F10(v7);
          sub_266E4((uint64_t)v60);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_172;
        }
      }
    }
    unsigned int v32 = v22[272];
    switch(v32)
    {
      case 0u:
        if (v22 != *(unsigned int **)(*(void *)a3 + 8) && *(v22 - 2))
        {
          if (!sub_723EC(3u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Journey leg of type public transport is preceded by a journey leg of a different type in the same segment.", 106);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          goto LABEL_172;
        }
        if (*v22 == -1)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Public transport journey leg has an invalid id", 46);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if (v22[1] == -1 || !v22[2])
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Public transport journey leg has an invalid trip reference", 58);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if (v22[3] == -1)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Public transport journey leg has an invalid schedule index", 58);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if (v22[4] == -1)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Public transport journey leg has an invalid departure stop index", 64);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if (v22[5] != -1) {
          goto LABEL_22;
        }
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Public transport journey leg has an invalid arrival stop index", 62);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_172;
        }
        return 0;
      case 1u:
        if (v22[2] == -1 || !v22[3])
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"In-station walking journey leg has an origin terminal which is not a transit entity", 83);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
LABEL_15:
          if (v76 < 0) {
            operator delete(__p);
          }
          if (v78 < 0) {
            operator delete((void *)v77[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          return 0;
        }
        unsigned int v44 = v22[1];
        if (v44 && v44 != 3)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          uint64_t v71 = sub_188FC78(v77, (uint64_t)"In-station walking journey leg has an unsupported origin terminal entity type of ", 81);
          sub_49DBF4(v71, v22[1]);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if (v22[5] == -1 || !v22[6])
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"In-station walking journey leg has a destination terminal which is not a transit entity", 87);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        unsigned int v45 = v22[4];
        if (v45 && v45 != 3)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          unsigned int v72 = sub_188FC78(v77, (uint64_t)"In-station walking journey leg has an unsupported destination terminal entity type of ", 86);
          sub_49DBF4(v72, v22[4]);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        if ((a5 & 1) == 0)
        {
          uint64_t v46 = (void *)*((void *)v22 + 6);
          __n128 v47 = (void *)*((void *)v22 + 7);
          if (v46 != v47) {
            goto LABEL_94;
          }
          goto LABEL_22;
        }
        if (v22[9] == -1 || !v22[10])
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"In-station walking journey leg has an invalid transfer graph reference", 70);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_172;
        }
        uint64_t v46 = (void *)*((void *)v22 + 6);
        __n128 v47 = (void *)*((void *)v22 + 7);
        if (v46 == v47)
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"In-station walking journey leg spans an empty set of transfers", 62);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_172;
        }
        do
        {
LABEL_94:
          if (HIDWORD(*v46)) {
            BOOL v48 = *v46 == 0xFFFFFFFFLL;
          }
          else {
            BOOL v48 = 1;
          }
          if (v48)
          {
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)v77);
              sub_188FC78(v77, (uint64_t)"In-station walking journey leg contains an invalid transfer reference", 69);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              goto LABEL_15;
            }
            return 0;
          }
          ++v46;
        }
        while (v46 != v47);
        if (v32 == 3)
        {
LABEL_104:
          if (a6)
          {
            if (sub_45FB38((void *)v22 + 4))
            {
              if (!sub_723EC(1u)) {
                return 0;
              }
              sub_6BAC((uint64_t)v77);
              sub_188FC78(v77, (uint64_t)"Street walking journey leg has a route with no segments", 55);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              goto LABEL_15;
            }
            if (!sub_470C10((uint64_t *)v22 + 4)) {
              return 0;
            }
            unsigned int v32 = v22[272];
LABEL_108:
            if (v32 == 4)
            {
LABEL_109:
              if (v22[1] == -1 || !v22[2])
              {
                if (sub_723EC(1u))
                {
                  sub_6BAC((uint64_t)v77);
                  sub_188FC78(v77, (uint64_t)"Self-transfer journey leg has an invalid stop reference", 55);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&__p, 1u);
                  goto LABEL_15;
                }
                return 0;
              }
            }
          }
LABEL_22:
          if (v7 == *(unsigned int **)(*(void *)a3 + 16))
          {
            if (!sub_4967EC(*(_DWORD **)(*(void *)a3 + 32), *(_DWORD **)(*(void *)a3 + 40))
              || !sub_4967EC(*(_DWORD **)(*(void *)a3 + 56), *(_DWORD **)(*(void *)a3 + 64)))
            {
              return 0;
            }
            __n128 v49 = *(_DWORD **)(*(void *)a3 + 80);
            size_t v50 = *(_DWORD **)(*(void *)a3 + 88);
            return sub_4967EC(v49, v50);
          }
          continue;
        }
        if (v32 != 2) {
          goto LABEL_108;
        }
LABEL_101:
        if (v22[3] != -1 && v22[4]) {
          goto LABEL_22;
        }
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v77);
          sub_188FC78(v77, (uint64_t)"Road access point journey leg has an invalid road access point reference", 72);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_15;
        }
        return 0;
      case 2u:
        goto LABEL_101;
      case 3u:
        goto LABEL_104;
      case 4u:
        if (*(void *)(a1 + 32) - *(void *)(a1 + 24) == 64
          && *(void *)(*a2 + 8) - *(void *)*a2 == 144
          && *(void *)(*(void *)a3 + 16) - *(void *)(*(void *)a3 + 8) == 1096)
        {
          goto LABEL_109;
        }
        if (!sub_723EC(3u)) {
          return 0;
        }
        sub_6BAC((uint64_t)v77);
        sub_188FC78(v77, (uint64_t)"Journey contains a self-transfer journey leg, however, it is not the only leg of the journey.", 93);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        goto LABEL_15;
      default:
        goto LABEL_108;
    }
  }
}

void sub_4961A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_4967EC(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2) {
    return 1;
  }
  while (1)
  {
    if (*a1 == -1 || a1[1] == 0)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v6);
      sub_188FC78(v6, (uint64_t)"Journey segment departure alternative has an invalid trip reference", 67);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_14;
    }
    if (a1[4] == 0x7FFFFFFF) {
      break;
    }
    a1 += 7;
    if (a1 == a2) {
      return 1;
    }
  }
  BOOL result = sub_723EC(1u);
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)v6);
  sub_188FC78(v6, (uint64_t)"Journey leg has an invalid static departure time", 48);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 1u);
LABEL_14:
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_496A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void (__cdecl **a16)(std::stringbuf *__hidden this), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_496B20()
{
  unk_2558C0F = 16641;
  word_2558BF8 = 65;
  byte_2558C27 = 1;
  byte_2558C11 = 0;
}

BOOL sub_496B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if ((char *)v3 - (char *)v2 == *(void *)(a2 + 32) - (void)v4)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      do
      {
        BOOL result = sub_496D60(v2, v4);
        if (!result) {
          break;
        }
        v2 += 8;
        v4 += 8;
      }
      while (v2 != v3);
    }
  }
  else
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v8);
      sub_188FC78(v8, (uint64_t)"The given journeys have different numbers of journey segment bundles.", 69);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v7 < 0) {
        operator delete(__p);
      }
      if (v9 < 0) {
        operator delete((void *)v8[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
  }
  return result;
}

void sub_496D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_496D60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 == a2[1] - *a2)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      do
      {
        BOOL result = sub_496F78(v2, v4);
        if (!result) {
          break;
        }
        v2 += 144;
        v4 += 144;
      }
      while (v2 != v3);
    }
  }
  else
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v8);
      sub_188FC78(v8, (uint64_t)"The given journey segment bundles have different numbers of journey legs.", 73);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v7 < 0) {
        operator delete(__p);
      }
      if (v9 < 0) {
        operator delete((void *)v8[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
  }
  return result;
}

void sub_496F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_496F78(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v25);
    sub_188FC78(v25, (uint64_t)"The given journey segments are of different types.", 50);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
LABEL_28:
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete((void *)v25[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = *(unsigned int **)(a1 + 8);
  }
  else
  {
    while (!sub_49B080(v5))
    {
      v5 += 1096;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    uint64_t v6 = (unsigned int *)v5;
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v8 = 0xE21A291C077975B9 * (((uint64_t)v6 - v5) >> 3);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v10 == v9)
  {
    int v11 = *(unsigned int **)(a2 + 8);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  while (!sub_49B080(v10))
  {
    v10 += 1096;
    if (v10 == v9)
    {
      uint64_t v10 = v9;
      break;
    }
  }
  int v11 = (unsigned int *)v10;
  uint64_t v10 = *(void *)(a2 + 8);
  if (v8 != 0xE21A291C077975B9 * (((uint64_t)v11 - v10) >> 3))
  {
LABEL_26:
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v25);
    sub_188FC78(v25, (uint64_t)"The given journey segments have walking legs starting at different positions: ", 78);
    int v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_28;
  }
LABEL_15:
  uint64_t v12 = *(void *)(a1 + 8);
  if ((unsigned int *)v12 == v6)
  {
LABEL_18:
    uint64_t v13 = *(unsigned int **)(a1 + 16);
    int v14 = *(unsigned int **)(a2 + 16);
    if (v6 == v13 && v11 == v14) {
      return 1;
    }
    if ((v6 == v13) == (v11 == v14))
    {
      int v17 = sub_49A0F4(v13 - 274);
      int v18 = v17 - sub_499F10(v6);
      int v19 = sub_49A0F4(v14 - 274);
      int v20 = v19 - sub_499F10(v11);
      BOOL result = 1;
      if (v18 == v20) {
        return result;
      }
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v25);
      sub_188FC78(v25, (uint64_t)"The two given walking journey leg ranges have different static durations: ", 74);
      long long v21 = (void *)std::ostream::operator<<();
      sub_188FC78(v21, (uint64_t)" dsec != ", 9);
      uint64_t v22 = (void *)std::ostream::operator<<();
      sub_188FC78(v22, (uint64_t)" dsec", 5);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
    else
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v25);
      sub_188FC78(v25, (uint64_t)"From the two given journey leg ranges one contains walking whilst the other does not", 84);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
    goto LABEL_28;
  }
  while (1)
  {
    BOOL result = sub_497454(v12, v10);
    if (!result) {
      return result;
    }
    v12 += 1096;
    v10 += 1096;
    if ((unsigned int *)v12 == v6) {
      goto LABEL_18;
    }
  }
}

void sub_497384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_497454(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 1088);
  if (v2 != *(_DWORD *)(a2 + 1088))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"The given journey legs are of different types.", 46);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_32;
  }
  if (v2 == 4)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      unint64_t v8 = sub_188FC78(v30, (uint64_t)"The given self-transfer journey legs have different stop refs: ", 63);
      uint64_t v9 = sub_2D1500(v8, *(void *)(a1 + 4));
      uint64_t v10 = sub_188FC78(v9, (uint64_t)" != ", 4);
      sub_2D1500(v10, *(void *)(a2 + 4));
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_32;
    }
  }
  else if (!v2)
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      int v17 = sub_188FC78(v30, (uint64_t)"The given public transport journey legs have different ids: ", 60);
      std::ostream::operator<<();
      sub_188FC78(v17, (uint64_t)" != ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_32;
    }
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      uint64_t v22 = sub_188FC78(v30, (uint64_t)"The given public transport journey legs have different trip references: ", 72);
      int v23 = sub_2D1500(v22, *(void *)(a1 + 4));
      char v24 = sub_188FC78(v23, (uint64_t)" != ", 4);
      sub_2D1500(v24, *(void *)(a2 + 4));
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_32;
    }
    if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      unint64_t v25 = sub_188FC78(v30, (uint64_t)"The given public transport journey legs have different schedule indices: ", 73);
      std::ostream::operator<<();
      sub_188FC78(v25, (uint64_t)" != ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      char v26 = sub_188FC78(v30, (uint64_t)"The given public transport journey legs have different departure stop indices: ", 79);
      std::ostream::operator<<();
      sub_188FC78(v26, (uint64_t)" != ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v30);
      uint64_t v6 = sub_188FC78(v30, (uint64_t)"The given public transport journey legs have different arrival stop indices: ", 77);
      std::ostream::operator<<();
      sub_188FC78(v6, (uint64_t)" != ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
LABEL_41:
      if (v29 < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v30);
      return 0;
    }
  }
  int v11 = sub_499F10((unsigned int *)a1);
  if (v11 != sub_499F10((unsigned int *)a2))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"The given journey legs have different static departure times: ", 62);
    __p = (void *)sub_499F10((unsigned int *)a1);
    int v28 = v14;
    int v15 = (void *)sub_266E4((uint64_t)v13);
    int v16 = sub_188FC78(v15, (uint64_t)" != ", 4);
    sub_499F10((unsigned int *)a2);
    sub_266E4((uint64_t)v16);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_32;
  }
  int v12 = sub_49A0F4((unsigned int *)a1);
  if (v12 == sub_49A0F4((unsigned int *)a2)) {
    return 1;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v30);
    int v18 = sub_188FC78(v30, (uint64_t)"The given journey legs have different static arrival times: ", 60);
    __p = (void *)sub_49A0F4((unsigned int *)a1);
    int v28 = v19;
    int v20 = (void *)sub_266E4((uint64_t)v18);
    long long v21 = sub_188FC78(v20, (uint64_t)" != ", 4);
    sub_49A0F4((unsigned int *)a2);
    sub_266E4((uint64_t)v21);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
LABEL_32:
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_497A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_497C98()
{
  unk_2558C3F = 16641;
  word_2558C28 = 65;
  byte_2558C57 = 1;
  byte_2558C41 = 0;
}

void *sub_497CC0(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

_DWORD *sub_497CC8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_375500(*a1);
  uint64_t v7 = sub_3755E4(*a1);
  int v8 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v8 | 0x10;
  *(_DWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)a2;
  *(_DWORD *)(a3 + 16) = v8 | 0x31;
  uint64_t v9 = *(void *)(a3 + 24);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a3 + 8);
    int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      int v11 = (void *)*v11;
    }
    sub_11035FC((uint64_t)v11);
    uint64_t v9 = v12;
    *(void *)(a3 + 24) = v12;
  }
  int v13 = *(_DWORD *)(a2 + 16);
  int v14 = *(_DWORD *)(v9 + 16);
  *(_DWORD *)(v9 + 16) = v14 | 0x20;
  *(_DWORD *)(v9 + 64) = v13;
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v9 + 16) = v14 | 0x64;
  int v15 = *(_DWORD **)(v9 + 40);
  if (!v15)
  {
    uint64_t v16 = *(void *)(v9 + 8);
    int v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      int v17 = (void *)*v17;
    }
    int v15 = sub_1104EA8((uint64_t)v17);
    *(void *)(v9 + 40) = v15;
  }
  int v18 = *(_DWORD *)(a2 + 24);
  int v19 = v15[4];
  v15[4] = v19 | 1;
  v15[6] = v18;
  int v20 = *(unsigned __int8 *)(a2 + 32);
  v15[7] = *(_DWORD *)(a2 + 28);
  v15[8] = v20;
  int v21 = *(unsigned __int8 *)(a2 + 33);
  v15[4] = v19 | 0xF;
  v15[9] = v21;
  *(_DWORD *)(v9 + 16) |= 8u;
  uint64_t v22 = *(_DWORD **)(v9 + 48);
  if (!v22)
  {
    uint64_t v23 = *(void *)(v9 + 8);
    char v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      char v24 = (void *)*v24;
    }
    uint64_t v22 = sub_1104EA8((uint64_t)v24);
    *(void *)(v9 + 48) = v22;
  }
  int v25 = *(_DWORD *)(a2 + 36);
  int v26 = v22[4];
  v22[4] = v26 | 1;
  v22[6] = v25;
  int v27 = *(unsigned __int8 *)(a2 + 44);
  v22[7] = *(_DWORD *)(a2 + 40);
  unsigned char v22[8] = v27;
  int v28 = *(unsigned __int8 *)(a2 + 45);
  v22[4] = v26 | 0xF;
  v22[9] = v28;
  uint64_t v29 = *(unsigned int *)(a2 + 4);
  unint64_t v30 = *(unsigned int *)(a2 + 8) | (unint64_t)(v29 << 32);
  char v31 = (int *)sub_369F8C(v7, v30, 0, "trip");
  unsigned int v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 5u && (uint64_t v33 = v32[2]) != 0) {
    uint64_t v34 = *(void *)((char *)v31 + v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = sub_398020(v7, 0);
  int v36 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v36 >= 0xBu)
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 5);
    if (v37)
    {
      if (v35[v37]) {
        uint64_t v34 = nullsub_1(v34);
      }
    }
  }
  uint64_t v38 = nullsub_1(v34);
  *(_DWORD *)(v9 + 16) |= 0x10u;
  *(void *)(v9 + 56) = v38;
  int v39 = *(_DWORD *)(a2 + 16);
  uint64_t v40 = sub_369B60(v7, v30, 0);
  unint64_t v41 = &v40[-*(int *)v40];
  if (*(unsigned __int16 *)v41 < 5u)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = *((unsigned __int16 *)v41 + 2);
    if (*((_WORD *)v41 + 2)) {
      v42 += (uint64_t)&v40[*(unsigned int *)&v40[v42]];
    }
  }
  uint64_t v43 = 4 * v29;
  unsigned int v44 = (int *)(v42 + v43 + 4 + *(unsigned int *)(v42 + v43 + 4));
  unsigned int v45 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v45 >= 0xDu && (uint64_t v46 = v45[6]) != 0) {
    int v47 = *(int *)((char *)v44 + v46);
  }
  else {
    int v47 = -1;
  }
  BOOL v48 = (int *)sub_498D5C(v6, *(void *)&v40[24 * (v47 + v39)+ 4+ *((unsigned __int16 *)v41 + 3)+ *(unsigned int *)&v40[*((unsigned __int16 *)v41 + 3)]], 0, "stop");
  __n128 v49 = (unsigned __int16 *)((char *)v48 - *v48);
  if (*v49 >= 5u && (uint64_t v50 = v49[2]) != 0) {
    uint64_t v51 = *(void *)((char *)v48 + v50);
  }
  else {
    uint64_t v51 = 0;
  }
  __n128 v52 = sub_398020(v6, 0);
  unint64_t v53 = &v52[-*(int *)v52];
  if (*(unsigned __int16 *)v53 >= 0xBu)
  {
    uint64_t v54 = *((unsigned __int16 *)v53 + 5);
    if (v54)
    {
      if (v52[v54]) {
        uint64_t v51 = nullsub_1(v51);
      }
    }
  }
  uint64_t v55 = nullsub_1(v51);
  *(_DWORD *)(v9 + 16) |= 0x200u;
  *(void *)(v9 + 80) = v55;
  int v56 = *(_DWORD *)(a2 + 20);
  int v57 = sub_369B60(v7, v30, 0);
  int v58 = &v57[-*(int *)v57];
  if (*(unsigned __int16 *)v58 < 5u)
  {
    uint64_t v59 = 0;
  }
  else
  {
    uint64_t v59 = *((unsigned __int16 *)v58 + 2);
    if (*((_WORD *)v58 + 2)) {
      v59 += (uint64_t)&v57[*(unsigned int *)&v57[v59]];
    }
  }
  uint64_t v60 = (int *)(v59 + v43 + 4 + *(unsigned int *)(v59 + v43 + 4));
  uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
  if (*v61 >= 0xDu && (uint64_t v62 = v61[6]) != 0) {
    int v63 = *(int *)((char *)v60 + v62);
  }
  else {
    int v63 = -1;
  }
  __n128 v64 = (int *)sub_498D5C(v6, *(void *)&v57[24 * (v63 + v56)+ 4+ *((unsigned __int16 *)v58 + 3)+ *(unsigned int *)&v57[*((unsigned __int16 *)v58 + 3)]], 0, "stop");
  long long v65 = (unsigned __int16 *)((char *)v64 - *v64);
  if (*v65 >= 5u && (uint64_t v66 = v65[2]) != 0) {
    uint64_t v67 = *(void *)((char *)v64 + v66);
  }
  else {
    uint64_t v67 = 0;
  }
  int v68 = sub_398020(v6, 0);
  __n128 v69 = &v68[-*(int *)v68];
  if (*(unsigned __int16 *)v69 >= 0xBu)
  {
    uint64_t v70 = *((unsigned __int16 *)v69 + 5);
    if (v70)
    {
      if (v68[v70]) {
        uint64_t v67 = nullsub_1(v67);
      }
    }
  }
  uint64_t v71 = nullsub_1(v67);
  *(_DWORD *)(v9 + 16) |= 0x400u;
  *(void *)(v9 + 88) = v71;
  int v72 = *(_DWORD *)(a2 + 12);
  unint64_t v73 = sub_369B60(v7, v30, 0);
  double v74 = &v73[-*(int *)v73];
  unsigned int v75 = *(unsigned __int16 *)v74;
  if (v75 <= 4)
  {
    uint64_t v78 = 0;
    uint64_t v77 = (int *)(v43 + 4 + *(unsigned int *)(v43 + 4));
    goto LABEL_61;
  }
  uint64_t v76 = *((unsigned __int16 *)v74 + 2);
  if (*((_WORD *)v74 + 2)) {
    v76 += (uint64_t)&v73[*(unsigned int *)&v73[v76]];
  }
  uint64_t v77 = (int *)(v76 + v43 + 4 + *(unsigned int *)(v76 + v43 + 4));
  if (v75 < 0xD)
  {
    uint64_t v78 = 0;
    unsigned int v79 = (unsigned __int16 *)((char *)v77 - *v77);
    if (*v79 < 0x15u) {
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  uint64_t v78 = *((unsigned __int16 *)v74 + 6);
  if (!v78)
  {
LABEL_61:
    unsigned int v79 = (unsigned __int16 *)((char *)v77 - *v77);
    if (*v79 < 0x15u) {
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  v78 += (uint64_t)&v73[*(unsigned int *)&v73[v78]];
  unsigned int v79 = (unsigned __int16 *)((char *)v77 - *v77);
  if (*v79 < 0x15u) {
    goto LABEL_66;
  }
LABEL_64:
  uint64_t v80 = v79[10];
  if (v80)
  {
    int v81 = *(int *)((char *)v77 + v80);
    goto LABEL_67;
  }
LABEL_66:
  int v81 = -1;
LABEL_67:
  uint64_t v82 = v78 + 8 * (v81 + v72);
  int v83 = *(unsigned __int16 *)(v82 + 4);
  int v84 = *(unsigned __int8 *)(v82 + 6);
  int v85 = *(unsigned __int8 *)(v82 + 7);
  *(_DWORD *)(v9 + 16) |= 1u;
  BOOL result = *(_DWORD **)(v9 + 24);
  if (!result)
  {
    uint64_t v87 = *(void *)(v9 + 8);
    __n128 v88 = (void *)(v87 & 0xFFFFFFFFFFFFFFFCLL);
    if (v87) {
      __n128 v88 = (void *)*v88;
    }
    BOOL result = (_DWORD *)sub_1103504((uint64_t)v88);
    *(void *)(v9 + 24) = result;
  }
  int v89 = result[4];
  result[6] = v83;
  result[7] = v84;
  result[4] = v89 | 7;
  result[8] = v85;
  return result;
}

uint64_t sub_49825C(void **a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v5 | 0x10;
  *(_DWORD *)(a3 + 56) = 2;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)a2;
  *(_DWORD *)(a3 + 16) = v5 | 0x32;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    sub_1103680((uint64_t)v9);
    uint64_t v6 = v10;
    *(void *)(a3 + 32) = v10;
  }
  uint64_t v11 = sub_498344(a1, (unsigned int *)(a2 + 4));
  uint64_t v12 = nullsub_1(v11);
  *(_DWORD *)(v6 + 16) |= 1u;
  *(void *)(v6 + 24) = v12;
  uint64_t v13 = sub_498344(a1, (unsigned int *)(a2 + 16));
  uint64_t result = nullsub_1(v13);
  int v15 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = v15 | 2;
  *(void *)(v6 + 32) = result;
  int v16 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(v6 + 16) = v15 | 6;
  *(_DWORD *)(v6 + 40) = v16;
  *(_DWORD *)(v6 + 44) = *(_DWORD *)(a2 + 32);
  LOBYTE(v16) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(v6 + 16) = v15 | 0x1E;
  *(unsigned char *)(v6 + 48) = v16;
  return result;
}

uint64_t sub_498344(void **a1, unsigned int *a2)
{
  uint64_t v3 = sub_375500(*a1);
  uint64_t v4 = v3;
  unsigned int v5 = *a2;
  if (*a2 == 4)
  {
    uint64_t v6 = (int *)sub_4992B0(v3, a2[2] | ((unint64_t)a2[1] << 32), 0, "road access point");
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 < 5u)
    {
LABEL_11:
      uint64_t v9 = 0;
      goto LABEL_12;
    }
  }
  else if (v5 == 3)
  {
    uint64_t v6 = (int *)sub_499804(v3, a2[2] | ((unint64_t)a2[1] << 32), 0, "access point");
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 < 5u) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v18, *a2);
      int v15 = std::string::insert(&v18, 0, "Cannot handle street walking leg terminal type ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v20 = v15->__r_.__value_.__r.__words[2];
      long long v19 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      int v17 = (void *)sub_2F404((uint64_t)exception, &v19);
    }
    uint64_t v6 = (int *)sub_498D5C(v3, a2[2] | ((unint64_t)a2[1] << 32), 0, "stop");
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 < 5u) {
      goto LABEL_11;
    }
  }
  uint64_t v8 = v7[2];
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)((char *)v6 + v8);
LABEL_12:
  uint64_t v10 = sub_398020(v4, 0);
  uint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 0xBu) {
    return v9;
  }
  uint64_t v12 = *((unsigned __int16 *)v11 + 5);
  if (!v12 || !v10[v12]) {
    return v9;
  }

  return nullsub_1(v9);
}

void sub_498504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_49855C(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = sub_375500(*a1);
  int v6 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v6 | 0x10;
  *(_DWORD *)(a3 + 56) = 3;
  *(_DWORD *)(a3 + 60) = *a2;
  *(_DWORD *)(a3 + 16) = v6 | 0x34;
  uint64_t v7 = *(void **)(a3 + 40);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v7 = sub_1103700((uint64_t)v9);
    *(void *)(a3 + 40) = v7;
  }
  int v10 = a2[1];
  int v11 = *((_DWORD *)v7 + 4);
  *((_DWORD *)v7 + 4) = v11 | 1;
  *((_DWORD *)v7 + 6) = v10;
  int v12 = a2[2];
  *((_DWORD *)v7 + 4) = v11 | 3;
  *((_DWORD *)v7 + 7) = v12;
  uint64_t v13 = (int *)sub_4992B0(v5, a2[4] | ((unint64_t)a2[3] << 32), 0, "road access point");
  int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = *(void *)((char *)v13 + v15);
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = sub_398020(v5, 0);
  std::string v18 = &v17[-*(int *)v17];
  if (*(unsigned __int16 *)v18 >= 0xBu)
  {
    uint64_t v19 = *((unsigned __int16 *)v18 + 5);
    if (v19)
    {
      if (v17[v19]) {
        uint64_t v16 = nullsub_1(v16);
      }
    }
  }
  uint64_t result = nullsub_1(v16);
  *((_DWORD *)v7 + 4) |= 4u;
  v7[4] = result;
  return result;
}

void sub_4986A0(void **a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v5 | 0x10;
  *(_DWORD *)(a3 + 56) = 4;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)a2;
  *(_DWORD *)(a3 + 16) = v5 | 0x38;
  uint64_t v6 = *(void *)(a3 + 48);
  if (!v6)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    sub_110377C((uint64_t)v9);
    uint64_t v6 = v10;
    *(void *)(a3 + 48) = v10;
  }
  int v11 = *(_DWORD *)(a2 + 544);
  int v12 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = v12 | 4;
  int v13 = *(_DWORD *)(a2 + 548);
  *(_DWORD *)(v6 + 40) = v11;
  *(_DWORD *)(v6 + 44) = v13;
  uint64_t v14 = *(void *)(a2 + 536);
  *(_DWORD *)(v6 + 16) = v12 | 0x1C;
  *(void *)(v6 + 48) = v14;
  if (*(_DWORD *)(a2 + 8) != -1 && *(_DWORD *)(a2 + 12))
  {
    uint64_t v15 = sub_498344(a1, (unsigned int *)(a2 + 4));
    uint64_t v16 = nullsub_1(v15);
    *(_DWORD *)(v6 + 16) |= 1u;
    *(void *)(v6 + 24) = v16;
  }
  if (*(_DWORD *)(a2 + 20) != -1)
  {
    if (*(_DWORD *)(a2 + 24))
    {
      uint64_t v17 = sub_498344(a1, (unsigned int *)(a2 + 16));
      uint64_t v18 = nullsub_1(v17);
      *(_DWORD *)(v6 + 16) |= 2u;
      *(void *)(v6 + 32) = v18;
    }
  }
}

void sub_4987AC(void **a1, int *a2, void *a3, uint64_t a4)
{
  unsigned int v7 = *a2;
  if (*a2 <= 1)
  {
    *(_DWORD *)(a4 + 16) |= 1u;
    *(_DWORD *)(a4 + 48) = v7;
  }
  uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
  uint64_t v9 = (unsigned int *)*((void *)a2 + 2);
  if (v8 == v9) {
    return;
  }
  uint64_t v10 = (uint64_t *)(a4 + 24);
  while (2)
  {
    switch(v8[272])
    {
      case 0u:
        int v13 = *(_DWORD **)(a4 + 40);
        if (v13 && (uint64_t v14 = *(int *)(a4 + 32), (int)v14 < *v13))
        {
          *(_DWORD *)(a4 + 32) = v14 + 1;
          uint64_t v15 = *(void *)&v13[2 * v14 + 2];
          sub_497CC8(a1, (uint64_t)v8, v15);
          int8x8_t v16 = (int8x8_t)a3[1];
          if (!*(void *)&v16) {
            goto LABEL_7;
          }
        }
        else
        {
          sub_11037FC(*v10);
          uint64_t v15 = sub_188CDC8(a4 + 24, v25);
          sub_497CC8(a1, (uint64_t)v8, v15);
          int8x8_t v16 = (int8x8_t)a3[1];
          if (!*(void *)&v16) {
            goto LABEL_7;
          }
        }
        unint64_t v26 = *v8;
        uint8x8_t v27 = (uint8x8_t)vcnt_s8(v16);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          unint64_t v28 = *v8;
          if (*(void *)&v16 <= v26) {
            unint64_t v28 = v26 % *(void *)&v16;
          }
        }
        else
        {
          unint64_t v28 = (v16.i32[0] - 1) & v26;
        }
        char v31 = *(uint64_t ***)(*a3 + 8 * v28);
        if (!v31) {
          goto LABEL_7;
        }
        unsigned int v32 = *v31;
        if (!*v31) {
          goto LABEL_7;
        }
        if (v27.u32[0] < 2uLL)
        {
          uint64_t v33 = *(void *)&v16 - 1;
          while (1)
          {
            uint64_t v35 = v32[1];
            if (v35 == v26)
            {
              if (*((_DWORD *)v32 + 4) == v26) {
                goto LABEL_47;
              }
            }
            else if ((v35 & v33) != v28)
            {
              goto LABEL_7;
            }
            unsigned int v32 = (uint64_t *)*v32;
            if (!v32) {
              goto LABEL_7;
            }
          }
        }
        break;
      case 1u:
        uint64_t v17 = *(_DWORD **)(a4 + 40);
        if (v17 && (uint64_t v18 = *(int *)(a4 + 32), (int)v18 < *v17))
        {
          *(_DWORD *)(a4 + 32) = v18 + 1;
          uint64_t v19 = *(void *)&v17[2 * v18 + 2];
        }
        else
        {
          sub_11037FC(*v10);
          uint64_t v19 = sub_188CDC8(a4 + 24, v29);
        }
        sub_49825C(a1, (uint64_t)v8, v19);
        goto LABEL_7;
      case 2u:
        std::string::size_type v20 = *(_DWORD **)(a4 + 40);
        if (v20 && (uint64_t v21 = *(int *)(a4 + 32), (int)v21 < *v20))
        {
          *(_DWORD *)(a4 + 32) = v21 + 1;
          uint64_t v22 = *(void *)&v20[2 * v21 + 2];
        }
        else
        {
          sub_11037FC(*v10);
          uint64_t v22 = sub_188CDC8(a4 + 24, v30);
        }
        sub_49855C(a1, v8, v22);
        goto LABEL_7;
      case 3u:
        uint64_t v23 = *(_DWORD **)(a4 + 40);
        if (v23 && (uint64_t v24 = *(int *)(a4 + 32), (int)v24 < *v23))
        {
          *(_DWORD *)(a4 + 32) = v24 + 1;
          uint64_t v12 = *(void *)&v23[2 * v24 + 2];
        }
        else
        {
          sub_11037FC(*v10);
          uint64_t v12 = sub_188CDC8(a4 + 24, v11);
        }
        sub_4986A0(a1, (uint64_t)v8, v12);
        goto LABEL_7;
      default:
        goto LABEL_7;
    }
    while (1)
    {
      unint64_t v34 = v32[1];
      if (v34 == v26) {
        break;
      }
      if (v34 >= *(void *)&v16) {
        v34 %= *(void *)&v16;
      }
      if (v34 != v28) {
        goto LABEL_7;
      }
LABEL_36:
      unsigned int v32 = (uint64_t *)*v32;
      if (!v32) {
        goto LABEL_7;
      }
    }
    if (*((_DWORD *)v32 + 4) != v26) {
      goto LABEL_36;
    }
LABEL_47:
    *(_DWORD *)(v15 + 16) |= 1u;
    uint64_t v36 = *(void *)(v15 + 24);
    if (v36)
    {
      *(_DWORD *)(v36 + 16) |= 2u;
      uint64_t v37 = *(void *)(v36 + 32);
      if (!v37) {
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v38 = *(void *)(v15 + 8);
      int v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
      if (v38) {
        int v39 = (void *)*v39;
      }
      sub_11035FC((uint64_t)v39);
      uint64_t v36 = v40;
      *(void *)(v15 + 24) = v40;
      *(_DWORD *)(v40 + 16) |= 2u;
      uint64_t v37 = *(void *)(v40 + 32);
      if (!v37)
      {
LABEL_53:
        uint64_t v41 = *(void *)(v36 + 8);
        uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
        if (v41) {
          uint64_t v42 = (void *)*v42;
        }
        uint64_t v37 = sub_1103580((uint64_t)v42);
        *(void *)(v36 + 32) = v37;
      }
    }
    int v43 = *((_DWORD *)v32 + 5);
    if ((v43 - 1) >= 5) {
      int v43 = 0;
    }
    *(_DWORD *)(v37 + 16) |= 1u;
    *(_DWORD *)(v37 + 24) = v43;
LABEL_7:
    v8 += 274;
    if (v8 != v9) {
      continue;
    }
    break;
  }
}

void sub_498B44(void **a1, int *a2, void *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 76) = 1;
  *(_DWORD *)(a4 + 16) = v8 | 0x21;
  uint64_t v9 = *(_DWORD **)(a4 + 48);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    uint64_t v9 = sub_1104EA8((uint64_t)v11);
    *(void *)(a4 + 48) = v9;
  }
  int v12 = *a2;
  int v13 = v9[4];
  v9[4] = v13 | 1;
  v9[6] = v12;
  int v14 = *((unsigned __int8 *)a2 + 8);
  v9[7] = a2[1];
  v9[8] = v14;
  int v15 = *((unsigned __int8 *)a2 + 9);
  v9[4] = v13 | 0xF;
  v9[9] = v15;
  *(_DWORD *)(a4 + 16) |= 2u;
  int8x8_t v16 = *(_DWORD **)(a4 + 56);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a4 + 8);
    uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (void *)*v18;
    }
    int8x8_t v16 = sub_1104EA8((uint64_t)v18);
    *(void *)(a4 + 56) = v16;
  }
  int v19 = a2[3];
  int v20 = v16[4];
  v16[4] = v20 | 1;
  v16[6] = v19;
  int v21 = *((unsigned __int8 *)a2 + 20);
  v16[7] = a2[4];
  v16[8] = v21;
  int v22 = *((unsigned __int8 *)a2 + 21);
  v16[4] = v20 | 0xF;
  v16[9] = v22;
  unsigned int v23 = a2[32];
  if (v23 <= 2)
  {
    *(_DWORD *)(a4 + 16) |= 0x10u;
    *(_DWORD *)(a4 + 72) = v23;
  }
  uint64_t v24 = (int **)*((void *)a2 + 3);
  for (uint64_t i = (int **)*((void *)a2 + 4); v24 != i; v24 += 8)
  {
    unint64_t v26 = *(_DWORD **)(a4 + 40);
    if (v26 && (uint64_t v27 = *(int *)(a4 + 32), (int)v27 < *v26))
    {
      *(_DWORD *)(a4 + 32) = v27 + 1;
      uint64_t v28 = *(void *)&v26[2 * v27 + 2];
      uint64_t v29 = *v24;
      uint64_t v30 = v24[1];
      if (*v24 != v30) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v31 = sub_1103924(*(void *)(a4 + 24));
      uint64_t v28 = sub_188CDC8(a4 + 24, v31);
      uint64_t v29 = *v24;
      uint64_t v30 = v24[1];
      if (*v24 != v30)
      {
        do
        {
LABEL_22:
          unint64_t v34 = *(_DWORD **)(v28 + 32);
          if (v34 && (uint64_t v35 = *(int *)(v28 + 24), (int)v35 < *v34))
          {
            *(_DWORD *)(v28 + 24) = v35 + 1;
            uint64_t v33 = *(void *)&v34[2 * v35 + 2];
          }
          else
          {
            uint64_t v32 = sub_110387C(*(void *)(v28 + 16));
            uint64_t v33 = sub_188CDC8(v28 + 16, v32);
          }
          sub_4987AC(a1, v29, a3, v33);
          v29 += 36;
        }
        while (v29 != v30);
      }
    }
  }
}

uint64_t sub_498D5C(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  int v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  int8x8_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x1Du)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[14];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v43 = &v53;
        }
        else {
          int v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        int v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __n128 v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_4990F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_4992B0(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  int v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  int8x8_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x15u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[10];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v43 = &v53;
        }
        else {
          int v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        int v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __n128 v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_499648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_499804(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    int v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  int v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  int8x8_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 5u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[2];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v43 = &v53;
        }
        else {
          int v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        int v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __n128 v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_499B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_499D58()
{
  unk_2558C6F = 16641;
  word_2558C58 = 65;
  byte_2558C87 = 1;
  byte_2558C71 = 0;
}

_DWORD *sub_499D80(uint64_t a1)
{
  uint64_t result = *(_DWORD **)a1;
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  if (result != v3)
  {
    while (*result)
    {
      result += 36;
      if (result == v3) {
        goto LABEL_4;
      }
    }
  }
  if (result == v3)
  {
LABEL_4:
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "Journey has a segment bundle without a main segment");
    int v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return result;
}

void sub_499E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_499E4C(_DWORD *a1, int a2)
{
  switch(a1[272])
  {
    case 0:
      unsigned int v2 = a1[6];
      unsigned int v3 = a1[7];
      BOOL v4 = a2 == 2;
      if (v3 == 0x7FFFFFFF) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 1:
      unsigned int v2 = a1[7];
      goto LABEL_11;
    case 2:
      unsigned int v2 = a1[1];
      goto LABEL_11;
    case 3:
      unsigned int v2 = a1[136];
      goto LABEL_11;
    case 4:
      unsigned int v2 = a1[3];
LABEL_11:
      unsigned int v3 = v2;
      BOOL v4 = a2 == 2;
      if (v2 == 0x7FFFFFFF)
      {
LABEL_12:
        uint64_t result = v2;
      }
      else
      {
LABEL_3:
        if (v4) {
          uint64_t result = v3;
        }
        else {
          uint64_t result = v2;
        }
      }
      break;
    default:
      uint64_t result = 0x7FFFFFFFLL;
      break;
  }
  return result;
}

unint64_t sub_499F10(unsigned int *a1)
{
  switch(a1[272])
  {
    case 0u:
      unint64_t result = a1[6] | ((unint64_t)a1[7] << 32);
      break;
    case 1u:
      unint64_t result = a1[7] | ((unint64_t)a1[7] << 32);
      break;
    case 2u:
      unint64_t result = a1[1] | ((unint64_t)a1[1] << 32);
      break;
    case 3u:
      unint64_t result = a1[136] | ((unint64_t)a1[136] << 32);
      break;
    case 4u:
      unint64_t result = a1[3] | ((unint64_t)a1[3] << 32);
      break;
    default:
      unint64_t result = 0x7FFFFFFF7FFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_499FDC(_DWORD *a1, int a2)
{
  switch(a1[272])
  {
    case 0:
      unsigned int v2 = a1[9];
      unsigned int v3 = a1[10];
      BOOL v4 = a2 == 2;
      if (v3 == 0x7FFFFFFF) {
        goto LABEL_15;
      }
      goto LABEL_3;
    case 1:
      unsigned int v2 = a1[8];
      goto LABEL_14;
    case 2:
      unsigned int v2 = a1[2];
      goto LABEL_14;
    case 3:
      int v6 = a1[137];
      int v7 = v6 / 10;
      int v8 = v6 % 10;
      if (v6 < 0) {
        char v9 = -5;
      }
      else {
        char v9 = 5;
      }
      unsigned int v2 = v7 + a1[136] + (((103 * (char)(v9 + v8)) >> 15) & 1) + ((103 * (char)(v9 + v8)) >> 10);
      goto LABEL_14;
    case 4:
      unsigned int v2 = a1[4];
LABEL_14:
      unsigned int v3 = v2;
      BOOL v4 = a2 == 2;
      if (v2 == 0x7FFFFFFF)
      {
LABEL_15:
        uint64_t result = v2;
      }
      else
      {
LABEL_3:
        if (v4) {
          uint64_t result = v3;
        }
        else {
          uint64_t result = v2;
        }
      }
      break;
    default:
      uint64_t result = 0x7FFFFFFFLL;
      break;
  }
  return result;
}

unint64_t sub_49A0F4(unsigned int *a1)
{
  switch(a1[272])
  {
    case 0u:
      unint64_t result = a1[9] | ((unint64_t)a1[10] << 32);
      break;
    case 1u:
      unint64_t result = a1[8] | ((unint64_t)a1[8] << 32);
      break;
    case 2u:
      unint64_t result = a1[2] | ((unint64_t)a1[2] << 32);
      break;
    case 3u:
      int v2 = a1[137];
      int v3 = v2 / 10;
      int v4 = v2 % 10;
      if (v2 < 0) {
        char v5 = -5;
      }
      else {
        char v5 = 5;
      }
      uint64_t v6 = v3 + a1[136] + (((103 * (char)(v5 + v4)) >> 15) & 1) + ((103 * (char)(v5 + v4)) >> 10);
      unint64_t result = v6 | (unint64_t)(v6 << 32);
      break;
    case 4u:
      unint64_t result = a1[4] | ((unint64_t)a1[4] << 32);
      break;
    default:
      unint64_t result = 0x7FFFFFFF7FFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_49A214(uint64_t a1, int a2)
{
  uint64_t v2 = 28;
  if (*(_DWORD *)(a1 + 28) == 0x7FFFFFFF) {
    uint64_t v2 = 24;
  }
  if (a2 != 2) {
    uint64_t v2 = 24;
  }
  return *(unsigned int *)(a1 + v2);
}

uint64_t sub_49A23C(uint64_t a1, int a2)
{
  uint64_t v2 = 40;
  if (*(_DWORD *)(a1 + 40) == 0x7FFFFFFF) {
    uint64_t v2 = 36;
  }
  if (a2 != 2) {
    uint64_t v2 = 36;
  }
  return *(unsigned int *)(a1 + v2);
}

uint64_t sub_49A264(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 128) == 2) {
    uint64_t v1 = 4 * (*(_DWORD *)(a1 + 4) != 0x7FFFFFFF);
  }
  else {
    uint64_t v1 = 0;
  }
  return *(unsigned int *)(a1 + v1);
}

uint64_t sub_49A28C(uint64_t a1)
{
  return *(void *)(a1 + 12);
}

uint64_t sub_49A29C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  int v4 = (int *)sub_4992B0(a2, v3, 0, "road access point");
  char v5 = (int *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 8));
  if (v5[1] >= 0xFFFFFFFE) {
    unsigned int v6 = -2;
  }
  else {
    unsigned int v6 = v5[1];
  }
  int v30 = *v5;
  int v7 = (int *)sub_4992B0(a2, v3, 0, "road access point");
  int v8 = (int *)sub_499804(a2, *(void *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6)), 0, "access point");
  char v9 = (int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 14));
  LODWORD(v10) = v30;
  HIDWORD(v10) = *v9;
  uint64_t v31 = v10;
  unsigned int v11 = v9[1];
  if (v11 >= 0xFFFFFFFE) {
    unsigned int v12 = -2;
  }
  else {
    unsigned int v12 = v11;
  }
  long double v13 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
  long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
  long double v15 = exp(3.14159265 - (double)v12 * 6.28318531 / 4294967300.0);
  long double v16 = atan((v15 - 1.0 / v15) * 0.5) * 57.2957795 * 0.0174532925;
  v17.i64[0] = v31;
  v17.i64[1] = HIDWORD(v31);
  int64x2_t v18 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v32 = vsubq_f64((float64x2_t)v18, (float64x2_t)vdupq_laneq_s64(v18, 1)).f64[0];
  long double v19 = sin((v14 - v16) * 0.5);
  long double v20 = v19 * v19;
  double v21 = cos(v14);
  long double v22 = v21 * cos(v16);
  long double v23 = sin(0.5 * v32);
  long double v24 = atan2(sqrt(v20 + v22 * (v23 * v23)), sqrt(1.0 - (v20 + v22 * (v23 * v23))));
  double v25 = (v24 + v24) * 6372797.56 * 100.0;
  if (v25 >= 0.0)
  {
    double v26 = v25;
    if (v25 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v27 = (uint64_t)(v25 + v25) + 1;
  }
  else
  {
    double v26 = v25;
    if (v25 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v27 = (uint64_t)(v25 + v25);
    if (v27 >= 1) {
      --v27;
    }
  }
  double v26 = (double)(v27 >> 1);
LABEL_15:
  if (v26 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v25 >= 0.0)
  {
    if (v25 < 4.50359963e15)
    {
      uint64_t v28 = (uint64_t)(v25 + v25) + 1;
      return (uint64_t)(double)(v28 >> 1);
    }
  }
  else if (v25 > -4.50359963e15)
  {
    uint64_t v28 = (uint64_t)(v25 + v25);
    if (v28 >= 1) {
      --v28;
    }
    return (uint64_t)(double)(v28 >> 1);
  }
  return (uint64_t)v25;
}

uint64_t sub_49A5B8(uint64_t a1, uint64_t a2)
{
  int v4 = (int *)sub_49B168(a2, *(unsigned int *)(*(void *)(a1 + 48) + 4) | ((unint64_t)**(unsigned int **)(a1 + 48) << 32), 0, "transfer");
  unint64_t v29 = *(void *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 6));
  char v5 = (int *)sub_49B168(a2, *(unsigned int *)(*(void *)(a1 + 56) - 4) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 56) - 8) << 32), 0, "transfer");
  unint64_t v28 = *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 8));
  uint64_t v6 = sub_49A8E8(a2, &v29);
  unint64_t v7 = sub_49A8E8(a2, &v28);
  unsigned int v8 = v7;
  if (v6 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v9 = HIDWORD(v7);
  if ((HIDWORD(v7) & v7) == 0xFFFFFFFF) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v10 = exp(3.14159265 - (double)HIDWORD(v6) * 6.28318531 / 4294967300.0);
  long double v11 = atan((v10 - 1.0 / v10) * 0.5) * 57.2957795 * 0.0174532925;
  v12.i64[0] = v6;
  v12.i64[1] = v8;
  long double v13 = exp(3.14159265 - (double)v9 * 6.28318531 / 4294967300.0);
  long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v15 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v12), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v27 = vsubq_f64((float64x2_t)v15, (float64x2_t)vdupq_laneq_s64(v15, 1)).f64[0];
  long double v16 = sin((v11 - v14) * 0.5);
  long double v17 = v16 * v16;
  double v18 = cos(v11);
  long double v19 = v18 * cos(v14);
  long double v20 = sin(0.5 * v27);
  long double v21 = atan2(sqrt(v20 * v20 * v19 + v17), sqrt(1.0 - (v20 * v20 * v19 + v17)));
  double v22 = (v21 + v21) * 6372797.56 * 100.0;
  if (v22 >= 0.0)
  {
    double v23 = v22;
    if (v22 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v24 = (uint64_t)(v22 + v22) + 1;
  }
  else
  {
    double v23 = v22;
    if (v22 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v24 = (uint64_t)(v22 + v22);
    if (v24 >= 1) {
      --v24;
    }
  }
  double v23 = (double)(v24 >> 1);
LABEL_12:
  if (v23 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v22 >= 0.0)
  {
    if (v22 < 4.50359963e15)
    {
      uint64_t v26 = (uint64_t)(v22 + v22) + 1;
      return (uint64_t)(double)(v26 >> 1);
    }
  }
  else if (v22 > -4.50359963e15)
  {
    uint64_t v26 = (uint64_t)(v22 + v22);
    if (v26 >= 1) {
      --v26;
    }
    return (uint64_t)(double)(v26 >> 1);
  }
  return (uint64_t)v22;
}

uint64_t sub_49A8E8(uint64_t a1, unint64_t *a2)
{
  int v4 = (int *)sub_49B6BC(a1, *a2, 0, "transfer node");
  char v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 7u) {
    return -1;
  }
  uint64_t v6 = v5[3];
  if (!v6) {
    return -1;
  }
  int v7 = *((unsigned __int8 *)v4 + v6);
  if (v7 == 2)
  {
    int64x2_t v15 = (int *)sub_49B6BC(a1, *a2, 0, "transfer node");
    long double v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u)
    {
      uint64_t v17 = v16[3];
      if (!v17)
      {
LABEL_18:
        unint64_t v20 = 0xFFFFFFFF00000000;
        goto LABEL_19;
      }
      if (*((unsigned char *)v15 + v17) == 2)
      {
        double v18 = (int *)sub_49B6BC(a1, *a2, 0, "transfer node");
        long double v19 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 8));
        uint64_t v17 = *v19;
        unint64_t v20 = (unint64_t)v19[1] << 32;
LABEL_19:
        long double v21 = (int *)sub_499804(a1, v17 | v20, 0, "access point");
        double v22 = (unsigned __int16 *)((char *)v21 - *v21 + 14);
        goto LABEL_20;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  if (v7 != 3) {
    return -1;
  }
  unsigned int v8 = (int *)sub_49B6BC(a1, *a2, 0, "transfer node");
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 7u) {
    goto LABEL_14;
  }
  uint64_t v10 = v9[3];
  if (!v10)
  {
LABEL_15:
    unint64_t v13 = 0xFFFFFFFF00000000;
    goto LABEL_16;
  }
  if (*((unsigned char *)v8 + v10) != 3)
  {
LABEL_14:
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  long double v11 = (int *)sub_49B6BC(a1, *a2, 0, "transfer node");
  uint64x2_t v12 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
  uint64_t v10 = *v12;
  unint64_t v13 = (unint64_t)v12[1] << 32;
LABEL_16:
  long double v21 = (int *)sub_498D5C(a1, v10 | v13, 0, "stop");
  double v22 = (unsigned __int16 *)((char *)v21 - *v21 + 6);
LABEL_20:
  uint64_t v24 = (uint64_t)v21 + *v22;
  uint64_t v23 = *(unsigned int *)v24;
  LODWORD(v24) = *(_DWORD *)(v24 + 4);
  if (v24 >= 0xFFFFFFFE) {
    uint64_t v24 = 4294967294;
  }
  else {
    uint64_t v24 = v24;
  }
  return (v24 << 32) | v23;
}

uint64_t sub_49AAD4(unsigned int *a1, uint64_t a2)
{
  unsigned int v3 = a1[4];
  unsigned int v2 = a1[5];
  if (v3 <= v2) {
    unsigned int v4 = a1[5];
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (v3 < v2)
  {
    uint64_t v7 = 0;
    double v8 = 6.28318531;
    double v9 = 1.0;
    float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v49 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v47 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v11 = a1[1];
      uint64x2_t v12 = sub_369B60(a2, a1[2] | (unint64_t)(v11 << 32), 0);
      unint64_t v13 = &v12[-*(int *)v12];
      if (*(unsigned __int16 *)v13 < 5u)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (*((_WORD *)v13 + 2)) {
          v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
        }
      }
      int64x2_t v15 = (int *)(v14 + 4 * v11 + 4 + *(unsigned int *)(v14 + 4 * v11 + 4));
      long double v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 >= 0x1Fu && (uint64_t v17 = v16[15]) != 0) {
        int v18 = *(int *)((char *)v15 + v17);
      }
      else {
        int v18 = -1;
      }
      unint64_t v53 = *(void *)&v12[8 * v18
                          + 4
                          + 8 * v3
                          + *((unsigned __int16 *)v13 + 8)
                          + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 8)]];
      sub_49BC10(a2, &v53, &v51);
      long double v19 = v51;
      unint64_t v20 = v52;
      double v21 = 0.0;
      if (v51 == v52) {
        break;
      }
      double v22 = v51 + 12;
      if (v51 + 12 == v52) {
        break;
      }
      double v23 = 0.0;
      do
      {
        LODWORD(v21) = *((_DWORD *)v22 - 2);
        double v24 = v8;
        long double v25 = exp(3.14159265 - (double)*(unint64_t *)&v21 * v8 / 4294967300.0);
        *(double *)&unint64_t v26 = atan((v25 - v9 / v25) * 0.5) * 57.2957795;
        long double v27 = *(double *)&v26 * 0.0174532925;
        unsigned int v28 = *((_DWORD *)v22 - 3);
        LODWORD(v26) = *((_DWORD *)v22 + 1);
        long double v29 = exp(3.14159265 - (double)v26 * v8 / 4294967300.0);
        long double v30 = atan((v29 - 1.0 / v29) * 0.5) * 57.2957795 * 0.0174532925;
        v31.i64[0] = v28;
        v31.i64[1] = *(unsigned int *)v22;
        int64x2_t v32 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v31), v49), v48), v47), v46);
        double v50 = vsubq_f64((float64x2_t)v32, (float64x2_t)vdupq_laneq_s64(v32, 1)).f64[0];
        long double v33 = sin((v27 - v30) * 0.5);
        long double v34 = v33 * v33;
        double v35 = cos(v27);
        long double v36 = v35 * cos(v30);
        long double v37 = sin(0.5 * v50);
        long double v38 = v36 * (v37 * v37);
        double v9 = 1.0;
        double v39 = v34 + v38;
        double v8 = v24;
        long double v40 = atan2(sqrt(v39), sqrt(1.0 - v39));
        double v21 = (v40 + v40) * 6372797.56;
        double v23 = v23 + v21;
        v22 += 12;
      }
      while (v22 != v20);
      double v21 = v23 * 100.0;
      if (v23 * 100.0 >= 0.0)
      {
        if (v21 < 4.50359963e15) {
          break;
        }
        char v43 = 0;
        if (v21 < 9.22337204e18) {
          goto LABEL_29;
        }
      }
      else if (v21 <= -4.50359963e15)
      {
        char v43 = 1;
        if (v21 < 9.22337204e18) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v41 = (uint64_t)(v21 + v21);
        if (v41 >= 1) {
          --v41;
        }
        double v42 = (double)(v41 >> 1);
        char v43 = 1;
        if (v42 < 9.22337204e18)
        {
LABEL_29:
          if (v43)
          {
            if (v21 > -4.50359963e15)
            {
              uint64_t v44 = (uint64_t)(v21 + v21);
              if (v44 >= 1) {
                --v44;
              }
LABEL_36:
              double v21 = (double)(v44 >> 1);
            }
          }
          else if (v21 < 4.50359963e15)
          {
            uint64_t v44 = (uint64_t)(v21 + v21) + 1;
            goto LABEL_36;
          }
          uint64_t v10 = (uint64_t)v21;
          if (!v19) {
            goto LABEL_8;
          }
LABEL_7:
          __n128 v52 = v19;
          operator delete(v19);
          goto LABEL_8;
        }
      }
LABEL_6:
      uint64_t v10 = 0x7FFFFFFFFFFFFFFELL;
      if (v19) {
        goto LABEL_7;
      }
LABEL_8:
      v7 += v10;
      if (++v3 == v4) {
        return v7;
      }
    }
    char v43 = 0;
    if ((double)(((uint64_t)(v21 + v21) + 1) >> 1) < 9.22337204e18) {
      goto LABEL_29;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_49AF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    double v8 = sub_499D80(v3);
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = *((void *)v8 + 2);
    if (v9 != v10)
    {
      while (2)
      {
        switch(*(_DWORD *)(v9 + 1088))
        {
          case 0:
            uint64_t v11 = sub_49AAD4((unsigned int *)v9, a3);
            goto LABEL_7;
          case 1:
            uint64_t v11 = sub_49A5B8(v9, a2);
            goto LABEL_7;
          case 2:
            uint64_t v11 = sub_49A29C(v9, a2);
LABEL_7:
            v7 += v11;
            goto LABEL_8;
          case 3:
            v7 += *(void *)(v9 + 536);
            v9 += 1096;
            if (v9 != v10) {
              continue;
            }
            goto LABEL_3;
          default:
LABEL_8:
            v9 += 1096;
            if (v9 != v10) {
              continue;
            }
            goto LABEL_3;
        }
      }
    }
LABEL_3:
    v3 += 64;
  }
  while (v3 != v4);
  return v7;
}

BOOL sub_49B018(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(void *)(a1 + 24);
  if (*(void *)(v2 + 8) - v1 != 64) {
    return 0;
  }
  uint64_t v3 = sub_499D80(v1);
  uint64_t v5 = *((void *)v3 + 1);
  uint64_t v4 = *((void *)v3 + 2);
  if (v5 == v4) {
    return 1;
  }
  uint64_t v6 = v5 + 1096;
  do
  {
    int v7 = *(_DWORD *)(v6 - 8);
    BOOL result = v7 != 0;
    if (v7) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v6 += 1096;
  }
  while (!v9);
  return result;
}

BOOL sub_49B080(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 1088) - 1) < 3;
}

uint64_t sub_49B094(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *v1;
LABEL_4:
    if (v3 != v1[1]) {
      break;
    }
    v1 += 8;
    if (v1 == v2) {
      return 0;
    }
  }
  for (uint64_t i = *(void *)(v3 + 8); ; i += 1096)
  {
    if (i == *(void *)(v3 + 16))
    {
      v3 += 144;
      goto LABEL_4;
    }
    if (!*(_DWORD *)(i + 1088) && (*(unsigned char *)(i + 32) == 1 || *(unsigned char *)(i + 44) == 1)) {
      break;
    }
  }
  return 1;
}

uint64_t sub_49B104(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v1 != v2)
  {
    while (2)
    {
      for (uint64_t i = *v1; i != v1[1]; i += 144)
      {
        uint64_t v4 = *(void *)(i + 80);
        uint64_t v5 = *(void *)(i + 88);
        if (v4 != v5)
        {
          while (*(unsigned char *)(v4 + 24) != 1)
          {
            v4 += 28;
            if (v4 == v5) {
              goto LABEL_3;
            }
          }
          return 1;
        }
LABEL_3:
        ;
      }
      v1 += 8;
      if (v1 != v2) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t sub_49B168(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int64x2_t v15 = (int *)((char *)v14 + *v14);
  long double v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x23u)
  {
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[17];
    if (v17)
    {
      int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64x2_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        long double v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        double v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long double v37 = &v54;
        }
        else {
          long double v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        double v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v49 = sub_736EC(6u);
        double v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_49B500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_49B6BC(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int64x2_t v15 = (int *)((char *)v14 + *v14);
  long double v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x29u)
  {
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[20];
    if (v17)
    {
      int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64x2_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        long double v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        double v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long double v37 = &v54;
        }
        else {
          long double v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        double v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v49 = sub_736EC(6u);
        double v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_49BA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_49BC10(uint64_t a1@<X0>, unint64_t *a2@<X1>, char **a3@<X8>)
{
  long double v37 = 0;
  long double v38 = 0;
  uint64_t v4 = (int *)sub_49BF34(a1, *a2, 0, "link");
  if (v4)
  {
    long double v33 = a3;
    uint64_t v5 = (unsigned int *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 8));
    uint64_t v6 = *v5;
    uint64_t v8 = (uint64_t)v5 + v6 + 4;
    unsigned int v7 = *(unsigned int *)((char *)v5 + v6);
    if (v7)
    {
      unint64_t v9 = 0;
      uint64_t v34 = v8 + 12 * v7;
      while (1)
      {
        uint64_t v10 = (int *)sub_49C488(a1, *(void *)v8, 0, "segment");
        uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v11 < 5u)
        {
          unsigned int v12 = 0;
        }
        else
        {
          unsigned int v12 = (int *)v11[2];
          if (v12) {
            unsigned int v12 = (int *)((char *)v12 + (void)v10 + *(unsigned int *)((char *)v12 + (void)v10));
          }
        }
        uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 < 5u) {
          break;
        }
        uint64_t v14 = v13[2];
        if (!v14) {
          break;
        }
        int64x2_t v15 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
        int v16 = *v15;
        uint64_t v36 = v8;
        if (*v15) {
          goto LABEL_14;
        }
LABEL_4:
        uint64_t v8 = v36 + 12;
        if (v36 + 12 == v34)
        {
          uint64x2_t v31 = v37;
          uint64_t v32 = v38;
          goto LABEL_42;
        }
      }
      int64x2_t v15 = 0;
      int v16 = -17958193;
      uint64_t v36 = v8;
LABEL_14:
      unsigned int v17 = 0;
      int v18 = *(unsigned __int8 *)(v8 + 8);
      long double v19 = v9;
      do
      {
        while (1)
        {
          unsigned int v20 = v17;
          if (v18 == 1) {
            unsigned int v20 = *v15 + ~v17;
          }
          uint64_t v21 = (uint64_t)&v15[2 * v20 + 1];
          uint64_t v22 = *(unsigned int *)v21;
          LODWORD(v21) = *(_DWORD *)(v21 + 4);
          uint64_t v21 = v21 >= 0xFFFFFFFE ? 4294967294 : v21;
          uint64_t v23 = v22 | (v21 << 32);
          if (v19 >= v38) {
            break;
          }
          *(void *)long double v19 = v23;
          *((_DWORD *)v19 + 2) = 0x7FFFFFFF;
          unint64_t v9 = v19 + 12;
          ++v17;
          v19 += 12;
          if (v17 == v16) {
            goto LABEL_4;
          }
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v37) >> 2) + 1;
        if (v24 > 0x1555555555555555) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v38 - v37) >> 2) > v24) {
          unint64_t v24 = 0x5555555555555556 * ((v38 - v37) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v38 - v37) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v25 = 0x1555555555555555;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25)
        {
          if (v25 > 0x1555555555555555) {
            sub_188D718();
          }
          unint64_t v26 = (char *)operator new(12 * v25);
        }
        else
        {
          unint64_t v26 = 0;
        }
        int v27 = &v26[4 * ((v19 - v37) >> 2)];
        *(void *)int v27 = v23;
        *((_DWORD *)v27 + 2) = 0x7FFFFFFF;
        unsigned int v28 = v27;
        if (v19 != v37)
        {
          do
          {
            uint64_t v29 = *(void *)(v19 - 12);
            v19 -= 12;
            int v30 = *((_DWORD *)v19 + 2);
            *(void *)(v28 - 12) = v29;
            v28 -= 12;
            *((_DWORD *)v28 + 2) = v30;
          }
          while (v19 != v37);
          long double v19 = v37;
        }
        unint64_t v9 = v27 + 12;
        long double v37 = v28;
        long double v38 = &v26[12 * v25];
        if (v19) {
          operator delete(v19);
        }
        ++v17;
        long double v19 = v9;
      }
      while (v17 != v16);
      goto LABEL_4;
    }
    uint64_t v32 = 0;
    unint64_t v9 = 0;
    uint64x2_t v31 = 0;
LABEL_42:
    *long double v33 = v31;
    v33[1] = v9;
    v33[2] = v32;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_49BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_49BF34(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int64x2_t v15 = (int *)((char *)v14 + *v14);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x11u)
  {
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[8];
    if (v17)
    {
      int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64x2_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        long double v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        double v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long double v37 = &v54;
        }
        else {
          long double v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        double v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v49 = sub_736EC(6u);
        double v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_49C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_49C488(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int64x2_t v15 = (int *)((char *)v14 + *v14);
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x17u)
  {
    int v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[11];
    if (v17)
    {
      int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      int v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64x2_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        long double v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        double v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long double v37 = &v54;
        }
        else {
          long double v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        double v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v43 = &v53;
        }
        else {
          char v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        unsigned int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        float64x2_t v49 = sub_736EC(6u);
        double v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __n128 v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_49C820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_49C9DC()
{
  unk_2558C9F = 16641;
  word_2558C88 = 65;
  byte_2558CB7 = 1;
  byte_2558CA1 = 0;
}

BOOL sub_49CA04(void *a1)
{
  if (*a1) {
    return 1;
  }
  if (a1[4]) {
    return 1;
  }
  return a1[8] != 0;
}

void sub_49CA34(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  a1[4] = 0;
  a1[5] = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[7];
    a1[6] = 0;
    a1[7] = 0;
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[7];
    a1[6] = 0;
    a1[7] = 0;
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_49CB10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

double sub_49CB90(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 850045863;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  return result;
}

void sub_49CBE8(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return;
  }
  uint64_t v4 = (std::mutex *)(a1 + 200);
  std::mutex::lock((std::mutex *)(a1 + 200));
  std::mutex::lock((std::mutex *)(a1 + 136));
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)&long long v35 = v6;
  *((void *)&v35 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v36 = *(void *)(a1 + 72);
  uint64_t v37 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v38 = *(void *)(a1 + 88);
  uint64_t v39 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v40 = *(void *)(a1 + 104);
  uint64_t v41 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v42 = *(void *)(a1 + 120);
  uint64_t v43 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock((std::mutex *)(a1 + 136));
  uint64_t v11 = *a2;
  if (v6)
  {
    BOOL v12 = *(void *)(v11 + 56) != *(void *)(v6 + 56);
    if (v38) {
      BOOL v13 = *(void *)(v11 + 56) != *(void *)(v6 + 56);
    }
    else {
      BOOL v13 = 0;
    }
    uint64_t v14 = a2[1];
    if (!v14) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v12 = 1;
  BOOL v13 = v38 != 0;
  uint64_t v14 = a2[1];
  if (v14) {
LABEL_17:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
LABEL_18:
  int64x2_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  *(void *)&long long v35 = v11;
  *((void *)&v35 + 1) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v12) {
LABEL_21:
    }
      sub_49D02C();
  }
  else if (v12)
  {
    goto LABEL_21;
  }
  if (v13) {
    sub_C3CBB4();
  }
  long long v26 = v35;
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = v38;
  uint64_t v30 = v39;
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = v40;
  uint64_t v32 = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v42;
  uint64_t v34 = v43;
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::lock((std::mutex *)(a1 + 136));
  sub_373FEC(a1 + 56, &v26);
  std::mutex::unlock((std::mutex *)(a1 + 136));
  sub_37D394(&v26);
  if (*(void *)(a1 + 24))
  {
    long long v17 = v35;
    if (*((void *)&v35 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = v36;
    uint64_t v19 = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = v38;
    uint64_t v21 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = v40;
    uint64_t v23 = v41;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = v42;
    uint64_t v25 = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if (!v16) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v16 + 48))(v16, &v17);
    sub_37D394(&v17);
  }
  sub_37D394(&v35);
  std::mutex::unlock(v4);
}

void sub_49CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_37D394((uint64_t *)va);
  sub_37D394((void *)(v12 - 144));
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_49CF68(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 64);
  *a2 = *(void *)(a1 + 56);
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 80);
  a2[2] = *(void *)(a1 + 72);
  a2[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  a2[4] = *(void *)(a1 + 88);
  a2[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 112);
  a2[6] = *(void *)(a1 + 104);
  a2[7] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  a2[8] = *(void *)(a1 + 120);
  a2[9] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }

  std::mutex::unlock(v4);
}

void sub_49D02C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = *(void *)(v0 + 48);
  v5[0] = *(void *)(v0 + 40);
  v5[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = v1[1];
  v4[0] = *v1;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_C26DC8((uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
}

void sub_49D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
}

void sub_49D320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_49D33C(uint64_t result, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v3 = result;
    std::mutex::lock((std::mutex *)(result + 200));
    std::mutex::lock((std::mutex *)(v3 + 136));
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v12 = *(void *)(v3 + 56);
    uint64_t v13 = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(void *)(v3 + 80);
    uint64_t v14 = *(void *)(v3 + 72);
    uint64_t v15 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v3 + 96);
    uint64_t v16 = *(void *)(v3 + 88);
    long long v17 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(void *)(v3 + 112);
    uint64_t v18 = *(void *)(v3 + 104);
    uint64_t v19 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(v3 + 128);
    uint64_t v20 = *(void *)(v3 + 120);
    uint64_t v21 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock((std::mutex *)(v3 + 136));
    uint64_t v10 = *a2;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v17;
    uint64_t v16 = v10;
    long long v17 = v9;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_C3CBB4();
  }
  return result;
}

void sub_49D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_37D394((uint64_t *)va);
  sub_37D394((void *)(v12 - 128));
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_49D658(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v4 = (std::mutex *)(a1 + 200);
    std::mutex::lock((std::mutex *)(a1 + 200));
    std::mutex::lock((std::mutex *)(a1 + 136));
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)&long long v31 = *(void *)(a1 + 56);
    *((void *)&v31 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v32 = *(void *)(a1 + 72);
    uint64_t v33 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v34 = *(void *)(a1 + 88);
    uint64_t v35 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v36 = *(void *)(a1 + 104);
    uint64_t v37 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock((std::mutex *)(a1 + 136));
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = v11;
    uint64_t v39 = v10;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    long long v22 = v31;
    if (*((void *)&v31 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = v32;
    uint64_t v24 = v33;
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v34;
    uint64_t v26 = v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = v36;
    uint64_t v28 = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = v38;
    uint64_t v30 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    std::mutex::lock((std::mutex *)(a1 + 136));
    sub_373FEC(a1 + 56, &v22);
    std::mutex::unlock((std::mutex *)(a1 + 136));
    sub_37D394(&v22);
    if (*(void *)(a1 + 24))
    {
      long long v13 = v31;
      if (*((void *)&v31 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = v32;
      uint64_t v15 = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v34;
      uint64_t v17 = v35;
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = v36;
      uint64_t v19 = v37;
      if (v37) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = v38;
      uint64_t v21 = v39;
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void *)(a1 + 24);
      if (!v12) {
        sub_29F82C();
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v12 + 48))(v12, &v13);
      sub_37D394(&v13);
    }
    sub_37D394(&v31);
    std::mutex::unlock(v4);
  }
}

void sub_49D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_37D394((uint64_t *)va);
  sub_37D394((void *)(v12 - 144));
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void *sub_49D948(void *a1)
{
  sub_37E29C(a1 + 529);
  sub_49DA2C(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[1];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[1];
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *sub_49DA2C(void *a1)
{
  sub_37D394(a1 + 491);
  uint64_t v2 = a1[490];
  a1[490] = 0;
  if (v2)
  {
    sub_49DB44(v2, *(void **)(v2 + 16));
    uint64_t v3 = *(void **)v2;
    *(void *)uint64_t v2 = 0;
    if (v3) {
      operator delete(v3);
    }
    operator delete();
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_49DB44(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[13];
      v2[13] = 0;
      if (v4)
      {
        uint64_t v5 = *(void **)v4;
        if (*(void *)v4)
        {
          *(void *)(v4 + 8) = v5;
          operator delete(v5);
        }
        operator delete();
      }
      uint64_t v6 = (void *)v2[10];
      if (v6)
      {
        v2[11] = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)v2[7];
      if (v7)
      {
        v2[8] = v7;
        operator delete(v7);
      }
      uint64_t v8 = (void *)v2[4];
      if (v8)
      {
        v2[5] = v8;
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_49DBF4(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 4;
      char v7 = 4;
      int v3 = 1347376211;
      goto LABEL_5;
    case 1:
      uint64_t v2 = 4;
      char v7 = 4;
      int v3 = 1280065864;
LABEL_5:
      *(_DWORD *)__p = v3;
      __p[4] = 0;
      break;
    case 2:
      uint64_t v2 = 7;
      char v7 = 7;
      strcpy(__p, "STATION");
      break;
    case 3:
      uint64_t v2 = 12;
      char v7 = 12;
      strcpy(__p, "ACCESS_POINT");
      break;
    case 4:
      uint64_t v2 = 17;
      char v7 = 17;
      strcpy(__p, "ROAD_ACCESS_POINT");
      break;
    default:
      uint64_t v2 = 0;
      char v7 = 0;
      __p[0] = 0;
      break;
  }
  double result = sub_188FC78(a1, (uint64_t)__p, v2);
  uint64_t v5 = result;
  if (v7 < 0)
  {
    operator delete(*(void **)__p);
    return v5;
  }
  return result;
}

void sub_49DD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_49DD5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 28);
  sub_49DE04(*(_DWORD *)(a1 + 24), __p);
  *(_DWORD *)a2 = v3;
  uint64_t v4 = (unsigned char *)(a2 + 8);
  if (SHIBYTE(v7) < 0)
  {
    sub_4200(v4, __p[0], (unint64_t)__p[1]);
    int v5 = SHIBYTE(v7);
    *(_DWORD *)(a2 + 32) = 100;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
    *(void *)(a2 + 24) = v7;
    *(_DWORD *)(a2 + 32) = 100;
  }
}

void sub_49DDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_49DE04@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v2 = "";
  switch(a1)
  {
    case 8:
      uint64_t v2 = "ALL";
      break;
    case 12:
      uint64_t v2 = "DZD";
      break;
    case 32:
      uint64_t v2 = "ARS";
      break;
    case 36:
      uint64_t v2 = "AUD";
      break;
    case 44:
      uint64_t v2 = "BSD";
      break;
    case 48:
      uint64_t v2 = "BHD";
      break;
    case 50:
      uint64_t v2 = "BDT";
      break;
    case 51:
      uint64_t v2 = "AMD";
      break;
    case 52:
      uint64_t v2 = "BBD";
      break;
    case 60:
      uint64_t v2 = "BMD";
      break;
    case 64:
      uint64_t v2 = "BTN";
      break;
    case 68:
      uint64_t v2 = "BOB";
      break;
    case 72:
      uint64_t v2 = "BWP";
      break;
    case 84:
      uint64_t v2 = "BZD";
      break;
    case 90:
      uint64_t v2 = "SBD";
      break;
    case 96:
      uint64_t v2 = "BND";
      break;
    case 104:
      uint64_t v2 = "MMK";
      break;
    case 108:
      uint64_t v2 = "BIF";
      break;
    case 116:
      uint64_t v2 = "KHR";
      break;
    case 124:
      uint64_t v2 = "CAD";
      break;
    case 132:
      uint64_t v2 = "CVE";
      break;
    case 136:
      uint64_t v2 = "KYD";
      break;
    case 144:
      uint64_t v2 = "LKR";
      break;
    case 152:
      uint64_t v2 = "CLP";
      break;
    case 156:
      uint64_t v2 = "CNY";
      break;
    case 170:
      uint64_t v2 = "COP";
      break;
    case 174:
      uint64_t v2 = "KMF";
      break;
    case 188:
      uint64_t v2 = "CRC";
      break;
    case 191:
      uint64_t v2 = "HRK";
      break;
    case 192:
      uint64_t v2 = "CUP";
      break;
    case 203:
      uint64_t v2 = "CZK";
      break;
    case 208:
      uint64_t v2 = "DKK";
      break;
    case 214:
      uint64_t v2 = "DOP";
      break;
    case 222:
      uint64_t v2 = "SVC";
      break;
    case 230:
      uint64_t v2 = "ETB";
      break;
    case 232:
      uint64_t v2 = "ERN";
      break;
    case 238:
      uint64_t v2 = "FKP";
      break;
    case 242:
      uint64_t v2 = "FJD";
      break;
    case 262:
      uint64_t v2 = "DJF";
      break;
    case 270:
      uint64_t v2 = "GMD";
      break;
    case 292:
      uint64_t v2 = "GIP";
      break;
    case 320:
      uint64_t v2 = "GTQ";
      break;
    case 324:
      uint64_t v2 = "GNF";
      break;
    case 328:
      uint64_t v2 = "GYD";
      break;
    case 332:
      uint64_t v2 = "HTG";
      break;
    case 340:
      uint64_t v2 = "HNL";
      break;
    case 344:
      uint64_t v2 = "HKD";
      break;
    case 348:
      uint64_t v2 = "HUF";
      break;
    case 352:
      uint64_t v2 = "ISK";
      break;
    case 356:
      uint64_t v2 = "INR";
      break;
    case 360:
      uint64_t v2 = "IDR";
      break;
    case 364:
      uint64_t v2 = "IRR";
      break;
    case 368:
      uint64_t v2 = "IQD";
      break;
    case 376:
      uint64_t v2 = "ILS";
      break;
    case 388:
      uint64_t v2 = "JMD";
      break;
    case 392:
      uint64_t v2 = "JPY";
      break;
    case 398:
      uint64_t v2 = "KZT";
      break;
    case 400:
      uint64_t v2 = "JOD";
      break;
    case 404:
      uint64_t v2 = "KES";
      break;
    case 408:
      uint64_t v2 = "KPW";
      break;
    case 410:
      uint64_t v2 = "KRW";
      break;
    case 414:
      uint64_t v2 = "KWD";
      break;
    case 417:
      uint64_t v2 = "KGS";
      break;
    case 418:
      uint64_t v2 = "LAK";
      break;
    case 422:
      uint64_t v2 = "LBP";
      break;
    case 426:
      uint64_t v2 = "LSL";
      break;
    case 430:
      uint64_t v2 = "LRD";
      break;
    case 434:
      uint64_t v2 = "LYD";
      break;
    case 446:
      uint64_t v2 = "MOP";
      break;
    case 454:
      uint64_t v2 = "MWK";
      break;
    case 458:
      uint64_t v2 = "MYR";
      break;
    case 462:
      uint64_t v2 = "MVR";
      break;
    case 478:
      uint64_t v2 = "MRO";
      break;
    case 480:
      uint64_t v2 = "MUR";
      break;
    case 484:
      uint64_t v2 = "MXN";
      break;
    case 496:
      uint64_t v2 = "MNT";
      break;
    case 498:
      uint64_t v2 = "MDL";
      break;
    case 504:
      uint64_t v2 = "MAD";
      break;
    case 512:
      uint64_t v2 = "OMR";
      break;
    case 516:
      uint64_t v2 = "NAD";
      break;
    case 524:
      uint64_t v2 = "NPR";
      break;
    case 532:
      uint64_t v2 = "ANG";
      break;
    case 533:
      uint64_t v2 = "AWG";
      break;
    case 548:
      uint64_t v2 = "VUV";
      break;
    case 554:
      uint64_t v2 = "NZD";
      break;
    case 558:
      uint64_t v2 = "NIO";
      break;
    case 566:
      uint64_t v2 = "NGN";
      break;
    case 578:
      uint64_t v2 = "NOK";
      break;
    case 586:
      uint64_t v2 = "PKR";
      break;
    case 590:
      uint64_t v2 = "PAB";
      break;
    case 598:
      uint64_t v2 = "PGK";
      break;
    case 600:
      uint64_t v2 = "PYG";
      break;
    case 604:
      uint64_t v2 = "PEN";
      break;
    case 608:
      uint64_t v2 = "PHP";
      break;
    case 634:
      uint64_t v2 = "QAR";
      break;
    case 643:
      uint64_t v2 = "RUB";
      break;
    case 646:
      uint64_t v2 = "RWF";
      break;
    case 654:
      uint64_t v2 = "SHP";
      break;
    case 678:
      uint64_t v2 = "STD";
      break;
    case 682:
      uint64_t v2 = "SAR";
      break;
    case 690:
      uint64_t v2 = "SCR";
      break;
    case 694:
      uint64_t v2 = "SLL";
      break;
    case 702:
      uint64_t v2 = "SGD";
      break;
    case 704:
      uint64_t v2 = "VND";
      break;
    case 706:
      uint64_t v2 = "SOS";
      break;
    case 710:
      uint64_t v2 = "ZAR";
      break;
    case 728:
      uint64_t v2 = "SSP";
      break;
    case 748:
      uint64_t v2 = "SZL";
      break;
    case 752:
      uint64_t v2 = "SEK";
      break;
    case 756:
      uint64_t v2 = "CHF";
      break;
    case 760:
      uint64_t v2 = "SYP";
      break;
    case 764:
      uint64_t v2 = "THB";
      break;
    case 776:
      uint64_t v2 = "TOP";
      break;
    case 780:
      uint64_t v2 = "TTD";
      break;
    case 784:
      uint64_t v2 = "AED";
      break;
    case 788:
      uint64_t v2 = "TND";
      break;
    case 800:
      uint64_t v2 = "UGX";
      break;
    case 807:
      uint64_t v2 = "MKD";
      break;
    case 818:
      uint64_t v2 = "EGP";
      break;
    case 826:
      uint64_t v2 = "GBP";
      break;
    case 834:
      uint64_t v2 = "TZS";
      break;
    case 840:
      uint64_t v2 = "USD";
      break;
    case 858:
      uint64_t v2 = "UYU";
      break;
    case 860:
      uint64_t v2 = "UZS";
      break;
    case 882:
      uint64_t v2 = "WST";
      break;
    case 886:
      uint64_t v2 = "YER";
      break;
    case 901:
      uint64_t v2 = "TWD";
      break;
    case 931:
      uint64_t v2 = "CUC";
      break;
    case 932:
      uint64_t v2 = "ZWL";
      break;
    case 934:
      uint64_t v2 = "TMT";
      break;
    case 936:
      uint64_t v2 = "GHS";
      break;
    case 937:
      uint64_t v2 = "VEF";
      break;
    case 938:
      uint64_t v2 = "SDG";
      break;
    case 940:
      uint64_t v2 = "UYI";
      break;
    case 941:
      uint64_t v2 = "RSD";
      break;
    case 943:
      uint64_t v2 = "MZN";
      break;
    case 944:
      uint64_t v2 = "AZN";
      break;
    case 946:
      uint64_t v2 = "RON";
      break;
    case 947:
      uint64_t v2 = "CHE";
      break;
    case 948:
      uint64_t v2 = "CHW";
      break;
    case 949:
      uint64_t v2 = "TRY";
      break;
    case 950:
      uint64_t v2 = "XAF";
      break;
    case 951:
      uint64_t v2 = "XCD";
      break;
    case 952:
      uint64_t v2 = "XOF";
      break;
    case 953:
      uint64_t v2 = "XPF";
      break;
    case 955:
      uint64_t v2 = "XBA";
      break;
    case 956:
      uint64_t v2 = "XBB";
      break;
    case 957:
      uint64_t v2 = "XBC";
      break;
    case 958:
      uint64_t v2 = "XBD";
      break;
    case 959:
      uint64_t v2 = "XAU";
      break;
    case 960:
      uint64_t v2 = "XDR";
      break;
    case 961:
      uint64_t v2 = "XAG";
      break;
    case 962:
      uint64_t v2 = "XPT";
      break;
    case 963:
      uint64_t v2 = "XTS";
      break;
    case 964:
      uint64_t v2 = "XPD";
      break;
    case 965:
      uint64_t v2 = "XUA";
      break;
    case 967:
      uint64_t v2 = "ZMW";
      break;
    case 968:
      uint64_t v2 = "SRD";
      break;
    case 969:
      uint64_t v2 = "MGA";
      break;
    case 970:
      uint64_t v2 = "COU";
      break;
    case 971:
      uint64_t v2 = "AFN";
      break;
    case 972:
      uint64_t v2 = "TJS";
      break;
    case 973:
      uint64_t v2 = "AOA";
      break;
    case 974:
      uint64_t v2 = "BYR";
      break;
    case 975:
      uint64_t v2 = "BGN";
      break;
    case 976:
      uint64_t v2 = "CDF";
      break;
    case 977:
      uint64_t v2 = "BAM";
      break;
    case 978:
      uint64_t v2 = "EUR";
      break;
    case 979:
      uint64_t v2 = "MXV";
      break;
    case 980:
      uint64_t v2 = "UAH";
      break;
    case 981:
      uint64_t v2 = "GEL";
      break;
    case 984:
      uint64_t v2 = "BOV";
      break;
    case 985:
      uint64_t v2 = "PLN";
      break;
    case 986:
      uint64_t v2 = "BRL";
      break;
    case 990:
      uint64_t v2 = "CLF";
      break;
    case 994:
      uint64_t v2 = "XSU";
      break;
    case 997:
      uint64_t v2 = "USN";
      break;
    case 999:
      uint64_t v2 = "XXX";
      break;
    default:
      return sub_5E5C(a2, v2);
  }
  return sub_5E5C(a2, v2);
}

uint64_t sub_49F618(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return 1;
  }
}

int *sub_49F628@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0x7FFFFFFF;
  *(void *)(a4 + 8) = 0;
  uint64_t v5 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 32) = 100;
  *(unsigned char *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 44) = 1;
  *(void *)(a4 + 48) = 0;
  float64x2_t v47 = (unint64_t **)(a4 + 48);
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(_WORD *)(a4 + 72) = 0;
  if ((result[4] & 1) == 0) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 7);
  int v9 = *(_DWORD *)(v8 + 28);
  sub_49DE04(*(_DWORD *)(v8 + 24), &v55);
  LODWORD(v49) = v9;
  uint64_t v44 = a3;
  if (SHIBYTE(v56) < 0)
  {
    sub_4200(&v50, (void *)v55, *((unint64_t *)&v55 + 1));
    int v52 = 100;
    if (SHIBYTE(v56) < 0)
    {
      operator delete((void *)v55);
      *(_DWORD *)a4 = v49;
      if ((*(char *)(a4 + 31) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      *(_DWORD *)a4 = v49;
      if ((*(char *)(a4 + 31) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    goto LABEL_4;
  }
  long long v50 = v55;
  uint64_t v51 = v56;
  int v52 = 100;
  *(_DWORD *)a4 = v49;
  if (*(char *)(a4 + 31) < 0) {
LABEL_4:
  }
    operator delete(*(void **)v5);
LABEL_7:
  *(_OWORD *)uint64_t v5 = v50;
  *(void *)(v5 + 16) = v51;
  *(_DWORD *)(a4 + 32) = v52;
  int v10 = v7[20];
  *(_DWORD *)(a4 + 44) = v7[19];
  uint64_t v11 = &off_253C8D0;
  if (*((void *)v7 + 8)) {
    uint64_t v11 = (uint64_t (***)())*((void *)v7 + 8);
  }
  *(unsigned char *)(a4 + 40) = *((_DWORD *)v11 + 6) == 1;
  if (v10 == 2) {
    char v12 = 2;
  }
  else {
    char v12 = 1;
  }
  *(unsigned char *)(a4 + 73) = v12;
  uint64_t v13 = v7[10];
  if (v13)
  {
    uint64_t v14 = (unsigned int **)*((void *)v7 + 6);
    uint64_t v15 = &v14[v13];
    do
    {
      uint64_t v17 = *v14;
      uint64_t v49 = -1;
      LODWORD(v50) = 0x7FFFFFFF;
      unint64_t v18 = sub_2A28D0(a2, v17, (uint64_t)&v49);
      unint64_t v19 = v18;
      if (v18 > 0xFFFFFFFEFFFFFFFFLL || v18 == 0)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v49);
          sub_188FC78(&v49, (uint64_t)"Payment method muid (", 21);
          uint64_t v21 = (void *)std::ostream::operator<<();
          sub_188FC78(v21, (uint64_t)") not found.", 12);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v55, 1u);
          if (SHIBYTE(v56) < 0) {
            operator delete((void *)v55);
          }
          uint64_t v49 = v46;
          *(uint64_t *)((char *)&v49 + *(void *)(v46 - 24)) = v45;
          if (v54 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        goto LABEL_16;
      }
      uint64_t v23 = *(unint64_t **)(a4 + 56);
      unint64_t v22 = *(void *)(a4 + 64);
      if ((unint64_t)v23 < v22)
      {
        unint64_t *v23 = v18;
        uint64_t v16 = (uint64_t)(v23 + 1);
      }
      else
      {
        uint64_t v24 = *v47;
        uint64_t v25 = (char *)v23 - (char *)*v47;
        uint64_t v26 = v25 >> 3;
        unint64_t v27 = (v25 >> 3) + 1;
        if (v27 >> 61) {
          sub_2E00();
        }
        uint64_t v28 = v22 - (void)v24;
        if (v28 >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 61) {
            sub_188D718();
          }
          uint64_t v30 = operator new(8 * v29);
          long long v31 = (unint64_t *)&v30[8 * v26];
          *long long v31 = v19;
          uint64_t v16 = (uint64_t)(v31 + 1);
          if (v23 != v24)
          {
LABEL_38:
            unint64_t v32 = (char *)(v23 - 1) - (char *)v24;
            if (v32 < 0x58) {
              goto LABEL_61;
            }
            if ((unint64_t)((char *)v23 - &v30[v25]) < 0x20) {
              goto LABEL_61;
            }
            uint64_t v33 = (v32 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v35 = &v23[v34 / 0xFFFFFFFFFFFFFFF8];
            long long v31 = (unint64_t *)((char *)v31 - v34);
            uint64_t v36 = &v30[8 * v26 - 16];
            uint64_t v37 = v23 - 2;
            uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              _OWORD *v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            uint64_t v23 = v35;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_61:
              do
              {
                unint64_t v40 = *--v23;
                *--long long v31 = v40;
              }
              while (v23 != v24);
            }
            uint64_t v23 = *v47;
            *(void *)(a4 + 48) = v31;
            *(void *)(a4 + 56) = v16;
            *(void *)(a4 + 64) = &v30[8 * v29];
            if (!v23) {
              goto LABEL_15;
            }
LABEL_48:
            operator delete(v23);
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v30 = 0;
          long long v31 = (unint64_t *)(8 * v26);
          *(void *)(8 * v26) = v19;
          uint64_t v16 = 8 * v26 + 8;
          if (v23 != v24) {
            goto LABEL_38;
          }
        }
        *(void *)(a4 + 48) = v31;
        *(void *)(a4 + 56) = v16;
        *(void *)(a4 + 64) = &v30[8 * v29];
        if (v23) {
          goto LABEL_48;
        }
      }
LABEL_15:
      *(void *)(a4 + 56) = v16;
LABEL_16:
      ++v14;
    }
    while (v14 != v15);
  }
  uint64_t v41 = *(unint64_t **)(a4 + 48);
  double result = (int *)v44;
  if (*(void *)(a4 + 56) - (void)v41 == 8)
  {
    double result = (int *)sub_2A4F60(v44, *v41, 0, "payment_method");
    uint64_t v42 = (unsigned __int16 *)((char *)result - *result);
    if (*v42 >= 9u)
    {
      uint64_t v43 = v42[4];
      if (v43)
      {
        if (*((unsigned char *)result + v43) == 3) {
          *(unsigned char *)(a4 + 72) = 1;
        }
      }
    }
  }
  return result;
}

void sub_49FB40(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 89) < 0)
  {
    operator delete(*(void **)(v2 - 112));
    sub_49FBD8(v1);
    _Unwind_Resume(a1);
  }
  sub_49FBD8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_49FBD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_49FC2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(int *)(a1 + 32);
  if (v3)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 60);
    uint64_t v4 = &off_253C8D0;
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 48)) {
      uint64_t v4 = *(uint64_t (****)())(a1 + 48);
    }
    *(unsigned char *)(a2 + 24) = *((_DWORD *)v4 + 6) == 1;
    if (v5) {
      uint64_t v6 = (uint64_t *)(v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = 8 * v3;
    while (1)
    {
      uint64_t v8 = *v6;
      int v9 = *(uint64_t (****)())(*v6 + 48);
      if (!v9) {
        int v9 = &off_253C7D8;
      }
      int v10 = *((_DWORD *)v9 + 7);
      sub_49DE04(*((_DWORD *)v9 + 6), __p);
      int v16 = v10;
      if (SHIBYTE(v21) < 0)
      {
        sub_4200(&v17, __p[0], (unint64_t)__p[1]);
        int v19 = 100;
        if (SHIBYTE(v21) < 0)
        {
          operator delete(__p[0]);
          unsigned int v11 = *(_DWORD *)(v8 + 56) - 1;
          if (v11 <= 0xE)
          {
LABEL_16:
            int v12 = dword_20E8184[v11];
            LODWORD(__p[0]) = v12;
            unint64_t v13 = *(void *)(a2 + 8);
            if (v13 < *(void *)(a2 + 16)) {
              goto LABEL_21;
            }
            goto LABEL_17;
          }
        }
        else
        {
          unsigned int v11 = *(_DWORD *)(v8 + 56) - 1;
          if (v11 <= 0xE) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        uint64_t v18 = v21;
        int v19 = 100;
        unsigned int v11 = *(_DWORD *)(v8 + 56) - 1;
        if (v11 <= 0xE) {
          goto LABEL_16;
        }
      }
      int v12 = 0;
      LODWORD(__p[0]) = 0;
      unint64_t v13 = *(void *)(a2 + 8);
      if (v13 < *(void *)(a2 + 16))
      {
LABEL_21:
        *(_DWORD *)unint64_t v13 = v16;
        uint64_t v14 = (unsigned char *)(v13 + 8);
        if (SHIBYTE(v18) < 0)
        {
          sub_4200(v14, (void *)v17, *((unint64_t *)&v17 + 1));
        }
        else
        {
          long long v15 = v17;
          *(void *)(v13 + 24) = v18;
          *(_OWORD *)uint64_t v14 = v15;
        }
        *(_DWORD *)(v13 + 32) = v19;
        *(_DWORD *)(v13 + 40) = v12;
        *(void *)(a2 + 8) = v13 + 48;
        *(void *)(a2 + 8) = v13 + 48;
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          goto LABEL_8;
        }
LABEL_25:
        operator delete((void *)v17);
        goto LABEL_8;
      }
LABEL_17:
      *(void *)(a2 + 8) = sub_49FF00((char **)a2, (uint64_t)&v16, (int *)__p);
      if (SHIBYTE(v18) < 0) {
        goto LABEL_25;
      }
LABEL_8:
      ++v6;
      v7 -= 8;
      if (!v7) {
        return;
      }
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 28) = 1;
}

void sub_49FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v22 + 8) = v23;
  if (a15 < 0)
  {
    operator delete(__p);
    sub_49FE8C((void **)v22);
    _Unwind_Resume(a1);
  }
  sub_49FE8C((void **)v22);
  _Unwind_Resume(a1);
}

void **sub_49FE8C(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0) {
          operator delete(*(v3 - 5));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_49FF00(char **a1, uint64_t a2, int *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - v4) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unsigned int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v23 = &v11[48 * v10];
  int v12 = *a3;
  unint64_t v13 = &v11[48 * v6];
  *(_DWORD *)unint64_t v13 = *(_DWORD *)a2;
  uint64_t v14 = v13 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200(v14, *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)(a2 + 8);
    *((void *)v14 + 2) = *(void *)(a2 + 24);
  }
  long long v15 = &v11[48 * v6];
  *((_DWORD *)v15 + 8) = *(_DWORD *)(a2 + 32);
  *((_DWORD *)v15 + 10) = v12;
  int v16 = v15 + 48;
  if (v5 == v4)
  {
    int v19 = v4;
  }
  else
  {
    do
    {
      int v17 = *((_DWORD *)v5 - 12);
      v5 -= 48;
      *((_DWORD *)v15 - 12) = v17;
      v15 -= 48;
      long long v18 = *(_OWORD *)(v5 + 8);
      *((void *)v15 + 3) = *((void *)v5 + 3);
      *(_OWORD *)(v15 + 8) = v18;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      *((void *)v5 + 1) = 0;
      *((_DWORD *)v15 + 8) = *((_DWORD *)v5 + 8);
      *((_DWORD *)v15 + 10) = *((_DWORD *)v5 + 10);
    }
    while (v5 != v4);
    int v19 = *a1;
    uint64_t v4 = a1[1];
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v23;
  if (v4 != v19)
  {
    uint64_t v20 = (void **)(v4 - 48);
    do
    {
      if (*((char *)v20 + 31) < 0) {
        operator delete(v20[1]);
      }
      BOOL v21 = v20 == (void **)v19;
      v20 -= 6;
    }
    while (!v21);
    uint64_t v4 = v19;
  }
  if (v4) {
    operator delete(v4);
  }
  return v16;
}

void sub_4A0104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A0118((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4A0118(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4A0180(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_4A0494(a1, a2, a3, (uint64_t)v37);
  unint64_t v7 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0) {
    uint64_t v10 = *(void *)((char *)v7 + v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v11 = sub_398020(a2, 0);
  int v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 >= 0xBu)
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 5);
    if (v13)
    {
      if (v11[v13]) {
        uint64_t v10 = nullsub_1(v10);
      }
    }
  }
  uint64_t v14 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  long long v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u)
  {
    uint64_t v16 = v15[2];
    if (v16)
    {
      int v17 = (unsigned int *)((char *)v14 + v16);
      uint64_t v18 = *v17;
      uint64_t v20 = (char *)v17 + v18 + 4;
      size_t v19 = *(unsigned int *)((char *)v17 + v18);
      if (v19 >= 0x17)
      {
        uint64_t v22 = (v19 & 0xFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v22 = v19 | 7;
        }
        uint64_t v23 = v22 + 1;
        BOOL v21 = operator new(v22 + 1);
        __p[1] = (void *)v19;
        unint64_t v36 = v23 | 0x8000000000000000;
        __p[0] = v21;
      }
      else
      {
        HIBYTE(v36) = *(unsigned int *)((char *)v17 + v18);
        BOOL v21 = __p;
        if (!v19) {
          goto LABEL_19;
        }
      }
      memcpy(v21, v20, v19);
LABEL_19:
      *((unsigned char *)v21 + v19) = 0;
      goto LABEL_20;
    }
  }
  HIBYTE(v36) = 0;
  LOBYTE(__p[0]) = 0;
LABEL_20:
  uint64_t v24 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
    char v27 = *((unsigned char *)v24 + v26);
  }
  else {
    char v27 = 0;
  }
  uint64_t v28 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  unint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 0xFu)
  {
    uint64_t v30 = v29[7];
    if (v30)
    {
      char v31 = *((unsigned char *)v28 + v30);
      *(void *)a4 = v10;
      uint64_t v32 = a4 + 8;
      int v33 = SHIBYTE(v36);
      if (SHIBYTE(v36) < 0) {
        goto LABEL_27;
      }
LABEL_30:
      *(_OWORD *)uint64_t v32 = *(_OWORD *)__p;
      *(void *)(v32 + 16) = v36;
      *(unsigned char *)(a4 + 32) = v27;
      uint64_t v34 = a4 + 40;
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_31;
    }
  }
  char v31 = 0;
  *(void *)a4 = v10;
  uint64_t v32 = a4 + 8;
  int v33 = SHIBYTE(v36);
  if ((SHIBYTE(v36) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_27:
  sub_4200((unsigned char *)v32, __p[0], (unint64_t)__p[1]);
  *(unsigned char *)(a4 + 32) = v27;
  uint64_t v34 = a4 + 40;
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
LABEL_28:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v37;
    *(void *)(v34 + 16) = v38;
    goto LABEL_32;
  }
LABEL_31:
  sub_4200((unsigned char *)v34, v37[0], (unint64_t)v37[1]);
LABEL_32:
  *(unsigned char *)(a4 + 64) = v31;
  if ((v33 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete(v37[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v38) < 0) {
    goto LABEL_36;
  }
}

void sub_4A0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 31) < 0)
  {
    operator delete(*v21);
    if (v22 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
  }
  else if (v22 < 0)
  {
    goto LABEL_5;
  }
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_4A0494(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (int *)sub_2A4F60(a2, a1, 0, "payment_method");
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0xBu && (uint64_t v8 = v7[5]) != 0) {
    uint64_t v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    uint64_t v9 = 0;
  }
  sub_4A0694(v9, (uint64_t)v17);
  nullsub_1(&v12);
  sub_9973DC((uint64_t)v17, a3, (uint64_t)v13);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200((unsigned char *)a4, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v13;
    *(void *)(a4 + 16) = v14;
  }
  if (v16 < 0)
  {
    operator delete(v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_10:
      uint64_t v10 = (void **)__p;
      if (__p) {
        goto LABEL_11;
      }
LABEL_21:
      if (v18 < 0) {
        goto LABEL_13;
      }
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v13[0]);
  uint64_t v10 = (void **)__p;
  if (!__p) {
    goto LABEL_21;
  }
LABEL_11:
  unsigned int v11 = v20;
  if (v20 == v10)
  {
    uint64_t v20 = v10;
    operator delete(v10);
    if ((v18 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  do
  {
    if (*((char *)v11 - 1) < 0) {
      operator delete(*(v11 - 3));
    }
    v11 -= 4;
  }
  while (v11 != v10);
  uint64_t v20 = v10;
  operator delete(__p);
  if (v18 < 0) {
LABEL_13:
  }
    operator delete(v17[0]);
}

void sub_4A0608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4A0638((uint64_t)va);
  sub_35EA08((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_4A0624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_35EA08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4A0638(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_4A0694(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 2;
  uint64_t v4 = sub_1133328();
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  if (!a1) {
    return;
  }
  uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v6 = *v5;
  if (v6 >= 9)
  {
    uint64_t v7 = v5[4];
    if (v5[4]) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7);
    }
    *(unsigned char *)(a2 + 24) = v7;
LABEL_7:
    uint64_t v8 = (int *)v5[3];
    if (v8) {
      uint64_t v8 = (int *)((char *)v8 + (void)a1 + *(unsigned int *)((char *)v8 + (void)a1));
    }
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 < 7u) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  *(unsigned char *)(a2 + 24) = 0;
  if (v6 >= 7) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  uint64_t v9 = (_WORD *)(&loc_1120530 + 1);
  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v10 = v9[3];
  if (!v10)
  {
LABEL_16:
    HIBYTE(v49) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_17;
  }
  unsigned int v11 = (unsigned int *)((char *)v8 + v10);
  uint64_t v12 = *v11;
  uint64_t v14 = (char *)v11 + v12 + 4;
  size_t v13 = *(unsigned int *)((char *)v11 + v12);
  if (v13 >= 0x17)
  {
    uint64_t v45 = (v13 & 0xFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v45 = v13 | 7;
    }
    uint64_t v46 = v45 + 1;
    p_dst = (long long *)operator new(v45 + 1);
    *((void *)&__dst + 1) = v13;
    unint64_t v49 = v46 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_54:
    memcpy(p_dst, v14, v13);
    *((unsigned char *)p_dst + v13) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
  HIBYTE(v49) = *(unsigned int *)((char *)v11 + v12);
  p_dst = &__dst;
  if (v13) {
    goto LABEL_54;
  }
  *((unsigned char *)&__dst + v13) = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    goto LABEL_17;
  }
LABEL_55:
  operator delete(*(void **)a2);
LABEL_17:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v49;
  char v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 7u)
  {
    int v17 = 0;
    char v18 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u)
    {
LABEL_25:
      uint64_t v20 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    int v17 = (int *)v16[3];
    if (v17) {
      int v17 = (int *)((char *)v17 + (void)a1 + *(unsigned int *)((char *)v17 + (void)a1));
    }
    char v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 5u) {
      goto LABEL_25;
    }
  }
  uint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_25;
  }
  uint64_t v20 = (char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19);
LABEL_26:
  *(void *)(a2 + 32) = sub_2A56E0(v20);
  BOOL v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v22)
    {
      uint64_t v23 = *(unsigned int *)((char *)a1 + v22);
      uint64_t v24 = (unsigned int *)((char *)a1 + v22 + v23);
      uint64_t v25 = *v24;
      if (v25)
      {
        unint64_t v26 = 0;
        uint64_t v27 = 4 * v25;
        uint64_t v28 = (char *)a1 + v22 + v23;
        do
        {
          uint64_t v30 = *(unsigned int *)&v28[v26 + 4];
          char v31 = (char *)&v24[v26 / 4] + v30;
          uint64_t v32 = (char *)&v24[v26 / 4] + v30 - *((int *)v31 + 1);
          if (*((unsigned __int16 *)v32 + 2) >= 5u && (uint64_t v33 = *((unsigned __int16 *)v32 + 4)) != 0) {
            uint64_t v34 = (char *)&v24[v26 / 4 + 1] + v30 + v33 + *(unsigned int *)((char *)&v24[v26 / 4 + 1] + v30 + v33);
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v47 = sub_2A56E0(v34);
          uint64_t v35 = &v28[v26 + v30 - *((int *)v31 + 1)];
          if (*((unsigned __int16 *)v35 + 2) >= 7u && (uint64_t v36 = *((unsigned __int16 *)v35 + 5)) != 0)
          {
            uint64_t v37 = &v28[v30 + v36 + v26 + *(unsigned int *)&v28[v26 + 4 + v30 + v36]];
            size_t v38 = *((unsigned int *)v37 + 1);
            if (v38 >= 0x17)
            {
              uint64_t v41 = (v38 & 0xFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17) {
                uint64_t v41 = v38 | 7;
              }
              uint64_t v42 = v41 + 1;
              long long v39 = (long long *)operator new(v41 + 1);
              *((void *)&__dst + 1) = v38;
              unint64_t v49 = v42 | 0x8000000000000000;
              *(void *)&long long __dst = v39;
            }
            else
            {
              HIBYTE(v49) = *((_DWORD *)v37 + 1);
              long long v39 = &__dst;
              if (!v38)
              {
                *((unsigned char *)&__dst + v38) = 0;
                unint64_t v40 = *(void *)(a2 + 48);
                if (v40 >= *(void *)(a2 + 56)) {
                  goto LABEL_48;
                }
                goto LABEL_30;
              }
            }
            memcpy(v39, v37 + 8, v38);
            *((unsigned char *)v39 + v38) = 0;
            unint64_t v40 = *(void *)(a2 + 48);
            if (v40 >= *(void *)(a2 + 56))
            {
LABEL_48:
              uint64_t v43 = sub_4A0AB4((char **)(a2 + 40), &v47, (uint64_t)&__dst);
              int v44 = SHIBYTE(v49);
              *(void *)(a2 + 48) = v43;
              if (v44 < 0) {
                operator delete((void *)__dst);
              }
              goto LABEL_31;
            }
          }
          else
          {
            HIBYTE(v49) = 0;
            LOBYTE(__dst) = 0;
            unint64_t v40 = *(void *)(a2 + 48);
            if (v40 >= *(void *)(a2 + 56)) {
              goto LABEL_48;
            }
          }
LABEL_30:
          *(void *)unint64_t v40 = v47;
          long long v29 = __dst;
          *(void *)(v40 + 24) = v49;
          *(_OWORD *)(v40 + 8) = v29;
          *(void *)(a2 + 48) = v40 + 32;
LABEL_31:
          v26 += 4;
        }
        while (v27 != v26);
      }
    }
  }
}

void sub_4A0A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_35EA08(v15);
  _Unwind_Resume(a1);
}

char *sub_4A0AB4(char **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unsigned int v11 = &v10[32 * v4];
  uint64_t v12 = &v10[32 * v9];
  *(void *)unsigned int v11 = *a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)a3;
  *((void *)v11 + 3) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  size_t v13 = v11 + 32;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_20;
  }
  do
  {
    uint64_t v16 = *((void *)v15 - 4);
    v15 -= 32;
    *((void *)v11 - 4) = v16;
    v11 -= 32;
    long long v17 = *(_OWORD *)(v15 + 8);
    *((void *)v11 + 3) = *((void *)v15 + 3);
    *(_OWORD *)(v11 + 8) = v17;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  char v18 = *a1;
  uint64_t v15 = a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v18)
  {
    do
    {
      if (*(v15 - 1) < 0) {
        operator delete(*((void **)v15 - 3));
      }
      v15 -= 32;
    }
    while (v15 != v18);
    uint64_t v15 = v18;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
  return v13;
}

uint64_t sub_4A0C0C(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = (uint64_t *)a1;
    switch(*(unsigned char *)(a1 + 23))
    {
      case 0xB:
        if (*(void *)a1 == 0x4948535F454E494CLL && *(void *)(a1 + 3) == 0x444C454948535F45) {
          return 1;
        }
        if (*(unsigned char *)(a1 + 23) != 11) {
          goto LABEL_72;
        }
        if (*(void *)a1 != 0x4948535F45444F4DLL || *(void *)(a1 + 3) != 0x444C454948535F45) {
          goto LABEL_72;
        }
        return 2;
      case 0x13:
        if (*(void *)a1 != 0x5F4E4F4954415453
          || *(void *)(a1 + 8) != 0x4948535F454E494CLL
          || *(void *)(a1 + 11) != 0x444C454948535F45)
        {
          goto LABEL_72;
        }
        return 0;
      case 0x14:
        if (*(void *)a1 != 0x485F534543414C50
          || *(void *)(a1 + 8) != 0x48535F5245444145
          || *(_DWORD *)(a1 + 16) != 1145849161)
        {
          goto LABEL_72;
        }
        return 3;
      case 0x16:
        goto LABEL_44;
      default:
        goto LABEL_72;
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 == 11)
  {
    uint64_t v8 = *(uint64_t **)a1;
    if (**(void **)a1 == 0x4948535F454E494CLL && *(void *)(*(void *)a1 + 3) == 0x444C454948535F45) {
      return 1;
    }
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5 == 11)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = *(uint64_t *)((char *)v8 + 3);
      if (v10 == 0x4948535F45444F4DLL && v11 == 0x444C454948535F45) {
        return 2;
      }
    }
  }
  else if (v5 == 19)
  {
    BOOL v6 = **(void **)a1 == 0x5F4E4F4954415453 && *(void *)(*(void *)a1 + 8) == 0x4948535F454E494CLL;
    if (v6 && *(void *)(*(void *)a1 + 11) == 0x444C454948535F45) {
      return 0;
    }
  }
  if (v5 == 20)
  {
    if (**(void **)a1 == 0x485F534543414C50
      && *(void *)(*(void *)a1 + 8) == 0x48535F5245444145
      && *(_DWORD *)(*(void *)a1 + 16) == 1145849161)
    {
      return 3;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 != 22) {
    goto LABEL_72;
  }
  uint64_t v1 = *(uint64_t **)a1;
LABEL_44:
  uint64_t v15 = *v1;
  uint64_t v16 = v1[1];
  uint64_t v17 = *(uint64_t *)((char *)v1 + 14);
  BOOL v18 = v15 == 0x535F534543414C50 && v16 == 0x5F454C5544454843;
  if (!v18 || v17 != 0x444C454948535F45)
  {
LABEL_72:
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v25 = std::string::append(&v28, "\"");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v25->__r_.__value_.__r.__words[2];
    long long v29 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = (void *)sub_2F404((uint64_t)exception, &v29);
  }
  return 4;
}

void sub_4A0F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A101C(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v22[1] = a2;
  uint64_t v23 = a1;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = &v23;
  v22[0] = a1;
  sub_4A120C((uint64_t)v22, &v20);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 4);
  BOOL v6 = *(_DWORD *)a1 == v5 && *(unsigned char *)(a1 + 8) == 0;
  int v7 = !v6;
  if (v6)
  {
    unsigned int v12 = 0;
    HIBYTE(v19) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    sub_4A12FC(v21, (uint64_t)&v16);
    uint64_t v8 = std::string::insert(&v16, 0, " [exp: ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v17, "]");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unsigned int v12 = HIBYTE(v19);
    uint64_t v5 = __p[1];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v13 = __p;
  }
  else {
    size_t v13 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v14 = v12;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v5;
  }
  uint64_t v15 = std::string::append(&v20, (const std::string::value_type *)v13, v14);
  *a3 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else if (!v7)
  {
LABEL_22:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_26:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
}

void sub_4A119C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A120C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  if (v4)
  {
    sub_456C((uint64_t)v7, **(_DWORD **)a1);
    sub_5444((uint64_t)v7, v3, &v6);
    sub_4814((uint64_t)v7);
  }
  else
  {
    std::to_string(&v6, **(_DWORD **)a1);
  }
  uint64_t v5 = std::string::append(&v6, "s");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_4A12CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A12E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A12FC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *(unsigned __int8 *)(*a1 + 9);
  if (v4 == 2)
  {
    *(unsigned char *)(a2 + 23) = 3;
    *(_DWORD *)a2 = 7233891;
    return;
  }
  if (v4 == 1)
  {
    int v11 = *(_DWORD *)(v3 + 4);
    uint64_t v12 = a1[1];
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(v12 + 8);
    }
    if (v13)
    {
      sub_456C((uint64_t)__s, v11);
      sub_5444((uint64_t)__s, v12, &v16);
      sub_4814((uint64_t)__s);
    }
    else
    {
      std::to_string(&v16, v11);
    }
    std::string::size_type v14 = std::string::append(&v16, "skp");
    *(std::string *)a2 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_25;
    }
    return;
  }
  if (*(unsigned char *)(*a1 + 9))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  int v6 = *(_DWORD *)(v3 + 4);
  uint64_t v7 = a1[1];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  if (v8)
  {
    sub_456C((uint64_t)__s, v6);
    sub_5444((uint64_t)__s, v7, &v16);
    sub_4814((uint64_t)__s);
    int v9 = *(unsigned __int8 *)(*(void *)a1[2] + 8);
    if (*(unsigned char *)(*(void *)a1[2] + 8)) {
      goto LABEL_8;
    }
LABEL_18:
    std::string::size_type v10 = 1;
    HIBYTE(v19) = 1;
    strcpy(__s, "s");
    goto LABEL_23;
  }
  std::to_string(&v16, v6);
  int v9 = *(unsigned __int8 *)(*(void *)a1[2] + 8);
  if (!*(unsigned char *)(*(void *)a1[2] + 8)) {
    goto LABEL_18;
  }
LABEL_8:
  if (v9 == 1)
  {
    std::string::size_type v10 = 1;
    HIBYTE(v19) = 1;
    strcpy(__s, "r");
  }
  else
  {
    std::string::size_type v10 = 0;
    *(void *)__s = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
LABEL_23:
  uint64_t v15 = std::string::append(&v16, __s, v10);
  *(std::string *)a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(*(void **)__s);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_25;
    }
  }
  else if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_25:
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_4A150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A1534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_4A1580(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v22[1] = a2;
  uint64_t v23 = a1;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = &v23;
  v22[0] = a1;
  sub_4A1770((uint64_t)v22, &v20);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 4);
  BOOL v6 = *(_DWORD *)a1 == v5 && *(unsigned char *)(a1 + 8) == 0;
  int v7 = !v6;
  if (v6)
  {
    unsigned int v12 = 0;
    HIBYTE(v19) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    sub_4A18A8(v21, (uint64_t)&v16);
    uint64_t v8 = std::string::insert(&v16, 0, " [exp: ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v10 = std::string::append(&v17, "]");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unsigned int v12 = HIBYTE(v19);
    uint64_t v5 = __p[1];
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v14 = v12;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v5;
  }
  uint64_t v15 = std::string::append(&v20, (const std::string::value_type *)v13, v14);
  *a3 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else if (!v7)
  {
LABEL_22:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_26:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
}

void sub_4A1700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A1770(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = **(_DWORD **)a1;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v3 + 8);
  }
  if (v5)
  {
    if (v4 < 0) {
      char v6 = -5;
    }
    else {
      char v6 = 5;
    }
    sub_456C((uint64_t)v9, v4 / 10 + (((103 * (char)(v6 + v4 % 10)) >> 15) & 1) + ((103 * (char)(v6 + v4 % 10)) >> 10));
    sub_5444((uint64_t)v9, v3, &v8);
    sub_4814((uint64_t)v9);
  }
  else
  {
    std::to_string(&v8, v4);
  }
  int v7 = std::string::append(&v8, "s");
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_4A1878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A18A8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *(unsigned __int8 *)(*a1 + 9);
  if (v4 == 2)
  {
    *(unsigned char *)(a2 + 23) = 3;
    *(_DWORD *)a2 = 7233891;
    return;
  }
  if (v4 == 1)
  {
    int v12 = *(_DWORD *)(v3 + 4);
    uint64_t v13 = a1[1];
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v13 + 8);
    }
    if (v14)
    {
      if (v12 < 0) {
        char v15 = -5;
      }
      else {
        char v15 = 5;
      }
      sub_456C((uint64_t)__s, v12 / 10 + (((103 * (char)(v15 + v12 % 10)) >> 15) & 1) + ((103 * (char)(v15 + v12 % 10)) >> 10));
      sub_5444((uint64_t)__s, v13, &v18);
      sub_4814((uint64_t)__s);
    }
    else
    {
      std::to_string(&v18, v12);
    }
    std::string v16 = std::string::append(&v18, "skp");
    *(std::string *)a2 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
    return;
  }
  if (*(unsigned char *)(*a1 + 9))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  int v6 = *(_DWORD *)(v3 + 4);
  uint64_t v7 = a1[1];
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  if (v8)
  {
    if (v6 < 0) {
      char v9 = -5;
    }
    else {
      char v9 = 5;
    }
    sub_456C((uint64_t)__s, v6 / 10 + (((103 * (char)(v9 + v6 % 10)) >> 15) & 1) + ((103 * (char)(v9 + v6 % 10)) >> 10));
    sub_5444((uint64_t)__s, v7, &v18);
    sub_4814((uint64_t)__s);
    int v10 = *(unsigned __int8 *)(*(void *)a1[2] + 8);
    if (*(unsigned char *)(*(void *)a1[2] + 8)) {
      goto LABEL_11;
    }
LABEL_24:
    std::string::size_type v11 = 1;
    HIBYTE(v21) = 1;
    strcpy(__s, "s");
    goto LABEL_29;
  }
  std::to_string(&v18, v6);
  int v10 = *(unsigned __int8 *)(*(void *)a1[2] + 8);
  if (!*(unsigned char *)(*(void *)a1[2] + 8)) {
    goto LABEL_24;
  }
LABEL_11:
  if (v10 == 1)
  {
    std::string::size_type v11 = 1;
    HIBYTE(v21) = 1;
    strcpy(__s, "r");
  }
  else
  {
    std::string::size_type v11 = 0;
    *(void *)__s = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
LABEL_29:
  std::string v17 = std::string::append(&v18, __s, v11);
  *(std::string *)a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)__s);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
  }
  else if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_31:
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_4A1B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A1B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4A1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_4A1BBC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (!v6)
  {
    sub_83850((uint64_t)&v40);
    uint64_t v8 = (char *)operator new(0x1D8uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)uint64_t v8 = off_2438E28;
    char v9 = v8 + 24;
    sub_84078((uint64_t *)v8 + 3, (uint64_t)&v40);
    size_t v38 = v8 + 24;
    long long v39 = (std::__shared_weak_count *)v8;
    sub_31262C((uint64_t)&v40);
    uint64_t v10 = *a2;
    if (*a2) {
      goto LABEL_5;
    }
LABEL_10:
    std::string::size_type v11 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = (char **)sub_393290(v6);
  char v9 = *v7;
  uint64_t v8 = v7[1];
  size_t v38 = *v7;
  long long v39 = (std::__shared_weak_count *)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  if (!*a2) {
    goto LABEL_10;
  }
LABEL_5:
  std::string::size_type v11 = *(std::__shared_weak_count **)(v10 + 136);
  uint64_t v36 = *(void *)(v10 + 128);
  uint64_t v37 = v11;
  if (!v11 || (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed), (uint64_t v10 = *a2) != 0))
  {
    sub_29DDA8((char **)&v40, (long long **)v10);
    uint64_t v12 = *a1;
    if (!*a1) {
      goto LABEL_50;
    }
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v12 = *a1;
  if (!*a1) {
    goto LABEL_50;
  }
LABEL_12:
  if ((sub_393288(v12) & 1) == 0)
  {
    uint64_t v13 = (unsigned __int8 *)v40;
    uint64_t v14 = (char *)v41;
    if (v40 == v41)
    {
      uint64_t v14 = (char *)v40;
    }
    else
    {
      while (1)
      {
        unint64_t v15 = v13[23];
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          unint64_t v15 = *((void *)v13 + 1);
        }
        if (v15 < 0xD) {
          break;
        }
        std::string v17 = v16 >= 0 ? v13 : *(unsigned __int8 **)v13;
        uint64_t v18 = *(void *)v17;
        uint64_t v19 = *(void *)(v17 + 5);
        if (v18 != 0x6C616E7265746E69 || v19 != 0x7365646F6D6C616ELL) {
          break;
        }
        v13 += 48;
        if (v13 == v41)
        {
          uint64_t v13 = v41;
          goto LABEL_49;
        }
      }
      if (v13 != v41)
      {
        uint64_t v21 = (char *)(v13 + 48);
        if (v13 + 48 != v41)
        {
          do
          {
            unint64_t v23 = v21[23];
            int v24 = (char)v23;
            if ((v23 & 0x80u) != 0) {
              unint64_t v23 = *((void *)v21 + 1);
            }
            if (v23 >= 0xD)
            {
              uint64_t v25 = v24 >= 0 ? v21 : *(char **)v21;
              uint64_t v26 = *(void *)v25;
              uint64_t v27 = *(void *)(v25 + 5);
              if (v26 == 0x6C616E7265746E69 && v27 == 0x7365646F6D6C616ELL)
              {
                if ((char)v13[23] < 0) {
                  operator delete(*(void **)v13);
                }
                long long v29 = *(_OWORD *)v21;
                *((void *)v13 + 2) = *((void *)v21 + 2);
                *(_OWORD *)uint64_t v13 = v29;
                v21[23] = 0;
                char *v21 = 0;
                std::string::size_type v30 = (void **)(v13 + 24);
                if ((char)v13[47] < 0) {
                  operator delete(*v30);
                }
                long long v22 = *(_OWORD *)(v21 + 24);
                *((void *)v13 + 5) = *((void *)v21 + 5);
                *(_OWORD *)std::string::size_type v30 = v22;
                v21[47] = 0;
                v21[24] = 0;
                v13 += 48;
              }
            }
            v21 += 48;
          }
          while (v21 != v14);
          uint64_t v14 = (char *)v41;
        }
      }
    }
LABEL_49:
    sub_4A4734((uint64_t)&v40, (uint64_t)v13, (uint64_t)v14);
    char v9 = v38;
  }
LABEL_50:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + 48) = 1065353216;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = v36;
  *(void *)(a3 + 88) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_29DDA8((char **)(a3 + 96), (long long **)&v40);
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_DWORD *)(a3 + 152) = 1065353216;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_DWORD *)(a3 + 192) = 1065353216;
  if (*a1 && sub_393298(*a1))
  {
    sub_393298(*a1);
    char v35 = 7;
    strcpy((char *)__p, "offline");
  }
  else
  {
    char v35 = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_4A2120((uint64_t *)a3);
  sub_4A24E8(a3);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  char v31 = (unsigned __int8 *)v40;
  if (v40)
  {
    uint64_t v32 = (void **)v41;
    uint64_t v33 = v40;
    if (v41 == v40)
    {
LABEL_70:
      uint64_t v41 = v31;
      operator delete(v33);
      goto LABEL_71;
    }
    while (1)
    {
      if (*((char *)v32 - 1) < 0)
      {
        operator delete(*(v32 - 3));
        if (*((char *)v32 - 25) < 0) {
LABEL_68:
        }
          operator delete(*(v32 - 6));
      }
      else if (*((char *)v32 - 25) < 0)
      {
        goto LABEL_68;
      }
      v32 -= 6;
      if (v32 == (void **)v31)
      {
        uint64_t v33 = v40;
        goto LABEL_70;
      }
    }
  }
LABEL_71:
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_4A204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_4A2120(uint64_t *a1)
{
  if (sub_84664(*a1)) {
    return;
  }
  uint64_t v2 = *a1;
  v16.__locale_ = (std::locale::__imp *)operator new(0x28uLL);
  long long v17 = xmmword_20B8FD0;
  strcpy((char *)v16.__locale_, "internal_modes/EnvironmentModes.json");
  __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = sub_81C38(v2, (uint64_t)&v16, (uint64_t *)&__p);
  int v4 = (void **)__p;
  if (__p)
  {
    uint64_t v5 = v19;
    uint64_t v6 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    uint64_t v19 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v17) < 0)
  {
    operator delete(v16.__locale_);
    __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v7 = v3[2];
    if (!v7) {
      goto LABEL_16;
    }
LABEL_14:
    if (*(_DWORD *)(v7 + 48) == 2)
    {
      uint64_t v8 = *(void **)(v7 + 40);
      v15[23] = 12;
      strcpy(v15, "environments");
      uint64_t v9 = sub_561B0(v8, (uint64_t)v15);
      sub_69ED0((uint64_t)&v16, v9, 0);
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v7 = v3[2];
  if (v7) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v10 = sub_69510();
  nullsub_1(v10);
  std::string::size_type v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v19;
    uint64_t v13 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v19 = v11;
    operator delete(v13);
  }
}

void sub_4A2460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_4A24E8(uint64_t a1)
{
  uint64_t v2 = sub_84588(*(void *)a1);
  long long v143 = 0u;
  long long v142 = 0u;
  int v144 = 1065353216;
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3)
  {
    int v111 = (void *)(a1 + 16);
    do
    {
      for (uint64_t i = (uint64_t *)v3[7]; i; uint64_t i = (uint64_t *)*i)
      {
        uint64_t v10 = (long long *)(i + 2);
        if (*((_DWORD *)i + 12) == 2)
        {
          std::string::size_type v11 = (void *)i[5];
          char __p[23] = 12;
          strcpy(__p, "environments");
          uint64_t v12 = sub_58070(v11, (uint64_t)__p);
          uint64_t v13 = v12;
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (v13)
            {
LABEL_16:
              if (*((char *)i + 39) < 0)
              {
                sub_4200(&v140, (void *)i[2], i[3]);
              }
              else
              {
                long long v140 = *v10;
                uint64_t v141 = i[4];
              }
              if (*((_DWORD *)i + 12) == 2)
              {
                uint64_t v14 = (void *)i[5];
                BYTE7(v119) = 6;
                strcpy((char *)v118, "values");
                unint64_t v15 = sub_58070(v14, (uint64_t)v118);
                if (v15 && *((_DWORD *)v15 + 12) == 2) {
                  operator new();
                }
                exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
                std::operator+<char>();
                int64_t v103 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
              }
              unsigned int v104 = __cxa_allocate_exception(8uLL);
              *unsigned int v104 = &off_23FDF58;
            }
          }
          else if (v12)
          {
            goto LABEL_16;
          }
        }
        if (*((char *)i + 39) < 0)
        {
          sub_4200(&__dst, (void *)i[2], i[3]);
        }
        else
        {
          long long __dst = *v10;
          uint64_t v139 = i[4];
        }
        unsigned int v146 = *((_DWORD *)i + 12);
        switch(v146)
        {
          case 0u:
            operator new();
          case 1u:
            uint64_t v145 = i[5];
            break;
          case 2u:
            operator new();
          case 3u:
            operator new();
          default:
            break;
        }
        sub_59D18((uint64_t)&v142, (uint64_t)&__dst, (uint64_t)&v145);
        sub_5521C((uint64_t *)v146, &v145);
        if (SHIBYTE(v139) < 0) {
          operator delete((void *)__dst);
        }
      }
      if (sub_58070(v111, (uint64_t)(v3 + 2)))
      {
        memset(__p, 0, sizeof(__p));
        int v129 = 1065353216;
        uint64_t v5 = (void *)sub_560F4(v111, (uint64_t)(v3 + 2));
        sub_7D304(v5, __p);
        BYTE7(v119) = 14;
        strcpy((char *)v118, "default_region");
        uint64_t v135 = v118;
        uint64_t v6 = sub_7EE88((uint64_t)__p, (uint64_t)v118, (uint64_t)&unk_20F06E0, (long long **)&v135);
        sub_59234(&v142, (uint64_t)(v6 + 40));
        if ((SBYTE7(v119) & 0x80000000) == 0)
        {
          sub_80150((int)__p, *(char **)&__p[16]);
          uint64_t v7 = *(void **)__p;
          *(void *)__p = 0;
          if (!v7) {
            goto LABEL_9;
          }
LABEL_8:
          operator delete(v7);
          goto LABEL_9;
        }
        operator delete(v118[0]);
        sub_80150((int)__p, *(char **)&__p[16]);
        uint64_t v7 = *(void **)__p;
        *(void *)__p = 0;
        if (v7) {
          goto LABEL_8;
        }
      }
LABEL_9:
      memset(__p, 0, sizeof(__p));
      int v129 = 1065353216;
      sub_7DA1C((uint64_t)(v3 + 2), (uint64_t *)(a1 + 80), __p);
      BYTE7(v119) = 14;
      strcpy((char *)v118, "default_region");
      uint64_t v8 = sub_7F3A8(__p, (uint64_t)v118);
      uint64_t v9 = v8;
      if (SBYTE7(v119) < 0)
      {
        operator delete(v118[0]);
        if (!v9) {
          goto LABEL_36;
        }
      }
      else if (!v8)
      {
        goto LABEL_36;
      }
      BYTE7(v119) = 14;
      strcpy((char *)v118, "default_region");
      uint64_t v135 = v118;
      std::locale v16 = sub_7EE88((uint64_t)__p, (uint64_t)v118, (uint64_t)&unk_20F06E0, (long long **)&v135);
      sub_59234(&v142, (uint64_t)(v16 + 40));
      if (SBYTE7(v119) < 0)
      {
        operator delete(v118[0]);
        sub_80150((int)__p, *(char **)&__p[16]);
        long long v17 = *(void **)__p;
        *(void *)__p = 0;
        if (!v17) {
          goto LABEL_3;
        }
LABEL_37:
        operator delete(v17);
        goto LABEL_3;
      }
LABEL_36:
      sub_80150((int)__p, *(char **)&__p[16]);
      long long v17 = *(void **)__p;
      *(void *)__p = 0;
      if (v17) {
        goto LABEL_37;
      }
LABEL_3:
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  long long v109 = sub_69510();
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  unint64_t v137 = 0;
  char __p[23] = 6;
  strcpy(__p, "enable");
  uint64_t v18 = sub_58070(&v142, (uint64_t)__p);
  if (v18 && !*((_DWORD *)v18 + 12))
  {
    uint64_t v100 = v18[5];
    if (*(char *)(v100 + 23) < 0)
    {
      sub_4200(&v134, *(void **)v100, *(void *)(v100 + 8));
    }
    else
    {
      long long v101 = *(_OWORD *)v100;
      v134.__r_.__value_.__r.__words[2] = *(void *)(v100 + 16);
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v101;
    }
  }
  else
  {
    v134.__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  uint64_t v20 = &v134;
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v134.__r_.__value_.__l.__size_;
    uint64_t v20 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  *(void *)__p = v20;
  *(void *)&__p[8] = size;
  sub_230E8((unsigned __int8 **)__p, 0x2Cu, (uint64_t)&v132);
  uint64_t v21 = (char *)v132;
  long long v22 = (char *)v133;
  if (v132 != (void *)v133)
  {
    do
    {
      if (sub_58070(&v142, (uint64_t)v21))
      {
        int v24 = v136;
        if ((unint64_t)v136 >= v137)
        {
          uint64_t v26 = sub_6E6EC((char **)&v135, (uint64_t)v21);
        }
        else
        {
          if (v21[23] < 0)
          {
            sub_4200(v136, *(void **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v25 = *(_OWORD *)v21;
            *((void *)v136 + 2) = *((void *)v21 + 2);
            _OWORD *v24 = v25;
          }
          uint64_t v26 = (char *)v24 + 24;
        }
        uint64_t v136 = v26;
        uint64_t v27 = sub_560F4(&v142, (uint64_t)v21);
        unint64_t v28 = *(void *)(a1 + 64);
        if (v28 >= *(void *)(a1 + 72))
        {
          uint64_t v23 = sub_87B7C((void **)(a1 + 56), v27);
        }
        else
        {
          sub_54214(*(void *)(a1 + 64), v27);
          uint64_t v23 = v28 + 40;
          *(void *)(a1 + 64) = v28 + 40;
        }
        *(void *)(a1 + 64) = v23;
      }
      v21 += 24;
    }
    while (v21 != v22);
  }
  long long v29 = *(const std::string **)(a1 + 96);
  long long v110 = *(uint64_t **)(a1 + 104);
  if (v29 == (const std::string *)v110) {
    goto LABEL_209;
  }
  while (2)
  {
    int v30 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
    BOOL v31 = v30 < 0;
    uint64_t v32 = (const std::string *)v29->__r_.__value_.__r.__words[0];
    if (v30 >= 0) {
      uint64_t v32 = v29;
    }
    unint64_t v33 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    if (v31) {
      unint64_t v33 = v29->__r_.__value_.__l.__size_;
    }
    if (v33 < 0xD) {
      goto LABEL_67;
    }
    if (v32->__r_.__value_.__r.__words[0] != 0x6C616E7265746E69
      || *(std::string::size_type *)((char *)v32->__r_.__value_.__r.__words + 5) != 0x7365646F6D6C616ELL)
    {
      goto LABEL_67;
    }
    if (v33 >= 0x14)
    {
      std::string::size_type v35 = v32->__r_.__value_.__r.__words[0];
      std::string::size_type v36 = v32->__r_.__value_.__l.__size_;
      int v37 = v32->__r_.__value_.__r.__words[2];
      BOOL v38 = v35 == 0x6C616E7265746E69 && v36 == 0x6E652E7365646F6DLL;
      if (v38 && v37 == 1701601889)
      {
        std::string::operator=(&v134, v29 + 1);
        goto LABEL_110;
      }
    }
    int v40 = SHIBYTE(v29[1].__r_.__value_.__r.__words[2]);
    if (v40 >= 0) {
      std::string::pointer data = (char *)&v29[1];
    }
    else {
      std::string::pointer data = v29[1].__r_.__value_.__l.__data_;
    }
    std::string::size_type v42 = v29[1].__r_.__value_.__l.__size_;
    if (v40 >= 0) {
      std::string::size_type v42 = HIBYTE(v29[1].__r_.__value_.__r.__words[2]);
    }
    if (v42 == 1)
    {
      __darwin_ct_rune_t v52 = *data;
      __darwin_ct_rune_t v50 = __toupper(49);
      __darwin_ct_rune_t v51 = __toupper(v52);
    }
    else
    {
      if (v42 != 4) {
        goto LABEL_110;
      }
      __darwin_ct_rune_t v43 = *data;
      __darwin_ct_rune_t v44 = __toupper(116);
      if (v44 != __toupper(v43)) {
        goto LABEL_110;
      }
      __darwin_ct_rune_t v45 = data[1];
      __darwin_ct_rune_t v46 = __toupper(114);
      if (v46 != __toupper(v45)) {
        goto LABEL_110;
      }
      __darwin_ct_rune_t v47 = data[2];
      __darwin_ct_rune_t v48 = __toupper(117);
      if (v48 != __toupper(v47)) {
        goto LABEL_110;
      }
      __darwin_ct_rune_t v49 = data[3];
      __darwin_ct_rune_t v50 = __toupper(101);
      __darwin_ct_rune_t v51 = __toupper(v49);
    }
    if (v50 == v51)
    {
      std::string::size_type v53 = std::string::find(v29, 46, 0) + 1;
      if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v54 = v29->__r_.__value_.__l.__size_;
        if (v54 >= v53)
        {
          long long v55 = (const std::string *)v29->__r_.__value_.__r.__words[0];
          size_t v56 = v54 - v53;
          if (v54 - v53 >= 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_240;
          }
          goto LABEL_106;
        }
      }
      else
      {
        std::string::size_type v54 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
        long long v55 = v29;
        if (v53 <= v54)
        {
          size_t v56 = v54 - v53;
          if (v54 - v53 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_240:
          }
            sub_188D690();
LABEL_106:
          if (v56 >= 0x17)
          {
            uint64_t v88 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v56 | 7) != 0x17) {
              uint64_t v88 = v56 | 7;
            }
            uint64_t v89 = v88 + 1;
            std::string v57 = operator new(v88 + 1);
            *(void *)&__p[8] = v56;
            *(void *)&__p[16] = v89 | 0x8000000000000000;
            *(void *)__p = v57;
          }
          else
          {
            char __p[23] = v56;
            std::string v57 = __p;
            if (v54 == v53)
            {
              __p[v56] = 0;
              if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_109:
                std::string v134 = *(std::string *)__p;
                goto LABEL_110;
              }
LABEL_191:
              operator delete(v134.__r_.__value_.__l.__data_);
              goto LABEL_109;
            }
          }
          memmove(v57, (char *)v55 + v53, v56);
          v57[v56] = 0;
          if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_109;
          }
          goto LABEL_191;
        }
      }
      sub_5AD0();
    }
LABEL_110:
    std::string::size_type v58 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
    std::string v59 = (std::string *)v134.__r_.__value_.__r.__words[0];
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v58 = v134.__r_.__value_.__l.__size_;
    }
    else {
      std::string v59 = &v134;
    }
    v118[0] = v59;
    v118[1] = (void *)v58;
    sub_230E8((unsigned __int8 **)v118, 0x2Cu, (uint64_t)__p);
    std::string v60 = (void **)v132;
    if (v132)
    {
      std::string v61 = (void **)v133;
      long long v62 = v132;
      if ((void *)v133 != v132)
      {
        do
        {
          if (*((char *)v61 - 1) < 0) {
            operator delete(*(v61 - 3));
          }
          v61 -= 3;
        }
        while (v61 != v60);
        long long v62 = v132;
      }
      *(void *)&long long v133 = v60;
      operator delete(v62);
    }
    uint64_t v63 = *(void *)__p;
    unsigned int v132 = *(void **)__p;
    long long v133 = *(_OWORD *)&__p[8];
    uint64_t v64 = *(void *)&__p[8];
    if (*(void *)__p == *(void *)&__p[8]) {
      goto LABEL_67;
    }
    char v65 = 0;
    do
    {
      if (sub_58070(&v142, v63))
      {
        uint64_t v67 = v136;
        if ((unint64_t)v136 >= v137)
        {
          __n128 v69 = sub_6E6EC((char **)&v135, v63);
        }
        else
        {
          if (*(char *)(v63 + 23) < 0)
          {
            sub_4200(v136, *(void **)v63, *(void *)(v63 + 8));
          }
          else
          {
            long long v68 = *(_OWORD *)v63;
            *((void *)v136 + 2) = *(void *)(v63 + 16);
            *uint64_t v67 = v68;
          }
          __n128 v69 = (char *)v67 + 24;
        }
        uint64_t v136 = v69;
        double v74 = sub_58070(&v142, v63);
        if (!v74 || *((_DWORD *)v74 + 12) != 2)
        {
          __n128 v105 = __cxa_allocate_exception(0x40uLL);
          std::operator+<char>();
          __n128 v106 = (void *)sub_2F404((uint64_t)v105, (long long *)__p);
        }
        uint64_t v75 = v74[5];
        unint64_t v76 = *(void *)(a1 + 64);
        if (v76 >= *(void *)(a1 + 72))
        {
          uint64_t v66 = sub_87B7C((void **)(a1 + 56), v75);
LABEL_124:
          *(void *)(a1 + 64) = v66;
          goto LABEL_125;
        }
        *(_OWORD *)unint64_t v76 = 0u;
        *(_OWORD *)(v76 + 16) = 0u;
        *(_DWORD *)(v76 + 32) = *(_DWORD *)(v75 + 32);
        size_t prime = *(void *)(v75 + 8);
        if (prime == 1)
        {
          size_t prime = 2;
LABEL_155:
          sub_B6C0(v76, prime);
LABEL_156:
          for (unint64_t j = (void *)(v75 + 16); ; sub_5456C(v76, (uint64_t)(j + 2), (uint64_t)(j + 2)))
          {
            unint64_t j = (void *)*j;
            if (!j) {
              break;
            }
          }
          uint64_t v66 = v76 + 40;
          *(void *)(a1 + 64) = v76 + 40;
          goto LABEL_124;
        }
        if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(*(void *)(v75 + 8));
          int8x8_t v79 = *(int8x8_t *)(v76 + 8);
          BOOL v80 = prime >= *(void *)&v79;
          if (prime > *(void *)&v79) {
            goto LABEL_155;
          }
        }
        else
        {
          int8x8_t v79 = 0;
          BOOL v80 = 1;
          if (prime) {
            goto LABEL_155;
          }
        }
        if (v80) {
          goto LABEL_156;
        }
        unint64_t v81 = vcvtps_u32_f32((float)*(unint64_t *)(v76 + 24) / *(float *)(v76 + 32));
        if (*(void *)&v79 < 3uLL || (uint8x8_t v82 = (uint8x8_t)vcnt_s8(v79), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
        {
          unint64_t v81 = std::__next_prime(v81);
        }
        else
        {
          uint64_t v83 = 1 << -(char)__clz(v81 - 1);
          if (v81 >= 2) {
            unint64_t v81 = v83;
          }
        }
        if (prime <= v81) {
          size_t prime = v81;
        }
        if (prime >= *(void *)&v79) {
          goto LABEL_156;
        }
        goto LABEL_155;
      }
      if (*(char *)(v63 + 23) < 0)
      {
        if (!*(void *)(v63 + 8)) {
          goto LABEL_125;
        }
      }
      else if (!*(unsigned char *)(v63 + 23))
      {
        goto LABEL_125;
      }
      if ((sub_68EC4((uint64_t)v109) & 1) == 0)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)__p);
          uint64_t v70 = sub_188FC78(__p, (uint64_t)"Unknown internal mode provided as URL parameter: ", 49);
          int v71 = *(char *)(v63 + 23);
          if (v71 >= 0) {
            int v72 = (void *)v63;
          }
          else {
            int v72 = *(void **)v63;
          }
          if (v71 >= 0) {
            uint64_t v73 = *(unsigned __int8 *)(v63 + 23);
          }
          else {
            uint64_t v73 = *(void *)(v63 + 8);
          }
          sub_188FC78(v70, (uint64_t)v72, v73);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v118, 1u);
          if (SBYTE7(v119) < 0) {
            operator delete(v118[0]);
          }
          *(void *)__p = v108;
          *(void *)&__p[*(void *)(v108 - 24)] = v107;
          if (v131 < 0) {
            operator delete(v130);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          char v65 = 1;
        }
        else
        {
          char v65 = 1;
        }
      }
LABEL_125:
      v63 += 24;
    }
    while (v63 != v64);
    if ((v65 & 1) == 0) {
      goto LABEL_67;
    }
    int v84 = operator new(0x28uLL);
    uint64_t v125 = 0;
    unint64_t v126 = v84;
    long long v127 = xmmword_20B9260;
    strcpy((char *)v84, "ServerWarning.InternalModeUnknown");
    int64_t v123 = 0;
    BOOL v124 = 0;
    uint64_t v122 = 0;
    long long v120 = 0u;
    *(_OWORD *)long long v121 = 0u;
    *(_OWORD *)unsigned int v118 = 0u;
    long long v119 = 0u;
    char v117 = 0;
    LOBYTE(v116) = 0;
    uint64_t v114 = 0;
    unint64_t v115 = 0;
    uint64_t v112 = 0;
    BOOL v113 = 0;
    sub_29DC44((uint64_t)__p, (long long **)&v123, (long long *)v118, &v116, &v114, 0, (uint64_t)&v112, 1);
    nullsub_1(1);
    sub_29E11C((uint64_t)__p);
    int v85 = v113;
    if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
      uint64_t v86 = v115;
      if (!v115) {
        goto LABEL_181;
      }
LABEL_180:
      if (atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_181;
      }
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      if (v117 < 0) {
        goto LABEL_195;
      }
LABEL_182:
      if ((SHIBYTE(v122) & 0x80000000) == 0) {
        goto LABEL_183;
      }
LABEL_196:
      operator delete(v121[0]);
      if (SHIBYTE(v120) < 0) {
        goto LABEL_197;
      }
LABEL_184:
      if ((SBYTE7(v119) & 0x80000000) == 0) {
        goto LABEL_185;
      }
LABEL_198:
      operator delete(v118[0]);
      uint64_t v87 = (void **)v123;
      if (!v123)
      {
LABEL_65:
        if (SHIBYTE(v127) < 0) {
          goto LABEL_208;
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v86 = v115;
      if (v115) {
        goto LABEL_180;
      }
LABEL_181:
      if ((v117 & 0x80000000) == 0) {
        goto LABEL_182;
      }
LABEL_195:
      operator delete((void *)v116);
      if (SHIBYTE(v122) < 0) {
        goto LABEL_196;
      }
LABEL_183:
      if ((SHIBYTE(v120) & 0x80000000) == 0) {
        goto LABEL_184;
      }
LABEL_197:
      operator delete(*((void **)&v119 + 1));
      if (SBYTE7(v119) < 0) {
        goto LABEL_198;
      }
LABEL_185:
      uint64_t v87 = (void **)v123;
      if (!v123) {
        goto LABEL_65;
      }
    }
    unsigned __int32 v90 = v124;
    if (v124 != v87)
    {
      while (1)
      {
        if (*((char *)v90 - 1) < 0)
        {
          operator delete(*(v90 - 3));
          if ((*((char *)v90 - 25) & 0x80000000) == 0) {
            goto LABEL_203;
          }
LABEL_206:
          operator delete(*(v90 - 6));
          v90 -= 6;
          if (v90 == v87)
          {
LABEL_207:
            BOOL v124 = v87;
            operator delete(v123);
            if (SHIBYTE(v127) < 0) {
              goto LABEL_208;
            }
            goto LABEL_66;
          }
        }
        else
        {
          if (*((char *)v90 - 25) < 0) {
            goto LABEL_206;
          }
LABEL_203:
          v90 -= 6;
          if (v90 == v87) {
            goto LABEL_207;
          }
        }
      }
    }
    BOOL v124 = v87;
    operator delete(v87);
    if (SHIBYTE(v127) < 0) {
LABEL_208:
    }
      operator delete(v126);
LABEL_66:
    nullsub_1(v109);
LABEL_67:
    v29 += 2;
    if (v29 != (const std::string *)v110) {
      continue;
    }
    break;
  }
LABEL_209:
  nullsub_1(v109);
  long long v91 = (void **)v132;
  if (v132)
  {
    uint64_t v92 = (void **)v133;
    unsigned int v93 = v132;
    if ((void *)v133 != v132)
    {
      do
      {
        if (*((char *)v92 - 1) < 0) {
          operator delete(*(v92 - 3));
        }
        v92 -= 3;
      }
      while (v92 != v91);
      unsigned int v93 = v132;
    }
    *(void *)&long long v133 = v91;
    operator delete(v93);
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  uint64_t v94 = (void **)v135;
  if (v135)
  {
    unsigned int v95 = (void **)v136;
    unsigned int v96 = v135;
    if (v136 != v135)
    {
      do
      {
        if (*((char *)v95 - 1) < 0) {
          operator delete(*(v95 - 3));
        }
        v95 -= 3;
      }
      while (v95 != v94);
      unsigned int v96 = v135;
    }
    uint64_t v136 = v94;
    operator delete(v96);
  }
  __int32 v97 = (char *)v143;
  if ((void)v143)
  {
    do
    {
      __n128 v99 = *(char **)v97;
      sub_57AC8((uint64_t *)v97 + 5);
      if (v97[39] < 0) {
        operator delete(*((void **)v97 + 2));
      }
      operator delete(v97);
      __int32 v97 = v99;
    }
    while (v99);
  }
  __n128 v98 = (void *)v142;
  *(void *)&long long v142 = 0;
  if (v98) {
    operator delete(v98);
  }
}

void sub_4A366C(_Unwind_Exception *a1)
{
  sub_1A668((void **)&STACK[0x208]);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  sub_1A668((void **)&STACK[0x238]);
  sub_5450C(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_4A39A4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  uint64_t v6 = (uint64_t *)(a3 + 56);
  *(_DWORD *)(a3 + 48) = 1065353216;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_DWORD *)(a3 + 152) = 1065353216;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_DWORD *)(a3 + 192) = 1065353216;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7;
  if ((uint64_t *)a3 != a1)
  {
    *(_DWORD *)(a3 + 48) = *((_DWORD *)a1 + 12);
    sub_5A4DC((void *)(a3 + 16), (uint64_t *)a1[4], 0);
    sub_85D8C(v6, a1[7], a1[8], 0xCCCCCCCCCCCCCCCDLL * ((a1[8] - a1[7]) >> 3));
  }
  uint64_t v10 = a1[10];
  uint64_t v9 = a1[11];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v11 = *(std::__shared_weak_count **)(a3 + 88);
  *(void *)(a3 + 80) = v10;
  *(void *)(a3 + 88) = v9;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((uint64_t *)a3 == a1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if ((uint64_t *)a3 != a1) {
LABEL_10:
  }
    sub_4A4868(a3 + 96, (std::string *)a1[12], (long long *)a1[13], 0xAAAAAAAAAAAAAAABLL * ((a1[13] - a1[12]) >> 4));
LABEL_11:
  if (a3 + 120 != a2)
  {
    *(_DWORD *)(a3 + 152) = *(_DWORD *)(a2 + 32);
    sub_5A4DC((void *)(a3 + 120), *(uint64_t **)(a2 + 16), 0);
  }
}

void sub_4A3B1C(_Unwind_Exception *a1)
{
  sub_37D13C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_4A3B30(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = a1;
  uint64_t v5 = (const std::string *)sub_84590(*a1, a2);
  double result = sub_4A426C(v4, (uint64_t)v5, a3);
  if (result[3]) {
    return result;
  }
  if (sub_58070(v4 + 2, (uint64_t)v5))
  {
    sub_7D234((uint64_t)v5, v4 + 10);
    char v7 = 1;
LABEL_4:
    LOBYTE(v8) = 1;
    goto LABEL_5;
  }
  uint64_t v18 = (void *)v4[7];
  uint64_t v19 = (void *)v4[8];
  if (v18 == v19)
  {
    char v7 = sub_7D234((uint64_t)v5, v4 + 10);
    goto LABEL_4;
  }
  uint64_t v27 = v4;
  unint64_t v28 = a3;
  char v7 = 0;
  int v8 = 1;
  int v20 = 1;
  do
  {
    uint64_t v21 = sub_58070(v18, (uint64_t)v5);
    char v30 = 18;
    BOOL v22 = v21 != 0;
    strcpy(__p, "allow_ab_overrides");
    uint64_t v23 = sub_58070(v18, (uint64_t)__p);
    if (v23)
    {
      BOOL v24 = *((_DWORD *)v23 + 12) == 4;
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)__p);
      goto LABEL_31;
    }
    BOOL v24 = 0;
    if (v30 < 0) {
      goto LABEL_30;
    }
LABEL_31:
    char v30 = 19;
    strcpy(__p, "allow_url_overrides");
    long long v25 = sub_58070(v18, (uint64_t)__p);
    if (v25)
    {
      BOOL v26 = *((_DWORD *)v25 + 12) == 4;
      if (v30 < 0) {
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v26 = 0;
      if (v30 < 0) {
LABEL_26:
      }
        operator delete(*(void **)__p);
    }
    v7 |= v22;
    v8 &= v24;
    v20 &= v26;
    v18 += 5;
  }
  while (v18 != v19);
  if (v8)
  {
    int v4 = v27;
    v7 |= sub_7D234((uint64_t)v5, v27 + 10);
    LOBYTE(v8) = 1;
    a3 = v28;
    if ((v20 & 1) == 0)
    {
      int v10 = 0;
      char v9 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    int v10 = 0;
    char v9 = 0;
    int v4 = v27;
    a3 = v28;
    if (!v20) {
      goto LABEL_6;
    }
  }
LABEL_5:
  char v9 = sub_7CFEC(v5, v4 + 12);
  int v10 = 1;
LABEL_6:
  std::string::size_type v11 = sub_58070(v4 + 15, (uint64_t)v5);
  if ((v7 & 1) != 0 || (v9 & 1) != 0 || v11)
  {
    v31[0] = v4;
    v31[1] = v5;
    sub_4A4458((uint64_t)v31);
    *(void *)__p = v5;
    uint64_t v13 = sub_8681C((uint64_t)(v4 + 20), (uint64_t)v5, (uint64_t)&unk_20F06E0, (long long **)__p) + 5;
    unint64_t v15 = (void *)v4[7];
    uint64_t v14 = (void *)v4[8];
    while (v15 != v14)
    {
      if (sub_58070(v15, (uint64_t)v5))
      {
        std::locale v16 = (void *)sub_560F4(v15, (uint64_t)v5);
        sub_7D304(v16, v13);
      }
      v15 += 5;
    }
    if (v8) {
      sub_7DA1C((uint64_t)v5, v4 + 10, v13);
    }
    if (v10 && v4[12] != v4[13]) {
      sub_7DBB4(v5, (const std::string **)v4 + 12, (uint64_t)v13);
    }
    if (sub_58070(v4 + 15, (uint64_t)v5))
    {
      long long v17 = (void *)sub_560F4(v4 + 15, (uint64_t)v5);
      sub_7D304(v17, v13);
    }
  }
  else
  {
    *(void *)__p = v5;
    uint64_t v12 = sub_8681C((uint64_t)(v4 + 20), (uint64_t)v5, (uint64_t)&unk_20F06E0, (long long **)__p);
    sub_4A4AE0(v12 + 5, 0, 0);
  }
  return sub_4A426C(v4, (uint64_t)v5, a3);
}

void sub_4A3E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a2 == 1)
  {
    std::string::size_type v54 = __cxa_begin_catch(exception_object);
    sub_5E5C((void *)(v53 - 128), "ServerWarning.Exception");
    *(void *)(v53 - 152) = 0;
    *(void *)(v53 - 144) = 0;
    *(void *)(v53 - 136) = 0;
    *(void *)(v53 - 160) = 0;
    *(_OWORD *)(v53 - 192) = 0u;
    *(_OWORD *)(v53 - 176) = 0u;
    *(_OWORD *)(v53 - 224) = 0u;
    *(_OWORD *)(v53 - 208) = 0u;
    sub_5E5C((void *)(v53 - 248), "");
    a51 = 0;
    a52 = 0;
    a49 = 0;
    a50 = 0;
    sub_29DC44((uint64_t)&__p, (long long **)(v53 - 152), (long long *)(v53 - 224), (long long *)(v53 - 248), &a51, 0, (uint64_t)&a49, 1);
    nullsub_1(1);
    sub_29E11C((uint64_t)&__p);
    sub_14A84((uint64_t)&a49);
    sub_14A84((uint64_t)&a51);
    if (*(char *)(v53 - 225) < 0) {
      operator delete(*(void **)(v53 - 248));
    }
    sub_29D7B0(v53 - 224);
    sub_1A6DC((void **)(v53 - 152));
    if (*(char *)(v53 - 105) < 0) {
      operator delete(*(void **)(v53 - 128));
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      long long v55 = sub_188FC78(&__p, (uint64_t)"Exception caught when trying to override json value in ", 55);
      int v56 = *(char *)(v52 + 23);
      if (v56 >= 0) {
        uint64_t v57 = v52;
      }
      else {
        uint64_t v57 = *(void *)v52;
      }
      if (v56 >= 0) {
        uint64_t v58 = *(unsigned __int8 *)(v52 + 23);
      }
      else {
        uint64_t v58 = *(void *)(v52 + 8);
      }
      std::string v59 = sub_188FC78(v55, v57, v58);
      std::string v60 = sub_188FC78(v59, (uint64_t)". Exception: ", 13);
      std::string v61 = (const char *)(*(uint64_t (**)(void *))(*(void *)v54 + 16))(v54);
      size_t v62 = strlen(v61);
      sub_188FC78(v60, (uint64_t)v61, v62);
      std::stringbuf::str();
      sub_7246C((uint64_t *)(v53 - 224), 3u);
      if (*(char *)(v53 - 201) < 0) {
        operator delete(*(void **)(v53 - 224));
      }
      sub_111ECAC((uint64_t)&__p);
    }
    uint64_t v63 = sub_69510();
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      uint64_t v64 = sub_188FC78(&__p, (uint64_t)"Exception caused by ", 20);
      *(_DWORD *)(v53 - 152) = sub_69124((uint64_t)v63);
      sub_677F0((unsigned int *)(v53 - 152), v53 - 224);
      int v65 = *(char *)(v53 - 201);
      if (v65 >= 0) {
        uint64_t v66 = v53 - 224;
      }
      else {
        uint64_t v66 = *(void *)(v53 - 224);
      }
      if (v65 >= 0) {
        uint64_t v67 = *(unsigned __int8 *)(v53 - 201);
      }
      else {
        uint64_t v67 = *(void *)(v53 - 216);
      }
      long long v68 = sub_188FC78(v64, v66, v67);
      __n128 v69 = sub_188FC78(v68, (uint64_t)" request (entity=", 17);
      sub_6879C((uint64_t)v63, (std::string *)(v53 - 128));
      int v70 = *(char *)(v53 - 105);
      if (v70 >= 0) {
        uint64_t v71 = v53 - 128;
      }
      else {
        uint64_t v71 = *(void *)(v53 - 128);
      }
      if (v70 >= 0) {
        uint64_t v72 = *(unsigned __int8 *)(v53 - 105);
      }
      else {
        uint64_t v72 = *(void *)(v53 - 120);
      }
      uint64_t v73 = sub_188FC78(v69, v71, v72);
      double v74 = sub_188FC78(v73, (uint64_t)"): ", 3);
      uint64_t v75 = sub_68EE4((uint64_t)v63);
      int v76 = *(char *)(v75 + 23);
      if (v76 >= 0) {
        uint64_t v77 = v75;
      }
      else {
        uint64_t v77 = *(void *)v75;
      }
      if (v76 >= 0) {
        uint64_t v78 = *(unsigned __int8 *)(v75 + 23);
      }
      else {
        uint64_t v78 = *(void *)(v75 + 8);
      }
      sub_188FC78(v74, v77, v78);
      if (*(char *)(v53 - 105) < 0) {
        operator delete(*(void **)(v53 - 128));
      }
      if (*(char *)(v53 - 201) < 0) {
        operator delete(*(void **)(v53 - 224));
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)(v53 - 224), 3u);
      if (*(char *)(v53 - 201) < 0) {
        operator delete(*(void **)(v53 - 224));
      }
      sub_111ECAC((uint64_t)&__p);
    }
    sub_4A4458(v53 - 104);
    __cxa_end_catch();
    JUMPOUT(0x4A3CCCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4A426C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2558CB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2558CB8))
  {
    xmmword_2558CF0[1] = 0u;
    xmmword_2558CF0[0] = 0u;
    dword_2558D10 = 1065353216;
    __cxa_guard_release(&qword_2558CB8);
  }
  if (!sub_863BC(a1 + 20, a2)) {
    return (uint64_t *)xmmword_2558CF0;
  }
  uint64_t v6 = sub_863BC(a1 + 20, a2);
  if (!v6) {
    goto LABEL_20;
  }
  if (v6[8])
  {
    char v7 = v6 + 5;
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    if (v9 != v8)
    {
      while (!sub_7F3A8(v7, v9))
      {
        v9 += 24;
        if (v9 == v8) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = sub_7F3A8(v7, v9);
      if (v14) {
        return v14 + 5;
      }
LABEL_20:
      sub_5AE8("unordered_map::at: key not found");
    }
LABEL_8:
    char v16 = 14;
    strcpy((char *)__p, "default_region");
    int v10 = sub_7F3A8(v7, (uint64_t)__p);
    if (!v10) {
      sub_5AE8("unordered_map::at: key not found");
    }
    std::string::size_type v11 = v10 + 5;
    if (v16 < 0)
    {
      operator delete(__p[0]);
      return v11;
    }
    else
    {
      return v10 + 5;
    }
  }
  else
  {
    uint64_t v13 = *a1;
    return sub_81C38(v13, a2, a3);
  }
}

void sub_4A443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4A4458(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)a1 + 160;
  int v4 = sub_8407C(**(void **)a1, *(void *)(a1 + 8));
  uint64_t v8 = *(long long **)(a1 + 8);
  uint64_t v5 = sub_8681C(v3, (uint64_t)v8, (uint64_t)&unk_20F06E0, &v8);
  if (v5 + 5 != v4)
  {
    *((_DWORD *)v5 + 18) = *((_DWORD *)v4 + 8);
    sub_859B4(v5 + 5, (uint64_t *)v4[2], 0);
  }
  if (sub_58070(v2 + 2, *(void *)(a1 + 8)))
  {
    uint64_t v6 = (void *)sub_560F4(v2 + 2, *(void *)(a1 + 8));
    uint64_t v8 = *(long long **)(a1 + 8);
    char v7 = sub_8681C(v3, (uint64_t)v8, (uint64_t)&unk_20F06E0, &v8);
    sub_7D304(v6, v7 + 5);
  }
}

BOOL sub_4A4530(uint64_t *a1, uint64_t a2)
{
  __p = 0;
  std::string::size_type v11 = 0;
  uint64_t v12 = 0;
  sub_4A3B30(a1, a2, (uint64_t *)&__p);
  int v4 = (void **)__p;
  if (__p)
  {
    uint64_t v5 = v11;
    uint64_t v6 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    std::string::size_type v11 = v4;
    operator delete(v6);
  }
  char v7 = sub_84590(*a1, a2);
  uint64_t v8 = sub_865EC(a1 + 20, (uint64_t)v7);
  if (!v8) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v8[8] != 0;
}

void sub_4A45F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4A4604(uint64_t *a1)
{
  return sub_84664(*a1);
}

uint64_t sub_4A460C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = (char *)(v3 + v2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unsigned __int8 v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  *(_OWORD *)__p = 0u;
  memset(v19, 0, sizeof(v19));
  unsigned int v5 = sub_20724(a2, v3, v3 + v2, (uint64_t)__p, 4160);
  sub_20A34(v8, v3, v4, (uint64_t *)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v6 = v15;
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  if (v6) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_4A46F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    char v25 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v25 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A4734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      uint64_t v8 = a2;
      do
      {
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        uint64_t v11 = (unsigned char *)(v8 + v7);
        long long v12 = *(_OWORD *)(v8 + v7);
        *(void *)(v8 + 16) = *(void *)(v8 + v7 + 16);
        *(_OWORD *)uint64_t v8 = v12;
        v11[23] = 0;
        *uint64_t v11 = 0;
        uint64_t v13 = (void **)(v8 + 24);
        if (*(char *)(v8 + 47) < 0) {
          operator delete(*v13);
        }
        uint64_t v9 = v8 + v7;
        long long v10 = *(_OWORD *)(v8 + v7 + 24);
        *(void *)(v8 + 40) = *(void *)(v8 + v7 + 40);
        *(_OWORD *)uint64_t v13 = v10;
        *(unsigned char *)(v9 + 47) = 0;
        *(unsigned char *)(v9 + 24) = 0;
        v8 += 48;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (1)
    {
      if (v5 == v8)
      {
        *(void *)(a1 + 8) = v8;
        return a2;
      }
      if (*(char *)(v5 - 1) < 0)
      {
        operator delete(*(void **)(v5 - 24));
        if ((*(char *)(v5 - 25) & 0x80000000) == 0) {
          goto LABEL_11;
        }
      }
      else if ((*(char *)(v5 - 25) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(*(void **)(v5 - 48));
LABEL_11:
      v5 -= 48;
    }
  }
  return a2;
}

void sub_4A4868(uint64_t a1, std::string *__str, long long *a3, size_t __sz)
{
  uint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < __sz)
  {
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v11 = *(std::string **)(a1 + 8);
    long long v12 = *(std::string **)a1;
    if (v11 == v10)
    {
LABEL_21:
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
LABEL_22:
      if (__sz > 0x555555555555555) {
        goto LABEL_40;
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= __sz) {
        uint64_t v18 = __sz;
      }
      unint64_t v19 = v17 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v18;
      if (v19 > 0x555555555555555) {
LABEL_40:
      }
        sub_2E00();
      uint64_t v20 = 48 * v19;
      uint64_t v21 = (char *)operator new(48 * v19);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = &v21[v20];
      unsigned __int8 v15 = sub_29DE80(v9, (long long *)v6, a3, v21);
LABEL_30:
      *(void *)(a1 + 8) = v15;
      return;
    }
    while (1)
    {
      if (SHIBYTE(v11[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11[-1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
        }
          operator delete(v11[-2].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_10;
      }
      v11 -= 2;
      if (v11 == v10)
      {
        long long v12 = *(std::string **)a1;
        goto LABEL_21;
      }
    }
  }
  uint64_t v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v10) >> 4) < __sz)
  {
    uint64_t v14 = (long long *)((char *)__str + 16 * (((char *)v13 - (char *)v10) >> 4));
    if (v13 != v10)
    {
      do
      {
        std::string::operator=(v10, v6);
        std::string::operator=(v10 + 1, v6 + 1);
        v6 += 2;
        v10 += 2;
      }
      while (v6 != (std::string *)v14);
      long long v10 = *(std::string **)(a1 + 8);
    }
    unsigned __int8 v15 = sub_29DE80(v9, v14, a3, (char *)v10);
    goto LABEL_30;
  }
  if (__str == (std::string *)a3)
  {
    char v16 = *(std::string **)a1;
  }
  else
  {
    char v16 = *(std::string **)a1;
    do
    {
      std::string::operator=(v10, v6);
      std::string::operator=(v10 + 1, v6 + 1);
      v16 += 2;
      v6 += 2;
      v10 += 2;
    }
    while (v6 != (std::string *)a3);
    uint64_t v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v16)
  {
    if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13[-1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v13[-2].__r_.__value_.__l.__data_);
LABEL_32:
    v13 -= 2;
  }
  *(void *)(a1 + 8) = v16;
}

void sub_4A4AD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4A4AD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4A4AE0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      long long v10 = (char *)v8;
    }
    else
    {
      uint64_t v11 = a2 + 64;
      do
      {
        std::string::operator=((std::string *)(v8 + 16), (const std::string *)(v11 - 64));
        if (v11 - 64 != v8 + 16)
        {
          *(_DWORD *)(v8 + 72) = *(_DWORD *)(v11 - 8);
          sub_5A4DC((void *)(v8 + 40), *(uint64_t **)(v11 - 24), 0);
        }
        long long v10 = *(char **)v8;
        sub_4A4C14(a1, v8);
        uint64_t v12 = v11 + 64;
        if (!v10) {
          break;
        }
        uint64_t v8 = (uint64_t)v10;
        BOOL v9 = v11 == a3;
        v11 += 64;
      }
      while (!v9);
      uint64_t v4 = v12 - 64;
    }
    sub_80150((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_85508((uint64_t)a1, v4, v4);
    v4 += 64;
  }
}

void sub_4A4BE4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_80150(v1, v2);
  __cxa_rethrow();
}

void sub_4A4C00(_Unwind_Exception *a1)
{
}

uint64_t *sub_4A4C14(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  double result = sub_31A634((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    *uint64_t v14 = a2;
    goto LABEL_21;
  }
  return result;
}

void sub_4A4D60()
{
  unk_2558CD7 = 16641;
  word_2558CC0 = 65;
  byte_2558CEF = 1;
  byte_2558CD9 = 0;
}

uint64_t sub_4A4D88(uint64_t a1, void *a2, uint64_t a3)
{
  v16[23] = 21;
  strcpy(v16, "ARContinueInfoBuilder");
  long long v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&v29);
  sub_3CB2F0(v6, (uint64_t)__p);
  sub_4A5A44(a1, __p, a3);
  uint64_t v7 = v33;
  if (v33)
  {
    do
    {
      unint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      uint64_t v7 = v12;
    }
    while (v12);
  }
  unint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = (void **)v29;
  if (v29)
  {
    long long v10 = v30;
    int8x8_t v11 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int8x8_t v11 = v29;
    }
    char v30 = v9;
    operator delete(v11);
  }
  if ((v16[23] & 0x80000000) != 0) {
    operator delete(*(void **)v16);
  }
  *(void *)(a1 + 40) = sub_3750CC(a2);
  sub_6F30A4((uint64_t)v16);
  *(_OWORD *)__p = *(_OWORD *)v16;
  memset(v16, 0, sizeof(v16));
  unint64_t v33 = *(char **)&v16[16];
  uint64_t v34 = v17;
  *(_OWORD *)std::string::size_type v35 = *(_OWORD *)v18;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v13 = v19;
  uint64_t v19 = 0;
  uint64_t v36 = v13;
  uint64_t v37 = v20;
  int v38 = v21;
  uint64_t v40 = v23;
  *(_OWORD *)long long v39 = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v42 = v25;
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v24;
  uint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  int v43 = v26;
  uint64_t v14 = v28;
  *(_OWORD *)__darwin_ct_rune_t v44 = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  uint64_t v45 = v14;
  uint64_t v46 = 0;
  sub_4AA76C((char **)(a1 + 48), (uint64_t)__p, 1uLL);
  if (SHIBYTE(v45) < 0)
  {
    operator delete(v44[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v41[0]);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v39[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v35[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__p[0]);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v27[0]);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v24[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_36:
    operator delete(v18[0]);
    if ((v16[23] & 0x80000000) == 0) {
      return a1;
    }
LABEL_37:
    operator delete(*(void **)v16);
    return a1;
  }
LABEL_35:
  operator delete(v22[0]);
  if (SHIBYTE(v19) < 0) {
    goto LABEL_36;
  }
LABEL_26:
  if ((v16[23] & 0x80000000) != 0) {
    goto LABEL_37;
  }
  return a1;
}

void sub_4A509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_4A50B8(_Unwind_Exception *a1)
{
}

void sub_4A50C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4A50F4(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

void sub_4A519C(unsigned char *a1, void *a2)
{
  if (!*a1) {
    return;
  }
  uint64_t v3 = a2[134] - a2[133];
  if (!v3) {
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0x2FC962FC962FC963 * (v3 >> 5);
  while (2)
  {
    if (!v5)
    {
      unint64_t v5 = 1;
      goto LABEL_5;
    }
    uint64_t v7 = a2[133];
    sub_4A5430((uint64_t)a1, a2, v5, (uint64_t)&v29);
    uint64_t v8 = v7 + 2400 * v5;
    uint64_t v9 = v8 + 1832;
    long long v10 = *(char **)(v8 + 1832);
    if (!v10) {
      goto LABEL_26;
    }
    int8x8_t v11 = *(char **)(v8 + 1840);
    unint64_t v12 = v10;
    if (v11 == v10) {
      goto LABEL_25;
    }
    uint64_t v13 = v11 - 121;
    do
    {
      unint64_t v15 = *(void **)(v13 + 97);
      if (v15)
      {
        *(void *)(v13 + 105) = v15;
        operator delete(v15);
      }
      if (*v13 < 0)
      {
        operator delete(*(void **)(v13 - 23));
        if ((*(v13 - 32) & 0x80000000) == 0)
        {
LABEL_15:
          if ((*(v13 - 56) & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((*(v13 - 32) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(void **)(v13 - 55));
      if ((*(v13 - 56) & 0x80000000) == 0)
      {
LABEL_16:
        if (*(v13 - 96) < 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
LABEL_21:
      operator delete(*(void **)(v13 - 79));
      if (*(v13 - 96) < 0)
      {
LABEL_22:
        operator delete(*(void **)(v13 - 119));
        if ((*(v13 - 128) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
LABEL_17:
      if ((*(v13 - 128) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_23:
      operator delete(*(void **)(v13 - 151));
LABEL_10:
      uint64_t v14 = v13 - 151;
      v13 -= 272;
    }
    while (v14 != v10);
    unint64_t v12 = *(char **)v9;
LABEL_25:
    *(void *)(v9 + 8) = v10;
    operator delete(v12);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
LABEL_26:
    *(_OWORD *)uint64_t v9 = v29;
    *(void *)(v9 + 16) = v30;
    if (++v5 == 0x2FC962FC962FC963 * ((uint64_t)(a2[134] - a2[133]) >> 5))
    {
      uint64_t v16 = a2[37];
      if (v16 != 0x7FFFFFFFFFFFFFFFLL) {
        *(void *)(*(void *)(v9 + 8) - 40) += v16;
      }
    }
LABEL_5:
    if (v5 != v6) {
      continue;
    }
    break;
  }
  uint64_t v17 = a2[133];
  if ((unint64_t)(0x2FC962FC962FC963 * ((a2[134] - v17) >> 5)) > 1)
  {
    uint64_t v18 = *(long long **)(v17 + 4232);
    uint64_t v19 = (long long *)((char *)v18 + 152);
    uint64_t v20 = (uint64_t *)(v17 + 872);
    int v21 = (int *)(v17 + 160);
    unint64_t v22 = *(void *)(v17 + 1840);
    if (v22 >= *(void *)(v17 + 1848))
    {
      uint64_t v28 = sub_4AAB84((void **)(v17 + 1832), v18, (long long *)((char *)v18 + 152), v20, v21);
    }
    else
    {
      uint64_t v23 = *v20;
      int v24 = *v21;
      sub_4AA8E0(*(char **)(v17 + 1840), v18);
      *(_OWORD *)(v22 + 152) = *v19;
      long long v25 = v19[1];
      long long v26 = v19[2];
      long long v27 = v19[3];
      *(_OWORD *)(v22 + 216) = v19[4];
      *(_OWORD *)(v22 + 200) = v27;
      *(_OWORD *)(v22 + 184) = v26;
      *(_OWORD *)(v22 + 168) = v25;
      *(void *)(v22 + 232) = v23;
      *(_DWORD *)(v22 + 240) = v24;
      *(void *)(v22 + 256) = 0;
      *(void *)(v22 + 264) = 0;
      *(void *)(v22 + 248) = 0;
      uint64_t v28 = v22 + 272;
      *(void *)(v17 + 1840) = v22 + 272;
    }
    *(void *)(v17 + 1840) = v28;
  }
}

void sub_4A5428(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1840) = v1;
  _Unwind_Resume(a1);
}

void sub_4A5430(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  long long v68 = v8;
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  sub_4A6200(a1, a2, a3, v78);
  sub_4A5CC4(a1, a2, a3, (uint64_t)&v76);
  uint64_t v72 = a2;
  unint64_t v69 = a3;
  sub_4A6850(a1, a2, a3, &__p);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v77 != v76)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v57 = 0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3);
    uint64_t v64 = (unint64_t *)(v9 + 24);
    std::string v59 = (int *)(v10 + 160);
    uint64_t v67 = a4;
    do
    {
      uint64_t v63 = (long long *)&v76[88 * v14];
      uint64_t v58 = v14 + 1;
      if (v14 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3))) {
        uint64_t v17 = v64;
      }
      else {
        uint64_t v17 = (unint64_t *)v63 + 21;
      }
      uint64_t v18 = v78[0].i64[0];
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
      if (v13 >= v19)
      {
        unint64_t v15 = v13;
        unint64_t v16 = v12;
        goto LABEL_4;
      }
      unint64_t v20 = *v17;
      unint64_t v61 = v20;
      size_t v62 = (unint64_t *)&v76[88 * v14 + 80];
      while (2)
      {
        uint64_t v21 = v18 + 160 * v13;
        unint64_t v60 = v13;
        unint64_t v22 = (unint64_t *)(v21 + 312);
        unint64_t v66 = v13 + 1;
        if (v13 + 1 >= v19) {
          unint64_t v22 = v64;
        }
        unint64_t v23 = *v22;
        if (*v62 <= *(void *)(v21 + 152)) {
          unint64_t v24 = *(void *)(v21 + 152);
        }
        else {
          unint64_t v24 = *v62;
        }
        if (v23 >= v20) {
          unint64_t v25 = v20;
        }
        else {
          unint64_t v25 = *v22;
        }
        uint64_t v26 = sub_46CE10(v72, v24, 1, v25, 0, *(double *)&v11);
        uint64_t v73 = v26;
        unint64_t v27 = *(void *)(a4 + 8);
        unint64_t v65 = v23;
        if (v27 >= *(void *)(a4 + 16))
        {
          uint64_t v31 = sub_4AB1E4((void **)a4, (long long *)v21, v63, &v73, v59);
        }
        else
        {
          int v28 = *v59;
          sub_4AA8E0((char *)v27, (long long *)v21);
          *(_OWORD *)(v27 + 152) = *v63;
          long long v11 = v63[1];
          long long v29 = v63[2];
          long long v30 = v63[3];
          *(_OWORD *)(v27 + 216) = v63[4];
          *(_OWORD *)(v27 + 200) = v30;
          *(_OWORD *)(v27 + 184) = v29;
          *(_OWORD *)(v27 + 168) = v11;
          *(void *)(v27 + 232) = v26;
          *(_DWORD *)(v27 + 240) = v28;
          *(void *)(v27 + 256) = 0;
          *(void *)(v27 + 264) = 0;
          *(void *)(v27 + 248) = 0;
          uint64_t v31 = v27 + 272;
          *(void *)(a4 + 8) = v27 + 272;
        }
        *(void *)(a4 + 8) = v31;
        unint64_t v70 = v25;
        unint64_t v71 = v24;
        do
        {
          unint64_t v16 = v12;
          if (v12 >= (v75 - (unsigned char *)__p) >> 4) {
            break;
          }
          uint64_t v34 = (char *)__p + 16 * v12;
          unint64_t v36 = *((void *)v34 + 1);
          std::string::size_type v35 = (unint64_t *)(v34 + 8);
          unint64_t v33 = v36;
          if (v36 <= v24) {
            goto LABEL_24;
          }
          unint64_t v37 = *((void *)__p + 2 * v16);
          if (v37 >= v25) {
            goto LABEL_24;
          }
          uint64_t v38 = *(void *)(a4 + 8);
          if (v37 <= v24) {
            uint64_t v39 = v24;
          }
          else {
            uint64_t v39 = *((void *)__p + 2 * v16);
          }
          if (v33 >= v25) {
            uint64_t v40 = v25;
          }
          else {
            uint64_t v40 = v33;
          }
          uint64_t v41 = sub_4A5E10(v68, v69);
          uint64_t v43 = sub_46CE10(v72, *(void *)(v41 + 40), 1, v39, 0, v42);
          uint64_t v45 = sub_46CE10(v72, v39, 1, v40, 0, v44) + v43;
          __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 16);
          unint64_t v46 = *(void *)(v38 - 8);
          if ((unint64_t)v47 < v46)
          {
            *__darwin_ct_rune_t v47 = v43;
            v47[1] = v45;
            uint64_t v32 = v47 + 2;
            unint64_t v25 = v70;
            unint64_t v24 = v71;
          }
          else
          {
            __darwin_ct_rune_t v48 = *(uint64_t **)(v38 - 24);
            uint64_t v49 = ((char *)v47 - (char *)v48) >> 4;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v51 = v46 - (void)v48;
            if (v51 >> 3 > v50) {
              unint64_t v50 = v51 >> 3;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 60) {
                sub_188D718();
              }
              unint64_t v53 = v52;
              std::string::size_type v54 = (char *)operator new(16 * v52);
              unint64_t v52 = v53;
              long long v55 = (uint64_t *)&v54[16 * v49];
              *long long v55 = v43;
              v55[1] = v45;
              uint64_t v56 = (uint64_t)v55;
              if (v47 != v48)
              {
LABEL_44:
                unint64_t v25 = v70;
                unint64_t v24 = v71;
                do
                {
                  long long v11 = *((_OWORD *)v47 - 1);
                  *(_OWORD *)(v56 - 16) = v11;
                  v56 -= 16;
                  v47 -= 2;
                }
                while (v47 != v48);
                __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 24);
                uint64_t v32 = v55 + 2;
                *(void *)(v38 - 24) = v56;
                *(void *)(v38 - 16) = v55 + 2;
                *(void *)(v38 - 8) = &v54[16 * v52];
                if (!v47) {
                  goto LABEL_23;
                }
LABEL_50:
                operator delete(v47);
                goto LABEL_23;
              }
            }
            else
            {
              std::string::size_type v54 = 0;
              long long v55 = (uint64_t *)(16 * v49);
              *long long v55 = v43;
              v55[1] = v45;
              uint64_t v56 = 16 * v49;
              if (v47 != v48) {
                goto LABEL_44;
              }
            }
            unint64_t v25 = v70;
            unint64_t v24 = v71;
            uint64_t v32 = v55 + 2;
            *(void *)(v38 - 24) = v56;
            *(void *)(v38 - 16) = v55 + 2;
            *(void *)(v38 - 8) = &v54[16 * v52];
            if (v47) {
              goto LABEL_50;
            }
          }
LABEL_23:
          *(void *)(v38 - 16) = v32;
          unint64_t v33 = *v35;
          a4 = v67;
LABEL_24:
          unint64_t v12 = v16 + 1;
        }
        while (v33 <= v25);
        unint64_t v20 = v61;
        if (v61 > v65)
        {
          uint64_t v18 = v78[0].i64[0];
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
          unint64_t v12 = v16;
          unint64_t v15 = v66;
          unint64_t v13 = v66;
          if (v66 >= v19) {
            goto LABEL_4;
          }
          continue;
        }
        break;
      }
      unint64_t v15 = v60;
      if (v61 == v65) {
        unint64_t v15 = v66;
      }
LABEL_4:
      unint64_t v12 = v16;
      unint64_t v13 = v15;
      uint64_t v14 = v58;
    }
    while (v58 != v57);
  }
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v78[0].i64[0])
  {
    sub_4AA6AC((uint64_t)v78, v78[0].i64[0]);
    operator delete((void *)v78[0].i64[0]);
  }
}

void sub_4A5908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  long long v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  sub_4A6814((uint64_t *)(v28 - 112));
  _Unwind_Resume(a1);
}

void **sub_4A5980(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 272;
        sub_4AA5F4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_4A59EC(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  unint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_4A519C(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_4A5A44(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1481))
  {
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "enabled");
    BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)a1 = v5;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_continue_gaps");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "max_angle_between_straight_segments");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "pedestrian_properties_buffer_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_slip_road_name_search_distance_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9AC0;
  strcpy((char *)__p[0], "enable_additional_vendor_intersection_internal_types");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  return a1;
}

void sub_4A5C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4A5CC4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v8 = a2 + 133;
  uint64_t v9 = (void *)sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  unint64_t v11 = *(void *)(v10 + 632);
  if (v11 != -1 && v11 >= v9[5])
  {
    *(void *)&v19[0] = v11 + 1;
    BOOL v14 = v9[3] > v11;
    unint64_t v13 = (uint64_t *)v19;
    if (!v14) {
      unint64_t v13 = v9 + 3;
    }
  }
  else
  {
    unint64_t v13 = v9 + 3;
  }
  uint64_t v24 = *v13;
  uint64_t v15 = v24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  double result = sub_4A6050((char **)a4, (_OWORD *)(v10 + 568), v9 + 5);
  if (v15 != v9[3])
  {
    double result = (char *)sub_46CE10(a2, v9[5], 1, v15, 0, v17);
    if (v9[109] - (void)result > *(void *)(a1 + 16))
    {
      uint64_t v20 = -1;
      *(void *)&long long v18 = -1;
      *((void *)&v18 + 1) = -1;
      v19[1] = v18;
      v19[2] = v18;
      v19[0] = v18;
      int v21 = 0;
      uint64_t v22 = -1;
      int v23 = 0;
      return sub_4A6050((char **)a4, v19, &v24);
    }
  }
  return result;
}

void sub_4A5DEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A5E10(void *a1, unint64_t a2)
{
  if (0x2FC962FC962FC963 * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    BOOL v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    BOOL v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x2FC962FC962FC963 * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 2400 * a2;
}

void sub_4A5F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_4A6050(char **a1, _OWORD *a2, void *a3)
{
  long long v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(_OWORD *)long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[2];
    long long v10 = a2[4];
    *((_OWORD *)v7 + 3) = a2[3];
    *((_OWORD *)v7 + 4) = v10;
    *((_OWORD *)v7 + 1) = v8;
    *((_OWORD *)v7 + 2) = v9;
    *((void *)v7 + 10) = *a3;
    unint64_t v11 = v7 + 88;
    goto LABEL_14;
  }
  unint64_t v12 = *a1;
  uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 3);
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_2E00();
  }
  unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - (void)v12) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x1745D1745D1745DLL) {
    unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16 > 0x2E8BA2E8BA2E8BALL) {
    sub_188D718();
  }
  uint64_t v17 = 88 * v16;
  std::string v18 = (char *)operator new(88 * v16);
  long long v19 = a2[3];
  std::string::size_type v20 = &v18[88 * v13];
  int v21 = &v18[v17];
  *((_OWORD *)v20 + 2) = a2[2];
  *((_OWORD *)v20 + 3) = v19;
  *((_OWORD *)v20 + 4) = a2[4];
  long long v22 = a2[1];
  *(_OWORD *)std::string::size_type v20 = *a2;
  *((_OWORD *)v20 + 1) = v22;
  *((void *)v20 + 10) = *a3;
  unint64_t v11 = v20 + 88;
  if (v7 == v12)
  {
    *a1 = v20;
    a1[1] = v11;
    a1[2] = v21;
    if (!v12) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    int v23 = v20 - 88;
    long long v24 = *(_OWORD *)(v7 - 88);
    *(_OWORD *)(v20 - 72) = *(_OWORD *)(v7 - 72);
    *(_OWORD *)(v20 - 88) = v24;
    long long v25 = *(_OWORD *)(v7 - 56);
    long long v26 = *(_OWORD *)(v7 - 40);
    long long v27 = *(_OWORD *)(v7 - 24);
    *((void *)v20 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v20 - 24) = v27;
    *(_OWORD *)(v20 - 40) = v26;
    *(_OWORD *)(v20 - 56) = v25;
    v7 -= 88;
    v20 -= 88;
  }
  while (v7 != v12);
  *a1 = v23;
  a1[1] = v11;
  a1[2] = v21;
  if (v12) {
LABEL_13:
  }
    operator delete(v12);
LABEL_14:
  a1[1] = v11;
  return v11 - 88;
}

uint64_t sub_4A6200@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t result = sub_4A5E10(a2 + 133, a3);
  if (a2[148] == a2[149]) {
    long long v8 = (void *)(a1 + 48);
  }
  else {
    long long v8 = a2 + 148;
  }
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  a4->i64[0] = 0;
  unint64_t v9 = *(void *)(result + 40);
  if (v9 < *(void *)(result + 24))
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = v11;
      unint64_t v43 = v9;
      uint64_t v13 = (void *)sub_46C8EC(a2, v9);
      unint64_t v14 = (unsigned __int16 *)(*v13 - *(int *)*v13);
      if (*v14 >= 0x2Fu)
      {
        uint64_t v15 = v14[23];
        if (v15)
        {
          unsigned int v16 = *(unsigned __int8 *)(*v13 + v15);
          BOOL v17 = v16 > 0x2A;
          uint64_t v18 = (1 << v16) & 0x50426810004;
          if (!v17 && v18 != 0)
          {
            if (sub_46C760(a2) > v9)
            {
              uint64_t v20 = 0;
              while (v20 <= *(void *)(a1 + 24))
              {
                int v21 = (void *)sub_46C8EC(a2, v9);
                int v23 = (unsigned __int16 *)(*v21 - *(int *)*v21);
                if (*v23 < 0x2Fu) {
                  goto LABEL_26;
                }
                uint64_t v24 = v23[23];
                if (!v24) {
                  goto LABEL_26;
                }
                unsigned int v25 = *(unsigned __int8 *)(*v21 + v24);
                BOOL v17 = v25 > 0x2A;
                uint64_t v26 = (1 << v25) & 0x50426810004;
                if (v17 || v26 == 0) {
                  goto LABEL_26;
                }
                uint64_t v28 = sub_46CCC8(a2, v9++, v22);
                v20 += v28;
                if (v9 >= sub_46C760(a2)) {
                  break;
                }
              }
            }
            --v9;
          }
        }
      }
      do
LABEL_26:
        unint64_t v11 = v12++;
      while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[1] - *v8) >> 5) && *(void *)(sub_4A65E4(v8, v12) + 152) <= v9);
      uint64_t v29 = sub_4A65E4(v8, v11);
      uint64_t result = sub_46C8EC(a2, v9);
      if (a4->i64[0] != a4->i64[1])
      {
        long long v30 = (int **)result;
        uint64_t result = sub_6F2FD8(v29);
        if (!result || (uint64_t result = sub_6F2FD8(a4->i64[1] - 160), result))
        {
          if ((uint64_t v31 = v30[1]) != 0
            && (uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31), *v32 >= 0x11u)
            && (uint64_t v33 = v32[8]) != 0
            && (*(_WORD *)((unsigned char *)v31 + v33) & 4) != 0
            || (uint64_t v34 = (unsigned __int16 *)((char *)*v30 - **v30), *v34 >= 0xBu)
            && (uint64_t v35 = v34[5]) != 0
            && (*((unsigned char *)*v30 + v35 + 2) & 1) != 0)
          {
            if (v43 == v9) {
              goto LABEL_8;
            }
          }
        }
      }
      unint64_t v36 = a4->u64[1];
      if (a4->i64[0] == v36) {
        goto LABEL_55;
      }
      uint64_t v37 = *(unsigned __int8 *)(v36 - 137);
      if ((v37 & 0x80u) == 0) {
        uint64_t v38 = *(unsigned __int8 *)(v36 - 137);
      }
      else {
        uint64_t v38 = *(void *)(v36 - 152);
      }
      uint64_t v39 = *(unsigned __int8 *)(v29 + 23);
      int v40 = (char)v39;
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = *(void *)(v29 + 8);
      }
      if (v38 != v39) {
        goto LABEL_55;
      }
      uint64_t v41 = (const void **)(v36 - 160);
      if (v40 >= 0) {
        double v42 = (unsigned __int8 *)v29;
      }
      else {
        double v42 = *(unsigned __int8 **)v29;
      }
      if ((v37 & 0x80) != 0)
      {
        uint64_t result = memcmp(*v41, v42, *(void *)(v36 - 152));
        if (result) {
          goto LABEL_55;
        }
      }
      else if (*(unsigned char *)(v36 - 137))
      {
        while (*(unsigned __int8 *)v41 == *v42)
        {
          uint64_t v41 = (const void **)((char *)v41 + 1);
          ++v42;
          if (!--v37) {
            goto LABEL_8;
          }
        }
LABEL_55:
        if (v36 >= a4[1].i64[0])
        {
          uint64_t result = sub_4AAEB4(a4, (long long *)v29, &v43);
        }
        else
        {
          sub_4AA8E0((char *)v36, (long long *)v29);
          *(void *)(v36 + 152) = v43;
          uint64_t result = v36 + 160;
          a4->i64[1] = v36 + 160;
        }
        a4->i64[1] = result;
      }
LABEL_8:
      ++v9;
    }
    while (v9 < *(void *)(v10 + 24));
  }
  return result;
}

void sub_4A6554(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A6568(_Unwind_Exception *a1)
{
  v1[1] = v2;
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A6580(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A6594(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A65A8(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A65BC(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A65D0(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4A65E4(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 160 * a2;
}

void sub_4A6734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t *sub_4A6814(uint64_t *a1)
{
  if (*a1)
  {
    sub_4AA6AC((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_4A6850(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  if (!*(unsigned char *)(a1 + 1))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  BOOL v5 = a2;
  uint64_t v6 = a1;
  sub_4A6E4C(a2, a3, &v87);
  uint64_t v86 = -1;
  v4[1] = 0;
  void v4[2] = 0;
  *uint64_t v4 = 0;
  long long v7 = v87;
  uint64_t v77 = v88;
  if (v87 == v88)
  {
    if (!v87) {
      return;
    }
LABEL_130:
    uint64_t v88 = v7;
    operator delete(v7);
    return;
  }
  do
  {
    unint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    unint64_t v81 = v7;
    uint64_t v78 = v7 + 1;
    if (v9 >= sub_46C760(v5))
    {
      if (!v8) {
        goto LABEL_5;
      }
      uint64_t v10 = -1;
    }
    else
    {
      uint64_t v10 = v7[1];
      if (!v8)
      {
        if (v10 == -1) {
          goto LABEL_5;
        }
        uint64_t v12 = 0;
        BOOL v80 = 0;
        int v79 = 0;
        int v13 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v11 = sub_46C8EC(v5, v8 - 1);
    uint64_t v12 = *(void *)v11;
    BOOL v80 = *(int **)(v11 + 8);
    int v13 = *(_DWORD *)(v11 + 32);
    int v79 = *(unsigned __int8 *)(v11 + 38);
    if (v10 == -1)
    {
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      unint64_t v14 = 0;
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v15 = sub_46C8EC(v5, v10);
    unint64_t v14 = *(int **)(v15 + 8);
    uint64_t v83 = *(void *)v15;
    LODWORD(v82) = *(unsigned __int8 *)(v15 + 38);
    HIDWORD(v82) = *(_DWORD *)(v15 + 32);
LABEL_16:
    uint64_t v86 = -1;
    uint64_t v17 = *v7;
    unint64_t v16 = v7[1];
    BOOL v18 = *v7 >= v16;
    if (*v7 > v16) {
      unint64_t v16 = *v7;
    }
    unint64_t v85 = v16;
    if (!v18)
    {
      if (v13) {
        BOOL v19 = v12 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      std::string::size_type v20 = v80;
      int v22 = !v19 && v80 != 0;
      int v84 = v22;
      int v23 = v79;
      while (2)
      {
        uint64_t v25 = sub_46C8EC(v5, v17);
        int v26 = *(_DWORD *)(v25 + 32);
        if (v26) {
          int v27 = v84;
        }
        else {
          int v27 = 0;
        }
        uint64_t v29 = *(void *)v25;
        uint64_t v28 = *(int **)(v25 + 8);
        double v30 = 0.0;
        if (v27 != 1 || v29 == 0 || v28 == 0) {
          goto LABEL_63;
        }
        uint64_t v33 = (unsigned __int16 *)((char *)v20 - *v20);
        unsigned int v34 = *v33;
        if (v23)
        {
          if (v34 < 5)
          {
            LOWORD(v35) = 0;
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
          }
          else
          {
            unsigned int v35 = v33[2];
            if (!v35) {
              goto LABEL_45;
            }
LABEL_51:
            LOWORD(v35) = *(_WORD *)((char *)v20 + v35);
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
          }
LABEL_46:
          if (v37 >= 9)
          {
            unsigned int v38 = v36[4];
            if (!v38)
            {
LABEL_56:
              unsigned __int16 v39 = v35 + 18000;
              unsigned __int16 v40 = v35 - 18000;
              if ((unsigned __int16)(v39 >> 5) < 0x465u) {
                unsigned __int16 v40 = v39;
              }
              int v41 = v38 - v40;
              if (v41 > 18000) {
                v41 -= 36000;
              }
              if (v41 < -17999) {
                v41 += 36000;
              }
              double v30 = fabs((double)v41 / 100.0);
LABEL_63:
              double v42 = *(double *)(v6 + 8);
              if (v30 > v42) {
                goto LABEL_29;
              }
              double v43 = 0.0;
              if (v26) {
                BOOL v44 = v29 == 0;
              }
              else {
                BOOL v44 = 1;
              }
              if (v44 || v28 == 0 || HIDWORD(v82) == 0 || v83 == 0 || v14 == 0) {
                goto LABEL_106;
              }
              uint64_t v49 = (unsigned __int16 *)((char *)v28 - *v28);
              unsigned int v50 = *v49;
              if (*(unsigned char *)(v25 + 38))
              {
                if (v50 >= 5)
                {
                  unsigned int v51 = v49[2];
                  if (v51) {
                    goto LABEL_90;
                  }
                }
              }
              else if (v50 >= 9)
              {
                unsigned int v51 = v49[4];
                if (v51)
                {
LABEL_90:
                  __int16 v52 = *(_WORD *)((char *)v28 + v51);
                  unint64_t v53 = (unsigned __int16 *)((char *)v14 - *v14);
                  unsigned int v54 = *v53;
                  if (!v82) {
                    goto LABEL_91;
                  }
                  goto LABEL_95;
                }
              }
              __int16 v52 = 0;
              unint64_t v53 = (unsigned __int16 *)((char *)v14 - *v14);
              unsigned int v54 = *v53;
              if (!v82)
              {
LABEL_91:
                if (v54 < 5) {
                  goto LABEL_98;
                }
                unsigned int v55 = v53[2];
                if (!v55) {
                  goto LABEL_99;
                }
LABEL_97:
                unsigned int v55 = *(unsigned __int16 *)((char *)v14 + v55);
                goto LABEL_99;
              }
LABEL_95:
              if (v54 < 9)
              {
LABEL_98:
                unsigned int v55 = 0;
                goto LABEL_99;
              }
              unsigned int v55 = v53[4];
              if (v55) {
                goto LABEL_97;
              }
LABEL_99:
              unsigned __int16 v56 = v52 + 18000;
              unsigned __int16 v57 = v52 - 18000;
              if ((unsigned __int16)(v56 >> 5) < 0x465u) {
                unsigned __int16 v57 = v56;
              }
              int v58 = v55 - v57;
              if (v58 > 18000) {
                v58 -= 36000;
              }
              if (v58 < -17999) {
                v58 += 36000;
              }
              double v43 = fabs((double)v58 / 100.0);
LABEL_106:
              if (v43 > v42)
              {
LABEL_29:
                uint64_t v24 = v86;
                if (v86 == -1)
                {
                  uint64_t v86 = v17;
                  uint64_t v24 = v17;
                }
                goto LABEL_31;
              }
              uint64_t v59 = v86;
              if (v86 != -1)
              {
                uint64_t v60 = v6;
                unint64_t v61 = v5;
                uint64_t v63 = (uint64_t *)v4[1];
                unint64_t v62 = v4[2];
                if ((unint64_t)v63 < v62)
                {
                  *uint64_t v63 = v86;
                  v63[1] = v17;
                  uint64_t v64 = v63 + 2;
                  BOOL v5 = v61;
LABEL_124:
                  v4[1] = v64;
                  uint64_t v24 = -1;
                  uint64_t v86 = -1;
                  uint64_t v6 = v60;
                  goto LABEL_31;
                }
                unint64_t v65 = v4;
                unint64_t v66 = (uint64_t *)*v4;
                uint64_t v67 = ((uint64_t)v63 - *v4) >> 4;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 60) {
                  sub_2E00();
                }
                uint64_t v69 = v62 - (void)v66;
                if (v69 >> 3 > v68) {
                  unint64_t v68 = v69 >> 3;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v70 = v68;
                }
                if (v70 >> 60) {
                  sub_188D718();
                }
                unint64_t v71 = (char *)operator new(16 * v70);
                uint64_t v72 = (uint64_t *)&v71[16 * v67];
                *uint64_t v72 = v59;
                v72[1] = v17;
                if (v63 == v66)
                {
                  int v76 = &v71[16 * v70];
                  uint64_t v64 = v72 + 2;
                  uint64_t v4 = v65;
                  *unint64_t v65 = v72;
                  v65[1] = v72 + 2;
                  v65[2] = v76;
                  if (v66) {
                    goto LABEL_122;
                  }
                }
                else
                {
                  uint64_t v73 = &v71[16 * v67];
                  do
                  {
                    double v74 = v73 - 16;
                    *((_OWORD *)v73 - 1) = *((_OWORD *)v63 - 1);
                    v63 -= 2;
                    v73 -= 16;
                  }
                  while (v63 != v66);
                  uint64_t v75 = &v71[16 * v70];
                  uint64_t v64 = v72 + 2;
                  uint64_t v4 = v65;
                  *unint64_t v65 = v74;
                  v65[1] = v72 + 2;
                  v65[2] = v75;
                  if (v66) {
LABEL_122:
                  }
                    operator delete(v66);
                }
                BOOL v5 = v61;
                std::string::size_type v20 = v80;
                int v23 = v79;
                goto LABEL_124;
              }
              uint64_t v24 = -1;
LABEL_31:
              if (++v17 == v85)
              {
                if (v24 != -1) {
                  sub_2EA258((uint64_t)v4, &v86, v78);
                }
                goto LABEL_5;
              }
              continue;
            }
LABEL_54:
            unsigned int v38 = *(unsigned __int16 *)((char *)v28 + v38);
            goto LABEL_56;
          }
        }
        else
        {
          if (v34 < 9)
          {
            LOWORD(v35) = 0;
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
            goto LABEL_46;
          }
          unsigned int v35 = v33[4];
          if (v35) {
            goto LABEL_51;
          }
LABEL_45:
          unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
          unsigned int v37 = *v36;
          if (*(unsigned char *)(v25 + 38)) {
            goto LABEL_46;
          }
LABEL_52:
          if (v37 >= 5)
          {
            unsigned int v38 = v36[2];
            if (!v38) {
              goto LABEL_56;
            }
            goto LABEL_54;
          }
        }
        break;
      }
      unsigned int v38 = 0;
      goto LABEL_56;
    }
LABEL_5:
    long long v7 = v81 + 2;
  }
  while (v81 + 2 != v77);
  long long v7 = v87;
  if (v87) {
    goto LABEL_130;
  }
}

void sub_4A6DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  int v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
    uint64_t v24 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void *sub_4A6E4C@<X0>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v17 = -1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = (void *)sub_4A5E10(a1 + 133, a2);
  long long v7 = result + 3;
  unint64_t v6 = result[3];
  unint64_t v8 = result[5];
  if (v8 <= v6) {
    uint64_t v9 = result[3];
  }
  else {
    uint64_t v9 = result[5];
  }
  if (v8 < v6)
  {
    while (1)
    {
      unint64_t v16 = v8;
      uint64_t result = (void *)sub_46C8EC(a1, v8);
      uint64_t v10 = (int *)result[1];
      if (v10
        && (uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10), *v11 >= 0x11u)
        && (uint64_t v12 = v11[8]) != 0
        && (*(_WORD *)((unsigned char *)v10 + v12) & 4) != 0
        || (int v13 = (unsigned __int16 *)(*result - *(int *)*result), *v13 >= 0xBu)
        && (uint64_t v14 = v13[5]) != 0
        && (*(unsigned char *)(*result + v14 + 2) & 1) != 0)
      {
        uint64_t v15 = v17;
        if (v17 != -1) {
          goto LABEL_7;
        }
        uint64_t v15 = v16;
      }
      else
      {
        uint64_t v15 = v17;
        if (v17 == -1) {
          goto LABEL_7;
        }
        uint64_t result = sub_2EA258((uint64_t)a3, &v17, &v16);
        uint64_t v15 = -1;
      }
      uint64_t v17 = v15;
LABEL_7:
      if (v9 == ++v8)
      {
        if (v15 != -1) {
          return sub_2EA258((uint64_t)a3, &v17, v7);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_4A6F88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A6FAC(uint64_t a1, void *a2, uint64_t a3)
{
  v16[23] = 21;
  strcpy(v16, "ARContinueInfoBuilder");
  uint64_t v29 = 0;
  double v30 = 0;
  uint64_t v31 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&v29);
  sub_3CB560(v6, (uint64_t)__p);
  sub_4A7B58(a1, __p, a3);
  long long v7 = v33;
  if (v33)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      long long v7 = v12;
    }
    while (v12);
  }
  unint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v29;
  if (v29)
  {
    uint64_t v10 = v30;
    uint64_t v11 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v29;
    }
    double v30 = v9;
    operator delete(v11);
  }
  if ((v16[23] & 0x80000000) != 0) {
    operator delete(*(void **)v16);
  }
  *(void *)(a1 + 40) = sub_3750CC(a2);
  sub_6F30A4((uint64_t)v16);
  *(_OWORD *)__p = *(_OWORD *)v16;
  memset(v16, 0, sizeof(v16));
  uint64_t v33 = *(char **)&v16[16];
  uint64_t v34 = v17;
  *(_OWORD *)unsigned int v35 = *(_OWORD *)v18;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v13 = v19;
  uint64_t v19 = 0;
  uint64_t v36 = v13;
  uint64_t v37 = v20;
  int v38 = v21;
  uint64_t v40 = v23;
  *(_OWORD *)unsigned __int16 v39 = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v42 = v25;
  *(_OWORD *)int v41 = *(_OWORD *)v24;
  uint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  int v43 = v26;
  uint64_t v14 = v28;
  *(_OWORD *)BOOL v44 = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  uint64_t v45 = v14;
  uint64_t v46 = 0;
  sub_4AA76C((char **)(a1 + 48), (uint64_t)__p, 1uLL);
  if (SHIBYTE(v45) < 0)
  {
    operator delete(v44[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v41[0]);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v39[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v35[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__p[0]);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v27[0]);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v24[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_36:
    operator delete(v18[0]);
    if ((v16[23] & 0x80000000) == 0) {
      return a1;
    }
LABEL_37:
    operator delete(*(void **)v16);
    return a1;
  }
LABEL_35:
  operator delete(v22[0]);
  if (SHIBYTE(v19) < 0) {
    goto LABEL_36;
  }
LABEL_26:
  if ((v16[23] & 0x80000000) != 0) {
    goto LABEL_37;
  }
  return a1;
}

void sub_4A72C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_4A72DC(_Unwind_Exception *a1)
{
}

void sub_4A72E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4A731C(unsigned char *a1, void *a2)
{
  if (!*a1) {
    return;
  }
  uint64_t v3 = a2[134] - a2[133];
  if (!v3) {
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0x2FC962FC962FC963 * (v3 >> 5);
  while (2)
  {
    if (!v5)
    {
      unint64_t v5 = 1;
      goto LABEL_5;
    }
    uint64_t v7 = a2[133];
    sub_4A75B0((uint64_t)a1, a2, v5, (uint64_t)&v29);
    uint64_t v8 = v7 + 2400 * v5;
    uint64_t v9 = v8 + 1832;
    uint64_t v10 = *(char **)(v8 + 1832);
    if (!v10) {
      goto LABEL_26;
    }
    uint64_t v11 = *(char **)(v8 + 1840);
    uint64_t v12 = v10;
    if (v11 == v10) {
      goto LABEL_25;
    }
    uint64_t v13 = v11 - 121;
    do
    {
      uint64_t v15 = *(void **)(v13 + 97);
      if (v15)
      {
        *(void *)(v13 + 105) = v15;
        operator delete(v15);
      }
      if (*v13 < 0)
      {
        operator delete(*(void **)(v13 - 23));
        if ((*(v13 - 32) & 0x80000000) == 0)
        {
LABEL_15:
          if ((*(v13 - 56) & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((*(v13 - 32) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(void **)(v13 - 55));
      if ((*(v13 - 56) & 0x80000000) == 0)
      {
LABEL_16:
        if (*(v13 - 96) < 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
LABEL_21:
      operator delete(*(void **)(v13 - 79));
      if (*(v13 - 96) < 0)
      {
LABEL_22:
        operator delete(*(void **)(v13 - 119));
        if ((*(v13 - 128) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
LABEL_17:
      if ((*(v13 - 128) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_23:
      operator delete(*(void **)(v13 - 151));
LABEL_10:
      uint64_t v14 = v13 - 151;
      v13 -= 272;
    }
    while (v14 != v10);
    uint64_t v12 = *(char **)v9;
LABEL_25:
    *(void *)(v9 + 8) = v10;
    operator delete(v12);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
LABEL_26:
    *(_OWORD *)uint64_t v9 = v29;
    *(void *)(v9 + 16) = v30;
    if (++v5 == 0x2FC962FC962FC963 * ((uint64_t)(a2[134] - a2[133]) >> 5))
    {
      uint64_t v16 = a2[37];
      if (v16 != 0x7FFFFFFFFFFFFFFFLL) {
        *(void *)(*(void *)(v9 + 8) - 40) += v16;
      }
    }
LABEL_5:
    if (v5 != v6) {
      continue;
    }
    break;
  }
  uint64_t v17 = a2[133];
  if ((unint64_t)(0x2FC962FC962FC963 * ((a2[134] - v17) >> 5)) > 1)
  {
    BOOL v18 = *(long long **)(v17 + 4232);
    uint64_t v19 = (long long *)((char *)v18 + 152);
    uint64_t v20 = (uint64_t *)(v17 + 872);
    int v21 = (int *)(v17 + 160);
    unint64_t v22 = *(void *)(v17 + 1840);
    if (v22 >= *(void *)(v17 + 1848))
    {
      uint64_t v28 = sub_4AAB84((void **)(v17 + 1832), v18, (long long *)((char *)v18 + 152), v20, v21);
    }
    else
    {
      uint64_t v23 = *v20;
      int v24 = *v21;
      sub_4AA8E0(*(char **)(v17 + 1840), v18);
      *(_OWORD *)(v22 + 152) = *v19;
      long long v25 = v19[1];
      long long v26 = v19[2];
      long long v27 = v19[3];
      *(_OWORD *)(v22 + 216) = v19[4];
      *(_OWORD *)(v22 + 200) = v27;
      *(_OWORD *)(v22 + 184) = v26;
      *(_OWORD *)(v22 + 168) = v25;
      *(void *)(v22 + 232) = v23;
      *(_DWORD *)(v22 + 240) = v24;
      *(void *)(v22 + 256) = 0;
      *(void *)(v22 + 264) = 0;
      *(void *)(v22 + 248) = 0;
      uint64_t v28 = v22 + 272;
      *(void *)(v17 + 1840) = v22 + 272;
    }
    *(void *)(v17 + 1840) = v28;
  }
}

void sub_4A75A8(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1840) = v1;
  _Unwind_Resume(a1);
}

void sub_4A75B0(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  unint64_t v68 = v8;
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  sub_4A7F24(a1, a2, a3, v78);
  sub_4A7DD8(a1, a2, a3, (uint64_t)&v76);
  uint64_t v72 = a2;
  unint64_t v69 = a3;
  sub_4A8308(a1, a2, a3, &__p);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v77 != v76)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v57 = 0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3);
    uint64_t v64 = (unint64_t *)(v9 + 24);
    uint64_t v59 = (int *)(v10 + 160);
    uint64_t v67 = a4;
    do
    {
      uint64_t v63 = (long long *)&v76[88 * v14];
      uint64_t v58 = v14 + 1;
      if (v14 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3))) {
        uint64_t v17 = v64;
      }
      else {
        uint64_t v17 = (unint64_t *)v63 + 21;
      }
      uint64_t v18 = v78[0].i64[0];
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
      if (v13 >= v19)
      {
        unint64_t v15 = v13;
        unint64_t v16 = v12;
        goto LABEL_4;
      }
      unint64_t v20 = *v17;
      unint64_t v61 = v20;
      unint64_t v62 = (unint64_t *)&v76[88 * v14 + 80];
      while (2)
      {
        uint64_t v21 = v18 + 160 * v13;
        unint64_t v60 = v13;
        unint64_t v22 = (unint64_t *)(v21 + 312);
        unint64_t v66 = v13 + 1;
        if (v13 + 1 >= v19) {
          unint64_t v22 = v64;
        }
        unint64_t v23 = *v22;
        if (*v62 <= *(void *)(v21 + 152)) {
          unint64_t v24 = *(void *)(v21 + 152);
        }
        else {
          unint64_t v24 = *v62;
        }
        if (v23 >= v20) {
          unint64_t v25 = v20;
        }
        else {
          unint64_t v25 = *v22;
        }
        uint64_t v26 = sub_46CE10(v72, v24, 1, v25, 0, *(double *)&v11);
        uint64_t v73 = v26;
        unint64_t v27 = *(void *)(a4 + 8);
        unint64_t v65 = v23;
        if (v27 >= *(void *)(a4 + 16))
        {
          uint64_t v31 = sub_4AB1E4((void **)a4, (long long *)v21, v63, &v73, v59);
        }
        else
        {
          int v28 = *v59;
          sub_4AA8E0((char *)v27, (long long *)v21);
          *(_OWORD *)(v27 + 152) = *v63;
          long long v11 = v63[1];
          long long v29 = v63[2];
          long long v30 = v63[3];
          *(_OWORD *)(v27 + 216) = v63[4];
          *(_OWORD *)(v27 + 200) = v30;
          *(_OWORD *)(v27 + 184) = v29;
          *(_OWORD *)(v27 + 168) = v11;
          *(void *)(v27 + 232) = v26;
          *(_DWORD *)(v27 + 240) = v28;
          *(void *)(v27 + 256) = 0;
          *(void *)(v27 + 264) = 0;
          *(void *)(v27 + 248) = 0;
          uint64_t v31 = v27 + 272;
          *(void *)(a4 + 8) = v27 + 272;
        }
        *(void *)(a4 + 8) = v31;
        unint64_t v70 = v25;
        unint64_t v71 = v24;
        do
        {
          unint64_t v16 = v12;
          if (v12 >= (v75 - (unsigned char *)__p) >> 4) {
            break;
          }
          uint64_t v34 = (char *)__p + 16 * v12;
          unint64_t v36 = *((void *)v34 + 1);
          unsigned int v35 = (unint64_t *)(v34 + 8);
          unint64_t v33 = v36;
          if (v36 <= v24) {
            goto LABEL_24;
          }
          unint64_t v37 = *((void *)__p + 2 * v16);
          if (v37 >= v25) {
            goto LABEL_24;
          }
          uint64_t v38 = *(void *)(a4 + 8);
          if (v37 <= v24) {
            uint64_t v39 = v24;
          }
          else {
            uint64_t v39 = *((void *)__p + 2 * v16);
          }
          if (v33 >= v25) {
            uint64_t v40 = v25;
          }
          else {
            uint64_t v40 = v33;
          }
          uint64_t v41 = sub_4A5E10(v68, v69);
          uint64_t v43 = sub_46CE10(v72, *(void *)(v41 + 40), 1, v39, 0, v42);
          uint64_t v45 = sub_46CE10(v72, v39, 1, v40, 0, v44) + v43;
          __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 16);
          unint64_t v46 = *(void *)(v38 - 8);
          if ((unint64_t)v47 < v46)
          {
            *__darwin_ct_rune_t v47 = v43;
            v47[1] = v45;
            uint64_t v32 = v47 + 2;
            unint64_t v25 = v70;
            unint64_t v24 = v71;
          }
          else
          {
            __darwin_ct_rune_t v48 = *(uint64_t **)(v38 - 24);
            uint64_t v49 = ((char *)v47 - (char *)v48) >> 4;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v51 = v46 - (void)v48;
            if (v51 >> 3 > v50) {
              unint64_t v50 = v51 >> 3;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 60) {
                sub_188D718();
              }
              unint64_t v53 = v52;
              unsigned int v54 = (char *)operator new(16 * v52);
              unint64_t v52 = v53;
              unsigned int v55 = (uint64_t *)&v54[16 * v49];
              *unsigned int v55 = v43;
              v55[1] = v45;
              uint64_t v56 = (uint64_t)v55;
              if (v47 != v48)
              {
LABEL_44:
                unint64_t v25 = v70;
                unint64_t v24 = v71;
                do
                {
                  long long v11 = *((_OWORD *)v47 - 1);
                  *(_OWORD *)(v56 - 16) = v11;
                  v56 -= 16;
                  v47 -= 2;
                }
                while (v47 != v48);
                __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 24);
                uint64_t v32 = v55 + 2;
                *(void *)(v38 - 24) = v56;
                *(void *)(v38 - 16) = v55 + 2;
                *(void *)(v38 - 8) = &v54[16 * v52];
                if (!v47) {
                  goto LABEL_23;
                }
LABEL_50:
                operator delete(v47);
                goto LABEL_23;
              }
            }
            else
            {
              unsigned int v54 = 0;
              unsigned int v55 = (uint64_t *)(16 * v49);
              *unsigned int v55 = v43;
              v55[1] = v45;
              uint64_t v56 = 16 * v49;
              if (v47 != v48) {
                goto LABEL_44;
              }
            }
            unint64_t v25 = v70;
            unint64_t v24 = v71;
            uint64_t v32 = v55 + 2;
            *(void *)(v38 - 24) = v56;
            *(void *)(v38 - 16) = v55 + 2;
            *(void *)(v38 - 8) = &v54[16 * v52];
            if (v47) {
              goto LABEL_50;
            }
          }
LABEL_23:
          *(void *)(v38 - 16) = v32;
          unint64_t v33 = *v35;
          a4 = v67;
LABEL_24:
          unint64_t v12 = v16 + 1;
        }
        while (v33 <= v25);
        unint64_t v20 = v61;
        if (v61 > v65)
        {
          uint64_t v18 = v78[0].i64[0];
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
          unint64_t v12 = v16;
          unint64_t v15 = v66;
          unint64_t v13 = v66;
          if (v66 >= v19) {
            goto LABEL_4;
          }
          continue;
        }
        break;
      }
      unint64_t v15 = v60;
      if (v61 == v65) {
        unint64_t v15 = v66;
      }
LABEL_4:
      unint64_t v12 = v16;
      unint64_t v13 = v15;
      uint64_t v14 = v58;
    }
    while (v58 != v57);
  }
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v78[0].i64[0])
  {
    sub_4AA6AC((uint64_t)v78, v78[0].i64[0]);
    operator delete((void *)v78[0].i64[0]);
  }
}

void sub_4A7A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  long long v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  sub_4A6814((uint64_t *)(v28 - 112));
  _Unwind_Resume(a1);
}

void sub_4A7B00(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  unint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_4A731C(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_4A7B58(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1481))
  {
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "enabled");
    BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)a1 = v5;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_continue_gaps");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "max_angle_between_straight_segments");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "pedestrian_properties_buffer_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_slip_road_name_search_distance_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9AC0;
  strcpy((char *)__p[0], "enable_additional_vendor_intersection_internal_types");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  return a1;
}

void sub_4A7DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4A7DD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v8 = a2 + 133;
  uint64_t v9 = (void *)sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  unint64_t v11 = *(void *)(v10 + 632);
  if (v11 != -1 && v11 >= v9[5])
  {
    *(void *)&v19[0] = v11 + 1;
    BOOL v14 = v9[3] > v11;
    unint64_t v13 = (uint64_t *)v19;
    if (!v14) {
      unint64_t v13 = v9 + 3;
    }
  }
  else
  {
    unint64_t v13 = v9 + 3;
  }
  uint64_t v24 = *v13;
  uint64_t v15 = v24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_4A6050((char **)a4, (_OWORD *)(v10 + 568), v9 + 5);
  if (v15 != v9[3])
  {
    uint64_t result = (char *)sub_46CE10(a2, v9[5], 1, v15, 0, v17);
    if (v9[109] - (void)result > *(void *)(a1 + 16))
    {
      uint64_t v20 = -1;
      *(void *)&long long v18 = -1;
      *((void *)&v18 + 1) = -1;
      v19[1] = v18;
      v19[2] = v18;
      v19[0] = v18;
      int v21 = 0;
      uint64_t v22 = -1;
      int v23 = 0;
      return sub_4A6050((char **)a4, v19, &v24);
    }
  }
  return result;
}

void sub_4A7F00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A7F24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t result = sub_4A5E10(a2 + 133, a3);
  if (a2[148] == a2[149]) {
    BOOL v8 = (void *)(a1 + 48);
  }
  else {
    BOOL v8 = a2 + 148;
  }
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  a4->i64[0] = 0;
  unint64_t v9 = *(void *)(result + 40);
  if (v9 < *(void *)(result + 24))
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = v11;
      unint64_t v43 = v9;
      unint64_t v13 = (void *)sub_46C8EC(a2, v9);
      BOOL v14 = (unsigned __int16 *)(*v13 - *(int *)*v13);
      if (*v14 >= 0x2Fu)
      {
        uint64_t v15 = v14[23];
        if (v15)
        {
          unsigned int v16 = *(unsigned __int8 *)(*v13 + v15);
          BOOL v17 = v16 > 0x2A;
          uint64_t v18 = (1 << v16) & 0x50426810004;
          if (!v17 && v18 != 0)
          {
            if (sub_46C760(a2) > v9)
            {
              uint64_t v20 = 0;
              while (v20 <= *(void *)(a1 + 24))
              {
                int v21 = (void *)sub_46C8EC(a2, v9);
                int v23 = (unsigned __int16 *)(*v21 - *(int *)*v21);
                if (*v23 < 0x2Fu) {
                  goto LABEL_26;
                }
                uint64_t v24 = v23[23];
                if (!v24) {
                  goto LABEL_26;
                }
                unsigned int v25 = *(unsigned __int8 *)(*v21 + v24);
                BOOL v17 = v25 > 0x2A;
                uint64_t v26 = (1 << v25) & 0x50426810004;
                if (v17 || v26 == 0) {
                  goto LABEL_26;
                }
                uint64_t v28 = sub_46CCC8(a2, v9++, v22);
                v20 += v28;
                if (v9 >= sub_46C760(a2)) {
                  break;
                }
              }
            }
            --v9;
          }
        }
      }
      do
LABEL_26:
        unint64_t v11 = v12++;
      while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[1] - *v8) >> 5) && *(void *)(sub_4A65E4(v8, v12) + 152) <= v9);
      uint64_t v29 = sub_4A65E4(v8, v11);
      uint64_t result = sub_46C8EC(a2, v9);
      if (a4->i64[0] != a4->i64[1])
      {
        long long v30 = (int **)result;
        uint64_t result = sub_6F2FD8(v29);
        if (!result || (uint64_t result = sub_6F2FD8(a4->i64[1] - 160), result))
        {
          if ((uint64_t v31 = v30[1]) != 0
            && (uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31), *v32 >= 0x11u)
            && (uint64_t v33 = v32[8]) != 0
            && (*(_WORD *)((unsigned char *)v31 + v33) & 4) != 0
            || (uint64_t v34 = (unsigned __int16 *)((char *)*v30 - **v30), *v34 >= 0xBu)
            && (uint64_t v35 = v34[5]) != 0
            && (*((unsigned char *)*v30 + v35 + 2) & 1) != 0)
          {
            if (v43 == v9) {
              goto LABEL_8;
            }
          }
        }
      }
      unint64_t v36 = a4->u64[1];
      if (a4->i64[0] == v36) {
        goto LABEL_55;
      }
      uint64_t v37 = *(unsigned __int8 *)(v36 - 137);
      if ((v37 & 0x80u) == 0) {
        uint64_t v38 = *(unsigned __int8 *)(v36 - 137);
      }
      else {
        uint64_t v38 = *(void *)(v36 - 152);
      }
      uint64_t v39 = *(unsigned __int8 *)(v29 + 23);
      int v40 = (char)v39;
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = *(void *)(v29 + 8);
      }
      if (v38 != v39) {
        goto LABEL_55;
      }
      uint64_t v41 = (const void **)(v36 - 160);
      if (v40 >= 0) {
        double v42 = (unsigned __int8 *)v29;
      }
      else {
        double v42 = *(unsigned __int8 **)v29;
      }
      if ((v37 & 0x80) != 0)
      {
        uint64_t result = memcmp(*v41, v42, *(void *)(v36 - 152));
        if (result) {
          goto LABEL_55;
        }
      }
      else if (*(unsigned char *)(v36 - 137))
      {
        while (*(unsigned __int8 *)v41 == *v42)
        {
          uint64_t v41 = (const void **)((char *)v41 + 1);
          ++v42;
          if (!--v37) {
            goto LABEL_8;
          }
        }
LABEL_55:
        if (v36 >= a4[1].i64[0])
        {
          uint64_t result = sub_4AAEB4(a4, (long long *)v29, &v43);
        }
        else
        {
          sub_4AA8E0((char *)v36, (long long *)v29);
          *(void *)(v36 + 152) = v43;
          uint64_t result = v36 + 160;
          a4->i64[1] = v36 + 160;
        }
        a4->i64[1] = result;
      }
LABEL_8:
      ++v9;
    }
    while (v9 < *(void *)(v10 + 24));
  }
  return result;
}

void sub_4A8278(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A828C(_Unwind_Exception *a1)
{
  v1[1] = v2;
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A82A4(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A82B8(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A82CC(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A82E0(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A82F4(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A8308(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  if (!*(unsigned char *)(a1 + 1))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  BOOL v5 = a2;
  uint64_t v6 = a1;
  sub_4A8904(a2, a3, &v87);
  uint64_t v86 = -1;
  v4[1] = 0;
  void v4[2] = 0;
  *uint64_t v4 = 0;
  double v7 = v87;
  uint64_t v77 = v88;
  if (v87 == v88)
  {
    if (!v87) {
      return;
    }
LABEL_130:
    uint64_t v88 = v7;
    operator delete(v7);
    return;
  }
  do
  {
    unint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    unint64_t v81 = v7;
    uint64_t v78 = v7 + 1;
    if (v9 >= sub_46C760(v5))
    {
      if (!v8) {
        goto LABEL_5;
      }
      uint64_t v10 = -1;
    }
    else
    {
      uint64_t v10 = v7[1];
      if (!v8)
      {
        if (v10 == -1) {
          goto LABEL_5;
        }
        uint64_t v12 = 0;
        BOOL v80 = 0;
        int v79 = 0;
        int v13 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v11 = sub_46C8EC(v5, v8 - 1);
    uint64_t v12 = *(void *)v11;
    BOOL v80 = *(int **)(v11 + 8);
    int v13 = *(_DWORD *)(v11 + 32);
    int v79 = *(unsigned __int8 *)(v11 + 38);
    if (v10 == -1)
    {
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      BOOL v14 = 0;
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v15 = sub_46C8EC(v5, v10);
    BOOL v14 = *(int **)(v15 + 8);
    uint64_t v83 = *(void *)v15;
    LODWORD(v82) = *(unsigned __int8 *)(v15 + 38);
    HIDWORD(v82) = *(_DWORD *)(v15 + 32);
LABEL_16:
    uint64_t v86 = -1;
    uint64_t v17 = *v7;
    unint64_t v16 = v7[1];
    BOOL v18 = *v7 >= v16;
    if (*v7 > v16) {
      unint64_t v16 = *v7;
    }
    unint64_t v85 = v16;
    if (!v18)
    {
      if (v13) {
        BOOL v19 = v12 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      uint64_t v20 = v80;
      int v22 = !v19 && v80 != 0;
      int v84 = v22;
      int v23 = v79;
      while (2)
      {
        uint64_t v25 = sub_46C8EC(v5, v17);
        int v26 = *(_DWORD *)(v25 + 32);
        if (v26) {
          int v27 = v84;
        }
        else {
          int v27 = 0;
        }
        uint64_t v29 = *(void *)v25;
        uint64_t v28 = *(int **)(v25 + 8);
        double v30 = 0.0;
        if (v27 != 1 || v29 == 0 || v28 == 0) {
          goto LABEL_63;
        }
        uint64_t v33 = (unsigned __int16 *)((char *)v20 - *v20);
        unsigned int v34 = *v33;
        if (v23)
        {
          if (v34 < 5)
          {
            LOWORD(v35) = 0;
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
          }
          else
          {
            unsigned int v35 = v33[2];
            if (!v35) {
              goto LABEL_45;
            }
LABEL_51:
            LOWORD(v35) = *(_WORD *)((char *)v20 + v35);
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
          }
LABEL_46:
          if (v37 >= 9)
          {
            unsigned int v38 = v36[4];
            if (!v38)
            {
LABEL_56:
              unsigned __int16 v39 = v35 + 18000;
              unsigned __int16 v40 = v35 - 18000;
              if ((unsigned __int16)(v39 >> 5) < 0x465u) {
                unsigned __int16 v40 = v39;
              }
              int v41 = v38 - v40;
              if (v41 > 18000) {
                v41 -= 36000;
              }
              if (v41 < -17999) {
                v41 += 36000;
              }
              double v30 = fabs((double)v41 / 100.0);
LABEL_63:
              double v42 = *(double *)(v6 + 8);
              if (v30 > v42) {
                goto LABEL_29;
              }
              double v43 = 0.0;
              if (v26) {
                BOOL v44 = v29 == 0;
              }
              else {
                BOOL v44 = 1;
              }
              if (v44 || v28 == 0 || HIDWORD(v82) == 0 || v83 == 0 || v14 == 0) {
                goto LABEL_106;
              }
              uint64_t v49 = (unsigned __int16 *)((char *)v28 - *v28);
              unsigned int v50 = *v49;
              if (*(unsigned char *)(v25 + 38))
              {
                if (v50 >= 5)
                {
                  unsigned int v51 = v49[2];
                  if (v51) {
                    goto LABEL_90;
                  }
                }
              }
              else if (v50 >= 9)
              {
                unsigned int v51 = v49[4];
                if (v51)
                {
LABEL_90:
                  __int16 v52 = *(_WORD *)((char *)v28 + v51);
                  unint64_t v53 = (unsigned __int16 *)((char *)v14 - *v14);
                  unsigned int v54 = *v53;
                  if (!v82) {
                    goto LABEL_91;
                  }
                  goto LABEL_95;
                }
              }
              __int16 v52 = 0;
              unint64_t v53 = (unsigned __int16 *)((char *)v14 - *v14);
              unsigned int v54 = *v53;
              if (!v82)
              {
LABEL_91:
                if (v54 < 5) {
                  goto LABEL_98;
                }
                unsigned int v55 = v53[2];
                if (!v55) {
                  goto LABEL_99;
                }
LABEL_97:
                unsigned int v55 = *(unsigned __int16 *)((char *)v14 + v55);
                goto LABEL_99;
              }
LABEL_95:
              if (v54 < 9)
              {
LABEL_98:
                unsigned int v55 = 0;
                goto LABEL_99;
              }
              unsigned int v55 = v53[4];
              if (v55) {
                goto LABEL_97;
              }
LABEL_99:
              unsigned __int16 v56 = v52 + 18000;
              unsigned __int16 v57 = v52 - 18000;
              if ((unsigned __int16)(v56 >> 5) < 0x465u) {
                unsigned __int16 v57 = v56;
              }
              int v58 = v55 - v57;
              if (v58 > 18000) {
                v58 -= 36000;
              }
              if (v58 < -17999) {
                v58 += 36000;
              }
              double v43 = fabs((double)v58 / 100.0);
LABEL_106:
              if (v43 > v42)
              {
LABEL_29:
                uint64_t v24 = v86;
                if (v86 == -1)
                {
                  uint64_t v86 = v17;
                  uint64_t v24 = v17;
                }
                goto LABEL_31;
              }
              uint64_t v59 = v86;
              if (v86 != -1)
              {
                uint64_t v60 = v6;
                unint64_t v61 = v5;
                uint64_t v63 = (uint64_t *)v4[1];
                unint64_t v62 = v4[2];
                if ((unint64_t)v63 < v62)
                {
                  *uint64_t v63 = v86;
                  v63[1] = v17;
                  uint64_t v64 = v63 + 2;
                  BOOL v5 = v61;
LABEL_124:
                  v4[1] = v64;
                  uint64_t v24 = -1;
                  uint64_t v86 = -1;
                  uint64_t v6 = v60;
                  goto LABEL_31;
                }
                unint64_t v65 = v4;
                unint64_t v66 = (uint64_t *)*v4;
                uint64_t v67 = ((uint64_t)v63 - *v4) >> 4;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 60) {
                  sub_2E00();
                }
                uint64_t v69 = v62 - (void)v66;
                if (v69 >> 3 > v68) {
                  unint64_t v68 = v69 >> 3;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v70 = v68;
                }
                if (v70 >> 60) {
                  sub_188D718();
                }
                unint64_t v71 = (char *)operator new(16 * v70);
                uint64_t v72 = (uint64_t *)&v71[16 * v67];
                *uint64_t v72 = v59;
                v72[1] = v17;
                if (v63 == v66)
                {
                  int v76 = &v71[16 * v70];
                  uint64_t v64 = v72 + 2;
                  uint64_t v4 = v65;
                  *unint64_t v65 = v72;
                  v65[1] = v72 + 2;
                  v65[2] = v76;
                  if (v66) {
                    goto LABEL_122;
                  }
                }
                else
                {
                  uint64_t v73 = &v71[16 * v67];
                  do
                  {
                    double v74 = v73 - 16;
                    *((_OWORD *)v73 - 1) = *((_OWORD *)v63 - 1);
                    v63 -= 2;
                    v73 -= 16;
                  }
                  while (v63 != v66);
                  uint64_t v75 = &v71[16 * v70];
                  uint64_t v64 = v72 + 2;
                  uint64_t v4 = v65;
                  *unint64_t v65 = v74;
                  v65[1] = v72 + 2;
                  v65[2] = v75;
                  if (v66) {
LABEL_122:
                  }
                    operator delete(v66);
                }
                BOOL v5 = v61;
                uint64_t v20 = v80;
                int v23 = v79;
                goto LABEL_124;
              }
              uint64_t v24 = -1;
LABEL_31:
              if (++v17 == v85)
              {
                if (v24 != -1) {
                  sub_2EA258((uint64_t)v4, &v86, v78);
                }
                goto LABEL_5;
              }
              continue;
            }
LABEL_54:
            unsigned int v38 = *(unsigned __int16 *)((char *)v28 + v38);
            goto LABEL_56;
          }
        }
        else
        {
          if (v34 < 9)
          {
            LOWORD(v35) = 0;
            unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
            unsigned int v37 = *v36;
            if (!*(unsigned char *)(v25 + 38)) {
              goto LABEL_52;
            }
            goto LABEL_46;
          }
          unsigned int v35 = v33[4];
          if (v35) {
            goto LABEL_51;
          }
LABEL_45:
          unint64_t v36 = (unsigned __int16 *)((char *)v28 - *v28);
          unsigned int v37 = *v36;
          if (*(unsigned char *)(v25 + 38)) {
            goto LABEL_46;
          }
LABEL_52:
          if (v37 >= 5)
          {
            unsigned int v38 = v36[2];
            if (!v38) {
              goto LABEL_56;
            }
            goto LABEL_54;
          }
        }
        break;
      }
      unsigned int v38 = 0;
      goto LABEL_56;
    }
LABEL_5:
    double v7 = v81 + 2;
  }
  while (v81 + 2 != v77);
  double v7 = v87;
  if (v87) {
    goto LABEL_130;
  }
}

void sub_4A88AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  int v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
    uint64_t v24 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void *sub_4A8904@<X0>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v17 = -1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = (void *)sub_4A5E10(a1 + 133, a2);
  double v7 = result + 3;
  unint64_t v6 = result[3];
  unint64_t v8 = result[5];
  if (v8 <= v6) {
    uint64_t v9 = result[3];
  }
  else {
    uint64_t v9 = result[5];
  }
  if (v8 < v6)
  {
    while (1)
    {
      unint64_t v16 = v8;
      uint64_t result = (void *)sub_46C8EC(a1, v8);
      uint64_t v10 = (int *)result[1];
      if (v10
        && (uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10), *v11 >= 0x11u)
        && (uint64_t v12 = v11[8]) != 0
        && (*(_WORD *)((unsigned char *)v10 + v12) & 4) != 0
        || (int v13 = (unsigned __int16 *)(*result - *(int *)*result), *v13 >= 0xBu)
        && (uint64_t v14 = v13[5]) != 0
        && (*(unsigned char *)(*result + v14 + 2) & 1) != 0)
      {
        uint64_t v15 = v17;
        if (v17 != -1) {
          goto LABEL_7;
        }
        uint64_t v15 = v16;
      }
      else
      {
        uint64_t v15 = v17;
        if (v17 == -1) {
          goto LABEL_7;
        }
        uint64_t result = sub_2EA258((uint64_t)a3, &v17, &v16);
        uint64_t v15 = -1;
      }
      uint64_t v17 = v15;
LABEL_7:
      if (v9 == ++v8)
      {
        if (v15 != -1) {
          return sub_2EA258((uint64_t)a3, &v17, v7);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_4A8A40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A8A64(uint64_t a1, void *a2, uint64_t a3)
{
  v16[23] = 21;
  strcpy(v16, "ARContinueInfoBuilder");
  uint64_t v29 = 0;
  double v30 = 0;
  uint64_t v31 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v16, (uint64_t *)&v29);
  sub_3CB5E0(v6, (uint64_t)__p);
  sub_4A9610(a1, __p, a3);
  double v7 = v33;
  if (v33)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      double v7 = v12;
    }
    while (v12);
  }
  unint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v29;
  if (v29)
  {
    uint64_t v10 = v30;
    uint64_t v11 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v29;
    }
    double v30 = v9;
    operator delete(v11);
  }
  if ((v16[23] & 0x80000000) != 0) {
    operator delete(*(void **)v16);
  }
  *(void *)(a1 + 40) = sub_3750CC(a2);
  sub_6F30A4((uint64_t)v16);
  *(_OWORD *)__p = *(_OWORD *)v16;
  memset(v16, 0, sizeof(v16));
  uint64_t v33 = *(char **)&v16[16];
  uint64_t v34 = v17;
  *(_OWORD *)unsigned int v35 = *(_OWORD *)v18;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v13 = v19;
  uint64_t v19 = 0;
  uint64_t v36 = v13;
  uint64_t v37 = v20;
  int v38 = v21;
  uint64_t v40 = v23;
  *(_OWORD *)unsigned __int16 v39 = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v42 = v25;
  *(_OWORD *)int v41 = *(_OWORD *)v24;
  uint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  int v43 = v26;
  uint64_t v14 = v28;
  *(_OWORD *)BOOL v44 = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  uint64_t v45 = v14;
  uint64_t v46 = 0;
  sub_4AA76C((char **)(a1 + 48), (uint64_t)__p, 1uLL);
  if (SHIBYTE(v45) < 0)
  {
    operator delete(v44[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v41[0]);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v39[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v35[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__p[0]);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v27[0]);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v24[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_36:
    operator delete(v18[0]);
    if ((v16[23] & 0x80000000) == 0) {
      return a1;
    }
LABEL_37:
    operator delete(*(void **)v16);
    return a1;
  }
LABEL_35:
  operator delete(v22[0]);
  if (SHIBYTE(v19) < 0) {
    goto LABEL_36;
  }
LABEL_26:
  if ((v16[23] & 0x80000000) != 0) {
    goto LABEL_37;
  }
  return a1;
}

void sub_4A8D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_4A8D94(_Unwind_Exception *a1)
{
}

void sub_4A8D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4A8DD4(unsigned char *a1, void *a2)
{
  if (!*a1) {
    return;
  }
  uint64_t v3 = a2[134] - a2[133];
  if (!v3) {
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0x2FC962FC962FC963 * (v3 >> 5);
  while (2)
  {
    if (!v5)
    {
      unint64_t v5 = 1;
      goto LABEL_5;
    }
    uint64_t v7 = a2[133];
    sub_4A9068((uint64_t)a1, a2, v5, (uint64_t)&v29);
    uint64_t v8 = v7 + 2400 * v5;
    uint64_t v9 = v8 + 1832;
    uint64_t v10 = *(char **)(v8 + 1832);
    if (!v10) {
      goto LABEL_26;
    }
    uint64_t v11 = *(char **)(v8 + 1840);
    uint64_t v12 = v10;
    if (v11 == v10) {
      goto LABEL_25;
    }
    uint64_t v13 = v11 - 121;
    do
    {
      uint64_t v15 = *(void **)(v13 + 97);
      if (v15)
      {
        *(void *)(v13 + 105) = v15;
        operator delete(v15);
      }
      if (*v13 < 0)
      {
        operator delete(*(void **)(v13 - 23));
        if ((*(v13 - 32) & 0x80000000) == 0)
        {
LABEL_15:
          if ((*(v13 - 56) & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((*(v13 - 32) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(void **)(v13 - 55));
      if ((*(v13 - 56) & 0x80000000) == 0)
      {
LABEL_16:
        if (*(v13 - 96) < 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
LABEL_21:
      operator delete(*(void **)(v13 - 79));
      if (*(v13 - 96) < 0)
      {
LABEL_22:
        operator delete(*(void **)(v13 - 119));
        if ((*(v13 - 128) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
LABEL_17:
      if ((*(v13 - 128) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_23:
      operator delete(*(void **)(v13 - 151));
LABEL_10:
      uint64_t v14 = v13 - 151;
      v13 -= 272;
    }
    while (v14 != v10);
    uint64_t v12 = *(char **)v9;
LABEL_25:
    *(void *)(v9 + 8) = v10;
    operator delete(v12);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
LABEL_26:
    *(_OWORD *)uint64_t v9 = v29;
    *(void *)(v9 + 16) = v30;
    if (++v5 == 0x2FC962FC962FC963 * ((uint64_t)(a2[134] - a2[133]) >> 5))
    {
      uint64_t v16 = a2[37];
      if (v16 != 0x7FFFFFFFFFFFFFFFLL) {
        *(void *)(*(void *)(v9 + 8) - 40) += v16;
      }
    }
LABEL_5:
    if (v5 != v6) {
      continue;
    }
    break;
  }
  uint64_t v17 = a2[133];
  if ((unint64_t)(0x2FC962FC962FC963 * ((a2[134] - v17) >> 5)) > 1)
  {
    BOOL v18 = *(long long **)(v17 + 4232);
    uint64_t v19 = (long long *)((char *)v18 + 152);
    uint64_t v20 = (uint64_t *)(v17 + 872);
    int v21 = (int *)(v17 + 160);
    unint64_t v22 = *(void *)(v17 + 1840);
    if (v22 >= *(void *)(v17 + 1848))
    {
      uint64_t v28 = sub_4AAB84((void **)(v17 + 1832), v18, (long long *)((char *)v18 + 152), v20, v21);
    }
    else
    {
      uint64_t v23 = *v20;
      int v24 = *v21;
      sub_4AA8E0(*(char **)(v17 + 1840), v18);
      *(_OWORD *)(v22 + 152) = *v19;
      long long v25 = v19[1];
      long long v26 = v19[2];
      long long v27 = v19[3];
      *(_OWORD *)(v22 + 216) = v19[4];
      *(_OWORD *)(v22 + 200) = v27;
      *(_OWORD *)(v22 + 184) = v26;
      *(_OWORD *)(v22 + 168) = v25;
      *(void *)(v22 + 232) = v23;
      *(_DWORD *)(v22 + 240) = v24;
      *(void *)(v22 + 256) = 0;
      *(void *)(v22 + 264) = 0;
      *(void *)(v22 + 248) = 0;
      uint64_t v28 = v22 + 272;
      *(void *)(v17 + 1840) = v22 + 272;
    }
    *(void *)(v17 + 1840) = v28;
  }
}

void sub_4A9060(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1840) = v1;
  _Unwind_Resume(a1);
}

void sub_4A9068(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  unint64_t v68 = v8;
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  sub_4A99DC(a1, a2, a3, v78);
  sub_4A9890(a1, a2, a3, (uint64_t)&v76);
  uint64_t v72 = a2;
  unint64_t v69 = a3;
  sub_4A9E54(a1, a2, a3, &__p);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (v77 != v76)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v57 = 0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3);
    uint64_t v64 = (unint64_t *)(v9 + 24);
    uint64_t v59 = (int *)(v10 + 160);
    uint64_t v67 = a4;
    do
    {
      uint64_t v63 = (long long *)&v76[88 * v14];
      uint64_t v58 = v14 + 1;
      if (v14 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v77 - v76) >> 3))) {
        uint64_t v17 = v64;
      }
      else {
        uint64_t v17 = (unint64_t *)v63 + 21;
      }
      uint64_t v18 = v78[0].i64[0];
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
      if (v13 >= v19)
      {
        unint64_t v15 = v13;
        unint64_t v16 = v12;
        goto LABEL_4;
      }
      unint64_t v20 = *v17;
      unint64_t v61 = v20;
      unint64_t v62 = (unint64_t *)&v76[88 * v14 + 80];
      while (2)
      {
        uint64_t v21 = v18 + 160 * v13;
        unint64_t v60 = v13;
        unint64_t v22 = (unint64_t *)(v21 + 312);
        unint64_t v66 = v13 + 1;
        if (v13 + 1 >= v19) {
          unint64_t v22 = v64;
        }
        unint64_t v23 = *v22;
        if (*v62 <= *(void *)(v21 + 152)) {
          unint64_t v24 = *(void *)(v21 + 152);
        }
        else {
          unint64_t v24 = *v62;
        }
        if (v23 >= v20) {
          unint64_t v25 = v20;
        }
        else {
          unint64_t v25 = *v22;
        }
        uint64_t v26 = sub_471074(v72, v24, 1, v25, 0, *(double *)&v11);
        uint64_t v73 = v26;
        unint64_t v27 = *(void *)(a4 + 8);
        unint64_t v65 = v23;
        if (v27 >= *(void *)(a4 + 16))
        {
          uint64_t v31 = sub_4AB1E4((void **)a4, (long long *)v21, v63, &v73, v59);
        }
        else
        {
          int v28 = *v59;
          sub_4AA8E0((char *)v27, (long long *)v21);
          *(_OWORD *)(v27 + 152) = *v63;
          long long v11 = v63[1];
          long long v29 = v63[2];
          long long v30 = v63[3];
          *(_OWORD *)(v27 + 216) = v63[4];
          *(_OWORD *)(v27 + 200) = v30;
          *(_OWORD *)(v27 + 184) = v29;
          *(_OWORD *)(v27 + 168) = v11;
          *(void *)(v27 + 232) = v26;
          *(_DWORD *)(v27 + 240) = v28;
          *(void *)(v27 + 256) = 0;
          *(void *)(v27 + 264) = 0;
          *(void *)(v27 + 248) = 0;
          uint64_t v31 = v27 + 272;
          *(void *)(a4 + 8) = v27 + 272;
        }
        *(void *)(a4 + 8) = v31;
        unint64_t v70 = v25;
        unint64_t v71 = v24;
        do
        {
          unint64_t v16 = v12;
          if (v12 >= (v75 - (unsigned char *)__p) >> 4) {
            break;
          }
          uint64_t v34 = (char *)__p + 16 * v12;
          unint64_t v36 = *((void *)v34 + 1);
          unsigned int v35 = (unint64_t *)(v34 + 8);
          unint64_t v33 = v36;
          if (v36 <= v24) {
            goto LABEL_24;
          }
          unint64_t v37 = *((void *)__p + 2 * v16);
          if (v37 >= v25) {
            goto LABEL_24;
          }
          uint64_t v38 = *(void *)(a4 + 8);
          if (v37 <= v24) {
            uint64_t v39 = v24;
          }
          else {
            uint64_t v39 = *((void *)__p + 2 * v16);
          }
          if (v33 >= v25) {
            uint64_t v40 = v25;
          }
          else {
            uint64_t v40 = v33;
          }
          uint64_t v41 = sub_4A5E10(v68, v69);
          uint64_t v43 = sub_471074(v72, *(void *)(v41 + 40), 1, v39, 0, v42);
          uint64_t v45 = sub_471074(v72, v39, 1, v40, 0, v44) + v43;
          __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 16);
          unint64_t v46 = *(void *)(v38 - 8);
          if ((unint64_t)v47 < v46)
          {
            *__darwin_ct_rune_t v47 = v43;
            v47[1] = v45;
            uint64_t v32 = v47 + 2;
            unint64_t v25 = v70;
            unint64_t v24 = v71;
          }
          else
          {
            __darwin_ct_rune_t v48 = *(uint64_t **)(v38 - 24);
            uint64_t v49 = ((char *)v47 - (char *)v48) >> 4;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v51 = v46 - (void)v48;
            if (v51 >> 3 > v50) {
              unint64_t v50 = v51 >> 3;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 60) {
                sub_188D718();
              }
              unint64_t v53 = v52;
              unsigned int v54 = (char *)operator new(16 * v52);
              unint64_t v52 = v53;
              unsigned int v55 = (uint64_t *)&v54[16 * v49];
              *unsigned int v55 = v43;
              v55[1] = v45;
              uint64_t v56 = (uint64_t)v55;
              if (v47 != v48)
              {
LABEL_44:
                unint64_t v25 = v70;
                unint64_t v24 = v71;
                do
                {
                  long long v11 = *((_OWORD *)v47 - 1);
                  *(_OWORD *)(v56 - 16) = v11;
                  v56 -= 16;
                  v47 -= 2;
                }
                while (v47 != v48);
                __darwin_ct_rune_t v47 = *(uint64_t **)(v38 - 24);
                uint64_t v32 = v55 + 2;
                *(void *)(v38 - 24) = v56;
                *(void *)(v38 - 16) = v55 + 2;
                *(void *)(v38 - 8) = &v54[16 * v52];
                if (!v47) {
                  goto LABEL_23;
                }
LABEL_50:
                operator delete(v47);
                goto LABEL_23;
              }
            }
            else
            {
              unsigned int v54 = 0;
              unsigned int v55 = (uint64_t *)(16 * v49);
              *unsigned int v55 = v43;
              v55[1] = v45;
              uint64_t v56 = 16 * v49;
              if (v47 != v48) {
                goto LABEL_44;
              }
            }
            unint64_t v25 = v70;
            unint64_t v24 = v71;
            uint64_t v32 = v55 + 2;
            *(void *)(v38 - 24) = v56;
            *(void *)(v38 - 16) = v55 + 2;
            *(void *)(v38 - 8) = &v54[16 * v52];
            if (v47) {
              goto LABEL_50;
            }
          }
LABEL_23:
          *(void *)(v38 - 16) = v32;
          unint64_t v33 = *v35;
          a4 = v67;
LABEL_24:
          unint64_t v12 = v16 + 1;
        }
        while (v33 <= v25);
        unint64_t v20 = v61;
        if (v61 > v65)
        {
          uint64_t v18 = v78[0].i64[0];
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v78[0].i64[1] - v78[0].i64[0]) >> 5);
          unint64_t v12 = v16;
          unint64_t v15 = v66;
          unint64_t v13 = v66;
          if (v66 >= v19) {
            goto LABEL_4;
          }
          continue;
        }
        break;
      }
      unint64_t v15 = v60;
      if (v61 == v65) {
        unint64_t v15 = v66;
      }
LABEL_4:
      unint64_t v12 = v16;
      unint64_t v13 = v15;
      uint64_t v14 = v58;
    }
    while (v58 != v57);
  }
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v78[0].i64[0])
  {
    sub_4AA6AC((uint64_t)v78, v78[0].i64[0]);
    operator delete((void *)v78[0].i64[0]);
  }
}

void sub_4A9540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  long long v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  sub_4A6814((uint64_t *)(v28 - 112));
  _Unwind_Resume(a1);
}

void sub_4A95B8(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  unint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_4A8DD4(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_4A9610(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1481))
  {
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "enabled");
    BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)a1 = v5;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_continue_gaps");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "max_angle_between_straight_segments");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "pedestrian_properties_buffer_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_slip_road_name_search_distance_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9AC0;
  strcpy((char *)__p[0], "enable_additional_vendor_intersection_internal_types");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  return a1;
}

void sub_4A9860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4A9890@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v8 = a2 + 133;
  uint64_t v9 = (void *)sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = sub_4A5E10(v8, a3 - 1);
  unint64_t v11 = *(void *)(v10 + 632);
  if (v11 != -1 && v11 >= v9[5])
  {
    *(void *)&v19[0] = v11 + 1;
    BOOL v14 = v9[3] > v11;
    unint64_t v13 = (uint64_t *)v19;
    if (!v14) {
      unint64_t v13 = v9 + 3;
    }
  }
  else
  {
    unint64_t v13 = v9 + 3;
  }
  uint64_t v24 = *v13;
  uint64_t v15 = v24;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_4A6050((char **)a4, (_OWORD *)(v10 + 568), v9 + 5);
  if (v15 != v9[3])
  {
    uint64_t result = (char *)sub_471074(a2, v9[5], 1, v15, 0, v17);
    if (v9[109] - (void)result > *(void *)(a1 + 16))
    {
      uint64_t v20 = -1;
      *(void *)&long long v18 = -1;
      *((void *)&v18 + 1) = -1;
      v19[1] = v18;
      v19[2] = v18;
      v19[0] = v18;
      int v21 = 0;
      uint64_t v22 = -1;
      int v23 = 0;
      return sub_4A6050((char **)a4, v19, &v24);
    }
  }
  return result;
}

void sub_4A99B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4A99DC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t result = sub_4A5E10(a2 + 133, a3);
  if (a2[148] == a2[149]) {
    BOOL v8 = (void *)(a1 + 48);
  }
  else {
    BOOL v8 = a2 + 148;
  }
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  a4->i64[0] = 0;
  unint64_t v9 = *(void *)(result + 40);
  if (v9 < *(void *)(result + 24))
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = v11;
      unint64_t v38 = v9;
      unint64_t v13 = *(int **)(sub_470B40(a2, v9) + 8);
      BOOL v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 0x2Fu)
      {
        uint64_t v15 = v14[23];
        if (v15)
        {
          unsigned int v16 = *((unsigned __int8 *)v13 + v15);
          BOOL v17 = v16 > 0x2A;
          uint64_t v18 = (1 << v16) & 0x50426810004;
          if (!v17 && v18 != 0)
          {
            if (sub_470ADC(a2) > v9)
            {
              uint64_t v20 = 0;
              while (v20 <= *(void *)(a1 + 24))
              {
                int v21 = *(int **)(sub_470B40(a2, v9) + 8);
                int v23 = (unsigned __int16 *)((char *)v21 - *v21);
                if (*v23 < 0x2Fu) {
                  goto LABEL_26;
                }
                uint64_t v24 = v23[23];
                if (!v24) {
                  goto LABEL_26;
                }
                unsigned int v25 = *((unsigned __int8 *)v21 + v24);
                BOOL v17 = v25 > 0x2A;
                uint64_t v26 = (1 << v25) & 0x50426810004;
                if (v17 || v26 == 0) {
                  goto LABEL_26;
                }
                uint64_t v28 = sub_470F2C(a2, v9++, v22);
                v20 += v28;
                if (v9 >= sub_470ADC(a2)) {
                  break;
                }
              }
            }
            --v9;
          }
        }
      }
      do
LABEL_26:
        unint64_t v11 = v12++;
      while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[1] - *v8) >> 5) && *(void *)(sub_4A65E4(v8, v12) + 152) <= v9);
      uint64_t v29 = sub_4A65E4(v8, v11);
      uint64_t result = sub_470B40(a2, v9);
      if (a4->i64[0] != a4->i64[1])
      {
        uint64_t v30 = result;
        if (!sub_6F2FD8(v29) || (uint64_t result = sub_6F2FD8(a4->i64[1] - 160), result))
        {
          uint64_t result = sub_4A9D78(a1, v30);
          if (result)
          {
            if (v38 == v9) {
              goto LABEL_8;
            }
          }
        }
      }
      unint64_t v31 = a4->u64[1];
      if (a4->i64[0] == v31) {
        goto LABEL_49;
      }
      uint64_t v32 = *(unsigned __int8 *)(v31 - 137);
      if ((v32 & 0x80u) == 0) {
        uint64_t v33 = *(unsigned __int8 *)(v31 - 137);
      }
      else {
        uint64_t v33 = *(void *)(v31 - 152);
      }
      uint64_t v34 = *(unsigned __int8 *)(v29 + 23);
      int v35 = (char)v34;
      if ((v34 & 0x80u) != 0) {
        uint64_t v34 = *(void *)(v29 + 8);
      }
      if (v33 != v34) {
        goto LABEL_49;
      }
      unint64_t v36 = (const void **)(v31 - 160);
      if (v35 >= 0) {
        unint64_t v37 = (unsigned __int8 *)v29;
      }
      else {
        unint64_t v37 = *(unsigned __int8 **)v29;
      }
      if ((v32 & 0x80) != 0)
      {
        uint64_t result = memcmp(*v36, v37, *(void *)(v31 - 152));
        if (result) {
          goto LABEL_49;
        }
      }
      else if (*(unsigned char *)(v31 - 137))
      {
        while (*(unsigned __int8 *)v36 == *v37)
        {
          unint64_t v36 = (const void **)((char *)v36 + 1);
          ++v37;
          if (!--v32) {
            goto LABEL_8;
          }
        }
LABEL_49:
        if (v31 >= a4[1].i64[0])
        {
          uint64_t result = sub_4AAEB4(a4, (long long *)v29, &v38);
        }
        else
        {
          sub_4AA8E0((char *)v31, (long long *)v29);
          *(void *)(v31 + 152) = v38;
          uint64_t result = v31 + 160;
          a4->i64[1] = v31 + 160;
        }
        a4->i64[1] = result;
      }
LABEL_8:
      ++v9;
    }
    while (v9 < *(void *)(v10 + 24));
  }
  return result;
}

void sub_4A9CE8(_Unwind_Exception *a1)
{
  v1[1] = v2;
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D00(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D14(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D28(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D3C(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D50(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

void sub_4A9D64(_Unwind_Exception *a1)
{
  sub_4A6814(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4A9D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int **)(a2 + 16);
  if (!v2
    || (uint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2), *v3 < 0x11u)
    || (uint64_t v4 = v3[8]) == 0
    || (*(_WORD *)((unsigned char *)v2 + v4) & 4) == 0)
  {
    BOOL v5 = *(int **)(a2 + 8);
    BOOL v6 = (unsigned __int16 *)((char *)v5 - *v5);
    unsigned int v7 = *v6;
    if (v7 >= 0x63 && v6[49]) {
      unsigned __int8 v8 = *((unsigned char *)v5 + v6[49]);
    }
    else {
      unsigned __int8 v8 = 0;
    }
    unsigned int v9 = *(_DWORD *)(a2 + 4);
    if ((v9 & 0x40000000) != 0) {
      int v10 = 2;
    }
    else {
      int v10 = v9 >> 31;
    }
    if (v10 == 1)
    {
      if (!*(unsigned char *)(a2 + 46))
      {
LABEL_15:
        if (v7 < 0x6B) {
          goto LABEL_22;
        }
        unsigned int v11 = v6[53];
        if (!v11) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      if (v10) {
        goto LABEL_22;
      }
      if (*(unsigned char *)(a2 + 46)) {
        goto LABEL_15;
      }
    }
    if (v7 < 0x69) {
      goto LABEL_22;
    }
    unsigned int v11 = v6[52];
    if (!v11) {
      goto LABEL_22;
    }
LABEL_21:
    unsigned __int8 v12 = *((unsigned char *)v5 + v11);
    if (v12 != 127) {
      return sub_3E737C(v12, *(unsigned __int8 *)(a1 + 32) != 0);
    }
LABEL_22:
    unsigned __int8 v12 = v8;
    return sub_3E737C(v12, *(unsigned __int8 *)(a1 + 32) != 0);
  }
  return 1;
}

void sub_4A9E54(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  if (*(unsigned char *)(a1 + 1))
  {
    uint64_t v6 = a1;
    sub_4AA484(a1, a2, a3, &v91);
    uint64_t v90 = -1;
    v4[1] = 0;
    void v4[2] = 0;
    *uint64_t v4 = 0;
    unsigned int v7 = v91;
    int v79 = v92;
    if (v91 != v92)
    {
      while (1)
      {
        uint64_t v8 = *v7;
        unint64_t v9 = v7[1];
        BOOL v80 = v7 + 1;
        uint64_t v83 = v7;
        if (v9 >= sub_470ADC(a2))
        {
          if (!v8) {
            goto LABEL_4;
          }
          uint64_t v10 = -1;
        }
        else
        {
          uint64_t v10 = *v80;
          if (!v8)
          {
            if (v10 == -1) {
              goto LABEL_4;
            }
            uint64_t v13 = 0;
            uint64_t v82 = 0;
            int v12 = 0;
            int v88 = 0;
            int v81 = 0;
LABEL_14:
            uint64_t v14 = sub_470B40(a2, v10);
            uint64_t v86 = *(void *)(v14 + 8);
            uint64_t v87 = *(int **)(v14 + 16);
            LODWORD(v85) = *(_DWORD *)(v14 + 40);
            HIDWORD(v85) = *(_DWORD *)v14;
            int v84 = *(unsigned __int8 *)(v14 + 46);
            goto LABEL_15;
          }
        }
        uint64_t v11 = sub_470B40(a2, v8 - 1);
        int v12 = *(_DWORD *)v11;
        uint64_t v13 = *(void *)(v11 + 8);
        uint64_t v82 = *(int **)(v11 + 16);
        int v81 = *(unsigned __int8 *)(v11 + 46);
        int v88 = *(_DWORD *)(v11 + 40);
        if (v10 != -1) {
          goto LABEL_14;
        }
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        int v84 = 0;
        uint64_t v85 = 0;
LABEL_15:
        uint64_t v90 = -1;
        uint64_t v16 = *v7;
        unint64_t v15 = v7[1];
        if (*v7 <= v15) {
          uint64_t v17 = v7[1];
        }
        else {
          uint64_t v17 = *v7;
        }
        if (*v7 < v15)
        {
          if (v12) {
            BOOL v18 = v88 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          BOOL v19 = v18 || v13 == 0;
          uint64_t v20 = v82;
          int v22 = !v19 && v82 != 0;
          int v89 = v22;
          int v23 = v81;
          while (2)
          {
            uint64_t v25 = sub_470B40(a2, v16);
            if (*(_DWORD *)v25) {
              int v26 = v89;
            }
            else {
              int v26 = 0;
            }
            int v27 = *(_DWORD *)(v25 + 40);
            uint64_t v29 = *(void *)(v25 + 8);
            uint64_t v28 = *(int **)(v25 + 16);
            double v30 = 0.0;
            if (v26 != 1 || v27 == 0 || v29 == 0 || v28 == 0) {
              goto LABEL_69;
            }
            uint64_t v34 = (unsigned __int16 *)((char *)v20 - *v20);
            unsigned int v35 = *v34;
            if (v23)
            {
              if (v35 < 5)
              {
                LOWORD(v36) = 0;
                unint64_t v37 = (unsigned __int16 *)((char *)v28 - *v28);
                unsigned int v38 = *v37;
                if (!*(unsigned char *)(v25 + 46)) {
                  goto LABEL_58;
                }
              }
              else
              {
                unsigned int v36 = v34[2];
                if (!v36) {
                  goto LABEL_51;
                }
LABEL_57:
                LOWORD(v36) = *(_WORD *)((char *)v20 + v36);
                unint64_t v37 = (unsigned __int16 *)((char *)v28 - *v28);
                unsigned int v38 = *v37;
                if (!*(unsigned char *)(v25 + 46)) {
                  goto LABEL_58;
                }
              }
LABEL_52:
              if (v38 >= 9)
              {
                unsigned int v39 = v37[4];
                if (!v39)
                {
LABEL_62:
                  unsigned __int16 v40 = v36 + 18000;
                  unsigned __int16 v41 = v36 - 18000;
                  if ((unsigned __int16)(v40 >> 5) < 0x465u) {
                    unsigned __int16 v41 = v40;
                  }
                  int v42 = v39 - v41;
                  if (v42 > 18000) {
                    v42 -= 36000;
                  }
                  if (v42 < -17999) {
                    v42 += 36000;
                  }
                  double v30 = fabs((double)v42 / 100.0);
LABEL_69:
                  double v43 = *(double *)(v6 + 8);
                  if (v30 > v43) {
                    goto LABEL_32;
                  }
                  double v44 = 0.0;
                  if (*(_DWORD *)v25) {
                    BOOL v45 = v27 == 0;
                  }
                  else {
                    BOOL v45 = 1;
                  }
                  if (v45 || v29 == 0 || v28 == 0 || HIDWORD(v85) == 0 || v85 == 0 || v86 == 0 || v87 == 0) {
                    goto LABEL_118;
                  }
                  unint64_t v52 = (unsigned __int16 *)((char *)v28 - *v28);
                  unsigned int v53 = *v52;
                  if (*(unsigned char *)(v25 + 46))
                  {
                    if (v53 >= 5)
                    {
                      unsigned int v54 = v52[2];
                      if (v54) {
                        goto LABEL_102;
                      }
                    }
                  }
                  else if (v53 >= 9)
                  {
                    unsigned int v54 = v52[4];
                    if (v54)
                    {
LABEL_102:
                      __int16 v55 = *(_WORD *)((char *)v28 + v54);
                      uint64_t v56 = (unsigned __int16 *)((char *)v87 - *v87);
                      unsigned int v57 = *v56;
                      if (!v84) {
                        goto LABEL_103;
                      }
                      goto LABEL_107;
                    }
                  }
                  __int16 v55 = 0;
                  uint64_t v56 = (unsigned __int16 *)((char *)v87 - *v87);
                  unsigned int v57 = *v56;
                  if (!v84)
                  {
LABEL_103:
                    if (v57 < 5) {
                      goto LABEL_110;
                    }
                    unsigned int v58 = v56[2];
                    if (!v58) {
                      goto LABEL_111;
                    }
LABEL_109:
                    unsigned int v58 = *(unsigned __int16 *)((char *)v87 + v58);
                    goto LABEL_111;
                  }
LABEL_107:
                  if (v57 < 9)
                  {
LABEL_110:
                    unsigned int v58 = 0;
                    goto LABEL_111;
                  }
                  unsigned int v58 = v56[4];
                  if (v58) {
                    goto LABEL_109;
                  }
LABEL_111:
                  unsigned __int16 v59 = v55 + 18000;
                  unsigned __int16 v60 = v55 - 18000;
                  if ((unsigned __int16)(v59 >> 5) < 0x465u) {
                    unsigned __int16 v60 = v59;
                  }
                  int v61 = v58 - v60;
                  if (v61 > 18000) {
                    v61 -= 36000;
                  }
                  if (v61 < -17999) {
                    v61 += 36000;
                  }
                  double v44 = fabs((double)v61 / 100.0);
LABEL_118:
                  if (v44 > v43)
                  {
LABEL_32:
                    uint64_t v24 = v90;
                    if (v90 == -1)
                    {
                      uint64_t v90 = v16;
                      uint64_t v24 = v16;
                    }
                    goto LABEL_34;
                  }
                  uint64_t v62 = v90;
                  if (v90 != -1)
                  {
                    uint64_t v63 = v6;
                    unint64_t v65 = (uint64_t *)v4[1];
                    unint64_t v64 = v4[2];
                    if ((unint64_t)v65 < v64)
                    {
                      *unint64_t v65 = v90;
                      v65[1] = v16;
                      unint64_t v66 = v65 + 2;
                      uint64_t v6 = v63;
LABEL_136:
                      v4[1] = v66;
                      uint64_t v24 = -1;
                      uint64_t v90 = -1;
                      goto LABEL_34;
                    }
                    uint64_t v67 = v4;
                    unint64_t v68 = (uint64_t *)*v4;
                    uint64_t v69 = ((uint64_t)v65 - *v4) >> 4;
                    unint64_t v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 60) {
                      sub_2E00();
                    }
                    uint64_t v71 = v64 - (void)v68;
                    if (v71 >> 3 > v70) {
                      unint64_t v70 = v71 >> 3;
                    }
                    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v72 = v70;
                    }
                    if (v72 >> 60) {
                      sub_188D718();
                    }
                    uint64_t v73 = (char *)operator new(16 * v72);
                    double v74 = (uint64_t *)&v73[16 * v69];
                    *double v74 = v62;
                    v74[1] = v16;
                    if (v65 == v68)
                    {
                      uint64_t v78 = &v73[16 * v72];
                      unint64_t v66 = v74 + 2;
                      uint64_t v4 = v67;
                      *uint64_t v67 = v74;
                      v67[1] = v74 + 2;
                      v67[2] = v78;
                      if (v68) {
                        goto LABEL_134;
                      }
                    }
                    else
                    {
                      uint64_t v75 = &v73[16 * v69];
                      do
                      {
                        int v76 = v75 - 16;
                        *((_OWORD *)v75 - 1) = *((_OWORD *)v65 - 1);
                        v65 -= 2;
                        v75 -= 16;
                      }
                      while (v65 != v68);
                      uint64_t v77 = &v73[16 * v72];
                      unint64_t v66 = v74 + 2;
                      uint64_t v4 = v67;
                      *uint64_t v67 = v76;
                      v67[1] = v74 + 2;
                      v67[2] = v77;
                      if (v68) {
LABEL_134:
                      }
                        operator delete(v68);
                    }
                    uint64_t v6 = v63;
                    uint64_t v20 = v82;
                    int v23 = v81;
                    goto LABEL_136;
                  }
                  uint64_t v24 = -1;
LABEL_34:
                  if (++v16 == v17)
                  {
                    if (v24 != -1) {
                      sub_2EA258((uint64_t)v4, &v90, v80);
                    }
                    goto LABEL_4;
                  }
                  continue;
                }
LABEL_60:
                unsigned int v39 = *(unsigned __int16 *)((char *)v28 + v39);
                goto LABEL_62;
              }
            }
            else
            {
              if (v35 < 9)
              {
                LOWORD(v36) = 0;
                unint64_t v37 = (unsigned __int16 *)((char *)v28 - *v28);
                unsigned int v38 = *v37;
                if (!*(unsigned char *)(v25 + 46)) {
                  goto LABEL_58;
                }
                goto LABEL_52;
              }
              unsigned int v36 = v34[4];
              if (v36) {
                goto LABEL_57;
              }
LABEL_51:
              unint64_t v37 = (unsigned __int16 *)((char *)v28 - *v28);
              unsigned int v38 = *v37;
              if (*(unsigned char *)(v25 + 46)) {
                goto LABEL_52;
              }
LABEL_58:
              if (v38 >= 5)
              {
                unsigned int v39 = v37[2];
                if (!v39) {
                  goto LABEL_62;
                }
                goto LABEL_60;
              }
            }
            break;
          }
          unsigned int v39 = 0;
          goto LABEL_62;
        }
LABEL_4:
        unsigned int v7 = v83 + 2;
        if (v83 + 2 == v79)
        {
          unsigned int v7 = v91;
          break;
        }
      }
    }
    if (v7)
    {
      uint64_t v92 = v7;
      operator delete(v7);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_4AA42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  int v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
    uint64_t v24 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void *sub_4AA484@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v15 = -1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t result = (void *)sub_4A5E10(a2 + 133, a3);
  unint64_t v9 = result + 3;
  unint64_t v8 = result[3];
  unint64_t v10 = result[5];
  if (v10 <= v8) {
    uint64_t v11 = result[3];
  }
  else {
    uint64_t v11 = result[5];
  }
  if (v10 < v8)
  {
    while (1)
    {
      unint64_t v14 = v10;
      uint64_t v12 = sub_470B40(a2, v10);
      uint64_t result = (void *)sub_4A9D78(a1, v12);
      uint64_t v13 = v15;
      if (result)
      {
        if (v15 != -1) {
          goto LABEL_7;
        }
        uint64_t v13 = v14;
      }
      else
      {
        if (v15 == -1) {
          goto LABEL_7;
        }
        uint64_t result = sub_2EA258((uint64_t)a4, &v15, &v14);
        uint64_t v13 = -1;
      }
      uint64_t v15 = v13;
LABEL_7:
      if (v11 == ++v10)
      {
        if (v13 != -1) {
          return sub_2EA258((uint64_t)a4, &v15, v9);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_4AA574(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4AA598(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_4AA5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 248);
  if (v3)
  {
    *(void *)(a2 + 256) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 151) < 0)
  {
    operator delete(*(void **)(a2 + 128));
    if ((*(char *)(a2 + 119) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a2 + 95) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a2 + 119) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a2 + 96));
  if ((*(char *)(a2 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*(void **)(a2 + 32));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 55) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  uint64_t v4 = *(void **)a2;

  operator delete(v4);
}

void sub_4AA6AC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 160)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 65) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if ((*(char *)(i - 65) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 105) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 88));
    if ((*(char *)(i - 105) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 137) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 128));
    if (*(char *)(i - 137) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 160));
  }
  *(void *)(a1 + 8) = a2;
}

char **sub_4AA76C(char **a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t v5 = 160 * a3;
    uint64_t v6 = (char *)operator new(160 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_4AA8E0(&v6[v7], (long long *)(a2 + v7));
      *(void *)&v6[v7 + 152] = *(void *)(a2 + v7 + 152);
      v7 += 160;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_4AA840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4AA854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_4AAACC(v10, v12, v12, v11, v11);
  *(void *)(v9 + 8) = v11;
  sub_4AA888(&a9);
  _Unwind_Resume(a1);
}

void ***sub_4AA888(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_4AA6AC((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

char *sub_4AA8E0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    *((void *)__dst + 3) = *((void *)a2 + 3);
    uint64_t v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    *((void *)__dst + 3) = *((void *)a2 + 3);
    uint64_t v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = a2[2];
      *((void *)v5 + 2) = *((void *)a2 + 6);
      *(_OWORD *)uint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 4), *((void *)a2 + 5));
LABEL_6:
  *((void *)__dst + 7) = *((void *)a2 + 7);
  *((_DWORD *)__dst + 16) = *((_DWORD *)a2 + 16);
  if (*((char *)a2 + 95) < 0)
  {
    sub_4200(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  unint64_t v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_4200(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *(_OWORD *)unint64_t v8 = v9;
  }
  *((_DWORD *)__dst + 30) = *((_DWORD *)a2 + 30);
  uint64_t v10 = __dst + 128;
  if (*((char *)a2 + 151) < 0)
  {
    sub_4200(v10, *((void **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v11 = a2[8];
    *((void *)__dst + 18) = *((void *)a2 + 18);
    *(_OWORD *)uint64_t v10 = v11;
  }
  return __dst;
}

void sub_4AAA40(_Unwind_Exception *a1)
{
  sub_4AA598(v3);
  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_4AAACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 160)
    {
      if (*(char *)(i - 9) < 0)
      {
        operator delete(*(void **)(i - 32));
        if ((*(char *)(i - 41) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*(char *)(i - 65) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*(void **)(i - 64));
      if ((*(char *)(i - 65) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(i - 105) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 105) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(i - 137) < 0) {
          goto LABEL_14;
        }
        continue;
      }
LABEL_13:
      operator delete(*(void **)(i - 128));
      if (*(char *)(i - 137) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 160));
    }
  }
}

uint64_t sub_4AAB84(void **a1, long long *a2, long long *a3, uint64_t *a4, int *a5)
{
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x78787878787878) {
    unint64_t v12 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v39 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(272 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  unsigned int v38 = &v13[272 * v12];
  uint64_t v14 = *a4;
  int v15 = *a5;
  sub_4AA8E0(&v13[272 * v6], a2);
  long long v16 = *a3;
  uint64_t v17 = &v13[272 * v6];
  *(_OWORD *)(v17 + 168) = a3[1];
  long long v18 = a3[3];
  *(_OWORD *)(v17 + 184) = a3[2];
  *(_OWORD *)(v17 + 200) = v18;
  *(_OWORD *)(v17 + 216) = a3[4];
  *(_OWORD *)(v17 + 152) = v16;
  *((void *)v17 + 29) = v14;
  *((_DWORD *)v17 + 60) = v15;
  *((void *)v17 + 32) = 0;
  *((void *)v17 + 33) = 0;
  *((void *)v17 + 31) = 0;
  BOOL v19 = v17 + 272;
  uint64_t v20 = (char *)*a1;
  uint64_t v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = &v13[272 * v6];
    a1[1] = v19;
    a1[2] = v38;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      int v23 = &v17[v22];
      uint64_t v24 = &v21[v22];
      uint64_t v25 = (uint64_t)&v21[v22 - 272];
      long long v26 = *(_OWORD *)v25;
      *((void *)v23 - 32) = *(void *)&v21[v22 - 256];
      *(_OWORD *)&v17[v22 - 272] = v26;
      *((void *)v24 - 32) = 0;
      uint64_t v27 = *(void *)&v21[v22 - 248];
      *(void *)uint64_t v25 = 0;
      *(void *)(v25 + 8) = 0;
      *((void *)v23 - 31) = v27;
      long long v28 = *(_OWORD *)&v21[v22 - 240];
      *((void *)v23 - 28) = *(void *)&v21[v22 - 224];
      *((_OWORD *)v23 - 15) = v28;
      *((void *)v24 - 29) = 0;
      *((void *)v24 - 28) = 0;
      *((void *)v24 - 30) = 0;
      *((void *)v23 - 27) = *(void *)&v21[v22 - 216];
      *((_DWORD *)v23 - 52) = *(_DWORD *)&v21[v22 - 208];
      long long v29 = *(_OWORD *)&v21[v22 - 200];
      *((void *)v23 - 23) = *(void *)&v21[v22 - 184];
      *(_OWORD *)(v23 - 200) = v29;
      *((void *)v24 - 24) = 0;
      *((void *)v24 - 23) = 0;
      *((void *)v24 - 25) = 0;
      long long v30 = *(_OWORD *)&v21[v22 - 176];
      *((void *)v23 - 20) = *(void *)&v21[v22 - 160];
      *((_OWORD *)v23 - 11) = v30;
      *((void *)v24 - 21) = 0;
      *((void *)v24 - 20) = 0;
      *((void *)v24 - 22) = 0;
      *((_DWORD *)v23 - 38) = *(_DWORD *)&v21[v22 - 152];
      long long v31 = *(_OWORD *)&v21[v22 - 144];
      *((void *)v23 - 16) = *(void *)&v21[v22 - 128];
      *((_OWORD *)v23 - 9) = v31;
      *((void *)v24 - 17) = 0;
      *((void *)v24 - 16) = 0;
      *((void *)v24 - 18) = 0;
      long long v32 = *(_OWORD *)&v21[v22 - 120];
      *(_OWORD *)(v23 - 104) = *(_OWORD *)&v21[v22 - 104];
      *(_OWORD *)(v23 - 120) = v32;
      long long v33 = *(_OWORD *)&v21[v22 - 88];
      long long v34 = *(_OWORD *)&v21[v22 - 72];
      long long v35 = *(_OWORD *)&v21[v22 - 56];
      *(_OWORD *)(v23 - 44) = *(_OWORD *)&v21[v22 - 44];
      *(_OWORD *)(v23 - 56) = v35;
      *(_OWORD *)(v23 - 72) = v34;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      *(_OWORD *)(v23 - 88) = v33;
      *((void *)v23 - 3) = 0;
      *(_OWORD *)(v23 - 24) = *(_OWORD *)&v21[v22 - 24];
      *((void *)v23 - 1) = *(void *)&v21[v22 - 8];
      *((void *)v24 - 3) = 0;
      *((void *)v24 - 2) = 0;
      *((void *)v24 - 1) = 0;
      v22 -= 272;
    }
    while (&v21[v22] != v20);
    unsigned int v36 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = &v17[v22];
    a1[1] = v19;
    a1[2] = v38;
    if (v21 != v36)
    {
      do
      {
        v21 -= 272;
        sub_4AA5F4(v39, (uint64_t)v21);
      }
      while (v21 != v36);
      uint64_t v21 = v36;
    }
  }
  if (v21) {
    operator delete(v21);
  }
  return (uint64_t)&v13[272 * v6 + 272];
}

void sub_4AAE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AAE5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4AAE5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 272;
    sub_4AA5F4(v4, i - 272);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_4AAEB4(int64x2_t *a1, long long *a2, void *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v8 = 0x199999999999999;
  }
  else {
    unint64_t v8 = v5;
  }
  long long v28 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x199999999999999) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(160 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  __p = v9;
  v26.i64[0] = (uint64_t)&v9[160 * v4];
  v26.i64[1] = v26.i64[0];
  uint64_t v27 = &v9[160 * v8];
  sub_4AA8E0((char *)v26.i64[0], a2);
  *(void *)(v26.i64[0] + 152) = *a3;
  uint64_t v10 = v26.i64[0];
  uint64_t v11 = v26.i64[1] + 160;
  v26.i64[1] += 160;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v22 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v12 + v14;
      uint64_t v16 = v10 + v14;
      long long v17 = *(_OWORD *)(v12 + v14 - 160);
      *(void *)(v16 - 144) = *(void *)(v12 + v14 - 144);
      *(_OWORD *)(v16 - 160) = v17;
      *(void *)(v15 - 152) = 0;
      *(void *)(v15 - 144) = 0;
      *(void *)(v15 - 160) = 0;
      *(void *)(v16 - 136) = *(void *)(v12 + v14 - 136);
      long long v18 = *(_OWORD *)(v12 + v14 - 128);
      *(void *)(v16 - 112) = *(void *)(v12 + v14 - 112);
      *(_OWORD *)(v16 - 128) = v18;
      *(void *)(v15 - 120) = 0;
      *(void *)(v15 - 112) = 0;
      *(void *)(v15 - 128) = 0;
      *(void *)(v16 - 104) = *(void *)(v12 + v14 - 104);
      *(_DWORD *)(v16 - 96) = *(_DWORD *)(v12 + v14 - 96);
      long long v19 = *(_OWORD *)(v12 + v14 - 88);
      *(void *)(v16 - 72) = *(void *)(v12 + v14 - 72);
      *(_OWORD *)(v16 - 88) = v19;
      *(void *)(v15 - 80) = 0;
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 88) = 0;
      long long v20 = *(_OWORD *)(v12 + v14 - 64);
      *(void *)(v16 - 48) = *(void *)(v12 + v14 - 48);
      *(_OWORD *)(v16 - 64) = v20;
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 64) = 0;
      *(_DWORD *)(v16 - 40) = *(_DWORD *)(v12 + v14 - 40);
      long long v21 = *(_OWORD *)(v12 + v14 - 32);
      *(void *)(v16 - 16) = *(void *)(v12 + v14 - 16);
      *(_OWORD *)(v16 - 32) = v21;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      *(void *)(v16 - 8) = *(void *)(v12 + v14 - 8);
      v14 -= 160;
    }
    while (v12 + v14 != v13);
    int64x2_t v22 = *a1;
    uint64_t v11 = v26.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v26 = v22;
  int v23 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v27;
  uint64_t v27 = v23;
  __p = (void *)v22.i64[0];
  sub_4AB11C((uint64_t)&__p, v22.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_4AB0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AB0E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4AB0E4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4AB11C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 65) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if ((*(char *)(i - 65) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 105) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 88));
    if ((*(char *)(i - 105) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 137) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 128));
    if (*(char *)(i - 137) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 160));
  }
}

uint64_t sub_4AB1E4(void **a1, long long *a2, long long *a3, uint64_t *a4, int *a5)
{
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x78787878787878) {
    unint64_t v12 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v39 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(272 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  unsigned int v38 = &v13[272 * v12];
  uint64_t v14 = *a4;
  int v15 = *a5;
  sub_4AA8E0(&v13[272 * v6], a2);
  long long v16 = *a3;
  long long v17 = &v13[272 * v6];
  *(_OWORD *)(v17 + 168) = a3[1];
  long long v18 = a3[3];
  *(_OWORD *)(v17 + 184) = a3[2];
  *(_OWORD *)(v17 + 200) = v18;
  *(_OWORD *)(v17 + 216) = a3[4];
  *(_OWORD *)(v17 + 152) = v16;
  *((void *)v17 + 29) = v14;
  *((_DWORD *)v17 + 60) = v15;
  *((void *)v17 + 32) = 0;
  *((void *)v17 + 33) = 0;
  *((void *)v17 + 31) = 0;
  long long v19 = v17 + 272;
  long long v20 = (char *)*a1;
  long long v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = &v13[272 * v6];
    a1[1] = v19;
    a1[2] = v38;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      int v23 = &v17[v22];
      uint64_t v24 = &v21[v22];
      uint64_t v25 = (uint64_t)&v21[v22 - 272];
      long long v26 = *(_OWORD *)v25;
      *((void *)v23 - 32) = *(void *)&v21[v22 - 256];
      *(_OWORD *)&v17[v22 - 272] = v26;
      *((void *)v24 - 32) = 0;
      uint64_t v27 = *(void *)&v21[v22 - 248];
      *(void *)uint64_t v25 = 0;
      *(void *)(v25 + 8) = 0;
      *((void *)v23 - 31) = v27;
      long long v28 = *(_OWORD *)&v21[v22 - 240];
      *((void *)v23 - 28) = *(void *)&v21[v22 - 224];
      *((_OWORD *)v23 - 15) = v28;
      *((void *)v24 - 29) = 0;
      *((void *)v24 - 28) = 0;
      *((void *)v24 - 30) = 0;
      *((void *)v23 - 27) = *(void *)&v21[v22 - 216];
      *((_DWORD *)v23 - 52) = *(_DWORD *)&v21[v22 - 208];
      long long v29 = *(_OWORD *)&v21[v22 - 200];
      *((void *)v23 - 23) = *(void *)&v21[v22 - 184];
      *(_OWORD *)(v23 - 200) = v29;
      *((void *)v24 - 24) = 0;
      *((void *)v24 - 23) = 0;
      *((void *)v24 - 25) = 0;
      long long v30 = *(_OWORD *)&v21[v22 - 176];
      *((void *)v23 - 20) = *(void *)&v21[v22 - 160];
      *((_OWORD *)v23 - 11) = v30;
      *((void *)v24 - 21) = 0;
      *((void *)v24 - 20) = 0;
      *((void *)v24 - 22) = 0;
      *((_DWORD *)v23 - 38) = *(_DWORD *)&v21[v22 - 152];
      long long v31 = *(_OWORD *)&v21[v22 - 144];
      *((void *)v23 - 16) = *(void *)&v21[v22 - 128];
      *((_OWORD *)v23 - 9) = v31;
      *((void *)v24 - 17) = 0;
      *((void *)v24 - 16) = 0;
      *((void *)v24 - 18) = 0;
      long long v32 = *(_OWORD *)&v21[v22 - 120];
      *(_OWORD *)(v23 - 104) = *(_OWORD *)&v21[v22 - 104];
      *(_OWORD *)(v23 - 120) = v32;
      long long v33 = *(_OWORD *)&v21[v22 - 88];
      long long v34 = *(_OWORD *)&v21[v22 - 72];
      long long v35 = *(_OWORD *)&v21[v22 - 56];
      *(_OWORD *)(v23 - 44) = *(_OWORD *)&v21[v22 - 44];
      *(_OWORD *)(v23 - 56) = v35;
      *(_OWORD *)(v23 - 72) = v34;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      *(_OWORD *)(v23 - 88) = v33;
      *((void *)v23 - 3) = 0;
      *(_OWORD *)(v23 - 24) = *(_OWORD *)&v21[v22 - 24];
      *((void *)v23 - 1) = *(void *)&v21[v22 - 8];
      *((void *)v24 - 3) = 0;
      *((void *)v24 - 2) = 0;
      *((void *)v24 - 1) = 0;
      v22 -= 272;
    }
    while (&v21[v22] != v20);
    unsigned int v36 = (char *)*a1;
    long long v21 = (char *)a1[1];
    *a1 = &v17[v22];
    a1[1] = v19;
    a1[2] = v38;
    if (v21 != v36)
    {
      do
      {
        v21 -= 272;
        sub_4AA5F4(v39, (uint64_t)v21);
      }
      while (v21 != v36);
      long long v21 = v36;
    }
  }
  if (v21) {
    operator delete(v21);
  }
  return (uint64_t)&v13[272 * v6 + 272];
}

void sub_4AB4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AAE5C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_4AB4BC()
{
  byte_2558D2F = 1;
  word_2558D18 = 65;
  byte_2558D47 = 1;
  word_2558D30 = 65;
  byte_2558D5F = 8;
  strcpy((char *)&qword_2558D48, "any_mode");
  byte_2558D77 = 7;
  strcpy((char *)&dword_2558D60, "cycling");
  byte_2558D8F = 7;
  strcpy((char *)&dword_2558D78, "driving");
  byte_2558DA7 = 7;
  strcpy((char *)&dword_2558D90, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558DD8 = 0u;
  *(_OWORD *)&qword_2558DE8 = 0u;
  dword_2558DF8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558DD8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558DD8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558DD8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558DD8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2558DB0 = 0;
  qword_2558DB8 = 0;
  qword_2558DA8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558DA8 = (uint64_t)v0;
  qword_2558DB0 = (uint64_t)(v0 + 9);
  qword_2558DB8 = (uint64_t)(v0 + 9);
  qword_2558DC0 = 0;
  qword_2558DC8 = 0;
  unk_2558DD0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558DC8 = (uint64_t)(v1 + 9);
  unk_2558DD0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558DC0 = (uint64_t)v1;
  return result;
}

void sub_4AB778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558DE8) {
    sub_20A8D3C((void **)qword_2558DE8);
  }
  unint64_t v37 = (void *)xmmword_2558DD8;
  *(void *)&xmmword_2558DD8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_4AB818()
{
  unk_2558E17 = 16641;
  word_2558E00 = 65;
  byte_2558E2F = 1;
  byte_2558E19 = 0;
}

uint64_t *sub_4AB840(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  char v16 = 13;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ARInfoBuilder");
  unint64_t v12 = 0;
  char v13 = 0;
  char v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB2F0(v4, (uint64_t)__p);
  sub_4AC260((uint64_t)(a1 + 1), __p);
  int v5 = v18;
  if (v18)
  {
    do
    {
      char v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      int v5 = v10;
    }
    while (v10);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  char v7 = (void **)v12;
  if (v12)
  {
    int v8 = v13;
    long long v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      long long v9 = v12;
    }
    char v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_4AB98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4AB9C4(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8) && !sub_45FB38(a3))
  {
    long long v35 = 0;
    unint64_t v36 = sub_4ABD44((uint64_t *)a1, a3);
    int v37 = v6;
    long long v33 = 0;
    long long v34 = 0;
    int v8 = *(unsigned char **)(a2 + 288);
    char v7 = *(unsigned char **)(a2 + 296);
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (0x8E38E38E38E38E39 * (v9 >> 3) >= 0x38E38E38E38E38FLL) {
        sub_2E00();
      }
      char v10 = (char *)operator new(v9);
      int v11 = &v10[8 * (v9 >> 3)];
      long long v33 = v10;
      long long v35 = v11;
      memcpy(v10, v8, v9);
      long long v34 = v11;
    }
    sub_4ABEA0((char *)&v36, (uint64_t *)&v33, (uint64_t)&v31);
    if (*(unsigned char *)(a1 + 9))
    {
      unint64_t v12 = (__n128 *)v31;
      char v13 = v32;
      unint64_t v14 = (v32 - (unsigned char *)v31) >> 4;
      if (v32 - (unsigned char *)v31 < 2049)
      {
LABEL_11:
        long long v18 = 0;
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = (v32 - (unsigned char *)v31) >> 4;
        while (1)
        {
          char v16 = (long long *)operator new(16 * v15, &std::nothrow);
          if (v16) {
            break;
          }
          BOOL v17 = v15 > 1;
          v15 >>= 1;
          if (!v17) {
            goto LABEL_11;
          }
        }
        long long v18 = v16;
      }
      sub_4ADB90(v12, v13, (uint64_t)&__p, v14, v18, v15);
      if (v18) {
        operator delete(v18);
      }
    }
    if (*(unsigned char *)(a1 + 10))
    {
      long long v19 = (unint64_t *)v32;
      if (v31 == v32)
      {
        long long v19 = (unint64_t *)v31;
      }
      else
      {
        long long v20 = (char *)v31 + 16;
        while (*((void *)v20 - 1) <= *(void *)(a1 + 16))
        {
          BOOL v21 = v20 == v32;
          v20 += 16;
          if (v21) {
            goto LABEL_33;
          }
        }
        uint64_t v22 = v20 - 16;
        if (v20 - 16 != v32)
        {
          if (v20 != v32)
          {
            do
            {
              if (*((void *)v20 + 1) <= *(void *)(a1 + 16))
              {
                *(_OWORD *)uint64_t v22 = *(_OWORD *)v20;
                v22 += 16;
              }
              v20 += 16;
            }
            while (v20 != (char *)v19);
            long long v19 = (unint64_t *)v32;
          }
          if (v22 != (char *)v19)
          {
            long long v19 = (unint64_t *)v22;
            long long v32 = v22;
          }
        }
      }
    }
    else
    {
      long long v19 = (unint64_t *)v32;
    }
LABEL_33:
    __p = 0;
    long long v29 = 0;
    long long v30 = 0;
    int v23 = (unint64_t *)v31;
    uint64_t v24 = (char *)v19 - (unsigned char *)v31;
    if (v19 != v31)
    {
      if ((unint64_t)v24 >= 0x38E38E38E38E38E1) {
        sub_2E00();
      }
      uint64_t v25 = v24 >> 4;
      long long v26 = (char *)operator new(72 * (v24 >> 4));
      __p = v26;
      long long v29 = v26;
      long long v30 = &v26[72 * v25];
      do
      {
        long long v26 = (char *)(sub_4AD830((unint64_t *)&__p, (uint64_t)v26, *v23) + 72);
        v23 += 2;
      }
      while (v23 != v19);
    }
    uint64_t v27 = (void **)(*(void *)(nullsub_1(a3) + 8) - 1072);
    if (v27 != &__p) {
      sub_4AD448(v27, (char *)__p, v29, 0x8E38E38E38E38E39 * ((v29 - (unsigned char *)__p) >> 3));
    }
    if (__p)
    {
      long long v29 = (char *)__p;
      operator delete(__p);
    }
    if (v31)
    {
      long long v32 = (char *)v31;
      operator delete(v31);
    }
    if (v33) {
      operator delete(v33);
    }
  }
}

void sub_4ABCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_4ABD44(uint64_t *a1, void *a2)
{
  if (sub_45FB38(a2) || (char v4 = (void *)(*(void *)(nullsub_1(a2) + 8) - 12328), !sub_46C760(v4)))
  {
    unint64_t v9 = 0xFFFFFFFF00000000;
    LODWORD(v8) = -1;
    return v9 & 0xFFFFFFFF00000000 | v8;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = sub_46C8FC((uint64_t)v4);
  sub_2954EC(v5, *(void *)(v6 + 32), (uint64_t)&v11);
  sub_2E4B5C((uint64_t)&v11, v14);
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  unsigned int v7 = sub_46CAC4((uint64_t)v4);
  sub_32F08((uint64_t *)v14, 1, 0, &v11, (double)v7 / 1000000000.0);
  if (v11 != __p)
  {
    uint64_t v8 = *(void *)((char *)__p - 12);
    unint64_t v9 = v8 & 0xFFFFFFFF00000000;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v9 = 0xFFFFFFFF00000000;
  LODWORD(v8) = -1;
  if (v11)
  {
LABEL_7:
    __p = v11;
    operator delete(v11);
  }
LABEL_8:
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_4ABE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4ABEA0@<X0>(char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4 != v5)
  {
    if ((0x8E38E38E38E38E39 * ((v4 - v5) >> 3)) >> 60) {
      sub_2E00();
    }
    uint64_t v6 = result;
    unsigned int v7 = (char *)operator new(0xE38E38E38E38E390 * ((v4 - v5) >> 3));
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = &v7[0xE38E38E38E38E390 * ((v4 - v5) >> 3)];
    float64x2_t v33 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    uint64_t v8 = v5;
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    while (1)
    {
      if (*(unsigned char *)(v8 + 24))
      {
        uint64_t v9 = sub_392FC();
        unsigned int v11 = *(_DWORD *)v6;
        unsigned int v10 = *((_DWORD *)v6 + 1);
        if (*(_DWORD *)v6 == -1 && v10 == -1) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v9 = sub_39308(*(long double *)v8, *(long double *)(v8 + 8), *(double *)(v8 + 16));
        unsigned int v11 = *(_DWORD *)v6;
        unsigned int v10 = *((_DWORD *)v6 + 1);
        if (*(_DWORD *)v6 == -1 && v10 == -1) {
          goto LABEL_29;
        }
      }
      if ((HIDWORD(v9) & v9) != 0xFFFFFFFF) {
        break;
      }
LABEL_29:
      uint64_t v30 = 0x7FFFFFFFFFFFFFFELL;
LABEL_30:
      *(void *)&long long v36 = v5;
      *((void *)&v36 + 1) = v30;
      double result = sub_4AD5E4((char **)a3, v7, &v36);
      unsigned int v7 = result + 16;
      v8 += 72;
      v5 += 72;
      if (v8 == v4) {
        return result;
      }
    }
    long double v14 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
    long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795 * 0.0174532925;
    v16.i64[0] = v11;
    v16.i64[1] = v9;
    long double v17 = exp(3.14159265 - (double)HIDWORD(v9) * 6.28318531 / 4294967300.0);
    long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v19 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v16), v34), v31), v33), v32);
    double v35 = vsubq_f64((float64x2_t)v19, (float64x2_t)vdupq_laneq_s64(v19, 1)).f64[0];
    long double v20 = sin((v15 - v18) * 0.5);
    long double v21 = v20 * v20;
    double v22 = cos(v15);
    long double v23 = v22 * cos(v18);
    long double v24 = sin(0.5 * v35);
    long double v25 = atan2(sqrt(v24 * v24 * v23 + v21), sqrt(1.0 - (v24 * v24 * v23 + v21)));
    double v26 = (v25 + v25) * 6372797.56 * 100.0;
    if (v26 >= 0.0)
    {
      double v27 = v26;
      if (v26 >= 4.50359963e15) {
        goto LABEL_23;
      }
      uint64_t v28 = (uint64_t)(v26 + v26) + 1;
    }
    else
    {
      double v27 = v26;
      if (v26 <= -4.50359963e15) {
        goto LABEL_23;
      }
      uint64_t v28 = (uint64_t)(v26 + v26);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v27 = (double)(v28 >> 1);
LABEL_23:
    if (v27 < 9.22337204e18)
    {
      if (v26 >= 0.0)
      {
        if (v26 < 4.50359963e15)
        {
          uint64_t v29 = (uint64_t)(v26 + v26) + 1;
          goto LABEL_34;
        }
      }
      else if (v26 > -4.50359963e15)
      {
        uint64_t v29 = (uint64_t)(v26 + v26);
        if (v29 >= 1) {
          --v29;
        }
LABEL_34:
        double v26 = (double)(v29 >> 1);
      }
      uint64_t v30 = (uint64_t)v26;
      if ((uint64_t)v26 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v30 = 0x7FFFFFFFFFFFFFFELL;
      }
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  return result;
}

void sub_4AC240(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4AC260(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_storefront_locations");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ranking");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  strcpy((char *)__p, "enable_distance_filter");
  HIBYTE(__p[2]) = 22;
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "distance_filter_threshold_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_4AC3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4AC410(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  char v16 = 13;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ARInfoBuilder");
  unint64_t v12 = 0;
  char v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB560(v4, (uint64_t)__p);
  sub_4ACA70((uint64_t)(a1 + 1), __p);
  BOOL v5 = v18;
  if (v18)
  {
    do
    {
      unsigned int v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  BOOL v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  unsigned int v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    char v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_4AC55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4AC594(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8) && !sub_45FB38(a3))
  {
    double v35 = 0;
    unint64_t v36 = sub_4AC914((uint64_t *)a1, a3);
    int v37 = v6;
    float64x2_t v33 = 0;
    float64x2_t v34 = 0;
    uint64_t v8 = *(unsigned char **)(a2 + 288);
    unsigned int v7 = *(unsigned char **)(a2 + 296);
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (0x8E38E38E38E38E39 * (v9 >> 3) >= 0x38E38E38E38E38FLL) {
        sub_2E00();
      }
      unsigned int v10 = (char *)operator new(v9);
      unsigned int v11 = &v10[8 * (v9 >> 3)];
      float64x2_t v33 = v10;
      double v35 = v11;
      memcpy(v10, v8, v9);
      float64x2_t v34 = v11;
    }
    sub_4ABEA0((char *)&v36, (uint64_t *)&v33, (uint64_t)&v31);
    if (*(unsigned char *)(a1 + 9))
    {
      unint64_t v12 = (__n128 *)v31;
      char v13 = v32;
      unint64_t v14 = (v32 - (unsigned char *)v31) >> 4;
      if (v32 - (unsigned char *)v31 < 2049)
      {
LABEL_11:
        long double v18 = 0;
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = (v32 - (unsigned char *)v31) >> 4;
        while (1)
        {
          char v16 = (long long *)operator new(16 * v15, &std::nothrow);
          if (v16) {
            break;
          }
          BOOL v17 = v15 > 1;
          v15 >>= 1;
          if (!v17) {
            goto LABEL_11;
          }
        }
        long double v18 = v16;
      }
      sub_4AE54C(v12, v13, (uint64_t)&__p, v14, v18, v15);
      if (v18) {
        operator delete(v18);
      }
    }
    if (*(unsigned char *)(a1 + 10))
    {
      int64x2_t v19 = (unint64_t *)v32;
      if (v31 == v32)
      {
        int64x2_t v19 = (unint64_t *)v31;
      }
      else
      {
        long double v20 = (char *)v31 + 16;
        while (*((void *)v20 - 1) <= *(void *)(a1 + 16))
        {
          BOOL v21 = v20 == v32;
          v20 += 16;
          if (v21) {
            goto LABEL_33;
          }
        }
        double v22 = v20 - 16;
        if (v20 - 16 != v32)
        {
          if (v20 != v32)
          {
            do
            {
              if (*((void *)v20 + 1) <= *(void *)(a1 + 16))
              {
                *(_OWORD *)double v22 = *(_OWORD *)v20;
                v22 += 16;
              }
              v20 += 16;
            }
            while (v20 != (char *)v19);
            int64x2_t v19 = (unint64_t *)v32;
          }
          if (v22 != (char *)v19)
          {
            int64x2_t v19 = (unint64_t *)v22;
            float64x2_t v32 = v22;
          }
        }
      }
    }
    else
    {
      int64x2_t v19 = (unint64_t *)v32;
    }
LABEL_33:
    __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    long double v23 = (unint64_t *)v31;
    uint64_t v24 = (char *)v19 - (unsigned char *)v31;
    if (v19 != v31)
    {
      if ((unint64_t)v24 >= 0x38E38E38E38E38E1) {
        sub_2E00();
      }
      uint64_t v25 = v24 >> 4;
      double v26 = (char *)operator new(72 * (v24 >> 4));
      __p = v26;
      uint64_t v29 = v26;
      uint64_t v30 = &v26[72 * v25];
      do
      {
        double v26 = (char *)(sub_4AD830((unint64_t *)&__p, (uint64_t)v26, *v23) + 72);
        v23 += 2;
      }
      while (v23 != v19);
    }
    double v27 = (void **)(*(void *)(nullsub_1(a3) + 8) - 1072);
    if (v27 != &__p) {
      sub_4AD448(v27, (char *)__p, v29, 0x8E38E38E38E38E39 * ((v29 - (unsigned char *)__p) >> 3));
    }
    if (__p)
    {
      uint64_t v29 = (char *)__p;
      operator delete(__p);
    }
    if (v31)
    {
      float64x2_t v32 = (char *)v31;
      operator delete(v31);
    }
    if (v33) {
      operator delete(v33);
    }
  }
}

void sub_4AC8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_4AC914(uint64_t *a1, void *a2)
{
  if (sub_45FB38(a2) || (BOOL v4 = (void *)(*(void *)(nullsub_1(a2) + 8) - 12328), !sub_46C760(v4)))
  {
    unint64_t v9 = 0xFFFFFFFF00000000;
    LODWORD(v8) = -1;
    return v9 & 0xFFFFFFFF00000000 | v8;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = sub_46C8FC((uint64_t)v4);
  sub_2954EC(v5, *(void *)(v6 + 32), (uint64_t)&v11);
  sub_2E4B5C((uint64_t)&v11, v14);
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  unsigned int v7 = sub_46CAC4((uint64_t)v4);
  sub_32F08((uint64_t *)v14, 1, 0, &v11, (double)v7 / 1000000000.0);
  if (v11 != __p)
  {
    uint64_t v8 = *(void *)((char *)__p - 12);
    unint64_t v9 = v8 & 0xFFFFFFFF00000000;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v9 = 0xFFFFFFFF00000000;
  LODWORD(v8) = -1;
  if (v11)
  {
LABEL_7:
    __p = v11;
    operator delete(v11);
  }
LABEL_8:
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_4ACA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4ACA70(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_storefront_locations");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ranking");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  strcpy((char *)__p, "enable_distance_filter");
  HIBYTE(__p[2]) = 22;
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "distance_filter_threshold_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_4ACBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4ACC20(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  char v16 = 13;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ARInfoBuilder");
  unint64_t v12 = 0;
  char v13 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB5E0(v4, (uint64_t)__p);
  sub_4AD298((uint64_t)(a1 + 1), __p);
  BOOL v5 = v18;
  if (v18)
  {
    do
    {
      unsigned int v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      BOOL v5 = v10;
    }
    while (v10);
  }
  BOOL v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  unsigned int v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    unint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v12;
    }
    char v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_4ACD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4ACDA4(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8) && !sub_45FB38(a3))
  {
    double v35 = 0;
    unint64_t v36 = sub_4AD124((uint64_t *)a1, a3);
    int v37 = v6;
    float64x2_t v33 = 0;
    float64x2_t v34 = 0;
    uint64_t v8 = *(unsigned char **)(a2 + 288);
    unsigned int v7 = *(unsigned char **)(a2 + 296);
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (0x8E38E38E38E38E39 * (v9 >> 3) >= 0x38E38E38E38E38FLL) {
        sub_2E00();
      }
      unsigned int v10 = (char *)operator new(v9);
      unsigned int v11 = &v10[8 * (v9 >> 3)];
      float64x2_t v33 = v10;
      double v35 = v11;
      memcpy(v10, v8, v9);
      float64x2_t v34 = v11;
    }
    sub_4ABEA0((char *)&v36, (uint64_t *)&v33, (uint64_t)&v31);
    if (*(unsigned char *)(a1 + 9))
    {
      unint64_t v12 = (__n128 *)v31;
      char v13 = v32;
      unint64_t v14 = (v32 - (unsigned char *)v31) >> 4;
      if (v32 - (unsigned char *)v31 < 2049)
      {
LABEL_11:
        long double v18 = 0;
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = (v32 - (unsigned char *)v31) >> 4;
        while (1)
        {
          char v16 = (long long *)operator new(16 * v15, &std::nothrow);
          if (v16) {
            break;
          }
          BOOL v17 = v15 > 1;
          v15 >>= 1;
          if (!v17) {
            goto LABEL_11;
          }
        }
        long double v18 = v16;
      }
      sub_4AE9D8(v12, v13, (uint64_t)&__p, v14, v18, v15);
      if (v18) {
        operator delete(v18);
      }
    }
    if (*(unsigned char *)(a1 + 10))
    {
      int64x2_t v19 = (unint64_t *)v32;
      if (v31 == v32)
      {
        int64x2_t v19 = (unint64_t *)v31;
      }
      else
      {
        long double v20 = (char *)v31 + 16;
        while (*((void *)v20 - 1) <= *(void *)(a1 + 16))
        {
          BOOL v21 = v20 == v32;
          v20 += 16;
          if (v21) {
            goto LABEL_33;
          }
        }
        double v22 = v20 - 16;
        if (v20 - 16 != v32)
        {
          if (v20 != v32)
          {
            do
            {
              if (*((void *)v20 + 1) <= *(void *)(a1 + 16))
              {
                *(_OWORD *)double v22 = *(_OWORD *)v20;
                v22 += 16;
              }
              v20 += 16;
            }
            while (v20 != (char *)v19);
            int64x2_t v19 = (unint64_t *)v32;
          }
          if (v22 != (char *)v19)
          {
            int64x2_t v19 = (unint64_t *)v22;
            float64x2_t v32 = v22;
          }
        }
      }
    }
    else
    {
      int64x2_t v19 = (unint64_t *)v32;
    }
LABEL_33:
    __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    long double v23 = (unint64_t *)v31;
    uint64_t v24 = (char *)v19 - (unsigned char *)v31;
    if (v19 != v31)
    {
      if ((unint64_t)v24 >= 0x38E38E38E38E38E1) {
        sub_2E00();
      }
      uint64_t v25 = v24 >> 4;
      double v26 = (char *)operator new(72 * (v24 >> 4));
      __p = v26;
      uint64_t v29 = v26;
      uint64_t v30 = &v26[72 * v25];
      do
      {
        double v26 = (char *)(sub_4AD830((unint64_t *)&__p, (uint64_t)v26, *v23) + 72);
        v23 += 2;
      }
      while (v23 != v19);
    }
    double v27 = (void **)(*(void *)(nullsub_1(a3) + 8) - 1072);
    if (v27 != &__p) {
      sub_4AD448(v27, (char *)__p, v29, 0x8E38E38E38E38E39 * ((v29 - (unsigned char *)__p) >> 3));
    }
    if (__p)
    {
      uint64_t v29 = (char *)__p;
      operator delete(__p);
    }
    if (v31)
    {
      float64x2_t v32 = (char *)v31;
      operator delete(v31);
    }
    if (v33) {
      operator delete(v33);
    }
  }
}

void sub_4AD0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_4AD124(uint64_t *a1, void *a2)
{
  if (sub_45FB38(a2) || (BOOL v4 = (void *)(*(void *)(nullsub_1(a2) + 8) - 12328), !sub_470ADC(v4)))
  {
    unint64_t v9 = 0xFFFFFFFF00000000;
    LODWORD(v8) = -1;
    return v9 & 0xFFFFFFFF00000000 | v8;
  }
  uint64_t v5 = *a1;
  int v6 = (unsigned int *)sub_470B50((uint64_t)v4);
  sub_2954EC(v5, (((unint64_t)(v6[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v6[1] << 32) | *v6) ^ 0x1000000000000, (uint64_t)&v11);
  sub_2E4B5C((uint64_t)&v11, v14);
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  unsigned int v7 = sub_46CAC4((uint64_t)v4);
  sub_32F08((uint64_t *)v14, 1, 0, &v11, (double)v7 / 1000000000.0);
  if (v11 != __p)
  {
    uint64_t v8 = *(void *)((char *)__p - 12);
    unint64_t v9 = v8 & 0xFFFFFFFF00000000;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v9 = 0xFFFFFFFF00000000;
  LODWORD(v8) = -1;
  if (v11)
  {
LABEL_7:
    __p = v11;
    operator delete(v11);
  }
LABEL_8:
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_4AD268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4AD298(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_storefront_locations");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ranking");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  strcpy((char *)__p, "enable_distance_filter");
  HIBYTE(__p[2]) = 22;
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "distance_filter_threshold_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_4AD420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4AD448(void *result, char *__src, char *a3, size_t __sz)
{
  BOOL v6 = __src;
  unsigned int v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v11;
    if (v12 > 0x38E38E38E38E38ELL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 9 * v12;
    double result = operator new(72 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  char v16 = (unsigned char *)result[1];
  if (0x8E38E38E38E38E39 * ((v16 - v9) >> 3) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long double v18 = (void *)*result;
LABEL_21:
    double result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  BOOL v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long double v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

char *sub_4AD5E4(char **a1, char *a2, _OWORD *a3)
{
  BOOL v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      unint64_t v10 = v8 + 16;
      uint64_t v11 = (long long *)(v5 - 16);
      unint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)unint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    long double v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    long double v20 = &v18[16 * (v7 >> 4)];
    BOOL v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  long double v18 = 0;
  uint64_t v19 = v7 >> 4;
  long double v20 = (char *)(16 * (v7 >> 4));
  BOOL v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      long double v20 = &v24[16 * (v23 >> 2)];
      BOOL v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        BOOL v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)long double v20 = *a3;
  uint64_t v25 = v20;
  if (v6 != v8)
  {
    double v26 = v8;
    double v27 = v20;
    do
    {
      uint64_t v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  uint64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_4AD818(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_4AD830(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)(a2 - *a1) / 72;
  unint64_t v8 = *a1 + 72 * v7;
  unint64_t v9 = a1[2];
  if (v5 < v9)
  {
    if (v8 == v5)
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
      long long v25 = *(_OWORD *)(a3 + 16);
      long long v26 = *(_OWORD *)(a3 + 32);
      long long v27 = *(_OWORD *)(a3 + 48);
      *(void *)(v8 + 64) = *(void *)(a3 + 64);
      *(_OWORD *)(v8 + 32) = v26;
      *(_OWORD *)(v8 + 48) = v27;
      *(_OWORD *)(v8 + 16) = v25;
      a1[1] = v8 + 72;
    }
    else
    {
      unint64_t v10 = v8 + 72;
      unint64_t v11 = v5 - 72;
      unint64_t v12 = a1[1];
      if (v5 >= 0x48)
      {
        do
        {
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v11;
          long long v13 = *(_OWORD *)(v11 + 16);
          long long v14 = *(_OWORD *)(v11 + 32);
          long long v15 = *(_OWORD *)(v11 + 48);
          *(void *)(v12 + 64) = *(void *)(v11 + 64);
          *(_OWORD *)(v12 + 32) = v14;
          *(_OWORD *)(v12 + 48) = v15;
          *(_OWORD *)(v12 + 16) = v13;
          v11 += 72;
          v12 += 72;
        }
        while (v11 < v5);
      }
      a1[1] = v12;
      if (v5 != v10) {
        memmove((void *)(v8 + 72), (const void *)v8, v5 - v10);
      }
      if (v8 <= v3) {
        v3 += 72 * (a1[1] > v3);
      }
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v3;
      long long v16 = *(_OWORD *)(v3 + 16);
      long long v17 = *(_OWORD *)(v3 + 32);
      long long v18 = *(_OWORD *)(v3 + 48);
      *(void *)(v8 + 64) = *(void *)(v3 + 64);
      *(_OWORD *)(v8 + 32) = v17;
      *(_OWORD *)(v8 + 48) = v18;
      *(_OWORD *)(v8 + 16) = v16;
    }
    return v8;
  }
  unint64_t v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v19 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  unint64_t v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v6) >> 3);
  if (2 * v20 > v19) {
    unint64_t v19 = 2 * v20;
  }
  if (v20 >= 0x1C71C71C71C71C7) {
    unint64_t v21 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (v21 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    unint64_t v22 = (char *)operator new(72 * v21);
    unint64_t v23 = (unint64_t)&v22[72 * v7];
    uint64_t v24 = &v22[72 * v21];
    if ((char *)v23 != v24) {
      goto LABEL_33;
    }
    goto LABEL_22;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 72 * v7;
  uint64_t v24 = 0;
  if (!v23)
  {
LABEL_22:
    int64_t v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v23 - (void)v22) >> 3);
    if (v23 <= (unint64_t)v22)
    {
      if ((char *)v23 == v22) {
        unint64_t v30 = 1;
      }
      else {
        unint64_t v30 = 0x1C71C71C71C71C72 * ((uint64_t)(v23 - (void)v22) >> 3);
      }
      if (v30 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      float64x2_t v31 = (char *)operator new(72 * v30);
      unint64_t v23 = (unint64_t)&v31[72 * (v30 >> 2)];
      uint64_t v24 = &v31[72 * v30];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      if (v28 >= -1) {
        uint64_t v29 = v28 + 1;
      }
      else {
        uint64_t v29 = v28 + 2;
      }
      uint64_t v24 = (char *)v23;
      v23 -= 72 * (v29 >> 1);
    }
  }
LABEL_33:
  *(_OWORD *)unint64_t v23 = *(_OWORD *)v3;
  long long v32 = *(_OWORD *)(v3 + 16);
  long long v33 = *(_OWORD *)(v3 + 32);
  long long v34 = *(_OWORD *)(v3 + 48);
  *(void *)(v23 + 64) = *(void *)(v3 + 64);
  *(_OWORD *)(v23 + 32) = v33;
  *(_OWORD *)(v23 + 48) = v34;
  *(_OWORD *)(v23 + 16) = v32;
  double v35 = (void *)*a1;
  unint64_t v36 = v23;
  if (*a1 != v8)
  {
    unint64_t v37 = v8;
    unint64_t v38 = v23;
    do
    {
      *(_OWORD *)(v38 - 72) = *(_OWORD *)(v37 - 72);
      long long v39 = *(_OWORD *)(v37 - 56);
      long long v40 = *(_OWORD *)(v37 - 40);
      long long v41 = *(_OWORD *)(v37 - 24);
      unint64_t v36 = v38 - 72;
      *(void *)(v38 - 8) = *(void *)(v37 - 8);
      *(_OWORD *)(v38 - 24) = v41;
      *(_OWORD *)(v38 - 40) = v40;
      *(_OWORD *)(v38 - 56) = v39;
      v37 -= 72;
      v38 -= 72;
    }
    while ((void *)v37 != v35);
  }
  unint64_t v42 = a1[1];
  unint64_t v43 = v42 - v8;
  if (v42 != v8) {
    memmove((void *)(v23 + 72), (const void *)v8, v42 - v8);
  }
  double v44 = (void *)*a1;
  *a1 = v36;
  a1[1] = v23 + 72 + v43;
  a1[2] = (unint64_t)v24;
  if (v44) {
    operator delete(v44);
  }
  return v23;
}

void sub_4ADB78(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_4ADB90(__n128 *a1, char *a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (char *)a1;
    if (a4 == 2)
    {
      if (*((void *)a2 - 1) < (int64_t)a1->n128_u64[1])
      {
        __n128 result = *a1;
        *a1 = *((__n128 *)a2 - 1);
        *((__n128 *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v20 = a5;
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = (uint64_t)&a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_4ADDE8((uint64_t)a1, v23, a3, v24, a5);
        long long v25 = &v20[v22];
        sub_4ADDE8((uint64_t)&v7[16 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v25);
        long long v26 = &v20[a4];
        long long v27 = v25;
        while (v27 != v26)
        {
          if (*((void *)v27 + 1) >= *((void *)v20 + 1))
          {
            long long v28 = *v20++;
            result.n128_u64[0] = v28;
            *(_OWORD *)uint64_t v7 = v28;
            v7 += 16;
            if (v20 == v25) {
              goto LABEL_26;
            }
          }
          else
          {
            long long v29 = *v27++;
            result.n128_u64[0] = v29;
            *(_OWORD *)uint64_t v7 = v29;
            v7 += 16;
            if (v20 == v25)
            {
LABEL_26:
              if (v27 != v26)
              {
                uint64_t v30 = 0;
                do
                {
                  __n128 result = (__n128)v27[v30];
                  *(__n128 *)&v7[v30 * 16] = result;
                  ++v30;
                }
                while (&v27[v30] != v26);
              }
              return result;
            }
          }
        }
        if (v20 != v25)
        {
          uint64_t v31 = 0;
          do
          {
            __n128 result = (__n128)v20[v31];
            *(__n128 *)&v7[v31 * 16] = result;
            ++v31;
          }
          while (&v20[v31] != v25);
        }
      }
      else
      {
        sub_4ADB90(a1, v23, a3, v24, a5, a6);
        sub_4ADB90(&v7[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v20, a6);
        sub_4AE01C(v7, &v7[16 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v20, a6);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      unint64_t v10 = a1 + 1;
      if (&a1[1] != (__n128 *)a2)
      {
        uint64_t v11 = 0;
        unint64_t v12 = a1;
        do
        {
          int64_t v14 = v12[1].n128_i64[1];
          int64_t v15 = v12->n128_i64[1];
          unint64_t v12 = v10;
          if (v14 < v15)
          {
            unint64_t v16 = v10->n128_u64[0];
            uint64_t v17 = v11;
            do
            {
              __n128 result = *(__n128 *)((char *)a1 + v17);
              *(__n128 *)((char *)a1 + v17 + 16) = result;
              if (!v17)
              {
                long long v13 = a1;
                goto LABEL_10;
              }
              int64_t v18 = *(uint64_t *)((char *)&a1->n128_i64[-1] + v17);
              v17 -= 16;
            }
            while (v14 < v18);
            long long v13 = (__n128 *)((char *)a1 + v17 + 16);
LABEL_10:
            v13->n128_u64[0] = v16;
            v13->n128_u64[1] = v14;
          }
          unint64_t v10 = v12 + 1;
          v11 += 16;
        }
        while (&v12[1] != (__n128 *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_4ADDE8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, long long *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v9 = (long long *)(a2 - 16);
      if (*(void *)(a2 - 8) >= *(void *)(result + 8))
      {
        *a5 = *(_OWORD *)result;
        long long v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        long long v10 = *(_OWORD *)result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *(_OWORD *)result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v19 = a4 >> 1;
      uint64_t v20 = 16 * (a4 >> 1);
      uint64_t v21 = result + v20;
      sub_4ADB90(result, result + v20, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = sub_4ADB90(v8 + v20, a2, a3, a4 - v19, &v5[(unint64_t)v20 / 0x10], a4 - v19);
      uint64_t v22 = v8 + v20;
      while (v22 != a2)
      {
        if (*(void *)(v22 + 8) >= *(void *)(v8 + 8))
        {
          long long v23 = *(_OWORD *)v8;
          v8 += 16;
          *v5++ = v23;
          if (v8 == v21) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v24 = *(_OWORD *)v22;
          v22 += 16;
          *v5++ = v24;
          if (v8 == v21)
          {
LABEL_26:
            if (v22 != a2)
            {
              uint64_t v25 = 0;
              do
              {
                v5[v25] = *(_OWORD *)(v22 + v25 * 16);
                ++v25;
              }
              while (v22 + v25 * 16 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v21)
      {
        uint64_t v26 = 0;
        do
        {
          v5[v26] = *(_OWORD *)(v8 + v26 * 16);
          ++v26;
        }
        while (v8 + v26 * 16 != v21);
      }
    }
    else if (result != a2)
    {
      *a5 = *(_OWORD *)result;
      uint64_t v11 = result + 16;
      if (result + 16 != a2)
      {
        uint64_t v12 = 0;
        long long v13 = a5;
        do
        {
          uint64_t v14 = v8;
          int64_t v15 = v13;
          uint64_t v8 = v11;
          unint64_t v16 = ++v13;
          if (*(void *)(v14 + 24) < *((void *)v15 + 1))
          {
            *long long v13 = *v15;
            unint64_t v16 = a5;
            if (v15 != a5)
            {
              uint64_t v17 = v12;
              while (1)
              {
                unint64_t v16 = (long long *)((char *)a5 + v17);
                if (*(void *)(v14 + 24) >= *(void *)((char *)a5 + v17 - 8)) {
                  break;
                }
                *unint64_t v16 = *(v16 - 1);
                v17 -= 16;
                if (!v17)
                {
                  unint64_t v16 = a5;
                  break;
                }
              }
            }
          }
          *unint64_t v16 = *(_OWORD *)v8;
          uint64_t v11 = v8 + 16;
          v12 += 16;
        }
        while (v8 + 16 != a2);
      }
    }
  }
  return result;
}

char *sub_4AE01C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a6;
  uint64_t v12 = result;
  while (v8 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (1)
    {
      int64_t v15 = &v12[v13];
      if (*((void *)a2 + 1) < *(void *)&v12[v13 + 8]) {
        break;
      }
      v13 += 16;
      if (__CFADD__(v14++, 1)) {
        return result;
      }
    }
    uint64_t v17 = -v14;
    if (-v14 >= v8)
    {
      if (v14 == -1)
      {
        long long v93 = *(_OWORD *)&v12[v13];
        *(_OWORD *)&v12[v13] = *(_OWORD *)a2;
        *(_OWORD *)a2 = v93;
        return result;
      }
      if (v14 > 0) {
        uint64_t v17 = 1 - v14;
      }
      uint64_t v27 = v17 >> 1;
      uint64_t v21 = &v12[16 * (v17 >> 1) + v13];
      uint64_t v20 = a2;
      if (a2 != a3)
      {
        unint64_t v33 = (a3 - a2) >> 4;
        uint64_t v20 = a2;
        do
        {
          unint64_t v34 = v33 >> 1;
          double v35 = &v20[16 * (v33 >> 1)];
          uint64_t v36 = *((void *)v35 + 1);
          unint64_t v37 = v35 + 16;
          v33 += ~(v33 >> 1);
          if (v36 < *((void *)v21 + 1)) {
            uint64_t v20 = v37;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      uint64_t v19 = (v20 - a2) >> 4;
      if (v21 != a2)
      {
LABEL_22:
        uint64_t v28 = v20 - a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          long long v29 = v21 + 16;
          if (v21 + 16 == a2)
          {
            long long v91 = *(_OWORD *)v21;
            unint64_t v38 = a2;
            size_t v39 = v20 - a2;
            uint64_t v85 = a7;
            uint64_t v87 = a8;
            long long v40 = a3;
            uint64_t v41 = a4;
            uint64_t v81 = v19;
            uint64_t v83 = v27;
            memmove(v21, v38, v39);
            uint64_t v19 = v81;
            uint64_t v27 = v83;
            a4 = v41;
            a7 = v85;
            a8 = v87;
            a3 = v40;
            a2 = &v21[v28];
            *(_OWORD *)&v21[v28] = v91;
          }
          else
          {
            uint64_t v30 = a2 + 16;
            if (a2 + 16 == v20)
            {
              a2 = v21 + 16;
              long long v92 = *((_OWORD *)v20 - 1);
              if (v20 - 16 != v21)
              {
                uint64_t v86 = a7;
                uint64_t v88 = a8;
                unint64_t v42 = a3;
                uint64_t v43 = a4;
                uint64_t v82 = v19;
                uint64_t v84 = v27;
                memmove(v21 + 16, v21, v20 - 16 - v21);
                uint64_t v19 = v82;
                uint64_t v27 = v84;
                a4 = v43;
                a7 = v86;
                a8 = v88;
                a3 = v42;
              }
              *(_OWORD *)uint64_t v21 = v92;
            }
            else
            {
              uint64_t v31 = (a2 - v21) >> 4;
              if (v31 == v28 >> 4)
              {
                do
                {
                  long long v90 = *((_OWORD *)v29 - 1);
                  *((_OWORD *)v29 - 1) = *((_OWORD *)v30 - 1);
                  *((_OWORD *)v30 - 1) = v90;
                  if (v29 == a2) {
                    break;
                  }
                  v29 += 16;
                  BOOL v32 = v30 == v20;
                  v30 += 16;
                }
                while (!v32);
              }
              else
              {
                uint64_t v44 = v28 >> 4;
                uint64_t v45 = (a2 - v21) >> 4;
                do
                {
                  uint64_t v46 = v45;
                  uint64_t v45 = v44;
                  uint64_t v44 = v46 % v44;
                }
                while (v44);
                if (v45)
                {
                  __darwin_ct_rune_t v47 = &v21[16 * v45];
                  do
                  {
                    long long v48 = *((_OWORD *)v47 - 1);
                    v47 -= 16;
                    uint64_t v49 = &v47[16 * v31];
                    unint64_t v50 = v47;
                    do
                    {
                      uint64_t v51 = v49;
                      *(_OWORD *)unint64_t v50 = *(_OWORD *)v49;
                      uint64_t v52 = (v20 - v49) >> 4;
                      BOOL v53 = __OFSUB__(v31, v52);
                      uint64_t v54 = v31 - v52;
                      char v73 = (v54 < 0) ^ v53;
                      uint64_t v49 = &v21[16 * v54];
                      if (v73) {
                        uint64_t v49 = &v51[16 * v31];
                      }
                      unint64_t v50 = v51;
                    }
                    while (v49 != v47);
                    *(_OWORD *)uint64_t v51 = v48;
                  }
                  while (v47 != v21);
                }
                a2 = &v21[16 * (v28 >> 4)];
              }
            }
          }
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v18 = v8;
      }
      else {
        uint64_t v18 = v8 + 1;
      }
      uint64_t v19 = v18 >> 1;
      uint64_t v20 = &a2[16 * (v18 >> 1)];
      uint64_t v21 = a2;
      if (a2 - v12 != v13)
      {
        unint64_t v22 = (a2 - v12 - v13) >> 4;
        uint64_t v21 = &v12[v13];
        do
        {
          unint64_t v23 = v22 >> 1;
          long long v24 = &v21[16 * (v22 >> 1)];
          uint64_t v25 = *((void *)v24 + 1);
          uint64_t v26 = v24 + 16;
          v22 += ~(v22 >> 1);
          if (*((void *)v20 + 1) < v25) {
            unint64_t v22 = v23;
          }
          else {
            uint64_t v21 = v26;
          }
        }
        while (v22);
      }
      uint64_t v27 = (v21 - v12 - v13) >> 4;
      if (v21 != a2) {
        goto LABEL_22;
      }
    }
    a2 = v20;
LABEL_56:
    a5 = -(v27 + v14);
    uint64_t v55 = v8 - v19;
    uint64_t v89 = a4;
    if (v27 + v19 >= v8 - (v27 + v19) - v14)
    {
      int v61 = a2;
      uint64_t v62 = v20;
      uint64_t v63 = v27;
      uint64_t v64 = -(v27 + v14);
      uint64_t v65 = v19;
      unint64_t v66 = a7;
      uint64_t v67 = a8;
      __n128 result = (char *)sub_4AE01C(a2, v62, a3, a4, v64, v55);
      a2 = v21;
      a5 = v63;
      a3 = v61;
      uint64_t v8 = v65;
      uint64_t v12 = v15;
      a7 = v66;
      a8 = v67;
      a4 = v89;
      if (!v65) {
        return result;
      }
    }
    else
    {
      uint64_t v56 = &v12[v13];
      unsigned int v57 = a7;
      uint64_t v58 = a8;
      unsigned __int16 v59 = a3;
      __n128 result = (char *)sub_4AE01C(v56, v21, a2, a4, v27, v19);
      a3 = v59;
      unsigned __int16 v60 = a2;
      a2 = v20;
      uint64_t v8 = v55;
      uint64_t v12 = v60;
      a7 = v57;
      a8 = v58;
      a4 = v89;
      if (!v55) {
        return result;
      }
    }
  }
  if (a5 <= v8)
  {
    if (v12 != a2)
    {
      unint64_t v75 = 0;
      do
      {
        *(_OWORD *)&a7[v75] = *(_OWORD *)&v12[v75];
        v75 += 16;
      }
      while (&v12[v75] != a2);
      if (v75)
      {
        int v76 = &a7[v75];
        uint64_t v77 = a7;
        while (a2 != a3)
        {
          if (*((void *)a2 + 1) >= *((void *)v77 + 1))
          {
            long long v78 = *(_OWORD *)v77;
            v77 += 16;
            *(_OWORD *)uint64_t v12 = v78;
            v12 += 16;
            if (v76 == v77) {
              return result;
            }
          }
          else
          {
            long long v79 = *(_OWORD *)a2;
            a2 += 16;
            *(_OWORD *)uint64_t v12 = v79;
            v12 += 16;
            if (v76 == v77) {
              return result;
            }
          }
        }
        return (char *)memmove(v12, v77, a7 - v77 + v75);
      }
    }
  }
  else if (a3 != a2)
  {
    uint64_t v68 = 0;
    do
    {
      *(_OWORD *)&a7[v68] = *(_OWORD *)&a2[v68];
      v68 += 16;
    }
    while (&a2[v68] != a3);
    if (v68)
    {
      uint64_t v69 = &a7[v68];
      unint64_t v70 = a3 - 16;
      while (a2 != v12)
      {
        uint64_t v71 = *((void *)v69 - 1);
        uint64_t v72 = *((void *)a2 - 1);
        char v73 = v71 < v72;
        if (v71 >= v72) {
          double v74 = v69 - 16;
        }
        else {
          double v74 = a2 - 16;
        }
        if (v73) {
          a2 -= 16;
        }
        else {
          v69 -= 16;
        }
        *(_OWORD *)unint64_t v70 = *(_OWORD *)v74;
        v70 -= 16;
        if (v69 == a7) {
          return result;
        }
      }
      uint64_t v80 = 0;
      do
      {
        *(_OWORD *)&v70[v80] = *(_OWORD *)&v69[v80 - 16];
        v80 -= 16;
      }
      while (&v69[v80] != a7);
    }
  }
  return result;
}

__n128 sub_4AE54C(__n128 *a1, char *a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (char *)a1;
    if (a4 == 2)
    {
      if (*((void *)a2 - 1) < (int64_t)a1->n128_u64[1])
      {
        __n128 result = *a1;
        *a1 = *((__n128 *)a2 - 1);
        *((__n128 *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v20 = a5;
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = (uint64_t)&a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_4AE7A4((uint64_t)a1, v23, a3, v24, a5);
        uint64_t v25 = &v20[v22];
        sub_4AE7A4((uint64_t)&v7[16 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v25);
        uint64_t v26 = &v20[a4];
        uint64_t v27 = v25;
        while (v27 != v26)
        {
          if (*((void *)v27 + 1) >= *((void *)v20 + 1))
          {
            long long v28 = *v20++;
            result.n128_u64[0] = v28;
            *(_OWORD *)uint64_t v7 = v28;
            v7 += 16;
            if (v20 == v25) {
              goto LABEL_26;
            }
          }
          else
          {
            long long v29 = *v27++;
            result.n128_u64[0] = v29;
            *(_OWORD *)uint64_t v7 = v29;
            v7 += 16;
            if (v20 == v25)
            {
LABEL_26:
              if (v27 != v26)
              {
                uint64_t v30 = 0;
                do
                {
                  __n128 result = (__n128)v27[v30];
                  *(__n128 *)&v7[v30 * 16] = result;
                  ++v30;
                }
                while (&v27[v30] != v26);
              }
              return result;
            }
          }
        }
        if (v20 != v25)
        {
          uint64_t v31 = 0;
          do
          {
            __n128 result = (__n128)v20[v31];
            *(__n128 *)&v7[v31 * 16] = result;
            ++v31;
          }
          while (&v20[v31] != v25);
        }
      }
      else
      {
        sub_4AE54C(a1, v23, a3, v24, a5, a6);
        sub_4AE54C(&v7[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v20, a6);
        sub_4AE01C(v7, &v7[16 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v20, a6);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      long long v10 = a1 + 1;
      if (&a1[1] != (__n128 *)a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          int64_t v14 = v12[1].n128_i64[1];
          int64_t v15 = v12->n128_i64[1];
          uint64_t v12 = v10;
          if (v14 < v15)
          {
            unint64_t v16 = v10->n128_u64[0];
            uint64_t v17 = v11;
            do
            {
              __n128 result = *(__n128 *)((char *)a1 + v17);
              *(__n128 *)((char *)a1 + v17 + 16) = result;
              if (!v17)
              {
                uint64_t v13 = a1;
                goto LABEL_10;
              }
              int64_t v18 = *(uint64_t *)((char *)&a1->n128_i64[-1] + v17);
              v17 -= 16;
            }
            while (v14 < v18);
            uint64_t v13 = (__n128 *)((char *)a1 + v17 + 16);
LABEL_10:
            v13->n128_u64[0] = v16;
            v13->n128_u64[1] = v14;
          }
          long long v10 = v12 + 1;
          v11 += 16;
        }
        while (&v12[1] != (__n128 *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_4AE7A4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, long long *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v9 = (long long *)(a2 - 16);
      if (*(void *)(a2 - 8) >= *(void *)(result + 8))
      {
        *a5 = *(_OWORD *)result;
        long long v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        long long v10 = *(_OWORD *)result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *(_OWORD *)result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v19 = a4 >> 1;
      uint64_t v20 = 16 * (a4 >> 1);
      uint64_t v21 = result + v20;
      sub_4AE54C(result, result + v20, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = sub_4AE54C(v8 + v20, a2, a3, a4 - v19, &v5[(unint64_t)v20 / 0x10], a4 - v19);
      uint64_t v22 = v8 + v20;
      while (v22 != a2)
      {
        if (*(void *)(v22 + 8) >= *(void *)(v8 + 8))
        {
          long long v23 = *(_OWORD *)v8;
          v8 += 16;
          *v5++ = v23;
          if (v8 == v21) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v24 = *(_OWORD *)v22;
          v22 += 16;
          *v5++ = v24;
          if (v8 == v21)
          {
LABEL_26:
            if (v22 != a2)
            {
              uint64_t v25 = 0;
              do
              {
                v5[v25] = *(_OWORD *)(v22 + v25 * 16);
                ++v25;
              }
              while (v22 + v25 * 16 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v21)
      {
        uint64_t v26 = 0;
        do
        {
          v5[v26] = *(_OWORD *)(v8 + v26 * 16);
          ++v26;
        }
        while (v8 + v26 * 16 != v21);
      }
    }
    else if (result != a2)
    {
      *a5 = *(_OWORD *)result;
      uint64_t v11 = result + 16;
      if (result + 16 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        do
        {
          uint64_t v14 = v8;
          int64_t v15 = v13;
          uint64_t v8 = v11;
          unint64_t v16 = ++v13;
          if (*(void *)(v14 + 24) < *((void *)v15 + 1))
          {
            *uint64_t v13 = *v15;
            unint64_t v16 = a5;
            if (v15 != a5)
            {
              uint64_t v17 = v12;
              while (1)
              {
                unint64_t v16 = (long long *)((char *)a5 + v17);
                if (*(void *)(v14 + 24) >= *(void *)((char *)a5 + v17 - 8)) {
                  break;
                }
                *unint64_t v16 = *(v16 - 1);
                v17 -= 16;
                if (!v17)
                {
                  unint64_t v16 = a5;
                  break;
                }
              }
            }
          }
          *unint64_t v16 = *(_OWORD *)v8;
          uint64_t v11 = v8 + 16;
          v12 += 16;
        }
        while (v8 + 16 != a2);
      }
    }
  }
  return result;
}

__n128 sub_4AE9D8(__n128 *a1, char *a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (char *)a1;
    if (a4 == 2)
    {
      if (*((void *)a2 - 1) < (int64_t)a1->n128_u64[1])
      {
        __n128 result = *a1;
        *a1 = *((__n128 *)a2 - 1);
        *((__n128 *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v20 = a5;
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = (uint64_t)&a1[a4 >> 1];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_4AEC30((uint64_t)a1, v23, a3, v24, a5);
        uint64_t v25 = &v20[v22];
        sub_4AEC30((uint64_t)&v7[16 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v25);
        uint64_t v26 = &v20[a4];
        uint64_t v27 = v25;
        while (v27 != v26)
        {
          if (*((void *)v27 + 1) >= *((void *)v20 + 1))
          {
            long long v28 = *v20++;
            result.n128_u64[0] = v28;
            *(_OWORD *)uint64_t v7 = v28;
            v7 += 16;
            if (v20 == v25) {
              goto LABEL_26;
            }
          }
          else
          {
            long long v29 = *v27++;
            result.n128_u64[0] = v29;
            *(_OWORD *)uint64_t v7 = v29;
            v7 += 16;
            if (v20 == v25)
            {
LABEL_26:
              if (v27 != v26)
              {
                uint64_t v30 = 0;
                do
                {
                  __n128 result = (__n128)v27[v30];
                  *(__n128 *)&v7[v30 * 16] = result;
                  ++v30;
                }
                while (&v27[v30] != v26);
              }
              return result;
            }
          }
        }
        if (v20 != v25)
        {
          uint64_t v31 = 0;
          do
          {
            __n128 result = (__n128)v20[v31];
            *(__n128 *)&v7[v31 * 16] = result;
            ++v31;
          }
          while (&v20[v31] != v25);
        }
      }
      else
      {
        sub_4AE9D8(a1, v23, a3, v24, a5, a6);
        sub_4AE9D8(&v7[16 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v20, a6);
        sub_4AE01C(v7, &v7[16 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v20, a6);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      long long v10 = a1 + 1;
      if (&a1[1] != (__n128 *)a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        do
        {
          int64_t v14 = v12[1].n128_i64[1];
          int64_t v15 = v12->n128_i64[1];
          uint64_t v12 = v10;
          if (v14 < v15)
          {
            unint64_t v16 = v10->n128_u64[0];
            uint64_t v17 = v11;
            do
            {
              __n128 result = *(__n128 *)((char *)a1 + v17);
              *(__n128 *)((char *)a1 + v17 + 16) = result;
              if (!v17)
              {
                uint64_t v13 = a1;
                goto LABEL_10;
              }
              int64_t v18 = *(uint64_t *)((char *)&a1->n128_i64[-1] + v17);
              v17 -= 16;
            }
            while (v14 < v18);
            uint64_t v13 = (__n128 *)((char *)a1 + v17 + 16);
LABEL_10:
            v13->n128_u64[0] = v16;
            v13->n128_u64[1] = v14;
          }
          long long v10 = v12 + 1;
          v11 += 16;
        }
        while (&v12[1] != (__n128 *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_4AEC30(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, long long *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v9 = (long long *)(a2 - 16);
      if (*(void *)(a2 - 8) >= *(void *)(result + 8))
      {
        *a5 = *(_OWORD *)result;
        long long v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        long long v10 = *(_OWORD *)result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *(_OWORD *)result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v19 = a4 >> 1;
      uint64_t v20 = 16 * (a4 >> 1);
      uint64_t v21 = result + v20;
      sub_4AE9D8(result, result + v20, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = sub_4AE9D8(v8 + v20, a2, a3, a4 - v19, &v5[(unint64_t)v20 / 0x10], a4 - v19);
      uint64_t v22 = v8 + v20;
      while (v22 != a2)
      {
        if (*(void *)(v22 + 8) >= *(void *)(v8 + 8))
        {
          long long v23 = *(_OWORD *)v8;
          v8 += 16;
          *v5++ = v23;
          if (v8 == v21) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v24 = *(_OWORD *)v22;
          v22 += 16;
          *v5++ = v24;
          if (v8 == v21)
          {
LABEL_26:
            if (v22 != a2)
            {
              uint64_t v25 = 0;
              do
              {
                v5[v25] = *(_OWORD *)(v22 + v25 * 16);
                ++v25;
              }
              while (v22 + v25 * 16 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v21)
      {
        uint64_t v26 = 0;
        do
        {
          v5[v26] = *(_OWORD *)(v8 + v26 * 16);
          ++v26;
        }
        while (v8 + v26 * 16 != v21);
      }
    }
    else if (result != a2)
    {
      *a5 = *(_OWORD *)result;
      uint64_t v11 = result + 16;
      if (result + 16 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        do
        {
          uint64_t v14 = v8;
          int64_t v15 = v13;
          uint64_t v8 = v11;
          unint64_t v16 = ++v13;
          if (*(void *)(v14 + 24) < *((void *)v15 + 1))
          {
            *uint64_t v13 = *v15;
            unint64_t v16 = a5;
            if (v15 != a5)
            {
              uint64_t v17 = v12;
              while (1)
              {
                unint64_t v16 = (long long *)((char *)a5 + v17);
                if (*(void *)(v14 + 24) >= *(void *)((char *)a5 + v17 - 8)) {
                  break;
                }
                *unint64_t v16 = *(v16 - 1);
                v17 -= 16;
                if (!v17)
                {
                  unint64_t v16 = a5;
                  break;
                }
              }
            }
          }
          *unint64_t v16 = *(_OWORD *)v8;
          uint64_t v11 = v8 + 16;
          v12 += 16;
        }
        while (v8 + 16 != a2);
      }
    }
  }
  return result;
}

double sub_4AEE64()
{
  byte_2558E47 = 1;
  word_2558E30 = 65;
  byte_2558E5F = 1;
  word_2558E48 = 65;
  byte_2558E77 = 8;
  strcpy((char *)&qword_2558E60, "any_mode");
  byte_2558E8F = 7;
  strcpy((char *)&dword_2558E78, "cycling");
  byte_2558EA7 = 7;
  strcpy((char *)&dword_2558E90, "driving");
  byte_2558EBF = 7;
  strcpy((char *)&dword_2558EA8, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558EF0 = 0u;
  *(_OWORD *)&qword_2558F00 = 0u;
  dword_2558F10 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558EF0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558EF0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558EF0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558EF0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2558EC8 = 0;
  qword_2558ED0 = 0;
  qword_2558EC0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558EC0 = (uint64_t)v0;
  qword_2558EC8 = (uint64_t)(v0 + 9);
  qword_2558ED0 = (uint64_t)(v0 + 9);
  qword_2558ED8 = 0;
  qword_2558EE0 = 0;
  unk_2558EE8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558EE0 = (uint64_t)(v1 + 9);
  unk_2558EE8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558ED8 = (uint64_t)v1;
  return result;
}

void sub_4AF120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558F00) {
    sub_20A8D80((void **)qword_2558F00);
  }
  unint64_t v37 = (void *)xmmword_2558EF0;
  *(void *)&xmmword_2558EF0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_4AF1C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_4BBDC0(a1 + 16, a4);
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1584) = 1065353216;
  char v20 = 15;
  uint64_t v18 = 0;
  strcpy((char *)v19, "AdvisoryBuilder");
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  int v8 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&v16);
  sub_3CB2F0(v8, (uint64_t)__p);
  sub_4B31B0(a1 + 1592, __p);
  unint64_t v9 = v22;
  if (v22)
  {
    do
    {
      int v14 = (void **)*v9;
      sub_55198((uint64_t)(v9 + 5));
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      unint64_t v9 = v14;
    }
    while (v14);
  }
  char v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  int v11 = (void **)v16;
  if (v16)
  {
    uint64_t v12 = v17;
    char v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      char v13 = v16;
    }
    uint64_t v17 = v11;
    operator delete(v13);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  *(void *)(a1 + 1664) = 0;
  *(_WORD *)(a1 + 1672) = 257;
  *(int32x4_t *)(a1 + 1++*(_DWORD *)(result + 676) = vdupq_n_s32(0x7FFFFFFEu);
  *(void *)(a1 + 1692) = 0x7FFFFFFE7FFFFFFELL;
  sub_57B658(a1 + 1704, a2, a3, a1 + 16);
  sub_4D342C(a1 + 1784, a2, a3, a4, a1 + 1704);
  return a1;
}

void sub_4AF388(_Unwind_Exception *a1)
{
  sub_4AF400(v4);
  sub_4AF47C(v3);
  sub_31B778(v1 + 1552);
  sub_4BCED0(v2);
  _Unwind_Resume(a1);
}

void sub_4AF3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_31B778(v19 + 1552);
  sub_4BCED0(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_4AF400(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_4AF47C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void **)(a1 + 16);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 24) = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 16);
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void **sub_4AF510(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4BD604(v3 - 1440);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_4AF56C(unsigned char *a1, uint64_t **a2)
{
  sub_4AF640((uint64_t)a1, a2);
  uint64_t v4 = *a2;
  int v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_4AF930(a1, v4, (uint64_t *)&__p);
      sub_4D3AA8((uint64_t)(a1 + 1784), (unint64_t *)&__p, v4);
      unint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = (uint64_t)v10;
        int v8 = __p;
        if (v10 != __p)
        {
          do
            uint64_t v7 = sub_4BD604(v7 - 1440);
          while ((void *)v7 != v6);
          int v8 = __p;
        }
        char v10 = v6;
        operator delete(v8);
      }
      v4 += 945;
    }
    while (v4 != v5);
  }
}

void sub_4AF62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AF510((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4AF640(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(result + 1664) = 0xBAA6550FFBAA6551 * (v4 - *a2);
  if ((*(unsigned char *)(result + 1234)
     || *(unsigned char *)(result + 1232)
     || *(unsigned char *)(result + 1233)
     || *(unsigned char *)(result + 1235)
     || *(unsigned char *)(result + 1236)
     || *(unsigned char *)(result + 1237)
     || *(unsigned char *)(result + 1238)
     || *(unsigned char *)(result + 1239)
     || *(unsigned char *)(result + 1242)
     || *(unsigned char *)(result + 1240)
     || *(unsigned char *)(result + 1241)
     || *(unsigned char *)(result + 1641))
    && v3 != v4)
  {
    do
    {
      int v5 = sub_646CE8((uint64_t)v3);
      if (v5 < 0) {
        char v6 = -5;
      }
      else {
        char v6 = 5;
      }
      double v7 = ceil((double)(int)(v5 / 10+ (((103 * (char)(v6 + v5 % 10)) >> 15) & 1)+ ((103 * (char)(v6 + v5 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
      if (v7 >= 0.0)
      {
        if (v7 < 4.50359963e15)
        {
          uint64_t v8 = (uint64_t)(v7 + v7) + 1;
LABEL_26:
          double v7 = (double)(v8 >> 1);
        }
      }
      else if (v7 > -4.50359963e15)
      {
        uint64_t v8 = (uint64_t)(v7 + v7);
        if (v8 >= 1) {
          --v8;
        }
        goto LABEL_26;
      }
      int v9 = (int)v7;
      uint64_t v10 = sub_6477D4((uint64_t)v3);
      if (*(unsigned char *)v10 || *(_DWORD *)(v10 + 52))
      {
        int v19 = *(_DWORD *)(v2 + 1676);
        if (v19 >= v9) {
          int v19 = v9;
        }
        *(_DWORD *)(v2 + 1++*(_DWORD *)(result + 676) = v19;
        if (!*(unsigned char *)(sub_6477D4((uint64_t)v3) + 1))
        {
LABEL_50:
          *(unsigned char *)(v2 + 1673) = 0;
          if (!sub_6488A0(v3)) {
            goto LABEL_38;
          }
LABEL_35:
          int v13 = *(_DWORD *)(v2 + 1688);
          if (v13 >= v9) {
            int v13 = v9;
          }
          *(_DWORD *)(v2 + 1688) = v13;
          goto LABEL_38;
        }
      }
      else
      {
        *(unsigned char *)(v2 + 1672) = 0;
        int v11 = *(_DWORD *)(v2 + 1680);
        if (v11 >= v9) {
          int v11 = v9;
        }
        *(_DWORD *)(v2 + 1680) = v11;
        if (!*(unsigned char *)(sub_6477D4((uint64_t)v3) + 1)) {
          goto LABEL_50;
        }
      }
      int v12 = *(_DWORD *)(v2 + 1684);
      if (v12 >= v9) {
        int v12 = v9;
      }
      *(_DWORD *)(v2 + 1684) = v12;
      if (sub_6488A0(v3)) {
        goto LABEL_35;
      }
LABEL_38:
      if (sub_6487C0(v3))
      {
        int v14 = *(_DWORD *)(v2 + 1692);
        if (v14 >= v9) {
          int v14 = v9;
        }
        *(_DWORD *)(v2 + 1692) = v14;
      }
      uint64_t v15 = sub_64894C(v3);
      double v16 = *(double *)(v2 + 1632);
      double result = sub_646C34(v3);
      double v17 = v16 * (double)result;
      if (v17 >= 0.0)
      {
        if (v17 < 4.50359963e15)
        {
          uint64_t v18 = (uint64_t)(v17 + v17) + 1;
LABEL_54:
          double v17 = (double)(v18 >> 1);
        }
      }
      else if (v17 > -4.50359963e15)
      {
        uint64_t v18 = (uint64_t)(v17 + v17);
        if (v18 >= 1) {
          --v18;
        }
        goto LABEL_54;
      }
      if (v15 >= (uint64_t)v17)
      {
        int v20 = *(_DWORD *)(v2 + 1696);
        if (v20 >= v9) {
          int v20 = v9;
        }
        *(_DWORD *)(v2 + 1696) = v20;
      }
      v3 += 945;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *sub_4AF930@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_4AFB68((uint64_t)a1, a3);
  sub_4AFC28((uint64_t)a1, a2, a3);
  sub_4B03A8((uint64_t)a1, a2, a3);
  sub_4B0C58((uint64_t)a1, a2, a3);
  sub_4B1220((uint64_t)a1, a2, a3);
  sub_4B13E0((uint64_t)a1, a2, a3);
  sub_4B1524((uint64_t)a1, a2, a3);
  sub_4B1798((uint64_t)a1, (uint64_t)a2, a3);
  sub_4B1910((uint64_t)a1, (uint64_t)a2, a3);
  sub_4B1A70((uint64_t)a1, a2, a3);
  uint64_t v6 = nullsub_1(a2);
  double v7 = *(void **)v6;
  uint64_t v8 = *(void **)(v6 + 8);
  if (*(void **)v6 != v8)
  {
    do
    {
      sub_4B1C44(a1, v7, a3);
      v7 += 1541;
    }
    while (v7 != v8);
  }
  int v9 = (int *)a3[1];
  unint64_t v10 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v9 - *a3) >> 5));
  if (v9 == (int *)*a3) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_4C2644(*a3, v9, (uint64_t)&v13, v11, 1);
  return sub_4CA15C(a3);
}

void sub_4AFA8C(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4AFAA0(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4AFAB4(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4AFAC8(uint64_t *a1, int *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v5 = sub_4C05FC(a1, a2);
  }
  else
  {
    int v4 = *a2;
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v3, v4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = v3 + 1440;
    a1[1] = v3 + 1440;
  }
  a1[1] = v5;
  return v5 - 1440;
}

void sub_4AFB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4AFB68(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_DAFB88(a1 + 1248);
  if (result && *(unsigned char *)(a1 + 1653))
  {
    int v6 = 46;
    unint64_t v5 = a2[1];
    if (v5 >= a2[2])
    {
      uint64_t result = sub_4C05FC(a2, &v6);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v5, 46, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t result = v5 + 1440;
      a2[1] = v5 + 1440;
    }
    a2[1] = result;
  }
  return result;
}

void sub_4AFC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4AFC28(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  int v7 = *v6;
  int v8 = *((_DWORD *)v6 + 13);
  int v9 = v6[1];
  int v10 = sub_646CE8((uint64_t)a2);
  if (v10 < 0) {
    char v11 = -5;
  }
  else {
    char v11 = 5;
  }
  double v12 = ceil((double)(int)(v10 / 10+ (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)+ ((103 * (char)(v11 + v10 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_12:
  int v14 = (int)v12;
  if (!*(unsigned char *)(a1 + 1641))
  {
    int v16 = 0;
    goto LABEL_25;
  }
  if (!sub_6477A0((uint64_t)a2))
  {
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v15 = sub_6477D4((uint64_t)a2);
  int v16 = 0;
  if (*(unsigned char *)v15 || *(_DWORD *)(v15 + 52))
  {
LABEL_25:
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  int v17 = *(_DWORD *)(a1 + 1676);
  int v16 = v17 < *(_DWORD *)(a1 + 1680) && v17 < v14;
  if (!*(unsigned char *)(a1 + 1237))
  {
LABEL_30:
    BOOL v19 = 0;
    if (*(unsigned char *)(a1 + 1443)) {
      BOOL v20 = 1;
    }
    else {
      BOOL v20 = (v7 | v8) == 0;
    }
    if (v20) {
      goto LABEL_34;
    }
    goto LABEL_52;
  }
LABEL_26:
  if (*(unsigned char *)(a1 + 1423) || !*(unsigned char *)(a1 + 1672))
  {
    BOOL v19 = 0;
    if (v7 | v8) {
      goto LABEL_48;
    }
LABEL_28:
    v16 |= *(_DWORD *)(a1 + 1676) < v14;
    goto LABEL_34;
  }
  BOOL v19 = *(void *)(a1 + 1664) > 1uLL;
  if (!(v7 | v8)) {
    goto LABEL_28;
  }
LABEL_48:
  if (*(unsigned char *)(a1 + 1443)) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = (v7 | v8) == 0;
  }
  if (v24)
  {
LABEL_34:
    if (*(unsigned char *)(a1 + 1423)) {
      BOOL v21 = (v7 | v8) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (v7) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v8 == 0;
      }
      int v23 = !v22;
      if (v22)
      {
        uint64_t v26 = (const std::string *)sub_648E68((uint64_t)a2);
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        std::string::operator=((std::string *)&v47[1], v26);
      }
      else
      {
        sub_64A4F0(a2, (uint64_t *)&v44);
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        LODWORD(__p.__r_.__value_.__l.__data_) = 1;
        sub_4BD0C8((uint64_t *)&__p.__r_.__value_.__l.__size_, (uint64_t)v44, (uint64_t)v45, 0xCF3CF3CF3CF3CF3DLL * ((v45 - (unsigned char *)v44) >> 3));
      }
      unint64_t v27 = a3[1];
      if (v27 >= a3[2])
      {
        uint64_t v28 = sub_4C1394(a3, (int *)&__p);
      }
      else
      {
        sub_4C14F8((uint64_t)(a3 + 2), a3[1], (int *)&__p);
        uint64_t v28 = v27 + 1440;
        a3[1] = v27 + 1440;
      }
      a3[1] = v28;
      if (SHIBYTE(v48) < 0) {
        operator delete(v47[1]);
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v30 = __p.__r_.__value_.__r.__words[2];
        uint64_t v31 = (void *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
        {
          do
            uint64_t v30 = sub_4BCFD0(v30 - 168);
          while (v30 != size);
          uint64_t v31 = (void *)__p.__r_.__value_.__l.__size_;
        }
        __p.__r_.__value_.__r.__words[2] = size;
        operator delete(v31);
      }
      if (v23)
      {
        BOOL v32 = v44;
        if (v44)
        {
          unint64_t v33 = v45;
          unint64_t v34 = v44;
          if (v45 != v44)
          {
            do
              unint64_t v33 = (unsigned char *)sub_4BCFD0((uint64_t)(v33 - 168));
            while (v33 != v32);
            unint64_t v34 = v44;
          }
          uint64_t v45 = v32;
          operator delete(v34);
        }
      }
    }
    goto LABEL_74;
  }
LABEL_52:
  LODWORD(v44) = 21;
  unint64_t v25 = a3[1];
  if (v25 >= a3[2])
  {
    a3[1] = sub_4C05FC(a3, (int *)&v44);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v25, 21, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v25 + 1440;
    a3[1] = v25 + 1440;
  }
LABEL_74:
  if (!*(unsigned char *)(a1 + 1238))
  {
    if (!v19)
    {
      if (!v16) {
        return;
      }
      goto LABEL_110;
    }
    BOOL v37 = 0;
LABEL_88:
    v49[0] = 0;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 0, &__p);
LABEL_102:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v38 + 1440;
      a3[1] = v38 + 1440;
LABEL_105:
      if ((v16 & v37) == 1) {
        goto LABEL_106;
      }
      goto LABEL_109;
    }
    goto LABEL_108;
  }
  if (!*(unsigned char *)(a1 + 1423))
  {
    int v36 = *(unsigned __int8 *)(a1 + 1673);
    if (*(unsigned char *)(a1 + 1673)) {
      int v36 = *(void *)(a1 + 1664) > 1uLL;
    }
    if (v9)
    {
      BOOL v37 = 0;
      if ((v19 & v36) != 1) {
        goto LABEL_87;
      }
      goto LABEL_100;
    }
LABEL_99:
    BOOL v37 = *(_DWORD *)(a1 + 1684) < v14;
    if ((v19 & v36) != 1) {
      goto LABEL_87;
    }
LABEL_100:
    v49[0] = 2;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 2, &__p);
      goto LABEL_102;
    }
LABEL_108:
    a3[1] = sub_4C05FC(a3, v49);
    if ((v16 & v37) != 1) {
      goto LABEL_109;
    }
    goto LABEL_106;
  }
  if (!v9)
  {
    int v36 = 0;
    goto LABEL_99;
  }
  v49[0] = 13;
  unint64_t v35 = a3[1];
  if (v35 >= a3[2])
  {
    uint64_t v43 = sub_4C05FC(a3, v49);
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v43;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v35, 13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v35 + 1440;
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v35 + 1440;
  }
LABEL_87:
  if (v19) {
    goto LABEL_88;
  }
  if (!v36) {
    goto LABEL_105;
  }
  v49[0] = 1;
  unint64_t v39 = a3[1];
  if (v39 >= a3[2]) {
    goto LABEL_108;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v39, 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v39 + 1440;
  a3[1] = v39 + 1440;
  if ((v16 & v37) != 1)
  {
LABEL_109:
    if ((v16 & 1) == 0)
    {
      if (!v37) {
        return;
      }
      v49[0] = 4;
      unint64_t v41 = a3[1];
      if (v41 < a3[2])
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v41, 4, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = v41 + 1440;
        a3[1] = v41 + 1440;
        goto LABEL_121;
      }
LABEL_120:
      uint64_t v42 = sub_4C05FC(a3, v49);
LABEL_121:
      a3[1] = v42;
      return;
    }
LABEL_110:
    v49[0] = 3;
    unint64_t v40 = a3[1];
    if (v40 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v40, 3, &__p);
      goto LABEL_112;
    }
    goto LABEL_120;
  }
LABEL_106:
  v49[0] = 5;
  unint64_t v40 = a3[1];
  if (v40 >= a3[2]) {
    goto LABEL_120;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v40, 5, &__p);
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v40 + 1440;
  a3[1] = v40 + 1440;
}

void sub_4B02C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 + 8) = v26;
  _Unwind_Resume(exception_object);
}

void sub_4B03A8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!sub_649E28(a2)) {
    return;
  }
  if (sub_64781C((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = 8;
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v7 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v6, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = v6 + 1440;
      a3[1] = v6 + 1440;
    }
    a3[1] = v7;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  int v8 = sub_46CABC(a1 + 1248);
  if (v8 == 0x7FFFFFFF || v8 < *(_DWORD *)(a1 + 1648)) {
    goto LABEL_18;
  }
  int v9 = sub_46CABC(a1 + 1248);
  *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)&v34[24] = 0uLL;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)&v34[8] = 0x7FFFFFFF;
  *(_DWORD *)unint64_t v34 = 9;
  *(_DWORD *)&v34[40] = v9;
  unint64_t v10 = a3[1];
  if (v10 >= a3[2])
  {
    uint64_t v11 = sub_4C1794(a3, (uint64_t)v34);
  }
  else
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    memset(&v35, 0, sizeof(v35));
    sub_4C194C(v10, &v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v10 + 1440;
    a3[1] = v10 + 1440;
  }
  a3[1] = v11;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_18:
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  if (!*(unsigned char *)(a1 + 1537))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = 7;
    unint64_t v12 = a3[1];
    if (v12 >= a3[2])
    {
      uint64_t v13 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v12, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v12 + 1440;
      a3[1] = v12 + 1440;
    }
    a3[1] = v13;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
LABEL_29:
  if (*(unsigned char *)(a1 + 1655) && sub_DAFBF8(a1 + 1248) && sub_DAFF00(a1 + 1248))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = 10;
    unint64_t v14 = a3[1];
    if (v14 >= a3[2])
    {
      uint64_t v15 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v14, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = v14 + 1440;
      a3[1] = v14 + 1440;
    }
    a3[1] = v15;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 1656) && *(unsigned char *)(a1 + 1537) && sub_6477E4((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = 11;
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v17 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v16, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = v16 + 1440;
      a3[1] = v16 + 1440;
    }
    a3[1] = v17;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v18 = sub_404F30(a2);
  if (v18)
  {
    unint64_t v19 = v18;
    if (*(unsigned char *)(a1 + 1537)) {
      goto LABEL_60;
    }
    uint64_t v20 = sub_6467E8(a2, 0);
    BOOL v21 = (const std::string *)sub_64F45C(v20);
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = 1;
    *(void *)&v34[24] = 0;
    *(void *)&v34[32] = v19;
    std::string::operator=(&v35, v21);
    unint64_t v22 = a3[1];
    if (v22 >= a3[2])
    {
      uint64_t v23 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      std::string __p = v35;
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v22, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v22 + 1440;
      a3[1] = v22 + 1440;
    }
    a3[1] = v23;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((sub_648BA8(a2) & 1) == 0)
      {
LABEL_61:
        if (sub_648C50(a2))
        {
          *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
          if (v19 <= 1) {
            int v26 = 2;
          }
          else {
            int v26 = 3;
          }
          *(_OWORD *)&v34[24] = 0uLL;
          *(_DWORD *)&v34[40] = 0x7FFFFFFF;
          memset(&v35, 0, sizeof(v35));
          *(_DWORD *)&v34[8] = 0x7FFFFFFF;
          *(_DWORD *)unint64_t v34 = v26;
          unint64_t v27 = a3[1];
          if (v27 >= a3[2])
          {
            uint64_t v28 = sub_4C1794(a3, (uint64_t)v34);
            int v29 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
            a3[1] = v28;
            if (v29 < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v36 = *(_OWORD *)v34;
            v37[0] = *(_OWORD *)&v34[16];
            *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
            memset(&__p, 0, sizeof(__p));
            sub_4C194C(v27, &v36);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            a3[1] = v27 + 1440;
          }
        }
      }
    }
    else
    {
LABEL_60:
      if ((sub_648BA8(a2) & 1) == 0) {
        goto LABEL_61;
      }
    }
    if (!sub_648D80(a2)) {
      return;
    }
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    if (v19 <= 1) {
      int v30 = 4;
    }
    else {
      int v30 = 5;
    }
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)unint64_t v34 = v30;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      sub_4C194C(v24, &v36);
      goto LABEL_79;
    }
    uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
    goto LABEL_83;
  }
  sub_649B08(a2, (uint64_t)&v32);
  *(_DWORD *)&v34[40] = 0x7FFFFFFF;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)unint64_t v34 = 0;
  *(_OWORD *)&v34[8] = v32;
  *(_OWORD *)&v34[24] = v33;
  unint64_t v24 = a3[1];
  if (v24 < a3[2])
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    sub_4C194C(v24, &v36);
LABEL_79:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v24 + 1440;
    return;
  }
  uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
LABEL_83:
  int v31 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  a3[1] = v25;
  if (v31 < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_4B0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4B0C58(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = sub_646CE8((uint64_t)a2);
  if (v6 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  double v8 = ceil((double)(int)(v6 / 10+ (((103 * (char)(v7 + v6 % 10)) >> 15) & 1)+ ((103 * (char)(v7 + v6 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v8 >= 0.0)
  {
    if (v8 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    if (v8 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_12:
  int v10 = (int)v8;
  if (!*(unsigned char *)(a1 + 1233))
  {
    BOOL v12 = 0;
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  if (!sub_648828(a2) || sub_6488A0(a2))
  {
    BOOL v11 = 0;
    if (sub_648828(a2)) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  BOOL v11 = *(_DWORD *)(a1 + 1688) < v10;
  if (!sub_648828(a2))
  {
LABEL_26:
    BOOL v12 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
LABEL_19:
    if (sub_6487C0(a2))
    {
      BOOL v13 = 0;
      int v14 = 1;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
    else
    {
      int v14 = 0;
      BOOL v13 = *(_DWORD *)(a1 + 1692) < v10;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
LABEL_21:
    BOOL v15 = 0;
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
LABEL_16:
  BOOL v12 = sub_6488A0(a2);
  if (*(unsigned char *)(a1 + 1234)) {
    goto LABEL_19;
  }
LABEL_27:
  BOOL v13 = 0;
  int v14 = 0;
  if (!*(unsigned char *)(a1 + 1232)) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v17 = sub_64894C(a2);
  double v18 = *(double *)(a1 + 1632);
  double v19 = v18 * (double)sub_646C34(a2);
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    if (v19 <= -4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_36:
  if (v17 >= (uint64_t)v19)
  {
    BOOL v15 = 0;
    int v16 = 1;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
  else
  {
    int v16 = 0;
    BOOL v15 = *(_DWORD *)(a1 + 1696) < v10;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 1654))
  {
    int v32 = 47;
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v21, 47, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = v21 + 1440;
      a3[1] = v21 + 1440;
    }
    a3[1] = v22;
  }
LABEL_47:
  int v23 = !v15;
  if (v11 && v13 && (v23 & 1) == 0)
  {
    int v32 = 11;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 11, &__p);
LABEL_63:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v24 + 1440;
      a3[1] = v24 + 1440;
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v11 && v13)
  {
    int v32 = 9;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 9, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v11 | v23) & 1) == 0)
  {
    int v32 = 10;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 10, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v13 | v23) & 1) == 0)
  {
    int v32 = 12;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 12, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (v11)
  {
    int v32 = 6;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 6, &__p);
      goto LABEL_63;
    }
LABEL_66:
    a3[1] = sub_4C05FC(a3, &v32);
    goto LABEL_67;
  }
  if (v13)
  {
    int v31 = 7;
  }
  else
  {
    if (!v15) {
      goto LABEL_67;
    }
    int v31 = 8;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v31;
  sub_4AFAC8(a3, (int *)&__p);
LABEL_67:
  if (v12)
  {
    int v32 = 14;
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v26 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v25, 14, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v26 = v25 + 1440;
      a3[1] = v25 + 1440;
    }
    a3[1] = v26;
  }
  if (v16)
  {
    int v32 = 15;
    unint64_t v27 = a3[1];
    if (v27 >= a3[2])
    {
      uint64_t v28 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v27, 15, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v28 = v27 + 1440;
      a3[1] = v27 + 1440;
    }
    a3[1] = v28;
  }
  if (v14)
  {
    int v32 = 16;
    unint64_t v29 = a3[1];
    if (v29 >= a3[2])
    {
      uint64_t v30 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v29, 16, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v30 = v29 + 1440;
      a3[1] = v29 + 1440;
    }
    a3[1] = v30;
  }
}

void sub_4B11E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B1220(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1643))
  {
    uint64_t v5 = result;
    uint64_t result = sub_648758(a2);
    if (result)
    {
      int v9 = 40;
      unint64_t v6 = a3[1];
      if (v6 >= a3[2])
      {
        uint64_t result = sub_4C05FC(a3, &v9);
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v6, 40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t result = v6 + 1440;
        a3[1] = v6 + 1440;
      }
      a3[1] = result;
    }
    if (*(unsigned char *)(v5 + 1241))
    {
      uint64_t result = sub_6488A0(a2);
      if (result)
      {
        int v9 = 43;
        unint64_t v7 = a3[1];
        if (v7 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v7, 43, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v7 + 1440;
          a3[1] = v7 + 1440;
        }
        a3[1] = result;
      }
    }
    if (*(unsigned char *)(v5 + 1242))
    {
      uint64_t result = sub_6487C0(a2);
      if (result)
      {
        int v9 = 44;
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v8, 44, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v8 + 1440;
          a3[1] = v8 + 1440;
        }
        a3[1] = result;
      }
    }
  }
  return result;
}

void sub_4B139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B13BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B13E0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_64A458(a2, (uint64_t *)&v14);
  uint64_t v4 = (uint64_t)v14;
  if (v14 != (void *)v15)
  {
    sub_4C0EFC((uint64_t *)&v14, (uint64_t)&__p);
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C1014(a3, (uint64_t *)&__p);
    }
    else
    {
      sub_4C1170(a3[1], (uint64_t *)&__p);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    unint64_t v7 = (void **)__p;
    if (__p)
    {
      unint64_t v8 = v13;
      int v9 = __p;
      if (v13 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = __p;
      }
      BOOL v13 = v7;
      operator delete(v9);
    }
    uint64_t v4 = (uint64_t)v14;
  }
  if (v4)
  {
    uint64_t v10 = v15;
    BOOL v11 = (void *)v4;
    if (v15 != v4)
    {
      do
        uint64_t v10 = sub_4BCFD0(v10 - 168);
      while (v10 != v4);
      BOOL v11 = v14;
    }
    uint64_t v15 = v4;
    operator delete(v11);
  }
}

void sub_4B14E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1A668((void **)va);
  sub_4B1DB4((void **)va1);
  _Unwind_Resume(a1);
}

void sub_4B1510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4B1DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B1524(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = sub_6467E8(a2, 0);
  uint64_t v7 = sub_40EFE8(v6);
  unint64_t v8 = (void **)(a1 + 1504);
  if (*(char *)(a1 + 1527) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1512);
    if (v9)
    {
      sub_4200(__p, *v8, v9);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 1527))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v30 = *(void *)(a1 + 1520);
    goto LABEL_7;
  }
  sub_3BDCD8(*(void *)(a1 + 8), *(unsigned int *)(v7 + 32) | ((unint64_t)*(unsigned __int16 *)(v7 + 36) << 32), __p);
LABEL_7:
  uint64_t v10 = (void *)sub_648B60((uint64_t)a2);
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v11 = v10[1];
  if (*v10 == v11)
  {
    double v18 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v12 = *v10 + 680;
    do
    {
      if (!*(unsigned char *)(v12 + 432))
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (sub_604320(v12, 0))
      {
        uint64_t v15 = v12 - 680;
        unint64_t v16 = v27;
        if (v27 >= v28)
        {
          uint64_t v13 = sub_4C1B04((uint64_t *)&v26, v15, (long long *)__p);
        }
        else
        {
          sub_4C1C70(v27, v15, (long long *)__p);
          uint64_t v13 = v16 + 1440;
        }
        unint64_t v27 = v13;
      }
      uint64_t v14 = v12 + 440;
      v12 += 1120;
    }
    while (v14 != v11);
    uint64_t v17 = (uint64_t)v26;
    double v18 = (int *)v27;
  }
  unint64_t v19 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v18 - v17) >> 5));
  if (v18 == (int *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_4C2644(v17, v18, (uint64_t)&v31, v20, 1);
  uint64_t v21 = (uint64_t)v26;
  unint64_t v22 = v27;
  int v31 = a3;
  if (v26 != (void *)v27)
  {
    do
    {
      sub_4C7D04(&v31, v21);
      v21 += 1440;
    }
    while (v21 != v22);
    uint64_t v21 = (uint64_t)v26;
  }
  if (v21)
  {
    uint64_t v23 = v27;
    unint64_t v24 = (void *)v21;
    if (v27 != v21)
    {
      do
        uint64_t v23 = sub_4BD604(v23 - 1440);
      while (v23 != v21);
      unint64_t v24 = v26;
    }
    unint64_t v27 = v21;
    operator delete(v24);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
}

void sub_4B1754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4B1798(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1469))
  {
    uint64_t v5 = result;
    uint64_t result = sub_37B3A8(*(void *)result);
    signed int v7 = *(_DWORD *)result;
    signed int v6 = *(_DWORD *)(result + 4);
    BOOL v8 = *(_DWORD *)result == 0x7FFFFFFF || v6 == 0x7FFFFFFF;
    if (!v8 && v7 > v6)
    {
      int v10 = *(_DWORD *)(result + 8);
      uint64_t result = sub_649094();
      if (!result)
      {
        if (v10 == 1)
        {
          int v11 = sub_638A68(a2);
          char v12 = *(unsigned char *)(v5 + 1644);
          unint64_t v15 = __PAIR64__(v6, v7);
          LODWORD(v16) = 1;
          HIDWORD(v16) = v11;
          char v17 = v12;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        if (!v10)
        {
          char v17 = 0;
          unint64_t v15 = __PAIR64__(v6, v7);
          uint64_t v16 = 0x7FFFFFFF00000000;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        uint64_t result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)&v15);
          sub_188FC78(&v15, (uint64_t)"Unknown timepoint type given.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (v14 < 0) {
            operator delete(__p);
          }
          return sub_111ECAC((uint64_t)&v15);
        }
      }
    }
  }
  return result;
}

void sub_4B18C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_4B1910(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1652))
  {
    uint64_t v4 = result;
    uint64_t result = sub_649094();
    if (!result)
    {
      if (*(unsigned char *)(v4 + 1469))
      {
        uint64_t v5 = (_DWORD *)*a3;
        unint64_t v6 = a3[1];
        if (*a3 != v6)
        {
          do
          {
            int v7 = v5[340];
            if (v7)
            {
              if (v7 == 1)
              {
                int v8 = v5[338];
                BOOL v9 = v8 != 0x7FFFFFFF && v5[339] < v8;
                if (v9 && v5[341] != 0x7FFFFFFF) {
                  return result;
                }
              }
            }
            else
            {
              int v10 = v5[338];
              if (v10 != 0x7FFFFFFF && v5[339] < v10) {
                return result;
              }
            }
            v5 += 360;
          }
          while (v5 != (_DWORD *)v6);
        }
        int v11 = 45;
        if (v6 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v11);
          a3[1] = result;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v6, 45, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v6 + 1440;
          a3[1] = v6 + 1440;
          a3[1] = v6 + 1440;
        }
      }
    }
  }
  return result;
}

void sub_4B1A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B1A70(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_57B058(a1 + 1704, a2, v9);
  if (v9[0] != 50) {
    goto LABEL_10;
  }
  if (sub_605454((uint64_t)v10))
  {
    uint64_t v4 = v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v4 = v10[141];
    }
    if (v4) {
      goto LABEL_10;
    }
  }
  if (v12 != v13 || v14 != 2 || v15 != 12 || v16 != v17) {
    goto LABEL_10;
  }
  if (v20)
  {
    if (v20 != 1 || v18 == 0x7FFFFFFF || v19 >= v18 || v21 == 0x7FFFFFFF) {
      goto LABEL_23;
    }
LABEL_10:
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C83E4(a3, (uint64_t)v9);
    }
    else
    {
      sub_4C8540(a3[1], (uint64_t)v9);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    return sub_4BD604((uint64_t)v9);
  }
  if (v18 != 0x7FFFFFFF && v19 < v18) {
    goto LABEL_10;
  }
LABEL_23:
  uint64_t v8 = v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v8 = v22;
  }
  if (v8 || v24 != -1 || v25 != -1) {
    goto LABEL_10;
  }
  return sub_4BD604((uint64_t)v9);
}

void sub_4B1C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4B1C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4B1C44(unsigned char *a1, void *a2, uint64_t *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  int v15 = 1065353216;
  sub_4B1FDC((uint64_t)a1, (uint64_t)a2, __p);
  unint64_t v6 = sub_46C760(a2);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      sub_4B21EC((uint64_t)a1, a2, i, __p);
  }
  sub_4B255C((uint64_t)a1, a2, __p);
  sub_4B288C((uint64_t)a1, (uint64_t)a2, __p);
  sub_4B29E0((uint64_t)a1, a2, __p);
  sub_4B2A94(a1, (uint64_t)a2, __p);
  if ((void)v14)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)v14;
    do
    {
      ++v8;
      BOOL v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_4C8884(a3, a3[1], (void *)v14, 0, v8);
  int v10 = (void *)v14;
  if ((void)v14)
  {
    do
    {
      unsigned __int8 v11 = (void *)*v10;
      sub_4BD604((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
}

void sub_4B1D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4B1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4B1DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_4B1DB4(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4BCFD0(v3 - 168);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_4B1E10(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_4BCFD0(v4 - 168);
    while ((void *)v4 != v2);
    unint64_t v5 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  operator delete(v5);
  return a1;
}

uint64_t sub_4B1E94(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t v7 = sub_4C81B0(a1, a2);
    a1[1] = v7;
    return v7 - 1440;
  }
  else
  {
    *(_DWORD *)unint64_t v4 = 50;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    sub_4BE498(v4 + 32);
    *(unsigned char *)(v4 + 1152) = 0;
    *(unsigned char *)(v4 + 1199) = 0;
    *(void *)(v4 + 1175) = 0;
    *(_OWORD *)(v4 + 1183) = 0u;
    *(_DWORD *)(v4 + 1200) = 2;
    *(_OWORD *)(v4 + 1208) = 0u;
    *(_OWORD *)(v4 + 1224) = 0u;
    *(_OWORD *)(v4 + 1240) = 0u;
    *(_DWORD *)(v4 + 1256) = 12;
    *(_DWORD *)(v4 + 1264) = 0x7FFFFFFF;
    *(void *)(v4 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)(v4 + 1280) = 0u;
    *(_DWORD *)(v4 + 1296) = 0x7FFFFFFF;
    *(_OWORD *)(v4 + 1304) = 0u;
    *(_OWORD *)(v4 + 1320) = 0u;
    *(_OWORD *)(v4 + 1336) = 0u;
    *(_OWORD *)(v4 + 1352) = xmmword_20E81C0;
    *(unsigned char *)(v4 + 1368) = 0;
    *(void *)(v4 + 1392) = 0;
    *(_OWORD *)(v4 + 1376) = 0u;
    *(void *)(v4 + 1400) = -1;
    *(_DWORD *)(v4 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
    *(void *)(v4 + 1432) = 0;
    *(void *)(v4 + 1416) = 0;
    *(void *)(v4 + 1424) = 0;
    long long v5 = *(_OWORD *)a2;
    *(unsigned char *)(v4 + 1368) = *(unsigned char *)(a2 + 16);
    *(_OWORD *)(v4 + 1352) = v5;
    a1[1] = v4 + 1440;
    a1[1] = v4 + 1440;
    return v4;
  }
}

void sub_4B1FBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_4B1FDC(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1645))
  {
    uint64_t v4 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
    if (v4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v4 / 2400;
      do
      {
        uint64_t v8 = sub_4A5E10((void *)(a2 + 1064), v6);
        if (*(unsigned char *)(v8 + 2160))
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(unsigned __int8 *)(v8 + 2191);
          if ((v10 & 0x80u) != 0) {
            uint64_t v10 = *(void *)(v8 + 2176);
          }
          if (v10)
          {
            int v11 = *(_DWORD *)(v8 + 2192);
            if (v11 == 3)
            {
              if (v6 + 1 < 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5))
              {
                uint64_t v12 = sub_4A5E10((void *)(a2 + 1064), v6 + 1);
                if (sub_4B304C(v9 + 2128, v12 + 2128))
                {
                  memset(&v13, 0, sizeof(v13));
                  std::string::operator=(&v13, (const std::string *)(v9 + 2168));
                  sub_4C9E28(a3, &v13);
                  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v13.__r_.__value_.__l.__data_);
                  }
                }
              }
              int v11 = *(_DWORD *)(v9 + 2192);
            }
            if (v11 == 1)
            {
              memset(&v13, 0, sizeof(v13));
              std::string::operator=(&v13, (const std::string *)(v9 + 2168));
              sub_4C9E28(a3, &v13);
              if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v13.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        ++v6;
      }
      while (v7 != v6);
    }
  }
}

void sub_4B2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B218C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4BD604((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_4B21EC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (int **)sub_46C8EC(a2, a3);
  uint64_t v9 = v8;
  uint64_t v10 = (unsigned __int16 *)((char *)*v8 - **v8);
  if (*v10 >= 0xBu)
  {
    uint64_t v11 = v10[5];
    if (v11)
    {
      if ((*(int *)((char *)*v8 + v11) & 0x208) == 8)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v12 = 41;
        }
        else {
          int v12 = 33;
        }
        LODWORD(__p[0]) = v12;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  std::string v13 = (unsigned __int16 *)((char *)*v9 - **v9);
  if (*v13 >= 0xBu)
  {
    uint64_t v14 = v13[5];
    if (v14)
    {
      if ((*((unsigned char *)*v9 + v14 + 1) & 2) != 0)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v15 = 41;
        }
        else {
          int v15 = 33;
        }
        if (*(unsigned char *)(a1 + 1657)) {
          ++v15;
        }
        LODWORD(__p[0]) = v15;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  unint64_t v16 = (unint64_t)v9[4];
  uint64_t v17 = (int *)sub_2D5D58(*(void *)(a1 + 8), v16 & 0xFFFFFFFFFFFFLL);
  int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x41u && (uint64_t v19 = v18[32]) != 0) {
    int v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    int v20 = 0;
  }
  sub_3BD900(v20, (v16 & 0xFF000000000000) != 0, 1, (uint64_t)&v28);
  int v21 = v28;
  if (v28 != v29)
  {
    sub_3BDCD8(*(void *)(a1 + 8), *((unsigned int *)v9 + 8) | ((unint64_t)*((unsigned __int16 *)v9 + 18) << 32), __p);
    unint64_t v22 = v26;
    if ((v26 & 0x80u) != 0) {
      unint64_t v22 = (unint64_t)__p[1];
    }
    if (v22) {
      sub_26A18((uint64_t)v27, (const char *)__p);
    }
    else {
      sub_26908((uint64_t)v27);
    }
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    sub_480C((uint64_t)__p, *(_DWORD *)(a2[142] + 4 * a3));
  }
  if (v28)
  {
    unsigned __int8 v23 = v29;
    int v24 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v21);
      int v24 = v28;
    }
    unint64_t v29 = v21;
    operator delete(v24);
  }
}

void sub_4B24E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25)
{
  sub_4814((uint64_t)&__p);
  sub_26C4C(&a25);
  sub_1A668((void **)(v25 - 88));
  _Unwind_Resume(a1);
}

void *sub_4B255C(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (void *)sub_46C760(a2);
  if (result)
  {
    unint64_t v7 = sub_46C760(a2);
    if (v7)
    {
      unint64_t v8 = v7;
      int v9 = 0;
      char v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        std::string v13 = (int **)sub_46C8EC(a2, v12);
        int v15 = (char *)*v13;
        unint64_t v16 = (unsigned __int16 *)((char *)*v13 - **v13);
        unsigned int v17 = *v16;
        if (v17 < 0x2F)
        {
          LODWORD(v18) = 0;
          if (*((unsigned char *)v13 + 38)) {
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v18 = v16[23];
          if (v16[23]) {
            LODWORD(v18) = v15[v18] == 9;
          }
          if (*((unsigned char *)v13 + 38))
          {
LABEL_9:
            if (v17 >= 0x47)
            {
              unsigned int v19 = v16[35];
              if (v16[35])
              {
                int v20 = 0x10000;
                int v21 = 2;
                goto LABEL_16;
              }
              goto LABEL_19;
            }
            goto LABEL_20;
          }
        }
        if (v17 >= 0x47)
        {
          unsigned int v19 = v16[35];
          if (v16[35])
          {
            int v20 = 0x8000;
            int v21 = 1;
LABEL_16:
            unsigned int v19 = *(_DWORD *)&v15[v19];
            if ((v19 & v21) != 0) {
              LODWORD(v18) = 1;
            }
            LOBYTE(v19) = (v19 & v20) != 0;
          }
LABEL_19:
          v9 |= v18 ^ 1;
          v10 |= v19;
LABEL_21:
          uint64_t v22 = v16[5];
          if (v22 && (v15[v22 + 2] & 0x20) != 0) {
            v11 += sub_46CCC8(a2, v12, v14);
          }
          goto LABEL_4;
        }
LABEL_20:
        v9 |= v18 ^ 1;
        if (v17 >= 0xB) {
          goto LABEL_21;
        }
LABEL_4:
        if (v8 == ++v12) {
          goto LABEL_25;
        }
      }
    }
    uint64_t v11 = 0;
    char v10 = 0;
    LOBYTE(v9) = 0;
LABEL_25:
    uint64_t v23 = a2[133];
    uint64_t v24 = a2[134];
    if (v23 == v24)
    {
      char v26 = 0;
      goto LABEL_33;
    }
    unint64_t v25 = v24 - v23 - 2400;
    if (v25 >= 0x960)
    {
      char v28 = 0;
      char v29 = 0;
      unint64_t v30 = v25 / 0x960 + 1;
      uint64_t v27 = v23 + 2400 * (v30 & 0x3FFFFFFFFFFFFELL);
      uint64_t v31 = v30 & 0x3FFFFFFFFFFFFELL;
      do
      {
        v28 |= *(void *)(v23 + 568) != -1;
        v29 |= *(void *)(v23 + 2968) != -1;
        v23 += 4800;
        v31 -= 2;
      }
      while (v31);
      char v26 = v29 | v28;
      if (v30 == (v30 & 0x3FFFFFFFFFFFFELL))
      {
LABEL_33:
        uint64_t result = (void *)sub_40EFE8((uint64_t)a2);
        int v32 = (unsigned __int16 *)(*result - *(int *)*result);
        if (*v32 >= 0x2Fu && (uint64_t v33 = v32[23]) != 0)
        {
          v26 |= *(unsigned char *)(*result + v33) == 9;
          if ((v26 & 1) == 0) {
            goto LABEL_39;
          }
        }
        else if ((v26 & 1) == 0)
        {
          goto LABEL_39;
        }
        if (!*(unsigned char *)(a1 + 1234))
        {
          int v35 = 36;
          uint64_t result = sub_4BDD38(a3, &v35);
          if (v9) {
            goto LABEL_40;
          }
          goto LABEL_42;
        }
LABEL_39:
        if (v9)
        {
LABEL_40:
          int v34 = 37;
          goto LABEL_47;
        }
LABEL_42:
        if (v26 & 1 | (*(unsigned char *)(a1 + 1640) == 0 || (v10 & 1) == 0))
        {
          if (v11 <= *(void *)(a1 + 1592)) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }
        int v34 = 38;
LABEL_47:
        int v35 = v34;
        uint64_t result = sub_4BDD38(a3, &v35);
        if (v11 <= *(void *)(a1 + 1592))
        {
LABEL_48:
          if (!*(unsigned char *)(a1 + 1469)) {
            return result;
          }
LABEL_49:
          if (a2[1497] != a2[1498]) {
            return sub_4BFE00(a3, a2 + 1497);
          }
          return result;
        }
LABEL_44:
        int v35 = 25;
        uint64_t result = sub_4BDD38(a3, &v35);
        if (!*(unsigned char *)(a1 + 1469)) {
          return result;
        }
        goto LABEL_49;
      }
    }
    else
    {
      char v26 = 0;
      uint64_t v27 = a2[133];
    }
    do
    {
      v26 |= *(void *)(v27 + 568) != -1;
      v27 += 2400;
    }
    while (v27 != v24);
    goto LABEL_33;
  }
  return result;
}

void sub_4B288C(uint64_t a1, uint64_t a2, void *a3)
{
  std::string __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  sub_4C9954(*(void *)(a2 + 7424), *(void *)(a2 + 7432), (uint64_t)&__p);
  sub_4B2ED4(&__p);
  char v13 = 0;
  v12[0] = &v13;
  v12[1] = a1;
  long long v5 = (unsigned __int8 *)__p;
  unint64_t v6 = (unsigned __int8 *)v15;
  if (__p != v15 && (char *)__p + 24 != v15)
  {
    do
    {
      sub_4C9B0C((uint64_t)v12, v5, v5 + 24);
      unint64_t v8 = v5 + 48;
      v5 += 24;
    }
    while (v8 != v6);
    if (v13)
    {
      LODWORD(v12[0]) = 22;
      sub_4BDD38(a3, (int *)v12);
    }
  }
  int v9 = (char *)__p;
  if (__p)
  {
    char v10 = (void **)v15;
    uint64_t v11 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != (void **)v9);
      uint64_t v11 = __p;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_4B2990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B29A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B29B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B29CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void *sub_4B29E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (void *)sub_46C760(a2);
  if ((unint64_t)result >= 3)
  {
    uint64_t v7 = sub_3777C0(*(void **)a1);
    int v8 = sub_3D34A8(v7, (uint64_t)a2, *(unsigned __int8 *)(a1 + 1440));
    uint64_t v9 = sub_40EFE8((uint64_t)a2);
    unint64_t v12 = *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32);
    uint64_t result = (void *)sub_3D3604(v7, &v12, *(unsigned __int8 *)(a1 + 1440));
    if (result == 2 && v8 != 2)
    {
      int v11 = 35;
      return sub_4BDD38(a3, &v11);
    }
  }
  return result;
}

void *sub_4B2A94(unsigned char *a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 840) && a1[1662])
  {
    int v18 = 17;
    sub_4BDD38(a3, &v18);
  }
  if (*(unsigned __int8 *)(a2 + 805) | *(unsigned __int8 *)(a2 + 807))
  {
    if (*(unsigned char *)(a2 + 806))
    {
      if (a1[1660])
      {
        int v18 = 28;
        sub_4BDD38(a3, &v18);
        int v6 = 1;
        int v7 = 1;
        int v8 = 1;
        goto LABEL_14;
      }
    }
    else if (a1[1660])
    {
      int v18 = 26;
      sub_4BDD38(a3, &v18);
      int v7 = 0;
      int v8 = 0;
      int v6 = 1;
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(a2 + 806) && a1[1660])
  {
    int v18 = 27;
    sub_4BDD38(a3, &v18);
    int v6 = 0;
    int v7 = 0;
    int v8 = 1;
    goto LABEL_14;
  }
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
LABEL_14:
  if (*(unsigned char *)(sub_3AEFFC(a2) + 13)) {
    BOOL v9 = a1[1659] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v10 = sub_46CAA4(a2);
  int v11 = *(_DWORD *)(*(void *)(a2 + 1072) - 2240);
  if (v11 != 16 && (v11 != 39 ? (BOOL v12 = *(unsigned char *)(v10 + 13) == 0) : (BOOL v12 = 0), v12))
  {
    BOOL v13 = 1;
  }
  else
  {
    BOOL v13 = a1[1659] == 0;
    if (a1[1659]) {
      int v14 = v7;
    }
    else {
      int v14 = 1;
    }
    if (((v9 | v14) & 1) == 0)
    {
      if (v8) {
        int v15 = 29;
      }
      else {
        int v15 = 31;
      }
      if (v6) {
        int v15 = 30;
      }
      int v18 = v15;
      sub_4C97D0(a3, &v18);
      goto LABEL_38;
    }
  }
  if ((v6 | v9))
  {
    if ((v8 | v13)) {
      goto LABEL_38;
    }
    int v16 = 30;
  }
  else
  {
    int v16 = 29;
  }
  int v18 = v16;
  sub_4BDD38(a3, &v18);
LABEL_38:
  uint64_t result = (void *)sub_4B2C98((uint64_t)a1, (void *)a2);
  if (result)
  {
    int v18 = 39;
    return sub_4BDD38(a3, &v18);
  }
  return result;
}

uint64_t sub_4B2C98(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 1642) || !sub_46C760(a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = sub_40EFE8((uint64_t)a2);
  sub_3BDCD8(v4, *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), &__p);
  uint64_t v6 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v6 = v19;
  }
  if (v6) {
    sub_26A18((uint64_t)v17, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v17);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = sub_46C8FC((uint64_t)a2);
  sub_3BDCD8(v8, *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32), &__p);
  uint64_t v10 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v10 = v19;
  }
  if (v10) {
    sub_26A18((uint64_t)v16, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v16);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  LODWORD(__p) = sub_46CF04((uint64_t)a2);
  int v11 = *(_DWORD *)(a2[143] - 4);
  int v15 = v11;
  if (__p != 0x7FFFFFFF)
  {
    BOOL v12 = !sub_267E8(v17, (int *)&__p, v16, (int *)&__p);
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_20;
    }
LABEL_22:
    BOOL v13 = !sub_267E8(v17, &v15, v16, &v15);
    goto LABEL_23;
  }
  BOOL v12 = 0;
  if (v11 != 0x7FFFFFFF) {
    goto LABEL_22;
  }
LABEL_20:
  BOOL v13 = 0;
LABEL_23:
  uint64_t v14 = sub_2AA08(v17, v16) & (v12 | v13);
  sub_26C4C((const void **)v16);
  sub_26C4C((const void **)v17);
  return v14;
}

void sub_4B2E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_4B2ED4(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 != v1)
  {
    for (uint64_t i = *a1 + 24; ; i += 24)
    {
      uint64_t v4 = *(unsigned __int8 *)(i - 1);
      if ((v4 & 0x80u) != 0) {
        uint64_t v4 = *(void *)(i - 16);
      }
      if (!v4) {
        break;
      }
      if (i == v1) {
        return;
      }
    }
    uint64_t v6 = i - 24;
    if (i - 24 != v1 && i != v1)
    {
      do
      {
        uint64_t v8 = *(unsigned __int8 *)(i + 23);
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(i + 8);
        }
        if (v8)
        {
          if (*(char *)(v6 + 23) < 0) {
            operator delete(*(void **)v6);
          }
          long long v7 = *(_OWORD *)i;
          *(void *)(v6 + 16) = *(void *)(i + 16);
          *(_OWORD *)uint64_t v6 = v7;
          v6 += 24;
          *(unsigned char *)(i + 23) = 0;
          *(unsigned char *)uint64_t i = 0;
        }
        i += 24;
      }
      while (i != v1);
      uint64_t v1 = a1[1];
    }
    if (v6 != v1)
    {
      while (v1 != v6)
      {
        if (*(char *)(v1 - 1) < 0) {
          operator delete(*(void **)(v1 - 24));
        }
        v1 -= 24;
      }
      a1[1] = v6;
    }
  }
}

uint64_t sub_4B304C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 64) != 3 || *(_DWORD *)(a2 + 64) != 2) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 31);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 95);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 80);
  }
  if (v7 != v8) {
    return 0;
  }
  uint64_t v10 = (const void **)(a1 + 8);
  if (v9 >= 0) {
    int v11 = (unsigned __int8 *)(a2 + 72);
  }
  else {
    int v11 = *(unsigned __int8 **)(a2 + 72);
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v10, v11, *(void *)(a1 + 16))) {
      goto LABEL_22;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6) {
        goto LABEL_22;
      }
    }
    return 0;
  }
LABEL_22:
  uint64_t v12 = *(unsigned __int8 *)(a1 + 95);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    uint64_t v13 = *(void *)(a1 + 80);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 31);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 16);
  }
  if (v13 != v14) {
    return 0;
  }
  int v16 = (const void **)(a1 + 72);
  uint64_t v19 = *(unsigned __int8 **)(a2 + 8);
  int v18 = (unsigned __int8 *)(a2 + 8);
  unsigned int v17 = v19;
  if (v15 >= 0) {
    unsigned __int8 v20 = v18;
  }
  else {
    unsigned __int8 v20 = v17;
  }
  if ((v12 & 0x80) != 0) {
    return memcmp(*v16, v20, *(void *)(a1 + 80)) == 0;
  }
  if (!*(unsigned char *)(a1 + 95)) {
    return 1;
  }
  uint64_t v21 = v12 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v16;
    int v16 = (const void **)((char *)v16 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

uint64_t sub_4B31B0(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "unpaved_road_length_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *(void *)a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "four_wheel_drive_road_length_threshold");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = v8;
    if (v8 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = v8;
    if (v8 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_30:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 >= 4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8) + 1;
    }
    else
    {
      if (v8 <= -4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v8 = (double)(v11 >> 1);
LABEL_41:
    *(void *)(a1 + 8) = (uint64_t)v8;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p);
LABEL_43:
  sub_4B3C74((void *)(a1 + 16), a2);
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B9A20;
  strcpy((char *)__p, "includes_busy_roads_min_busy_roads_relative_length");
  double v12 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v12;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9960;
  strcpy((char *)__p, "enable_shared_with_pedestrians_advisory");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 48) = v13;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B93B0;
  strcpy((char *)__p, "always_flag_faster_route_with_tolls_available");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 49) = v14;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A80;
  strcpy((char *)__p, "enable_different_destination_timezone_advisory");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 50) = v15;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91A0;
  strcpy((char *)__p, "enable_shortened_advisories");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 51) = v16;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "include_future_planning_departure_time");
  BOOL v17 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 52) = v17;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "enable_regional_advisory");
  BOOL v18 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 53) = v18;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "stale_ev_info_cutoff_age");
  *(_DWORD *)(a1 + 56) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9260;
  strcpy((char *)__p, "enable_predicted_traffic_advisory");
  BOOL v19 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v19;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_offline_ev_unavailable_advisory");
  BOOL v20 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 61) = v20;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A40;
  strcpy((char *)__p, "enable_offline_e_bike_unavailable_advisory");
  BOOL v21 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 62) = v21;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8870;
  strcpy((char *)__p, "enable_ev_towing_advisory");
  BOOL v22 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 63) = v22;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_ev_out_of_network_stop_advisory");
  BOOL v23 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 64) = v23;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_railway_shuttle_advisory");
  BOOL v24 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 65) = v24;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9280;
  strcpy((char *)__p, "enable_french_climate_law_advisory");
  BOOL v25 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 66) = v25;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B9800;
  strcpy((char *)__p, "enable_closest_road_advisories");
  BOOL v26 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 67) = v26;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_route_clipped_advisories");
  BOOL v27 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 68) = v27;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_park_and_walk_advisory");
  BOOL v28 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 69) = v28;
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B99E0;
  strcpy((char *)__p, "enable_route_violates_time_based_restriction_advisory");
  BOOL v29 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 70) = v29;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_ford_crossing_advisory");
  BOOL v30 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 71) = v30;
  return a1;
}

void sub_4B3B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1A6DC(v21);
  _Unwind_Resume(a1);
}

void sub_4B3C4C()
{
}

void sub_4B3C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x4B3C44);
}

void sub_4B3C74(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91A0;
  strcpy(*(char **)__p, "suppressed_border_crossings");
  double v4 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  BOOL v23 = 0;
  BOOL v24 = 0;
  uint64_t v25 = 0;
  sub_54DE8(&v23, *v4, v4[1], (v4[1] - *v4) >> 4);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    double v5 = (uint64_t *)v23;
    uint64_t v6 = v24;
    if (v23 == v24) {
      goto LABEL_5;
    }
    while (1)
    {
LABEL_12:
      if (*((_DWORD *)v5 + 2) != 3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v10 = (void *)*v5;
      uint64_t v11 = (_DWORD *)sub_319D38((void *)*v5, 0);
      if (v11[2])
      {
        BOOL v18 = __cxa_allocate_exception(8uLL);
        *BOOL v18 = &off_23FDF58;
      }
      double v12 = *(long long **)v11;
      if (*(char *)(*(void *)v11 + 23) < 0)
      {
        sub_4200(__p, *(void **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v13 = *v12;
        *(void *)&__p[16] = *((void *)v12 + 2);
        *(_OWORD *)std::string __p = v13;
      }
      BOOL v14 = (_DWORD *)sub_319D38(v10, 1uLL);
      if (v14[2])
      {
        BOOL v17 = __cxa_allocate_exception(8uLL);
        *BOOL v17 = &off_23FDF58;
      }
      BOOL v15 = *(long long **)v14;
      if (*(char *)(*(void *)v14 + 23) < 0)
      {
        sub_4200(v20, *(void **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v16 = *v15;
        uint64_t v21 = *((void *)v15 + 2);
        *(_OWORD *)BOOL v20 = v16;
      }
      sub_4BD8C0((uint64_t)a1, (uint64_t)__p, (uint64_t)v20);
      if (SHIBYTE(v21) < 0)
      {
        operator delete(v20[0]);
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_11;
        }
LABEL_23:
        operator delete(*(void **)__p);
        v5 += 2;
        if (v5 == v6)
        {
LABEL_24:
          double v5 = (uint64_t *)v23;
          if (!v23) {
            return;
          }
          goto LABEL_6;
        }
      }
      else
      {
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_23;
        }
LABEL_11:
        v5 += 2;
        if (v5 == v6) {
          goto LABEL_24;
        }
      }
    }
  }
  double v5 = (uint64_t *)v23;
  uint64_t v6 = v24;
  if (v23 != v24) {
    goto LABEL_12;
  }
LABEL_5:
  if (!v5) {
    return;
  }
LABEL_6:
  uint64_t v7 = v24;
  double v8 = v5;
  if (v24 != v5)
  {
    do
    {
      double v9 = v7 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v7 - 2), v7 - 2);
      uint64_t v7 = v9;
    }
    while (v9 != v5);
    double v8 = v23;
  }
  BOOL v24 = v5;
  operator delete(v8);
}

void sub_4B3F3C(_Unwind_Exception *a1)
{
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

void sub_4B3F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_1A6DC(v22);
    _Unwind_Resume(a1);
  }
  sub_1A6DC(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_4B3FD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_4BBDC0(a1 + 16, a4);
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1584) = 1065353216;
  char v20 = 15;
  uint64_t v18 = 0;
  strcpy((char *)v19, "AdvisoryBuilder");
  long long v16 = 0;
  BOOL v17 = 0;
  double v8 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&v16);
  sub_3CB560(v8, (uint64_t)__p);
  sub_4B75E0(a1 + 1592, __p);
  double v9 = v22;
  if (v22)
  {
    do
    {
      BOOL v14 = (void **)*v9;
      sub_55198((uint64_t)(v9 + 5));
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      double v9 = v14;
    }
    while (v14);
  }
  uint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v16;
  if (v16)
  {
    double v12 = v17;
    long long v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      long long v13 = v16;
    }
    BOOL v17 = v11;
    operator delete(v13);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  *(void *)(a1 + 1664) = 0;
  *(_WORD *)(a1 + 1672) = 257;
  *(int32x4_t *)(a1 + 1++*(_DWORD *)(result + 676) = vdupq_n_s32(0x7FFFFFFEu);
  *(void *)(a1 + 1692) = 0x7FFFFFFE7FFFFFFELL;
  sub_57B658(a1 + 1704, a2, a3, a1 + 16);
  sub_4DEBBC(a1 + 1784, a2, a3, a4, a1 + 1704);
  return a1;
}

void sub_4B4198(_Unwind_Exception *a1)
{
  sub_4AF400(v4);
  sub_4AF47C(v3);
  sub_31B778(v1 + 1552);
  sub_4BCED0(v2);
  _Unwind_Resume(a1);
}

void sub_4B41CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_31B778(v19 + 1552);
  sub_4BCED0(v20);
  _Unwind_Resume(a1);
}

void sub_4B4214(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  if (!*(unsigned char *)(a1 + 1658)) {
    goto LABEL_18;
  }
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = qword_255CCE0;
  if (byte_255CCEF >= 0) {
    uint64_t v7 = byte_255CCEF;
  }
  if (v6 != v7) {
    goto LABEL_18;
  }
  if (byte_255CCEF >= 0) {
    double v8 = &qword_255CCD8;
  }
  else {
    double v8 = (uint64_t *)qword_255CCD8;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a2[23])
  {
LABEL_17:
    int v15 = 48;
    long long v13 = (void *)sub_4C05FC((uint64_t *)&__p, &v15);
    goto LABEL_18;
  }
  while (*a2 == *(unsigned __int8 *)v8)
  {
    ++a2;
    double v8 = (uint64_t *)((char *)v8 + 1);
    if (!--v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  sub_4DEBC0(a1 + 1784, (unint64_t *)&__p, a3);
  double v9 = __p;
  if (__p)
  {
    uint64_t v10 = (uint64_t)v13;
    uint64_t v11 = __p;
    if (v13 != __p)
    {
      do
        uint64_t v10 = sub_4BD604(v10 - 1440);
      while ((void *)v10 != v9);
      uint64_t v11 = __p;
    }
    long long v13 = v9;
    operator delete(v11);
  }
}

void sub_4B4338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_4B434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_4B4360(unsigned char *a1, uint64_t **a2)
{
  sub_4AF640((uint64_t)a1, a2);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_4B4434(a1, v4, (uint64_t *)&__p);
      sub_4DF29C((uint64_t)(a1 + 1784), (unint64_t *)&__p, v4);
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = (uint64_t)v10;
        double v8 = __p;
        if (v10 != __p)
        {
          do
            uint64_t v7 = sub_4BD604(v7 - 1440);
          while ((void *)v7 != v6);
          double v8 = __p;
        }
        uint64_t v10 = v6;
        operator delete(v8);
      }
      v4 += 945;
    }
    while (v4 != v5);
  }
}

void sub_4B4420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AF510((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_4B4434@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_4B45CC((uint64_t)a1, a3);
  sub_4B468C((uint64_t)a1, a2, a3);
  sub_4B4E0C((uint64_t)a1, a2, a3);
  sub_4B56BC((uint64_t)a1, a2, a3);
  sub_4B5C84((uint64_t)a1, a2, a3);
  sub_4B5E44((uint64_t)a1, a2, a3);
  sub_4B5F88((uint64_t)a1, a2, a3);
  sub_4B61FC((uint64_t)a1, (uint64_t)a2, a3);
  sub_4B6374((uint64_t)a1, (uint64_t)a2, a3);
  sub_4B64D4((uint64_t)a1, a2, a3);
  uint64_t v6 = nullsub_1(a2);
  uint64_t v7 = *(void **)v6;
  double v8 = *(void **)(v6 + 8);
  if (*(void **)v6 != v8)
  {
    do
    {
      sub_4B66A8(a1, v7, a3);
      v7 += 1541;
    }
    while (v7 != v8);
  }
  double v9 = (int *)a3[1];
  unint64_t v10 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v9 - *a3) >> 5));
  if (v9 == (int *)*a3) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_4C2644(*a3, v9, (uint64_t)&v13, v11, 1);
  return sub_4CA15C(a3);
}

void sub_4B4590(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4B45A4(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4B45B8(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4B45CC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_DAFB88(a1 + 1248);
  if (result && *(unsigned char *)(a1 + 1653))
  {
    int v6 = 46;
    unint64_t v5 = a2[1];
    if (v5 >= a2[2])
    {
      uint64_t result = sub_4C05FC(a2, &v6);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v5, 46, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t result = v5 + 1440;
      a2[1] = v5 + 1440;
    }
    a2[1] = result;
  }
  return result;
}

void sub_4B466C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B468C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  int v7 = *v6;
  int v8 = *((_DWORD *)v6 + 13);
  int v9 = v6[1];
  int v10 = sub_646CE8((uint64_t)a2);
  if (v10 < 0) {
    char v11 = -5;
  }
  else {
    char v11 = 5;
  }
  double v12 = ceil((double)(int)(v10 / 10+ (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)+ ((103 * (char)(v11 + v10 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_12:
  int v14 = (int)v12;
  if (!*(unsigned char *)(a1 + 1641))
  {
    int v16 = 0;
    goto LABEL_25;
  }
  if (!sub_6477A0((uint64_t)a2))
  {
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v15 = sub_6477D4((uint64_t)a2);
  int v16 = 0;
  if (*(unsigned char *)v15 || *(_DWORD *)(v15 + 52))
  {
LABEL_25:
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  int v17 = *(_DWORD *)(a1 + 1676);
  int v16 = v17 < *(_DWORD *)(a1 + 1680) && v17 < v14;
  if (!*(unsigned char *)(a1 + 1237))
  {
LABEL_30:
    BOOL v19 = 0;
    if (*(unsigned char *)(a1 + 1443)) {
      BOOL v20 = 1;
    }
    else {
      BOOL v20 = (v7 | v8) == 0;
    }
    if (v20) {
      goto LABEL_34;
    }
    goto LABEL_52;
  }
LABEL_26:
  if (*(unsigned char *)(a1 + 1423) || !*(unsigned char *)(a1 + 1672))
  {
    BOOL v19 = 0;
    if (v7 | v8) {
      goto LABEL_48;
    }
LABEL_28:
    v16 |= *(_DWORD *)(a1 + 1676) < v14;
    goto LABEL_34;
  }
  BOOL v19 = *(void *)(a1 + 1664) > 1uLL;
  if (!(v7 | v8)) {
    goto LABEL_28;
  }
LABEL_48:
  if (*(unsigned char *)(a1 + 1443)) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = (v7 | v8) == 0;
  }
  if (v24)
  {
LABEL_34:
    if (*(unsigned char *)(a1 + 1423)) {
      BOOL v21 = (v7 | v8) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (v7) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v8 == 0;
      }
      int v23 = !v22;
      if (v22)
      {
        BOOL v26 = (const std::string *)sub_648E68((uint64_t)a2);
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        std::string::operator=((std::string *)&v47[1], v26);
      }
      else
      {
        sub_64809C(a2, (uint64_t *)&v44);
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        LODWORD(__p.__r_.__value_.__l.__data_) = 1;
        sub_4BD0C8((uint64_t *)&__p.__r_.__value_.__l.__size_, (uint64_t)v44, (uint64_t)v45, 0xCF3CF3CF3CF3CF3DLL * ((v45 - (unsigned char *)v44) >> 3));
      }
      unint64_t v27 = a3[1];
      if (v27 >= a3[2])
      {
        uint64_t v28 = sub_4C1394(a3, (int *)&__p);
      }
      else
      {
        sub_4C14F8((uint64_t)(a3 + 2), a3[1], (int *)&__p);
        uint64_t v28 = v27 + 1440;
        a3[1] = v27 + 1440;
      }
      a3[1] = v28;
      if (SHIBYTE(v48) < 0) {
        operator delete(v47[1]);
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v30 = __p.__r_.__value_.__r.__words[2];
        uint64_t v31 = (void *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
        {
          do
            uint64_t v30 = sub_4BCFD0(v30 - 168);
          while (v30 != size);
          uint64_t v31 = (void *)__p.__r_.__value_.__l.__size_;
        }
        __p.__r_.__value_.__r.__words[2] = size;
        operator delete(v31);
      }
      if (v23)
      {
        int v32 = v44;
        if (v44)
        {
          long long v33 = v45;
          int v34 = v44;
          if (v45 != v44)
          {
            do
              long long v33 = (unsigned char *)sub_4BCFD0((uint64_t)(v33 - 168));
            while (v33 != v32);
            int v34 = v44;
          }
          uint64_t v45 = v32;
          operator delete(v34);
        }
      }
    }
    goto LABEL_74;
  }
LABEL_52:
  LODWORD(v44) = 21;
  unint64_t v25 = a3[1];
  if (v25 >= a3[2])
  {
    a3[1] = sub_4C05FC(a3, (int *)&v44);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v25, 21, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v25 + 1440;
    a3[1] = v25 + 1440;
  }
LABEL_74:
  if (!*(unsigned char *)(a1 + 1238))
  {
    if (!v19)
    {
      if (!v16) {
        return;
      }
      goto LABEL_110;
    }
    BOOL v37 = 0;
LABEL_88:
    v49[0] = 0;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 0, &__p);
LABEL_102:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v38 + 1440;
      a3[1] = v38 + 1440;
LABEL_105:
      if ((v16 & v37) == 1) {
        goto LABEL_106;
      }
      goto LABEL_109;
    }
    goto LABEL_108;
  }
  if (!*(unsigned char *)(a1 + 1423))
  {
    int v36 = *(unsigned __int8 *)(a1 + 1673);
    if (*(unsigned char *)(a1 + 1673)) {
      int v36 = *(void *)(a1 + 1664) > 1uLL;
    }
    if (v9)
    {
      BOOL v37 = 0;
      if ((v19 & v36) != 1) {
        goto LABEL_87;
      }
      goto LABEL_100;
    }
LABEL_99:
    BOOL v37 = *(_DWORD *)(a1 + 1684) < v14;
    if ((v19 & v36) != 1) {
      goto LABEL_87;
    }
LABEL_100:
    v49[0] = 2;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 2, &__p);
      goto LABEL_102;
    }
LABEL_108:
    a3[1] = sub_4C05FC(a3, v49);
    if ((v16 & v37) != 1) {
      goto LABEL_109;
    }
    goto LABEL_106;
  }
  if (!v9)
  {
    int v36 = 0;
    goto LABEL_99;
  }
  v49[0] = 13;
  unint64_t v35 = a3[1];
  if (v35 >= a3[2])
  {
    uint64_t v43 = sub_4C05FC(a3, v49);
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v43;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v35, 13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v35 + 1440;
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v35 + 1440;
  }
LABEL_87:
  if (v19) {
    goto LABEL_88;
  }
  if (!v36) {
    goto LABEL_105;
  }
  v49[0] = 1;
  unint64_t v39 = a3[1];
  if (v39 >= a3[2]) {
    goto LABEL_108;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v39, 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v39 + 1440;
  a3[1] = v39 + 1440;
  if ((v16 & v37) != 1)
  {
LABEL_109:
    if ((v16 & 1) == 0)
    {
      if (!v37) {
        return;
      }
      v49[0] = 4;
      unint64_t v41 = a3[1];
      if (v41 < a3[2])
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v41, 4, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = v41 + 1440;
        a3[1] = v41 + 1440;
        goto LABEL_121;
      }
LABEL_120:
      uint64_t v42 = sub_4C05FC(a3, v49);
LABEL_121:
      a3[1] = v42;
      return;
    }
LABEL_110:
    v49[0] = 3;
    unint64_t v40 = a3[1];
    if (v40 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v40, 3, &__p);
      goto LABEL_112;
    }
    goto LABEL_120;
  }
LABEL_106:
  v49[0] = 5;
  unint64_t v40 = a3[1];
  if (v40 >= a3[2]) {
    goto LABEL_120;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v40, 5, &__p);
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v40 + 1440;
  a3[1] = v40 + 1440;
}

void sub_4B4D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 + 8) = v26;
  _Unwind_Resume(exception_object);
}

void sub_4B4E0C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!sub_647280((uint64_t)a2)) {
    return;
  }
  if (sub_64781C((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 8;
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v7 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v6, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = v6 + 1440;
      a3[1] = v6 + 1440;
    }
    a3[1] = v7;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  int v8 = sub_46CABC(a1 + 1248);
  if (v8 == 0x7FFFFFFF || v8 < *(_DWORD *)(a1 + 1648)) {
    goto LABEL_18;
  }
  int v9 = sub_46CABC(a1 + 1248);
  *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)&v34[24] = 0uLL;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)&v34[8] = 0x7FFFFFFF;
  *(_DWORD *)int v34 = 9;
  *(_DWORD *)&v34[40] = v9;
  unint64_t v10 = a3[1];
  if (v10 >= a3[2])
  {
    uint64_t v11 = sub_4C1794(a3, (uint64_t)v34);
  }
  else
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    memset(&v35, 0, sizeof(v35));
    sub_4C194C(v10, &v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v10 + 1440;
    a3[1] = v10 + 1440;
  }
  a3[1] = v11;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_18:
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  if (!*(unsigned char *)(a1 + 1537))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 7;
    unint64_t v12 = a3[1];
    if (v12 >= a3[2])
    {
      uint64_t v13 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v12, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v12 + 1440;
      a3[1] = v12 + 1440;
    }
    a3[1] = v13;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
LABEL_29:
  if (*(unsigned char *)(a1 + 1655) && sub_DAFBF8(a1 + 1248) && sub_DAFF00(a1 + 1248))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 10;
    unint64_t v14 = a3[1];
    if (v14 >= a3[2])
    {
      uint64_t v15 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v14, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = v14 + 1440;
      a3[1] = v14 + 1440;
    }
    a3[1] = v15;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 1656) && *(unsigned char *)(a1 + 1537) && sub_6477E4((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 11;
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v17 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v16, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = v16 + 1440;
      a3[1] = v16 + 1440;
    }
    a3[1] = v17;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v18 = sub_404F30(a2);
  if (v18)
  {
    unint64_t v19 = v18;
    if (*(unsigned char *)(a1 + 1537)) {
      goto LABEL_60;
    }
    uint64_t v20 = sub_6467E8(a2, 0);
    BOOL v21 = (const std::string *)sub_64F45C(v20);
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 1;
    *(void *)&v34[24] = 0;
    *(void *)&v34[32] = v19;
    std::string::operator=(&v35, v21);
    unint64_t v22 = a3[1];
    if (v22 >= a3[2])
    {
      uint64_t v23 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      std::string __p = v35;
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v22, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v22 + 1440;
      a3[1] = v22 + 1440;
    }
    a3[1] = v23;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((sub_648BA8(a2) & 1) == 0)
      {
LABEL_61:
        if (sub_648C50(a2))
        {
          *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
          if (v19 <= 1) {
            int v26 = 2;
          }
          else {
            int v26 = 3;
          }
          *(_OWORD *)&v34[24] = 0uLL;
          *(_DWORD *)&v34[40] = 0x7FFFFFFF;
          memset(&v35, 0, sizeof(v35));
          *(_DWORD *)&v34[8] = 0x7FFFFFFF;
          *(_DWORD *)int v34 = v26;
          unint64_t v27 = a3[1];
          if (v27 >= a3[2])
          {
            uint64_t v28 = sub_4C1794(a3, (uint64_t)v34);
            int v29 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
            a3[1] = v28;
            if (v29 < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v36 = *(_OWORD *)v34;
            v37[0] = *(_OWORD *)&v34[16];
            *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
            memset(&__p, 0, sizeof(__p));
            sub_4C194C(v27, &v36);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            a3[1] = v27 + 1440;
          }
        }
      }
    }
    else
    {
LABEL_60:
      if ((sub_648BA8(a2) & 1) == 0) {
        goto LABEL_61;
      }
    }
    if (!sub_648D80(a2)) {
      return;
    }
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    if (v19 <= 1) {
      int v30 = 4;
    }
    else {
      int v30 = 5;
    }
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = v30;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      sub_4C194C(v24, &v36);
      goto LABEL_79;
    }
    uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
    goto LABEL_83;
  }
  sub_646F60(a2, (uint64_t)&v32);
  *(_DWORD *)&v34[40] = 0x7FFFFFFF;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)int v34 = 0;
  *(_OWORD *)&v34[8] = v32;
  *(_OWORD *)&v34[24] = v33;
  unint64_t v24 = a3[1];
  if (v24 < a3[2])
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    sub_4C194C(v24, &v36);
LABEL_79:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v24 + 1440;
    return;
  }
  uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
LABEL_83:
  int v31 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  a3[1] = v25;
  if (v31 < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_4B5534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4B56BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = sub_646CE8((uint64_t)a2);
  if (v6 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  double v8 = ceil((double)(int)(v6 / 10+ (((103 * (char)(v7 + v6 % 10)) >> 15) & 1)+ ((103 * (char)(v7 + v6 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v8 >= 0.0)
  {
    if (v8 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    if (v8 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_12:
  int v10 = (int)v8;
  if (!*(unsigned char *)(a1 + 1233))
  {
    BOOL v12 = 0;
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  if (!sub_648828(a2) || sub_6488A0(a2))
  {
    BOOL v11 = 0;
    if (sub_648828(a2)) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  BOOL v11 = *(_DWORD *)(a1 + 1688) < v10;
  if (!sub_648828(a2))
  {
LABEL_26:
    BOOL v12 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
LABEL_19:
    if (sub_6487C0(a2))
    {
      BOOL v13 = 0;
      int v14 = 1;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
    else
    {
      int v14 = 0;
      BOOL v13 = *(_DWORD *)(a1 + 1692) < v10;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
LABEL_21:
    BOOL v15 = 0;
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
LABEL_16:
  BOOL v12 = sub_6488A0(a2);
  if (*(unsigned char *)(a1 + 1234)) {
    goto LABEL_19;
  }
LABEL_27:
  BOOL v13 = 0;
  int v14 = 0;
  if (!*(unsigned char *)(a1 + 1232)) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v17 = sub_64894C(a2);
  double v18 = *(double *)(a1 + 1632);
  double v19 = v18 * (double)sub_646C34(a2);
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    if (v19 <= -4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_36:
  if (v17 >= (uint64_t)v19)
  {
    BOOL v15 = 0;
    int v16 = 1;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
  else
  {
    int v16 = 0;
    BOOL v15 = *(_DWORD *)(a1 + 1696) < v10;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 1654))
  {
    int v32 = 47;
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v21, 47, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = v21 + 1440;
      a3[1] = v21 + 1440;
    }
    a3[1] = v22;
  }
LABEL_47:
  int v23 = !v15;
  if (v11 && v13 && (v23 & 1) == 0)
  {
    int v32 = 11;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 11, &__p);
LABEL_63:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v24 + 1440;
      a3[1] = v24 + 1440;
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v11 && v13)
  {
    int v32 = 9;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 9, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v11 | v23) & 1) == 0)
  {
    int v32 = 10;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 10, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v13 | v23) & 1) == 0)
  {
    int v32 = 12;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 12, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (v11)
  {
    int v32 = 6;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 6, &__p);
      goto LABEL_63;
    }
LABEL_66:
    a3[1] = sub_4C05FC(a3, &v32);
    goto LABEL_67;
  }
  if (v13)
  {
    int v31 = 7;
  }
  else
  {
    if (!v15) {
      goto LABEL_67;
    }
    int v31 = 8;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v31;
  sub_4AFAC8(a3, (int *)&__p);
LABEL_67:
  if (v12)
  {
    int v32 = 14;
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v26 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v25, 14, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v26 = v25 + 1440;
      a3[1] = v25 + 1440;
    }
    a3[1] = v26;
  }
  if (v16)
  {
    int v32 = 15;
    unint64_t v27 = a3[1];
    if (v27 >= a3[2])
    {
      uint64_t v28 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v27, 15, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v28 = v27 + 1440;
      a3[1] = v27 + 1440;
    }
    a3[1] = v28;
  }
  if (v14)
  {
    int v32 = 16;
    unint64_t v29 = a3[1];
    if (v29 >= a3[2])
    {
      uint64_t v30 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v29, 16, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v30 = v29 + 1440;
      a3[1] = v29 + 1440;
    }
    a3[1] = v30;
  }
}

void sub_4B5C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B5C84(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1643))
  {
    uint64_t v5 = result;
    uint64_t result = sub_648758(a2);
    if (result)
    {
      int v9 = 40;
      unint64_t v6 = a3[1];
      if (v6 >= a3[2])
      {
        uint64_t result = sub_4C05FC(a3, &v9);
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v6, 40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t result = v6 + 1440;
        a3[1] = v6 + 1440;
      }
      a3[1] = result;
    }
    if (*(unsigned char *)(v5 + 1241))
    {
      uint64_t result = sub_6488A0(a2);
      if (result)
      {
        int v9 = 43;
        unint64_t v7 = a3[1];
        if (v7 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v7, 43, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v7 + 1440;
          a3[1] = v7 + 1440;
        }
        a3[1] = result;
      }
    }
    if (*(unsigned char *)(v5 + 1242))
    {
      uint64_t result = sub_6487C0(a2);
      if (result)
      {
        int v9 = 44;
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v8, 44, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v8 + 1440;
          a3[1] = v8 + 1440;
        }
        a3[1] = result;
      }
    }
  }
  return result;
}

void sub_4B5E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B5E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B5E44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_647F18(a2, (uint64_t *)&v14);
  uint64_t v4 = (uint64_t)v14;
  if (v14 != (void *)v15)
  {
    sub_4CA294((uint64_t *)&v14, (uint64_t)&__p);
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C1014(a3, (uint64_t *)&__p);
    }
    else
    {
      sub_4C1170(a3[1], (uint64_t *)&__p);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    unint64_t v7 = (void **)__p;
    if (__p)
    {
      unint64_t v8 = v13;
      int v9 = __p;
      if (v13 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = __p;
      }
      BOOL v13 = v7;
      operator delete(v9);
    }
    uint64_t v4 = (uint64_t)v14;
  }
  if (v4)
  {
    uint64_t v10 = v15;
    BOOL v11 = (void *)v4;
    if (v15 != v4)
    {
      do
        uint64_t v10 = sub_4BCFD0(v10 - 168);
      while (v10 != v4);
      BOOL v11 = v14;
    }
    uint64_t v15 = v4;
    operator delete(v11);
  }
}

void sub_4B5F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1A668((void **)va);
  sub_4B1DB4((void **)va1);
  _Unwind_Resume(a1);
}

void sub_4B5F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4B1DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B5F88(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = sub_6467E8(a2, 0);
  uint64_t v7 = sub_40EFE8(v6);
  unint64_t v8 = (void **)(a1 + 1504);
  if (*(char *)(a1 + 1527) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1512);
    if (v9)
    {
      sub_4200(__p, *v8, v9);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 1527))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v30 = *(void *)(a1 + 1520);
    goto LABEL_7;
  }
  sub_3BDCD8(*(void *)(a1 + 8), *(unsigned int *)(v7 + 32) | ((unint64_t)*(unsigned __int16 *)(v7 + 36) << 32), __p);
LABEL_7:
  uint64_t v10 = (void *)sub_648B60((uint64_t)a2);
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v11 = v10[1];
  if (*v10 == v11)
  {
    double v18 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v12 = *v10 + 680;
    do
    {
      if (!*(unsigned char *)(v12 + 432))
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (sub_604320(v12, 0))
      {
        uint64_t v15 = v12 - 680;
        unint64_t v16 = v27;
        if (v27 >= v28)
        {
          uint64_t v13 = sub_4C1B04((uint64_t *)&v26, v15, (long long *)__p);
        }
        else
        {
          sub_4C1C70(v27, v15, (long long *)__p);
          uint64_t v13 = v16 + 1440;
        }
        unint64_t v27 = v13;
      }
      uint64_t v14 = v12 + 440;
      v12 += 1120;
    }
    while (v14 != v11);
    uint64_t v17 = (uint64_t)v26;
    double v18 = (int *)v27;
  }
  unint64_t v19 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v18 - v17) >> 5));
  if (v18 == (int *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_4C2644(v17, v18, (uint64_t)&v31, v20, 1);
  uint64_t v21 = (uint64_t)v26;
  unint64_t v22 = v27;
  int v31 = a3;
  if (v26 != (void *)v27)
  {
    do
    {
      sub_4C7D04(&v31, v21);
      v21 += 1440;
    }
    while (v21 != v22);
    uint64_t v21 = (uint64_t)v26;
  }
  if (v21)
  {
    uint64_t v23 = v27;
    unint64_t v24 = (void *)v21;
    if (v27 != v21)
    {
      do
        uint64_t v23 = sub_4BD604(v23 - 1440);
      while (v23 != v21);
      unint64_t v24 = v26;
    }
    unint64_t v27 = v21;
    operator delete(v24);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
}

void sub_4B61B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4B61FC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1469))
  {
    uint64_t v5 = result;
    uint64_t result = sub_37B3A8(*(void *)result);
    signed int v7 = *(_DWORD *)result;
    signed int v6 = *(_DWORD *)(result + 4);
    BOOL v8 = *(_DWORD *)result == 0x7FFFFFFF || v6 == 0x7FFFFFFF;
    if (!v8 && v7 > v6)
    {
      int v10 = *(_DWORD *)(result + 8);
      uint64_t result = sub_35E640();
      if (!result)
      {
        if (v10 == 1)
        {
          int v11 = sub_638A68(a2);
          char v12 = *(unsigned char *)(v5 + 1644);
          unint64_t v15 = __PAIR64__(v6, v7);
          LODWORD(v16) = 1;
          HIDWORD(v16) = v11;
          char v17 = v12;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        if (!v10)
        {
          char v17 = 0;
          unint64_t v15 = __PAIR64__(v6, v7);
          uint64_t v16 = 0x7FFFFFFF00000000;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        uint64_t result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)&v15);
          sub_188FC78(&v15, (uint64_t)"Unknown timepoint type given.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (v14 < 0) {
            operator delete(__p);
          }
          return sub_111ECAC((uint64_t)&v15);
        }
      }
    }
  }
  return result;
}

void sub_4B6328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_4B6374(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1652))
  {
    uint64_t v4 = result;
    uint64_t result = sub_35E640();
    if (!result)
    {
      if (*(unsigned char *)(v4 + 1469))
      {
        uint64_t v5 = (_DWORD *)*a3;
        unint64_t v6 = a3[1];
        if (*a3 != v6)
        {
          do
          {
            int v7 = v5[340];
            if (v7)
            {
              if (v7 == 1)
              {
                int v8 = v5[338];
                BOOL v9 = v8 != 0x7FFFFFFF && v5[339] < v8;
                if (v9 && v5[341] != 0x7FFFFFFF) {
                  return result;
                }
              }
            }
            else
            {
              int v10 = v5[338];
              if (v10 != 0x7FFFFFFF && v5[339] < v10) {
                return result;
              }
            }
            v5 += 360;
          }
          while (v5 != (_DWORD *)v6);
        }
        int v11 = 45;
        if (v6 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v11);
          a3[1] = result;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v6, 45, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v6 + 1440;
          a3[1] = v6 + 1440;
          a3[1] = v6 + 1440;
        }
      }
    }
  }
  return result;
}

void sub_4B64B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B64D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_57AE34(a1 + 1704, a2, v9);
  if (v9[0] != 50) {
    goto LABEL_10;
  }
  if (sub_605454((uint64_t)v10))
  {
    uint64_t v4 = v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v4 = v10[141];
    }
    if (v4) {
      goto LABEL_10;
    }
  }
  if (v12 != v13 || v14 != 2 || v15 != 12 || v16 != v17) {
    goto LABEL_10;
  }
  if (v20)
  {
    if (v20 != 1 || v18 == 0x7FFFFFFF || v19 >= v18 || v21 == 0x7FFFFFFF) {
      goto LABEL_23;
    }
LABEL_10:
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C83E4(a3, (uint64_t)v9);
    }
    else
    {
      sub_4C8540(a3[1], (uint64_t)v9);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    return sub_4BD604((uint64_t)v9);
  }
  if (v18 != 0x7FFFFFFF && v19 < v18) {
    goto LABEL_10;
  }
LABEL_23:
  uint64_t v8 = v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v8 = v22;
  }
  if (v8 || v24 != -1 || v25 != -1) {
    goto LABEL_10;
  }
  return sub_4BD604((uint64_t)v9);
}

void sub_4B6674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4B6690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4B66A8(unsigned char *a1, void *a2, uint64_t *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  int v15 = 1065353216;
  sub_4B6818((uint64_t)a1, (uint64_t)a2, __p);
  unint64_t v6 = sub_46C760(a2);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      sub_4B69C8((uint64_t)a1, a2, i, __p);
  }
  sub_4B6D38((uint64_t)a1, a2, __p);
  sub_4B6F98((uint64_t)a1, (uint64_t)a2, __p);
  sub_4B70EC((uint64_t)a1, a2, __p);
  sub_4B71A0(a1, (uint64_t)a2, __p);
  if ((void)v14)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)v14;
    do
    {
      ++v8;
      BOOL v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_4C8884(a3, a3[1], (void *)v14, 0, v8);
  int v10 = (void *)v14;
  if ((void)v14)
  {
    do
    {
      unsigned __int8 v11 = (void *)*v10;
      sub_4BD604((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
}

void sub_4B67DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4B67F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4B6804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4B6818(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1645))
  {
    uint64_t v4 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
    if (v4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v4 / 2400;
      do
      {
        uint64_t v8 = sub_4A5E10((void *)(a2 + 1064), v6);
        if (*(unsigned char *)(v8 + 2160))
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(unsigned __int8 *)(v8 + 2191);
          if ((v10 & 0x80u) != 0) {
            uint64_t v10 = *(void *)(v8 + 2176);
          }
          if (v10)
          {
            int v11 = *(_DWORD *)(v8 + 2192);
            if (v11 == 3)
            {
              if (v6 + 1 < 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5))
              {
                uint64_t v12 = sub_4A5E10((void *)(a2 + 1064), v6 + 1);
                if (sub_4B304C(v9 + 2128, v12 + 2128))
                {
                  memset(&v13, 0, sizeof(v13));
                  std::string::operator=(&v13, (const std::string *)(v9 + 2168));
                  sub_4C9E28(a3, &v13);
                  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v13.__r_.__value_.__l.__data_);
                  }
                }
              }
              int v11 = *(_DWORD *)(v9 + 2192);
            }
            if (v11 == 1)
            {
              memset(&v13, 0, sizeof(v13));
              std::string::operator=(&v13, (const std::string *)(v9 + 2168));
              sub_4C9E28(a3, &v13);
              if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v13.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        ++v6;
      }
      while (v7 != v6);
    }
  }
}

void sub_4B69A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4B69C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (int **)sub_46C8EC(a2, a3);
  uint64_t v9 = v8;
  uint64_t v10 = (unsigned __int16 *)((char *)*v8 - **v8);
  if (*v10 >= 0xBu)
  {
    uint64_t v11 = v10[5];
    if (v11)
    {
      if ((*(int *)((char *)*v8 + v11) & 0x208) == 8)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v12 = 41;
        }
        else {
          int v12 = 33;
        }
        LODWORD(__p[0]) = v12;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  std::string v13 = (unsigned __int16 *)((char *)*v9 - **v9);
  if (*v13 >= 0xBu)
  {
    uint64_t v14 = v13[5];
    if (v14)
    {
      if ((*((unsigned char *)*v9 + v14 + 1) & 2) != 0)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v15 = 41;
        }
        else {
          int v15 = 33;
        }
        if (*(unsigned char *)(a1 + 1657)) {
          ++v15;
        }
        LODWORD(__p[0]) = v15;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  unint64_t v16 = (unint64_t)v9[4];
  uint64_t v17 = (int *)sub_2D5D58(*(void *)(a1 + 8), v16 & 0xFFFFFFFFFFFFLL);
  int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x41u && (uint64_t v19 = v18[32]) != 0) {
    int v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    int v20 = 0;
  }
  sub_3BD900(v20, (v16 & 0xFF000000000000) != 0, 1, (uint64_t)&v28);
  int v21 = v28;
  if (v28 != v29)
  {
    sub_3BDCD8(*(void *)(a1 + 8), *((unsigned int *)v9 + 8) | ((unint64_t)*((unsigned __int16 *)v9 + 18) << 32), __p);
    unint64_t v22 = v26;
    if ((v26 & 0x80u) != 0) {
      unint64_t v22 = (unint64_t)__p[1];
    }
    if (v22) {
      sub_26A18((uint64_t)v27, (const char *)__p);
    }
    else {
      sub_26908((uint64_t)v27);
    }
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    sub_480C((uint64_t)__p, *(_DWORD *)(a2[142] + 4 * a3));
  }
  if (v28)
  {
    unsigned __int8 v23 = v29;
    int v24 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v21);
      int v24 = v28;
    }
    unint64_t v29 = v21;
    operator delete(v24);
  }
}

void sub_4B6CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25)
{
  sub_4814((uint64_t)&__p);
  sub_26C4C(&a25);
  sub_1A668((void **)(v25 - 88));
  _Unwind_Resume(a1);
}

unint64_t sub_4B6D38(uint64_t a1, void *a2, void *a3)
{
  unint64_t result = sub_46C760(a2);
  if (!result)
  {
    char v9 = 0;
    uint64_t v11 = 0;
    if (*(uint64_t *)(a1 + 1592) < 0) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  unint64_t v7 = result;
  char v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  for (unint64_t i = 0; i != v7; ++i)
  {
    while (1)
    {
      unint64_t result = sub_46C8EC(a2, i);
      uint64_t v14 = (char **)result;
      int v15 = *(char **)result;
      uint64_t v16 = **(int **)result;
      uint64_t v17 = -v16;
      int v18 = (unsigned __int16 *)(*(void *)result - v16);
      unsigned int v19 = *v18;
      if (*(unsigned char *)(result + 38))
      {
        if (v19 < 0xB) {
          goto LABEL_13;
        }
        unsigned int v20 = v18[5];
        if (!v20)
        {
          char v8 = 1;
LABEL_16:
          unsigned __int8 v23 = &v15[v17];
          if (*(unsigned __int16 *)&v15[v17] < 0xBu) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
        int v21 = 2;
      }
      else if (v19 < 0xB || (unsigned int v20 = v18[5], v21 = 1, !v20))
      {
LABEL_13:
        char v8 = 1;
        unsigned __int8 v23 = &v15[v17];
        if (*(unsigned __int16 *)&v15[v17] < 0xBu) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      int v22 = *(_DWORD *)&v15[v20];
      v8 |= (v22 & v21) == 0;
      if ((v22 & 0x200000) == 0) {
        goto LABEL_16;
      }
      unint64_t result = sub_46CCC8(a2, i, v13);
      v10 += result;
      int v15 = *v14;
      uint64_t v17 = -(uint64_t)*(int *)*v14;
      unsigned __int8 v23 = &(*v14)[-*(int *)*v14];
      if (*(unsigned __int16 *)v23 < 0xBu) {
        goto LABEL_20;
      }
LABEL_17:
      uint64_t v24 = *((unsigned __int16 *)v23 + 5);
      if (v24 && v15[v24 + 2] < 0)
      {
        unint64_t result = sub_46CCC8(a2, i, v13);
        v11 += result;
        int v15 = *v14;
        uint64_t v17 = -(uint64_t)*(int *)*v14;
      }
LABEL_20:
      uint64_t v25 = &v15[v17];
      if (*(unsigned __int16 *)v25 >= 0x2Fu)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 23);
        if (v26) {
          break;
        }
      }
      if (v7 == ++i) {
        goto LABEL_23;
      }
    }
    v9 |= v15[v26] == 21;
  }
LABEL_23:
  if ((v8 & 1) != 0 && *(unsigned char *)(a1 + 1661))
  {
    int v27 = 32;
    unint64_t result = (unint64_t)sub_4BDD38(a3, &v27);
  }
  if (v10 > *(void *)(a1 + 1592))
  {
LABEL_27:
    int v27 = 25;
    unint64_t result = (unint64_t)sub_4BDD38(a3, &v27);
    if (v11 <= *(void *)(a1 + 1600)) {
      goto LABEL_28;
    }
LABEL_32:
    int v27 = 24;
    unint64_t result = (unint64_t)sub_4BDD38(a3, &v27);
    if (v9) {
      goto LABEL_33;
    }
    return result;
  }
LABEL_31:
  if (v11 > *(void *)(a1 + 1600)) {
    goto LABEL_32;
  }
LABEL_28:
  if (v9)
  {
LABEL_33:
    if (*(unsigned char *)(a1 + 1663))
    {
      int v27 = 49;
      return (unint64_t)sub_4BDD38(a3, &v27);
    }
  }
  return result;
}

void sub_4B6F98(uint64_t a1, uint64_t a2, void *a3)
{
  std::string __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  sub_4C9954(*(void *)(a2 + 7424), *(void *)(a2 + 7432), (uint64_t)&__p);
  sub_4B2ED4(&__p);
  char v13 = 0;
  v12[0] = &v13;
  v12[1] = a1;
  unint64_t v5 = (unsigned __int8 *)__p;
  unint64_t v6 = (unsigned __int8 *)v15;
  if (__p != v15 && (char *)__p + 24 != v15)
  {
    do
    {
      sub_4CA3AC((uint64_t)v12, v5, v5 + 24);
      char v8 = v5 + 48;
      v5 += 24;
    }
    while (v8 != v6);
    if (v13)
    {
      LODWORD(v12[0]) = 22;
      sub_4BDD38(a3, (int *)v12);
    }
  }
  char v9 = (char *)__p;
  if (__p)
  {
    uint64_t v10 = (void **)v15;
    uint64_t v11 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != (void **)v9);
      uint64_t v11 = __p;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_4B709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B70B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B70C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B70D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void *sub_4B70EC(uint64_t a1, void *a2, void *a3)
{
  unint64_t result = (void *)sub_46C760(a2);
  if ((unint64_t)result >= 3)
  {
    uint64_t v7 = sub_3777C0(*(void **)a1);
    int v8 = sub_3D3910(v7, (uint64_t)a2, *(unsigned __int8 *)(a1 + 1440));
    uint64_t v9 = sub_40EFE8((uint64_t)a2);
    unint64_t v12 = *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32);
    unint64_t result = (void *)sub_3D3604(v7, &v12, *(unsigned __int8 *)(a1 + 1440));
    if (result == 2 && v8 != 2)
    {
      int v11 = 35;
      return sub_4BDD38(a3, &v11);
    }
  }
  return result;
}

void *sub_4B71A0(unsigned char *a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 840) && a1[1662])
  {
    int v18 = 17;
    sub_4BDD38(a3, &v18);
  }
  if (*(unsigned __int8 *)(a2 + 805) | *(unsigned __int8 *)(a2 + 807))
  {
    if (*(unsigned char *)(a2 + 806))
    {
      if (a1[1660])
      {
        int v18 = 28;
        sub_4BDD38(a3, &v18);
        int v6 = 1;
        int v7 = 1;
        int v8 = 1;
        goto LABEL_14;
      }
    }
    else if (a1[1660])
    {
      int v18 = 26;
      sub_4BDD38(a3, &v18);
      int v7 = 0;
      int v8 = 0;
      int v6 = 1;
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(a2 + 806) && a1[1660])
  {
    int v18 = 27;
    sub_4BDD38(a3, &v18);
    int v6 = 0;
    int v7 = 0;
    int v8 = 1;
    goto LABEL_14;
  }
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
LABEL_14:
  if (*(unsigned char *)(sub_3AEFFC(a2) + 13)) {
    BOOL v9 = a1[1659] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v10 = sub_46CAA4(a2);
  int v11 = *(_DWORD *)(*(void *)(a2 + 1072) - 2240);
  if (v11 != 16 && (v11 != 39 ? (BOOL v12 = *(unsigned char *)(v10 + 13) == 0) : (BOOL v12 = 0), v12))
  {
    BOOL v13 = 1;
  }
  else
  {
    BOOL v13 = a1[1659] == 0;
    if (a1[1659]) {
      int v14 = v7;
    }
    else {
      int v14 = 1;
    }
    if (((v9 | v14) & 1) == 0)
    {
      if (v8) {
        int v15 = 29;
      }
      else {
        int v15 = 31;
      }
      if (v6) {
        int v15 = 30;
      }
      int v18 = v15;
      sub_4C97D0(a3, &v18);
      goto LABEL_38;
    }
  }
  if ((v6 | v9))
  {
    if ((v8 | v13)) {
      goto LABEL_38;
    }
    int v16 = 30;
  }
  else
  {
    int v16 = 29;
  }
  int v18 = v16;
  sub_4BDD38(a3, &v18);
LABEL_38:
  unint64_t result = (void *)sub_4B73A4((uint64_t)a1, (void *)a2);
  if (result)
  {
    int v18 = 39;
    return sub_4BDD38(a3, &v18);
  }
  return result;
}

uint64_t sub_4B73A4(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 1642) || !sub_46C760(a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = sub_40EFE8((uint64_t)a2);
  sub_3BDCD8(v4, *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), &__p);
  uint64_t v6 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v6 = v19;
  }
  if (v6) {
    sub_26A18((uint64_t)v17, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v17);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = sub_46C8FC((uint64_t)a2);
  sub_3BDCD8(v8, *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32), &__p);
  uint64_t v10 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v10 = v19;
  }
  if (v10) {
    sub_26A18((uint64_t)v16, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v16);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  LODWORD(__p) = sub_46CF04((uint64_t)a2);
  int v11 = *(_DWORD *)(a2[143] - 4);
  int v15 = v11;
  if (__p != 0x7FFFFFFF)
  {
    BOOL v12 = !sub_267E8(v17, (int *)&__p, v16, (int *)&__p);
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_20;
    }
LABEL_22:
    BOOL v13 = !sub_267E8(v17, &v15, v16, &v15);
    goto LABEL_23;
  }
  BOOL v12 = 0;
  if (v11 != 0x7FFFFFFF) {
    goto LABEL_22;
  }
LABEL_20:
  BOOL v13 = 0;
LABEL_23:
  uint64_t v14 = sub_2AA08(v17, v16) & (v12 | v13);
  sub_26C4C((const void **)v16);
  sub_26C4C((const void **)v17);
  return v14;
}

void sub_4B7568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_4B75E0(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "unpaved_road_length_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *(void *)a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "four_wheel_drive_road_length_threshold");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = v8;
    if (v8 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = v8;
    if (v8 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_30:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 >= 4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8) + 1;
    }
    else
    {
      if (v8 <= -4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v8 = (double)(v11 >> 1);
LABEL_41:
    *(void *)(a1 + 8) = (uint64_t)v8;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p);
LABEL_43:
  sub_4B3C74((void *)(a1 + 16), a2);
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B9A20;
  strcpy((char *)__p, "includes_busy_roads_min_busy_roads_relative_length");
  double v12 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v12;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9960;
  strcpy((char *)__p, "enable_shared_with_pedestrians_advisory");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 48) = v13;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B93B0;
  strcpy((char *)__p, "always_flag_faster_route_with_tolls_available");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 49) = v14;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A80;
  strcpy((char *)__p, "enable_different_destination_timezone_advisory");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 50) = v15;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91A0;
  strcpy((char *)__p, "enable_shortened_advisories");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 51) = v16;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "include_future_planning_departure_time");
  BOOL v17 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 52) = v17;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "enable_regional_advisory");
  BOOL v18 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 53) = v18;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "stale_ev_info_cutoff_age");
  *(_DWORD *)(a1 + 56) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9260;
  strcpy((char *)__p, "enable_predicted_traffic_advisory");
  BOOL v19 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v19;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_offline_ev_unavailable_advisory");
  BOOL v20 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 61) = v20;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A40;
  strcpy((char *)__p, "enable_offline_e_bike_unavailable_advisory");
  BOOL v21 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 62) = v21;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8870;
  strcpy((char *)__p, "enable_ev_towing_advisory");
  BOOL v22 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 63) = v22;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_ev_out_of_network_stop_advisory");
  BOOL v23 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 64) = v23;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_railway_shuttle_advisory");
  BOOL v24 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 65) = v24;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9280;
  strcpy((char *)__p, "enable_french_climate_law_advisory");
  BOOL v25 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 66) = v25;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B9800;
  strcpy((char *)__p, "enable_closest_road_advisories");
  BOOL v26 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 67) = v26;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_route_clipped_advisories");
  BOOL v27 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 68) = v27;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_park_and_walk_advisory");
  BOOL v28 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 69) = v28;
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B99E0;
  strcpy((char *)__p, "enable_route_violates_time_based_restriction_advisory");
  BOOL v29 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 70) = v29;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_ford_crossing_advisory");
  BOOL v30 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 71) = v30;
  return a1;
}

void sub_4B7F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1A6DC(v21);
  _Unwind_Resume(a1);
}

void sub_4B807C()
{
}

void sub_4B8084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x4B8074);
}

uint64_t sub_4B80A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_4BBDC0(a1 + 16, a4);
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1584) = 1065353216;
  char v20 = 15;
  uint64_t v18 = 0;
  strcpy((char *)v19, "AdvisoryBuilder");
  BOOL v16 = 0;
  BOOL v17 = 0;
  double v8 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&v16);
  sub_3CB5E0(v8, (uint64_t)__p);
  sub_4BB2FC(a1 + 1592, __p);
  double v9 = v22;
  if (v22)
  {
    do
    {
      BOOL v14 = (void **)*v9;
      sub_55198((uint64_t)(v9 + 5));
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      double v9 = v14;
    }
    while (v14);
  }
  uint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v16;
  if (v16)
  {
    double v12 = v17;
    BOOL v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      BOOL v13 = v16;
    }
    BOOL v17 = v11;
    operator delete(v13);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  *(void *)(a1 + 1664) = 0;
  *(_WORD *)(a1 + 1672) = 257;
  *(int32x4_t *)(a1 + 1++*(_DWORD *)(result + 676) = vdupq_n_s32(0x7FFFFFFEu);
  *(void *)(a1 + 1692) = 0x7FFFFFFE7FFFFFFELL;
  sub_57B658(a1 + 1704, a2, a3, a1 + 16);
  sub_4E8D20(a1 + 1784, a2, a3, a4, a1 + 1704);
  return a1;
}

void sub_4B826C(_Unwind_Exception *a1)
{
  sub_4AF400(v4);
  sub_4AF47C(v3);
  sub_31B778(v1 + 1552);
  sub_4BCED0(v2);
  _Unwind_Resume(a1);
}

void sub_4B82A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_31B778(v19 + 1552);
  sub_4BCED0(v20);
  _Unwind_Resume(a1);
}

void sub_4B82E8(unsigned char *a1, uint64_t **a2)
{
  sub_4AF640((uint64_t)a1, a2);
  uint64_t v4 = *a2;
  double v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_4B83BC(a1, v4, (uint64_t *)&__p);
      sub_4E939C((uint64_t)(a1 + 1784), (unint64_t *)&__p, v4);
      uint64_t v6 = __p;
      if (__p)
      {
        uint64_t v7 = (uint64_t)v10;
        double v8 = __p;
        if (v10 != __p)
        {
          do
            uint64_t v7 = sub_4BD604(v7 - 1440);
          while ((void *)v7 != v6);
          double v8 = __p;
        }
        uint64_t v10 = v6;
        operator delete(v8);
      }
      v4 += 945;
    }
    while (v4 != v5);
  }
}

void sub_4B83A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AF510((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_4B83BC@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_4B8554((uint64_t)a1, a3);
  sub_4B8614((uint64_t)a1, a2, a3);
  sub_4B8D94((uint64_t)a1, a2, a3);
  sub_4B9644((uint64_t)a1, a2, a3);
  sub_4B9C0C((uint64_t)a1, a2, a3);
  sub_4B9DCC((uint64_t)a1, a2, a3);
  sub_4B9F10((uint64_t)a1, a2, a3);
  sub_4BA184((uint64_t)a1, (uint64_t)a2, a3);
  sub_4BA2FC((uint64_t)a1, (uint64_t)a2, a3);
  sub_4BA45C((uint64_t)a1, a2, a3);
  uint64_t v6 = nullsub_1(a2);
  uint64_t v7 = *(void **)v6;
  double v8 = *(void **)(v6 + 8);
  if (*(void **)v6 != v8)
  {
    do
    {
      sub_4BA630(a1, v7, a3);
      v7 += 1541;
    }
    while (v7 != v8);
  }
  double v9 = (int *)a3[1];
  unint64_t v10 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v9 - *a3) >> 5));
  if (v9 == (int *)*a3) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_4C2644(*a3, v9, (uint64_t)&v13, v11, 1);
  return sub_4CA15C(a3);
}

void sub_4B8518(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4B852C(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

void sub_4B8540(_Unwind_Exception *a1)
{
  sub_4AF510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4B8554(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_DAFB88(a1 + 1248);
  if (result && *(unsigned char *)(a1 + 1653))
  {
    int v6 = 46;
    unint64_t v5 = a2[1];
    if (v5 >= a2[2])
    {
      uint64_t result = sub_4C05FC(a2, &v6);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v5, 46, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t result = v5 + 1440;
      a2[1] = v5 + 1440;
    }
    a2[1] = result;
  }
  return result;
}

void sub_4B85F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B8614(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = (unsigned __int8 *)sub_6477D4((uint64_t)a2);
  int v7 = *v6;
  int v8 = *((_DWORD *)v6 + 13);
  int v9 = v6[1];
  int v10 = sub_646CE8((uint64_t)a2);
  if (v10 < 0) {
    char v11 = -5;
  }
  else {
    char v11 = 5;
  }
  double v12 = ceil((double)(int)(v10 / 10+ (((103 * (char)(v11 + v10 % 10)) >> 15) & 1)+ ((103 * (char)(v11 + v10 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_12:
  int v14 = (int)v12;
  if (!*(unsigned char *)(a1 + 1641))
  {
    int v16 = 0;
    goto LABEL_25;
  }
  if (!sub_6477A0((uint64_t)a2))
  {
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v15 = sub_6477D4((uint64_t)a2);
  int v16 = 0;
  if (*(unsigned char *)v15 || *(_DWORD *)(v15 + 52))
  {
LABEL_25:
    if (!*(unsigned char *)(a1 + 1237)) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  int v17 = *(_DWORD *)(a1 + 1676);
  int v16 = v17 < *(_DWORD *)(a1 + 1680) && v17 < v14;
  if (!*(unsigned char *)(a1 + 1237))
  {
LABEL_30:
    BOOL v19 = 0;
    if (*(unsigned char *)(a1 + 1443)) {
      BOOL v20 = 1;
    }
    else {
      BOOL v20 = (v7 | v8) == 0;
    }
    if (v20) {
      goto LABEL_34;
    }
    goto LABEL_52;
  }
LABEL_26:
  if (*(unsigned char *)(a1 + 1423) || !*(unsigned char *)(a1 + 1672))
  {
    BOOL v19 = 0;
    if (v7 | v8) {
      goto LABEL_48;
    }
LABEL_28:
    v16 |= *(_DWORD *)(a1 + 1676) < v14;
    goto LABEL_34;
  }
  BOOL v19 = *(void *)(a1 + 1664) > 1uLL;
  if (!(v7 | v8)) {
    goto LABEL_28;
  }
LABEL_48:
  if (*(unsigned char *)(a1 + 1443)) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = (v7 | v8) == 0;
  }
  if (v24)
  {
LABEL_34:
    if (*(unsigned char *)(a1 + 1423)) {
      BOOL v21 = (v7 | v8) == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (v7) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v8 == 0;
      }
      int v23 = !v22;
      if (v22)
      {
        BOOL v26 = (const std::string *)sub_648E68((uint64_t)a2);
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        std::string::operator=((std::string *)&v47[1], v26);
      }
      else
      {
        sub_64BA88(a2, (uint64_t *)&v44);
        *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
        LODWORD(__p.__r_.__value_.__l.__data_) = 1;
        sub_4BD0C8((uint64_t *)&__p.__r_.__value_.__l.__size_, (uint64_t)v44, (uint64_t)v45, 0xCF3CF3CF3CF3CF3DLL * ((v45 - (unsigned char *)v44) >> 3));
      }
      unint64_t v27 = a3[1];
      if (v27 >= a3[2])
      {
        uint64_t v28 = sub_4C1394(a3, (int *)&__p);
      }
      else
      {
        sub_4C14F8((uint64_t)(a3 + 2), a3[1], (int *)&__p);
        uint64_t v28 = v27 + 1440;
        a3[1] = v27 + 1440;
      }
      a3[1] = v28;
      if (SHIBYTE(v48) < 0) {
        operator delete(v47[1]);
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v30 = __p.__r_.__value_.__r.__words[2];
        int v31 = (void *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
        {
          do
            uint64_t v30 = sub_4BCFD0(v30 - 168);
          while (v30 != size);
          int v31 = (void *)__p.__r_.__value_.__l.__size_;
        }
        __p.__r_.__value_.__r.__words[2] = size;
        operator delete(v31);
      }
      if (v23)
      {
        int v32 = v44;
        if (v44)
        {
          long long v33 = v45;
          int v34 = v44;
          if (v45 != v44)
          {
            do
              long long v33 = (unsigned char *)sub_4BCFD0((uint64_t)(v33 - 168));
            while (v33 != v32);
            int v34 = v44;
          }
          uint64_t v45 = v32;
          operator delete(v34);
        }
      }
    }
    goto LABEL_74;
  }
LABEL_52:
  LODWORD(v44) = 21;
  unint64_t v25 = a3[1];
  if (v25 >= a3[2])
  {
    a3[1] = sub_4C05FC(a3, (int *)&v44);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v25, 21, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v25 + 1440;
    a3[1] = v25 + 1440;
  }
LABEL_74:
  if (!*(unsigned char *)(a1 + 1238))
  {
    if (!v19)
    {
      if (!v16) {
        return;
      }
      goto LABEL_110;
    }
    BOOL v37 = 0;
LABEL_88:
    v49[0] = 0;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 0, &__p);
LABEL_102:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v38 + 1440;
      a3[1] = v38 + 1440;
LABEL_105:
      if ((v16 & v37) == 1) {
        goto LABEL_106;
      }
      goto LABEL_109;
    }
    goto LABEL_108;
  }
  if (!*(unsigned char *)(a1 + 1423))
  {
    int v36 = *(unsigned __int8 *)(a1 + 1673);
    if (*(unsigned char *)(a1 + 1673)) {
      int v36 = *(void *)(a1 + 1664) > 1uLL;
    }
    if (v9)
    {
      BOOL v37 = 0;
      if ((v19 & v36) != 1) {
        goto LABEL_87;
      }
      goto LABEL_100;
    }
LABEL_99:
    BOOL v37 = *(_DWORD *)(a1 + 1684) < v14;
    if ((v19 & v36) != 1) {
      goto LABEL_87;
    }
LABEL_100:
    v49[0] = 2;
    unint64_t v38 = a3[1];
    if (v38 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v38, 2, &__p);
      goto LABEL_102;
    }
LABEL_108:
    a3[1] = sub_4C05FC(a3, v49);
    if ((v16 & v37) != 1) {
      goto LABEL_109;
    }
    goto LABEL_106;
  }
  if (!v9)
  {
    int v36 = 0;
    goto LABEL_99;
  }
  v49[0] = 13;
  unint64_t v35 = a3[1];
  if (v35 >= a3[2])
  {
    uint64_t v43 = sub_4C05FC(a3, v49);
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v43;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    sub_4BE2DC(v35, 13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v35 + 1440;
    int v36 = 0;
    BOOL v37 = 0;
    a3[1] = v35 + 1440;
  }
LABEL_87:
  if (v19) {
    goto LABEL_88;
  }
  if (!v36) {
    goto LABEL_105;
  }
  v49[0] = 1;
  unint64_t v39 = a3[1];
  if (v39 >= a3[2]) {
    goto LABEL_108;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v39, 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v39 + 1440;
  a3[1] = v39 + 1440;
  if ((v16 & v37) != 1)
  {
LABEL_109:
    if ((v16 & 1) == 0)
    {
      if (!v37) {
        return;
      }
      v49[0] = 4;
      unint64_t v41 = a3[1];
      if (v41 < a3[2])
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v41, 4, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = v41 + 1440;
        a3[1] = v41 + 1440;
        goto LABEL_121;
      }
LABEL_120:
      uint64_t v42 = sub_4C05FC(a3, v49);
LABEL_121:
      a3[1] = v42;
      return;
    }
LABEL_110:
    v49[0] = 3;
    unint64_t v40 = a3[1];
    if (v40 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v40, 3, &__p);
      goto LABEL_112;
    }
    goto LABEL_120;
  }
LABEL_106:
  v49[0] = 5;
  unint64_t v40 = a3[1];
  if (v40 >= a3[2]) {
    goto LABEL_120;
  }
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC(v40, 5, &__p);
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a3[1] = v40 + 1440;
  a3[1] = v40 + 1440;
}

void sub_4B8CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 + 8) = v26;
  _Unwind_Resume(exception_object);
}

void sub_4B8D94(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!sub_649E28(a2)) {
    return;
  }
  if (sub_64781C((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 8;
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v7 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v6, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = v6 + 1440;
      a3[1] = v6 + 1440;
    }
    a3[1] = v7;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  int v8 = sub_46CABC(a1 + 1248);
  if (v8 == 0x7FFFFFFF || v8 < *(_DWORD *)(a1 + 1648)) {
    goto LABEL_18;
  }
  int v9 = sub_46CABC(a1 + 1248);
  *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)&v34[24] = 0uLL;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)&v34[8] = 0x7FFFFFFF;
  *(_DWORD *)int v34 = 9;
  *(_DWORD *)&v34[40] = v9;
  unint64_t v10 = a3[1];
  if (v10 >= a3[2])
  {
    uint64_t v11 = sub_4C1794(a3, (uint64_t)v34);
  }
  else
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    memset(&v35, 0, sizeof(v35));
    sub_4C194C(v10, &v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v10 + 1440;
    a3[1] = v10 + 1440;
  }
  a3[1] = v11;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  else
  {
LABEL_18:
    if (!sub_64782C((uint64_t)a2)) {
      goto LABEL_29;
    }
  }
  if (!*(unsigned char *)(a1 + 1537))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 7;
    unint64_t v12 = a3[1];
    if (v12 >= a3[2])
    {
      uint64_t v13 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v12, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = v12 + 1440;
      a3[1] = v12 + 1440;
    }
    a3[1] = v13;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
LABEL_29:
  if (*(unsigned char *)(a1 + 1655) && sub_DAFBF8(a1 + 1248) && sub_DAFF00(a1 + 1248))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 10;
    unint64_t v14 = a3[1];
    if (v14 >= a3[2])
    {
      uint64_t v15 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v14, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = v14 + 1440;
      a3[1] = v14 + 1440;
    }
    a3[1] = v15;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a1 + 1656) && *(unsigned char *)(a1 + 1537) && sub_6477E4((uint64_t)a2))
  {
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 11;
    unint64_t v16 = a3[1];
    if (v16 >= a3[2])
    {
      uint64_t v17 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v16, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = v16 + 1440;
      a3[1] = v16 + 1440;
    }
    a3[1] = v17;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v18 = sub_404F30(a2);
  if (v18)
  {
    unint64_t v19 = v18;
    if (*(unsigned char *)(a1 + 1537)) {
      goto LABEL_60;
    }
    uint64_t v20 = sub_6467E8(a2, 0);
    BOOL v21 = (const std::string *)sub_64F45C(v20);
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = 1;
    *(void *)&v34[24] = 0;
    *(void *)&v34[32] = v19;
    std::string::operator=(&v35, v21);
    unint64_t v22 = a3[1];
    if (v22 >= a3[2])
    {
      uint64_t v23 = sub_4C1794(a3, (uint64_t)v34);
    }
    else
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      std::string __p = v35;
      memset(&v35, 0, sizeof(v35));
      sub_4C194C(v22, &v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v22 + 1440;
      a3[1] = v22 + 1440;
    }
    a3[1] = v23;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((sub_648BA8(a2) & 1) == 0)
      {
LABEL_61:
        if (sub_648C50(a2))
        {
          *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
          if (v19 <= 1) {
            int v26 = 2;
          }
          else {
            int v26 = 3;
          }
          *(_OWORD *)&v34[24] = 0uLL;
          *(_DWORD *)&v34[40] = 0x7FFFFFFF;
          memset(&v35, 0, sizeof(v35));
          *(_DWORD *)&v34[8] = 0x7FFFFFFF;
          *(_DWORD *)int v34 = v26;
          unint64_t v27 = a3[1];
          if (v27 >= a3[2])
          {
            uint64_t v28 = sub_4C1794(a3, (uint64_t)v34);
            int v29 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
            a3[1] = v28;
            if (v29 < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v36 = *(_OWORD *)v34;
            v37[0] = *(_OWORD *)&v34[16];
            *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
            memset(&__p, 0, sizeof(__p));
            sub_4C194C(v27, &v36);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            a3[1] = v27 + 1440;
          }
        }
      }
    }
    else
    {
LABEL_60:
      if ((sub_648BA8(a2) & 1) == 0) {
        goto LABEL_61;
      }
    }
    if (!sub_648D80(a2)) {
      return;
    }
    *(void *)&v34[12] = 0x7FFFFFFF7FFFFFFFLL;
    if (v19 <= 1) {
      int v30 = 4;
    }
    else {
      int v30 = 5;
    }
    *(_OWORD *)&v34[24] = 0uLL;
    *(_DWORD *)&v34[40] = 0x7FFFFFFF;
    memset(&v35, 0, sizeof(v35));
    *(_DWORD *)&v34[8] = 0x7FFFFFFF;
    *(_DWORD *)int v34 = v30;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      long long v36 = *(_OWORD *)v34;
      v37[0] = *(_OWORD *)&v34[16];
      *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
      memset(&__p, 0, sizeof(__p));
      sub_4C194C(v24, &v36);
      goto LABEL_79;
    }
    uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
    goto LABEL_83;
  }
  sub_649B08(a2, (uint64_t)&v32);
  *(_DWORD *)&v34[40] = 0x7FFFFFFF;
  memset(&v35, 0, sizeof(v35));
  *(_DWORD *)int v34 = 0;
  *(_OWORD *)&v34[8] = v32;
  *(_OWORD *)&v34[24] = v33;
  unint64_t v24 = a3[1];
  if (v24 < a3[2])
  {
    long long v36 = *(_OWORD *)v34;
    v37[0] = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v34[28];
    memset(&__p, 0, sizeof(__p));
    sub_4C194C(v24, &v36);
LABEL_79:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    a3[1] = v24 + 1440;
    return;
  }
  uint64_t v25 = sub_4C1794(a3, (uint64_t)v34);
LABEL_83:
  int v31 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  a3[1] = v25;
  if (v31 < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_4B94BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4B9644(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = sub_646CE8((uint64_t)a2);
  if (v6 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  double v8 = ceil((double)(int)(v6 / 10+ (((103 * (char)(v7 + v6 % 10)) >> 15) & 1)+ ((103 * (char)(v7 + v6 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v8 >= 0.0)
  {
    if (v8 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    if (v8 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v9 = (uint64_t)(v8 + v8);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_12:
  int v10 = (int)v8;
  if (!*(unsigned char *)(a1 + 1233))
  {
    BOOL v12 = 0;
    BOOL v11 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  if (!sub_648828(a2) || sub_6488A0(a2))
  {
    BOOL v11 = 0;
    if (sub_648828(a2)) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  BOOL v11 = *(_DWORD *)(a1 + 1688) < v10;
  if (!sub_648828(a2))
  {
LABEL_26:
    BOOL v12 = 0;
    if (!*(unsigned char *)(a1 + 1234)) {
      goto LABEL_27;
    }
LABEL_19:
    if (sub_6487C0(a2))
    {
      BOOL v13 = 0;
      int v14 = 1;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
    else
    {
      int v14 = 0;
      BOOL v13 = *(_DWORD *)(a1 + 1692) < v10;
      if (*(unsigned char *)(a1 + 1232)) {
        goto LABEL_28;
      }
    }
LABEL_21:
    BOOL v15 = 0;
    int v16 = 0;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
LABEL_16:
  BOOL v12 = sub_6488A0(a2);
  if (*(unsigned char *)(a1 + 1234)) {
    goto LABEL_19;
  }
LABEL_27:
  BOOL v13 = 0;
  int v14 = 0;
  if (!*(unsigned char *)(a1 + 1232)) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v17 = sub_64894C(a2);
  double v18 = *(double *)(a1 + 1632);
  double v19 = v18 * (double)sub_646C34(a2);
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    if (v19 <= -4.50359963e15) {
      goto LABEL_36;
    }
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_36:
  if (v17 >= (uint64_t)v19)
  {
    BOOL v15 = 0;
    int v16 = 1;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
  else
  {
    int v16 = 0;
    BOOL v15 = *(_DWORD *)(a1 + 1696) < v10;
    if (!*(unsigned char *)(a1 + 1464)) {
      goto LABEL_47;
    }
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 1654))
  {
    int v32 = 47;
    unint64_t v21 = a3[1];
    if (v21 >= a3[2])
    {
      uint64_t v22 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v21, 47, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = v21 + 1440;
      a3[1] = v21 + 1440;
    }
    a3[1] = v22;
  }
LABEL_47:
  int v23 = !v15;
  if (v11 && v13 && (v23 & 1) == 0)
  {
    int v32 = 11;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 11, &__p);
LABEL_63:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3[1] = v24 + 1440;
      a3[1] = v24 + 1440;
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v11 && v13)
  {
    int v32 = 9;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 9, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v11 | v23) & 1) == 0)
  {
    int v32 = 10;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 10, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (((!v13 | v23) & 1) == 0)
  {
    int v32 = 12;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 12, &__p);
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if (v11)
  {
    int v32 = 6;
    unint64_t v24 = a3[1];
    if (v24 < a3[2])
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v24, 6, &__p);
      goto LABEL_63;
    }
LABEL_66:
    a3[1] = sub_4C05FC(a3, &v32);
    goto LABEL_67;
  }
  if (v13)
  {
    int v31 = 7;
  }
  else
  {
    if (!v15) {
      goto LABEL_67;
    }
    int v31 = 8;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v31;
  sub_4AFAC8(a3, (int *)&__p);
LABEL_67:
  if (v12)
  {
    int v32 = 14;
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v26 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v25, 14, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v26 = v25 + 1440;
      a3[1] = v25 + 1440;
    }
    a3[1] = v26;
  }
  if (v16)
  {
    int v32 = 15;
    unint64_t v27 = a3[1];
    if (v27 >= a3[2])
    {
      uint64_t v28 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v27, 15, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v28 = v27 + 1440;
      a3[1] = v27 + 1440;
    }
    a3[1] = v28;
  }
  if (v14)
  {
    int v32 = 16;
    unint64_t v29 = a3[1];
    if (v29 >= a3[2])
    {
      uint64_t v30 = sub_4C05FC(a3, &v32);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      sub_4BE2DC(v29, 16, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v30 = v29 + 1440;
      a3[1] = v29 + 1440;
    }
    a3[1] = v30;
  }
}

void sub_4B9BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4B9C0C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1643))
  {
    uint64_t v5 = result;
    uint64_t result = sub_648758(a2);
    if (result)
    {
      int v9 = 40;
      unint64_t v6 = a3[1];
      if (v6 >= a3[2])
      {
        uint64_t result = sub_4C05FC(a3, &v9);
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        sub_4BE2DC(v6, 40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t result = v6 + 1440;
        a3[1] = v6 + 1440;
      }
      a3[1] = result;
    }
    if (*(unsigned char *)(v5 + 1241))
    {
      uint64_t result = sub_6488A0(a2);
      if (result)
      {
        int v9 = 43;
        unint64_t v7 = a3[1];
        if (v7 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v7, 43, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v7 + 1440;
          a3[1] = v7 + 1440;
        }
        a3[1] = result;
      }
    }
    if (*(unsigned char *)(v5 + 1242))
    {
      uint64_t result = sub_6487C0(a2);
      if (result)
      {
        int v9 = 44;
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v9);
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v8, 44, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v8 + 1440;
          a3[1] = v8 + 1440;
        }
        a3[1] = result;
      }
    }
  }
  return result;
}

void sub_4B9D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B9DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void sub_4B9DCC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_64B9F0(a2, (uint64_t *)&v14);
  uint64_t v4 = (uint64_t)v14;
  if (v14 != (void *)v15)
  {
    sub_4CA578((uint64_t *)&v14, (uint64_t)&__p);
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C1014(a3, (uint64_t *)&__p);
    }
    else
    {
      sub_4C1170(a3[1], (uint64_t *)&__p);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    unint64_t v7 = (void **)__p;
    if (__p)
    {
      unint64_t v8 = v13;
      int v9 = __p;
      if (v13 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = __p;
      }
      BOOL v13 = v7;
      operator delete(v9);
    }
    uint64_t v4 = (uint64_t)v14;
  }
  if (v4)
  {
    uint64_t v10 = v15;
    BOOL v11 = (void *)v4;
    if (v15 != v4)
    {
      do
        uint64_t v10 = sub_4BCFD0(v10 - 168);
      while (v10 != v4);
      BOOL v11 = v14;
    }
    uint64_t v15 = v4;
    operator delete(v11);
  }
}

void sub_4B9ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1A668((void **)va);
  sub_4B1DB4((void **)va1);
  _Unwind_Resume(a1);
}

void sub_4B9EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4B1DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_4B9F10(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = sub_6467E8(a2, 0);
  uint64_t v7 = (unsigned int *)sub_40EFE8(v6);
  unint64_t v8 = (void **)(a1 + 1504);
  if (*(char *)(a1 + 1527) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1512);
    if (v9)
    {
      sub_4200(__p, *v8, v9);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 1527))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v30 = *(void *)(a1 + 1520);
    goto LABEL_7;
  }
  sub_3BDCD8(*(void *)(a1 + 8), *v7 | ((unint64_t)(v7[1] & 0x1FFFFFFF) << 32), __p);
LABEL_7:
  uint64_t v10 = (void *)sub_648B60((uint64_t)a2);
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v11 = v10[1];
  if (*v10 == v11)
  {
    double v18 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v12 = *v10 + 680;
    do
    {
      if (!*(unsigned char *)(v12 + 432))
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (sub_604320(v12, 0))
      {
        uint64_t v15 = v12 - 680;
        unint64_t v16 = v27;
        if (v27 >= v28)
        {
          uint64_t v13 = sub_4C1B04((uint64_t *)&v26, v15, (long long *)__p);
        }
        else
        {
          sub_4C1C70(v27, v15, (long long *)__p);
          uint64_t v13 = v16 + 1440;
        }
        unint64_t v27 = v13;
      }
      uint64_t v14 = v12 + 440;
      v12 += 1120;
    }
    while (v14 != v11);
    uint64_t v17 = (uint64_t)v26;
    double v18 = (int *)v27;
  }
  unint64_t v19 = 126 - 2 * __clz(0x4FA4FA4FA4FA4FA5 * (((uint64_t)v18 - v17) >> 5));
  if (v18 == (int *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_4C2644(v17, v18, (uint64_t)&v31, v20, 1);
  uint64_t v21 = (uint64_t)v26;
  unint64_t v22 = v27;
  int v31 = a3;
  if (v26 != (void *)v27)
  {
    do
    {
      sub_4C7D04(&v31, v21);
      v21 += 1440;
    }
    while (v21 != v22);
    uint64_t v21 = (uint64_t)v26;
  }
  if (v21)
  {
    uint64_t v23 = v27;
    unint64_t v24 = (void *)v21;
    if (v27 != v21)
    {
      do
        uint64_t v23 = sub_4BD604(v23 - 1440);
      while (v23 != v21);
      unint64_t v24 = v26;
    }
    unint64_t v27 = v21;
    operator delete(v24);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
}

void sub_4BA140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4BA184(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1469))
  {
    uint64_t v5 = result;
    uint64_t result = sub_37B3A8(*(void *)result);
    signed int v7 = *(_DWORD *)result;
    signed int v6 = *(_DWORD *)(result + 4);
    BOOL v8 = *(_DWORD *)result == 0x7FFFFFFF || v6 == 0x7FFFFFFF;
    if (!v8 && v7 > v6)
    {
      int v10 = *(_DWORD *)(result + 8);
      uint64_t result = sub_64A728();
      if (!result)
      {
        if (v10 == 1)
        {
          int v11 = sub_638A68(a2);
          char v12 = *(unsigned char *)(v5 + 1644);
          unint64_t v15 = __PAIR64__(v6, v7);
          LODWORD(v16) = 1;
          HIDWORD(v16) = v11;
          char v17 = v12;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        if (!v10)
        {
          char v17 = 0;
          unint64_t v15 = __PAIR64__(v6, v7);
          uint64_t v16 = 0x7FFFFFFF00000000;
          return sub_4B1E94(a3, (uint64_t)&v15);
        }
        uint64_t result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)&v15);
          sub_188FC78(&v15, (uint64_t)"Unknown timepoint type given.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (v14 < 0) {
            operator delete(__p);
          }
          return sub_111ECAC((uint64_t)&v15);
        }
      }
    }
  }
  return result;
}

void sub_4BA2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_4BA2FC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(result + 1652))
  {
    uint64_t v4 = result;
    uint64_t result = sub_64A728();
    if (!result)
    {
      if (*(unsigned char *)(v4 + 1469))
      {
        uint64_t v5 = (_DWORD *)*a3;
        unint64_t v6 = a3[1];
        if (*a3 != v6)
        {
          do
          {
            int v7 = v5[340];
            if (v7)
            {
              if (v7 == 1)
              {
                int v8 = v5[338];
                BOOL v9 = v8 != 0x7FFFFFFF && v5[339] < v8;
                if (v9 && v5[341] != 0x7FFFFFFF) {
                  return result;
                }
              }
            }
            else
            {
              int v10 = v5[338];
              if (v10 != 0x7FFFFFFF && v5[339] < v10) {
                return result;
              }
            }
            v5 += 360;
          }
          while (v5 != (_DWORD *)v6);
        }
        int v11 = 45;
        if (v6 >= a3[2])
        {
          uint64_t result = sub_4C05FC(a3, &v11);
          a3[1] = result;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          sub_4BE2DC(v6, 45, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t result = v6 + 1440;
          a3[1] = v6 + 1440;
          a3[1] = v6 + 1440;
        }
      }
    }
  }
  return result;
}

void sub_4BA43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v15 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BA45C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_57B27C(a1 + 1704, a2, v9);
  if (v9[0] != 50) {
    goto LABEL_10;
  }
  if (sub_605454((uint64_t)v10))
  {
    uint64_t v4 = v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v4 = v10[141];
    }
    if (v4) {
      goto LABEL_10;
    }
  }
  if (v12 != v13 || v14 != 2 || v15 != 12 || v16 != v17) {
    goto LABEL_10;
  }
  if (v20)
  {
    if (v20 != 1 || v18 == 0x7FFFFFFF || v19 >= v18 || v21 == 0x7FFFFFFF) {
      goto LABEL_23;
    }
LABEL_10:
    unint64_t v5 = a3[1];
    if (v5 >= a3[2])
    {
      uint64_t v6 = sub_4C83E4(a3, (uint64_t)v9);
    }
    else
    {
      sub_4C8540(a3[1], (uint64_t)v9);
      uint64_t v6 = v5 + 1440;
      a3[1] = v5 + 1440;
    }
    a3[1] = v6;
    return sub_4BD604((uint64_t)v9);
  }
  if (v18 != 0x7FFFFFFF && v19 < v18) {
    goto LABEL_10;
  }
LABEL_23:
  uint64_t v8 = v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v8 = v22;
  }
  if (v8 || v24 != -1 || v25 != -1) {
    goto LABEL_10;
  }
  return sub_4BD604((uint64_t)v9);
}

void sub_4BA5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BA618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BA630(unsigned char *a1, void *a2, uint64_t *a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  int v15 = 1065353216;
  sub_4BA790((uint64_t)a1, (uint64_t)a2, __p);
  unint64_t v6 = sub_470ADC(a2);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      sub_4BA940((uint64_t)a1, a2, i, __p);
  }
  sub_4BACB4((uint64_t)a1, (uint64_t)a2, __p);
  sub_4BAE08((uint64_t)a1, a2, __p);
  sub_4BAEBC(a1, (uint64_t)a2, __p);
  if ((void)v14)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)v14;
    do
    {
      ++v8;
      BOOL v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_4C8884(a3, a3[1], (void *)v14, 0, v8);
  int v10 = (void *)v14;
  if ((void)v14)
  {
    do
    {
      unsigned __int8 v11 = (void *)*v10;
      sub_4BD604((uint64_t)(v10 + 2));
      operator delete(v10);
      int v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
}

void sub_4BA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4BA768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4BA77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4BA790(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 1645))
  {
    uint64_t v4 = *(void *)(a2 + 1072) - *(void *)(a2 + 1064);
    if (v4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v4 / 2400;
      do
      {
        uint64_t v8 = sub_4A5E10((void *)(a2 + 1064), v6);
        if (*(unsigned char *)(v8 + 2160))
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(unsigned __int8 *)(v8 + 2191);
          if ((v10 & 0x80u) != 0) {
            uint64_t v10 = *(void *)(v8 + 2176);
          }
          if (v10)
          {
            int v11 = *(_DWORD *)(v8 + 2192);
            if (v11 == 3)
            {
              if (v6 + 1 < 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5))
              {
                uint64_t v12 = sub_4A5E10((void *)(a2 + 1064), v6 + 1);
                if (sub_4B304C(v9 + 2128, v12 + 2128))
                {
                  memset(&v13, 0, sizeof(v13));
                  std::string::operator=(&v13, (const std::string *)(v9 + 2168));
                  sub_4C9E28(a3, &v13);
                  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v13.__r_.__value_.__l.__data_);
                  }
                }
              }
              int v11 = *(_DWORD *)(v9 + 2192);
            }
            if (v11 == 1)
            {
              memset(&v13, 0, sizeof(v13));
              std::string::operator=(&v13, (const std::string *)(v9 + 2168));
              sub_4C9E28(a3, &v13);
              if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v13.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        ++v6;
      }
      while (v7 != v6);
    }
  }
}

void sub_4BA918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4BA940(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (unsigned int *)sub_470B40(a2, a3);
  uint64_t v9 = (int *)*((void *)v8 + 1);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 0xBu)
  {
    uint64_t v11 = v10[5];
    if (v11)
    {
      if ((*(int *)((char *)v9 + v11) & 0x208) == 8)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v12 = 41;
        }
        else {
          int v12 = 33;
        }
        LODWORD(__p[0]) = v12;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  std::string v13 = (int *)*((void *)v8 + 1);
  long long v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xBu)
  {
    uint64_t v15 = v14[5];
    if (v15)
    {
      if ((*((unsigned char *)v13 + v15 + 1) & 2) != 0)
      {
        if (*(unsigned char *)(a1 + 1643)) {
          int v16 = 41;
        }
        else {
          int v16 = 33;
        }
        if (*(unsigned char *)(a1 + 1657)) {
          ++v16;
        }
        LODWORD(__p[0]) = v16;
        sub_4BDD38(a4, (int *)__p);
      }
    }
  }
  unsigned int v17 = v8[1];
  int v18 = (int *)sub_2D5D58(*(void *)(a1 + 8), *v8 | ((unint64_t)(unsigned __int16)v17 << 32));
  int v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 0x41u && (uint64_t v20 = v19[32]) != 0) {
    int v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    int v21 = 0;
  }
  sub_3BD900(v21, (v17 & 0x20000000) == 0, 1, (uint64_t)&v29);
  uint64_t v22 = v29;
  if (v29 != v30)
  {
    sub_3BDCD8(*(void *)(a1 + 8), *v8 | ((unint64_t)(v8[1] & 0x1FFFFFFF) << 32), __p);
    unint64_t v23 = v27;
    if ((v27 & 0x80u) != 0) {
      unint64_t v23 = (unint64_t)__p[1];
    }
    if (v23) {
      sub_26A18((uint64_t)v28, (const char *)__p);
    }
    else {
      sub_26908((uint64_t)v28);
    }
    if ((char)v27 < 0) {
      operator delete(__p[0]);
    }
    sub_480C((uint64_t)__p, *(_DWORD *)(a2[142] + 4 * a3));
  }
  if (v29)
  {
    int v24 = v30;
    int v25 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v22);
      int v25 = v29;
    }
    uint64_t v30 = v22;
    operator delete(v25);
  }
}

void sub_4BAC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25)
{
  sub_4814((uint64_t)&__p);
  sub_26C4C(&a25);
  sub_1A668((void **)(v25 - 88));
  _Unwind_Resume(a1);
}

void sub_4BACB4(uint64_t a1, uint64_t a2, void *a3)
{
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_4C9954(*(void *)(a2 + 7424), *(void *)(a2 + 7432), (uint64_t)&__p);
  sub_4B2ED4(&__p);
  char v13 = 0;
  v12[0] = &v13;
  v12[1] = a1;
  unint64_t v5 = (unsigned __int8 *)__p;
  unint64_t v6 = (unsigned __int8 *)v15;
  if (__p != v15 && (char *)__p + 24 != v15)
  {
    do
    {
      sub_4CA690((uint64_t)v12, v5, v5 + 24);
      uint64_t v8 = v5 + 48;
      v5 += 24;
    }
    while (v8 != v6);
    if (v13)
    {
      LODWORD(v12[0]) = 22;
      sub_4BDD38(a3, (int *)v12);
    }
  }
  uint64_t v9 = (char *)__p;
  if (__p)
  {
    uint64_t v10 = (void **)v15;
    uint64_t v11 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != (void **)v9);
      uint64_t v11 = __p;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
}

void sub_4BADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4BADCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4BADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_4BADF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void *sub_4BAE08(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (void *)sub_470ADC(a2);
  if ((unint64_t)result >= 3)
  {
    uint64_t v7 = sub_3777C0(*(void **)a1);
    int v8 = sub_3D3C8C(v7, (uint64_t)a2, *(unsigned __int8 *)(a1 + 1440));
    uint64_t v9 = (unsigned int *)sub_40EFE8((uint64_t)a2);
    unint64_t v12 = *v9 | ((unint64_t)(v9[1] & 0x1FFFFFFF) << 32);
    uint64_t result = (void *)sub_3D3604(v7, &v12, *(unsigned __int8 *)(a1 + 1440));
    if (result == 2 && v8 != 2)
    {
      int v11 = 35;
      return sub_4BDD38(a3, &v11);
    }
  }
  return result;
}

void *sub_4BAEBC(unsigned char *a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 840) && a1[1662])
  {
    int v18 = 17;
    sub_4BDD38(a3, &v18);
  }
  if (*(unsigned __int8 *)(a2 + 805) | *(unsigned __int8 *)(a2 + 807))
  {
    if (*(unsigned char *)(a2 + 806))
    {
      if (a1[1660])
      {
        int v18 = 28;
        sub_4BDD38(a3, &v18);
        int v6 = 1;
        int v7 = 1;
        int v8 = 1;
        goto LABEL_14;
      }
    }
    else if (a1[1660])
    {
      int v18 = 26;
      sub_4BDD38(a3, &v18);
      int v7 = 0;
      int v8 = 0;
      int v6 = 1;
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(a2 + 806) && a1[1660])
  {
    int v18 = 27;
    sub_4BDD38(a3, &v18);
    int v6 = 0;
    int v7 = 0;
    int v8 = 1;
    goto LABEL_14;
  }
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
LABEL_14:
  if (*(unsigned char *)(sub_3AEFFC(a2) + 13)) {
    BOOL v9 = a1[1659] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v10 = sub_46CAA4(a2);
  int v11 = *(_DWORD *)(*(void *)(a2 + 1072) - 2240);
  if (v11 != 16 && (v11 != 39 ? (BOOL v12 = *(unsigned char *)(v10 + 13) == 0) : (BOOL v12 = 0), v12))
  {
    BOOL v13 = 1;
  }
  else
  {
    BOOL v13 = a1[1659] == 0;
    if (a1[1659]) {
      int v14 = v7;
    }
    else {
      int v14 = 1;
    }
    if (((v9 | v14) & 1) == 0)
    {
      if (v8) {
        int v15 = 29;
      }
      else {
        int v15 = 31;
      }
      if (v6) {
        int v15 = 30;
      }
      int v18 = v15;
      sub_4C97D0(a3, &v18);
      goto LABEL_38;
    }
  }
  if ((v6 | v9))
  {
    if ((v8 | v13)) {
      goto LABEL_38;
    }
    int v16 = 30;
  }
  else
  {
    int v16 = 29;
  }
  int v18 = v16;
  sub_4BDD38(a3, &v18);
LABEL_38:
  uint64_t result = (void *)sub_4BB0C0((uint64_t)a1, (void *)a2);
  if (result)
  {
    int v18 = 39;
    return sub_4BDD38(a3, &v18);
  }
  return result;
}

uint64_t sub_4BB0C0(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 1642) || !sub_470ADC(a2)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (unsigned int *)sub_40EFE8((uint64_t)a2);
  sub_3BDCD8(v4, *v5 | ((unint64_t)(v5[1] & 0x1FFFFFFF) << 32), &__p);
  uint64_t v6 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v6 = v19;
  }
  if (v6) {
    sub_26A18((uint64_t)v17, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v17);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  BOOL v9 = (unsigned int *)sub_470B50((uint64_t)a2);
  sub_3BDCD8(v8, *v9 | ((unint64_t)(v9[1] & 0x1FFFFFFF) << 32), &__p);
  uint64_t v10 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v10 = v19;
  }
  if (v10) {
    sub_26A18((uint64_t)v16, (const char *)&__p);
  }
  else {
    sub_26908((uint64_t)v16);
  }
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  LODWORD(__p) = sub_46CF04((uint64_t)a2);
  int v11 = *(_DWORD *)(a2[143] - 4);
  int v15 = v11;
  if (__p != 0x7FFFFFFF)
  {
    BOOL v12 = !sub_267E8(v17, (int *)&__p, v16, (int *)&__p);
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_20;
    }
LABEL_22:
    BOOL v13 = !sub_267E8(v17, &v15, v16, &v15);
    goto LABEL_23;
  }
  BOOL v12 = 0;
  if (v11 != 0x7FFFFFFF) {
    goto LABEL_22;
  }
LABEL_20:
  BOOL v13 = 0;
LABEL_23:
  uint64_t v14 = sub_2AA08(v17, v16) & (v12 | v13);
  sub_26C4C((const void **)v16);
  sub_26C4C((const void **)v17);
  return v14;
}

void sub_4BB284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_4BB2FC(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "unpaved_road_length_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *(void *)a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "four_wheel_drive_road_length_threshold");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = v8;
    if (v8 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = v8;
    if (v8 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_30:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 >= 4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8) + 1;
    }
    else
    {
      if (v8 <= -4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v8 = (double)(v11 >> 1);
LABEL_41:
    *(void *)(a1 + 8) = (uint64_t)v8;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v33) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p);
LABEL_43:
  sub_4B3C74((void *)(a1 + 16), a2);
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B9A20;
  strcpy((char *)__p, "includes_busy_roads_min_busy_roads_relative_length");
  double v12 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 40) = v12;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9960;
  strcpy((char *)__p, "enable_shared_with_pedestrians_advisory");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 48) = v13;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B93B0;
  strcpy((char *)__p, "always_flag_faster_route_with_tolls_available");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 49) = v14;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A80;
  strcpy((char *)__p, "enable_different_destination_timezone_advisory");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 50) = v15;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91A0;
  strcpy((char *)__p, "enable_shortened_advisories");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 51) = v16;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "include_future_planning_departure_time");
  BOOL v17 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 52) = v17;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "enable_regional_advisory");
  BOOL v18 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 53) = v18;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B91C0;
  strcpy((char *)__p, "stale_ev_info_cutoff_age");
  *(_DWORD *)(a1 + 56) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9260;
  strcpy((char *)__p, "enable_predicted_traffic_advisory");
  BOOL v19 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 60) = v19;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_offline_ev_unavailable_advisory");
  BOOL v20 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 61) = v20;
  std::string __p = operator new(0x30uLL);
  long long v33 = xmmword_20B9A40;
  strcpy((char *)__p, "enable_offline_e_bike_unavailable_advisory");
  BOOL v21 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 62) = v21;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8870;
  strcpy((char *)__p, "enable_ev_towing_advisory");
  BOOL v22 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 63) = v22;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_ev_out_of_network_stop_advisory");
  BOOL v23 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 64) = v23;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_railway_shuttle_advisory");
  BOOL v24 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 65) = v24;
  std::string __p = operator new(0x28uLL);
  long long v33 = xmmword_20B9280;
  strcpy((char *)__p, "enable_french_climate_law_advisory");
  BOOL v25 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 66) = v25;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B9800;
  strcpy((char *)__p, "enable_closest_road_advisories");
  BOOL v26 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 67) = v26;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_route_clipped_advisories");
  BOOL v27 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 68) = v27;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_park_and_walk_advisory");
  BOOL v28 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 69) = v28;
  std::string __p = operator new(0x38uLL);
  long long v33 = xmmword_20B99E0;
  strcpy((char *)__p, "enable_route_violates_time_based_restriction_advisory");
  BOOL v29 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 70) = v29;
  std::string __p = operator new(0x20uLL);
  long long v33 = xmmword_20B8890;
  strcpy((char *)__p, "enable_ford_crossing_advisory");
  BOOL v30 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 71) = v30;
  return a1;
}

void sub_4BBC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1A6DC(v21);
  _Unwind_Resume(a1);
}

void sub_4BBD98()
{
}

void sub_4BBDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x4BBD90);
}

uint64_t sub_4BBDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_48927C(a1, a2) + 712;
  sub_4BC218(v4, a2 + 712);
  sub_4BC93C(a1 + 968, (int *)(a2 + 968));
  *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1080) = 0;
  double v5 = *(unsigned char **)(a2 + 1072);
  uint64_t v6 = *(unsigned char **)(a2 + 1080);
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    double v8 = (char *)operator new(v6 - v5);
    *(void *)(a1 + 1072) = v8;
    *(void *)(a1 + 1080) = v8;
    double v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 1088) = v9;
    memcpy(v8, v5, v7);
    *(void *)(a1 + 1080) = v9;
  }
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a2 + 1096);
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1112) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 1104);
  uint64_t v11 = *(unsigned char **)(a2 + 1112);
  int64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    BOOL v13 = (char *)operator new(v11 - v10);
    *(void *)(a1 + 1104) = v13;
    *(void *)(a1 + 1112) = v13;
    BOOL v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 1120) = v14;
    memcpy(v13, v10, v12);
    *(void *)(a1 + 1112) = v14;
  }
  sub_74F38((void *)(a1 + 1128), a2 + 1128);
  sub_74F38((void *)(a1 + 1152), a2 + 1152);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  __int16 v15 = *(_WORD *)(a2 + 1184);
  *(unsigned char *)(a1 + 1186) = *(unsigned char *)(a2 + 1186);
  *(_WORD *)(a1 + 1184) = v15;
  if (*(char *)(a2 + 1215) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1192), *(void **)(a2 + 1192), *(void *)(a2 + 1200));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 1192);
    *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
    *(_OWORD *)(a1 + 1192) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 1216);
  *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 1224);
  *(void *)(a1 + 1216) = v17;
  sub_402B58(a1 + 1232, (uint64_t *)(a2 + 1232));
  long long v18 = *(_OWORD *)(a2 + 1392);
  long long v19 = *(_OWORD *)(a2 + 1408);
  long long v20 = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1438) = *(_OWORD *)(a2 + 1438);
  *(_OWORD *)(a1 + 1424) = v20;
  *(_OWORD *)(a1 + 1++*(_DWORD *)(result + 408) = v19;
  *(_OWORD *)(a1 + 1392) = v18;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1464) = 0;
  BOOL v21 = *(unsigned char **)(a2 + 1456);
  BOOL v22 = *(unsigned char **)(a2 + 1464);
  int64_t v23 = v22 - v21;
  if (v22 != v21)
  {
    if (v23 < 0) {
      sub_2E00();
    }
    BOOL v24 = (char *)operator new(v22 - v21);
    *(void *)(a1 + 1456) = v24;
    *(void *)(a1 + 1464) = v24;
    BOOL v25 = &v24[4 * (v23 >> 2)];
    *(void *)(a1 + 1472) = v25;
    memcpy(v24, v21, v23);
    *(void *)(a1 + 1464) = v25;
  }
  __int16 v26 = *(_WORD *)(a2 + 1480);
  *(unsigned char *)(a1 + 1482) = *(unsigned char *)(a2 + 1482);
  *(_WORD *)(a1 + 1480) = v26;
  BOOL v27 = (unsigned char *)(a1 + 1488);
  if (*(char *)(a2 + 1511) < 0)
  {
    sub_4200(v27, *(void **)(a2 + 1488), *(void *)(a2 + 1496));
  }
  else
  {
    long long v28 = *(_OWORD *)(a2 + 1488);
    *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
    *(_OWORD *)BOOL v27 = v28;
  }
  long long v29 = *(_OWORD *)(a2 + 1512);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = v29;
  return a1;
}

void sub_4BC07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13)
{
  long long v20 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 1464) = v20;
    operator delete(v20);
  }
  sub_402628(v18);
  if (*(char *)(v13 + 1215) < 0)
  {
    operator delete(*v17);
    BOOL v21 = *v16;
    if (!*v16)
    {
LABEL_5:
      BOOL v22 = *v15;
      if (!*v15) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v21 = *v16;
    if (!*v16) {
      goto LABEL_5;
    }
  }
  operator delete(v21);
  BOOL v22 = *v15;
  if (!*v15)
  {
LABEL_6:
    int64_t v23 = *a10;
    if (!*a10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  operator delete(v22);
  int64_t v23 = *a10;
  if (!*a10)
  {
LABEL_8:
    BOOL v24 = *a11;
    if (*a11)
    {
      *(void *)(v13 + 1080) = v24;
      operator delete(v24);
    }
    sub_4BC1B8(a12);
    sub_4BCA98(a13);
    sub_4BCC2C(v13);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v13 + 1112) = v23;
  operator delete(v23);
  goto LABEL_8;
}

void sub_4BC198()
{
  if (!*v0) {
    JUMPOUT(0x4BC134);
  }
  JUMPOUT(0x4BC12CLL);
}

void sub_4BC1A8()
{
  if (!*v0) {
    JUMPOUT(0x4BC148);
  }
  JUMPOUT(0x4BC140);
}

uint64_t sub_4BC1B8(uint64_t a1)
{
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_4BC218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4BC310(a1, a2);
  sub_4BC310(v4 + 40, a2 + 40);
  sub_4BC310(a1 + 80, a2 + 80);
  sub_4BC310(a1 + 120, a2 + 120);
  sub_4BC310(a1 + 160, a2 + 160);
  sub_4BC454(a1 + 200, a2 + 200);
  uint64_t v5 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v5;
  return a1;
}

void sub_4BC2B0(_Unwind_Exception *a1)
{
  sub_3A4C2C(v5);
  sub_3A4C2C(v4);
  sub_3A4C2C(v3);
  sub_3A4C2C(v2);
  sub_3A4C2C(v1);
  _Unwind_Resume(a1);
}

void sub_4BC2FC(_Unwind_Exception *a1)
{
  sub_3A4C2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4BC310(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_24AFC(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_4BC42C(_Unwind_Exception *a1)
{
  sub_3A4C2C(v1);
  _Unwind_Resume(a1);
}

void sub_4BC440(_Unwind_Exception *a1)
{
  sub_3A4C2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4BC454(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_4BC598(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_4BC570(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_4BC584(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_4BC598(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7 + (((v6 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v6 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v6 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v9 = (int)a2[2];
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      BOOL v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v6 && *(uint64_t *)((char *)v14 + 20) == __PAIR64__(v9, v7)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v3)
            {
              goto LABEL_25;
            }
            BOOL v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v6 && *(uint64_t *)((char *)v14 + 20) == __PAIR64__(v9, v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          BOOL v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_25:
  long long v18 = operator new(0x20uLL);
  *long long v18 = 0;
  v18[1] = v10;
  v18[2] = *(void *)a3;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(a3 + 8);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_28:
      *long long v18 = *v22;
LABEL_63:
      void *v22 = v18;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_39;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        uint64_t v3 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v3 = v10;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v3 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      BOOL v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_28;
      }
    }
  }
  *long long v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_4BC928(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4BC93C(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 1);
  int8x8_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  int v10 = a2[8];
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v10;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint8x8_t v12 = (unsigned char *)*((void *)a2 + 5);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 6);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    BOOL v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 56) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 48) = v15;
  }
  uint64_t v16 = (unsigned char *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_4200(v16, *((void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v17 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)uint64_t v16 = v17;
  }
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  return a1;
}

void sub_4BCA60(_Unwind_Exception *exception_object)
{
  int8x8_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BCA98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = *(void ***)(a1 + 176);
  if (v5)
  {
    do
    {
      uint64_t v16 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      int8x8_t v5 = v16;
    }
    while (v16);
  }
  uint64_t v6 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v6) {
    operator delete(v6);
  }
  int64_t v7 = *(void ***)(a1 + 136);
  if (v7)
  {
    do
    {
      long long v17 = (void **)*v7;
      if (*((char *)v7 + 39) < 0) {
        operator delete(v7[2]);
      }
      operator delete(v7);
      int64_t v7 = v17;
    }
    while (v17);
  }
  unint64_t v8 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void ***)(a1 + 96);
  if (v9)
  {
    do
    {
      long long v18 = (void **)*v9;
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      uint64_t v9 = v18;
    }
    while (v18);
  }
  int v10 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v10) {
    operator delete(v10);
  }
  unint64_t v11 = *(void ***)(a1 + 56);
  if (v11)
  {
    do
    {
      float v19 = (void **)*v11;
      if (*((char *)v11 + 39) < 0) {
        operator delete(v11[2]);
      }
      operator delete(v11);
      unint64_t v11 = v19;
    }
    while (v19);
  }
  uint8x8_t v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v12) {
    operator delete(v12);
  }
  int64_t v13 = *(void ***)(a1 + 16);
  if (v13)
  {
    do
    {
      float v20 = (void **)*v13;
      if (*((char *)v13 + 39) < 0) {
        operator delete(v13[2]);
      }
      operator delete(v13);
      int64_t v13 = v20;
    }
    while (v20);
  }
  BOOL v14 = *(void **)a1;
  *(void *)a1 = 0;
  if (v14) {
    operator delete(v14);
  }
  return a1;
}

uint64_t sub_4BCC2C(uint64_t a1)
{
  if (*(char *)(a1 + 639) < 0)
  {
    operator delete(*(void **)(a1 + 616));
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void **)(a1 + 568);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 592));
  uint64_t v2 = *(void **)(a1 + 568);
  if (v2)
  {
LABEL_4:
    *(void *)(a1 + 576) = v2;
    operator delete(v2);
  }
LABEL_5:
  sub_48CB50(a1 + 512);
  uint64_t v3 = *(void *)(a1 + 480);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 488);
    int8x8_t v5 = *(void **)(a1 + 480);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 48);
        if (v6)
        {
          *(void *)(v4 - 40) = v6;
          operator delete(v6);
        }
        if (*(char *)(v4 - 57) < 0) {
          operator delete(*(void **)(v4 - 80));
        }
        v4 -= 80;
      }
      while (v4 != v3);
      int8x8_t v5 = *(void **)(a1 + 480);
    }
    *(void *)(a1 + 488) = v3;
    operator delete(v5);
  }
  sub_48CA88(a1 + 424);
  uint64_t v7 = *(void *)(a1 + 376);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 384);
    uint64_t v9 = *(void **)(a1 + 376);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v7);
      uint64_t v9 = *(void **)(a1 + 376);
    }
    *(void *)(a1 + 384) = v7;
    operator delete(v9);
  }
  int v10 = *(void **)(a1 + 352);
  if (v10)
  {
    *(void *)(a1 + 360) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 328);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 336);
    int64_t v13 = *(void **)(a1 + 328);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      int64_t v13 = *(void **)(a1 + 328);
    }
    *(void *)(a1 + 336) = v11;
    operator delete(v13);
  }
  uint64_t v14 = *(void *)(a1 + 304);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 312);
    uint64_t v16 = *(void **)(a1 + 304);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0) {
          operator delete(*(void **)(v15 - 24));
        }
        v15 -= 24;
      }
      while (v15 != v14);
      uint64_t v16 = *(void **)(a1 + 304);
    }
    *(void *)(a1 + 312) = v14;
    operator delete(v16);
  }
  uint64_t v17 = *(void *)(a1 + 272);
  if (v17)
  {
    sub_48A070(a1 + 272, v17);
    operator delete(*(void **)(a1 + 272));
  }
  if (*(unsigned char *)(a1 + 264))
  {
    long long v18 = *(void **)(a1 + 240);
    if (v18)
    {
      *(void *)(a1 + 248) = v18;
      operator delete(v18);
    }
    uint64_t v19 = *(void *)(a1 + 208);
    if (v19)
    {
      uint64_t v20 = *(void *)(a1 + 216);
      uint64_t v21 = *(void **)(a1 + 208);
      if (v20 != v19)
      {
        do
          uint64_t v20 = sub_489CF4(v20 - 144);
        while (v20 != v19);
        uint64_t v21 = *(void **)(a1 + 208);
      }
      *(void *)(a1 + 216) = v19;
      operator delete(v21);
    }
    BOOL v22 = *(void **)(a1 + 160);
    if (v22)
    {
      *(void *)(a1 + 168) = v22;
      operator delete(v22);
    }
    *(unsigned char *)(a1 + 264) = 0;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    BOOL v23 = *(void **)(a1 + 104);
    if (v23)
    {
      *(void *)(a1 + 112) = v23;
      operator delete(v23);
    }
    uint64_t v24 = *(void *)(a1 + 72);
    if (v24)
    {
      uint64_t v25 = *(void *)(a1 + 80);
      __int16 v26 = *(void **)(a1 + 72);
      if (v25 != v24)
      {
        do
          uint64_t v25 = sub_489CF4(v25 - 144);
        while (v25 != v24);
        __int16 v26 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 80) = v24;
      operator delete(v26);
    }
    unint64_t v27 = *(void **)(a1 + 24);
    if (v27)
    {
      *(void *)(a1 + 32) = v27;
      operator delete(v27);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  return a1;
}

uint64_t sub_4BCED0(uint64_t a1)
{
  if ((*(char *)(a1 + 1511) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 1456);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1488));
  uint64_t v2 = *(void **)(a1 + 1456);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 1464) = v2;
    operator delete(v2);
  }
LABEL_4:
  sub_402628((void *)(a1 + 1232));
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 1152);
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 1192));
  uint64_t v3 = *(void **)(a1 + 1152);
  if (v3) {
LABEL_6:
  }
    operator delete(v3);
LABEL_7:
  uint64_t v4 = *(void **)(a1 + 1128);
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = *(void **)(a1 + 1104);
  if (v5)
  {
    *(void *)(a1 + 1112) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 1072);
  if (v6)
  {
    *(void *)(a1 + 1080) = v6;
    operator delete(v6);
  }
  if ((*(char *)(a1 + 1055) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 1008);
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1032));
  uint64_t v7 = *(void **)(a1 + 1008);
  if (v7)
  {
LABEL_15:
    *(void *)(a1 + 1016) = v7;
    operator delete(v7);
  }
LABEL_16:
  uint64_t v8 = *(void **)(a1 + 976);
  if (v8)
  {
    *(void *)(a1 + 984) = v8;
    operator delete(v8);
  }
  sub_4BCA98(a1 + 712);

  return sub_4BCC2C(a1);
}

uint64_t sub_4BCFD0(uint64_t a1)
{
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void ***)(a1 + 104);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v4 = *(void ***)(a1 + 112);
    if (v4 == v2)
    {
      *(void *)(a1 + 112) = v2;
      operator delete(v2);
      if (*(char *)(a1 + 103) < 0) {
        goto LABEL_15;
      }
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      int8x8_t v5 = *(void **)(a1 + 104);
      *(void *)(a1 + 112) = v2;
      operator delete(v5);
      if (*(char *)(a1 + 103) < 0) {
        goto LABEL_15;
      }
    }
LABEL_4:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 136));
  uint64_t v2 = *(void ***)(a1 + 104);
  if (v2) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_4BD0C8(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0xCF3CF3CF3CF3CF3DLL * ((a1[1] - v9) >> 3) >= a4)
    {
      sub_4BD518((uint64_t)&v25, a2, a3, v9);
      uint64_t v23 = v22;
      uint64_t result = a1[1];
      if (result != v22)
      {
        do
          uint64_t result = sub_4BCFD0(result - 168);
        while (result != v23);
      }
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((a1[1] - v9) >> 3);
      uint64_t result = sub_4BD518((uint64_t)&v24, a2, v19, v9);
      uint64_t v20 = a1[1];
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t result = sub_4BD34C(v20 + v21, v19 + v21);
          v21 += 168;
        }
        while (v19 + v21 != a3);
        v20 += v21;
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4BCFD0(v10 - 168);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x186186186186186) {
      goto LABEL_28;
    }
    unint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v13;
    if (v14 > 0x186186186186186) {
LABEL_28:
    }
      sub_2E00();
    uint64_t v15 = 168 * v14;
    uint64_t result = (uint64_t)operator new(168 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (a2 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_4BD34C(v17 + v18, a2 + v18);
        v18 += 168;
      }
      while (a2 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_4BD324(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 168)
    sub_4BCFD0(v2 - 168 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BD34C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_4200((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_4200((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  sub_8A6F8((char *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v8 = (unsigned char *)(a1 + 136);
  if (*(char *)(a2 + 159) < 0)
  {
    sub_4200(v8, *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)uint64_t v8 = v9;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

void sub_4BD494(_Unwind_Exception *a1)
{
  sub_1A668(v5);
  if (v1[103] < 0)
  {
    operator delete(*v4);
    if ((v1[79] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v1[79] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_4BD518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 112;
  do
  {
    uint64_t v7 = v6 - 112;
    *(void *)a4 = *(void *)(v6 - 112);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 104));
    int v8 = *(_DWORD *)(v6 - 64);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v6 - 80);
    *(_DWORD *)(a4 + 48) = v8;
    std::string::operator=((std::string *)(a4 + 56), (const std::string *)(v6 - 56));
    std::string::operator=((std::string *)(a4 + 80), (const std::string *)(v6 - 32));
    if (a4 != v6 - 112) {
      sub_69208(a4 + 104, *(std::string **)(v6 - 8), *(std::string **)v6, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 3));
    }
    *(_WORD *)(a4 + 128) = *(_WORD *)(v6 + 16);
    std::string::operator=((std::string *)(a4 + 136), (const std::string *)(v6 + 24));
    *(_WORD *)(a4 + 160) = *(_WORD *)(v6 + 48);
    a4 += 168;
    v6 += 168;
  }
  while (v7 + 168 != v5);
  return v5;
}

uint64_t sub_4BD604(uint64_t a1)
{
  if (*(char *)(a1 + 1439) < 0)
  {
    operator delete(*(void **)(a1 + 1416));
    if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void ***)(a1 + 1328);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_13:
      uint64_t v7 = *(void ***)(a1 + 1336);
      if (v7 == v2)
      {
        *(void *)(a1 + 1336) = v2;
        operator delete(v2);
        if (*(char *)(a1 + 1327) < 0) {
          goto LABEL_20;
        }
      }
      else
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 6;
        }
        while (v7 != v2);
        int v8 = *(void **)(a1 + 1328);
        *(void *)(a1 + 1336) = v2;
        operator delete(v8);
        if (*(char *)(a1 + 1327) < 0) {
          goto LABEL_20;
        }
      }
LABEL_5:
      if ((*(char *)(a1 + 1255) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1376));
  uint64_t v2 = *(void ***)(a1 + 1328);
  if (v2) {
    goto LABEL_13;
  }
LABEL_4:
  if ((*(char *)(a1 + 1327) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 1304));
  if ((*(char *)(a1 + 1255) & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v3 = *(void **)(a1 + 1208);
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 1232));
  uint64_t v3 = *(void **)(a1 + 1208);
  if (!v3)
  {
LABEL_7:
    long long v4 = *(void ***)(a1 + 1176);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v9 = *(void *)(a1 + 1216);
  uint64_t v10 = v3;
  if ((void *)v9 != v3)
  {
    do
      uint64_t v9 = sub_4BCFD0(v9 - 168);
    while ((void *)v9 != v3);
    uint64_t v10 = *(void **)(a1 + 1208);
  }
  *(void *)(a1 + 1216) = v3;
  operator delete(v10);
  long long v4 = *(void ***)(a1 + 1176);
  if (!v4)
  {
LABEL_8:
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a1 + 1175) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_33:
    operator delete(*(void **)(a1 + 1152));
    sub_3A6B94(v5);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_34;
  }
LABEL_26:
  uint64_t v11 = *(void ***)(a1 + 1184);
  if (v11 == v4)
  {
    *(void *)(a1 + 1184) = v4;
    operator delete(v4);
    uint64_t v5 = a1 + 32;
    if (*(char *)(a1 + 1175) < 0) {
      goto LABEL_33;
    }
  }
  else
  {
    do
    {
      if (*((char *)v11 - 1) < 0) {
        operator delete(*(v11 - 3));
      }
      v11 -= 3;
    }
    while (v11 != v4);
    unint64_t v12 = *(void **)(a1 + 1176);
    *(void *)(a1 + 1184) = v4;
    operator delete(v12);
    uint64_t v5 = a1 + 32;
    if (*(char *)(a1 + 1175) < 0) {
      goto LABEL_33;
    }
  }
LABEL_9:
  sub_3A6B94(v5);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_4BD7E8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(char *)(a1 + 1143) < 0)
  {
    operator delete(*(void **)(a1 + 1120));
    a1 = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return sub_3A6B94(a1);
}

uint64_t sub_4BD84C(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

char *sub_4BD8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v7 = sub_4BD9B0((void **)a1, a2, a3);
    *(void *)(a1 + 8) = v7;
    return v7 - 48;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    uint64_t v9 = (unsigned char *)(v5 + 24);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(v9, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)a3;
      *(void *)(v5 + 40) = *(void *)(a3 + 16);
      *(_OWORD *)uint64_t v9 = v10;
    }
    *(void *)(a1 + 8) = v5 + 48;
    *(void *)(a1 + 8) = v5 + 48;
    return (char *)v5;
  }
}

void sub_4BD980(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_4BD9B0(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v9 = operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = &v9[48 * v4];
  uint64_t v21 = &v9[48 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(&v9[48 * v4], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[48 * v4 + 24];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
    *(void *)&v9[48 * v4 + 40] = *(void *)(a3 + 16);
  }
  unint64_t v12 = &v9[48 * v4];
  uint64_t v20 = v12;
  uint64_t v13 = v12 + 48;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = &v9[48 * v4];
    a1[1] = v13;
    a1[2] = v21;
    goto LABEL_29;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 3);
    *((void *)v12 - 4) = *((void *)v15 - 4);
    *((_OWORD *)v12 - 3) = v16;
    *((void *)v15 - 5) = 0;
    *((void *)v15 - 4) = 0;
    *((void *)v15 - 6) = 0;
    long long v17 = *(_OWORD *)(v15 - 24);
    *((void *)v12 - 1) = *((void *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v17;
    v12 -= 48;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    *((void *)v15 - 3) = 0;
    v15 -= 48;
  }
  while (v15 != v14);
  uint64_t v18 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v21;
  if (v15 == v18) {
    goto LABEL_29;
  }
  do
  {
    if (*(v15 - 1) < 0)
    {
      operator delete(*((void **)v15 - 3));
      if ((*(v15 - 25) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((*(v15 - 25) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*((void **)v15 - 6));
LABEL_22:
    v15 -= 48;
  }
  while (v15 != v18);
  uint64_t v15 = v18;
LABEL_29:
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_4BDBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_75890((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_4BDC0C(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 24 * a3;
    long long v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      uint64_t v9 = &v6[v7];
      long long v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_4200(v9, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_4BDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4BDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

void *sub_4BDD38(void *a1, int *a2)
{
  sub_4BDDE4((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = sub_4BDEBC(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5)
    {
      if (v8) {
        sub_4BD604((uint64_t)v5 + 16);
      }
      operator delete(v5);
    }
  }
  return v3;
}

void sub_4BDDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12) {
      sub_4BD604((uint64_t)__p + 16);
    }
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BDDE4@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x5B0uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  int v8 = *a2;
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC((uint64_t)v7 + 16, v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_4BE02C(a1 + 24, (int *)v7 + 4);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_4BDE84(_Unwind_Exception *a1)
{
  sub_4BDFE4(v1);
  _Unwind_Resume(a1);
}

void sub_4BDE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BDFE4(v15);
  _Unwind_Resume(a1);
}

void *sub_4BDEBC(void *a1, uint64_t a2)
{
  char v4 = a1 + 3;
  uint64_t v5 = a2 + 16;
  unint64_t v6 = sub_4BE02C((uint64_t)(a1 + 3), (int *)(a2 + 16));
  *(void *)(a2 + 8) = v6;
  uint64_t result = sub_4BF5C0((uint64_t)a1, v6, v5);
  if (!result)
  {
    int8x8_t v8 = (int8x8_t)a1[1];
    unint64_t v9 = *(void *)(a2 + 8);
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v8) {
        v9 %= *(void *)&v8;
      }
    }
    else
    {
      v9 &= *(void *)&v8 - 1;
    }
    uint64_t v11 = *(void **)(*a1 + 8 * v9);
    if (v11)
    {
      *(void *)a2 = *v11;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v9) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_15:
        ++*v4;
        return (void *)a2;
      }
      unint64_t v12 = *(void *)(*(void *)a2 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v8) {
          v12 %= *(void *)&v8;
        }
      }
      else
      {
        v12 &= *(void *)&v8 - 1;
      }
      uint64_t v11 = (void *)(*a1 + 8 * v12);
    }
    *uint64_t v11 = a2;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_4BDFE4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_4BD604((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_4BE02C(uint64_t a1, int *a2)
{
  unint64_t v14 = (*a2 + 0x388152A534) ^ 0xDEADBEEFLL;
  sub_4BE710(&v14, (uint64_t)(a2 + 8));
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v16 = 0;
  sub_8A6F8((char *)__p, *((void *)a2 + 147), *((void *)a2 + 148), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 148) - *((void *)a2 + 147)) >> 3));
  unint64_t v3 = sub_4BF0D4((uint64_t)&v18, (long long **)__p);
  char v4 = (void **)__p[0];
  v14 ^= v3 + (v14 << 6) + (v14 >> 2) + 2654435769u;
  if (__p[0])
  {
    uint64_t v5 = (void **)__p[1];
    unint64_t v6 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      unint64_t v6 = __p[0];
    }
    __p[1] = v4;
    operator delete(v6);
  }
  sub_4BE8A8(&v14, (uint64_t)(a2 + 300));
  v14 ^= a2[314] + 2654435769 + (v14 << 6) + (v14 >> 2);
  if (*((char *)a2 + 1399) < 0)
  {
    sub_4200(__p, *((void **)a2 + 172), *((void *)a2 + 173));
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)a2 + 86);
    *(void *)&long long v16 = *((void *)a2 + 174);
  }
  if ((SBYTE7(v16) & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)__p;
  }
  else {
    uint64_t v7 = (uint64_t *)__p[0];
  }
  if ((SBYTE7(v16) & 0x80u) == 0) {
    unint64_t v8 = BYTE7(v16);
  }
  else {
    unint64_t v8 = (unint64_t)__p[1];
  }
  unint64_t v9 = sub_B128((uint64_t)&v18, v7, v8);
  v14 ^= v9 + 2654435769u + (v14 << 6) + (v14 >> 2);
  if ((SBYTE7(v16) & 0x80000000) == 0)
  {
    uint64_t v10 = (uint64_t)(a2 + 316);
    if (!sub_40A45C(a2 + 316)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  operator delete(__p[0]);
  uint64_t v10 = (uint64_t)(a2 + 316);
  if (sub_40A45C(a2 + 316))
  {
LABEL_20:
    unsigned int v11 = sub_3FB38C(v10);
    v14 ^= v11 + 2654435769 + (v14 << 6) + (v14 >> 2);
  }
LABEL_21:
  __p[0] = *((void **)a2 + 175);
  LODWORD(__p[1]) = a2[352];
  if (*((char *)a2 + 1439) < 0)
  {
    sub_4200(&v16, *((void **)a2 + 177), *((void *)a2 + 178));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 354);
    uint64_t v17 = *((void *)a2 + 179);
  }
  uint64_t v12 = sub_4BF4C0((uint64_t)&v18, (unsigned int *)__p);
  uint64_t result = (v12 + 2654435769 + (v14 << 6) + (v14 >> 2)) ^ v14;
  unint64_t v14 = result;
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)v16);
    return v14;
  }
  return result;
}

void sub_4BE2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BE2DC(uint64_t a1, int a2, const std::string *a3)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  unint64_t v6 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_DWORD *)a1 = a2;
  std::string::operator=(v6, a3);
  return a1;
}

void sub_4BE404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (v10[1439] < 0)
  {
    operator delete(*v13);
    if ((v10[1399] & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C(v15);
      if ((v10[1327] & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v14);
        sub_1A668(a10);
        sub_4BD7E8(v12);
        if (v10[31] < 0) {
          operator delete(*v11);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v16);
      goto LABEL_5;
    }
  }
  else if ((v10[1399] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v17);
  sub_28F14C(v15);
  if ((v10[1327] & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t sub_4BE498(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 148) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 156) = 7;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 157) = 0;
  *(_OWORD *)(a1 + 220) = 0u;
  uint64_t v2 = a1 + 220;
  *(unsigned char *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(void *)(a1 + 265) = 0;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 288) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  memset_pattern16((void *)(a1 + 352), &xmmword_20B8FC0, 0x30uLL);
  *(_WORD *)(v2 + 180) = -1;
  *(void *)(v2 + 188) = 0;
  *(unsigned char *)(v2 + 196) = 0;
  *(unsigned char *)(v2 + 212) = 0;
  *(unsigned char *)(v2 + 243) = 0;
  *(unsigned char *)(v2 + 220) = 0;
  sub_6F30A4(v2 + 244);
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  return a1;
}

void sub_4BE5D4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 463) < 0) {
    operator delete(*(void **)(v1 + 440));
  }
  if (*(unsigned char *)(v1 + 432)) {
    *(unsigned char *)(v1 + 432) = 0;
  }
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_4BE604(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v5 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_user_generated_incidents");
  *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v5 = xmmword_20B5EB0;
  strcpy((char *)__p, "display_speed_traps_on_map");
  *(unsigned char *)(a1 + 33) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_4BE6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BE708()
{
  return 0;
}

uint64_t sub_4BE710(void *a1, uint64_t a2)
{
  sub_4BE9F4((uint64_t)v11, a2);
  if (*(char *)(a2 + 1143) < 0)
  {
    sub_4200(&v14, *(void **)(a2 + 1120), *(void *)(a2 + 1128));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 1120);
    uint64_t v15 = *(void *)(a2 + 1136);
  }
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(__p, (void *)v12, *((unint64_t *)&v12 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v12;
    uint64_t v9 = v13;
  }
  if (v9 >= 0) {
    char v4 = (uint64_t *)__p;
  }
  else {
    char v4 = (uint64_t *)__p[0];
  }
  if (v9 >= 0) {
    unint64_t v5 = HIBYTE(v9);
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  unint64_t v6 = sub_B128((uint64_t)&v10, v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  *a1 ^= ((v6 + 0x388152A534) ^ 0xDEADBEEF) + (*a1 << 6) + (*a1 >> 2) + 2654435769u;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  return sub_3A6B94((uint64_t)v11);
}

void sub_4BE864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4BD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BE878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BE88C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_4BE8A8(void *a1, uint64_t a2)
{
  int v7 = *(_DWORD *)a2;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v8 = 0;
  sub_4BF330((uint64_t)&v8, *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200(&__p, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 48);
  }
  *a1 ^= sub_4BF1B4((uint64_t)&v13, &v7) + (*a1 << 6) + (*a1 >> 2) + 2654435769u;
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  char v4 = v8;
  if (v8)
  {
    uint64_t v5 = (uint64_t)v9;
    unint64_t v6 = v8;
    if (v9 != v8)
    {
      do
        uint64_t v5 = sub_4BCFD0(v5 - 168);
      while ((void *)v5 != v4);
      unint64_t v6 = v8;
    }
    uint64_t v9 = v4;
    operator delete(v6);
  }
}

void sub_4BE9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_20A8E24();
  }
  _Unwind_Resume(exception_object);
}

void sub_4BE9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4BE9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_34C720(a1, a2);
  int v5 = *(unsigned __int8 *)(a2 + 432);
  *(unsigned char *)(v4 + 432) = v5;
  if (v5) {
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
  }
  if (*(char *)(a2 + 463) < 0)
  {
    sub_4200((unsigned char *)(a1 + 440), *(void **)(a2 + 440), *(void *)(a2 + 448));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 440);
    *(void *)(a1 + 456) = *(void *)(a2 + 456);
    *(_OWORD *)(a1 + 440) = v6;
  }
  sub_4AA8E0((char *)(a1 + 464), (long long *)(a2 + 464));
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  int v7 = *(unsigned __int8 *)(a2 + 632);
  *(unsigned char *)(a1 + 632) = v7;
  if (v7) {
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
  }
  *(void *)(a1 + 640) = off_2438EC8;
  unint64_t v8 = (unsigned char *)(a1 + 648);
  if (*(char *)(a2 + 671) < 0)
  {
    sub_4200(v8, *(void **)(a2 + 648), *(void *)(a2 + 656));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 648);
    *(void *)(a1 + 664) = *(void *)(a2 + 664);
    *(_OWORD *)unint64_t v8 = v9;
  }
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = *(_WORD *)(a2 + 672);
  int v10 = *(unsigned __int8 *)(a2 + 1112);
  *(unsigned char *)(a1 + 1112) = v10;
  if (v10) {
    sub_4BEB84(a1 + 680, a2 + 680);
  }
  return a1;
}

void sub_4BEB2C(_Unwind_Exception *a1)
{
  if (v1[632]) {
    v1[632] = 0;
  }
  sub_4A50F4(v3);
  if ((char)v1[463] < 0) {
    operator delete(*v2);
  }
  if (v1[432]) {
    v1[432] = 0;
  }
  sub_29D95C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4BEB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_34D040(a1, a2);
  if (*(char *)(a2 + 191) < 0)
  {
    sub_4200((unsigned char *)(v4 + 168), *(void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 168);
    *(void *)(v4 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(v4 + 168) = v5;
  }
  if (*(char *)(a2 + 215) < 0)
  {
    sub_4200((unsigned char *)(a1 + 192), *(void **)(a2 + 192), *(void *)(a2 + 200));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v6;
  }
  int v7 = (unsigned char *)(a1 + 216);
  if (*(char *)(a2 + 239) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 216), *(void *)(a2 + 224));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)int v7 = v8;
  }
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  if (*(char *)(a2 + 271) < 0)
  {
    sub_4200((unsigned char *)(a1 + 248), *(void **)(a2 + 248), *(void *)(a2 + 256));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 248);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = v9;
  }
  if (*(char *)(a2 + 295) < 0)
  {
    sub_4200((unsigned char *)(a1 + 272), *(void **)(a2 + 272), *(void *)(a2 + 280));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v10;
  }
  unsigned int v11 = (unsigned char *)(a1 + 296);
  if (*(char *)(a2 + 319) < 0)
  {
    sub_4200(v11, *(void **)(a2 + 296), *(void *)(a2 + 304));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)unsigned int v11 = v12;
  }
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  if (*(char *)(a2 + 351) < 0)
  {
    sub_4200((unsigned char *)(a1 + 328), *(void **)(a2 + 328), *(void *)(a2 + 336));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = v13;
  }
  if (*(char *)(a2 + 375) < 0)
  {
    sub_4200((unsigned char *)(a1 + 352), *(void **)(a2 + 352), *(void *)(a2 + 360));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 352);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = v14;
  }
  uint64_t v15 = (unsigned char *)(a1 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    sub_4200(v15, *(void **)(a2 + 376), *(void *)(a2 + 384));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 376);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)uint64_t v15 = v16;
  }
  *(_WORD *)(a1 + 400) = *(_WORD *)(a2 + 400);
  *(_WORD *)(a1 + 402) = *(_WORD *)(a2 + 402);
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 408) = 0;
  uint64_t v18 = *(void *)(a2 + 408);
  uint64_t v17 = *(void *)(a2 + 416);
  uint64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + ++*(_DWORD *)(result + 408) = v20;
    *(void *)(a1 + 416) = v20;
    *(void *)(a1 + 424) = &v20[256 * (v19 >> 8)];
    *(void *)(a1 + 416) = sub_4BEF18(a1 + 424, v18, v17, (uint64_t)v20);
  }
  return a1;
}

void sub_4BEDF8(_Unwind_Exception *a1)
{
  if (v1[375] < 0) {
    operator delete(*v6);
  }
  if (v1[351] < 0) {
    operator delete(*v5);
  }
  sub_4BD84C(v4);
  sub_1B23C(v3);
  if (v1[191] < 0)
  {
    operator delete(*v2);
    sub_303198((uint64_t)v1);
    _Unwind_Resume(a1);
  }
  sub_303198((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4BEF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_4BEF94(a4 + v7, a2 + v7);
      v7 += 256;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_4BEF78(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20A8E80();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4BEF94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_34CE84(a1, a2);
  if (*(char *)(a2 + 207) < 0)
  {
    sub_4200((unsigned char *)(v4 + 184), *(void **)(a2 + 184), *(void *)(a2 + 192));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 184);
    *(void *)(v4 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(v4 + 184) = v5;
  }
  if (*(char *)(a2 + 231) < 0)
  {
    sub_4200((unsigned char *)(a1 + 208), *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = v6;
  }
  uint64_t v7 = (unsigned char *)(a1 + 232);
  if (*(char *)(a2 + 255) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 232), *(void *)(a2 + 240));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return a1;
}

void sub_4BF064(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 231) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    {
LABEL_3:
      sub_30328C(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 207) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_30328C(v1);
  _Unwind_Resume(a1);
}

void sub_4BF0C0(_Unwind_Exception *a1)
{
  sub_30328C(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_4BF0D4(uint64_t a1, long long **a2)
{
  unint64_t v2 = 3735928559;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_4200(__p, *(void **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        uint64_t v11 = *((void *)v3 + 2);
        *(_OWORD *)long long __p = v5;
      }
      if (v11 >= 0) {
        long long v6 = (uint64_t *)__p;
      }
      else {
        long long v6 = (uint64_t *)__p[0];
      }
      if (v11 >= 0) {
        unint64_t v7 = HIBYTE(v11);
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      unint64_t v8 = sub_B128((uint64_t)&v12, v6, v7);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
      v2 ^= (v2 << 6) + (v2 >> 2) + 2654435769u + v8;
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  return v2;
}

unint64_t sub_4BF1B4(uint64_t a1, int *a2)
{
  unint64_t v2 = (*a2 + 0x388152A534) ^ 0xDEADBEEFLL;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_4BF330((uint64_t)&v12, *((void *)a2 + 1), *((void *)a2 + 2), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  if (v12 != (char *)v13)
  {
    do
    {
      if (v3[31] < 0)
      {
        sub_4200(__p, *((void **)v3 + 1), *((void *)v3 + 2));
      }
      else
      {
        long long v5 = *(_OWORD *)(v3 + 8);
        uint64_t v16 = *((void *)v3 + 3);
        *(_OWORD *)long long __p = v5;
      }
      if (v16 >= 0) {
        long long v6 = (uint64_t *)__p;
      }
      else {
        long long v6 = (uint64_t *)__p[0];
      }
      if (v16 >= 0) {
        unint64_t v7 = HIBYTE(v16);
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      unint64_t v8 = sub_B128((uint64_t)&v17, v6, v7);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      v2 ^= (v2 << 6) + (v2 >> 2) + 2654435769u + v8;
      v3 += 168;
    }
    while (v3 != (char *)v4);
    uint64_t v3 = v12;
  }
  if (v3)
  {
    uint64_t v9 = v13;
    long long v10 = v3;
    if ((char *)v13 != v3)
    {
      do
        uint64_t v9 = sub_4BCFD0(v9 - 168);
      while ((char *)v9 != v3);
      long long v10 = v12;
    }
    uint64_t v13 = (uint64_t)v3;
    operator delete(v10);
  }
  return v2;
}

void sub_4BF318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4B1DB4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4BF330(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(168 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    void v5[2] = result + 168 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4BD34C(v8 + v9, a2 + v9);
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4BF3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4BF408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 168)
    sub_4BCFD0(v10 - 168 + v11);
  *(void *)(v9 + 8) = v10;
  sub_4BF438(&a9);
  _Unwind_Resume(a1);
}

void ***sub_4BF438(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4BCFD0(v4 - 168);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_4BF4C0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t v4 = (int)a2[2];
  if (*((char *)a2 + 39) < 0)
  {
    sub_4200(__p, *((void **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    *(_OWORD *)long long __p = *((_OWORD *)a2 + 1);
    uint64_t v12 = *((void *)a2 + 4);
  }
  if (v12 >= 0) {
    long long v5 = (uint64_t *)__p;
  }
  else {
    long long v5 = (uint64_t *)__p[0];
  }
  if (v12 >= 0) {
    unint64_t v6 = HIBYTE(v12);
  }
  else {
    unint64_t v6 = (unint64_t)__p[1];
  }
  unint64_t v7 = sub_B128((uint64_t)&v13, v5, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = (v2 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v9 = (((v4 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8) + 0x388152A534) ^ 0xDEADBEEF;
  return ((v9 << 6) + (v9 >> 2) + v7 + 2654435769u) ^ v9;
}

void *sub_4BF5C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_23;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v8 = a2 % v4;
    }
    else {
      unint64_t v8 = a2;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v8 = (v4 - 1) & a2;
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v12 = v10[1];
        if (v12 == a2)
        {
          if (sub_4BF7F0((uint64_t)(v10 + 2), a3)) {
            return v10;
          }
        }
        else if ((v12 & (v4 - 1)) != v8)
        {
          goto LABEL_23;
        }
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          goto LABEL_23;
        }
      }
    }
    do
    {
      unint64_t v11 = v10[1];
      if (v11 == a2)
      {
        if (sub_4BF7F0((uint64_t)(v10 + 2), a3)) {
          return v10;
        }
      }
      else
      {
        if (v11 >= v4) {
          v11 %= v4;
        }
        if (v11 != v8) {
          break;
        }
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
LABEL_23:
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v4 && (float)(v14 * (float)v4) >= v13) {
    return 0;
  }
  BOOL v15 = 1;
  if (v4 >= 3) {
    BOOL v15 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v4);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v19 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v19) {
    goto LABEL_47;
  }
  if (prime < *(void *)&v19)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      size_t v23 = std::__next_prime(v20);
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime >= *(void *)&v19) {
        return 0;
      }
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        size_t v20 = v22;
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime >= *(void *)&v19) {
        return 0;
      }
    }
LABEL_47:
    sub_B6C0(a1, prime);
  }
  return 0;
}

uint64_t sub_4BF7F0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  unint64_t v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    unint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    unint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      unint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (!sub_604EE8(a1 + 32, a2 + 32)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 1184);
  uint64_t v11 = *(void *)(a1 + 1176);
  uint64_t v12 = *(unsigned __int8 ***)(a2 + 1176);
  if (v10 - v11 != *(void *)(a2 + 1184) - (void)v12) {
    return 0;
  }
  for (; v11 != v10; v12 += 3)
  {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
    if ((v13 & 0x80u) == 0) {
      float v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
    }
    else {
      float v14 = *(unsigned __int8 **)(v11 + 8);
    }
    BOOL v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      BOOL v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      unint64_t v17 = (unsigned __int8 *)v12;
    }
    else {
      unint64_t v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *(void *)(v11 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v11 + 23))
    {
      uint64_t v18 = 0;
      while (*(unsigned __int8 *)(v11 + v18) == v17[v18])
      {
        if (v13 == ++v18) {
          goto LABEL_36;
        }
      }
      return 0;
    }
LABEL_36:
    v11 += 24;
  }
  if (!sub_4BFA98(a1 + 1200, a2 + 1200)
    || *(_DWORD *)(a1 + 1256) != *(_DWORD *)(a2 + 1256)
    || *(void *)(a1 + 1288) != *(void *)(a2 + 1288))
  {
    return 0;
  }
  uint64_t v19 = *(unsigned __int8 *)(a1 + 1327);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 1327);
  }
  else {
    uint64_t v20 = *(void *)(a1 + 1312);
  }
  uint64_t v21 = *(unsigned __int8 *)(a2 + 1327);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a2 + 1312);
  }
  if (v20 != v21) {
    return 0;
  }
  size_t v23 = (const void **)(a1 + 1304);
  if (v22 >= 0) {
    char v24 = (unsigned __int8 *)(a2 + 1304);
  }
  else {
    char v24 = *(unsigned __int8 **)(a2 + 1304);
  }
  if ((v19 & 0x80) != 0)
  {
    if (!memcmp(*v23, v24, *(void *)(a1 + 1312))) {
      goto LABEL_55;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 1327))
  {
    while (*(unsigned __int8 *)v23 == *v24)
    {
      size_t v23 = (const void **)((char *)v23 + 1);
      ++v24;
      if (!--v19) {
        goto LABEL_55;
      }
    }
    return 0;
  }
LABEL_55:
  if (!sub_4BFBDC((unsigned __int8 **)(a1 + 1328), (unsigned __int8 **)(a2 + 1328))
    || *(_DWORD *)(a1 + 1360) != *(_DWORD *)(a2 + 1360)
    || *(_DWORD *)(a1 + 1356) != *(_DWORD *)(a2 + 1356)
    || *(_DWORD *)(a1 + 1352) != *(_DWORD *)(a2 + 1352)
    || !sub_A938C((unsigned __int8 *)(a1 + 1376), (unsigned __int8 *)(a2 + 1376)))
  {
    return 0;
  }

  return sub_4BFD20(a1 + 1400, a2 + 1400);
}

uint64_t sub_4BFA98(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - v4) {
    return 0;
  }
  if (v3 != v2)
  {
    while (*(_DWORD *)v3 == *(_DWORD *)v4 && *(_DWORD *)(v3 + 4) == *(_DWORD *)(v4 + 4))
    {
      uint64_t v5 = *(unsigned __int8 *)(v3 + 31);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
      }
      else {
        uint64_t v6 = *(void *)(v3 + 16);
      }
      uint64_t v7 = *(unsigned __int8 *)(v4 + 31);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v4 + 16);
      }
      if (v6 != v7) {
        break;
      }
      if (v8 >= 0) {
        unint64_t v9 = (unsigned __int8 *)(v4 + 8);
      }
      else {
        unint64_t v9 = *(unsigned __int8 **)(v4 + 8);
      }
      if ((v5 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v3 + 8), v9, *(void *)(v3 + 16))) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v3 + 31))
      {
        uint64_t v10 = 0;
        while (*(unsigned __int8 *)(v3 + v10 + 8) == v9[v10])
        {
          if (v5 == ++v10) {
            goto LABEL_22;
          }
        }
        return 0;
      }
LABEL_22:
      if (*(void *)(v3 + 32) != *(void *)(v4 + 32)) {
        return 0;
      }
      v3 += 168;
      v4 += 168;
      uint64_t result = 1;
      if (v3 == v2) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_4BFBDC(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  while (*v3 == *v4
       && *((_DWORD *)v3 + 1) == *((_DWORD *)v4 + 1)
       && *((void *)v3 + 1) == *((void *)v4 + 1)
       && v3[16] == v4[16])
  {
    uint64_t v5 = v3[47];
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v3[47];
    }
    else {
      uint64_t v6 = *((void *)v3 + 4);
    }
    uint64_t v7 = v4[47];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)v4 + 4);
    }
    if (v6 != v7) {
      break;
    }
    if (v8 >= 0) {
      unint64_t v9 = v4 + 24;
    }
    else {
      unint64_t v9 = (unsigned __int8 *)*((void *)v4 + 3);
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*((const void **)v3 + 3), v9, *((void *)v3 + 4))) {
        return 0;
      }
    }
    else if (v3[47])
    {
      uint64_t v10 = 0;
      while (v3[v10 + 24] == v9[v10])
      {
        if (v5 == ++v10) {
          goto LABEL_23;
        }
      }
      return 0;
    }
LABEL_23:
    v3 += 48;
    v4 += 48;
    uint64_t result = 1;
    if (v3 == v2) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_4BFD20(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 24);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 39);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 16);
  unint64_t v9 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v7 = (unsigned __int8 *)(a2 + 16);
  int v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 24)) == 0;
  }
  if (!*(unsigned char *)(a1 + 39)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void *sub_4BFE00(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long __p = operator new(0x5B0uLL);
  *(void *)long long __p = 0;
  *((void *)__p + 1) = 0;
  sub_4BFEEC(v4, (uint64_t)__p + 16, a2);
  *((void *)__p + 1) = sub_4BE02C((uint64_t)(a1 + 3), (int *)__p + 4);
  int v5 = sub_4BDEBC(a1, (uint64_t)__p);
  if ((v6 & 1) == 0 && __p)
  {
    sub_4BD604((uint64_t)__p + 16);
    operator delete(__p);
  }
  return v5;
}

void sub_4BFEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BDFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BFED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BDFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4BFEEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long __p = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  sub_4BFFA4(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  sub_4C00F4(a2, (long long **)&__p);
  uint64_t v4 = (void **)__p;
  if (__p)
  {
    int v5 = v8;
    char v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 6;
      }
      while (v5 != v4);
      char v6 = __p;
    }
    int v8 = v4;
    operator delete(v6);
  }
}

void sub_4BFF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_28F14C((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_4BFFA4(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t result = operator new(48 * a4);
    int v8 = result;
    *int v5 = result;
    v5[1] = result;
    void v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + v9);
        v10[16] = *(unsigned char *)(a2 + v9 + 16);
        uint64_t result = &v8[v9 + 24];
        int v12 = (void **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          uint64_t result = sub_4200(result, *v12, *(void *)(v11 + 32));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v12;
          *(void *)&v8[v9 + 40] = *(void *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4C00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4C00B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_2900E8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4C00F4(uint64_t a1, long long **a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  if ((long long **)(a1 + 1328) != a2) {
    sub_4C02B4((void **)(a1 + 1328), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
  return a1;
}

void sub_4C0224(_Unwind_Exception *a1)
{
  if (v1[1439] < 0)
  {
    operator delete(*v9);
    if ((v1[1399] & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C(v5);
      if ((v1[1327] & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v3);
        sub_1A668(v4);
        sub_4BD7E8(v2);
        if (v1[31] < 0) {
          operator delete(*v6);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v7);
      goto LABEL_5;
    }
  }
  else if ((v1[1399] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v8);
  sub_28F14C(v5);
  if ((v1[1327] & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void sub_4C02B4(void **a1, long long *a2, long long *a3, unint64_t a4)
{
  char v6 = (const std::string *)a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (std::string *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != (char *)v9)
      {
        do
        {
          if (*(v10 - 1) < 0) {
            operator delete(*((void **)v10 - 3));
          }
          v10 -= 48;
        }
        while (v10 != (char *)v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      goto LABEL_46;
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v26 = 2 * v25;
    if (2 * v25 <= a4) {
      uint64_t v26 = a4;
    }
    unint64_t v27 = v25 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v26;
    if (v27 > 0x555555555555555) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v28 = 6 * v27;
    size_t v23 = (void **)operator new(48 * v27);
    *a1 = v23;
    a1[1] = v23;
    a1[2] = &v23[v28];
    if (v6 != (const std::string *)a3)
    {
      unint64_t v29 = 0;
      do
      {
        unint64_t v30 = (char *)&v23[v29 / 8];
        unint64_t v31 = (long long *)&v6[v29 / 0x18];
        *(_OWORD *)unint64_t v30 = *(_OWORD *)&v6[v29 / 0x18].__r_.__value_.__l.__data_;
        v30[16] = v6[v29 / 0x18].__r_.__value_.__s.__data_[16];
        int v32 = (char *)&v23[v29 / 8 + 3];
        p_std::string::pointer data = (void **)&v6[v29 / 0x18 + 1].__r_.__value_.__l.__data_;
        if (SHIBYTE(v6[v29 / 0x18 + 1].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v32, *p_data, *((void *)v31 + 4));
        }
        else
        {
          *(_OWORD *)int v32 = *(_OWORD *)p_data;
          v23[v29 / 8 + 5] = (void *)v6[v29 / 0x18 + 1].__r_.__value_.__r.__words[2];
        }
        v29 += 48;
      }
      while (v31 + 3 != a3);
      size_t v23 = (void **)((char *)v23 + v29);
    }
LABEL_38:
    a1[1] = v23;
    return;
  }
  int v12 = (void **)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      size_t v23 = (void **)*a1;
    }
    else
    {
      size_t v23 = (void **)*a1;
      do
      {
        long long v24 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v9->__r_.__value_.__s.__data_[16] = v6->__r_.__value_.__s.__data_[16];
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v24;
        std::string::operator=(v9 + 1, v6 + 1);
        v23 += 6;
        v6 += 2;
        v9 += 2;
      }
      while (v6 != (const std::string *)a3);
      int v12 = (void **)a1[1];
    }
    while (v12 != v23)
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 6;
    }
    goto LABEL_38;
  }
  int v13 = &a2[((char *)v12 - (char *)v9) >> 4];
  if (v12 != (void **)v9)
  {
    do
    {
      long long v14 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__s.__data_[16] = v6->__r_.__value_.__s.__data_[16];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v14;
      std::string::operator=(v9 + 1, v6 + 1);
      v6 += 2;
      v9 += 2;
    }
    while (v6 != (const std::string *)v13);
    uint64_t v9 = (std::string *)a1[1];
  }
  BOOL v15 = (char *)v9;
  if (v13 != a3)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v18 = (char *)&v9[v16 / 0x18];
      uint64_t v19 = &v13[v16 / 0x10];
      long long v20 = v13[v16 / 0x10];
      v18[16] = v13[v16 / 0x10 + 1];
      *(_OWORD *)uint64_t v18 = v20;
      uint64_t v21 = (char *)&v9[v16 / 0x18 + 1];
      int v22 = (void **)&v13[v16 / 0x10 + 1] + 1;
      if (SHIBYTE(v13[v16 / 0x10 + 2]) < 0)
      {
        sub_4200(v21, *v22, *((void *)v19 + 4));
      }
      else
      {
        long long v17 = *(_OWORD *)v22;
        v9[v16 / 0x18 + 1].__r_.__value_.__r.__words[2] = *((void *)&v13[v16 / 0x10 + 2] + 1);
        *(_OWORD *)uint64_t v21 = v17;
      }
      v16 += 48;
    }
    while (v19 + 3 != a3);
    BOOL v15 = (char *)&v9[v16 / 0x18];
  }
  a1[1] = v15;
}

void sub_4C05C8(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 48)
  {
    if (*(char *)(v2 + v3 - 1) < 0) {
      operator delete(*(void **)(v2 + v3 - 24));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_4C05FC(uint64_t *a1, int *a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v17 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v13 = v7;
  long long v14 = &v7[1440 * v3];
  uint64_t v15 = (uint64_t)v14;
  unint64_t v16 = &v7[1440 * v6];
  int v8 = *a2;
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC((uint64_t)v14, v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v15 += 1440;
  sub_4C0798(a1, &v13);
  uint64_t v9 = a1[1];
  uint64_t v11 = (uint64_t)v14;
  for (uint64_t i = v15; v15 != v11; uint64_t i = v15)
  {
    uint64_t v15 = i - 1440;
    sub_4BD604(i - 1440);
  }
  if (v13) {
    operator delete(v13);
  }
  return v9;
}

void sub_4C0760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4C0774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_4C09A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_4C0798(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      *(_DWORD *)(v6 + v7 - 1440) = *(_DWORD *)(v4 + v7 - 1440);
      uint64_t v10 = v6 + v7 - 1432;
      uint64_t v11 = v4 + v7 - 1432;
      long long v12 = *(_OWORD *)v11;
      *(void *)(v10 + 16) = *(void *)(v4 + v7 - 1416);
      *(_OWORD *)uint64_t v10 = v12;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      uint64_t result = (uint64_t *)sub_4C09FC(v6 + v7 - 1408, v4 + v7 - 1408);
      uint64_t v13 = v6 + v7 - 288;
      uint64_t v14 = v4 + v7 - 288;
      long long v15 = *(_OWORD *)v14;
      *(void *)(v13 + 16) = *(void *)(v4 + v7 - 272);
      *(_OWORD *)uint64_t v13 = v15;
      *(void *)(v14 + 16) = 0;
      *(void *)(v9 - 280) = 0;
      unint64_t v16 = (void *)(v6 + v7 - 264);
      *(void *)uint64_t v14 = 0;
      *unint64_t v16 = 0;
      *(void *)(v8 - 256) = 0;
      *(void *)(v8 - 248) = 0;
      *(_OWORD *)unint64_t v16 = *(_OWORD *)(v4 + v7 - 264);
      *(void *)(v8 - 248) = *(void *)(v4 + v7 - 248);
      *(void *)(v9 - 256) = 0;
      *(void *)(v9 - 248) = 0;
      LODWORD(v16) = *(_DWORD *)(v4 + v7 - 240);
      *(void *)(v9 - 264) = 0;
      *(void *)(v8 - 224) = 0;
      *(void *)(v8 - 216) = 0;
      *(void *)(v8 - 232) = 0;
      *(_OWORD *)(v8 - 232) = *(_OWORD *)(v4 + v7 - 232);
      *(_DWORD *)(v8 - 240) = v16;
      *(void *)(v8 - 216) = *(void *)(v4 + v7 - 216);
      *(void *)(v9 - 232) = 0;
      *(void *)(v9 - 224) = 0;
      *(void *)(v9 - 216) = 0;
      long long v17 = *(_OWORD *)(v4 + v7 - 208);
      *(void *)(v8 - 192) = *(void *)(v4 + v7 - 192);
      *(_OWORD *)(v8 - 208) = v17;
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      *(void *)(v9 - 208) = 0;
      long long v18 = *(_OWORD *)(v4 + v7 - 184);
      long long v19 = *(_OWORD *)(v4 + v7 - 168);
      *(_OWORD *)(v8 - 156) = *(_OWORD *)(v4 + v7 - 156);
      *(_OWORD *)(v8 - 168) = v19;
      *(_OWORD *)(v8 - 184) = v18;
      long long v20 = *(_OWORD *)(v4 + v7 - 136);
      *(void *)(v8 - 120) = *(void *)(v4 + v7 - 120);
      *(_OWORD *)(v8 - 136) = v20;
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 120) = 0;
      *(void *)(v9 - 136) = 0;
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(v4 + v7 - 112);
      *(void *)(v8 - 96) = *(void *)(v4 + v7 - 96);
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      long long v21 = *(_OWORD *)(v4 + v7 - 88);
      *(_DWORD *)(v8 - 72) = *(_DWORD *)(v4 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v21;
      long long v22 = *(_OWORD *)(v4 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(v4 + v7 - 48);
      *(_OWORD *)(v8 - 64) = v22;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      uint64_t v23 = *(void *)(v4 + v7 - 40);
      LODWORD(v14) = *(_DWORD *)(v4 + v7 - 32);
      *(void *)(v9 - 64) = 0;
      *(_DWORD *)(v8 - 32) = v14;
      *(void *)(v8 - 40) = v23;
      long long v24 = *(_OWORD *)(v4 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(v4 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v24;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 1440;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v25 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v25;
  uint64_t v26 = v3[1];
  v3[1] = a2[2];
  a2[2] = v26;
  uint64_t v27 = v3[2];
  v3[2] = a2[3];
  a2[3] = v27;
  *a2 = a2[1];
  return result;
}

uint64_t sub_4C09A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1440;
    sub_4BD604(i - 1440);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_4C09FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v4;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v5 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v7;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  uint64_t v8 = *(void *)(a2 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = v8;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  long long v9 = *(_OWORD *)(a2 + 296);
  uint64_t v10 = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v9;
  *(void *)(a1 + 312) = v10;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 320) = 0;
  long long v12 = *(_OWORD *)(a2 + 376);
  long long v11 = *(_OWORD *)(a2 + 392);
  long long v13 = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + ++*(_DWORD *)(result + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v12;
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 360) = v13;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  LODWORD(v8) = *(unsigned __int8 *)(a2 + 432);
  *(unsigned char *)(a1 + 432) = v8;
  if (v8) {
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
  }
  long long v14 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = v14;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 456) = 0;
  *(void *)(a2 + 440) = 0;
  long long v15 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v15;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  *(void *)(a2 + 464) = 0;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  long long v16 = *(_OWORD *)(a2 + 496);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = v16;
  *(void *)(a2 + 504) = 0;
  *(void *)(a2 + 512) = 0;
  *(void *)(a2 + 496) = 0;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  long long v17 = *(_OWORD *)(a2 + 536);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = v17;
  *(void *)(a2 + 552) = 0;
  *(void *)(a2 + 544) = 0;
  *(void *)(a2 + 536) = 0;
  long long v18 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = v18;
  *(void *)(a2 + 576) = 0;
  *(void *)(a2 + 568) = 0;
  *(void *)(a2 + 560) = 0;
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  long long v19 = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = v19;
  *(void *)(a2 + 608) = 0;
  *(void *)(a2 + 600) = 0;
  *(void *)(a2 + 592) = 0;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  int v20 = *(unsigned __int8 *)(a2 + 632);
  *(unsigned char *)(a1 + 632) = v20;
  if (v20) {
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
  }
  *(void *)(a1 + 640) = off_2438EC8;
  long long v21 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = v21;
  *(void *)(a2 + 664) = 0;
  *(void *)(a2 + 656) = 0;
  *(void *)(a2 + 648) = 0;
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = *(_WORD *)(a2 + 672);
  sub_4C0D14(a1 + 680, a2 + 680);
  return a1;
}

__n128 sub_4C0D14(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 432);
  *(unsigned char *)(a1 + 432) = v2;
  if (v2)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    long long v3 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v3;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 112) = 0;
    long long v4 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v4;
    long long v5 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v5;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    long long v6 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v6;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    long long v7 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v7;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 232) = 0;
    char v9 = *(unsigned char *)(a2 + 240);
    uint64_t v8 = a2 + 240;
    *(void *)(v8 - 16) = 0;
    *(unsigned char *)(a1 + 240) = v9;
    long long v10 = *(_OWORD *)(v8 + 8);
    *(void *)(a1 + 264) = *(void *)(v8 + 24);
    *(_OWORD *)(a1 + 248) = v10;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 8) = 0;
    long long v11 = *(_OWORD *)(v8 + 32);
    *(void *)(a1 + 288) = *(void *)(v8 + 48);
    *(_OWORD *)(a1 + 272) = v11;
    *(void *)(v8 + 40) = 0;
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 32) = 0;
    long long v12 = *(_OWORD *)(v8 + 56);
    *(void *)(a1 + 312) = *(void *)(v8 + 72);
    *(_OWORD *)(a1 + 296) = v12;
    *(void *)(v8 + 64) = 0;
    *(void *)(v8 + 72) = 0;
    *(void *)(v8 + 56) = 0;
    *(unsigned char *)(a1 + 320) = *(unsigned char *)(v8 + 80);
    long long v13 = *(_OWORD *)(v8 + 88);
    *(void *)(a1 + 344) = *(void *)(v8 + 104);
    *(_OWORD *)(a1 + 328) = v13;
    *(void *)(v8 + 96) = 0;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 88) = 0;
    long long v14 = *(_OWORD *)(v8 + 112);
    *(void *)(a1 + 368) = *(void *)(v8 + 128);
    *(_OWORD *)(a1 + 352) = v14;
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 128) = 0;
    *(void *)(v8 + 112) = 0;
    __n128 result = *(__n128 *)(v8 + 136);
    *(void *)(a1 + 392) = *(void *)(v8 + 152);
    *(__n128 *)(a1 + 376) = result;
    *(void *)(v8 + 144) = 0;
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 136) = 0;
    *(_WORD *)(a1 + 400) = *(_WORD *)(v8 + 160);
    *(_WORD *)(a1 + 402) = *(_WORD *)(v8 + 162);
    *(void *)(a1 + 416) = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 408) = 0;
    uint64_t v16 = *(void *)(v8 + 176);
    *(void *)(a1 + ++*(_DWORD *)(result + 408) = *(void *)(v8 + 168);
    *(void *)(a1 + 416) = v16;
    *(void *)(a1 + 424) = *(void *)(v8 + 184);
    *(void *)(v8 + 168) = 0;
    *(void *)(v8 + 176) = 0;
    *(void *)(v8 + 184) = 0;
  }
  return result;
}

void sub_4C0EFC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (*(char *)(v4 + 31) < 0)
      {
        sub_4200(__p, *(void **)(v4 + 8), *(void *)(v4 + 16));
      }
      else
      {
        long long v7 = *(_OWORD *)(v4 + 8);
        uint64_t v10 = *(void *)(v4 + 24);
        *(_OWORD *)std::string __p = v7;
      }
      uint64_t v8 = sub_8B3D0((void ***)a2, v6, (__n128 *)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v8 + 24;
      v4 += 168;
    }
    while (v4 != v5);
  }
}

void sub_4C0FD8(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_4C0FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_4C1014(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v16 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  std::string __p = v7;
  long long v13 = &v7[1440 * v3];
  long long v15 = &v7[1440 * v6];
  sub_4C1170((uint64_t)v13, a2);
  long long v14 = v13 + 1440;
  sub_4C0798(a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v10 = (uint64_t)v13;
  for (uint64_t i = v14; v14 != (char *)v10; uint64_t i = v14)
  {
    long long v14 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4C115C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C1170(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  unint64_t v4 = (void **)(a1 + 1176);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = (v6 - *a2) >> 3;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  sub_8A6F8((char *)&v12, v5, v6, 0xAAAAAAAAAAAAAAABLL * v7);
  uint64_t v8 = *(void *)(a1 + 1176);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 1184);
    uint64_t v10 = *v4;
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = *v4;
    }
    *(void *)(a1 + 1184) = v8;
    operator delete(v10);
    *unint64_t v4 = 0;
    *(void *)(a1 + 1184) = 0;
    *(void *)(a1 + 1192) = 0;
  }
  *(_OWORD *)unint64_t v4 = v12;
  *(void *)(a1 + 1192) = v13;
  return a1;
}

void sub_4C1304(_Unwind_Exception *a1)
{
  if (v1[1439] < 0)
  {
    operator delete(*v9);
    if ((v1[1399] & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C(v5);
      if ((v1[1327] & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v4);
        sub_1A668(v2);
        sub_4BD7E8(v3);
        if (v1[31] < 0) {
          operator delete(*v6);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v7);
      goto LABEL_5;
    }
  }
  else if ((v1[1399] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v8);
  sub_28F14C(v5);
  if ((v1[1327] & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t sub_4C1394(uint64_t *a1, int *a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v16 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = v7;
  uint64_t v13 = &v7[1440 * v3];
  long long v15 = &v7[1440 * v6];
  sub_4C14F8((uint64_t)(a1 + 2), (uint64_t)v13, a2);
  long long v14 = v13 + 1440;
  sub_4C0798(a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v10 = (uint64_t)v13;
  for (uint64_t i = v14; v14 != (char *)v10; uint64_t i = v14)
  {
    long long v14 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4C14E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C14F8(uint64_t a1, uint64_t a2, int *a3)
{
  int v7 = *a3;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 + 2);
  uint64_t v9 = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  long long v3 = *((_OWORD *)a3 + 2);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *(_OWORD *)std::string __p = v3;
  uint64_t v11 = *((void *)a3 + 6);
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  sub_4C15B8(a2, (uint64_t)&v7);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v4 = v8[0];
  if (v8[0])
  {
    uint64_t v5 = v8[1];
    unint64_t v6 = v8[0];
    if (v8[1] != v8[0])
    {
      do
        uint64_t v5 = (void *)sub_4BCFD0((uint64_t)v5 - 168);
      while (v5 != v4);
      unint64_t v6 = v8[0];
    }
    v8[1] = v4;
    operator delete(v6);
  }
}

void sub_4C15A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4B1E10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C15B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1200) = *(_DWORD *)a2;
  if (a1 + 1200 != a2) {
    sub_4BD0C8((uint64_t *)(a1 + 1208), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 32));
  return a1;
}

void sub_4C1704(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4C1794(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v17 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    int v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v13 = v7;
  long long v14 = &v7[1440 * v3];
  long long v15 = v14;
  uint64_t v16 = &v7[1440 * v6];
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v18 = *(_OWORD *)a2;
  v19[0] = v8;
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a2 + 28);
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 48);
  uint64_t v21 = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_4C194C((uint64_t)&v7[1440 * v3], &v18);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  v15 += 1440;
  sub_4C0798(a1, &v13);
  uint64_t v9 = a1[1];
  uint64_t v11 = v14;
  for (uint64_t i = v15; v15 != v11; uint64_t i = v15)
  {
    long long v15 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (v13) {
    operator delete(v13);
  }
  return v9;
}

void sub_4C1914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C1928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_4C09A8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_4C194C(uint64_t a1, long long *a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 1284) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 1256) = v4;
  *(_OWORD *)(a1 + 1272) = v5;
  std::string::operator=((std::string *)(a1 + 1304), (const std::string *)a2 + 2);
  return a1;
}

void sub_4C1A74(_Unwind_Exception *a1)
{
  if (v1[1439] < 0)
  {
    operator delete(*v9);
    if ((v1[1399] & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C(v6);
      if ((v1[1327] & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v4);
        sub_1A668(v3);
        sub_4BD7E8(v2);
        if (v1[31] < 0) {
          operator delete(*v7);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v5);
      goto LABEL_5;
    }
  }
  else if ((v1[1399] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v8);
  sub_28F14C(v6);
  if ((v1[1327] & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t sub_4C1B04(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v5) {
    unint64_t v5 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v8 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v8 = v5;
  }
  long long v18 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(1440 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::string __p = v9;
  long long v15 = &v9[1440 * v4];
  long long v17 = &v9[1440 * v8];
  sub_4C1C70((uint64_t)v15, a2, a3);
  uint64_t v16 = v15 + 1440;
  sub_4C0798(a1, &__p);
  uint64_t v10 = a1[1];
  uint64_t v12 = (uint64_t)v15;
  for (uint64_t i = v16; v16 != (char *)v12; uint64_t i = v16)
  {
    uint64_t v16 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_4C1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C1C70(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = a1 + 32;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  sub_4BE9F4((uint64_t)v9, a2);
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&v10, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  int v7 = (void **)(a1 + 1152);
  sub_4C1EE0(v6, (uint64_t)v9);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)int v7 = v10;
  *(void *)(a1 + 1168) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  sub_3A6B94((uint64_t)v9);
  return a1;
}

void sub_4C1E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A6B94((uint64_t)va);
  if (*(char *)(v3 + 1439) < 0)
  {
    operator delete(*(void **)(v3 + 1416));
    uint64_t v9 = (void **)(v3 + 1176);
    if ((*(char *)(v3 + 1399) & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C((void **)(v3 + 1328));
      if ((*(char *)(v3 + 1327) & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v5);
        sub_1A668(v9);
        sub_4BD7E8(v4);
        if (*(char *)(v3 + 31) < 0) {
          operator delete(*v6);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v7);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v9 = (void **)(v3 + 1176);
    if ((*(char *)(v3 + 1399) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(v3 + 1376));
  sub_28F14C((void **)(v3 + 1328));
  if ((*(char *)(v3 + 1327) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t sub_4C1EE0(uint64_t a1, uint64_t a2)
{
  sub_301388((char **)a1, a2);
  if (*(unsigned char *)(a2 + 432))
  {
    uint64_t v4 = *(void *)(a2 + 424);
    if (!*(unsigned char *)(a1 + 432)) {
      *(unsigned char *)(a1 + 432) = 1;
    }
    *(void *)(a1 + 424) = v4;
  }
  else if (*(unsigned char *)(a1 + 432))
  {
    *(unsigned char *)(a1 + 432) = 0;
  }
  uint64_t v5 = (void **)(a1 + 440);
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 463) = 0;
  *(unsigned char *)(a2 + 440) = 0;
  sub_4C2034(a1 + 464, (long long *)(a2 + 464));
  char v7 = *(unsigned char *)(a2 + 620);
  if (v7)
  {
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    char v7 = 1;
  }
  *(unsigned char *)(a1 + 620) = v7;
  if (*(unsigned char *)(a2 + 632))
  {
    uint64_t v8 = *(void *)(a2 + 624);
    if (!*(unsigned char *)(a1 + 632)) {
      *(unsigned char *)(a1 + 632) = 1;
    }
    *(void *)(a1 + 624) = v8;
  }
  else if (*(unsigned char *)(a1 + 632))
  {
    *(unsigned char *)(a1 + 632) = 0;
  }
  uint64_t v9 = (void **)(a1 + 648);
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)uint64_t v9 = v10;
  *(unsigned char *)(a2 + 671) = 0;
  *(unsigned char *)(a2 + 648) = 0;
  *(_WORD *)(a1 + 672) = *(_WORD *)(a2 + 672);
  uint64_t v11 = a1 + 680;
  if (*(unsigned char *)(a2 + 1112))
  {
    sub_4C2164(v11, a2 + 680);
    return a1;
  }
  if (!*(unsigned char *)(a1 + 1112)) {
    return a1;
  }
  sub_3A6CB8(v11);
  *(unsigned char *)(a1 + 1112) = 0;
  return a1;
}

uint64_t sub_4C2034(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  uint64_t v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  char v7 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)char v7 = v8;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  uint64_t v9 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
  uint64_t v11 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)uint64_t v11 = v12;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  return a1;
}

uint64_t sub_4C2164(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 432)) {
    return sub_4C2350(a1, a2);
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  long long v2 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v2;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  long long v3 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v3;
  long long v4 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v4;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  long long v5 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v5;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v6 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v6;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 232) = 0;
  char v8 = *(unsigned char *)(a2 + 240);
  uint64_t v7 = a2 + 240;
  *(void *)(v7 - 16) = 0;
  *(unsigned char *)(a1 + 240) = v8;
  uint64_t result = a1 + 240;
  long long v10 = *(_OWORD *)(v7 + 8);
  *(void *)(result + 24) = *(void *)(v7 + 24);
  *(_OWORD *)(result + 8) = v10;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 8) = 0;
  long long v11 = *(_OWORD *)(v7 + 32);
  *(void *)(result + 48) = *(void *)(v7 + 48);
  *(_OWORD *)(result + 32) = v11;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 32) = 0;
  long long v12 = *(_OWORD *)(v7 + 56);
  *(void *)(result + 72) = *(void *)(v7 + 72);
  *(_OWORD *)(result + 56) = v12;
  *(void *)(v7 + 64) = 0;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 56) = 0;
  *(unsigned char *)(result + 80) = *(unsigned char *)(v7 + 80);
  long long v13 = *(_OWORD *)(v7 + 88);
  *(void *)(result + 104) = *(void *)(v7 + 104);
  *(_OWORD *)(result + 88) = v13;
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 88) = 0;
  long long v14 = *(_OWORD *)(v7 + 112);
  *(void *)(result + 128) = *(void *)(v7 + 128);
  *(_OWORD *)(result + 112) = v14;
  *(void *)(v7 + 120) = 0;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 112) = 0;
  long long v15 = *(_OWORD *)(v7 + 136);
  *(void *)(result + 152) = *(void *)(v7 + 152);
  *(_OWORD *)(result + 136) = v15;
  *(void *)(v7 + 144) = 0;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 136) = 0;
  *(_WORD *)(result + 160) = *(_WORD *)(v7 + 160);
  *(_WORD *)(result + 162) = *(_WORD *)(v7 + 162);
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 168) = 0;
  uint64_t v16 = *(void *)(v7 + 176);
  *(void *)(result + 168) = *(void *)(v7 + 168);
  *(void *)(result + 176) = v16;
  *(void *)(result + 184) = *(void *)(v7 + 184);
  *(void *)(v7 + 168) = 0;
  *(void *)(v7 + 176) = 0;
  *(void *)(v7 + 184) = 0;
  *(unsigned char *)(result + 192) = 1;
  return result;
}

uint64_t sub_4C2350(uint64_t a1, uint64_t a2)
{
  sub_303024(a1, a2);
  long long v4 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)long long v4 = v5;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  long long v6 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)long long v6 = v7;
  *(unsigned char *)(a2 + 215) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  char v8 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)char v8 = v9;
  *(unsigned char *)(a2 + 239) = 0;
  *(unsigned char *)(a2 + 216) = 0;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  long long v10 = (void **)(a1 + 248);
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_OWORD *)long long v10 = v11;
  *(unsigned char *)(a2 + 271) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  long long v12 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)long long v12 = v13;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  long long v14 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)long long v14 = v15;
  *(unsigned char *)(a2 + 319) = 0;
  *(unsigned char *)(a2 + 296) = 0;
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v16 = (void **)(a1 + 328);
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 351) = 0;
  *(unsigned char *)(a2 + 328) = 0;
  long long v18 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_OWORD *)long long v18 = v19;
  *(unsigned char *)(a2 + 375) = 0;
  *(unsigned char *)(a2 + 352) = 0;
  int v20 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(_OWORD *)int v20 = v21;
  *(unsigned char *)(a2 + 399) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  char v22 = *(unsigned char *)(a2 + 401);
  if (v22)
  {
    *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
    char v22 = 1;
  }
  *(unsigned char *)(a1 + 401) = v22;
  char v23 = *(unsigned char *)(a2 + 403);
  if (v23)
  {
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
    char v23 = 1;
  }
  *(unsigned char *)(a1 + 403) = v23;
  sub_4C2590((void **)(a1 + 408));
  uint64_t v24 = *(void *)(a2 + 416);
  *(void *)(a1 + ++*(_DWORD *)(result + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v24;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a2 + ++*(_DWORD *)(result + 408) = 0;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  return a1;
}

void sub_4C2590(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 == v1)
    {
LABEL_13:
      a1[1] = v1;
      operator delete(v4);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if (*(char *)(v3 - 49) < 0) {
            goto LABEL_11;
          }
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v3 - 48));
      if (*(char *)(v3 - 49) < 0) {
LABEL_11:
      }
        operator delete(*(void **)(v3 - 72));
LABEL_4:
      v3 -= 256;
      sub_30328C(v3);
      if ((void *)v3 == v1)
      {
        long long v4 = *a1;
        goto LABEL_13;
      }
    }
  }
}

uint64_t sub_4C2644(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v9 = a2;
  long long v10 = (int *)result;
  unint64_t v31 = a2;
  int v32 = (int *)result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0x4FA4FA4FA4FA4FA5 * (((char *)v9 - (char *)v10) >> 5);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v31 = v9 - 360;
          int v27 = sub_4C5A0C((uint64_t)(v9 - 360));
          uint64_t result = sub_4C5A0C((uint64_t)v10);
          if (v27 == result)
          {
            int v28 = *(v9 - 360);
            if (v28 == 50)
            {
              uint64_t result = sub_605454((uint64_t)(v9 - 352));
              if (!result) {
                return result;
              }
              uint64_t v29 = *((unsigned __int8 *)v9 - 265);
              if ((v29 & 0x80u) != 0) {
                uint64_t v29 = *((void *)v9 - 35);
              }
              if (!v29) {
                return result;
              }
              uint64_t result = sub_604EA8((uint64_t)(v9 - 352), (uint64_t)(v10 + 8));
              if (!result) {
                return result;
              }
            }
            else if (v28 >= *v10)
            {
              return result;
            }
          }
          else if (v27 >= (int)result)
          {
            return result;
          }
          return sub_4C2A3C(&v32, (uint64_t *)&v31);
        case 3uLL:
          unint64_t v31 = v9 - 360;
          return sub_4C35CC((uint64_t)v10, (uint64_t)(v10 + 360), (uint64_t)(v9 - 360));
        case 4uLL:
          unint64_t v31 = v9 - 360;
          return sub_4C5ED8((uint64_t)v10, (uint64_t)(v10 + 360), (uint64_t)(v10 + 720), (uint64_t)(v9 - 360));
        case 5uLL:
          unint64_t v31 = v9 - 360;
          return sub_4C6550((uint64_t)v10, (uint64_t)(v10 + 360), (uint64_t)(v10 + 720), (uint64_t)(v10 + 1080), (uint64_t)(v9 - 360));
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 34559)
    {
      if (a5) {
        return sub_4C2C2C((uint64_t)v10, v9);
      }
      else {
        return sub_4C3120((uint64_t)v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (uint64_t)(v9 - 360);
    if ((unint64_t)v12 > 0x2D000)
    {
      sub_4C35CC((uint64_t)v10, (uint64_t)&v10[360 * (v13 >> 1)], v15);
      uint64_t v16 = 360 * v14;
      uint64_t v17 = 1440 * v14 - 1440;
      long long v18 = v31;
      sub_4C35CC((uint64_t)(v32 + 360), (uint64_t)v32 + v17, (uint64_t)(v31 - 720));
      sub_4C35CC((uint64_t)(v32 + 720), (uint64_t)&v32[v16 + 360], (uint64_t)(v18 - 1080));
      sub_4C35CC((uint64_t)v32 + v17, (uint64_t)&v32[v16], (uint64_t)&v32[v16 + 360]);
      unint64_t v30 = &v32[v16];
      sub_4C2A3C(&v32, (uint64_t *)&v30);
      if (a5) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_4C35CC((uint64_t)&v10[360 * (v13 >> 1)], (uint64_t)v10, v15);
      if (a5) {
        goto LABEL_23;
      }
    }
    long long v19 = v32;
    int v20 = v32 - 360;
    int v21 = sub_4C5A0C((uint64_t)(v32 - 360));
    int v22 = sub_4C5A0C((uint64_t)v19);
    if (v21 == v22)
    {
      if (*v20 == 50)
      {
        if (!sub_605454((uint64_t)(v19 - 352))) {
          goto LABEL_30;
        }
        uint64_t v23 = *((unsigned __int8 *)v19 - 265);
        if ((v23 & 0x80u) != 0) {
          uint64_t v23 = *((void *)v19 - 35);
        }
        if (!v23 || (sub_604EA8((uint64_t)(v19 - 352), (uint64_t)(v19 + 8)) & 1) == 0)
        {
LABEL_30:
          long long v9 = v31;
          uint64_t result = sub_4C4030((uint64_t)v32, v31);
          long long v10 = (int *)result;
LABEL_31:
          a5 = 0;
          int v32 = v10;
          a4 = -v11;
          goto LABEL_2;
        }
      }
      else if (*v20 >= *v19)
      {
        goto LABEL_30;
      }
    }
    else if (v21 >= v22)
    {
      goto LABEL_30;
    }
LABEL_23:
    long long v9 = v31;
    uint64_t v24 = (int *)sub_4C49A4((uint64_t)v32, (unint64_t)v31);
    if ((v25 & 1) == 0) {
      goto LABEL_29;
    }
    int v26 = sub_4C5308((uint64_t)v32, (uint64_t)v24);
    long long v10 = v24 + 360;
    uint64_t result = sub_4C5308((uint64_t)(v24 + 360), (uint64_t)v9);
    if (result)
    {
      if (v26) {
        return result;
      }
      unint64_t v31 = v24;
      long long v10 = v32;
      long long v9 = v24;
      ++v11;
    }
    else
    {
      if (!v26)
      {
LABEL_29:
        uint64_t result = sub_4C2644(v32, v24, a3, -v11, a5 & 1);
        long long v10 = v24 + 360;
        goto LABEL_31;
      }
      int v32 = v24 + 360;
      ++v11;
    }
  }
  if (v10 != v9) {
    return sub_4C6DC8((char *)v10, (char *)v9, (uint64_t)v9, a3);
  }
  return result;
}

uint64_t sub_4C2A3C(int **a1, uint64_t *a2)
{
  long long v2 = *a1;
  uint64_t v3 = *a2;
  int v14 = **a1;
  uint64_t v4 = *((void *)v2 + 3);
  long long v15 = *(_OWORD *)(v2 + 2);
  uint64_t v16 = v4;
  *((void *)v2 + 1) = 0;
  *((_OWORD *)v2 + 1) = 0u;
  sub_4C09FC((uint64_t)v17, (uint64_t)(v2 + 8));
  long long v5 = *((_OWORD *)v2 + 72);
  uint64_t v18 = *((void *)v2 + 146);
  v17[70] = v5;
  *((void *)v2 + 146) = 0;
  *((_OWORD *)v2 + 72) = 0u;
  uint64_t v19 = *((void *)v2 + 147);
  long long v20 = *((_OWORD *)v2 + 74);
  *((void *)v2 + 149) = 0;
  *(_OWORD *)(v2 + 294) = 0u;
  int v21 = v2[300];
  uint64_t v22 = *((void *)v2 + 151);
  long long v23 = *((_OWORD *)v2 + 76);
  *((void *)v2 + 153) = 0;
  *(_OWORD *)(v2 + 302) = 0u;
  long long v6 = *((_OWORD *)v2 + 77);
  uint64_t v25 = *((void *)v2 + 156);
  long long v24 = v6;
  *((void *)v2 + 156) = 0;
  *((_OWORD *)v2 + 77) = 0u;
  long long v7 = *(_OWORD *)(v2 + 314);
  long long v8 = *(_OWORD *)(v2 + 318);
  *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)(v2 + 321);
  long long v26 = v7;
  v27[0] = v8;
  uint64_t v9 = *((void *)v2 + 165);
  v27[2] = *(_OWORD *)(v2 + 326);
  uint64_t v28 = v9;
  *((void *)v2 + 165) = 0;
  *(_OWORD *)(v2 + 326) = 0u;
  long long v29 = *((_OWORD *)v2 + 83);
  uint64_t v30 = *((void *)v2 + 168);
  *((void *)v2 + 168) = 0;
  *((_OWORD *)v2 + 83) = 0u;
  LODWORD(v9) = v2[342];
  long long v31 = *(_OWORD *)(v2 + 338);
  int v32 = v9;
  long long v10 = *((_OWORD *)v2 + 86);
  uint64_t v34 = *((void *)v2 + 174);
  long long v33 = v10;
  *((void *)v2 + 174) = 0;
  *((_OWORD *)v2 + 86) = 0u;
  uint64_t v11 = *((void *)v2 + 175);
  int v36 = v2[352];
  uint64_t v35 = v11;
  uint64_t v12 = *((void *)v2 + 179);
  long long v37 = *(_OWORD *)(v2 + 354);
  uint64_t v38 = v12;
  *((void *)v2 + 178) = 0;
  *((void *)v2 + 177) = 0;
  *((void *)v2 + 179) = 0;
  sub_4C5BDC((uint64_t)v2, v3);
  sub_4C5BDC(v3, (uint64_t)&v14);
  return sub_4BD604((uint64_t)&v14);
}

uint64_t sub_4C2C2C(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    long long v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = result + 1440;
    if ((_DWORD *)(result + 1440) != a2)
    {
      uint64_t v5 = 0;
      long long v6 = (_DWORD *)result;
      do
      {
        uint64_t v8 = (uint64_t)v6;
        long long v6 = (_DWORD *)v4;
        int v9 = sub_4C5A0C(v4);
        uint64_t result = sub_4C5A0C(v8);
        if (v9 == result)
        {
          if (*v6 == 50)
          {
            uint64_t result = sub_605454(v8 + 1472);
            if (!result) {
              goto LABEL_7;
            }
            uint64_t v10 = *(unsigned __int8 *)(v8 + 2615);
            if ((v10 & 0x80u) != 0) {
              uint64_t v10 = *(void *)(v8 + 2600);
            }
            if (!v10) {
              goto LABEL_7;
            }
            uint64_t result = sub_604EA8(v8 + 1472, v8 + 32);
            if (!result) {
              goto LABEL_7;
            }
          }
          else if (*v6 >= *(_DWORD *)v8)
          {
            goto LABEL_7;
          }
        }
        else if (v9 >= (int)result)
        {
          goto LABEL_7;
        }
        int v29 = *(_DWORD *)(v8 + 1440);
        uint64_t v31 = *(void *)(v8 + 1464);
        long long v30 = *(_OWORD *)(v8 + 1448);
        *(_OWORD *)(v8 + 1456) = 0u;
        *(void *)(v8 + 1448) = 0;
        sub_4C09FC((uint64_t)v32, v8 + 1472);
        long long v33 = *(_OWORD *)(v8 + 2592);
        uint64_t v34 = *(void *)(v8 + 2608);
        *(void *)(v8 + 2592) = 0;
        *(_OWORD *)(v8 + 2600) = 0u;
        long long v35 = *(_OWORD *)(v8 + 2616);
        uint64_t v36 = *(void *)(v8 + 2632);
        *(_OWORD *)(v8 + 2616) = 0u;
        *(void *)(v8 + 2632) = 0;
        int v37 = *(_DWORD *)(v8 + 2640);
        uint64_t v38 = *(void *)(v8 + 2648);
        long long v39 = *(_OWORD *)(v8 + 2656);
        *(_OWORD *)(v8 + 2656) = 0u;
        *(void *)(v8 + 2648) = 0;
        long long v11 = *(_OWORD *)(v8 + 2672);
        uint64_t v41 = *(void *)(v8 + 2688);
        long long v40 = v11;
        *(void *)(v8 + 2688) = 0;
        *(_OWORD *)(v8 + 2672) = 0u;
        long long v12 = *(_OWORD *)(v8 + 2696);
        long long v13 = *(_OWORD *)(v8 + 2712);
        *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)(v8 + 2724);
        long long v42 = v12;
        v43[0] = v13;
        long long v14 = *(_OWORD *)(v8 + 2744);
        uint64_t v44 = *(void *)(v8 + 2760);
        v43[2] = v14;
        *(void *)(v8 + 2760) = 0;
        *(_OWORD *)(v8 + 2744) = 0u;
        long long v45 = *(_OWORD *)(v8 + 2768);
        uint64_t v46 = *(void *)(v8 + 2784);
        *(_OWORD *)(v8 + 2768) = 0u;
        *(void *)(v8 + 2784) = 0;
        long long v15 = *(_OWORD *)(v8 + 2792);
        int v48 = *(_DWORD *)(v8 + 2808);
        long long v47 = v15;
        long long v16 = *(_OWORD *)(v8 + 2816);
        uint64_t v50 = *(void *)(v8 + 2832);
        long long v49 = v16;
        *(void *)(v8 + 2832) = 0;
        *(_OWORD *)(v8 + 2816) = 0u;
        uint64_t v17 = *(void *)(v8 + 2840);
        int v52 = *(_DWORD *)(v8 + 2848);
        uint64_t v51 = v17;
        long long v18 = *(_OWORD *)(v8 + 2856);
        uint64_t v54 = *(void *)(v8 + 2872);
        long long v53 = v18;
        *(void *)(v8 + 2864) = 0;
        *(void *)(v8 + 2856) = 0;
        *(void *)(v8 + 2872) = 0;
        sub_4C5BDC((uint64_t)v6, v8);
        uint64_t v7 = v3;
        if (v8 == v3) {
          goto LABEL_6;
        }
        uint64_t v19 = v5;
        do
        {
          if ((void)v45 != *((void *)&v45 + 1))
          {
            int v20 = 1;
            goto LABEL_25;
          }
          if (DWORD2(v47))
          {
            if (DWORD2(v47) == 1)
            {
              BOOL v23 = v47 != 0x7FFFFFFF && SDWORD1(v47) < (int)v47;
              if (v23 && HIDWORD(v47) != 0x7FFFFFFF) {
                goto LABEL_42;
              }
            }
          }
          else if (v47 != 0x7FFFFFFF && SDWORD1(v47) < (int)v47)
          {
LABEL_42:
            int v20 = 2;
            goto LABEL_25;
          }
          if (v29 == 45)
          {
            int v20 = 3;
          }
          else
          {
            if (!sub_605454((uint64_t)v32)) {
              goto LABEL_56;
            }
            uint64_t v26 = HIBYTE(v34);
            if (v34 < 0) {
              uint64_t v26 = *((void *)&v33 + 1);
            }
            if (v26)
            {
              int v20 = 4;
            }
            else
            {
LABEL_56:
              if (v37 == 2)
              {
                if (v42 == 12)
                {
                  if ((void)v35 == *((void *)&v35 + 1))
                  {
                    if (v29 == 50)
                    {
                      uint64_t v27 = HIBYTE(v50);
                      if (v50 < 0) {
                        uint64_t v27 = *((void *)&v49 + 1);
                      }
                      if (v27)
                      {
                        int v20 = 9;
                      }
                      else if ((HIDWORD(v51) & v51) == 0xFFFFFFFF)
                      {
                        int v20 = 0;
                      }
                      else
                      {
                        int v20 = 10;
                      }
                    }
                    else
                    {
                      int v20 = 8;
                    }
                  }
                  else
                  {
                    int v20 = 7;
                  }
                }
                else
                {
                  int v20 = 6;
                }
              }
              else
              {
                int v20 = 5;
              }
            }
          }
LABEL_25:
          int v21 = sub_4C5A0C(v3 + v19 - 1440);
          if (v20 == v21)
          {
            if (v29 == 50)
            {
              if (!sub_605454((uint64_t)v32)) {
                goto LABEL_4;
              }
              uint64_t v22 = HIBYTE(v34);
              if (v34 < 0) {
                uint64_t v22 = *((void *)&v33 + 1);
              }
              if (!v22)
              {
LABEL_4:
                uint64_t v7 = v8;
                goto LABEL_5;
              }
              if (!sub_604EA8((uint64_t)v32, v3 + v19 - 1408))
              {
                uint64_t v7 = v3 + v19;
                goto LABEL_5;
              }
            }
            else if (v29 >= *(_DWORD *)(v3 + v19 - 1440))
            {
              goto LABEL_4;
            }
          }
          else if (v20 >= v21)
          {
            goto LABEL_4;
          }
          v8 -= 1440;
          sub_4C5BDC(v3 + v19, v3 + v19 - 1440);
          v19 -= 1440;
        }
        while (v19);
        uint64_t v7 = v3;
LABEL_5:
        long long v2 = a2;
LABEL_6:
        sub_4C5BDC(v7, (uint64_t)&v29);
        uint64_t result = sub_4BD604((uint64_t)&v29);
LABEL_7:
        uint64_t v4 = (uint64_t)(v6 + 360);
        v5 += 1440;
      }
      while (v6 + 360 != v2);
    }
  }
  return result;
}

void sub_4C310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C3120(uint64_t result, int *a2)
{
  if ((int *)result != a2)
  {
    uint64_t v3 = (int *)result;
    uint64_t v4 = result + 1440;
    if ((int *)(result + 1440) != a2)
    {
      uint64_t v5 = (_DWORD *)(result - 1440);
      do
      {
        uint64_t v6 = (uint64_t)v3;
        uint64_t v3 = (int *)v4;
        int v7 = sub_4C5A0C(v4);
        uint64_t result = sub_4C5A0C(v6);
        if (v7 == result)
        {
          if (*v3 == 50)
          {
            uint64_t result = sub_605454(v6 + 1472);
            if (result)
            {
              uint64_t v8 = *(unsigned __int8 *)(v6 + 2615);
              if ((v8 & 0x80u) != 0) {
                uint64_t v8 = *(void *)(v6 + 2600);
              }
              if (v8)
              {
                uint64_t result = sub_604EA8(v6 + 1472, v6 + 32);
                if (result)
                {
LABEL_17:
                  int v24 = *v3;
                  uint64_t v26 = *(void *)(v6 + 1464);
                  long long v25 = *(_OWORD *)(v6 + 1448);
                  *(_OWORD *)(v6 + 1456) = 0u;
                  *(void *)(v6 + 1448) = 0;
                  sub_4C09FC((uint64_t)v27, v6 + 1472);
                  long long v28 = *(_OWORD *)(v6 + 2592);
                  uint64_t v29 = *(void *)(v6 + 2608);
                  *(void *)(v6 + 2592) = 0;
                  *(_OWORD *)(v6 + 2600) = 0u;
                  long long v30 = *(_OWORD *)(v6 + 2616);
                  uint64_t v31 = *(void *)(v6 + 2632);
                  *(_OWORD *)(v6 + 2616) = 0u;
                  *(void *)(v6 + 2632) = 0;
                  int v32 = *(_DWORD *)(v6 + 2640);
                  uint64_t v33 = *(void *)(v6 + 2648);
                  long long v34 = *(_OWORD *)(v6 + 2656);
                  *(_OWORD *)(v6 + 2656) = 0u;
                  *(void *)(v6 + 2648) = 0;
                  long long v9 = *(_OWORD *)(v6 + 2672);
                  uint64_t v36 = *(void *)(v6 + 2688);
                  long long v35 = v9;
                  *(void *)(v6 + 2688) = 0;
                  *(_OWORD *)(v6 + 2672) = 0u;
                  long long v10 = *(_OWORD *)(v6 + 2696);
                  long long v11 = *(_OWORD *)(v6 + 2712);
                  *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)(v6 + 2724);
                  long long v37 = v10;
                  v38[0] = v11;
                  long long v12 = *(_OWORD *)(v6 + 2744);
                  uint64_t v39 = *(void *)(v6 + 2760);
                  v38[2] = v12;
                  *(void *)(v6 + 2760) = 0;
                  *(_OWORD *)(v6 + 2744) = 0u;
                  long long v40 = *(_OWORD *)(v6 + 2768);
                  uint64_t v41 = *(void *)(v6 + 2784);
                  *(_OWORD *)(v6 + 2768) = 0u;
                  *(void *)(v6 + 2784) = 0;
                  long long v13 = *(_OWORD *)(v6 + 2792);
                  int v43 = *(_DWORD *)(v6 + 2808);
                  long long v42 = v13;
                  long long v14 = *(_OWORD *)(v6 + 2816);
                  uint64_t v45 = *(void *)(v6 + 2832);
                  long long v44 = v14;
                  *(void *)(v6 + 2832) = 0;
                  *(_OWORD *)(v6 + 2816) = 0u;
                  uint64_t v15 = *(void *)(v6 + 2840);
                  int v47 = *(_DWORD *)(v6 + 2848);
                  uint64_t v46 = v15;
                  long long v16 = *(_OWORD *)(v6 + 2856);
                  uint64_t v49 = *(void *)(v6 + 2872);
                  long long v48 = v16;
                  *(void *)(v6 + 2864) = 0;
                  *(void *)(v6 + 2856) = 0;
                  uint64_t v17 = v5;
                  *(void *)(v6 + 2872) = 0;
                  while (1)
                  {
                    sub_4C5BDC((uint64_t)(v17 + 720), (uint64_t)(v17 + 360));
                    if ((void)v40 != *((void *)&v40 + 1))
                    {
                      int v18 = 1;
                      goto LABEL_22;
                    }
                    if (DWORD2(v42))
                    {
                      if (DWORD2(v42) == 1
                        && v42 != 0x7FFFFFFF
                        && SDWORD1(v42) < (int)v42
                        && HIDWORD(v42) != 0x7FFFFFFF)
                      {
                        goto LABEL_35;
                      }
                    }
                    else if (v42 != 0x7FFFFFFF && SDWORD1(v42) < (int)v42)
                    {
LABEL_35:
                      int v18 = 2;
                      goto LABEL_22;
                    }
                    if (v24 == 45)
                    {
                      int v18 = 3;
                    }
                    else
                    {
                      if (!sub_605454((uint64_t)v27)) {
                        goto LABEL_49;
                      }
                      uint64_t v22 = HIBYTE(v29);
                      if (v29 < 0) {
                        uint64_t v22 = *((void *)&v28 + 1);
                      }
                      if (v22)
                      {
                        int v18 = 4;
                      }
                      else
                      {
LABEL_49:
                        if (v32 == 2)
                        {
                          if (v37 == 12)
                          {
                            if ((void)v30 == *((void *)&v30 + 1))
                            {
                              if (v24 == 50)
                              {
                                uint64_t v23 = HIBYTE(v45);
                                if (v45 < 0) {
                                  uint64_t v23 = *((void *)&v44 + 1);
                                }
                                if (v23)
                                {
                                  int v18 = 9;
                                }
                                else if ((HIDWORD(v46) & v46) == 0xFFFFFFFF)
                                {
                                  int v18 = 0;
                                }
                                else
                                {
                                  int v18 = 10;
                                }
                              }
                              else
                              {
                                int v18 = 8;
                              }
                            }
                            else
                            {
                              int v18 = 7;
                            }
                          }
                          else
                          {
                            int v18 = 6;
                          }
                        }
                        else
                        {
                          int v18 = 5;
                        }
                      }
                    }
LABEL_22:
                    int v19 = sub_4C5A0C((uint64_t)v17);
                    if (v18 == v19)
                    {
                      if (v24 == 50)
                      {
                        if (!sub_605454((uint64_t)v27)) {
                          goto LABEL_4;
                        }
                        uint64_t v20 = HIBYTE(v29);
                        if (v29 < 0) {
                          uint64_t v20 = *((void *)&v28 + 1);
                        }
                        if (!v20 || !sub_604EA8((uint64_t)v27, (uint64_t)(v17 + 8)))
                        {
LABEL_4:
                          sub_4C5BDC((uint64_t)(v17 + 360), (uint64_t)&v24);
                          uint64_t result = sub_4BD604((uint64_t)&v24);
                          break;
                        }
                      }
                      else if (v24 >= *v17)
                      {
                        goto LABEL_4;
                      }
                    }
                    else if (v18 >= v19)
                    {
                      goto LABEL_4;
                    }
                    v17 -= 360;
                  }
                }
              }
            }
          }
          else if (*v3 < *(_DWORD *)v6)
          {
            goto LABEL_17;
          }
        }
        else if (v7 < (int)result)
        {
          goto LABEL_17;
        }
        uint64_t v4 = (uint64_t)(v3 + 360);
        v5 += 360;
      }
      while (v3 + 360 != a2);
    }
  }
  return result;
}

void sub_4C35B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C35CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_4C5A0C(a2);
  int v7 = sub_4C5A0C(a1);
  if (v6 != v7)
  {
    if (v6 >= v7) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 != 50)
  {
    if (*(_DWORD *)a2 >= *(_DWORD *)a1) {
      goto LABEL_19;
    }
LABEL_10:
    int v9 = sub_4C5A0C(a3);
    int v10 = sub_4C5A0C(a2);
    if (v9 == v10)
    {
      if (*(_DWORD *)a3 == 50)
      {
        if (!sub_605454(a3 + 32)) {
          goto LABEL_43;
        }
        uint64_t v11 = *(unsigned __int8 *)(a3 + 1175);
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a3 + 1160);
        }
        if (!v11 || !sub_604EA8(a3 + 32, a2 + 32))
        {
LABEL_43:
          int v63 = *(_DWORD *)a1;
          long long v64 = *(_OWORD *)(a1 + 8);
          uint64_t v65 = *(void *)(a1 + 24);
          *(_OWORD *)(a1 + 16) = 0u;
          *(void *)(a1 + 8) = 0;
          sub_4C09FC((uint64_t)v66, a1 + 32);
          long long v67 = *(_OWORD *)(a1 + 1152);
          uint64_t v68 = *(void *)(a1 + 1168);
          *(_OWORD *)(a1 + 1152) = 0u;
          uint64_t v35 = *(void *)(a1 + 1176);
          *(_OWORD *)(a1 + 1168) = 0u;
          uint64_t v69 = v35;
          long long v70 = *(_OWORD *)(a1 + 1184);
          *(_OWORD *)(a1 + 1184) = 0u;
          int v71 = *(_DWORD *)(a1 + 1200);
          uint64_t v72 = *(void *)(a1 + 1208);
          long long v73 = *(_OWORD *)(a1 + 1216);
          *(_OWORD *)(a1 + 1216) = 0u;
          *(void *)(a1 + 1208) = 0;
          long long v36 = *(_OWORD *)(a1 + 1232);
          uint64_t v75 = *(void *)(a1 + 1248);
          long long v74 = v36;
          *(void *)(a1 + 1248) = 0;
          *(_OWORD *)(a1 + 1232) = 0u;
          long long v37 = *(_OWORD *)(a1 + 1256);
          long long v38 = *(_OWORD *)(a1 + 1272);
          *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a1 + 1284);
          long long v76 = v37;
          v77[0] = v38;
          uint64_t v39 = *(void *)(a1 + 1320);
          long long v78 = *(_OWORD *)(a1 + 1304);
          uint64_t v79 = v39;
          *(void *)(a1 + 1320) = 0;
          *(_OWORD *)(a1 + 1304) = 0u;
          long long v80 = *(_OWORD *)(a1 + 1328);
          uint64_t v81 = *(void *)(a1 + 1344);
          *(_OWORD *)(a1 + 1328) = 0u;
          *(void *)(a1 + 1344) = 0;
          LODWORD(v39) = *(_DWORD *)(a1 + 1368);
          long long v82 = *(_OWORD *)(a1 + 1352);
          int v83 = v39;
          long long v40 = *(_OWORD *)(a1 + 1376);
          uint64_t v85 = *(void *)(a1 + 1392);
          long long v84 = v40;
          *(void *)(a1 + 1392) = 0;
          *(_OWORD *)(a1 + 1376) = 0u;
          uint64_t v41 = *(void *)(a1 + 1400);
          int v87 = *(_DWORD *)(a1 + 1408);
          uint64_t v86 = v41;
          uint64_t v42 = *(void *)(a1 + 1432);
          long long v88 = *(_OWORD *)(a1 + 1416);
          uint64_t v89 = v42;
          *(void *)(a1 + 1424) = 0;
          *(void *)(a1 + 1416) = 0;
          *(void *)(a1 + 1432) = 0;
          sub_4C5BDC(a1, a2);
          sub_4C5BDC(a2, (uint64_t)&v63);
          sub_4BD604((uint64_t)&v63);
          int v43 = sub_4C5A0C(a3);
          int v44 = sub_4C5A0C(a2);
          if (v43 == v44)
          {
            if (*(_DWORD *)a3 == 50)
            {
              if (!sub_605454(a3 + 32)) {
                return 1;
              }
              uint64_t v45 = *(unsigned __int8 *)(a3 + 1175);
              if ((v45 & 0x80u) != 0) {
                uint64_t v45 = *(void *)(a3 + 1160);
              }
              if (!v45 || !sub_604EA8(a3 + 32, a2 + 32)) {
                return 1;
              }
            }
            else if (*(_DWORD *)a3 >= *(_DWORD *)a2)
            {
              return 1;
            }
          }
          else if (v43 >= v44)
          {
            return 1;
          }
          int v63 = *(_DWORD *)a2;
          long long v64 = *(_OWORD *)(a2 + 8);
          uint64_t v65 = *(void *)(a2 + 24);
          *(_OWORD *)(a2 + 16) = 0u;
          *(void *)(a2 + 8) = 0;
          sub_4C09FC((uint64_t)v66, a2 + 32);
          long long v67 = *(_OWORD *)(a2 + 1152);
          uint64_t v68 = *(void *)(a2 + 1168);
          *(_OWORD *)(a2 + 1152) = 0u;
          uint64_t v55 = *(void *)(a2 + 1176);
          *(_OWORD *)(a2 + 1168) = 0u;
          uint64_t v69 = v55;
          long long v70 = *(_OWORD *)(a2 + 1184);
          *(_OWORD *)(a2 + 1184) = 0u;
          int v71 = *(_DWORD *)(a2 + 1200);
          uint64_t v72 = *(void *)(a2 + 1208);
          long long v73 = *(_OWORD *)(a2 + 1216);
          *(_OWORD *)(a2 + 1216) = 0u;
          *(void *)(a2 + 1208) = 0;
          long long v56 = *(_OWORD *)(a2 + 1232);
          uint64_t v75 = *(void *)(a2 + 1248);
          long long v74 = v56;
          *(void *)(a2 + 1248) = 0;
          *(_OWORD *)(a2 + 1232) = 0u;
          long long v57 = *(_OWORD *)(a2 + 1256);
          long long v58 = *(_OWORD *)(a2 + 1272);
          *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a2 + 1284);
          long long v76 = v57;
          v77[0] = v58;
          uint64_t v59 = *(void *)(a2 + 1320);
          long long v78 = *(_OWORD *)(a2 + 1304);
          uint64_t v79 = v59;
          *(void *)(a2 + 1320) = 0;
          *(_OWORD *)(a2 + 1304) = 0u;
          long long v80 = *(_OWORD *)(a2 + 1328);
          uint64_t v81 = *(void *)(a2 + 1344);
          *(_OWORD *)(a2 + 1328) = 0u;
          *(void *)(a2 + 1344) = 0;
          LODWORD(v59) = *(_DWORD *)(a2 + 1368);
          long long v82 = *(_OWORD *)(a2 + 1352);
          int v83 = v59;
          long long v60 = *(_OWORD *)(a2 + 1376);
          uint64_t v85 = *(void *)(a2 + 1392);
          long long v84 = v60;
          *(void *)(a2 + 1392) = 0;
          *(_OWORD *)(a2 + 1376) = 0u;
          uint64_t v61 = *(void *)(a2 + 1400);
          int v87 = *(_DWORD *)(a2 + 1408);
          uint64_t v86 = v61;
          uint64_t v62 = *(void *)(a2 + 1432);
          long long v88 = *(_OWORD *)(a2 + 1416);
          uint64_t v89 = v62;
          *(void *)(a2 + 1424) = 0;
          *(void *)(a2 + 1416) = 0;
          *(void *)(a2 + 1432) = 0;
          sub_4C5BDC(a2, a3);
          uint64_t v54 = a3;
          goto LABEL_57;
        }
      }
      else if (*(_DWORD *)a3 >= *(_DWORD *)a2)
      {
        goto LABEL_43;
      }
    }
    else if (v9 >= v10)
    {
      goto LABEL_43;
    }
    int v63 = *(_DWORD *)a1;
    long long v64 = *(_OWORD *)(a1 + 8);
    uint64_t v65 = *(void *)(a1 + 24);
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 8) = 0;
    sub_4C09FC((uint64_t)v66, a1 + 32);
    long long v67 = *(_OWORD *)(a1 + 1152);
    uint64_t v68 = *(void *)(a1 + 1168);
    *(_OWORD *)(a1 + 1152) = 0u;
    uint64_t v27 = *(void *)(a1 + 1176);
    *(_OWORD *)(a1 + 1168) = 0u;
    uint64_t v69 = v27;
    long long v70 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = 0u;
    int v71 = *(_DWORD *)(a1 + 1200);
    uint64_t v72 = *(void *)(a1 + 1208);
    long long v73 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a1 + 1216) = 0u;
    *(void *)(a1 + 1208) = 0;
    long long v28 = *(_OWORD *)(a1 + 1232);
    uint64_t v75 = *(void *)(a1 + 1248);
    long long v74 = v28;
    *(void *)(a1 + 1248) = 0;
    *(_OWORD *)(a1 + 1232) = 0u;
    long long v29 = *(_OWORD *)(a1 + 1256);
    long long v30 = *(_OWORD *)(a1 + 1272);
    *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a1 + 1284);
    long long v76 = v29;
    v77[0] = v30;
    uint64_t v31 = *(void *)(a1 + 1320);
    long long v78 = *(_OWORD *)(a1 + 1304);
    uint64_t v79 = v31;
    *(void *)(a1 + 1320) = 0;
    *(_OWORD *)(a1 + 1304) = 0u;
    long long v80 = *(_OWORD *)(a1 + 1328);
    uint64_t v81 = *(void *)(a1 + 1344);
    *(_OWORD *)(a1 + 1328) = 0u;
    *(void *)(a1 + 1344) = 0;
    LODWORD(v31) = *(_DWORD *)(a1 + 1368);
    long long v82 = *(_OWORD *)(a1 + 1352);
    int v83 = v31;
    long long v32 = *(_OWORD *)(a1 + 1376);
    uint64_t v85 = *(void *)(a1 + 1392);
    long long v84 = v32;
    *(void *)(a1 + 1392) = 0;
    *(_OWORD *)(a1 + 1376) = 0u;
    uint64_t v33 = *(void *)(a1 + 1400);
    int v87 = *(_DWORD *)(a1 + 1408);
    uint64_t v86 = v33;
    uint64_t v34 = *(void *)(a1 + 1432);
    long long v88 = *(_OWORD *)(a1 + 1416);
    uint64_t v89 = v34;
    *(void *)(a1 + 1424) = 0;
    *(void *)(a1 + 1416) = 0;
    *(void *)(a1 + 1432) = 0;
    sub_4C5BDC(a1, a3);
    sub_4C5BDC(a3, (uint64_t)&v63);
    sub_4BD604((uint64_t)&v63);
    return 1;
  }
  if (sub_605454(a2 + 32))
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 1175);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 1160);
    }
    if (v8 && (sub_604EA8(a2 + 32, a1 + 32) & 1) != 0) {
      goto LABEL_10;
    }
  }
LABEL_19:
  int v12 = sub_4C5A0C(a3);
  int v13 = sub_4C5A0C(a2);
  if (v12 != v13)
  {
    if (v12 >= v13) {
      return 0;
    }
LABEL_28:
    int v63 = *(_DWORD *)a2;
    long long v64 = *(_OWORD *)(a2 + 8);
    uint64_t v65 = *(void *)(a2 + 24);
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 8) = 0;
    sub_4C09FC((uint64_t)v66, a2 + 32);
    long long v67 = *(_OWORD *)(a2 + 1152);
    uint64_t v68 = *(void *)(a2 + 1168);
    *(_OWORD *)(a2 + 1152) = 0u;
    uint64_t v16 = *(void *)(a2 + 1176);
    *(_OWORD *)(a2 + 1168) = 0u;
    uint64_t v69 = v16;
    long long v70 = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a2 + 1184) = 0u;
    int v71 = *(_DWORD *)(a2 + 1200);
    uint64_t v72 = *(void *)(a2 + 1208);
    long long v73 = *(_OWORD *)(a2 + 1216);
    *(_OWORD *)(a2 + 1216) = 0u;
    *(void *)(a2 + 1208) = 0;
    long long v17 = *(_OWORD *)(a2 + 1232);
    uint64_t v75 = *(void *)(a2 + 1248);
    long long v74 = v17;
    *(void *)(a2 + 1248) = 0;
    *(_OWORD *)(a2 + 1232) = 0u;
    long long v18 = *(_OWORD *)(a2 + 1256);
    long long v19 = *(_OWORD *)(a2 + 1272);
    *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a2 + 1284);
    long long v76 = v18;
    v77[0] = v19;
    uint64_t v20 = *(void *)(a2 + 1320);
    long long v78 = *(_OWORD *)(a2 + 1304);
    uint64_t v79 = v20;
    *(void *)(a2 + 1320) = 0;
    *(_OWORD *)(a2 + 1304) = 0u;
    long long v80 = *(_OWORD *)(a2 + 1328);
    uint64_t v81 = *(void *)(a2 + 1344);
    *(_OWORD *)(a2 + 1328) = 0u;
    *(void *)(a2 + 1344) = 0;
    LODWORD(v20) = *(_DWORD *)(a2 + 1368);
    long long v82 = *(_OWORD *)(a2 + 1352);
    int v83 = v20;
    long long v21 = *(_OWORD *)(a2 + 1376);
    uint64_t v85 = *(void *)(a2 + 1392);
    long long v84 = v21;
    *(void *)(a2 + 1392) = 0;
    *(_OWORD *)(a2 + 1376) = 0u;
    uint64_t v22 = *(void *)(a2 + 1400);
    int v87 = *(_DWORD *)(a2 + 1408);
    uint64_t v86 = v22;
    uint64_t v23 = *(void *)(a2 + 1432);
    long long v88 = *(_OWORD *)(a2 + 1416);
    uint64_t v89 = v23;
    *(void *)(a2 + 1424) = 0;
    *(void *)(a2 + 1416) = 0;
    *(void *)(a2 + 1432) = 0;
    sub_4C5BDC(a2, a3);
    sub_4C5BDC(a3, (uint64_t)&v63);
    sub_4BD604((uint64_t)&v63);
    int v24 = sub_4C5A0C(a2);
    int v25 = sub_4C5A0C(a1);
    if (v24 == v25)
    {
      if (*(_DWORD *)a2 == 50)
      {
        if (sub_605454(a2 + 32))
        {
          uint64_t v26 = *(unsigned __int8 *)(a2 + 1175);
          if ((v26 & 0x80u) != 0) {
            uint64_t v26 = *(void *)(a2 + 1160);
          }
          if (v26 && sub_604EA8(a2 + 32, a1 + 32)) {
            goto LABEL_54;
          }
        }
        return 1;
      }
      if (*(_DWORD *)a2 >= *(_DWORD *)a1) {
        return 1;
      }
    }
    else if (v24 >= v25)
    {
      return 1;
    }
LABEL_54:
    int v63 = *(_DWORD *)a1;
    long long v64 = *(_OWORD *)(a1 + 8);
    uint64_t v65 = *(void *)(a1 + 24);
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 8) = 0;
    sub_4C09FC((uint64_t)v66, a1 + 32);
    long long v67 = *(_OWORD *)(a1 + 1152);
    uint64_t v68 = *(void *)(a1 + 1168);
    *(_OWORD *)(a1 + 1152) = 0u;
    uint64_t v46 = *(void *)(a1 + 1176);
    *(_OWORD *)(a1 + 1168) = 0u;
    uint64_t v69 = v46;
    long long v70 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = 0u;
    int v71 = *(_DWORD *)(a1 + 1200);
    uint64_t v72 = *(void *)(a1 + 1208);
    long long v73 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a1 + 1216) = 0u;
    *(void *)(a1 + 1208) = 0;
    long long v47 = *(_OWORD *)(a1 + 1232);
    uint64_t v75 = *(void *)(a1 + 1248);
    long long v74 = v47;
    *(void *)(a1 + 1248) = 0;
    *(_OWORD *)(a1 + 1232) = 0u;
    long long v48 = *(_OWORD *)(a1 + 1256);
    long long v49 = *(_OWORD *)(a1 + 1272);
    *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a1 + 1284);
    long long v76 = v48;
    v77[0] = v49;
    uint64_t v50 = *(void *)(a1 + 1320);
    long long v78 = *(_OWORD *)(a1 + 1304);
    uint64_t v79 = v50;
    *(void *)(a1 + 1320) = 0;
    *(_OWORD *)(a1 + 1304) = 0u;
    long long v80 = *(_OWORD *)(a1 + 1328);
    uint64_t v81 = *(void *)(a1 + 1344);
    *(_OWORD *)(a1 + 1328) = 0u;
    *(void *)(a1 + 1344) = 0;
    LODWORD(v50) = *(_DWORD *)(a1 + 1368);
    long long v82 = *(_OWORD *)(a1 + 1352);
    int v83 = v50;
    long long v51 = *(_OWORD *)(a1 + 1376);
    uint64_t v85 = *(void *)(a1 + 1392);
    long long v84 = v51;
    *(void *)(a1 + 1392) = 0;
    *(_OWORD *)(a1 + 1376) = 0u;
    uint64_t v52 = *(void *)(a1 + 1400);
    int v87 = *(_DWORD *)(a1 + 1408);
    uint64_t v86 = v52;
    uint64_t v53 = *(void *)(a1 + 1432);
    long long v88 = *(_OWORD *)(a1 + 1416);
    uint64_t v89 = v53;
    *(void *)(a1 + 1424) = 0;
    *(void *)(a1 + 1416) = 0;
    *(void *)(a1 + 1432) = 0;
    sub_4C5BDC(a1, a2);
    uint64_t v54 = a2;
LABEL_57:
    sub_4C5BDC(v54, (uint64_t)&v63);
    sub_4BD604((uint64_t)&v63);
    return 2;
  }
  if (*(_DWORD *)a3 != 50)
  {
    if (*(_DWORD *)a3 >= *(_DWORD *)a2) {
      return 0;
    }
    goto LABEL_28;
  }
  uint64_t result = sub_605454(a3 + 32);
  if (!result) {
    return result;
  }
  uint64_t v15 = *(unsigned __int8 *)(a3 + 1175);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a3 + 1160);
  }
  if (!v15) {
    return 0;
  }
  uint64_t result = sub_604EA8(a3 + 32, a2 + 32);
  if (result) {
    goto LABEL_28;
  }
  return result;
}

unint64_t sub_4C4030(uint64_t a1, _DWORD *a2)
{
  int v51 = *(_DWORD *)a1;
  long long v52 = *(_OWORD *)(a1 + 8);
  uint64_t v53 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 8) = 0;
  sub_4C09FC((uint64_t)v54, a1 + 32);
  long long v55 = *(_OWORD *)(a1 + 1152);
  uint64_t v56 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  long long v57 = *(_OWORD *)(a1 + 1176);
  uint64_t v58 = *(void *)(a1 + 1192);
  *(_OWORD *)(a1 + 1176) = 0u;
  *(void *)(a1 + 1192) = 0;
  int v59 = *(_DWORD *)(a1 + 1200);
  uint64_t v60 = *(void *)(a1 + 1208);
  long long v61 = *(_OWORD *)(a1 + 1216);
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1208) = 0;
  long long v4 = *(_OWORD *)(a1 + 1232);
  uint64_t v63 = *(void *)(a1 + 1248);
  long long v62 = v4;
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  long long v5 = *(_OWORD *)(a1 + 1256);
  long long v6 = *(_OWORD *)(a1 + 1272);
  *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a1 + 1284);
  long long v64 = v5;
  v65[0] = v6;
  uint64_t v7 = *(void *)(a1 + 1320);
  v65[2] = *(_OWORD *)(a1 + 1304);
  uint64_t v66 = v7;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  long long v67 = *(_OWORD *)(a1 + 1328);
  uint64_t v68 = *(void *)(a1 + 1344);
  *(_OWORD *)(a1 + 1328) = 0u;
  *(void *)(a1 + 1344) = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 1368);
  long long v69 = *(_OWORD *)(a1 + 1352);
  int v70 = v7;
  long long v8 = *(_OWORD *)(a1 + 1376);
  uint64_t v72 = *(void *)(a1 + 1392);
  long long v71 = v8;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  uint64_t v9 = *(void *)(a1 + 1400);
  int v74 = *(_DWORD *)(a1 + 1408);
  uint64_t v73 = v9;
  uint64_t v10 = *(void *)(a1 + 1432);
  long long v75 = *(_OWORD *)(a1 + 1416);
  uint64_t v76 = v10;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1432) = 0;
  int v11 = sub_4C5A0C((uint64_t)&v51);
  int v12 = sub_4C5A0C((uint64_t)(a2 - 360));
  if (v11 == v12)
  {
    if (v51 == 50)
    {
      if (!sub_605454((uint64_t)v54)) {
        goto LABEL_24;
      }
      uint64_t v13 = HIBYTE(v56);
      if (v56 < 0) {
        uint64_t v13 = *((void *)&v55 + 1);
      }
      if (!v13 || !sub_604EA8((uint64_t)v54, (uint64_t)(a2 - 352))) {
        goto LABEL_24;
      }
LABEL_10:
      for (unint64_t i = a1 + 1440; ; i += 1440)
      {
        int v15 = sub_4C5A0C((uint64_t)&v51);
        int v16 = sub_4C5A0C(i);
        if (v15 == v16)
        {
          if (v51 == 50)
          {
            if (sub_605454((uint64_t)v54))
            {
              uint64_t v17 = HIBYTE(v56);
              if (v56 < 0) {
                uint64_t v17 = *((void *)&v55 + 1);
              }
              if (v17 && (sub_604EA8((uint64_t)v54, i + 32) & 1) != 0) {
                goto LABEL_37;
              }
            }
          }
          else if (v51 < *(_DWORD *)i)
          {
            goto LABEL_37;
          }
        }
        else if (v15 < v16)
        {
          goto LABEL_37;
        }
      }
    }
    if (v51 < *(a2 - 360)) {
      goto LABEL_10;
    }
  }
  else if (v11 < v12)
  {
    goto LABEL_10;
  }
LABEL_24:
  for (unint64_t i = a1 + 1440; i < (unint64_t)a2; i += 1440)
  {
    int v18 = sub_4C5A0C((uint64_t)&v51);
    int v19 = sub_4C5A0C(i);
    if (v18 == v19)
    {
      if (v51 == 50)
      {
        if (sub_605454((uint64_t)v54))
        {
          uint64_t v20 = HIBYTE(v56);
          if (v56 < 0) {
            uint64_t v20 = *((void *)&v55 + 1);
          }
          if (v20 && (sub_604EA8((uint64_t)v54, i + 32) & 1) != 0) {
            break;
          }
        }
      }
      else if (v51 < *(_DWORD *)i)
      {
        break;
      }
    }
    else if (v18 < v19)
    {
      break;
    }
  }
LABEL_37:
  if (i < (unint64_t)a2)
  {
    for (a2 -= 360; ; a2 -= 360)
    {
      int v21 = sub_4C5A0C((uint64_t)&v51);
      int v22 = sub_4C5A0C((uint64_t)a2);
      if (v21 == v22)
      {
        if (v51 == 50)
        {
          if (!sub_605454((uint64_t)v54)) {
            break;
          }
          uint64_t v23 = HIBYTE(v56);
          if (v56 < 0) {
            uint64_t v23 = *((void *)&v55 + 1);
          }
          if (!v23 || !sub_604EA8((uint64_t)v54, (uint64_t)(a2 + 8))) {
            break;
          }
        }
        else if (v51 >= *a2)
        {
          break;
        }
      }
      else if (v21 >= v22)
      {
        break;
      }
    }
  }
  if (i >= (unint64_t)a2) {
    goto LABEL_152;
  }
  while (2)
  {
    int v77 = *(_DWORD *)i;
    uint64_t v24 = *(void *)(i + 24);
    long long v78 = *(_OWORD *)(i + 8);
    uint64_t v79 = v24;
    *(void *)(i + 8) = 0;
    *(_OWORD *)(i + 16) = 0u;
    sub_4C09FC((uint64_t)v80, i + 32);
    long long v25 = *(_OWORD *)(i + 1152);
    uint64_t v81 = *(void *)(i + 1168);
    v80[70] = v25;
    *(_OWORD *)(i + 1152) = 0u;
    *(void *)(i + 1168) = 0;
    uint64_t v82 = *(void *)(i + 1176);
    long long v83 = *(_OWORD *)(i + 1184);
    *(void *)(i + 1192) = 0;
    *(_OWORD *)(i + 1176) = 0u;
    int v84 = *(_DWORD *)(i + 1200);
    uint64_t v85 = *(void *)(i + 1208);
    long long v86 = *(_OWORD *)(i + 1216);
    *(void *)(i + 1224) = 0;
    *(_OWORD *)(i + 1208) = 0u;
    long long v26 = *(_OWORD *)(i + 1232);
    uint64_t v88 = *(void *)(i + 1248);
    long long v87 = v26;
    *(void *)(i + 1248) = 0;
    *(_OWORD *)(i + 1232) = 0u;
    long long v27 = *(_OWORD *)(i + 1256);
    long long v28 = *(_OWORD *)(i + 1272);
    *(_OWORD *)((char *)v90 + 12) = *(_OWORD *)(i + 1284);
    long long v89 = v27;
    v90[0] = v28;
    long long v29 = *(_OWORD *)(i + 1304);
    uint64_t v91 = *(void *)(i + 1320);
    v90[2] = v29;
    *(void *)(i + 1320) = 0;
    *(_OWORD *)(i + 1304) = 0u;
    long long v92 = *(_OWORD *)(i + 1328);
    uint64_t v93 = *(void *)(i + 1344);
    *(void *)(i + 1344) = 0;
    *(_OWORD *)(i + 1328) = 0u;
    long long v30 = *(_OWORD *)(i + 1352);
    int v95 = *(_DWORD *)(i + 1368);
    long long v94 = v30;
    long long v31 = *(_OWORD *)(i + 1376);
    uint64_t v97 = *(void *)(i + 1392);
    long long v96 = v31;
    *(void *)(i + 1392) = 0;
    *(_OWORD *)(i + 1376) = 0u;
    uint64_t v32 = *(void *)(i + 1400);
    int v99 = *(_DWORD *)(i + 1408);
    uint64_t v98 = v32;
    long long v33 = *(_OWORD *)(i + 1416);
    uint64_t v101 = *(void *)(i + 1432);
    long long v100 = v33;
    *(void *)(i + 1424) = 0;
    *(void *)(i + 1416) = 0;
    *(void *)(i + 1432) = 0;
    sub_4C5BDC(i, (uint64_t)a2);
    sub_4C5BDC((uint64_t)a2, (uint64_t)&v77);
    sub_4BD604((uint64_t)&v77);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          i += 1440;
          if ((void)v67 != *((void *)&v67 + 1))
          {
            int v34 = 1;
            goto LABEL_57;
          }
          if (DWORD2(v69))
          {
            if (DWORD2(v69) == 1)
            {
              BOOL v37 = v69 != 0x7FFFFFFF && SDWORD1(v69) < (int)v69;
              if (v37 && HIDWORD(v69) != 0x7FFFFFFF) {
                goto LABEL_74;
              }
            }
          }
          else if (v69 != 0x7FFFFFFF && SDWORD1(v69) < (int)v69)
          {
LABEL_74:
            int v34 = 2;
            goto LABEL_57;
          }
          if (v51 == 45)
          {
            int v34 = 3;
          }
          else
          {
            if (!sub_605454((uint64_t)v54)) {
              goto LABEL_88;
            }
            uint64_t v40 = HIBYTE(v56);
            if (v56 < 0) {
              uint64_t v40 = *((void *)&v55 + 1);
            }
            if (v40)
            {
              int v34 = 4;
            }
            else
            {
LABEL_88:
              if (v59 == 2)
              {
                if (v64 == 12)
                {
                  if ((void)v57 == *((void *)&v57 + 1))
                  {
                    if (v51 == 50)
                    {
                      uint64_t v41 = HIBYTE(v72);
                      if (v72 < 0) {
                        uint64_t v41 = *((void *)&v71 + 1);
                      }
                      if (v41) {
                        int v34 = 9;
                      }
                      else {
                        int v34 = (HIDWORD(v73) & v73) == 0xFFFFFFFF ? 0 : 10;
                      }
                    }
                    else
                    {
                      int v34 = 8;
                    }
                  }
                  else
                  {
                    int v34 = 7;
                  }
                }
                else
                {
                  int v34 = 6;
                }
              }
              else
              {
                int v34 = 5;
              }
            }
          }
LABEL_57:
          int v35 = sub_4C5A0C(i);
          if (v34 == v35) {
            break;
          }
          if (v34 < v35) {
            goto LABEL_104;
          }
        }
        if (v51 == 50) {
          break;
        }
        if (v51 < *(_DWORD *)i) {
          goto LABEL_104;
        }
      }
      if (sub_605454((uint64_t)v54))
      {
        uint64_t v36 = HIBYTE(v56);
        if (v56 < 0) {
          uint64_t v36 = *((void *)&v55 + 1);
        }
        if (v36 && sub_604EA8((uint64_t)v54, i + 32)) {
          break;
        }
      }
    }
    do
    {
      while (1)
      {
        while (1)
        {
LABEL_104:
          a2 -= 360;
          if ((void)v67 != *((void *)&v67 + 1))
          {
            int v42 = 1;
            goto LABEL_106;
          }
          if (DWORD2(v69))
          {
            if (DWORD2(v69) == 1)
            {
              BOOL v45 = v69 != 0x7FFFFFFF && SDWORD1(v69) < (int)v69;
              if (v45 && HIDWORD(v69) != 0x7FFFFFFF) {
                goto LABEL_123;
              }
            }
          }
          else if (v69 != 0x7FFFFFFF && SDWORD1(v69) < (int)v69)
          {
LABEL_123:
            int v42 = 2;
            goto LABEL_106;
          }
          if (v51 == 45)
          {
            int v42 = 3;
          }
          else
          {
            if (!sub_605454((uint64_t)v54)) {
              goto LABEL_137;
            }
            uint64_t v48 = HIBYTE(v56);
            if (v56 < 0) {
              uint64_t v48 = *((void *)&v55 + 1);
            }
            if (v48)
            {
              int v42 = 4;
            }
            else
            {
LABEL_137:
              if (v59 == 2)
              {
                if (v64 == 12)
                {
                  if ((void)v57 == *((void *)&v57 + 1))
                  {
                    if (v51 == 50)
                    {
                      uint64_t v49 = HIBYTE(v72);
                      if (v72 < 0) {
                        uint64_t v49 = *((void *)&v71 + 1);
                      }
                      if (v49) {
                        int v42 = 9;
                      }
                      else {
                        int v42 = (HIDWORD(v73) & v73) == 0xFFFFFFFF ? 0 : 10;
                      }
                    }
                    else
                    {
                      int v42 = 8;
                    }
                  }
                  else
                  {
                    int v42 = 7;
                  }
                }
                else
                {
                  int v42 = 6;
                }
              }
              else
              {
                int v42 = 5;
              }
            }
          }
LABEL_106:
          int v43 = sub_4C5A0C((uint64_t)a2);
          if (v42 == v43) {
            break;
          }
          if (v42 >= v43) {
            goto LABEL_52;
          }
        }
        if (v51 == 50) {
          break;
        }
        if (v51 >= *a2) {
          goto LABEL_52;
        }
      }
      if (!sub_605454((uint64_t)v54)) {
        break;
      }
      uint64_t v44 = HIBYTE(v56);
      if (v56 < 0) {
        uint64_t v44 = *((void *)&v55 + 1);
      }
    }
    while (v44 && sub_604EA8((uint64_t)v54, (uint64_t)(a2 + 8)));
LABEL_52:
    if (i < (unint64_t)a2) {
      continue;
    }
    break;
  }
LABEL_152:
  if (i - 1440 != a1) {
    sub_4C5BDC(a1, i - 1440);
  }
  sub_4C5BDC(i - 1440, (uint64_t)&v51);
  sub_4BD604((uint64_t)&v51);
  return i;
}

void sub_4C492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C4940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C4954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C4990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C49A4(uint64_t a1, unint64_t a2)
{
  int v52 = *(_DWORD *)a1;
  long long v53 = *(_OWORD *)(a1 + 8);
  uint64_t v54 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 8) = 0;
  sub_4C09FC((uint64_t)v55, a1 + 32);
  uint64_t v4 = 0;
  v55[70] = *(_OWORD *)(a1 + 1152);
  uint64_t v56 = *(void *)(a1 + 1168);
  *(_OWORD *)(a1 + 1152) = 0u;
  uint64_t v5 = *(void *)(a1 + 1176);
  *(_OWORD *)(a1 + 1168) = 0u;
  uint64_t v57 = v5;
  long long v58 = *(_OWORD *)(a1 + 1184);
  *(_OWORD *)(a1 + 1184) = 0u;
  int v59 = *(_DWORD *)(a1 + 1200);
  uint64_t v60 = *(void *)(a1 + 1208);
  long long v61 = *(_OWORD *)(a1 + 1216);
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1208) = 0;
  long long v6 = *(_OWORD *)(a1 + 1232);
  uint64_t v63 = *(void *)(a1 + 1248);
  long long v62 = v6;
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  long long v7 = *(_OWORD *)(a1 + 1256);
  long long v8 = *(_OWORD *)(a1 + 1272);
  *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a1 + 1284);
  long long v64 = v7;
  v65[0] = v8;
  v65[2] = *(_OWORD *)(a1 + 1304);
  uint64_t v66 = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  long long v67 = *(_OWORD *)(a1 + 1328);
  uint64_t v68 = *(void *)(a1 + 1344);
  *(_OWORD *)(a1 + 1328) = 0u;
  *(void *)(a1 + 1344) = 0;
  int v9 = *(_DWORD *)(a1 + 1368);
  long long v69 = *(_OWORD *)(a1 + 1352);
  int v70 = v9;
  long long v10 = *(_OWORD *)(a1 + 1376);
  uint64_t v72 = *(void *)(a1 + 1392);
  long long v71 = v10;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  int v74 = *(_DWORD *)(a1 + 1408);
  uint64_t v73 = *(void *)(a1 + 1400);
  uint64_t v11 = *(void *)(a1 + 1432);
  long long v75 = *(_OWORD *)(a1 + 1416);
  uint64_t v76 = v11;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1432) = 0;
  while (1)
  {
    int v12 = sub_4C5A0C(a1 + v4 + 1440);
    int v13 = sub_4C5A0C((uint64_t)&v52);
    if (v12 != v13)
    {
      if (v12 >= v13) {
        goto LABEL_13;
      }
      goto LABEL_3;
    }
    int v14 = *(_DWORD *)(a1 + v4 + 1440);
    if (v14 == 50) {
      break;
    }
    if (v14 >= v52) {
      goto LABEL_13;
    }
LABEL_3:
    v4 += 1440;
  }
  if (sub_605454(a1 + v4 + 1472))
  {
    uint64_t v15 = *(void *)(a1 + v4 + 2600);
    if (*(char *)(a1 + v4 + 2615) >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + v4 + 2615);
    }
    if (v15 && sub_604EA8(a1 + v4 + 1472, (uint64_t)v55)) {
      goto LABEL_3;
    }
  }
LABEL_13:
  uint64_t v16 = a1 + v4;
  unint64_t v17 = a1 + v4 + 1440;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a2 -= 1440;
          int v18 = sub_4C5A0C(a2);
          int v19 = sub_4C5A0C((uint64_t)&v52);
          if (v18 == v19) {
            break;
          }
          if (v18 < v19) {
            goto LABEL_25;
          }
        }
        if (*(_DWORD *)a2 == 50) {
          break;
        }
        if (*(_DWORD *)a2 < v52) {
          goto LABEL_25;
        }
      }
      if (sub_605454(a2 + 32))
      {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 1175);
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(a2 + 1160);
        }
        if (v20 && sub_604EA8(a2 + 32, (uint64_t)v55)) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_121:
    while (2)
    {
      if (v17 < a2)
      {
        while (1)
        {
          a2 -= 1440;
          int v46 = sub_4C5A0C(a2);
          int v47 = sub_4C5A0C((uint64_t)&v52);
          if (v46 != v47)
          {
            if (v46 < v47) {
              goto LABEL_25;
            }
            goto LABEL_121;
          }
          if (*(_DWORD *)a2 != 50) {
            break;
          }
          if (!sub_605454(a2 + 32)) {
            goto LABEL_121;
          }
          uint64_t v48 = *(unsigned __int8 *)(a2 + 1175);
          if ((v48 & 0x80u) != 0) {
            uint64_t v48 = *(void *)(a2 + 1160);
          }
          if (!v48) {
            goto LABEL_121;
          }
          char v49 = sub_604EA8(a2 + 32, (uint64_t)v55);
          if (v17 >= a2) {
            char v50 = 1;
          }
          else {
            char v50 = v49;
          }
          if (v50) {
            goto LABEL_25;
          }
        }
        if (*(_DWORD *)a2 >= v52) {
          continue;
        }
      }
      break;
    }
  }
LABEL_25:
  if (v17 < a2)
  {
    unint64_t v21 = a1 + v4 + 1440;
    unint64_t v22 = a2;
    do
    {
      int v77 = *(_DWORD *)v21;
      uint64_t v23 = *(void *)(v21 + 24);
      long long v78 = *(_OWORD *)(v21 + 8);
      uint64_t v79 = v23;
      *(void *)(v21 + 8) = 0;
      *(_OWORD *)(v21 + 16) = 0u;
      sub_4C09FC((uint64_t)v80, v21 + 32);
      long long v24 = *(_OWORD *)(v21 + 1152);
      uint64_t v81 = *(void *)(v21 + 1168);
      v80[70] = v24;
      *(_OWORD *)(v21 + 1152) = 0u;
      *(void *)(v21 + 1168) = 0;
      uint64_t v82 = *(void *)(v21 + 1176);
      long long v83 = *(_OWORD *)(v21 + 1184);
      *(void *)(v21 + 1192) = 0;
      *(_OWORD *)(v21 + 1176) = 0u;
      int v84 = *(_DWORD *)(v21 + 1200);
      uint64_t v85 = *(void *)(v21 + 1208);
      long long v86 = *(_OWORD *)(v21 + 1216);
      *(void *)(v21 + 1224) = 0;
      *(_OWORD *)(v21 + 1208) = 0u;
      long long v25 = *(_OWORD *)(v21 + 1232);
      uint64_t v88 = *(void *)(v21 + 1248);
      long long v87 = v25;
      *(void *)(v21 + 1248) = 0;
      *(_OWORD *)(v21 + 1232) = 0u;
      long long v26 = *(_OWORD *)(v21 + 1256);
      long long v27 = *(_OWORD *)(v21 + 1272);
      *(_OWORD *)((char *)v90 + 12) = *(_OWORD *)(v21 + 1284);
      long long v89 = v26;
      v90[0] = v27;
      long long v28 = *(_OWORD *)(v21 + 1304);
      uint64_t v91 = *(void *)(v21 + 1320);
      v90[2] = v28;
      *(void *)(v21 + 1320) = 0;
      *(_OWORD *)(v21 + 1304) = 0u;
      long long v92 = *(_OWORD *)(v21 + 1328);
      uint64_t v93 = *(void *)(v21 + 1344);
      *(void *)(v21 + 1344) = 0;
      *(_OWORD *)(v21 + 1328) = 0u;
      long long v29 = *(_OWORD *)(v21 + 1352);
      int v95 = *(_DWORD *)(v21 + 1368);
      long long v94 = v29;
      long long v30 = *(_OWORD *)(v21 + 1376);
      uint64_t v97 = *(void *)(v21 + 1392);
      long long v96 = v30;
      *(void *)(v21 + 1392) = 0;
      *(_OWORD *)(v21 + 1376) = 0u;
      uint64_t v31 = *(void *)(v21 + 1400);
      int v99 = *(_DWORD *)(v21 + 1408);
      uint64_t v98 = v31;
      long long v32 = *(_OWORD *)(v21 + 1416);
      uint64_t v101 = *(void *)(v21 + 1432);
      long long v100 = v32;
      *(void *)(v21 + 1424) = 0;
      *(void *)(v21 + 1416) = 0;
      *(void *)(v21 + 1432) = 0;
      sub_4C5BDC(v21, v22);
      sub_4C5BDC(v22, (uint64_t)&v77);
      sub_4BD604((uint64_t)&v77);
      do
      {
        while (1)
        {
          while (1)
          {
            uint64_t v16 = v21;
            if (*(void *)(v21 + 2768) != *(void *)(v21 + 2776))
            {
              int v33 = 1;
              goto LABEL_54;
            }
            int v34 = *(_DWORD *)(v21 + 2800);
            if (v34)
            {
              if (v34 == 1)
              {
                int v35 = *(_DWORD *)(v21 + 2792);
                if (v35 != 0x7FFFFFFF && *(_DWORD *)(v21 + 2796) < v35 && *(_DWORD *)(v21 + 2804) != 0x7FFFFFFF) {
                  goto LABEL_40;
                }
              }
            }
            else
            {
              int v36 = *(_DWORD *)(v21 + 2792);
              if (v36 != 0x7FFFFFFF && *(_DWORD *)(v21 + 2796) < v36)
              {
LABEL_40:
                int v33 = 2;
                goto LABEL_54;
              }
            }
            if (*(_DWORD *)(v21 + 1440) == 45)
            {
              int v33 = 3;
              goto LABEL_54;
            }
            if (sub_605454(v21 + 1472))
            {
              if (*(char *)(v21 + 2615) < 0)
              {
                if (*(void *)(v21 + 2600))
                {
LABEL_46:
                  int v33 = 4;
                  goto LABEL_54;
                }
              }
              else if (*(unsigned char *)(v21 + 2615))
              {
                goto LABEL_46;
              }
            }
            if (*(_DWORD *)(v21 + 2640) != 2)
            {
              int v33 = 5;
              goto LABEL_54;
            }
            if (*(_DWORD *)(v21 + 2696) != 12)
            {
              int v33 = 6;
              goto LABEL_54;
            }
            if (*(void *)(v21 + 2616) != *(void *)(v21 + 2624))
            {
              int v33 = 7;
              goto LABEL_54;
            }
            if (*(_DWORD *)(v21 + 1440) == 50)
            {
              if (*(char *)(v21 + 2839) < 0)
              {
                if (*(void *)(v21 + 2824))
                {
LABEL_67:
                  int v33 = 9;
                  goto LABEL_54;
                }
              }
              else if (*(unsigned char *)(v21 + 2839))
              {
                goto LABEL_67;
              }
              int v33 = *(_DWORD *)(v21 + 2840) == -1 && *(_DWORD *)(v21 + 2844) == -1 ? 0 : 10;
            }
            else
            {
              int v33 = 8;
            }
LABEL_54:
            int v37 = sub_4C5A0C((uint64_t)&v52);
            v21 += 1440;
            if (v33 == v37) {
              break;
            }
            if (v33 >= v37) {
              goto LABEL_74;
            }
          }
          int v38 = *(_DWORD *)(v16 + 1440);
          if (v38 == 50) {
            break;
          }
          if (v38 >= v52) {
            goto LABEL_74;
          }
        }
        if (!sub_605454(v16 + 1472)) {
          break;
        }
        uint64_t v39 = *(unsigned __int8 *)(v16 + 2615);
        if ((v39 & 0x80u) != 0) {
          uint64_t v39 = *(void *)(v16 + 2600);
        }
      }
      while (v39 && (sub_604EA8(v16 + 1472, (uint64_t)v55) & 1) != 0);
LABEL_74:
      unint64_t v21 = v16 + 1440;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v22 -= 1440;
            if (*(void *)(v22 + 1328) != *(void *)(v22 + 1336))
            {
              int v40 = 1;
              goto LABEL_100;
            }
            int v41 = *(_DWORD *)(v22 + 1360);
            if (v41)
            {
              if (v41 == 1)
              {
                int v42 = *(_DWORD *)(v22 + 1352);
                if (v42 != 0x7FFFFFFF && *(_DWORD *)(v22 + 1356) < v42 && *(_DWORD *)(v22 + 1364) != 0x7FFFFFFF) {
                  goto LABEL_86;
                }
              }
            }
            else
            {
              int v43 = *(_DWORD *)(v22 + 1352);
              if (v43 != 0x7FFFFFFF && *(_DWORD *)(v22 + 1356) < v43)
              {
LABEL_86:
                int v40 = 2;
                goto LABEL_100;
              }
            }
            if (*(_DWORD *)v22 == 45)
            {
              int v40 = 3;
              goto LABEL_100;
            }
            if (sub_605454(v22 + 32))
            {
              if (*(char *)(v22 + 1175) < 0)
              {
                if (*(void *)(v22 + 1160))
                {
LABEL_92:
                  int v40 = 4;
                  goto LABEL_100;
                }
              }
              else if (*(unsigned char *)(v22 + 1175))
              {
                goto LABEL_92;
              }
            }
            if (*(_DWORD *)(v22 + 1200) != 2)
            {
              int v40 = 5;
              goto LABEL_100;
            }
            if (*(_DWORD *)(v22 + 1256) != 12)
            {
              int v40 = 6;
              goto LABEL_100;
            }
            if (*(void *)(v22 + 1176) != *(void *)(v22 + 1184))
            {
              int v40 = 7;
              goto LABEL_100;
            }
            if (*(_DWORD *)v22 == 50)
            {
              if (*(char *)(v22 + 1399) < 0)
              {
                if (*(void *)(v22 + 1384))
                {
LABEL_113:
                  int v40 = 9;
                  goto LABEL_100;
                }
              }
              else if (*(unsigned char *)(v22 + 1399))
              {
                goto LABEL_113;
              }
              int v40 = *(_DWORD *)(v22 + 1400) == -1 && *(_DWORD *)(v22 + 1404) == -1 ? 0 : 10;
            }
            else
            {
              int v40 = 8;
            }
LABEL_100:
            int v44 = sub_4C5A0C((uint64_t)&v52);
            if (v40 == v44) {
              break;
            }
            if (v40 < v44) {
              goto LABEL_27;
            }
          }
          if (*(_DWORD *)v22 == 50) {
            break;
          }
          if (*(_DWORD *)v22 < v52) {
            goto LABEL_27;
          }
        }
        if (sub_605454(v22 + 32))
        {
          uint64_t v45 = *(unsigned __int8 *)(v22 + 1175);
          if ((v45 & 0x80u) != 0) {
            uint64_t v45 = *(void *)(v22 + 1160);
          }
          if (v45 && sub_604EA8(v22 + 32, (uint64_t)v55)) {
            break;
          }
        }
      }
LABEL_27:
      ;
    }
    while (v21 < v22);
  }
  if (v16 != a1) {
    sub_4C5BDC(a1, v16);
  }
  sub_4C5BDC(v16, (uint64_t)&v52);
  sub_4BD604((uint64_t)&v52);
  return v16;
}

void sub_4C52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C52B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C52CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C52F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C5308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  BOOL v4 = 1;
  switch(0x4FA4FA4FA4FA4FA5 * ((a2 - a1) >> 5))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = (_DWORD *)(a2 - 1440);
      int v6 = sub_4C5A0C(a2 - 1440);
      int v7 = sub_4C5A0C(a1);
      if (v6 != v7)
      {
        if (v6 >= v7) {
          return 1;
        }
        goto LABEL_47;
      }
      if (*v5 == 50)
      {
        if (!sub_605454(v2 - 1408)) {
          return 1;
        }
        uint64_t v8 = *(unsigned __int8 *)(v2 - 265);
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(v2 - 280);
        }
        if (!v8 || !sub_604EA8(v2 - 1408, a1 + 32)) {
          return 1;
        }
LABEL_47:
        int v40 = *(_DWORD *)a1;
        long long v41 = *(_OWORD *)(a1 + 8);
        uint64_t v42 = *(void *)(a1 + 24);
        *(_OWORD *)(a1 + 16) = 0u;
        *(void *)(a1 + 8) = 0;
        sub_4C09FC((uint64_t)v43, a1 + 32);
        long long v44 = *(_OWORD *)(a1 + 1152);
        uint64_t v45 = *(void *)(a1 + 1168);
        *(_OWORD *)(a1 + 1152) = 0u;
        uint64_t v30 = *(void *)(a1 + 1176);
        *(_OWORD *)(a1 + 1168) = 0u;
        uint64_t v46 = v30;
        long long v47 = *(_OWORD *)(a1 + 1184);
        *(_OWORD *)(a1 + 1184) = 0u;
        int v48 = *(_DWORD *)(a1 + 1200);
        uint64_t v49 = *(void *)(a1 + 1208);
        long long v50 = *(_OWORD *)(a1 + 1216);
        *(_OWORD *)(a1 + 1216) = 0u;
        *(void *)(a1 + 1208) = 0;
        long long v31 = *(_OWORD *)(a1 + 1232);
        uint64_t v52 = *(void *)(a1 + 1248);
        long long v51 = v31;
        *(void *)(a1 + 1248) = 0;
        *(_OWORD *)(a1 + 1232) = 0u;
        long long v32 = *(_OWORD *)(a1 + 1256);
        long long v33 = *(_OWORD *)(a1 + 1272);
        *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(a1 + 1284);
        long long v53 = v32;
        v54[0] = v33;
        uint64_t v34 = *(void *)(a1 + 1320);
        long long v55 = *(_OWORD *)(a1 + 1304);
        uint64_t v56 = v34;
        *(void *)(a1 + 1320) = 0;
        *(_OWORD *)(a1 + 1304) = 0u;
        long long v57 = *(_OWORD *)(a1 + 1328);
        uint64_t v58 = *(void *)(a1 + 1344);
        *(_OWORD *)(a1 + 1328) = 0u;
        *(void *)(a1 + 1344) = 0;
        LODWORD(v34) = *(_DWORD *)(a1 + 1368);
        long long v59 = *(_OWORD *)(a1 + 1352);
        int v60 = v34;
        long long v35 = *(_OWORD *)(a1 + 1376);
        uint64_t v62 = *(void *)(a1 + 1392);
        long long v61 = v35;
        *(void *)(a1 + 1392) = 0;
        *(_OWORD *)(a1 + 1376) = 0u;
        uint64_t v36 = *(void *)(a1 + 1400);
        int v64 = *(_DWORD *)(a1 + 1408);
        uint64_t v63 = v36;
        uint64_t v37 = *(void *)(a1 + 1432);
        long long v65 = *(_OWORD *)(a1 + 1416);
        uint64_t v66 = v37;
        *(void *)(a1 + 1424) = 0;
        *(void *)(a1 + 1416) = 0;
        *(void *)(a1 + 1432) = 0;
        sub_4C5BDC(a1, (uint64_t)v5);
        sub_4C5BDC((uint64_t)v5, (uint64_t)&v40);
        sub_4BD604((uint64_t)&v40);
        return 1;
      }
      if (*v5 < *(_DWORD *)a1) {
        goto LABEL_47;
      }
      return 1;
    case 3:
      sub_4C35CC(a1, a1 + 1440, a2 - 1440);
      return v4;
    case 4:
      sub_4C5ED8(a1, a1 + 1440, a1 + 2880, a2 - 1440);
      return v4;
    case 5:
      sub_4C6550(a1, a1 + 1440, a1 + 2880, a1 + 4320, a2 - 1440);
      return v4;
    default:
      int v9 = (_DWORD *)(a1 + 2880);
      sub_4C35CC(a1, a1 + 1440, a1 + 2880);
      uint64_t v10 = a1 + 4320;
      if (a1 + 4320 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v39 = v2;
      while (2)
      {
        int v14 = sub_4C5A0C(v10);
        int v15 = sub_4C5A0C((uint64_t)v9);
        if (v14 == v15)
        {
          if (*(_DWORD *)v10 == 50)
          {
            if (!sub_605454(v10 + 32)) {
              goto LABEL_16;
            }
            uint64_t v16 = *(unsigned __int8 *)(v10 + 1175);
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(v10 + 1160);
            }
            if (!v16 || !sub_604EA8(v10 + 32, (uint64_t)(v9 + 8))) {
              goto LABEL_16;
            }
          }
          else if (*(_DWORD *)v10 >= *v9)
          {
            goto LABEL_16;
          }
        }
        else if (v14 >= v15)
        {
          goto LABEL_16;
        }
        int v40 = *(_DWORD *)v10;
        long long v41 = *(_OWORD *)(v10 + 8);
        uint64_t v42 = *(void *)(v10 + 24);
        *(_OWORD *)(v10 + 16) = 0u;
        *(void *)(v10 + 8) = 0;
        sub_4C09FC((uint64_t)v43, v10 + 32);
        long long v44 = *(_OWORD *)(v10 + 1152);
        uint64_t v45 = *(void *)(v10 + 1168);
        *(_OWORD *)(v10 + 1152) = 0u;
        uint64_t v17 = *(void *)(v10 + 1176);
        *(_OWORD *)(v10 + 1168) = 0u;
        uint64_t v46 = v17;
        long long v47 = *(_OWORD *)(v10 + 1184);
        *(_OWORD *)(v10 + 1184) = 0u;
        int v48 = *(_DWORD *)(v10 + 1200);
        uint64_t v49 = *(void *)(v10 + 1208);
        long long v50 = *(_OWORD *)(v10 + 1216);
        *(_OWORD *)(v10 + 1216) = 0u;
        *(void *)(v10 + 1208) = 0;
        long long v18 = *(_OWORD *)(v10 + 1232);
        uint64_t v52 = *(void *)(v10 + 1248);
        long long v51 = v18;
        *(void *)(v10 + 1248) = 0;
        *(_OWORD *)(v10 + 1232) = 0u;
        long long v19 = *(_OWORD *)(v10 + 1256);
        long long v20 = *(_OWORD *)(v10 + 1272);
        *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(v10 + 1284);
        long long v53 = v19;
        v54[0] = v20;
        long long v21 = *(_OWORD *)(v10 + 1304);
        uint64_t v56 = *(void *)(v10 + 1320);
        long long v55 = v21;
        *(void *)(v10 + 1320) = 0;
        *(_OWORD *)(v10 + 1304) = 0u;
        long long v57 = *(_OWORD *)(v10 + 1328);
        uint64_t v58 = *(void *)(v10 + 1344);
        *(_OWORD *)(v10 + 1328) = 0u;
        *(void *)(v10 + 1344) = 0;
        long long v22 = *(_OWORD *)(v10 + 1352);
        int v60 = *(_DWORD *)(v10 + 1368);
        long long v59 = v22;
        long long v23 = *(_OWORD *)(v10 + 1376);
        uint64_t v62 = *(void *)(v10 + 1392);
        long long v61 = v23;
        *(void *)(v10 + 1392) = 0;
        *(_OWORD *)(v10 + 1376) = 0u;
        uint64_t v24 = *(void *)(v10 + 1400);
        int v64 = *(_DWORD *)(v10 + 1408);
        uint64_t v63 = v24;
        long long v25 = *(_OWORD *)(v10 + 1416);
        uint64_t v66 = *(void *)(v10 + 1432);
        long long v65 = v25;
        *(void *)(v10 + 1424) = 0;
        *(void *)(v10 + 1416) = 0;
        *(void *)(v10 + 1432) = 0;
        sub_4C5BDC(v10, (uint64_t)v9);
        uint64_t v13 = a1;
        if (v9 != (_DWORD *)a1)
        {
          uint64_t v26 = v11;
          do
          {
            int v27 = sub_4C5A0C((uint64_t)&v40);
            int v28 = sub_4C5A0C(a1 + v26 + 1440);
            if (v27 == v28)
            {
              if (v40 == 50)
              {
                if (!sub_605454((uint64_t)v43)) {
                  goto LABEL_12;
                }
                uint64_t v29 = HIBYTE(v45);
                if (v45 < 0) {
                  uint64_t v29 = *((void *)&v44 + 1);
                }
                if (!v29)
                {
LABEL_12:
                  uint64_t v13 = (uint64_t)v9;
                  goto LABEL_13;
                }
                if (!sub_604EA8((uint64_t)v43, a1 + v26 + 1472))
                {
                  uint64_t v13 = a1 + v26 + 2880;
                  goto LABEL_13;
                }
              }
              else if (v40 >= *(_DWORD *)(a1 + v26 + 1440))
              {
                goto LABEL_12;
              }
            }
            else if (v27 >= v28)
            {
              goto LABEL_12;
            }
            v9 -= 360;
            sub_4C5BDC(a1 + v26 + 2880, a1 + v26 + 1440);
            v26 -= 1440;
          }
          while (v26 != -2880);
          uint64_t v13 = a1;
LABEL_13:
          uint64_t v2 = v39;
        }
        sub_4C5BDC(v13, (uint64_t)&v40);
        if (++v12 == 8)
        {
          BOOL v4 = v10 + 1440 == v2;
          sub_4BD604((uint64_t)&v40);
          return v4;
        }
        sub_4BD604((uint64_t)&v40);
LABEL_16:
        int v9 = (_DWORD *)v10;
        v11 += 1440;
        v10 += 1440;
        if (v10 == v2) {
          return 1;
        }
        continue;
      }
  }
}

void sub_4C59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C5A0C(uint64_t a1)
{
  if (*(void *)(a1 + 1328) != *(void *)(a1 + 1336)) {
    return 1;
  }
  int v3 = *(_DWORD *)(a1 + 1360);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = *(_DWORD *)(a1 + 1352);
      if (v4 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v4 && *(_DWORD *)(a1 + 1364) != 0x7FFFFFFF) {
        return 2;
      }
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 1352);
    if (v5 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v5) {
      return 2;
    }
  }
  if (*(_DWORD *)a1 == 45) {
    return 3;
  }
  if (sub_605454(a1 + 32))
  {
    if (*(char *)(a1 + 1175) < 0)
    {
      if (*(void *)(a1 + 1160)) {
        return 4;
      }
    }
    else if (*(unsigned char *)(a1 + 1175))
    {
      return 4;
    }
  }
  if (*(_DWORD *)(a1 + 1200) != 2) {
    return 5;
  }
  if (*(_DWORD *)(a1 + 1256) != 12) {
    return 6;
  }
  if (*(void *)(a1 + 1176) != *(void *)(a1 + 1184)) {
    return 7;
  }
  if (*(_DWORD *)a1 != 50) {
    return 8;
  }
  if (*(char *)(a1 + 1399) < 0) {
    uint64_t v6 = *(void *)(a1 + 1384);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 1399);
  }
  if (v6) {
    return 9;
  }
  if (*(_DWORD *)(a1 + 1400) == -1 && *(_DWORD *)(a1 + 1404) == -1) {
    return 0;
  }
  return 10;
}

uint64_t sub_4C5BDC(uint64_t a1, uint64_t a2)
{
  int v4 = (long long *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  sub_4C1EE0(a1 + 32, a2 + 32);
  int v7 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(_OWORD *)int v7 = v8;
  *(unsigned char *)(a2 + 1175) = 0;
  *(unsigned char *)(a2 + 1152) = 0;
  uint64_t v9 = *(void *)(a1 + 1176);
  if (v9)
  {
    uint64_t v10 = (void **)(a1 + 1176);
    uint64_t v11 = *(void *)(a1 + 1184);
    int v12 = *(void **)(a1 + 1176);
    if (v11 != v9)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v9);
      int v12 = *v10;
    }
    *(void *)(a1 + 1184) = v9;
    operator delete(v12);
    int *v10 = 0;
    *(void *)(a1 + 1184) = 0;
    *(void *)(a1 + 1192) = 0;
  }
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a2 + 1184) = 0;
  *(void *)(a2 + 1192) = 0;
  *(void *)(a2 + 1176) = 0;
  *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 1200);
  uint64_t v13 = *(void *)(a1 + 1208);
  if (v13)
  {
    int v14 = (void **)(a1 + 1208);
    uint64_t v15 = *(void *)(a1 + 1216);
    uint64_t v16 = *(void **)(a1 + 1208);
    if (v15 != v13)
    {
      do
        uint64_t v15 = sub_4BCFD0(v15 - 168);
      while (v15 != v13);
      uint64_t v16 = *v14;
    }
    *(void *)(a1 + 1216) = v13;
    operator delete(v16);
    *int v14 = 0;
    *(void *)(a1 + 1216) = 0;
    *(void *)(a1 + 1224) = 0;
  }
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(void *)(a2 + 1208) = 0;
  *(void *)(a2 + 1216) = 0;
  *(void *)(a2 + 1224) = 0;
  uint64_t v17 = (void **)(a1 + 1232);
  if (*(char *)(a1 + 1255) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)uint64_t v17 = v18;
  *(unsigned char *)(a2 + 1255) = 0;
  *(unsigned char *)(a2 + 1232) = 0;
  long long v19 = *(_OWORD *)(a2 + 1284);
  long long v20 = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1272) = v20;
  *(_OWORD *)(a1 + 1284) = v19;
  long long v21 = (void **)(a1 + 1304);
  if (*(char *)(a1 + 1327) < 0) {
    operator delete(*v21);
  }
  long long v22 = *(_OWORD *)(a2 + 1304);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(_OWORD *)long long v21 = v22;
  *(unsigned char *)(a2 + 1327) = 0;
  *(unsigned char *)(a2 + 1304) = 0;
  uint64_t v23 = *(void *)(a1 + 1328);
  if (v23)
  {
    uint64_t v24 = (void **)(a1 + 1328);
    uint64_t v25 = *(void *)(a1 + 1336);
    uint64_t v26 = *(void **)(a1 + 1328);
    if (v25 != v23)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 48;
      }
      while (v25 != v23);
      uint64_t v26 = *v24;
    }
    *(void *)(a1 + 1336) = v23;
    operator delete(v26);
    int *v24 = 0;
    *(void *)(a1 + 1336) = 0;
    *(void *)(a1 + 1344) = 0;
  }
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a2 + 1336) = 0;
  *(void *)(a2 + 1344) = 0;
  *(void *)(a2 + 1328) = 0;
  long long v27 = *(_OWORD *)(a2 + 1352);
  *(unsigned char *)(a1 + 1368) = *(unsigned char *)(a2 + 1368);
  *(_OWORD *)(a1 + 1352) = v27;
  int v28 = (void **)(a1 + 1376);
  if (*(char *)(a1 + 1399) < 0) {
    operator delete(*v28);
  }
  long long v29 = *(_OWORD *)(a2 + 1376);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(_OWORD *)int v28 = v29;
  *(unsigned char *)(a2 + 1399) = 0;
  *(unsigned char *)(a2 + 1376) = 0;
  int v30 = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = v30;
  long long v31 = (void **)(a1 + 1416);
  if (*(char *)(a1 + 1439) < 0) {
    operator delete(*v31);
  }
  long long v32 = *(_OWORD *)(a2 + 1416);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  *(_OWORD *)long long v31 = v32;
  *(unsigned char *)(a2 + 1439) = 0;
  *(unsigned char *)(a2 + 1416) = 0;
  return a1;
}

uint64_t sub_4C5ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_4C35CC(a1, a2, a3);
  int v8 = sub_4C5A0C(a4);
  uint64_t result = sub_4C5A0C(a3);
  if (v8 != result)
  {
    if (v8 >= (int)result) {
      return result;
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)a4 != 50)
  {
    if (*(_DWORD *)a4 >= *(_DWORD *)a3) {
      return result;
    }
LABEL_12:
    int v39 = *(_DWORD *)a3;
    long long v40 = *(_OWORD *)(a3 + 8);
    uint64_t v41 = *(void *)(a3 + 24);
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 8) = 0;
    sub_4C09FC((uint64_t)v42, a3 + 32);
    long long v43 = *(_OWORD *)(a3 + 1152);
    uint64_t v44 = *(void *)(a3 + 1168);
    *(_OWORD *)(a3 + 1152) = 0u;
    uint64_t v11 = *(void *)(a3 + 1176);
    *(_OWORD *)(a3 + 1168) = 0u;
    uint64_t v45 = v11;
    long long v46 = *(_OWORD *)(a3 + 1184);
    *(_OWORD *)(a3 + 1184) = 0u;
    int v47 = *(_DWORD *)(a3 + 1200);
    uint64_t v48 = *(void *)(a3 + 1208);
    long long v49 = *(_OWORD *)(a3 + 1216);
    *(_OWORD *)(a3 + 1216) = 0u;
    *(void *)(a3 + 1208) = 0;
    long long v12 = *(_OWORD *)(a3 + 1232);
    uint64_t v51 = *(void *)(a3 + 1248);
    long long v50 = v12;
    *(void *)(a3 + 1248) = 0;
    *(_OWORD *)(a3 + 1232) = 0u;
    long long v13 = *(_OWORD *)(a3 + 1256);
    long long v14 = *(_OWORD *)(a3 + 1272);
    *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)(a3 + 1284);
    long long v52 = v13;
    v53[0] = v14;
    uint64_t v15 = *(void *)(a3 + 1320);
    long long v54 = *(_OWORD *)(a3 + 1304);
    uint64_t v55 = v15;
    *(void *)(a3 + 1320) = 0;
    *(_OWORD *)(a3 + 1304) = 0u;
    long long v56 = *(_OWORD *)(a3 + 1328);
    uint64_t v57 = *(void *)(a3 + 1344);
    *(_OWORD *)(a3 + 1328) = 0u;
    *(void *)(a3 + 1344) = 0;
    LODWORD(v15) = *(_DWORD *)(a3 + 1368);
    long long v58 = *(_OWORD *)(a3 + 1352);
    int v59 = v15;
    long long v16 = *(_OWORD *)(a3 + 1376);
    uint64_t v61 = *(void *)(a3 + 1392);
    long long v60 = v16;
    *(void *)(a3 + 1392) = 0;
    *(_OWORD *)(a3 + 1376) = 0u;
    uint64_t v17 = *(void *)(a3 + 1400);
    int v63 = *(_DWORD *)(a3 + 1408);
    uint64_t v62 = v17;
    uint64_t v18 = *(void *)(a3 + 1432);
    long long v64 = *(_OWORD *)(a3 + 1416);
    uint64_t v65 = v18;
    *(void *)(a3 + 1424) = 0;
    *(void *)(a3 + 1416) = 0;
    *(void *)(a3 + 1432) = 0;
    sub_4C5BDC(a3, a4);
    sub_4C5BDC(a4, (uint64_t)&v39);
    sub_4BD604((uint64_t)&v39);
    int v19 = sub_4C5A0C(a3);
    uint64_t result = sub_4C5A0C(a2);
    if (v19 == result)
    {
      if (*(_DWORD *)a3 == 50)
      {
        uint64_t result = sub_605454(a3 + 32);
        if (!result) {
          return result;
        }
        uint64_t v20 = *(unsigned __int8 *)(a3 + 1175);
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(a3 + 1160);
        }
        if (!v20) {
          return result;
        }
        uint64_t result = sub_604EA8(a3 + 32, a2 + 32);
        if (!result) {
          return result;
        }
      }
      else if (*(_DWORD *)a3 >= *(_DWORD *)a2)
      {
        return result;
      }
    }
    else if (v19 >= (int)result)
    {
      return result;
    }
    int v39 = *(_DWORD *)a2;
    long long v40 = *(_OWORD *)(a2 + 8);
    uint64_t v41 = *(void *)(a2 + 24);
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 8) = 0;
    sub_4C09FC((uint64_t)v42, a2 + 32);
    long long v43 = *(_OWORD *)(a2 + 1152);
    uint64_t v44 = *(void *)(a2 + 1168);
    *(_OWORD *)(a2 + 1152) = 0u;
    uint64_t v21 = *(void *)(a2 + 1176);
    *(_OWORD *)(a2 + 1168) = 0u;
    uint64_t v45 = v21;
    long long v46 = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a2 + 1184) = 0u;
    int v47 = *(_DWORD *)(a2 + 1200);
    uint64_t v48 = *(void *)(a2 + 1208);
    long long v49 = *(_OWORD *)(a2 + 1216);
    *(_OWORD *)(a2 + 1216) = 0u;
    *(void *)(a2 + 1208) = 0;
    long long v22 = *(_OWORD *)(a2 + 1232);
    uint64_t v51 = *(void *)(a2 + 1248);
    long long v50 = v22;
    *(void *)(a2 + 1248) = 0;
    *(_OWORD *)(a2 + 1232) = 0u;
    long long v23 = *(_OWORD *)(a2 + 1256);
    long long v24 = *(_OWORD *)(a2 + 1272);
    *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)(a2 + 1284);
    long long v52 = v23;
    v53[0] = v24;
    uint64_t v25 = *(void *)(a2 + 1320);
    long long v54 = *(_OWORD *)(a2 + 1304);
    uint64_t v55 = v25;
    *(void *)(a2 + 1320) = 0;
    *(_OWORD *)(a2 + 1304) = 0u;
    long long v56 = *(_OWORD *)(a2 + 1328);
    uint64_t v57 = *(void *)(a2 + 1344);
    *(_OWORD *)(a2 + 1328) = 0u;
    *(void *)(a2 + 1344) = 0;
    LODWORD(v25) = *(_DWORD *)(a2 + 1368);
    long long v58 = *(_OWORD *)(a2 + 1352);
    int v59 = v25;
    long long v26 = *(_OWORD *)(a2 + 1376);
    uint64_t v61 = *(void *)(a2 + 1392);
    long long v60 = v26;
    *(void *)(a2 + 1392) = 0;
    *(_OWORD *)(a2 + 1376) = 0u;
    uint64_t v27 = *(void *)(a2 + 1400);
    int v63 = *(_DWORD *)(a2 + 1408);
    uint64_t v62 = v27;
    uint64_t v28 = *(void *)(a2 + 1432);
    long long v64 = *(_OWORD *)(a2 + 1416);
    uint64_t v65 = v28;
    *(void *)(a2 + 1424) = 0;
    *(void *)(a2 + 1416) = 0;
    *(void *)(a2 + 1432) = 0;
    sub_4C5BDC(a2, a3);
    sub_4C5BDC(a3, (uint64_t)&v39);
    sub_4BD604((uint64_t)&v39);
    int v29 = sub_4C5A0C(a2);
    uint64_t result = sub_4C5A0C(a1);
    if (v29 == result)
    {
      if (*(_DWORD *)a2 == 50)
      {
        uint64_t result = sub_605454(a2 + 32);
        if (!result) {
          return result;
        }
        uint64_t v30 = *(unsigned __int8 *)(a2 + 1175);
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *(void *)(a2 + 1160);
        }
        if (!v30) {
          return result;
        }
        uint64_t result = sub_604EA8(a2 + 32, a1 + 32);
        if (!result) {
          return result;
        }
      }
      else if (*(_DWORD *)a2 >= *(_DWORD *)a1)
      {
        return result;
      }
    }
    else if (v29 >= (int)result)
    {
      return result;
    }
    int v39 = *(_DWORD *)a1;
    long long v40 = *(_OWORD *)(a1 + 8);
    uint64_t v41 = *(void *)(a1 + 24);
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 8) = 0;
    sub_4C09FC((uint64_t)v42, a1 + 32);
    long long v43 = *(_OWORD *)(a1 + 1152);
    uint64_t v44 = *(void *)(a1 + 1168);
    *(_OWORD *)(a1 + 1152) = 0u;
    uint64_t v31 = *(void *)(a1 + 1176);
    *(_OWORD *)(a1 + 1168) = 0u;
    uint64_t v45 = v31;
    long long v46 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = 0u;
    int v47 = *(_DWORD *)(a1 + 1200);
    uint64_t v48 = *(void *)(a1 + 1208);
    long long v49 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a1 + 1216) = 0u;
    *(void *)(a1 + 1208) = 0;
    long long v32 = *(_OWORD *)(a1 + 1232);
    uint64_t v51 = *(void *)(a1 + 1248);
    long long v50 = v32;
    *(void *)(a1 + 1248) = 0;
    *(_OWORD *)(a1 + 1232) = 0u;
    long long v33 = *(_OWORD *)(a1 + 1256);
    long long v34 = *(_OWORD *)(a1 + 1272);
    *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)(a1 + 1284);
    long long v52 = v33;
    v53[0] = v34;
    uint64_t v35 = *(void *)(a1 + 1320);
    long long v54 = *(_OWORD *)(a1 + 1304);
    uint64_t v55 = v35;
    *(void *)(a1 + 1320) = 0;
    *(_OWORD *)(a1 + 1304) = 0u;
    long long v56 = *(_OWORD *)(a1 + 1328);
    uint64_t v57 = *(void *)(a1 + 1344);
    *(_OWORD *)(a1 + 1328) = 0u;
    *(void *)(a1 + 1344) = 0;
    LODWORD(v35) = *(_DWORD *)(a1 + 1368);
    long long v58 = *(_OWORD *)(a1 + 1352);
    int v59 = v35;
    long long v36 = *(_OWORD *)(a1 + 1376);
    uint64_t v61 = *(void *)(a1 + 1392);
    long long v60 = v36;
    *(void *)(a1 + 1392) = 0;
    *(_OWORD *)(a1 + 1376) = 0u;
    uint64_t v37 = *(void *)(a1 + 1400);
    int v63 = *(_DWORD *)(a1 + 1408);
    uint64_t v62 = v37;
    uint64_t v38 = *(void *)(a1 + 1432);
    long long v64 = *(_OWORD *)(a1 + 1416);
    uint64_t v65 = v38;
    *(void *)(a1 + 1424) = 0;
    *(void *)(a1 + 1416) = 0;
    *(void *)(a1 + 1432) = 0;
    sub_4C5BDC(a1, a2);
    sub_4C5BDC(a2, (uint64_t)&v39);
    return sub_4BD604((uint64_t)&v39);
  }
  uint64_t result = sub_605454(a4 + 32);
  if (result)
  {
    uint64_t v10 = *(unsigned __int8 *)(a4 + 1175);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a4 + 1160);
    }
    if (v10)
    {
      uint64_t result = sub_604EA8(a4 + 32, a3 + 32);
      if (result) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t sub_4C6550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_4C5ED8(a1, a2, a3, a4);
  int v10 = sub_4C5A0C(a5);
  uint64_t result = sub_4C5A0C(a4);
  if (v10 != result)
  {
    if (v10 >= (int)result) {
      return result;
    }
    goto LABEL_12;
  }
  if (*(_DWORD *)a5 != 50)
  {
    if (*(_DWORD *)a5 >= *(_DWORD *)a4) {
      return result;
    }
LABEL_12:
    int v51 = *(_DWORD *)a4;
    long long v52 = *(_OWORD *)(a4 + 8);
    uint64_t v53 = *(void *)(a4 + 24);
    *(_OWORD *)(a4 + 16) = 0u;
    *(void *)(a4 + 8) = 0;
    sub_4C09FC((uint64_t)v54, a4 + 32);
    long long v55 = *(_OWORD *)(a4 + 1152);
    uint64_t v56 = *(void *)(a4 + 1168);
    *(_OWORD *)(a4 + 1152) = 0u;
    uint64_t v13 = *(void *)(a4 + 1176);
    *(_OWORD *)(a4 + 1168) = 0u;
    uint64_t v57 = v13;
    long long v58 = *(_OWORD *)(a4 + 1184);
    *(_OWORD *)(a4 + 1184) = 0u;
    int v59 = *(_DWORD *)(a4 + 1200);
    uint64_t v60 = *(void *)(a4 + 1208);
    long long v61 = *(_OWORD *)(a4 + 1216);
    *(_OWORD *)(a4 + 1216) = 0u;
    *(void *)(a4 + 1208) = 0;
    long long v14 = *(_OWORD *)(a4 + 1232);
    uint64_t v63 = *(void *)(a4 + 1248);
    long long v62 = v14;
    *(void *)(a4 + 1248) = 0;
    *(_OWORD *)(a4 + 1232) = 0u;
    long long v15 = *(_OWORD *)(a4 + 1256);
    long long v16 = *(_OWORD *)(a4 + 1272);
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a4 + 1284);
    long long v64 = v15;
    v65[0] = v16;
    uint64_t v17 = *(void *)(a4 + 1320);
    long long v66 = *(_OWORD *)(a4 + 1304);
    uint64_t v67 = v17;
    *(void *)(a4 + 1320) = 0;
    *(_OWORD *)(a4 + 1304) = 0u;
    long long v68 = *(_OWORD *)(a4 + 1328);
    uint64_t v69 = *(void *)(a4 + 1344);
    *(_OWORD *)(a4 + 1328) = 0u;
    *(void *)(a4 + 1344) = 0;
    LODWORD(v17) = *(_DWORD *)(a4 + 1368);
    long long v70 = *(_OWORD *)(a4 + 1352);
    int v71 = v17;
    long long v18 = *(_OWORD *)(a4 + 1376);
    uint64_t v73 = *(void *)(a4 + 1392);
    long long v72 = v18;
    *(void *)(a4 + 1392) = 0;
    *(_OWORD *)(a4 + 1376) = 0u;
    uint64_t v19 = *(void *)(a4 + 1400);
    int v75 = *(_DWORD *)(a4 + 1408);
    uint64_t v74 = v19;
    uint64_t v20 = *(void *)(a4 + 1432);
    long long v76 = *(_OWORD *)(a4 + 1416);
    uint64_t v77 = v20;
    *(void *)(a4 + 1424) = 0;
    *(void *)(a4 + 1416) = 0;
    *(void *)(a4 + 1432) = 0;
    sub_4C5BDC(a4, a5);
    sub_4C5BDC(a5, (uint64_t)&v51);
    sub_4BD604((uint64_t)&v51);
    int v21 = sub_4C5A0C(a4);
    uint64_t result = sub_4C5A0C(a3);
    if (v21 == result)
    {
      if (*(_DWORD *)a4 == 50)
      {
        uint64_t result = sub_605454(a4 + 32);
        if (!result) {
          return result;
        }
        uint64_t v22 = *(unsigned __int8 *)(a4 + 1175);
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(a4 + 1160);
        }
        if (!v22) {
          return result;
        }
        uint64_t result = sub_604EA8(a4 + 32, a3 + 32);
        if (!result) {
          return result;
        }
      }
      else if (*(_DWORD *)a4 >= *(_DWORD *)a3)
      {
        return result;
      }
    }
    else if (v21 >= (int)result)
    {
      return result;
    }
    int v51 = *(_DWORD *)a3;
    long long v52 = *(_OWORD *)(a3 + 8);
    uint64_t v53 = *(void *)(a3 + 24);
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 8) = 0;
    sub_4C09FC((uint64_t)v54, a3 + 32);
    long long v55 = *(_OWORD *)(a3 + 1152);
    uint64_t v56 = *(void *)(a3 + 1168);
    *(_OWORD *)(a3 + 1152) = 0u;
    uint64_t v23 = *(void *)(a3 + 1176);
    *(_OWORD *)(a3 + 1168) = 0u;
    uint64_t v57 = v23;
    long long v58 = *(_OWORD *)(a3 + 1184);
    *(_OWORD *)(a3 + 1184) = 0u;
    int v59 = *(_DWORD *)(a3 + 1200);
    uint64_t v60 = *(void *)(a3 + 1208);
    long long v61 = *(_OWORD *)(a3 + 1216);
    *(_OWORD *)(a3 + 1216) = 0u;
    *(void *)(a3 + 1208) = 0;
    long long v24 = *(_OWORD *)(a3 + 1232);
    uint64_t v63 = *(void *)(a3 + 1248);
    long long v62 = v24;
    *(void *)(a3 + 1248) = 0;
    *(_OWORD *)(a3 + 1232) = 0u;
    long long v25 = *(_OWORD *)(a3 + 1256);
    long long v26 = *(_OWORD *)(a3 + 1272);
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a3 + 1284);
    long long v64 = v25;
    v65[0] = v26;
    uint64_t v27 = *(void *)(a3 + 1320);
    long long v66 = *(_OWORD *)(a3 + 1304);
    uint64_t v67 = v27;
    *(void *)(a3 + 1320) = 0;
    *(_OWORD *)(a3 + 1304) = 0u;
    long long v68 = *(_OWORD *)(a3 + 1328);
    uint64_t v69 = *(void *)(a3 + 1344);
    *(_OWORD *)(a3 + 1328) = 0u;
    *(void *)(a3 + 1344) = 0;
    LODWORD(v27) = *(_DWORD *)(a3 + 1368);
    long long v70 = *(_OWORD *)(a3 + 1352);
    int v71 = v27;
    long long v28 = *(_OWORD *)(a3 + 1376);
    uint64_t v73 = *(void *)(a3 + 1392);
    long long v72 = v28;
    *(void *)(a3 + 1392) = 0;
    *(_OWORD *)(a3 + 1376) = 0u;
    uint64_t v29 = *(void *)(a3 + 1400);
    int v75 = *(_DWORD *)(a3 + 1408);
    uint64_t v74 = v29;
    uint64_t v30 = *(void *)(a3 + 1432);
    long long v76 = *(_OWORD *)(a3 + 1416);
    uint64_t v77 = v30;
    *(void *)(a3 + 1424) = 0;
    *(void *)(a3 + 1416) = 0;
    *(void *)(a3 + 1432) = 0;
    sub_4C5BDC(a3, a4);
    sub_4C5BDC(a4, (uint64_t)&v51);
    sub_4BD604((uint64_t)&v51);
    int v31 = sub_4C5A0C(a3);
    uint64_t result = sub_4C5A0C(a2);
    if (v31 == result)
    {
      if (*(_DWORD *)a3 == 50)
      {
        uint64_t result = sub_605454(a3 + 32);
        if (!result) {
          return result;
        }
        uint64_t v32 = *(unsigned __int8 *)(a3 + 1175);
        if ((v32 & 0x80u) != 0) {
          uint64_t v32 = *(void *)(a3 + 1160);
        }
        if (!v32) {
          return result;
        }
        uint64_t result = sub_604EA8(a3 + 32, a2 + 32);
        if (!result) {
          return result;
        }
      }
      else if (*(_DWORD *)a3 >= *(_DWORD *)a2)
      {
        return result;
      }
    }
    else if (v31 >= (int)result)
    {
      return result;
    }
    int v51 = *(_DWORD *)a2;
    long long v52 = *(_OWORD *)(a2 + 8);
    uint64_t v53 = *(void *)(a2 + 24);
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 8) = 0;
    sub_4C09FC((uint64_t)v54, a2 + 32);
    long long v55 = *(_OWORD *)(a2 + 1152);
    uint64_t v56 = *(void *)(a2 + 1168);
    *(_OWORD *)(a2 + 1152) = 0u;
    uint64_t v33 = *(void *)(a2 + 1176);
    *(_OWORD *)(a2 + 1168) = 0u;
    uint64_t v57 = v33;
    long long v58 = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a2 + 1184) = 0u;
    int v59 = *(_DWORD *)(a2 + 1200);
    uint64_t v60 = *(void *)(a2 + 1208);
    long long v61 = *(_OWORD *)(a2 + 1216);
    *(_OWORD *)(a2 + 1216) = 0u;
    *(void *)(a2 + 1208) = 0;
    long long v34 = *(_OWORD *)(a2 + 1232);
    uint64_t v63 = *(void *)(a2 + 1248);
    long long v62 = v34;
    *(void *)(a2 + 1248) = 0;
    *(_OWORD *)(a2 + 1232) = 0u;
    long long v35 = *(_OWORD *)(a2 + 1256);
    long long v36 = *(_OWORD *)(a2 + 1272);
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a2 + 1284);
    long long v64 = v35;
    v65[0] = v36;
    uint64_t v37 = *(void *)(a2 + 1320);
    long long v66 = *(_OWORD *)(a2 + 1304);
    uint64_t v67 = v37;
    *(void *)(a2 + 1320) = 0;
    *(_OWORD *)(a2 + 1304) = 0u;
    long long v68 = *(_OWORD *)(a2 + 1328);
    uint64_t v69 = *(void *)(a2 + 1344);
    *(_OWORD *)(a2 + 1328) = 0u;
    *(void *)(a2 + 1344) = 0;
    LODWORD(v37) = *(_DWORD *)(a2 + 1368);
    long long v70 = *(_OWORD *)(a2 + 1352);
    int v71 = v37;
    long long v38 = *(_OWORD *)(a2 + 1376);
    uint64_t v73 = *(void *)(a2 + 1392);
    long long v72 = v38;
    *(void *)(a2 + 1392) = 0;
    *(_OWORD *)(a2 + 1376) = 0u;
    uint64_t v39 = *(void *)(a2 + 1400);
    int v75 = *(_DWORD *)(a2 + 1408);
    uint64_t v74 = v39;
    uint64_t v40 = *(void *)(a2 + 1432);
    long long v76 = *(_OWORD *)(a2 + 1416);
    uint64_t v77 = v40;
    *(void *)(a2 + 1424) = 0;
    *(void *)(a2 + 1416) = 0;
    *(void *)(a2 + 1432) = 0;
    sub_4C5BDC(a2, a3);
    sub_4C5BDC(a3, (uint64_t)&v51);
    sub_4BD604((uint64_t)&v51);
    int v41 = sub_4C5A0C(a2);
    uint64_t result = sub_4C5A0C(a1);
    if (v41 == result)
    {
      if (*(_DWORD *)a2 == 50)
      {
        uint64_t result = sub_605454(a2 + 32);
        if (!result) {
          return result;
        }
        uint64_t v42 = *(unsigned __int8 *)(a2 + 1175);
        if ((v42 & 0x80u) != 0) {
          uint64_t v42 = *(void *)(a2 + 1160);
        }
        if (!v42) {
          return result;
        }
        uint64_t result = sub_604EA8(a2 + 32, a1 + 32);
        if (!result) {
          return result;
        }
      }
      else if (*(_DWORD *)a2 >= *(_DWORD *)a1)
      {
        return result;
      }
    }
    else if (v41 >= (int)result)
    {
      return result;
    }
    int v51 = *(_DWORD *)a1;
    long long v52 = *(_OWORD *)(a1 + 8);
    uint64_t v53 = *(void *)(a1 + 24);
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 8) = 0;
    sub_4C09FC((uint64_t)v54, a1 + 32);
    long long v55 = *(_OWORD *)(a1 + 1152);
    uint64_t v56 = *(void *)(a1 + 1168);
    *(_OWORD *)(a1 + 1152) = 0u;
    uint64_t v43 = *(void *)(a1 + 1176);
    *(_OWORD *)(a1 + 1168) = 0u;
    uint64_t v57 = v43;
    long long v58 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = 0u;
    int v59 = *(_DWORD *)(a1 + 1200);
    uint64_t v60 = *(void *)(a1 + 1208);
    long long v61 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a1 + 1216) = 0u;
    *(void *)(a1 + 1208) = 0;
    long long v44 = *(_OWORD *)(a1 + 1232);
    uint64_t v63 = *(void *)(a1 + 1248);
    long long v62 = v44;
    *(void *)(a1 + 1248) = 0;
    *(_OWORD *)(a1 + 1232) = 0u;
    long long v45 = *(_OWORD *)(a1 + 1256);
    long long v46 = *(_OWORD *)(a1 + 1272);
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)(a1 + 1284);
    long long v64 = v45;
    v65[0] = v46;
    uint64_t v47 = *(void *)(a1 + 1320);
    long long v66 = *(_OWORD *)(a1 + 1304);
    uint64_t v67 = v47;
    *(void *)(a1 + 1320) = 0;
    *(_OWORD *)(a1 + 1304) = 0u;
    long long v68 = *(_OWORD *)(a1 + 1328);
    uint64_t v69 = *(void *)(a1 + 1344);
    *(_OWORD *)(a1 + 1328) = 0u;
    *(void *)(a1 + 1344) = 0;
    LODWORD(v47) = *(_DWORD *)(a1 + 1368);
    long long v70 = *(_OWORD *)(a1 + 1352);
    int v71 = v47;
    long long v48 = *(_OWORD *)(a1 + 1376);
    uint64_t v73 = *(void *)(a1 + 1392);
    long long v72 = v48;
    *(void *)(a1 + 1392) = 0;
    *(_OWORD *)(a1 + 1376) = 0u;
    uint64_t v49 = *(void *)(a1 + 1400);
    int v75 = *(_DWORD *)(a1 + 1408);
    uint64_t v74 = v49;
    uint64_t v50 = *(void *)(a1 + 1432);
    long long v76 = *(_OWORD *)(a1 + 1416);
    uint64_t v77 = v50;
    *(void *)(a1 + 1424) = 0;
    *(void *)(a1 + 1416) = 0;
    *(void *)(a1 + 1432) = 0;
    sub_4C5BDC(a1, a2);
    sub_4C5BDC(a2, (uint64_t)&v51);
    return sub_4BD604((uint64_t)&v51);
  }
  uint64_t result = sub_605454(a5 + 32);
  if (result)
  {
    uint64_t v12 = *(unsigned __int8 *)(a5 + 1175);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a5 + 1160);
    }
    if (v12)
    {
      uint64_t result = sub_604EA8(a5 + 32, a4 + 32);
      if (result) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t sub_4C6DC8(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 1440;
    if (a2 - a1 >= 1441)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[1440 * v10];
      do
      {
        sub_4C7168((uint64_t)a1, a4, v9, v12);
        v12 -= 1440;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v30 = v8;
      uint64_t v14 = v6;
      while (1)
      {
        int v24 = sub_4C5A0C(v14);
        int v25 = sub_4C5A0C((uint64_t)a1);
        if (v24 == v25)
        {
          if (*(_DWORD *)v14 == 50)
          {
            if (!sub_605454(v14 + 32)) {
              goto LABEL_8;
            }
            uint64_t v26 = *(unsigned __int8 *)(v14 + 1175);
            if ((v26 & 0x80u) != 0) {
              uint64_t v26 = *(void *)(v14 + 1160);
            }
            if (!v26 || !sub_604EA8(v14 + 32, (uint64_t)(a1 + 32))) {
              goto LABEL_8;
            }
          }
          else if (*(_DWORD *)v14 >= *(_DWORD *)a1)
          {
            goto LABEL_8;
          }
        }
        else if (v24 >= v25)
        {
          goto LABEL_8;
        }
        int v31 = *(_DWORD *)v14;
        long long v32 = *(_OWORD *)(v14 + 8);
        uint64_t v33 = *(void *)(v14 + 24);
        *(_OWORD *)(v14 + 16) = 0u;
        *(void *)(v14 + 8) = 0;
        sub_4C09FC((uint64_t)v34, v14 + 32);
        v34[70] = *(_OWORD *)(v14 + 1152);
        uint64_t v35 = *(void *)(v14 + 1168);
        *(_OWORD *)(v14 + 1152) = 0u;
        uint64_t v15 = *(void *)(v14 + 1176);
        *(_OWORD *)(v14 + 1168) = 0u;
        uint64_t v36 = v15;
        long long v37 = *(_OWORD *)(v14 + 1184);
        *(_OWORD *)(v14 + 1184) = 0u;
        int v38 = *(_DWORD *)(v14 + 1200);
        uint64_t v39 = *(void *)(v14 + 1208);
        long long v40 = *(_OWORD *)(v14 + 1216);
        *(_OWORD *)(v14 + 1216) = 0u;
        *(void *)(v14 + 1208) = 0;
        long long v16 = *(_OWORD *)(v14 + 1232);
        uint64_t v42 = *(void *)(v14 + 1248);
        long long v41 = v16;
        *(void *)(v14 + 1248) = 0;
        *(_OWORD *)(v14 + 1232) = 0u;
        long long v17 = *(_OWORD *)(v14 + 1256);
        long long v18 = *(_OWORD *)(v14 + 1272);
        *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)(v14 + 1284);
        long long v43 = v17;
        v44[0] = v18;
        long long v19 = *(_OWORD *)(v14 + 1304);
        uint64_t v45 = *(void *)(v14 + 1320);
        v44[2] = v19;
        *(void *)(v14 + 1320) = 0;
        *(_OWORD *)(v14 + 1304) = 0u;
        long long v46 = *(_OWORD *)(v14 + 1328);
        uint64_t v47 = *(void *)(v14 + 1344);
        *(_OWORD *)(v14 + 1328) = 0u;
        *(void *)(v14 + 1344) = 0;
        long long v20 = *(_OWORD *)(v14 + 1352);
        int v49 = *(_DWORD *)(v14 + 1368);
        long long v48 = v20;
        long long v21 = *(_OWORD *)(v14 + 1376);
        uint64_t v51 = *(void *)(v14 + 1392);
        long long v50 = v21;
        *(void *)(v14 + 1392) = 0;
        *(_OWORD *)(v14 + 1376) = 0u;
        uint64_t v22 = *(void *)(v14 + 1400);
        int v53 = *(_DWORD *)(v14 + 1408);
        uint64_t v52 = v22;
        long long v23 = *(_OWORD *)(v14 + 1416);
        uint64_t v55 = *(void *)(v14 + 1432);
        long long v54 = v23;
        *(void *)(v14 + 1432) = 0;
        *(_OWORD *)(v14 + 1416) = 0u;
        sub_4C5BDC(v14, (uint64_t)a1);
        sub_4C5BDC((uint64_t)a1, (uint64_t)&v31);
        sub_4BD604((uint64_t)&v31);
        sub_4C7168((uint64_t)a1, a4, v9, (uint64_t)a1);
LABEL_8:
        v14 += 1440;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          uint64_t v8 = v30;
          break;
        }
      }
    }
    if (v8 >= 1441)
    {
      unint64_t v27 = v8 / 0x5A0uLL;
      do
      {
        sub_4C7614((uint64_t)a1, v6, a4, v27);
        v6 -= 1440;
      }
      while (v27-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_4C7168(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v6 = result;
  int64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < 0x4FA4FA4FA4FA4FA5 * ((a4 - result) >> 5)) {
    return result;
  }
  int64_t v9 = (0x9F49F49F49F49F4ALL * ((a4 - result) >> 5)) | 1;
  uint64_t v10 = result + 1440 * v9;
  int64_t v11 = 0x9F49F49F49F49F4ALL * ((a4 - result) >> 5) + 2;
  if (v11 >= a3) {
    goto LABEL_14;
  }
  int v12 = sub_4C5A0C(result + 1440 * v9);
  int v13 = sub_4C5A0C(v10 + 1440);
  if (v12 == v13)
  {
    if (*(_DWORD *)v10 == 50)
    {
      if (!sub_605454(v6 + 1440 * v9 + 32)) {
        goto LABEL_14;
      }
      uint64_t v14 = *(unsigned __int8 *)(v10 + 1175);
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(v6 + 1440 * v9 + 1160);
      }
      if (!v14 || !sub_604EA8(v6 + 1440 * v9 + 32, v10 + 1472)) {
        goto LABEL_14;
      }
    }
    else if (*(_DWORD *)v10 >= *(_DWORD *)(v10 + 1440))
    {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v12 < v13)
  {
LABEL_13:
    v10 += 1440;
    int64_t v9 = v11;
  }
LABEL_14:
  int v15 = sub_4C5A0C(v10);
  uint64_t result = sub_4C5A0C(a4);
  if (v15 == result)
  {
    if (*(_DWORD *)v10 == 50)
    {
      if (sub_605454(v10 + 32))
      {
        uint64_t v16 = *(unsigned __int8 *)(v10 + 1175);
        if ((v16 & 0x80u) != 0) {
          uint64_t v16 = *(void *)(v10 + 1160);
        }
        if (v16)
        {
          uint64_t result = sub_604EA8(v10 + 32, a4 + 32);
          if (result) {
            return result;
          }
        }
      }
    }
    else if (*(_DWORD *)v10 < *(_DWORD *)a4)
    {
      return result;
    }
  }
  else if (v15 < (int)result)
  {
    return result;
  }
  int v34 = *(_DWORD *)a4;
  long long v35 = *(_OWORD *)(a4 + 8);
  uint64_t v36 = *(void *)(a4 + 24);
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 8) = 0;
  sub_4C09FC((uint64_t)v37, a4 + 32);
  v37[70] = *(_OWORD *)(a4 + 1152);
  uint64_t v38 = *(void *)(a4 + 1168);
  *(_OWORD *)(a4 + 1152) = 0u;
  uint64_t v17 = *(void *)(a4 + 1176);
  *(_OWORD *)(a4 + 1168) = 0u;
  uint64_t v39 = v17;
  long long v40 = *(_OWORD *)(a4 + 1184);
  *(_OWORD *)(a4 + 1184) = 0u;
  int v41 = *(_DWORD *)(a4 + 1200);
  uint64_t v42 = *(void *)(a4 + 1208);
  long long v43 = *(_OWORD *)(a4 + 1216);
  *(_OWORD *)(a4 + 1216) = 0u;
  *(void *)(a4 + 1208) = 0;
  long long v18 = *(_OWORD *)(a4 + 1232);
  uint64_t v45 = *(void *)(a4 + 1248);
  long long v44 = v18;
  *(void *)(a4 + 1248) = 0;
  *(_OWORD *)(a4 + 1232) = 0u;
  long long v19 = *(_OWORD *)(a4 + 1256);
  long long v20 = *(_OWORD *)(a4 + 1272);
  *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)(a4 + 1284);
  long long v46 = v19;
  v47[0] = v20;
  uint64_t v21 = *(void *)(a4 + 1320);
  v47[2] = *(_OWORD *)(a4 + 1304);
  uint64_t v48 = v21;
  *(void *)(a4 + 1320) = 0;
  *(_OWORD *)(a4 + 1304) = 0u;
  long long v49 = *(_OWORD *)(a4 + 1328);
  uint64_t v50 = *(void *)(a4 + 1344);
  *(_OWORD *)(a4 + 1328) = 0u;
  *(void *)(a4 + 1344) = 0;
  LODWORD(v21) = *(_DWORD *)(a4 + 1368);
  long long v51 = *(_OWORD *)(a4 + 1352);
  int v52 = v21;
  long long v22 = *(_OWORD *)(a4 + 1376);
  uint64_t v54 = *(void *)(a4 + 1392);
  long long v53 = v22;
  *(void *)(a4 + 1392) = 0;
  *(_OWORD *)(a4 + 1376) = 0u;
  uint64_t v23 = *(void *)(a4 + 1400);
  int v56 = *(_DWORD *)(a4 + 1408);
  uint64_t v55 = v23;
  uint64_t v24 = *(void *)(a4 + 1432);
  long long v57 = *(_OWORD *)(a4 + 1416);
  uint64_t v58 = v24;
  *(void *)(a4 + 1424) = 0;
  *(void *)(a4 + 1416) = 0;
  *(void *)(a4 + 1432) = 0;
  sub_4C5BDC(a4, v10);
  if (v7 < v9) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v25 = v10;
    uint64_t v26 = 2 * v9;
    int64_t v9 = (2 * v9) | 1;
    uint64_t v10 = v6 + 1440 * v9;
    int64_t v27 = v26 + 2;
    if (v26 + 2 >= a3) {
      goto LABEL_40;
    }
    int v28 = sub_4C5A0C(v6 + 1440 * v9);
    int v29 = sub_4C5A0C(v10 + 1440);
    if (v28 != v29)
    {
      if (v28 >= v29) {
        goto LABEL_40;
      }
LABEL_39:
      v10 += 1440;
      int64_t v9 = v27;
      goto LABEL_40;
    }
    if (*(_DWORD *)v10 == 50)
    {
      if (sub_605454(v6 + 1440 * v9 + 32))
      {
        uint64_t v30 = *(unsigned __int8 *)(v10 + 1175);
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *(void *)(v6 + 1440 * v9 + 1160);
        }
        if (v30 && sub_604EA8(v6 + 1440 * v9 + 32, v10 + 1472)) {
          goto LABEL_39;
        }
      }
    }
    else if (*(_DWORD *)v10 < *(_DWORD *)(v10 + 1440))
    {
      goto LABEL_39;
    }
LABEL_40:
    int v31 = sub_4C5A0C(v10);
    int v32 = sub_4C5A0C((uint64_t)&v34);
    if (v31 != v32)
    {
      if (v31 < v32) {
        goto LABEL_52;
      }
      goto LABEL_28;
    }
    if (*(_DWORD *)v10 == 50) {
      break;
    }
    if (*(_DWORD *)v10 < v34) {
      goto LABEL_52;
    }
LABEL_28:
    sub_4C5BDC(v25, v10);
    if (v7 < v9) {
      goto LABEL_53;
    }
  }
  if (!sub_605454(v10 + 32)) {
    goto LABEL_28;
  }
  uint64_t v33 = *(unsigned __int8 *)(v10 + 1175);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *(void *)(v10 + 1160);
  }
  if (!v33 || (sub_604EA8(v10 + 32, (uint64_t)v37) & 1) == 0) {
    goto LABEL_28;
  }
LABEL_52:
  uint64_t v10 = v25;
LABEL_53:
  sub_4C5BDC(v10, (uint64_t)&v34);
  return sub_4BD604((uint64_t)&v34);
}

void sub_4C7600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C7614(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    int v19 = *(_DWORD *)result;
    long long v20 = *(_OWORD *)(result + 8);
    uint64_t v21 = *(void *)(result + 24);
    *(_OWORD *)(result + 16) = 0u;
    *(void *)(result + 8) = 0;
    sub_4C09FC((uint64_t)v22, result + 32);
    v22[70] = *(_OWORD *)(v7 + 1152);
    uint64_t v23 = *(void *)(v7 + 1168);
    *(_OWORD *)(v7 + 1152) = 0u;
    uint64_t v8 = *(void *)(v7 + 1176);
    *(_OWORD *)(v7 + 1168) = 0u;
    uint64_t v24 = v8;
    long long v25 = *(_OWORD *)(v7 + 1184);
    *(_OWORD *)(v7 + 1184) = 0u;
    int v26 = *(_DWORD *)(v7 + 1200);
    uint64_t v27 = *(void *)(v7 + 1208);
    long long v28 = *(_OWORD *)(v7 + 1216);
    *(_OWORD *)(v7 + 1216) = 0u;
    *(void *)(v7 + 1208) = 0;
    long long v9 = *(_OWORD *)(v7 + 1232);
    uint64_t v30 = *(void *)(v7 + 1248);
    long long v29 = v9;
    *(void *)(v7 + 1248) = 0;
    *(_OWORD *)(v7 + 1232) = 0u;
    long long v10 = *(_OWORD *)(v7 + 1256);
    long long v11 = *(_OWORD *)(v7 + 1272);
    *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(v7 + 1284);
    long long v31 = v10;
    v32[0] = v11;
    uint64_t v12 = *(void *)(v7 + 1320);
    v32[2] = *(_OWORD *)(v7 + 1304);
    uint64_t v33 = v12;
    *(void *)(v7 + 1320) = 0;
    *(_OWORD *)(v7 + 1304) = 0u;
    long long v34 = *(_OWORD *)(v7 + 1328);
    uint64_t v35 = *(void *)(v7 + 1344);
    *(_OWORD *)(v7 + 1328) = 0u;
    *(void *)(v7 + 1344) = 0;
    LODWORD(v12) = *(_DWORD *)(v7 + 1368);
    long long v36 = *(_OWORD *)(v7 + 1352);
    int v37 = v12;
    long long v13 = *(_OWORD *)(v7 + 1376);
    uint64_t v39 = *(void *)(v7 + 1392);
    long long v38 = v13;
    *(void *)(v7 + 1392) = 0;
    *(_OWORD *)(v7 + 1376) = 0u;
    uint64_t v14 = *(void *)(v7 + 1400);
    int v41 = *(_DWORD *)(v7 + 1408);
    uint64_t v40 = v14;
    uint64_t v15 = *(void *)(v7 + 1432);
    long long v42 = *(_OWORD *)(v7 + 1416);
    uint64_t v43 = v15;
    *(void *)(v7 + 1424) = 0;
    *(void *)(v7 + 1416) = 0;
    *(void *)(v7 + 1432) = 0;
    uint64_t v16 = sub_4C7884(v7, a3, a4);
    uint64_t v17 = v16;
    uint64_t v18 = a2 - 1440;
    if (v16 == v18)
    {
      sub_4C5BDC(v16, (uint64_t)&v19);
    }
    else
    {
      sub_4C5BDC(v16, v18);
      sub_4C5BDC(v18, (uint64_t)&v19);
      sub_4C79B4(v7, v17 + 1440, a3, 0x4FA4FA4FA4FA4FA5 * ((v17 + 1440 - v7) >> 5));
    }
    return sub_4BD604((uint64_t)&v19);
  }
  return result;
}

void sub_4C7870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C7884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 1440 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      int v12 = sub_4C5A0C(a1);
      int v13 = sub_4C5A0C(a1 + 1440);
      if (v12 == v13)
      {
        if (*(_DWORD *)a1 == 50)
        {
          if (sub_605454(v8 + 1440 * v9 + 32))
          {
            uint64_t v14 = *(unsigned __int8 *)(a1 + 1175);
            if ((v14 & 0x80u) != 0) {
              uint64_t v14 = *(void *)(v8 + 1440 * v9 + 1160);
            }
            if (v14 && sub_604EA8(v8 + 1440 * v9 + 32, a1 + 1472))
            {
LABEL_4:
              a1 += 1440;
              uint64_t v5 = v11;
            }
          }
        }
        else if (*(_DWORD *)a1 < *(_DWORD *)(a1 + 1440))
        {
          goto LABEL_4;
        }
      }
      else if (v12 < v13)
      {
        goto LABEL_4;
      }
    }
    sub_4C5BDC(v8, a1);
  }
  while (v5 <= v7);
  return a1;
}

uint64_t sub_4C79B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = result + 1440 * (v4 >> 1);
  uint64_t v9 = a2 - 1440;
  int v10 = sub_4C5A0C(v8);
  uint64_t result = sub_4C5A0C(v9);
  if (v10 == result)
  {
    if (*(_DWORD *)v8 == 50)
    {
      uint64_t result = sub_605454(v6 + 1440 * v7 + 32);
      if (!result) {
        return result;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 1175);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v6 + 1440 * v7 + 1160);
      }
      if (!v11) {
        return result;
      }
      uint64_t result = sub_604EA8(v6 + 1440 * v7 + 32, a2 - 1408);
      if (!result) {
        return result;
      }
    }
    else if (*(_DWORD *)v8 >= *(_DWORD *)v9)
    {
      return result;
    }
  }
  else if (v10 >= (int)result)
  {
    return result;
  }
  int v24 = *(_DWORD *)v9;
  long long v25 = *(_OWORD *)(v9 + 8);
  uint64_t v26 = *(void *)(v9 + 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  sub_4C09FC((uint64_t)v27, a2 - 1408);
  v27[70] = *(_OWORD *)(v9 + 1152);
  uint64_t v28 = *(void *)(v9 + 1168);
  *(void *)(v9 + 1152) = 0;
  *(void *)(v9 + 1168) = 0;
  *(void *)(v9 + 1160) = 0;
  long long v29 = *(_OWORD *)(a2 - 264);
  uint64_t v30 = *(void *)(a2 - 248);
  *(void *)(a2 - 264) = 0;
  *(void *)(a2 - 256) = 0;
  *(void *)(a2 - 248) = 0;
  int v31 = *(_DWORD *)(a2 - 240);
  long long v32 = *(_OWORD *)(a2 - 232);
  uint64_t v33 = *(void *)(a2 - 216);
  *(void *)(a2 - 232) = 0;
  *(void *)(a2 - 224) = 0;
  long long v12 = *(_OWORD *)(a2 - 208);
  uint64_t v35 = *(void *)(a2 - 192);
  long long v34 = v12;
  *(void *)(a2 - 216) = 0;
  *(void *)(a2 - 208) = 0;
  *(void *)(a2 - 200) = 0;
  *(void *)(a2 - 192) = 0;
  long long v13 = *(_OWORD *)(a2 - 184);
  long long v14 = *(_OWORD *)(a2 - 168);
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)(a2 - 156);
  long long v36 = v13;
  v37[0] = v14;
  uint64_t v15 = *(void *)(a2 - 120);
  _OWORD v37[2] = *(_OWORD *)(a2 - 136);
  uint64_t v38 = v15;
  *(void *)(a2 - 136) = 0;
  *(void *)(a2 - 128) = 0;
  long long v39 = *(_OWORD *)(a2 - 112);
  uint64_t v40 = *(void *)(a2 - 96);
  *(void *)(a2 - 120) = 0;
  *(void *)(a2 - 112) = 0;
  *(void *)(a2 - 104) = 0;
  *(void *)(a2 - 96) = 0;
  LODWORD(v15) = *(_DWORD *)(a2 - 72);
  long long v41 = *(_OWORD *)(a2 - 88);
  int v42 = v15;
  long long v16 = *(_OWORD *)(a2 - 64);
  uint64_t v17 = *(void *)(a2 - 40);
  uint64_t v44 = *(void *)(a2 - 48);
  long long v43 = v16;
  *(void *)(a2 - 64) = 0;
  *(void *)(a2 - 56) = 0;
  *(void *)(a2 - 48) = 0;
  int v46 = *(_DWORD *)(a2 - 32);
  uint64_t v45 = v17;
  uint64_t v18 = *(void *)(a2 - 8);
  long long v47 = *(_OWORD *)(a2 - 24);
  uint64_t v48 = v18;
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  sub_4C5BDC(v9, v8);
  if (v4 < 2) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v19 = v8;
    unint64_t v20 = v7 - 1;
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = v6 + 1440 * v7;
    int v21 = sub_4C5A0C(v8);
    int v22 = sub_4C5A0C((uint64_t)&v24);
    if (v21 != v22)
    {
      if (v21 >= v22) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)v8 == 50) {
      break;
    }
    if (*(_DWORD *)v8 >= v24) {
      goto LABEL_26;
    }
LABEL_16:
    sub_4C5BDC(v19, v6 + 1440 * v7);
    if (v20 <= 1) {
      goto LABEL_27;
    }
  }
  if (sub_605454(v6 + 1440 * v7 + 32))
  {
    uint64_t v23 = *(unsigned __int8 *)(v8 + 1175);
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *(void *)(v6 + 1440 * v7 + 1160);
    }
    if (v23 && sub_604EA8(v6 + 1440 * v7 + 32, (uint64_t)v27)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  uint64_t v8 = v19;
LABEL_27:
  sub_4C5BDC(v8, (uint64_t)&v24);
  return sub_4BD604((uint64_t)&v24);
}

void sub_4C7CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4BD604((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_4C7D04(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    v4[1] = sub_4C7EF4(*a1, a2);
  }
  else
  {
    *(_DWORD *)unint64_t v5 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(v5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v5 + 8) = v6;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 8) = 0;
    sub_4C09FC(v5 + 32, a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 1152);
    *(void *)(v5 + 1168) = *(void *)(a2 + 1168);
    *(_OWORD *)(v5 + 1152) = v7;
    *(void *)(a2 + 1168) = 0;
    *(_OWORD *)(a2 + 1152) = 0u;
    *(_OWORD *)(v5 + 1176) = 0u;
    *(void *)(v5 + 1192) = 0;
    *(void *)(v5 + 1176) = *(void *)(a2 + 1176);
    *(void *)(v5 + 1184) = *(void *)(a2 + 1184);
    *(void *)(v5 + 1192) = *(void *)(a2 + 1192);
    *(void *)(a2 + 1192) = 0;
    *(_OWORD *)(a2 + 1176) = 0u;
    *(_DWORD *)(v5 + 1200) = *(_DWORD *)(a2 + 1200);
    *(_OWORD *)(v5 + 1216) = 0u;
    *(void *)(v5 + 1208) = 0;
    *(void *)(v5 + 1208) = *(void *)(a2 + 1208);
    *(void *)(v5 + 1216) = *(void *)(a2 + 1216);
    *(void *)(v5 + 1224) = *(void *)(a2 + 1224);
    *(void *)(a2 + 1224) = 0;
    *(_OWORD *)(a2 + 1208) = 0u;
    long long v8 = *(_OWORD *)(a2 + 1232);
    *(void *)(v5 + 1248) = *(void *)(a2 + 1248);
    *(_OWORD *)(v5 + 1232) = v8;
    *(void *)(a2 + 1232) = 0;
    *(_OWORD *)(a2 + 1240) = 0u;
    long long v9 = *(_OWORD *)(a2 + 1256);
    long long v10 = *(_OWORD *)(a2 + 1272);
    *(_OWORD *)(v5 + 1284) = *(_OWORD *)(a2 + 1284);
    *(_OWORD *)(v5 + 1256) = v9;
    *(_OWORD *)(v5 + 1272) = v10;
    long long v11 = *(_OWORD *)(a2 + 1304);
    *(void *)(v5 + 1320) = *(void *)(a2 + 1320);
    *(_OWORD *)(v5 + 1304) = v11;
    *(_OWORD *)(a2 + 1312) = 0u;
    *(void *)(a2 + 1304) = 0;
    *(void *)(v5 + 1344) = 0;
    *(_OWORD *)(v5 + 1328) = 0u;
    *(_OWORD *)(v5 + 1328) = *(_OWORD *)(a2 + 1328);
    *(void *)(v5 + 1344) = *(void *)(a2 + 1344);
    *(void *)(a2 + 1344) = 0;
    *(_OWORD *)(a2 + 1328) = 0u;
    long long v12 = *(_OWORD *)(a2 + 1352);
    *(_DWORD *)(v5 + 1368) = *(_DWORD *)(a2 + 1368);
    *(_OWORD *)(v5 + 1352) = v12;
    long long v13 = *(_OWORD *)(a2 + 1376);
    *(void *)(v5 + 1392) = *(void *)(a2 + 1392);
    *(_OWORD *)(v5 + 1376) = v13;
    *(void *)(a2 + 1392) = 0;
    *(void *)(a2 + 1384) = 0;
    *(void *)(a2 + 1376) = 0;
    uint64_t v14 = *(void *)(a2 + 1400);
    *(_DWORD *)(v5 + 1++*(_DWORD *)(result + 408) = *(_DWORD *)(a2 + 1408);
    *(void *)(v5 + 1400) = v14;
    long long v15 = *(_OWORD *)(a2 + 1416);
    *(void *)(v5 + 1432) = *(void *)(a2 + 1432);
    *(_OWORD *)(v5 + 1416) = v15;
    *(void *)(a2 + 1424) = 0;
    *(void *)(a2 + 1416) = 0;
    *(void *)(a2 + 1432) = 0;
    v4[1] = v5 + 1440;
  }
  return a1;
}

uint64_t sub_4C7EF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v25 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[1440 * v3];
  std::string __p = v7;
  int v22 = v8;
  int v24 = &v7[1440 * v6];
  *(_DWORD *)long long v8 = *(_DWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v8 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 8) = 0;
  sub_4C09FC((uint64_t)(v8 + 32), a2 + 32);
  *((_OWORD *)v8 + 72) = *(_OWORD *)(a2 + 1152);
  *((void *)v8 + 146) = *(void *)(a2 + 1168);
  *(void *)(a2 + 1152) = 0;
  *(_OWORD *)(a2 + 1160) = 0u;
  *(_OWORD *)(v8 + 1176) = *(_OWORD *)(a2 + 1176);
  *((void *)v8 + 149) = *(void *)(a2 + 1192);
  *(_OWORD *)(a2 + 1176) = 0u;
  *(void *)(a2 + 1192) = 0;
  *((_DWORD *)v8 + 300) = *(_DWORD *)(a2 + 1200);
  *((_OWORD *)v8 + 76) = 0u;
  *(_OWORD *)(v8 + 1208) = *(_OWORD *)(a2 + 1208);
  *((void *)v8 + 153) = *(void *)(a2 + 1224);
  *(void *)(a2 + 1224) = 0;
  *(_OWORD *)(a2 + 1208) = 0u;
  long long v9 = *(_OWORD *)(a2 + 1232);
  *((void *)v8 + 156) = *(void *)(a2 + 1248);
  *((_OWORD *)v8 + 77) = v9;
  *(void *)(a2 + 1248) = 0;
  *(_OWORD *)(a2 + 1232) = 0u;
  long long v10 = *(_OWORD *)(a2 + 1256);
  long long v11 = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(v8 + 1284) = *(_OWORD *)(a2 + 1284);
  *(_OWORD *)(v8 + 1256) = v10;
  *(_OWORD *)(v8 + 1272) = v11;
  long long v12 = *(_OWORD *)(a2 + 1304);
  *((void *)v8 + 165) = *(void *)(a2 + 1320);
  *(_OWORD *)(v8 + 1304) = v12;
  *(void *)(a2 + 1320) = 0;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(_OWORD *)(v8 + 1336) = 0u;
  *((_OWORD *)v8 + 83) = *(_OWORD *)(a2 + 1328);
  *((void *)v8 + 168) = *(void *)(a2 + 1344);
  *(_OWORD *)(a2 + 1328) = 0u;
  *(void *)(a2 + 1344) = 0;
  long long v13 = *(_OWORD *)(a2 + 1352);
  *((_DWORD *)v8 + 342) = *(_DWORD *)(a2 + 1368);
  *(_OWORD *)(v8 + 1352) = v13;
  long long v14 = *(_OWORD *)(a2 + 1376);
  *((void *)v8 + 174) = *(void *)(a2 + 1392);
  *((_OWORD *)v8 + 86) = v14;
  *(void *)(a2 + 1392) = 0;
  *(_OWORD *)(a2 + 1376) = 0u;
  uint64_t v15 = *(void *)(a2 + 1400);
  *((_DWORD *)v8 + 352) = *(_DWORD *)(a2 + 1408);
  *((void *)v8 + 175) = v15;
  long long v16 = *(_OWORD *)(a2 + 1416);
  *((void *)v8 + 179) = *(void *)(a2 + 1432);
  *(_OWORD *)(v8 + 1416) = v16;
  *(void *)(a2 + 1424) = 0;
  *(void *)(a2 + 1416) = 0;
  *(void *)(a2 + 1432) = 0;
  uint64_t v23 = v8 + 1440;
  sub_4C0798(a1, &__p);
  uint64_t v17 = a1[1];
  uint64_t v19 = v22;
  for (unint64_t i = v23; v23 != v19; unint64_t i = v23)
  {
    uint64_t v23 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v17;
}

void sub_4C819C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C81B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v17 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[1440 * v3];
  std::string __p = v7;
  long long v14 = v8;
  uint64_t v15 = v8;
  long long v16 = &v7[1440 * v6];
  *(_DWORD *)long long v8 = 50;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  sub_4BE498((uint64_t)(v8 + 32));
  v8[1152] = 0;
  v8[1199] = 0;
  *(void *)(v8 + 1175) = 0;
  *(_OWORD *)(v8 + 1183) = 0u;
  *((_DWORD *)v8 + 300) = 2;
  *(_OWORD *)(v8 + 1208) = 0u;
  *(_OWORD *)(v8 + 1224) = 0u;
  *(_OWORD *)(v8 + 1240) = 0u;
  *((_DWORD *)v8 + 314) = 12;
  *((_DWORD *)v8 + 316) = 0x7FFFFFFF;
  *(void *)(v8 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *((_OWORD *)v8 + 80) = 0u;
  *((_DWORD *)v8 + 324) = 0x7FFFFFFF;
  *(_OWORD *)(v8 + 1304) = 0u;
  *(_OWORD *)(v8 + 1320) = 0u;
  *(_OWORD *)(v8 + 1336) = 0u;
  *((_OWORD *)v8 + 86) = 0u;
  *((void *)v8 + 174) = 0;
  *((void *)v8 + 175) = -1;
  *((_DWORD *)v8 + 352) = 0x7FFFFFFF;
  *((void *)v8 + 179) = 0;
  *((void *)v8 + 177) = 0;
  *((void *)v8 + 178) = 0;
  *(_OWORD *)(v8 + 1352) = *(_OWORD *)a2;
  v8[1368] = *(unsigned char *)(a2 + 16);
  v15 += 1440;
  sub_4C0798(a1, &__p);
  uint64_t v9 = a1[1];
  long long v11 = v14;
  for (unint64_t i = v15; v15 != v11; unint64_t i = v15)
  {
    uint64_t v15 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_4C83AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C83C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C83E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FA4FA4FA4FA4FA5 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2D82D82D82D82DLL) {
    sub_2E00();
  }
  if (0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x9F49F49F49F49F4ALL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5)) >= 0x16C16C16C16C16) {
    unint64_t v6 = 0x2D82D82D82D82DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v16 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2D82D82D82D82DLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1440 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  std::string __p = v7;
  long long v13 = &v7[1440 * v3];
  uint64_t v15 = &v7[1440 * v6];
  sub_4C8540((uint64_t)v13, a2);
  long long v14 = v13 + 1440;
  sub_4C0798(a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v10 = (uint64_t)v13;
  for (unint64_t i = v14; v14 != (char *)v10; unint64_t i = v14)
  {
    long long v14 = i - 1440;
    sub_4BD604((uint64_t)(i - 1440));
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_4C852C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C8540(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_4BE9F4(a1 + 32, a2 + 32);
  unint64_t v5 = (unsigned char *)(a1 + 1152);
  if (*(char *)(a2 + 1175) < 0)
  {
    sub_4200(v5, *(void **)(a2 + 1152), *(void *)(a2 + 1160));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 1152);
    *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
    *(_OWORD *)unint64_t v5 = v6;
  }
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  sub_8A6F8((char *)(a1 + 1176), *(void *)(a2 + 1176), *(void *)(a2 + 1184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1184) - *(void *)(a2 + 1176)) >> 3));
  *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 1200);
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1216) = 0;
  sub_4BF330(a1 + 1208, *(void *)(a2 + 1208), *(void *)(a2 + 1216), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1216) - *(void *)(a2 + 1208)) >> 3));
  long long v7 = (unsigned char *)(a1 + 1232);
  if (*(char *)(a2 + 1255) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 1232), *(void *)(a2 + 1240));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 1232);
    *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
    *(_OWORD *)long long v7 = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 1256);
  long long v10 = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1284) = *(_OWORD *)(a2 + 1284);
  *(_OWORD *)(a1 + 1256) = v9;
  *(_OWORD *)(a1 + 1272) = v10;
  if (*(char *)(a2 + 1327) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1304), *(void **)(a2 + 1304), *(void *)(a2 + 1312));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 1304);
    *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
    *(_OWORD *)(a1 + 1304) = v11;
  }
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  sub_4BFFA4((unsigned char *)(a1 + 1328), *(void *)(a2 + 1328), *(void *)(a2 + 1336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1336) - *(void *)(a2 + 1328)) >> 4));
  long long v12 = *(_OWORD *)(a2 + 1352);
  *(_DWORD *)(a1 + 1368) = *(_DWORD *)(a2 + 1368);
  *(_OWORD *)(a1 + 1352) = v12;
  if (*(char *)(a2 + 1399) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1376), *(void **)(a2 + 1376), *(void *)(a2 + 1384));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 1376);
    *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
    *(_OWORD *)(a1 + 1376) = v13;
  }
  uint64_t v14 = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = v14;
  uint64_t v15 = (unsigned char *)(a1 + 1416);
  if (*(char *)(a2 + 1439) < 0)
  {
    sub_4200(v15, *(void **)(a2 + 1416), *(void *)(a2 + 1424));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 1416);
    *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
    *(_OWORD *)uint64_t v15 = v16;
  }
  return a1;
}

void sub_4C87AC(_Unwind_Exception *a1)
{
  if (v1[1399] < 0) {
    operator delete(*v7);
  }
  sub_28F14C(v6);
  if (v1[1327] < 0) {
    operator delete(*v5);
  }
  sub_4B1E10((uint64_t)(v1 + 1200));
  sub_1A668(v4);
  sub_4BD7E8(v3);
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4C8884(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = a3;
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[1];
  if (0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v9 - v10) >> 5) < a5)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = a5 + 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v10 - *a1) >> 5);
    if (v12 > 0x2D82D82D82D82DLL) {
      sub_2E00();
    }
    unint64_t v13 = 0x4FA4FA4FA4FA4FA5 * ((v9 - v11) >> 5);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x16C16C16C16C16) {
      unint64_t v14 = 0x2D82D82D82D82DLL;
    }
    else {
      unint64_t v14 = v12;
    }
    long long v36 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x2D82D82D82D82DLL) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(1440 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v25 = (uint64_t)&v15[32 * ((v5 - v11) >> 5)];
    std::string __p = v15;
    uint64_t v33 = v25;
    uint64_t v34 = v25;
    uint64_t v35 = &v15[1440 * v14];
    uint64_t v26 = 1440 * a5;
    uint64_t v27 = v25 + 1440 * a5;
    do
    {
      sub_4C8540(v25, (uint64_t)(v7 + 2));
      v25 += 1440;
      long long v7 = (void *)*v7;
      v26 -= 1440;
    }
    while (v26);
    uint64_t v34 = v27;
    uint64_t v5 = sub_4C8DF0(a1, &__p, v5);
    uint64_t v29 = v33;
    for (uint64_t i = v34; v34 != v29; uint64_t i = v34)
    {
      uint64_t v34 = i - 1440;
      sub_4BD604(i - 1440);
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  unint64_t v17 = a5 + 1;
  uint64_t v18 = a3;
  do
  {
    uint64_t v18 = (void *)*v18;
    --v17;
  }
  while (v17 > 1);
  uint64_t v19 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v10 - a2) >> 5);
  uint64_t v20 = a5;
  if (v19 < a5)
  {
    if ((uint64_t)(v10 - a2) < 1)
    {
      uint64_t v18 = a3;
      if (a3 != a4)
      {
LABEL_19:
        uint64_t v22 = 0;
        uint64_t v23 = v18;
        do
        {
          sub_4C8540(v10 + v22, (uint64_t)(v23 + 2));
          uint64_t v23 = (void *)*v23;
          v22 += 1440;
        }
        while (v23 != a4);
        uint64_t v24 = v10 + v22;
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v21 = v19 + 1;
      uint64_t v18 = a3;
      do
      {
        uint64_t v18 = (void *)*v18;
        --v21;
      }
      while (v21 > 1);
      if (v18 != a4) {
        goto LABEL_19;
      }
    }
    uint64_t v24 = a1[1];
LABEL_31:
    a1[1] = v24;
    uint64_t v20 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v10 - v5) >> 5);
  }
  if (v20 >= 1)
  {
    sub_4C8B88((uint64_t)a1, v5, v10, v5 + 1440 * a5);
    if (v18 != v7)
    {
      uint64_t v30 = v5;
      do
      {
        sub_4C91C8(v30, (uint64_t)(v7 + 2));
        long long v7 = (void *)*v7;
        v30 += 1440;
      }
      while (v7 != v18);
    }
  }
  return v5;
}

void sub_4C8B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4C8B48(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 1440)
    sub_4BD604(v2 - 1440 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_4C8B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4C8B88(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = 0x4FA4FA4FA4FA4FA5 * ((v7 - a4) >> 5);
  if (a2 + v7 - a4 >= a3)
  {
    *(void *)(result + 8) = v7;
    if (v7 == a4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v10 = a2 + 32 * ((v7 - a4) >> 5) + 32;
  uint64_t v11 = *(void *)(result + 8);
  do
  {
    *(_DWORD *)uint64_t v11 = *(_DWORD *)(v10 - 32);
    long long v12 = *(_OWORD *)(v10 - 24);
    *(void *)(v11 + 24) = *(void *)(v10 - 8);
    *(_OWORD *)(v11 + 8) = v12;
    *(_OWORD *)(v10 - 16) = 0u;
    *(void *)(v10 - 24) = 0;
    uint64_t result = sub_4C09FC(v11 + 32, v10);
    long long v13 = *(_OWORD *)(v10 + 1120);
    *(void *)(v11 + 1168) = *(void *)(v10 + 1136);
    *(_OWORD *)(v11 + 1152) = v13;
    *(void *)(v10 + 1136) = 0;
    *(_OWORD *)(v10 + 1120) = 0u;
    *(_OWORD *)(v11 + 1176) = 0u;
    *(void *)(v11 + 1192) = 0;
    *(void *)(v11 + 1176) = *(void *)(v10 + 1144);
    *(void *)(v11 + 1184) = *(void *)(v10 + 1152);
    *(void *)(v11 + 1192) = *(void *)(v10 + 1160);
    *(void *)(v10 + 1160) = 0;
    *(_OWORD *)(v10 + 1144) = 0u;
    *(_DWORD *)(v11 + 1200) = *(_DWORD *)(v10 + 1168);
    *(_OWORD *)(v11 + 1216) = 0u;
    *(void *)(v11 + 1208) = 0;
    *(void *)(v11 + 1208) = *(void *)(v10 + 1176);
    *(void *)(v11 + 1216) = *(void *)(v10 + 1184);
    *(void *)(v11 + 1224) = *(void *)(v10 + 1192);
    *(void *)(v10 + 1192) = 0;
    *(_OWORD *)(v10 + 1176) = 0u;
    long long v14 = *(_OWORD *)(v10 + 1200);
    *(void *)(v11 + 1248) = *(void *)(v10 + 1216);
    *(_OWORD *)(v11 + 1232) = v14;
    *(void *)(v10 + 1200) = 0;
    *(_OWORD *)(v10 + 1208) = 0u;
    long long v15 = *(_OWORD *)(v10 + 1224);
    long long v16 = *(_OWORD *)(v10 + 1240);
    *(_OWORD *)(v11 + 1284) = *(_OWORD *)(v10 + 1252);
    *(_OWORD *)(v11 + 1256) = v15;
    *(_OWORD *)(v11 + 1272) = v16;
    long long v17 = *(_OWORD *)(v10 + 1272);
    *(void *)(v11 + 1320) = *(void *)(v10 + 1288);
    *(_OWORD *)(v11 + 1304) = v17;
    *(_OWORD *)(v10 + 1280) = 0u;
    *(void *)(v10 + 1272) = 0;
    *(void *)(v11 + 1344) = 0;
    *(_OWORD *)(v11 + 1328) = 0u;
    *(_OWORD *)(v11 + 1328) = *(_OWORD *)(v10 + 1296);
    *(void *)(v11 + 1344) = *(void *)(v10 + 1312);
    *(void *)(v10 + 1312) = 0;
    *(_OWORD *)(v10 + 1296) = 0u;
    long long v18 = *(_OWORD *)(v10 + 1320);
    *(_DWORD *)(v11 + 1368) = *(_DWORD *)(v10 + 1336);
    *(_OWORD *)(v11 + 1352) = v18;
    long long v19 = *(_OWORD *)(v10 + 1344);
    *(void *)(v11 + 1392) = *(void *)(v10 + 1360);
    *(_OWORD *)(v11 + 1376) = v19;
    *(_OWORD *)(v10 + 1352) = 0u;
    *(void *)(v10 + 1344) = 0;
    uint64_t v20 = *(void *)(v10 + 1368);
    *(_DWORD *)(v11 + 1++*(_DWORD *)(result + 408) = *(_DWORD *)(v10 + 1376);
    *(void *)(v11 + 1400) = v20;
    long long v21 = *(_OWORD *)(v10 + 1384);
    *(void *)(v11 + 1432) = *(void *)(v10 + 1400);
    *(_OWORD *)(v11 + 1416) = v21;
    *(void *)(v10 + 1400) = 0;
    *(_OWORD *)(v10 + 1384) = 0u;
    v11 += 1440;
    unint64_t v22 = v10 + 1408;
    v10 += 1440;
  }
  while (v22 < a3);
  *(void *)(v6 + 8) = v11;
  if (v7 != a4)
  {
LABEL_7:
    uint64_t v23 = v7 - 1440;
    uint64_t v24 = 1440 * v8;
    uint64_t v25 = a2 - 1440;
    do
    {
      uint64_t result = sub_4C5BDC(v23, v25 + v24);
      v23 -= 1440;
      v24 -= 1440;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_4C8DF0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v6 + v9;
      uint64_t v11 = a3 + v9;
      *(_DWORD *)(v6 + v9 - 1440) = *(_DWORD *)(a3 + v9 - 1440);
      uint64_t v12 = v6 + v9 - 1432;
      uint64_t v13 = a3 + v9 - 1432;
      long long v14 = *(_OWORD *)v13;
      *(void *)(v12 + 16) = *(void *)(a3 + v9 - 1416);
      *(_OWORD *)uint64_t v12 = v14;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      sub_4C09FC(v6 + v9 - 1408, a3 + v9 - 1408);
      uint64_t v15 = v6 + v9 - 288;
      uint64_t v16 = a3 + v9 - 288;
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(a3 + v9 - 272);
      *(_OWORD *)uint64_t v15 = v17;
      *(void *)(v16 + 16) = 0;
      *(void *)(v11 - 280) = 0;
      long long v18 = (void *)(v6 + v9 - 264);
      *(void *)uint64_t v16 = 0;
      *long long v18 = 0;
      *(void *)(v10 - 256) = 0;
      *(void *)(v10 - 248) = 0;
      *(_OWORD *)long long v18 = *(_OWORD *)(a3 + v9 - 264);
      *(void *)(v10 - 248) = *(void *)(a3 + v9 - 248);
      *(void *)(v11 - 256) = 0;
      *(void *)(v11 - 248) = 0;
      LODWORD(v18) = *(_DWORD *)(a3 + v9 - 240);
      *(void *)(v11 - 264) = 0;
      *(void *)(v10 - 224) = 0;
      *(void *)(v10 - 216) = 0;
      *(void *)(v10 - 232) = 0;
      *(_OWORD *)(v10 - 232) = *(_OWORD *)(a3 + v9 - 232);
      *(_DWORD *)(v10 - 240) = v18;
      *(void *)(v10 - 216) = *(void *)(a3 + v9 - 216);
      *(void *)(v11 - 232) = 0;
      *(void *)(v11 - 224) = 0;
      *(void *)(v11 - 216) = 0;
      long long v19 = *(_OWORD *)(a3 + v9 - 208);
      *(void *)(v10 - 192) = *(void *)(a3 + v9 - 192);
      *(_OWORD *)(v10 - 208) = v19;
      *(void *)(v11 - 200) = 0;
      *(void *)(v11 - 192) = 0;
      *(void *)(v11 - 208) = 0;
      long long v20 = *(_OWORD *)(a3 + v9 - 184);
      long long v21 = *(_OWORD *)(a3 + v9 - 168);
      *(_OWORD *)(v10 - 156) = *(_OWORD *)(a3 + v9 - 156);
      *(_OWORD *)(v10 - 168) = v21;
      *(_OWORD *)(v10 - 184) = v20;
      long long v22 = *(_OWORD *)(a3 + v9 - 136);
      *(void *)(v10 - 120) = *(void *)(a3 + v9 - 120);
      *(_OWORD *)(v10 - 136) = v22;
      *(void *)(v11 - 128) = 0;
      *(void *)(v11 - 120) = 0;
      *(void *)(v11 - 136) = 0;
      *(void *)(v10 - 112) = 0;
      *(void *)(v10 - 104) = 0;
      *(void *)(v10 - 96) = 0;
      *(_OWORD *)(v10 - 112) = *(_OWORD *)(a3 + v9 - 112);
      *(void *)(v10 - 96) = *(void *)(a3 + v9 - 96);
      *(void *)(v11 - 112) = 0;
      *(void *)(v11 - 104) = 0;
      *(void *)(v11 - 96) = 0;
      long long v23 = *(_OWORD *)(a3 + v9 - 88);
      *(_DWORD *)(v10 - 72) = *(_DWORD *)(a3 + v9 - 72);
      *(_OWORD *)(v10 - 88) = v23;
      long long v24 = *(_OWORD *)(a3 + v9 - 64);
      *(void *)(v10 - 48) = *(void *)(a3 + v9 - 48);
      *(_OWORD *)(v10 - 64) = v24;
      *(void *)(v11 - 56) = 0;
      *(void *)(v11 - 48) = 0;
      uint64_t v25 = *(void *)(a3 + v9 - 40);
      LODWORD(v16) = *(_DWORD *)(a3 + v9 - 32);
      *(void *)(v11 - 64) = 0;
      *(_DWORD *)(v10 - 32) = v16;
      *(void *)(v10 - 40) = v25;
      long long v26 = *(_OWORD *)(a3 + v9 - 24);
      *(void *)(v10 - 8) = *(void *)(a3 + v9 - 8);
      *(_OWORD *)(v10 - 24) = v26;
      *(void *)(v11 - 24) = 0;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      v9 -= 1440;
    }
    while (a3 + v9 != v7);
    uint64_t v8 = v6 + v9;
  }
  a2[1] = v8;
  uint64_t v27 = a1[1];
  uint64_t v28 = a2[2];
  if (v27 != a3)
  {
    uint64_t v29 = a3 + 32;
    do
    {
      *(_DWORD *)uint64_t v28 = *(_DWORD *)(v29 - 32);
      long long v30 = *(_OWORD *)(v29 - 24);
      *(void *)(v28 + 24) = *(void *)(v29 - 8);
      *(_OWORD *)(v28 + 8) = v30;
      *(_OWORD *)(v29 - 16) = 0u;
      *(void *)(v29 - 24) = 0;
      sub_4C09FC(v28 + 32, v29);
      long long v31 = *(_OWORD *)(v29 + 1120);
      *(void *)(v28 + 1168) = *(void *)(v29 + 1136);
      *(_OWORD *)(v28 + 1152) = v31;
      *(void *)(v29 + 1136) = 0;
      *(_OWORD *)(v29 + 1120) = 0u;
      *(_OWORD *)(v28 + 1176) = 0u;
      *(void *)(v28 + 1192) = 0;
      *(void *)(v28 + 1176) = *(void *)(v29 + 1144);
      *(void *)(v28 + 1184) = *(void *)(v29 + 1152);
      *(void *)(v28 + 1192) = *(void *)(v29 + 1160);
      *(void *)(v29 + 1160) = 0;
      *(_OWORD *)(v29 + 1144) = 0u;
      *(_DWORD *)(v28 + 1200) = *(_DWORD *)(v29 + 1168);
      *(_OWORD *)(v28 + 1216) = 0u;
      *(void *)(v28 + 1208) = 0;
      *(void *)(v28 + 1208) = *(void *)(v29 + 1176);
      *(void *)(v28 + 1216) = *(void *)(v29 + 1184);
      *(void *)(v28 + 1224) = *(void *)(v29 + 1192);
      *(void *)(v29 + 1192) = 0;
      *(_OWORD *)(v29 + 1176) = 0u;
      long long v32 = *(_OWORD *)(v29 + 1200);
      *(void *)(v28 + 1248) = *(void *)(v29 + 1216);
      *(_OWORD *)(v28 + 1232) = v32;
      *(void *)(v29 + 1200) = 0;
      *(_OWORD *)(v29 + 1208) = 0u;
      long long v33 = *(_OWORD *)(v29 + 1224);
      long long v34 = *(_OWORD *)(v29 + 1240);
      *(_OWORD *)(v28 + 1284) = *(_OWORD *)(v29 + 1252);
      *(_OWORD *)(v28 + 1256) = v33;
      *(_OWORD *)(v28 + 1272) = v34;
      long long v35 = *(_OWORD *)(v29 + 1272);
      *(void *)(v28 + 1320) = *(void *)(v29 + 1288);
      *(_OWORD *)(v28 + 1304) = v35;
      *(_OWORD *)(v29 + 1280) = 0u;
      *(void *)(v29 + 1272) = 0;
      *(void *)(v28 + 1344) = 0;
      *(_OWORD *)(v28 + 1328) = 0u;
      *(_OWORD *)(v28 + 1328) = *(_OWORD *)(v29 + 1296);
      *(void *)(v28 + 1344) = *(void *)(v29 + 1312);
      *(void *)(v29 + 1312) = 0;
      *(_OWORD *)(v29 + 1296) = 0u;
      long long v36 = *(_OWORD *)(v29 + 1320);
      *(_DWORD *)(v28 + 1368) = *(_DWORD *)(v29 + 1336);
      *(_OWORD *)(v28 + 1352) = v36;
      long long v37 = *(_OWORD *)(v29 + 1344);
      *(void *)(v28 + 1392) = *(void *)(v29 + 1360);
      *(_OWORD *)(v28 + 1376) = v37;
      *(_OWORD *)(v29 + 1352) = 0u;
      *(void *)(v29 + 1344) = 0;
      uint64_t v38 = *(void *)(v29 + 1368);
      *(_DWORD *)(v28 + 1++*(_DWORD *)(result + 408) = *(_DWORD *)(v29 + 1376);
      *(void *)(v28 + 1400) = v38;
      long long v39 = *(_OWORD *)(v29 + 1384);
      *(void *)(v28 + 1432) = *(void *)(v29 + 1400);
      *(_OWORD *)(v28 + 1416) = v39;
      *(void *)(v29 + 1400) = 0;
      *(_OWORD *)(v29 + 1384) = 0u;
      v28 += 1440;
      uint64_t v40 = v29 + 1408;
      v29 += 1440;
    }
    while (v40 != v27);
    uint64_t v8 = a2[1];
  }
  a2[2] = v28;
  uint64_t v41 = *a1;
  *a1 = v8;
  a2[1] = v41;
  uint64_t v42 = a1[1];
  a1[1] = a2[2];
  a2[2] = v42;
  uint64_t v43 = a1[2];
  a1[2] = a2[3];
  a2[3] = v43;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_4C91C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 32;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 32;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  sub_4C9334(v5, v4);
  std::string::operator=((std::string *)(a1 + 1152), (const std::string *)(a2 + 1152));
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 1200);
  }
  else
  {
    sub_69208(a1 + 1176, *(std::string **)(a2 + 1176), *(std::string **)(a2 + 1184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1184) - *(void *)(a2 + 1176)) >> 3));
    *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 1200);
    sub_4BD0C8((uint64_t *)(a1 + 1208), *(void *)(a2 + 1208), *(void *)(a2 + 1216), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1216) - *(void *)(a2 + 1208)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 1232));
  long long v6 = *(_OWORD *)(a2 + 1284);
  long long v7 = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1272) = v7;
  *(_OWORD *)(a1 + 1284) = v6;
  std::string::operator=((std::string *)(a1 + 1304), (const std::string *)(a2 + 1304));
  if (a1 != a2) {
    sub_4C02B4((void **)(a1 + 1328), *(long long **)(a2 + 1328), *(long long **)(a2 + 1336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1336) - *(void *)(a2 + 1328)) >> 4));
  }
  long long v8 = *(_OWORD *)(a2 + 1352);
  *(unsigned char *)(a1 + 1368) = *(unsigned char *)(a2 + 1368);
  *(_OWORD *)(a1 + 1352) = v8;
  std::string::operator=((std::string *)(a1 + 1376), (const std::string *)(a2 + 1376));
  int v9 = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = v9;
  std::string::operator=((std::string *)(a1 + 1416), (const std::string *)(a2 + 1416));
  return a1;
}

uint64_t sub_4C9334(uint64_t a1, uint64_t a2)
{
  sub_34ADE4(a1, a2);
  if (*(unsigned char *)(a2 + 432))
  {
    uint64_t v4 = *(void *)(a2 + 424);
    if (!*(unsigned char *)(a1 + 432)) {
      *(unsigned char *)(a1 + 432) = 1;
    }
    *(void *)(a1 + 424) = v4;
  }
  else if (*(unsigned char *)(a1 + 432))
  {
    *(unsigned char *)(a1 + 432) = 0;
  }
  std::string::operator=((std::string *)(a1 + 440), (const std::string *)(a2 + 440));
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 464));
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  std::string::operator=((std::string *)(a1 + 536), (const std::string *)(a2 + 536));
  std::string::operator=((std::string *)(a1 + 560), (const std::string *)(a2 + 560));
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  char v5 = *(unsigned char *)(a2 + 620);
  if (v5)
  {
    *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 620) = v5;
  if (*(unsigned char *)(a2 + 632))
  {
    uint64_t v6 = *(void *)(a2 + 624);
    if (!*(unsigned char *)(a1 + 632)) {
      *(unsigned char *)(a1 + 632) = 1;
    }
    *(void *)(a1 + 624) = v6;
  }
  else if (*(unsigned char *)(a1 + 632))
  {
    *(unsigned char *)(a1 + 632) = 0;
  }
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  *(_WORD *)(a1 + 672) = *(_WORD *)(a2 + 672);
  uint64_t v7 = a1 + 680;
  if (*(unsigned char *)(a2 + 1112))
  {
    uint64_t v8 = a2 + 680;
    if (!*(unsigned char *)(a1 + 1112))
    {
      sub_4BEB84(v7, v8);
      *(unsigned char *)(a1 + 1112) = 1;
      return a1;
    }
    sub_4C94A0(v7, v8);
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1112)) {
      return a1;
    }
    sub_3A6CB8(v7);
    *(unsigned char *)(a1 + 1112) = 0;
    return a1;
  }
}

uint64_t sub_4C94A0(uint64_t a1, uint64_t a2)
{
  sub_34D568(a1, a2);
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 376));
  char v4 = *(unsigned char *)(a2 + 401);
  if (v4)
  {
    *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 401) = v4;
  char v5 = *(unsigned char *)(a2 + 403);
  if (v5)
  {
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 403) = v5;
  if (a1 != a2) {
    sub_4C9594(a1 + 408, *(void *)(a2 + 408), *(void *)(a2 + 416), (uint64_t)(*(void *)(a2 + 416) - *(void *)(a2 + 408)) >> 8);
  }
  return a1;
}

uint64_t sub_4C9594(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = (void *)result;
  uint64_t v8 = result + 16;
  int v9 = *(char **)result;
  if (a4 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 8)
  {
    sub_4C2590((void **)result);
    if (HIBYTE(a4)) {
      goto LABEL_30;
    }
    uint64_t v10 = v7[2] - *v7;
    uint64_t v11 = v10 >> 7;
    if (v10 >> 7 <= a4) {
      uint64_t v11 = a4;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFF00;
    unint64_t v13 = 0xFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (HIBYTE(v13)) {
LABEL_30:
    }
      sub_2E00();
    unint64_t v14 = v13 << 8;
    uint64_t v15 = (char *)operator new(v13 << 8);
    void *v7 = v15;
    v7[1] = v15;
    v7[2] = &v15[v14];
    uint64_t result = sub_4BEF18(v8, v6, a3, (uint64_t)v15);
LABEL_14:
    v7[1] = result;
    return result;
  }
  uint64_t v16 = *(void *)(result + 8);
  unint64_t v17 = (v16 - (uint64_t)v9) >> 8;
  if (v17 < a4)
  {
    uint64_t v18 = a2 + (v17 << 8);
    if ((char *)v16 != v9)
    {
      do
      {
        sub_34D8F0((uint64_t)v9, v6);
        std::string::operator=((std::string *)(v9 + 184), (const std::string *)(v6 + 184));
        std::string::operator=((std::string *)(v9 + 208), (const std::string *)(v6 + 208));
        std::string::operator=((std::string *)(v9 + 232), (const std::string *)(v6 + 232));
        v6 += 256;
        v9 += 256;
      }
      while (v6 != v18);
      int v9 = (char *)v7[1];
    }
    uint64_t result = sub_4BEF18(v8, v18, a3, (uint64_t)v9);
    goto LABEL_14;
  }
  if (a2 == a3)
  {
    long long v19 = *(char **)result;
  }
  else
  {
    long long v19 = *(char **)result;
    do
    {
      sub_34D8F0((uint64_t)v9, v6);
      std::string::operator=((std::string *)(v9 + 184), (const std::string *)(v6 + 184));
      std::string::operator=((std::string *)(v9 + 208), (const std::string *)(v6 + 208));
      uint64_t result = (uint64_t)std::string::operator=((std::string *)(v9 + 232), (const std::string *)(v6 + 232));
      v19 += 256;
      v6 += 256;
      v9 += 256;
    }
    while (v6 != a3);
    uint64_t v16 = v7[1];
  }
  while ((char *)v16 != v19)
  {
    if (*(char *)(v16 - 1) < 0)
    {
      operator delete(*(void **)(v16 - 24));
      if (*(char *)(v16 - 25) < 0)
      {
LABEL_27:
        operator delete(*(void **)(v16 - 48));
        if ((*(char *)(v16 - 49) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_28;
      }
    }
    else if (*(char *)(v16 - 25) < 0)
    {
      goto LABEL_27;
    }
    if ((*(char *)(v16 - 49) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_28:
    operator delete(*(void **)(v16 - 72));
LABEL_20:
    v16 -= 256;
    uint64_t result = sub_30328C(v16);
  }
  v7[1] = v19;
  return result;
}

void sub_4C97C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4C97C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_4C97D0(void *a1, int *a2)
{
  sub_4C987C((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = sub_4BDEBC(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    char v5 = __p;
    std::string __p = 0;
    if (v5)
    {
      if (v8) {
        sub_4BD604((uint64_t)v5 + 16);
      }
      operator delete(v5);
    }
  }
  return v3;
}

void sub_4C984C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12) {
      sub_4BD604((uint64_t)__p + 16);
    }
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4C987C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x5B0uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  int v8 = *a2;
  memset(&__p, 0, sizeof(__p));
  sub_4BE2DC((uint64_t)v7 + 16, v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_4BE02C(a1 + 24, (int *)v7 + 4);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_4C991C(_Unwind_Exception *a1)
{
  sub_4BDFE4(v1);
  _Unwind_Resume(a1);
}

void sub_4C9930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BDFE4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_4C9954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    unint64_t v6 = *(void *)(a3 + 8);
    if (v6 >= *(void *)(a3 + 16))
    {
      int v8 = sub_1D740((char **)a3, a1);
      *(void *)(a3 + 8) = v8;
      uint64_t v9 = v4 + 24;
      if (v4 + 24 != a2)
      {
LABEL_9:
        uint64_t v10 = v4;
        do
        {
          unint64_t v11 = *(unsigned __int8 *)(v10 + 47);
          unint64_t v12 = *(void *)(v10 + 32);
          uint64_t v10 = v9;
          uint64_t v13 = *(unsigned __int8 *)(v4 + 23);
          if ((v13 & 0x80u) == 0) {
            uint64_t v14 = *(unsigned __int8 *)(v4 + 23);
          }
          else {
            uint64_t v14 = *(void *)(v4 + 8);
          }
          int v15 = (char)v11;
          if ((v11 & 0x80u) != 0) {
            unint64_t v11 = v12;
          }
          if (v14 != v11) {
            goto LABEL_29;
          }
          if (v15 >= 0) {
            uint64_t v16 = (unsigned __int8 *)v10;
          }
          else {
            uint64_t v16 = *(unsigned __int8 **)v10;
          }
          if ((v13 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v4, v16, *(void *)(v4 + 8))) {
              goto LABEL_29;
            }
          }
          else if (*(unsigned char *)(v4 + 23))
          {
            uint64_t v17 = 0;
            while (*(unsigned __int8 *)(v4 + v17) == v16[v17])
            {
              if (v13 == ++v17) {
                goto LABEL_12;
              }
            }
LABEL_29:
            if ((unint64_t)v8 >= *(void *)(a3 + 16))
            {
              int v8 = sub_1D740((char **)a3, v10);
            }
            else
            {
              if (v15 < 0)
              {
                sub_4200(v8, *(void **)v10, v12);
              }
              else
              {
                long long v18 = *(_OWORD *)v10;
                *((void *)v8 + 2) = *(void *)(v10 + 16);
                *(_OWORD *)int v8 = v18;
              }
              v8 += 24;
              *(void *)(a3 + 8) = v8;
            }
            *(void *)(a3 + 8) = v8;
            uint64_t v4 = v10;
          }
LABEL_12:
          uint64_t v9 = v10 + 24;
        }
        while (v10 + 24 != a2);
      }
    }
    else
    {
      if (*(char *)(a1 + 23) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 8), *(void **)a1, *(void *)(a1 + 8));
      }
      else
      {
        long long v7 = *(_OWORD *)a1;
        *(void *)(v6 + 16) = *(void *)(a1 + 16);
        *(_OWORD *)unint64_t v6 = v7;
      }
      int v8 = (char *)(v6 + 24);
      *(void *)(a3 + 8) = v8;
      *(void *)(a3 + 8) = v8;
      uint64_t v9 = v4 + 24;
      if (v4 + 24 != a2) {
        goto LABEL_9;
      }
    }
    return a2;
  }
  return v4;
}

void sub_4C9AFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4C9B04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4C9B0C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  uint64_t v8 = a3[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v7 == v8)
  {
    uint64_t v10 = *(unsigned __int8 **)a3;
    if (v9 >= 0) {
      uint64_t v10 = a3;
    }
    if ((a2[23] & 0x80) != 0)
    {
      uint64_t v13 = *(void **)a2;
      if (!memcmp(*(const void **)a2, v10, v6)) {
        return;
      }
LABEL_20:
      sub_4200(v14, v13, v6);
      if ((a3[23] & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
    if (!a2[23]) {
      return;
    }
    unint64_t v11 = a2;
    uint64_t v12 = a2[23];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        return;
      }
    }
  }
  if ((a2[23] & 0x80) != 0)
  {
    uint64_t v13 = *(void **)a2;
    goto LABEL_20;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  uint64_t v15 = *((void *)a2 + 2);
  if ((v9 & 0x80) == 0)
  {
LABEL_17:
    long long __p = *(_OWORD *)a3;
    uint64_t v17 = *((void *)a3 + 2);
    goto LABEL_22;
  }
LABEL_21:
  sub_4200(&__p, *(void **)a3, *((void *)a3 + 1));
LABEL_22:
  **(unsigned char **)a1 |= sub_4C9CD8(*(void *)(v5 + 1608), *(void *)(v5 + 1616), (unsigned __int8 **)v14) == *(void *)(v5 + 1616);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    if (SHIBYTE(v15) < 0) {
LABEL_26:
    }
      operator delete(v14[0]);
  }
  else if (SHIBYTE(v15) < 0)
  {
    goto LABEL_26;
  }
}

void sub_4C9CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4C9CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4C9CD8(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 == a2) {
    return v3;
  }
  char v5 = *((unsigned char *)a3 + 23);
  if (v5 >= 0) {
    size_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = a3[1];
  }
  if (v5 >= 0) {
    uint64_t v7 = (unsigned __int8 *)a3;
  }
  else {
    uint64_t v7 = *a3;
  }
  int v8 = *((char *)a3 + 47);
  if (v8 >= 0) {
    int v9 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 47);
  }
  else {
    int v9 = a3[4];
  }
  uint64_t v12 = a3[3];
  uint64_t v10 = (unsigned __int8 *)(a3 + 3);
  unint64_t v11 = v12;
  if (v8 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v11;
  }
  do
  {
    uint64_t v14 = *(unsigned __int8 *)(v3 + 23);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v15 = *(unsigned __int8 **)(v3 + 8);
    }
    if (v15 != v6) {
      goto LABEL_15;
    }
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
        goto LABEL_15;
      }
    }
    else if (*(unsigned char *)(v3 + 23))
    {
      uint64_t v16 = 0;
      while (*(unsigned __int8 *)(v3 + v16) == v7[v16])
      {
        if (v14 == ++v16) {
          goto LABEL_27;
        }
      }
      goto LABEL_15;
    }
LABEL_27:
    uint64_t v17 = *(unsigned __int8 *)(v3 + 47);
    if ((v17 & 0x80u) == 0) {
      long long v18 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 47);
    }
    else {
      long long v18 = *(unsigned __int8 **)(v3 + 32);
    }
    if (v18 == v9)
    {
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v3 + 24), v13, *(void *)(v3 + 32))) {
          return v3;
        }
      }
      else
      {
        if (!*(unsigned char *)(v3 + 47)) {
          return v3;
        }
        uint64_t v19 = 0;
        while (*(unsigned __int8 *)(v3 + v19 + 24) == v13[v19])
        {
          if (v17 == ++v19) {
            return v3;
          }
        }
      }
    }
LABEL_15:
    v3 += 48;
  }
  while (v3 != a2);
  return a2;
}

void *sub_4C9E28(void *a1, std::string *a2)
{
  sub_4C9ED4((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t v3 = sub_4BDEBC(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    char v5 = __p;
    long long __p = 0;
    if (v5)
    {
      if (v8) {
        sub_4BD604((uint64_t)v5 + 16);
      }
      operator delete(v5);
    }
  }
  return v3;
}

void sub_4C9EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12) {
      sub_4BD604((uint64_t)__p + 16);
    }
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4C9ED4@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x5B0uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  sub_4C9FB8((uint64_t)v7 + 16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_4BE02C(a1 + 24, (int *)v7 + 4);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_4C9F80(_Unwind_Exception *a1)
{
  sub_4BDFE4(v1);
  _Unwind_Resume(a1);
}

void sub_4C9F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4BDFE4(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_4C9FB8(uint64_t a1, const std::string *a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1400) = -1;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 408) = 0x7FFFFFFF;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1424) = 0;
  std::string::operator=((std::string *)(a1 + 1376), a2);
  return a1;
}

void sub_4CA0CC(_Unwind_Exception *a1)
{
  if (v1[1439] < 0)
  {
    operator delete(*v9);
    if ((v1[1399] & 0x80000000) == 0)
    {
LABEL_3:
      sub_28F14C(v5);
      if ((v1[1327] & 0x80000000) == 0)
      {
LABEL_5:
        sub_4B1E10(v4);
        sub_1A668(v3);
        sub_4BD7E8(v2);
        if (v1[31] < 0) {
          operator delete(*v7);
        }
        _Unwind_Resume(a1);
      }
LABEL_4:
      operator delete(*v8);
      goto LABEL_5;
    }
  }
  else if ((v1[1399] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v6);
  sub_28F14C(v5);
  if ((v1[1327] & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t *sub_4CA15C(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result == v3)
  {
LABEL_10:
    uint64_t v7 = v1[1];
    if (v2 == v7) {
      return result;
    }
    goto LABEL_15;
  }
  do
  {
    uint64_t v4 = v2 + 1440;
    if (v2 + 1440 == v3)
    {
      uint64_t v2 = v3;
      goto LABEL_10;
    }
    uint64_t result = (uint64_t *)sub_4BF7F0(v2, v2 + 1440);
    v2 += 1440;
  }
  while (!result);
  uint64_t v5 = v4 + 1440;
  uint64_t v6 = v4 - 1440;
  while (v5 != v3)
  {
    uint64_t result = (uint64_t *)sub_4BF7F0(v6, v5);
    if ((result & 1) == 0)
    {
      v6 += 1440;
      uint64_t result = (uint64_t *)sub_4C5BDC(v6, v5);
    }
    v5 += 1440;
  }
  uint64_t v2 = v6 + 1440;
  uint64_t v7 = v1[1];
  if (v2 != v7)
  {
LABEL_15:
    while (v7 != v2)
    {
      v7 -= 1440;
      uint64_t result = (uint64_t *)sub_4BD604(v7);
    }
    v1[1] = v2;
  }
  return result;
}

void sub_4CA294(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (*(char *)(v4 + 31) < 0)
      {
        sub_4200(__p, *(void **)(v4 + 8), *(void *)(v4 + 16));
      }
      else
      {
        long long v7 = *(_OWORD *)(v4 + 8);
        uint64_t v10 = *(void *)(v4 + 24);
        *(_OWORD *)std::string __p = v7;
      }
      uint64_t v8 = sub_8B3D0((void ***)a2, v6, (__n128 *)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v8 + 24;
      v4 += 168;
    }
    while (v4 != v5);
  }
}

void sub_4CA370(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_4CA388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_4CA3AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  uint64_t v8 = a3[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v7 == v8)
  {
    uint64_t v10 = *(unsigned __int8 **)a3;
    if (v9 >= 0) {
      uint64_t v10 = a3;
    }
    if ((a2[23] & 0x80) != 0)
    {
      uint64_t v13 = *(void **)a2;
      if (!memcmp(*(const void **)a2, v10, v6)) {
        return;
      }
LABEL_20:
      sub_4200(v14, v13, v6);
      if ((a3[23] & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
    if (!a2[23]) {
      return;
    }
    unint64_t v11 = a2;
    uint64_t v12 = a2[23];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        return;
      }
    }
  }
  if ((a2[23] & 0x80) != 0)
  {
    uint64_t v13 = *(void **)a2;
    goto LABEL_20;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  uint64_t v15 = *((void *)a2 + 2);
  if ((v9 & 0x80) == 0)
  {
LABEL_17:
    long long __p = *(_OWORD *)a3;
    uint64_t v17 = *((void *)a3 + 2);
    goto LABEL_22;
  }
LABEL_21:
  sub_4200(&__p, *(void **)a3, *((void *)a3 + 1));
LABEL_22:
  **(unsigned char **)a1 |= sub_4C9CD8(*(void *)(v5 + 1608), *(void *)(v5 + 1616), (unsigned __int8 **)v14) == *(void *)(v5 + 1616);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    if (SHIBYTE(v15) < 0) {
LABEL_26:
    }
      operator delete(v14[0]);
  }
  else if (SHIBYTE(v15) < 0)
  {
    goto LABEL_26;
  }
}

void sub_4CA548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4CA564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4CA578(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (*(char *)(v4 + 31) < 0)
      {
        sub_4200(__p, *(void **)(v4 + 8), *(void *)(v4 + 16));
      }
      else
      {
        long long v7 = *(_OWORD *)(v4 + 8);
        uint64_t v10 = *(void *)(v4 + 24);
        *(_OWORD *)long long __p = v7;
      }
      uint64_t v8 = sub_8B3D0((void ***)a2, v6, (__n128 *)__p);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v8 + 24;
      v4 += 168;
    }
    while (v4 != v5);
  }
}

void sub_4CA654(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_4CA66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_4CA690(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  uint64_t v8 = a3[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v7 == v8)
  {
    uint64_t v10 = *(unsigned __int8 **)a3;
    if (v9 >= 0) {
      uint64_t v10 = a3;
    }
    if ((a2[23] & 0x80) != 0)
    {
      uint64_t v13 = *(void **)a2;
      if (!memcmp(*(const void **)a2, v10, v6)) {
        return;
      }
LABEL_20:
      sub_4200(v14, v13, v6);
      if ((a3[23] & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
    if (!a2[23]) {
      return;
    }
    unint64_t v11 = a2;
    uint64_t v12 = a2[23];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        return;
      }
    }
  }
  if ((a2[23] & 0x80) != 0)
  {
    uint64_t v13 = *(void **)a2;
    goto LABEL_20;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  uint64_t v15 = *((void *)a2 + 2);
  if ((v9 & 0x80) == 0)
  {
LABEL_17:
    long long __p = *(_OWORD *)a3;
    uint64_t v17 = *((void *)a3 + 2);
    goto LABEL_22;
  }
LABEL_21:
  sub_4200(&__p, *(void **)a3, *((void *)a3 + 1));
LABEL_22:
  **(unsigned char **)a1 |= sub_4C9CD8(*(void *)(v5 + 1608), *(void *)(v5 + 1616), (unsigned __int8 **)v14) == *(void *)(v5 + 1616);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)__p);
    if (SHIBYTE(v15) < 0) {
LABEL_26:
    }
      operator delete(v14[0]);
  }
  else if (SHIBYTE(v15) < 0)
  {
    goto LABEL_26;
  }
}

void sub_4CA82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4CA848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4CA870(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t sub_4CA884()
{
  *(void *)(v0 + 16) = v1;
  return v1;
}

uint64_t sub_4CA890()
{
  uint64_t result = *v2;
  *(void *)(v0 + 16) = v1;
  return result;
}

double sub_4CA89C()
{
  byte_2558F37 = 1;
  word_2558F20 = 65;
  byte_2558F4F = 1;
  word_2558F38 = 65;
  strcpy(&byte_2558F67, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2558F50, "\x1B\\toi=lhp\\"");
  byte_2558F7F = 11;
  qword_2558F80 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_2558F88 = xmmword_20B9250;
  strcpy((char *)qword_2558F80, "\x1B\\toi=x-sampa-internal\\"");
  byte_2558FAF = 13;
  strcpy((char *)&qword_2558F98, "\x1B\\tn=address\\"");
  strcpy(&byte_2558FC7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2558FB0, "\x1B\\tn=nav\\"");
  byte_2558FDF = 12;
  byte_2558FF7 = 7;
  strcpy((char *)&dword_2558FE0, "\x1B\\lang=");
  byte_255900F = 1;
  word_2558FF8 = 92;
  byte_2559027 = 4;
  strcpy((char *)&qword_2559010, "DEV:");
  byte_255903F = 8;
  strcpy((char *)&qword_2559028, "Continue");
  byte_2559057 = 11;
  strcpy((char *)&qword_2559040, "Start_Route");
  byte_255906F = 14;
  strcpy((char *)&qword_2559058, "Continue_Route");
  byte_2559087 = 12;
  strcpy((char *)&qword_2559070, "Resume_Route");
  byte_255909F = 18;
  strcpy((char *)&xmmword_2559088, "Start_Route_U_Turn");
  byte_25590B7 = 7;
  strcpy((char *)&dword_25590A0, "_U_Turn");
  qword_25590C8 = 0x1300000000000000;
  qmemcpy(&unk_25590D0, "Continue_Route", 14);
  dword_25590C0 = 1702131055;
  qword_25590B8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25590C4 + 3) = 1852994900;
  dword_25590C4 = 1415533919;
  qword_25590E0 = 0x1500000000000000;
  strcpy(byte_25590E8, "Left_Turn");
  unk_25590DE = 1415533919;
  *(_DWORD *)((char *)&qword_25590E0 + 1) = 1852994900;
  strcpy(&byte_25590FF, "\tRight_Turn");
  strcpy(&byte_2559117, "\nLeft_Turn_At_End");
  byte_255912F = 16;
  byte_2559147 = 17;
  strcpy((char *)&xmmword_2559130, "Right_Turn_At_End");
  byte_255915F = 15;
  strcpy((char *)&qword_2559148, "Sharp_Left_Turn");
  byte_2559177 = 16;
  strcpy((char *)&xmmword_2559160, "Sharp_Right_Turn");
  byte_255918F = 16;
  strcpy((char *)&xmmword_2559178, "Slight_Left_Turn");
  byte_25591A7 = 17;
  strcpy((char *)&xmmword_2559190, "Slight_Right_Turn");
  strcpy(&byte_25591BF, "\tKeep_Right");
  strcpy((char *)&qword_25591A8, "Keep_Left");
  strcpy(&byte_25591D7, "\nU_Turn");
  byte_25591EF = 6;
  byte_2559207 = 14;
  strcpy((char *)&qword_25591F0, "Walking_U_Turn");
  byte_255921F = 20;
  strcpy((char *)&xmmword_2559208, "U_Turn_When_Possible");
  byte_2559237 = 20;
  strcpy((char *)&xmmword_2559220, "U_Turn_At_Roundabout");
  byte_255924F = 11;
  strcpy((char *)&qword_2559238, "Enter_Ferry");
  strcpy(&byte_2559267, "\nChange_Ferry");
  strcpy((char *)&qword_2559250, "Exit_Ferry");
  strcpy((char *)&xmmword_2559280, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2559298, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25592B0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25592C8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25592E0, "End_Of_Navigation");
  strcpy((char *)&qword_25592F8, "Destination");
  strcpy((char *)&xmmword_2559310, "Destination_On_left");
  strcpy((char *)&xmmword_2559328, "Destination_On_Right");
  strcpy((char *)&xmmword_2559370, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25593B8, "Next_Stop_On_Right");
  byte_255927F = 12;
  byte_2559297 = 21;
  byte_25592AF = 20;
  strcpy((char *)&xmmword_25593E8, "Waypoint_Stop_On_Left");
  byte_25592C7 = 22;
  byte_25592DF = 17;
  byte_25592F7 = 17;
  byte_255930F = 11;
  byte_2559327 = 19;
  byte_255933F = 20;
  strcpy(&byte_2559357, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2559340, "First_Stop");
  byte_255936F = 18;
  byte_2559387 = 19;
  strcpy(&byte_255939F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25593D0, "Waypoint_Stop");
  strcpy((char *)&xmmword_2559400, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2559418, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2559388, "Next_Stop");
  byte_25593B7 = 17;
  byte_25593CF = 18;
  byte_25593E7 = 13;
  byte_25593FF = 21;
  byte_2559417 = 22;
  byte_255942F = 11;
  byte_2559447 = 16;
  strcpy((char *)&xmmword_2559430, "Enter_Roundabout");
  qword_2559448 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_2559450 = xmmword_20B91C0;
  strcpy((char *)qword_2559448, "Walking_Enter_Roundabout");
  byte_2559477 = 16;
  strcpy((char *)&xmmword_2559460, "Leave_Roundabout");
  byte_255948F = 21;
  strcpy((char *)&xmmword_2559478, "Roundabout_First_Exit");
  byte_25594A7 = 22;
  strcpy((char *)&xmmword_2559490, "Roundabout_Second_Exit");
  byte_25594BF = 21;
  strcpy((char *)&xmmword_25594A8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25594C0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25594D6) = 22;
  byte_25594EF = 21;
  strcpy((char *)&xmmword_25594D8, "Roundabout_Fifth_Exit");
  byte_2559507 = 21;
  strcpy((char *)&xmmword_25594F0, "Roundabout_Sixth_Exit");
  qword_2559508 = (uint64_t)operator new(0x19uLL);
  xmmword_2559510 = xmmword_20B9250;
  strcpy((char *)qword_2559508, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2559520, "Roundabout_Eighth_Exit");
  HIBYTE(word_2559536) = 22;
  byte_255954F = 21;
  strcpy((char *)&xmmword_2559538, "Roundabout_Ninth_Exit");
  byte_2559567 = 21;
  strcpy((char *)&xmmword_2559550, "Roundabout_Tenth_Exit");
  qword_2559568 = (uint64_t)operator new(0x20uLL);
  xmmword_2559570 = xmmword_20B91C0;
  strcpy((char *)qword_2559568, "Roundabout_Eleventh_Exit");
  qword_2559580 = (uint64_t)operator new(0x19uLL);
  unk_2559588 = xmmword_20B9250;
  strcpy((char *)qword_2559580, "Roundabout_Twelfth_Exit");
  qword_2559598 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25595A0 = xmmword_20B5EB0;
  strcpy((char *)qword_2559598, "Roundabout_Thirteenth_Exit");
  qword_25595B0 = (uint64_t)operator new(0x20uLL);
  unk_25595B8 = xmmword_20B5EB0;
  strcpy((char *)qword_25595B0, "Roundabout_Fourteenth_Exit");
  qword_25595C8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25595D0 = xmmword_20B8870;
  strcpy((char *)qword_25595C8, "Roundabout_Fifteenth_Exit");
  qword_25595E0 = (uint64_t)operator new(0x20uLL);
  unk_25595E8 = xmmword_20B8870;
  strcpy((char *)qword_25595E0, "Roundabout_Sixteenth_Exit");
  qword_25595F8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_2559600 = xmmword_20B91A0;
  strcpy((char *)qword_25595F8, "Roundabout_Seventeenth_Exit");
  qword_2559610 = (uint64_t)operator new(0x20uLL);
  unk_2559618 = xmmword_20B5EB0;
  strcpy((char *)qword_2559610, "Roundabout_Eighteenth_Exit");
  qword_2559628 = (uint64_t)operator new(0x20uLL);
  xmmword_2559630 = xmmword_20B5EB0;
  strcpy((char *)qword_2559628, "Roundabout_Nineteenth_Exit");
  byte_2559657 = 8;
  strcpy((char *)&qword_2559640, "Off_Ramp");
  byte_255966F = 16;
  strcpy((char *)&xmmword_2559658, "Off_Ramp_On_Left");
  byte_2559687 = 17;
  strcpy((char *)&xmmword_2559670, "Off_Ramp_On_Right");
  byte_255969F = 14;
  strcpy((char *)&qword_2559688, "Change_Highway");
  strcpy((char *)&xmmword_25596A0, "Change_Highway_On_Left");
  HIBYTE(word_25596B6) = 22;
  qword_25596B8 = (uint64_t)operator new(0x19uLL);
  xmmword_25596C0 = xmmword_20B9250;
  strcpy((char *)qword_25596B8, "Change_Highway_On_Right");
  byte_25596E7 = 5;
  dword_25596D0 = 1735550285;
  byte_25596D4 = 101;
  byte_25596D5 = 0;
  byte_25596FF = 12;
  strcpy((char *)&qword_25596E8, "Enter_Detour");
  byte_2559717 = 11;
  strcpy((char *)&qword_2559700, "Exit_Detour");
  byte_255972F = 18;
  strcpy((char *)&xmmword_2559718, "Walking_Turnaround");
  qword_2559730 = (uint64_t)operator new(0x19uLL);
  unk_2559738 = xmmword_20B9250;
  strcpy((char *)qword_2559730, "Walking_Turnaround_Sign");
  byte_255975F = 19;
  strcpy((char *)&xmmword_2559748, "Distance_Title_List");
  qword_2559760 = (uint64_t)operator new(0x19uLL);
  unk_2559768 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2559760, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_255978F = 19;
  strcpy((char *)&xmmword_2559778, "Arrival_Charge_List");
  byte_25597A7 = 15;
  strcpy((char *)&qword_2559790, "Charge_At_Start");
  strcpy(&byte_25597BF, "\tPass_Street");
  strcpy((char *)&qword_25597A8, "Pass_Exit");
  byte_25597D7 = 11;
  byte_25597EF = 17;
  strcpy((char *)&xmmword_25597D8, "Pass_Intersection");
  strcpy(&byte_2559807, "\t_PrevExitNumber");
  strcpy((char *)&qword_25597F0, "Next_Exit");
  byte_255981F = 15;
  strcpy(&byte_2559837, "\t_PrevUTurn");
  strcpy((char *)&qword_2559820, "_PrevRoad");
  strcpy(&byte_255984F, "\nNext_");
  byte_2559867 = 5;
  byte_255987F = 15;
  strcpy((char *)&qword_2559868, "_At_Next_Street");
  byte_2559897 = 21;
  strcpy((char *)&xmmword_2559880, "_At_Next_Intersection");
  byte_25598AF = 14;
  strcpy((char *)&qword_2559898, "Charge_Station");
  byte_25598C7 = 15;
  strcpy((char *)&qword_25598B0, "_Charge_Station");
  BYTE1(qword_25598D8) = 0;
  WORD1(qword_25598D8) = 25856;
  HIDWORD(qword_25598D8) = 335544320;
  strcpy((char *)&qword_25598C8, "_Charge_Station_");
  byte_25598F7 = 8;
  strcpy((char *)&qword_25598E0, "_Minimum");
  byte_255990F = 15;
  strcpy((char *)&qword_25598F8, "ExitShield_Sign");
  byte_2559927 = 8;
  strcpy((char *)&qword_2559910, "Walking_");
  byte_255993F = 16;
  strcpy((char *)&xmmword_2559928, "Walking_Continue");
  byte_2559957 = 19;
  strcpy((char *)&xmmword_2559940, "Walking_Start_Route");
  qword_2559958 = (uint64_t)operator new(0x20uLL);
  xmmword_2559960 = xmmword_20B5EB0;
  strcpy((char *)qword_2559958, "Walking_Start_Route_U_Turn");
  byte_2559987 = 17;
  strcpy((char *)&xmmword_2559970, "Walking_Left_Turn");
  byte_255999F = 18;
  strcpy((char *)&xmmword_2559988, "Walking_Right_Turn");
  qword_25599A0 = (uint64_t)operator new(0x20uLL);
  unk_25599A8 = xmmword_20B5EB0;
  strcpy((char *)qword_25599A0, "Walking_Turn_At_Roundabout");
  qword_25599B8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25599C0 = xmmword_20B91B0;
  strcpy((char *)qword_25599B8, "Walking_U_Turn_When_Possible");
  qword_25599D0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25599D8 = xmmword_20B9390;
  strcpy((char *)qword_25599D0, "Walking_Roundabout_Exit_Continue");
  qword_25599E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25599F0 = xmmword_20B91B0;
  strcpy((char *)qword_25599E8, "Walking_Roundabout_Exit_Left");
  qword_2559A00 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_2559A08 = xmmword_20B8890;
  strcpy((char *)qword_2559A00, "Walking_Roundabout_Exit_Right");
  qword_2559A18 = (uint64_t)operator new(0x20uLL);
  xmmword_2559A20 = xmmword_20B8870;
  strcpy((char *)qword_2559A18, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2559A30 = (uint64_t)v0;
  unk_2559A38 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_2559A5F = 8;
  strcpy((char *)&qword_2559A48, "Walking_");
  qword_2559A60 = (uint64_t)operator new(0x19uLL);
  unk_2559A68 = v282;
  strcpy((char *)qword_2559A60, "Walking_Sharp_Left_Turn");
  qword_2559A78 = (uint64_t)operator new(0x20uLL);
  xmmword_2559A80 = v281;
  strcpy((char *)qword_2559A78, "Walking_Sharp_Right_Turn");
  qword_2559A90 = (uint64_t)operator new(0x20uLL);
  unk_2559A98 = v281;
  strcpy((char *)qword_2559A90, "Walking_Slight_Left_Turn");
  qword_2559AA8 = (uint64_t)operator new(0x20uLL);
  xmmword_2559AB0 = v280;
  strcpy((char *)qword_2559AA8, "Walking_Slight_Right_Turn");
  byte_2559AD7 = 4;
  strcpy((char *)&dword_2559AC0, "Exit");
  byte_2559AEF = 4;
  strcpy((char *)&dword_2559AD8, "Road");
  byte_2559B07 = 7;
  strcpy((char *)&dword_2559AF0, "Freeway");
  byte_2559B1F = 12;
  strcpy((char *)&qword_2559B08, "Intersection");
  byte_2559B37 = 5;
  strcpy((char *)&dword_2559B20, "Ferry");
  byte_2559B4F = 11;
  strcpy((char *)&qword_2559B38, "ShuttleName");
  byte_2559B67 = 5;
  strcpy((char *)&dword_2559B50, "Road1");
  strcpy(&byte_2559B7F, "\tName");
  strcpy((char *)&qword_2559B68, "Signpost1");
  byte_2559B97 = 4;
  byte_2559BAF = 7;
  strcpy((char *)&dword_2559B98, "Address");
  byte_2559BC7 = 7;
  strcpy((char *)&dword_2559BB0, "Shield1");
  byte_2559BDF = 13;
  strcpy((char *)&qword_2559BC8, "TowardShield1");
  byte_2559BF7 = 6;
  strcpy((char *)&dword_2559BE0, "Right_");
  byte_2559C0F = 5;
  byte_2559BFC = 95;
  dword_2559BF8 = 1952867660;
  byte_2559BFD = 0;
  strcpy(&byte_2559C27, "\tOn_Left_");
  strcpy((char *)&qword_2559C10, "On_Right_");
  byte_2559C3F = 8;
  byte_2559C57 = 12;
  strcpy((char *)&qword_2559C40, "ElevatorName");
  byte_2559C6F = 13;
  strcpy((char *)&qword_2559C58, "EscalatorName");
  strcpy(&byte_2559C87, "\nBridgeName");
  strcpy((char *)&qword_2559C70, "StairsName");
  strcpy(&byte_2559C9F, "\nTunnelName");
  strcpy(&byte_2559CB7, "\nParking");
  byte_2559CCF = 7;
  strcpy(&byte_2559CE7, "\t_Escalator");
  strcpy((char *)&qword_2559CD0, "_Elevator");
  strcpy(&byte_2559CFF, "\n_ElevatorName");
  byte_2559D17 = 13;
  byte_2559D2F = 14;
  strcpy((char *)&qword_2559D18, "_EscalatorName");
  byte_2559D47 = 5;
  strcpy((char *)&qword_2559D30, "_Road");
  byte_2559D5F = 8;
  strcpy((char *)&qword_2559D48, "_Freeway");
  byte_2559D77 = 13;
  strcpy((char *)&qword_2559D60, "_Intersection");
  byte_2559D8F = 6;
  strcpy((char *)&dword_2559D78, "_Road1");
  byte_2559DA7 = 6;
  strcpy((char *)&dword_2559D90, "_Road2");
  strcpy(&byte_2559DBF, "\n_Signpost2");
  strcpy((char *)&qword_2559DA8, "_Signpost1");
  strcpy(&byte_2559DD7, "\n_Ferry");
  byte_2559DEF = 6;
  byte_2559E07 = 12;
  strcpy((char *)&qword_2559DF0, "_Ferry_Ferry");
  byte_2559E1F = 12;
  strcpy((char *)&qword_2559E08, "_ShuttleName");
  qword_2559E20 = (uint64_t)operator new(0x20uLL);
  unk_2559E28 = v279;
  strcpy((char *)qword_2559E20, "_Railway_Shuttle_ShuttleName");
  byte_2559E4F = 11;
  strcpy((char *)&qword_2559E38, "_ExitNumber");
  byte_2559E67 = 5;
  dword_2559E50 = 1769489759;
  byte_2559E54 = 116;
  byte_2559E55 = 0;
  byte_2559E7F = 7;
  strcpy((char *)&dword_2559E68, "_StayOn");
  byte_2559E97 = 7;
  strcpy((char *)&dword_2559E80, "_Stairs");
  byte_2559EAF = 5;
  strcpy((char *)&dword_2559E98, "_Ramp");
  byte_2559EC7 = 11;
  strcpy((char *)&qword_2559EB0, "_StairsName");
  strcpy(&byte_2559EDF, "\t_Down");
  strcpy((char *)&qword_2559EC8, "_RampName");
  byte_2559EF7 = 5;
  byte_2559F0F = 3;
  dword_2559EF8 = 7361887;
  byte_2559F27 = 7;
  strcpy((char *)&dword_2559F10, "_Bridge");
  byte_2559F3F = 7;
  strcpy((char *)&dword_2559F28, "_Tunnel");
  byte_2559F57 = 11;
  strcpy((char *)&qword_2559F40, "_Roundabout");
  byte_2559F6F = 6;
  strcpy((char *)&dword_2559F58, "_Cross");
  byte_2559F87 = 8;
  strcpy((char *)&qword_2559F70, "_Parking");
  byte_2559F9F = 8;
  strcpy((char *)&qword_2559F88, "_Shield1");
  byte_2559FB7 = 14;
  strcpy((char *)&qword_2559FA0, "_TowardShield1");
  byte_2559FCF = 8;
  strcpy((char *)&qword_2559FB8, "_Shield2");
  byte_2559FE7 = 14;
  strcpy((char *)&qword_2559FD0, "_TowardShield2");
  byte_2559FFF = 11;
  strcpy((char *)&qword_2559FE8, "_Direction1");
  byte_255A017 = 11;
  strcpy((char *)&qword_255A000, "_Direction2");
  strcpy(&byte_255A02F, "\n_TowardDirection1");
  strcpy((char *)&qword_255A018, "Direction1");
  byte_255A047 = 17;
  byte_255A05F = 17;
  strcpy((char *)&xmmword_255A048, "_TowardDirection2");
  byte_255A077 = 16;
  strcpy((char *)&xmmword_255A060, "TowardDirection1");
  byte_255A08F = 7;
  strcpy((char *)&qword_255A078, "_Spoken");
  byte_255A0A7 = 5;
  strcpy((char *)&qword_255A090, "_Sign");
  byte_255A0BF = 15;
  strcpy((char *)&qword_255A0A8, "_Secondary_Sign");
  byte_255A0D7 = 5;
  byte_255A0C4 = 116;
  dword_255A0C0 = 1936280671;
  byte_255A0C5 = 0;
  byte_255A0EF = 8;
  strcpy((char *)&qword_255A0D8, "_Primary");
  qword_255A100 = 0xF00000000000000;
  strcpy(byte_255A108, "_Secondary");
  strcpy((char *)&qword_255A0F0, "_Spoken_Primary");
  strcpy(&byte_255A11F, "\n_Secondary");
  strcpy(&byte_255A137, "\n_Spoken_Secondar");
  BYTE1(qword_255A148) = 0;
  WORD1(qword_255A148) = 0;
  HIDWORD(qword_255A148) = 285212672;
  byte_255A167 = 13;
  strcpy((char *)&qword_255A150, "_To_Secondary");
  BYTE1(qword_255A178) = 0;
  WORD1(qword_255A178) = 0;
  HIDWORD(qword_255A178) = 335544320;
  strcpy((char *)&dword_255A168, "_Spoken_To_Secon");
  strcpy(&byte_255A197, "\t_ValidDistance");
  strcpy((char *)&qword_255A180, "_Distance");
  byte_255A1AF = 14;
  byte_255A1C7 = 6;
  strcpy((char *)&dword_255A1B0, "_Short");
  byte_255A1DF = 1;
  word_255A1C8 = 95;
  qword_255A1E0 = (uint64_t)operator new(0x20uLL);
  unk_255A1E8 = v281;
  strcpy((char *)qword_255A1E0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_255A1F8 = (uint64_t)v1;
  xmmword_255A200 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_255A227 = 12;
  strcpy((char *)&qword_255A210, "Chain_Spoken");
  byte_255A23F = 15;
  strcpy((char *)&qword_255A228, "Chain_To_Spoken");
  strcpy(&byte_255A257, "\nThen_Spoken");
  strcpy((char *)&qword_255A240, "And_Spoken");
  byte_255A26F = 11;
  byte_255A287 = 18;
  strcpy((char *)&xmmword_255A270, "Concatenate_Spoken");
  qword_255A288 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_255A290 = xmmword_20B9240;
  strcpy((char *)qword_255A288, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_255A2A0 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_255A2A8 = xmmword_20B9260;
  strcpy((char *)qword_255A2A0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_255A2B8 = (uint64_t)operator new(0x40uLL);
  xmmword_255A2C0 = xmmword_20B9A90;
  strcpy((char *)qword_255A2B8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_255A2D0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_255A2D8 = xmmword_20B9A40;
  strcpy((char *)qword_255A2D0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_255A2E8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_255A2F0 = xmmword_20E12D0;
  strcpy((char *)qword_255A2E8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_255A300 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_255A308 = xmmword_20B9960;
  strcpy((char *)qword_255A300, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_255A318 = (uint64_t)operator new(0x28uLL);
  xmmword_255A320 = xmmword_20B93A0;
  strcpy((char *)qword_255A318, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_255A330 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_255A338 = xmmword_20E1380;
  strcpy((char *)qword_255A330, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_255A348 = (uint64_t)operator new(0x30uLL);
  xmmword_255A350 = xmmword_20B93C0;
  strcpy((char *)qword_255A348, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_255A360 = (uint64_t)operator new(0x38uLL);
  unk_255A368 = xmmword_20B9A60;
  strcpy((char *)qword_255A360, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_255A378 = (uint64_t)operator new(0x30uLL);
  xmmword_255A380 = xmmword_20E1380;
  strcpy((char *)qword_255A378, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_255A390 = (uint64_t)operator new(0x28uLL);
  unk_255A398 = xmmword_20B9960;
  strcpy((char *)qword_255A390, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_255A3A8 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_255A3B0 = xmmword_20B93D0;
  strcpy((char *)qword_255A3A8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_255A3C0 = (uint64_t)operator new(0x20uLL);
  unk_255A3C8 = v277;
  strcpy((char *)qword_255A3C0, "Walking_Distance_Chain_Spoken");
  qword_255A3D8 = (uint64_t)operator new(0x20uLL);
  xmmword_255A3E0 = v277;
  strcpy((char *)qword_255A3D8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_255A3F0 = (uint64_t)v3;
  unk_255A3F8 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_255A408 = (uint64_t)operator new(0x28uLL);
  xmmword_255A410 = v271;
  strcpy((char *)qword_255A408, "Distance_Cross_The_Street_Spoken");
  byte_255A437 = 22;
  strcpy((char *)&xmmword_255A420, "Walking_Continue_Cross");
  byte_255A44F = 14;
  strcpy((char *)&qword_255A438, "Continue_Cross");
  byte_255A467 = 5;
  strcpy((char *)&dword_255A450, "Cross");
  byte_255A47F = 19;
  strcpy((char *)&xmmword_255A468, "Cross_Street_Spoken");
  byte_255A497 = 17;
  strcpy((char *)&xmmword_255A480, "Cross_Road_Spoken");
  byte_255A4AF = 20;
  strcpy((char *)&xmmword_255A498, "Use_Crosswalk_Spoken");
  byte_255A4C7 = 15;
  strcpy((char *)&qword_255A4B0, "Distance_Spoken");
  byte_255A4DF = 19;
  strcpy((char *)&xmmword_255A4C8, "Distance_And_Spoken");
  byte_255A4F7 = 21;
  strcpy((char *)&xmmword_255A4E0, "Continue_Stage_Spoken");
  byte_255A50F = 13;
  qmemcpy(&qword_255A4F8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_255A100);
  if (qword_255A100 >= 0) {
    size_t v5 = HIBYTE(qword_255A100);
  }
  else {
    size_t v5 = unk_255A0F8;
  }
  unint64_t v6 = v5 + 13;
  byte_255A505 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_255A518 = v5 + 13;
    unk_255A520 = v9 | 0x8000000000000000;
    qword_255A510 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_255A518) = 0;
    WORD1(qword_255A518) = 0;
    HIDWORD(qword_255A518) = 0;
    unk_255A520 = 0;
    byte_255A527 = v5 + 13;
    uint64_t v7 = (char *)&qword_255A518 + 5;
    strcpy((char *)&qword_255A510, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    unint64_t v11 = &qword_255A0F0;
  }
  else {
    unint64_t v11 = (uint64_t *)qword_255A0F0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_2559D47;
  if (byte_2559D47 >= 0) {
    size_t v13 = byte_2559D47;
  }
  else {
    size_t v13 = qword_2559D38;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    long long v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *long long v18 = qword_255A4F8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_255A4F8 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_255A4F8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_255A4F8;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_2559D30;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_2559D30;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    long long v20 = (const std::string::value_type *)&qword_255A0F0;
  }
  else {
    long long v20 = (const std::string::value_type *)qword_255A0F0;
  }
  long long v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_255A538 = v21->__r_.__value_.__r.__words[2];
  xmmword_255A528 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_255A557 = 5;
  strcpy((char *)&dword_255A540, "Merge");
  qword_255A558 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_255A560 = xmmword_20B8E90;
  strcpy((char *)qword_255A558, "Continue_Freeway_Spoken_Primary");
  byte_255A587 = 8;
  strcpy((char *)&qword_255A570, "Starting");
  byte_255A59F = 14;
  strcpy((char *)&qword_255A588, "Starting_Route");
  byte_255A5B7 = 14;
  strcpy((char *)&qword_255A5A0, "Resuming_Route");
  byte_255A5CF = 16;
  strcpy((char *)&xmmword_255A5B8, "Continuing_Route");
  byte_255A5E7 = 9;
  word_255A5D8 = 112;
  qword_255A5D0 = *(void *)&v266[48];
  strcpy(&byte_255A5FF, "\nEnding");
  strcpy((char *)&word_255A5F0, "op");
  qword_255A5E8 = *(void *)&v270[0];
  byte_255A617 = 6;
  strcpy((char *)&qword_255A618, "_Destination");
  byte_255A62F = 12;
  byte_255A647 = 15;
  strcpy((char *)&qword_255A630, "_At_Destination");
  std::operator+<char>();
  qword_255A660 = (uint64_t)operator new(0x20uLL);
  unk_255A668 = v281;
  strcpy((char *)qword_255A660, "Spoken_Ending_At_Parking");
  qword_255A678 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_255A680 = xmmword_20B9800;
  strcpy((char *)qword_255A678, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_255A690, "Sign_Ending_At_Parking");
  HIBYTE(word_255A6A6) = 22;
  byte_255A6BF = 4;
  strcpy((char *)&dword_255A6A8, "Home");
  byte_255A6D7 = 4;
  strcpy((char *)&dword_255A6C0, "Work");
  byte_255A6EF = 8;
  strcpy((char *)&qword_255A6D8, "Business");
  byte_255A707 = 4;
  strcpy((char *)&dword_255A6F0, "Name");
  byte_255A71F = 13;
  strcpy((char *)&qword_255A708, "Other_Contact");
  byte_255A737 = 11;
  strcpy((char *)&qword_255A720, "ContactHome");
  byte_255A74F = 11;
  *(_DWORD *)((char *)&qword_255A738 + 7) = 1802661719;
  byte_255A767 = 7;
  *(int *)((char *)&dword_255A750 + 3) = 1936942450;
  dword_255A750 = 1919181889;
  strcpy((char *)&xmmword_255A768, "Discoverability_Prompt");
  HIBYTE(word_255A77E) = 22;
  byte_255A797 = 6;
  dword_255A780 = 1634878303;
  word_255A784 = 26739;
  byte_255A7AF = 8;
  qword_255A798 = 0x697269535F6F4E5FLL;
  byte_255A7C7 = 9;
  strcpy((char *)&qword_255A7B0, "_CityName");
  byte_255A7DF = 8;
  qword_255A7C8 = 0x636972656E65475FLL;
  int v23 = byte_255A587;
  if (byte_255A587 >= 0) {
    size_t v24 = byte_255A587;
  }
  else {
    size_t v24 = qword_255A578;
  }
  LODWORD(v272) = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v25 = byte_25598C7;
  }
  else {
    size_t v25 = unk_25598B8;
  }
  qword_255A738 = *(void *)"ContactWork";
  byte_255A743 = 0;
  byte_255A757 = 0;
  byte_255A786 = 0;
  byte_255A7A0 = 0;
  byte_255A7D0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_255A7E0;
    qword_255A7E8 = 0;
    unk_255A7F0 = 0;
    qword_255A7E0 = 0;
    byte_255A7F7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_255A7E8 = v25 + v24;
  unk_255A7F0 = v91 | 0x8000000000000000;
  qword_255A7E0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_255A570;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_255A570;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      long long v30 = &qword_25598B0;
    }
    else {
      long long v30 = (uint64_t *)qword_25598B0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_255A62F;
  if (byte_255A62F >= 0) {
    size_t v32 = byte_255A62F;
  }
  else {
    size_t v32 = qword_255A620;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    long long v34 = &qword_255A7F8;
    qword_255A800 = 0;
    unk_255A808 = 0;
    qword_255A7F8 = 0;
    byte_255A80F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  long long v34 = (uint64_t *)operator new(v92 + 1);
  qword_255A800 = v32 + v24;
  unk_255A808 = v93 | 0x8000000000000000;
  qword_255A7F8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      long long v35 = &qword_255A570;
    }
    else {
      long long v35 = (uint64_t *)qword_255A570;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v37 = &qword_255A618;
    }
    else {
      long long v37 = (uint64_t *)qword_255A618;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_255A810 = (uint64_t)operator new(0x19uLL);
  unk_255A818 = v282;
  strcpy((char *)qword_255A810, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_255A828;
    qword_255A830 = 0;
    unk_255A838 = 0;
    qword_255A828 = 0;
    byte_255A83F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_255A830 = v32 + v24;
  unk_255A838 = v95 | 0x8000000000000000;
  qword_255A828 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      long long v39 = &qword_255A570;
    }
    else {
      long long v39 = (uint64_t *)qword_255A570;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_255A618;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_255A618;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_255A840, "{NewBatteryPercentage}");
  HIBYTE(word_255A856) = 22;
  qword_255A858 = (uint64_t)operator new(0x20uLL);
  xmmword_255A860 = v275;
  strcpy((char *)qword_255A858, "{OriginalBatteryPercentage}");
  byte_255A887 = 19;
  strcpy((char *)&xmmword_255A870, "_Arrival_Percentage");
  int v42 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v43 = byte_255A617;
  }
  else {
    size_t v43 = qword_255A608;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int v46 = &qword_255A600;
    }
    else {
      int v46 = (uint64_t *)qword_255A600;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  long long v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v48 = &qword_25598B0;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25598B0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  long long v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_255A898 = v49->__r_.__value_.__r.__words[2];
  xmmword_255A888 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v52 = byte_255A617;
  }
  else {
    size_t v52 = qword_255A608;
  }
  int v53 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v54 = byte_25598C7;
  }
  else {
    size_t v54 = unk_25598B8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    int v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  int v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      long long v57 = &qword_255A600;
    }
    else {
      long long v57 = (uint64_t *)qword_255A600;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25598B0;
    }
    else {
      int v59 = (uint64_t *)qword_25598B0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25598F7 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_25598E0;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_25598E0;
  }
  if (byte_25598F7 >= 0) {
    std::string::size_type v61 = byte_25598F7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25598E8;
  }
  long long v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_255A8B0 = v64->__r_.__value_.__r.__words[2];
  xmmword_255A8A0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v67 = byte_255A617;
  }
  else {
    size_t v67 = qword_255A608;
  }
  int v68 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v69 = byte_25598C7;
  }
  else {
    size_t v69 = unk_25598B8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  int v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      long long v72 = &qword_255A600;
    }
    else {
      long long v72 = (uint64_t *)qword_255A600;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25598B0;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25598B0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_255A8C8 = v75->__r_.__value_.__r.__words[2];
  xmmword_255A8B8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v78 = byte_255A617;
  }
  else {
    size_t v78 = qword_255A608;
  }
  int v79 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v80 = byte_25598C7;
  }
  else {
    size_t v80 = unk_25598B8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_255A8D8 = 0;
    unk_255A8E0 = 0;
    qword_255A8D0 = 0;
    uint64_t v82 = &qword_255A8D0;
    byte_255A8E7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_255A8D8 = v80 + v78;
  unk_255A8E0 = v103 | 0x8000000000000000;
  qword_255A8D0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      long long v83 = &qword_255A600;
    }
    else {
      long long v83 = (uint64_t *)qword_255A600;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  int v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25598B0;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25598B0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_255A8E7;
  if (byte_255A8E7 >= 0) {
    size_t v87 = byte_255A8E7;
  }
  else {
    size_t v87 = qword_255A8D8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    long long v89 = (uint64_t *)operator new(v104 + 1);
    qword_255A8F0 = v87 + 5;
    unk_255A8F8 = v105 | 0x8000000000000000;
    qword_255A8E8 = (uint64_t)v89;
  }
  else
  {
    long long v89 = &qword_255A8E8;
    qword_255A8F0 = 0;
    unk_255A8F8 = 0;
    qword_255A8E8 = 0;
    byte_255A8FF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    __n128 v106 = &qword_255A8D0;
  }
  else {
    __n128 v106 = (uint64_t *)qword_255A8D0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v108 = byte_255A617;
  }
  else {
    size_t v108 = qword_255A608;
  }
  int v109 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v110 = byte_25598C7;
  }
  else {
    size_t v110 = unk_25598B8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      BOOL v113 = &qword_255A600;
    }
    else {
      BOOL v113 = (uint64_t *)qword_255A600;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      unint64_t v115 = &qword_25598B0;
    }
    else {
      unint64_t v115 = (uint64_t *)qword_25598B0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_255A910 = v116->__r_.__value_.__r.__words[2];
  xmmword_255A900 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_255A910);
  if (qword_255A910 >= 0) {
    size_t v119 = HIBYTE(qword_255A910);
  }
  else {
    size_t v119 = *((void *)&xmmword_255A900 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    long long v121 = (uint64_t *)operator new(v124 + 1);
    qword_255A920 = v119 + 6;
    unk_255A928 = v125 | 0x8000000000000000;
    qword_255A918 = (uint64_t)v121;
  }
  else
  {
    long long v121 = &qword_255A918;
    qword_255A920 = 0;
    unk_255A928 = 0;
    qword_255A918 = 0;
    byte_255A92F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    unint64_t v126 = &xmmword_255A900;
  }
  else {
    unint64_t v126 = (long long *)xmmword_255A900;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v128 = byte_255A617;
  }
  else {
    size_t v128 = qword_255A608;
  }
  int v129 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v130 = byte_25598C7;
  }
  else {
    size_t v130 = unk_25598B8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unsigned int v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  unsigned int v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      long long v133 = &qword_255A600;
    }
    else {
      long long v133 = (uint64_t *)qword_255A600;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  std::string v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25598B0;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25598B0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_255A08F >= 0) {
    uint64_t v136 = (const std::string::value_type *)&qword_255A078;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)qword_255A078;
  }
  if (byte_255A08F >= 0) {
    std::string::size_type v137 = byte_255A08F;
  }
  else {
    std::string::size_type v137 = unk_255A080;
  }
  unint64_t v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_255A940 = v138->__r_.__value_.__r.__words[2];
  xmmword_255A930 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_255A617;
  if (byte_255A617 >= 0) {
    size_t v141 = byte_255A617;
  }
  else {
    size_t v141 = qword_255A608;
  }
  int v142 = byte_25598C7;
  if (byte_25598C7 >= 0) {
    size_t v143 = byte_25598C7;
  }
  else {
    size_t v143 = unk_25598B8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  uint64_t v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      unsigned int v146 = &qword_255A600;
    }
    else {
      unsigned int v146 = (uint64_t *)qword_255A600;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  unsigned int v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      int v148 = &qword_25598B0;
    }
    else {
      int v148 = (uint64_t *)qword_25598B0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25598F7 >= 0) {
    long long v149 = (const std::string::value_type *)&qword_25598E0;
  }
  else {
    long long v149 = (const std::string::value_type *)qword_25598E0;
  }
  if (byte_25598F7 >= 0) {
    std::string::size_type v150 = byte_25598F7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25598E8;
  }
  long long v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_255A08F >= 0) {
    unsigned int v153 = (const std::string::value_type *)&qword_255A078;
  }
  else {
    unsigned int v153 = (const std::string::value_type *)qword_255A078;
  }
  if (byte_255A08F >= 0) {
    std::string::size_type v154 = byte_255A08F;
  }
  else {
    std::string::size_type v154 = unk_255A080;
  }
  unsigned int v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_255A958 = v155->__r_.__value_.__r.__words[2];
  xmmword_255A948 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_255A977 = 16;
  strcpy((char *)&xmmword_255A960, "Use_NACS_Adapter");
  byte_255A98F = 16;
  strcpy(byte_255A978, "Start_Route_Sign");
  qword_255A990 = (uint64_t)operator new(0x20uLL);
  unk_255A998 = v278;
  strcpy((char *)qword_255A990, "Start_Route_Spoken_Primary");
  int v157 = byte_2559027;
  if (byte_2559027 >= 0) {
    size_t v158 = byte_2559027;
  }
  else {
    size_t v158 = qword_2559018;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    int v160 = &qword_255A9A8;
    qword_255A9B0 = 0;
    unk_255A9B8 = 0;
    qword_255A9A8 = 0;
    byte_255A9BF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      __n128 v167 = &qword_2559010;
    }
    else {
      __n128 v167 = (uint64_t *)qword_2559010;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  int v160 = (uint64_t *)operator new(v165 + 1);
  qword_255A9B0 = v158 + 27;
  unk_255A9B8 = v166 | 0x8000000000000000;
  qword_255A9A8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_255A9D7, "\t_Two_Lanes");
  strcpy((char *)&qword_255A9C0, "_One_Lane");
  strcpy(&byte_255A9EF, "\n_Three_Lanes");
  byte_255AA07 = 12;
  byte_255AA1F = 11;
  strcpy((char *)&qword_255AA08, "_Four_Lanes");
  byte_255AA37 = 11;
  strcpy((char *)&qword_255AA20, "_Five_Lanes");
  strcpy(&byte_255AA4F, "\n_Seven_Lanes");
  strcpy((char *)&qword_255AA38, "_Six_Lanes");
  byte_255AA67 = 12;
  byte_255AA7F = 12;
  strcpy((char *)&qword_255AA68, "_Eight_Lanes");
  byte_255AA97 = 12;
  strcpy((char *)&qword_255AA80, "_Second_Lane");
  byte_255AAAF = 11;
  strcpy((char *)&qword_255AA98, "_Third_Lane");
  byte_255AAC7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_255AAB0, "_Second_Third_Lanes");
  byte_255AADF = 4;
  strcpy((char *)&dword_255AAC8, "Left");
  byte_255AAF7 = 5;
  byte_255AAE4 = 116;
  dword_255AAE0 = 1751607634;
  byte_255AAE5 = 0;
  byte_255AB0F = 6;
  strcpy((char *)&dword_255AAF8, "Middle");
  BYTE1(qword_255AB20) = 0;
  WORD1(qword_255AB20) = 0;
  HIDWORD(qword_255AB20) = 0x10000000;
  strcpy((char *)dword_255AB10, "Left_Second_Lane");
  BYTE1(qword_255AB38) = 0;
  WORD1(qword_255AB38) = 0;
  HIDWORD(qword_255AB38) = 285212672;
  strcpy((char *)&dword_255AB28, "Right_Second_Lan");
  qword_255AB50 = 0xF00000000000000;
  strcpy((char *)&dword_255AB40, "Left_Third_Lane");
  qword_255AB68 = 0x1000000000000000;
  byte_255AB5C = 116;
  dword_255AB58 = 1751607634;
  dword_255AB64 = 1701732684;
  unk_255AB5D = *(void *)"_Third_Lane";
  __n128 v168 = (char *)operator new(0x19uLL);
  qword_255AB70 = (uint64_t)v168;
  unk_255AB78 = v282;
  *(_DWORD *)__n128 v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  __n128 v169 = (char *)operator new(0x20uLL);
  qword_255AB88 = (uint64_t)v169;
  xmmword_255AB90 = v281;
  *(_DWORD *)__n128 v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_255ABB7 = 5;
  strcpy((char *)&dword_255ABA0, "_Stay");
  byte_255ABCF = 13;
  strcpy((char *)&qword_255ABB8, "Continue_Sign");
  byte_255ABE7 = 8;
  strcpy((char *)&qword_255ABD0, "Continue");
  int v170 = byte_255A0A7;
  if (byte_255A0A7 >= 0) {
    size_t v171 = byte_255A0A7;
  }
  else {
    size_t v171 = qword_255A098;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    __n128 v176 = operator new(v174 + 1);
    qword_255ABF0 = v171 + 8;
    qword_255ABF8 = v175 | 0x8000000000000000;
    qword_255ABE8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    __n128 v173 = v176 + 1;
  }
  else
  {
    qword_255ABF8 = 0;
    HIBYTE(qword_255ABF8) = v171 + 8;
    qword_255ABE8 = 0x65756E69746E6F43;
    qword_255ABF0 = 0;
    __n128 v173 = &qword_255ABF0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    __n128 v177 = &qword_255A090;
  }
  else {
    __n128 v177 = (uint64_t *)qword_255A090;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_255A100);
  if (qword_255A100 >= 0) {
    size_t v179 = HIBYTE(qword_255A100);
  }
  else {
    size_t v179 = unk_255A0F8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    __n128 v184 = operator new(v182 + 1);
    qword_255AC08 = v179 + 8;
    qword_255AC10 = v183 | 0x8000000000000000;
    qword_255AC00 = (uint64_t)v184;
    void *v184 = qword_255ABD0;
    __n128 v181 = v184 + 1;
  }
  else
  {
    qword_255AC10 = 0;
    HIBYTE(qword_255AC10) = v179 + 8;
    qword_255AC00 = qword_255ABD0;
    qword_255AC08 = 0;
    __n128 v181 = &qword_255AC08;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    __n128 v185 = &qword_255A0F0;
  }
  else {
    __n128 v185 = (uint64_t *)qword_255A0F0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_255AC18, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_255AC47 = 13;
  strcpy((char *)&qword_255AC30, "{instruction}");
  byte_255AC5F = 20;
  strcpy(byte_255AC48, "{primaryInstruction}");
  strcpy((char *)&xmmword_255AC60, "{secondaryInstruction}");
  HIBYTE(word_255AC76) = 22;
  qword_255AC78 = (uint64_t)operator new(0x20uLL);
  unk_255AC80 = v280;
  strcpy((char *)qword_255AC78, "{andSecondaryInstruction}");
  qword_255AC90 = (uint64_t)operator new(0x20uLL);
  unk_255AC98 = v281;
  strcpy((char *)qword_255AC90, "{toSecondaryInstruction}");
  byte_255ACBF = 21;
  strcpy(byte_255ACA8, "{continueInstruction}");
  qword_255ACC0 = (uint64_t)operator new(0x20uLL);
  unk_255ACC8 = v278;
  strcpy((char *)qword_255ACC0, "{thenSecondaryInstruction}");
  byte_255ACEF = 14;
  strcpy((char *)&qword_255ACD8, "{instruction1}");
  byte_255AD07 = 14;
  strcpy((char *)&qword_255ACF0, "{instruction2}");
  strcpy(&byte_255AD1F, "\n{nextDistance}");
  strcpy((char *)&qword_255AD08, "{distance}");
  byte_255AD37 = 14;
  byte_255AD4F = 16;
  strcpy(byte_255AD38, "{valid_distance}");
  strcpy(&byte_255AD67, "\n{valid_distance}");
  strcpy((char *)&qword_255AD50, "{distance}");
  byte_255AD7F = 16;
  byte_255AD97 = 15;
  strcpy((char *)&qword_255AD80, "{ClimbDistance}");
  byte_255ADAF = 17;
  strcpy(byte_255AD98, "{DescentDistance}");
  byte_255ADC7 = 13;
  strcpy((char *)&qword_255ADB0, "{nonBrkSpace}");
  byte_255ADDF = 9;
  strcpy((char *)&qword_255ADC8, "{newLine}");
  byte_255ADF7 = 6;
  word_255ADE4 = -24382;
  dword_255ADE0 = -1211981630;
  byte_255ADE6 = 0;
  byte_255AE0F = 2;
  word_255ADF8 = -24382;
  byte_255ADFA = 0;
  byte_255AE27 = 1;
  word_255AE10 = 10;
  byte_255AE3F = 1;
  word_255AE28 = 32;
  byte_255AE57 = 2;
  strcpy((char *)&word_255AE40, "\n\n");
  strcpy(&byte_255AE6F, "\t{TowardShield1}");
  strcpy((char *)&qword_255AE58, "{Shield1}");
  byte_255AE87 = 15;
  strcpy(&byte_255AE9F, "\t{TowardShield2}");
  strcpy((char *)&qword_255AE88, "{Shield2}");
  byte_255AEB7 = 15;
  byte_255AECF = 12;
  strcpy((char *)&qword_255AEB8, "{Direction1}");
  byte_255AEE7 = 12;
  strcpy((char *)&qword_255AED0, "{Direction2}");
  byte_255AEFF = 18;
  strcpy((char *)&xmmword_255AEE8, "{TowardDirection1}");
  byte_255AF17 = 18;
  strcpy((char *)&xmmword_255AF00, "{TowardDirection2}");
  byte_255AF2F = 7;
  strcpy((char *)&dword_255AF18, "{Icon1}");
  byte_255AF47 = 7;
  strcpy((char *)&dword_255AF30, "{Icon2}");
  byte_255AF48[23] = 14;
  strcpy(byte_255AF48, "{Intersection}");
  byte_255AF77 = 6;
  strcpy((char *)&xmmword_255AF60, "{Road}");
  byte_255AF8F = 7;
  strcpy((char *)&dword_255AF78, "{Road1}");
  byte_255AFA7 = 7;
  strcpy((char *)&xmmword_255AF90, "{Road2}");
  strcpy(&byte_255AFBF, "\n{Freeway}");
  strcpy((char *)&qword_255AFA8, "{Elevator}");
  strcpy(&byte_255AFD7, "\t{Ferry}");
  byte_255AFEF = 7;
  byte_255B007 = 13;
  strcpy((char *)&xmmword_255AFF0, "{ShuttleName}");
  byte_255B01F = 11;
  strcpy((char *)&xmmword_255B008, "{Signpost1}");
  byte_255B037 = 11;
  strcpy((char *)&xmmword_255B020, "{Signpost2}");
  byte_255B04F = 12;
  strcpy((char *)&xmmword_255B038, "{ExitNumber}");
  strcpy(&byte_255B067, "\t{Name}");
  strcpy((char *)&xmmword_255B050, "{Address}");
  byte_255B07F = 6;
  byte_255B097 = 11;
  strcpy((char *)&xmmword_255B080, "{PlaceName}");
  byte_255B0AF = 14;
  strcpy((char *)&xmmword_255B098, "{ElevatorName}");
  byte_255B0C7 = 15;
  strcpy((char *)&xmmword_255B0B0, "{EscalatorName}");
  byte_255B0DF = 12;
  strcpy((char *)&xmmword_255B0C8, "{StairsName}");
  strcpy(&byte_255B0F7, "\n{BridgeName}");
  strcpy((char *)&xmmword_255B0E0, "{RampName}");
  byte_255B10F = 12;
  byte_255B127 = 12;
  strcpy((char *)&xmmword_255B110, "{TunnelName}");
  byte_255B13F = 13;
  strcpy((char *)&xmmword_255B128, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_255AF48;
  *(_OWORD *)v285 = xmmword_255AF60;
  *(void *)&v285[16] = unk_255AF70;
  *(_OWORD *)v286 = *(_OWORD *)&dword_255AF78;
  *(void *)v287 = unk_255AF88;
  *(_OWORD *)&v287[8] = xmmword_255AF90;
  uint64_t v288 = unk_255AFA0;
  *(_OWORD *)v289 = *(_OWORD *)&qword_255AFA8;
  uint64_t v290 = unk_255AFB8;
  uint64_t v292 = unk_255AFD0;
  long long v291 = xmmword_255AFC0;
  long long v293 = *(_OWORD *)&dword_255AFD8;
  uint64_t v294 = unk_255AFE8;
  uint64_t v296 = unk_255B000;
  long long __p = xmmword_255AFF0;
  long long v297 = xmmword_255B008;
  uint64_t v298 = unk_255B018;
  uint64_t v300 = unk_255B030;
  long long v299 = xmmword_255B020;
  long long v301 = xmmword_255B038;
  long long v303 = xmmword_255B050;
  uint64_t v302 = unk_255B048;
  uint64_t v304 = unk_255B060;
  long long v305 = xmmword_255B068;
  long long v307 = xmmword_255B080;
  uint64_t v306 = unk_255B078;
  uint64_t v308 = unk_255B090;
  long long v309 = xmmword_255B098;
  long long v311 = xmmword_255B0B0;
  uint64_t v310 = unk_255B0A8;
  uint64_t v312 = unk_255B0C0;
  long long v313 = xmmword_255B0C8;
  long long v315 = xmmword_255B0E0;
  uint64_t v314 = unk_255B0D8;
  uint64_t v316 = unk_255B0F0;
  long long v317 = xmmword_255B0F8;
  long long v319 = xmmword_255B110;
  uint64_t v318 = unk_255B108;
  uint64_t v320 = unk_255B120;
  uint64_t v322 = unk_255B138;
  long long v321 = xmmword_255B128;
  sub_4BDC0C(qword_255B140, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_255B158 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_255B160 = v282;
  strcpy((char *)qword_255B158, "From_User_Location_List");
  byte_255B187 = 20;
  strcpy(&algn_255B160[16], "Origin_Waypoint_List");
  qword_255B188 = (uint64_t)operator new(0x20uLL);
  unk_255B190 = v278;
  strcpy((char *)qword_255B188, "Intermediate_Waypoint_List");
  unk_255B1A0 = operator new(0x20uLL);
  unk_255B1A8 = v280;
  strcpy(unk_255B1A0, "Destination_Waypoint_List");
  byte_255B1CF = 15;
  strcpy(byte_255B1B8, "{toDestination}");
  byte_255B1E7 = 13;
  strcpy((char *)&xmmword_255B1D0, "{Destination}");
  byte_255B1FF = 7;
  strcpy(byte_255B1E8, "To_Home");
  byte_255B217 = 14;
  strcpy(byte_255B200, "To_ContactHome");
  byte_255B22F = 7;
  strcpy(byte_255B218, "To_Work");
  byte_255B247 = 14;
  strcpy(byte_255B230, "To_ContactWork");
  strcpy(&byte_255B25F, "\nTo_Business");
  strcpy(byte_255B248, "To_Address");
  byte_255B277 = 11;
  byte_255B28F = 16;
  strcpy(byte_255B278, "To_Other_Contact");
  strcpy(&byte_255B2A7, "\tTo_ContactSchool");
  strcpy(byte_255B290, "To_School");
  byte_255B2BF = 16;
  byte_255B2D7 = 17;
  strcpy(byte_255B2C0, "To_PersonLocation");
  qword_255B2D8 = (uint64_t)operator new(0x20uLL);
  unk_255B2E0 = v279;
  strcpy((char *)qword_255B2D8, "To_ContactCustomLabelAddress");
  byte_255B307 = 7;
  strcpy((char *)&dword_255B2F0, "At_Home");
  byte_255B31F = 14;
  strcpy((char *)&qword_255B308, "At_ContactHome");
  byte_255B337 = 7;
  strcpy((char *)&dword_255B320, "At_Work");
  byte_255B34F = 14;
  strcpy((char *)&qword_255B338, "At_ContactWork");
  strcpy(&byte_255B367, "\nAt_Business");
  strcpy((char *)&qword_255B350, "At_Address");
  byte_255B37F = 11;
  byte_255B397 = 16;
  strcpy(byte_255B380, "At_Other_Contact");
  byte_255B3AF = 4;
  strcpy((char *)&dword_255B398, "Home");
  byte_255B3C7 = 11;
  strcpy((char *)&qword_255B3B0 + 7, "Home");
  qword_255B3B0 = *(void *)&v266[16];
  byte_255B3DF = 4;
  strcpy((char *)&dword_255B3C8, "Work");
  byte_255B3F7 = 11;
  strcpy((char *)&qword_255B3E0 + 7, "Work");
  qword_255B3E0 = *(void *)v266;
  byte_255B40F = 7;
  strcpy((char *)&dword_255B3F8, "Address");
  byte_255B427 = 8;
  strcpy((char *)&qword_255B410, "Business");
  byte_255B43F = 13;
  qword_255B428 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_255B428 + 5) = *(void *)&v266[32];
  byte_255B435 = 0;
  byte_255B457 = 6;
  strcpy((char *)&dword_255B440, "School");
  byte_255B46F = 13;
  strcpy((char *)&qword_255B458, "ContactSchool");
  byte_255B487 = 14;
  strcpy((char *)&qword_255B470, "PersonLocation");
  qword_255B488 = (uint64_t)operator new(0x20uLL);
  xmmword_255B490 = v280;
  strcpy((char *)qword_255B488, "ContactCustomLabelAddress");
  if (byte_255B1E7 < 0)
  {
    sub_4200(&xmmword_255B4A0, (void *)xmmword_255B1D0, *((unint64_t *)&xmmword_255B1D0 + 1));
  }
  else
  {
    xmmword_255B4A0 = xmmword_255B1D0;
    qword_255B4B0 = unk_255B1E0;
  }
  byte_255B4CF = 16;
  strcpy((char *)&xmmword_255B4B8, "{PrevExitNumber}");
  byte_255B4E7 = 10;
  strcpy((char *)&qword_255B4D0, "{PrevRoad}");
  qword_255B4E8 = (uint64_t)operator new(0x20uLL);
  unk_255B4F0 = v281;
  strcpy((char *)qword_255B4E8, "{RouteTotalExpectedTime}");
  byte_255B517 = 18;
  strcpy(byte_255B500, "{ChargePercentage}");
  qword_255B518 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255B520 = v275;
  strcpy((char *)qword_255B518, "{RemainingChargePercentage}");
  byte_255B547 = 16;
  strcpy(&algn_255B520[16], "{ChargeDuration}");
  byte_255B55F = 15;
  strcpy((char *)&qword_255B548, "{ConnectorType}");
  byte_255B577 = 19;
  strcpy(byte_255B560, "{ChargeStationName}");
  byte_255B58F = 7;
  strcpy((char *)&dword_255B578, "{Power}");
  byte_255B5A7 = 13;
  strcpy((char *)&qword_255B590, "{VehicleName}");
  byte_255B5BF = 18;
  strcpy((char *)&xmmword_255B5A8, "{AreaIncidentName}");
  byte_255B5D7 = 14;
  strcpy((char *)&qword_255B5C0, "{AreaIncident}");
  byte_255B5EF = 16;
  strcpy((char *)&xmmword_255B5D8, "{AffectedRegion}");
  byte_255B607 = 21;
  strcpy(byte_255B5F0, "{AreaIncidentWeblink}");
  byte_255B61F = 20;
  strcpy((char *)&xmmword_255B608, "{AreaIncidentAgency}");
  byte_255B637 = 11;
  strcpy((char *)&qword_255B620, "{IssueTime}");
  byte_255B64F = 12;
  strcpy((char *)&qword_255B638, "{UpdateTime}");
  byte_255B667 = 11;
  strcpy((char *)&qword_255B650, "{IssueDate}");
  byte_255B67F = 12;
  strcpy((char *)&qword_255B668, "{UpdateDate}");
  qword_255B680 = (uint64_t)operator new(0x20uLL);
  unk_255B688 = v281;
  strcpy((char *)qword_255B680, "{AreaIncidentDataSource}");
  byte_255B6AF = 13;
  strcpy((char *)&qword_255B698, "{AreaHectare}");
  byte_255B6C7 = 10;
  strcpy((char *)&qword_255B6B0, "{AreaAcre}");
  qword_255B6C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255B6D0 = v277;
  strcpy((char *)qword_255B6C8, "{WildfirePercentageContained}");
  qword_255B6E0 = (uint64_t)operator new(0x28uLL);
  unk_255B6E8 = v270[2];
  strcpy((char *)qword_255B6E0, "{WildfireExpectedContainmentDate}");
  qword_255B6F8 = (uint64_t)operator new(0x20uLL);
  unk_255B700 = v279;
  strcpy((char *)qword_255B6F8, "{ServerRecommendedRouteName}");
  qword_255B710 = (uint64_t)operator new(0x20uLL);
  unk_255B718 = v279;
  strcpy((char *)qword_255B710, "{ServerNonRecommendedRoute1}");
  qword_255B728 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255B730 = v279;
  strcpy((char *)qword_255B728, "{ServerNonRecommendedRoute2}");
  byte_255B757 = 12;
  strcpy((char *)&qword_255B740, "{ClientDest}");
  byte_255B76F = 6;
  strcpy((char *)&dword_255B758, "{Name}");
  qword_255B770 = (uint64_t)operator new(0x20uLL);
  unk_255B778 = v270[1];
  strcpy((char *)qword_255B770, "ProactiveAlert_FasterRouteTitle");
  qword_255B788 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255B790 = v278;
  strcpy((char *)qword_255B788, "ProactiveAlert_RoadClosure");
  qword_255B7A0 = (uint64_t)operator new(0x30uLL);
  unk_255B7A8 = v273;
  strcpy((char *)qword_255B7A0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_255B7B8 = (uint64_t)operator new(0x28uLL);
  unk_255B7C0 = v276;
  strcpy((char *)qword_255B7B8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_255B7D0 = (uint64_t)operator new(0x28uLL);
  unk_255B7D8 = v276;
  strcpy((char *)qword_255B7D0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_255B7E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255B7F0 = v276;
  strcpy((char *)qword_255B7E8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_255B800 = (uint64_t)operator new(0x30uLL);
  unk_255B808 = xmmword_20B93B0;
  strcpy((char *)qword_255B800, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_255B82F = 17;
  strcpy(byte_255B818, "Proactive_Driving");
  strcpy(&byte_255B847, "\n{RouteName}");
  strcpy((char *)&qword_255B830, "_RouteName");
  byte_255B85F = 11;
  qword_255B860 = (uint64_t)operator new(0x28uLL);
  unk_255B868 = v270[2];
  strcpy((char *)qword_255B860, "Pass_Traffic_Light_Spoken_Primary");
  qword_255B878 = (uint64_t)operator new(0x20uLL);
  unk_255B880 = v277;
  strcpy((char *)qword_255B878, "Pass_Stop_Sign_Spoken_Primary");
  unk_255B890 = operator new(0x20uLL);
  unk_255B898 = v270[0];
  strcpy(unk_255B890, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_255B8BF, "\nBannerBody");
  strcpy(byte_255B8A8, "BannerHead");
  strcpy(&byte_255B8D7, "\nBannerDescription");
  byte_255B8EF = 17;
  strcpy(&byte_255B907, "\n_Incident");
  strcpy((char *)&qword_255B8F0, "VoiceAlert");
  strcpy(&byte_255B91F, "\t_Area_Incident");
  byte_255B937 = 14;
  byte_255B94F = 15;
  strcpy((char *)&qword_255B938, "_Area_Incidents");
  strcpy(&byte_255B967, "\t_Crash");
  strcpy((char *)&qword_255B950, "_Accident");
  byte_255B97F = 6;
  byte_255B997 = 16;
  strcpy((char *)&xmmword_255B980, "_Congestion_Zone");
  strcpy(&byte_255B9AF, "\n_Environmental_Zone");
  strcpy((char *)&qword_255B998, "_Toll_Zone");
  byte_255B9C7 = 19;
  BYTE1(qword_255B9D8) = 116;
  WORD1(qword_255B9D8) = 0;
  HIDWORD(qword_255B9D8) = 301989888;
  strcpy(byte_255B9E0, "_Construction");
  strcpy((char *)&qword_255B9C8, "_Incident_Accide");
  byte_255B9F7 = 13;
  byte_255BA0F = 7;
  strcpy((char *)&dword_255B9F8, "_Hazard");
  byte_255BA27 = 12;
  strcpy((char *)&qword_255BA10, "_LaneClosure");
  byte_255BA3F = 12;
  strcpy((char *)&qword_255BA28, "_LaneTrailer");
  qmemcpy(&byte_255BA57, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_255BA40, "_Shoulder");
  qword_255BA68 = 0x1500007200000000;
  *(void *)algn_255BA64 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_255BA70, "_Causing_Traffic_Delay");
  HIBYTE(word_255BA86) = 22;
  byte_255BA9F = 6;
  strcpy((char *)&dword_255BA88, "_Timed");
  byte_255BAB7 = 12;
  strcpy((char *)&qword_255BAA0, "_HasDistance");
  byte_255BACF = 8;
  strcpy((char *)&qword_255BAB8, "_Closure");
  strcpy(&byte_255BAE7, "\n_BadRoad");
  strcpy((char *)&qword_255BAD0, "_NoReroute");
  byte_255BAFF = 8;
  byte_255BB17 = 12;
  strcpy((char *)&qword_255BB00, "_TollTrailer");
  byte_255BB2F = 12;
  strcpy((char *)&qword_255BB18, "_BestTrailer");
  byte_255BB47 = 8;
  strcpy((char *)&qword_255BB30, "_Trailer");
  byte_255BB5F = 18;
  strcpy((char *)&xmmword_255BB48, "_Secondary_Trailer");
  byte_255BB77 = 8;
  strcpy((char *)&qword_255BB60, "_Savings");
  byte_255BB8F = 8;
  strcpy((char *)&qword_255BB78, "_AltRoad");
  byte_255BBA7 = 6;
  strcpy((char *)&dword_255BB90, "_Named");
  byte_255BBBF = 6;
  strcpy((char *)&dword_255BBA8, "_NAMED");
  byte_255BBD7 = 22;
  strcpy((char *)&xmmword_255BBC0, "_Named_Suggested_Route");
  qword_255BBF0 = 0x1000000000000000;
  xmmword_255BBE0 = xmmword_20E81D0;
  byte_255BC0F = 11;
  strcpy((char *)&qword_255BBF8, "_Speed_Trap");
  byte_255BC27 = 4;
  strcpy((char *)&dword_255BC10, "_UGI");
  byte_255BC3F = 12;
  strcpy((char *)&qword_255BC28, "_Safer_Route");
  qword_255BC40 = (uint64_t)operator new(0x20uLL);
  unk_255BC48 = v270[1];
  strcpy((char *)qword_255BC40, "BlockedRouteByBlockingIncident_");
  qword_255BC58 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_255BC60 = xmmword_20B9280;
  strcpy((char *)qword_255BC58, "BlockedRouteByManeuverRestriction_");
  qword_255BC70 = (uint64_t)operator new(0x20uLL);
  unk_255BC78 = v270[0];
  strcpy((char *)qword_255BC70, "BlockedRouteByTimeRestriction_");
  qword_255BC88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255BC90 = xmmword_20B8FD0;
  strcpy((char *)qword_255BC88, "SuggestRouteToAvoidBlockingIncident_");
  qword_255BCA0 = (uint64_t)operator new(0x30uLL);
  unk_255BCA8 = xmmword_20B9380;
  strcpy((char *)qword_255BCA0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_255BCB8 = (uint64_t)operator new(0x30uLL);
  unk_255BCC0 = xmmword_20B93E0;
  strcpy((char *)qword_255BCB8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_255BCE7 = 1;
  word_255BCD0 = 95;
  strcpy((char *)&xmmword_255BCE8, "IncidentsCausingDelay_");
  HIBYTE(word_255BCFE) = 22;
  qword_255BD00 = (uint64_t)operator new(0x19uLL);
  unk_255BD08 = v282;
  strcpy((char *)qword_255BD00, "NonVotableRoadIncident_");
  byte_255BD2F = 20;
  strcpy(byte_255BD18, "VotableRoadIncident_");
  byte_255BD47 = 13;
  strcpy((char *)&qword_255BD30, "AreaIncident_");
  byte_255BD5F = 15;
  strcpy((char *)&qword_255BD48, "CongestionZone_");
  qword_255BD60 = (uint64_t)operator new(0x20uLL);
  unk_255BD68 = v281;
  strcpy((char *)qword_255BD60, "EVModifiedChargingStops_");
  byte_255BD8F = 13;
  strcpy((char *)&qword_255BD78, "EVDisconnect_");
  byte_255BDA7 = 12;
  strcpy((char *)&qword_255BD90, "EVReconnect_");
  qword_255BDA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255BDB0 = v279;
  strcpy((char *)qword_255BDA8, "EVOfflineToOnlineTransition_");
  byte_255BDD7 = 13;
  strcpy((char *)&qword_255BDC0, "EVOfflineSAR_");
  byte_255BDEF = 21;
  strcpy((char *)&xmmword_255BDD8, "EVTowingNotSupported_");
  byte_255BE07 = 18;
  strcpy(algn_255BDF0, "EVInfeasibleRoute_");
  qword_255BE08 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_255BE10 = xmmword_20B8DF0;
  strcpy((char *)qword_255BE08, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_255BE20 = (uint64_t)operator new(0x40uLL);
  unk_255BE28 = xmmword_20B98C0;
  strcpy((char *)qword_255BE20, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_255BE38 = (uint64_t)operator new(0x30uLL);
  unk_255BE40 = v274;
  strcpy((char *)qword_255BE38, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_255BE50 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_255BE58 = xmmword_20B9A80;
  strcpy((char *)qword_255BE50, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_255BE68 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_255BE70 = v273;
  strcpy((char *)qword_255BE68, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  int v186 = operator new(0x30uLL);
  qword_255BE80 = (uint64_t)v186;
  unk_255BE88 = v274;
  *int v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_255BE98 = (uint64_t)operator new(0x28uLL);
  unk_255BEA0 = v272;
  strcpy((char *)qword_255BE98, "SuggestDetourWithHigherArrivalSOC_");
  __n128 v187 = operator new(0x30uLL);
  qword_255BEB0 = (uint64_t)v187;
  unk_255BEB8 = *(_OWORD *)&v266[48];
  *__n128 v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_255BEC8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255BED0 = v276;
  strcpy((char *)qword_255BEC8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_255BEE0 = (uint64_t)operator new(0x28uLL);
  unk_255BEE8 = v269;
  strcpy((char *)qword_255BEE0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_255BEF8 = (uint64_t)operator new(0x20uLL);
  unk_255BF00 = v281;
  strcpy((char *)qword_255BEF8, "OfflineToOnlineNewRoute_");
  qword_255BF10 = (uint64_t)operator new(0x40uLL);
  unk_255BF18 = xmmword_20B98C0;
  strcpy((char *)qword_255BF10, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_255BF3F = 20;
  strcpy(byte_255BF28, "LPR_OFFLINE_REROUTE_");
  byte_255BF57 = 16;
  strcpy((char *)&xmmword_255BF40, "LPR_OFFLINE_SAR_");
  byte_255BF6F = 20;
  strcpy(byte_255BF58, "LPR_OFFLINE_REROUTE_");
  byte_255BF87 = 16;
  strcpy((char *)&xmmword_255BF70, "LPR_OFFLINE_SAR_");
  byte_255BF9F = 19;
  strcpy(byte_255BF88, "SuggestFasterRoute_");
  qword_255BFA0 = (char *)operator new(0x20uLL);
  xmmword_255BFA8 = v280;
  strcpy(qword_255BFA0, "AreaIncidentSaferReroute_");
  byte_255BFCF = 12;
  strcpy((char *)&qword_255BFB8, "_Remove_Stop");
  byte_255BFE7 = 13;
  strcpy((char *)&qword_255BFD0, "_Remove_Stops");
  strcpy(&byte_255BFFF, "\t_Add_Stops");
  strcpy((char *)&qword_255BFE8, "_Add_Stop");
  strcpy(&byte_255C017, "\n_Change_Route");
  byte_255C02F = 13;
  byte_255C047 = 15;
  strcpy((char *)&qword_255C030, "_Different_Stop");
  byte_255C05F = 16;
  strcpy((char *)&xmmword_255C048, "_Different_Stops");
  byte_255C077 = 15;
  strcpy((char *)&qword_255C060, "_EV_Remove_Stop");
  byte_255C08F = 16;
  strcpy((char *)&xmmword_255C078, "_EV_Remove_Stops");
  byte_255C0A7 = 12;
  strcpy((char *)&qword_255C090, "_EV_Add_Stop");
  byte_255C0BF = 13;
  strcpy((char *)&qword_255C0A8, "_EV_Add_Stops");
  byte_255C0D7 = 15;
  strcpy((char *)&qword_255C0C0, "_EV_Low_Battery");
  byte_255C0EF = 14;
  strcpy((char *)&qword_255C0D8, "_EV_Infeasible");
  byte_255C107 = 15;
  strcpy((char *)&qword_255C0F0, "_EV_Last_Chance");
  qword_255C108 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255C110 = v281;
  strcpy((char *)qword_255C108, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_255C008;
  qword_255C120 = (uint64_t)operator new(0x20uLL);
  unk_255C128 = v280;
  strcpy((char *)qword_255C120, "_EV_Low_Battery_Add_Stops");
  qword_255C138 = (uint64_t)operator new(0x19uLL);
  unk_255C140 = v282;
  strcpy((char *)qword_255C138, "_EV_Infeasible_Add_Stop");
  int v189 = byte_255C017;
  if (byte_255C017 >= 0) {
    size_t v190 = byte_255C017;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    __n128 v196 = (char *)operator new(v194 + 1);
    qword_255C158 = v190 + 14;
    unk_255C160 = v195 | 0x8000000000000000;
    qword_255C150 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    __n128 v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_255C158) = 0;
    WORD1(qword_255C158) = 0;
    HIDWORD(qword_255C158) = 0;
    unk_255C160 = 0;
    byte_255C167 = v190 + 14;
    strcpy((char *)&qword_255C150, "_EV_Infe");
    __n128 v192 = (char *)&qword_255C158 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_255C000;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  __n128 v198 = (char *)operator new(0x20uLL);
  qword_255C168 = (uint64_t)v198;
  *(_OWORD *)algn_255C170 = v281;
  *(void *)__n128 v198 = qword_255C0F0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_255C0F0 + 7);
  *(void *)(v198 + 15) = qword_255BFE8;
  v198[23] = word_255BFF0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    __n128 v200 = (uint64_t *)operator new(v201 + 1);
    qword_255C188 = v190 + 15;
    unk_255C190 = v202 | 0x8000000000000000;
    qword_255C180 = (uint64_t)v200;
  }
  else
  {
    __n128 v200 = &qword_255C180;
    qword_255C188 = 0;
    unk_255C190 = 0;
    qword_255C180 = 0;
    byte_255C197 = v190 + 15;
  }
  *__n128 v200 = qword_255C0F0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_255C0F0 + 7);
  __n128 v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      __n128 v204 = &qword_255C000;
    }
    else {
      __n128 v204 = (uint64_t *)qword_255C000;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_255C1AF = 17;
  strcpy((char *)&xmmword_255C198, "_EV_Forced_Detour");
  qword_255C1B0 = (uint64_t)operator new(0x20uLL);
  unk_255C1B8 = v280;
  strcpy((char *)qword_255C1B0, "_EV_Higher_Arrival_Charge");
  qword_255C1C8 = (uint64_t)operator new(0x28uLL);
  unk_255C1D0 = xmmword_20B8FD0;
  strcpy((char *)qword_255C1C8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_255C1F7 = 16;
  strcpy(byte_255C1E0, "_EV_Out_Of_Range");
  qword_255C1F8 = (uint64_t)operator new(0x20uLL);
  unk_255C200 = v275;
  strcpy((char *)qword_255C1F8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_255C210, "_EV_Forced_Modify_Stop");
  HIBYTE(word_255C226) = 22;
  qword_255C228 = (uint64_t)operator new(0x19uLL);
  unk_255C230 = v282;
  strcpy((char *)qword_255C228, "_EV_Forced_Modify_Stops");
  byte_255C257 = 19;
  strcpy(byte_255C240, "_EV_Forced_Add_Stop");
  byte_255C26F = 20;
  strcpy((char *)&xmmword_255C258, "_EV_Forced_Add_Stops");
  byte_255C287 = 21;
  strcpy(byte_255C270, "_EV_Battery_Info_Lost");
  qword_255C288 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255C290 = v280;
  strcpy((char *)qword_255C288, "_EV_Battery_Info_Restored");
  qword_255C2A0 = (uint64_t)operator new(0x20uLL);
  unk_255C2A8 = v281;
  strcpy((char *)qword_255C2A0, "_EV_Towing_Not_Supported");
  qword_255C2B8 = (uint64_t)operator new(0x28uLL);
  unk_255C2C0 = v271;
  strcpy((char *)qword_255C2B8, "_EV_Offline_to_Online_Transition");
  byte_255C2E7 = 15;
  strcpy((char *)&qword_255C2D0, "_EV_Offline_SAR");
  qword_255C2E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255C2F0 = v279;
  strcpy((char *)qword_255C2E8, "_Offline_to_Online_New_Route");
  byte_255C317 = 12;
  strcpy((char *)&qword_255C300, "BannerButton");
  byte_255C32F = 8;
  strcpy((char *)&qword_255C318, "_Dismiss");
  byte_255C347 = 3;
  word_255C330 = 20319;
  byte_255C332 = 75;
  byte_255C333 = 0;
  byte_255C35F = 11;
  strcpy((char *)&qword_255C348, "_Still_Here");
  byte_255C377 = 8;
  strcpy((char *)&qword_255C360, "_Cleared");
  qmemcpy(&byte_255C38F, "\nBannerButton", 13);
  strcpy((char *)&qword_255C378, "_No_Thanks");
  uint64_t v205 = qword_255C308;
  qword_255C3A0 = 0x1400000000000000;
  *(void *)algn_255C39C = 0x7373696D7369445FLL;
  qword_255C3B8 = 0xF00000000000000;
  qword_255C3B0 = 0x4B4F5F6E6F7474;
  int v206 = byte_255C0A7;
  if (byte_255C0A7 >= 0) {
    size_t v207 = byte_255C0A7;
  }
  else {
    size_t v207 = qword_255C098;
  }
  unint64_t v208 = v207 + 12;
  qword_255C3A8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    __n128 v212 = (char *)operator new(v210 + 1);
    qword_255C3C8 = v207 + 12;
    unk_255C3D0 = v211 | 0x8000000000000000;
    qword_255C3C0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)__n128 v212 = *(void *)"BannerButton";
    __n128 v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_255C3C8) = 0;
    HIWORD(qword_255C3C8) = 0;
    unk_255C3D0 = 0;
    byte_255C3D7 = v207 + 12;
    strcpy((char *)&qword_255C3C0, "BannerButton");
    __n128 v209 = (char *)&qword_255C3C8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    long long v213 = &qword_255C090;
  }
  else {
    long long v213 = (uint64_t *)qword_255C090;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_255C0BF;
  if (byte_255C0BF >= 0) {
    size_t v215 = byte_255C0BF;
  }
  else {
    size_t v215 = unk_255C0B0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    double v220 = (char *)operator new(v218 + 1);
    qword_255C3E0 = v215 + 12;
    unk_255C3E8 = v219 | 0x8000000000000000;
    qword_255C3D8 = (uint64_t)v220;
    *(void *)double v220 = qword_255C300;
    *((_DWORD *)v220 + 2) = qword_255C308;
    long long v217 = v220 + 12;
  }
  else
  {
    qword_255C3E0 = 0;
    unk_255C3E8 = 0;
    byte_255C3EF = v215 + 12;
    LODWORD(qword_255C3E0) = qword_255C308;
    qword_255C3D8 = qword_255C300;
    long long v217 = (char *)&qword_255C3E0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    BOOL v221 = &qword_255C0A8;
  }
  else {
    BOOL v221 = (uint64_t *)qword_255C0A8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_255C077;
  if (byte_255C077 >= 0) {
    size_t v223 = byte_255C077;
  }
  else {
    size_t v223 = unk_255C068;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_255C3F8 = v223 + 12;
    unk_255C400 = v227 | 0x8000000000000000;
    qword_255C3F0 = (uint64_t)v228;
    *(void *)v228 = qword_255C300;
    *((_DWORD *)v228 + 2) = qword_255C308;
    char v225 = v228 + 12;
  }
  else
  {
    qword_255C3F8 = 0;
    unk_255C400 = 0;
    byte_255C407 = v223 + 12;
    LODWORD(qword_255C3F8) = qword_255C308;
    qword_255C3F0 = qword_255C300;
    char v225 = (char *)&qword_255C3F8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_255C060;
  }
  else {
    v229 = (uint64_t *)qword_255C060;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_255C317;
  if (byte_255C317 >= 0) {
    size_t v231 = byte_255C317;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_255C08F;
  if (byte_255C08F >= 0) {
    size_t v233 = byte_255C08F;
  }
  else {
    size_t v233 = *((void *)&xmmword_255C078 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_255C408;
    qword_255C410 = 0;
    unk_255C418 = 0;
    qword_255C408 = 0;
    byte_255C41F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_255C410 = v233 + v231;
  unk_255C418 = v243 | 0x8000000000000000;
  qword_255C408 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_255C300;
    }
    else {
      v236 = (uint64_t *)qword_255C300;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_255C078;
    }
    else {
      v238 = (long long *)xmmword_255C078;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_255C428 = v231 + 11;
    unk_255C430 = v245 | 0x8000000000000000;
    qword_255C420 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_255C420;
    qword_255C428 = 0;
    unk_255C430 = 0;
    qword_255C420 = 0;
    byte_255C437 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_255C420 + 7) = *(_DWORD *)((char *)&qword_255C348 + 7);
      qword_255C420 = qword_255C348;
      BYTE3(qword_255C428) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_255C300;
  }
  else {
    v246 = (uint64_t *)qword_255C300;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_255C348 + 7);
  *(void *)v247 = qword_255C348;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_255C438;
    qword_255C440 = 0;
    unk_255C448 = 0;
    qword_255C438 = 0;
    byte_255C44F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  v249 = (uint64_t *)operator new(v264 + 1);
  qword_255C440 = v231 + 8;
  unk_255C448 = v265 | 0x8000000000000000;
  qword_255C438 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_255C300;
    }
    else {
      v250 = (uint64_t *)qword_255C300;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_255C360;
  v251[8] = 0;
  int v252 = byte_255C38F;
  if (byte_255C38F >= 0) {
    size_t v253 = byte_255C38F;
  }
  else {
    size_t v253 = qword_255C380;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_255C450;
    qword_255C458 = 0;
    unk_255C460 = 0;
    qword_255C450 = 0;
    byte_255C467 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  v255 = (uint64_t *)operator new(v262 + 1);
  qword_255C458 = v253 + v231;
  unk_255C460 = v263 | 0x8000000000000000;
  qword_255C450 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_255C300;
    }
    else {
      v256 = (uint64_t *)qword_255C300;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_255C378;
    }
    else {
      v258 = (uint64_t *)qword_255C378;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_255C47F, "\n{newroute}");
  strcpy((char *)&qword_255C468, "{roadname}");
  strcpy(&byte_255C497, "\n{count}");
  byte_255C4AF = 7;
  strcpy(&byte_255C4C7, "\n{dur}");
  strcpy((char *)&qword_255C4B0, "{duration}");
  byte_255C4DF = 5;
  qword_255C4E0 = (uint64_t)operator new(0x20uLL);
  unk_255C4E8 = v278;
  strcpy((char *)qword_255C4E0, "{PleaseProceedWithCaution}");
  byte_255C50F = 15;
  strcpy((char *)&qword_255C4F8, "{UserRouteName}");
  byte_255C527 = 20;
  strcpy((char *)&xmmword_255C510, "{SuggestedRouteName}");
  byte_255C53F = 18;
  strcpy(byte_255C528, "Speed_Camera_Ahead");
  qword_255C540 = (uint64_t)operator new(0x20uLL);
  unk_255C548 = v277;
  strcpy((char *)qword_255C540, "Red_Light_Camera_Ahead_Spoken");
  qword_255C558 = (uint64_t)operator new(0x20uLL);
  unk_255C560 = v277;
  strcpy((char *)qword_255C558, "Stop_Sign_Camera_Ahead_Spoken");
  qword_255C570 = (uint64_t)operator new(0x28uLL);
  unk_255C578 = v272;
  strcpy((char *)qword_255C570, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_255C588 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_255C590 = v267;
  strcpy((char *)qword_255C588, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_255C5A0 = (uint64_t)operator new(0x20uLL);
  unk_255C5A8 = v279;
  strcpy((char *)qword_255C5A0, "Camera_Ahead_Multiple_Spoken");
  qword_255C5B8 = (uint64_t)operator new(0x30uLL);
  unk_255C5C0 = v268;
  strcpy((char *)qword_255C5B8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_255C5D0 = (char *)operator new(0x30uLL);
  strcpy(qword_255C5D0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_255C5FF = 16;
  xmmword_255C5D8 = v268;
  strcpy(byte_255C5E8, "_Speed_Limit_Mph");
  byte_255C617 = 16;
  strcpy(byte_255C600, "_Speed_Limit_Kph");
  byte_255C62F = 11;
  strcpy((char *)&qword_255C618, "Watch_Speed");
  byte_255C647 = 4;
  strcpy((char *)&dword_255C630, "_One");
  byte_255C65F = 4;
  strcpy((char *)&dword_255C648, "_Two");
  byte_255C677 = 4;
  strcpy((char *)&dword_255C660, "_Few");
  byte_255C68F = 5;
  strcpy((char *)&dword_255C678, "_Many");
  byte_255C6A7 = 6;
  strcpy((char *)&dword_255C690, "_Other");
  byte_255C6BF = 4;
  strcpy((char *)&dword_255C6A8, "_ONE");
  byte_255C6D7 = 7;
  strcpy((char *)&dword_255C6C0, "{Speed}");
  byte_255C6EF = 8;
  strcpy((char *)&qword_255C6D8, "Dismount");
  byte_255C707 = 4;
  strcpy((char *)&dword_255C6F0, "Walk");
  byte_255C71F = 5;
  strcpy((char *)&dword_255C708, "Mount");
  byte_255C737 = 7;
  strcpy((char *)&dword_255C720, "Remount");
  strcpy(&byte_255C74F, "\t_Crosswalk");
  strcpy((char *)&qword_255C738, "Walk_Road");
  strcpy(&byte_255C767, "\n_PLURAL");
  byte_255C77F = 7;
  strcpy(&byte_255C797, "\n{description1}");
  strcpy((char *)&qword_255C780, "_SECONDARY");
  byte_255C7AF = 14;
  byte_255C7C7 = 14;
  strcpy((char *)&qword_255C7B0, "{description2}");
  byte_255C7DF = 21;
  strcpy((char *)&xmmword_255C7C8, "TWO_ROAD_DESCRIPTIONS");
  byte_255C7F7 = 17;
  strcpy((char *)&xmmword_255C7E0, "{SlopePercentage}");
  byte_255C80F = 15;
  strcpy((char *)&qword_255C7F8, "_Protected_Lane");
  strcpy(&byte_255C827, "\n_Paved_Path");
  strcpy((char *)&qword_255C810, "_Bike_Path");
  byte_255C83F = 11;
  byte_255C857 = 15;
  strcpy((char *)&qword_255C840, "_Dedicated_Lane");
  byte_255C86F = 12;
  strcpy((char *)&qword_255C858, "_Shared_Path");
  strcpy(&byte_255C887, "\n_UnnamedRoad");
  strcpy((char *)&qword_255C870, "_Bike_Lane");
  byte_255C89F = 12;
  byte_255C8B7 = 5;
  strcpy((char *)&dword_255C8A0, "_Path");
  byte_255C8CF = 6;
  strcpy((char *)&dword_255C8B8, "_Trail");
  strcpy(&byte_255C8E7, "\t_Plaza");
  strcpy((char *)&qword_255C8D0, "_Sidewalk");
  byte_255C8FF = 6;
  byte_255C917 = 15;
  strcpy((char *)&qword_255C900, "_Moving_Walkway");
  byte_255C92F = 14;
  strcpy((char *)&qword_255C918, "Two_Stage_Turn");
  byte_255C947 = 16;
  strcpy((char *)&xmmword_255C930, "{OptionalPeriod}");
  byte_255C95F = 18;
  strcpy((char *)&xmmword_255C948, "Advisory_Separator");
  byte_255C977 = 6;
  strcpy((char *)&dword_255C960, "Period");
  byte_255C98F = 21;
  strcpy((char *)&xmmword_255C978, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_255C990, "Advisory_Title_Notices");
  HIBYTE(word_255C9A6) = 22;
  byte_255C9BF = 7;
  strcpy((char *)&dword_255C9A8, "_DETAIL");
  byte_255C9D7 = 17;
  strcpy((char *)&xmmword_255C9C0, "_LONG_REGION_LIST");
  byte_255C9EF = 16;
  strcpy((char *)&xmmword_255C9D8, "Advisory_Grouped");
  byte_255CA07 = 11;
  strcpy((char *)&qword_255C9F0, "_Advisories");
  qword_255CA08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_255CA10 = v275;
  strcpy((char *)qword_255CA08, "Advisory_WILDFIRE_METADATA_");
  byte_255CA37 = 8;
  strcpy((char *)&qword_255CA20, "Advisory");
  byte_255CA4F = 13;
  strcpy((char *)&qword_255CA38, "MPR_NUM_STOPS");
  byte_255CA67 = 17;
  strcpy(algn_255CA50, "EV_CHARGE_STATION");
  byte_255CA7F = 11;
  strcpy((char *)&qword_255CA68, "_NAMED_CITY");
  byte_255CA97 = 5;
  strcpy((char *)&dword_255CA80, "_Stop");
  strcpy(&byte_255CAAF, "\n{StopsCount}");
  strcpy((char *)&qword_255CA98, "{CityName}");
  byte_255CAC7 = 12;
  byte_255CADF = 11;
  strcpy((char *)&qword_255CAC8, "_With_Other");
  byte_255CAF7 = 15;
  strcpy((char *)&qword_255CAE0, "{DepartureTime}");
  qword_255CAF8 = (uint64_t)operator new(0x28uLL);
  unk_255CB00 = v276;
  strcpy((char *)qword_255CAF8, "Ending_Charge_Station_Port_Availability");
  qword_255CB10 = (uint64_t)operator new(0x28uLL);
  unk_255CB18 = v269;
  strcpy((char *)qword_255CB10, "Ending_Charge_Station_No_Availability");
  qword_255CB28 = (uint64_t)operator new(0x28uLL);
  unk_255CB30 = v272;
  strcpy((char *)qword_255CB28, "Ending_Charge_Station_No_Real_Time");
  byte_255CB57 = 16;
  strcpy(byte_255CB40, "{AvailablePorts}");
  byte_255CB6F = 12;
  strcpy((char *)&qword_255CB58, "{TotalPorts}");
  byte_255CB87 = 14;
  strcpy((char *)&qword_255CB70, "{ManeuverIcon}");
  qword_255CB88 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_255CB90 = xmmword_20B9A60;
  strcpy((char *)qword_255CB88, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_255CBA0 = (uint64_t)operator new(0x20uLL);
  unk_255CBA8 = v275;
  strcpy((char *)qword_255CBA0, "Walking_Destination_Unnamed");
  qword_255CBB8 = (uint64_t)operator new(0x20uLL);
  unk_255CBC0 = v277;
  strcpy((char *)qword_255CBB8, "TrafficDelay_Label_Title_Sign");
  qword_255CBD0 = (uint64_t)operator new(0x20uLL);
  unk_255CBD8 = v279;
  strcpy((char *)qword_255CBD0, "Special_Guidance_Instruction");
  byte_255CBFF = 2;
  strcpy((char *)&word_255CBE8, "CZ");
  byte_255CC17 = 3;
  dword_255CC00 = 5919811;
  unk_255CC2F = 3;
  dword_255CC18 = 6243649;
  byte_255CC47 = 0;
  byte_255CC5F = 7;
  strcpy((char *)&dword_255CC48, "TRANSIT");
  byte_255CC77 = 7;
  strcpy((char *)&dword_255CC60, "OFFLINE");
  qword_255CC78 = (uint64_t)operator new(0x28uLL);
  unk_255CC80 = v267;
  strcpy((char *)qword_255CC78, "Advisory_Card_French_Climate_Law_Title");
  qword_255CC90 = (uint64_t)operator new(0x30uLL);
  unk_255CC98 = xmmword_20B93C0;
  strcpy((char *)qword_255CC90, "Advisory_Card_French_Climate_Law_Details");
  qword_255CCA8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_255CCB0 = v273;
  strcpy((char *)qword_255CCA8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_255CCC0 = (uint64_t)operator new(0x20uLL);
  unk_255CCC8 = v279;
  strcpy((char *)qword_255CCC0, "{ClimateLawLearnMoreWeblink}");
  byte_255CCEF = 3;
  LODWORD(qword_255CCD8) = 4280902;
  qword_255CCF0 = (uint64_t)operator new(0x70uLL);
  unk_255CCF8 = xmmword_20E81E0;
  strcpy((char *)qword_255CCF0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_255CD98 = 0u;
  xmmword_255CDA8 = 0u;
  dword_255CDB8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_255CD98, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_255CD98, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_255CD98, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_255CD98, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_255CD1F = 8;
  strcpy((char *)&qword_255CD08, "any_mode");
  byte_255CD37 = 7;
  strcpy((char *)&dword_255CD20, "cycling");
  byte_255CD4F = 7;
  strcpy((char *)&dword_255CD38, "driving");
  byte_255CD67 = 7;
  strcpy((char *)&dword_255CD50, "walking");
  qword_255CD68 = 0;
  unk_255CD70 = 0;
  qword_255CD78 = 0;
  v259 = (char *)operator new(9uLL);
  *(void *)v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_255CD68 = (uint64_t)v259;
  unk_255CD70 = v259 + 9;
  qword_255CD78 = (uint64_t)(v259 + 9);
  qword_255CD80 = 0;
  qword_255CD88 = 0;
  unk_255CD90 = 0;
  v260 = (char *)operator new(9uLL);
  qword_255CD88 = (uint64_t)(v260 + 9);
  unk_255CD90 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_255CD80 = (uint64_t)v260;
  return result;
}

void sub_4D25C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_4D2920()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v10 = sub_4BBDC0(v0, v3);
  sub_500818(v10 + 1536, v8, v4);
  sub_4D30C8(v9 + 3088);
  *(_OWORD *)(v9 + 5264) = 0u;
  *(void *)(v9 + 5280) = v2;
  sub_688A04(v6, 0, *(_DWORD *)(v4 + 968), &v168);
  uint64_t v11 = v168;
  sub_688A04(v6, 4u, *(_DWORD *)(v4 + 968), (uint64_t *)v167);
  sub_8D8884(v11, *(uint64_t *)&v167[0]);
  int v12 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v165 = v168;
  uint64_t v166 = v169;
  if (v169) {
    atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v164 = 0u;
  bzero(v21, 0x7F8uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v23 = v22;
  int64x2_t v24 = v22;
  int64x2_t v25 = v22;
  int64x2_t v26 = v22;
  int64x2_t v27 = v22;
  int64x2_t v28 = v22;
  int64x2_t v29 = v22;
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = 0x8000000080000000;
  *((void *)&v13 + 1) = 0x8000000080000000;
  long long v31 = v13;
  long long v32 = v13;
  long long v33 = v13;
  long long v34 = v13;
  int v35 = 0x7FFFFFFF;
  int64x2_t v36 = v22;
  int64x2_t v37 = v22;
  long long v38 = v13;
  long long v39 = v13;
  unint64_t v40 = 0x8000000080000000;
  int64x2_t v41 = v22;
  int64x2_t v42 = v22;
  int64x2_t v43 = v22;
  int64x2_t v44 = v22;
  int64x2_t v45 = v22;
  int64x2_t v46 = v22;
  int64x2_t v47 = v22;
  int64x2_t v48 = v22;
  long long v49 = 0u;
  int64x2_t v50 = v22;
  int64x2_t v51 = v22;
  int64x2_t v52 = v22;
  int64x2_t v53 = v22;
  int64x2_t v54 = v22;
  int64x2_t v55 = v22;
  int64x2_t v56 = v22;
  int64x2_t v57 = v22;
  int64x2_t v58 = v22;
  int64x2_t v59 = v22;
  int64x2_t v60 = v22;
  int64x2_t v61 = v22;
  int64x2_t v62 = v22;
  int64x2_t v63 = v22;
  int64x2_t v64 = v22;
  int64x2_t v65 = v22;
  int64x2_t v66 = v22;
  int64x2_t v67 = v22;
  int64x2_t v68 = v22;
  int64x2_t v69 = v22;
  int64x2_t v70 = v22;
  int64x2_t v71 = v22;
  int64x2_t v72 = v22;
  int64x2_t v73 = v22;
  int64x2_t v74 = v22;
  int64x2_t v75 = v22;
  int64x2_t v76 = v22;
  int64x2_t v77 = v22;
  int64x2_t v78 = v22;
  int64x2_t v79 = v22;
  int64x2_t v80 = v22;
  int64x2_t v81 = v22;
  int64x2_t v82 = v22;
  int64x2_t v83 = v22;
  int64x2_t v84 = v22;
  int64x2_t v85 = v22;
  int64x2_t v86 = v22;
  int64x2_t v87 = v22;
  int64x2_t v88 = v22;
  int64x2_t v89 = v22;
  int64x2_t v90 = v22;
  int64x2_t v91 = v22;
  int64x2_t v92 = v22;
  int64x2_t v93 = v22;
  int64x2_t v94 = v22;
  int64x2_t v95 = v22;
  int64x2_t v96 = v22;
  int64x2_t v97 = v22;
  int64x2_t v98 = v22;
  int64x2_t v99 = v22;
  int64x2_t v100 = v22;
  int64x2_t v101 = v22;
  uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  char v103 = 0;
  int64x2_t v104 = v22;
  int64x2_t v105 = v22;
  int64x2_t v106 = v22;
  int64x2_t v107 = v22;
  int64x2_t v108 = v22;
  int64x2_t v109 = v22;
  int64x2_t v110 = v22;
  int64x2_t v111 = v22;
  int64x2_t v112 = v22;
  int64x2_t v113 = v22;
  int64x2_t v114 = v22;
  int64x2_t v115 = v22;
  uint64_t v116 = 0;
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  char v118 = 0;
  uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  long long v122 = v13;
  long long v123 = v13;
  long long v121 = v13;
  uint64_t v124 = -1;
  char v125 = 0;
  uint64_t v126 = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v127 = v22;
  uint64_t v128 = 0x7FFFFFFFFFFFFFFFLL;
  char v129 = 0;
  int v130 = 0x7FFFFFFF;
  uint64_t v131 = 0;
  __int16 v132 = 0;
  int64x2_t v133 = v22;
  int64x2_t v134 = v22;
  int64x2_t v135 = v22;
  int64x2_t v136 = v22;
  int64x2_t v137 = v22;
  int64x2_t v138 = v22;
  int64x2_t v139 = v22;
  int64x2_t v140 = v22;
  int64x2_t v141 = v22;
  int64x2_t v142 = v22;
  int64x2_t v143 = v22;
  int64x2_t v144 = v22;
  int64x2_t v145 = v22;
  int64x2_t v146 = v22;
  memset(v147, 0, sizeof(v147));
  uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
  int v150 = 0;
  *(void *)((char *)v152 + 5) = 0;
  v152[0] = 0;
  long long __p = 0u;
  int64x2_t v153 = v22;
  int64x2_t v154 = v22;
  char v155 = 1;
  uint64_t v156 = 0;
  char v157 = 0;
  uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
  char v159 = 0;
  uint64_t v160 = 0x7FFFFFFFFFFFFFFFLL;
  long long v161 = 0u;
  __int16 v163 = 0;
  uint64_t v162 = 0;
  sub_60DE48((uint64_t)v167, &v165, &v164, v21, v4);
  sub_4D3210(v9 + 3088, v167);
  sub_4F2894((uint64_t)v167);
  if (SHIBYTE(v152[0]) < 0) {
    operator delete((void *)__p);
  }
  unint64_t v14 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v166;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_70F6C0(v167, v6, v4);
  long long v16 = v167[0];
  v167[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v9 + 5272);
  *(_OWORD *)(v9 + 5264) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v169;
  if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v9;
}

void sub_4D3028(_Unwind_Exception *a1)
{
  sub_14A84(v4 - 96);
  sub_14A84(v1 + 5264);
  sub_4F2894(v3);
  sub_651C4((id **)(v1 + 3072));
  sub_4BCED0(v2);
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_4D30AC()
{
}

void sub_4D30B4(_Unwind_Exception *a1)
{
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4D30C8(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_4F2678(a1 + 32);
  *(_DWORD *)(a1 + 2072) = 11;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2104) = 11;
  *(void *)(a1 + 2112) = 0;
  *(void *)(a1 + 2128) = 0;
  *(void *)(a1 + 2120) = 0;
  uint64_t v2 = operator new(8uLL);
  *(void *)(a1 + 2112) = v2;
  *v2++ = 0x200000001;
  *(void *)(a1 + 2128) = v2;
  *(void *)(a1 + 2120) = v2;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(unsigned char *)(a1 + 2160) = 0;
  *(unsigned char *)(a1 + 2168) = 0;
  return a1;
}

void sub_4D315C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 1959) < 0) {
    operator delete(*(void **)(v1 + 1936));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4D3210(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  size_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v8 = a2[1];
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v8;
    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v6 = a2[1];
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v6;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_7:
  memcpy((void *)(a1 + 32), a2 + 2, 0x76CuLL);
  uint64_t v9 = (void **)(a1 + 1936);
  if (*(char *)(a1 + 1959) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[121];
  *(void *)(a1 + 1952) = *((void *)a2 + 244);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 1959) = 0;
  *((unsigned char *)a2 + 1936) = 0;
  long long v11 = *(long long *)((char *)a2 + 2050);
  long long v13 = *(long long *)((char *)a2 + 2024);
  long long v12 = *(long long *)((char *)a2 + 2040);
  *(_OWORD *)(a1 + 2008) = *(long long *)((char *)a2 + 2008);
  *(_OWORD *)(a1 + 2024) = v13;
  *(_OWORD *)(a1 + 2040) = v12;
  *(_OWORD *)(a1 + 2050) = v11;
  long long v15 = *(long long *)((char *)a2 + 1976);
  long long v14 = *(long long *)((char *)a2 + 1992);
  *(_OWORD *)(a1 + 1960) = *(long long *)((char *)a2 + 1960);
  *(_OWORD *)(a1 + 1976) = v15;
  *(_OWORD *)(a1 + 1992) = v14;
  *(_DWORD *)(a1 + 2072) = *((_DWORD *)a2 + 518);
  long long v16 = *(void **)(a1 + 2080);
  if (v16)
  {
    *(void *)(a1 + 2088) = v16;
    operator delete(v16);
    *(void *)(a1 + 2080) = 0;
    *(void *)(a1 + 2088) = 0;
    *(void *)(a1 + 2096) = 0;
  }
  *(_OWORD *)(a1 + 2080) = a2[130];
  *(void *)(a1 + 2096) = *((void *)a2 + 262);
  *((void *)a2 + 261) = 0;
  *((void *)a2 + 262) = 0;
  *((void *)a2 + 260) = 0;
  *(_DWORD *)(a1 + 2104) = *((_DWORD *)a2 + 526);
  uint64_t v17 = *(void **)(a1 + 2112);
  if (v17)
  {
    *(void *)(a1 + 2120) = v17;
    operator delete(v17);
    *(void *)(a1 + 2112) = 0;
    *(void *)(a1 + 2120) = 0;
    *(void *)(a1 + 2128) = 0;
  }
  *(_OWORD *)(a1 + 2112) = a2[132];
  *(void *)(a1 + 2128) = *((void *)a2 + 266);
  *((void *)a2 + 264) = 0;
  *((void *)a2 + 265) = 0;
  *((void *)a2 + 266) = 0;
  long long v18 = (void **)(a1 + 2136);
  if (*(char *)(a1 + 2159) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(long long *)((char *)a2 + 2136);
  *(void *)(a1 + 2152) = *((void *)a2 + 269);
  *(_OWORD *)long long v18 = v19;
  *((unsigned char *)a2 + 2159) = 0;
  *((unsigned char *)a2 + 2136) = 0;
  *(unsigned char *)(a1 + 2160) = *((unsigned char *)a2 + 2160);
  *(unsigned char *)(a1 + 2168) = *((unsigned char *)a2 + 2168);
  return a1;
}

void sub_4D3430(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v40 = 0;
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  sub_4D6AC8((uint64_t *)&v40, 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5));
  long long __p = 0;
  long long v38 = 0;
  unint64_t v39 = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 == v7) {
    goto LABEL_79;
  }
  long long v8 = a3 + 133;
  int v9 = -1;
  do
  {
    int v10 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 50)
    {
      if (sub_605454(v6 + 32))
      {
        if (*(char *)(v6 + 1175) < 0)
        {
          if (*(void *)(v6 + 1160)) {
            goto LABEL_15;
          }
        }
        else if (*(unsigned char *)(v6 + 1175))
        {
          goto LABEL_15;
        }
      }
      if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
        || *(_DWORD *)(v6 + 1200) != 2
        || *(_DWORD *)(v6 + 1256) != 12
        || *(void *)(v6 + 1328) != *(void *)(v6 + 1336))
      {
        goto LABEL_15;
      }
      int v15 = *(_DWORD *)(v6 + 1360);
      if (v15)
      {
        if (v15 == 1)
        {
          int v16 = *(_DWORD *)(v6 + 1352);
          if (v16 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v16 && *(_DWORD *)(v6 + 1364) != 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        int v18 = *(_DWORD *)(v6 + 1352);
        if (v18 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v18) {
          goto LABEL_15;
        }
      }
      if (*(char *)(v6 + 1399) < 0)
      {
        if (!*(void *)(v6 + 1384))
        {
LABEL_68:
          if (*(_DWORD *)(v6 + 1400) == -1 && *(_DWORD *)(v6 + 1404) == -1) {
            goto LABEL_4;
          }
        }
      }
      else if (!*(unsigned char *)(v6 + 1399))
      {
        goto LABEL_68;
      }
LABEL_15:
      int v10 = *(_DWORD *)v6;
    }
    unsigned int v11 = v10 - 40;
    if ((v10 - 40) >= 6
      && v10 != 50
      && *(_DWORD *)(v6 + 1400) == -1
      && v10 != 48
      && *(_DWORD *)(v6 + 1404) == -1
      || (int v12 = *(_DWORD *)(v6 + 1256), v12 == 11))
    {
LABEL_27:
      long long v13 = v41;
      if ((unint64_t)v41 >= v42)
      {
        int64x2_t v41 = (char *)sub_4C83E4((uint64_t *)&v40, v6);
      }
      else
      {
        sub_4C8540((uint64_t)v41, v6);
        int64x2_t v41 = v13 + 1440;
      }
      goto LABEL_4;
    }
    if (*(char *)(v6 + 1399) < 0)
    {
      if (*(void *)(v6 + 1384)) {
        goto LABEL_27;
      }
    }
    else if (*(unsigned char *)(v6 + 1399))
    {
      goto LABEL_27;
    }
    if (v11 <= 4)
    {
      unint64_t v14 = v35;
      if (v35 >= v36)
      {
        unint64_t v35 = sub_4C83E4((uint64_t *)&v34, v6);
      }
      else
      {
        sub_4C8540(v35, v6);
        unint64_t v35 = v14 + 1440;
      }
      goto LABEL_4;
    }
    if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
      || (v12 - 2) < 9
      || *(_DWORD *)(v6 + 1200) == 1 && *(void *)(v6 + 1208) != *(void *)(v6 + 1216))
    {
      goto LABEL_51;
    }
    if (sub_605454(v6 + 32))
    {
      if (*(char *)(v6 + 1175) < 0)
      {
        if (*(void *)(v6 + 1160)) {
          goto LABEL_51;
        }
      }
      else if (*(unsigned char *)(v6 + 1175))
      {
        goto LABEL_51;
      }
    }
    if (*(_DWORD *)(v6 + 1400) != -1 || *(_DWORD *)(v6 + 1404) != -1)
    {
LABEL_51:
      if (v9 < 0) {
        int v9 = -1108378657 * ((unint64_t)(a3[134] - a3[133]) >> 4);
      }
      if (!sub_605454(v6 + 32)) {
        goto LABEL_59;
      }
      if (*(char *)(v6 + 1175) < 0)
      {
        if (!*(void *)(v6 + 1160)) {
          goto LABEL_59;
        }
      }
      else if (!*(unsigned char *)(v6 + 1175))
      {
LABEL_59:
        uint64_t v17 = v38;
        if ((unint64_t)v38 >= v39)
        {
          long long v38 = (char *)sub_4C83E4((uint64_t *)&__p, v6);
        }
        else
        {
          sub_4C8540((uint64_t)v38, v6);
          long long v38 = v17 + 1440;
        }
        goto LABEL_4;
      }
      if (sub_6054A8(v6 + 32))
      {
        sub_4D6BC4((uint64_t *)&__p, (uint64_t)__p, v6);
        goto LABEL_4;
      }
      goto LABEL_59;
    }
    sub_4D6DB0(a1, v6, (uint64_t)v43);
    unint64_t v19 = a3[134];
    if (v19 >= a3[135]) {
      uint64_t v20 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    else {
      uint64_t v20 = sub_4F4498(v19, (uint64_t)v43) + 496;
    }
    a3[134] = v20;
    sub_4F2FF8((uint64_t)v43);
LABEL_4:
    v6 += 1440;
  }
  while (v6 != v7);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((v38 - (unsigned char *)__p) >> 5)) > 1) {
    goto LABEL_78;
  }
  if (__p != v38)
  {
    if (v40 == v41)
    {
      uint64_t v25 = *v8;
      sub_4D6DB0(a1, (uint64_t)__p, (uint64_t)v43);
      sub_4D7130(v8, v25 + 496 * v9, (uint64_t)v43);
    }
    else
    {
LABEL_78:
      uint64_t v21 = *v8;
      sub_4D7410();
      sub_4D7130(v8, v21 + 496 * v9, (uint64_t)v43);
    }
LABEL_87:
    sub_4F2FF8((uint64_t)v43);
    unint64_t v24 = (unint64_t)v34;
    goto LABEL_88;
  }
LABEL_79:
  if (v40 != v41)
  {
    sub_4D6210(a1, (uint64_t *)&v40, (uint64_t)v43);
    unint64_t v22 = a3[134];
    if (v22 < a3[135]) {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v43) + 496;
    }
    else {
      uint64_t v23 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    a3[134] = v23;
    goto LABEL_87;
  }
  unint64_t v24 = (unint64_t)v34;
  if (v34 != (void *)v35) {
    sub_4D666C(a1, (uint64_t *)&v34, (uint64_t)v43);
  }
LABEL_88:
  if (v24)
  {
    uint64_t v26 = v35;
    int64x2_t v27 = (void *)v24;
    if (v35 != v24)
    {
      do
        uint64_t v26 = sub_4BD604(v26 - 1440);
      while (v26 != v24);
      int64x2_t v27 = v34;
    }
    unint64_t v35 = v24;
    operator delete(v27);
  }
  int64x2_t v28 = (char *)__p;
  if (__p)
  {
    int64x2_t v29 = v38;
    uint64_t v30 = __p;
    if (v38 != __p)
    {
      do
        int64x2_t v29 = (char *)sub_4BD604((uint64_t)(v29 - 1440));
      while (v29 != v28);
      uint64_t v30 = __p;
    }
    long long v38 = v28;
    operator delete(v30);
  }
  long long v31 = (char *)v40;
  if (v40)
  {
    long long v32 = v41;
    long long v33 = v40;
    if (v41 != v40)
    {
      do
        long long v32 = (char *)sub_4BD604((uint64_t)(v32 - 1440));
      while (v32 != v31);
      long long v33 = v40;
    }
    int64x2_t v41 = v31;
    operator delete(v33);
  }
}

void sub_4D3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
}

void **sub_4D3AA8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  sub_4F29BC((uint64_t)v7);
  if (*(unsigned char *)(a1 + 1453))
  {
    sub_4D3430(a1, a2, (uint64_t *)v7);
  }
  else if (*(unsigned char *)(a1 + 1407))
  {
    sub_4D3B88(a1, (uint64_t *)a2, (uint64_t *)v7);
  }
  else
  {
    sub_4D419C(a1, (uint64_t *)a2, (uint64_t)v7);
  }
  sub_647CE0(a3, (uint64_t)v7);
  return sub_4F2BD0(v7);
}

void sub_4D3B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F2BD0((void **)va);
  _Unwind_Resume(a1);
}

void sub_4D3B88(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long __p = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_91;
  }
  do
  {
    if (*(_DWORD *)v5 != 50) {
      goto LABEL_31;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_31;
      }
    }
    if (*(void *)(v5 + 1176) == *(void *)(v5 + 1184)
      && *(_DWORD *)(v5 + 1200) == 2
      && *(_DWORD *)(v5 + 1256) == 12
      && *(void *)(v5 + 1328) == *(void *)(v5 + 1336))
    {
      int v8 = *(_DWORD *)(v5 + 1360);
      if (v8)
      {
        if (v8 == 1)
        {
          int v9 = *(_DWORD *)(v5 + 1352);
          if (v9 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v9 && *(_DWORD *)(v5 + 1364) != 0x7FFFFFFF) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        int v10 = *(_DWORD *)(v5 + 1352);
        if (v10 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v10) {
          goto LABEL_31;
        }
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        if (*(void *)(v5 + 1384)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1399))
      {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_6;
      }
    }
LABEL_31:
    if ((*(_DWORD *)(v5 + 1256) - 2) >= 9)
    {
      if (sub_605454(v5 + 32))
      {
        if (*(char *)(v5 + 1175) < 0)
        {
          if (*(void *)(v5 + 1160)) {
            goto LABEL_53;
          }
        }
        else if (*(unsigned char *)(v5 + 1175))
        {
          goto LABEL_53;
        }
      }
      int v11 = *(_DWORD *)v5;
      unsigned int v12 = *(_DWORD *)v5 - 40;
      if (v12 >= 5
        && (v11 == 45 || v11 != 50 && *(_DWORD *)(v5 + 1400) == -1 && v11 != 48 && *(_DWORD *)(v5 + 1404) == -1))
      {
        goto LABEL_53;
      }
      int v13 = *(_DWORD *)(v5 + 1256);
      if (v13 == 11) {
        goto LABEL_53;
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        uint64_t v14 = *(void *)(v5 + 1384);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)(v5 + 1399);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      if (!v14)
      {
        if (*(void *)(v5 + 1176) != *(void *)(v5 + 1184))
        {
          sub_4D89E0(a1, v5, (uint64_t)v36);
          unint64_t v15 = a3[131];
          if (v15 >= a3[132]) {
            a3[131] = sub_4F4C08(a3 + 130, (uint64_t)v36);
          }
          else {
            a3[131] = sub_4F4498(v15, (uint64_t)v36) + 496;
          }
          goto LABEL_5;
        }
        if (*(_DWORD *)(v5 + 1200) != 2)
        {
          sub_4D5520(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 6), (uint64_t)v36);
          goto LABEL_5;
        }
        if (v13 != 12)
        {
          sub_4D5DAC(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 68), (uint64_t)v36);
LABEL_5:
          sub_4F2FF8((uint64_t)v36);
          goto LABEL_6;
        }
        goto LABEL_6;
      }
    }
LABEL_53:
    if ((*(_DWORD *)(v5 + 1256) - 2) < 9) {
      goto LABEL_66;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_66;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_66;
      }
    }
    int v16 = *(_DWORD *)v5;
    unsigned int v17 = *(_DWORD *)v5 - 40;
    if (v17 >= 5 && v16 != 50)
    {
      if (v16 == 45)
      {
LABEL_66:
        sub_4D4DD0(a1, v5, (uint64_t)v36);
        unint64_t v18 = a3[4];
        if (v18 < a3[5]) {
          uint64_t v7 = sub_4F4498(v18, (uint64_t)v36) + 496;
        }
        else {
          uint64_t v7 = sub_4F4C08(a3 + 3, (uint64_t)v36);
        }
        a3[4] = v7;
        goto LABEL_5;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && v16 != 48 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_69;
      }
    }
    if (*(_DWORD *)(v5 + 1256) == 11)
    {
LABEL_69:
      unint64_t v19 = v34;
      if ((unint64_t)v34 >= v35)
      {
        long long v34 = (char *)sub_4C83E4((uint64_t *)&__p, v5);
      }
      else
      {
        sub_4C8540((uint64_t)v34, v5);
        long long v34 = v19 + 1440;
      }
      goto LABEL_6;
    }
    if (*(char *)(v5 + 1399) < 0)
    {
      if (*(void *)(v5 + 1384)) {
        goto LABEL_69;
      }
    }
    else if (*(unsigned char *)(v5 + 1399))
    {
      goto LABEL_69;
    }
    if (v17 <= 4)
    {
      unint64_t v20 = v31;
      if (v31 >= v32)
      {
        uint64_t v21 = sub_4C83E4((uint64_t *)&v30, v5);
      }
      else
      {
        sub_4C8540(v31, v5);
        uint64_t v21 = v20 + 1440;
      }
      unint64_t v31 = v21;
    }
LABEL_6:
    v5 += 1440;
  }
  while (v5 != v6);
  if (__p != v34)
  {
    sub_4D6210(a1, (uint64_t *)&__p, (uint64_t)v36);
    unint64_t v22 = a3[4];
    if (v22 >= a3[5]) {
      uint64_t v23 = sub_4F4C08(a3 + 3, (uint64_t)v36);
    }
    else {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v36) + 496;
    }
    a3[4] = v23;
    sub_4F2FF8((uint64_t)v36);
  }
LABEL_91:
  unint64_t v24 = (unint64_t)v30;
  if (v30 != (void *)v31) {
    sub_4D666C(a1, (uint64_t *)&v30, (uint64_t)v36);
  }
  if (v30)
  {
    uint64_t v25 = v31;
    uint64_t v26 = v30;
    if ((void *)v31 != v30)
    {
      do
        uint64_t v25 = sub_4BD604(v25 - 1440);
      while (v25 != v24);
      uint64_t v26 = v30;
    }
    unint64_t v31 = v24;
    operator delete(v26);
  }
  int64x2_t v27 = (char *)__p;
  if (__p)
  {
    int64x2_t v28 = v34;
    int64x2_t v29 = __p;
    if (v34 != __p)
    {
      do
        int64x2_t v28 = (char *)sub_4BD604((uint64_t)(v28 - 1440));
      while (v28 != v27);
      int64x2_t v29 = __p;
    }
    long long v34 = v27;
    operator delete(v29);
  }
}

void sub_4D40F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_4D419C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0x4FA4FA4FA4FA4FA5 * (v3 >> 5);
  uint64_t v9 = a1 + 1536;
  uint64_t v10 = a1 + 3088;
  do
  {
    uint64_t v12 = *a2;
    uint64_t v13 = *a2 + 1440 * v7;
    if (*(_DWORD *)v13 != 50) {
      goto LABEL_16;
    }
    if (sub_605454(v12 + 1440 * v7 + 32))
    {
      if (*(char *)(v13 + 1175) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1160)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1175))
      {
        goto LABEL_16;
      }
    }
    if (*(void *)(v12 + 1440 * v7 + 1176) == *(void *)(v12 + 1440 * v7 + 1184)
      && *(_DWORD *)(v12 + 1440 * v7 + 1200) == 2
      && *(_DWORD *)(v12 + 1440 * v7 + 1256) == 12
      && *(void *)(v12 + 1440 * v7 + 1328) == *(void *)(v12 + 1440 * v7 + 1336))
    {
      uint64_t v28 = v12 + 1440 * v7;
      int64x2_t v29 = (int *)(v28 + 1352);
      int v30 = *(_DWORD *)(v28 + 1360);
      if (v30)
      {
        if (v30 == 1)
        {
          int v31 = *v29;
          if (v31 != 0x7FFFFFFF
            && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v31
            && *(_DWORD *)(v12 + 1440 * v7 + 1364) != 0x7FFFFFFF)
          {
            goto LABEL_16;
          }
        }
      }
      else
      {
        int v32 = *v29;
        if (v32 != 0x7FFFFFFF && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v32) {
          goto LABEL_16;
        }
      }
      if (*(char *)(v13 + 1399) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1384)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1399))
      {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v12 + 1440 * v7 + 1400) == -1 && *(_DWORD *)(v12 + 1440 * v7 + 1404) == -1) {
        goto LABEL_5;
      }
    }
LABEL_16:
    if (*(_DWORD *)(v12 + 1440 * v7 + 1256) != 12) {
      goto LABEL_5;
    }
    if ((*(_DWORD *)v13 - 40) <= 4)
    {
      uint64_t v14 = v42;
      if ((unint64_t)v42 >= v43)
      {
        int v11 = (char *)sub_4C83E4((uint64_t *)&v41, v13);
      }
      else
      {
        sub_4C8540((uint64_t)v42, v13);
        int v11 = v14 + 1440;
      }
      unint64_t v42 = v11;
      goto LABEL_5;
    }
    sub_50081C(v9, v13, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v39);
    if (v40 < 0)
    {
      if (!v39[1])
      {
        operator delete(v39[0]);
        unint64_t v15 = v36;
        if (!v36) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    else if (!v40)
    {
      unint64_t v15 = v36;
      if (!v36) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        int v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        unint64_t v15 = v16;
      }
      while (v16);
LABEL_24:
      unsigned int v17 = __p;
      long long __p = 0;
      if (v17) {
        operator delete(v17);
      }
      unint64_t v18 = (void **)v33;
      if (v33)
      {
        unint64_t v19 = v34;
        unint64_t v20 = v33;
        if (v34 != v33)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 3;
          }
          while (v19 != v18);
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      goto LABEL_5;
    }
    sub_4D4778(a1, 1, (uint64_t)&v33);
    uint64_t v21 = sub_5231C((uint64_t)&v33);
    sub_60E8D8(v10, (uint64_t)v39, v21, 0, (uint64_t)v37);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 >= *(void *)(a3 + 16))
    {
      *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)v37);
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v38) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 8), v37[0], (unint64_t)v37[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v37;
        *(void *)(v22 + 16) = v38;
        *(_OWORD *)unint64_t v22 = v23;
      }
      *(void *)(a3 + 8) = v22 + 24;
      *(void *)(a3 + 8) = v22 + 24;
      if ((SHIBYTE(v38) & 0x80000000) == 0)
      {
LABEL_37:
        if (v40 < 0) {
          goto LABEL_55;
        }
        goto LABEL_38;
      }
    }
    operator delete(v37[0]);
    if (v40 < 0)
    {
LABEL_55:
      operator delete(v39[0]);
      unint64_t v24 = v36;
      if (!v36) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_38:
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_40;
    }
    do
    {
LABEL_39:
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
LABEL_40:
    uint64_t v26 = __p;
    long long __p = 0;
    if (v26) {
      operator delete(v26);
    }
    unint64_t v18 = (void **)v33;
    if (v33)
    {
      int64x2_t v27 = v34;
      unint64_t v20 = v33;
      if (v34 == v33) {
        goto LABEL_49;
      }
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v18);
LABEL_48:
      unint64_t v20 = v33;
LABEL_49:
      long long v34 = v18;
      operator delete(v20);
    }
LABEL_5:
    ++v7;
  }
  while (v7 != v8);
  if (v41 != v42) {
    sub_4DCCC0(a1, (uint64_t *)&v41);
  }
  if (v42) {
    operator delete(v42);
  }
}

void sub_4D4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_4D4B58((uint64_t)&a9);
  sub_4AF510((void **)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_4D4698(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4D46AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 8) = v35;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  sub_4D4880((void **)&a9);
  sub_4AF510((void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_4D4764(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4D4778(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    *(_OWORD *)long long __p = 0u;
    long long v8 = 0u;
    int v9 = 1065353216;
    sub_60E8D8(a1 + 3088, (uint64_t)&dword_25607D0, (uint64_t)__p, 0, (uint64_t)&v10);
    long long v4 = (void *)v8;
    if ((void)v8)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        long long v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
    v10.__r_.__value_.__s.__data_[0] = 0;
  }
  sub_6358A0(a3, &xmmword_25607A0, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_4D4850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4D4864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_4D4880(void **a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void **)*a1;
  if (*a1)
  {
    uint64_t v6 = (void **)a1[1];
    uint64_t v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_4D4928(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v10 = &v15;
    }
    else {
      std::string v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_4D4A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_4D4B58(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = 0;
      if (v2) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v2)
  {
LABEL_4:
    sub_4D4B58(v2);
    operator delete();
  }
LABEL_5:
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void **)(a1 + 72);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 9) < 0) {
          operator delete(*(void **)(v4 - 32));
        }
        v4 -= 32;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    long long v8 = *(void **)(a1 + 48);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      long long v8 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v6;
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    for (uint64_t i = *(void *)(a1 + 32); i != v9; sub_4F2DAC(a1 + 40, i))
      i -= 144;
    *(void *)(a1 + 32) = v9;
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v11 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v12 = *(void ***)(a1 + 8);
    long long v13 = *(void ***)a1;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      long long v13 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_4D4CF4(int *a1)
{
  if ((a1[314] - 2) < 9) {
    return 1;
  }
  if (!sub_605454((uint64_t)(a1 + 8))) {
    goto LABEL_7;
  }
  if (*((char *)a1 + 1175) < 0)
  {
    if (!*((void *)a1 + 145)) {
      goto LABEL_7;
    }
    return 1;
  }
  if (*((unsigned char *)a1 + 1175)) {
    return 1;
  }
LABEL_7:
  int v2 = *a1;
  unsigned int v3 = *a1 - 40;
  if (v3 >= 5 && (v2 == 45 || v2 != 50 && a1[350] == -1 && v2 != 48 && a1[351] == -1) || a1[314] == 11) {
    return 1;
  }
  if (*((char *)a1 + 1399) < 0) {
    uint64_t v4 = *((void *)a1 + 173);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)a1 + 1399);
  }
  BOOL v6 = v3 < 5;
  return v4 || v6;
}

uint64_t sub_4D4DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34((uint64_t)v63);
  BOOL v64 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  sub_5F3B34((uint64_t)&v68);
  v69[8] = -1;
  *(_DWORD *)((char *)v70 + 3) = -1;
  LODWORD(v70[0]) = -1;
  memset((char *)v70 + 7, 0, 26);
  uint64_t v72 = 0;
  long long v71 = 0uLL;
  char v73 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  sub_50081C(a1 + 1536, a2, (uint64_t)&v35);
  sub_635CD0((long long **)&v35, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_25:
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 407) = 0;
    *(void *)(a3 + 415) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 480) = 0u;
    long long v19 = v38;
    if (!v38) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_25;
  }
LABEL_3:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_6358A0((uint64_t)&v35, &xmmword_25607A0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_635CD0((long long **)&v35, (uint64_t)v32);
  BOOL v6 = (void *)sub_5231C((uint64_t)&v35);
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  uint64_t v56 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v52[4] = 0u;
  *(_OWORD *)&v48[4] = 0u;
  long long v49 = 0u;
  *(void *)int64x2_t v44 = 0x7FFFFFFFLL;
  *(_OWORD *)&v44[16] = 0u;
  *(_OWORD *)&v42[8] = 0u;
  uint64_t v41 = 0;
  *(int64x2_t *)unint64_t v42 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v43 = *(_OWORD *)v42;
  __p.__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
  uint64_t v40 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  *(_DWORD *)&v42[16] = 0x7FFFFFFF;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  *(void *)&v44[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v46 = 0u;
  memset(v47, 0, sizeof(v47));
  unint64_t v45 = 0x8000000080000000;
  *(void *)int64x2_t v48 = 0x8000000080000000;
  *(_DWORD *)&v48[8] = 0x7FFFFFFF;
  LODWORD(v49) = -1;
  uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
  int v51 = 0x7FFFFFFF;
  *(void *)int64x2_t v52 = 0x7FFFFFFF7FFFFFFFLL;
  long long v53 = _Q1;
  v54[1] = 0;
  v54[0] = 0;
  uint64_t v55 = 0;
  uint64_t v58 = 0;
  v57[0] = 0;
  v57[1] = 0;
  unint64_t v59 = 0xFFFFFFFF00000000;
  uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v32, v6, &__p, v34);
  sub_4D90B4((uint64_t)v63, (uint64_t)v34);
  sub_4D4B58((uint64_t)v34);
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  uint64_t v12 = (void **)v54[0];
  if (v54[0])
  {
    long long v13 = (void **)v54[1];
    uint64_t v14 = v54[0];
    if (v54[1] != v54[0])
    {
      do
        long long v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v54[0];
    }
    v54[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v47[8])
  {
    *(void *)&v47[16] = *(void *)&v47[8];
    operator delete(*(void **)&v47[8]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    uint64_t v16 = __p.__r_.__value_.__r.__words[2];
    std::string v17 = (void *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while (v16 != v15);
      std::string v17 = (void *)__p.__r_.__value_.__l.__size_;
    }
    __p.__r_.__value_.__r.__words[2] = v15;
    operator delete(v17);
  }
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if (*(_DWORD *)(a2 + 1256) == 12) {
      goto LABEL_37;
    }
  }
  else if (*(_DWORD *)(a2 + 1256) == 12)
  {
    goto LABEL_37;
  }
  if (sub_5F7924(v63, (char *)&qword_2560320))
  {
    unsigned int v20 = *(_DWORD *)(a2 + 1296);
    if ((int)v20 >= 36000)
    {
      if (v20 >> 8 > 0xD2E)
      {
        unsigned int v20 = 864000 * vcvtmd_s64_f64((double)(int)v20 / 864000.0);
      }
      else
      {
        if ((v20 % 0x8CA0) >> 4 <= 0x464) {
          unsigned int v21 = v20 / 0x8CA0;
        }
        else {
          unsigned int v21 = v20 / 0x8CA0 + 1;
        }
        unsigned int v20 = 36000 * v21;
      }
    }
    sub_5F66B8((uint64_t *)v63, (uint64_t)&qword_2560320, v20);
  }
LABEL_37:
  sub_4DC148(a1, (_DWORD *)a2, v63);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_49;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_77:
      BOOL v23 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_50;
    }
LABEL_49:
    BOOL v23 = 1;
    goto LABEL_50;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v22 = *(void *)(a2 + 1160);
  }
  BOOL v23 = 1;
  if (!v22 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_77;
  }
LABEL_50:
  BOOL v64 = v23;
  sub_4D9488(a2, (uint64_t)&__p);
  sub_4F377C((uint64_t)v69, (uint64_t)&__p);
  v70[0] = *(void *)v42;
  if (SHIBYTE(v70[3]) < 0) {
    operator delete((void *)v70[1]);
  }
  *(_OWORD *)&v70[1] = *(_OWORD *)&v42[8];
  v70[3] = v43;
  BYTE7(v43) = 0;
  v42[8] = 0;
  LOBYTE(v70[4]) = BYTE8(v43);
  if (SHIBYTE(v72) < 0)
  {
    operator delete((void *)v71);
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    if (SBYTE7(v43) < 0)
    {
      operator delete(*(void **)&v42[8]);
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
    else
    {
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
  }
  else
  {
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    int v24 = v41;
    if (v41 == 1)
    {
LABEL_54:
      uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_62;
      }
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      goto LABEL_61;
    }
  }
  if (!v24 && SHIBYTE(v40) < 0)
  {
    uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
LABEL_61:
    operator delete(v25);
  }
LABEL_62:
  sub_4F4498(a3, (uint64_t)v63);
  long long v19 = v38;
  if (!v38) {
    goto LABEL_64;
  }
  do
  {
LABEL_63:
    uint64_t v26 = (void *)*v19;
    sub_4F4B48((uint64_t)(v19 + 2));
    operator delete(v19);
    long long v19 = v26;
  }
  while (v26);
LABEL_64:
  int64x2_t v27 = v37;
  int64x2_t v37 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v35;
  if (v35)
  {
    int64x2_t v29 = v36;
    int v30 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      int v30 = v35;
    }
    uint64_t v36 = v28;
    operator delete(v30);
  }
  return sub_4F2FF8((uint64_t)v63);
}

void sub_4D5438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4DC10C(v33);
  sub_4D4B58(v32);
  sub_4D4880(&a32);
  sub_4F2FF8((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_4D5464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
}

void sub_4D5520(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500DBC(a2, (uint64_t)&v47);
  sub_635CD0((long long **)&v47, (uint64_t)v43);
  BOOL v6 = (void *)sub_5231C((uint64_t)&v47);
  uint64_t v72 = 0;
  uint64_t v74 = 0;
  uint64_t v68 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v64[4] = 0u;
  *(_OWORD *)&v60[4] = 0u;
  long long v61 = 0u;
  *(void *)uint64_t v56 = 0x7FFFFFFFLL;
  *(_OWORD *)&v56[16] = 0u;
  *(_OWORD *)&v54[8] = 0u;
  uint64_t v53 = 0;
  *(int64x2_t *)int64x2_t v54 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v55 = *(_OWORD *)v54;
  v51[0] = (void *)0xFFFFFFFFLL;
  long long v52 = 0uLL;
  v51[1] = 0;
  *(_DWORD *)&v54[16] = 0x7FFFFFFF;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  *(void *)&v56[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v58 = 0u;
  memset(v59, 0, sizeof(v59));
  unint64_t v57 = 0x8000000080000000;
  *(void *)uint64_t v60 = 0x8000000080000000;
  *(_DWORD *)&v60[8] = 0x7FFFFFFF;
  LODWORD(v61) = -1;
  uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  int v63 = 0x7FFFFFFF;
  *(void *)BOOL v64 = 0x7FFFFFFF7FFFFFFFLL;
  long long v65 = _Q1;
  v66[1] = 0;
  v66[0] = 0;
  uint64_t v67 = 0;
  uint64_t v70 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v71 = 0xFFFFFFFF00000000;
  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v43, v6, v51, (char **)&v45);
  sub_4D90B4(a3, (uint64_t)&v45);
  sub_4D4B58((uint64_t)&v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v66[0];
  if (v66[0])
  {
    long long v13 = (void **)v66[1];
    uint64_t v14 = v66[0];
    if (v66[1] != v66[0])
    {
      do
        long long v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v66[0];
    }
    v66[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v59[8])
  {
    *(void *)&v59[16] = *(void *)&v59[8];
    operator delete(*(void **)&v59[8]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  std::string::size_type v15 = v51[1];
  if (v51[1])
  {
    uint64_t v16 = v52;
    std::string v17 = v51[1];
    if ((void *)v52 != v51[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      std::string v17 = v51[1];
    }
    *(void *)&long long v52 = v15;
    operator delete(v17);
  }
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_78:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_78;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4D9B9C(a2, (uint64_t *)&v45);
  unsigned int v20 = (char *)v45;
  unsigned int v21 = v46;
  while (v20 != v21)
  {
    unint64_t v22 = *(void *)(a3 + 176);
    if (v22 >= *(void *)(a3 + 184))
    {
      uint64_t v23 = sub_4F6B24((void *)(a3 + 168), (uint64_t)v20);
    }
    else
    {
      sub_4F6CF8(*(void *)(a3 + 176), (uint64_t)v20);
      uint64_t v23 = v22 + 800;
      *(void *)(a3 + 176) = v23;
    }
    *(void *)(a3 + 176) = v23;
    sub_4D9344(a2, (std::string *)v51);
    unint64_t v24 = *(void *)(v23 - 16);
    if (v24 >= *(void *)(v23 - 8))
    {
      uint64_t v26 = sub_6E8C4((void **)(v23 - 24), (uint64_t)v51);
    }
    else
    {
      long long v25 = *(_OWORD *)v51;
      *(void *)(v24 + 16) = v52;
      *(_OWORD *)unint64_t v24 = v25;
      v51[1] = 0;
      *(void *)&long long v52 = 0;
      v51[0] = 0;
      uint64_t v26 = (char *)(v24 + 24);
    }
    *(void *)(v23 - 16) = v26;
    if (SBYTE7(v52) < 0) {
      operator delete(v51[0]);
    }
    v20 += 768;
  }
  sub_4D9488(a2, (uint64_t)v51);
  sub_4F377C(a3 + 352, (uint64_t)v51);
  *(void *)(a3 + 392) = *(void *)v54;
  int64x2_t v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)int64x2_t v27 = *(_OWORD *)&v54[8];
  *(void *)(a3 + 416) = v55;
  BYTE7(v55) = 0;
  v54[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v55);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v55);
    *uint64_t v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v54[8]);
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    *uint64_t v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    int v29 = v53;
    if (v53 == 1)
    {
LABEL_48:
      int v30 = v51[1];
      if (!v51[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v52 = v51[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v52) < 0)
  {
    int v30 = v51[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4D98BC(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v51);
    sub_4D90B4(a3 + 192, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
  }
  uint64_t v34 = (char *)v45;
  if (v45)
  {
    uint64_t v35 = (uint64_t)v46;
    uint64_t v36 = v45;
    if (v46 != v45)
    {
      do
        uint64_t v35 = sub_4F4A98(v35 - 768);
      while ((char *)v35 != v34);
      uint64_t v36 = v45;
    }
    int64x2_t v46 = v34;
    operator delete(v36);
  }
  int64x2_t v37 = v50;
  if (v50)
  {
    do
    {
      uint64_t v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      int64x2_t v37 = v38;
    }
    while (v38);
  }
  unint64_t v39 = v49;
  long long v49 = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t v40 = (void **)v47;
  if (v47)
  {
    uint64_t v41 = v48;
    unint64_t v42 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      unint64_t v42 = v47;
    }
    int64x2_t v48 = v40;
    operator delete(v42);
  }
}

void sub_4D5B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4D5BA0(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D5BB4(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4D5BE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x4D5C0CLL);
}

void sub_4D5BFC()
{
  *(void *)(v0 + 176) = v1;
  JUMPOUT(0x4D5C0CLL);
}

void sub_4D5C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4D9D74(&a12);
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_4D5C2C(uint64_t a1, uint64_t a2)
{
  sub_4D90B4(a1, a2);
  uint64_t v5 = (void **)(a1 + 168);
  uint64_t v4 = *(void ***)(a1 + 168);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  if (v4)
  {
    sub_4F3104(a1 + 168, v4);
    operator delete(*v5);
    *uint64_t v5 = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  sub_4D90B4(a1 + 192, a2 + 192);
  sub_4F377C(a1 + 352, a2 + 352);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  BOOL v6 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)BOOL v6 = v7;
  *(unsigned char *)(a2 + 423) = 0;
  *(unsigned char *)(a2 + 400) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  long long v8 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)long long v8 = v9;
  *(unsigned char *)(a2 + 455) = 0;
  *(unsigned char *)(a2 + 432) = 0;
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  uint64_t v10 = *(void *)(a1 + 464);
  if (v10)
  {
    uint64_t v11 = (void **)(a1 + 464);
    uint64_t v12 = *(void *)(a1 + 472);
    long long v13 = *(void **)(a1 + 464);
    if (v12 != v10)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v10);
      long long v13 = *v11;
    }
    *(void *)(a1 + 472) = v10;
    operator delete(v13);
    *uint64_t v11 = 0;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 480) = 0;
  }
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  return a1;
}

void sub_4D5DAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500EF8(a1 + 1536, a2, (uint64_t)&v24);
  sub_635CD0((long long **)&v24, (uint64_t)v22);
  uint64_t v6 = sub_5231C((uint64_t)&v24);
  sub_60E8D8(a1 + 3088, (uint64_t)v22, v6, 0, (uint64_t)&__p);
  sub_5F41E8(a3, (uint64_t)&__p);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22[0]);
LABEL_3:
  if (sub_5F7924((char ***)a3, byte_255F370))
  {
    unsigned int v7 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)byte_255F370, (float)v7);
  }
  if (sub_5F7924((char ***)a3, (char *)&qword_255F388))
  {
    unsigned int v8 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)&qword_255F388, (float)v8);
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_21;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_49:
      BOOL v10 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_22;
    }
LABEL_21:
    BOOL v10 = 1;
    goto LABEL_22;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 1160);
  }
  BOOL v10 = 1;
  if (!v9 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_49;
  }
LABEL_22:
  *(unsigned char *)(a3 + 160) = v10;
  sub_4D9488(a2, (uint64_t)&__p);
  sub_4F377C(a3 + 352, (uint64_t)&__p);
  *(void *)(a3 + 392) = v33;
  uint64_t v11 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v11);
  }
  uint64_t v12 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v34;
  *(void *)(a3 + 416) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34[0]) = 0;
  *(unsigned char *)(a3 + 424) = v36;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v14 = SHIBYTE(v35);
    _OWORD *v12 = v37;
    *(void *)(a3 + 448) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(v37) = 0;
    *(unsigned char *)(a3 + 456) = v39;
    if (v14 < 0)
    {
      operator delete(v34[0]);
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
    else
    {
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
LABEL_33:
    std::string::size_type v15 = v29;
    if (!v29) {
      goto LABEL_36;
    }
    int v30 = v29;
    goto LABEL_35;
  }
  _OWORD *v12 = v37;
  *(void *)(a3 + 448) = v38;
  HIBYTE(v38) = 0;
  LOBYTE(v37) = 0;
  *(unsigned char *)(a3 + 456) = v39;
  int v13 = v32;
  if (v32 == 1) {
    goto LABEL_33;
  }
LABEL_29:
  if (!v13 && v31 < 0)
  {
    std::string::size_type v15 = v29;
LABEL_35:
    operator delete(v15);
  }
LABEL_36:
  uint64_t v16 = v27;
  if (v27)
  {
    do
    {
      std::string v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  uint64_t v18 = v26;
  uint64_t v26 = 0;
  if (v18) {
    operator delete(v18);
  }
  BOOL v19 = (void **)v24;
  if (v24)
  {
    unsigned int v20 = v25;
    unsigned int v21 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      unsigned int v21 = v24;
    }
    long long v25 = v19;
    operator delete(v21);
  }
}

void sub_4D6160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_4D4880(&a16);
  sub_4F2FF8(v30);
  _Unwind_Resume(a1);
}

void sub_4D6210(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4DC900(a1, a2, 0, (uint64_t)&v25);
  sub_4D90B4(a3, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  unint64_t v6 = *(void *)(a3 + 176);
  if (v6 >= *(void *)(a3 + 184))
  {
    uint64_t v7 = sub_4F799C((void *)(a3 + 168));
  }
  else
  {
    *(_DWORD *)(v6 + 768) = -1;
    *(void *)(v6 + 776) = 0;
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    uint64_t v7 = v6 + 800;
  }
  *(void *)(a3 + 176) = v7;
  sub_4DBE18(a1, a2, &v25.__r_.__value_.__l.__data_);
  uint64_t v8 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v8, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  sub_4DC900(a1, a2, 1, (uint64_t)&v25);
  uint64_t v9 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v9 + 160, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  *(unsigned char *)(a3 + 160) = 0;
  sub_4D9488(*a2, (uint64_t)&v25);
  sub_4F377C(a3 + 352, (uint64_t)&v25);
  *(void *)(a3 + 392) = v28;
  BOOL v10 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v10);
  }
  uint64_t v11 = (_OWORD *)(a3 + 432);
  *(_OWORD *)BOOL v10 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v31;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v13 = SHIBYTE(v30);
    *uint64_t v11 = v32;
    *(void *)(a3 + 448) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *(unsigned char *)(a3 + 456) = v34;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
    else
    {
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
LABEL_15:
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
    if (!v25.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    goto LABEL_17;
  }
  *uint64_t v11 = v32;
  *(void *)(a3 + 448) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  *(unsigned char *)(a3 + 456) = v34;
  int v12 = v27;
  if (v27 == 1) {
    goto LABEL_15;
  }
LABEL_11:
  if (!v12 && v26 < 0)
  {
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
LABEL_17:
    operator delete(size);
  }
LABEL_18:
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      sub_4D9344(v15, &v25);
      unint64_t v17 = *(void *)(a3 + 472);
      if (v17 >= *(void *)(a3 + 480))
      {
        BOOL v19 = sub_6E8C4((void **)(a3 + 464), (uint64_t)&v25);
        int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 472) = v19;
        if (v20 < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v17 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v17 = v18;
        *(void *)(a3 + 472) = v17 + 24;
      }
      uint64_t v21 = *(void *)(a3 + 176);
      sub_4D9344(v15, &v25);
      unint64_t v22 = *(void *)(v21 - 16);
      if (v22 >= *(void *)(v21 - 8))
      {
        unint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)&v25);
      }
      else
      {
        long long v23 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v22 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v22 = v23;
        memset(&v25, 0, sizeof(v25));
        unint64_t v24 = (char *)(v22 + 24);
      }
      *(void *)(v21 - 16) = v24;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v15 += 1440;
    }
    while (v15 != v16);
  }
}

void sub_4D656C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D6580(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D6594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4D65C8(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D65DC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D65F0(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4D661C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4D666C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4DCCC0(a1, a2);
}

void sub_4D69C8(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D69DC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D69F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4D6A24(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D6A38(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4D6A4C(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4D6A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4D6AC8(uint64_t *a1, unint64_t a2)
{
  if (0x4FA4FA4FA4FA4FA5 * ((a1[2] - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2D82D82D82D82ELL) {
      sub_2E00();
    }
    uint64_t v3 = a1[1] - *a1;
    uint64_t v11 = a1 + 2;
    uint64_t v4 = 1440 * a2;
    std::string __p = operator new(1440 * a2);
    uint64_t v8 = (char *)__p + v3;
    uint64_t v9 = (char *)__p + v3;
    BOOL v10 = (char *)__p + v4;
    sub_4C0798(a1, &__p);
    unint64_t v6 = v8;
    for (uint64_t i = v9; v9 != v6; uint64_t i = v9)
    {
      uint64_t v9 = i - 1440;
      sub_4BD604((uint64_t)(i - 1440));
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_4D6BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_4D6BC4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v9 > 0x2D82D82D82D82DLL) {
      sub_2E00();
    }
    unint64_t v10 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v7 - v8) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x16C16C16C16C16) {
      unint64_t v11 = 0x2D82D82D82D82DLL;
    }
    else {
      unint64_t v11 = v9;
    }
    int v20 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x2D82D82D82D82DLL) {
        sub_188D718();
      }
      int v12 = (char *)operator new(1440 * v11);
    }
    else
    {
      int v12 = 0;
    }
    std::string __p = v12;
    unint64_t v17 = &v12[32 * ((uint64_t)(v4 - v8) >> 5)];
    long long v18 = v17;
    BOOL v19 = &v12[1440 * v11];
    sub_4F4DB8((uint64_t)&__p, a3);
    unint64_t v4 = sub_4C8DF0(a1, &__p, v4);
    int v14 = v17;
    for (uint64_t i = v18; v18 != v14; uint64_t i = v18)
    {
      long long v18 = i - 1440;
      sub_4BD604((uint64_t)(i - 1440));
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    sub_4C8540(a2, a3);
    a1[1] = v4 + 1440;
  }
  else
  {
    sub_4C8B88((uint64_t)a1, a2, v6, a2 + 1440);
    if (v4 <= a3) {
      a3 += 1440 * (a1[1] > a3);
    }
    sub_4C91C8(v4, a3);
  }
  return v4;
}

void sub_4D6D94(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_4D6D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4C09A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4D6DB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 1256) - 2;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  if (v6 < 9) {
    goto LABEL_9;
  }
  if (sub_605454(a2 + 32))
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1175);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 1160);
    }
    if (v7) {
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)a2 == 45)
  {
LABEL_9:
    sub_4D4DD0(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    sub_4D89E0(a1, a2, (uint64_t)__p);
LABEL_10:
    sub_4D5C2C(a3, (uint64_t)__p);
    sub_4F2FF8((uint64_t)__p);
    goto LABEL_11;
  }
  if (*(_DWORD *)(a2 + 1200) != 2)
  {
    sub_4D5520(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1256) != 12)
  {
    sub_4D5DAC(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1328) != *(void *)(a2 + 1336))
  {
    sub_4D9DD0(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v12 = *(_DWORD *)(a2 + 1360);
  if (v12)
  {
    if (v12 != 1) {
      goto LABEL_32;
    }
    int v13 = *(_DWORD *)(a2 + 1352);
    if (v13 == 0x7FFFFFFF || *(_DWORD *)(a2 + 1356) >= v13 || *(_DWORD *)(a2 + 1364) == 0x7FFFFFFF) {
      goto LABEL_32;
    }
LABEL_31:
    sub_4DA0C4(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v14 = *(_DWORD *)(a2 + 1352);
  if (v14 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v14) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v15 = *(unsigned __int8 *)(a2 + 1399);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 1384);
  }
  if (v15)
  {
    sub_4DA7D8(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1400) != -1 || *(_DWORD *)(a2 + 1404) != -1)
  {
    sub_57BD78(*(void *)(a1 + 5280), (uint64_t *)(a2 + 1400), a2 + 1416, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 == 48) {
    sub_4DAD44(a1);
  }
LABEL_11:
  if (*(void *)(a3 + 464) == *(void *)(a3 + 472))
  {
    sub_4D9344(a2, __p);
    unint64_t v8 = *(void *)(a3 + 472);
    if (v8 >= *(void *)(a3 + 480))
    {
      unint64_t v10 = sub_6E8C4((void **)(a3 + 464), (uint64_t)__p);
      int v11 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 472) = v10;
      if (v11 < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v8 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v9;
      *(void *)(a3 + 472) = v8 + 24;
    }
  }
}

void sub_4D70A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4D7104(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

char *sub_4D7130(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 496;
  unint64_t v8 = (char *)(*a1 + 496 * v7);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v15 > 0x84210842108421) {
      sub_2E00();
    }
    unint64_t v16 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v9 - v5) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x42108421084210) {
      unint64_t v17 = 0x84210842108421;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v33 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x84210842108421) {
        sub_188D718();
      }
      long long v18 = (char *)operator new(496 * v17);
    }
    else
    {
      long long v18 = 0;
    }
    int v29 = v18;
    uint64_t v30 = &v18[496 * v7];
    char v31 = v30;
    long long v32 = &v18[496 * v17];
    sub_4F50F4((uint64_t)&v29, a3);
    BOOL v19 = v30;
    uint64_t v20 = *a1;
    uint64_t v21 = (uint64_t)v30;
    if ((char *)*a1 != v8)
    {
      uint64_t v22 = (uint64_t)v8;
      uint64_t v21 = (uint64_t)v30;
      do
      {
        v22 -= 496;
        uint64_t v21 = sub_4F4498(v21 - 496, v22);
      }
      while (v22 != v20);
    }
    uint64_t v30 = (char *)v21;
    long long v23 = (char *)a1[1];
    uint64_t v24 = (uint64_t)v31;
    if (v23 != v8)
    {
      do
      {
        sub_4F4498(v24, (uint64_t)v8);
        v8 += 496;
        v24 += 496;
      }
      while (v8 != v23);
      uint64_t v21 = (uint64_t)v30;
      unint64_t v8 = (char *)a1[1];
    }
    std::string v25 = (char *)*a1;
    *a1 = v21;
    a1[1] = v24;
    char v26 = (char *)a1[2];
    a1[2] = (uint64_t)v32;
    char v31 = v8;
    long long v32 = v26;
    int v29 = v25;
    uint64_t v30 = v25;
    if (v8 != v25)
    {
      do
      {
        char v31 = v8 - 496;
        sub_4F2FF8((uint64_t)(v8 - 496));
        unint64_t v8 = v31;
      }
      while (v31 != v25);
      unint64_t v8 = v29;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      unint64_t v10 = v8 + 496;
      uint64_t v11 = v6 - 496;
      if (v6 < 0x1F0)
      {
        a1[1] = v6;
        if ((char *)v6 == v10)
        {
LABEL_34:
          sub_4D5C2C((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 496;
        uint64_t v13 = a1[1];
        do
        {
          uint64_t v14 = sub_4F4498(v13, v12);
          v12 += 496;
          uint64_t v13 = v14 + 496;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      do
      {
        sub_4D5C2C(v11, v5 + 496 * v7 - 496 + v27);
        v11 -= 496;
        v27 -= 496;
      }
      while (v27);
      goto LABEL_34;
    }
    sub_4F4498(*a1 + 496 * v7, a3);
    a1[1] = (uint64_t)(v8 + 496);
  }
  return v8;
}

void sub_4D73FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F4D64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4D7410()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v99 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = 0x4FA4FA4FA4FA4FA5 * ((v8 - *v1) >> 5);
  if (*v2 != v2[1]) {
    ++v9;
  }
  unint64_t v94 = v9;
  int64x2_t v106 = 0;
  int64x2_t v107 = 0;
  unint64_t v108 = 0;
  char v103 = 0;
  int64x2_t v104 = 0;
  unint64_t v105 = 0;
  char v130 = 0;
  char v128 = 0;
  int64x2_t v98 = v2;
  if (v8 != v7)
  {
    int v10 = 0;
    int64x2_t v101 = v1;
    while (1)
    {
      if (sub_605454(v7 + 32))
      {
        if (*(char *)(v7 + 1175) < 0)
        {
          if (*(void *)(v7 + 1160))
          {
LABEL_10:
            if (!*(unsigned char *)(v7 + 1144)) {
              goto LABEL_234;
            }
            if (sub_604340(v7 + 712, 0))
            {
              if (!*(unsigned char *)(v7 + 1144))
              {
LABEL_234:
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              sub_604384((char *)(v7 + 712), 0, (uint64_t)__dst);
LABEL_26:
              unint64_t v12 = v107;
              if ((unint64_t)v107 < v108) {
                goto LABEL_27;
              }
LABEL_24:
              uint64_t v13 = sub_6E6EC((char **)&v106, (uint64_t)__dst);
            }
            else
            {
              if (*(char *)(v7 + 495) < 0)
              {
                sub_4200(__dst, *(void **)(v7 + 472), *(void *)(v7 + 480));
                goto LABEL_26;
              }
              long long v11 = *(_OWORD *)(v7 + 472);
              int64x2_t v114 = *(void **)(v7 + 488);
              *(_OWORD *)std::string __dst = v11;
              unint64_t v12 = v107;
              if ((unint64_t)v107 >= v108) {
                goto LABEL_24;
              }
LABEL_27:
              if (SHIBYTE(v114) < 0)
              {
                sub_4200(v12, __dst[0], (unint64_t)__dst[1]);
              }
              else
              {
                long long v14 = *(_OWORD *)__dst;
                void v12[2] = v114;
                *(_OWORD *)unint64_t v12 = v14;
              }
              uint64_t v13 = (char *)(v12 + 3);
            }
            int64x2_t v107 = (void **)v13;
            sub_4D9488(v7, (uint64_t)&v131);
            unint64_t v15 = v104;
            if ((unint64_t)v104 >= v105)
            {
              int64x2_t v104 = sub_4F6D70(&v103, (uint64_t)&v131);
              if (SHIBYTE(v140) < 0)
              {
                operator delete((void *)__p);
                if (SHIBYTE(v137) < 0) {
                  goto LABEL_49;
                }
              }
              else if (SHIBYTE(v137) < 0)
              {
                goto LABEL_49;
              }
            }
            else
            {
              int v16 = v10;
              *((_DWORD *)v104 + 8) = v134;
              if (v134 == 1)
              {
                uint64_t v21 = v131;
                *((void *)v15 + 1) = 0;
                *(void *)unint64_t v15 = v21;
                *((void *)v15 + 2) = 0;
                *((void *)v15 + 3) = 0;
                uint64_t v22 = (const void *)v132;
                int64_t v23 = *((void *)&v132 + 1) - v132;
                if (*((void *)&v132 + 1) != (void)v132)
                {
                  if (v23 < 0) {
                    sub_2E00();
                  }
                  uint64_t v24 = (char *)operator new(*((void *)&v132 + 1) - v132);
                  *((void *)v15 + 1) = v24;
                  *((void *)v15 + 2) = v24;
                  std::string v25 = &v24[8 * (v23 >> 3)];
                  *((void *)v15 + 3) = v25;
                  memcpy(v24, v22, v23);
                  *((void *)v15 + 2) = v25;
                }
              }
              else if (!v134)
              {
                *(void *)unint64_t v15 = v131;
                unint64_t v17 = v15 + 8;
                if (SHIBYTE(v133) < 0)
                {
                  sub_4200(v17, (void *)v132, *((unint64_t *)&v132 + 1));
                }
                else
                {
                  long long v18 = v132;
                  *((void *)v15 + 3) = v133;
                  *(_OWORD *)unint64_t v17 = v18;
                }
              }
              *((void *)v15 + 5) = v135;
              long long v26 = v136;
              *((void *)v15 + 8) = v137;
              *((_OWORD *)v15 + 3) = v26;
              uint64_t v137 = 0;
              long long v136 = 0uLL;
              v15[72] = v138;
              long long v27 = __p;
              *((void *)v15 + 12) = v140;
              *((_OWORD *)v15 + 5) = v27;
              uint64_t v140 = 0;
              long long __p = 0uLL;
              v15[104] = v141;
              int64x2_t v104 = v15 + 112;
              int v10 = v16;
              uint64_t v3 = v98;
              if (SHIBYTE(v137) < 0)
              {
LABEL_49:
                operator delete((void *)v136);
                int v19 = v134;
                if (v134 == 1)
                {
LABEL_50:
                  uint64_t v20 = (void *)v132;
                  if ((void)v132)
                  {
                    *((void *)&v132 + 1) = v132;
LABEL_52:
                    operator delete(v20);
                  }
                  goto LABEL_53;
                }
LABEL_39:
                if (!v19 && SHIBYTE(v133) < 0)
                {
                  uint64_t v20 = (void *)v132;
                  goto LABEL_52;
                }
LABEL_53:
                if (SHIBYTE(v114) < 0) {
                  operator delete(__dst[0]);
                }
                ++v10;
                goto LABEL_6;
              }
            }
            int v19 = v134;
            if (v134 == 1) {
              goto LABEL_50;
            }
            goto LABEL_39;
          }
        }
        else if (*(unsigned char *)(v7 + 1175))
        {
          goto LABEL_10;
        }
      }
      if (*(_DWORD *)(v7 + 1200) != 1 || *(void *)(v7 + 1208) == *(void *)(v7 + 1216))
      {
        if (*(void *)(v7 + 1176) != *(void *)(v7 + 1184))
        {
          if (v128)
          {
            uint64_t v28 = v127;
LABEL_57:
            sub_4C91C8((uint64_t)v28, v7);
            goto LABEL_6;
          }
          sub_4C8540((uint64_t)v127, v7);
          char v128 = 1;
        }
      }
      else
      {
        if (v130)
        {
          uint64_t v28 = v129;
          goto LABEL_57;
        }
        sub_4C8540((uint64_t)v129, v7);
        char v130 = 1;
      }
LABEL_6:
      v7 += 1440;
      if (v7 == v8)
      {
        int v29 = (const void **)v106;
        uint64_t v30 = (const void **)v107;
        unint64_t v4 = v101;
        goto LABEL_60;
      }
    }
  }
  uint64_t v30 = 0;
  int v29 = 0;
  int v10 = 0;
LABEL_60:
  char v31 = sub_86F68(v29, v30);
  long long v32 = v107;
  if (v107 != v31)
  {
    while (v32 != v31)
    {
      if (*((char *)v32 - 1) < 0) {
        operator delete(*(v32 - 3));
      }
      v32 -= 3;
    }
    int64x2_t v107 = v31;
  }
  uint64_t v33 = sub_4F71B0((uint64_t)v103, (uint64_t)v104);
  sub_4F700C((uint64_t)&v103, v33, (uint64_t)v104);
  sub_5F3B34(v6);
  *(void *)(v6 + 168) = 0;
  *(unsigned char *)(v6 + 160) = 0;
  *(void *)(v6 + 176) = 0;
  *(void *)(v6 + 184) = 0;
  uint64_t v102 = (void *)(v6 + 168);
  sub_5F3B34(v6 + 192);
  *(_DWORD *)(v6 + 384) = -1;
  *(_DWORD *)(v6 + 392) = -1;
  *(_DWORD *)(v6 + 395) = -1;
  char v34 = (void **)(v6 + 432);
  *(void *)(v6 + 399) = 0;
  *(void *)(v6 + 415) = 0;
  *(void *)(v6 + 407) = 0;
  *(_WORD *)(v6 + 423) = 0;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = 0;
  *(void *)(v6 + 432) = 0;
  *(unsigned char *)(v6 + 456) = 0;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  if (v10 < 1)
  {
    if (!v130)
    {
      if (v128) {
        sub_4D9488((uint64_t)v127, (uint64_t)&v131);
      }
      else {
        sub_524D84(4, (uint64_t)&v131);
      }
      sub_4F377C(v6 + 352, (uint64_t)&v131);
      *(void *)(v6 + 392) = v135;
      int64x2_t v91 = (void **)(v6 + 400);
      if (*(char *)(v6 + 423) < 0) {
        operator delete(*v91);
      }
      char v92 = 0;
      *(_OWORD *)int64x2_t v91 = v136;
      *(void *)(v6 + 416) = v137;
      HIBYTE(v137) = 0;
      LOBYTE(v136) = 0;
      *(unsigned char *)(v6 + 424) = v138;
      if (*(char *)(v6 + 455) < 0)
      {
        operator delete(*v34);
        char v92 = HIBYTE(v137);
      }
      *(_OWORD *)char v34 = __p;
      *(void *)(v6 + 448) = v140;
      HIBYTE(v140) = 0;
      LOBYTE(__p) = 0;
      *(unsigned char *)(v6 + 456) = v141;
      if (v92 < 0) {
        operator delete((void *)v136);
      }
      goto LABEL_79;
    }
    sub_4D9488((uint64_t)v129, (uint64_t)&v131);
LABEL_74:
    sub_4F377C(v6 + 352, (uint64_t)&v131);
    *(void *)(v6 + 392) = v135;
    char v36 = (void **)(v6 + 400);
    if (*(char *)(v6 + 423) < 0) {
      operator delete(*v36);
    }
    char v37 = 0;
    *(_OWORD *)char v36 = v136;
    *(void *)(v6 + 416) = v137;
    HIBYTE(v137) = 0;
    LOBYTE(v136) = 0;
    *(unsigned char *)(v6 + 424) = v138;
    if (*(char *)(v6 + 455) < 0)
    {
      operator delete(*v34);
      char v37 = HIBYTE(v137);
    }
    *(_OWORD *)char v34 = __p;
    *(void *)(v6 + 448) = v140;
    HIBYTE(v140) = 0;
    LOBYTE(__p) = 0;
    *(unsigned char *)(v6 + 456) = v141;
    if (v37 < 0)
    {
      operator delete((void *)v136);
      int v38 = v134;
      if (v134 != 1)
      {
LABEL_80:
        if (v38 || (SHIBYTE(v133) & 0x80000000) == 0) {
          goto LABEL_87;
        }
        char v39 = (void *)v132;
        goto LABEL_86;
      }
LABEL_84:
      char v39 = (void *)v132;
      if (!(void)v132) {
        goto LABEL_87;
      }
      *((void *)&v132 + 1) = v132;
LABEL_86:
      operator delete(v39);
      goto LABEL_87;
    }
LABEL_79:
    int v38 = v134;
    if (v134 != 1) {
      goto LABEL_80;
    }
    goto LABEL_84;
  }
  if ((char *)v107 - (unsigned char *)v106 != 24 || (uint64_t v35 = (char *)v103, v104 - (unsigned char *)v103 != 112))
  {
    sub_524D84(4, (uint64_t)&v131);
    goto LABEL_74;
  }
  sub_4F39B8(v6 + 352, (std::string *)v103);
  *(void *)(v6 + 392) = *((void *)v35 + 5);
  std::string::operator=((std::string *)(v6 + 400), (const std::string *)v35 + 2);
  *(unsigned char *)(v6 + 424) = v35[72];
  std::string::operator=((std::string *)(v6 + 432), (const std::string *)(v35 + 80));
  *(unsigned char *)(v6 + 456) = v35[104];
LABEL_87:
  *(unsigned char *)(v6 + 160) = 1;
  uint64_t v40 = *v4;
  uint64_t v96 = v4[1];
  int64x2_t v97 = (void **)(v6 + 464);
  if (*v4 == v96) {
    goto LABEL_172;
  }
  int v95 = v10;
  do
  {
    uint64_t v100 = v40;
    sub_4D6DB0(v99, v40, (uint64_t)__dst);
    uint64_t v41 = v115;
    uint64_t v42 = v116;
    while (v41 != v42)
    {
      if (*(_DWORD *)(v41 + 768) == 1 && (sub_4F3B98((uint64_t)&v117, v6 + 352) & 1) == 0)
      {
        if (*(_DWORD *)(v41 + 768) != -1)
        {
          if ((uint64_t *)(v41 + 320) == &v117) {
            goto LABEL_138;
          }
          goto LABEL_116;
        }
        bzero(&v131, 0x300uLL);
        sub_5F3B34((uint64_t)&v131);
        sub_5F3B34((uint64_t)&v142);
        *(_DWORD *)unsigned int v147 = -1;
        memset(&v147[8], 255, 7);
        uint64_t v149 = 0;
        long long v148 = 0uLL;
        *(_WORD *)int v150 = 0;
        memset(&v151, 0, sizeof(v151));
        char v152 = 0;
        sub_5F3B34((uint64_t)&v153);
        sub_5F3B34((uint64_t)v157);
        v157[10] = xmmword_20E22B0;
        int v44 = *(_DWORD *)(v41 + 768);
        if (v44 == 1)
        {
          sub_4F4314(v41, (uint64_t)&v131);
        }
        else
        {
          if (!v44 && *(char *)(v41 + 23) < 0) {
            operator delete(*(void **)v41);
          }
          sub_4F3F14(v41, (uint64_t)&v131);
        }
        *(_DWORD *)(v41 + 768) = 1;
        sub_4D4B58((uint64_t)v157);
        sub_4D4B58((uint64_t)&v153);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v151.__r_.__value_.__l.__data_);
          if ((v150[0] & 0x80000000) != 0) {
            goto LABEL_111;
          }
LABEL_106:
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 != 1) {
            goto LABEL_107;
          }
LABEL_112:
          int64x2_t v46 = v144;
          if (v144)
          {
            int64x2_t v145 = v144;
LABEL_114:
            operator delete(v46);
          }
        }
        else
        {
          if ((v150[0] & 0x80000000) == 0) {
            goto LABEL_106;
          }
LABEL_111:
          operator delete(*(void **)((char *)&v148 + 1));
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 == 1) {
            goto LABEL_112;
          }
LABEL_107:
          if (!v45 && v146 < 0)
          {
            int64x2_t v46 = v144;
            goto LABEL_114;
          }
        }
        sub_4D4B58((uint64_t)&v142);
        sub_4D4B58((uint64_t)&v131);
        if ((uint64_t *)(v41 + 320) == &v117)
        {
LABEL_138:
          *(void *)(v41 + 360) = v120;
          std::string::operator=((std::string *)(v41 + 368), &v121);
          *(unsigned char *)(v41 + 392) = v122;
          std::string::operator=((std::string *)(v41 + 400), &v123);
          *(unsigned char *)(v41 + 424) = v124;
          goto LABEL_139;
        }
LABEL_116:
        int v47 = *(_DWORD *)(v41 + 352);
        int v48 = v119;
        if (v47 == v119)
        {
          if (v47 == 1)
          {
            *(void *)(v41 + 320) = v117;
            sub_326C0((void *)(v41 + 328), __src.__r_.__value_.__l.__data_, (char *)__src.__r_.__value_.__l.__size_, (uint64_t)(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]) >> 3);
          }
          else if (!v47)
          {
            *(void *)(v41 + 320) = v117;
            std::string::operator=((std::string *)(v41 + 328), &__src);
          }
          goto LABEL_138;
        }
        if (v47 == 1)
        {
          long long v49 = *(void **)(v41 + 328);
          if (v49)
          {
            *(void *)(v41 + 336) = v49;
LABEL_127:
            operator delete(v49);
          }
LABEL_128:
          int v48 = v119;
        }
        else if (!v47)
        {
          if (*(char *)(v41 + 351) < 0)
          {
            long long v49 = *(void **)(v41 + 328);
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (v48 == 1)
        {
          *(void *)(v41 + 320) = v117;
          *(void *)(v41 + 328) = 0;
          *(void *)(v41 + 336) = 0;
          *(void *)(v41 + 344) = 0;
          long long v52 = (const void *)__src.__r_.__value_.__r.__words[0];
          int64_t v53 = __src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_ != __src.__r_.__value_.__r.__words[0])
          {
            if (v53 < 0) {
              sub_2E00();
            }
            int64x2_t v54 = (char *)operator new(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]);
            *(void *)(v41 + 328) = v54;
            *(void *)(v41 + 336) = v54;
            long long v55 = &v54[8 * (v53 >> 3)];
            *(void *)(v41 + 344) = v55;
            memcpy(v54, v52, v53);
            *(void *)(v41 + 336) = v55;
          }
        }
        else if (!v48)
        {
          *(void *)(v41 + 320) = v117;
          uint64_t v50 = (unsigned char *)(v41 + 328);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v50, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v51 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
            *(void *)(v41 + 344) = *((void *)&__src.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v50 = v51;
          }
        }
        *(_DWORD *)(v41 + 352) = v119;
        goto LABEL_138;
      }
LABEL_139:
      unint64_t v56 = *(void *)(v6 + 176);
      if (v56 >= *(void *)(v6 + 184))
      {
        uint64_t v43 = sub_4F72D0(v102, v41);
      }
      else
      {
        *(_DWORD *)(v56 + 768) = *(_DWORD *)(v41 + 768);
        int v57 = *(_DWORD *)(v41 + 768);
        switch(v57)
        {
          case 2:
            *(void *)unint64_t v56 = *(void *)v41;
            break;
          case 1:
            sub_4F58AC(v56, v41);
            sub_4F58AC(v56 + 160, v41 + 160);
            *(_DWORD *)(v56 + 352) = *(_DWORD *)(v41 + 352);
            int v59 = *(_DWORD *)(v41 + 352);
            if (v59 == 1)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              *(void *)(v56 + 328) = 0;
              *(void *)(v56 + 336) = 0;
              *(void *)(v56 + 344) = 0;
              int v63 = *(unsigned char **)(v41 + 328);
              uint64_t v62 = *(unsigned char **)(v41 + 336);
              int64_t v64 = v62 - v63;
              if (v62 != v63)
              {
                if (v64 < 0) {
                  sub_2E00();
                }
                long long v65 = (char *)operator new(v62 - v63);
                *(void *)(v56 + 328) = v65;
                *(void *)(v56 + 336) = v65;
                uint64_t v66 = &v65[8 * (v64 >> 3)];
                *(void *)(v56 + 344) = v66;
                memcpy(v65, v63, v64);
                *(void *)(v56 + 336) = v66;
              }
            }
            else if (!v59)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              uint64_t v60 = (unsigned char *)(v56 + 328);
              if (*(char *)(v41 + 351) < 0)
              {
                sub_4200(v60, *(void **)(v41 + 328), *(void *)(v41 + 336));
              }
              else
              {
                long long v61 = *(_OWORD *)(v41 + 328);
                *(void *)(v56 + 344) = *(void *)(v41 + 344);
                *(_OWORD *)uint64_t v60 = v61;
              }
            }
            *(void *)(v56 + 360) = *(void *)(v41 + 360);
            if (*(char *)(v41 + 391) < 0)
            {
              sub_4200((unsigned char *)(v56 + 368), *(void **)(v41 + 368), *(void *)(v41 + 376));
            }
            else
            {
              long long v67 = *(_OWORD *)(v41 + 368);
              *(void *)(v56 + 384) = *(void *)(v41 + 384);
              *(_OWORD *)(v56 + 368) = v67;
            }
            *(unsigned char *)(v56 + 392) = *(unsigned char *)(v41 + 392);
            uint64_t v68 = (unsigned char *)(v56 + 400);
            if (*(char *)(v41 + 423) < 0)
            {
              sub_4200(v68, *(void **)(v41 + 400), *(void *)(v41 + 408));
            }
            else
            {
              long long v69 = *(_OWORD *)(v41 + 400);
              *(void *)(v56 + 416) = *(void *)(v41 + 416);
              *(_OWORD *)uint64_t v68 = v69;
            }
            *(unsigned char *)(v56 + 424) = *(unsigned char *)(v41 + 424);
            sub_4F58AC(v56 + 432, v41 + 432);
            sub_4F58AC(v56 + 592, v41 + 592);
            *(_OWORD *)(v56 + 752) = *(_OWORD *)(v41 + 752);
            break;
          case 0:
            if (*(char *)(v41 + 23) < 0)
            {
              sub_4200((unsigned char *)v56, *(void **)v41, *(void *)(v41 + 8));
            }
            else
            {
              long long v58 = *(_OWORD *)v41;
              *(void *)(v56 + 16) = *(void *)(v41 + 16);
              *(_OWORD *)unint64_t v56 = v58;
            }
            break;
        }
        *(void *)(v56 + 792) = 0;
        *(_OWORD *)(v56 + 776) = 0u;
        uint64_t v70 = *(void *)(v41 + 776);
        uint64_t v71 = *(void *)(v41 + 784);
        uint64_t v131 = (char *)(v56 + 776);
        LOBYTE(v132) = 0;
        if (v71 != v70)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3) >= 0xAAAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          uint64_t v72 = (char *)operator new(v71 - v70);
          uint64_t v73 = 0;
          *(void *)(v56 + 776) = v72;
          *(void *)(v56 + 784) = v72;
          *(void *)(v56 + 792) = &v72[8 * ((v71 - v70) >> 3)];
          do
          {
            long long v75 = &v72[v73];
            int64x2_t v76 = (long long *)(v70 + v73);
            if (*(char *)(v70 + v73 + 23) < 0)
            {
              sub_4200(v75, *(void **)v76, *((void *)v76 + 1));
            }
            else
            {
              long long v74 = *v76;
              *((void *)v75 + 2) = *((void *)v76 + 2);
              *(_OWORD *)long long v75 = v74;
            }
            v73 += 24;
          }
          while (v70 + v73 != v71);
          *(void *)(v56 + 784) = &v72[v73];
        }
        uint64_t v43 = v56 + 800;
        *(void *)(v6 + 176) = v56 + 800;
      }
      *(void *)(v6 + 176) = v43;
      v41 += 800;
    }
    sub_84F50(v97, *(void *)(v6 + 472), v125, v126, 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 3));
    int v10 = v95;
    uint64_t v3 = v98;
    sub_4F2FF8((uint64_t)__dst);
    uint64_t v40 = v100 + 1440;
  }
  while (v100 + 1440 != v96);
LABEL_172:
  if (*v3 != v3[1])
  {
    sub_4D6210(v99, v3, (uint64_t)&v131);
    if ((sub_4F3B98((uint64_t)v147, v6 + 352) & 1) == 0)
    {
      uint64_t v77 = sub_4DB6A8(v143);
      sub_4F39B8(v77 + 320, (std::string *)v147);
      *(void *)(v77 + 360) = *(void *)&v150[1];
      std::string::operator=((std::string *)(v77 + 368), &v151);
      *(unsigned char *)(v77 + 392) = v152;
      std::string::operator=((std::string *)(v77 + 400), &v153);
      *(unsigned char *)(v77 + 424) = v154;
    }
    unint64_t v78 = *(void *)(v6 + 176);
    if (v78 >= *(void *)(v6 + 184))
    {
      uint64_t v79 = sub_4F72D0(v102, v143);
    }
    else
    {
      sub_4F74A4(*(char **)(v6 + 176), v143);
      uint64_t v79 = v78 + 800;
      *(void *)(v6 + 176) = v78 + 800;
    }
    *(void *)(v6 + 176) = v79;
    sub_4F7594(v97, *(void *)(v6 + 472), v155, v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
    sub_4F2FF8((uint64_t)&v131);
  }
  if (v10 >= 1)
  {
    sub_4DB770(v99, v10, (uint64_t)&v106, v94 != v10, &v131);
    goto LABEL_181;
  }
  if (v130)
  {
    char v112 = v130;
    sub_4C8540((uint64_t)v111, (uint64_t)v129);
    BOOL v80 = v94 > 1;
    char v110 = v128;
    if (!v128)
    {
LABEL_190:
      sub_4DBA50(v99, (uint64_t)v111, (uint64_t)v109, v80, &v131);
      sub_4D90B4(v6, (uint64_t)&v131);
      sub_4D4B58((uint64_t)&v131);
      if (v110)
      {
        sub_4BD604((uint64_t)v109);
        char v110 = 0;
      }
      if (v112)
      {
        sub_4BD604((uint64_t)v111);
        char v112 = 0;
      }
      goto LABEL_194;
    }
LABEL_189:
    sub_4C8540((uint64_t)v109, (uint64_t)v127);
    goto LABEL_190;
  }
  if (v128)
  {
    char v112 = 0;
    BOOL v80 = v94 > 1;
    char v110 = v128;
    goto LABEL_189;
  }
  sub_4D98BC(v99, 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v6 + 176) - *(void *)(v6 + 168)) >> 5), &v131);
LABEL_181:
  sub_4D90B4(v6, (uint64_t)&v131);
  sub_4D4B58((uint64_t)&v131);
LABEL_194:
  uint64_t v81 = *(void *)(v6 + 168);
  uint64_t v82 = *(void *)(v6 + 176);
  if (v81 != v82)
  {
    sub_4D98BC(v99, 0x8F5C28F5C28F5C29 * ((v82 - v81) >> 5), &v131);
    sub_4D90B4(v6 + 192, (uint64_t)&v131);
    sub_4D4B58((uint64_t)&v131);
  }
  if (v128) {
    sub_4BD604((uint64_t)v127);
  }
  if (v130) {
    sub_4BD604((uint64_t)v129);
  }
  int64x2_t v83 = (char *)v103;
  if (v103)
  {
    int64x2_t v84 = v104;
    int64x2_t v85 = v103;
    if (v104 == v103)
    {
LABEL_216:
      int64x2_t v104 = v83;
      operator delete(v85);
      goto LABEL_217;
    }
    while (2)
    {
      if (*(v84 - 9) < 0)
      {
        operator delete(*((void **)v84 - 4));
        if (*(v84 - 41) < 0) {
          goto LABEL_212;
        }
LABEL_207:
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 != 1) {
          goto LABEL_208;
        }
LABEL_213:
        int64x2_t v87 = (void *)*((void *)v84 - 13);
        if (v87)
        {
          *((void *)v84 - 12) = v87;
LABEL_203:
          operator delete(v87);
        }
      }
      else
      {
        if ((*(v84 - 41) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_212:
        operator delete(*((void **)v84 - 8));
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 == 1) {
          goto LABEL_213;
        }
LABEL_208:
        if (!v86 && *(v84 - 81) < 0)
        {
          int64x2_t v87 = (void *)*((void *)v84 - 13);
          goto LABEL_203;
        }
      }
      v84 -= 112;
      if (v84 == v83)
      {
        int64x2_t v85 = v103;
        goto LABEL_216;
      }
      continue;
    }
  }
LABEL_217:
  int64x2_t v88 = (void **)v106;
  if (v106)
  {
    int64x2_t v89 = v107;
    int64x2_t v90 = v106;
    if (v107 != v106)
    {
      do
      {
        if (*((char *)v89 - 1) < 0) {
          operator delete(*(v89 - 3));
        }
        v89 -= 3;
      }
      while (v89 != v88);
      int64x2_t v90 = v106;
    }
    int64x2_t v107 = v88;
    operator delete(v90);
  }
}

void sub_4D8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_4F2FF8(v34);
  if (*(unsigned char *)(v35 + 1440)) {
    sub_4BD604((uint64_t)&STACK[0xE28]);
  }
  if (*(unsigned char *)(v35 + 2888)) {
    sub_4BD604((uint64_t)&STACK[0x13D0]);
  }
  sub_4DBDDC(&a31);
  sub_1A668(&a34);
  _Unwind_Resume(a1);
}

void sub_4D89E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500CAC(a1 + 1536, a2, (uint64_t)&v43);
  sub_635CD0((long long **)&v43, (uint64_t)v40);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v43);
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  uint64_t v64 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v60[4] = 0u;
  *(_OWORD *)&v56[4] = 0u;
  long long v57 = 0u;
  *(void *)long long v52 = 0x7FFFFFFFLL;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)&v50[8] = 0u;
  uint64_t v49 = 0;
  *(int64x2_t *)uint64_t v50 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v51 = *(_OWORD *)v50;
  v47[0] = (void *)0xFFFFFFFFLL;
  long long v48 = 0uLL;
  v47[1] = 0;
  *(_DWORD *)&v50[16] = 0x7FFFFFFF;
  *(_DWORD *)&v52[8] = 0x7FFFFFFF;
  *(void *)&v52[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v54 = 0u;
  memset(v55, 0, sizeof(v55));
  unint64_t v53 = 0x8000000080000000;
  *(void *)unint64_t v56 = 0x8000000080000000;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  LODWORD(v57) = -1;
  uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
  int v59 = 0x7FFFFFFF;
  *(void *)uint64_t v60 = 0x7FFFFFFF7FFFFFFFLL;
  long long v61 = _Q1;
  v62[1] = 0;
  v62[0] = 0;
  uint64_t v63 = 0;
  uint64_t v66 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v67 = 0xFFFFFFFF00000000;
  uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v40, v6, v47, v42);
  sub_4D90B4(a3, (uint64_t)v42);
  sub_4D4B58((uint64_t)v42);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v12 = (void **)v62[0];
  if (v62[0])
  {
    uint64_t v13 = (void **)v62[1];
    long long v14 = v62[0];
    if (v62[1] != v62[0])
    {
      do
        uint64_t v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      long long v14 = v62[0];
    }
    v62[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v55[8])
  {
    *(void *)&v55[16] = *(void *)&v55[8];
    operator delete(*(void **)&v55[8]);
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  unint64_t v15 = v47[1];
  if (v47[1])
  {
    uint64_t v16 = v48;
    unint64_t v17 = v47[1];
    if ((void *)v48 != v47[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      unint64_t v17 = v47[1];
    }
    *(void *)&long long v48 = v15;
    operator delete(v17);
  }
  if (v41 < 0)
  {
    operator delete(v40[0]);
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  else
  {
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  do
  {
    unint64_t v20 = *(void *)(a3 + 176);
    if (v20 >= *(void *)(a3 + 184))
    {
      uint64_t v21 = sub_4F52DC((void *)(a3 + 168), v18);
    }
    else
    {
      sub_4F54B0(*(void *)(a3 + 176), v18);
      uint64_t v21 = v20 + 800;
      *(void *)(a3 + 176) = v21;
    }
    *(void *)(a3 + 176) = v21;
    sub_4D9344(a2, (std::string *)v47);
    unint64_t v22 = *(void *)(v21 - 16);
    if (v22 >= *(void *)(v21 - 8))
    {
      uint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)v47);
    }
    else
    {
      long long v23 = *(_OWORD *)v47;
      *(void *)(v22 + 16) = v48;
      *(_OWORD *)unint64_t v22 = v23;
      v47[1] = 0;
      *(void *)&long long v48 = 0;
      v47[0] = 0;
      uint64_t v24 = (char *)(v22 + 24);
    }
    *(void *)(v21 - 16) = v24;
    if (SBYTE7(v48) < 0) {
      operator delete(v47[0]);
    }
    long long v18 = (long long *)((char *)v18 + 24);
  }
  while (v18 != v19);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_43;
  }
LABEL_32:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_43;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_73:
      BOOL v26 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_44;
    }
LABEL_43:
    BOOL v26 = 1;
    goto LABEL_44;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v25 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v25 = *(void *)(a2 + 1160);
  }
  BOOL v26 = 1;
  if (!v25 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_73;
  }
LABEL_44:
  *(unsigned char *)(a3 + 160) = v26;
  sub_4D9488(a2, (uint64_t)v47);
  sub_4F377C(a3 + 352, (uint64_t)v47);
  *(void *)(a3 + 392) = *(void *)v50;
  long long v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v27 = *(_OWORD *)&v50[8];
  *(void *)(a3 + 416) = v51;
  BYTE7(v51) = 0;
  v50[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v51);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v51);
    *uint64_t v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v50[8]);
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    *uint64_t v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    int v29 = v49;
    if (v49 == 1)
    {
LABEL_48:
      uint64_t v30 = v47[1];
      if (!v47[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v48 = v47[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v48) < 0)
  {
    uint64_t v30 = v47[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4D98BC(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v47);
    sub_4D90B4(a3 + 192, (uint64_t)v47);
    sub_4D4B58((uint64_t)v47);
  }
  uint64_t v34 = v46;
  if (v46)
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      uint64_t v34 = v35;
    }
    while (v35);
  }
  char v36 = v45;
  int v45 = 0;
  if (v36) {
    operator delete(v36);
  }
  char v37 = (void **)v43;
  if (v43)
  {
    int v38 = v44;
    char v39 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v43;
    }
    int v44 = v37;
    operator delete(v39);
  }
}

void sub_4D8FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v49);
  _Unwind_Resume(a1);
}

void sub_4D9078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  *(void *)(v32 + 176) = v33;
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_4D90B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    uint64_t v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    for (uint64_t i = *(void *)(a1 + 32); i != v7; sub_4F2DAC(a1 + 40, i))
      i -= 144;
    *(void *)(a1 + 32) = v7;
    operator delete(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v9 = (void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    unint64_t v12 = *(void **)(a1 + 48);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      unint64_t v12 = *v9;
    }
    *(void *)(a1 + 56) = v10;
    operator delete(v12);
    *uint64_t v9 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = (void **)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 72);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = *(void **)(a1 + 72);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 9) < 0) {
          operator delete(*(void **)(v15 - 32));
        }
        v15 -= 32;
      }
      while (v15 != v14);
      uint64_t v16 = *v13;
    }
    *(void *)(a1 + 80) = v14;
    operator delete(v16);
    *uint64_t v13 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v17 = *(void *)(a2 + 96);
  if (v17)
  {
    *(void *)(a2 + 96) = 0;
    uint64_t v18 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v17;
    if (v18) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v18)
    {
LABEL_32:
      sub_4D4B58(v18);
      operator delete();
    }
  }
  int v19 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v19;
  unint64_t v20 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)unint64_t v20 = v21;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  unint64_t v22 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)unint64_t v22 = v23;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  return a1;
}

void sub_4D9344(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = a1 + 32;
  if (sub_605454(a1 + 32))
  {
    if (*(char *)(a1 + 1175) < 0)
    {
      if (*(void *)(a1 + 1160)) {
        goto LABEL_4;
      }
    }
    else if (*(unsigned char *)(a1 + 1175))
    {
LABEL_4:
      sub_4F3390(v4, a2);
      return;
    }
  }
  if (*(void *)(a1 + 1176) == *(void *)(a1 + 1184))
  {
    if (*(_DWORD *)(a1 + 1200) != 1 || *(void *)(a1 + 1208) == *(void *)(a1 + 1216))
    {
      if ((byte_2560AB7 & 0x80000000) == 0)
      {
        uint64_t v5 = &xmmword_2560AA0;
        goto LABEL_17;
      }
      uint64_t v6 = &xmmword_2560AA0;
    }
    else
    {
      if ((byte_2560A87 & 0x80000000) == 0)
      {
        uint64_t v5 = &xmmword_2560A70;
        goto LABEL_17;
      }
      uint64_t v6 = &xmmword_2560A70;
    }
  }
  else
  {
    if ((byte_2560A6F & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_2560A58;
LABEL_17:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v5;
      a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      return;
    }
    uint64_t v6 = &xmmword_2560A58;
  }
  uint64_t v7 = *(void **)v6;
  unint64_t v8 = *((void *)v6 + 1);

  sub_4200(a2, v7, v8);
}

void sub_4D9488(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_605454(a1 + 32))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1175);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a1 + 1160);
    }
    if (v4)
    {
      if (!*(unsigned char *)(a1 + 1144))
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v5 = *(int *)(a1 + 768);
      if (v5 > 0x13)
      {
        uint64_t v6 = 4;
        uint64_t v7 = a2;
      }
      else
      {
        uint64_t v6 = dword_20E81F0[v5];
        uint64_t v7 = a2;
      }
LABEL_9:
      sub_524D84(v6, v7);
      return;
    }
  }
  if (*(_DWORD *)(a1 + 1200) == 2)
  {
    if (*(void *)(a1 + 1176) != *(void *)(a1 + 1184))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 42;
      goto LABEL_9;
    }
    if (*(_DWORD *)a1 == 45)
    {
LABEL_22:
      uint64_t v7 = a2;
      uint64_t v6 = 39;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(a1 + 1256) - 2) >= 0xB)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 5;
      goto LABEL_9;
    }
    if (*(void *)(a1 + 1328) != *(void *)(a1 + 1336))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 6;
      goto LABEL_9;
    }
    int v14 = *(_DWORD *)(a1 + 1360);
    if (v14)
    {
      if (v14 == 1)
      {
        int v15 = *(_DWORD *)(a1 + 1352);
        if (v15 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v15 && *(_DWORD *)(a1 + 1364) != 0x7FFFFFFF) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a1 + 1352);
      if (v16 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v16) {
        goto LABEL_22;
      }
    }
    if (sub_4D4CF4((int *)a1) || *(_DWORD *)a1 != 48)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v6 = 51;
    }
    goto LABEL_9;
  }
  uint64_t v8 = a1 + 1232;
  if (*(char *)(a1 + 1255) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1240);
    if (v9)
    {
      uint64_t v10 = *(void **)v8;
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(a1 + 1255))
  {
LABEL_36:
    *(_OWORD *)long long __p = *(_OWORD *)v8;
    uint64_t v19 = *(void *)(v8 + 16);
    goto LABEL_48;
  }
  uint64_t v11 = *(void *)(a1 + 1208);
  uint64_t v12 = *(void *)(a1 + 1216);
  if (v11 != v12)
  {
    while (1)
    {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 159);
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v11 + 144);
      }
      if (v13) {
        break;
      }
      v11 += 168;
      if (v11 == v12) {
        goto LABEL_37;
      }
    }
  }
  if (v11 == v12)
  {
LABEL_37:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    goto LABEL_48;
  }
  if ((*(char *)(v11 + 159) & 0x80000000) == 0)
  {
    uint64_t v8 = v11 + 136;
    goto LABEL_36;
  }
  uint64_t v10 = *(void **)(v11 + 136);
  unint64_t v9 = *(void *)(v11 + 144);
LABEL_47:
  sub_4200(__p, v10, v9);
LABEL_48:
  sub_524E5C((uint64_t)__p, a2);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_4D97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4D9814(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      int v2 = *(_DWORD *)(a1 + 32);
      if (v2 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 != 1)
  {
LABEL_4:
    if (v2 || (*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 8));
    return a1;
  }
LABEL_9:
  uint64_t v4 = *(void **)(a1 + 8);
  if (!v4) {
    return a1;
  }
  *(void *)(a1 + 16) = v4;
  operator delete(v4);
  return a1;
}

void sub_4D98BC(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  sub_505610(a1 + 1536, a2, (uint64_t)&v25);
  sub_635CD0((long long **)&v25, (uint64_t)v23);
  uint64_t v5 = (void *)sub_5231C((uint64_t)&v25);
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v44[4] = 0u;
  *(_OWORD *)&v40[4] = 0u;
  long long v41 = 0u;
  uint64_t v34 = 0x7FFFFFFFLL;
  *(_OWORD *)&v36[4] = 0u;
  *(_OWORD *)&v32[8] = 0u;
  uint64_t v31 = 0;
  *(int64x2_t *)uint64_t v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v33 = *(_OWORD *)v32;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  *(_DWORD *)&v32[16] = 0x7FFFFFFF;
  int v35 = 0x7FFFFFFF;
  *(void *)char v36 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v38 = 0u;
  memset(v39, 0, sizeof(v39));
  unint64_t v37 = 0x8000000080000000;
  *(void *)uint64_t v40 = 0x8000000080000000;
  *(_DWORD *)&v40[8] = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)int v44 = 0x7FFFFFFF7FFFFFFFLL;
  long long v45 = _Q1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v23, v5, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v11 = (void **)v46[0];
  if (v46[0])
  {
    uint64_t v12 = (void **)v46[1];
    uint64_t v13 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        uint64_t v12 = sub_4F31D0(v12 - 13);
      while (v12 != v11);
      uint64_t v13 = v46[0];
    }
    v46[1] = v11;
    operator delete(v13);
  }
  if (*(void *)&v39[8])
  {
    *(void *)&v39[16] = *(void *)&v39[8];
    operator delete(*(void **)&v39[8]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  int v14 = v29[1];
  if (v29[1])
  {
    uint64_t v15 = v30;
    int v16 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v15 = sub_4D4B58(v15 - 160);
      while ((void *)v15 != v14);
      int v16 = v29[1];
    }
    *(void *)&long long v30 = v14;
    operator delete(v16);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v17 = v28;
  if (v28)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = v27;
  long long v27 = 0;
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = (void **)v25;
  if (v25)
  {
    long long v21 = v26;
    unint64_t v22 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      unint64_t v22 = v25;
    }
    BOOL v26 = v20;
    operator delete(v22);
  }
}

void sub_4D9B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4D9B9C(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 1200);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_4BF330((uint64_t)&v13, *(void *)(a1 + 1208), *(void *)(a1 + 1216), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 1216) - *(void *)(a1 + 1208)) >> 3));
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    if (v13 != (void *)v14)
    {
      uint64_t v6 = (uint64_t)v13 + 56;
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          if (*(void *)(v6 + 8))
          {
LABEL_9:
            if (*(void *)(v6 + 48) != *(void *)(v6 + 56))
            {
              unint64_t v8 = a2[1];
              if (v8 >= a2[2])
              {
                unint64_t v9 = sub_4F7F70(a2);
              }
              else
              {
                bzero((void *)a2[1], 0x300uLL);
                sub_4DC580(v8);
                unint64_t v9 = (char *)(v8 + 768);
                a2[1] = v8 + 768;
              }
              a2[1] = (uint64_t)v9;
              sub_5F3D48((uint64_t)v12, v6);
              sub_4D90B4(a2[1] - 768, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
              sub_5F3D48((uint64_t)v12, *(void *)(v6 + 48));
              sub_4D90B4(a2[1] - 608, (uint64_t)v12);
              sub_4D4B58((uint64_t)v12);
            }
          }
        }
        else if (*(unsigned char *)(v6 + 23))
        {
          goto LABEL_9;
        }
        uint64_t v7 = v6 + 112;
        v6 += 168;
        if (v7 == v5)
        {
          uint64_t v4 = v13;
          break;
        }
      }
    }
    if (v4)
    {
      uint64_t v10 = v14;
      uint64_t v11 = v4;
      if ((void *)v14 != v4)
      {
        do
          uint64_t v10 = sub_4BCFD0(v10 - 168);
        while ((void *)v10 != v4);
        uint64_t v11 = v13;
      }
      uint64_t v14 = (uint64_t)v4;
      operator delete(v11);
    }
  }
}

void sub_4D9D1C(_Unwind_Exception *a1)
{
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void sub_4D9D30(_Unwind_Exception *a1)
{
  sub_4B1DB4((void **)(v2 - 56));
  sub_4D9D74(v1);
  _Unwind_Resume(a1);
}

void **sub_4D9D74(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4F4A98(v3 - 768);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_4D9DD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_70F9AC((uint64_t *)(a1 + 5264), (void *)(a2 + 1328), &v13);
  sub_5F41E8(a3, (uint64_t)&v13);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_13;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_31:
      BOOL v7 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_14;
    }
LABEL_13:
    BOOL v7 = 1;
    goto LABEL_14;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 1160);
  }
  BOOL v7 = 1;
  if (!v6 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_31;
  }
LABEL_14:
  *(unsigned char *)(a3 + 160) = v7;
  sub_4D9488(a2, (uint64_t)v14);
  sub_4F377C(a3 + 352, (uint64_t)v14);
  *(void *)(a3 + 392) = v19;
  unint64_t v8 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v8);
  }
  unint64_t v9 = (_OWORD *)(a3 + 432);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v22;
  if ((*(char *)(a3 + 455) & 0x80000000) == 0)
  {
    *unint64_t v9 = v23;
    *(void *)(a3 + 448) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(unsigned char *)(a3 + 456) = v25;
    int v10 = v18;
    if (v18 == 1) {
      goto LABEL_25;
    }
LABEL_21:
    if (v10 || (v17 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    uint64_t v12 = v15;
    goto LABEL_27;
  }
  operator delete(*(void **)(a3 + 432));
  int v11 = SHIBYTE(v21);
  *unint64_t v9 = v23;
  *(void *)(a3 + 448) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  *(unsigned char *)(a3 + 456) = v25;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
  else
  {
    int v10 = v18;
    if (v18 != 1) {
      goto LABEL_21;
    }
  }
LABEL_25:
  uint64_t v12 = v15;
  if (!v15) {
    goto LABEL_28;
  }
  int v16 = v15;
LABEL_27:
  operator delete(v12);
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_4DA05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4F2FF8(v14);
  _Unwind_Resume(a1);
}

void sub_4DA0C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_504B34(a2, (uint64_t)&v48);
  sub_635CD0((long long **)&v48, (uint64_t)v44);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v48);
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  uint64_t v69 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v65[4] = 0u;
  *(_OWORD *)&v61[4] = 0u;
  long long v62 = 0u;
  *(void *)long long v57 = 0x7FFFFFFFLL;
  *(_OWORD *)&v57[16] = 0u;
  *(_OWORD *)&v55[8] = 0u;
  uint64_t v54 = 0;
  *(int64x2_t *)long long v55 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v56 = *(_OWORD *)v55;
  v52[0] = (void *)0xFFFFFFFFLL;
  long long v53 = 0uLL;
  v52[1] = 0;
  *(_DWORD *)&v55[16] = 0x7FFFFFFF;
  *(_DWORD *)&v57[8] = 0x7FFFFFFF;
  *(void *)&v57[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v59 = 0u;
  memset(v60, 0, sizeof(v60));
  unint64_t v58 = 0x8000000080000000;
  *(void *)long long v61 = 0x8000000080000000;
  *(_DWORD *)&v61[8] = 0x7FFFFFFF;
  LODWORD(v62) = -1;
  uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
  int v64 = 0x7FFFFFFF;
  *(void *)long long v65 = 0x7FFFFFFF7FFFFFFFLL;
  long long v66 = _Q1;
  v67[1] = 0;
  v67[0] = 0;
  uint64_t v68 = 0;
  uint64_t v71 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v72 = 0xFFFFFFFF00000000;
  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v44, v6, v52, (char **)v46);
  sub_4D90B4(a3, (uint64_t)v46);
  sub_4D4B58((uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v67[0];
  if (v67[0])
  {
    std::string v13 = (void **)v67[1];
    uint64_t v14 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v67[0];
    }
    v67[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v60[8])
  {
    *(void *)&v60[16] = *(void *)&v60[8];
    operator delete(*(void **)&v60[8]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  uint64_t v15 = v52[1];
  if (v52[1])
  {
    uint64_t v16 = v53;
    char v17 = v52[1];
    if ((void *)v53 != v52[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v52[1];
    }
    *(void *)&long long v53 = v15;
    operator delete(v17);
  }
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (*(_DWORD *)(a2 + 1360) != 1) {
      goto LABEL_49;
    }
  }
  else if (*(_DWORD *)(a2 + 1360) != 1)
  {
    goto LABEL_49;
  }
  int v18 = *(_DWORD *)(a2 + 1352);
  if (v18 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v18 && *(_DWORD *)(a2 + 1364) != 0x7FFFFFFF)
  {
    sub_635CD0((long long **)&v48, (uint64_t)v46);
    uint64_t v19 = sub_5231C((uint64_t)&v48);
    sub_60E8D8(a1 + 3088, (uint64_t)v46, v19, 0, (uint64_t)v52);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    uint64_t v20 = BYTE7(v53);
    char v21 = BYTE7(v53);
    char v22 = (SBYTE7(v53) & 0x80u) == 0 ? v52 : (void **)v52[0];
    long long v23 = byte_2560967 >= 0 ? &qword_2560950 : (uint64_t *)qword_2560950;
    int64_t v24 = byte_2560967 >= 0 ? byte_2560967 : unk_2560958;
    if (v24)
    {
      if (SBYTE7(v53) < 0) {
        uint64_t v20 = (uint64_t)v52[1];
      }
      if (v20 >= v24)
      {
        char v25 = (char *)v22 + v20;
        int v26 = *(char *)v23;
        long long v27 = v22;
        do
        {
          uint64_t v28 = v20 - v24;
          if (v28 == -1) {
            break;
          }
          int v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          long long v30 = v29;
          if (!memcmp(v29, v23, v24))
          {
            if (v30 == v25 || v30 - (char *)v22 == -1) {
              break;
            }
            goto LABEL_47;
          }
          long long v27 = (void **)(v30 + 1);
          uint64_t v20 = v25 - (v30 + 1);
        }
        while (v20 >= v24);
      }
    }
    else
    {
LABEL_47:
      LODWORD(v46[0]) = *(_DWORD *)(a2 + 1364);
      sub_5F5F70(a3, (long long *)&qword_2560950, v46, a1 + 1488, 0);
      char v21 = BYTE7(v53);
    }
    if (v21 < 0)
    {
      operator delete(v52[0]);
      if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
        goto LABEL_63;
      }
      goto LABEL_50;
    }
  }
LABEL_49:
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_63;
  }
LABEL_50:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_63;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_91:
      BOOL v32 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_64;
    }
LABEL_63:
    BOOL v32 = 1;
    goto LABEL_64;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v31 = *(void *)(a2 + 1160);
  }
  BOOL v32 = 1;
  if (!v31 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_91;
  }
LABEL_64:
  *(unsigned char *)(a3 + 160) = v32;
  sub_4D9488(a2, (uint64_t)v52);
  sub_4F377C(a3 + 352, (uint64_t)v52);
  *(void *)(a3 + 392) = *(void *)v55;
  long long v33 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v33);
  }
  uint64_t v34 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v33 = *(_OWORD *)&v55[8];
  *(void *)(a3 + 416) = v56;
  BYTE7(v56) = 0;
  v55[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v56);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v37 = SBYTE7(v56);
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    if (v37 < 0)
    {
      operator delete(*(void **)&v55[8]);
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
    else
    {
      int v35 = v54;
      if (v54 == 1) {
        goto LABEL_68;
      }
    }
  }
  else
  {
    *uint64_t v34 = *(_OWORD *)v57;
    *(void *)(a3 + 448) = *(void *)&v57[16];
    v57[23] = 0;
    v57[0] = 0;
    *(unsigned char *)(a3 + 456) = v57[24];
    int v35 = v54;
    if (v54 == 1)
    {
LABEL_68:
      char v36 = v52[1];
      if (!v52[1]) {
        goto LABEL_76;
      }
      *(void **)&long long v53 = v52[1];
      goto LABEL_75;
    }
  }
  if (!v35 && SHIBYTE(v53) < 0)
  {
    char v36 = v52[1];
LABEL_75:
    operator delete(v36);
  }
LABEL_76:
  int v38 = v51;
  if (v51)
  {
    do
    {
      char v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      int v38 = v39;
    }
    while (v39);
  }
  uint64_t v40 = v50;
  uint64_t v50 = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v48;
  if (v48)
  {
    uint64_t v42 = v49;
    int v43 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      int v43 = v48;
    }
    uint64_t v49 = v41;
    operator delete(v43);
  }
}

void sub_4DA70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a38);
    sub_4F2FF8(v52);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a38);
  sub_4F2FF8(v52);
  _Unwind_Resume(a1);
}

void sub_4DA798(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4DA7AC(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4DA7D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_501250(a2, (uint64_t)&v34);
  sub_635CD0((long long **)&v34, (uint64_t)v31);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v34);
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v55 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v51[4] = 0u;
  *(_OWORD *)&v47[4] = 0u;
  long long v48 = 0u;
  *(void *)int v43 = 0x7FFFFFFFLL;
  *(_OWORD *)&v43[16] = 0u;
  *(_OWORD *)&v41[8] = 0u;
  uint64_t v40 = 0;
  *(int64x2_t *)long long v41 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v42 = *(_OWORD *)v41;
  v38[0] = (void *)0xFFFFFFFFLL;
  long long v39 = 0uLL;
  v38[1] = 0;
  *(_DWORD *)&v41[16] = 0x7FFFFFFF;
  *(_DWORD *)&v43[8] = 0x7FFFFFFF;
  *(void *)&v43[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)char v45 = 0u;
  memset(v46, 0, sizeof(v46));
  unint64_t v44 = 0x8000000080000000;
  *(void *)char v47 = 0x8000000080000000;
  *(_DWORD *)&v47[8] = 0x7FFFFFFF;
  LODWORD(v48) = -1;
  uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  int v50 = 0x7FFFFFFF;
  *(void *)unint64_t v51 = 0x7FFFFFFF7FFFFFFFLL;
  long long v52 = _Q1;
  v53[1] = 0;
  v53[0] = 0;
  uint64_t v54 = 0;
  uint64_t v57 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v58 = 0xFFFFFFFF00000000;
  uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v31, v6, v38, v33);
  sub_4D90B4(a3, (uint64_t)v33);
  sub_4D4B58((uint64_t)v33);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v53[0];
  if (v53[0])
  {
    std::string v13 = (void **)v53[1];
    uint64_t v14 = v53[0];
    if (v53[1] != v53[0])
    {
      do
        std::string v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v53[0];
    }
    v53[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v46[8])
  {
    *(void *)&v46[16] = *(void *)&v46[8];
    operator delete(*(void **)&v46[8]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  uint64_t v15 = v38[1];
  if (v38[1])
  {
    uint64_t v16 = v39;
    char v17 = v38[1];
    if ((void *)v39 != v38[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      char v17 = v38[1];
    }
    *(void *)&long long v39 = v15;
    operator delete(v17);
  }
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_60:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_60;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4D9488(a2, (uint64_t)v38);
  sub_4F377C(a3 + 352, (uint64_t)v38);
  *(void *)(a3 + 392) = *(void *)v41;
  uint64_t v20 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v20);
  }
  char v21 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)&v41[8];
  *(void *)(a3 + 416) = v42;
  BYTE7(v42) = 0;
  v41[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v42);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v23 = SBYTE7(v42);
    _OWORD *v21 = *(_OWORD *)v43;
    *(void *)(a3 + 448) = *(void *)&v43[16];
    v43[23] = 0;
    v43[0] = 0;
    *(unsigned char *)(a3 + 456) = v43[24];
    if (v23 < 0)
    {
      operator delete(*(void **)&v41[8]);
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
    else
    {
      int v22 = v40;
      if (v40 != 1) {
        goto LABEL_40;
      }
    }
LABEL_44:
    int64_t v24 = v38[1];
    if (!v38[1]) {
      goto LABEL_47;
    }
    *(void **)&long long v39 = v38[1];
    goto LABEL_46;
  }
  _OWORD *v21 = *(_OWORD *)v43;
  *(void *)(a3 + 448) = *(void *)&v43[16];
  v43[23] = 0;
  v43[0] = 0;
  *(unsigned char *)(a3 + 456) = v43[24];
  int v22 = v40;
  if (v40 == 1) {
    goto LABEL_44;
  }
LABEL_40:
  if (!v22 && SHIBYTE(v39) < 0)
  {
    int64_t v24 = v38[1];
LABEL_46:
    operator delete(v24);
  }
LABEL_47:
  char v25 = v37;
  if (v37)
  {
    do
    {
      int v26 = (void *)*v25;
      sub_4F4B48((uint64_t)(v25 + 2));
      operator delete(v25);
      char v25 = v26;
    }
    while (v26);
  }
  long long v27 = v36;
  char v36 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v34;
  if (v34)
  {
    int v29 = v35;
    long long v30 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      long long v30 = v34;
    }
    int v35 = v28;
    operator delete(v30);
  }
}

void sub_4DACA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4DAD04(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4DAD18(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4DAD44(uint64_t a1)
{
  sub_4DC580((uint64_t)v19);
  sub_506080((uint64_t)&v17);
  sub_635CD0((long long **)&v17, (uint64_t)&v11);
  uint64_t v2 = sub_5231C((uint64_t)&v17);
  sub_60E8D8(a1 + 3088, (uint64_t)&v11, v2, 0, (uint64_t)&__p);
  sub_5F3D48((uint64_t)v18, (uint64_t)&__p);
  sub_4D90B4((uint64_t)v19, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v16 < 0)
  {
    operator delete(__p);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11);
LABEL_3:
  sub_506090((uint64_t)&__p);
  sub_635CD0((long long **)&__p, (uint64_t)v5);
  uint64_t v3 = sub_5231C((uint64_t)&__p);
  sub_60E8D8(a1 + 3088, (uint64_t)v5, v3, 0, (uint64_t)&v11);
  sub_5F3D48((uint64_t)v18, (uint64_t)&v11);
  sub_4D90B4((uint64_t)&v20, (uint64_t)v18);
  sub_4D4B58((uint64_t)v18);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_5:
      if ((byte_2560B47 & 0x80000000) == 0)
      {
LABEL_6:
        *(_OWORD *)std::string __dst = xmmword_2560B30;
        uint64_t v14 = unk_2560B40;
        goto LABEL_12;
      }
LABEL_11:
      sub_4200(__dst, (void *)xmmword_2560B30, *((unint64_t *)&xmmword_2560B30 + 1));
LABEL_12:
      sub_5F3D48((uint64_t)v18, (uint64_t)__dst);
      sub_4D90B4((uint64_t)&v21, (uint64_t)v18);
      sub_4D4B58((uint64_t)v18);
      sub_5060A0((uint64_t)&v11);
      sub_635CD0((long long **)&v11, (uint64_t)v8);
      uint64_t v4 = sub_5231C((uint64_t)&v11);
      sub_60E8D8(a1 + 3088, (uint64_t)v8, v4, 0, (uint64_t)v9);
      if (byte_2560B77 < 0)
      {
        sub_4200(v5, (void *)xmmword_2560B60, *((unint64_t *)&xmmword_2560B60 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v5 = xmmword_2560B60;
        uint64_t v6 = unk_2560B70;
      }
      if (SHIBYTE(v10) < 0)
      {
        sub_4200(v7, v9[0], (unint64_t)v9[1]);
      }
      else
      {
        *(_OWORD *)BOOL v7 = *(_OWORD *)v9;
        v7[2] = v10;
      }
      sub_5F2B70(v18, (long long *)__dst);
    }
  }
  else if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v5[0]);
  if ((byte_2560B47 & 0x80000000) == 0) {
    goto LABEL_6;
  }
  goto LABEL_11;
}

void sub_4DB47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        sub_4D4880(&a33);
        if (a47 < 0) {
          operator delete(a42);
        }
        sub_4D4880(&a48);
        sub_4D4880(&a57);
        sub_4F4A98((uint64_t)&STACK[0x208]);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a21);
      goto LABEL_9;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a26 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

uint64_t sub_4DB6A8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 768) == -1)
  {
    bzero(v4, 0x300uLL);
    sub_4DC580((uint64_t)v4);
    int v2 = *(_DWORD *)(a1 + 768);
    if (v2 == 1)
    {
      sub_4F4314(a1, (uint64_t)v4);
    }
    else
    {
      if (!v2 && *(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      sub_4F3F14(a1, (uint64_t)v4);
    }
    *(_DWORD *)(a1 + 768) = 1;
    sub_4F4A98((uint64_t)v4);
  }
  return a1;
}

void sub_4DB770(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  sub_504C8C(a1 + 1536, a2, a3, a4, (uint64_t)&v27);
  sub_635CD0((long long **)&v27, (uint64_t)v25);
  BOOL v7 = (void *)sub_5231C((uint64_t)&v27);
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  uint64_t v50 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v46[4] = 0u;
  *(_OWORD *)&v42[4] = 0u;
  long long v43 = 0u;
  uint64_t v36 = 0x7FFFFFFFLL;
  *(_OWORD *)&v38[4] = 0u;
  *(_OWORD *)&v34[8] = 0u;
  uint64_t v33 = 0;
  *(int64x2_t *)uint64_t v34 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v35 = *(_OWORD *)v34;
  v31[0] = (void *)0xFFFFFFFFLL;
  long long v32 = 0uLL;
  v31[1] = 0;
  *(_DWORD *)&v34[16] = 0x7FFFFFFF;
  int v37 = 0x7FFFFFFF;
  *(void *)int v38 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v40 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v39 = 0x8000000080000000;
  *(void *)long long v42 = 0x8000000080000000;
  *(_DWORD *)&v42[8] = 0x7FFFFFFF;
  LODWORD(v43) = -1;
  uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  int v45 = 0x7FFFFFFF;
  *(void *)int64x2_t v46 = 0x7FFFFFFF7FFFFFFFLL;
  long long v47 = _Q1;
  v48[0] = 0;
  v48[1] = 0;
  uint64_t v49 = 0;
  __p[1] = 0;
  uint64_t v52 = 0;
  __p[0] = 0;
  unint64_t v53 = 0xFFFFFFFF00000000;
  uint64_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v25, v7, v31, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::string v13 = (void **)v48[0];
  if (v48[0])
  {
    uint64_t v14 = (void **)v48[1];
    uint64_t v15 = v48[0];
    if (v48[1] != v48[0])
    {
      do
        uint64_t v14 = sub_4F31D0(v14 - 13);
      while (v14 != v13);
      uint64_t v15 = v48[0];
    }
    v48[1] = v13;
    operator delete(v15);
  }
  if (*(void *)&v41[8])
  {
    *(void *)&v41[16] = *(void *)&v41[8];
    operator delete(*(void **)&v41[8]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  char v16 = v31[1];
  if (v31[1])
  {
    uint64_t v17 = v32;
    uint64_t v18 = v31[1];
    if ((void *)v32 != v31[1])
    {
      do
        uint64_t v17 = sub_4D4B58(v17 - 160);
      while ((void *)v17 != v16);
      uint64_t v18 = v31[1];
    }
    *(void *)&long long v32 = v16;
    operator delete(v18);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  BOOL v19 = v30;
  if (v30)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      BOOL v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = v29;
  int v29 = 0;
  if (v21) {
    operator delete(v21);
  }
  int v22 = (void **)v27;
  if (v27)
  {
    int v23 = v28;
    int64_t v24 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      int64_t v24 = v27;
    }
    uint64_t v28 = v22;
    operator delete(v24);
  }
}

void sub_4DBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4DBA50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  char v62 = *(unsigned char *)(a2 + 1440);
  if (v62) {
    sub_4C8540((uint64_t)v61, a2);
  }
  char v60 = *(unsigned char *)(a3 + 1440);
  if (v60) {
    sub_4C8540((uint64_t)v59, a3);
  }
  sub_505468(a1 + 1536, (uint64_t)v61, (uint64_t)v59, a4, (uint64_t)&v29);
  if (v60)
  {
    sub_4BD604((uint64_t)v59);
    char v60 = 0;
  }
  if (v62)
  {
    sub_4BD604((uint64_t)v61);
    char v62 = 0;
  }
  sub_635CD0((long long **)&v29, (uint64_t)v27);
  unint64_t v9 = (void *)sub_5231C((uint64_t)&v29);
  uint64_t v56 = 0;
  uint64_t v58 = 0;
  uint64_t v52 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v48[4] = 0u;
  *(_OWORD *)&v44[4] = 0u;
  long long v45 = 0u;
  uint64_t v38 = 0x7FFFFFFFLL;
  *(_OWORD *)&v40[4] = 0u;
  *(_OWORD *)&v36[8] = 0u;
  uint64_t v35 = 0;
  *(int64x2_t *)uint64_t v36 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v37 = *(_OWORD *)v36;
  v33[0] = (void *)0xFFFFFFFFLL;
  long long v34 = 0uLL;
  v33[1] = 0;
  *(_DWORD *)&v36[16] = 0x7FFFFFFF;
  int v39 = 0x7FFFFFFF;
  *(void *)uint64_t v40 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v41 = 0x8000000080000000;
  *(void *)uint64_t v44 = 0x8000000080000000;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  LODWORD(v45) = -1;
  uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
  int v47 = 0x7FFFFFFF;
  *(void *)long long v48 = 0x7FFFFFFF7FFFFFFFLL;
  long long v49 = _Q1;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  __p[0] = 0;
  unint64_t v55 = 0xFFFFFFFF00000000;
  uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v27, v9, v33, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v50[0];
  if (v50[0])
  {
    char v16 = (void **)v50[1];
    uint64_t v17 = v50[0];
    if (v50[1] != v50[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v50[0];
    }
    v50[1] = v15;
    operator delete(v17);
  }
  if (*(void *)&v43[8])
  {
    *(void *)&v43[16] = *(void *)&v43[8];
    operator delete(*(void **)&v43[8]);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  uint64_t v18 = v33[1];
  if (v33[1])
  {
    uint64_t v19 = v34;
    uint64_t v20 = v33[1];
    if ((void *)v34 != v33[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v33[1];
    }
    *(void *)&long long v34 = v18;
    operator delete(v20);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  uint64_t v21 = v32;
  if (v32)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v31;
  uint64_t v31 = 0;
  if (v23) {
    operator delete(v23);
  }
  int64_t v24 = (void **)v29;
  if (v29)
  {
    char v25 = v30;
    char v26 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      char v26 = v29;
    }
    long long v30 = v24;
    operator delete(v26);
  }
}

void sub_4DBD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4DBD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x758]))
  {
    sub_4BD604((uint64_t)&a64);
    LOBYTE(STACK[0x758]) = 0;
  }
  if (LOBYTE(STACK[0xD00]))
  {
    sub_4BD604((uint64_t)&STACK[0x760]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_4DBDDC(uint64_t *a1)
{
  if (*a1)
  {
    sub_4F43F0(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_4DBE18(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  unint64_t v5 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5);
  uint64_t v6 = 2640;
  if (v5 > 1) {
    uint64_t v6 = 2664;
  }
  BOOL v7 = &xmmword_2560800;
  if (v5 <= 1) {
    BOOL v7 = &xmmword_25607E8;
  }
  unint64_t v8 = &byte_25607FF;
  if (v5 > 1) {
    unint64_t v8 = (char *)&word_2560816 + 1;
  }
  if (*v8 < 0)
  {
    if (v5 <= 1) {
      unint64_t v9 = (unint64_t *)&xmmword_25607E8 + 1;
    }
    else {
      unint64_t v9 = (unint64_t *)&xmmword_2560800 + 1;
    }
    sub_4200(__dst, *(void **)((char *)&xmmword_255FD98 + v6), *v9);
  }
  else
  {
    *(_OWORD *)std::string __dst = *v7;
    uint64_t v28 = *((void *)v7 + 2);
  }
  *(_OWORD *)int64_t v24 = 0u;
  long long v25 = 0u;
  int v26 = 1065353216;
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v48 = 1;
  *(_OWORD *)&v44[4] = 0u;
  long long v41 = 0u;
  *(_OWORD *)&v37[4] = 0u;
  uint64_t v35 = 0x7FFFFFFFLL;
  v29[0] = (void *)0xFFFFFFFFLL;
  long long v30 = 0uLL;
  v29[1] = 0;
  uint64_t v31 = 0;
  int64x2_t v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v33 = 0x7FFFFFFFLL;
  int64x2_t v34 = v32;
  int v36 = 0x7FFFFFFF;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v45 = _Q1;
  *(void *)long long v37 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int v39 = 0u;
  memset(v40, 0, sizeof(v40));
  unint64_t v38 = 0x8000000080000000;
  *(void **)((char *)&v40[4] + 4) = (void *)0x8000000080000000;
  HIDWORD(v40[5]) = 0x7FFFFFFF;
  LODWORD(v41) = -1;
  uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
  int v43 = 0x7FFFFFFF;
  *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  __p[0] = 0;
  unint64_t v51 = 0xFFFFFFFF00000000;
  uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)__dst, v24, v29, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = (void **)v46[0];
  if (v46[0])
  {
    char v16 = (void **)v46[1];
    uint64_t v17 = v46[0];
    if (v46[1] != v46[0])
    {
      do
        char v16 = sub_4F31D0(v16 - 13);
      while (v16 != v15);
      uint64_t v17 = v46[0];
    }
    v46[1] = v15;
    operator delete(v17);
  }
  if (v40[1])
  {
    v40[2] = v40[1];
    operator delete(v40[1]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  uint64_t v18 = v29[1];
  if (v29[1])
  {
    uint64_t v19 = v30;
    uint64_t v20 = v29[1];
    if ((void *)v30 != v29[1])
    {
      do
        uint64_t v19 = sub_4D4B58(v19 - 160);
      while ((void *)v19 != v18);
      uint64_t v20 = v29[1];
    }
    *(void *)&long long v30 = v18;
    operator delete(v20);
  }
  uint64_t v21 = (void *)v25;
  if ((void)v25)
  {
    do
    {
      int v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  int v23 = v24[0];
  v24[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_4DC0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***sub_4DC10C(void ***a1)
{
  if (*a1)
  {
    sub_4F3104((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_4DC148(uint64_t a1, _DWORD *a2, void *a3)
{
  if (*a2 != 45)
  {
    unint64_t v6 = a3[22];
    if (v6 >= a3[23])
    {
      uint64_t v7 = sub_4F799C(a3 + 21);
    }
    else
    {
      *(_DWORD *)(v6 + 768) = -1;
      *(void *)(v6 + 776) = 0;
      *(void *)(v6 + 792) = 0;
      *(void *)(v6 + 784) = 0;
      uint64_t v7 = v6 + 800;
    }
    a3[22] = v7;
    sub_4D9344((uint64_t)a2, (std::string *)__p);
    unint64_t v8 = *(void *)(v7 - 16);
    if (v8 >= *(void *)(v7 - 8))
    {
      int v10 = sub_6E8C4((void **)(v7 - 24), (uint64_t)__p);
    }
    else
    {
      long long v9 = *(_OWORD *)__p;
      *(void *)(v8 + 16) = v38;
      *(_OWORD *)unint64_t v8 = v9;
      __p[1] = 0;
      *(void *)&long long v38 = 0;
      __p[0] = 0;
      int v10 = (char *)(v8 + 24);
    }
    *(void *)(v7 - 16) = v10;
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = sub_4DB6A8(a3[22] - 800);
    sub_501654((uint64_t)a2, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v30);
    char v12 = (void *)sub_5231C((uint64_t)&v33);
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v56 = 1;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v52[4] = 0u;
    *(_OWORD *)&v48[4] = 0u;
    long long v49 = 0u;
    uint64_t v42 = 0x7FFFFFFFLL;
    *(_OWORD *)&v44[4] = 0u;
    *(_OWORD *)&v40[8] = 0u;
    uint64_t v39 = 0;
    *(int64x2_t *)uint64_t v40 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    long long v41 = *(_OWORD *)v40;
    __p[0] = (void *)0xFFFFFFFFLL;
    long long v38 = 0uLL;
    __p[1] = 0;
    *(_DWORD *)&v40[16] = 0x7FFFFFFF;
    int v43 = 0x7FFFFFFF;
    *(void *)uint64_t v44 = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)uint64_t v46 = 0u;
    memset(v47, 0, sizeof(v47));
    unint64_t v45 = 0x8000000080000000;
    *(void *)uint64_t v48 = 0x8000000080000000;
    *(_DWORD *)&v48[8] = 0x7FFFFFFF;
    LODWORD(v49) = -1;
    uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    int v51 = 0x7FFFFFFF;
    *(void *)uint64_t v52 = 0x7FFFFFFF7FFFFFFFLL;
    long long v53 = _Q1;
    v54[1] = 0;
    v54[0] = 0;
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    v57[0] = 0;
    v57[1] = 0;
    unint64_t v59 = 0xFFFFFFFF00000000;
    uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
    sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v30, v12, __p, v32);
    sub_4D90B4(v11, (uint64_t)v32);
    sub_4D4B58((uint64_t)v32);
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    uint64_t v18 = (void **)v54[0];
    if (v54[0])
    {
      uint64_t v19 = (void **)v54[1];
      uint64_t v20 = v54[0];
      if (v54[1] != v54[0])
      {
        do
          uint64_t v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        uint64_t v20 = v54[0];
      }
      v54[1] = v18;
      operator delete(v20);
    }
    if (*(void *)&v47[8])
    {
      *(void *)&v47[16] = *(void *)&v47[8];
      operator delete(*(void **)&v47[8]);
    }
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    uint64_t v21 = __p[1];
    if (__p[1])
    {
      uint64_t v22 = v38;
      int v23 = __p[1];
      if ((void *)v38 != __p[1])
      {
        do
          uint64_t v22 = sub_4D4B58(v22 - 160);
        while ((void *)v22 != v21);
        int v23 = __p[1];
      }
      *(void *)&long long v38 = v21;
      operator delete(v23);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_4DD0C8((char *)a1, (uint64_t)a2, v11);
    sub_4DD4D8((char *)a1, (uint64_t)a2, v11);
    sub_4DD698((char *)a1, (uint64_t)a2, v11);
    sub_4D98BC(a1, 1uLL, (char **)__p);
    sub_4D90B4((uint64_t)(a3 + 24), (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    int64_t v24 = v36;
    if (v36)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        int64_t v24 = v25;
      }
      while (v25);
    }
    int v26 = v35;
    uint64_t v35 = 0;
    if (v26) {
      operator delete(v26);
    }
    long long v27 = (void **)v33;
    if (v33)
    {
      uint64_t v28 = v34;
      int v29 = v33;
      if (v34 != v33)
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        int v29 = v33;
      }
      int64x2_t v34 = v27;
      operator delete(v29);
    }
  }
}

void sub_4DC508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4DC580(uint64_t a1)
{
  uint64_t v2 = sub_5F3B34(a1);
  sub_5F3B34(v2 + 160);
  *(_DWORD *)(a1 + 352) = -1;
  *(_DWORD *)(a1 + 360) = -1;
  *(_DWORD *)(a1 + 363) = -1;
  *(void *)(a1 + 367) = 0;
  *(void *)(a1 + 383) = 0;
  *(void *)(a1 + 375) = 0;
  *(_WORD *)(a1 + 391) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  sub_5F3B34(a1 + 432);
  sub_5F3B34(a1 + 592);
  *(_OWORD *)(a1 + 752) = xmmword_20E22B0;
  return a1;
}

void sub_4DC60C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_4D4B58(v4);
  if (*(char *)(v1 + 423) < 0)
  {
    operator delete(*(void **)(v1 + 400));
    if ((*(char *)(v1 + 391) & 0x80000000) == 0)
    {
LABEL_3:
      int v6 = *(_DWORD *)(v1 + 352);
      if (v6 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 391) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 368));
  int v6 = *(_DWORD *)(v1 + 352);
  if (v6 != 1)
  {
LABEL_4:
    if (v6 || (*(char *)(v1 + 351) & 0x80000000) == 0)
    {
LABEL_12:
      sub_4D4B58(v2);
      sub_4D4B58(v1);
      _Unwind_Resume(a1);
    }
    uint64_t v7 = *(void **)(v1 + 328);
LABEL_11:
    operator delete(v7);
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v7 = *(void **)(v1 + 328);
  if (!v7) {
    goto LABEL_12;
  }
  *(void *)(v1 + 336) = v7;
  goto LABEL_11;
}

void sub_4DC6A4(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4DC6B8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = (uint64_t)v2[1];
      unint64_t v5 = *v2;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4D4B58(v4 - 168);
        while ((void *)v4 != v3);
        unint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v6)
  {
    if (*(unsigned char *)(v6 + 24))
    {
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      *(unsigned char *)(v6 + 24) = 0;
    }
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v7)
  {
    unint64_t v8 = *(void **)(v7 + 8);
    if (v8)
    {
      *(void *)(v7 + 16) = v8;
      operator delete(v8);
    }
    operator delete();
  }
  uint64_t v9 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v9)
  {
    if (*(char *)(v9 + 47) < 0)
    {
      operator delete(*(void **)(v9 + 24));
      if ((*(char *)(v9 + 23) & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else if ((*(char *)(v9 + 23) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(*(void **)v9);
LABEL_21:
    operator delete();
  }
  uint64_t v10 = a1 + 88;
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v11) {
    sub_4F48F0(v10, v11);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void **)(a1 + 64);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 9) < 0) {
          operator delete(*(void **)(v13 - 32));
        }
        v13 -= 40;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v12;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v15) {
    sub_4F49E8(a1 + 56, v15);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v16)
  {
    if (*(char *)(v16 + 31) < 0) {
      operator delete(*(void **)(v16 + 8));
    }
    operator delete();
  }
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v17)
  {
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    operator delete();
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4DC900(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  int v23 = 1065353216;
  sub_60E8D8(a1 + 3088, (uint64_t)&xmmword_25607B8, (uint64_t)__p, 0, (uint64_t)&v26);
  memset(&v25, 0, sizeof(v25));
  sub_5F7A30(a4, &v26, &v25);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_46:
    operator delete(v26.__r_.__value_.__l.__data_);
    unint64_t v8 = v22[0];
    if (!v22[0]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_3:
  unint64_t v8 = v22[0];
  if (!v22[0]) {
    goto LABEL_5;
  }
  do
  {
LABEL_4:
    uint64_t v9 = (void *)*v8;
    sub_4F4B48((uint64_t)(v8 + 2));
    operator delete(v8);
    unint64_t v8 = v9;
  }
  while (v9);
LABEL_5:
  uint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    while (1)
    {
      sub_50081C(a1 + 1536, v11, (uint64_t)__p);
      int v14 = (a3 & 1) != 0 || (unint64_t)(0x4FA4FA4FA4FA4FA5 * ((a2[1] - *a2) >> 5)) > 1;
      sub_4D4778(a1, v14, (uint64_t)__p);
      sub_635CD0((long long **)__p, (uint64_t)&v25);
      uint64_t v15 = sub_5231C((uint64_t)__p);
      sub_60E8D8(a1 + 3088, (uint64_t)&v25, v15, 0, (uint64_t)&v26);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      sub_5F41E8(a4, (uint64_t)&v26);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        uint64_t v16 = v24;
        if (v24) {
          goto LABEL_24;
        }
        goto LABEL_36;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
      uint64_t v16 = v24;
      if (v24) {
        break;
      }
LABEL_36:
      uint64_t v18 = v22[1];
      v22[1] = 0;
      if (v18) {
        operator delete(v18);
      }
      uint64_t v19 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v20 = (void **)__p[1];
        uint64_t v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v20 - 1) < 0) {
              operator delete(*(v20 - 3));
            }
            v20 -= 3;
          }
          while (v20 != v19);
          uint64_t v13 = __p[0];
        }
        __p[1] = v19;
        operator delete(v13);
      }
      v11 += 1440;
      if (v11 == v12) {
        return;
      }
    }
    while (1)
    {
LABEL_24:
      uint64_t v17 = *v16;
      if (*((char *)v16 + 191) < 0)
      {
        operator delete(v16[21]);
        if (*((char *)v16 + 159) < 0) {
          goto LABEL_31;
        }
LABEL_26:
        if ((*((char *)v16 + 135) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_32:
        operator delete(v16[14]);
        if (*((char *)v16 + 95) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        if ((*((char *)v16 + 63) & 0x80000000) == 0) {
          goto LABEL_34;
        }
LABEL_22:
        operator delete(v16[5]);
        if (*((char *)v16 + 39) < 0) {
          goto LABEL_35;
        }
LABEL_23:
        operator delete(v16);
        uint64_t v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
      else
      {
        if ((*((char *)v16 + 159) & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_31:
        operator delete(v16[17]);
        if (*((char *)v16 + 135) < 0) {
          goto LABEL_32;
        }
LABEL_27:
        if ((*((char *)v16 + 95) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(v16[9]);
        if (*((char *)v16 + 63) < 0) {
          goto LABEL_22;
        }
LABEL_34:
        if ((*((char *)v16 + 39) & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_35:
        operator delete(v16[2]);
        operator delete(v16);
        uint64_t v16 = (uint64_t **)v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_4DCBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    sub_4DD068((uint64_t)&a9);
    sub_4D4B58(v30);
    _Unwind_Resume(a1);
  }
  sub_4DD068((uint64_t)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4DCC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_4D4880((void **)&a9);
  sub_4D4B58(v30);
  _Unwind_Resume(a1);
}

void sub_4DCCC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  sub_4F7D40(a2, &v3, (uint64_t)&v2);
  sub_65140();
}

void sub_4DCF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  sub_4DD068((uint64_t)&__p);
  sub_4D4880(&a30);
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  sub_651C4((id **)(v30 - 88));
  sub_1A668((void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_4DD068(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_4DD0C8(char *a1, uint64_t a2, uint64_t a3)
{
  sub_501B78((uint64_t)(a1 + 1536), a2, (uint64_t)&v41);
  unint64_t v5 = (uint64_t *)nullsub_1(&v41);
  uint64_t v6 = *v5;
  uint64_t v38 = v5[1];
  if (*v5 != v38)
  {
    int v39 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 160);
    do
    {
      while (1)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          uint64_t v10 = *(char **)v6;
          uint64_t v9 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
          uint64_t v10 = (char *)v6;
        }
        uint64_t v11 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v12 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v12)
        {
          if (v9 >= v12)
          {
            uint64_t v13 = &v10[v9];
            int v14 = *(char *)v11;
            uint64_t v15 = v10;
            do
            {
              uint64_t v16 = v9 - v12;
              if (v16 == -1) {
                break;
              }
              uint64_t v17 = (char *)memchr(v15, v14, v16 + 1);
              if (!v17) {
                break;
              }
              uint64_t v18 = v17;
              if (!memcmp(v17, v11, v12))
              {
                if (v18 == v13 || v18 - v10 == -1) {
                  break;
                }
                goto LABEL_30;
              }
              uint64_t v15 = v18 + 1;
              uint64_t v9 = v13 - (v18 + 1);
            }
            while (v9 >= v12);
          }
          memset(&__p, 0, sizeof(__p));
          sub_5F7A30((uint64_t)v7, (const std::string *)&word_255ECB0, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
LABEL_30:
          if (v39 >= 1)
          {
            memset(&__p, 0, sizeof(__p));
            sub_5F7A30((uint64_t)v7, (const std::string *)&word_255EC80, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          ++v39;
        }
        uint64_t v19 = sub_5231C((uint64_t)&v41);
        sub_60E8D8((uint64_t)(a1 + 3088), v6, v19, 0, (uint64_t)&__p);
        sub_5F41E8((uint64_t)v7, (uint64_t)&__p);
        if (*(char *)(v6 + 23) < 0)
        {
          uint64_t v21 = *(char **)v6;
          uint64_t v20 = *(void *)(v6 + 8);
        }
        else
        {
          uint64_t v20 = *(unsigned __int8 *)(v6 + 23);
          uint64_t v21 = (char *)v6;
        }
        uint64_t v22 = byte_256088F >= 0 ? &qword_2560878 : (uint64_t *)qword_2560878;
        int64_t v23 = byte_256088F >= 0 ? byte_256088F : unk_2560880;
        if (v23)
        {
          if (v20 >= v23)
          {
            int64_t v24 = &v21[v20];
            int v25 = *(char *)v22;
            std::string v26 = v21;
            do
            {
              uint64_t v27 = v20 - v23;
              if (v27 == -1) {
                break;
              }
              uint64_t v28 = (char *)memchr(v26, v25, v27 + 1);
              if (!v28) {
                break;
              }
              int v29 = v28;
              if (!memcmp(v28, v22, v23))
              {
                if (v29 == v24 || v29 - v21 == -1) {
                  break;
                }
                goto LABEL_53;
              }
              std::string v26 = v29 + 1;
              uint64_t v20 = v24 - (v29 + 1);
            }
            while (v20 >= v23);
          }
        }
        else
        {
LABEL_53:
          sub_4DD858(a1, a2, (uint64_t)&__p, v7);
        }
        if (*(_DWORD *)(a2 + 1256) != 12 && sub_5F7924((char ***)v7, (char *)&qword_2560320))
        {
          unsigned int v8 = *(_DWORD *)(a2 + 1296);
          if ((int)v8 >= 36000)
          {
            if (v8 >= 0xD2F00)
            {
              unsigned int v8 = 864000 * vcvtmd_s64_f64((double)(int)v8 / 864000.0);
            }
            else
            {
              if ((v8 % 0x8CA0) >> 4 <= 0x464) {
                unsigned int v30 = v8 / 0x8CA0;
              }
              else {
                unsigned int v30 = v8 / 0x8CA0 + 1;
              }
              unsigned int v8 = 36000 * v30;
            }
          }
          sub_5F66B8(v7, (uint64_t)&qword_2560320, v8);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        v6 += 24;
        if (v6 == v38) {
          goto LABEL_62;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 24;
    }
    while (v6 != v38);
  }
LABEL_62:
  char v31 = v44;
  if (v44)
  {
    do
    {
      int64x2_t v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      char v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v43;
  int v43 = 0;
  if (v33) {
    operator delete(v33);
  }
  int64x2_t v34 = (void **)v41;
  if (v41)
  {
    uint64_t v35 = v42;
    int v36 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      int v36 = v41;
    }
    uint64_t v42 = v34;
    operator delete(v36);
  }
}

void sub_4DD494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
}

void sub_4DD4D8(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 432);
  sub_5031BC((uint64_t)(a1 + 1536), a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255ECB0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4DD858(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4DD648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4DD65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

void sub_4DD698(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a3 + 592);
  sub_50390C(a2, (uint64_t)&v17);
  memset(&__p, 0, sizeof(__p));
  sub_5F7A30((uint64_t)v5, (const std::string *)&word_255EC80, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (uint64_t *)nullsub_1(&v17);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = sub_5231C((uint64_t)&v17);
      sub_60E8D8((uint64_t)(a1 + 3088), v7, v9, 0, (uint64_t)&__p);
      sub_5F41E8((uint64_t)v5, (uint64_t)&__p);
      sub_4DD858(a1, a2, (uint64_t)&__p, v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    uint64_t v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_4DD808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_4DD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a15);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a15);
  _Unwind_Resume(a1);
}

char *sub_4DD858(char *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = result;
  int64_t v7 = *(unsigned __int8 *)(a3 + 23);
  unsigned __int8 v8 = v7;
  uint64_t v9 = *(char **)a3;
  if ((v7 & 0x80u) == 0) {
    uint64_t v10 = (char *)a3;
  }
  else {
    uint64_t v10 = *(char **)a3;
  }
  if (byte_255F477 >= 0) {
    uint64_t v11 = &qword_255F460;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_255F460;
  }
  if (byte_255F477 >= 0) {
    int64_t v12 = byte_255F477;
  }
  else {
    int64_t v12 = unk_255F468;
  }
  if (!v12) {
    goto LABEL_234;
  }
  if ((v7 & 0x80u) != 0) {
    int64_t v7 = *(void *)(a3 + 8);
  }
  if (v7 >= v12)
  {
    uint64_t v81 = result;
    uint64_t v13 = &v10[v7];
    int v14 = *(char *)v11;
    double result = v10;
    while (1)
    {
      uint64_t v15 = v7 - v12;
      if (v15 == -1) {
        goto LABEL_73;
      }
      double result = (char *)memchr(result, v14, v15 + 1);
      if (!result) {
        goto LABEL_73;
      }
      uint64_t v16 = result;
      double result = (char *)memcmp(result, v11, v12);
      if (!result) {
        break;
      }
      double result = v16 + 1;
      int64_t v7 = v13 - (v16 + 1);
      if (v7 < v12) {
        goto LABEL_73;
      }
    }
    if (v16 != v13)
    {
      uint64_t v6 = v81;
      if (v16 - v10 != -1)
      {
LABEL_234:
        if (*(unsigned char *)(a2 + 1144))
        {
          uint64_t v17 = *(void *)(a2 + 1120);
          if (*(char *)(v17 + 231) < 0)
          {
            sub_4200(&__dst, *(void **)(v17 + 208), *(void *)(v17 + 216));
            if ((*(char *)(v17 + 255) & 0x80000000) == 0) {
              goto LABEL_25;
            }
          }
          else
          {
            long long __dst = *(_OWORD *)(v17 + 208);
            uint64_t v100 = *(void *)(v17 + 224);
            if ((*(char *)(v17 + 255) & 0x80000000) == 0)
            {
LABEL_25:
              long long v101 = *(_OWORD *)(v17 + 232);
              uint64_t v102 = *(void *)(v17 + 248);
              goto LABEL_28;
            }
          }
          sub_4200(&v101, *(void **)(v17 + 232), *(void *)(v17 + 240));
LABEL_28:
          if (!*(unsigned char *)(a2 + 1144))
          {
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          if (*(char *)(a2 + 927) < 0)
          {
            sub_4200(v95, *(void **)(a2 + 904), *(void *)(a2 + 912));
          }
          else
          {
            *(_OWORD *)int v95 = *(_OWORD *)(a2 + 904);
            uint64_t v96 = *(void *)(a2 + 920);
          }
          if (*(char *)(a2 + 951) < 0)
          {
            sub_4200(&__src, *(void **)(a2 + 928), *(void *)(a2 + 936));
          }
          else
          {
            long long __src = *(_OWORD *)(a2 + 928);
            uint64_t v98 = *(void *)(a2 + 944);
          }
          if (v102 >= 0) {
            uint64_t v18 = HIBYTE(v102);
          }
          else {
            uint64_t v18 = *((void *)&v101 + 1);
          }
          if (v18)
          {
            if (SHIBYTE(v102) < 0)
            {
              sub_4200(v83, (void *)v101, *((unint64_t *)&v101 + 1));
            }
            else
            {
              *(_OWORD *)int64x2_t v83 = v101;
              *(void *)&long long v84 = v102;
            }
          }
          else
          {
            int64x2_t v93 = operator new(0x38uLL);
            long long v94 = xmmword_20B9A20;
            strcpy((char *)v93, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
            *(_OWORD *)std::string __p = 0u;
            long long v91 = 0u;
            int v92 = 1065353216;
            sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v93, (uint64_t)__p, 0, (uint64_t)v83);
          }
          if (SHIBYTE(v102) < 0) {
            operator delete((void *)v101);
          }
          long long v101 = *(_OWORD *)v83;
          uint64_t v102 = v84;
          BYTE7(v84) = 0;
          LOBYTE(v83[0]) = 0;
          if (v18) {
            goto LABEL_51;
          }
          uint64_t v19 = (void *)v91;
          if ((void)v91)
          {
            do
            {
              uint64_t v20 = (void *)*v19;
              sub_4F4B48((uint64_t)(v19 + 2));
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
          uint64_t v21 = __p[0];
          __p[0] = 0;
          if (v21) {
            operator delete(v21);
          }
          if (SHIBYTE(v94) < 0)
          {
            operator delete(v93);
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24) {
              goto LABEL_55;
            }
          }
          else
          {
LABEL_51:
            int v22 = SHIBYTE(v98);
            unint64_t v23 = *((void *)&__src + 1);
            if (v98 >= 0) {
              uint64_t v24 = HIBYTE(v98);
            }
            else {
              uint64_t v24 = *((void *)&__src + 1);
            }
            if (v24)
            {
LABEL_55:
              if (v22 < 0)
              {
                sub_4200(&v88, (void *)__src, v23);
              }
              else
              {
                long long v88 = __src;
                uint64_t v89 = v98;
              }
LABEL_63:
              if (SHIBYTE(v98) < 0) {
                operator delete((void *)__src);
              }
              long long __src = v88;
              uint64_t v98 = v89;
              HIBYTE(v89) = 0;
              LOBYTE(v88) = 0;
              if (!v24)
              {
                int v25 = (void *)v84;
                if ((void)v84)
                {
                  do
                  {
                    std::string v26 = (void *)*v25;
                    sub_4F4B48((uint64_t)(v25 + 2));
                    operator delete(v25);
                    int v25 = v26;
                  }
                  while (v26);
                }
                uint64_t v27 = v83[0];
                v83[0] = 0;
                if (v27) {
                  operator delete(v27);
                }
                if (SHIBYTE(v87) < 0) {
                  operator delete(v86);
                }
              }
              sub_5F738C(a4, (uint64_t)&qword_255F460);
            }
          }
          int v86 = operator new(0x38uLL);
          long long v87 = xmmword_20B9A20;
          strcpy((char *)v86, "Advisory_AREA_INCIDENT_METADATA_PURE_WEBLINK_TITLE");
          *(_OWORD *)int64x2_t v83 = 0u;
          long long v84 = 0u;
          int v85 = 1065353216;
          sub_60E8D8((uint64_t)(v6 + 3088), (uint64_t)&v86, (uint64_t)v83, 0, (uint64_t)&v88);
          goto LABEL_63;
        }
LABEL_230:
        uint64_t v79 = __cxa_allocate_exception(8uLL);
        *uint64_t v79 = &off_2439078;
      }
    }
  }
LABEL_73:
  if ((v8 & 0x80u) == 0) {
    uint64_t v28 = (char *)a3;
  }
  else {
    uint64_t v28 = v9;
  }
  if (byte_255F54F >= 0) {
    int v29 = &qword_255F538;
  }
  else {
    int v29 = (uint64_t *)qword_255F538;
  }
  if (byte_255F54F >= 0) {
    int64_t v30 = byte_255F54F;
  }
  else {
    int64_t v30 = unk_255F540;
  }
  if (!v30) {
    goto LABEL_95;
  }
  int64_t v31 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v31 >= v30)
  {
    int64x2_t v32 = &v28[v31];
    int v33 = *(char *)v29;
    double result = v28;
    while (1)
    {
      uint64_t v34 = v31 - v30;
      if (v34 == -1) {
        goto LABEL_105;
      }
      double result = (char *)memchr(result, v33, v34 + 1);
      if (!result) {
        goto LABEL_105;
      }
      uint64_t v35 = result;
      double result = (char *)memcmp(result, v29, v30);
      if (!result) {
        break;
      }
      double result = v35 + 1;
      int64_t v31 = v32 - (v35 + 1);
      if (v31 < v30) {
        goto LABEL_105;
      }
    }
    if (v35 != v32 && v35 - v28 != -1)
    {
LABEL_95:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      float v36 = *(float *)(a2 + 856);
      if (v36 >= 0.0)
      {
        if (v36 < 8388600.0)
        {
          uint64_t v37 = (uint64_t)(float)(v36 + v36) + 1;
LABEL_103:
          float v36 = (float)(v37 >> 1);
        }
      }
      else if (v36 > -8388600.0)
      {
        uint64_t v37 = (uint64_t)(float)(v36 + v36);
        if (v37 >= 1) {
          --v37;
        }
        goto LABEL_103;
      }
      double result = sub_5F71A4((uint64_t)a4, (uint64_t)&qword_255F538, v36);
      unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
      uint64_t v9 = *(char **)a3;
    }
  }
LABEL_105:
  uint64_t v38 = a2 + 1152;
  if ((v8 & 0x80u) == 0) {
    int v39 = (char *)a3;
  }
  else {
    int v39 = v9;
  }
  if (byte_255F567 >= 0) {
    uint64_t v40 = &qword_255F550;
  }
  else {
    uint64_t v40 = (uint64_t *)qword_255F550;
  }
  if (byte_255F567 >= 0) {
    int64_t v41 = byte_255F567;
  }
  else {
    int64_t v41 = unk_255F558;
  }
  if (v41)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v42 = v8;
    }
    else {
      int64_t v42 = *(void *)(a3 + 8);
    }
    if (v42 < v41) {
      goto LABEL_130;
    }
    int v43 = &v39[v42];
    int v44 = *(char *)v40;
    double result = v39;
    while (1)
    {
      int64_t v45 = v42 - v41;
      if (v45 == -1) {
        goto LABEL_129;
      }
      double result = (char *)memchr(result, v44, v45 + 1);
      if (!result) {
        goto LABEL_129;
      }
      uint64_t v46 = result;
      double result = (char *)memcmp(result, v40, v41);
      if (!result) {
        break;
      }
      double result = v46 + 1;
      int64_t v42 = v43 - (v46 + 1);
      if (v42 < v41) {
        goto LABEL_129;
      }
    }
    if (v46 == v43)
    {
LABEL_129:
      uint64_t v38 = a2 + 1152;
      goto LABEL_130;
    }
    uint64_t v38 = a2 + 1152;
    if (v46 - v39 == -1) {
      goto LABEL_130;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  double result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F550, (_DWORD *)(a2 + 860), v38, 4);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_130:
  if ((v8 & 0x80u) == 0) {
    uint64_t v47 = (char *)a3;
  }
  else {
    uint64_t v47 = v9;
  }
  if (byte_255F4BF >= 0) {
    uint64_t v48 = &qword_255F4A8;
  }
  else {
    uint64_t v48 = (uint64_t *)qword_255F4A8;
  }
  if (byte_255F4BF >= 0) {
    int64_t v49 = byte_255F4BF;
  }
  else {
    int64_t v49 = *(void *)&dword_255F4B0;
  }
  if (v49)
  {
    if ((v8 & 0x80u) == 0) {
      int64_t v50 = v8;
    }
    else {
      int64_t v50 = *(void *)(a3 + 8);
    }
    if (v50 < v49) {
      goto LABEL_155;
    }
    int v51 = &v47[v50];
    int v52 = *(char *)v48;
    double result = v47;
    while (1)
    {
      int64_t v53 = v50 - v49;
      if (v53 == -1) {
        goto LABEL_154;
      }
      double result = (char *)memchr(result, v52, v53 + 1);
      if (!result) {
        goto LABEL_154;
      }
      uint64_t v54 = result;
      double result = (char *)memcmp(result, v48, v49);
      if (!result) {
        break;
      }
      double result = v54 + 1;
      int64_t v50 = v51 - (v54 + 1);
      if (v50 < v49) {
        goto LABEL_154;
      }
    }
    if (v54 == v51)
    {
LABEL_154:
      uint64_t v38 = a2 + 1152;
      goto LABEL_155;
    }
    uint64_t v38 = a2 + 1152;
    if (v54 - v47 == -1) {
      goto LABEL_155;
    }
  }
  if (!*(unsigned char *)(a2 + 1144)) {
    goto LABEL_230;
  }
  double result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4A8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 0);
  unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
  uint64_t v9 = *(char **)a3;
LABEL_155:
  if ((v8 & 0x80u) == 0) {
    uint64_t v55 = (char *)a3;
  }
  else {
    uint64_t v55 = v9;
  }
  if (byte_255F4EF >= 0) {
    uint64_t v56 = &qword_255F4D8;
  }
  else {
    uint64_t v56 = (uint64_t *)qword_255F4D8;
  }
  if (byte_255F4EF >= 0) {
    int64_t v57 = byte_255F4EF;
  }
  else {
    int64_t v57 = *(void *)&dword_255F4E0;
  }
  if (!v57) {
    goto LABEL_177;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v58 = v8;
  }
  else {
    int64_t v58 = *(void *)(a3 + 8);
  }
  if (v58 >= v57)
  {
    unint64_t v59 = &v55[v58];
    int v60 = *(char *)v56;
    double result = v55;
    while (1)
    {
      uint64_t v61 = v58 - v57;
      if (v61 == -1) {
        goto LABEL_179;
      }
      double result = (char *)memchr(result, v60, v61 + 1);
      if (!result) {
        goto LABEL_179;
      }
      uint64_t v62 = result;
      double result = (char *)memcmp(result, v56, v57);
      if (!result) {
        break;
      }
      double result = v62 + 1;
      int64_t v58 = v59 - (v62 + 1);
      if (v58 < v57) {
        goto LABEL_179;
      }
    }
    if (v62 == v59)
    {
LABEL_179:
      uint64_t v38 = a2 + 1152;
    }
    else
    {
      uint64_t v38 = a2 + 1152;
      if (v62 - v55 != -1)
      {
LABEL_177:
        if (!*(unsigned char *)(a2 + 1144)) {
          goto LABEL_230;
        }
        double result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4D8, (_DWORD *)(*(void *)(a2 + 1120) + 124), v38, 3);
        unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
        uint64_t v9 = *(char **)a3;
      }
    }
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v63 = (char *)a3;
  }
  else {
    uint64_t v63 = v9;
  }
  if (byte_255F4A7 >= 0) {
    int v64 = &qword_255F490;
  }
  else {
    int v64 = (uint64_t *)qword_255F490;
  }
  if (byte_255F4A7 >= 0) {
    int64_t v65 = byte_255F4A7;
  }
  else {
    int64_t v65 = unk_255F498;
  }
  if (!v65) {
    goto LABEL_202;
  }
  if ((v8 & 0x80u) == 0) {
    int64_t v66 = v8;
  }
  else {
    int64_t v66 = *(void *)(a3 + 8);
  }
  if (v66 < v65) {
    goto LABEL_205;
  }
  unint64_t v67 = &v63[v66];
  int v68 = *(char *)v64;
  double result = v63;
  while (1)
  {
    int64_t v69 = v66 - v65;
    if (v69 == -1) {
      goto LABEL_204;
    }
    double result = (char *)memchr(result, v68, v69 + 1);
    if (!result) {
      goto LABEL_204;
    }
    uint64_t v70 = result;
    double result = (char *)memcmp(result, v64, v65);
    if (!result) {
      break;
    }
    double result = v70 + 1;
    int64_t v66 = v67 - (v70 + 1);
    if (v66 < v65) {
      goto LABEL_204;
    }
  }
  if (v70 == v67)
  {
LABEL_204:
    uint64_t v38 = a2 + 1152;
    goto LABEL_205;
  }
  uint64_t v38 = a2 + 1152;
  if (v70 - v63 != -1)
  {
LABEL_202:
    if (!*(unsigned char *)(a2 + 1144)) {
      goto LABEL_230;
    }
    double result = sub_5F5F70((uint64_t)a4, (long long *)&qword_255F490, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 0);
    unsigned __int8 v8 = *(unsigned char *)(a3 + 23);
    uint64_t v9 = *(char **)a3;
  }
LABEL_205:
  if ((v8 & 0x80u) == 0) {
    uint64_t v71 = (char *)a3;
  }
  else {
    uint64_t v71 = v9;
  }
  if (byte_255F4D7 >= 0) {
    unint64_t v72 = &qword_255F4C0;
  }
  else {
    unint64_t v72 = (uint64_t *)qword_255F4C0;
  }
  if (byte_255F4D7 >= 0) {
    int64_t v73 = byte_255F4D7;
  }
  else {
    int64_t v73 = unk_255F4C8;
  }
  if (!v73) {
    goto LABEL_227;
  }
  int64_t v74 = (v8 & 0x80u) == 0 ? v8 : *(void *)(a3 + 8);
  if (v74 >= v73)
  {
    uint64_t v75 = &v71[v74];
    int v76 = *(char *)v72;
    double result = v71;
    while (1)
    {
      uint64_t v77 = v74 - v73;
      if (v77 == -1) {
        return result;
      }
      double result = (char *)memchr(result, v76, v77 + 1);
      if (!result) {
        return result;
      }
      unint64_t v78 = result;
      double result = (char *)memcmp(result, v72, v73);
      if (!result) {
        break;
      }
      double result = v78 + 1;
      int64_t v74 = v75 - (v78 + 1);
      if (v74 < v73) {
        return result;
      }
    }
    if (v78 != v75 && v78 - v71 != -1)
    {
LABEL_227:
      if (!*(unsigned char *)(a2 + 1144)) {
        goto LABEL_230;
      }
      return sub_5F5F70((uint64_t)a4, (long long *)&qword_255F4C0, (_DWORD *)(*(void *)(a2 + 1120) + 120), v38, 3);
    }
  }
  return result;
}

void sub_4DE32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_1B23C((uint64_t)&a37);
  sub_1B23C(v42 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_4DE414()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  uint64_t v10 = sub_4BBDC0(v0, v3);
  sub_500818(v10 + 1536, v8, v4);
  sub_4D30C8(v9 + 3088);
  *(_OWORD *)(v9 + 5264) = 0u;
  *(void *)(v9 + 5280) = v2;
  sub_688A04(v6, 0, *(_DWORD *)(v4 + 968), &v168);
  uint64_t v11 = v168;
  sub_688A04(v6, 4u, *(_DWORD *)(v4 + 968), (uint64_t *)v167);
  sub_8D8884(v11, *(uint64_t *)&v167[0]);
  int64_t v12 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v165 = v168;
  uint64_t v166 = v169;
  if (v169) {
    atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v164 = 0u;
  bzero(v21, 0x7F8uLL);
  int64x2_t v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v23 = v22;
  int64x2_t v24 = v22;
  int64x2_t v25 = v22;
  int64x2_t v26 = v22;
  int64x2_t v27 = v22;
  int64x2_t v28 = v22;
  int64x2_t v29 = v22;
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = 0x8000000080000000;
  *((void *)&v13 + 1) = 0x8000000080000000;
  long long v31 = v13;
  long long v32 = v13;
  long long v33 = v13;
  long long v34 = v13;
  int v35 = 0x7FFFFFFF;
  int64x2_t v36 = v22;
  int64x2_t v37 = v22;
  long long v38 = v13;
  long long v39 = v13;
  unint64_t v40 = 0x8000000080000000;
  int64x2_t v41 = v22;
  int64x2_t v42 = v22;
  int64x2_t v43 = v22;
  int64x2_t v44 = v22;
  int64x2_t v45 = v22;
  int64x2_t v46 = v22;
  int64x2_t v47 = v22;
  int64x2_t v48 = v22;
  long long v49 = 0u;
  int64x2_t v50 = v22;
  int64x2_t v51 = v22;
  int64x2_t v52 = v22;
  int64x2_t v53 = v22;
  int64x2_t v54 = v22;
  int64x2_t v55 = v22;
  int64x2_t v56 = v22;
  int64x2_t v57 = v22;
  int64x2_t v58 = v22;
  int64x2_t v59 = v22;
  int64x2_t v60 = v22;
  int64x2_t v61 = v22;
  int64x2_t v62 = v22;
  int64x2_t v63 = v22;
  int64x2_t v64 = v22;
  int64x2_t v65 = v22;
  int64x2_t v66 = v22;
  int64x2_t v67 = v22;
  int64x2_t v68 = v22;
  int64x2_t v69 = v22;
  int64x2_t v70 = v22;
  int64x2_t v71 = v22;
  int64x2_t v72 = v22;
  int64x2_t v73 = v22;
  int64x2_t v74 = v22;
  int64x2_t v75 = v22;
  int64x2_t v76 = v22;
  int64x2_t v77 = v22;
  int64x2_t v78 = v22;
  int64x2_t v79 = v22;
  int64x2_t v80 = v22;
  int64x2_t v81 = v22;
  int64x2_t v82 = v22;
  int64x2_t v83 = v22;
  int64x2_t v84 = v22;
  int64x2_t v85 = v22;
  int64x2_t v86 = v22;
  int64x2_t v87 = v22;
  int64x2_t v88 = v22;
  int64x2_t v89 = v22;
  int64x2_t v90 = v22;
  int64x2_t v91 = v22;
  int64x2_t v92 = v22;
  int64x2_t v93 = v22;
  int64x2_t v94 = v22;
  int64x2_t v95 = v22;
  int64x2_t v96 = v22;
  int64x2_t v97 = v22;
  int64x2_t v98 = v22;
  int64x2_t v99 = v22;
  int64x2_t v100 = v22;
  int64x2_t v101 = v22;
  uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  char v103 = 0;
  int64x2_t v104 = v22;
  int64x2_t v105 = v22;
  int64x2_t v106 = v22;
  int64x2_t v107 = v22;
  int64x2_t v108 = v22;
  int64x2_t v109 = v22;
  int64x2_t v110 = v22;
  int64x2_t v111 = v22;
  int64x2_t v112 = v22;
  int64x2_t v113 = v22;
  int64x2_t v114 = v22;
  int64x2_t v115 = v22;
  uint64_t v116 = 0;
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  char v118 = 0;
  uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  long long v122 = v13;
  long long v123 = v13;
  long long v121 = v13;
  uint64_t v124 = -1;
  char v125 = 0;
  uint64_t v126 = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v127 = v22;
  uint64_t v128 = 0x7FFFFFFFFFFFFFFFLL;
  char v129 = 0;
  int v130 = 0x7FFFFFFF;
  uint64_t v131 = 0;
  __int16 v132 = 0;
  int64x2_t v133 = v22;
  int64x2_t v134 = v22;
  int64x2_t v135 = v22;
  int64x2_t v136 = v22;
  int64x2_t v137 = v22;
  int64x2_t v138 = v22;
  int64x2_t v139 = v22;
  int64x2_t v140 = v22;
  int64x2_t v141 = v22;
  int64x2_t v142 = v22;
  int64x2_t v143 = v22;
  int64x2_t v144 = v22;
  int64x2_t v145 = v22;
  int64x2_t v146 = v22;
  memset(v147, 0, sizeof(v147));
  uint64_t v148 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
  int v150 = 0;
  *(void *)((char *)v152 + 5) = 0;
  v152[0] = 0;
  long long __p = 0u;
  int64x2_t v153 = v22;
  int64x2_t v154 = v22;
  char v155 = 1;
  uint64_t v156 = 0;
  char v157 = 0;
  uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
  char v159 = 0;
  uint64_t v160 = 0x7FFFFFFFFFFFFFFFLL;
  long long v161 = 0u;
  __int16 v163 = 0;
  uint64_t v162 = 0;
  sub_60DE48((uint64_t)v167, &v165, &v164, v21, v4);
  sub_4D3210(v9 + 3088, v167);
  sub_4F2894((uint64_t)v167);
  if (SHIBYTE(v152[0]) < 0) {
    operator delete((void *)__p);
  }
  int v14 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v166;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_70F6C0(v167, v6, v4);
  long long v16 = v167[0];
  v167[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v9 + 5272);
  *(_OWORD *)(v9 + 5264) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v167[0] + 1);
  if (*((void *)&v167[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v169;
  if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v9;
}

void sub_4DEB1C(_Unwind_Exception *a1)
{
  sub_14A84(v4 - 96);
  sub_14A84(v1 + 5264);
  sub_4F2894(v3);
  sub_651C4((id **)(v1 + 3072));
  sub_4BCED0(v2);
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_4DEBA0()
{
}

void sub_4DEBA8(_Unwind_Exception *a1)
{
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_4DEBC0(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 1453)) {
    sub_4DEC24(a1, a2, a3);
  }
}

void sub_4DEC10(_Unwind_Exception *a1)
{
  sub_4F2BD0(v1);
  _Unwind_Resume(a1);
}

void sub_4DEC24(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v40 = 0;
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  sub_4D6AC8((uint64_t *)&v40, 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(a2[1] - *a2) >> 5));
  long long __p = 0;
  long long v38 = 0;
  unint64_t v39 = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 == v7) {
    goto LABEL_79;
  }
  uint64_t v8 = a3 + 133;
  int v9 = -1;
  do
  {
    int v10 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 50)
    {
      if (sub_605454(v6 + 32))
      {
        if (*(char *)(v6 + 1175) < 0)
        {
          if (*(void *)(v6 + 1160)) {
            goto LABEL_15;
          }
        }
        else if (*(unsigned char *)(v6 + 1175))
        {
          goto LABEL_15;
        }
      }
      if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
        || *(_DWORD *)(v6 + 1200) != 2
        || *(_DWORD *)(v6 + 1256) != 12
        || *(void *)(v6 + 1328) != *(void *)(v6 + 1336))
      {
        goto LABEL_15;
      }
      int v15 = *(_DWORD *)(v6 + 1360);
      if (v15)
      {
        if (v15 == 1)
        {
          int v16 = *(_DWORD *)(v6 + 1352);
          if (v16 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v16 && *(_DWORD *)(v6 + 1364) != 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        int v18 = *(_DWORD *)(v6 + 1352);
        if (v18 != 0x7FFFFFFF && *(_DWORD *)(v6 + 1356) < v18) {
          goto LABEL_15;
        }
      }
      if (*(char *)(v6 + 1399) < 0)
      {
        if (!*(void *)(v6 + 1384))
        {
LABEL_68:
          if (*(_DWORD *)(v6 + 1400) == -1 && *(_DWORD *)(v6 + 1404) == -1) {
            goto LABEL_4;
          }
        }
      }
      else if (!*(unsigned char *)(v6 + 1399))
      {
        goto LABEL_68;
      }
LABEL_15:
      int v10 = *(_DWORD *)v6;
    }
    unsigned int v11 = v10 - 40;
    if ((v10 - 40) >= 6
      && v10 != 50
      && *(_DWORD *)(v6 + 1400) == -1
      && v10 != 48
      && *(_DWORD *)(v6 + 1404) == -1
      || (int v12 = *(_DWORD *)(v6 + 1256), v12 == 11))
    {
LABEL_27:
      long long v13 = v41;
      if ((unint64_t)v41 >= v42)
      {
        int64x2_t v41 = (char *)sub_4C83E4((uint64_t *)&v40, v6);
      }
      else
      {
        sub_4C8540((uint64_t)v41, v6);
        int64x2_t v41 = v13 + 1440;
      }
      goto LABEL_4;
    }
    if (*(char *)(v6 + 1399) < 0)
    {
      if (*(void *)(v6 + 1384)) {
        goto LABEL_27;
      }
    }
    else if (*(unsigned char *)(v6 + 1399))
    {
      goto LABEL_27;
    }
    if (v11 <= 4)
    {
      unint64_t v14 = v35;
      if (v35 >= v36)
      {
        unint64_t v35 = sub_4C83E4((uint64_t *)&v34, v6);
      }
      else
      {
        sub_4C8540(v35, v6);
        unint64_t v35 = v14 + 1440;
      }
      goto LABEL_4;
    }
    if (*(void *)(v6 + 1176) != *(void *)(v6 + 1184)
      || (v12 - 2) < 9
      || *(_DWORD *)(v6 + 1200) == 1 && *(void *)(v6 + 1208) != *(void *)(v6 + 1216))
    {
      goto LABEL_51;
    }
    if (sub_605454(v6 + 32))
    {
      if (*(char *)(v6 + 1175) < 0)
      {
        if (*(void *)(v6 + 1160)) {
          goto LABEL_51;
        }
      }
      else if (*(unsigned char *)(v6 + 1175))
      {
        goto LABEL_51;
      }
    }
    if (*(_DWORD *)(v6 + 1400) != -1 || *(_DWORD *)(v6 + 1404) != -1)
    {
LABEL_51:
      if (v9 < 0) {
        int v9 = -1108378657 * ((unint64_t)(a3[134] - a3[133]) >> 4);
      }
      if (!sub_605454(v6 + 32)) {
        goto LABEL_59;
      }
      if (*(char *)(v6 + 1175) < 0)
      {
        if (!*(void *)(v6 + 1160)) {
          goto LABEL_59;
        }
      }
      else if (!*(unsigned char *)(v6 + 1175))
      {
LABEL_59:
        uint64_t v17 = v38;
        if ((unint64_t)v38 >= v39)
        {
          long long v38 = (char *)sub_4C83E4((uint64_t *)&__p, v6);
        }
        else
        {
          sub_4C8540((uint64_t)v38, v6);
          long long v38 = v17 + 1440;
        }
        goto LABEL_4;
      }
      if (sub_6054A8(v6 + 32))
      {
        sub_4D6BC4((uint64_t *)&__p, (uint64_t)__p, v6);
        goto LABEL_4;
      }
      goto LABEL_59;
    }
    sub_4E1BEC(a1, v6, (uint64_t)v43);
    unint64_t v19 = a3[134];
    if (v19 >= a3[135]) {
      uint64_t v20 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    else {
      uint64_t v20 = sub_4F4498(v19, (uint64_t)v43) + 496;
    }
    a3[134] = v20;
    sub_4F2FF8((uint64_t)v43);
LABEL_4:
    v6 += 1440;
  }
  while (v6 != v7);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((v38 - (unsigned char *)__p) >> 5)) > 1) {
    goto LABEL_78;
  }
  if (__p != v38)
  {
    if (v40 == v41)
    {
      uint64_t v25 = *v8;
      sub_4E1BEC(a1, (uint64_t)__p, (uint64_t)v43);
      sub_4D7130(v8, v25 + 496 * v9, (uint64_t)v43);
    }
    else
    {
LABEL_78:
      uint64_t v21 = *v8;
      sub_4E1F6C();
      sub_4D7130(v8, v21 + 496 * v9, (uint64_t)v43);
    }
LABEL_87:
    sub_4F2FF8((uint64_t)v43);
    unint64_t v24 = (unint64_t)v34;
    goto LABEL_88;
  }
LABEL_79:
  if (v40 != v41)
  {
    sub_4E1334(a1, (uint64_t *)&v40, (uint64_t)v43);
    unint64_t v22 = a3[134];
    if (v22 < a3[135]) {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v43) + 496;
    }
    else {
      uint64_t v23 = sub_4F4C08(a3 + 133, (uint64_t)v43);
    }
    a3[134] = v23;
    goto LABEL_87;
  }
  unint64_t v24 = (unint64_t)v34;
  if (v34 != (void *)v35) {
    sub_4E1790(a1, (uint64_t *)&v34, (uint64_t)v43);
  }
LABEL_88:
  if (v24)
  {
    uint64_t v26 = v35;
    int64x2_t v27 = (void *)v24;
    if (v35 != v24)
    {
      do
        uint64_t v26 = sub_4BD604(v26 - 1440);
      while (v26 != v24);
      int64x2_t v27 = v34;
    }
    unint64_t v35 = v24;
    operator delete(v27);
  }
  int64x2_t v28 = (char *)__p;
  if (__p)
  {
    int64x2_t v29 = v38;
    uint64_t v30 = __p;
    if (v38 != __p)
    {
      do
        int64x2_t v29 = (char *)sub_4BD604((uint64_t)(v29 - 1440));
      while (v29 != v28);
      uint64_t v30 = __p;
    }
    long long v38 = v28;
    operator delete(v30);
  }
  long long v31 = (char *)v40;
  if (v40)
  {
    long long v32 = v41;
    long long v33 = v40;
    if (v41 != v40)
    {
      do
        long long v32 = (char *)sub_4BD604((uint64_t)(v32 - 1440));
      while (v32 != v31);
      long long v33 = v40;
    }
    int64x2_t v41 = v31;
    operator delete(v33);
  }
}

void sub_4DF208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
}

void **sub_4DF29C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  sub_4F29BC((uint64_t)v7);
  if (*(unsigned char *)(a1 + 1453))
  {
    sub_4DEC24(a1, a2, (uint64_t *)v7);
  }
  else if (*(unsigned char *)(a1 + 1407))
  {
    sub_4DF37C(a1, (uint64_t *)a2, (uint64_t *)v7);
  }
  else
  {
    sub_4DF990(a1, (uint64_t *)a2, (uint64_t)v7);
  }
  sub_647CE0(a3, (uint64_t)v7);
  return sub_4F2BD0(v7);
}

void sub_4DF368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F2BD0((void **)va);
  _Unwind_Resume(a1);
}

void sub_4DF37C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long __p = 0;
  long long v34 = 0;
  unint64_t v35 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_91;
  }
  do
  {
    if (*(_DWORD *)v5 != 50) {
      goto LABEL_31;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_31;
      }
    }
    if (*(void *)(v5 + 1176) == *(void *)(v5 + 1184)
      && *(_DWORD *)(v5 + 1200) == 2
      && *(_DWORD *)(v5 + 1256) == 12
      && *(void *)(v5 + 1328) == *(void *)(v5 + 1336))
    {
      int v8 = *(_DWORD *)(v5 + 1360);
      if (v8)
      {
        if (v8 == 1)
        {
          int v9 = *(_DWORD *)(v5 + 1352);
          if (v9 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v9 && *(_DWORD *)(v5 + 1364) != 0x7FFFFFFF) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        int v10 = *(_DWORD *)(v5 + 1352);
        if (v10 != 0x7FFFFFFF && *(_DWORD *)(v5 + 1356) < v10) {
          goto LABEL_31;
        }
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        if (*(void *)(v5 + 1384)) {
          goto LABEL_31;
        }
      }
      else if (*(unsigned char *)(v5 + 1399))
      {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_6;
      }
    }
LABEL_31:
    if ((*(_DWORD *)(v5 + 1256) - 2) >= 9)
    {
      if (sub_605454(v5 + 32))
      {
        if (*(char *)(v5 + 1175) < 0)
        {
          if (*(void *)(v5 + 1160)) {
            goto LABEL_53;
          }
        }
        else if (*(unsigned char *)(v5 + 1175))
        {
          goto LABEL_53;
        }
      }
      int v11 = *(_DWORD *)v5;
      unsigned int v12 = *(_DWORD *)v5 - 40;
      if (v12 >= 5
        && (v11 == 45 || v11 != 50 && *(_DWORD *)(v5 + 1400) == -1 && v11 != 48 && *(_DWORD *)(v5 + 1404) == -1))
      {
        goto LABEL_53;
      }
      int v13 = *(_DWORD *)(v5 + 1256);
      if (v13 == 11) {
        goto LABEL_53;
      }
      if (*(char *)(v5 + 1399) < 0)
      {
        uint64_t v14 = *(void *)(v5 + 1384);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 *)(v5 + 1399);
        if (v12 < 5) {
          goto LABEL_53;
        }
      }
      if (!v14)
      {
        if (*(void *)(v5 + 1176) != *(void *)(v5 + 1184))
        {
          sub_4E353C(a1, v5, (uint64_t)v36);
          unint64_t v15 = a3[131];
          if (v15 >= a3[132]) {
            a3[131] = sub_4F4C08(a3 + 130, (uint64_t)v36);
          }
          else {
            a3[131] = sub_4F4498(v15, (uint64_t)v36) + 496;
          }
          goto LABEL_5;
        }
        if (*(_DWORD *)(v5 + 1200) != 2)
        {
          sub_4E07C4(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 6), (uint64_t)v36);
          goto LABEL_5;
        }
        if (v13 != 12)
        {
          sub_4E0ED0(a1, v5, (uint64_t)v36);
          sub_4D5C2C((uint64_t)(a3 + 68), (uint64_t)v36);
LABEL_5:
          sub_4F2FF8((uint64_t)v36);
          goto LABEL_6;
        }
        goto LABEL_6;
      }
    }
LABEL_53:
    if ((*(_DWORD *)(v5 + 1256) - 2) < 9) {
      goto LABEL_66;
    }
    if (sub_605454(v5 + 32))
    {
      if (*(char *)(v5 + 1175) < 0)
      {
        if (*(void *)(v5 + 1160)) {
          goto LABEL_66;
        }
      }
      else if (*(unsigned char *)(v5 + 1175))
      {
        goto LABEL_66;
      }
    }
    int v16 = *(_DWORD *)v5;
    unsigned int v17 = *(_DWORD *)v5 - 40;
    if (v17 >= 5 && v16 != 50)
    {
      if (v16 == 45)
      {
LABEL_66:
        sub_4E0074(a1, v5, (uint64_t)v36);
        unint64_t v18 = a3[4];
        if (v18 < a3[5]) {
          uint64_t v7 = sub_4F4498(v18, (uint64_t)v36) + 496;
        }
        else {
          uint64_t v7 = sub_4F4C08(a3 + 3, (uint64_t)v36);
        }
        a3[4] = v7;
        goto LABEL_5;
      }
      if (*(_DWORD *)(v5 + 1400) == -1 && v16 != 48 && *(_DWORD *)(v5 + 1404) == -1) {
        goto LABEL_69;
      }
    }
    if (*(_DWORD *)(v5 + 1256) == 11)
    {
LABEL_69:
      unint64_t v19 = v34;
      if ((unint64_t)v34 >= v35)
      {
        long long v34 = (char *)sub_4C83E4((uint64_t *)&__p, v5);
      }
      else
      {
        sub_4C8540((uint64_t)v34, v5);
        long long v34 = v19 + 1440;
      }
      goto LABEL_6;
    }
    if (*(char *)(v5 + 1399) < 0)
    {
      if (*(void *)(v5 + 1384)) {
        goto LABEL_69;
      }
    }
    else if (*(unsigned char *)(v5 + 1399))
    {
      goto LABEL_69;
    }
    if (v17 <= 4)
    {
      unint64_t v20 = v31;
      if (v31 >= v32)
      {
        uint64_t v21 = sub_4C83E4((uint64_t *)&v30, v5);
      }
      else
      {
        sub_4C8540(v31, v5);
        uint64_t v21 = v20 + 1440;
      }
      unint64_t v31 = v21;
    }
LABEL_6:
    v5 += 1440;
  }
  while (v5 != v6);
  if (__p != v34)
  {
    sub_4E1334(a1, (uint64_t *)&__p, (uint64_t)v36);
    unint64_t v22 = a3[4];
    if (v22 >= a3[5]) {
      uint64_t v23 = sub_4F4C08(a3 + 3, (uint64_t)v36);
    }
    else {
      uint64_t v23 = sub_4F4498(v22, (uint64_t)v36) + 496;
    }
    a3[4] = v23;
    sub_4F2FF8((uint64_t)v36);
  }
LABEL_91:
  unint64_t v24 = (unint64_t)v30;
  if (v30 != (void *)v31) {
    sub_4E1790(a1, (uint64_t *)&v30, (uint64_t)v36);
  }
  if (v30)
  {
    uint64_t v25 = v31;
    uint64_t v26 = v30;
    if ((void *)v31 != v30)
    {
      do
        uint64_t v25 = sub_4BD604(v25 - 1440);
      while (v25 != v24);
      uint64_t v26 = v30;
    }
    unint64_t v31 = v24;
    operator delete(v26);
  }
  int64x2_t v27 = (char *)__p;
  if (__p)
  {
    int64x2_t v28 = v34;
    int64x2_t v29 = __p;
    if (v34 != __p)
    {
      do
        int64x2_t v28 = (char *)sub_4BD604((uint64_t)(v28 - 1440));
      while (v28 != v27);
      int64x2_t v29 = __p;
    }
    long long v34 = v27;
    operator delete(v29);
  }
}

void sub_4DF8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_4DF990(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int64x2_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v3 = a2[1] - *a2;
  if (!v3) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0x4FA4FA4FA4FA4FA5 * (v3 >> 5);
  uint64_t v9 = a1 + 1536;
  uint64_t v10 = a1 + 3088;
  do
  {
    uint64_t v12 = *a2;
    uint64_t v13 = *a2 + 1440 * v7;
    if (*(_DWORD *)v13 != 50) {
      goto LABEL_16;
    }
    if (sub_605454(v12 + 1440 * v7 + 32))
    {
      if (*(char *)(v13 + 1175) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1160)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1175))
      {
        goto LABEL_16;
      }
    }
    if (*(void *)(v12 + 1440 * v7 + 1176) == *(void *)(v12 + 1440 * v7 + 1184)
      && *(_DWORD *)(v12 + 1440 * v7 + 1200) == 2
      && *(_DWORD *)(v12 + 1440 * v7 + 1256) == 12
      && *(void *)(v12 + 1440 * v7 + 1328) == *(void *)(v12 + 1440 * v7 + 1336))
    {
      uint64_t v28 = v12 + 1440 * v7;
      int64x2_t v29 = (int *)(v28 + 1352);
      int v30 = *(_DWORD *)(v28 + 1360);
      if (v30)
      {
        if (v30 == 1)
        {
          int v31 = *v29;
          if (v31 != 0x7FFFFFFF
            && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v31
            && *(_DWORD *)(v12 + 1440 * v7 + 1364) != 0x7FFFFFFF)
          {
            goto LABEL_16;
          }
        }
      }
      else
      {
        int v32 = *v29;
        if (v32 != 0x7FFFFFFF && *(_DWORD *)(v12 + 1440 * v7 + 1356) < v32) {
          goto LABEL_16;
        }
      }
      if (*(char *)(v13 + 1399) < 0)
      {
        if (*(void *)(v12 + 1440 * v7 + 1384)) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v13 + 1399))
      {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v12 + 1440 * v7 + 1400) == -1 && *(_DWORD *)(v12 + 1440 * v7 + 1404) == -1) {
        goto LABEL_5;
      }
    }
LABEL_16:
    if (*(_DWORD *)(v12 + 1440 * v7 + 1256) != 12) {
      goto LABEL_5;
    }
    if ((*(_DWORD *)v13 - 40) <= 4)
    {
      uint64_t v14 = v42;
      if ((unint64_t)v42 >= v43)
      {
        int v11 = (char *)sub_4C83E4((uint64_t *)&v41, v13);
      }
      else
      {
        sub_4C8540((uint64_t)v42, v13);
        int v11 = v14 + 1440;
      }
      unint64_t v42 = v11;
      goto LABEL_5;
    }
    sub_50081C(v9, v13, (uint64_t)&v33);
    sub_635CD0((long long **)&v33, (uint64_t)v39);
    if (v40 < 0)
    {
      if (!v39[1])
      {
        operator delete(v39[0]);
        unint64_t v15 = v36;
        if (!v36) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    else if (!v40)
    {
      unint64_t v15 = v36;
      if (!v36) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        int v16 = (void *)*v15;
        sub_4F4B48((uint64_t)(v15 + 2));
        operator delete(v15);
        unint64_t v15 = v16;
      }
      while (v16);
LABEL_24:
      unsigned int v17 = __p;
      long long __p = 0;
      if (v17) {
        operator delete(v17);
      }
      unint64_t v18 = (void **)v33;
      if (v33)
      {
        unint64_t v19 = v34;
        unint64_t v20 = v33;
        if (v34 != v33)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 3;
          }
          while (v19 != v18);
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      goto LABEL_5;
    }
    sub_4DFF6C(a1, 1, (uint64_t)&v33);
    uint64_t v21 = sub_5231C((uint64_t)&v33);
    sub_60E8D8(v10, (uint64_t)v39, v21, 0, (uint64_t)v37);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 >= *(void *)(a3 + 16))
    {
      *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)v37);
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v38) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 8), v37[0], (unint64_t)v37[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v37;
        *(void *)(v22 + 16) = v38;
        *(_OWORD *)unint64_t v22 = v23;
      }
      *(void *)(a3 + 8) = v22 + 24;
      *(void *)(a3 + 8) = v22 + 24;
      if ((SHIBYTE(v38) & 0x80000000) == 0)
      {
LABEL_37:
        if (v40 < 0) {
          goto LABEL_55;
        }
        goto LABEL_38;
      }
    }
    operator delete(v37[0]);
    if (v40 < 0)
    {
LABEL_55:
      operator delete(v39[0]);
      unint64_t v24 = v36;
      if (!v36) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_38:
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_40;
    }
    do
    {
LABEL_39:
      uint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      unint64_t v24 = v25;
    }
    while (v25);
LABEL_40:
    uint64_t v26 = __p;
    long long __p = 0;
    if (v26) {
      operator delete(v26);
    }
    unint64_t v18 = (void **)v33;
    if (v33)
    {
      int64x2_t v27 = v34;
      unint64_t v20 = v33;
      if (v34 == v33) {
        goto LABEL_49;
      }
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v18);
LABEL_48:
      unint64_t v20 = v33;
LABEL_49:
      long long v34 = v18;
      operator delete(v20);
    }
LABEL_5:
    ++v7;
  }
  while (v7 != v8);
  if (v41 != v42) {
    sub_4E6E84(a1, (uint64_t *)&v41);
  }
  if (v42) {
    operator delete(v42);
  }
}

void sub_4DFE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_4D4B58((uint64_t)&a9);
  sub_4AF510((void **)(v11 - 112));
  _Unwind_Resume(a1);
}

void sub_4DFE8C(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4DFEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 8) = v35;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  sub_4D4880((void **)&a9);
  sub_4AF510((void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_4DFF58(_Unwind_Exception *a1)
{
  sub_4AF510((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_4DFF6C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    *(_OWORD *)long long __p = 0u;
    long long v8 = 0u;
    int v9 = 1065353216;
    sub_60E8D8(a1 + 3088, (uint64_t)&dword_25607D0, (uint64_t)__p, 0, (uint64_t)&v10);
    uint64_t v4 = (void *)v8;
    if ((void)v8)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
    v10.__r_.__value_.__s.__data_[0] = 0;
  }
  sub_6358A0(a3, &xmmword_25607A0, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_4E0044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4E0058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4E0074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34((uint64_t)v63);
  BOOL v64 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  sub_5F3B34((uint64_t)&v68);
  v69[8] = -1;
  *(_DWORD *)((char *)v70 + 3) = -1;
  LODWORD(v70[0]) = -1;
  memset((char *)v70 + 7, 0, 26);
  uint64_t v72 = 0;
  long long v71 = 0uLL;
  char v73 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  sub_50081C(a1 + 1536, a2, (uint64_t)&v35);
  sub_635CD0((long long **)&v35, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_25:
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 407) = 0;
    *(void *)(a3 + 415) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 480) = 0u;
    unint64_t v19 = v38;
    if (!v38) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_25;
  }
LABEL_3:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_6358A0((uint64_t)&v35, &xmmword_25607A0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_635CD0((long long **)&v35, (uint64_t)v32);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v35);
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  uint64_t v56 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v52[4] = 0u;
  *(_OWORD *)&v48[4] = 0u;
  long long v49 = 0u;
  *(void *)int64x2_t v44 = 0x7FFFFFFFLL;
  *(_OWORD *)&v44[16] = 0u;
  *(_OWORD *)&v42[8] = 0u;
  uint64_t v41 = 0;
  *(int64x2_t *)unint64_t v42 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v43 = *(_OWORD *)v42;
  __p.__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
  uint64_t v40 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  *(_DWORD *)&v42[16] = 0x7FFFFFFF;
  *(_DWORD *)&v44[8] = 0x7FFFFFFF;
  *(void *)&v44[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v46 = 0u;
  memset(v47, 0, sizeof(v47));
  unint64_t v45 = 0x8000000080000000;
  *(void *)int64x2_t v48 = 0x8000000080000000;
  *(_DWORD *)&v48[8] = 0x7FFFFFFF;
  LODWORD(v49) = -1;
  uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
  int v51 = 0x7FFFFFFF;
  *(void *)int64x2_t v52 = 0x7FFFFFFF7FFFFFFFLL;
  long long v53 = _Q1;
  v54[1] = 0;
  v54[0] = 0;
  uint64_t v55 = 0;
  uint64_t v58 = 0;
  v57[0] = 0;
  v57[1] = 0;
  unint64_t v59 = 0xFFFFFFFF00000000;
  uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v32, v6, &__p, v34);
  sub_4D90B4((uint64_t)v63, (uint64_t)v34);
  sub_4D4B58((uint64_t)v34);
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  uint64_t v12 = (void **)v54[0];
  if (v54[0])
  {
    uint64_t v13 = (void **)v54[1];
    uint64_t v14 = v54[0];
    if (v54[1] != v54[0])
    {
      do
        uint64_t v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v54[0];
    }
    v54[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v47[8])
  {
    *(void *)&v47[16] = *(void *)&v47[8];
    operator delete(*(void **)&v47[8]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    uint64_t v16 = __p.__r_.__value_.__r.__words[2];
    unsigned int v17 = (void *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while (v16 != v15);
      unsigned int v17 = (void *)__p.__r_.__value_.__l.__size_;
    }
    __p.__r_.__value_.__r.__words[2] = v15;
    operator delete(v17);
  }
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if (*(_DWORD *)(a2 + 1256) == 12) {
      goto LABEL_37;
    }
  }
  else if (*(_DWORD *)(a2 + 1256) == 12)
  {
    goto LABEL_37;
  }
  if (sub_5F7924(v63, (char *)&qword_2560320))
  {
    unsigned int v20 = *(_DWORD *)(a2 + 1296);
    if ((int)v20 >= 36000)
    {
      if (v20 >> 8 > 0xD2E)
      {
        unsigned int v20 = 864000 * vcvtmd_s64_f64((double)(int)v20 / 864000.0);
      }
      else
      {
        if ((v20 % 0x8CA0) >> 4 <= 0x464) {
          unsigned int v21 = v20 / 0x8CA0;
        }
        else {
          unsigned int v21 = v20 / 0x8CA0 + 1;
        }
        unsigned int v20 = 36000 * v21;
      }
    }
    sub_5F66B8((uint64_t *)v63, (uint64_t)&qword_2560320, v20);
  }
LABEL_37:
  sub_4E668C(a1, (_DWORD *)a2, v63);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_49;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_77:
      BOOL v23 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_50;
    }
LABEL_49:
    BOOL v23 = 1;
    goto LABEL_50;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v22 = *(void *)(a2 + 1160);
  }
  BOOL v23 = 1;
  if (!v22 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_77;
  }
LABEL_50:
  BOOL v64 = v23;
  sub_4E3C10(a2, (uint64_t)&__p);
  sub_4F377C((uint64_t)v69, (uint64_t)&__p);
  v70[0] = *(void *)v42;
  if (SHIBYTE(v70[3]) < 0) {
    operator delete((void *)v70[1]);
  }
  *(_OWORD *)&v70[1] = *(_OWORD *)&v42[8];
  v70[3] = v43;
  BYTE7(v43) = 0;
  v42[8] = 0;
  LOBYTE(v70[4]) = BYTE8(v43);
  if (SHIBYTE(v72) < 0)
  {
    operator delete((void *)v71);
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    if (SBYTE7(v43) < 0)
    {
      operator delete(*(void **)&v42[8]);
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
    else
    {
      int v24 = v41;
      if (v41 == 1) {
        goto LABEL_54;
      }
    }
  }
  else
  {
    long long v71 = *(_OWORD *)v44;
    uint64_t v72 = *(void *)&v44[16];
    v44[23] = 0;
    v44[0] = 0;
    char v73 = v44[24];
    int v24 = v41;
    if (v41 == 1)
    {
LABEL_54:
      uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_62;
      }
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
      goto LABEL_61;
    }
  }
  if (!v24 && SHIBYTE(v40) < 0)
  {
    uint64_t v25 = (void *)__p.__r_.__value_.__l.__size_;
LABEL_61:
    operator delete(v25);
  }
LABEL_62:
  sub_4F4498(a3, (uint64_t)v63);
  unint64_t v19 = v38;
  if (!v38) {
    goto LABEL_64;
  }
  do
  {
LABEL_63:
    uint64_t v26 = (void *)*v19;
    sub_4F4B48((uint64_t)(v19 + 2));
    operator delete(v19);
    unint64_t v19 = v26;
  }
  while (v26);
LABEL_64:
  int64x2_t v27 = v37;
  int64x2_t v37 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void **)v35;
  if (v35)
  {
    int64x2_t v29 = v36;
    int v30 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 3;
      }
      while (v29 != v28);
      int v30 = v35;
    }
    uint64_t v36 = v28;
    operator delete(v30);
  }
  return sub_4F2FF8((uint64_t)v63);
}

void sub_4E06DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4DC10C(v33);
  sub_4D4B58(v32);
  sub_4D4880(&a32);
  sub_4F2FF8((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_4E0708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
}

void sub_4E07C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500DBC(a2, (uint64_t)&v47);
  sub_635CD0((long long **)&v47, (uint64_t)v43);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v47);
  uint64_t v72 = 0;
  uint64_t v74 = 0;
  uint64_t v68 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v64[4] = 0u;
  *(_OWORD *)&v60[4] = 0u;
  long long v61 = 0u;
  *(void *)uint64_t v56 = 0x7FFFFFFFLL;
  *(_OWORD *)&v56[16] = 0u;
  *(_OWORD *)&v54[8] = 0u;
  uint64_t v53 = 0;
  *(int64x2_t *)int64x2_t v54 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v55 = *(_OWORD *)v54;
  v51[0] = (void *)0xFFFFFFFFLL;
  long long v52 = 0uLL;
  v51[1] = 0;
  *(_DWORD *)&v54[16] = 0x7FFFFFFF;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  *(void *)&v56[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)uint64_t v58 = 0u;
  memset(v59, 0, sizeof(v59));
  unint64_t v57 = 0x8000000080000000;
  *(void *)uint64_t v60 = 0x8000000080000000;
  *(_DWORD *)&v60[8] = 0x7FFFFFFF;
  LODWORD(v61) = -1;
  uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
  int v63 = 0x7FFFFFFF;
  *(void *)BOOL v64 = 0x7FFFFFFF7FFFFFFFLL;
  long long v65 = _Q1;
  v66[1] = 0;
  v66[0] = 0;
  uint64_t v67 = 0;
  uint64_t v70 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v71 = 0xFFFFFFFF00000000;
  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v43, v6, v51, (char **)&v45);
  sub_4D90B4(a3, (uint64_t)&v45);
  sub_4D4B58((uint64_t)&v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v66[0];
  if (v66[0])
  {
    uint64_t v13 = (void **)v66[1];
    uint64_t v14 = v66[0];
    if (v66[1] != v66[0])
    {
      do
        uint64_t v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      uint64_t v14 = v66[0];
    }
    v66[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v59[8])
  {
    *(void *)&v59[16] = *(void *)&v59[8];
    operator delete(*(void **)&v59[8]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  std::string::size_type v15 = v51[1];
  if (v51[1])
  {
    uint64_t v16 = v52;
    unsigned int v17 = v51[1];
    if ((void *)v52 != v51[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      unsigned int v17 = v51[1];
    }
    *(void *)&long long v52 = v15;
    operator delete(v17);
  }
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
      goto LABEL_32;
    }
  }
  else if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    goto LABEL_32;
  }
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_32;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_78:
      BOOL v19 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_33;
    }
LABEL_32:
    BOOL v19 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 1160);
  }
  BOOL v19 = 1;
  if (!v18 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_78;
  }
LABEL_33:
  *(unsigned char *)(a3 + 160) = v19;
  sub_4E427C(a2, (uint64_t *)&v45);
  unsigned int v20 = (char *)v45;
  unsigned int v21 = v46;
  while (v20 != v21)
  {
    unint64_t v22 = *(void *)(a3 + 176);
    if (v22 >= *(void *)(a3 + 184))
    {
      uint64_t v23 = sub_4F6B24((void *)(a3 + 168), (uint64_t)v20);
    }
    else
    {
      sub_4F6CF8(*(void *)(a3 + 176), (uint64_t)v20);
      uint64_t v23 = v22 + 800;
      *(void *)(a3 + 176) = v23;
    }
    *(void *)(a3 + 176) = v23;
    sub_4D9344(a2, (std::string *)v51);
    unint64_t v24 = *(void *)(v23 - 16);
    if (v24 >= *(void *)(v23 - 8))
    {
      uint64_t v26 = sub_6E8C4((void **)(v23 - 24), (uint64_t)v51);
    }
    else
    {
      long long v25 = *(_OWORD *)v51;
      *(void *)(v24 + 16) = v52;
      *(_OWORD *)unint64_t v24 = v25;
      v51[1] = 0;
      *(void *)&long long v52 = 0;
      v51[0] = 0;
      uint64_t v26 = (char *)(v24 + 24);
    }
    *(void *)(v23 - 16) = v26;
    if (SBYTE7(v52) < 0) {
      operator delete(v51[0]);
    }
    v20 += 768;
  }
  sub_4E3C10(a2, (uint64_t)v51);
  sub_4F377C(a3 + 352, (uint64_t)v51);
  *(void *)(a3 + 392) = *(void *)v54;
  int64x2_t v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)int64x2_t v27 = *(_OWORD *)&v54[8];
  *(void *)(a3 + 416) = v55;
  BYTE7(v55) = 0;
  v54[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v55);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v55);
    *uint64_t v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v54[8]);
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v53;
      if (v53 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    *uint64_t v28 = *(_OWORD *)v56;
    *(void *)(a3 + 448) = *(void *)&v56[16];
    v56[23] = 0;
    v56[0] = 0;
    *(unsigned char *)(a3 + 456) = v56[24];
    int v29 = v53;
    if (v53 == 1)
    {
LABEL_48:
      int v30 = v51[1];
      if (!v51[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v52 = v51[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v52) < 0)
  {
    int v30 = v51[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4E3F9C(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v51);
    sub_4D90B4(a3 + 192, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
  }
  uint64_t v34 = (char *)v45;
  if (v45)
  {
    uint64_t v35 = (uint64_t)v46;
    uint64_t v36 = v45;
    if (v46 != v45)
    {
      do
        uint64_t v35 = sub_4F4A98(v35 - 768);
      while ((char *)v35 != v34);
      uint64_t v36 = v45;
    }
    int64x2_t v46 = v34;
    operator delete(v36);
  }
  int64x2_t v37 = v50;
  if (v50)
  {
    do
    {
      uint64_t v38 = (void *)*v37;
      sub_4F4B48((uint64_t)(v37 + 2));
      operator delete(v37);
      int64x2_t v37 = v38;
    }
    while (v38);
  }
  unint64_t v39 = v49;
  long long v49 = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t v40 = (void **)v47;
  if (v47)
  {
    uint64_t v41 = v48;
    unint64_t v42 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      unint64_t v42 = v47;
    }
    int64x2_t v48 = v40;
    operator delete(v42);
  }
}

void sub_4E0DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v44);
  _Unwind_Resume(a1);
}

void sub_4E0E44(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E0E58(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E0E84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x4E0EB0);
}

void sub_4E0EA0()
{
  *(void *)(v0 + 176) = v1;
  JUMPOUT(0x4E0EB0);
}

void sub_4E0EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_4D9D74(&a12);
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

void sub_4E0ED0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500EF8(a1 + 1536, a2, (uint64_t)&v24);
  sub_635CD0((long long **)&v24, (uint64_t)v22);
  uint64_t v6 = sub_5231C((uint64_t)&v24);
  sub_60E8D8(a1 + 3088, (uint64_t)v22, v6, 0, (uint64_t)&__p);
  sub_5F41E8(a3, (uint64_t)&__p);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22[0]);
LABEL_3:
  if (sub_5F7924((char ***)a3, byte_255F370))
  {
    unsigned int v7 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)byte_255F370, (float)v7);
  }
  if (sub_5F7924((char ***)a3, (char *)&qword_255F388))
  {
    unsigned int v8 = sub_3FB38C(a2 + 1264);
    sub_5F71A4(a3, (uint64_t)&qword_255F388, (float)v8);
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)
    || (*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_21;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_49:
      BOOL v10 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_22;
    }
LABEL_21:
    BOOL v10 = 1;
    goto LABEL_22;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 1160);
  }
  BOOL v10 = 1;
  if (!v9 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_49;
  }
LABEL_22:
  *(unsigned char *)(a3 + 160) = v10;
  sub_4E3C10(a2, (uint64_t)&__p);
  sub_4F377C(a3 + 352, (uint64_t)&__p);
  *(void *)(a3 + 392) = v33;
  uint64_t v11 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v11);
  }
  uint64_t v12 = (_OWORD *)(a3 + 432);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v34;
  *(void *)(a3 + 416) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34[0]) = 0;
  *(unsigned char *)(a3 + 424) = v36;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v14 = SHIBYTE(v35);
    _OWORD *v12 = v37;
    *(void *)(a3 + 448) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(v37) = 0;
    *(unsigned char *)(a3 + 456) = v39;
    if (v14 < 0)
    {
      operator delete(v34[0]);
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
    else
    {
      int v13 = v32;
      if (v32 != 1) {
        goto LABEL_29;
      }
    }
LABEL_33:
    std::string::size_type v15 = v29;
    if (!v29) {
      goto LABEL_36;
    }
    int v30 = v29;
    goto LABEL_35;
  }
  _OWORD *v12 = v37;
  *(void *)(a3 + 448) = v38;
  HIBYTE(v38) = 0;
  LOBYTE(v37) = 0;
  *(unsigned char *)(a3 + 456) = v39;
  int v13 = v32;
  if (v32 == 1) {
    goto LABEL_33;
  }
LABEL_29:
  if (!v13 && v31 < 0)
  {
    std::string::size_type v15 = v29;
LABEL_35:
    operator delete(v15);
  }
LABEL_36:
  uint64_t v16 = v27;
  if (v27)
  {
    do
    {
      unsigned int v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  uint64_t v18 = v26;
  uint64_t v26 = 0;
  if (v18) {
    operator delete(v18);
  }
  BOOL v19 = (void **)v24;
  if (v24)
  {
    unsigned int v20 = v25;
    unsigned int v21 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      unsigned int v21 = v24;
    }
    long long v25 = v19;
    operator delete(v21);
  }
}

void sub_4E1284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_4D4880(&a16);
  sub_4F2FF8(v30);
  _Unwind_Resume(a1);
}

void sub_4E1334(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4E6AC4(a1, a2, 0, (uint64_t)&v25);
  sub_4D90B4(a3, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  unint64_t v6 = *(void *)(a3 + 176);
  if (v6 >= *(void *)(a3 + 184))
  {
    uint64_t v7 = sub_4F799C((void *)(a3 + 168));
  }
  else
  {
    *(_DWORD *)(v6 + 768) = -1;
    *(void *)(v6 + 776) = 0;
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    uint64_t v7 = v6 + 800;
  }
  *(void *)(a3 + 176) = v7;
  sub_4E6398(a1, a2, &v25.__r_.__value_.__l.__data_);
  uint64_t v8 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v8, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  sub_4E6AC4(a1, a2, 1, (uint64_t)&v25);
  uint64_t v9 = sub_4DB6A8(*(void *)(a3 + 176) - 800);
  sub_4D90B4(v9 + 160, (uint64_t)&v25);
  sub_4D4B58((uint64_t)&v25);
  *(unsigned char *)(a3 + 160) = 0;
  sub_4E3C10(*a2, (uint64_t)&v25);
  sub_4F377C(a3 + 352, (uint64_t)&v25);
  *(void *)(a3 + 392) = v28;
  BOOL v10 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v10);
  }
  uint64_t v11 = (_OWORD *)(a3 + 432);
  *(_OWORD *)BOOL v10 = *(_OWORD *)__p;
  *(void *)(a3 + 416) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a3 + 424) = v31;
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v13 = SHIBYTE(v30);
    *uint64_t v11 = v32;
    *(void *)(a3 + 448) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *(unsigned char *)(a3 + 456) = v34;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
    else
    {
      int v12 = v27;
      if (v27 != 1) {
        goto LABEL_11;
      }
    }
LABEL_15:
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
    if (!v25.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
    v25.__r_.__value_.__r.__words[2] = v25.__r_.__value_.__l.__size_;
    goto LABEL_17;
  }
  *uint64_t v11 = v32;
  *(void *)(a3 + 448) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  *(unsigned char *)(a3 + 456) = v34;
  int v12 = v27;
  if (v27 == 1) {
    goto LABEL_15;
  }
LABEL_11:
  if (!v12 && v26 < 0)
  {
    std::string::size_type size = (void *)v25.__r_.__value_.__l.__size_;
LABEL_17:
    operator delete(size);
  }
LABEL_18:
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      sub_4D9344(v15, &v25);
      unint64_t v17 = *(void *)(a3 + 472);
      if (v17 >= *(void *)(a3 + 480))
      {
        BOOL v19 = sub_6E8C4((void **)(a3 + 464), (uint64_t)&v25);
        int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 472) = v19;
        if (v20 < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v17 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v17 = v18;
        *(void *)(a3 + 472) = v17 + 24;
      }
      uint64_t v21 = *(void *)(a3 + 176);
      sub_4D9344(v15, &v25);
      unint64_t v22 = *(void *)(v21 - 16);
      if (v22 >= *(void *)(v21 - 8))
      {
        unint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)&v25);
      }
      else
      {
        long long v23 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(void *)(v22 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v22 = v23;
        memset(&v25, 0, sizeof(v25));
        unint64_t v24 = (char *)(v22 + 24);
      }
      *(void *)(v21 - 16) = v24;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v15 += 1440;
    }
    while (v15 != v16);
  }
}

void sub_4E1690(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E16A4(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E16B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4E16EC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1700(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1714(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E1740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4E1790(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_4E6E84(a1, a2);
}

void sub_4E1AEC(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1B00(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_4F2FF8(v2);
  _Unwind_Resume(a1);
}

void sub_4E1B48(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1B5C(_Unwind_Exception *a1)
{
  sub_4F2FF8(v1);
  _Unwind_Resume(a1);
}

void sub_4E1B70(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E1B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_4F2FF8(v15);
    _Unwind_Resume(a1);
  }
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4E1BEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 1256) - 2;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  if (v6 < 9) {
    goto LABEL_9;
  }
  if (sub_605454(a2 + 32))
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1175);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 1160);
    }
    if (v7) {
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)a2 == 45)
  {
LABEL_9:
    sub_4E0074(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184))
  {
    sub_4E353C(a1, a2, (uint64_t)__p);
LABEL_10:
    sub_4D5C2C(a3, (uint64_t)__p);
    sub_4F2FF8((uint64_t)__p);
    goto LABEL_11;
  }
  if (*(_DWORD *)(a2 + 1200) != 2)
  {
    sub_4E07C4(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1256) != 12)
  {
    sub_4E0ED0(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(void *)(a2 + 1328) != *(void *)(a2 + 1336))
  {
    sub_4E4454(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v12 = *(_DWORD *)(a2 + 1360);
  if (v12)
  {
    if (v12 != 1) {
      goto LABEL_32;
    }
    int v13 = *(_DWORD *)(a2 + 1352);
    if (v13 == 0x7FFFFFFF || *(_DWORD *)(a2 + 1356) >= v13 || *(_DWORD *)(a2 + 1364) == 0x7FFFFFFF) {
      goto LABEL_32;
    }
LABEL_31:
    sub_4E4748(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  int v14 = *(_DWORD *)(a2 + 1352);
  if (v14 != 0x7FFFFFFF && *(_DWORD *)(a2 + 1356) < v14) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v15 = *(unsigned __int8 *)(a2 + 1399);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 1384);
  }
  if (v15)
  {
    sub_4E4E5C(a1, a2, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 1400) != -1 || *(_DWORD *)(a2 + 1404) != -1)
  {
    sub_57BD78(*(void *)(a1 + 5280), (uint64_t *)(a2 + 1400), a2 + 1416, (uint64_t)__p);
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 == 48) {
    sub_4E53C8(a1);
  }
LABEL_11:
  if (*(void *)(a3 + 464) == *(void *)(a3 + 472))
  {
    sub_4D9344(a2, __p);
    unint64_t v8 = *(void *)(a3 + 472);
    if (v8 >= *(void *)(a3 + 480))
    {
      BOOL v10 = sub_6E8C4((void **)(a3 + 464), (uint64_t)__p);
      int v11 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 472) = v10;
      if (v11 < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *(void *)(v8 + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v8 = v9;
      *(void *)(a3 + 472) = v8 + 24;
    }
  }
}

void sub_4E1EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4F2FF8(v15);
  _Unwind_Resume(a1);
}

void sub_4E1F40(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_4F3104((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_4E1F6C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v99 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = 0x4FA4FA4FA4FA4FA5 * ((v8 - *v1) >> 5);
  if (*v2 != v2[1]) {
    ++v9;
  }
  unint64_t v94 = v9;
  int64x2_t v106 = 0;
  int64x2_t v107 = 0;
  unint64_t v108 = 0;
  char v103 = 0;
  int64x2_t v104 = 0;
  unint64_t v105 = 0;
  char v130 = 0;
  char v128 = 0;
  int64x2_t v98 = v2;
  if (v8 != v7)
  {
    int v10 = 0;
    int64x2_t v101 = v1;
    while (1)
    {
      if (sub_605454(v7 + 32))
      {
        if (*(char *)(v7 + 1175) < 0)
        {
          if (*(void *)(v7 + 1160))
          {
LABEL_10:
            if (!*(unsigned char *)(v7 + 1144)) {
              goto LABEL_234;
            }
            if (sub_604340(v7 + 712, 0))
            {
              if (!*(unsigned char *)(v7 + 1144))
              {
LABEL_234:
                exceptiouint64_t n = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              sub_604384((char *)(v7 + 712), 0, (uint64_t)__dst);
LABEL_26:
              int v12 = v107;
              if ((unint64_t)v107 < v108) {
                goto LABEL_27;
              }
LABEL_24:
              int v13 = sub_6E6EC((char **)&v106, (uint64_t)__dst);
            }
            else
            {
              if (*(char *)(v7 + 495) < 0)
              {
                sub_4200(__dst, *(void **)(v7 + 472), *(void *)(v7 + 480));
                goto LABEL_26;
              }
              long long v11 = *(_OWORD *)(v7 + 472);
              int64x2_t v114 = *(void **)(v7 + 488);
              *(_OWORD *)long long __dst = v11;
              int v12 = v107;
              if ((unint64_t)v107 >= v108) {
                goto LABEL_24;
              }
LABEL_27:
              if (SHIBYTE(v114) < 0)
              {
                sub_4200(v12, __dst[0], (unint64_t)__dst[1]);
              }
              else
              {
                long long v14 = *(_OWORD *)__dst;
                void v12[2] = v114;
                *(_OWORD *)int v12 = v14;
              }
              int v13 = (char *)(v12 + 3);
            }
            int64x2_t v107 = (void **)v13;
            sub_4E3C10(v7, (uint64_t)&v131);
            uint64_t v15 = v104;
            if ((unint64_t)v104 >= v105)
            {
              int64x2_t v104 = sub_4F6D70(&v103, (uint64_t)&v131);
              if (SHIBYTE(v140) < 0)
              {
                operator delete((void *)__p);
                if (SHIBYTE(v137) < 0) {
                  goto LABEL_49;
                }
              }
              else if (SHIBYTE(v137) < 0)
              {
                goto LABEL_49;
              }
            }
            else
            {
              int v16 = v10;
              *((_DWORD *)v104 + 8) = v134;
              if (v134 == 1)
              {
                uint64_t v21 = v131;
                *((void *)v15 + 1) = 0;
                *(void *)uint64_t v15 = v21;
                *((void *)v15 + 2) = 0;
                *((void *)v15 + 3) = 0;
                unint64_t v22 = (const void *)v132;
                int64_t v23 = *((void *)&v132 + 1) - v132;
                if (*((void *)&v132 + 1) != (void)v132)
                {
                  if (v23 < 0) {
                    sub_2E00();
                  }
                  unint64_t v24 = (char *)operator new(*((void *)&v132 + 1) - v132);
                  *((void *)v15 + 1) = v24;
                  *((void *)v15 + 2) = v24;
                  std::string v25 = &v24[8 * (v23 >> 3)];
                  *((void *)v15 + 3) = v25;
                  memcpy(v24, v22, v23);
                  *((void *)v15 + 2) = v25;
                }
              }
              else if (!v134)
              {
                *(void *)uint64_t v15 = v131;
                unint64_t v17 = v15 + 8;
                if (SHIBYTE(v133) < 0)
                {
                  sub_4200(v17, (void *)v132, *((unint64_t *)&v132 + 1));
                }
                else
                {
                  long long v18 = v132;
                  *((void *)v15 + 3) = v133;
                  *(_OWORD *)unint64_t v17 = v18;
                }
              }
              *((void *)v15 + 5) = v135;
              long long v26 = v136;
              *((void *)v15 + 8) = v137;
              *((_OWORD *)v15 + 3) = v26;
              uint64_t v137 = 0;
              long long v136 = 0uLL;
              v15[72] = v138;
              long long v27 = __p;
              *((void *)v15 + 12) = v140;
              *((_OWORD *)v15 + 5) = v27;
              uint64_t v140 = 0;
              long long __p = 0uLL;
              v15[104] = v141;
              int64x2_t v104 = v15 + 112;
              int v10 = v16;
              uint64_t v3 = v98;
              if (SHIBYTE(v137) < 0)
              {
LABEL_49:
                operator delete((void *)v136);
                int v19 = v134;
                if (v134 == 1)
                {
LABEL_50:
                  int v20 = (void *)v132;
                  if ((void)v132)
                  {
                    *((void *)&v132 + 1) = v132;
LABEL_52:
                    operator delete(v20);
                  }
                  goto LABEL_53;
                }
LABEL_39:
                if (!v19 && SHIBYTE(v133) < 0)
                {
                  int v20 = (void *)v132;
                  goto LABEL_52;
                }
LABEL_53:
                if (SHIBYTE(v114) < 0) {
                  operator delete(__dst[0]);
                }
                ++v10;
                goto LABEL_6;
              }
            }
            int v19 = v134;
            if (v134 == 1) {
              goto LABEL_50;
            }
            goto LABEL_39;
          }
        }
        else if (*(unsigned char *)(v7 + 1175))
        {
          goto LABEL_10;
        }
      }
      if (*(_DWORD *)(v7 + 1200) != 1 || *(void *)(v7 + 1208) == *(void *)(v7 + 1216))
      {
        if (*(void *)(v7 + 1176) != *(void *)(v7 + 1184))
        {
          if (v128)
          {
            uint64_t v28 = v127;
LABEL_57:
            sub_4C91C8((uint64_t)v28, v7);
            goto LABEL_6;
          }
          sub_4C8540((uint64_t)v127, v7);
          char v128 = 1;
        }
      }
      else
      {
        if (v130)
        {
          uint64_t v28 = v129;
          goto LABEL_57;
        }
        sub_4C8540((uint64_t)v129, v7);
        char v130 = 1;
      }
LABEL_6:
      v7 += 1440;
      if (v7 == v8)
      {
        int v29 = (const void **)v106;
        uint64_t v30 = (const void **)v107;
        uint64_t v4 = v101;
        goto LABEL_60;
      }
    }
  }
  uint64_t v30 = 0;
  int v29 = 0;
  int v10 = 0;
LABEL_60:
  char v31 = sub_86F68(v29, v30);
  long long v32 = v107;
  if (v107 != v31)
  {
    while (v32 != v31)
    {
      if (*((char *)v32 - 1) < 0) {
        operator delete(*(v32 - 3));
      }
      v32 -= 3;
    }
    int64x2_t v107 = v31;
  }
  uint64_t v33 = sub_4F71B0((uint64_t)v103, (uint64_t)v104);
  sub_4F700C((uint64_t)&v103, v33, (uint64_t)v104);
  sub_5F3B34(v6);
  *(void *)(v6 + 168) = 0;
  *(unsigned char *)(v6 + 160) = 0;
  *(void *)(v6 + 176) = 0;
  *(void *)(v6 + 184) = 0;
  uint64_t v102 = (void *)(v6 + 168);
  sub_5F3B34(v6 + 192);
  *(_DWORD *)(v6 + 384) = -1;
  *(_DWORD *)(v6 + 392) = -1;
  *(_DWORD *)(v6 + 395) = -1;
  char v34 = (void **)(v6 + 432);
  *(void *)(v6 + 399) = 0;
  *(void *)(v6 + 415) = 0;
  *(void *)(v6 + 407) = 0;
  *(_WORD *)(v6 + 423) = 0;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = 0;
  *(void *)(v6 + 432) = 0;
  *(unsigned char *)(v6 + 456) = 0;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  if (v10 < 1)
  {
    if (!v130)
    {
      if (v128) {
        sub_4E3C10((uint64_t)v127, (uint64_t)&v131);
      }
      else {
        sub_524D84(4, (uint64_t)&v131);
      }
      sub_4F377C(v6 + 352, (uint64_t)&v131);
      *(void *)(v6 + 392) = v135;
      int64x2_t v91 = (void **)(v6 + 400);
      if (*(char *)(v6 + 423) < 0) {
        operator delete(*v91);
      }
      char v92 = 0;
      *(_OWORD *)int64x2_t v91 = v136;
      *(void *)(v6 + 416) = v137;
      HIBYTE(v137) = 0;
      LOBYTE(v136) = 0;
      *(unsigned char *)(v6 + 424) = v138;
      if (*(char *)(v6 + 455) < 0)
      {
        operator delete(*v34);
        char v92 = HIBYTE(v137);
      }
      *(_OWORD *)char v34 = __p;
      *(void *)(v6 + 448) = v140;
      HIBYTE(v140) = 0;
      LOBYTE(__p) = 0;
      *(unsigned char *)(v6 + 456) = v141;
      if (v92 < 0) {
        operator delete((void *)v136);
      }
      goto LABEL_79;
    }
    sub_4E3C10((uint64_t)v129, (uint64_t)&v131);
LABEL_74:
    sub_4F377C(v6 + 352, (uint64_t)&v131);
    *(void *)(v6 + 392) = v135;
    char v36 = (void **)(v6 + 400);
    if (*(char *)(v6 + 423) < 0) {
      operator delete(*v36);
    }
    char v37 = 0;
    *(_OWORD *)char v36 = v136;
    *(void *)(v6 + 416) = v137;
    HIBYTE(v137) = 0;
    LOBYTE(v136) = 0;
    *(unsigned char *)(v6 + 424) = v138;
    if (*(char *)(v6 + 455) < 0)
    {
      operator delete(*v34);
      char v37 = HIBYTE(v137);
    }
    *(_OWORD *)char v34 = __p;
    *(void *)(v6 + 448) = v140;
    HIBYTE(v140) = 0;
    LOBYTE(__p) = 0;
    *(unsigned char *)(v6 + 456) = v141;
    if (v37 < 0)
    {
      operator delete((void *)v136);
      int v38 = v134;
      if (v134 != 1)
      {
LABEL_80:
        if (v38 || (SHIBYTE(v133) & 0x80000000) == 0) {
          goto LABEL_87;
        }
        char v39 = (void *)v132;
        goto LABEL_86;
      }
LABEL_84:
      char v39 = (void *)v132;
      if (!(void)v132) {
        goto LABEL_87;
      }
      *((void *)&v132 + 1) = v132;
LABEL_86:
      operator delete(v39);
      goto LABEL_87;
    }
LABEL_79:
    int v38 = v134;
    if (v134 != 1) {
      goto LABEL_80;
    }
    goto LABEL_84;
  }
  if ((char *)v107 - (unsigned char *)v106 != 24 || (uint64_t v35 = (char *)v103, v104 - (unsigned char *)v103 != 112))
  {
    sub_524D84(4, (uint64_t)&v131);
    goto LABEL_74;
  }
  sub_4F39B8(v6 + 352, (std::string *)v103);
  *(void *)(v6 + 392) = *((void *)v35 + 5);
  std::string::operator=((std::string *)(v6 + 400), (const std::string *)v35 + 2);
  *(unsigned char *)(v6 + 424) = v35[72];
  std::string::operator=((std::string *)(v6 + 432), (const std::string *)(v35 + 80));
  *(unsigned char *)(v6 + 456) = v35[104];
LABEL_87:
  *(unsigned char *)(v6 + 160) = 1;
  uint64_t v40 = *v4;
  uint64_t v96 = v4[1];
  int64x2_t v97 = (void **)(v6 + 464);
  if (*v4 == v96) {
    goto LABEL_172;
  }
  int v95 = v10;
  do
  {
    uint64_t v100 = v40;
    sub_4E1BEC(v99, v40, (uint64_t)__dst);
    uint64_t v41 = v115;
    uint64_t v42 = v116;
    while (v41 != v42)
    {
      if (*(_DWORD *)(v41 + 768) == 1 && (sub_4F3B98((uint64_t)&v117, v6 + 352) & 1) == 0)
      {
        if (*(_DWORD *)(v41 + 768) != -1)
        {
          if ((uint64_t *)(v41 + 320) == &v117) {
            goto LABEL_138;
          }
          goto LABEL_116;
        }
        bzero(&v131, 0x300uLL);
        sub_5F3B34((uint64_t)&v131);
        sub_5F3B34((uint64_t)&v142);
        *(_DWORD *)unsigned int v147 = -1;
        memset(&v147[8], 255, 7);
        uint64_t v149 = 0;
        long long v148 = 0uLL;
        *(_WORD *)int v150 = 0;
        memset(&v151, 0, sizeof(v151));
        char v152 = 0;
        sub_5F3B34((uint64_t)&v153);
        sub_5F3B34((uint64_t)v157);
        v157[10] = xmmword_20E22B0;
        int v44 = *(_DWORD *)(v41 + 768);
        if (v44 == 1)
        {
          sub_4F4314(v41, (uint64_t)&v131);
        }
        else
        {
          if (!v44 && *(char *)(v41 + 23) < 0) {
            operator delete(*(void **)v41);
          }
          sub_4F3F14(v41, (uint64_t)&v131);
        }
        *(_DWORD *)(v41 + 768) = 1;
        sub_4D4B58((uint64_t)v157);
        sub_4D4B58((uint64_t)&v153);
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v151.__r_.__value_.__l.__data_);
          if ((v150[0] & 0x80000000) != 0) {
            goto LABEL_111;
          }
LABEL_106:
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 != 1) {
            goto LABEL_107;
          }
LABEL_112:
          int64x2_t v46 = v144;
          if (v144)
          {
            int64x2_t v145 = v144;
LABEL_114:
            operator delete(v46);
          }
        }
        else
        {
          if ((v150[0] & 0x80000000) == 0) {
            goto LABEL_106;
          }
LABEL_111:
          operator delete(*(void **)((char *)&v148 + 1));
          int v45 = *(_DWORD *)v147;
          if (*(_DWORD *)v147 == 1) {
            goto LABEL_112;
          }
LABEL_107:
          if (!v45 && v146 < 0)
          {
            int64x2_t v46 = v144;
            goto LABEL_114;
          }
        }
        sub_4D4B58((uint64_t)&v142);
        sub_4D4B58((uint64_t)&v131);
        if ((uint64_t *)(v41 + 320) == &v117)
        {
LABEL_138:
          *(void *)(v41 + 360) = v120;
          std::string::operator=((std::string *)(v41 + 368), &v121);
          *(unsigned char *)(v41 + 392) = v122;
          std::string::operator=((std::string *)(v41 + 400), &v123);
          *(unsigned char *)(v41 + 424) = v124;
          goto LABEL_139;
        }
LABEL_116:
        int v47 = *(_DWORD *)(v41 + 352);
        int v48 = v119;
        if (v47 == v119)
        {
          if (v47 == 1)
          {
            *(void *)(v41 + 320) = v117;
            sub_326C0((void *)(v41 + 328), __src.__r_.__value_.__l.__data_, (char *)__src.__r_.__value_.__l.__size_, (uint64_t)(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]) >> 3);
          }
          else if (!v47)
          {
            *(void *)(v41 + 320) = v117;
            std::string::operator=((std::string *)(v41 + 328), &__src);
          }
          goto LABEL_138;
        }
        if (v47 == 1)
        {
          long long v49 = *(void **)(v41 + 328);
          if (v49)
          {
            *(void *)(v41 + 336) = v49;
LABEL_127:
            operator delete(v49);
          }
LABEL_128:
          int v48 = v119;
        }
        else if (!v47)
        {
          if (*(char *)(v41 + 351) < 0)
          {
            long long v49 = *(void **)(v41 + 328);
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (v48 == 1)
        {
          *(void *)(v41 + 320) = v117;
          *(void *)(v41 + 328) = 0;
          *(void *)(v41 + 336) = 0;
          *(void *)(v41 + 344) = 0;
          long long v52 = (const void *)__src.__r_.__value_.__r.__words[0];
          int64_t v53 = __src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_ != __src.__r_.__value_.__r.__words[0])
          {
            if (v53 < 0) {
              sub_2E00();
            }
            int64x2_t v54 = (char *)operator new(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]);
            *(void *)(v41 + 328) = v54;
            *(void *)(v41 + 336) = v54;
            long long v55 = &v54[8 * (v53 >> 3)];
            *(void *)(v41 + 344) = v55;
            memcpy(v54, v52, v53);
            *(void *)(v41 + 336) = v55;
          }
        }
        else if (!v48)
        {
          *(void *)(v41 + 320) = v117;
          uint64_t v50 = (unsigned char *)(v41 + 328);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v50, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v51 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
            *(void *)(v41 + 344) = *((void *)&__src.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v50 = v51;
          }
        }
        *(_DWORD *)(v41 + 352) = v119;
        goto LABEL_138;
      }
LABEL_139:
      unint64_t v56 = *(void *)(v6 + 176);
      if (v56 >= *(void *)(v6 + 184))
      {
        uint64_t v43 = sub_4F72D0(v102, v41);
      }
      else
      {
        *(_DWORD *)(v56 + 768) = *(_DWORD *)(v41 + 768);
        int v57 = *(_DWORD *)(v41 + 768);
        switch(v57)
        {
          case 2:
            *(void *)unint64_t v56 = *(void *)v41;
            break;
          case 1:
            sub_4F58AC(v56, v41);
            sub_4F58AC(v56 + 160, v41 + 160);
            *(_DWORD *)(v56 + 352) = *(_DWORD *)(v41 + 352);
            int v59 = *(_DWORD *)(v41 + 352);
            if (v59 == 1)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              *(void *)(v56 + 328) = 0;
              *(void *)(v56 + 336) = 0;
              *(void *)(v56 + 344) = 0;
              int v63 = *(unsigned char **)(v41 + 328);
              uint64_t v62 = *(unsigned char **)(v41 + 336);
              int64_t v64 = v62 - v63;
              if (v62 != v63)
              {
                if (v64 < 0) {
                  sub_2E00();
                }
                long long v65 = (char *)operator new(v62 - v63);
                *(void *)(v56 + 328) = v65;
                *(void *)(v56 + 336) = v65;
                uint64_t v66 = &v65[8 * (v64 >> 3)];
                *(void *)(v56 + 344) = v66;
                memcpy(v65, v63, v64);
                *(void *)(v56 + 336) = v66;
              }
            }
            else if (!v59)
            {
              *(void *)(v56 + 320) = *(void *)(v41 + 320);
              uint64_t v60 = (unsigned char *)(v56 + 328);
              if (*(char *)(v41 + 351) < 0)
              {
                sub_4200(v60, *(void **)(v41 + 328), *(void *)(v41 + 336));
              }
              else
              {
                long long v61 = *(_OWORD *)(v41 + 328);
                *(void *)(v56 + 344) = *(void *)(v41 + 344);
                *(_OWORD *)uint64_t v60 = v61;
              }
            }
            *(void *)(v56 + 360) = *(void *)(v41 + 360);
            if (*(char *)(v41 + 391) < 0)
            {
              sub_4200((unsigned char *)(v56 + 368), *(void **)(v41 + 368), *(void *)(v41 + 376));
            }
            else
            {
              long long v67 = *(_OWORD *)(v41 + 368);
              *(void *)(v56 + 384) = *(void *)(v41 + 384);
              *(_OWORD *)(v56 + 368) = v67;
            }
            *(unsigned char *)(v56 + 392) = *(unsigned char *)(v41 + 392);
            uint64_t v68 = (unsigned char *)(v56 + 400);
            if (*(char *)(v41 + 423) < 0)
            {
              sub_4200(v68, *(void **)(v41 + 400), *(void *)(v41 + 408));
            }
            else
            {
              long long v69 = *(_OWORD *)(v41 + 400);
              *(void *)(v56 + 416) = *(void *)(v41 + 416);
              *(_OWORD *)uint64_t v68 = v69;
            }
            *(unsigned char *)(v56 + 424) = *(unsigned char *)(v41 + 424);
            sub_4F58AC(v56 + 432, v41 + 432);
            sub_4F58AC(v56 + 592, v41 + 592);
            *(_OWORD *)(v56 + 752) = *(_OWORD *)(v41 + 752);
            break;
          case 0:
            if (*(char *)(v41 + 23) < 0)
            {
              sub_4200((unsigned char *)v56, *(void **)v41, *(void *)(v41 + 8));
            }
            else
            {
              long long v58 = *(_OWORD *)v41;
              *(void *)(v56 + 16) = *(void *)(v41 + 16);
              *(_OWORD *)unint64_t v56 = v58;
            }
            break;
        }
        *(void *)(v56 + 792) = 0;
        *(_OWORD *)(v56 + 776) = 0u;
        uint64_t v70 = *(void *)(v41 + 776);
        uint64_t v71 = *(void *)(v41 + 784);
        uint64_t v131 = (char *)(v56 + 776);
        LOBYTE(v132) = 0;
        if (v71 != v70)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3) >= 0xAAAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          uint64_t v72 = (char *)operator new(v71 - v70);
          uint64_t v73 = 0;
          *(void *)(v56 + 776) = v72;
          *(void *)(v56 + 784) = v72;
          *(void *)(v56 + 792) = &v72[8 * ((v71 - v70) >> 3)];
          do
          {
            long long v75 = &v72[v73];
            int64x2_t v76 = (long long *)(v70 + v73);
            if (*(char *)(v70 + v73 + 23) < 0)
            {
              sub_4200(v75, *(void **)v76, *((void *)v76 + 1));
            }
            else
            {
              long long v74 = *v76;
              *((void *)v75 + 2) = *((void *)v76 + 2);
              *(_OWORD *)long long v75 = v74;
            }
            v73 += 24;
          }
          while (v70 + v73 != v71);
          *(void *)(v56 + 784) = &v72[v73];
        }
        uint64_t v43 = v56 + 800;
        *(void *)(v6 + 176) = v56 + 800;
      }
      *(void *)(v6 + 176) = v43;
      v41 += 800;
    }
    sub_84F50(v97, *(void *)(v6 + 472), v125, v126, 0xAAAAAAAAAAAAAAABLL * (((char *)v126 - (char *)v125) >> 3));
    int v10 = v95;
    uint64_t v3 = v98;
    sub_4F2FF8((uint64_t)__dst);
    uint64_t v40 = v100 + 1440;
  }
  while (v100 + 1440 != v96);
LABEL_172:
  if (*v3 != v3[1])
  {
    sub_4E1334(v99, v3, (uint64_t)&v131);
    if ((sub_4F3B98((uint64_t)v147, v6 + 352) & 1) == 0)
    {
      uint64_t v77 = sub_4DB6A8(v143);
      sub_4F39B8(v77 + 320, (std::string *)v147);
      *(void *)(v77 + 360) = *(void *)&v150[1];
      std::string::operator=((std::string *)(v77 + 368), &v151);
      *(unsigned char *)(v77 + 392) = v152;
      std::string::operator=((std::string *)(v77 + 400), &v153);
      *(unsigned char *)(v77 + 424) = v154;
    }
    unint64_t v78 = *(void *)(v6 + 176);
    if (v78 >= *(void *)(v6 + 184))
    {
      uint64_t v79 = sub_4F72D0(v102, v143);
    }
    else
    {
      sub_4F74A4(*(char **)(v6 + 176), v143);
      uint64_t v79 = v78 + 800;
      *(void *)(v6 + 176) = v78 + 800;
    }
    *(void *)(v6 + 176) = v79;
    sub_4F7594(v97, *(void *)(v6 + 472), v155, v156, 0xAAAAAAAAAAAAAAABLL * (((char *)v156 - (char *)v155) >> 3));
    sub_4F2FF8((uint64_t)&v131);
  }
  if (v10 >= 1)
  {
    sub_4E5D2C(v99, v10, (uint64_t)&v106, v94 != v10, &v131);
    goto LABEL_181;
  }
  if (v130)
  {
    char v112 = v130;
    sub_4C8540((uint64_t)v111, (uint64_t)v129);
    BOOL v80 = v94 > 1;
    char v110 = v128;
    if (!v128)
    {
LABEL_190:
      sub_4E600C(v99, (uint64_t)v111, (uint64_t)v109, v80, &v131);
      sub_4D90B4(v6, (uint64_t)&v131);
      sub_4D4B58((uint64_t)&v131);
      if (v110)
      {
        sub_4BD604((uint64_t)v109);
        char v110 = 0;
      }
      if (v112)
      {
        sub_4BD604((uint64_t)v111);
        char v112 = 0;
      }
      goto LABEL_194;
    }
LABEL_189:
    sub_4C8540((uint64_t)v109, (uint64_t)v127);
    goto LABEL_190;
  }
  if (v128)
  {
    char v112 = 0;
    BOOL v80 = v94 > 1;
    char v110 = v128;
    goto LABEL_189;
  }
  sub_4E3F9C(v99, 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v6 + 176) - *(void *)(v6 + 168)) >> 5), &v131);
LABEL_181:
  sub_4D90B4(v6, (uint64_t)&v131);
  sub_4D4B58((uint64_t)&v131);
LABEL_194:
  uint64_t v81 = *(void *)(v6 + 168);
  uint64_t v82 = *(void *)(v6 + 176);
  if (v81 != v82)
  {
    sub_4E3F9C(v99, 0x8F5C28F5C28F5C29 * ((v82 - v81) >> 5), &v131);
    sub_4D90B4(v6 + 192, (uint64_t)&v131);
    sub_4D4B58((uint64_t)&v131);
  }
  if (v128) {
    sub_4BD604((uint64_t)v127);
  }
  if (v130) {
    sub_4BD604((uint64_t)v129);
  }
  int64x2_t v83 = (char *)v103;
  if (v103)
  {
    int64x2_t v84 = v104;
    int64x2_t v85 = v103;
    if (v104 == v103)
    {
LABEL_216:
      int64x2_t v104 = v83;
      operator delete(v85);
      goto LABEL_217;
    }
    while (2)
    {
      if (*(v84 - 9) < 0)
      {
        operator delete(*((void **)v84 - 4));
        if (*(v84 - 41) < 0) {
          goto LABEL_212;
        }
LABEL_207:
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 != 1) {
          goto LABEL_208;
        }
LABEL_213:
        int64x2_t v87 = (void *)*((void *)v84 - 13);
        if (v87)
        {
          *((void *)v84 - 12) = v87;
LABEL_203:
          operator delete(v87);
        }
      }
      else
      {
        if ((*(v84 - 41) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_212:
        operator delete(*((void **)v84 - 8));
        int v86 = *((_DWORD *)v84 - 20);
        if (v86 == 1) {
          goto LABEL_213;
        }
LABEL_208:
        if (!v86 && *(v84 - 81) < 0)
        {
          int64x2_t v87 = (void *)*((void *)v84 - 13);
          goto LABEL_203;
        }
      }
      v84 -= 112;
      if (v84 == v83)
      {
        int64x2_t v85 = v103;
        goto LABEL_216;
      }
      continue;
    }
  }
LABEL_217:
  int64x2_t v88 = (void **)v106;
  if (v106)
  {
    int64x2_t v89 = v107;
    int64x2_t v90 = v106;
    if (v107 != v106)
    {
      do
      {
        if (*((char *)v89 - 1) < 0) {
          operator delete(*(v89 - 3));
        }
        v89 -= 3;
      }
      while (v89 != v88);
      int64x2_t v90 = v106;
    }
    int64x2_t v107 = v88;
    operator delete(v90);
  }
}

void sub_4E319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_4F2FF8(v34);
  if (*(unsigned char *)(v35 + 1440)) {
    sub_4BD604((uint64_t)&STACK[0xE28]);
  }
  if (*(unsigned char *)(v35 + 2888)) {
    sub_4BD604((uint64_t)&STACK[0x13D0]);
  }
  sub_4DBDDC(&a31);
  sub_1A668(&a34);
  _Unwind_Resume(a1);
}

void sub_4E353C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 160) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  sub_5F3B34(a3 + 192);
  *(_DWORD *)(a3 + 384) = -1;
  *(_DWORD *)(a3 + 392) = -1;
  *(_DWORD *)(a3 + 395) = -1;
  *(void *)(a3 + 399) = 0;
  *(void *)(a3 + 415) = 0;
  *(void *)(a3 + 407) = 0;
  *(_WORD *)(a3 + 423) = 0;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  sub_500CAC(a1 + 1536, a2, (uint64_t)&v43);
  sub_635CD0((long long **)&v43, (uint64_t)v40);
  uint64_t v6 = (void *)sub_5231C((uint64_t)&v43);
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  uint64_t v64 = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v60[4] = 0u;
  *(_OWORD *)&v56[4] = 0u;
  long long v57 = 0u;
  *(void *)long long v52 = 0x7FFFFFFFLL;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)&v50[8] = 0u;
  uint64_t v49 = 0;
  *(int64x2_t *)uint64_t v50 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v51 = *(_OWORD *)v50;
  v47[0] = (void *)0xFFFFFFFFLL;
  long long v48 = 0uLL;
  v47[1] = 0;
  *(_DWORD *)&v50[16] = 0x7FFFFFFF;
  *(_DWORD *)&v52[8] = 0x7FFFFFFF;
  *(void *)&v52[12] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)int64x2_t v54 = 0u;
  memset(v55, 0, sizeof(v55));
  unint64_t v53 = 0x8000000080000000;
  *(void *)unint64_t v56 = 0x8000000080000000;
  *(_DWORD *)&v56[8] = 0x7FFFFFFF;
  LODWORD(v57) = -1;
  uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
  int v59 = 0x7FFFFFFF;
  *(void *)uint64_t v60 = 0x7FFFFFFF7FFFFFFFLL;
  long long v61 = _Q1;
  v62[1] = 0;
  v62[0] = 0;
  uint64_t v63 = 0;
  uint64_t v66 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v67 = 0xFFFFFFFF00000000;
  uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
  sub_611B80((uint64_t *)(a1 + 3088), (uint64_t)v40, v6, v47, v42);
  sub_4D90B4(a3, (uint64_t)v42);
  sub_4D4B58((uint64_t)v42);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v12 = (void **)v62[0];
  if (v62[0])
  {
    int v13 = (void **)v62[1];
    long long v14 = v62[0];
    if (v62[1] != v62[0])
    {
      do
        int v13 = sub_4F31D0(v13 - 13);
      while (v13 != v12);
      long long v14 = v62[0];
    }
    v62[1] = v12;
    operator delete(v14);
  }
  if (*(void *)&v55[8])
  {
    *(void *)&v55[16] = *(void *)&v55[8];
    operator delete(*(void **)&v55[8]);
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  uint64_t v15 = v47[1];
  if (v47[1])
  {
    uint64_t v16 = v48;
    unint64_t v17 = v47[1];
    if ((void *)v48 != v47[1])
    {
      do
        uint64_t v16 = sub_4D4B58(v16 - 160);
      while ((void *)v16 != v15);
      unint64_t v17 = v47[1];
    }
    *(void *)&long long v48 = v15;
    operator delete(v17);
  }
  if (v41 < 0)
  {
    operator delete(v40[0]);
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  else
  {
    long long v18 = *(long long **)(a2 + 1176);
    int v19 = *(long long **)(a2 + 1184);
    if (v18 == v19) {
      goto LABEL_32;
    }
  }
  do
  {
    unint64_t v20 = *(void *)(a3 + 176);
    if (v20 >= *(void *)(a3 + 184))
    {
      uint64_t v21 = sub_4F52DC((void *)(a3 + 168), v18);
    }
    else
    {
      sub_4F54B0(*(void *)(a3 + 176), v18);
      uint64_t v21 = v20 + 800;
      *(void *)(a3 + 176) = v21;
    }
    *(void *)(a3 + 176) = v21;
    sub_4D9344(a2, (std::string *)v47);
    unint64_t v22 = *(void *)(v21 - 16);
    if (v22 >= *(void *)(v21 - 8))
    {
      unint64_t v24 = sub_6E8C4((void **)(v21 - 24), (uint64_t)v47);
    }
    else
    {
      long long v23 = *(_OWORD *)v47;
      *(void *)(v22 + 16) = v48;
      *(_OWORD *)unint64_t v22 = v23;
      v47[1] = 0;
      *(void *)&long long v48 = 0;
      v47[0] = 0;
      unint64_t v24 = (char *)(v22 + 24);
    }
    *(void *)(v21 - 16) = v24;
    if (SBYTE7(v48) < 0) {
      operator delete(v47[0]);
    }
    long long v18 = (long long *)((char *)v18 + 24);
  }
  while (v18 != v19);
  if (*(void *)(a2 + 1176) != *(void *)(a2 + 1184)) {
    goto LABEL_43;
  }
LABEL_32:
  if ((*(_DWORD *)(a2 + 1256) - 2) < 9
    || *(_DWORD *)(a2 + 1200) == 1 && *(void *)(a2 + 1208) != *(void *)(a2 + 1216))
  {
    goto LABEL_43;
  }
  if (!sub_605454(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 1400) == -1)
    {
LABEL_73:
      BOOL v26 = *(_DWORD *)(a2 + 1404) != -1;
      goto LABEL_44;
    }
LABEL_43:
    BOOL v26 = 1;
    goto LABEL_44;
  }
  if (*(char *)(a2 + 1175) >= 0) {
    uint64_t v25 = *(unsigned __int8 *)(a2 + 1175);
  }
  else {
    uint64_t v25 = *(void *)(a2 + 1160);
  }
  BOOL v26 = 1;
  if (!v25 && *(_DWORD *)(a2 + 1400) == -1) {
    goto LABEL_73;
  }
LABEL_44:
  *(unsigned char *)(a3 + 160) = v26;
  sub_4E3C10(a2, (uint64_t)v47);
  sub_4F377C(a3 + 352, (uint64_t)v47);
  *(void *)(a3 + 392) = *(void *)v50;
  long long v27 = (void **)(a3 + 400);
  if (*(char *)(a3 + 423) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (_OWORD *)(a3 + 432);
  *(_OWORD *)long long v27 = *(_OWORD *)&v50[8];
  *(void *)(a3 + 416) = v51;
  BYTE7(v51) = 0;
  v50[8] = 0;
  *(unsigned char *)(a3 + 424) = BYTE8(v51);
  if (*(char *)(a3 + 455) < 0)
  {
    operator delete(*(void **)(a3 + 432));
    int v31 = SBYTE7(v51);
    *uint64_t v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    if (v31 < 0)
    {
      operator delete(*(void **)&v50[8]);
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
    else
    {
      int v29 = v49;
      if (v49 == 1) {
        goto LABEL_48;
      }
    }
  }
  else
  {
    *uint64_t v28 = *(_OWORD *)v52;
    *(void *)(a3 + 448) = *(void *)&v52[16];
    v52[23] = 0;
    v52[0] = 0;
    *(unsigned char *)(a3 + 456) = v52[24];
    int v29 = v49;
    if (v49 == 1)
    {
LABEL_48:
      uint64_t v30 = v47[1];
      if (!v47[1]) {
        goto LABEL_56;
      }
      *(void **)&long long v48 = v47[1];
      goto LABEL_55;
    }
  }
  if (!v29 && SHIBYTE(v48) < 0)
  {
    uint64_t v30 = v47[1];
LABEL_55:
    operator delete(v30);
  }
LABEL_56:
  uint64_t v32 = *(void *)(a3 + 168);
  uint64_t v33 = *(void *)(a3 + 176);
  if (v32 != v33)
  {
    sub_4E3F9C(a1, 0x8F5C28F5C28F5C29 * ((v33 - v32) >> 5), (char **)v47);
    sub_4D90B4(a3 + 192, (uint64_t)v47);
    sub_4D4B58((uint64_t)v47);
  }
  uint64_t v34 = v46;
  if (v46)
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      sub_4F4B48((uint64_t)(v34 + 2));
      operator delete(v34);
      uint64_t v34 = v35;
    }
    while (v35);
  }
  char v36 = v45;
  int v45 = 0;
  if (v36) {
    operator delete(v36);
  }
  char v37 = (void **)v43;
  if (v43)
  {
    int v38 = v44;
    char v39 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      char v39 = v43;
    }
    int v44 = v37;
    operator delete(v39);
  }
}

void sub_4E3B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_4D4880(&a35);
  sub_4F2FF8(v49);
  _Unwind_Resume(a1);
}

void sub_4E3BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  *(void *)(v32 + 176) = v33;
  sub_4D4880(&a32);
  sub_4F2FF8(v32);
  _Unwind_Resume(a1);
}

void sub_4E3C10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_605454(a1 + 32))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1175);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a1 + 1160);
    }
    if (v4)
    {
      if (!*(unsigned char *)(a1 + 1144))
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v5 = *(int *)(a1 + 768);
      if (v5 > 0x13)
      {
        uint64_t v6 = 4;
        uint64_t v7 = a2;
      }
      else
      {
        uint64_t v6 = dword_20E81F0[v5];
        uint64_t v7 = a2;
      }
LABEL_9:
      sub_524D84(v6, v7);
      return;
    }
  }
  if (*(_DWORD *)(a1 + 1200) == 2)
  {
    if (*(void *)(a1 + 1176) != *(void *)(a1 + 1184))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 42;
      goto LABEL_9;
    }
    if (*(_DWORD *)a1 == 45)
    {
LABEL_22:
      uint64_t v7 = a2;
      uint64_t v6 = 39;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(a1 + 1256) - 2) >= 0xB)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 5;
      goto LABEL_9;
    }
    if (*(void *)(a1 + 1328) != *(void *)(a1 + 1336))
    {
      uint64_t v7 = a2;
      uint64_t v6 = 6;
      goto LABEL_9;
    }
    int v14 = *(_DWORD *)(a1 + 1360);
    if (v14)
    {
      if (v14 == 1)
      {
        int v15 = *(_DWORD *)(a1 + 1352);
        if (v15 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v15 && *(_DWORD *)(a1 + 1364) != 0x7FFFFFFF) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a1 + 1352);
      if (v16 != 0x7FFFFFFF && *(_DWORD *)(a1 + 1356) < v16) {
        goto LABEL_22;
      }
    }
    if (sub_4D4CF4((int *)a1) || *(_DWORD *)a1 != 48)
    {
      uint64_t v7 = a2;
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v6 = 51;
    }
    goto LABEL_9;
  }
  uint64_t v8 = a1 + 1232;
  if (*(char *)(a1 + 1255) < 0)
  {
    unint64_t v9 = *(void *)(a1 + 1240);
    if (v9)
    {
      int v10 = *(void **)v8;
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(a1 + 1255))
  {
LABEL_36:
    *(_OWORD *)long long __p = *(_OWORD *)v8;
    uint64_t v19 = *(void *)(v8 + 16);
    goto LABEL_48;
  }
  uint64_t v11 = *(void *)(a1 + 1208);
  uint64_t v12 = *(void *)(a1 + 1216);
  if (v11 != v12)
  {
    while (1)
    {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 159);
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v11 + 144);
      }
      if (v13) {
        break;
      }
      v11 += 168;
      if (v11 == v12) {
        goto LABEL_37;
      }
    }
  }
  if (v11 == v12)
  {
LABEL_37:
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    goto LABEL_48;
  }
  if ((*(char *)(v11 + 159) & 0x80000000) == 0)
  {
    uint64_t v8 = v11 + 136;
    goto LABEL_36;
  }
  int v10 = *(void **)(v11 + 136);
  unint64_t v9 = *(void *)(v11 + 144);
LABEL_47:
  sub_4200(__p, v10, v9);
LABEL_48:
  sub_524E5C((uint64_t)__p, a2);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}