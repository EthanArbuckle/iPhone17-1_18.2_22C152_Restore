void sub_557460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(void *)(v62 + 328) = v63;
  if (a41 < 0)
  {
    operator delete(__p);
    if ((a48 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a55 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a48 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a43);
  if ((a55 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a62 & 0x80000000) == 0)
    {
LABEL_10:
      if (*(char *)(v64 - 185) < 0) {
        operator delete(*(void **)(v64 - 208));
      }
      if (*(char *)(v64 - 153) < 0) {
        operator delete(*(void **)(v64 - 176));
      }
      if (*(char *)(v64 - 129) < 0)
      {
        operator delete(*(void **)(v64 - 152));
        if ((*(char *)(v64 - 105) & 0x80000000) == 0)
        {
LABEL_16:
          sub_5419D4(v62);
          _Unwind_Resume(a1);
        }
      }
      else if ((*(char *)(v64 - 105) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(*(void **)(v64 - 128));
      sub_5419D4(v62);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a57);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a50);
  if ((a62 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_5576E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  sub_5F3B34(a2);
  uint64_t v4 = v3 + 160;
  uint64_t v39 = v3;
  sub_5F3B34(v3 + 160);
  sub_5F3B34(v3 + 320);
  sub_5F3B34(v3 + 480);
  int v5 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v6 = byte_256B68F;
  }
  else {
    size_t v6 = qword_256B680;
  }
  int v7 = byte_256B767;
  if (byte_256B767 >= 0) {
    size_t v8 = byte_256B767;
  }
  else {
    size_t v8 = *((void *)&xmmword_256B750 + 1);
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v9 > 0x16)
  {
    uint64_t v17 = a1;
    uint64_t v18 = v4;
    uint64_t v19 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v19 = v9 | 7;
    }
    uint64_t v20 = v19 + 1;
    v11 = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = v8 + v6;
    *(void *)&long long v41 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = v11;
    uint64_t v4 = v18;
    a1 = v17;
    uint64_t v3 = v39;
    if (!v6)
    {
LABEL_14:
      v13 = (char *)v11 + v6;
      if (v8)
      {
        if (v7 >= 0) {
          v14 = &xmmword_256B750;
        }
        else {
          v14 = (long long *)xmmword_256B750;
        }
        memmove(v13, v14, v8);
      }
      v13[v8] = 0;
      v15 = sub_8D7730(v10, (uint64_t)&__dst);
      if (*((char *)v15 + 23) < 0)
      {
        sub_4200(&v44, (void *)*v15, v15[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)v15;
        uint64_t v45 = v15[2];
        long long v44 = v16;
      }
      if (SBYTE7(v41) < 0)
      {
        operator delete((void *)__dst);
        unint64_t v21 = *(void *)(v3 + 8);
        if (v21 < *(void *)(v3 + 16)) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v21 = *(void *)(v3 + 8);
        if (v21 < *(void *)(v3 + 16))
        {
LABEL_28:
          if (SHIBYTE(v45) < 0)
          {
            sub_4200((unsigned char *)v21, (void *)v44, *((unint64_t *)&v44 + 1));
          }
          else
          {
            long long v22 = v44;
            *(void *)(v21 + 16) = v45;
            *(_OWORD *)unint64_t v21 = v22;
          }
          v23 = (char *)(v21 + 24);
          *(void *)(v3 + 8) = v21 + 24;
LABEL_34:
          *(void *)(v3 + 8) = v23;
          int v24 = byte_256B6A7;
          if (byte_256B6A7 >= 0) {
            size_t v25 = byte_256B6A7;
          }
          else {
            size_t v25 = qword_256B698;
          }
          int v26 = byte_256B767;
          if (byte_256B767 >= 0) {
            size_t v27 = byte_256B767;
          }
          else {
            size_t v27 = *((void *)&xmmword_256B750 + 1);
          }
          unint64_t v28 = v27 + v25;
          if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          uint64_t v29 = *(void *)(a1 + 8);
          if (v28 > 0x16)
          {
            uint64_t v36 = v4;
            uint64_t v37 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17) {
              uint64_t v37 = v28 | 7;
            }
            uint64_t v38 = v37 + 1;
            p_dst = (long long *)operator new(v37 + 1);
            *((void *)&__dst + 1) = v27 + v25;
            *(void *)&long long v41 = v38 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
            uint64_t v4 = v36;
            if (!v25)
            {
LABEL_47:
              v32 = (char *)p_dst + v25;
              if (v27)
              {
                if (v26 >= 0) {
                  v33 = &xmmword_256B750;
                }
                else {
                  v33 = (long long *)xmmword_256B750;
                }
                memmove(v32, v33, v27);
              }
              v32[v27] = 0;
              v34 = sub_8D7730(v29, (uint64_t)&__dst);
              if (*((char *)v34 + 23) < 0)
              {
                sub_4200(&v42, (void *)*v34, v34[1]);
              }
              else
              {
                long long v35 = *(_OWORD *)v34;
                uint64_t v43 = v34[2];
                long long v42 = v35;
              }
              if (SBYTE7(v41) < 0) {
                operator delete((void *)__dst);
              }
              sub_5F41E8(v4, (uint64_t)&v42);
              sub_5F1E5C((char *)&__dst, &xmmword_256AE38);
            }
          }
          else
          {
            *(void *)&long long v41 = 0;
            long long __dst = 0uLL;
            p_dst = &__dst;
            BYTE7(v41) = v27 + v25;
            if (!v25) {
              goto LABEL_47;
            }
          }
          if (v24 >= 0) {
            v31 = &qword_256B690;
          }
          else {
            v31 = (uint64_t *)qword_256B690;
          }
          memmove(p_dst, v31, v25);
          goto LABEL_47;
        }
      }
      v23 = sub_6E6EC((char **)v3, (uint64_t)&v44);
      goto LABEL_34;
    }
  }
  else
  {
    *(void *)&long long v41 = 0;
    long long __dst = 0uLL;
    v11 = &__dst;
    BYTE7(v41) = v8 + v6;
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (v5 >= 0) {
    v12 = &qword_256B678;
  }
  else {
    v12 = (uint64_t *)qword_256B678;
  }
  memmove(v11, v12, v6);
  goto LABEL_14;
}

void sub_557C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 8) = v35;
  if (*(char *)(v36 - 105) < 0)
  {
    operator delete(*(void **)(v36 - 128));
    sub_5419D4(a9);
    _Unwind_Resume(a1);
  }
  sub_5419D4(a9);
  _Unwind_Resume(a1);
}

void sub_557DA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  sub_5F3B34(a2 + 160);
  sub_5F3B34(a2 + 320);
  sub_5F3B34(a2 + 480);
  uint64_t v4 = *(void *)(a1 + 8);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "BannerHead_LPR_Offline_SAR_or_Reroute");
  int v5 = sub_8D7730(v4, (uint64_t)__p);
  if (*((char *)v5 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    uint64_t v33 = v5[2];
    long long __dst = v6;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "BannerBody_LPR_Offline_SAR_or_Reroute");
  size_t v8 = sub_8D7730(v7, (uint64_t)__p);
  if (*((char *)v8 + 23) < 0)
  {
    sub_4200(&v30, (void *)*v8, v8[1]);
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v31 = v8[2];
    long long v30 = v9;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v24 = operator new(0x28uLL);
  long long v25 = xmmword_20B9240;
  strcpy((char *)v24, "VoiceAlert_LPR_Offline_SAR_or_Reroute");
  memset(__p, 0, sizeof(__p));
  int v23 = 1065353216;
  sub_6102F0(a1 + 24, (char **)&v24, (uint64_t)__p, *(unsigned __int8 *)(a1 + 2525), (uint64_t)&v26);
  *(_OWORD *)unint64_t v28 = v26;
  uint64_t v29 = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  uint64_t v10 = __p[2];
  if (__p[2])
  {
    do
    {
      v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    unint64_t v13 = *(void *)(a2 + 8);
    if (v13 < *(void *)(a2 + 16)) {
      goto LABEL_17;
    }
LABEL_20:
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)&__dst);
    unint64_t v15 = *(void *)(a2 + 168);
    if (v15 >= *(void *)(a2 + 176)) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  operator delete(v24);
  unint64_t v13 = *(void *)(a2 + 8);
  if (v13 >= *(void *)(a2 + 16)) {
    goto LABEL_20;
  }
LABEL_17:
  if (SHIBYTE(v33) < 0)
  {
    sub_4200((unsigned char *)v13, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v14 = __dst;
    *(void *)(v13 + 16) = v33;
    *(_OWORD *)unint64_t v13 = v14;
  }
  *(void *)(a2 + 8) = v13 + 24;
  *(void *)(a2 + 8) = v13 + 24;
  unint64_t v15 = *(void *)(a2 + 168);
  if (v15 >= *(void *)(a2 + 176))
  {
LABEL_25:
    *(void *)(a2 + 168) = sub_6E6EC((char **)(a2 + 160), (uint64_t)&v30);
    unint64_t v17 = *(void *)(a2 + 328);
    if (v17 < *(void *)(a2 + 336)) {
      goto LABEL_26;
    }
LABEL_30:
    uint64_t v20 = sub_6E6EC((char **)(a2 + 320), (uint64_t)v28);
    char v21 = HIBYTE(v29);
    *(void *)(a2 + 328) = v20;
    if ((v21 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_21:
  if (SHIBYTE(v31) < 0)
  {
    sub_4200((unsigned char *)v15, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    long long v16 = v30;
    *(void *)(v15 + 16) = v31;
    *(_OWORD *)unint64_t v15 = v16;
  }
  *(void *)(a2 + 168) = v15 + 24;
  *(void *)(a2 + 168) = v15 + 24;
  unint64_t v17 = *(void *)(a2 + 328);
  if (v17 >= *(void *)(a2 + 336)) {
    goto LABEL_30;
  }
LABEL_26:
  char v18 = HIBYTE(v29);
  if (SHIBYTE(v29) < 0)
  {
    sub_4200((unsigned char *)v17, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    long long v19 = *(_OWORD *)v28;
    *(void *)(v17 + 16) = v29;
    *(_OWORD *)unint64_t v17 = v19;
  }
  *(void *)(a2 + 328) = v17 + 24;
  *(void *)(a2 + 328) = v17 + 24;
  if (v18 < 0) {
LABEL_34:
  }
    operator delete(v28[0]);
LABEL_35:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      return;
    }
LABEL_39:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v30);
  if (SHIBYTE(v33) < 0) {
    goto LABEL_39;
  }
}

void sub_558124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 + 328) = v35;
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  sub_5419D4(v34);
  _Unwind_Resume(a1);
}

void sub_55823C(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = byte_256B68F;
  if (byte_256B68F >= 0) {
    size_t v6 = byte_256B68F;
  }
  else {
    size_t v6 = qword_256B680;
  }
  int v7 = *((char *)a3 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v9 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + v6;
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v13 = v9 | 7;
  }
  uint64_t v14 = v13 + 1;
  p_dst = (std::string *)operator new(v13 + 1);
  __dst.__r_.__value_.__l.__size_ = v8 + v6;
  __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v6)
  {
LABEL_14:
    if (v5 >= 0) {
      unint64_t v15 = &qword_256B678;
    }
    else {
      unint64_t v15 = (uint64_t *)qword_256B678;
    }
    memmove(p_dst, v15, v6);
  }
LABEL_18:
  long long v16 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      unint64_t v17 = a3;
    }
    else {
      unint64_t v17 = *a3;
    }
    memmove(v16, v17, v8);
  }
  v16[v8] = 0;
  int v18 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v19 = byte_256B6A7;
  }
  else {
    size_t v19 = qword_256B698;
  }
  unint64_t v20 = v19 + v8;
  if (v19 + v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v20 <= 0x16)
  {
    memset(&v62, 0, sizeof(v62));
    char v21 = (char *)&v62;
    *((unsigned char *)&v62.__r_.__value_.__s + 23) = v19 + v8;
    if (!v19) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  uint64_t v39 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v39 = v20 | 7;
  }
  uint64_t v40 = v39 + 1;
  char v21 = (char *)operator new(v39 + 1);
  v62.__r_.__value_.__l.__size_ = v19 + v8;
  v62.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v19)
  {
LABEL_29:
    if (v18 >= 0) {
      long long v22 = &qword_256B690;
    }
    else {
      long long v22 = (uint64_t *)qword_256B690;
    }
    memmove(v21, v22, v19);
  }
LABEL_33:
  int v23 = &v21[v19];
  if (v8)
  {
    if (v7 >= 0) {
      int v24 = a3;
    }
    else {
      int v24 = *a3;
    }
    memmove(v23, v24, v8);
  }
  v23[v8] = 0;
  int v25 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v26 = byte_256B6D7;
  }
  else {
    size_t v26 = qword_256B6C8;
  }
  unint64_t v27 = v26 + v8;
  if (v26 + v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v27 <= 0x16)
  {
    memset(&v61, 0, sizeof(v61));
    unint64_t v28 = (char *)&v61;
    *((unsigned char *)&v61.__r_.__value_.__s + 23) = v26 + v8;
    if (!v26) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  uint64_t v41 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v41 = v27 | 7;
  }
  uint64_t v42 = v41 + 1;
  unint64_t v28 = (char *)operator new(v41 + 1);
  v61.__r_.__value_.__l.__size_ = v26 + v8;
  v61.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  if (v26)
  {
LABEL_44:
    if (v25 >= 0) {
      uint64_t v29 = &qword_256B6C0;
    }
    else {
      uint64_t v29 = (uint64_t *)qword_256B6C0;
    }
    memmove(v28, v29, v26);
  }
LABEL_48:
  long long v30 = &v28[v26];
  if (v8)
  {
    if (v7 >= 0) {
      uint64_t v31 = a3;
    }
    else {
      uint64_t v31 = *a3;
    }
    memmove(v30, v31, v8);
  }
  v30[v8] = 0;
  uint64_t v32 = sub_50E2E4((uint64_t)a4);
  uint64_t v60 = v32;
  if (sub_50E284(a4))
  {
    if (byte_256B86F >= 0) {
      uint64_t v33 = (const std::string::value_type *)&qword_256B858;
    }
    else {
      uint64_t v33 = (const std::string::value_type *)qword_256B858;
    }
    if (byte_256B86F >= 0) {
      std::string::size_type v34 = byte_256B86F;
    }
    else {
      std::string::size_type v34 = unk_256B860;
    }
    std::string::append(&__dst, v33, v34);
    if (byte_256B86F >= 0) {
      uint64_t v35 = (const std::string::value_type *)&qword_256B858;
    }
    else {
      uint64_t v35 = (const std::string::value_type *)qword_256B858;
    }
    if (byte_256B86F >= 0) {
      std::string::size_type v36 = byte_256B86F;
    }
    else {
      std::string::size_type v36 = unk_256B860;
    }
    std::string::append(&v62, v35, v36);
    if (byte_256B86F >= 0) {
      uint64_t v37 = (const std::string::value_type *)&qword_256B858;
    }
    else {
      uint64_t v37 = (const std::string::value_type *)qword_256B858;
    }
    if (byte_256B86F >= 0) {
      std::string::size_type v38 = byte_256B86F;
    }
    else {
      std::string::size_type v38 = unk_256B860;
    }
    std::string::append(&v61, v37, v38);
    goto LABEL_82;
  }
  if (v32 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_82:
    int v43 = 0;
    goto LABEL_90;
  }
  if (byte_256B887 >= 0) {
    long long v44 = (const std::string::value_type *)&qword_256B870;
  }
  else {
    long long v44 = (const std::string::value_type *)qword_256B870;
  }
  if (byte_256B887 >= 0) {
    std::string::size_type v45 = byte_256B887;
  }
  else {
    std::string::size_type v45 = *(void *)&dword_256B878;
  }
  std::string::append(&v61, v44, v45);
  int v43 = 1;
LABEL_90:
  sub_5F3B34(a5);
  sub_5F3B34(a5 + 160);
  sub_5F3B34(a5 + 320);
  sub_5F3B34(a5 + 480);
  v46 = sub_8D7730(a2, (uint64_t)&__dst);
  sub_5F3D48((uint64_t)v59, (uint64_t)v46);
  sub_4D90B4(a5, (uint64_t)v59);
  sub_4D4B58((uint64_t)v59);
  v47 = sub_8D7730(a2, (uint64_t)&v62);
  sub_5F3D48((uint64_t)v59, (uint64_t)v47);
  sub_4D90B4(a5 + 160, (uint64_t)v59);
  sub_4D4B58((uint64_t)v59);
  *(_OWORD *)v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  sub_6102F0(a1 + 24, &v61.__r_.__value_.__l.__data_, (uint64_t)v54, *(unsigned __int8 *)(a1 + 2525), (uint64_t)__p);
  sub_5F3D48((uint64_t)v59, (uint64_t)__p);
  sub_4D90B4(a5 + 320, (uint64_t)v59);
  sub_4D4B58((uint64_t)v59);
  if (v58 < 0) {
    operator delete(__p[0]);
  }
  v48 = (void *)v55;
  if ((void)v55)
  {
    do
    {
      v49 = (void *)*v48;
      sub_4F4B48((uint64_t)(v48 + 2));
      operator delete(v48);
      v48 = v49;
    }
    while (v49);
  }
  v50 = v54[0];
  v54[0] = 0;
  if (v50) {
    operator delete(v50);
  }
  if (v43)
  {
    v59[0] = 1;
    sub_5F6090((uint64_t *)(a5 + 320), (uint64_t)&qword_256AAD8, &v60, v59);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_100:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_104:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_104;
  }
}

void sub_558760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_5419D4(a12);
  if (*(char *)(v23 - 137) < 0)
  {
    operator delete(*(void **)(v23 - 160));
    if ((*(char *)(v23 - 113) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v23 - 113) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v23 - 89) < 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(v23 - 136));
  if (*(char *)(v23 - 89) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v23 - 112));
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_558848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (*(unsigned char *)(a2 + 800)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(_DWORD *)(a2 + 852) == 0;
  }
  if (!v5) {
    return;
  }
  if (!*(unsigned char *)(a3 + 800) && *(_DWORD *)(a3 + 852) == 0) {
    return;
  }
  if (a5) {
    goto LABEL_37;
  }
  int v9 = byte_256B6A7;
  if (byte_256B6A7 >= 0) {
    size_t v10 = byte_256B6A7;
  }
  else {
    size_t v10 = qword_256B698;
  }
  int v11 = byte_256B8E7;
  if (byte_256B8E7 >= 0) {
    size_t v12 = byte_256B8E7;
  }
  else {
    size_t v12 = qword_256B8D8;
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v13 > 0x16)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v15 = (char *)operator new(v16 + 1);
    v43[1] = (void *)(v12 + v10);
    *(void *)&long long v44 = v17 | 0x8000000000000000;
    v43[0] = v15;
    if (!v10) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v43[1] = 0;
  *(void *)&long long v44 = 0;
  v43[0] = 0;
  unint64_t v15 = (char *)v43;
  BYTE7(v44) = v12 + v10;
  if (v10)
  {
LABEL_24:
    if (v9 >= 0) {
      int v18 = &qword_256B690;
    }
    else {
      int v18 = (uint64_t *)qword_256B690;
    }
    memmove(v15, v18, v10);
  }
LABEL_28:
  size_t v19 = &v15[v10];
  if (v12)
  {
    if (v11 >= 0) {
      unint64_t v20 = &qword_256B8D0;
    }
    else {
      unint64_t v20 = (uint64_t *)qword_256B8D0;
    }
    memmove(v19, v20, v12);
  }
  v19[v12] = 0;
  char v21 = sub_8D7730(v14, (uint64_t)v43);
  unint64_t v22 = *(void *)(a4 + 168);
  if (v22 >= *(void *)(a4 + 176))
  {
    *(void *)(a4 + 168) = sub_6E6EC((char **)(a4 + 160), (uint64_t)v21);
    if ((SBYTE7(v44) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
  if (*((char *)v21 + 23) < 0)
  {
    sub_4200(*(unsigned char **)(a4 + 168), (void *)*v21, v21[1]);
  }
  else
  {
    long long v23 = *(_OWORD *)v21;
    *(void *)(v22 + 16) = v21[2];
    *(_OWORD *)unint64_t v22 = v23;
  }
  *(void *)(a4 + 168) = v22 + 24;
  *(void *)(a4 + 168) = v22 + 24;
  if (SBYTE7(v44) < 0) {
LABEL_72:
  }
    operator delete(v43[0]);
LABEL_37:
  int v24 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v25 = byte_256B6D7;
  }
  else {
    size_t v25 = qword_256B6C8;
  }
  int v26 = byte_256B8E7;
  if (byte_256B8E7 >= 0) {
    size_t v27 = byte_256B8E7;
  }
  else {
    size_t v27 = qword_256B8D8;
  }
  unint64_t v28 = v27 + v25;
  if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v28 > 0x16)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    p_dst = (char *)operator new(v31 + 1);
    size_t v47 = v27 + v25;
    unint64_t v48 = v32 | 0x8000000000000000;
    std::string __dst = p_dst;
    uint64_t v30 = a1 + 24;
    if (!v25) {
      goto LABEL_54;
    }
    goto LABEL_50;
  }
  size_t v47 = 0;
  unint64_t v48 = 0;
  std::string __dst = 0;
  p_dst = (char *)&__dst;
  HIBYTE(v48) = v27 + v25;
  uint64_t v30 = a1 + 24;
  if (v25)
  {
LABEL_50:
    if (v24 >= 0) {
      uint64_t v33 = &qword_256B6C0;
    }
    else {
      uint64_t v33 = (uint64_t *)qword_256B6C0;
    }
    memmove(p_dst, v33, v25);
  }
LABEL_54:
  std::string::size_type v34 = &p_dst[v25];
  if (v27)
  {
    if (v26 >= 0) {
      uint64_t v35 = &qword_256B8D0;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_256B8D0;
    }
    memmove(v34, v35, v27);
  }
  v34[v27] = 0;
  *(_OWORD *)int v43 = 0u;
  long long v44 = 0u;
  int v45 = 1065353216;
  sub_6102F0(v30, &__dst, (uint64_t)v43, *(unsigned __int8 *)(a1 + 2525), (uint64_t)__p);
  unint64_t v36 = *(void *)(a4 + 328);
  if (v36 >= *(void *)(a4 + 336))
  {
    std::string::size_type v38 = sub_6E8C4((void **)(a4 + 320), (uint64_t)__p);
    int v39 = SHIBYTE(v50);
    *(void *)(a4 + 328) = v38;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v37 = *(_OWORD *)__p;
    *(void *)(v36 + 16) = v50;
    *(_OWORD *)unint64_t v36 = v37;
    __p[1] = 0;
    uint64_t v50 = 0;
    __p[0] = 0;
    *(void *)(a4 + 328) = v36 + 24;
  }
  uint64_t v40 = (void *)v44;
  if ((void)v44)
  {
    do
    {
      uint64_t v41 = (void *)*v40;
      sub_4F4B48((uint64_t)(v40 + 2));
      operator delete(v40);
      uint64_t v40 = v41;
    }
    while (v41);
  }
  uint64_t v42 = v43[0];
  v43[0] = 0;
  if (v42) {
    operator delete(v42);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
}

void sub_558BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 168) = v29;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_558C38@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = 345;
      if (!*(unsigned char *)(a1 + 4040)) {
        uint64_t v4 = 342;
      }
      BOOL v5 = (uint64_t *)&dword_256B738;
      if (!*(unsigned char *)(a1 + 4040)) {
        BOOL v5 = &qword_256B720;
      }
      size_t v6 = &byte_256B74F;
      if (!*(unsigned char *)(a1 + 4040)) {
        size_t v6 = &byte_256B737;
      }
      if (*v6 < 0)
      {
        size_t v8 = (void *)qword_256AC70[v4];
        if (*(unsigned char *)(a1 + 4040)) {
          int v11 = (unint64_t *)&unk_256B740;
        }
        else {
          int v11 = (unint64_t *)&word_256B728;
        }
        unint64_t v9 = *v11;
        size_t v10 = (unsigned char *)a4;
        goto LABEL_21;
      }
      long long v7 = *(_OWORD *)v5;
      *(_OWORD *)a4 = *(_OWORD *)v5;
      *(void *)(a4 + 16) = v5[2];
      return *(double *)&v7;
    case 1:
      if (byte_256B7C7 < 0)
      {
        sub_4200((unsigned char *)a4, (void *)xmmword_256B7B0, *((unint64_t *)&xmmword_256B7B0 + 1));
      }
      else
      {
        *(void *)&long long v7 = xmmword_256B7B0;
        *(_OWORD *)a4 = xmmword_256B7B0;
        *(void *)(a4 + 16) = unk_256B7C0;
      }
      return *(double *)&v7;
    case 4:
      goto LABEL_15;
    case 5:
      if ((a3 - 8) < 2 || a3 == 6) {
        goto LABEL_17;
      }
      if (a3 == 4)
      {
LABEL_15:
        if (byte_256B7DF < 0)
        {
          unint64_t v9 = *((void *)&xmmword_256B7C8 + 1);
          size_t v8 = (void *)xmmword_256B7C8;
          size_t v10 = (unsigned char *)a4;
LABEL_21:
          sub_4200(v10, v8, v9);
        }
        else
        {
          *(void *)&long long v7 = xmmword_256B7C8;
          *(_OWORD *)a4 = xmmword_256B7C8;
          *(void *)(a4 + 16) = unk_256B7D8;
        }
      }
      else if (byte_256B7F7 < 0)
      {
        sub_4200((unsigned char *)a4, (void *)xmmword_256B7E0, *((unint64_t *)&xmmword_256B7E0 + 1));
      }
      else
      {
        *(void *)&long long v7 = xmmword_256B7E0;
        *(_OWORD *)a4 = xmmword_256B7E0;
        *(void *)(a4 + 16) = unk_256B7F0;
      }
      break;
    case 13:
      if (byte_256B9DF < 0)
      {
        sub_4200((unsigned char *)a4, (void *)xmmword_256B9C8, *((unint64_t *)&xmmword_256B9C8 + 1));
      }
      else
      {
        *(void *)&long long v7 = xmmword_256B9C8;
        *(_OWORD *)a4 = xmmword_256B9C8;
        *(void *)(a4 + 16) = unk_256B9D8;
      }
      return *(double *)&v7;
    default:
LABEL_17:
      *(unsigned char *)(a4 + 23) = 0;
      *(unsigned char *)a4 = 0;
      break;
  }
  return *(double *)&v7;
}

void sub_558E28(int a1@<W1>, unsigned int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4 = (void *)a4;
  if (a1 != 4)
  {
    if (a1 == 6 || !a2)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      return;
    }
    long long v7 = "";
    if (a1 == 3) {
      long long v7 = "_R";
    }
    if (a1 == 1) {
      size_t v8 = "_L";
    }
    else {
      size_t v8 = v7;
    }
    size_t v9 = strlen(v8);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v23 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v23 = v9 | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (void **)operator new(v23 + 1);
      size_t v51 = v10;
      int64_t v52 = v24 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v52) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
      {
        LOBYTE(__dst) = 0;
        memset(&v49, 0, sizeof(v49));
        if (a2 >= 5) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    memcpy(p_dst, v8, v10);
    *((unsigned char *)p_dst + v10) = 0;
    memset(&v49, 0, sizeof(v49));
    if (a2 >= 5)
    {
LABEL_43:
      if (a3 == 5)
      {
        size_t v25 = HIBYTE(v52);
        if (v52 < 0) {
          size_t v25 = v51;
        }
        if (!v25)
        {
          std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          char v27 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v49.__r_.__value_.__l.__size_;
          }
          if (!size)
          {
            *uint64_t v4 = 0;
            v4[1] = 0;
            v4[2] = 0;
            if (v27 < 0) {
              goto LABEL_83;
            }
            goto LABEL_84;
          }
        }
      }
      int v28 = byte_256B6D7;
      if (byte_256B6D7 >= 0) {
        size_t v29 = byte_256B6D7;
      }
      else {
        size_t v29 = qword_256B6C8;
      }
      int v30 = byte_256B80F;
      if (byte_256B80F >= 0) {
        size_t v31 = byte_256B80F;
      }
      else {
        size_t v31 = qword_256B800;
      }
      unint64_t v32 = v31 + v29;
      if (v31 + v29 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v32 > 0x16)
      {
        uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17) {
          uint64_t v45 = v32 | 7;
        }
        uint64_t v46 = v45 + 1;
        uint64_t v33 = (char *)operator new(v45 + 1);
        v47.__r_.__value_.__l.__size_ = v31 + v29;
        v47.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        if (!v29)
        {
LABEL_63:
          uint64_t v35 = &v33[v29];
          if (v31)
          {
            if (v30 >= 0) {
              unint64_t v36 = &qword_256B7F8;
            }
            else {
              unint64_t v36 = (uint64_t *)qword_256B7F8;
            }
            memmove(v35, v36, v31);
          }
          v35[v31] = 0;
          if (v52 >= 0) {
            long long v37 = (const std::string::value_type *)&__dst;
          }
          else {
            long long v37 = (const std::string::value_type *)__dst;
          }
          if (v52 >= 0) {
            std::string::size_type v38 = HIBYTE(v52);
          }
          else {
            std::string::size_type v38 = v51;
          }
          int v39 = std::string::append(&v47, v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v41 = &v49;
          }
          else {
            uint64_t v41 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v42 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v42 = v49.__r_.__value_.__l.__size_;
          }
          int v43 = std::string::append(&v48, (const std::string::value_type *)v41, v42);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v4[2] = *((void *)&v43->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v4 = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v48.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_84;
              }
              goto LABEL_83;
            }
          }
          else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_82;
          }
          operator delete(v47.__r_.__value_.__l.__data_);
          if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_83:
          }
            operator delete(v49.__r_.__value_.__l.__data_);
LABEL_84:
          if (SHIBYTE(v52) < 0) {
            operator delete(__dst);
          }
          return;
        }
      }
      else
      {
        memset(&v47, 0, sizeof(v47));
        uint64_t v33 = (char *)&v47;
        *((unsigned char *)&v47.__r_.__value_.__s + 23) = v31 + v29;
        if (!v29) {
          goto LABEL_63;
        }
      }
      if (v28 >= 0) {
        std::string::size_type v34 = &qword_256B6C0;
      }
      else {
        std::string::size_type v34 = (uint64_t *)qword_256B6C0;
      }
      memmove(v33, v34, v29);
      goto LABEL_63;
    }
LABEL_42:
    std::string::assign(&v49, off_2439EF8[(char)(a2 - 1)]);
    goto LABEL_43;
  }
  int v12 = byte_256B6D7;
  if (byte_256B6D7 >= 0) {
    size_t v13 = byte_256B6D7;
  }
  else {
    size_t v13 = qword_256B6C8;
  }
  int v14 = byte_256B83F;
  if (byte_256B83F >= 0) {
    size_t v15 = byte_256B83F;
  }
  else {
    size_t v15 = qword_256B830;
  }
  unint64_t v16 = v15 + v13;
  if (v15 + v13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v16 > 0x16)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    size_t v19 = operator new(v17 + 1);
    v4[1] = v16;
    v4[2] = v18 | 0x8000000000000000;
    *uint64_t v4 = v19;
    uint64_t v4 = v19;
    if (!v13) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 23) = v16;
  if (v13)
  {
LABEL_28:
    if (v12 >= 0) {
      unint64_t v20 = &qword_256B6C0;
    }
    else {
      unint64_t v20 = (uint64_t *)qword_256B6C0;
    }
    memmove(v4, v20, v13);
  }
LABEL_32:
  char v21 = (char *)v4 + v13;
  if (v15)
  {
    if (v14 >= 0) {
      unint64_t v22 = &qword_256B828;
    }
    else {
      unint64_t v22 = (uint64_t *)qword_256B828;
    }
    memmove(v21, v22, v15);
  }
  v21[v15] = 0;
}

void sub_559268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if (a34 < 0)
    {
LABEL_6:
      operator delete(a29);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a34 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5592F8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    size_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    size_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v15;
    }
    else {
      size_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_559428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_559508(uint64_t a1, void *a2)
{
  int64x2_t v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 8) = v4;
  BOOL v5 = (uint64_t *)(a1 + 8);
  *(int64x2_t *)(a1 + 24) = v4;
  size_t v6 = (uint64_t *)(a1 + 24);
  *(int64x2_t *)(a1 + 40) = v4;
  long long v7 = (uint64_t *)(a1 + 40);
  *(int64x2_t *)(a1 + 56) = v4;
  size_t v8 = (uint64_t *)(a1 + 56);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  *(int64x2_t *)(a1 + 72) = v4;
  long long v9 = (_DWORD *)(a1 + 72);
  *(int64x2_t *)(a1 + 88) = v4;
  size_t v10 = (_DWORD *)(a1 + 88);
  *(int64x2_t *)(a1 + 104) = v4;
  int v11 = (_DWORD *)(a1 + 104);
  *(int64x2_t *)(a1 + 120) = v4;
  int v12 = (_DWORD *)(a1 + 120);
  *(int64x2_t *)(a1 + 136) = v4;
  uint64_t v46 = (_DWORD *)(a1 + 136);
  *(int64x2_t *)(a1 + 152) = v4;
  uint64_t v50 = (_DWORD *)(a1 + 152);
  *(int64x2_t *)(a1 + 168) = v4;
  std::string v49 = (_DWORD *)(a1 + 168);
  *(void *)(a1 + 184) = 0x8000000080000000;
  std::string v47 = (_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  std::string v48 = (_DWORD *)(a1 + 192);
  *(_DWORD *)a1 = 0x7FFFFFFF;
  *(_WORD *)(a1 + 324) = 0;
  *(unsigned char *)(a1 + 326) = 0;
  HIBYTE(v51[2]) = 19;
  strcpy((char *)v51, "time_rounding_point");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)a1);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  HIBYTE(v51[2]) = 20;
  strcpy((char *)v51, "hide_incident_offset");
  sub_5C8A4(a2, (uint64_t)v51, v5);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9280;
  strcpy(v51[0], "hide_user_reported_incident_offset");
  sub_5C8A4(a2, (uint64_t)v51, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8870;
  strcpy(v51[0], "hide_area_incident_offset");
  sub_5C8A4(a2, (uint64_t)v51, v6);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "hide_congestion_zone_offset");
  sub_5C8A4(a2, (uint64_t)v51, (uint64_t *)(a1 + 32));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9390;
  strcpy(v51[0], "show_incident_speed_check_offset");
  sub_5C8A4(a2, (uint64_t)v51, v7);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8890;
  strcpy(v51[0], "show_incident_offset_freeways");
  sub_5C8A4(a2, (uint64_t)v51, (uint64_t *)(a1 + 48));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9280;
  strcpy(v51[0], "show_incident_offset_arterial_road");
  sub_5C8A4(a2, (uint64_t)v51, v8);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "show_incident_offset_local_road");
  sub_5C8A4(a2, (uint64_t)v51, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91B0;
  strcpy(v51[0], "desired_time_before_incident");
  sub_5D498(a2, (uint64_t)v51, v9);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "desired_time_after_incident");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 76));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8FD0;
  strcpy(v51[0], "inflated_desired_time_after_incident");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 80));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8870;
  strcpy(v51[0], "desired_time_before_delay");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 84));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91C0;
  strcpy(v51[0], "desired_time_after_delay");
  sub_5D498(a2, (uint64_t)v51, v10);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91C0;
  strcpy(v51[0], "speed_check_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 92));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9250;
  strcpy(v51[0], "ev_warning_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 96));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93A0;
  strcpy(v51[0], "better_route_alternate_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 100));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20E12D0;
  strcpy(v51[0], "ev_better_route_alternate_display_time");
  sub_5D498(a2, (uint64_t)v51, v11);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8890;
  strcpy(v51[0], "passive_incident_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 108));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8890;
  strcpy(v51[0], "votable_incident_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 112));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B5EB0;
  strcpy(v51[0], "area_incident_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 116));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91B0;
  strcpy(v51[0], "congestion_zone_display_time");
  sub_5D498(a2, (uint64_t)v51, v12);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93E0;
  strcpy(v51[0], "traffic_delay_due_to_incidents_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 124));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8890;
  strcpy(v51[0], "blockage_warning_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 128));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "banner_default_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 140));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91B0;
  strcpy(v51[0], "speed_check_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 180));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "ev_warning_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 144));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9960;
  strcpy(v51[0], "better_route_alternate_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 148));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A40;
  strcpy(v51[0], "ev_better_route_alternate_min_display_time");
  sub_5D498(a2, (uint64_t)v51, v50);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9260;
  strcpy(v51[0], "passive_incident_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 156));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9260;
  strcpy(v51[0], "votable_incident_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 160));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9800;
  strcpy(v51[0], "area_incident_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 164));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9390;
  strcpy(v51[0], "congestion_zone_min_display_time");
  sub_5D498(a2, (uint64_t)v51, v49);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "banner_default_min_display_time");
  sub_5D498(a2, (uint64_t)v51, v48);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9380;
  strcpy(v51[0], "traffic_delay_due_to_incidents_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 172));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9260;
  strcpy(v51[0], "blockage_warning_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 176));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91C0;
  strcpy(v51[0], "LPR_warning_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 132));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91B0;
  strcpy(v51[0], "LPR_warning_min_display_time");
  sub_5D498(a2, (uint64_t)v51, v47);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "E_Bike_warning_display_time");
  sub_5D498(a2, (uint64_t)v51, v46);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "E_Bike_warning_min_display_time");
  sub_5D498(a2, (uint64_t)v51, (_DWORD *)(a1 + 188));
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9960;
  strcpy(v51[0], "forcing_alternate_route_banner_priority");
  long long v13 = sub_58070(a2, (uint64_t)v51);
  if (v13 && *((_DWORD *)v13 + 12) == 1)
  {
    *(_DWORD *)(a1 + 196) = *((double *)v13 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_86;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 196) = *(_DWORD *)(a1 + 196);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_86:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A40;
  strcpy(v51[0], "suggesting_alternate_route_banner_priority");
  int v14 = sub_58070(a2, (uint64_t)v51);
  if (v14 && *((_DWORD *)v14 + 12) == 1)
  {
    *(_DWORD *)(a1 + 200) = *((double *)v14 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_92;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a1 + 200);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_92:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9240;
  strcpy(v51[0], "warning_blocked_route_banner_priority");
  std::string v15 = sub_58070(a2, (uint64_t)v51);
  if (v15 && *((_DWORD *)v15 + 12) == 1)
  {
    *(_DWORD *)(a1 + 204) = *((double *)v15 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_98;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a1 + 204);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_98:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9240;
  strcpy(v51[0], "warning_EV_disconnect_banner_priority");
  std::string v16 = sub_58070(a2, (uint64_t)v51);
  if (v16 && *((_DWORD *)v16 + 12) == 1)
  {
    *(_DWORD *)(a1 + 208) = *((double *)v16 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_104;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 208);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_104:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8FD0;
  strcpy(v51[0], "warning_EV_reconnect_banner_priority");
  std::string v17 = sub_58070(a2, (uint64_t)v51);
  if (v17 && *((_DWORD *)v17 + 12) == 1)
  {
    *(_DWORD *)(a1 + 212) = *((double *)v17 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_110;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a1 + 212);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_110:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9AD0;
  strcpy(v51[0], "warning_EV_offline_to_online_transition_banner_priority");
  std::string v18 = sub_58070(a2, (uint64_t)v51);
  if (v18 && *((_DWORD *)v18 + 12) == 1)
  {
    *(_DWORD *)(a1 + 216) = *((double *)v18 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_116;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 216);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_116:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20E12D0;
  strcpy(v51[0], "warning_EV_offline_sar_banner_priority");
  long long v19 = sub_58070(a2, (uint64_t)v51);
  if (v19 && *((_DWORD *)v19 + 12) == 1)
  {
    *(_DWORD *)(a1 + 220) = *((double *)v19 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_122;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_122:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B99F0;
  strcpy(v51[0], "warning_offline_to_online_new_route_banner_priority");
  std::string::size_type v20 = sub_58070(a2, (uint64_t)v51);
  if (v20 && *((_DWORD *)v20 + 12) == 1)
  {
    *(_DWORD *)(a1 + 224) = *((double *)v20 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_128;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a1 + 224);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_128:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93E0;
  strcpy(v51[0], "warning_EV_charging_stops_modified_priority");
  char v21 = sub_58070(a2, (uint64_t)v51);
  if (v21 && *((_DWORD *)v21 + 12) == 1)
  {
    *(_DWORD *)(a1 + 228) = *((double *)v21 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_134;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 228) = *(_DWORD *)(a1 + 228);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_134:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9AD0;
  strcpy(v51[0], "warning_EV_towing_not_supported_warning_banner_priority");
  unint64_t v22 = sub_58070(a2, (uint64_t)v51);
  if (v22 && *((_DWORD *)v22 + 12) == 1)
  {
    *(_DWORD *)(a1 + 232) = *((double *)v22 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_140;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a1 + 232);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_140:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93E0;
  strcpy(v51[0], "warning_EV_infeasible_route_banner_priority");
  uint64_t v23 = sub_58070(a2, (uint64_t)v51);
  if (v23 && *((_DWORD *)v23 + 12) == 1)
  {
    *(_DWORD *)(a1 + 236) = *((double *)v23 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_146;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 236);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_146:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93C0;
  strcpy(v51[0], "warning_votable_incident_banner_priority");
  uint64_t v24 = sub_58070(a2, (uint64_t)v51);
  if (v24 && *((_DWORD *)v24 + 12) == 1)
  {
    *(_DWORD *)(a1 + 240) = *((double *)v24 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_152;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a1 + 240);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_152:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B93C0;
  strcpy(v51[0], "warning_votable_accident_banner_priority");
  size_t v25 = sub_58070(a2, (uint64_t)v51);
  if (v25 && *((_DWORD *)v25 + 12) == 1)
  {
    *(_DWORD *)(a1 + 244) = *((double *)v25 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_158;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 244);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_158:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20E12D0;
  strcpy(v51[0], "warning_votable_hazard_banner_priority");
  int v26 = sub_58070(a2, (uint64_t)v51);
  if (v26 && *((_DWORD *)v26 + 12) == 1)
  {
    *(_DWORD *)(a1 + 248) = *((double *)v26 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_164;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 248);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_164:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20E1380;
  strcpy(v51[0], "warning_non_votable_incident_banner_priority");
  char v27 = sub_58070(a2, (uint64_t)v51);
  if (v27 && *((_DWORD *)v27 + 12) == 1)
  {
    *(_DWORD *)(a1 + 252) = *((double *)v27 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_170;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_170:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20E1380;
  strcpy(v51[0], "warning_non_votable_accident_banner_priority");
  int v28 = sub_58070(a2, (uint64_t)v51);
  if (v28 && *((_DWORD *)v28 + 12) == 1)
  {
    *(_DWORD *)(a1 + 256) = *((double *)v28 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_176;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 256);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_176:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A40;
  strcpy(v51[0], "warning_non_votable_hazard_banner_priority");
  size_t v29 = sub_58070(a2, (uint64_t)v51);
  if (v29 && *((_DWORD *)v29 + 12) == 1)
  {
    *(_DWORD *)(a1 + 260) = *((double *)v29 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_182;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a1 + 260);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_182:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A80;
  strcpy(v51[0], "warning_non_votable_speed_trap_banner_priority");
  int v30 = sub_58070(a2, (uint64_t)v51);
  if (v30 && *((_DWORD *)v30 + 12) == 1)
  {
    *(_DWORD *)(a1 + 264) = *((double *)v30 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_188;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_188:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A60;
  strcpy(v51[0], "warning_non_votable_lane_closure_banner_priority");
  size_t v31 = sub_58070(a2, (uint64_t)v51);
  if (v31 && *((_DWORD *)v31 + 12) == 1)
  {
    *(_DWORD *)(a1 + 268) = *((double *)v31 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_194;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_194:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A60;
  strcpy(v51[0], "warning_non_votable_construction_banner_priority");
  unint64_t v32 = sub_58070(a2, (uint64_t)v51);
  if (v32 && *((_DWORD *)v32 + 12) == 1)
  {
    *(_DWORD *)(a1 + 272) = *((double *)v32 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_200;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_200:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9240;
  strcpy(v51[0], "warning_area_incident_banner_priority");
  uint64_t v33 = sub_58070(a2, (uint64_t)v51);
  if (v33 && *((_DWORD *)v33 + 12) == 1)
  {
    *(_DWORD *)(a1 + 276) = *((double *)v33 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_206;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 276);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_206:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9960;
  strcpy(v51[0], "warning_congestion_zone_banner_priority");
  std::string::size_type v34 = sub_58070(a2, (uint64_t)v51);
  if (v34 && *((_DWORD *)v34 + 12) == 1)
  {
    *(_DWORD *)(a1 + 280) = *((double *)v34 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_212;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 280);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_212:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9380;
  strcpy(v51[0], "warning_incidents_causing_delay_banner_priority");
  uint64_t v35 = sub_58070(a2, (uint64_t)v51);
  if (v35 && *((_DWORD *)v35 + 12) == 1)
  {
    *(_DWORD *)(a1 + 284) = *((double *)v35 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_218;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_218:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9A20;
  strcpy(v51[0], "warning_LPR_offline_sar_or_reroute_banner_priority");
  unint64_t v36 = sub_58070(a2, (uint64_t)v51);
  if (v36 && *((_DWORD *)v36 + 12) == 1)
  {
    *(_DWORD *)(a1 + 288) = *((double *)v36 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_224;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 288);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_224:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v51[1] = xmmword_20B99E0;
  strcpy(v51[0], "warning_E_Bike_offline_sar_or_reroute_banner_priority");
  long long v37 = sub_58070(a2, (uint64_t)v51);
  if (v37 && *((_DWORD *)v37 + 12) == 1)
  {
    *(_DWORD *)(a1 + 292) = *((double *)v37 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_230;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(a1 + 292);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_230:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9800;
  strcpy(v51[0], "e_bike_offline_sar_orange_icon");
  std::string::size_type v38 = sub_58070(a2, (uint64_t)v51);
  if (v38 && *((_DWORD *)v38 + 12) == 1)
  {
    *(_DWORD *)(a1 + 296) = *((double *)v38 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_236;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 296);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_236:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9280;
  strcpy(v51[0], "e_bike_offline_reroute_orange_icon");
  int v39 = sub_58070(a2, (uint64_t)v51);
  if (v39 && *((_DWORD *)v39 + 12) == 1)
  {
    *(_DWORD *)(a1 + 300) = *((double *)v39 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_242;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 300) = *(_DWORD *)(a1 + 300);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_242:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9250;
  strcpy(v51[0], "ev_offline_sar_red_icon");
  long long v40 = sub_58070(a2, (uint64_t)v51);
  if (v40 && *((_DWORD *)v40 + 12) == 1)
  {
    *(_DWORD *)(a1 + 304) = *((double *)v40 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_248;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a1 + 304);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_248:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "ev_offline_to_online_green_icon");
  uint64_t v41 = sub_58070(a2, (uint64_t)v51);
  if (v41 && *((_DWORD *)v41 + 12) == 1)
  {
    *(_DWORD *)(a1 + 308) = *((double *)v41 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_254;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 308);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_254:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B91A0;
  strcpy(v51[0], "lpr_offline_sar_orange_icon");
  std::string::size_type v42 = sub_58070(a2, (uint64_t)v51);
  if (v42 && *((_DWORD *)v42 + 12) == 1)
  {
    *(_DWORD *)(a1 + 312) = *((double *)v42 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_260;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 312);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_260:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "lpr_offline_reroute_orange_icon");
  int v43 = sub_58070(a2, (uint64_t)v51);
  if (v43 && *((_DWORD *)v43 + 12) == 1)
  {
    *(_DWORD *)(a1 + 316) = *((double *)v43 + 5);
    if (SHIBYTE(v51[2]) < 0) {
      goto LABEL_266;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 316);
    if (SHIBYTE(v51[2]) < 0) {
LABEL_266:
    }
      operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9960;
  strcpy(v51[0], "offline_to_online_new_route_orange_icon");
  long long v44 = sub_58070(a2, (uint64_t)v51);
  if (v44 && *((_DWORD *)v44 + 12) == 1)
  {
    *(_DWORD *)(a1 + 320) = *((double *)v44 + 5);
    if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
      goto LABEL_273;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 320);
    if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
      goto LABEL_273;
    }
  }
  operator delete(v51[0]);
LABEL_273:
  HIBYTE(v51[2]) = 21;
  strcpy((char *)v51, "use_basemap_roadnames");
  *(unsigned char *)(a1 + 324) = sub_29D62C(a2, (uint64_t)v51);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v51[1] = xmmword_20B8E90;
  strcpy(v51[0], "wrap_dodgeball_banner_phonetics");
  *(unsigned char *)(a1 + 325) = sub_29D62C(a2, (uint64_t)v51);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  v51[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v51[1] = xmmword_20B9390;
  strcpy(v51[0], "enable_dodgeball_replan_upgrades");
  *(unsigned char *)(a1 + 326) = sub_29D62C(a2, (uint64_t)v51);
  if (SHIBYTE(v51[2]) < 0) {
    operator delete(v51[0]);
  }
  return a1;
}

void sub_55B40C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_55B428()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B438()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B448()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B458()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B468()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B478()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B488()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B498()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4A8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4B8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4C8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4D8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4E8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B4F8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B508()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B518()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B528()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B538()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B548()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B558()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B568()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B578()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B588()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B598()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5A8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5B8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5C8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5D8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5E8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B5F8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B608()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B618()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B628()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B638()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B648()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B658()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B668()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B678()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B688()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B698()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6A8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6B8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6C8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6D8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6E8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B6F8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B708()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B718()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B728()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B738()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B748()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B758()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B768()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B778()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B788()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B798()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7A8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7B8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7C8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7D8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7E8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B7F8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B808()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B818()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B828()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B838()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B848()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B858()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B868()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B878()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B888()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B898()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B8A8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

void sub_55B8B8()
{
  if ((*(char *)(v0 - 89) & 0x80000000) == 0) {
    JUMPOUT(0x55B420);
  }
  JUMPOUT(0x55B418);
}

uint64_t sub_55B8C8(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  sub_5F3B34(a1 + 80);
  sub_5F3B34(a1 + 240);
  sub_5F3B34(a1 + 400);
  sub_5F3B34(a1 + 560);
  *(_DWORD *)(a1 + 720) = 0x7FFFFFFF;
  *(void *)(a1 + 728) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 760) = 0x7FFFFFFF;
  *(void *)(a1 + 768) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 776) = 0;
  *(void *)(a1 + 784) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 800) = 0x7FFFFFFF;
  *(void *)(a1 + 812) = 0x6400000096;
  *(_DWORD *)(a1 + 856) = -1;
  *(_DWORD *)(a1 + 864) = -1;
  *(_DWORD *)(a1 + 867) = -1;
  *(void *)(a1 + 871) = 0;
  *(_OWORD *)(a1 + 879) = 0u;
  *(_WORD *)(a1 + 895) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 968) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 988) = 0;
  *(unsigned char *)(a1 + 992) = 1;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 996) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(unsigned char *)(a1 + 1028) = 0;
  return a1;
}

void sub_55B9F0(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  sub_4D4B58(v6);
  sub_4D4B58(v4);
  sub_4D4B58(v2);
  size_t v8 = *(void **)(v1 + 56);
  if (v8)
  {
    *(void *)(v1 + 64) = v8;
    operator delete(v8);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 32));
  if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_55BA78(uint64_t a1)
{
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*(void **)(a1 + 1032));
  }
  uint64_t v2 = *(void *)(a1 + 1000);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1008);
    uint64_t v4 = *(void **)(a1 + 1000);
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_4D4B58(v3 - 168);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 1000);
    }
    *(void *)(a1 + 1008) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 988)) {
    *(unsigned char *)(a1 + 988) = 0;
  }
  if (*(char *)(a1 + 959) < 0)
  {
    operator delete(*(void **)(a1 + 936));
    if ((*(char *)(a1 + 927) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(a1 + 895) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
  }
  else if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 904));
  if ((*(char *)(a1 + 895) & 0x80000000) == 0)
  {
LABEL_13:
    int v5 = *(_DWORD *)(a1 + 856);
    if (v5 != 1) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 872));
  int v5 = *(_DWORD *)(a1 + 856);
  if (v5 != 1)
  {
LABEL_14:
    if (v5 || (*(char *)(a1 + 855) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    uint64_t v6 = *(void **)(a1 + 832);
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v6 = *(void **)(a1 + 832);
  if (!v6) {
    goto LABEL_23;
  }
  *(void *)(a1 + 840) = v6;
LABEL_22:
  operator delete(v6);
LABEL_23:
  sub_4D4B58(a1 + 560);
  sub_4D4B58(a1 + 400);
  sub_4D4B58(a1 + 240);
  sub_4D4B58(a1 + 80);
  long long v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(void *)(a1 + 64) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_55BBD8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 1128);
  *(unsigned char *)(a1 + 1128) = v4;
  if (v4) {
    sub_4BE9F4(a1 + 8, a2 + 8);
  }
  sub_50FFE0(a1 + 1136, (long long *)(a2 + 1136));
  *(void *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  sub_510340(a1 + 1752, *(void *)(a2 + 1752), *(void *)(a2 + 1760), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 1760) - *(void *)(a2 + 1752)) >> 5));
  int v5 = *(unsigned __int8 *)(a2 + 1788);
  *(unsigned char *)(a1 + 1788) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 1776);
    *(_DWORD *)(a1 + 1784) = *(_DWORD *)(a2 + 1784);
    *(void *)(a1 + 1776) = v6;
  }
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  int v7 = *(unsigned __int8 *)(a2 + 1968);
  *(unsigned char *)(a1 + 1968) = v7;
  if (v7) {
    sub_4BD34C(a1 + 1800, a2 + 1800);
  }
  return a1;
}

void sub_55BCB4(_Unwind_Exception *a1)
{
  sub_50E1E8(v3);
  if (*(unsigned char *)(v1 + 1128))
  {
    sub_3A6B94(v2);
    *(unsigned char *)(v1 + 1128) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_55BCE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1968))
  {
    sub_4BCFD0(a1 + 1800);
    *(unsigned char *)(a1 + 1968) = 0;
  }
  if (*(unsigned char *)(a1 + 1788)) {
    *(unsigned char *)(a1 + 1788) = 0;
  }
  uint64_t v2 = *(void *)(a1 + 1752);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1760);
    int v4 = *(void **)(a1 + 1752);
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_3A6B94(v3 - 1120);
      while (v3 != v2);
      int v4 = *(void **)(a1 + 1752);
    }
    *(void *)(a1 + 1760) = v2;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 1688);
  if (v5)
  {
    *(void *)(a1 + 1696) = v5;
    operator delete(v5);
  }
  sub_510298(a1 + 1216);
  uint64_t v6 = *(void **)(a1 + 1192);
  if (v6)
  {
    *(void *)(a1 + 1200) = v6;
    operator delete(v6);
  }
  if (*(unsigned char *)(a1 + 1128))
  {
    sub_3A6B94(a1 + 8);
    *(unsigned char *)(a1 + 1128) = 0;
  }
  return a1;
}

uint64_t sub_55BDA0(uint64_t *a1, uint64_t a2, _DWORD *a3, int *a4)
{
  unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v10 = 0x186186186186186;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x186186186186186) {
      sub_188D718();
    }
    int v11 = (char *)operator new(168 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v23 = (uint64_t)&v11[168 * v5];
  uint64_t v24 = &v11[168 * v10];
  sub_564938(v23, a2, a3, a4);
  uint64_t v12 = v23 + 168;
  int v14 = (char *)*a1;
  long long v13 = (char *)a1[1];
  if (v13 == (char *)*a1)
  {
    *a1 = v23;
    a1[1] = v12;
    a1[2] = (uint64_t)v24;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v23 + v15;
      std::string v17 = &v13[v15];
      *(void *)(v16 - 152) = 0;
      *(_OWORD *)(v16 - 168) = 0uLL;
      *(_OWORD *)(v16 - 168) = *(_OWORD *)&v13[v15 - 168];
      *(void *)(v16 - 152) = *(void *)&v13[v15 - 152];
      *((void *)v17 - 19) = 0;
      *(_OWORD *)(v17 - 168) = 0uLL;
      *(void *)(v16 - 128) = 0;
      *(_OWORD *)(v16 - 144) = 0uLL;
      *(_OWORD *)(v16 - 144) = *(_OWORD *)&v13[v15 - 144];
      *(void *)(v16 - 128) = *(void *)&v13[v15 - 128];
      *((void *)v17 - 16) = 0;
      *((_OWORD *)v17 - 9) = 0uLL;
      *(void *)(v16 - 104) = 0;
      *(_OWORD *)(v16 - 120) = 0uLL;
      *(_OWORD *)(v16 - 120) = *(_OWORD *)&v13[v15 - 120];
      *(void *)(v16 - 104) = *(void *)&v13[v15 - 104];
      *((void *)v17 - 13) = 0;
      *(_OWORD *)(v17 - 120) = 0uLL;
      *(void *)(v16 - 80) = 0;
      *(_OWORD *)(v16 - 96) = 0uLL;
      *(_OWORD *)(v16 - 96) = *(_OWORD *)&v13[v15 - 96];
      *(void *)(v16 - 80) = *(void *)&v13[v15 - 80];
      uint64_t v18 = *(void *)&v13[v15 - 72];
      *((_OWORD *)v17 - 6) = 0uLL;
      *((_OWORD *)v17 - 5) = 0uLL;
      *(void *)(v16 - 72) = v18;
      LODWORD(v18) = *(_DWORD *)&v13[v15 - 64];
      *(unsigned char *)(v16 - 60) = v13[v15 - 60];
      *(_DWORD *)(v16 - 64) = v18;
      long long v19 = *(_OWORD *)&v13[v15 - 56];
      *(void *)(v16 - 40) = *(void *)&v13[v15 - 40];
      *(_OWORD *)(v16 - 56) = v19;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 7) = 0;
      long long v20 = *(_OWORD *)&v13[v15 - 32];
      *(void *)(v16 - 16) = *(void *)&v13[v15 - 16];
      *(_OWORD *)(v16 - 32) = v20;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 4) = 0;
      *(void *)(v16 - 8) = *(void *)&v13[v15 - 8];
      v15 -= 168;
    }
    while (&v13[v15] != v14);
    char v21 = (char *)*a1;
    long long v13 = (char *)a1[1];
    *a1 = v23 + v15;
    a1[1] = v12;
    a1[2] = (uint64_t)v24;
    if (v13 != v21)
    {
      do
        long long v13 = (char *)sub_4D4B58((uint64_t)(v13 - 168));
      while (v13 != v21);
      long long v13 = v21;
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v23 + 168;
}

void sub_55C008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C01C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_55C01C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    sub_4D4B58(i - 168);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_55C070(char **a1, long long *a2, char *a3, _DWORD *a4)
{
  unint64_t v5 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v10 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v33 = (uint64_t)(a1 + 2);
  if (v10)
  {
    if (v10 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    int v11 = (char *)operator new(144 * v10);
  }
  else
  {
    int v11 = 0;
  }
  size_t v31 = &v11[144 * v5];
  unint64_t v32 = &v11[144 * v10];
  sub_5F2564(v31, a2, *a3, a4);
  uint64_t v12 = v31;
  long long v13 = *a1;
  uint64_t v14 = (uint64_t)a1[1];
  if ((char *)v14 == *a1)
  {
    size_t v29 = a1[1];
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v14 + v15;
      long long v17 = *(_OWORD *)(v14 + v15 - 144);
      uint64_t v18 = &v31[v15];
      *((void *)v18 - 16) = *(void *)(v14 + v15 - 128);
      *((_OWORD *)v18 - 9) = v17;
      *(_OWORD *)(v16 - 136) = 0uLL;
      uint64_t v19 = *(void *)(v14 + v15 - 120);
      int v20 = *(_DWORD *)(v14 + v15 - 112);
      *(void *)(v16 - 144) = 0;
      *((_DWORD *)v18 - 28) = v20;
      *((void *)v18 - 15) = v19;
      uint64_t v21 = *(void *)(v14 + v15 - 104);
      *(void *)(v16 - 104) = 0;
      *((void *)v18 - 13) = v21;
      uint64_t v22 = *(void *)(v14 + v15 - 96);
      *(void *)(v16 - 96) = 0;
      *((void *)v18 - 12) = v22;
      uint64_t v23 = *(void *)(v14 + v15 - 88);
      *(void *)(v16 - 88) = 0;
      *((void *)v18 - 11) = v23;
      *((void *)v18 - 10) = 0;
      *(_OWORD *)(v18 - 72) = 0uLL;
      *((_OWORD *)v18 - 5) = *(_OWORD *)(v14 + v15 - 80);
      *((void *)v18 - 8) = *(void *)(v14 + v15 - 64);
      uint64_t v24 = *(void *)(v14 + v15 - 56);
      *(_OWORD *)(v16 - 80) = 0uLL;
      *(_OWORD *)(v16 - 64) = 0uLL;
      *((void *)v18 - 7) = v24;
      LODWORD(v24) = *(_DWORD *)(v14 + v15 - 48);
      *(v18 - 44) = *(unsigned char *)(v14 + v15 - 44);
      *((_DWORD *)v18 - 12) = v24;
      uint64_t v25 = *(void *)(v14 + v15 - 40);
      *(void *)(v16 - 40) = 0;
      *((void *)v18 - 5) = v25;
      uint64_t v26 = *(void *)(v14 + v15 - 32);
      *(void *)(v16 - 32) = 0;
      *((void *)v18 - 4) = v26;
      uint64_t v27 = *(void *)(v14 + v15 - 24);
      *(void *)(v16 - 24) = 0;
      *((void *)v18 - 3) = v27;
      uint64_t v28 = *(void *)(v14 + v15 - 16);
      *(void *)(v16 - 16) = 0;
      *((void *)v18 - 2) = v28;
      *((_DWORD *)v18 - 2) = *(_DWORD *)(v14 + v15 - 8);
      v15 -= 144;
    }
    while ((char *)(v14 + v15) != v13);
    size_t v29 = *a1;
    uint64_t v14 = (uint64_t)a1[1];
    uint64_t v12 = &v31[v15];
  }
  *a1 = v12;
  a1[1] = v31 + 144;
  a1[2] = v32;
  while ((char *)v14 != v29)
  {
    v14 -= 144;
    sub_4F2DAC(v33, v14);
  }
  if (v29) {
    operator delete(v29);
  }
  return v31 + 144;
}

void sub_55C2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_55C2D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = v3 - 144;
    sub_4F2DAC(v4, v3 - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_55C330(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  long long v17 = v10;
  uint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    unint64_t v10 = v16;
    int v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      long long v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    int v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  long long v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_55C4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_55C508()
{
  byte_2568CA7 = 1;
  word_2568C90 = 65;
  byte_2568CBF = 1;
  word_2568CA8 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_256CB08 = 0u;
  *(_OWORD *)&qword_256CB18 = 0u;
  dword_256CB28 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_256CB08, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_256CB08, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_256CB08, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_256CB08, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_2568CD7 = 8;
  strcpy((char *)&qword_2568CC0, "any_mode");
  byte_2568CEF = 7;
  strcpy((char *)&dword_2568CD8, "cycling");
  byte_2568D07 = 7;
  strcpy((char *)&dword_2568CF0, "driving");
  byte_2568D1F = 7;
  strcpy((char *)&dword_2568D08, "walking");
  strcpy(&byte_2568D37, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2568D20, "\x1B\\toi=lhp\\"");
  byte_2568D4F = 11;
  qword_2568D50 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_2568D58 = xmmword_20B9250;
  strcpy(qword_2568D50, "\x1B\\toi=x-sampa-internal\\"");
  byte_2568D7F = 13;
  strcpy((char *)&qword_2568D68, "\x1B\\tn=address\\"");
  strcpy(&byte_2568D97, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2568D80, "\x1B\\tn=nav\\"");
  byte_2568DAF = 12;
  byte_2568DC7 = 7;
  strcpy((char *)&dword_2568DB0, "\x1B\\lang=");
  byte_2568DDF = 1;
  word_2568DC8 = 92;
  byte_2568DF7 = 4;
  strcpy((char *)&qword_2568DE0, "DEV:");
  byte_2568E0F = 8;
  strcpy((char *)&qword_2568DF8, "Continue");
  byte_2568E27 = 11;
  strcpy((char *)&qword_2568E10, "Start_Route");
  byte_2568E3F = 14;
  strcpy((char *)&qword_2568E28, "Continue_Route");
  byte_2568E57 = 12;
  strcpy((char *)&qword_2568E40, "Resume_Route");
  byte_2568E6F = 18;
  strcpy((char *)&xmmword_2568E58, "Start_Route_U_Turn");
  byte_2568E87 = 7;
  strcpy((char *)&dword_2568E70, "_U_Turn");
  qword_2568E98 = 0x1300000000000000;
  qmemcpy(&unk_2568EA0, "Continue_Route", 14);
  qword_2568E88 = *(void *)"Resume_Route";
  unk_2568E90 = 0x545F555F6574756FLL;
  unk_2568E97 = 1852994900;
  qword_2568EB0 = 0x1500000000000000;
  strcpy(byte_2568EB8, "Left_Turn");
  unk_2568EAE = 1415533919;
  *(_DWORD *)((char *)&qword_2568EB0 + 1) = 1852994900;
  strcpy(&byte_2568ECF, "\tRight_Turn");
  strcpy(&byte_2568EE7, "\nLeft_Turn_At_End");
  byte_2568EFF = 16;
  byte_2568F17 = 17;
  strcpy((char *)&xmmword_2568F00, "Right_Turn_At_End");
  byte_2568F2F = 15;
  strcpy((char *)&qword_2568F18, "Sharp_Left_Turn");
  byte_2568F47 = 16;
  strcpy((char *)&xmmword_2568F30, "Sharp_Right_Turn");
  byte_2568F5F = 16;
  strcpy((char *)&xmmword_2568F48, "Slight_Left_Turn");
  byte_2568F77 = 17;
  strcpy((char *)&xmmword_2568F60, "Slight_Right_Turn");
  strcpy(&byte_2568F8F, "\tKeep_Right");
  strcpy((char *)&qword_2568F78, "Keep_Left");
  strcpy(&byte_2568FA7, "\nU_Turn");
  byte_2568FBF = 6;
  byte_2568FD7 = 14;
  strcpy((char *)&qword_2568FC0, "Walking_U_Turn");
  byte_2568FEF = 20;
  strcpy((char *)&xmmword_2568FD8, "U_Turn_When_Possible");
  byte_2569007 = 20;
  strcpy((char *)&xmmword_2568FF0, "U_Turn_At_Roundabout");
  byte_256901F = 11;
  strcpy((char *)&qword_2569008, "Enter_Ferry");
  strcpy(&byte_2569037, "\nChange_Ferry");
  strcpy((char *)&qword_2569020, "Exit_Ferry");
  byte_256904F = 12;
  byte_2569067 = 21;
  strcpy((char *)&xmmword_2569050, "Enter_Railway_Shuttle");
  byte_256907F = 20;
  strcpy((char *)&xmmword_2569068, "Exit_Railway_Shuttle");
  byte_2569097 = 22;
  strcpy((char *)&xmmword_2569080, "Change_Railway_Shuttle");
  byte_25690AF = 17;
  strcpy((char *)&xmmword_2569098, "End_Of_Navigation");
  byte_25690C7 = 17;
  strcpy((char *)&xmmword_25690B0, "End_Of_Navigation");
  byte_25690DF = 11;
  strcpy((char *)&qword_25690C8, "Destination");
  byte_25690F7 = 19;
  strcpy((char *)&xmmword_25690E0, "Destination_On_left");
  byte_256910F = 20;
  strcpy((char *)&xmmword_25690F8, "Destination_On_Right");
  strcpy(&byte_2569127, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2569110, "First_Stop");
  byte_256913F = 18;
  byte_2569157 = 19;
  strcpy((char *)&xmmword_2569140, "First_Stop_On_Right");
  strcpy(&byte_256916F, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2569158, "Next_Stop");
  byte_2569187 = 17;
  byte_256919F = 18;
  strcpy((char *)&xmmword_2569188, "Next_Stop_On_Right");
  byte_25691B7 = 13;
  strcpy((char *)&qword_25691A0, "Waypoint_Stop");
  byte_25691CF = 21;
  strcpy((char *)&xmmword_25691B8, "Waypoint_Stop_On_Left");
  byte_25691E7 = 22;
  strcpy((char *)&xmmword_25691D0, "Waypoint_Stop_On_Right");
  byte_25691FF = 11;
  strcpy((char *)&qword_25691E8, "Roundabout_");
  byte_2569217 = 16;
  strcpy((char *)&xmmword_2569200, "Enter_Roundabout");
  qword_2569218 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  *(_OWORD *)algn_2569220 = xmmword_20B91C0;
  strcpy((char *)qword_2569218, "Walking_Enter_Roundabout");
  byte_2569247 = 16;
  strcpy(&algn_2569220[16], "Leave_Roundabout");
  byte_256925F = 21;
  strcpy((char *)&xmmword_2569248, "Roundabout_First_Exit");
  byte_2569277 = 22;
  strcpy(byte_2569260, "Roundabout_Second_Exit");
  byte_256928F = 21;
  strcpy((char *)&xmmword_2569278, "Roundabout_Third_Exit");
  strcpy(byte_2569290, "Roundabout_Fourth_Exit");
  HIBYTE(word_25692A6) = 22;
  byte_25692BF = 21;
  strcpy((char *)&xmmword_25692A8, "Roundabout_Fifth_Exit");
  byte_25692D7 = 21;
  strcpy(byte_25692C0, "Roundabout_Sixth_Exit");
  qword_25692D8 = (uint64_t)operator new(0x19uLL);
  unk_25692E0 = xmmword_20B9250;
  strcpy((char *)qword_25692D8, "Roundabout_Seventh_Exit");
  strcpy(byte_25692F0, "Roundabout_Eighth_Exit");
  HIBYTE(word_2569306) = 22;
  byte_256931F = 21;
  strcpy((char *)&xmmword_2569308, "Roundabout_Ninth_Exit");
  byte_2569337 = 21;
  strcpy(byte_2569320, "Roundabout_Tenth_Exit");
  qword_2569338 = (uint64_t)operator new(0x20uLL);
  unk_2569340 = xmmword_20B91C0;
  strcpy((char *)qword_2569338, "Roundabout_Eleventh_Exit");
  qword_2569350 = (uint64_t)operator new(0x19uLL);
  unk_2569358 = xmmword_20B9250;
  strcpy((char *)qword_2569350, "Roundabout_Twelfth_Exit");
  qword_2569368 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  *(_OWORD *)algn_2569370 = xmmword_20B5EB0;
  strcpy((char *)qword_2569368, "Roundabout_Thirteenth_Exit");
  qword_2569380 = (uint64_t)operator new(0x20uLL);
  unk_2569388 = xmmword_20B5EB0;
  strcpy((char *)qword_2569380, "Roundabout_Fourteenth_Exit");
  qword_2569398 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  unk_25693A0 = xmmword_20B8870;
  strcpy((char *)qword_2569398, "Roundabout_Fifteenth_Exit");
  qword_25693B0 = (uint64_t)operator new(0x20uLL);
  unk_25693B8 = xmmword_20B8870;
  strcpy((char *)qword_25693B0, "Roundabout_Sixteenth_Exit");
  qword_25693C8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  *(_OWORD *)algn_25693D0 = xmmword_20B91A0;
  strcpy((char *)qword_25693C8, "Roundabout_Seventeenth_Exit");
  qword_25693E0 = (uint64_t)operator new(0x20uLL);
  unk_25693E8 = xmmword_20B5EB0;
  strcpy((char *)qword_25693E0, "Roundabout_Eighteenth_Exit");
  qword_25693F8 = (uint64_t)operator new(0x20uLL);
  unk_2569400 = xmmword_20B5EB0;
  strcpy((char *)qword_25693F8, "Roundabout_Nineteenth_Exit");
  byte_2569427 = 8;
  strcpy((char *)&qword_2569410, "Off_Ramp");
  byte_256943F = 16;
  strcpy((char *)&xmmword_2569428, "Off_Ramp_On_Left");
  byte_2569457 = 17;
  strcpy(byte_2569440, "Off_Ramp_On_Right");
  byte_256946F = 14;
  strcpy((char *)&qword_2569458, "Change_Highway");
  strcpy(byte_2569470, "Change_Highway_On_Left");
  HIBYTE(word_2569486) = 22;
  qword_2569488 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2569490 = xmmword_20B9250;
  strcpy((char *)qword_2569488, "Change_Highway_On_Right");
  byte_25694B7 = 5;
  strcpy((char *)&dword_25694A0, "Merge");
  byte_25694CF = 12;
  strcpy((char *)&qword_25694B8, "Enter_Detour");
  byte_25694E7 = 11;
  strcpy((char *)&qword_25694D0, "Exit_Detour");
  byte_25694FF = 18;
  strcpy((char *)&xmmword_25694E8, "Walking_Turnaround");
  qword_2569500 = (uint64_t)operator new(0x19uLL);
  unk_2569508 = xmmword_20B9250;
  strcpy((char *)qword_2569500, "Walking_Turnaround_Sign");
  byte_256952F = 19;
  strcpy(byte_2569518, "Distance_Title_List");
  unk_2569530 = operator new(0x19uLL);
  unk_2569538 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_2569530, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_256955F = 19;
  strcpy(byte_2569548, "Arrival_Charge_List");
  byte_2569577 = 15;
  strcpy(byte_2569560, "Charge_At_Start");
  strcpy(&byte_256958F, "\tPass_Street");
  strcpy(byte_2569578, "Pass_Exit");
  byte_25695A7 = 11;
  byte_25695BF = 17;
  strcpy(byte_25695A8, "Pass_Intersection");
  strcpy(&byte_25695D7, "\t_PrevExitNumber");
  strcpy(byte_25695C0, "Next_Exit");
  byte_25695EF = 15;
  strcpy(&byte_2569607, "\t_PrevUTurn");
  strcpy(byte_25695F0, "_PrevRoad");
  strcpy(&byte_256961F, "\nNext_");
  byte_2569637 = 5;
  byte_256964F = 15;
  strcpy(byte_2569638, "_At_Next_Street");
  byte_2569667 = 21;
  strcpy(byte_2569650, "_At_Next_Intersection");
  byte_256967F = 14;
  strcpy((char *)&qword_2569668, "Charge_Station");
  byte_2569697 = 15;
  strcpy((char *)&qword_2569680, "_Charge_Station");
  BYTE1(qword_25696A8) = 0;
  WORD1(qword_25696A8) = 25856;
  HIDWORD(qword_25696A8) = 335544320;
  strcpy((char *)&qword_2569698, "_Charge_Station_");
  byte_25696C7 = 8;
  strcpy((char *)&qword_25696B0, "_Minimum");
  byte_25696DF = 15;
  strcpy((char *)&qword_25696C8, "ExitShield_Sign");
  byte_25696F7 = 8;
  strcpy((char *)&qword_25696E0, "Walking_");
  byte_256970F = 16;
  strcpy((char *)&xmmword_25696F8, "Walking_Continue");
  byte_2569727 = 19;
  strcpy((char *)&xmmword_2569710, "Walking_Start_Route");
  qword_2569728 = (uint64_t)operator new(0x20uLL);
  unk_2569730 = xmmword_20B5EB0;
  strcpy((char *)qword_2569728, "Walking_Start_Route_U_Turn");
  byte_2569757 = 17;
  strcpy(byte_2569740, "Walking_Left_Turn");
  byte_256976F = 18;
  strcpy((char *)&xmmword_2569758, "Walking_Right_Turn");
  qword_2569770 = (uint64_t)operator new(0x20uLL);
  unk_2569778 = xmmword_20B5EB0;
  strcpy((char *)qword_2569770, "Walking_Turn_At_Roundabout");
  qword_2569788 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  *(_OWORD *)algn_2569790 = xmmword_20B91B0;
  strcpy((char *)qword_2569788, "Walking_U_Turn_When_Possible");
  qword_25697A0 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25697A8 = xmmword_20B9390;
  strcpy((char *)qword_25697A0, "Walking_Roundabout_Exit_Continue");
  qword_25697B8 = (uint64_t)operator new(0x20uLL);
  unk_25697C0 = xmmword_20B91B0;
  strcpy((char *)qword_25697B8, "Walking_Roundabout_Exit_Left");
  qword_25697D0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25697D8 = xmmword_20B8890;
  strcpy((char *)qword_25697D0, "Walking_Roundabout_Exit_Right");
  qword_25697E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25697F0 = xmmword_20B8870;
  strcpy((char *)qword_25697E8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2569800 = (uint64_t)v0;
  unk_2569808 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_256982F = 8;
  strcpy((char *)&qword_2569818, "Walking_");
  qword_2569830 = (uint64_t)operator new(0x19uLL);
  unk_2569838 = v282;
  strcpy((char *)qword_2569830, "Walking_Sharp_Left_Turn");
  qword_2569848 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2569850 = v281;
  strcpy((char *)qword_2569848, "Walking_Sharp_Right_Turn");
  qword_2569860 = (uint64_t)operator new(0x20uLL);
  unk_2569868 = v281;
  strcpy((char *)qword_2569860, "Walking_Slight_Left_Turn");
  qword_2569878 = (uint64_t)operator new(0x20uLL);
  unk_2569880 = v280;
  strcpy((char *)qword_2569878, "Walking_Slight_Right_Turn");
  byte_25698A7 = 4;
  strcpy((char *)&dword_2569890, "Exit");
  byte_25698BF = 4;
  strcpy((char *)&dword_25698A8, "Road");
  byte_25698D7 = 7;
  strcpy((char *)&dword_25698C0, "Freeway");
  byte_25698EF = 12;
  strcpy((char *)&qword_25698D8, "Intersection");
  byte_2569907 = 5;
  strcpy((char *)&dword_25698F0, "Ferry");
  byte_256991F = 11;
  strcpy((char *)&qword_2569908, "ShuttleName");
  byte_2569937 = 5;
  strcpy((char *)&dword_2569920, "Road1");
  strcpy(&byte_256994F, "\tName");
  strcpy((char *)&qword_2569938, "Signpost1");
  byte_2569967 = 4;
  byte_256997F = 7;
  strcpy((char *)&dword_2569968, "Address");
  byte_2569997 = 7;
  strcpy((char *)&dword_2569980, "Shield1");
  byte_25699AF = 13;
  strcpy((char *)&qword_2569998, "TowardShield1");
  byte_25699C7 = 6;
  strcpy((char *)&dword_25699B0, "Right_");
  byte_25699DF = 5;
  strcpy((char *)&dword_25699C8, "Left_");
  strcpy(&byte_25699F7, "\tOn_Left_");
  strcpy((char *)&qword_25699E0, "On_Right_");
  byte_2569A0F = 8;
  byte_2569A27 = 12;
  strcpy((char *)&qword_2569A10, "ElevatorName");
  byte_2569A3F = 13;
  strcpy((char *)&qword_2569A28, "EscalatorName");
  strcpy(&byte_2569A57, "\nBridgeName");
  strcpy((char *)&qword_2569A40, "StairsName");
  strcpy(&byte_2569A6F, "\nTunnelName");
  strcpy(&byte_2569A87, "\nParking");
  byte_2569A9F = 7;
  strcpy(&byte_2569AB7, "\t_Escalator");
  strcpy((char *)&qword_2569AA0, "_Elevator");
  strcpy(&byte_2569ACF, "\n_ElevatorName");
  byte_2569AE7 = 13;
  byte_2569AFF = 14;
  strcpy((char *)&qword_2569AE8, "_EscalatorName");
  byte_2569B17 = 5;
  strcpy((char *)&xmmword_2569B00, "_Road");
  byte_2569B2F = 8;
  strcpy((char *)&qword_2569B18, "_Freeway");
  byte_2569B47 = 13;
  strcpy((char *)&qword_2569B30, "_Intersection");
  byte_2569B5F = 6;
  strcpy((char *)&dword_2569B48, "_Road1");
  byte_2569B77 = 6;
  strcpy((char *)&dword_2569B60, "_Road2");
  strcpy(&byte_2569B8F, "\n_Signpost2");
  strcpy((char *)&qword_2569B78, "_Signpost1");
  strcpy(&byte_2569BA7, "\n_Ferry");
  byte_2569BBF = 6;
  byte_2569BD7 = 12;
  strcpy((char *)&qword_2569BC0, "_Ferry_Ferry");
  byte_2569BEF = 12;
  strcpy((char *)&qword_2569BD8, "_ShuttleName");
  qword_2569BF0 = (uint64_t)operator new(0x20uLL);
  unk_2569BF8 = v279;
  strcpy((char *)qword_2569BF0, "_Railway_Shuttle_ShuttleName");
  byte_2569C1F = 11;
  strcpy((char *)&qword_2569C08, "_ExitNumber");
  byte_2569C37 = 5;
  strcpy((char *)&dword_2569C20, "_Exit");
  byte_2569C4F = 7;
  strcpy((char *)&dword_2569C38, "_StayOn");
  byte_2569C67 = 7;
  strcpy((char *)&dword_2569C50, "_Stairs");
  byte_2569C7F = 5;
  strcpy((char *)&dword_2569C68, "_Ramp");
  byte_2569C97 = 11;
  strcpy((char *)&qword_2569C80, "_StairsName");
  strcpy(&byte_2569CAF, "\t_Down");
  strcpy((char *)&qword_2569C98, "_RampName");
  byte_2569CC7 = 5;
  byte_2569CDF = 3;
  dword_2569CC8 = 7361887;
  byte_2569CF7 = 7;
  strcpy((char *)&dword_2569CE0, "_Bridge");
  byte_2569D0F = 7;
  strcpy((char *)&dword_2569CF8, "_Tunnel");
  byte_2569D27 = 11;
  strcpy((char *)&qword_2569D10, "_Roundabout");
  byte_2569D3F = 6;
  strcpy((char *)&dword_2569D28, "_Cross");
  byte_2569D57 = 8;
  strcpy((char *)&qword_2569D40, "_Parking");
  byte_2569D6F = 8;
  strcpy((char *)&qword_2569D58, "_Shield1");
  byte_2569D87 = 14;
  strcpy((char *)&qword_2569D70, "_TowardShield1");
  byte_2569D9F = 8;
  strcpy((char *)&qword_2569D88, "_Shield2");
  byte_2569DB7 = 14;
  strcpy((char *)&qword_2569DA0, "_TowardShield2");
  byte_2569DCF = 11;
  strcpy((char *)&qword_2569DB8, "_Direction1");
  byte_2569DE7 = 11;
  strcpy((char *)&qword_2569DD0, "_Direction2");
  strcpy(&byte_2569DFF, "\n_TowardDirection1");
  strcpy((char *)&qword_2569DE8, "Direction1");
  byte_2569E17 = 17;
  byte_2569E2F = 17;
  strcpy((char *)&xmmword_2569E18, "_TowardDirection2");
  byte_2569E47 = 16;
  strcpy((char *)&xmmword_2569E30, "TowardDirection1");
  byte_2569E5F = 7;
  strcpy((char *)&qword_2569E48, "_Spoken");
  byte_2569E77 = 5;
  strcpy((char *)&qword_2569E60, "_Sign");
  byte_2569E8F = 15;
  strcpy((char *)&qword_2569E78, "_Secondary_Sign");
  byte_2569EA7 = 5;
  byte_2569E94 = 116;
  dword_2569E90 = 1936280671;
  byte_2569E95 = 0;
  byte_2569EBF = 8;
  strcpy((char *)&qword_2569EA8, "_Primary");
  qword_2569ED0 = 0xF00000000000000;
  strcpy((char *)&qword_2569EC0, "_Spoken_Primary");
  strcpy(&byte_2569EEF, "\n_Secondary");
  strcpy((char *)&qword_2569ED8, "_Secondary");
  strcpy(&byte_2569F07, "\n_Spoken_Secondar");
  BYTE1(qword_2569F18) = 0;
  WORD1(qword_2569F18) = 0;
  HIDWORD(qword_2569F18) = 285212672;
  byte_2569F37 = 13;
  strcpy((char *)&qword_2569F20, "_To_Secondary");
  BYTE1(qword_2569F48) = 0;
  WORD1(qword_2569F48) = 0;
  HIDWORD(qword_2569F48) = 335544320;
  strcpy((char *)&dword_2569F38, "_Spoken_To_Secon");
  strcpy(&byte_2569F67, "\t_ValidDistance");
  strcpy((char *)&qword_2569F50, "_Distance");
  byte_2569F7F = 14;
  byte_2569F97 = 6;
  strcpy((char *)&dword_2569F80, "_Short");
  byte_2569FAF = 1;
  word_2569F98 = 95;
  qword_2569FB0 = (uint64_t)operator new(0x20uLL);
  unk_2569FB8 = v281;
  strcpy((char *)qword_2569FB0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2569FC8 = (uint64_t)v1;
  *(_OWORD *)algn_2569FD0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  *(void *)(v1 + 15) = v271;
  v1[23] = 0;
  byte_2569FF7 = 12;
  strcpy((char *)&qword_2569FE0, "Chain_Spoken");
  byte_256A00F = 15;
  strcpy((char *)&qword_2569FF8, "Chain_To_Spoken");
  strcpy(&byte_256A027, "\nThen_Spoken");
  strcpy((char *)&qword_256A010, "And_Spoken");
  byte_256A03F = 11;
  byte_256A057 = 18;
  strcpy(byte_256A040, "Concatenate_Spoken");
  qword_256A058 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  unk_256A060 = xmmword_20B9240;
  strcpy((char *)qword_256A058, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_256A070 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_256A078 = xmmword_20B9260;
  strcpy((char *)qword_256A070, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_256A088 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_256A090 = xmmword_20B9A90;
  strcpy((char *)qword_256A088, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_256A0A0 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_256A0A8 = xmmword_20B9A40;
  strcpy((char *)qword_256A0A0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_256A0B8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  unk_256A0C0 = xmmword_20E12D0;
  strcpy((char *)qword_256A0B8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_256A0D0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_256A0D8 = xmmword_20B9960;
  strcpy((char *)qword_256A0D0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_256A0E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256A0F0 = xmmword_20B93A0;
  strcpy((char *)qword_256A0E8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_256A100 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_256A108 = xmmword_20E1380;
  strcpy((char *)qword_256A100, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_256A118 = (uint64_t)operator new(0x30uLL);
  unk_256A120 = xmmword_20B93C0;
  strcpy((char *)qword_256A118, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_256A130 = (uint64_t)operator new(0x38uLL);
  unk_256A138 = xmmword_20B9A60;
  strcpy((char *)qword_256A130, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_256A148 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_256A150 = xmmword_20E1380;
  strcpy((char *)qword_256A148, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_256A160 = (uint64_t)operator new(0x28uLL);
  unk_256A168 = xmmword_20B9960;
  strcpy((char *)qword_256A160, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_256A178 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  unk_256A180 = xmmword_20B93D0;
  strcpy((char *)qword_256A178, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_256A190 = (uint64_t)operator new(0x20uLL);
  unk_256A198 = v277;
  strcpy((char *)qword_256A190, "Walking_Distance_Chain_Spoken");
  qword_256A1A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256A1B0 = v277;
  strcpy((char *)qword_256A1A8, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_256A1C0 = (uint64_t)v2;
  unk_256A1C8 = v282;
  *(_OWORD *)uint64_t v2 = v272;
  *(void *)(v2 + 15) = v271;
  v2[23] = 0;
  unk_256A1D8 = operator new(0x28uLL);
  unk_256A1E0 = v270;
  strcpy(unk_256A1D8, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_256A1F0, "Walking_Continue_Cross");
  HIBYTE(word_256A206) = 22;
  byte_256A21F = 14;
  strcpy(byte_256A208, "Continue_Cross");
  byte_256A237 = 5;
  strcpy(byte_256A220, "Cross");
  byte_256A24F = 19;
  strcpy(byte_256A238, "Cross_Street_Spoken");
  byte_256A267 = 17;
  strcpy(algn_256A250, "Cross_Road_Spoken");
  byte_256A27F = 20;
  strcpy(byte_256A268, "Use_Crosswalk_Spoken");
  byte_256A297 = 15;
  strcpy(byte_256A280, "Distance_Spoken");
  byte_256A2AF = 19;
  strcpy(byte_256A298, "Distance_And_Spoken");
  byte_256A2C7 = 21;
  strcpy(byte_256A2B0, "Continue_Stage_Spoken");
  byte_256A2DF = 13;
  qmemcpy(&qword_256A2C8, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_2569ED0);
  if (qword_2569ED0 >= 0) {
    size_t v4 = HIBYTE(qword_2569ED0);
  }
  else {
    size_t v4 = unk_2569EC8;
  }
  unint64_t v5 = v4 + 13;
  byte_256A2D5 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v9 = (char *)operator new(v7 + 1);
    qword_256A2E8 = v4 + 13;
    unk_256A2F0 = v8 | 0x8000000000000000;
    qword_256A2E0 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    unint64_t v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_256A2E8) = 0;
    WORD1(qword_256A2E8) = 0;
    HIDWORD(qword_256A2E8) = 0;
    unk_256A2F0 = 0;
    byte_256A2F7 = v4 + 13;
    strcpy((char *)&qword_256A2E0, "Continue");
    unint64_t v6 = (char *)&qword_256A2E8 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    unint64_t v10 = &qword_2569EC0;
  }
  else {
    unint64_t v10 = (uint64_t *)qword_2569EC0;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_2569B17;
  if (byte_2569B17 >= 0) {
    size_t v12 = byte_2569B17;
  }
  else {
    size_t v12 = *((void *)&xmmword_2569B00 + 1);
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *long long v17 = qword_256A2C8;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_256A2C8 + 5);
    uint64_t v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_256A2C8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_256A2C8;
    uint64_t v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    uint64_t v18 = &xmmword_2569B00;
  }
  else {
    uint64_t v18 = (long long *)xmmword_2569B00;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_2569EC0;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_2569EC0;
  }
  int v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_256A308 = v20->__r_.__value_.__r.__words[2];
  xmmword_256A2F8 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_256A327 = 5;
  strcpy((char *)&dword_256A310, "Merge");
  qword_256A328 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  *(_OWORD *)algn_256A330 = xmmword_20B8E90;
  strcpy((char *)qword_256A328, "Continue_Freeway_Spoken_Primary");
  byte_256A357 = 8;
  strcpy((char *)&qword_256A340, "Starting");
  byte_256A36F = 14;
  strcpy((char *)&qword_256A358, "Starting_Route");
  byte_256A387 = 14;
  strcpy((char *)&qword_256A370, "Resuming_Route");
  byte_256A39F = 16;
  strcpy((char *)&xmmword_256A388, "Continuing_Route");
  byte_256A3B7 = 9;
  word_256A3A8 = 112;
  qword_256A3A0 = *(void *)&v265[48];
  strcpy(&byte_256A3CF, "\nEnding");
  strcpy((char *)&word_256A3C0, "op");
  qword_256A3B8 = *(void *)&v269[0];
  byte_256A3E7 = 6;
  strcpy((char *)&qword_256A3E8, "_Destination");
  byte_256A3FF = 12;
  byte_256A417 = 15;
  strcpy((char *)&qword_256A400, "_At_Destination");
  std::operator+<char>();
  qword_256A430 = (uint64_t)operator new(0x20uLL);
  unk_256A438 = v281;
  strcpy((char *)qword_256A430, "Spoken_Ending_At_Parking");
  qword_256A448 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_256A450 = xmmword_20B9800;
  strcpy((char *)qword_256A448, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_256A460, "Sign_Ending_At_Parking");
  HIBYTE(word_256A476) = 22;
  byte_256A48F = 4;
  strcpy((char *)&dword_256A478, "Home");
  byte_256A4A7 = 4;
  strcpy((char *)&dword_256A490, "Work");
  byte_256A4BF = 8;
  strcpy((char *)&qword_256A4A8, "Business");
  byte_256A4D7 = 4;
  strcpy((char *)&dword_256A4C0, "Name");
  byte_256A4EF = 13;
  strcpy((char *)&qword_256A4D8, "Other_Contact");
  byte_256A507 = 11;
  strcpy((char *)&qword_256A4F0, "ContactHome");
  byte_256A51F = 11;
  *(_DWORD *)((char *)&qword_256A508 + 7) = 1802661719;
  byte_256A537 = 7;
  *(int *)((char *)&dword_256A520 + 3) = 1936942450;
  dword_256A520 = 1919181889;
  strcpy((char *)&xmmword_256A538, "Discoverability_Prompt");
  HIBYTE(word_256A54E) = 22;
  byte_256A567 = 6;
  dword_256A550 = 1634878303;
  word_256A554 = 26739;
  byte_256A57F = 8;
  qword_256A568 = 0x697269535F6F4E5FLL;
  byte_256A597 = 9;
  strcpy((char *)&qword_256A580, "_CityName");
  byte_256A5AF = 8;
  qword_256A598 = 0x636972656E65475FLL;
  int v22 = byte_256A357;
  if (byte_256A357 >= 0) {
    size_t v23 = byte_256A357;
  }
  else {
    size_t v23 = qword_256A348;
  }
  LODWORD(v272) = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v24 = byte_2569697;
  }
  else {
    size_t v24 = unk_2569688;
  }
  qword_256A508 = *(void *)"ContactWork";
  byte_256A513 = 0;
  byte_256A527 = 0;
  byte_256A556 = 0;
  byte_256A570 = 0;
  byte_256A5A0 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    uint64_t v26 = &qword_256A5B0;
    qword_256A5B8 = 0;
    unk_256A5C0 = 0;
    qword_256A5B0 = 0;
    byte_256A5C7 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  uint64_t v26 = (uint64_t *)operator new(v89 + 1);
  qword_256A5B8 = v24 + v23;
  unk_256A5C0 = v90 | 0x8000000000000000;
  qword_256A5B0 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      uint64_t v27 = &qword_256A340;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_256A340;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  uint64_t v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v272 >= 0) {
      size_t v29 = &qword_2569680;
    }
    else {
      size_t v29 = (uint64_t *)qword_2569680;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_256A3FF;
  if (byte_256A3FF >= 0) {
    size_t v31 = byte_256A3FF;
  }
  else {
    size_t v31 = qword_256A3F0;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    uint64_t v33 = &qword_256A5C8;
    qword_256A5D0 = 0;
    unk_256A5D8 = 0;
    qword_256A5C8 = 0;
    byte_256A5DF = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  uint64_t v33 = (uint64_t *)operator new(v91 + 1);
  qword_256A5D0 = v31 + v23;
  unk_256A5D8 = v92 | 0x8000000000000000;
  qword_256A5C8 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      std::string::size_type v34 = &qword_256A340;
    }
    else {
      std::string::size_type v34 = (uint64_t *)qword_256A340;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  uint64_t v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      unint64_t v36 = &qword_256A3E8;
    }
    else {
      unint64_t v36 = (uint64_t *)qword_256A3E8;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_256A5E0 = (uint64_t)operator new(0x19uLL);
  unk_256A5E8 = v282;
  strcpy((char *)qword_256A5E0, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    long long v37 = &qword_256A5F8;
    qword_256A600 = 0;
    unk_256A608 = 0;
    qword_256A5F8 = 0;
    byte_256A60F = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  long long v37 = (uint64_t *)operator new(v93 + 1);
  qword_256A600 = v31 + v23;
  unk_256A608 = v94 | 0x8000000000000000;
  qword_256A5F8 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      std::string::size_type v38 = &qword_256A340;
    }
    else {
      std::string::size_type v38 = (uint64_t *)qword_256A340;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  int v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      long long v40 = &qword_256A3E8;
    }
    else {
      long long v40 = (uint64_t *)qword_256A3E8;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_256A610, "{NewBatteryPercentage}");
  HIBYTE(word_256A626) = 22;
  qword_256A628 = (uint64_t)operator new(0x20uLL);
  xmmword_256A630 = v275;
  strcpy((char *)qword_256A628, "{OriginalBatteryPercentage}");
  byte_256A657 = 19;
  strcpy((char *)&xmmword_256A640, "_Arrival_Percentage");
  int v41 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v42 = byte_256A3E7;
  }
  else {
    size_t v42 = qword_256A3D8;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      uint64_t v45 = &qword_256A3D0;
    }
    else {
      uint64_t v45 = (uint64_t *)qword_256A3D0;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  uint64_t v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v272 >= 0) {
      std::string v47 = &qword_2569680;
    }
    else {
      std::string v47 = (uint64_t *)qword_2569680;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  std::string v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_256A668 = v48->__r_.__value_.__r.__words[2];
  xmmword_256A658 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v51 = byte_256A3E7;
  }
  else {
    size_t v51 = qword_256A3D8;
  }
  int v52 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v53 = byte_2569697;
  }
  else {
    size_t v53 = unk_2569688;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    long long v55 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  long long v55 = (char *)operator new(v97 + 1);
  v283.__r_.__value_.__l.__size_ = v53 + v51;
  v283.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      int v56 = &qword_256A3D0;
    }
    else {
      int v56 = (uint64_t *)qword_256A3D0;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      char v58 = &qword_2569680;
    }
    else {
      char v58 = (uint64_t *)qword_2569680;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_25696C7 >= 0) {
    v59 = (const std::string::value_type *)&qword_25696B0;
  }
  else {
    v59 = (const std::string::value_type *)qword_25696B0;
  }
  if (byte_25696C7 >= 0) {
    std::string::size_type v60 = byte_25696C7;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_25696B8;
  }
  std::string v61 = std::string::append(&v283, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  qword_256A680 = v63->__r_.__value_.__r.__words[2];
  xmmword_256A670 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v66 = byte_256A3E7;
  }
  else {
    size_t v66 = qword_256A3D8;
  }
  int v67 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v68 = byte_2569697;
  }
  else {
    size_t v68 = unk_2569688;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      v71 = &qword_256A3D0;
    }
    else {
      v71 = (uint64_t *)qword_256A3D0;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      v73 = &qword_2569680;
    }
    else {
      v73 = (uint64_t *)qword_2569680;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_256A698 = v74->__r_.__value_.__r.__words[2];
  xmmword_256A688 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v77 = byte_256A3E7;
  }
  else {
    size_t v77 = qword_256A3D8;
  }
  int v78 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v79 = byte_2569697;
  }
  else {
    size_t v79 = unk_2569688;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_256A6A8 = 0;
    unk_256A6B0 = 0;
    qword_256A6A0 = 0;
    v81 = &qword_256A6A0;
    byte_256A6B7 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  v81 = (uint64_t *)operator new(v101 + 1);
  qword_256A6A8 = v79 + v77;
  unk_256A6B0 = v102 | 0x8000000000000000;
  qword_256A6A0 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      v82 = &qword_256A3D0;
    }
    else {
      v82 = (uint64_t *)qword_256A3D0;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      v84 = &qword_2569680;
    }
    else {
      v84 = (uint64_t *)qword_2569680;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_256A6B7;
  if (byte_256A6B7 >= 0) {
    size_t v86 = byte_256A6B7;
  }
  else {
    size_t v86 = qword_256A6A8;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    v88 = (uint64_t *)operator new(v103 + 1);
    qword_256A6C0 = v86 + 5;
    unk_256A6C8 = v104 | 0x8000000000000000;
    qword_256A6B8 = (uint64_t)v88;
  }
  else
  {
    v88 = &qword_256A6B8;
    qword_256A6C0 = 0;
    unk_256A6C8 = 0;
    qword_256A6B8 = 0;
    byte_256A6CF = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    v105 = &qword_256A6A0;
  }
  else {
    v105 = (uint64_t *)qword_256A6A0;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v107 = byte_256A3E7;
  }
  else {
    size_t v107 = qword_256A3D8;
  }
  int v108 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v109 = byte_2569697;
  }
  else {
    size_t v109 = unk_2569688;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      v112 = &qword_256A3D0;
    }
    else {
      v112 = (uint64_t *)qword_256A3D0;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      v114 = &qword_2569680;
    }
    else {
      v114 = (uint64_t *)qword_2569680;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_256A6E0 = v115->__r_.__value_.__r.__words[2];
  xmmword_256A6D0 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_256A6E0);
  if (qword_256A6E0 >= 0) {
    size_t v118 = HIBYTE(qword_256A6E0);
  }
  else {
    size_t v118 = *((void *)&xmmword_256A6D0 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    v120 = (uint64_t *)operator new(v123 + 1);
    qword_256A6F0 = v118 + 6;
    unk_256A6F8 = v124 | 0x8000000000000000;
    qword_256A6E8 = (uint64_t)v120;
  }
  else
  {
    v120 = &qword_256A6E8;
    qword_256A6F0 = 0;
    unk_256A6F8 = 0;
    qword_256A6E8 = 0;
    byte_256A6FF = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    v125 = &xmmword_256A6D0;
  }
  else {
    v125 = (long long *)xmmword_256A6D0;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v127 = byte_256A3E7;
  }
  else {
    size_t v127 = qword_256A3D8;
  }
  int v128 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v129 = byte_2569697;
  }
  else {
    size_t v129 = unk_2569688;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_256A3D0;
    }
    else {
      v132 = (uint64_t *)qword_256A3D0;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      v134 = &qword_2569680;
    }
    else {
      v134 = (uint64_t *)qword_2569680;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_2569E5F >= 0) {
    v135 = (const std::string::value_type *)&qword_2569E48;
  }
  else {
    v135 = (const std::string::value_type *)qword_2569E48;
  }
  if (byte_2569E5F >= 0) {
    std::string::size_type v136 = byte_2569E5F;
  }
  else {
    std::string::size_type v136 = unk_2569E50;
  }
  v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_256A710 = v137->__r_.__value_.__r.__words[2];
  xmmword_256A700 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_256A3E7;
  if (byte_256A3E7 >= 0) {
    size_t v140 = byte_256A3E7;
  }
  else {
    size_t v140 = qword_256A3D8;
  }
  int v141 = byte_2569697;
  if (byte_2569697 >= 0) {
    size_t v142 = byte_2569697;
  }
  else {
    size_t v142 = unk_2569688;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v144 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  v144 = (char *)operator new(v162 + 1);
  v283.__r_.__value_.__l.__size_ = v142 + v140;
  v283.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_256A3D0;
    }
    else {
      v145 = (uint64_t *)qword_256A3D0;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      v147 = &qword_2569680;
    }
    else {
      v147 = (uint64_t *)qword_2569680;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_25696C7 >= 0) {
    v148 = (const std::string::value_type *)&qword_25696B0;
  }
  else {
    v148 = (const std::string::value_type *)qword_25696B0;
  }
  if (byte_25696C7 >= 0) {
    std::string::size_type v149 = byte_25696C7;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_25696B8;
  }
  v150 = std::string::append(&v283, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_2569E5F >= 0) {
    v152 = (const std::string::value_type *)&qword_2569E48;
  }
  else {
    v152 = (const std::string::value_type *)qword_2569E48;
  }
  if (byte_2569E5F >= 0) {
    std::string::size_type v153 = byte_2569E5F;
  }
  else {
    std::string::size_type v153 = unk_2569E50;
  }
  v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_256A728 = v154->__r_.__value_.__r.__words[2];
  xmmword_256A718 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_256A747 = 16;
  strcpy((char *)&xmmword_256A730, "Use_NACS_Adapter");
  byte_256A75F = 16;
  strcpy(byte_256A748, "Start_Route_Sign");
  qword_256A760 = (uint64_t)operator new(0x20uLL);
  unk_256A768 = v278;
  strcpy((char *)qword_256A760, "Start_Route_Spoken_Primary");
  int v156 = byte_2568DF7;
  if (byte_2568DF7 >= 0) {
    size_t v157 = byte_2568DF7;
  }
  else {
    size_t v157 = qword_2568DE8;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    v159 = &qword_256A778;
    qword_256A780 = 0;
    unk_256A788 = 0;
    qword_256A778 = 0;
    byte_256A78F = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      v166 = &qword_2568DE0;
    }
    else {
      v166 = (uint64_t *)qword_2568DE0;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  v159 = (uint64_t *)operator new(v164 + 1);
  qword_256A780 = v157 + 27;
  unk_256A788 = v165 | 0x8000000000000000;
  qword_256A778 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_256A7A7, "\t_Two_Lanes");
  strcpy((char *)&qword_256A790, "_One_Lane");
  strcpy(&byte_256A7BF, "\n_Three_Lanes");
  byte_256A7D7 = 12;
  byte_256A7EF = 11;
  strcpy((char *)&qword_256A7D8, "_Four_Lanes");
  byte_256A807 = 11;
  strcpy((char *)&qword_256A7F0, "_Five_Lanes");
  strcpy(&byte_256A81F, "\n_Seven_Lanes");
  strcpy((char *)&qword_256A808, "_Six_Lanes");
  byte_256A837 = 12;
  byte_256A84F = 12;
  strcpy((char *)&qword_256A838, "_Eight_Lanes");
  byte_256A867 = 12;
  strcpy((char *)&qword_256A850, "_Second_Lane");
  byte_256A87F = 11;
  strcpy((char *)&qword_256A868, "_Third_Lane");
  byte_256A897 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_256A880, "_Second_Third_Lanes");
  byte_256A8AF = 4;
  strcpy((char *)&dword_256A898, "Left");
  byte_256A8C7 = 5;
  byte_256A8B4 = 116;
  dword_256A8B0 = 1751607634;
  byte_256A8B5 = 0;
  byte_256A8DF = 6;
  strcpy((char *)&dword_256A8C8, "Middle");
  BYTE1(qword_256A8F0) = 0;
  WORD1(qword_256A8F0) = 0;
  HIDWORD(qword_256A8F0) = 0x10000000;
  strcpy((char *)dword_256A8E0, "Left_Second_Lane");
  BYTE1(qword_256A908) = 0;
  WORD1(qword_256A908) = 0;
  HIDWORD(qword_256A908) = 285212672;
  strcpy((char *)&dword_256A8F8, "Right_Second_Lan");
  qword_256A920 = 0xF00000000000000;
  strcpy((char *)&dword_256A910, "Left_Third_Lane");
  qword_256A938 = 0x1000000000000000;
  byte_256A92C = 116;
  dword_256A928 = 1751607634;
  dword_256A934 = 1701732684;
  unk_256A92D = *(void *)"_Third_Lane";
  v167 = (char *)operator new(0x19uLL);
  qword_256A940 = (uint64_t)v167;
  unk_256A948 = v282;
  *(_DWORD *)v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v272;
  v168 = (char *)operator new(0x20uLL);
  qword_256A958 = (uint64_t)v168;
  xmmword_256A960 = v281;
  *(_DWORD *)v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v272;
  byte_256A987 = 5;
  strcpy((char *)&dword_256A970, "_Stay");
  byte_256A99F = 13;
  strcpy((char *)&qword_256A988, "Continue_Sign");
  byte_256A9B7 = 8;
  strcpy((char *)&qword_256A9A0, "Continue");
  int v169 = byte_2569E77;
  if (byte_2569E77 >= 0) {
    size_t v170 = byte_2569E77;
  }
  else {
    size_t v170 = qword_2569E68;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    v175 = operator new(v173 + 1);
    qword_256A9C0 = v170 + 8;
    qword_256A9C8 = v174 | 0x8000000000000000;
    qword_256A9B8 = (uint64_t)v175;
    void *v175 = 0x65756E69746E6F43;
    v172 = v175 + 1;
  }
  else
  {
    qword_256A9C8 = 0;
    HIBYTE(qword_256A9C8) = v170 + 8;
    qword_256A9B8 = 0x65756E69746E6F43;
    qword_256A9C0 = 0;
    v172 = &qword_256A9C0;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    v176 = &qword_2569E60;
  }
  else {
    v176 = (uint64_t *)qword_2569E60;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_2569ED0);
  if (qword_2569ED0 >= 0) {
    size_t v178 = HIBYTE(qword_2569ED0);
  }
  else {
    size_t v178 = unk_2569EC8;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    v183 = operator new(v181 + 1);
    qword_256A9D8 = v178 + 8;
    qword_256A9E0 = v182 | 0x8000000000000000;
    qword_256A9D0 = (uint64_t)v183;
    void *v183 = qword_256A9A0;
    v180 = v183 + 1;
  }
  else
  {
    qword_256A9E0 = 0;
    HIBYTE(qword_256A9E0) = v178 + 8;
    qword_256A9D0 = qword_256A9A0;
    qword_256A9D8 = 0;
    v180 = &qword_256A9D8;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    v184 = &qword_2569EC0;
  }
  else {
    v184 = (uint64_t *)qword_2569EC0;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_256A9E8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_256AA17 = 13;
  strcpy((char *)&qword_256AA00, "{instruction}");
  byte_256AA2F = 20;
  strcpy(byte_256AA18, "{primaryInstruction}");
  strcpy((char *)&xmmword_256AA30, "{secondaryInstruction}");
  HIBYTE(word_256AA46) = 22;
  qword_256AA48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256AA50 = v280;
  strcpy((char *)qword_256AA48, "{andSecondaryInstruction}");
  qword_256AA60 = (uint64_t)operator new(0x20uLL);
  unk_256AA68 = v281;
  strcpy((char *)qword_256AA60, "{toSecondaryInstruction}");
  byte_256AA8F = 21;
  strcpy(byte_256AA78, "{continueInstruction}");
  qword_256AA90 = (uint64_t)operator new(0x20uLL);
  unk_256AA98 = v278;
  strcpy((char *)qword_256AA90, "{thenSecondaryInstruction}");
  byte_256AABF = 14;
  strcpy((char *)&qword_256AAA8, "{instruction1}");
  byte_256AAD7 = 14;
  strcpy((char *)&qword_256AAC0, "{instruction2}");
  strcpy(&byte_256AAEF, "\n{nextDistance}");
  strcpy((char *)&qword_256AAD8, "{distance}");
  byte_256AB07 = 14;
  byte_256AB1F = 16;
  strcpy(byte_256AB08, "{valid_distance}");
  strcpy(&byte_256AB37, "\n{valid_distance}");
  strcpy((char *)&qword_256AB20, "{distance}");
  byte_256AB4F = 16;
  byte_256AB67 = 15;
  strcpy((char *)&qword_256AB50, "{ClimbDistance}");
  byte_256AB7F = 17;
  strcpy(byte_256AB68, "{DescentDistance}");
  byte_256AB97 = 13;
  strcpy((char *)&qword_256AB80, "{nonBrkSpace}");
  byte_256ABAF = 9;
  strcpy((char *)&qword_256AB98, "{newLine}");
  byte_256ABC7 = 6;
  word_256ABB4 = -24382;
  dword_256ABB0 = -1211981630;
  byte_256ABB6 = 0;
  byte_256ABDF = 2;
  word_256ABC8 = -24382;
  byte_256ABCA = 0;
  byte_256ABF7 = 1;
  word_256ABE0 = 10;
  byte_256AC0F = 1;
  word_256ABF8 = 32;
  byte_256AC27 = 2;
  strcpy((char *)&word_256AC10, "\n\n");
  strcpy(&byte_256AC3F, "\t{TowardShield1}");
  strcpy((char *)&qword_256AC28, "{Shield1}");
  byte_256AC57 = 15;
  strcpy(&byte_256AC6F, "\t{TowardShield2}");
  strcpy((char *)&qword_256AC58, "{Shield2}");
  byte_256AC87 = 15;
  byte_256AC9F = 12;
  strcpy((char *)&qword_256AC88, "{Direction1}");
  byte_256ACB7 = 12;
  strcpy((char *)&qword_256ACA0, "{Direction2}");
  byte_256ACCF = 18;
  strcpy(byte_256ACB8, "{TowardDirection1}");
  byte_256ACE7 = 18;
  strcpy((char *)&xmmword_256ACD0, "{TowardDirection2}");
  byte_256ACFF = 7;
  strcpy((char *)&dword_256ACE8, "{Icon1}");
  byte_256AD17 = 7;
  strcpy((char *)&dword_256AD00, "{Icon2}");
  byte_256AD18[23] = 14;
  strcpy(byte_256AD18, "{Intersection}");
  byte_256AD47 = 6;
  strcpy((char *)&xmmword_256AD30, "{Road}");
  byte_256AD5F = 7;
  strcpy((char *)&dword_256AD48, "{Road1}");
  byte_256AD77 = 7;
  strcpy((char *)&xmmword_256AD60, "{Road2}");
  strcpy(&byte_256AD8F, "\n{Freeway}");
  strcpy((char *)&xmmword_256AD78, "{Elevator}");
  strcpy(&byte_256ADA7, "\t{Ferry}");
  byte_256ADBF = 7;
  byte_256ADD7 = 13;
  strcpy((char *)&xmmword_256ADC0, "{ShuttleName}");
  byte_256ADEF = 11;
  strcpy((char *)&xmmword_256ADD8, "{Signpost1}");
  byte_256AE07 = 11;
  strcpy((char *)&xmmword_256ADF0, "{Signpost2}");
  byte_256AE1F = 12;
  strcpy((char *)&xmmword_256AE08, "{ExitNumber}");
  strcpy(&byte_256AE37, "\t{Name}");
  strcpy((char *)&xmmword_256AE20, "{Address}");
  byte_256AE4F = 6;
  byte_256AE67 = 11;
  strcpy((char *)&xmmword_256AE50, "{PlaceName}");
  byte_256AE7F = 14;
  strcpy((char *)&xmmword_256AE68, "{ElevatorName}");
  byte_256AE97 = 15;
  strcpy((char *)&xmmword_256AE80, "{EscalatorName}");
  byte_256AEAF = 12;
  strcpy((char *)&xmmword_256AE98, "{StairsName}");
  strcpy(&byte_256AEC7, "\n{BridgeName}");
  strcpy((char *)&xmmword_256AEB0, "{RampName}");
  byte_256AEDF = 12;
  byte_256AEF7 = 12;
  strcpy((char *)&xmmword_256AEE0, "{TunnelName}");
  byte_256AF0F = 13;
  strcpy((char *)&xmmword_256AEF8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_256AD18;
  *(_OWORD *)v285 = xmmword_256AD30;
  *(void *)&v285[16] = unk_256AD40;
  *(_OWORD *)v286 = *(_OWORD *)&dword_256AD48;
  *(void *)v287 = unk_256AD58;
  *(_OWORD *)&v287[8] = xmmword_256AD60;
  uint64_t v288 = unk_256AD70;
  *(_OWORD *)__p = xmmword_256AD78;
  uint64_t v290 = unk_256AD88;
  uint64_t v292 = unk_256ADA0;
  long long v291 = xmmword_256AD90;
  long long v293 = xmmword_256ADA8;
  uint64_t v294 = unk_256ADB8;
  uint64_t v296 = unk_256ADD0;
  long long v295 = xmmword_256ADC0;
  long long v297 = xmmword_256ADD8;
  uint64_t v298 = unk_256ADE8;
  uint64_t v300 = unk_256AE00;
  long long v299 = xmmword_256ADF0;
  long long v301 = xmmword_256AE08;
  long long v303 = xmmword_256AE20;
  uint64_t v302 = unk_256AE18;
  uint64_t v304 = unk_256AE30;
  long long v305 = xmmword_256AE38;
  long long v307 = xmmword_256AE50;
  uint64_t v306 = unk_256AE48;
  uint64_t v308 = unk_256AE60;
  long long v309 = xmmword_256AE68;
  long long v311 = xmmword_256AE80;
  uint64_t v310 = unk_256AE78;
  uint64_t v312 = unk_256AE90;
  long long v313 = xmmword_256AE98;
  long long v315 = xmmword_256AEB0;
  uint64_t v314 = unk_256AEA8;
  uint64_t v316 = unk_256AEC0;
  long long v317 = xmmword_256AEC8;
  long long v319 = xmmword_256AEE0;
  uint64_t v318 = unk_256AED8;
  uint64_t v320 = unk_256AEF0;
  uint64_t v322 = unk_256AF08;
  long long v321 = xmmword_256AEF8;
  sub_4BDC0C(qword_256AF10, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_256AF28 = (uint64_t)operator new(0x19uLL);
  unk_256AF30 = v282;
  strcpy((char *)qword_256AF28, "From_User_Location_List");
  byte_256AF57 = 20;
  strcpy(byte_256AF40, "Origin_Waypoint_List");
  qword_256AF58 = (uint64_t)operator new(0x20uLL);
  unk_256AF60 = v278;
  strcpy((char *)qword_256AF58, "Intermediate_Waypoint_List");
  unk_256AF70 = operator new(0x20uLL);
  unk_256AF78 = v280;
  strcpy(unk_256AF70, "Destination_Waypoint_List");
  byte_256AF9F = 15;
  strcpy(byte_256AF88, "{toDestination}");
  byte_256AFB7 = 13;
  strcpy((char *)&xmmword_256AFA0, "{Destination}");
  byte_256AFCF = 7;
  strcpy(byte_256AFB8, "To_Home");
  byte_256AFE7 = 14;
  strcpy(byte_256AFD0, "To_ContactHome");
  byte_256AFFF = 7;
  strcpy(byte_256AFE8, "To_Work");
  byte_256B017 = 14;
  strcpy(byte_256B000, "To_ContactWork");
  strcpy(&byte_256B02F, "\nTo_Business");
  strcpy(byte_256B018, "To_Address");
  byte_256B047 = 11;
  byte_256B05F = 16;
  strcpy(byte_256B048, "To_Other_Contact");
  strcpy(&byte_256B077, "\tTo_ContactSchool");
  strcpy(byte_256B060, "To_School");
  byte_256B08F = 16;
  byte_256B0A7 = 17;
  strcpy(algn_256B090, "To_PersonLocation");
  qword_256B0A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256B0B0 = v279;
  strcpy((char *)qword_256B0A8, "To_ContactCustomLabelAddress");
  byte_256B0D7 = 7;
  strcpy((char *)&dword_256B0C0, "At_Home");
  byte_256B0EF = 14;
  strcpy((char *)&qword_256B0D8, "At_ContactHome");
  byte_256B107 = 7;
  strcpy((char *)&dword_256B0F0, "At_Work");
  byte_256B11F = 14;
  strcpy((char *)&qword_256B108, "At_ContactWork");
  strcpy(&byte_256B137, "\nAt_Business");
  strcpy((char *)&qword_256B120, "At_Address");
  byte_256B14F = 11;
  byte_256B167 = 16;
  strcpy(algn_256B150, "At_Other_Contact");
  byte_256B17F = 4;
  strcpy((char *)&dword_256B168, "Home");
  byte_256B197 = 11;
  strcpy((char *)&qword_256B180 + 7, "Home");
  qword_256B180 = *(void *)&v265[16];
  byte_256B1AF = 4;
  strcpy((char *)&dword_256B198, "Work");
  byte_256B1C7 = 11;
  strcpy((char *)&qword_256B1B0 + 7, "Work");
  qword_256B1B0 = *(void *)v265;
  byte_256B1DF = 7;
  strcpy((char *)&dword_256B1C8, "Address");
  byte_256B1F7 = 8;
  strcpy((char *)&qword_256B1E0, "Business");
  byte_256B20F = 13;
  qword_256B1F8 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_256B1F8 + 5) = *(void *)&v265[32];
  byte_256B205 = 0;
  byte_256B227 = 6;
  strcpy((char *)&dword_256B210, "School");
  byte_256B23F = 13;
  strcpy((char *)&qword_256B228, "ContactSchool");
  byte_256B257 = 14;
  strcpy((char *)&qword_256B240, "PersonLocation");
  qword_256B258 = (uint64_t)operator new(0x20uLL);
  xmmword_256B260 = v280;
  strcpy((char *)qword_256B258, "ContactCustomLabelAddress");
  if (byte_256AFB7 < 0)
  {
    sub_4200(&xmmword_256B270, (void *)xmmword_256AFA0, *((unint64_t *)&xmmword_256AFA0 + 1));
  }
  else
  {
    xmmword_256B270 = xmmword_256AFA0;
    qword_256B280 = unk_256AFB0;
  }
  byte_256B29F = 16;
  strcpy((char *)&xmmword_256B288, "{PrevExitNumber}");
  byte_256B2B7 = 10;
  strcpy((char *)&qword_256B2A0, "{PrevRoad}");
  qword_256B2B8 = (uint64_t)operator new(0x20uLL);
  unk_256B2C0 = v281;
  strcpy((char *)qword_256B2B8, "{RouteTotalExpectedTime}");
  byte_256B2E7 = 18;
  strcpy(byte_256B2D0, "{ChargePercentage}");
  qword_256B2E8 = (uint64_t)operator new(0x20uLL);
  unk_256B2F0 = v275;
  strcpy((char *)qword_256B2E8, "{RemainingChargePercentage}");
  byte_256B317 = 16;
  strcpy(byte_256B300, "{ChargeDuration}");
  byte_256B32F = 15;
  strcpy((char *)&qword_256B318, "{ConnectorType}");
  byte_256B347 = 19;
  strcpy(byte_256B330, "{ChargeStationName}");
  byte_256B35F = 7;
  strcpy((char *)&dword_256B348, "{Power}");
  byte_256B377 = 13;
  strcpy((char *)&qword_256B360, "{VehicleName}");
  byte_256B38F = 18;
  strcpy((char *)&xmmword_256B378, "{AreaIncidentName}");
  byte_256B3A7 = 14;
  strcpy((char *)&qword_256B390, "{AreaIncident}");
  byte_256B3BF = 16;
  strcpy((char *)&xmmword_256B3A8, "{AffectedRegion}");
  byte_256B3D7 = 21;
  strcpy(byte_256B3C0, "{AreaIncidentWeblink}");
  byte_256B3EF = 20;
  strcpy((char *)&xmmword_256B3D8, "{AreaIncidentAgency}");
  byte_256B407 = 11;
  strcpy((char *)&qword_256B3F0, "{IssueTime}");
  byte_256B41F = 12;
  strcpy((char *)&qword_256B408, "{UpdateTime}");
  byte_256B437 = 11;
  strcpy((char *)&qword_256B420, "{IssueDate}");
  byte_256B44F = 12;
  strcpy((char *)&qword_256B438, "{UpdateDate}");
  qword_256B450 = (uint64_t)operator new(0x20uLL);
  unk_256B458 = v281;
  strcpy((char *)qword_256B450, "{AreaIncidentDataSource}");
  byte_256B47F = 13;
  strcpy((char *)&qword_256B468, "{AreaHectare}");
  byte_256B497 = 10;
  strcpy((char *)&qword_256B480, "{AreaAcre}");
  qword_256B498 = (uint64_t)operator new(0x20uLL);
  unk_256B4A0 = v277;
  strcpy((char *)qword_256B498, "{WildfirePercentageContained}");
  qword_256B4B0 = (uint64_t)operator new(0x28uLL);
  unk_256B4B8 = v269[1];
  strcpy((char *)qword_256B4B0, "{WildfireExpectedContainmentDate}");
  qword_256B4C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256B4D0 = v279;
  strcpy((char *)qword_256B4C8, "{ServerRecommendedRouteName}");
  qword_256B4E0 = (uint64_t)operator new(0x20uLL);
  unk_256B4E8 = v279;
  strcpy((char *)qword_256B4E0, "{ServerNonRecommendedRoute1}");
  qword_256B4F8 = (uint64_t)operator new(0x20uLL);
  unk_256B500 = v279;
  strcpy((char *)qword_256B4F8, "{ServerNonRecommendedRoute2}");
  byte_256B527 = 12;
  strcpy((char *)&qword_256B510, "{ClientDest}");
  byte_256B53F = 6;
  strcpy((char *)&dword_256B528, "{Name}");
  qword_256B540 = (uint64_t)operator new(0x20uLL);
  unk_256B548 = v271;
  strcpy((char *)qword_256B540, "ProactiveAlert_FasterRouteTitle");
  qword_256B558 = (uint64_t)operator new(0x20uLL);
  unk_256B560 = v278;
  strcpy((char *)qword_256B558, "ProactiveAlert_RoadClosure");
  qword_256B570 = (uint64_t)operator new(0x30uLL);
  unk_256B578 = v273;
  strcpy((char *)qword_256B570, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_256B588 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256B590 = v276;
  strcpy((char *)qword_256B588, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_256B5A0 = (uint64_t)operator new(0x28uLL);
  unk_256B5A8 = v276;
  strcpy((char *)qword_256B5A0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_256B5B8 = (uint64_t)operator new(0x28uLL);
  unk_256B5C0 = v276;
  strcpy((char *)qword_256B5B8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_256B5D0 = (uint64_t)operator new(0x30uLL);
  unk_256B5D8 = xmmword_20B93B0;
  strcpy((char *)qword_256B5D0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_256B5FF = 17;
  strcpy(byte_256B5E8, "Proactive_Driving");
  strcpy(&byte_256B617, "\n{RouteName}");
  strcpy((char *)&qword_256B600, "_RouteName");
  byte_256B62F = 11;
  qword_256B630 = (uint64_t)operator new(0x28uLL);
  unk_256B638 = v269[1];
  strcpy((char *)qword_256B630, "Pass_Traffic_Light_Spoken_Primary");
  qword_256B648 = (uint64_t)operator new(0x20uLL);
  unk_256B650 = v277;
  strcpy((char *)qword_256B648, "Pass_Stop_Sign_Spoken_Primary");
  unk_256B660 = operator new(0x20uLL);
  unk_256B668 = v269[0];
  strcpy(unk_256B660, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_256B68F, "\nBannerBody");
  strcpy((char *)&qword_256B678, "BannerHead");
  strcpy(&byte_256B6A7, "\nBannerDescription");
  byte_256B6BF = 17;
  strcpy(&byte_256B6D7, "\n_Incident");
  strcpy((char *)&qword_256B6C0, "VoiceAlert");
  strcpy(&byte_256B6EF, "\t_Area_Incident");
  byte_256B707 = 14;
  byte_256B71F = 15;
  strcpy((char *)&qword_256B708, "_Area_Incidents");
  strcpy(&byte_256B737, "\t_Crash");
  strcpy((char *)&qword_256B720, "_Accident");
  byte_256B74F = 6;
  byte_256B767 = 16;
  strcpy((char *)&xmmword_256B750, "_Congestion_Zone");
  strcpy(&byte_256B77F, "\n_Environmental_Zone");
  strcpy((char *)&qword_256B768, "_Toll_Zone");
  byte_256B797 = 19;
  byte_256B7A9 = 116;
  unk_256B7AA = 0;
  unk_256B7AC = 301989888;
  strcpy((char *)&xmmword_256B7B0, "_Construction");
  strcpy((char *)&qword_256B798, "_Incident_Accide");
  byte_256B7C7 = 13;
  byte_256B7DF = 7;
  strcpy((char *)&xmmword_256B7C8, "_Hazard");
  byte_256B7F7 = 12;
  strcpy((char *)&xmmword_256B7E0, "_LaneClosure");
  byte_256B80F = 12;
  strcpy((char *)&qword_256B7F8, "_LaneTrailer");
  qmemcpy(&byte_256B827, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_256B810, "_Shoulder");
  unk_256B838 = 0x1500007200000000;
  *(uint64_t *)((char *)&qword_256B830 + 4) = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_256B840, "_Causing_Traffic_Delay");
  byte_256B857 = 22;
  byte_256B86F = 6;
  strcpy((char *)&qword_256B858, "_Timed");
  byte_256B887 = 12;
  strcpy((char *)&qword_256B870, "_HasDistance");
  byte_256B89F = 8;
  strcpy((char *)&qword_256B888, "_Closure");
  strcpy(&byte_256B8B7, "\n_BadRoad");
  strcpy((char *)&qword_256B8A0, "_NoReroute");
  byte_256B8CF = 8;
  byte_256B8E7 = 12;
  strcpy((char *)&qword_256B8D0, "_TollTrailer");
  byte_256B8FF = 12;
  strcpy((char *)&qword_256B8E8, "_BestTrailer");
  byte_256B917 = 8;
  strcpy((char *)&qword_256B900, "_Trailer");
  byte_256B92F = 18;
  strcpy((char *)&xmmword_256B918, "_Secondary_Trailer");
  byte_256B947 = 8;
  strcpy((char *)&qword_256B930, "_Savings");
  byte_256B95F = 8;
  strcpy((char *)&qword_256B948, "_AltRoad");
  byte_256B977 = 6;
  strcpy((char *)&dword_256B960, "_Named");
  byte_256B98F = 6;
  strcpy((char *)&dword_256B978, "_NAMED");
  byte_256B9A7 = 22;
  strcpy((char *)&xmmword_256B990, "_Named_Suggested_Route");
  unk_256B9C0 = 0x1000000000000000;
  xmmword_256B9B0 = xmmword_20E81D0;
  byte_256B9DF = 11;
  strcpy((char *)&xmmword_256B9C8, "_Speed_Trap");
  byte_256B9F7 = 4;
  strcpy((char *)&xmmword_256B9E0, "_UGI");
  byte_256BA0F = 12;
  strcpy((char *)&qword_256B9F8, "_Safer_Route");
  qword_256BA10 = (uint64_t)operator new(0x20uLL);
  unk_256BA18 = v271;
  strcpy((char *)qword_256BA10, "BlockedRouteByBlockingIncident_");
  qword_256BA28 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  *(_OWORD *)algn_256BA30 = xmmword_20B9280;
  strcpy((char *)qword_256BA28, "BlockedRouteByManeuverRestriction_");
  qword_256BA40 = (uint64_t)operator new(0x20uLL);
  unk_256BA48 = v269[0];
  strcpy((char *)qword_256BA40, "BlockedRouteByTimeRestriction_");
  qword_256BA58 = (uint64_t)operator new(0x28uLL);
  unk_256BA60 = xmmword_20B8FD0;
  strcpy((char *)qword_256BA58, "SuggestRouteToAvoidBlockingIncident_");
  qword_256BA70 = (uint64_t)operator new(0x30uLL);
  unk_256BA78 = xmmword_20B9380;
  strcpy((char *)qword_256BA70, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_256BA88 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_256BA90 = xmmword_20B93E0;
  strcpy((char *)qword_256BA88, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_256BAB7 = 1;
  word_256BAA0 = 95;
  strcpy((char *)&xmmword_256BAB8, "IncidentsCausingDelay_");
  HIBYTE(word_256BACE) = 22;
  qword_256BAD0 = (uint64_t)operator new(0x19uLL);
  unk_256BAD8 = v282;
  strcpy((char *)qword_256BAD0, "NonVotableRoadIncident_");
  byte_256BAFF = 20;
  strcpy(byte_256BAE8, "VotableRoadIncident_");
  byte_256BB17 = 13;
  strcpy((char *)&qword_256BB00, "AreaIncident_");
  byte_256BB2F = 15;
  strcpy((char *)&qword_256BB18, "CongestionZone_");
  qword_256BB30 = (uint64_t)operator new(0x20uLL);
  unk_256BB38 = v281;
  strcpy((char *)qword_256BB30, "EVModifiedChargingStops_");
  byte_256BB5F = 13;
  strcpy((char *)&qword_256BB48, "EVDisconnect_");
  byte_256BB77 = 12;
  strcpy((char *)&qword_256BB60, "EVReconnect_");
  qword_256BB78 = (uint64_t)operator new(0x20uLL);
  unk_256BB80 = v279;
  strcpy((char *)qword_256BB78, "EVOfflineToOnlineTransition_");
  byte_256BBA7 = 13;
  strcpy((char *)&qword_256BB90, "EVOfflineSAR_");
  byte_256BBBF = 21;
  strcpy((char *)&xmmword_256BBA8, "EVTowingNotSupported_");
  byte_256BBD7 = 18;
  strcpy(byte_256BBC0, "EVInfeasibleRoute_");
  qword_256BBD8 = (uint64_t)operator new(0x38uLL);
  unk_256BBE0 = xmmword_20B8DF0;
  strcpy((char *)qword_256BBD8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_256BBF0 = (uint64_t)operator new(0x40uLL);
  unk_256BBF8 = xmmword_20B98C0;
  strcpy((char *)qword_256BBF0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_256BC08 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_256BC10 = v274;
  strcpy((char *)qword_256BC08, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_256BC20 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_256BC28 = xmmword_20B9A80;
  strcpy((char *)qword_256BC20, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_256BC38 = (uint64_t)operator new(0x30uLL);
  unk_256BC40 = v273;
  strcpy((char *)qword_256BC38, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v185 = operator new(0x30uLL);
  qword_256BC50 = (uint64_t)v185;
  unk_256BC58 = v274;
  _OWORD *v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v269[1];
  *(_OWORD *)((char *)v185 + 28) = v269[0];
  *((unsigned char *)v185 + 44) = 0;
  qword_256BC68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256BC70 = v272;
  strcpy((char *)qword_256BC68, "SuggestDetourWithHigherArrivalSOC_");
  v186 = operator new(0x30uLL);
  qword_256BC80 = (uint64_t)v186;
  unk_256BC88 = *(_OWORD *)&v265[48];
  _OWORD *v186 = *(_OWORD *)&v265[32];
  v186[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v186 + 46) = 0;
  qword_256BC98 = (uint64_t)operator new(0x28uLL);
  unk_256BCA0 = v276;
  strcpy((char *)qword_256BC98, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_256BCB0 = (uint64_t)operator new(0x28uLL);
  unk_256BCB8 = v268;
  strcpy((char *)qword_256BCB0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_256BCC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256BCD0 = v281;
  strcpy((char *)qword_256BCC8, "OfflineToOnlineNewRoute_");
  qword_256BCE0 = (uint64_t)operator new(0x40uLL);
  unk_256BCE8 = xmmword_20B98C0;
  strcpy((char *)qword_256BCE0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_256BD0F = 20;
  strcpy(byte_256BCF8, "LPR_OFFLINE_REROUTE_");
  byte_256BD27 = 16;
  strcpy((char *)&xmmword_256BD10, "LPR_OFFLINE_SAR_");
  byte_256BD3F = 20;
  strcpy(byte_256BD28, "LPR_OFFLINE_REROUTE_");
  byte_256BD57 = 16;
  strcpy((char *)&xmmword_256BD40, "LPR_OFFLINE_SAR_");
  byte_256BD6F = 19;
  strcpy(byte_256BD58, "SuggestFasterRoute_");
  qword_256BD70 = (char *)operator new(0x20uLL);
  xmmword_256BD78 = v280;
  strcpy(qword_256BD70, "AreaIncidentSaferReroute_");
  byte_256BD9F = 12;
  strcpy((char *)&qword_256BD88, "_Remove_Stop");
  byte_256BDB7 = 13;
  strcpy((char *)&qword_256BDA0, "_Remove_Stops");
  strcpy(&byte_256BDCF, "\t_Add_Stops");
  strcpy((char *)&qword_256BDB8, "_Add_Stop");
  strcpy(&byte_256BDE7, "\n_Change_Route");
  byte_256BDFF = 13;
  byte_256BE17 = 15;
  strcpy((char *)&qword_256BE00, "_Different_Stop");
  byte_256BE2F = 16;
  strcpy((char *)&xmmword_256BE18, "_Different_Stops");
  byte_256BE47 = 15;
  strcpy((char *)&qword_256BE30, "_EV_Remove_Stop");
  byte_256BE5F = 16;
  strcpy((char *)&xmmword_256BE48, "_EV_Remove_Stops");
  byte_256BE77 = 12;
  strcpy((char *)&qword_256BE60, "_EV_Add_Stop");
  byte_256BE8F = 13;
  strcpy((char *)&qword_256BE78, "_EV_Add_Stops");
  byte_256BEA7 = 15;
  strcpy((char *)&qword_256BE90, "_EV_Low_Battery");
  byte_256BEBF = 14;
  strcpy((char *)&qword_256BEA8, "_EV_Infeasible");
  byte_256BED7 = 15;
  strcpy((char *)&qword_256BEC0, "_EV_Last_Chance");
  qword_256BED8 = (uint64_t)operator new(0x20uLL);
  unk_256BEE0 = v281;
  strcpy((char *)qword_256BED8, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_256BDD8;
  qword_256BEF0 = (uint64_t)operator new(0x20uLL);
  unk_256BEF8 = v280;
  strcpy((char *)qword_256BEF0, "_EV_Low_Battery_Add_Stops");
  qword_256BF08 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_256BF10 = v282;
  strcpy((char *)qword_256BF08, "_EV_Infeasible_Add_Stop");
  int v188 = byte_256BDE7;
  if (byte_256BDE7 >= 0) {
    size_t v189 = byte_256BDE7;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    v195 = (char *)operator new(v193 + 1);
    qword_256BF28 = v189 + 14;
    unk_256BF30 = v194 | 0x8000000000000000;
    qword_256BF20 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_256BF28) = 0;
    WORD1(qword_256BF28) = 0;
    HIDWORD(qword_256BF28) = 0;
    unk_256BF30 = 0;
    byte_256BF37 = v189 + 14;
    strcpy((char *)&qword_256BF20, "_EV_Infe");
    v191 = (char *)&qword_256BF28 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_256BDD0;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  v197 = (char *)operator new(0x20uLL);
  qword_256BF38 = (uint64_t)v197;
  unk_256BF40 = v281;
  *(void *)v197 = qword_256BEC0;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_256BEC0 + 7);
  *(void *)(v197 + 15) = qword_256BDB8;
  v197[23] = word_256BDC0;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    v199 = (uint64_t *)operator new(v200 + 1);
    qword_256BF58 = v189 + 15;
    unk_256BF60 = v201 | 0x8000000000000000;
    qword_256BF50 = (uint64_t)v199;
  }
  else
  {
    v199 = &qword_256BF50;
    qword_256BF58 = 0;
    unk_256BF60 = 0;
    qword_256BF50 = 0;
    byte_256BF67 = v189 + 15;
  }
  uint64_t *v199 = qword_256BEC0;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_256BEC0 + 7);
  v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      v203 = &qword_256BDD0;
    }
    else {
      v203 = (uint64_t *)qword_256BDD0;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_256BF7F = 17;
  strcpy((char *)&xmmword_256BF68, "_EV_Forced_Detour");
  *(void *)&xmmword_256BF80 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256BF80 + 8) = v280;
  strcpy((char *)xmmword_256BF80, "_EV_Higher_Arrival_Charge");
  qword_256BF98 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)&qword_256BFA0 = xmmword_20B8FD0;
  strcpy((char *)qword_256BF98, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_256BFC7 = 16;
  strcpy((char *)&qword_256BFB0, "_EV_Out_Of_Range");
  qword_256BFC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256BFD0 = v275;
  strcpy((char *)qword_256BFC8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_256BFE0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_256BFF6) = 22;
  qword_256BFF8 = (uint64_t)operator new(0x19uLL);
  unk_256C000 = v282;
  strcpy((char *)qword_256BFF8, "_EV_Forced_Modify_Stops");
  byte_256C027 = 19;
  strcpy(byte_256C010, "_EV_Forced_Add_Stop");
  byte_256C03F = 20;
  strcpy((char *)&xmmword_256C028, "_EV_Forced_Add_Stops");
  byte_256C057 = 21;
  strcpy((char *)&qword_256C040, "_EV_Battery_Info_Lost");
  qword_256C058 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_256C060 = v280;
  strcpy((char *)qword_256C058, "_EV_Battery_Info_Restored");
  qword_256C070 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_256C078 = v281;
  strcpy((char *)qword_256C070, "_EV_Towing_Not_Supported");
  qword_256C088 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)&qword_256C090 = v270;
  strcpy((char *)qword_256C088, "_EV_Offline_to_Online_Transition");
  byte_256C0B7 = 15;
  strcpy((char *)&qword_256C0A0, "_EV_Offline_SAR");
  qword_256C0B8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_256C0C0 = v279;
  strcpy((char *)qword_256C0B8, "_Offline_to_Online_New_Route");
  byte_256C0E7 = 12;
  strcpy((char *)&qword_256C0D0, "BannerButton");
  byte_256C0FF = 8;
  strcpy((char *)&qword_256C0E8, "_Dismiss");
  byte_256C117 = 3;
  word_256C100 = 20319;
  byte_256C102 = 75;
  byte_256C103 = 0;
  byte_256C12F = 11;
  strcpy((char *)&qword_256C118, "_Still_Here");
  byte_256C147 = 8;
  strcpy((char *)&qword_256C130, "_Cleared");
  qmemcpy(&byte_256C15F, "\nBannerButton", 13);
  strcpy((char *)&qword_256C148, "_No_Thanks");
  uint64_t v204 = qword_256C0D8;
  qword_256C170 = 0x1400000000000000;
  *(void *)algn_256C16C = 0x7373696D7369445FLL;
  qword_256C188 = 0xF00000000000000;
  qword_256C180 = 0x4B4F5F6E6F7474;
  int v205 = byte_256BE77;
  if (byte_256BE77 >= 0) {
    size_t v206 = byte_256BE77;
  }
  else {
    size_t v206 = qword_256BE68;
  }
  unint64_t v207 = v206 + 12;
  qword_256C178 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    v211 = (char *)operator new(v209 + 1);
    qword_256C198 = v206 + 12;
    unk_256C1A0 = v210 | 0x8000000000000000;
    qword_256C190 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)v211 = *(void *)"BannerButton";
    v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_256C198) = 0;
    HIWORD(qword_256C198) = 0;
    unk_256C1A0 = 0;
    byte_256C1A7 = v206 + 12;
    strcpy((char *)&qword_256C190, "BannerButton");
    v208 = (char *)&qword_256C198 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    v212 = &qword_256BE60;
  }
  else {
    v212 = (uint64_t *)qword_256BE60;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_256BE8F;
  if (byte_256BE8F >= 0) {
    size_t v214 = byte_256BE8F;
  }
  else {
    size_t v214 = unk_256BE80;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    v219 = (char *)operator new(v217 + 1);
    qword_256C1B0 = v214 + 12;
    unk_256C1B8 = v218 | 0x8000000000000000;
    qword_256C1A8 = (uint64_t)v219;
    *(void *)v219 = qword_256C0D0;
    *((_DWORD *)v219 + 2) = qword_256C0D8;
    v216 = v219 + 12;
  }
  else
  {
    qword_256C1B0 = 0;
    unk_256C1B8 = 0;
    byte_256C1BF = v214 + 12;
    LODWORD(qword_256C1B0) = qword_256C0D8;
    qword_256C1A8 = qword_256C0D0;
    v216 = (char *)&qword_256C1B0 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    v220 = &qword_256BE78;
  }
  else {
    v220 = (uint64_t *)qword_256BE78;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_256BE47;
  if (byte_256BE47 >= 0) {
    size_t v222 = byte_256BE47;
  }
  else {
    size_t v222 = unk_256BE38;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    v227 = (char *)operator new(v225 + 1);
    qword_256C1C8 = v222 + 12;
    unk_256C1D0 = v226 | 0x8000000000000000;
    qword_256C1C0 = (uint64_t)v227;
    *(void *)v227 = qword_256C0D0;
    *((_DWORD *)v227 + 2) = qword_256C0D8;
    v224 = v227 + 12;
  }
  else
  {
    qword_256C1C8 = 0;
    unk_256C1D0 = 0;
    byte_256C1D7 = v222 + 12;
    LODWORD(qword_256C1C8) = qword_256C0D8;
    qword_256C1C0 = qword_256C0D0;
    v224 = (char *)&qword_256C1C8 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_256BE30;
  }
  else {
    v228 = (uint64_t *)qword_256BE30;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_256C0E7;
  if (byte_256C0E7 >= 0) {
    size_t v230 = byte_256C0E7;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_256BE5F;
  if (byte_256BE5F >= 0) {
    size_t v232 = byte_256BE5F;
  }
  else {
    size_t v232 = *((void *)&xmmword_256BE48 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    v234 = &qword_256C1D8;
    qword_256C1E0 = 0;
    unk_256C1E8 = 0;
    qword_256C1D8 = 0;
    byte_256C1EF = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  v234 = (uint64_t *)operator new(v241 + 1);
  qword_256C1E0 = v232 + v230;
  unk_256C1E8 = v242 | 0x8000000000000000;
  qword_256C1D8 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_256C0D0;
    }
    else {
      v235 = (uint64_t *)qword_256C0D0;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_256BE48;
    }
    else {
      v237 = (long long *)xmmword_256BE48;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    v239 = (uint64_t *)operator new(v243 + 1);
    qword_256C1F8 = v230 + 11;
    unk_256C200 = v244 | 0x8000000000000000;
    qword_256C1F0 = (uint64_t)v239;
  }
  else
  {
    v239 = &qword_256C1F0;
    qword_256C1F8 = 0;
    unk_256C200 = 0;
    qword_256C1F0 = 0;
    byte_256C207 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_256C1F0 + 7) = *(_DWORD *)((char *)&qword_256C118 + 7);
      qword_256C1F0 = qword_256C118;
      BYTE3(qword_256C1F8) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    v245 = &qword_256C0D0;
  }
  else {
    v245 = (uint64_t *)qword_256C0D0;
  }
  memmove(v239, v245, v230);
  v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_256C118 + 7);
  *(void *)v246 = qword_256C118;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    v248 = &qword_256C208;
    qword_256C210 = 0;
    unk_256C218 = 0;
    qword_256C208 = 0;
    byte_256C21F = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v263 = v240 | 7;
  }
  uint64_t v264 = v263 + 1;
  v248 = (uint64_t *)operator new(v263 + 1);
  qword_256C210 = v230 + 8;
  unk_256C218 = v264 | 0x8000000000000000;
  qword_256C208 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      v249 = &qword_256C0D0;
    }
    else {
      v249 = (uint64_t *)qword_256C0D0;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  v250 = (char *)v248 + v230;
  *(void *)v250 = qword_256C130;
  v250[8] = 0;
  int v251 = byte_256C15F;
  if (byte_256C15F >= 0) {
    size_t v252 = byte_256C15F;
  }
  else {
    size_t v252 = qword_256C150;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    v254 = &qword_256C220;
    qword_256C228 = 0;
    unk_256C230 = 0;
    qword_256C220 = 0;
    byte_256C237 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v261 = v253 | 7;
  }
  uint64_t v262 = v261 + 1;
  v254 = (uint64_t *)operator new(v261 + 1);
  qword_256C228 = v252 + v230;
  unk_256C230 = v262 | 0x8000000000000000;
  qword_256C220 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      v255 = &qword_256C0D0;
    }
    else {
      v255 = (uint64_t *)qword_256C0D0;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      v257 = &qword_256C148;
    }
    else {
      v257 = (uint64_t *)qword_256C148;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_256C24F, "\n{newroute}");
  strcpy((char *)&qword_256C238, "{roadname}");
  strcpy(&byte_256C267, "\n{count}");
  byte_256C27F = 7;
  strcpy(&byte_256C297, "\n{dur}");
  strcpy((char *)&qword_256C280, "{duration}");
  byte_256C2AF = 5;
  qword_256C2B0 = (uint64_t)operator new(0x20uLL);
  unk_256C2B8 = v278;
  strcpy((char *)qword_256C2B0, "{PleaseProceedWithCaution}");
  byte_256C2DF = 15;
  strcpy((char *)&qword_256C2C8, "{UserRouteName}");
  byte_256C2F7 = 20;
  strcpy((char *)&xmmword_256C2E0, "{SuggestedRouteName}");
  byte_256C30F = 18;
  strcpy(byte_256C2F8, "Speed_Camera_Ahead");
  qword_256C310 = (uint64_t)operator new(0x20uLL);
  unk_256C318 = v277;
  strcpy((char *)qword_256C310, "Red_Light_Camera_Ahead_Spoken");
  qword_256C328 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256C330 = v277;
  strcpy((char *)qword_256C328, "Stop_Sign_Camera_Ahead_Spoken");
  qword_256C340 = (uint64_t)operator new(0x28uLL);
  unk_256C348 = v272;
  strcpy((char *)qword_256C340, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_256C358 = (uint64_t)operator new(0x28uLL);
  unk_256C360 = v266;
  strcpy((char *)qword_256C358, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_256C370 = (uint64_t)operator new(0x20uLL);
  unk_256C378 = v279;
  strcpy((char *)qword_256C370, "Camera_Ahead_Multiple_Spoken");
  qword_256C388 = (uint64_t)operator new(0x30uLL);
  unk_256C390 = v267;
  strcpy((char *)qword_256C388, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_256C3A0 = (char *)operator new(0x30uLL);
  strcpy(qword_256C3A0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_256C3CF = 16;
  xmmword_256C3A8 = v267;
  strcpy(byte_256C3B8, "_Speed_Limit_Mph");
  byte_256C3E7 = 16;
  strcpy(algn_256C3D0, "_Speed_Limit_Kph");
  byte_256C3FF = 11;
  strcpy((char *)&qword_256C3E8, "Watch_Speed");
  byte_256C417 = 4;
  strcpy((char *)&dword_256C400, "_One");
  byte_256C42F = 4;
  strcpy((char *)&dword_256C418, "_Two");
  byte_256C447 = 4;
  strcpy((char *)&dword_256C430, "_Few");
  byte_256C45F = 5;
  strcpy((char *)&dword_256C448, "_Many");
  byte_256C477 = 6;
  strcpy((char *)&dword_256C460, "_Other");
  byte_256C48F = 4;
  strcpy((char *)&dword_256C478, "_ONE");
  byte_256C4A7 = 7;
  strcpy((char *)&dword_256C490, "{Speed}");
  byte_256C4BF = 8;
  strcpy((char *)&qword_256C4A8, "Dismount");
  byte_256C4D7 = 4;
  strcpy((char *)&dword_256C4C0, "Walk");
  byte_256C4EF = 5;
  strcpy((char *)&dword_256C4D8, "Mount");
  byte_256C507 = 7;
  strcpy((char *)&dword_256C4F0, "Remount");
  strcpy(&byte_256C51F, "\t_Crosswalk");
  strcpy((char *)&qword_256C508, "Walk_Road");
  strcpy(&byte_256C537, "\n_PLURAL");
  byte_256C54F = 7;
  strcpy(&byte_256C567, "\n{description1}");
  strcpy((char *)&qword_256C550, "_SECONDARY");
  byte_256C57F = 14;
  byte_256C597 = 14;
  strcpy((char *)&qword_256C580, "{description2}");
  byte_256C5AF = 21;
  strcpy((char *)&xmmword_256C598, "TWO_ROAD_DESCRIPTIONS");
  byte_256C5C7 = 17;
  strcpy((char *)&xmmword_256C5B0, "{SlopePercentage}");
  byte_256C5DF = 15;
  strcpy((char *)&qword_256C5C8, "_Protected_Lane");
  strcpy(&byte_256C5F7, "\n_Paved_Path");
  strcpy((char *)&qword_256C5E0, "_Bike_Path");
  byte_256C60F = 11;
  byte_256C627 = 15;
  strcpy((char *)&qword_256C610, "_Dedicated_Lane");
  byte_256C63F = 12;
  strcpy((char *)&qword_256C628, "_Shared_Path");
  strcpy(&byte_256C657, "\n_UnnamedRoad");
  strcpy((char *)&qword_256C640, "_Bike_Lane");
  byte_256C66F = 12;
  byte_256C687 = 5;
  strcpy((char *)&dword_256C670, "_Path");
  byte_256C69F = 6;
  strcpy((char *)&dword_256C688, "_Trail");
  strcpy(&byte_256C6B7, "\t_Plaza");
  strcpy((char *)&qword_256C6A0, "_Sidewalk");
  byte_256C6CF = 6;
  byte_256C6E7 = 15;
  strcpy((char *)&qword_256C6D0, "_Moving_Walkway");
  byte_256C6FF = 14;
  strcpy((char *)&qword_256C6E8, "Two_Stage_Turn");
  byte_256C717 = 16;
  strcpy((char *)&xmmword_256C700, "{OptionalPeriod}");
  byte_256C72F = 18;
  strcpy((char *)&xmmword_256C718, "Advisory_Separator");
  byte_256C747 = 6;
  strcpy((char *)&dword_256C730, "Period");
  byte_256C75F = 21;
  strcpy((char *)&xmmword_256C748, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_256C760, "Advisory_Title_Notices");
  HIBYTE(word_256C776) = 22;
  byte_256C78F = 7;
  strcpy((char *)&dword_256C778, "_DETAIL");
  byte_256C7A7 = 17;
  strcpy((char *)&xmmword_256C790, "_LONG_REGION_LIST");
  byte_256C7BF = 16;
  strcpy((char *)&xmmword_256C7A8, "Advisory_Grouped");
  byte_256C7D7 = 11;
  strcpy((char *)&qword_256C7C0, "_Advisories");
  qword_256C7D8 = (uint64_t)operator new(0x20uLL);
  unk_256C7E0 = v275;
  strcpy((char *)qword_256C7D8, "Advisory_WILDFIRE_METADATA_");
  byte_256C807 = 8;
  strcpy((char *)&qword_256C7F0, "Advisory");
  byte_256C81F = 13;
  strcpy((char *)&qword_256C808, "MPR_NUM_STOPS");
  byte_256C837 = 17;
  strcpy(byte_256C820, "EV_CHARGE_STATION");
  byte_256C84F = 11;
  strcpy((char *)&qword_256C838, "_NAMED_CITY");
  byte_256C867 = 5;
  strcpy((char *)&dword_256C850, "_Stop");
  strcpy(&byte_256C87F, "\n{StopsCount}");
  strcpy((char *)&qword_256C868, "{CityName}");
  byte_256C897 = 12;
  byte_256C8AF = 11;
  strcpy((char *)&qword_256C898, "_With_Other");
  byte_256C8C7 = 15;
  strcpy((char *)&qword_256C8B0, "{DepartureTime}");
  qword_256C8C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256C8D0 = v276;
  strcpy((char *)qword_256C8C8, "Ending_Charge_Station_Port_Availability");
  qword_256C8E0 = (uint64_t)operator new(0x28uLL);
  unk_256C8E8 = v268;
  strcpy((char *)qword_256C8E0, "Ending_Charge_Station_No_Availability");
  qword_256C8F8 = (uint64_t)operator new(0x28uLL);
  unk_256C900 = v272;
  strcpy((char *)qword_256C8F8, "Ending_Charge_Station_No_Real_Time");
  byte_256C927 = 16;
  strcpy(byte_256C910, "{AvailablePorts}");
  byte_256C93F = 12;
  strcpy((char *)&qword_256C928, "{TotalPorts}");
  byte_256C957 = 14;
  strcpy((char *)&qword_256C940, "{ManeuverIcon}");
  qword_256C958 = (uint64_t)operator new(0x38uLL);
  unk_256C960 = xmmword_20B9A60;
  strcpy((char *)qword_256C958, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_256C970 = (uint64_t)operator new(0x20uLL);
  unk_256C978 = v275;
  strcpy((char *)qword_256C970, "Walking_Destination_Unnamed");
  qword_256C988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256C990 = v277;
  strcpy((char *)qword_256C988, "TrafficDelay_Label_Title_Sign");
  qword_256C9A0 = (uint64_t)operator new(0x20uLL);
  unk_256C9A8 = v279;
  strcpy((char *)qword_256C9A0, "Special_Guidance_Instruction");
  byte_256C9CF = 2;
  strcpy((char *)&word_256C9B8, "CZ");
  byte_256C9E7 = 3;
  dword_256C9D0 = 5919811;
  *(_WORD *)&byte_256C9FF = 3;
  LODWORD(qword_256C9E8) = 6243649;
  byte_256CA17 = 0;
  byte_256CA2F = 7;
  strcpy((char *)&dword_256CA18, "TRANSIT");
  byte_256CA47 = 7;
  strcpy((char *)&dword_256CA30, "OFFLINE");
  qword_256CA48 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256CA50 = v266;
  strcpy((char *)qword_256CA48, "Advisory_Card_French_Climate_Law_Title");
  qword_256CA60 = (uint64_t)operator new(0x30uLL);
  unk_256CA68 = xmmword_20B93C0;
  strcpy((char *)qword_256CA60, "Advisory_Card_French_Climate_Law_Details");
  qword_256CA78 = (uint64_t)operator new(0x30uLL);
  unk_256CA80 = v273;
  strcpy((char *)qword_256CA78, "French_Climate_Law_Metadata_Weblink_Title");
  qword_256CA90 = (uint64_t)operator new(0x20uLL);
  unk_256CA98 = v279;
  strcpy((char *)qword_256CA90, "{ClimateLawLearnMoreWeblink}");
  byte_256CABF = 3;
  dword_256CAA8 = 4280902;
  qword_256CAC0 = (uint64_t)operator new(0x70uLL);
  unk_256CAC8 = xmmword_20E81E0;
  strcpy((char *)qword_256CAC0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  qword_256CAD8 = 0;
  unk_256CAE0 = 0;
  qword_256CAE8 = 0;
  v258 = (char *)operator new(9uLL);
  *(void *)v258 = 0x4020C000103050DLL;
  v258[8] = 6;
  qword_256CAD8 = (uint64_t)v258;
  unk_256CAE0 = v258 + 9;
  qword_256CAE8 = (uint64_t)(v258 + 9);
  qword_256CAF0 = 0;
  qword_256CAF8 = 0;
  unk_256CB00 = 0;
  v259 = (char *)operator new(9uLL);
  qword_256CAF8 = (uint64_t)(v259 + 9);
  unk_256CB00 = v259 + 9;
  double result = 1.10224369e-279;
  *(void *)v259 = 0x604020C00010305;
  v259[8] = 13;
  qword_256CAF0 = (uint64_t)v259;
  return result;
}

void sub_564220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_564578(uint64_t result, int a2)
{
  *(_DWORD *)double result = a2;
  *(unsigned char *)(result + 1984) = 0;
  return result;
}

uint64_t sub_564584(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 1984) = 1;
  sub_55BBD8(a1 + 8, a3);
  return a1;
}

uint64_t sub_5645C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1984);
}

uint64_t sub_5645C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1984))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return a1 + 8;
}

uint64_t sub_564628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1984))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_50E3F8(a1 + 8, (uint64_t)v5);
  uint64_t result = sub_4BE9F4(a2, (uint64_t)v5);
  if (v5[1120]) {
    return sub_3A6B94((uint64_t)v5);
  }
  return result;
}

void sub_5646EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x460]))
  {
    sub_3A6B94((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_564714(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1984) && sub_50E254((_DWORD *)(a1 + 8));
}

BOOL sub_56472C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1984)) {
    return 0;
  }
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (!sub_50E234(a1 + 8)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1984))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }

  return sub_50E284(v2);
}

uint64_t sub_5647D0(_DWORD *a1)
{
  return (*a1 < 0x15u) & (0x114000u >> *a1);
}

uint64_t sub_5647F0(_DWORD *a1)
{
  return (*a1 < 0x20uLL) & (0x81FFFC00 >> *a1);
}

BOOL sub_564810(_DWORD *a1)
{
  return (*a1 - 5) < 2;
}

BOOL sub_564824(uint64_t a1)
{
  return !sub_45FB38((void *)(a1 + 480));
}

uint64_t sub_564844(uint64_t result, void *a2, _DWORD *a3)
{
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = 0;
  *(void *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = *a3;
  return result;
}

BOOL sub_564868(void *a1)
{
  return *a1 != 0x7FFFFFFFFFFFFFFFLL;
}

BOOL sub_56487C(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0x7FFFFFFFFFFFFFFFLL;
}

BOOL sub_564890(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) != 0x7FFFFFFF;
}

BOOL sub_5648A4(uint64_t a1)
{
  return *(void *)a1 == 0x7FFFFFFFFFFFFFFFLL
      && *(void *)(a1 + 16) == 0x7FFFFFFFFFFFFFFFLL
      && *(_DWORD *)(a1 + 32) == 0x7FFFFFFF;
}

BOOL sub_5648DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (*(void *)a1 == 0x7FFFFFFFFFFFFFFFLL) {
    return v1 == 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)(a1 + 32) == 0x7FFFFFFF;
  }
  else {
    return v1 != 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(a1 + 32) != 0x7FFFFFFF;
  }
}

uint64_t sub_564938(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t result = sub_5F3D48(a1, a2);
  int v7 = *a4;
  *(_DWORD *)(result + 160) = *a3;
  *(_DWORD *)(result + 164) = v7;
  return result;
}

void *sub_56496C(void *__dst, long long *a2, _DWORD *a3, void *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v7;
  }
  *((_DWORD *)__dst + 6) = *a3;
  __dst[4] = *a4;
  return __dst;
}

std::string *sub_5649DC(std::string *a1, const std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1, a2);
  return a1;
}

void sub_564A0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_564A28(unsigned int *result, void *a2)
{
  unint64_t v2 = *result;
  *((void *)result + 91) = *a2;
  *((unsigned char *)result + 736) = (v2 < 0x25) & (0x1FFFFFFFBFuLL >> v2);
  return result;
}

unsigned int *sub_564A54(unsigned int *result, void *a2)
{
  unint64_t v2 = *result;
  *((void *)result + 93) = *a2;
  *((unsigned char *)result + 752) = (v2 < 0x25) & (0x1FFFFFFFBFuLL >> v2);
  return result;
}

uint64_t sub_564A80(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 760) = *a2;
  return result;
}

uint64_t sub_564A8C(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 812) = *a2;
  return result;
}

void sub_564A98(uint64_t a1, int a2)
{
  int v8 = a2;
  __int16 v9 = -1;
  char v10 = -1;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  char v13 = 0;
  sub_524ADC((uint64_t)v14, (uint64_t)&v8, 0);
  sub_4F377C(a1 + 824, (uint64_t)v14);
  *(void *)(a1 + 864) = v19;
  int v3 = (void **)(a1 + 872);
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)int v3 = *(_OWORD *)__p;
  *(void *)(a1 + 888) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(a1 + 896) = v22;
  size_t v4 = (_OWORD *)(a1 + 904);
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
    *size_t v4 = v23;
    *(void *)(a1 + 920) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(unsigned char *)(a1 + 928) = v25;
    int v5 = v18;
    if (v18 == 1) {
      goto LABEL_12;
    }
LABEL_8:
    if (v5 || (v17 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    long long v7 = v15;
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 904));
  int v6 = SHIBYTE(v21);
  *size_t v4 = v23;
  *(void *)(a1 + 920) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  *(unsigned char *)(a1 + 928) = v25;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    int v5 = v18;
    if (v18 != 1) {
      goto LABEL_8;
    }
  }
  else
  {
    int v5 = v18;
    if (v18 != 1) {
      goto LABEL_8;
    }
  }
LABEL_12:
  long long v7 = v15;
  if (!v15) {
    goto LABEL_15;
  }
  uint64_t v16 = v15;
LABEL_14:
  operator delete(v7);
LABEL_15:
  if (v13 < 0) {
    operator delete(*(void **)((char *)&v11 + 1));
  }
}

void sub_564C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_564C44(uint64_t a1)
{
  if (*(void *)(a1 + 768) == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (*(void *)(a1 + 784) == 0x7FFFFFFFFFFFFFFFLL) {
    return *(_DWORD *)(a1 + 800) != 0x7FFFFFFF;
  }
  return 1;
}

BOOL sub_564C84(uint64_t a1)
{
  if (*(void *)(a1 + 728) == 0x7FFFFFFFFFFFFFFFLL
    || *(void *)(a1 + 744) == 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)(a1 + 760) == 0x7FFFFFFF)
  {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 784);
  if (*(void *)(a1 + 768) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v3 != 0x7FFFFFFFFFFFFFFFLL || *(_DWORD *)(a1 + 800) != 0x7FFFFFFF) {
      return 0;
    }
  }
  else if (v3 == 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)(a1 + 800) == 0x7FFFFFFF)
  {
    return 0;
  }
  if (sub_45FB38((void *)(a1 + 80)) || sub_45FB38((void *)(a1 + 240)) || sub_45FB38((void *)(a1 + 400))) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 959);
  uint64_t v5 = *(char *)(a1 + 959) < 0 ? *(void *)(a1 + 944) : *(unsigned __int8 *)(a1 + 959);
  if (v5 || *(void *)(a1 + 968) != 0x7FFFFFFFFFFFFFFFLL)
  {
    if ((v4 & 0x80) != 0) {
      uint64_t v4 = *(void *)(a1 + 944);
    }
    if (!v4 || *(void *)(a1 + 968) == 0x7FFFFFFFFFFFFFFFLL) {
      return 0;
    }
  }
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)(a1 + 16) != 0;
  }
  else {
    return *(unsigned char *)(a1 + 31) != 0;
  }
}

uint64_t sub_564DC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  uint64_t v2 = *(void *)(a1 + 1000);
  if (v1 - v2 != 336) {
    return 0;
  }
  if (v2 == v1) {
    return 1;
  }
  while (1)
  {
    BOOL v3 = sub_45FB38((void *)v2);
    uint64_t result = 0;
    if (v3 || !*(_DWORD *)(v2 + 160)) {
      break;
    }
    if (!*(_DWORD *)(v2 + 164)) {
      return 0;
    }
    v2 += 168;
    if (v2 == v1) {
      return 1;
    }
  }
  return result;
}

BOOL sub_564E4C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 996) != 0;
}

uint64_t sub_564E5C(int a1)
{
  if ((a1 - 1) > 0x23) {
    return 0;
  }
  else {
    return dword_20E8580[a1 - 1];
  }
}

void *sub_564E80@<X0>(void *result@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (void *)a4;
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      long long v7 = (const void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v7 < 0) {
        long long v7 = a2[1];
      }
      if (v7) {
        int v8 = a2;
      }
      else {
        int v8 = a3;
      }
      if ((*((char *)v8 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)uint64_t v5 = *(_OWORD *)v8;
        __int16 v9 = v8[2];
        goto LABEL_9;
      }
      char v10 = (void *)*v8;
      unint64_t v11 = (unint64_t)v8[1];
      goto LABEL_11;
    case 8:
      int v12 = byte_256F96F;
      if (byte_256F96F >= 0) {
        size_t v13 = byte_256F96F;
      }
      else {
        size_t v13 = *((void *)&xmmword_256F958 + 1);
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = (size_t)a2[1];
      }
      unint64_t v16 = v15 + v13;
      if (v15 + v13 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v16 > 0x16)
      {
        uint64_t v33 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v33 = v16 | 7;
        }
        uint64_t v34 = v33 + 1;
        uint64_t result = operator new(v33 + 1);
        v5[1] = v16;
        v5[2] = v34 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v16;
      }
      if (!v13) {
        goto LABEL_177;
      }
      uint64_t v35 = &xmmword_256F958;
      goto LABEL_173;
    case 25:
      int v17 = byte_256FA5F;
      if (byte_256FA5F >= 0) {
        size_t v18 = byte_256FA5F;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FA48 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v21 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v21 > 0x16)
      {
        uint64_t v36 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v36 = v21 | 7;
        }
        uint64_t v37 = v36 + 1;
        uint64_t result = operator new(v36 + 1);
        v5[1] = v21;
        v5[2] = v37 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v21;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FA48;
      goto LABEL_208;
    case 26:
      int v17 = byte_256F9FF;
      if (byte_256F9FF >= 0) {
        size_t v18 = byte_256F9FF;
      }
      else {
        size_t v18 = *((void *)&xmmword_256F9E8 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v22 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v22 > 0x16)
      {
        uint64_t v39 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17) {
          uint64_t v39 = v22 | 7;
        }
        uint64_t v40 = v39 + 1;
        uint64_t result = operator new(v39 + 1);
        v5[1] = v22;
        v5[2] = v40 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v22;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256F9E8;
      goto LABEL_208;
    case 27:
      int v17 = byte_256FA17;
      if (byte_256FA17 >= 0) {
        size_t v18 = byte_256FA17;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FA00 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v23 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v23 > 0x16)
      {
        uint64_t v41 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v41 = v23 | 7;
        }
        uint64_t v42 = v41 + 1;
        uint64_t result = operator new(v41 + 1);
        v5[1] = v23;
        v5[2] = v42 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v23;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FA00;
      goto LABEL_208;
    case 28:
      int v17 = byte_256FA2F;
      if (byte_256FA2F >= 0) {
        size_t v18 = byte_256FA2F;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FA18 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v24 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v24 > 0x16)
      {
        uint64_t v43 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17) {
          uint64_t v43 = v24 | 7;
        }
        uint64_t v44 = v43 + 1;
        uint64_t result = operator new(v43 + 1);
        v5[1] = v24;
        v5[2] = v44 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v24;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FA18;
      goto LABEL_208;
    case 29:
      int v17 = byte_256FA47;
      if (byte_256FA47 >= 0) {
        size_t v18 = byte_256FA47;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FA30 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v25 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v25 > 0x16)
      {
        uint64_t v45 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17) {
          uint64_t v45 = v25 | 7;
        }
        uint64_t v46 = v45 + 1;
        uint64_t result = operator new(v45 + 1);
        v5[1] = v25;
        v5[2] = v46 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v25;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FA30;
      goto LABEL_208;
    case 30:
      int v17 = byte_256FB7F;
      if (byte_256FB7F >= 0) {
        size_t v18 = byte_256FB7F;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FB68 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v26 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v26 > 0x16)
      {
        uint64_t v47 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17) {
          uint64_t v47 = v26 | 7;
        }
        uint64_t v48 = v47 + 1;
        uint64_t result = operator new(v47 + 1);
        v5[1] = v26;
        v5[2] = v48 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v26;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FB68;
      goto LABEL_208;
    case 31:
      int v12 = byte_256FC27;
      if (byte_256FC27 >= 0) {
        size_t v13 = byte_256FC27;
      }
      else {
        size_t v13 = *((void *)&xmmword_256FC10 + 1);
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = (size_t)a2[1];
      }
      unint64_t v27 = v15 + v13;
      if (v15 + v13 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v27 > 0x16)
      {
        uint64_t v49 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17) {
          uint64_t v49 = v27 | 7;
        }
        uint64_t v50 = v49 + 1;
        uint64_t result = operator new(v49 + 1);
        v5[1] = v27;
        v5[2] = v50 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v27;
      }
      if (!v13) {
        goto LABEL_177;
      }
      uint64_t v35 = &xmmword_256FC10;
LABEL_173:
      if (v12 >= 0) {
        size_t v51 = v35;
      }
      else {
        size_t v51 = *(long long **)v35;
      }
      uint64_t result = memmove(v5, v51, v13);
LABEL_177:
      int v52 = (char *)v5 + v13;
      if (v15)
      {
        if (v14 >= 0) {
          size_t v53 = a2;
        }
        else {
          size_t v53 = *a2;
        }
        uint64_t result = memmove(v52, v53, v15);
      }
      v52[v15] = 0;
      return result;
    case 32:
      int v17 = byte_256FBC7;
      if (byte_256FBC7 >= 0) {
        size_t v18 = byte_256FBC7;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FBB0 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v28 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v28 > 0x16)
      {
        uint64_t v54 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v54 = v28 | 7;
        }
        uint64_t v55 = v54 + 1;
        uint64_t result = operator new(v54 + 1);
        v5[1] = v28;
        v5[2] = v55 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v28;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FBB0;
      goto LABEL_208;
    case 33:
      int v17 = byte_256FBAF;
      if (byte_256FBAF >= 0) {
        size_t v18 = byte_256FBAF;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FB98 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v29 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v29 > 0x16)
      {
        uint64_t v56 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v56 = v29 | 7;
        }
        uint64_t v57 = v56 + 1;
        uint64_t result = operator new(v56 + 1);
        v5[1] = v29;
        v5[2] = v57 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v29;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FB98;
      goto LABEL_208;
    case 34:
      int v17 = byte_256FBF7;
      if (byte_256FBF7 >= 0) {
        size_t v18 = byte_256FBF7;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FBE0 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v30 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v30 > 0x16)
      {
        uint64_t v58 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v58 = v30 | 7;
        }
        uint64_t v59 = v58 + 1;
        uint64_t result = operator new(v58 + 1);
        v5[1] = v30;
        v5[2] = v59 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v30;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FBE0;
      goto LABEL_208;
    case 35:
      int v17 = byte_256FBDF;
      if (byte_256FBDF >= 0) {
        size_t v18 = byte_256FBDF;
      }
      else {
        size_t v18 = *((void *)&xmmword_256FBC8 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v31 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_219;
      }
      if (v31 > 0x16)
      {
        uint64_t v60 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17) {
          uint64_t v60 = v31 | 7;
        }
        uint64_t v61 = v60 + 1;
        uint64_t result = operator new(v60 + 1);
        v5[1] = v31;
        v5[2] = v61 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v31;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256FBC8;
      goto LABEL_208;
    case 36:
      int v17 = byte_256F9E7;
      if (byte_256F9E7 >= 0) {
        size_t v18 = byte_256F9E7;
      }
      else {
        size_t v18 = *((void *)&xmmword_256F9D0 + 1);
      }
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v20 = (size_t)a3[1];
      }
      unint64_t v32 = v20 + v18;
      if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
LABEL_219:
      }
        sub_188D690();
      if (v32 > 0x16)
      {
        uint64_t v62 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17) {
          uint64_t v62 = v32 | 7;
        }
        uint64_t v63 = v62 + 1;
        uint64_t result = operator new(v62 + 1);
        v5[1] = v32;
        v5[2] = v63 | 0x8000000000000000;
        *uint64_t v5 = result;
        uint64_t v5 = result;
      }
      else
      {
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 23) = v32;
      }
      if (!v18) {
        goto LABEL_212;
      }
      std::string::size_type v38 = &xmmword_256F9D0;
LABEL_208:
      if (v17 >= 0) {
        long long v64 = v38;
      }
      else {
        long long v64 = *(long long **)v38;
      }
      uint64_t result = memmove(v5, v64, v18);
LABEL_212:
      int v65 = (char *)v5 + v18;
      if (v20)
      {
        if (v19 >= 0) {
          size_t v66 = a3;
        }
        else {
          size_t v66 = *a3;
        }
        uint64_t result = memmove(v65, v66, v20);
      }
      v65[v20] = 0;
      return result;
    default:
      if (*((char *)a3 + 23) < 0)
      {
        char v10 = (void *)*a3;
        unint64_t v11 = (unint64_t)a3[1];
LABEL_11:
        return sub_4200(v5, v10, v11);
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)a3;
        __int16 v9 = a3[2];
LABEL_9:
        v5[2] = v9;
      }
      return result;
  }
}

void *sub_565898@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      if (byte_256F8C7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F8B0, *((unint64_t *)&xmmword_256F8B0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F8B0;
        *(void *)(a2 + 16) = unk_256F8C0;
      }
      break;
    case 2:
      if (byte_256F8F7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F8E0, *((unint64_t *)&xmmword_256F8E0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F8E0;
        *(void *)(a2 + 16) = unk_256F8F0;
      }
      break;
    case 3:
      if (byte_256F8DF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F8C8, *((unint64_t *)&xmmword_256F8C8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F8C8;
        *(void *)(a2 + 16) = unk_256F8D8;
      }
      break;
    case 4:
      if (byte_256FA77 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA60, *((unint64_t *)&xmmword_256FA60 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA60;
        *(void *)(a2 + 16) = *(void *)&word_256FA70;
      }
      break;
    case 5:
      if (byte_256F987 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F970, *((unint64_t *)&xmmword_256F970 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F970;
        *(void *)(a2 + 16) = unk_256F980;
      }
      break;
    case 6:
      if (byte_256F99F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F988, *((unint64_t *)&xmmword_256F988 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F988;
        *(void *)(a2 + 16) = *(void *)&dword_256F998;
      }
      break;
    case 7:
      if (byte_256F9B7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F9A0, *((unint64_t *)&xmmword_256F9A0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F9A0;
        *(void *)(a2 + 16) = unk_256F9B0;
      }
      break;
    case 8:
      if (byte_256F96F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F958, *((unint64_t *)&xmmword_256F958 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F958;
        *(void *)(a2 + 16) = unk_256F968;
      }
      break;
    case 9:
      if (byte_256F9CF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F9B8, *((unint64_t *)&xmmword_256F9B8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F9B8;
        *(void *)(a2 + 16) = unk_256F9C8;
      }
      break;
    case 10:
      if (byte_256F90F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F8F8, *((unint64_t *)&xmmword_256F8F8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F8F8;
        *(void *)(a2 + 16) = unk_256F908;
      }
      break;
    case 11:
      if (byte_256F93F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F928, *((unint64_t *)&xmmword_256F928 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F928;
        *(void *)(a2 + 16) = unk_256F938;
      }
      break;
    case 12:
      if (byte_256F927 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F910, *((unint64_t *)&xmmword_256F910 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F910;
        *(void *)(a2 + 16) = unk_256F920;
      }
      break;
    case 13:
      if (byte_256FA8F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA78, *((unint64_t *)&xmmword_256FA78 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA78;
        *(void *)(a2 + 16) = unk_256FA88;
      }
      break;
    case 14:
      if (byte_256FAA7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA90, *((unint64_t *)&xmmword_256FA90 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA90;
        *(void *)(a2 + 16) = unk_256FAA0;
      }
      break;
    case 15:
      if (byte_256FABF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FAA8, *((unint64_t *)&xmmword_256FAA8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FAA8;
        *(void *)(a2 + 16) = unk_256FAB8;
      }
      break;
    case 16:
      if (byte_256FAD7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FAC0, *((unint64_t *)&xmmword_256FAC0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FAC0;
        *(void *)(a2 + 16) = unk_256FAD0;
      }
      break;
    case 17:
      if (byte_256FB07 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FAF0, *((unint64_t *)&xmmword_256FAF0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FAF0;
        *(void *)(a2 + 16) = unk_256FB00;
      }
      break;
    case 18:
      if (byte_256FB1F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB08, *((unint64_t *)&xmmword_256FB08 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB08;
        *(void *)(a2 + 16) = unk_256FB18;
      }
      break;
    case 19:
      if (byte_256FB97 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB80, *((unint64_t *)&xmmword_256FB80 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB80;
        *(void *)(a2 + 16) = unk_256FB90;
      }
      break;
    case 20:
      if (byte_256FB37 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB20, *((unint64_t *)&xmmword_256FB20 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB20;
        *(void *)(a2 + 16) = unk_256FB30;
      }
      break;
    case 21:
      if (byte_256FB4F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB38, *((unint64_t *)&xmmword_256FB38 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB38;
        *(void *)(a2 + 16) = unk_256FB48;
      }
      break;
    case 22:
      if (byte_256FC0F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FBF8, *((unint64_t *)&xmmword_256FBF8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FBF8;
        *(void *)(a2 + 16) = unk_256FC08;
      }
      break;
    case 23:
      if (byte_256FAEF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FAD8, *((unint64_t *)&xmmword_256FAD8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FAD8;
        *(void *)(a2 + 16) = unk_256FAE8;
      }
      break;
    case 24:
      if (byte_256FB67 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB50, *((unint64_t *)&xmmword_256FB50 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB50;
        *(void *)(a2 + 16) = unk_256FB60;
      }
      break;
    case 25:
      if (byte_256FA5F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA48, *((unint64_t *)&xmmword_256FA48 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA48;
        *(void *)(a2 + 16) = unk_256FA58;
      }
      break;
    case 26:
      if (byte_256F9FF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F9E8, *((unint64_t *)&xmmword_256F9E8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F9E8;
        *(void *)(a2 + 16) = unk_256F9F8;
      }
      break;
    case 27:
      if (byte_256FA17 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA00, *((unint64_t *)&xmmword_256FA00 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA00;
        *(void *)(a2 + 16) = unk_256FA10;
      }
      break;
    case 28:
      if (byte_256FA2F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA18, *((unint64_t *)&xmmword_256FA18 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA18;
        *(void *)(a2 + 16) = unk_256FA28;
      }
      break;
    case 29:
      if (byte_256FA47 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FA30, *((unint64_t *)&xmmword_256FA30 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FA30;
        *(void *)(a2 + 16) = unk_256FA40;
      }
      break;
    case 30:
      if (byte_256FB7F < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB68, *((unint64_t *)&xmmword_256FB68 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB68;
        *(void *)(a2 + 16) = unk_256FB78;
      }
      break;
    case 31:
      if (byte_256FC27 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FC10, *((unint64_t *)&xmmword_256FC10 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FC10;
        *(void *)(a2 + 16) = unk_256FC20;
      }
      break;
    case 32:
      if (byte_256FBC7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FBB0, *((unint64_t *)&xmmword_256FBB0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FBB0;
        *(void *)(a2 + 16) = *(void *)&byte_256FBC0;
      }
      break;
    case 33:
      if (byte_256FBAF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FB98, *((unint64_t *)&xmmword_256FB98 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FB98;
        *(void *)(a2 + 16) = *(void *)&dword_256FBA8;
      }
      break;
    case 34:
      if (byte_256FBF7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FBE0, *((unint64_t *)&xmmword_256FBE0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FBE0;
        *(void *)(a2 + 16) = *(void *)&byte_256FBF0;
      }
      break;
    case 35:
      if (byte_256FBDF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256FBC8, *((unint64_t *)&xmmword_256FBC8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256FBC8;
        *(void *)(a2 + 16) = *(void *)&dword_256FBD8;
      }
      break;
    case 36:
      if (byte_256F9E7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_256F9D0, *((unint64_t *)&xmmword_256F9D0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_256F9D0;
        *(void *)(a2 + 16) = unk_256F9E0;
      }
      break;
    default:
      *(unsigned char *)(a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      break;
  }
  return result;
}

void sub_5661D4(unsigned int *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    sub_564E80((void *)*a1, (const void **)a1 + 117, (const void **)a2, (uint64_t)&__p);
    uint64_t v4 = (void **)(a1 + 2);
    if (*((char *)a1 + 31) < 0) {
      operator delete(*v4);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)a1 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    return;
  }
  if (*(char *)(a2 + 23) < 0) {
    sub_4200(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (!*((unsigned char *)a1 + 988))
  {
    if (*((char *)a1 + 959) < 0)
    {
      if (!*((void *)a1 + 118)) {
        goto LABEL_36;
      }
    }
    else if (!*((unsigned char *)a1 + 959))
    {
      goto LABEL_36;
    }
    std::string::operator=(&__p, (const std::string *)a1 + 39);
    goto LABEL_36;
  }
  std::to_string(&v24, a1[244]);
  if (byte_256F957 >= 0) {
    uint64_t v5 = (const std::string::value_type *)&qword_256F940;
  }
  else {
    uint64_t v5 = (const std::string::value_type *)qword_256F940;
  }
  if (byte_256F957 >= 0) {
    std::string::size_type v6 = byte_256F957;
  }
  else {
    std::string::size_type v6 = unk_256F948;
  }
  long long v7 = std::string::append(&v24, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (!*((unsigned char *)a1 + 988))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  std::to_string(&v21, a1[245]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v9 = &v21;
  }
  else {
    __int16 v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  unint64_t v11 = std::string::append(&v22, (const std::string::value_type *)v9, size);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v25[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v12;
  __p.__r_.__value_.__l.__size_ = v25[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v25 + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v13;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_33;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
LABEL_33:
  }
    operator delete(v24.__r_.__value_.__l.__data_);
LABEL_36:
  sub_565898((void *)*a1, (uint64_t)&v22);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = std::string::append(&v22, (const std::string::value_type *)p_p, v15);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a1 + 31) < 0) {
    operator delete(*((void **)a1 + 1));
  }
  std::string::size_type v19 = v24.__r_.__value_.__r.__words[0];
  *((void *)a1 + 1) = v17;
  *((void *)a1 + 2) = v19;
  *(void *)((char *)a1 + 23) = *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7);
  *((unsigned char *)a1 + 31) = v18;
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_48:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
}

void sub_5664E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, _Unwind_Exception *exception_objecta, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_566594(uint64_t a1, uint64_t *a2)
{
}

double sub_56659C()
{
  byte_256CB47 = 1;
  word_256CB30 = 65;
  byte_256CB5F = 1;
  word_256CB48 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)std::string v283 = 0;
  HIBYTE(v284[0]) = 14;
  strcpy(&v283[8], "ROUTES_THROUGH");
  LODWORD(v284[1]) = 1;
  v285[23] = 9;
  strcpy(v285, "ROUTES_TO");
  LODWORD(v286) = 3;
  HIBYTE(v288) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v289) = 2;
  xmmword_2570978 = 0u;
  *(_OWORD *)&qword_2570988 = 0u;
  dword_2570998 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2570978, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2570978, (uint64_t)&v283[8], (uint64_t)&v283[8]);
  sub_3A6EF0((uint64_t)&xmmword_2570978, (uint64_t)v285, (uint64_t)v285);
  sub_3A6EF0((uint64_t)&xmmword_2570978, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v288) < 0)
  {
    operator delete(__p[0]);
    if ((v285[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v284[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v283[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v285[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v285);
  if (SHIBYTE(v284[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_256CB77 = 8;
  strcpy((char *)&qword_256CB60, "any_mode");
  byte_256CB8F = 7;
  strcpy((char *)&dword_256CB78, "cycling");
  byte_256CBA7 = 7;
  strcpy((char *)&dword_256CB90, "driving");
  byte_256CBBF = 7;
  strcpy((char *)&dword_256CBA8, "walking");
  strcpy(&byte_256CBD7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_256CBC0, "\x1B\\toi=lhp\\"");
  byte_256CBEF = 11;
  qword_256CBF0 = (char *)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  xmmword_256CBF8 = xmmword_20B9250;
  strcpy(qword_256CBF0, "\x1B\\toi=x-sampa-internal\\"");
  byte_256CC1F = 13;
  strcpy((char *)&qword_256CC08, "\x1B\\tn=address\\"");
  strcpy(&byte_256CC37, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_256CC20, "\x1B\\tn=nav\\"");
  byte_256CC4F = 12;
  byte_256CC67 = 7;
  strcpy((char *)&dword_256CC50, "\x1B\\lang=");
  byte_256CC7F = 1;
  word_256CC68 = 92;
  byte_256CC97 = 4;
  strcpy((char *)&qword_256CC80, "DEV:");
  byte_256CCAF = 8;
  strcpy((char *)&qword_256CC98, "Continue");
  byte_256CCC7 = 11;
  strcpy((char *)&qword_256CCB0, "Start_Route");
  byte_256CCDF = 14;
  strcpy((char *)&qword_256CCC8, "Continue_Route");
  byte_256CCF7 = 12;
  strcpy((char *)&qword_256CCE0, "Resume_Route");
  byte_256CD0F = 18;
  strcpy((char *)&xmmword_256CCF8, "Start_Route_U_Turn");
  byte_256CD27 = 7;
  strcpy((char *)&dword_256CD10, "_U_Turn");
  qword_256CD38 = 0x1300000000000000;
  qmemcpy(&unk_256CD40, "Continue_Route", 14);
  qword_256CD28 = *(void *)"Resume_Route";
  unk_256CD30 = 0x545F555F6574756FLL;
  unk_256CD37 = 1852994900;
  qword_256CD50 = 0x1500000000000000;
  strcpy(byte_256CD58, "Left_Turn");
  unk_256CD4E = 1415533919;
  *(_DWORD *)((char *)&qword_256CD50 + 1) = 1852994900;
  strcpy(&byte_256CD6F, "\tRight_Turn");
  strcpy(&byte_256CD87, "\nLeft_Turn_At_End");
  byte_256CD9F = 16;
  byte_256CDB7 = 17;
  strcpy((char *)&xmmword_256CDA0, "Right_Turn_At_End");
  byte_256CDCF = 15;
  strcpy((char *)&qword_256CDB8, "Sharp_Left_Turn");
  byte_256CDE7 = 16;
  strcpy((char *)&xmmword_256CDD0, "Sharp_Right_Turn");
  byte_256CDFF = 16;
  strcpy((char *)&xmmword_256CDE8, "Slight_Left_Turn");
  byte_256CE17 = 17;
  strcpy((char *)&xmmword_256CE00, "Slight_Right_Turn");
  strcpy(&byte_256CE2F, "\tKeep_Right");
  strcpy((char *)&qword_256CE18, "Keep_Left");
  strcpy(&byte_256CE47, "\nU_Turn");
  byte_256CE5F = 6;
  byte_256CE77 = 14;
  strcpy((char *)&qword_256CE60, "Walking_U_Turn");
  byte_256CE8F = 20;
  strcpy((char *)&xmmword_256CE78, "U_Turn_When_Possible");
  byte_256CEA7 = 20;
  strcpy((char *)&xmmword_256CE90, "U_Turn_At_Roundabout");
  byte_256CEBF = 11;
  strcpy((char *)&qword_256CEA8, "Enter_Ferry");
  strcpy(&byte_256CED7, "\nChange_Ferry");
  strcpy((char *)&qword_256CEC0, "Exit_Ferry");
  byte_256CEEF = 12;
  byte_256CF07 = 21;
  strcpy((char *)&xmmword_256CEF0, "Enter_Railway_Shuttle");
  byte_256CF1F = 20;
  strcpy((char *)&xmmword_256CF08, "Exit_Railway_Shuttle");
  byte_256CF37 = 22;
  strcpy((char *)&xmmword_256CF20, "Change_Railway_Shuttle");
  byte_256CF4F = 17;
  strcpy((char *)&xmmword_256CF38, "End_Of_Navigation");
  byte_256CF67 = 17;
  strcpy((char *)&xmmword_256CF50, "End_Of_Navigation");
  byte_256CF7F = 11;
  strcpy((char *)&qword_256CF68, "Destination");
  byte_256CF97 = 19;
  strcpy((char *)&xmmword_256CF80, "Destination_On_left");
  byte_256CFAF = 20;
  strcpy((char *)&xmmword_256CF98, "Destination_On_Right");
  strcpy(&byte_256CFC7, "\nFirst_Stop_On_left");
  *(void *)&v267[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_256CFB0, "First_Stop");
  byte_256CFDF = 18;
  byte_256CFF7 = 19;
  strcpy((char *)&xmmword_256CFE0, "First_Stop_On_Right");
  strcpy(&byte_256D00F, "\tNext_Stop_On_left");
  *(void *)&v263[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_256CFF8, "Next_Stop");
  byte_256D027 = 17;
  byte_256D03F = 18;
  strcpy((char *)&xmmword_256D028, "Next_Stop_On_Right");
  byte_256D057 = 13;
  strcpy((char *)&qword_256D040, "Waypoint_Stop");
  byte_256D06F = 21;
  strcpy((char *)&xmmword_256D058, "Waypoint_Stop_On_Left");
  byte_256D087 = 22;
  strcpy((char *)&xmmword_256D070, "Waypoint_Stop_On_Right");
  byte_256D09F = 11;
  strcpy((char *)&qword_256D088, "Roundabout_");
  byte_256D0B7 = 16;
  strcpy((char *)&xmmword_256D0A0, "Enter_Roundabout");
  qword_256D0B8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  unk_256D0C0 = xmmword_20B91C0;
  strcpy((char *)qword_256D0B8, "Walking_Enter_Roundabout");
  byte_256D0E7 = 16;
  strcpy(byte_256D0D0, "Leave_Roundabout");
  byte_256D0FF = 21;
  strcpy((char *)&xmmword_256D0E8, "Roundabout_First_Exit");
  byte_256D117 = 22;
  strcpy(byte_256D100, "Roundabout_Second_Exit");
  byte_256D12F = 21;
  strcpy((char *)&xmmword_256D118, "Roundabout_Third_Exit");
  strcpy(byte_256D130, "Roundabout_Fourth_Exit");
  HIBYTE(word_256D146) = 22;
  byte_256D15F = 21;
  strcpy((char *)&xmmword_256D148, "Roundabout_Fifth_Exit");
  byte_256D177 = 21;
  strcpy(byte_256D160, "Roundabout_Sixth_Exit");
  qword_256D178 = (uint64_t)operator new(0x19uLL);
  unk_256D180 = xmmword_20B9250;
  strcpy((char *)qword_256D178, "Roundabout_Seventh_Exit");
  strcpy(byte_256D190, "Roundabout_Eighth_Exit");
  HIBYTE(word_256D1A6) = 22;
  byte_256D1BF = 21;
  strcpy((char *)&xmmword_256D1A8, "Roundabout_Ninth_Exit");
  byte_256D1D7 = 21;
  strcpy(byte_256D1C0, "Roundabout_Tenth_Exit");
  qword_256D1D8 = (uint64_t)operator new(0x20uLL);
  unk_256D1E0 = xmmword_20B91C0;
  strcpy((char *)qword_256D1D8, "Roundabout_Eleventh_Exit");
  qword_256D1F0 = (uint64_t)operator new(0x19uLL);
  unk_256D1F8 = xmmword_20B9250;
  strcpy((char *)qword_256D1F0, "Roundabout_Twelfth_Exit");
  qword_256D208 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  *(_OWORD *)algn_256D210 = xmmword_20B5EB0;
  strcpy((char *)qword_256D208, "Roundabout_Thirteenth_Exit");
  qword_256D220 = (uint64_t)operator new(0x20uLL);
  unk_256D228 = xmmword_20B5EB0;
  strcpy((char *)qword_256D220, "Roundabout_Fourteenth_Exit");
  qword_256D238 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  unk_256D240 = xmmword_20B8870;
  strcpy((char *)qword_256D238, "Roundabout_Fifteenth_Exit");
  qword_256D250 = (uint64_t)operator new(0x20uLL);
  unk_256D258 = xmmword_20B8870;
  strcpy((char *)qword_256D250, "Roundabout_Sixteenth_Exit");
  qword_256D268 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  *(_OWORD *)algn_256D270 = xmmword_20B91A0;
  strcpy((char *)qword_256D268, "Roundabout_Seventeenth_Exit");
  qword_256D280 = (uint64_t)operator new(0x20uLL);
  unk_256D288 = xmmword_20B5EB0;
  strcpy((char *)qword_256D280, "Roundabout_Eighteenth_Exit");
  qword_256D298 = (uint64_t)operator new(0x20uLL);
  unk_256D2A0 = xmmword_20B5EB0;
  strcpy((char *)qword_256D298, "Roundabout_Nineteenth_Exit");
  byte_256D2C7 = 8;
  strcpy((char *)&qword_256D2B0, "Off_Ramp");
  byte_256D2DF = 16;
  strcpy((char *)&xmmword_256D2C8, "Off_Ramp_On_Left");
  byte_256D2F7 = 17;
  strcpy(byte_256D2E0, "Off_Ramp_On_Right");
  byte_256D30F = 14;
  strcpy((char *)&qword_256D2F8, "Change_Highway");
  strcpy(byte_256D310, "Change_Highway_On_Left");
  HIBYTE(word_256D326) = 22;
  qword_256D328 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_256D330 = xmmword_20B9250;
  strcpy((char *)qword_256D328, "Change_Highway_On_Right");
  byte_256D357 = 5;
  strcpy((char *)&dword_256D340, "Merge");
  byte_256D36F = 12;
  strcpy((char *)&qword_256D358, "Enter_Detour");
  byte_256D387 = 11;
  strcpy((char *)&qword_256D370, "Exit_Detour");
  byte_256D39F = 18;
  strcpy((char *)&xmmword_256D388, "Walking_Turnaround");
  qword_256D3A0 = (uint64_t)operator new(0x19uLL);
  unk_256D3A8 = xmmword_20B9250;
  strcpy((char *)qword_256D3A0, "Walking_Turnaround_Sign");
  byte_256D3CF = 19;
  strcpy(byte_256D3B8, "Distance_Title_List");
  unk_256D3D0 = operator new(0x19uLL);
  unk_256D3D8 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_256D3D0, "Cross_The_Street_Spoken");
  *(void *)&long long v269 = *(void *)"t_Spoken";
  byte_256D3FF = 19;
  strcpy(byte_256D3E8, "Arrival_Charge_List");
  byte_256D417 = 15;
  strcpy(byte_256D400, "Charge_At_Start");
  strcpy(&byte_256D42F, "\tPass_Street");
  strcpy(byte_256D418, "Pass_Exit");
  byte_256D447 = 11;
  byte_256D45F = 17;
  strcpy(byte_256D448, "Pass_Intersection");
  strcpy(&byte_256D477, "\t_PrevExitNumber");
  strcpy(byte_256D460, "Next_Exit");
  byte_256D48F = 15;
  strcpy(&byte_256D4A7, "\t_PrevUTurn");
  strcpy(byte_256D490, "_PrevRoad");
  strcpy(&byte_256D4BF, "\nNext_");
  byte_256D4D7 = 5;
  byte_256D4EF = 15;
  strcpy(byte_256D4D8, "_At_Next_Street");
  byte_256D507 = 21;
  strcpy(byte_256D4F0, "_At_Next_Intersection");
  byte_256D51F = 14;
  strcpy((char *)&qword_256D508, "Charge_Station");
  byte_256D537 = 15;
  strcpy((char *)&qword_256D520, "_Charge_Station");
  BYTE1(qword_256D548) = 0;
  WORD1(qword_256D548) = 25856;
  HIDWORD(qword_256D548) = 335544320;
  strcpy((char *)&qword_256D538, "_Charge_Station_");
  byte_256D567 = 8;
  strcpy((char *)&qword_256D550, "_Minimum");
  byte_256D57F = 15;
  strcpy((char *)&qword_256D568, "ExitShield_Sign");
  byte_256D597 = 8;
  strcpy((char *)&qword_256D580, "Walking_");
  byte_256D5AF = 16;
  strcpy((char *)&xmmword_256D598, "Walking_Continue");
  byte_256D5C7 = 19;
  strcpy((char *)&xmmword_256D5B0, "Walking_Start_Route");
  qword_256D5C8 = (uint64_t)operator new(0x20uLL);
  unk_256D5D0 = xmmword_20B5EB0;
  strcpy((char *)qword_256D5C8, "Walking_Start_Route_U_Turn");
  byte_256D5F7 = 17;
  strcpy(byte_256D5E0, "Walking_Left_Turn");
  byte_256D60F = 18;
  strcpy((char *)&xmmword_256D5F8, "Walking_Right_Turn");
  qword_256D610 = (uint64_t)operator new(0x20uLL);
  unk_256D618 = xmmword_20B5EB0;
  strcpy((char *)qword_256D610, "Walking_Turn_At_Roundabout");
  qword_256D628 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  *(_OWORD *)algn_256D630 = xmmword_20B91B0;
  strcpy((char *)qword_256D628, "Walking_U_Turn_When_Possible");
  qword_256D640 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9390;
  unk_256D648 = xmmword_20B9390;
  strcpy((char *)qword_256D640, "Walking_Roundabout_Exit_Continue");
  qword_256D658 = (uint64_t)operator new(0x20uLL);
  unk_256D660 = xmmword_20B91B0;
  strcpy((char *)qword_256D658, "Walking_Roundabout_Exit_Left");
  qword_256D670 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_256D678 = xmmword_20B8890;
  strcpy((char *)qword_256D670, "Walking_Roundabout_Exit_Right");
  qword_256D688 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256D690 = xmmword_20B8870;
  strcpy((char *)qword_256D688, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_256D6A0 = (uint64_t)v0;
  unk_256D6A8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_256D6CF = 8;
  strcpy((char *)&qword_256D6B8, "Walking_");
  qword_256D6D0 = (uint64_t)operator new(0x19uLL);
  unk_256D6D8 = v280;
  strcpy((char *)qword_256D6D0, "Walking_Sharp_Left_Turn");
  qword_256D6E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256D6F0 = v279;
  strcpy((char *)qword_256D6E8, "Walking_Sharp_Right_Turn");
  qword_256D700 = (uint64_t)operator new(0x20uLL);
  unk_256D708 = v279;
  strcpy((char *)qword_256D700, "Walking_Slight_Left_Turn");
  qword_256D718 = (uint64_t)operator new(0x20uLL);
  unk_256D720 = v278;
  strcpy((char *)qword_256D718, "Walking_Slight_Right_Turn");
  byte_256D747 = 4;
  strcpy((char *)&dword_256D730, "Exit");
  byte_256D75F = 4;
  strcpy((char *)&dword_256D748, "Road");
  byte_256D777 = 7;
  strcpy((char *)&dword_256D760, "Freeway");
  byte_256D78F = 12;
  strcpy((char *)&qword_256D778, "Intersection");
  byte_256D7A7 = 5;
  strcpy((char *)&dword_256D790, "Ferry");
  byte_256D7BF = 11;
  strcpy((char *)&qword_256D7A8, "ShuttleName");
  byte_256D7D7 = 5;
  strcpy((char *)&dword_256D7C0, "Road1");
  strcpy(&byte_256D7EF, "\tName");
  strcpy((char *)&qword_256D7D8, "Signpost1");
  byte_256D807 = 4;
  byte_256D81F = 7;
  strcpy((char *)&dword_256D808, "Address");
  byte_256D837 = 7;
  strcpy((char *)&dword_256D820, "Shield1");
  byte_256D84F = 13;
  strcpy((char *)&qword_256D838, "TowardShield1");
  byte_256D867 = 6;
  strcpy((char *)&dword_256D850, "Right_");
  byte_256D87F = 5;
  strcpy((char *)&dword_256D868, "Left_");
  strcpy(&byte_256D897, "\tOn_Left_");
  strcpy((char *)&qword_256D880, "On_Right_");
  byte_256D8AF = 8;
  byte_256D8C7 = 12;
  strcpy((char *)&qword_256D8B0, "ElevatorName");
  byte_256D8DF = 13;
  strcpy((char *)&qword_256D8C8, "EscalatorName");
  strcpy(&byte_256D8F7, "\nBridgeName");
  strcpy((char *)&qword_256D8E0, "StairsName");
  strcpy(&byte_256D90F, "\nTunnelName");
  strcpy(&byte_256D927, "\nParking");
  byte_256D93F = 7;
  strcpy(&byte_256D957, "\t_Escalator");
  strcpy((char *)&qword_256D940, "_Elevator");
  strcpy(&byte_256D96F, "\n_ElevatorName");
  byte_256D987 = 13;
  byte_256D99F = 14;
  strcpy((char *)&qword_256D988, "_EscalatorName");
  byte_256D9B7 = 5;
  strcpy((char *)&qword_256D9A0, "_Road");
  byte_256D9CF = 8;
  strcpy((char *)&qword_256D9B8, "_Freeway");
  byte_256D9E7 = 13;
  strcpy((char *)&qword_256D9D0, "_Intersection");
  byte_256D9FF = 6;
  strcpy((char *)&dword_256D9E8, "_Road1");
  byte_256DA17 = 6;
  strcpy((char *)&dword_256DA00, "_Road2");
  strcpy(&byte_256DA2F, "\n_Signpost2");
  strcpy((char *)&qword_256DA18, "_Signpost1");
  strcpy(&byte_256DA47, "\n_Ferry");
  byte_256DA5F = 6;
  byte_256DA77 = 12;
  strcpy((char *)&qword_256DA60, "_Ferry_Ferry");
  byte_256DA8F = 12;
  strcpy((char *)&qword_256DA78, "_ShuttleName");
  qword_256DA90 = (uint64_t)operator new(0x20uLL);
  unk_256DA98 = v277;
  strcpy((char *)qword_256DA90, "_Railway_Shuttle_ShuttleName");
  byte_256DABF = 11;
  strcpy((char *)&qword_256DAA8, "_ExitNumber");
  byte_256DAD7 = 5;
  strcpy((char *)&dword_256DAC0, "_Exit");
  byte_256DAEF = 7;
  strcpy((char *)&dword_256DAD8, "_StayOn");
  byte_256DB07 = 7;
  strcpy((char *)&dword_256DAF0, "_Stairs");
  byte_256DB1F = 5;
  strcpy((char *)&dword_256DB08, "_Ramp");
  byte_256DB37 = 11;
  strcpy((char *)&qword_256DB20, "_StairsName");
  strcpy(&byte_256DB4F, "\t_Down");
  strcpy((char *)&qword_256DB38, "_RampName");
  byte_256DB67 = 5;
  byte_256DB7F = 3;
  dword_256DB68 = 7361887;
  byte_256DB97 = 7;
  strcpy((char *)&dword_256DB80, "_Bridge");
  byte_256DBAF = 7;
  strcpy((char *)&dword_256DB98, "_Tunnel");
  byte_256DBC7 = 11;
  strcpy((char *)&qword_256DBB0, "_Roundabout");
  byte_256DBDF = 6;
  strcpy((char *)&dword_256DBC8, "_Cross");
  byte_256DBF7 = 8;
  strcpy((char *)&qword_256DBE0, "_Parking");
  byte_256DC0F = 8;
  strcpy((char *)&qword_256DBF8, "_Shield1");
  byte_256DC27 = 14;
  strcpy((char *)&qword_256DC10, "_TowardShield1");
  byte_256DC3F = 8;
  strcpy((char *)&qword_256DC28, "_Shield2");
  byte_256DC57 = 14;
  strcpy((char *)&qword_256DC40, "_TowardShield2");
  byte_256DC6F = 11;
  strcpy((char *)&qword_256DC58, "_Direction1");
  byte_256DC87 = 11;
  strcpy((char *)&qword_256DC70, "_Direction2");
  strcpy(&byte_256DC9F, "\n_TowardDirection1");
  strcpy((char *)&qword_256DC88, "Direction1");
  byte_256DCB7 = 17;
  byte_256DCCF = 17;
  strcpy((char *)&xmmword_256DCB8, "_TowardDirection2");
  byte_256DCE7 = 16;
  strcpy((char *)&xmmword_256DCD0, "TowardDirection1");
  byte_256DCFF = 7;
  strcpy((char *)&qword_256DCE8, "_Spoken");
  byte_256DD17 = 5;
  strcpy((char *)&qword_256DD00, "_Sign");
  byte_256DD2F = 15;
  strcpy((char *)&qword_256DD18, "_Secondary_Sign");
  byte_256DD47 = 5;
  byte_256DD34 = 116;
  dword_256DD30 = 1936280671;
  byte_256DD35 = 0;
  byte_256DD5F = 8;
  strcpy((char *)&qword_256DD48, "_Primary");
  qword_256DD70 = 0xF00000000000000;
  strcpy((char *)&qword_256DD60, "_Spoken_Primary");
  strcpy(&byte_256DD8F, "\n_Secondary");
  strcpy((char *)&qword_256DD78, "_Secondary");
  strcpy(&byte_256DDA7, "\n_Spoken_Secondar");
  BYTE1(qword_256DDB8) = 0;
  WORD1(qword_256DDB8) = 0;
  HIDWORD(qword_256DDB8) = 285212672;
  byte_256DDD7 = 13;
  strcpy((char *)&qword_256DDC0, "_To_Secondary");
  BYTE1(qword_256DDE8) = 0;
  WORD1(qword_256DDE8) = 0;
  HIDWORD(qword_256DDE8) = 335544320;
  strcpy((char *)&dword_256DDD8, "_Spoken_To_Secon");
  strcpy(&byte_256DE07, "\t_ValidDistance");
  strcpy((char *)&qword_256DDF0, "_Distance");
  byte_256DE1F = 14;
  byte_256DE37 = 6;
  strcpy((char *)&dword_256DE20, "_Short");
  byte_256DE4F = 1;
  word_256DE38 = 95;
  qword_256DE50 = (uint64_t)operator new(0x20uLL);
  unk_256DE58 = v279;
  strcpy((char *)qword_256DE50, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_256DE68 = (uint64_t)v1;
  *(_OWORD *)algn_256DE70 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  *(void *)(v1 + 15) = v269;
  v1[23] = 0;
  byte_256DE97 = 12;
  strcpy((char *)&qword_256DE80, "Chain_Spoken");
  byte_256DEAF = 15;
  strcpy((char *)&qword_256DE98, "Chain_To_Spoken");
  strcpy(&byte_256DEC7, "\nThen_Spoken");
  strcpy((char *)&qword_256DEB0, "And_Spoken");
  byte_256DEDF = 11;
  byte_256DEF7 = 18;
  strcpy(byte_256DEE0, "Concatenate_Spoken");
  qword_256DEF8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20B9240;
  unk_256DF00 = xmmword_20B9240;
  strcpy((char *)qword_256DEF8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_256DF10 = (uint64_t)operator new(0x28uLL);
  v267[1] = xmmword_20B9260;
  unk_256DF18 = xmmword_20B9260;
  strcpy((char *)qword_256DF10, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_256DF28 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_256DF30 = xmmword_20B9A90;
  strcpy((char *)qword_256DF28, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_256DF40 = (uint64_t)operator new(0x30uLL);
  long long v265 = xmmword_20B9A40;
  unk_256DF48 = xmmword_20B9A40;
  strcpy((char *)qword_256DF40, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_256DF58 = (uint64_t)operator new(0x28uLL);
  long long v264 = xmmword_20E12D0;
  unk_256DF60 = xmmword_20E12D0;
  strcpy((char *)qword_256DF58, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_256DF70 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_256DF78 = xmmword_20B9960;
  strcpy((char *)qword_256DF70, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_256DF88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256DF90 = xmmword_20B93A0;
  strcpy((char *)qword_256DF88, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_256DFA0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_256DFA8 = xmmword_20E1380;
  strcpy((char *)qword_256DFA0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_256DFB8 = (uint64_t)operator new(0x30uLL);
  unk_256DFC0 = xmmword_20B93C0;
  strcpy((char *)qword_256DFB8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_256DFD0 = (uint64_t)operator new(0x38uLL);
  unk_256DFD8 = xmmword_20B9A60;
  strcpy((char *)qword_256DFD0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_256DFE8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_256DFF0 = xmmword_20E1380;
  strcpy((char *)qword_256DFE8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_256E000 = (uint64_t)operator new(0x28uLL);
  unk_256E008 = xmmword_20B9960;
  strcpy((char *)qword_256E000, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_256E018 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  unk_256E020 = xmmword_20B93D0;
  strcpy((char *)qword_256E018, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_256E030 = (uint64_t)operator new(0x20uLL);
  unk_256E038 = v275;
  strcpy((char *)qword_256E030, "Walking_Distance_Chain_Spoken");
  qword_256E048 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256E050 = v275;
  strcpy((char *)qword_256E048, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_256E060 = (uint64_t)v2;
  unk_256E068 = v280;
  *(_OWORD *)uint64_t v2 = v270;
  *(void *)(v2 + 15) = v269;
  v2[23] = 0;
  unk_256E078 = operator new(0x28uLL);
  unk_256E080 = v268;
  strcpy(unk_256E078, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_256E090, "Walking_Continue_Cross");
  HIBYTE(word_256E0A6) = 22;
  byte_256E0BF = 14;
  strcpy(byte_256E0A8, "Continue_Cross");
  byte_256E0D7 = 5;
  strcpy(byte_256E0C0, "Cross");
  byte_256E0EF = 19;
  strcpy(byte_256E0D8, "Cross_Street_Spoken");
  byte_256E107 = 17;
  strcpy(algn_256E0F0, "Cross_Road_Spoken");
  byte_256E11F = 20;
  strcpy(byte_256E108, "Use_Crosswalk_Spoken");
  byte_256E137 = 15;
  strcpy(byte_256E120, "Distance_Spoken");
  byte_256E14F = 19;
  strcpy(byte_256E138, "Distance_And_Spoken");
  byte_256E167 = 21;
  strcpy(byte_256E150, "Continue_Stage_Spoken");
  byte_256E17F = 13;
  qmemcpy(&qword_256E168, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_256DD70);
  if (qword_256DD70 >= 0) {
    size_t v4 = HIBYTE(qword_256DD70);
  }
  else {
    size_t v4 = unk_256DD68;
  }
  unint64_t v5 = v4 + 13;
  byte_256E175 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    __int16 v9 = (char *)operator new(v7 + 1);
    qword_256E188 = v4 + 13;
    unk_256E190 = v8 | 0x8000000000000000;
    qword_256E180 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    std::string::size_type v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_256E188) = 0;
    WORD1(qword_256E188) = 0;
    HIDWORD(qword_256E188) = 0;
    unk_256E190 = 0;
    byte_256E197 = v4 + 13;
    strcpy((char *)&qword_256E180, "Continue");
    std::string::size_type v6 = (char *)&qword_256E188 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    char v10 = &qword_256DD60;
  }
  else {
    char v10 = (uint64_t *)qword_256DD60;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_256D9B7;
  if (byte_256D9B7 >= 0) {
    size_t v12 = byte_256D9B7;
  }
  else {
    size_t v12 = qword_256D9A8;
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    std::string::size_type v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *std::string::size_type v17 = qword_256E168;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_256E168 + 5);
    int v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_256E168 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_256E168;
    int v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    char v18 = &qword_256D9A0;
  }
  else {
    char v18 = (uint64_t *)qword_256D9A0;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    std::string::size_type v19 = (const std::string::value_type *)&qword_256DD60;
  }
  else {
    std::string::size_type v19 = (const std::string::value_type *)qword_256DD60;
  }
  size_t v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_256E1A8 = v20->__r_.__value_.__r.__words[2];
  xmmword_256E198 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_256E1C7 = 5;
  strcpy((char *)&dword_256E1B0, "Merge");
  qword_256E1C8 = (uint64_t)operator new(0x20uLL);
  long long v269 = xmmword_20B8E90;
  *(_OWORD *)algn_256E1D0 = xmmword_20B8E90;
  strcpy((char *)qword_256E1C8, "Continue_Freeway_Spoken_Primary");
  byte_256E1F7 = 8;
  strcpy((char *)&qword_256E1E0, "Starting");
  byte_256E20F = 14;
  strcpy((char *)&qword_256E1F8, "Starting_Route");
  byte_256E227 = 14;
  strcpy((char *)&qword_256E210, "Resuming_Route");
  byte_256E23F = 16;
  strcpy((char *)&xmmword_256E228, "Continuing_Route");
  byte_256E257 = 9;
  word_256E248 = 112;
  qword_256E240 = *(void *)&v263[48];
  strcpy(&byte_256E26F, "\nEnding");
  strcpy((char *)&word_256E260, "op");
  qword_256E258 = *(void *)&v267[0];
  byte_256E287 = 6;
  strcpy((char *)&qword_256E288, "_Destination");
  byte_256E29F = 12;
  byte_256E2B7 = 15;
  strcpy((char *)&qword_256E2A0, "_At_Destination");
  std::operator+<char>();
  qword_256E2D0 = (uint64_t)operator new(0x20uLL);
  unk_256E2D8 = v279;
  strcpy((char *)qword_256E2D0, "Spoken_Ending_At_Parking");
  qword_256E2E8 = (uint64_t)operator new(0x20uLL);
  v267[0] = xmmword_20B9800;
  xmmword_256E2F0 = xmmword_20B9800;
  strcpy((char *)qword_256E2E8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_256E300, "Sign_Ending_At_Parking");
  HIBYTE(word_256E316) = 22;
  byte_256E32F = 4;
  strcpy((char *)&dword_256E318, "Home");
  byte_256E347 = 4;
  strcpy((char *)&dword_256E330, "Work");
  byte_256E35F = 8;
  strcpy((char *)&qword_256E348, "Business");
  byte_256E377 = 4;
  strcpy((char *)&dword_256E360, "Name");
  byte_256E38F = 13;
  strcpy((char *)&qword_256E378, "Other_Contact");
  byte_256E3A7 = 11;
  strcpy((char *)&qword_256E390, "ContactHome");
  byte_256E3BF = 11;
  *(_DWORD *)((char *)&qword_256E3A8 + 7) = 1802661719;
  byte_256E3D7 = 7;
  *(int *)((char *)&dword_256E3C0 + 3) = 1936942450;
  dword_256E3C0 = 1919181889;
  strcpy((char *)&xmmword_256E3D8, "Discoverability_Prompt");
  HIBYTE(word_256E3EE) = 22;
  byte_256E407 = 6;
  dword_256E3F0 = 1634878303;
  word_256E3F4 = 26739;
  byte_256E41F = 8;
  qword_256E408 = 0x697269535F6F4E5FLL;
  byte_256E437 = 9;
  strcpy((char *)&qword_256E420, "_CityName");
  byte_256E44F = 8;
  qword_256E438 = 0x636972656E65475FLL;
  int v22 = byte_256E1F7;
  if (byte_256E1F7 >= 0) {
    size_t v23 = byte_256E1F7;
  }
  else {
    size_t v23 = qword_256E1E8;
  }
  LODWORD(v270) = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v24 = byte_256D537;
  }
  else {
    size_t v24 = unk_256D528;
  }
  qword_256E3A8 = *(void *)"ContactWork";
  byte_256E3B3 = 0;
  byte_256E3C7 = 0;
  byte_256E3F6 = 0;
  byte_256E410 = 0;
  byte_256E440 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v263 = *(void *)"ContactWork";
  *(void *)&v263[16] = *(void *)"ContactHome";
  *(void *)&v263[32] = *(void *)"_Contact";
  *(void *)&v263[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    unint64_t v26 = &qword_256E450;
    qword_256E458 = 0;
    unk_256E460 = 0;
    qword_256E450 = 0;
    byte_256E467 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  unint64_t v26 = (uint64_t *)operator new(v89 + 1);
  qword_256E458 = v24 + v23;
  unk_256E460 = v90 | 0x8000000000000000;
  qword_256E450 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      unint64_t v27 = &qword_256E1E0;
    }
    else {
      unint64_t v27 = (uint64_t *)qword_256E1E0;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  unint64_t v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v270 >= 0) {
      unint64_t v29 = &qword_256D520;
    }
    else {
      unint64_t v29 = (uint64_t *)qword_256D520;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_256E29F;
  if (byte_256E29F >= 0) {
    size_t v31 = byte_256E29F;
  }
  else {
    size_t v31 = qword_256E290;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    uint64_t v33 = &qword_256E468;
    qword_256E470 = 0;
    unk_256E478 = 0;
    qword_256E468 = 0;
    byte_256E47F = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  uint64_t v33 = (uint64_t *)operator new(v91 + 1);
  qword_256E470 = v31 + v23;
  unk_256E478 = v92 | 0x8000000000000000;
  qword_256E468 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      uint64_t v34 = &qword_256E1E0;
    }
    else {
      uint64_t v34 = (uint64_t *)qword_256E1E0;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  uint64_t v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v36 = &qword_256E288;
    }
    else {
      uint64_t v36 = (uint64_t *)qword_256E288;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_256E480 = (uint64_t)operator new(0x19uLL);
  unk_256E488 = v280;
  strcpy((char *)qword_256E480, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    uint64_t v37 = &qword_256E498;
    qword_256E4A0 = 0;
    unk_256E4A8 = 0;
    qword_256E498 = 0;
    byte_256E4AF = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v37 = (uint64_t *)operator new(v93 + 1);
  qword_256E4A0 = v31 + v23;
  unk_256E4A8 = v94 | 0x8000000000000000;
  qword_256E498 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      std::string::size_type v38 = &qword_256E1E0;
    }
    else {
      std::string::size_type v38 = (uint64_t *)qword_256E1E0;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  uint64_t v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v40 = &qword_256E288;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_256E288;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_256E4B0, "{NewBatteryPercentage}");
  HIBYTE(word_256E4C6) = 22;
  qword_256E4C8 = (uint64_t)operator new(0x20uLL);
  xmmword_256E4D0 = v273;
  strcpy((char *)qword_256E4C8, "{OriginalBatteryPercentage}");
  byte_256E4F7 = 19;
  strcpy((char *)&xmmword_256E4E0, "_Arrival_Percentage");
  int v41 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v42 = byte_256E287;
  }
  else {
    size_t v42 = qword_256E278;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      uint64_t v45 = &qword_256E270;
    }
    else {
      uint64_t v45 = (uint64_t *)qword_256E270;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  uint64_t v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v270 >= 0) {
      uint64_t v47 = &qword_256D520;
    }
    else {
      uint64_t v47 = (uint64_t *)qword_256D520;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  uint64_t v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_256E508 = v48->__r_.__value_.__r.__words[2];
  xmmword_256E4F8 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v51 = byte_256E287;
  }
  else {
    size_t v51 = qword_256E278;
  }
  int v52 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v53 = byte_256D537;
  }
  else {
    size_t v53 = unk_256D528;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    uint64_t v55 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  uint64_t v55 = (char *)operator new(v97 + 1);
  v281.__r_.__value_.__l.__size_ = v53 + v51;
  v281.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      uint64_t v56 = &qword_256E270;
    }
    else {
      uint64_t v56 = (uint64_t *)qword_256E270;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  uint64_t v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      uint64_t v58 = &qword_256D520;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_256D520;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_256D567 >= 0) {
    uint64_t v59 = (const std::string::value_type *)&qword_256D550;
  }
  else {
    uint64_t v59 = (const std::string::value_type *)qword_256D550;
  }
  if (byte_256D567 >= 0) {
    std::string::size_type v60 = byte_256D567;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_256D558;
  }
  uint64_t v61 = std::string::append(&v281, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  uint64_t v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  qword_256E520 = v63->__r_.__value_.__r.__words[2];
  xmmword_256E510 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v66 = byte_256E287;
  }
  else {
    size_t v66 = qword_256E278;
  }
  int v67 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v68 = byte_256D537;
  }
  else {
    size_t v68 = unk_256D528;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      v71 = &qword_256E270;
    }
    else {
      v71 = (uint64_t *)qword_256E270;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      v73 = &qword_256D520;
    }
    else {
      v73 = (uint64_t *)qword_256D520;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_256E538 = v74->__r_.__value_.__r.__words[2];
  xmmword_256E528 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v77 = byte_256E287;
  }
  else {
    size_t v77 = qword_256E278;
  }
  int v78 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v79 = byte_256D537;
  }
  else {
    size_t v79 = unk_256D528;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_256E548 = 0;
    unk_256E550 = 0;
    qword_256E540 = 0;
    v81 = &qword_256E540;
    byte_256E557 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  v81 = (uint64_t *)operator new(v101 + 1);
  qword_256E548 = v79 + v77;
  unk_256E550 = v102 | 0x8000000000000000;
  qword_256E540 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      v82 = &qword_256E270;
    }
    else {
      v82 = (uint64_t *)qword_256E270;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      v84 = &qword_256D520;
    }
    else {
      v84 = (uint64_t *)qword_256D520;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_256E557;
  if (byte_256E557 >= 0) {
    size_t v86 = byte_256E557;
  }
  else {
    size_t v86 = qword_256E548;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    v88 = (uint64_t *)operator new(v103 + 1);
    qword_256E560 = v86 + 5;
    unk_256E568 = v104 | 0x8000000000000000;
    qword_256E558 = (uint64_t)v88;
  }
  else
  {
    v88 = &qword_256E558;
    qword_256E560 = 0;
    unk_256E568 = 0;
    qword_256E558 = 0;
    byte_256E56F = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    v105 = &qword_256E540;
  }
  else {
    v105 = (uint64_t *)qword_256E540;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v107 = byte_256E287;
  }
  else {
    size_t v107 = qword_256E278;
  }
  int v108 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v109 = byte_256D537;
  }
  else {
    size_t v109 = unk_256D528;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      v112 = &qword_256E270;
    }
    else {
      v112 = (uint64_t *)qword_256E270;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      v114 = &qword_256D520;
    }
    else {
      v114 = (uint64_t *)qword_256D520;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_256E580 = v115->__r_.__value_.__r.__words[2];
  xmmword_256E570 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_256E580);
  if (qword_256E580 >= 0) {
    size_t v118 = HIBYTE(qword_256E580);
  }
  else {
    size_t v118 = *((void *)&xmmword_256E570 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    v120 = (uint64_t *)operator new(v123 + 1);
    qword_256E590 = v118 + 6;
    unk_256E598 = v124 | 0x8000000000000000;
    qword_256E588 = (uint64_t)v120;
  }
  else
  {
    v120 = &qword_256E588;
    qword_256E590 = 0;
    unk_256E598 = 0;
    qword_256E588 = 0;
    byte_256E59F = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    v125 = &xmmword_256E570;
  }
  else {
    v125 = (long long *)xmmword_256E570;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v127 = byte_256E287;
  }
  else {
    size_t v127 = qword_256E278;
  }
  int v128 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v129 = byte_256D537;
  }
  else {
    size_t v129 = unk_256D528;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_256E270;
    }
    else {
      v132 = (uint64_t *)qword_256E270;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      v134 = &qword_256D520;
    }
    else {
      v134 = (uint64_t *)qword_256D520;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_256DCFF >= 0) {
    v135 = (const std::string::value_type *)&qword_256DCE8;
  }
  else {
    v135 = (const std::string::value_type *)qword_256DCE8;
  }
  if (byte_256DCFF >= 0) {
    std::string::size_type v136 = byte_256DCFF;
  }
  else {
    std::string::size_type v136 = unk_256DCF0;
  }
  v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_256E5B0 = v137->__r_.__value_.__r.__words[2];
  xmmword_256E5A0 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_256E287;
  if (byte_256E287 >= 0) {
    size_t v140 = byte_256E287;
  }
  else {
    size_t v140 = qword_256E278;
  }
  int v141 = byte_256D537;
  if (byte_256D537 >= 0) {
    size_t v142 = byte_256D537;
  }
  else {
    size_t v142 = unk_256D528;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v144 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  v144 = (char *)operator new(v162 + 1);
  v281.__r_.__value_.__l.__size_ = v142 + v140;
  v281.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_256E270;
    }
    else {
      v145 = (uint64_t *)qword_256E270;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      v147 = &qword_256D520;
    }
    else {
      v147 = (uint64_t *)qword_256D520;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_256D567 >= 0) {
    v148 = (const std::string::value_type *)&qword_256D550;
  }
  else {
    v148 = (const std::string::value_type *)qword_256D550;
  }
  if (byte_256D567 >= 0) {
    std::string::size_type v149 = byte_256D567;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_256D558;
  }
  v150 = std::string::append(&v281, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_256DCFF >= 0) {
    v152 = (const std::string::value_type *)&qword_256DCE8;
  }
  else {
    v152 = (const std::string::value_type *)qword_256DCE8;
  }
  if (byte_256DCFF >= 0) {
    std::string::size_type v153 = byte_256DCFF;
  }
  else {
    std::string::size_type v153 = unk_256DCF0;
  }
  v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_256E5C8 = v154->__r_.__value_.__r.__words[2];
  xmmword_256E5B8 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_301:
  byte_256E5E7 = 16;
  strcpy((char *)&xmmword_256E5D0, "Use_NACS_Adapter");
  byte_256E5FF = 16;
  strcpy(byte_256E5E8, "Start_Route_Sign");
  qword_256E600 = (uint64_t)operator new(0x20uLL);
  unk_256E608 = v276;
  strcpy((char *)qword_256E600, "Start_Route_Spoken_Primary");
  int v156 = byte_256CC97;
  if (byte_256CC97 >= 0) {
    size_t v157 = byte_256CC97;
  }
  else {
    size_t v157 = qword_256CC88;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    v159 = &qword_256E618;
    qword_256E620 = 0;
    unk_256E628 = 0;
    qword_256E618 = 0;
    byte_256E62F = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      v166 = &qword_256CC80;
    }
    else {
      v166 = (uint64_t *)qword_256CC80;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  v159 = (uint64_t *)operator new(v164 + 1);
  qword_256E620 = v157 + 27;
  unk_256E628 = v165 | 0x8000000000000000;
  qword_256E618 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_256E647, "\t_Two_Lanes");
  strcpy((char *)&qword_256E630, "_One_Lane");
  strcpy(&byte_256E65F, "\n_Three_Lanes");
  byte_256E677 = 12;
  byte_256E68F = 11;
  strcpy((char *)&qword_256E678, "_Four_Lanes");
  byte_256E6A7 = 11;
  strcpy((char *)&qword_256E690, "_Five_Lanes");
  strcpy(&byte_256E6BF, "\n_Seven_Lanes");
  strcpy((char *)&qword_256E6A8, "_Six_Lanes");
  byte_256E6D7 = 12;
  byte_256E6EF = 12;
  strcpy((char *)&qword_256E6D8, "_Eight_Lanes");
  byte_256E707 = 12;
  strcpy((char *)&qword_256E6F0, "_Second_Lane");
  byte_256E71F = 11;
  strcpy((char *)&qword_256E708, "_Third_Lane");
  byte_256E737 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_256E720, "_Second_Third_Lanes");
  byte_256E74F = 4;
  strcpy((char *)&dword_256E738, "Left");
  byte_256E767 = 5;
  byte_256E754 = 116;
  dword_256E750 = 1751607634;
  byte_256E755 = 0;
  byte_256E77F = 6;
  strcpy((char *)&dword_256E768, "Middle");
  BYTE1(qword_256E790) = 0;
  WORD1(qword_256E790) = 0;
  HIDWORD(qword_256E790) = 0x10000000;
  strcpy((char *)dword_256E780, "Left_Second_Lane");
  BYTE1(qword_256E7A8) = 0;
  WORD1(qword_256E7A8) = 0;
  HIDWORD(qword_256E7A8) = 285212672;
  strcpy((char *)&dword_256E798, "Right_Second_Lan");
  qword_256E7C0 = 0xF00000000000000;
  strcpy((char *)&dword_256E7B0, "Left_Third_Lane");
  qword_256E7D8 = 0x1000000000000000;
  byte_256E7CC = 116;
  dword_256E7C8 = 1751607634;
  dword_256E7D4 = 1701732684;
  unk_256E7CD = *(void *)"_Third_Lane";
  v167 = (char *)operator new(0x19uLL);
  qword_256E7E0 = (uint64_t)v167;
  unk_256E7E8 = v280;
  *(_DWORD *)v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v270;
  v168 = (char *)operator new(0x20uLL);
  qword_256E7F8 = (uint64_t)v168;
  xmmword_256E800 = v279;
  *(_DWORD *)v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v270;
  byte_256E827 = 5;
  strcpy((char *)&dword_256E810, "_Stay");
  byte_256E83F = 13;
  strcpy((char *)&qword_256E828, "Continue_Sign");
  byte_256E857 = 8;
  strcpy((char *)&qword_256E840, "Continue");
  int v169 = byte_256DD17;
  if (byte_256DD17 >= 0) {
    size_t v170 = byte_256DD17;
  }
  else {
    size_t v170 = qword_256DD08;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    v175 = operator new(v173 + 1);
    qword_256E860 = v170 + 8;
    qword_256E868 = v174 | 0x8000000000000000;
    qword_256E858 = (uint64_t)v175;
    void *v175 = 0x65756E69746E6F43;
    v172 = v175 + 1;
  }
  else
  {
    qword_256E868 = 0;
    HIBYTE(qword_256E868) = v170 + 8;
    qword_256E858 = 0x65756E69746E6F43;
    qword_256E860 = 0;
    v172 = &qword_256E860;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    v176 = &qword_256DD00;
  }
  else {
    v176 = (uint64_t *)qword_256DD00;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_256DD70);
  if (qword_256DD70 >= 0) {
    size_t v178 = HIBYTE(qword_256DD70);
  }
  else {
    size_t v178 = unk_256DD68;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    v183 = operator new(v181 + 1);
    qword_256E878 = v178 + 8;
    qword_256E880 = v182 | 0x8000000000000000;
    qword_256E870 = (uint64_t)v183;
    void *v183 = qword_256E840;
    v180 = v183 + 1;
  }
  else
  {
    qword_256E880 = 0;
    HIBYTE(qword_256E880) = v178 + 8;
    qword_256E870 = qword_256E840;
    qword_256E878 = 0;
    v180 = &qword_256E878;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    v184 = &qword_256DD60;
  }
  else {
    v184 = (uint64_t *)qword_256DD60;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v283[23] = 2;
  strcpy(v283, "SW");
  v285[7] = 1;
  LOWORD(v284[0]) = 87;
  HIBYTE(v286) = 2;
  strcpy(&v285[8], "NW");
  HIBYTE(v288) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v290) = 2;
  strcpy((char *)&v289, "NE");
  HIBYTE(v292) = 1;
  LOWORD(v291) = 69;
  HIBYTE(v294) = 2;
  strcpy((char *)&v293, "SE");
  sub_4BDC0C(qword_256E888, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v294) < 0)
  {
    operator delete((void *)v293);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v290) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_256E8B7 = 13;
  strcpy((char *)&qword_256E8A0, "{instruction}");
  byte_256E8CF = 20;
  strcpy(byte_256E8B8, "{primaryInstruction}");
  strcpy((char *)&xmmword_256E8D0, "{secondaryInstruction}");
  HIBYTE(word_256E8E6) = 22;
  qword_256E8E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256E8F0 = v278;
  strcpy((char *)qword_256E8E8, "{andSecondaryInstruction}");
  qword_256E900 = (uint64_t)operator new(0x20uLL);
  unk_256E908 = v279;
  strcpy((char *)qword_256E900, "{toSecondaryInstruction}");
  byte_256E92F = 21;
  strcpy(byte_256E918, "{continueInstruction}");
  qword_256E930 = (uint64_t)operator new(0x20uLL);
  unk_256E938 = v276;
  strcpy((char *)qword_256E930, "{thenSecondaryInstruction}");
  byte_256E95F = 14;
  strcpy((char *)&qword_256E948, "{instruction1}");
  byte_256E977 = 14;
  strcpy((char *)&qword_256E960, "{instruction2}");
  strcpy(&byte_256E98F, "\n{nextDistance}");
  strcpy((char *)&qword_256E978, "{distance}");
  byte_256E9A7 = 14;
  byte_256E9BF = 16;
  strcpy(byte_256E9A8, "{valid_distance}");
  strcpy(&byte_256E9D7, "\n{valid_distance}");
  strcpy((char *)&qword_256E9C0, "{distance}");
  byte_256E9EF = 16;
  byte_256EA07 = 15;
  strcpy((char *)&qword_256E9F0, "{ClimbDistance}");
  byte_256EA1F = 17;
  strcpy(byte_256EA08, "{DescentDistance}");
  byte_256EA37 = 13;
  strcpy((char *)&qword_256EA20, "{nonBrkSpace}");
  byte_256EA4F = 9;
  strcpy((char *)&qword_256EA38, "{newLine}");
  byte_256EA67 = 6;
  word_256EA54 = -24382;
  dword_256EA50 = -1211981630;
  byte_256EA56 = 0;
  byte_256EA7F = 2;
  word_256EA68 = -24382;
  byte_256EA6A = 0;
  byte_256EA97 = 1;
  word_256EA80 = 10;
  byte_256EAAF = 1;
  word_256EA98 = 32;
  byte_256EAC7 = 2;
  strcpy((char *)&word_256EAB0, "\n\n");
  strcpy(&byte_256EADF, "\t{TowardShield1}");
  strcpy((char *)&qword_256EAC8, "{Shield1}");
  byte_256EAF7 = 15;
  strcpy(&byte_256EB0F, "\t{TowardShield2}");
  strcpy((char *)&qword_256EAF8, "{Shield2}");
  byte_256EB27 = 15;
  byte_256EB3F = 12;
  strcpy((char *)&qword_256EB28, "{Direction1}");
  byte_256EB57 = 12;
  strcpy((char *)&qword_256EB40, "{Direction2}");
  byte_256EB6F = 18;
  strcpy(byte_256EB58, "{TowardDirection1}");
  byte_256EB87 = 18;
  strcpy((char *)&xmmword_256EB70, "{TowardDirection2}");
  byte_256EB9F = 7;
  strcpy((char *)&dword_256EB88, "{Icon1}");
  byte_256EBB7 = 7;
  strcpy((char *)&dword_256EBA0, "{Icon2}");
  byte_256EBB8[23] = 14;
  strcpy(byte_256EBB8, "{Intersection}");
  byte_256EBE7 = 6;
  strcpy((char *)&xmmword_256EBD0, "{Road}");
  byte_256EBFF = 7;
  strcpy((char *)&dword_256EBE8, "{Road1}");
  byte_256EC17 = 7;
  strcpy((char *)&xmmword_256EC00, "{Road2}");
  strcpy(&byte_256EC2F, "\n{Freeway}");
  strcpy((char *)&xmmword_256EC18, "{Elevator}");
  strcpy(&byte_256EC47, "\t{Ferry}");
  byte_256EC5F = 7;
  byte_256EC77 = 13;
  strcpy((char *)&xmmword_256EC60, "{ShuttleName}");
  byte_256EC8F = 11;
  strcpy((char *)&xmmword_256EC78, "{Signpost1}");
  byte_256ECA7 = 11;
  strcpy((char *)&xmmword_256EC90, "{Signpost2}");
  byte_256ECBF = 12;
  strcpy((char *)&xmmword_256ECA8, "{ExitNumber}");
  strcpy(&byte_256ECD7, "\t{Name}");
  strcpy((char *)&xmmword_256ECC0, "{Address}");
  byte_256ECEF = 6;
  byte_256ED07 = 11;
  strcpy((char *)&xmmword_256ECF0, "{PlaceName}");
  byte_256ED1F = 14;
  strcpy((char *)&xmmword_256ED08, "{ElevatorName}");
  byte_256ED37 = 15;
  strcpy((char *)&xmmword_256ED20, "{EscalatorName}");
  byte_256ED4F = 12;
  strcpy((char *)&xmmword_256ED38, "{StairsName}");
  strcpy(&byte_256ED67, "\n{BridgeName}");
  strcpy((char *)&xmmword_256ED50, "{RampName}");
  byte_256ED7F = 12;
  byte_256ED97 = 12;
  strcpy((char *)&xmmword_256ED80, "{TunnelName}");
  byte_256EDAF = 13;
  strcpy((char *)&xmmword_256ED98, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_256EBB8;
  *(_OWORD *)std::string v283 = xmmword_256EBD0;
  *(void *)&v283[16] = unk_256EBE0;
  *(_OWORD *)v284 = *(_OWORD *)&dword_256EBE8;
  *(void *)v285 = unk_256EBF8;
  *(_OWORD *)&v285[8] = xmmword_256EC00;
  uint64_t v286 = unk_256EC10;
  *(_OWORD *)std::string __p = xmmword_256EC18;
  uint64_t v288 = unk_256EC28;
  uint64_t v290 = unk_256EC40;
  long long v289 = xmmword_256EC30;
  long long v291 = xmmword_256EC48;
  uint64_t v292 = unk_256EC58;
  uint64_t v294 = unk_256EC70;
  long long v293 = xmmword_256EC60;
  long long v295 = xmmword_256EC78;
  uint64_t v296 = unk_256EC88;
  uint64_t v298 = unk_256ECA0;
  long long v297 = xmmword_256EC90;
  long long v299 = xmmword_256ECA8;
  long long v301 = xmmword_256ECC0;
  uint64_t v300 = unk_256ECB8;
  uint64_t v302 = unk_256ECD0;
  long long v303 = xmmword_256ECD8;
  long long v305 = xmmword_256ECF0;
  uint64_t v304 = unk_256ECE8;
  uint64_t v306 = unk_256ED00;
  long long v307 = xmmword_256ED08;
  long long v309 = xmmword_256ED20;
  uint64_t v308 = unk_256ED18;
  uint64_t v310 = unk_256ED30;
  long long v311 = xmmword_256ED38;
  long long v313 = xmmword_256ED50;
  uint64_t v312 = unk_256ED48;
  uint64_t v314 = unk_256ED60;
  long long v315 = xmmword_256ED68;
  long long v317 = xmmword_256ED80;
  uint64_t v316 = unk_256ED78;
  uint64_t v318 = unk_256ED90;
  uint64_t v320 = unk_256EDA8;
  long long v319 = xmmword_256ED98;
  sub_4BDC0C(qword_256EDB0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v320) < 0)
  {
    operator delete((void *)v319);
    if ((SHIBYTE(v318) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v316) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_256EDC8 = (uint64_t)operator new(0x19uLL);
  unk_256EDD0 = v280;
  strcpy((char *)qword_256EDC8, "From_User_Location_List");
  byte_256EDF7 = 20;
  strcpy(byte_256EDE0, "Origin_Waypoint_List");
  qword_256EDF8 = (uint64_t)operator new(0x20uLL);
  unk_256EE00 = v276;
  strcpy((char *)qword_256EDF8, "Intermediate_Waypoint_List");
  unk_256EE10 = operator new(0x20uLL);
  unk_256EE18 = v278;
  strcpy(unk_256EE10, "Destination_Waypoint_List");
  byte_256EE3F = 15;
  strcpy(byte_256EE28, "{toDestination}");
  byte_256EE57 = 13;
  strcpy((char *)&xmmword_256EE40, "{Destination}");
  byte_256EE6F = 7;
  strcpy(byte_256EE58, "To_Home");
  byte_256EE87 = 14;
  strcpy(byte_256EE70, "To_ContactHome");
  byte_256EE9F = 7;
  strcpy(byte_256EE88, "To_Work");
  byte_256EEB7 = 14;
  strcpy(byte_256EEA0, "To_ContactWork");
  strcpy(&byte_256EECF, "\nTo_Business");
  strcpy(byte_256EEB8, "To_Address");
  byte_256EEE7 = 11;
  byte_256EEFF = 16;
  strcpy(byte_256EEE8, "To_Other_Contact");
  strcpy(&byte_256EF17, "\tTo_ContactSchool");
  strcpy(byte_256EF00, "To_School");
  byte_256EF2F = 16;
  byte_256EF47 = 17;
  strcpy(algn_256EF30, "To_PersonLocation");
  qword_256EF48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256EF50 = v277;
  strcpy((char *)qword_256EF48, "To_ContactCustomLabelAddress");
  byte_256EF77 = 7;
  strcpy((char *)&dword_256EF60, "At_Home");
  byte_256EF8F = 14;
  strcpy((char *)&qword_256EF78, "At_ContactHome");
  byte_256EFA7 = 7;
  strcpy((char *)&dword_256EF90, "At_Work");
  byte_256EFBF = 14;
  strcpy((char *)&qword_256EFA8, "At_ContactWork");
  strcpy(&byte_256EFD7, "\nAt_Business");
  strcpy((char *)&qword_256EFC0, "At_Address");
  byte_256EFEF = 11;
  byte_256F007 = 16;
  strcpy(algn_256EFF0, "At_Other_Contact");
  byte_256F01F = 4;
  strcpy((char *)&dword_256F008, "Home");
  byte_256F037 = 11;
  strcpy((char *)&qword_256F020 + 7, "Home");
  qword_256F020 = *(void *)&v263[16];
  byte_256F04F = 4;
  strcpy((char *)&dword_256F038, "Work");
  byte_256F067 = 11;
  strcpy((char *)&qword_256F050 + 7, "Work");
  qword_256F050 = *(void *)v263;
  byte_256F07F = 7;
  strcpy((char *)&dword_256F068, "Address");
  byte_256F097 = 8;
  strcpy((char *)&qword_256F080, "Business");
  byte_256F0AF = 13;
  qword_256F098 = *(void *)&v263[48];
  *(uint64_t *)((char *)&qword_256F098 + 5) = *(void *)&v263[32];
  byte_256F0A5 = 0;
  byte_256F0C7 = 6;
  strcpy((char *)&dword_256F0B0, "School");
  byte_256F0DF = 13;
  strcpy((char *)&qword_256F0C8, "ContactSchool");
  byte_256F0F7 = 14;
  strcpy((char *)&qword_256F0E0, "PersonLocation");
  qword_256F0F8 = (uint64_t)operator new(0x20uLL);
  xmmword_256F100 = v278;
  strcpy((char *)qword_256F0F8, "ContactCustomLabelAddress");
  if (byte_256EE57 < 0)
  {
    sub_4200(&xmmword_256F110, (void *)xmmword_256EE40, *((unint64_t *)&xmmword_256EE40 + 1));
  }
  else
  {
    xmmword_256F110 = xmmword_256EE40;
    qword_256F120 = unk_256EE50;
  }
  byte_256F13F = 16;
  strcpy((char *)&xmmword_256F128, "{PrevExitNumber}");
  byte_256F157 = 10;
  strcpy((char *)&qword_256F140, "{PrevRoad}");
  qword_256F158 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256F160 = v279;
  strcpy((char *)qword_256F158, "{RouteTotalExpectedTime}");
  byte_256F187 = 18;
  strcpy(&algn_256F160[16], "{ChargePercentage}");
  qword_256F188 = (uint64_t)operator new(0x20uLL);
  unk_256F190 = v273;
  strcpy((char *)qword_256F188, "{RemainingChargePercentage}");
  byte_256F1B7 = 16;
  strcpy(byte_256F1A0, "{ChargeDuration}");
  byte_256F1CF = 15;
  strcpy((char *)&qword_256F1B8, "{ConnectorType}");
  byte_256F1E7 = 19;
  strcpy(byte_256F1D0, "{ChargeStationName}");
  byte_256F1FF = 7;
  strcpy((char *)&dword_256F1E8, "{Power}");
  byte_256F217 = 13;
  strcpy((char *)&qword_256F200, "{VehicleName}");
  byte_256F22F = 18;
  strcpy((char *)&xmmword_256F218, "{AreaIncidentName}");
  byte_256F247 = 14;
  strcpy((char *)&qword_256F230, "{AreaIncident}");
  byte_256F25F = 16;
  strcpy((char *)&xmmword_256F248, "{AffectedRegion}");
  byte_256F277 = 21;
  strcpy(byte_256F260, "{AreaIncidentWeblink}");
  byte_256F28F = 20;
  strcpy((char *)&xmmword_256F278, "{AreaIncidentAgency}");
  byte_256F2A7 = 11;
  strcpy((char *)&qword_256F290, "{IssueTime}");
  byte_256F2BF = 12;
  strcpy((char *)&qword_256F2A8, "{UpdateTime}");
  byte_256F2D7 = 11;
  strcpy((char *)&qword_256F2C0, "{IssueDate}");
  byte_256F2EF = 12;
  strcpy((char *)&qword_256F2D8, "{UpdateDate}");
  qword_256F2F0 = (uint64_t)operator new(0x20uLL);
  unk_256F2F8 = v279;
  strcpy((char *)qword_256F2F0, "{AreaIncidentDataSource}");
  byte_256F31F = 13;
  strcpy((char *)&qword_256F308, "{AreaHectare}");
  byte_256F337 = 10;
  strcpy((char *)&qword_256F320, "{AreaAcre}");
  qword_256F338 = (uint64_t)operator new(0x20uLL);
  unk_256F340 = v275;
  strcpy((char *)qword_256F338, "{WildfirePercentageContained}");
  qword_256F350 = (uint64_t)operator new(0x28uLL);
  unk_256F358 = v267[1];
  strcpy((char *)qword_256F350, "{WildfireExpectedContainmentDate}");
  qword_256F368 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_256F370 = v277;
  strcpy((char *)qword_256F368, "{ServerRecommendedRouteName}");
  qword_256F380 = (uint64_t)operator new(0x20uLL);
  unk_256F388 = v277;
  strcpy((char *)qword_256F380, "{ServerNonRecommendedRoute1}");
  qword_256F398 = (uint64_t)operator new(0x20uLL);
  unk_256F3A0 = v277;
  strcpy((char *)qword_256F398, "{ServerNonRecommendedRoute2}");
  byte_256F3C7 = 12;
  strcpy((char *)&qword_256F3B0, "{ClientDest}");
  byte_256F3DF = 6;
  strcpy((char *)&dword_256F3C8, "{Name}");
  qword_256F3E0 = (uint64_t)operator new(0x20uLL);
  unk_256F3E8 = v269;
  strcpy((char *)qword_256F3E0, "ProactiveAlert_FasterRouteTitle");
  qword_256F3F8 = (uint64_t)operator new(0x20uLL);
  unk_256F400 = v276;
  strcpy((char *)qword_256F3F8, "ProactiveAlert_RoadClosure");
  qword_256F410 = (uint64_t)operator new(0x30uLL);
  unk_256F418 = v271;
  strcpy((char *)qword_256F410, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_256F428 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256F430 = v274;
  strcpy((char *)qword_256F428, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_256F440 = (uint64_t)operator new(0x28uLL);
  unk_256F448 = v274;
  strcpy((char *)qword_256F440, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_256F458 = (uint64_t)operator new(0x28uLL);
  unk_256F460 = v274;
  strcpy((char *)qword_256F458, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_256F470 = (uint64_t)operator new(0x30uLL);
  unk_256F478 = xmmword_20B93B0;
  strcpy((char *)qword_256F470, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_256F49F = 17;
  strcpy(byte_256F488, "Proactive_Driving");
  strcpy(&byte_256F4B7, "\n{RouteName}");
  strcpy((char *)&qword_256F4A0, "_RouteName");
  byte_256F4CF = 11;
  qword_256F4D0 = (uint64_t)operator new(0x28uLL);
  unk_256F4D8 = v267[1];
  strcpy((char *)qword_256F4D0, "Pass_Traffic_Light_Spoken_Primary");
  qword_256F4E8 = (uint64_t)operator new(0x20uLL);
  unk_256F4F0 = v275;
  strcpy((char *)qword_256F4E8, "Pass_Stop_Sign_Spoken_Primary");
  unk_256F500 = operator new(0x20uLL);
  unk_256F508 = v267[0];
  strcpy(unk_256F500, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_256F52F, "\nBannerBody");
  strcpy(byte_256F518, "BannerHead");
  strcpy(&byte_256F547, "\nBannerDescription");
  byte_256F55F = 17;
  strcpy(&byte_256F577, "\n_Incident");
  strcpy((char *)&qword_256F560, "VoiceAlert");
  strcpy(&byte_256F58F, "\t_Area_Incident");
  byte_256F5A7 = 14;
  byte_256F5BF = 15;
  strcpy((char *)&qword_256F5A8, "_Area_Incidents");
  strcpy(&byte_256F5D7, "\t_Crash");
  strcpy((char *)&qword_256F5C0, "_Accident");
  byte_256F5EF = 6;
  byte_256F607 = 16;
  strcpy((char *)&xmmword_256F5F0, "_Congestion_Zone");
  strcpy(&byte_256F61F, "\n_Environmental_Zone");
  strcpy((char *)&qword_256F608, "_Toll_Zone");
  byte_256F637 = 19;
  BYTE1(qword_256F648) = 116;
  WORD1(qword_256F648) = 0;
  HIDWORD(qword_256F648) = 301989888;
  strcpy(byte_256F650, "_Construction");
  strcpy((char *)&qword_256F638, "_Incident_Accide");
  byte_256F667 = 13;
  byte_256F67F = 7;
  strcpy((char *)&dword_256F668, "_Hazard");
  byte_256F697 = 12;
  strcpy((char *)&qword_256F680, "_LaneClosure");
  byte_256F6AF = 12;
  strcpy((char *)&qword_256F698, "_LaneTrailer");
  qmemcpy(&byte_256F6C7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_256F6B0, "_Shoulder");
  qword_256F6D8 = 0x1500007200000000;
  *(void *)algn_256F6D4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_256F6E0, "_Causing_Traffic_Delay");
  HIBYTE(word_256F6F6) = 22;
  byte_256F70F = 6;
  strcpy((char *)&dword_256F6F8, "_Timed");
  byte_256F727 = 12;
  strcpy((char *)&qword_256F710, "_HasDistance");
  byte_256F73F = 8;
  strcpy((char *)&qword_256F728, "_Closure");
  strcpy(&byte_256F757, "\n_BadRoad");
  strcpy((char *)&qword_256F740, "_NoReroute");
  byte_256F76F = 8;
  byte_256F787 = 12;
  strcpy((char *)&qword_256F770, "_TollTrailer");
  byte_256F79F = 12;
  strcpy((char *)&qword_256F788, "_BestTrailer");
  byte_256F7B7 = 8;
  strcpy((char *)&qword_256F7A0, "_Trailer");
  byte_256F7CF = 18;
  strcpy((char *)&xmmword_256F7B8, "_Secondary_Trailer");
  byte_256F7E7 = 8;
  strcpy((char *)&qword_256F7D0, "_Savings");
  byte_256F7FF = 8;
  strcpy((char *)&qword_256F7E8, "_AltRoad");
  byte_256F817 = 6;
  strcpy((char *)&dword_256F800, "_Named");
  byte_256F82F = 6;
  strcpy((char *)&dword_256F818, "_NAMED");
  byte_256F847 = 22;
  strcpy((char *)&xmmword_256F830, "_Named_Suggested_Route");
  qword_256F860 = 0x1000000000000000;
  xmmword_256F850 = xmmword_20E81D0;
  byte_256F87F = 11;
  strcpy((char *)&qword_256F868, "_Speed_Trap");
  byte_256F897 = 4;
  strcpy((char *)&dword_256F880, "_UGI");
  byte_256F8AF = 12;
  strcpy((char *)&qword_256F898, "_Safer_Route");
  *(void *)&xmmword_256F8B0 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256F8B0 + 8) = v269;
  strcpy((char *)xmmword_256F8B0, "BlockedRouteByBlockingIncident_");
  *(void *)&xmmword_256F8C8 = operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  *(long long *)((char *)&xmmword_256F8C8 + 8) = xmmword_20B9280;
  strcpy((char *)xmmword_256F8C8, "BlockedRouteByManeuverRestriction_");
  *(void *)&xmmword_256F8E0 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256F8E0 + 8) = v267[0];
  strcpy((char *)xmmword_256F8E0, "BlockedRouteByTimeRestriction_");
  *(void *)&xmmword_256F8F8 = operator new(0x28uLL);
  *(long long *)((char *)&xmmword_256F8F8 + 8) = xmmword_20B8FD0;
  strcpy((char *)xmmword_256F8F8, "SuggestRouteToAvoidBlockingIncident_");
  *(void *)&xmmword_256F910 = operator new(0x30uLL);
  *(long long *)((char *)&xmmword_256F910 + 8) = xmmword_20B9380;
  strcpy((char *)xmmword_256F910, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  *(void *)&xmmword_256F928 = operator new(0x30uLL);
  *(long long *)((char *)&xmmword_256F928 + 8) = xmmword_20B93E0;
  strcpy((char *)xmmword_256F928, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_256F957 = 1;
  LOWORD(qword_256F940) = 95;
  strcpy((char *)&xmmword_256F958, "IncidentsCausingDelay_");
  byte_256F96F = 22;
  *(void *)&xmmword_256F970 = operator new(0x19uLL);
  *(long long *)((char *)&xmmword_256F970 + 8) = v280;
  strcpy((char *)xmmword_256F970, "NonVotableRoadIncident_");
  byte_256F99F = 20;
  strcpy((char *)&xmmword_256F988, "VotableRoadIncident_");
  byte_256F9B7 = 13;
  strcpy((char *)&xmmword_256F9A0, "AreaIncident_");
  byte_256F9CF = 15;
  strcpy((char *)&xmmword_256F9B8, "CongestionZone_");
  *(void *)&xmmword_256F9D0 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256F9D0 + 8) = v279;
  strcpy((char *)xmmword_256F9D0, "EVModifiedChargingStops_");
  byte_256F9FF = 13;
  strcpy((char *)&xmmword_256F9E8, "EVDisconnect_");
  byte_256FA17 = 12;
  strcpy((char *)&xmmword_256FA00, "EVReconnect_");
  *(void *)&xmmword_256FA18 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256FA18 + 8) = v277;
  strcpy((char *)xmmword_256FA18, "EVOfflineToOnlineTransition_");
  byte_256FA47 = 13;
  strcpy((char *)&xmmword_256FA30, "EVOfflineSAR_");
  byte_256FA5F = 21;
  strcpy((char *)&xmmword_256FA48, "EVTowingNotSupported_");
  byte_256FA77 = 18;
  strcpy((char *)&xmmword_256FA60, "EVInfeasibleRoute_");
  *(void *)&xmmword_256FA78 = operator new(0x38uLL);
  *(long long *)((char *)&xmmword_256FA78 + 8) = xmmword_20B8DF0;
  strcpy((char *)xmmword_256FA78, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  *(void *)&xmmword_256FA90 = operator new(0x40uLL);
  *(long long *)((char *)&xmmword_256FA90 + 8) = xmmword_20B98C0;
  strcpy((char *)xmmword_256FA90, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  *(void *)&xmmword_256FAA8 = operator new(0x30uLL);
  *(long long *)((char *)&xmmword_256FAA8 + 8) = v272;
  strcpy((char *)xmmword_256FAA8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v267, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v267));
  *(void *)&xmmword_256FAC0 = operator new(0x30uLL);
  *(_WORD *)&v263[50] = 0;
  *(_DWORD *)&v263[52] = 0;
  *(void *)&v263[56] = 0x8000000000000030;
  *(long long *)((char *)&xmmword_256FAC0 + 8) = xmmword_20B9A80;
  strcpy((char *)xmmword_256FAC0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v263, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  *(void *)&xmmword_256FAD8 = operator new(0x30uLL);
  *(long long *)((char *)&xmmword_256FAD8 + 8) = v271;
  strcpy((char *)xmmword_256FAD8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v185 = operator new(0x30uLL);
  *(void *)&xmmword_256FAF0 = v185;
  *(long long *)((char *)&xmmword_256FAF0 + 8) = v272;
  _OWORD *v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v267[1];
  *(_OWORD *)((char *)v185 + 28) = v267[0];
  *((unsigned char *)v185 + 44) = 0;
  *(void *)&xmmword_256FB08 = operator new(0x28uLL);
  *(long long *)((char *)&xmmword_256FB08 + 8) = v270;
  strcpy((char *)xmmword_256FB08, "SuggestDetourWithHigherArrivalSOC_");
  v186 = operator new(0x30uLL);
  *(void *)&xmmword_256FB20 = v186;
  *(long long *)((char *)&xmmword_256FB20 + 8) = *(_OWORD *)&v263[48];
  _OWORD *v186 = *(_OWORD *)&v263[32];
  v186[1] = *(_OWORD *)&v263[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v263;
  *((unsigned char *)v186 + 46) = 0;
  *(void *)&xmmword_256FB38 = operator new(0x28uLL);
  *(long long *)((char *)&xmmword_256FB38 + 8) = v274;
  strcpy((char *)xmmword_256FB38, "SuggestRouteToDestForEVInfeasibleRoute_");
  *(void *)&xmmword_256FB50 = operator new(0x28uLL);
  *(long long *)((char *)&xmmword_256FB50 + 8) = v266;
  strcpy((char *)xmmword_256FB50, "SuggestRouteRemovingStopsFromEVRoute_");
  *(void *)&xmmword_256FB68 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256FB68 + 8) = v279;
  strcpy((char *)xmmword_256FB68, "OfflineToOnlineNewRoute_");
  *(void *)&xmmword_256FB80 = operator new(0x40uLL);
  *(long long *)((char *)&xmmword_256FB80 + 8) = xmmword_20B98C0;
  strcpy((char *)xmmword_256FB80, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_256FBAF = 20;
  strcpy((char *)&xmmword_256FB98, "LPR_OFFLINE_REROUTE_");
  byte_256FBC7 = 16;
  strcpy((char *)&xmmword_256FBB0, "LPR_OFFLINE_SAR_");
  byte_256FBDF = 20;
  strcpy((char *)&xmmword_256FBC8, "LPR_OFFLINE_REROUTE_");
  byte_256FBF7 = 16;
  strcpy((char *)&xmmword_256FBE0, "LPR_OFFLINE_SAR_");
  byte_256FC0F = 19;
  strcpy((char *)&xmmword_256FBF8, "SuggestFasterRoute_");
  *(void *)&xmmword_256FC10 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_256FC10 + 8) = v278;
  strcpy((char *)xmmword_256FC10, "AreaIncidentSaferReroute_");
  byte_256FC3F = 12;
  strcpy((char *)&qword_256FC28, "_Remove_Stop");
  byte_256FC57 = 13;
  strcpy((char *)&qword_256FC40, "_Remove_Stops");
  strcpy(&byte_256FC6F, "\t_Add_Stops");
  strcpy((char *)&qword_256FC58, "_Add_Stop");
  strcpy(&byte_256FC87, "\n_Change_Route");
  byte_256FC9F = 13;
  byte_256FCB7 = 15;
  strcpy((char *)&qword_256FCA0, "_Different_Stop");
  byte_256FCCF = 16;
  strcpy((char *)&xmmword_256FCB8, "_Different_Stops");
  byte_256FCE7 = 15;
  strcpy((char *)&qword_256FCD0, "_EV_Remove_Stop");
  byte_256FCFF = 16;
  strcpy((char *)&xmmword_256FCE8, "_EV_Remove_Stops");
  byte_256FD17 = 12;
  strcpy((char *)&qword_256FD00, "_EV_Add_Stop");
  byte_256FD2F = 13;
  strcpy((char *)&qword_256FD18, "_EV_Add_Stops");
  byte_256FD47 = 15;
  strcpy((char *)&qword_256FD30, "_EV_Low_Battery");
  byte_256FD5F = 14;
  strcpy((char *)&qword_256FD48, "_EV_Infeasible");
  byte_256FD77 = 15;
  strcpy((char *)&qword_256FD60, "_EV_Last_Chance");
  qword_256FD78 = (uint64_t)operator new(0x20uLL);
  unk_256FD80 = v279;
  strcpy((char *)qword_256FD78, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_256FC78;
  qword_256FD90 = (uint64_t)operator new(0x20uLL);
  unk_256FD98 = v278;
  strcpy((char *)qword_256FD90, "_EV_Low_Battery_Add_Stops");
  qword_256FDA8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_256FDB0 = v280;
  strcpy((char *)qword_256FDA8, "_EV_Infeasible_Add_Stop");
  int v188 = byte_256FC87;
  if (byte_256FC87 >= 0) {
    size_t v189 = byte_256FC87;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    v195 = (char *)operator new(v193 + 1);
    qword_256FDC8 = v189 + 14;
    unk_256FDD0 = v194 | 0x8000000000000000;
    qword_256FDC0 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_256FDC8) = 0;
    WORD1(qword_256FDC8) = 0;
    HIDWORD(qword_256FDC8) = 0;
    unk_256FDD0 = 0;
    byte_256FDD7 = v189 + 14;
    strcpy((char *)&qword_256FDC0, "_EV_Infe");
    v191 = (char *)&qword_256FDC8 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_256FC70;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  v197 = (char *)operator new(0x20uLL);
  qword_256FDD8 = (uint64_t)v197;
  unk_256FDE0 = v279;
  *(void *)v197 = qword_256FD60;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_256FD60 + 7);
  *(void *)(v197 + 15) = qword_256FC58;
  v197[23] = word_256FC60;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    v199 = (uint64_t *)operator new(v200 + 1);
    qword_256FDF8 = v189 + 15;
    unk_256FE00 = v201 | 0x8000000000000000;
    qword_256FDF0 = (uint64_t)v199;
  }
  else
  {
    v199 = &qword_256FDF0;
    qword_256FDF8 = 0;
    unk_256FE00 = 0;
    qword_256FDF0 = 0;
    byte_256FE07 = v189 + 15;
  }
  uint64_t *v199 = qword_256FD60;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_256FD60 + 7);
  v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      v203 = &qword_256FC70;
    }
    else {
      v203 = (uint64_t *)qword_256FC70;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_256FE1F = 17;
  strcpy((char *)&xmmword_256FE08, "_EV_Forced_Detour");
  qword_256FE20 = (uint64_t)operator new(0x20uLL);
  unk_256FE28 = v278;
  strcpy((char *)qword_256FE20, "_EV_Higher_Arrival_Charge");
  qword_256FE38 = (uint64_t)operator new(0x28uLL);
  unk_256FE40 = xmmword_20B8FD0;
  strcpy((char *)qword_256FE38, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_256FE67 = 16;
  strcpy(byte_256FE50, "_EV_Out_Of_Range");
  qword_256FE68 = (uint64_t)operator new(0x20uLL);
  unk_256FE70 = v273;
  strcpy((char *)qword_256FE68, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_256FE80, "_EV_Forced_Modify_Stop");
  HIBYTE(word_256FE96) = 22;
  qword_256FE98 = (uint64_t)operator new(0x19uLL);
  unk_256FEA0 = v280;
  strcpy((char *)qword_256FE98, "_EV_Forced_Modify_Stops");
  byte_256FEC7 = 19;
  strcpy(byte_256FEB0, "_EV_Forced_Add_Stop");
  byte_256FEDF = 20;
  strcpy((char *)&xmmword_256FEC8, "_EV_Forced_Add_Stops");
  byte_256FEF7 = 21;
  strcpy(byte_256FEE0, "_EV_Battery_Info_Lost");
  qword_256FEF8 = (uint64_t)operator new(0x20uLL);
  unk_256FF00 = v278;
  strcpy((char *)qword_256FEF8, "_EV_Battery_Info_Restored");
  qword_256FF10 = (uint64_t)operator new(0x20uLL);
  unk_256FF18 = v279;
  strcpy((char *)qword_256FF10, "_EV_Towing_Not_Supported");
  qword_256FF28 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_256FF30 = v268;
  strcpy((char *)qword_256FF28, "_EV_Offline_to_Online_Transition");
  byte_256FF57 = 15;
  strcpy((char *)&qword_256FF40, "_EV_Offline_SAR");
  qword_256FF58 = (uint64_t)operator new(0x20uLL);
  unk_256FF60 = v277;
  strcpy((char *)qword_256FF58, "_Offline_to_Online_New_Route");
  byte_256FF87 = 12;
  strcpy((char *)&qword_256FF70, "BannerButton");
  byte_256FF9F = 8;
  strcpy((char *)&qword_256FF88, "_Dismiss");
  byte_256FFB7 = 3;
  word_256FFA0 = 20319;
  byte_256FFA2 = 75;
  byte_256FFA3 = 0;
  byte_256FFCF = 11;
  strcpy((char *)&qword_256FFB8, "_Still_Here");
  byte_256FFE7 = 8;
  strcpy((char *)&qword_256FFD0, "_Cleared");
  qmemcpy(&byte_256FFFF, "\nBannerButton", 13);
  strcpy((char *)&qword_256FFE8, "_No_Thanks");
  uint64_t v204 = qword_256FF78;
  qword_2570010 = 0x1400000000000000;
  *(void *)algn_257000C = 0x7373696D7369445FLL;
  qword_2570028 = 0xF00000000000000;
  qword_2570020 = 0x4B4F5F6E6F7474;
  int v205 = byte_256FD17;
  if (byte_256FD17 >= 0) {
    size_t v206 = byte_256FD17;
  }
  else {
    size_t v206 = qword_256FD08;
  }
  unint64_t v207 = v206 + 12;
  qword_2570018 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    v211 = (char *)operator new(v209 + 1);
    qword_2570038 = v206 + 12;
    unk_2570040 = v210 | 0x8000000000000000;
    qword_2570030 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)v211 = *(void *)"BannerButton";
    v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_2570038) = 0;
    HIWORD(qword_2570038) = 0;
    unk_2570040 = 0;
    byte_2570047 = v206 + 12;
    strcpy((char *)&qword_2570030, "BannerButton");
    v208 = (char *)&qword_2570038 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    v212 = &qword_256FD00;
  }
  else {
    v212 = (uint64_t *)qword_256FD00;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_256FD2F;
  if (byte_256FD2F >= 0) {
    size_t v214 = byte_256FD2F;
  }
  else {
    size_t v214 = unk_256FD20;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    v219 = (char *)operator new(v217 + 1);
    qword_2570050 = v214 + 12;
    unk_2570058 = v218 | 0x8000000000000000;
    qword_2570048 = (uint64_t)v219;
    *(void *)v219 = qword_256FF70;
    *((_DWORD *)v219 + 2) = qword_256FF78;
    v216 = v219 + 12;
  }
  else
  {
    qword_2570050 = 0;
    unk_2570058 = 0;
    byte_257005F = v214 + 12;
    LODWORD(qword_2570050) = qword_256FF78;
    qword_2570048 = qword_256FF70;
    v216 = (char *)&qword_2570050 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    v220 = &qword_256FD18;
  }
  else {
    v220 = (uint64_t *)qword_256FD18;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_256FCE7;
  if (byte_256FCE7 >= 0) {
    size_t v222 = byte_256FCE7;
  }
  else {
    size_t v222 = unk_256FCD8;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    v227 = (char *)operator new(v225 + 1);
    qword_2570068 = v222 + 12;
    unk_2570070 = v226 | 0x8000000000000000;
    qword_2570060 = (uint64_t)v227;
    *(void *)v227 = qword_256FF70;
    *((_DWORD *)v227 + 2) = qword_256FF78;
    v224 = v227 + 12;
  }
  else
  {
    qword_2570068 = 0;
    unk_2570070 = 0;
    byte_2570077 = v222 + 12;
    LODWORD(qword_2570068) = qword_256FF78;
    qword_2570060 = qword_256FF70;
    v224 = (char *)&qword_2570068 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_256FCD0;
  }
  else {
    v228 = (uint64_t *)qword_256FCD0;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_256FF87;
  if (byte_256FF87 >= 0) {
    size_t v230 = byte_256FF87;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_256FCFF;
  if (byte_256FCFF >= 0) {
    size_t v232 = byte_256FCFF;
  }
  else {
    size_t v232 = *((void *)&xmmword_256FCE8 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    v234 = &qword_2570078;
    qword_2570080 = 0;
    unk_2570088 = 0;
    qword_2570078 = 0;
    byte_257008F = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  v234 = (uint64_t *)operator new(v241 + 1);
  qword_2570080 = v232 + v230;
  unk_2570088 = v242 | 0x8000000000000000;
  qword_2570078 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_256FF70;
    }
    else {
      v235 = (uint64_t *)qword_256FF70;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_256FCE8;
    }
    else {
      v237 = (long long *)xmmword_256FCE8;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    v239 = (uint64_t *)operator new(v243 + 1);
    qword_2570098 = v230 + 11;
    unk_25700A0 = v244 | 0x8000000000000000;
    qword_2570090 = (uint64_t)v239;
  }
  else
  {
    v239 = &qword_2570090;
    qword_2570098 = 0;
    unk_25700A0 = 0;
    qword_2570090 = 0;
    byte_25700A7 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_2570090 + 7) = *(_DWORD *)((char *)&qword_256FFB8 + 7);
      qword_2570090 = qword_256FFB8;
      BYTE3(qword_2570098) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    v245 = &qword_256FF70;
  }
  else {
    v245 = (uint64_t *)qword_256FF70;
  }
  memmove(v239, v245, v230);
  v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_256FFB8 + 7);
  *(void *)v246 = qword_256FFB8;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    v248 = &qword_25700A8;
    qword_25700B0 = 0;
    unk_25700B8 = 0;
    qword_25700A8 = 0;
    byte_25700BF = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v261 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v261 = v240 | 7;
  }
  uint64_t v262 = v261 + 1;
  v248 = (uint64_t *)operator new(v261 + 1);
  qword_25700B0 = v230 + 8;
  unk_25700B8 = v262 | 0x8000000000000000;
  qword_25700A8 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      v249 = &qword_256FF70;
    }
    else {
      v249 = (uint64_t *)qword_256FF70;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  v250 = (char *)v248 + v230;
  *(void *)v250 = qword_256FFD0;
  v250[8] = 0;
  int v251 = byte_256FFFF;
  if (byte_256FFFF >= 0) {
    size_t v252 = byte_256FFFF;
  }
  else {
    size_t v252 = qword_256FFF0;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    v254 = &qword_25700C0;
    qword_25700C8 = 0;
    unk_25700D0 = 0;
    qword_25700C0 = 0;
    byte_25700D7 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v259 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v259 = v253 | 7;
  }
  uint64_t v260 = v259 + 1;
  v254 = (uint64_t *)operator new(v259 + 1);
  qword_25700C8 = v252 + v230;
  unk_25700D0 = v260 | 0x8000000000000000;
  qword_25700C0 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      v255 = &qword_256FF70;
    }
    else {
      v255 = (uint64_t *)qword_256FF70;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      v257 = &qword_256FFE8;
    }
    else {
      v257 = (uint64_t *)qword_256FFE8;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_25700EF, "\n{newroute}");
  strcpy((char *)&qword_25700D8, "{roadname}");
  strcpy(&byte_2570107, "\n{count}");
  byte_257011F = 7;
  strcpy(&byte_2570137, "\n{dur}");
  strcpy((char *)&qword_2570120, "{duration}");
  byte_257014F = 5;
  qword_2570150 = (uint64_t)operator new(0x20uLL);
  unk_2570158 = v276;
  strcpy((char *)qword_2570150, "{PleaseProceedWithCaution}");
  byte_257017F = 15;
  strcpy((char *)&qword_2570168, "{UserRouteName}");
  byte_2570197 = 20;
  strcpy((char *)&xmmword_2570180, "{SuggestedRouteName}");
  byte_25701AF = 18;
  strcpy(byte_2570198, "Speed_Camera_Ahead");
  qword_25701B0 = (uint64_t)operator new(0x20uLL);
  unk_25701B8 = v275;
  strcpy((char *)qword_25701B0, "Red_Light_Camera_Ahead_Spoken");
  qword_25701C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25701D0 = v275;
  strcpy((char *)qword_25701C8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25701E0 = (uint64_t)operator new(0x28uLL);
  unk_25701E8 = v270;
  strcpy((char *)qword_25701E0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25701F8 = (uint64_t)operator new(0x28uLL);
  unk_2570200 = v264;
  strcpy((char *)qword_25701F8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2570210 = (uint64_t)operator new(0x20uLL);
  unk_2570218 = v277;
  strcpy((char *)qword_2570210, "Camera_Ahead_Multiple_Spoken");
  qword_2570228 = (uint64_t)operator new(0x30uLL);
  unk_2570230 = v265;
  strcpy((char *)qword_2570228, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2570240 = (char *)operator new(0x30uLL);
  strcpy(qword_2570240, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_257026F = 16;
  xmmword_2570248 = v265;
  strcpy(byte_2570258, "_Speed_Limit_Mph");
  byte_2570287 = 16;
  strcpy(algn_2570270, "_Speed_Limit_Kph");
  byte_257029F = 11;
  strcpy((char *)&qword_2570288, "Watch_Speed");
  byte_25702B7 = 4;
  strcpy((char *)&dword_25702A0, "_One");
  byte_25702CF = 4;
  strcpy((char *)&dword_25702B8, "_Two");
  byte_25702E7 = 4;
  strcpy((char *)&dword_25702D0, "_Few");
  byte_25702FF = 5;
  strcpy((char *)&dword_25702E8, "_Many");
  byte_2570317 = 6;
  strcpy((char *)&dword_2570300, "_Other");
  byte_257032F = 4;
  strcpy((char *)&dword_2570318, "_ONE");
  byte_2570347 = 7;
  strcpy((char *)&dword_2570330, "{Speed}");
  byte_257035F = 8;
  strcpy((char *)&qword_2570348, "Dismount");
  byte_2570377 = 4;
  strcpy((char *)&dword_2570360, "Walk");
  byte_257038F = 5;
  strcpy((char *)&dword_2570378, "Mount");
  byte_25703A7 = 7;
  strcpy((char *)&dword_2570390, "Remount");
  strcpy(&byte_25703BF, "\t_Crosswalk");
  strcpy((char *)&qword_25703A8, "Walk_Road");
  strcpy(&byte_25703D7, "\n_PLURAL");
  byte_25703EF = 7;
  strcpy(&byte_2570407, "\n{description1}");
  strcpy((char *)&qword_25703F0, "_SECONDARY");
  byte_257041F = 14;
  byte_2570437 = 14;
  strcpy((char *)&qword_2570420, "{description2}");
  byte_257044F = 21;
  strcpy((char *)&xmmword_2570438, "TWO_ROAD_DESCRIPTIONS");
  byte_2570467 = 17;
  strcpy((char *)&xmmword_2570450, "{SlopePercentage}");
  byte_257047F = 15;
  strcpy((char *)&qword_2570468, "_Protected_Lane");
  strcpy(&byte_2570497, "\n_Paved_Path");
  strcpy((char *)&qword_2570480, "_Bike_Path");
  byte_25704AF = 11;
  byte_25704C7 = 15;
  strcpy((char *)&qword_25704B0, "_Dedicated_Lane");
  byte_25704DF = 12;
  strcpy((char *)&qword_25704C8, "_Shared_Path");
  strcpy(&byte_25704F7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25704E0, "_Bike_Lane");
  byte_257050F = 12;
  byte_2570527 = 5;
  strcpy((char *)&dword_2570510, "_Path");
  byte_257053F = 6;
  strcpy((char *)&dword_2570528, "_Trail");
  strcpy(&byte_2570557, "\t_Plaza");
  strcpy((char *)&qword_2570540, "_Sidewalk");
  byte_257056F = 6;
  byte_2570587 = 15;
  strcpy((char *)&qword_2570570, "_Moving_Walkway");
  byte_257059F = 14;
  strcpy((char *)&qword_2570588, "Two_Stage_Turn");
  byte_25705B7 = 16;
  strcpy((char *)&xmmword_25705A0, "{OptionalPeriod}");
  byte_25705CF = 18;
  strcpy((char *)&xmmword_25705B8, "Advisory_Separator");
  byte_25705E7 = 6;
  strcpy((char *)&dword_25705D0, "Period");
  byte_25705FF = 21;
  strcpy((char *)&xmmword_25705E8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2570600, "Advisory_Title_Notices");
  HIBYTE(word_2570616) = 22;
  byte_257062F = 7;
  strcpy((char *)&dword_2570618, "_DETAIL");
  byte_2570647 = 17;
  strcpy((char *)&xmmword_2570630, "_LONG_REGION_LIST");
  byte_257065F = 16;
  strcpy((char *)&xmmword_2570648, "Advisory_Grouped");
  byte_2570677 = 11;
  strcpy((char *)&qword_2570660, "_Advisories");
  qword_2570678 = (uint64_t)operator new(0x20uLL);
  unk_2570680 = v273;
  strcpy((char *)qword_2570678, "Advisory_WILDFIRE_METADATA_");
  byte_25706A7 = 8;
  strcpy((char *)&qword_2570690, "Advisory");
  byte_25706BF = 13;
  strcpy((char *)&qword_25706A8, "MPR_NUM_STOPS");
  byte_25706D7 = 17;
  strcpy(byte_25706C0, "EV_CHARGE_STATION");
  byte_25706EF = 11;
  strcpy((char *)&qword_25706D8, "_NAMED_CITY");
  byte_2570707 = 5;
  strcpy((char *)&dword_25706F0, "_Stop");
  strcpy(&byte_257071F, "\n{StopsCount}");
  strcpy((char *)&qword_2570708, "{CityName}");
  byte_2570737 = 12;
  byte_257074F = 11;
  strcpy((char *)&qword_2570738, "_With_Other");
  byte_2570767 = 15;
  strcpy((char *)&qword_2570750, "{DepartureTime}");
  qword_2570768 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2570770 = v274;
  strcpy((char *)qword_2570768, "Ending_Charge_Station_Port_Availability");
  qword_2570780 = (uint64_t)operator new(0x28uLL);
  unk_2570788 = v266;
  strcpy((char *)qword_2570780, "Ending_Charge_Station_No_Availability");
  qword_2570798 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25707A0 = v270;
  strcpy((char *)qword_2570798, "Ending_Charge_Station_No_Real_Time");
  byte_25707C7 = 16;
  strcpy(&algn_25707A0[16], "{AvailablePorts}");
  byte_25707DF = 12;
  strcpy((char *)&qword_25707C8, "{TotalPorts}");
  byte_25707F7 = 14;
  strcpy((char *)&qword_25707E0, "{ManeuverIcon}");
  qword_25707F8 = (uint64_t)operator new(0x38uLL);
  unk_2570800 = xmmword_20B9A60;
  strcpy((char *)qword_25707F8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2570810 = (uint64_t)operator new(0x20uLL);
  unk_2570818 = v273;
  strcpy((char *)qword_2570810, "Walking_Destination_Unnamed");
  qword_2570828 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2570830 = v275;
  strcpy((char *)qword_2570828, "TrafficDelay_Label_Title_Sign");
  qword_2570840 = (uint64_t)operator new(0x20uLL);
  unk_2570848 = v277;
  strcpy((char *)qword_2570840, "Special_Guidance_Instruction");
  byte_257086F = 2;
  strcpy((char *)&word_2570858, "CZ");
  byte_2570887 = 3;
  dword_2570870 = 5919811;
  unk_257089F = 3;
  dword_2570888 = 6243649;
  byte_25708B7 = 0;
  byte_25708CF = 7;
  strcpy((char *)&dword_25708B8, "TRANSIT");
  byte_25708E7 = 7;
  strcpy((char *)&dword_25708D0, "OFFLINE");
  qword_25708E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25708F0 = v264;
  strcpy((char *)qword_25708E8, "Advisory_Card_French_Climate_Law_Title");
  qword_2570900 = (uint64_t)operator new(0x30uLL);
  unk_2570908 = xmmword_20B93C0;
  strcpy((char *)qword_2570900, "Advisory_Card_French_Climate_Law_Details");
  qword_2570918 = (uint64_t)operator new(0x30uLL);
  unk_2570920 = v271;
  strcpy((char *)qword_2570918, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2570930 = (uint64_t)operator new(0x20uLL);
  unk_2570938 = v277;
  strcpy((char *)qword_2570930, "{ClimateLawLearnMoreWeblink}");
  byte_257095F = 3;
  dword_2570948 = 4280902;
  qword_2570960 = (uint64_t)operator new(0x70uLL);
  unk_2570968 = xmmword_20E81E0;
  strcpy((char *)qword_2570960, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_56E248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_56E5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  sub_72020C(a1 + 24);
  uint64_t v13 = 0;
  int v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B91C0;
  strcpy((char *)v14, "DodgeballBannersDetector");
  std::string __p = 0;
  size_t v12 = 0;
  std::string::size_type v6 = sub_374CDC(a2, (uint64_t)&v14, (uint64_t *)&__p);
  sub_570AB4(a1 + 104, v6);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    __int16 v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      __int16 v9 = __p;
    }
    size_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

void sub_56E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_56E6F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = memcpy(a2, a1 + 16, 0x198uLL);
  a2[52] = 0;
  a2[53] = 0;
  a2[51] = 0;
  unint64_t v5 = (unsigned char *)a1[67];
  std::string::size_type v6 = (unsigned char *)a1[68];
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6 - v5);
    a2[51] = v8;
    __int16 v9 = &v8[8 * (v7 >> 3)];
    a2[53] = v9;
    uint64_t result = memcpy(v8, v5, v7);
    a2[52] = v9;
  }
  return result;
}

void sub_56E788(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 416) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_56E7A4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  int v10 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 1522);
  if (*(unsigned char *)(a1 + 116)) {
    BOOL v11 = v10 == 12;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || (sub_56EA44(a4, 0, &__p), !v25))
  {
    if (*(unsigned char *)(a1 + 117)) {
      BOOL v15 = v10 == 12;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      sub_56EBEC(a2, a3, 0, a4, &__p);
      if (v25)
      {
        unint64_t v16 = *(void *)(a5 + 8);
        if (v16 >= *(void *)(a5 + 16))
        {
          char v18 = sub_571F3C((char **)a5, (uint64_t)&__p);
        }
        else
        {
          *(_DWORD *)unint64_t v16 = __p;
          int v17 = v24;
          *(unsigned char *)(v16 + 1984) = v24;
          if (v17) {
            sub_55BBD8(v16 + 8, (uint64_t)v23);
          }
          char v18 = (char *)(v16 + 1992);
        }
        *(void *)(a5 + 8) = v18;
        if (v25 && v24) {
          sub_55BCE8((uint64_t)v23);
        }
      }
    }
    if (*(unsigned char *)(a1 + 118))
    {
      sub_56EDB8(a1, a4, (uint64_t *)&__p);
      sub_572178((void **)a5, *(void *)(a5 + 8), (uint64_t)__p, v23[0], 0x367D6E020E64C149 * ((v23[0] - (uint64_t)__p) >> 3));
      std::string::size_type v19 = __p;
      if (__p)
      {
        uint64_t v20 = v23[0];
        long long v21 = __p;
        if ((void *)v23[0] != __p)
        {
          do
          {
            if (*(unsigned char *)(v20 - 8))
            {
              sub_55BCE8(v20 - 1984);
              *(unsigned char *)(v20 - 8) = 0;
            }
            v20 -= 1992;
          }
          while ((void *)v20 != v19);
          long long v21 = __p;
        }
        v23[0] = (uint64_t)v19;
        operator delete(v21);
      }
    }
  }
  else
  {
    unint64_t v12 = *(void *)(a5 + 8);
    if (v12 >= *(void *)(a5 + 16))
    {
      int v14 = sub_571F3C((char **)a5, (uint64_t)&__p);
    }
    else
    {
      *(_DWORD *)unint64_t v12 = __p;
      int v13 = v24;
      *(unsigned char *)(v12 + 1984) = v24;
      if (v13) {
        sub_55BBD8(v12 + 8, (uint64_t)v23);
      }
      int v14 = (char *)(v12 + 1992);
    }
    *(void *)(a5 + 8) = v14;
    if (v25)
    {
      if (v24) {
        sub_55BCE8((uint64_t)v23);
      }
    }
  }
}

void sub_56E9DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_56EA44(uint64_t a1@<X1>, int a2@<W2>, unsigned char *a3@<X8>)
{
  size_t v4 = *(_DWORD **)a1;
  unint64_t v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    while (!sub_50E234((uint64_t)v4))
    {
      v4 += 494;
      if (v4 == v5)
      {
        size_t v4 = v5;
        break;
      }
    }
    if (v4 != *(_DWORD **)(a1 + 8))
    {
      if (sub_50E294(v4))
      {
        if (a2) {
          int v8 = 12;
        }
        else {
          int v8 = 3;
        }
        goto LABEL_18;
      }
      if (sub_50E284(v4))
      {
        if (a2) {
          int v8 = 11;
        }
        else {
          int v8 = 2;
        }
        goto LABEL_18;
      }
      if (sub_50E254(v4))
      {
        if (a2) {
          int v8 = 10;
        }
        else {
          int v8 = 1;
        }
LABEL_18:
        sub_564584((uint64_t)&v10, v8, (uint64_t)v4);
        a3[1992] = 1;
        *(_DWORD *)a3 = v10;
        int v9 = v12;
        a3[1984] = v12;
        if (v9)
        {
          sub_571ACC((uint64_t)(a3 + 8), (uint64_t)v11);
          if (v12) {
            sub_55BCE8((uint64_t)v11);
          }
        }
        return;
      }
    }
  }

  bzero(a3, 0x7D0uLL);
}

void sub_56EBEC(uint64_t a1@<X1>, void *a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, unsigned char *a5@<X8>)
{
  if (sub_45FBF0(a1))
  {
    int v9 = *(_DWORD **)a4;
    int v10 = *(_DWORD **)(a4 + 8);
    if (*(_DWORD **)a4 == v10) {
      goto LABEL_9;
    }
    while (!sub_50E244((uint64_t)v9))
    {
      v9 += 494;
      if (v9 == v10)
      {
        int v9 = v10;
        break;
      }
    }
    if (v9 == *(_DWORD **)(a4 + 8))
    {
LABEL_9:
      uint64_t v11 = sub_6467E8(a2, 0);
      if ((sub_46E0B8(v11) & 1) == 0 && (a3 & 1) == 0)
      {
        sub_564578((uint64_t)&v13, 4);
        goto LABEL_16;
      }
    }
    else
    {
      if (sub_50E2C4(v9))
      {
        sub_564584((uint64_t)&v13, 26, (uint64_t)v9);
        goto LABEL_16;
      }
      if (sub_50E2D4(v9))
      {
        sub_564584((uint64_t)&v13, 27, (uint64_t)v9);
        goto LABEL_16;
      }
      if (sub_50E2B4(v9))
      {
        sub_564584((uint64_t)&v13, 25, (uint64_t)v9);
LABEL_16:
        a5[1992] = 1;
        *(_DWORD *)a5 = v13;
        int v12 = v15;
        a5[1984] = v15;
        if (v12)
        {
          sub_571ACC((uint64_t)(a5 + 8), (uint64_t)v14);
          if (v15) {
            sub_55BCE8((uint64_t)v14);
          }
        }
        return;
      }
    }
  }

  bzero(a5, 0x7D0uLL);
}

uint64_t sub_56EDB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v4 = *(_DWORD **)a2;
  unint64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v6 = result;
    while (1)
    {
      uint64_t result = sub_50E244((uint64_t)v4);
      if (result) {
        goto LABEL_5;
      }
      uint64_t result = sub_50E234((uint64_t)v4);
      if (result) {
        goto LABEL_5;
      }
      if (!sub_50E254(v4)) {
        break;
      }
      int v10 = 0;
      sub_50E3F8((uint64_t)v4, (uint64_t)v11);
      if (!v12)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (sub_6056A4((uint64_t)v11, *(void *)(v6 + 8))) {
        int v7 = 6;
      }
      else {
        int v7 = 5;
      }
      if (v12) {
        sub_3A6B94((uint64_t)v11);
      }
      int v10 = v7;
      unint64_t v8 = a3[1];
      if (v8 < a3[2])
      {
        sub_564584(a3[1], v7, (uint64_t)v4);
LABEL_27:
        uint64_t result = v8 + 1992;
        a3[1] = v8 + 1992;
        goto LABEL_4;
      }
      uint64_t result = sub_57341C(a3, &v10, (uint64_t)v4);
LABEL_4:
      a3[1] = result;
LABEL_5:
      v4 += 494;
      if (v4 == v5) {
        return result;
      }
    }
    if (sub_50E274(v4))
    {
      v11[0] = 7;
      unint64_t v8 = a3[1];
      if (v8 >= a3[2]) {
        goto LABEL_28;
      }
      sub_564584(a3[1], 7, (uint64_t)v4);
    }
    else if (sub_50E2A4(v4))
    {
      v11[0] = 9;
      unint64_t v8 = a3[1];
      if (v8 >= a3[2]) {
        goto LABEL_28;
      }
      sub_564584(a3[1], 9, (uint64_t)v4);
    }
    else
    {
      uint64_t result = sub_50E264(v4);
      if (!result) {
        goto LABEL_5;
      }
      v11[0] = 8;
      unint64_t v8 = a3[1];
      if (v8 >= a3[2])
      {
LABEL_28:
        uint64_t result = sub_5735FC(a3, v11, (uint64_t)v4);
        goto LABEL_4;
      }
      sub_564584(a3[1], 8, (uint64_t)v4);
    }
    goto LABEL_27;
  }
  return result;
}

void sub_56F014(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_56F088((void **)v1);
  _Unwind_Resume(a1);
}

void sub_56F050(_Unwind_Exception *a1)
{
  sub_56F088(v1);
  _Unwind_Resume(a1);
}

void sub_56F064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x468])) {
    sub_3A6B94((uint64_t)va);
  }
  sub_56F088(v2);
  _Unwind_Resume(a1);
}

void **sub_56F088(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    size_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          sub_55BCE8((uint64_t)(v3 - 1984));
          *(v3 - 8) = 0;
        }
        v3 -= 1992;
      }
      while (v3 != v2);
      size_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_56F0F8(__n128 *a1, __n128 *a2, void *a3)
{
  if (sub_45FB38(a2)) {
    return 0;
  }
  sub_40506C(a1, a3, &v12);
  sub_40506C(a2, a3, &__p);
  int v7 = __p;
  if (v13 - (unsigned char *)v12 != v11 - (unsigned char *)__p)
  {
LABEL_10:
    BOOL v6 = !sub_405EAC(&v12, &__p);
    int v7 = __p;
    if (!__p) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v12 != v13)
  {
    uint64_t v8 = 0;
    while (*(void *)((char *)v12 + v8) == *(void *)((char *)__p + v8))
    {
      v8 += 8;
      if ((char *)v12 + v8 == v13) {
        goto LABEL_8;
      }
    }
    goto LABEL_10;
  }
LABEL_8:
  BOOL v6 = 0;
  if (__p)
  {
LABEL_11:
    uint64_t v11 = v7;
    operator delete(v7);
  }
LABEL_12:
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
    return v6;
  }
  return v6;
}

void sub_56F200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    int v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_56F24C(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, unsigned char *a4@<X8>)
{
  unint64_t v5 = *(unsigned char **)(a1 + 8);
  if (v5[1523] == 2)
  {
LABEL_2:
    bzero(a4, 0x7D0uLL);
    return;
  }
  if (v5[1447])
  {
    if (*(unsigned char *)(a1 + 107) && v5[1449])
    {
      sub_564578((uint64_t)&v11, 32);
      goto LABEL_30;
    }
    if (*(unsigned char *)(a1 + 108) && *(unsigned char *)(*(void *)(a1 + 16) + 482))
    {
      sub_564578((uint64_t)&v11, 29);
      goto LABEL_30;
    }
  }
  if (v5[1445])
  {
    if (*(unsigned char *)(a1 + 111) && v5[1449])
    {
      sub_564578((uint64_t)&v11, 33);
      goto LABEL_30;
    }
    if (*(unsigned char *)(a1 + 112) && sub_45FBF0((uint64_t)a2)) {
      goto LABEL_2;
    }
  }
  int v9 = v5[1522];
  if (v9 == 12)
  {
    if (!*(unsigned char *)(a1 + 114)) {
      goto LABEL_2;
    }
    if (sub_45FBF0((uint64_t)a2))
    {
      sub_564578((uint64_t)&v11, 28);
      goto LABEL_30;
    }
    int v9 = v5[1522];
  }
  if (v9 == 7)
  {
    if (!*(unsigned char *)(a1 + 110) || !sub_56F0F8(a2, a3, *(void **)a1)) {
      goto LABEL_2;
    }
    sub_564578((uint64_t)&v11, 36);
  }
  else
  {
    if (v9 != 13 || !*(unsigned char *)(a1 + 115)) {
      goto LABEL_2;
    }
    sub_564578((uint64_t)&v11, 30);
  }
LABEL_30:
  a4[1992] = 1;
  *(_DWORD *)a4 = v11;
  int v10 = v13;
  a4[1984] = v13;
  if (v10)
  {
    sub_571ACC((uint64_t)(a4 + 8), (uint64_t)v12);
    if (v13) {
      sub_55BCE8((uint64_t)v12);
    }
  }
}

void sub_56F464(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned char **)(a1 + 8);
  if (v3[1523] != 2)
  {
    if (v3[1447] && *(unsigned char *)(a1 + 109) && v3[1448])
    {
      sub_564578((uint64_t)&v5, 34);
      goto LABEL_10;
    }
    if (v3[1445] && *(unsigned char *)(a1 + 113) && v3[1448])
    {
      sub_564578((uint64_t)&v5, 35);
LABEL_10:
      a2[1992] = 1;
      *(_DWORD *)a2 = v5;
      int v4 = v7;
      a2[1984] = v7;
      if (v4)
      {
        sub_571ACC((uint64_t)(a2 + 8), (uint64_t)v6);
        if (v7) {
          sub_55BCE8((uint64_t)v6);
        }
      }
      return;
    }
  }

  bzero(a2, 0x7D0uLL);
}

void sub_56F5B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 544) = *(void *)(a1 + 536);
  if (*(unsigned char *)(a1 + 104) && (int v3 = *(unsigned char **)(a1 + 8), v3[1517]) && !v3[1410] && v3[1522] != 3)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (*(unsigned char *)(a1 + 106))
    {
      sub_56F464(a1, &v17);
      if (v20)
      {
        unint64_t v5 = *(void *)(a2 + 8);
        if (v5 >= *(void *)(a2 + 16))
        {
          unsigned __int8 v7 = sub_571F3C((char **)a2, (uint64_t)&v17);
        }
        else
        {
          *(_DWORD *)unint64_t v5 = v17;
          int v6 = v19;
          *(unsigned char *)(v5 + 1984) = v19;
          if (v6) {
            sub_55BBD8(v5 + 8, (uint64_t)v18);
          }
          unsigned __int8 v7 = (char *)(v5 + 1992);
        }
        *(void *)(a2 + 8) = v7;
        if (v20 && v19) {
          sub_55BCE8((uint64_t)v18);
        }
      }
      uint64_t v8 = *(char **)(a2 + 8);
      if (v8 == *(char **)a2)
      {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = (uint64_t)&v8[-*(void *)a2] / 1992;
        do
        {
          unsigned __int8 v15 = (int *)(*(void *)a2 + v10);
          sub_5710CC(a1, v15);
          if (v12 > v11 && sub_564810(v15))
          {
            BOOL v16 = sub_564810((_DWORD *)(*(void *)a2 + 1992 * v11));
            unint64_t v14 = v12;
            if (v16)
            {
              sub_5713CC((void *)a1, (uint64_t *)a2, v11, v12);
              unint64_t v14 = v12;
            }
          }
          else
          {
            unint64_t v14 = v11;
          }
          ++v12;
          v10 += 1992;
          unint64_t v11 = v14;
        }
        while (v13 != v12);
        uint64_t v8 = *(char **)a2;
        uint64_t v9 = *(void *)(a2 + 8);
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    *(void *)(a1 + 128) = 0x367D6E020E64C149 * ((v9 - (uint64_t)v8) >> 3);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_56F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (LOBYTE(STACK[0x840]))
  {
    if (LOBYTE(STACK[0x838])) {
      sub_55BCE8((uint64_t)va);
    }
  }
  sub_56F088(v17);
  _Unwind_Resume(a1);
}

void sub_56F8CC(uint64_t a1@<X0>, __n128 *a2@<X1>, void *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 544) = *(void *)(a1 + 536);
  if (*(unsigned char *)(a1 + 104) && (int v6 = *(unsigned char **)(a1 + 8), v6[1517]) && !v6[1410] && v6[1522] != 3)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (*(unsigned char *)(a1 + 106))
    {
      sub_56F24C(a1, a2, a4, &v30);
      if (v33)
      {
        unint64_t v10 = *(void *)(a5 + 8);
        if (v10 >= *(void *)(a5 + 16))
        {
          unint64_t v12 = sub_571F3C((char **)a5, (uint64_t)&v30);
        }
        else
        {
          *(_DWORD *)unint64_t v10 = v30;
          int v11 = v32;
          *(unsigned char *)(v10 + 1984) = v32;
          if (v11) {
            sub_55BBD8(v10 + 8, (uint64_t)v31);
          }
          unint64_t v12 = (char *)(v10 + 1992);
        }
        *(void *)(a5 + 8) = v12;
        if (v33 && v32) {
          sub_55BCE8((uint64_t)v31);
        }
      }
    }
    sub_720210(a2, a3, &v30);
    sub_56E7A4(a1, (uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)&__p);
    sub_572178((void **)a5, *(void *)(a5 + 8), (uint64_t)__p, (uint64_t)v29, 0x367D6E020E64C149 * ((v29 - (unsigned char *)__p) >> 3));
    uint64_t v13 = *(char **)(a5 + 8);
    if (v13 == *(char **)a5)
    {
      uint64_t v21 = *(void *)(a5 + 8);
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = (uint64_t)&v13[-*(void *)a5] / 1992;
      do
      {
        unsigned __int8 v19 = (int *)(*(void *)a5 + v14);
        sub_5710CC(a1, v19);
        if (v16 > v15 && sub_564810(v19))
        {
          BOOL v20 = sub_564810((_DWORD *)(*(void *)a5 + 1992 * v15));
          unint64_t v18 = v16;
          if (v20)
          {
            sub_5713CC((void *)a1, (uint64_t *)a5, v15, v16);
            unint64_t v18 = v16;
          }
        }
        else
        {
          unint64_t v18 = v15;
        }
        ++v16;
        v14 += 1992;
        unint64_t v15 = v18;
      }
      while (v17 != v16);
      uint64_t v13 = *(char **)a5;
      uint64_t v21 = *(void *)(a5 + 8);
    }
    *(void *)(a1 + 128) = 0x367D6E020E64C149 * ((v21 - (uint64_t)v13) >> 3);
    int v22 = (char *)__p;
    if (__p)
    {
      size_t v23 = v29;
      unsigned __int8 v24 = __p;
      if (v29 != __p)
      {
        do
        {
          if (*(v23 - 8))
          {
            sub_55BCE8((uint64_t)(v23 - 1984));
            *(v23 - 8) = 0;
          }
          v23 -= 1992;
        }
        while (v23 != v22);
        unsigned __int8 v24 = __p;
      }
      unint64_t v29 = v22;
      operator delete(v24);
    }
    char v25 = v30;
    if (v30)
    {
      uint64_t v26 = v31[0];
      unint64_t v27 = v30;
      if ((void *)v31[0] != v30)
      {
        do
          uint64_t v26 = sub_55BCE8(v26 - 1976);
        while ((void *)v26 != v25);
        unint64_t v27 = v30;
      }
      v31[0] = v25;
      operator delete(v27);
    }
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
}

void sub_56FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x7E0]))
  {
    if (LOBYTE(STACK[0x7D8])) {
      sub_55BCE8((uint64_t)va);
    }
  }
  sub_56F088(v5);
  _Unwind_Resume(a1);
}

void **sub_56FC8C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_55BCE8(v3 - 1976);
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_56FCE8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 544) = *(void *)(a1 + 536);
  if (*(unsigned char *)(a1 + 105))
  {
    sub_720210(a2, a3, &__p);
    sub_56FF10();
    uint64_t v6 = a4[1];
    if (v6 == *a4)
    {
      uint64_t v14 = a4[1];
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = (v6 - *a4) / 1992;
      do
      {
        unint64_t v12 = (int *)(*a4 + v7);
        sub_5710CC(a1, v12);
        if (v9 > v8 && sub_564810(v12))
        {
          BOOL v13 = sub_564810((_DWORD *)(*a4 + 1992 * v8));
          unint64_t v11 = v9;
          if (v13)
          {
            sub_5713CC((void *)a1, a4, v8, v9);
            unint64_t v11 = v9;
          }
        }
        else
        {
          unint64_t v11 = v8;
        }
        ++v9;
        v7 += 1992;
        unint64_t v8 = v11;
      }
      while (v10 != v9);
      uint64_t v6 = *a4;
      uint64_t v14 = a4[1];
    }
    *(void *)(a1 + 128) = 0x367D6E020E64C149 * ((v14 - v6) >> 3);
    unint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = (uint64_t)v19;
      uint64_t v17 = __p;
      if (v19 != __p)
      {
        do
          uint64_t v16 = sub_55BCE8(v16 - 1976);
        while ((void *)v16 != v15);
        uint64_t v17 = __p;
      }
      unsigned __int8 v19 = v15;
      operator delete(v17);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_56FEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_56FC8C((void **)va);
  _Unwind_Resume(a1);
}

void sub_56FEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_56F088(v2);
  sub_56FC8C((void **)va);
  _Unwind_Resume(a1);
}

void sub_56FF10()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  uint64_t v10 = v9;
  *unint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v11 = *v1;
  uint64_t v12 = v1[1];
  if (*v1 == v12) {
    goto LABEL_8;
  }
  BOOL v13 = v1;
  while (!sub_45FC44(v11))
  {
    v11 += 120;
    if (v11 == v12)
    {
      uint64_t v11 = v12;
      break;
    }
  }
  if (v11 == v13[1] || (uint64_t v14 = v11 - *v13, v14 == -120))
  {
LABEL_8:
    int v15 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v22 = sub_5731EC(v13, 0xEEEEEEEEEEEEEEEFLL * (v14 >> 3));
    int v15 = 1;
    LOBYTE(v44) = 1;
    uint64_t v43 = v22;
  }
  sub_56EA44(v3, v15, &v39);
  if (v42)
  {
    uint64_t v16 = v10[1];
    if (v16 >= v10[2])
    {
      unint64_t v18 = sub_571F3C(v10, (uint64_t)&v39);
    }
    else
    {
      *(_DWORD *)uint64_t v16 = v39;
      int v17 = v41;
      v16[1984] = v41;
      if (v17) {
        sub_55BBD8((uint64_t)(v16 + 8), (uint64_t)v40);
      }
      unint64_t v18 = v16 + 1992;
    }
    v10[1] = v18;
  }
  else
  {
    sub_56EBEC((uint64_t)v7, v5, v15, v3, &v35);
    if (v38)
    {
      unsigned __int8 v19 = v10[1];
      if (v19 >= v10[2])
      {
        uint64_t v21 = sub_571F3C(v10, (uint64_t)&v35);
      }
      else
      {
        *(_DWORD *)unsigned __int8 v19 = v35;
        int v20 = v37;
        v19[1984] = v37;
        if (v20) {
          sub_55BBD8((uint64_t)(v19 + 8), (uint64_t)v36);
        }
        uint64_t v21 = v19 + 1992;
      }
      v10[1] = v21;
    }
    sub_5702FC(v8, v7, v5, (uint64_t)&v43, &v31);
    if (v34)
    {
      size_t v23 = v10[1];
      if (v23 >= v10[2])
      {
        char v25 = sub_571F3C(v10, (uint64_t)&v31);
      }
      else
      {
        *(_DWORD *)size_t v23 = v31;
        int v24 = v33;
        v23[1984] = v33;
        if (v24) {
          sub_55BBD8((uint64_t)(v23 + 8), (uint64_t)v32);
        }
        char v25 = v23 + 1992;
      }
      v10[1] = v25;
    }
    else
    {
      sub_56EDB8(v8, v3, (uint64_t *)&__p);
      sub_572178((void **)v10, (uint64_t)v10[1], (uint64_t)__p, (uint64_t)v30, 0x367D6E020E64C149 * ((v30 - (unsigned char *)__p) >> 3));
      uint64_t v26 = (char *)__p;
      if (__p)
      {
        unint64_t v27 = v30;
        unint64_t v28 = __p;
        if (v30 != __p)
        {
          do
          {
            if (*(v27 - 8))
            {
              sub_55BCE8((uint64_t)(v27 - 1984));
              *(v27 - 8) = 0;
            }
            v27 -= 1992;
          }
          while (v27 != v26);
          unint64_t v28 = __p;
        }
        int v30 = v26;
        operator delete(v28);
      }
    }
    if (v34 && v33) {
      sub_55BCE8((uint64_t)v32);
    }
    if (v38 && v37) {
      sub_55BCE8((uint64_t)v36);
    }
  }
  if (v42)
  {
    if (v41) {
      sub_55BCE8((uint64_t)v40);
    }
  }
}

void sub_570240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x7E0]) && LOBYTE(STACK[0x7D8])) {
    sub_55BCE8((uint64_t)va);
  }
  if (v6[1992] && v6[1984]) {
    sub_55BCE8((uint64_t)&STACK[0x7F0]);
  }
  if (v6[3992])
  {
    if (v6[3984]) {
      sub_55BCE8((uint64_t)&STACK[0xFC0]);
    }
  }
  sub_56F088(v5);
  _Unwind_Resume(a1);
}

void sub_5702FC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  if (!sub_45FBF0((uint64_t)a2) || (sub_57042C(a2, a3, a4, a5), !a5[1992]))
  {
    sub_5707DC(a1, (uint64_t)a2, a3, a4, &v11);
    if (v14)
    {
      a5[1992] = v14;
      *(_DWORD *)a5 = v11;
      int v10 = v13;
      a5[1984] = v13;
      if (!v10 || (sub_55BBD8((uint64_t)(a5 + 8), (uint64_t)v12), v14))
      {
        if (v13) {
          sub_55BCE8((uint64_t)v12);
        }
      }
    }
    else
    {
      bzero(a5, 0x7D0uLL);
    }
  }
}

void sub_570420(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_57042C(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  if (sub_45FBF0((uint64_t)a1) && *(unsigned char *)(a3 + 8) && (uint64_t v8 = *(void **)a3, !sub_45FB38(v8)))
  {
    unint64_t v9 = sub_404F30(a2);
    unint64_t v10 = sub_404DE8(v8);
    int v11 = *(unsigned __int8 *)(*(void *)nullsub_1(a2) + 826);
    uint64_t v12 = (void *)nullsub_1(a2);
    uint64_t v27 = sub_475024(*v12 + 448);
    int v28 = v13;
    char v14 = (void *)nullsub_1(v8);
    uint64_t v25 = sub_475024(*v14 + 448);
    int v26 = v15;
    if (sub_6477DC((uint64_t)a2))
    {
      if (v10 <= v9)
      {
        if (v10 >= v9)
        {
          if (!v11
            || !sub_40A45C((int *)&v27)
            || !sub_40A45C((int *)&v25)
            || !sub_40A540(&v25, &v27)
            || !sub_4805C4(a1, v8))
          {
            bzero(a4, 0x7D0uLL);
            return;
          }
          sub_564578((uint64_t)&v29, 18);
        }
        else
        {
          sub_564578((uint64_t)&v29, 24);
        }
      }
      else
      {
        sub_564578((uint64_t)&v29, 23);
      }
    }
    else
    {
      int v16 = sub_45FBFC((uint64_t)v8);
      unint64_t v17 = sub_64695C(a2);
      if (v10 <= v9)
      {
        if (sub_40A45C((int *)&v25) && sub_4805C4(a1, v8))
        {
          sub_564578((uint64_t)&v29, 19);
        }
        else
        {
          if (v16) {
            int v22 = 20;
          }
          else {
            int v22 = 17;
          }
          sub_564578((uint64_t)&v29, v22);
        }
      }
      else
      {
        if (v17
          && (unint64_t v18 = (_DWORD *)(*(void *)nullsub_1(v8) + 1056),
              uint64_t v19 = nullsub_1(v8),
              !sub_570704(v18, *(_DWORD **)(v19 + 8), a2)))
        {
          int v20 = 16;
          int v21 = 15;
        }
        else
        {
          int v20 = 14;
          int v21 = 13;
        }
        if (v16) {
          int v23 = v20;
        }
        else {
          int v23 = v21;
        }
        sub_564578((uint64_t)&v29, v23);
      }
    }
    a4[1992] = 1;
    *(_DWORD *)a4 = v29;
    int v24 = v31;
    a4[1984] = v31;
    if (v24)
    {
      sub_571ACC((uint64_t)(a4 + 8), (uint64_t)v30);
      if (v31) {
        sub_55BCE8((uint64_t)v30);
      }
    }
  }
  else
  {
    bzero(a4, 0x7D0uLL);
  }
}

uint64_t sub_570704(_DWORD *a1, _DWORD *a2, void *a3)
{
  if (a1 == a2) {
    return 0;
  }
  unint64_t v5 = a1 + 104;
  do
  {
    uint64_t v7 = (_DWORD *)sub_6467E8(a3, 0);
    int v8 = v5[2];
    if (v8 == v7[106])
    {
      if (v8)
      {
        if (v8 == 1)
        {
          if (*v5 == v7[104] && v5[1] == v7[105]) {
            return 1;
          }
        }
        else if (v8 == -1)
        {
          return 1;
        }
      }
      else if (*(void *)v5 == *((void *)v7 + 52))
      {
        return 1;
      }
    }
    uint64_t v6 = v5 + 160;
    v5 += 264;
  }
  while (v6 != a2);
  return 0;
}

void sub_5707DC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  if (sub_45FB38(a3)) {
    goto LABEL_12;
  }
  if (sub_6477EC((uint64_t)a3)) {
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a4 + 8)) {
    goto LABEL_12;
  }
  unint64_t v10 = *(void **)a4;
  if (*(void *)(sub_6467E8(a3, 0) + 504) < *(void *)(a1 + 120)) {
    goto LABEL_12;
  }
  if (*(_DWORD *)(sub_5231C(a2) + 60))
  {
    if (!*(_DWORD *)(sub_5231C((uint64_t)v10) + 60))
    {
      uint64_t v15 = sub_6467E8(a3, 0);
      uint64_t v16 = sub_570A48(*(void *)(v15 + 7352), *(void *)(v15 + 7360));
      if (*(void *)(v15 + 7360) != v16)
      {
        uint64_t v17 = v16;
        if (!sub_5B9B24(*(void *)(a1 + 8), (unsigned __int8 *)(v16 + 40)))
        {
          sub_50F4A8(v17, (uint64_t)v22);
          sub_564584((uint64_t)&v19, 31, (uint64_t)v22);
          a5[1992] = 1;
          *(_DWORD *)a5 = v19;
          int v18 = v21;
          a5[1984] = v21;
          if (v18)
          {
            sub_571ACC((uint64_t)(a5 + 8), (uint64_t)v20);
            if (v21) {
              sub_55BCE8((uint64_t)v20);
            }
          }
          char v14 = v22;
          goto LABEL_21;
        }
      }
    }
  }
  int v11 = sub_47EE94((uint64_t)v10, 0, 0);
  uint64_t v12 = sub_45FCA0(v10);
  if (v12 != sub_64695C(a3) || v11 >= (int)sub_646CE8((uint64_t)a3))
  {
LABEL_12:
    bzero(a5, 0x7D0uLL);
  }
  else
  {
    sub_564578((uint64_t)&v19, 22);
    a5[1992] = 1;
    *(_DWORD *)a5 = v19;
    int v13 = v21;
    a5[1984] = v21;
    if (v13)
    {
      sub_571ACC((uint64_t)(a5 + 8), (uint64_t)v20);
      if (v21)
      {
        char v14 = v20;
LABEL_21:
        sub_55BCE8((uint64_t)v14);
      }
    }
  }
}

void sub_570A30(_Unwind_Exception *a1)
{
}

uint64_t sub_570A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    while (!sub_605454(v2) || sub_605478(v2))
    {
      v2 += 1120;
      if (v2 == a2) {
        return a2;
      }
    }
  }
  return v2;
}

uint64_t sub_570AB4(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B9800;
  strcpy((char *)__p, "enable_dir_dodgeball_detection");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_etau_dodgeball_detection");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  std::string __p = operator new(0x28uLL);
  long long v21 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_dir_req_type_specific_detection");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v6;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B91B0;
  strcpy((char *)__p, "enable_dir_sar_lpr_detection");
  BOOL v7 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 3) = v7;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B91A0;
  strcpy((char *)__p, "enable_dir_sar_ev_detection");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 4) = v8;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_dir_sar_e_bike_detection");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 5) = v9;
  std::string __p = operator new(0x30uLL);
  long long v21 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_dir_modified_charging_stops_alert");
  BOOL v10 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 6) = v10;
  std::string __p = operator new(0x28uLL);
  long long v21 = xmmword_20B9390;
  strcpy((char *)__p, "enable_dir_reroute_lpr_detection");
  BOOL v11 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 7) = v11;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_dir_reroute_ev_detection");
  BOOL v12 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v12;
  std::string __p = operator new(0x28uLL);
  long long v21 = xmmword_20B93A0;
  strcpy((char *)__p, "enable_dir_reroute_e_bike_detection");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 9) = v13;
  std::string __p = operator new(0x30uLL);
  long long v21 = xmmword_20B93D0;
  strcpy((char *)__p, "enable_dir_offline_to_online_ev_detection");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 10) = v14;
  std::string __p = operator new(0x38uLL);
  long long v21 = xmmword_20B9A60;
  strcpy((char *)__p, "enable_dir_offline_to_online_new_route_detection");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 11) = v15;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B8890;
  strcpy((char *)__p, "enable_dir_blockage_detection");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 12) = v16;
  std::string __p = operator new(0x20uLL);
  long long v21 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_dir_warning_ev_detection");
  BOOL v17 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 13) = v17;
  std::string __p = operator new(0x28uLL);
  long long v21 = xmmword_20B9240;
  strcpy((char *)__p, "enable_dir_warning_incident_detection");
  BOOL v18 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 14) = v18;
  std::string __p = operator new(0x28uLL);
  long long v21 = xmmword_20B9280;
  strcpy((char *)__p, "min_user_distance_to_destination_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_571074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5710CC(uint64_t result, int *a2)
{
  switch(*a2)
  {
    case 1:
      ++*(void *)(result + 288);
      break;
    case 2:
      ++*(void *)(result + 296);
      break;
    case 3:
      ++*(void *)(result + 304);
      break;
    case 4:
      ++*(void *)(result + 352);
      break;
    case 5:
      ++*(void *)(result + 200);
      goto LABEL_7;
    case 6:
      ++*(void *)(result + 136);
LABEL_7:
      uint64_t result = sub_571670(result, a2);
      break;
    case 7:
      ++*(void *)(result + 272);
      break;
    case 8:
      ++*(void *)(result + 280);
      break;
    case 9:
      ++*(void *)(result + 264);
      break;
    case 10:
      ++*(void *)(result + 312);
      break;
    case 11:
      ++*(void *)(result + 320);
      break;
    case 12:
      ++*(void *)(result + 328);
      break;
    case 13:
      ++*(void *)(result + 392);
      break;
    case 14:
      ++*(void *)(result + 400);
      break;
    case 15:
      ++*(void *)(result + 408);
      break;
    case 16:
      ++*(void *)(result + 416);
      break;
    case 17:
      ++*(void *)(result + 424);
      break;
    case 18:
      ++*(void *)(result + 448);
      break;
    case 19:
      ++*(void *)(result + 440);
      break;
    case 20:
      ++*(void *)(result + 432);
      break;
    case 21:
      ++*(void *)(result + 472);
      break;
    case 22:
      ++*(void *)(result + 344);
      break;
    case 23:
      ++*(void *)(result + 456);
      break;
    case 24:
      ++*(void *)(result + 464);
      break;
    case 25:
      ++*(void *)(result + 368);
      break;
    case 26:
      ++*(void *)(result + 376);
      break;
    case 27:
      ++*(void *)(result + 384);
      break;
    case 28:
      ++*(void *)(result + 520);
      break;
    case 29:
      ++*(void *)(result + 512);
      break;
    case 30:
      ++*(void *)(result + 528);
      break;
    case 31:
      ++*(void *)(result + 336);
      break;
    case 32:
      ++*(void *)(result + 480);
      break;
    case 33:
      ++*(void *)(result + 488);
      break;
    case 34:
      ++*(void *)(result + 496);
      break;
    case 35:
      ++*(void *)(result + 504);
      break;
    case 36:
      ++*(void *)(result + 360);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_5713CC(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  sub_564628(*a2 + 1992 * a3, (uint64_t)v34);
  sub_564628(v6 + 1992 * a4, (uint64_t)v31);
  if (!v36 || !v33)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (v35 - v32 >= 0) {
    uint64_t v7 = v35 - v32;
  }
  else {
    uint64_t v7 = v32 - v35;
  }
  BOOL v8 = (char *)a1[68];
  unint64_t v9 = a1[69];
  if ((unint64_t)v8 < v9)
  {
    *(void *)BOOL v8 = v7;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_19;
  }
  BOOL v11 = (char *)a1[67];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    sub_2E00();
  }
  uint64_t v14 = v9 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      sub_188D718();
    }
    BOOL v16 = (char *)operator new(8 * v15);
    BOOL v17 = &v16[8 * v12];
    BOOL v18 = &v16[8 * v15];
    *(void *)BOOL v17 = v7;
    uint64_t v10 = (uint64_t)(v17 + 8);
    int v19 = (char *)(v8 - v11);
    if (v8 == v11)
    {
LABEL_17:
      a1[67] = v17;
      a1[68] = v10;
      a1[69] = v18;
      if (!v8) {
        goto LABEL_19;
      }
LABEL_18:
      operator delete(v8);
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v16 = 0;
    BOOL v17 = (char *)(8 * v12);
    BOOL v18 = 0;
    *(void *)(8 * v12) = v7;
    uint64_t v10 = 8 * v12 + 8;
    int v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_17;
    }
  }
  unint64_t v21 = (unint64_t)(v19 - 8);
  if (v21 < 0x58) {
    goto LABEL_34;
  }
  if ((unint64_t)(v11 - v16) < 0x20) {
    goto LABEL_34;
  }
  uint64_t v22 = (v21 >> 3) + 1;
  uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
  int v24 = &v8[-v23];
  v17 -= v23;
  uint64_t v25 = &v16[8 * v12 - 16];
  int v26 = v8 - 16;
  uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v28 = *(_OWORD *)v26;
    *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
    *(_OWORD *)uint64_t v25 = v28;
    v25 -= 32;
    v26 -= 32;
    v27 -= 4;
  }
  while (v27);
  BOOL v8 = v24;
  if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v29 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v17 - 1) = v29;
      v17 -= 8;
    }
    while (v8 != v11);
  }
  BOOL v8 = (char *)a1[67];
  a1[67] = v17;
  a1[68] = v10;
  a1[69] = v18;
  if (v8) {
    goto LABEL_18;
  }
LABEL_19:
  a1[68] = v10;
  sub_3A6B94((uint64_t)v31);
  return sub_3A6B94((uint64_t)v34);
}

void sub_571638(_Unwind_Exception *a1)
{
}

void sub_571650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  sub_3A6B94((uint64_t)&STACK[0x468]);
  _Unwind_Resume(a1);
}

uint64_t sub_571670(uint64_t result, int *a2)
{
  int v2 = *a2;
  if ((*a2 - 5) <= 1)
  {
    uint64_t v3 = (void *)result;
    sub_564628((uint64_t)a2, (uint64_t)v27);
    switch(v28)
    {
      case 0:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 26;
        uint64_t v6 = v3 + 18;
        goto LABEL_10;
      case 1:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 28;
        uint64_t v6 = v3 + 20;
        goto LABEL_10;
      case 3:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 32;
        uint64_t v6 = v3 + 24;
        goto LABEL_10;
      case 4:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 27;
        uint64_t v6 = v3 + 19;
        goto LABEL_10;
      case 5:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 29;
        uint64_t v6 = v3 + 21;
        goto LABEL_10;
      case 7:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 31;
        uint64_t v6 = v3 + 23;
        goto LABEL_10;
      case 13:
        BOOL v4 = v2 == 6;
        BOOL v5 = v3 + 30;
        uint64_t v6 = v3 + 22;
LABEL_10:
        if (v4) {
          BOOL v5 = v6;
        }
        ++*v5;
        break;
      default:
        break;
    }
    uint64_t v7 = nullsub_1(v3[1]);
    sub_60506C(v27, (uint64_t)__p);
    BOOL v8 = sub_486214(v7, (unsigned __int8 *)__p);
    BOOL v9 = v8;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (v9) {
        return sub_3A6B94((uint64_t)v27);
      }
    }
    else if (v8)
    {
      return sub_3A6B94((uint64_t)v27);
    }
    uint64_t v10 = sub_69510();
    BOOL v11 = v29;
    uint64_t v12 = v30;
    sub_6BAC((uint64_t)__p);
    if (v11 != v12)
    {
      sub_5737DC((char *)*v11, (uint64_t)&v20);
      if ((v22 & 0x80u) == 0) {
        unint64_t v13 = &v20;
      }
      else {
        unint64_t v13 = v20;
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v14 = v22;
      }
      else {
        uint64_t v14 = v21;
      }
      sub_188FC78(__p, (uint64_t)v13, v14);
      if (((char)v22 & 0x80000000) == 0)
      {
        if (v11 + 8 == v12) {
          goto LABEL_41;
        }
LABEL_29:
        uint64_t v15 = 8;
        do
        {
          if (v15) {
            sub_188FC78(__p, (uint64_t)",", 1);
          }
          sub_5737DC((char *)v11[v15], (uint64_t)&v20);
          if ((v22 & 0x80u) == 0) {
            BOOL v16 = &v20;
          }
          else {
            BOOL v16 = v20;
          }
          if ((v22 & 0x80u) == 0) {
            uint64_t v17 = v22;
          }
          else {
            uint64_t v17 = v21;
          }
          sub_188FC78(__p, (uint64_t)v16, v17);
          if ((char)v22 < 0) {
            operator delete(v20);
          }
          v15 += 8;
        }
        while (&v11[v15] != v12);
        goto LABEL_41;
      }
      operator delete(v20);
      if (v11 + 8 != v12) {
        goto LABEL_29;
      }
    }
LABEL_41:
    std::stringbuf::str();
    if (v26 < 0) {
      operator delete(v25);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    sub_68EB4((uint64_t)v10);
    if (v19 < 0) {
      operator delete(v18);
    }
    return sub_3A6B94((uint64_t)v27);
  }
  return result;
}

void sub_5719E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_3A6B94((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_571ACC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 1128);
  *(unsigned char *)(a1 + 1128) = v4;
  if (v4) {
    sub_4C09FC(a1 + 8, a2 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 1136);
  long long v6 = *(_OWORD *)(a2 + 1152);
  long long v7 = *(_OWORD *)(a2 + 1168);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(_OWORD *)(a1 + 1168) = v7;
  *(_OWORD *)(a1 + 1152) = v6;
  *(_OWORD *)(a1 + 1136) = v5;
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(void *)(a2 + 1208) = 0;
  *(_OWORD *)(a2 + 1192) = 0u;
  sub_571CE4(a1 + 1216, (uint64_t *)(a2 + 1216));
  *(void *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(void *)(a2 + 1704) = 0;
  *(_OWORD *)(a2 + 1688) = 0u;
  long long v8 = *(_OWORD *)(a2 + 1712);
  long long v9 = *(_OWORD *)(a2 + 1728);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(_OWORD *)(a1 + 1728) = v9;
  *(_OWORD *)(a1 + 1712) = v8;
  *(void *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(void *)(a2 + 1768) = 0;
  *(_OWORD *)(a2 + 1752) = 0u;
  int v10 = *(unsigned __int8 *)(a2 + 1788);
  *(unsigned char *)(a1 + 1788) = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 1776);
    *(_DWORD *)(a1 + 1784) = *(_DWORD *)(a2 + 1784);
    *(void *)(a1 + 1776) = v11;
  }
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  int v12 = *(unsigned __int8 *)(a2 + 1968);
  *(unsigned char *)(a1 + 1968) = v12;
  if (v12)
  {
    *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
    long long v13 = *(_OWORD *)(a2 + 1808);
    *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
    *(_OWORD *)(a1 + 1808) = v13;
    *(void *)(a2 + 1824) = 0;
    *(void *)(a2 + 1816) = 0;
    *(void *)(a2 + 1808) = 0;
    long long v14 = *(_OWORD *)(a2 + 1832);
    *(_DWORD *)(a1 + 1848) = *(_DWORD *)(a2 + 1848);
    *(_OWORD *)(a1 + 1832) = v14;
    long long v15 = *(_OWORD *)(a2 + 1856);
    *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
    *(_OWORD *)(a1 + 1856) = v15;
    *(void *)(a2 + 1872) = 0;
    *(void *)(a2 + 1864) = 0;
    *(void *)(a2 + 1856) = 0;
    long long v16 = *(_OWORD *)(a2 + 1880);
    *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
    *(_OWORD *)(a1 + 1880) = v16;
    *(void *)(a2 + 1888) = 0;
    *(void *)(a2 + 1880) = 0;
    *(void *)(a2 + 1896) = 0;
    *(void *)(a1 + 1912) = 0;
    *(void *)(a1 + 1904) = 0;
    *(void *)(a1 + 1920) = 0;
    *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a2 + 1904);
    *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
    *(void *)(a2 + 1912) = 0;
    *(void *)(a2 + 1904) = 0;
    *(void *)(a2 + 1920) = 0;
    *(_WORD *)(a1 + 1928) = *(_WORD *)(a2 + 1928);
    long long v17 = *(_OWORD *)(a2 + 1936);
    *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
    *(_OWORD *)(a1 + 1936) = v17;
    *(void *)(a2 + 1952) = 0;
    *(void *)(a2 + 1944) = 0;
    *(void *)(a2 + 1936) = 0;
    *(_WORD *)(a1 + 1960) = *(_WORD *)(a2 + 1960);
  }
  return a1;
}

uint64_t sub_571CE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[4] = 0;
  *((_OWORD *)a2 + 1) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)(a1 + 56) = a2[7];
  a2[7] = 0;
  *(_OWORD *)(a2 + 5) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = a2[10];
  a2[10] = 0;
  *((_OWORD *)a2 + 4) = 0u;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(void *)(a1 + 104) = a2[13];
  *(_OWORD *)(a2 + 11) = 0u;
  uint64_t v5 = a2[14];
  *(_OWORD *)(a2 + 13) = 0u;
  *(void *)(a1 + 112) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 30);
  *(unsigned char *)(a1 + 124) = *((unsigned char *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v5;
  long long v6 = *((_OWORD *)a2 + 8);
  *(void *)(a1 + 144) = a2[18];
  *(_OWORD *)(a1 + 128) = v6;
  a2[16] = 0;
  *(_OWORD *)(a2 + 17) = 0u;
  long long v7 = *(_OWORD *)(a2 + 19);
  *(void *)(a1 + 168) = a2[21];
  *(_OWORD *)(a1 + 152) = v7;
  *((_OWORD *)a2 + 10) = 0u;
  a2[19] = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(void *)(a1 + 192) = a2[24];
  a2[24] = 0;
  *((_OWORD *)a2 + 11) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(void *)(a1 + 216) = a2[27];
  a2[27] = 0;
  *(_OWORD *)(a2 + 25) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  *(void *)(a1 + 240) = a2[30];
  a2[30] = 0;
  *((_OWORD *)a2 + 14) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  *(void *)(a1 + 264) = a2[33];
  *(_OWORD *)(a2 + 31) = 0u;
  uint64_t v8 = a2[34];
  *(_OWORD *)(a2 + 33) = 0u;
  *(void *)(a1 + 272) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 70);
  *(unsigned char *)(a1 + 284) = *((unsigned char *)a2 + 284);
  *(_DWORD *)(a1 + 280) = v8;
  long long v9 = *((_OWORD *)a2 + 18);
  *(void *)(a1 + 304) = a2[38];
  *(_OWORD *)(a1 + 288) = v9;
  a2[37] = 0;
  a2[38] = 0;
  a2[36] = 0;
  long long v10 = *(_OWORD *)(a2 + 39);
  *(void *)(a1 + 328) = a2[41];
  *(_OWORD *)(a1 + 312) = v10;
  a2[40] = 0;
  a2[41] = 0;
  a2[39] = 0;
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 92);
  sub_4F38B0((void *)*((unsigned int *)a2 + 92), a2 + 42, (void *)(a1 + 336));
  *(void *)(a1 + 376) = a2[47];
  long long v11 = *((_OWORD *)a2 + 24);
  *(void *)(a1 + 400) = a2[50];
  *(_OWORD *)(a1 + 384) = v11;
  a2[49] = 0;
  a2[50] = 0;
  a2[48] = 0;
  *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
  long long v12 = *((_OWORD *)a2 + 26);
  *(void *)(a1 + 432) = a2[54];
  *(_OWORD *)(a1 + 416) = v12;
  a2[53] = 0;
  a2[54] = 0;
  a2[52] = 0;
  *(unsigned char *)(a1 + 440) = *((unsigned char *)a2 + 440);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  *(void *)(a1 + 464) = a2[58];
  a2[56] = 0;
  a2[57] = 0;
  a2[58] = 0;
  return a1;
}

char *sub_571F3C(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = 0x367D6E020E64C149 * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x20E64C148FEF8CLL) {
    sub_2E00();
  }
  if (0x6CFADC041CC98292 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x6CFADC041CC98292 * ((a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x367D6E020E64C149 * ((a1[2] - v3) >> 3)) >= 0x1073260A47F7C6) {
    unint64_t v8 = 0x20E64C148FEF8CLL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x20E64C148FEF8CLL) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(1992 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  long long v10 = &v9[1992 * v5];
  *(_DWORD *)long long v10 = *(_DWORD *)a2;
  int v11 = *(unsigned __int8 *)(a2 + 1984);
  v10[1984] = v11;
  if (v11)
  {
    sub_55BBD8((uint64_t)&v9[1992 * v5 + 8], a2 + 8);
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
  }
  long long v12 = &v9[1992 * v8];
  long long v13 = v10 + 1992;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    if (!v3) {
      return v10 + 1992;
    }
    goto LABEL_24;
  }
  uint64_t v14 = 0;
  do
  {
    *(_DWORD *)&v10[v14 - 1992] = *(_DWORD *)&v4[v14 - 1992];
    int v15 = v4[v14 - 8];
    v10[v14 - 8] = v15;
    if (v15) {
      sub_571ACC((uint64_t)&v10[v14 - 1984], (uint64_t)&v4[v14 - 1984]);
    }
    v14 -= 1992;
  }
  while (&v4[v14] != v3);
  long long v16 = *a1;
  uint64_t v3 = a1[1];
  *a1 = &v10[v14];
  a1[1] = v13;
  a1[2] = v12;
  if (v3 != v16)
  {
    do
    {
      if (*(v3 - 8))
      {
        sub_55BCE8((uint64_t)(v3 - 1984));
        *(v3 - 8) = 0;
      }
      v3 -= 1992;
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_24:
  }
    operator delete(v3);
  return v10 + 1992;
}

uint64_t sub_572108(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    *(void *)(a1 + 16) = v3 - 1992;
    if (*(unsigned char *)(v3 - 8))
    {
      sub_55BCE8(v3 - 1984);
      *(unsigned char *)(v3 - 8) = 0;
      uint64_t v3 = *(void *)(a1 + 16);
    }
    else
    {
      v3 -= 1992;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_572178(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 1992;
  uint64_t v7 = (uint64_t)*a1 + 1992 * v6;
  if (a5 < 1) {
    return v7;
  }
  unint64_t v12 = (unint64_t)a1[1];
  int v11 = a1[2];
  if (0x367D6E020E64C149 * ((uint64_t)&v11[-v12] >> 3) >= a5)
  {
    if (0x367D6E020E64C149 * ((uint64_t)(v12 - v7) >> 3) >= a5)
    {
      uint64_t v18 = a3 + 1992 * a5;
    }
    else
    {
      uint64_t v46 = v12 - v7;
      uint64_t v18 = a3 + 8 * ((uint64_t)(v12 - v7) >> 3);
      if (v18 != a4)
      {
        uint64_t v19 = v12 + 8;
        uint64_t v20 = a3 + 8 * ((uint64_t)(v12 - v7) >> 3) + 8;
        unint64_t v21 = v12;
        do
        {
          uint64_t v22 = v20 - 8;
          *(_DWORD *)(v19 - 8) = *(_DWORD *)(v20 - 8);
          int v23 = *(unsigned __int8 *)(v20 + 1976);
          *(unsigned char *)(v19 + 1976) = v23;
          if (v23) {
            uint64_t v19 = sub_55BBD8(v19, v20);
          }
          v21 += 1992;
          v19 += 1992;
          v20 += 1992;
        }
        while (v22 + 1992 != a4);
        a1[1] = (void *)v21;
        if (v46 < 1) {
          return v7;
        }
        goto LABEL_21;
      }
      a1[1] = (void *)v12;
      if (v46 < 1) {
        return v7;
      }
    }
LABEL_21:
    sub_572558((uint64_t)a1, v7, v12, v7 + 1992 * a5);
    if (v18 != a3)
    {
      uint64_t v24 = a3 + 8;
      uint64_t v25 = v7;
      do
      {
        uint64_t v26 = v24 - 8;
        *(_DWORD *)uint64_t v25 = *(_DWORD *)(v24 - 8);
        uint64_t v27 = v25 + 8;
        if (*(unsigned char *)(v24 + 1976))
        {
          if (*(unsigned char *)(v25 + 1984))
          {
            sub_572C48(v27, v24);
          }
          else
          {
            sub_55BBD8(v27, v24);
            *(unsigned char *)(v25 + 1984) = 1;
          }
        }
        else if (*(unsigned char *)(v25 + 1984))
        {
          sub_55BCE8(v27);
          *(unsigned char *)(v25 + 1984) = 0;
        }
        v25 += 1992;
        v24 += 1992;
      }
      while (v26 + 1992 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 + 0x367D6E020E64C149 * ((uint64_t)(v12 - (void)v5) >> 3);
  if (v13 > 0x20E64C148FEF8CLL) {
    sub_2E00();
  }
  unint64_t v14 = 0x367D6E020E64C149 * ((v11 - v5) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x1073260A47F7C6) {
    unint64_t v15 = 0x20E64C148FEF8CLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x20E64C148FEF8CLL) {
      sub_188D718();
    }
    long long v16 = (char *)operator new(1992 * v15);
  }
  else
  {
    long long v16 = 0;
  }
  int v28 = &v16[1992 * v6];
  uint64_t v29 = &v16[1992 * v15];
  int v30 = &v28[1992 * a5];
  uint64_t v31 = (uint64_t)(v28 + 8);
  uint64_t v32 = a3 + 8;
  do
  {
    *(_DWORD *)(v31 - 8) = *(_DWORD *)(v32 - 8);
    uint64_t v33 = v31 - 8;
    int v34 = *(unsigned __int8 *)(v32 + 1976);
    *(unsigned char *)(v31 + 1976) = v34;
    if (v34) {
      uint64_t v31 = sub_55BBD8(v31, v32);
    }
    v31 += 1992;
    v32 += 1992;
  }
  while ((char *)(v33 + 1992) != v30);
  uint64_t v47 = v29;
  uint64_t v35 = (char *)*a1;
  char v36 = &v16[1992 * v6];
  if (*a1 != (void *)v7)
  {
    uint64_t v37 = 1992 * v6;
    char v38 = v5;
    do
    {
      *(_DWORD *)&v16[v37 - 1992] = *(_DWORD *)&v38[v37 - 1992];
      int v39 = v38[v37 - 8];
      v16[v37 - 8] = v39;
      if (v39) {
        sub_571ACC((uint64_t)&v16[v37 - 1984], (uint64_t)&v38[v37 - 1984]);
      }
      v16 -= 1992;
      v38 -= 1992;
    }
    while (&v38[v37] != v35);
    char v36 = &v16[1992 * v6];
  }
  uint64_t v40 = a1[1];
  if (v40 != (void *)v7)
  {
    uint64_t v41 = (uint64_t)&v5[1992 * v6 + 8];
    do
    {
      uint64_t v42 = v41 - 8;
      *(_DWORD *)int v30 = *(_DWORD *)(v41 - 8);
      int v43 = *(unsigned __int8 *)(v41 + 1976);
      v30[1984] = v43;
      if (v43) {
        sub_571ACC((uint64_t)(v30 + 8), v41);
      }
      v30 += 1992;
      v41 += 1992;
    }
    while ((void *)(v42 + 1992) != v40);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v44 = *a1;
  *a1 = v36;
  a1[1] = v30;
  for (a1[2] = v47; (void *)v7 != v44; v7 -= 1992)
  {
    if (*(unsigned char *)(v7 - 8))
    {
      sub_55BCE8(v7 - 1984);
      *(unsigned char *)(v7 - 8) = 0;
    }
  }
  if (v44) {
    operator delete(v44);
  }
  return (uint64_t)v28;
}

uint64_t sub_572558(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = 0x367D6E020E64C149 * ((v6 - a4) >> 3);
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    *(void *)(result + 8) = v6;
    if (v6 == a4) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v10 = a2 + 8 * ((v6 - a4) >> 3) + 8;
  uint64_t v11 = *(void *)(result + 8);
  do
  {
    uint64_t v12 = v10 - 8;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)(v10 - 8);
    int v13 = *(unsigned __int8 *)(v10 + 1976);
    *(unsigned char *)(v11 + 1984) = v13;
    if (v13) {
      uint64_t result = sub_571ACC(v11 + 8, v10);
    }
    v11 += 1992;
    v10 += 1992;
  }
  while (v12 + 1992 < a3);
  *(void *)(v5 + 8) = v11;
  if (v6 != a4)
  {
LABEL_9:
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + v14;
      *(_DWORD *)(v6 + v14 - 1992) = *(_DWORD *)(v8 + v14 - 1992);
      uint64_t result = v6 + v14 - 1984;
      if (*(unsigned char *)(v8 + v14 - 8))
      {
        uint64_t v16 = v8 + v14 - 1984;
        if (*(unsigned char *)(v6 + v14 - 8))
        {
          uint64_t result = sub_5726A4(result, v16);
        }
        else
        {
          uint64_t result = sub_571ACC(result, v16);
          *(unsigned char *)(v15 - 8) = 1;
        }
      }
      else if (*(unsigned char *)(v6 + v14 - 8))
      {
        uint64_t result = sub_55BCE8(result);
        *(unsigned char *)(v15 - 8) = 0;
      }
      v14 -= 1992;
    }
    while (-1992 * v7 != v14);
  }
  return result;
}

uint64_t sub_5726A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)(a2 + 1128))
  {
    uint64_t v5 = a2 + 8;
    if (*(unsigned char *)(a1 + 1128))
    {
      sub_4C1EE0(v4, v5);
    }
    else
    {
      sub_4C09FC(v4, v5);
      *(unsigned char *)(a1 + 1128) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 1128))
  {
    sub_3A6B94(v4);
    *(unsigned char *)(a1 + 1128) = 0;
  }
  long long v6 = *(_OWORD *)(a2 + 1136);
  long long v7 = *(_OWORD *)(a2 + 1152);
  long long v8 = *(_OWORD *)(a2 + 1168);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(_OWORD *)(a1 + 1168) = v8;
  *(_OWORD *)(a1 + 1152) = v7;
  *(_OWORD *)(a1 + 1136) = v6;
  long long v9 = *(void **)(a1 + 1192);
  if (v9)
  {
    *(void *)(a1 + 1200) = v9;
    operator delete(v9);
    *(void *)(a1 + 1192) = 0;
    *(void *)(a1 + 1200) = 0;
    *(void *)(a1 + 1208) = 0;
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(void *)(a2 + 1192) = 0;
  *(void *)(a2 + 1200) = 0;
  *(void *)(a2 + 1208) = 0;
  sub_5729B0(a1 + 1216, (uint64_t *)(a2 + 1216));
  uint64_t v10 = *(void **)(a1 + 1688);
  if (v10)
  {
    *(void *)(a1 + 1696) = v10;
    operator delete(v10);
    *(void *)(a1 + 1688) = 0;
    *(void *)(a1 + 1696) = 0;
    *(void *)(a1 + 1704) = 0;
  }
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(void *)(a2 + 1704) = 0;
  *(_OWORD *)(a2 + 1688) = 0u;
  uint64_t v11 = *(void *)(a2 + 1744);
  long long v12 = *(_OWORD *)(a2 + 1728);
  *(_OWORD *)(a1 + 1712) = *(_OWORD *)(a2 + 1712);
  *(_OWORD *)(a1 + 1728) = v12;
  *(void *)(a1 + 1744) = v11;
  uint64_t v13 = *(void *)(a1 + 1752);
  if (v13)
  {
    uint64_t v14 = (void **)(a1 + 1752);
    uint64_t v15 = *(void *)(a1 + 1760);
    uint64_t v16 = *(void **)(a1 + 1752);
    if (v15 != v13)
    {
      do
        uint64_t v15 = sub_3A6B94(v15 - 1120);
      while (v15 != v13);
      uint64_t v16 = *v14;
    }
    *(void *)(a1 + 1760) = v13;
    operator delete(v16);
    unsigned char *v14 = 0;
    *(void *)(a1 + 1760) = 0;
    *(void *)(a1 + 1768) = 0;
  }
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(void *)(a2 + 1752) = 0;
  *(void *)(a2 + 1760) = 0;
  *(void *)(a2 + 1768) = 0;
  int v17 = *(unsigned __int8 *)(a1 + 1788);
  if (*(unsigned char *)(a2 + 1788))
  {
    uint64_t v18 = *(void *)(a2 + 1776);
    *(_DWORD *)(a1 + 1784) = *(_DWORD *)(a2 + 1784);
    *(void *)(a1 + 1776) = v18;
    if (v17) {
      goto LABEL_17;
    }
    char v19 = 1;
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 1788))
  {
    char v19 = 0;
LABEL_16:
    *(unsigned char *)(a1 + 1788) = v19;
  }
LABEL_17:
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  uint64_t v20 = a1 + 1800;
  if (*(unsigned char *)(a2 + 1968))
  {
    if (!*(unsigned char *)(a1 + 1968))
    {
      *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
      long long v21 = *(_OWORD *)(a2 + 1808);
      *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
      *(_OWORD *)(a1 + 1808) = v21;
      *(void *)(a2 + 1824) = 0;
      *(void *)(a2 + 1816) = 0;
      *(void *)(a2 + 1808) = 0;
      long long v22 = *(_OWORD *)(a2 + 1832);
      *(_DWORD *)(a1 + 1848) = *(_DWORD *)(a2 + 1848);
      *(_OWORD *)(a1 + 1832) = v22;
      long long v23 = *(_OWORD *)(a2 + 1856);
      *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
      *(_OWORD *)(a1 + 1856) = v23;
      *(void *)(a2 + 1872) = 0;
      *(void *)(a2 + 1864) = 0;
      *(void *)(a2 + 1856) = 0;
      long long v24 = *(_OWORD *)(a2 + 1880);
      *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
      *(_OWORD *)(a1 + 1880) = v24;
      *(void *)(a2 + 1888) = 0;
      *(void *)(a2 + 1880) = 0;
      *(void *)(a2 + 1896) = 0;
      *(void *)(a1 + 1912) = 0;
      *(void *)(a1 + 1904) = 0;
      *(void *)(a1 + 1920) = 0;
      *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a2 + 1904);
      *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
      *(void *)(a2 + 1912) = 0;
      *(void *)(a2 + 1904) = 0;
      *(void *)(a2 + 1920) = 0;
      *(_WORD *)(a1 + 1928) = *(_WORD *)(a2 + 1928);
      long long v25 = *(_OWORD *)(a2 + 1936);
      *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
      *(_OWORD *)(a1 + 1936) = v25;
      *(void *)(a2 + 1952) = 0;
      *(void *)(a2 + 1944) = 0;
      *(void *)(a2 + 1936) = 0;
      *(_WORD *)(a1 + 1960) = *(_WORD *)(a2 + 1960);
      *(unsigned char *)(a1 + 1968) = 1;
      return a1;
    }
    sub_572AB4(v20, a2 + 1800);
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1968)) {
      return a1;
    }
    sub_4BCFD0(v20);
    *(unsigned char *)(a1 + 1968) = 0;
    return a1;
  }
}

uint64_t sub_5729B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  sub_4D90B4(a1 + 16, (uint64_t)(a2 + 2));
  sub_4D90B4(a1 + 176, (uint64_t)(a2 + 22));
  sub_4F377C(a1 + 336, (uint64_t)(a2 + 42));
  *(void *)(a1 + 376) = a2[47];
  uint64_t v5 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*v5);
  }
  long long v6 = *((_OWORD *)a2 + 24);
  *(void *)(a1 + 400) = a2[50];
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 407) = 0;
  *((unsigned char *)a2 + 384) = 0;
  *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
  long long v7 = (void **)(a1 + 416);
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*v7);
  }
  long long v8 = *((_OWORD *)a2 + 26);
  *(void *)(a1 + 432) = a2[54];
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 439) = 0;
  *((unsigned char *)a2 + 416) = 0;
  *(unsigned char *)(a1 + 440) = *((unsigned char *)a2 + 440);
  long long v9 = *(void **)(a1 + 448);
  if (v9)
  {
    *(void *)(a1 + 456) = v9;
    operator delete(v9);
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
    *(void *)(a1 + 464) = 0;
  }
  *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  *(void *)(a1 + 464) = a2[58];
  a2[56] = 0;
  a2[57] = 0;
  a2[58] = 0;
  return a1;
}

uint64_t sub_572AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  long long v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)long long v8 = v9;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  uint64_t v10 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)uint64_t v10 = v11;
  *(unsigned char *)(a2 + 103) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  long long v12 = (void **)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 104);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 112);
    uint64_t v15 = *(void **)(a1 + 104);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      uint64_t v15 = *v12;
    }
    *(void *)(a1 + 112) = v13;
    operator delete(v15);
    char *v12 = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 104) = 0;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  uint64_t v16 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t sub_572C48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)(a2 + 1128))
  {
    uint64_t v5 = a2 + 8;
    if (*(unsigned char *)(a1 + 1128))
    {
      sub_4C9334(v4, v5);
    }
    else
    {
      sub_4BE9F4(v4, v5);
      *(unsigned char *)(a1 + 1128) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 1128))
  {
    sub_3A6B94(v4);
    *(unsigned char *)(a1 + 1128) = 0;
  }
  sub_572D60(a1 + 1136, (long long *)(a2 + 1136));
  if (a1 != a2) {
    sub_572E74((uint64_t *)(a1 + 1752), *(void *)(a2 + 1752), *(void *)(a2 + 1760), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 1760) - *(void *)(a2 + 1752)) >> 5));
  }
  int v6 = *(unsigned __int8 *)(a1 + 1788);
  if (*(unsigned char *)(a2 + 1788))
  {
    uint64_t v7 = *(void *)(a2 + 1776);
    *(_DWORD *)(a1 + 1784) = *(_DWORD *)(a2 + 1784);
    *(void *)(a1 + 1776) = v7;
    if (v6) {
      goto LABEL_10;
    }
    char v8 = 1;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 1788))
  {
    char v8 = 0;
LABEL_9:
    *(unsigned char *)(a1 + 1788) = v8;
  }
LABEL_10:
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  uint64_t v9 = a1 + 1800;
  if (*(unsigned char *)(a2 + 1968))
  {
    sub_57311C(v9, a2 + 1800);
    return a1;
  }
  if (!*(unsigned char *)(a1 + 1968)) {
    return a1;
  }
  sub_4BCFD0(v9);
  *(unsigned char *)(a1 + 1968) = 0;
  return a1;
}

uint64_t sub_572D60(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  if ((long long *)a1 != a2) {
    sub_326C0((void *)(a1 + 56), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  uint64_t v7 = *((void *)a2 + 10);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(void *)(a1 + 80) = v7;
  sub_52FD00(a1 + 96, (uint64_t)(a2 + 6));
  sub_52FD00(a1 + 256, (uint64_t)(a2 + 16));
  sub_4F39B8(a1 + 416, (std::string *)(a2 + 26));
  *(void *)(a1 + 456) = *((void *)a2 + 57);
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 29));
  *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 31));
  *(unsigned char *)(a1 + 520) = *((unsigned char *)a2 + 520);
  if ((long long *)a1 != a2)
  {
    sub_326C0((void *)(a1 + 528), *((char **)a2 + 66), *((char **)a2 + 67), (uint64_t)(*((void *)a2 + 67) - *((void *)a2 + 66)) >> 3);
    sub_34FB50((void *)(a1 + 552), *((char **)a2 + 69), *((char **)a2 + 70), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 70) - *((void *)a2 + 69)) >> 3));
  }
  long long v8 = a2[36];
  long long v9 = a2[37];
  *(void *)(a1 + 608) = *((void *)a2 + 76);
  *(_OWORD *)(a1 + 576) = v8;
  *(_OWORD *)(a1 + 592) = v9;
  return a1;
}

uint64_t sub_572E74(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xAF8AF8AF8AF8AF8BLL * ((v8 - *a1) >> 5) >= a4)
  {
    uint64_t result = a1[1];
    if (0xAF8AF8AF8AF8AF8BLL * ((result - v9) >> 5) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_4C9334(v9, v6);
          v6 += 1120;
          v9 += 1120;
          v23 += 1120;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_3A6B94(result - 1120);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_4C9334(v9, v6);
          v6 += 1120;
          v9 += 1120;
          v20 -= 1120;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_4BE9F4(v9 + v22, v19 + v22);
          v22 += 1120;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      long long v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_3A6B94(v10 - 1120);
        while (v10 != v9);
        long long v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x3A83A83A83A83ALL) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xAF8AF8AF8AF8AF8BLL * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x1D41D41D41D41DLL ? 0x3A83A83A83A83ALL : v13;
    if (v14 > 0x3A83A83A83A83ALL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 1120 * v14;
    uint64_t result = (uint64_t)operator new(1120 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_4BE9F4(v17 + v18, v6 + v18);
        v18 += 1120;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_57311C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 168))
  {
    *(void *)a1 = *(void *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
    int v5 = *(_DWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = v5;
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
    if (a1 != a2) {
      sub_69208(a1 + 104, *(std::string **)(a2 + 104), *(std::string **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    }
    *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
    std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    return a1;
  }
  else
  {
    uint64_t result = sub_4BD34C(a1, a2);
    *(unsigned char *)(a1 + 168) = 1;
  }
  return result;
}

uint64_t sub_5731EC(void *a1, unint64_t a2)
{
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 120 * a2;
}

void sub_57333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_57341C(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = 0x367D6E020E64C149 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x20E64C148FEF8CLL) {
    sub_2E00();
  }
  if (0x6CFADC041CC98292 * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x6CFADC041CC98292 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x367D6E020E64C149 * ((a1[2] - *a1) >> 3)) >= 0x1073260A47F7C6) {
    unint64_t v8 = 0x20E64C148FEF8CLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x20E64C148FEF8CLL) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(1992 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v17 = (uint64_t)&v9[1992 * v4];
  std::string v18 = &v9[1992 * v8];
  sub_564584(v17, *a2, a3);
  uint64_t v10 = v17 + 1992;
  unint64_t v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      *(_DWORD *)(v17 + v13 - 1992) = *(_DWORD *)&v11[v13 - 1992];
      int v14 = v11[v13 - 8];
      *(unsigned char *)(v17 + v13 - 8) = v14;
      if (v14) {
        sub_571ACC(v17 + v13 - 1984, (uint64_t)&v11[v13 - 1984]);
      }
      v13 -= 1992;
    }
    while (&v11[v13] != v12);
    std::string v15 = (char *)*a1;
    long long v11 = (char *)a1[1];
    *a1 = v17 + v13;
    a1[1] = v10;
    a1[2] = (uint64_t)v18;
    if (v11 != v15)
    {
      do
      {
        if (*(v11 - 8))
        {
          sub_55BCE8((uint64_t)(v11 - 1984));
          *(v11 - 8) = 0;
        }
        v11 -= 1992;
      }
      while (v11 != v15);
      long long v11 = v15;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v17 + 1992;
}

void sub_5735E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_572108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5735FC(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = 0x367D6E020E64C149 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x20E64C148FEF8CLL) {
    sub_2E00();
  }
  if (0x6CFADC041CC98292 * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x6CFADC041CC98292 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x367D6E020E64C149 * ((a1[2] - *a1) >> 3)) >= 0x1073260A47F7C6) {
    unint64_t v8 = 0x20E64C148FEF8CLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x20E64C148FEF8CLL) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(1992 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v17 = (uint64_t)&v9[1992 * v4];
  std::string v18 = &v9[1992 * v8];
  sub_564584(v17, *a2, a3);
  uint64_t v10 = v17 + 1992;
  unint64_t v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      *(_DWORD *)(v17 + v13 - 1992) = *(_DWORD *)&v11[v13 - 1992];
      int v14 = v11[v13 - 8];
      *(unsigned char *)(v17 + v13 - 8) = v14;
      if (v14) {
        sub_571ACC(v17 + v13 - 1984, (uint64_t)&v11[v13 - 1984]);
      }
      v13 -= 1992;
    }
    while (&v11[v13] != v12);
    std::string v15 = (char *)*a1;
    long long v11 = (char *)a1[1];
    *a1 = v17 + v13;
    a1[1] = v10;
    a1[2] = (uint64_t)v18;
    if (v11 != v15)
    {
      do
      {
        if (*(v11 - 8))
        {
          sub_55BCE8((uint64_t)(v11 - 1984));
          *(v11 - 8) = 0;
        }
        v11 -= 1992;
      }
      while (v11 != v15);
      long long v11 = v15;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v17 + 1992;
}

void sub_5737C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_572108((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_5737DC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "UNKNOWN");
      break;
    case 1:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "APPLE");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "TOMTOM");
      break;
    case 6:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "APPLE_UGC");
      break;
    case 12:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "APPLE_WEATHER");
      break;
    case 14:
      uint64_t result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9250;
      strcpy(result, "APPLE_INCIDENTDETECTION");
      break;
    case 15:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "APPLE_CONFLATED");
      break;
    case 18:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "APPLE_PROBES");
      break;
    case 23:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "APPLE_LIVEDATA");
      break;
    case 64:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "THIRD_PARTY");
      break;
    case 79:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "APPLE_RAP");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "UNSUPPORTED_TYPE");
      break;
  }
  return result;
}

double sub_573B98()
{
  byte_25709B7 = 1;
  word_25709A0 = 65;
  byte_25709CF = 1;
  word_25709B8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2570A60 = 0u;
  *(_OWORD *)&qword_2570A70 = 0u;
  dword_2570A80 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2570A60, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2570A60, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2570A60, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2570A60, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25709E7 = 8;
  strcpy((char *)&qword_25709D0, "any_mode");
  byte_25709FF = 7;
  strcpy((char *)&dword_25709E8, "cycling");
  byte_2570A17 = 7;
  strcpy((char *)&dword_2570A00, "driving");
  byte_2570A2F = 7;
  strcpy((char *)&dword_2570A18, "walking");
  qword_2570A38 = 0;
  qword_2570A40 = 0;
  qword_2570A30 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2570A30 = (uint64_t)v0;
  qword_2570A38 = (uint64_t)(v0 + 9);
  qword_2570A40 = (uint64_t)(v0 + 9);
  qword_2570A48 = 0;
  qword_2570A50 = 0;
  unk_2570A58 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2570A50 = (uint64_t)(v1 + 9);
  unk_2570A58 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2570A48 = (uint64_t)v1;
  return result;
}

void sub_573E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2570A70) {
    sub_20A9420((void **)qword_2570A70);
  }
  uint64_t v37 = (void *)xmmword_2570A60;
  *(void *)&xmmword_2570A60 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_573F00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  sub_56E6F4(a1 + 3);
  sub_540E60(a1 + 73, a2, a3, a5);
  return a1;
}

void sub_573F5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 560);
  if (v3)
  {
    *(void *)(v1 + 568) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_573F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)int v14 = 0u;
  long long v15 = 0u;
  LOBYTE(v17) = 1;
  BYTE5(v17) = 1;
  *(_DWORD *)((char *)&v17 + 6) = 0;
  *(_DWORD *)((char *)&v17 + 9) = 0;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  uint64_t v20 = 0xFFFFFFFFLL;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::string __p = 0;
  sub_56F5B4(a1 + 24, (uint64_t)&v12);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = v14[0];
  if (v14[0])
  {
    char v7 = v14[1];
    int v8 = v14[0];
    if (v14[1] != v14[0])
    {
      do
        char v7 = (void *)sub_3AFFFC((uint64_t)v7 - 1056);
      while (v7 != v6);
      int v8 = v14[0];
    }
    v14[1] = v6;
    operator delete(v8);
  }
  long long v9 = (char *)v12;
  if (v12 != v13)
  {
    sub_540E64(a1 + 584, a4, (int *)v14);
    sub_64A588(a4, (uint64_t)v14);
    sub_55BA78((uint64_t)v14);
    long long v9 = (char *)v12;
  }
  if (v9)
  {
    char v10 = v13;
    int v11 = v9;
    if (v13 != v9)
    {
      do
      {
        if (*(v10 - 8))
        {
          sub_55BCE8((uint64_t)(v10 - 1984));
          *(v10 - 8) = 0;
        }
        v10 -= 1992;
      }
      while (v10 != v9);
      int v11 = v12;
    }
    char v13 = v9;
    operator delete(v11);
  }
}

void sub_5740E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_55BA78((uint64_t)va1);
  sub_56F088((void **)va);
  _Unwind_Resume(a1);
}

void sub_574100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_56F088((void **)va);
  _Unwind_Resume(a1);
}

void sub_574114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3C77C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_574128(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  sub_56F8CC(a1 + 24, a2, a4, a3, (uint64_t)&v21);
  char v7 = (char *)v21;
  if (v21 != v22)
  {
    v23[0] = 0;
    v23[1] = 0;
    std::string __p = 0;
    long long v17 = 0;
    uint64_t v18 = 0;
    sub_5742D8(a1, (uint64_t)&v21, a4, v23, a3, (uint64_t *)&__p, (uint64_t *)&v19);
    int v8 = __p;
    if (__p)
    {
      uint64_t v9 = (uint64_t)v17;
      char v10 = __p;
      if (v17 != __p)
      {
        do
          uint64_t v9 = sub_574D4C(v9 - 7560);
        while ((void *)v9 != v8);
        char v10 = __p;
      }
      long long v17 = v8;
      operator delete(v10);
    }
    sub_648274((uint64_t)a4, (uint64_t *)&v19);
    int v11 = v19;
    if (v19)
    {
      uint64_t v12 = (uint64_t)v20;
      char v13 = v19;
      if (v20 != v19)
      {
        do
          uint64_t v12 = sub_55BA78(v12 - 1056);
        while ((void *)v12 != v11);
        char v13 = v19;
      }
      uint64_t v20 = v11;
      operator delete(v13);
    }
    char v7 = (char *)v21;
  }
  if (v7)
  {
    int v14 = v22;
    long long v15 = v7;
    if (v22 != v7)
    {
      do
      {
        if (*(v14 - 8))
        {
          sub_55BCE8((uint64_t)(v14 - 1984));
          *(v14 - 8) = 0;
        }
        v14 -= 1992;
      }
      while (v14 != v7);
      long long v15 = v21;
    }
    uint64_t v22 = v7;
    operator delete(v15);
  }
}

void sub_57429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_574598((void **)va);
  sub_56F088((void **)va1);
  _Unwind_Resume(a1);
}

void sub_5742B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_5742D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, void **a4@<X3>, __n128 *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  int v11 = (uint64_t *)result;
  uint64_t v13 = *(void *)(result + 8);
  if (*(unsigned char *)(v13 + 1516))
  {
    BOOL v14 = 1;
    char v21 = 0;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    long long v15 = *(_DWORD **)a2;
    long long v16 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 == v16) {
      return result;
    }
  }
  else
  {
    BOOL v14 = *(unsigned char *)(v13 + 1517) != 0;
    char v21 = 0;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    long long v15 = *(_DWORD **)a2;
    long long v16 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 == v16) {
      return result;
    }
  }
  if (v14)
  {
    do
    {
      sub_541B4C((uint64_t)(v11 + 73), (uint64_t)v15, a3, a4, a6, a5, &v21, (uint64_t)v22);
      unint64_t v17 = a7[1];
      if (v17 >= a7[2])
      {
        uint64_t v18 = sub_576DC8(a7, (uint64_t)v22);
      }
      else
      {
        sub_576F5C(a7[1], (uint64_t)v22);
        uint64_t v18 = v17 + 1056;
        a7[1] = v17 + 1056;
      }
      a7[1] = v18;
      sub_574830(v11, v15, v21);
      double result = sub_55BA78((uint64_t)v22);
      v15 += 498;
    }
    while (v15 != v16);
  }
  else
  {
    do
    {
      if (a7[1] - *a7 == 1056) {
        break;
      }
      sub_541B4C((uint64_t)(v11 + 73), (uint64_t)v15, a3, a4, a6, a5, &v21, (uint64_t)v22);
      unint64_t v19 = a7[1];
      if (v19 >= a7[2])
      {
        uint64_t v20 = sub_576DC8(a7, (uint64_t)v22);
      }
      else
      {
        sub_576F5C(a7[1], (uint64_t)v22);
        uint64_t v20 = v19 + 1056;
        a7[1] = v19 + 1056;
      }
      a7[1] = v20;
      sub_574830(v11, v15, v21);
      double result = sub_55BA78((uint64_t)v22);
      v15 += 498;
    }
    while (v15 != v16);
  }
  return result;
}

void sub_5744C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v4;
  sub_55BA78((uint64_t)va);
  sub_574598((void **)v3);
  _Unwind_Resume(a1);
}

void sub_5744FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_55BA78((uint64_t)va);
  sub_574598(v3);
  _Unwind_Resume(a1);
}

void **sub_574530(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_574D4C(v3 - 7560);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_574598(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_55BA78(v3 - 1056);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_5745F4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 1536) && sub_DAA288(v3 + 1592) && *a2 != a2[1])
  {
    uint64_t v7 = (uint64_t *)sub_5231C(a3);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v9) {
      goto LABEL_10;
    }
    while (!sub_6477A0(v8))
    {
      v8 += 7560;
      if (v8 == v9)
      {
        uint64_t v8 = v9;
        break;
      }
    }
    if (v8 == v7[1] || (uint64_t v10 = v8 - *v7, v10 == -7560))
    {
LABEL_10:
      int v30 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      LOBYTE(v31) = 1;
      int v30 = (void *)sub_576B88(v7, 0xBAA6550FFBAA6551 * (v10 >> 3));
    }
    int v11 = (__n128 *)sub_50BE8(a3);
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
    long long v19 = 0u;
    LOBYTE(v21) = 1;
    BYTE5(v21) = 1;
    *(_DWORD *)((char *)&v21 + 6) = 0;
    *(_DWORD *)((char *)&v21 + 9) = 0;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    uint64_t v24 = 0xFFFFFFFFLL;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::string __p = 0;
    sub_5742D8(a1, (uint64_t)a2, v11, &v30, (__n128 *)v18, v7, (uint64_t *)&v28);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
    uint64_t v12 = v18[0];
    if (v18[0])
    {
      uint64_t v13 = v18[1];
      BOOL v14 = v18[0];
      if (v18[1] != v18[0])
      {
        do
          uint64_t v13 = (void *)sub_3AFFFC((uint64_t)v13 - 1056);
        while (v13 != v12);
        BOOL v14 = v18[0];
      }
      v18[1] = v12;
      operator delete(v14);
    }
    sub_5911F8(a3, (uint64_t *)&v28);
    uint64_t v15 = (uint64_t)v28;
    if (v28)
    {
      uint64_t v16 = v29;
      unint64_t v17 = v28;
      if ((void *)v29 != v28)
      {
        do
          uint64_t v16 = sub_55BA78(v16 - 1056);
        while (v16 != v15);
        unint64_t v17 = v28;
      }
      uint64_t v29 = v15;
      operator delete(v17);
    }
  }
}

void sub_574808(_Unwind_Exception *a1)
{
  sub_574598((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_57481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_574830(uint64_t *a1, _DWORD *a2, char a3)
{
  uint64_t v6 = a1[1];
  if (sub_401FE4(a1[2]) && (sub_488EC0(a1[1]) & 1) == 0)
  {
    uint64_t v7 = *a1;
    HIBYTE(v24[2]) = 9;
    strcpy((char *)v24, "EVRouting");
    memset(&__p, 0, sizeof(__p));
    uint64_t v8 = sub_374CDC(v7, (uint64_t)v24, (uint64_t *)&__p);
    std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      int v11 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v9);
        int v11 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v9;
      operator delete(v11);
    }
    if (SHIBYTE(v24[2]) < 0) {
      operator delete(v24[0]);
    }
    v24[0] = operator new(0x20uLL);
    *(_OWORD *)&v24[1] = xmmword_20B91A0;
    strcpy((char *)v24[0], "ev_info_staleness_limit_min");
    int v12 = sub_5D2EC(v8, v24);
    if (SHIBYTE(v24[2]) < 0) {
      operator delete(v24[0]);
    }
    char v13 = (int)sub_46CABC(a1[2]) < v12;
    sub_488EE8(v6, v13);
  }
  uint64_t result = sub_5645C0((uint64_t)a2);
  if (result)
  {
    uint64_t v15 = (_DWORD *)sub_5645C8((uint64_t)a2);
    uint64_t result = sub_50E294(v15);
    if ((result & 1) == 0)
    {
      if (sub_50E2C4(v15)) {
        return sub_488EE8(v6, 0);
      }
      if (sub_50E2D4(v15)) {
        return sub_488EE8(v6, 1);
      }
      if (sub_50E2B4(v15)) {
        return sub_488EB4(v6);
      }
      if (sub_50E284(v15))
      {
        sub_50E468((uint64_t)v15, (uint64_t)v24);
        return (uint64_t)sub_4863C8(v6, (uint64_t *)v24, v16);
      }
      if (sub_50E2A4(v15))
      {
        sub_50E488((uint64_t)v15, (uint64_t)v24);
        uint64_t v17 = sub_574C38((uint64_t)v24);
        uint64_t result = (uint64_t)sub_486188(v6, v17 + 8);
        if (v25) {
          return sub_4BCFD0((uint64_t)v24);
        }
      }
      else if (sub_50E264(v15))
      {
        sub_50E434((uint64_t)v15, v24);
        uint64_t v18 = (char *)v24[0];
        long long v19 = (char *)v24[1];
        while (v18 != v19)
        {
          sub_605098((uint64_t)v18, &__p);
          sub_486188(v6, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v18 += 1120;
        }
        return (uint64_t)sub_50E790(v24);
      }
      else
      {
        if (!sub_50E254(v15) || (a3 & 1) != 0)
        {
          uint64_t result = sub_50E274(v15);
          if (!result) {
            return result;
          }
          sub_50E3F8((uint64_t)v15, (uint64_t)v24);
          if (*a2 == 31)
          {
            uint64_t v21 = sub_574C94((uint64_t)v24);
            uint64_t result = (uint64_t)sub_4865FC(v6, v21 + 40);
          }
          else
          {
            uint64_t v22 = sub_574C94((uint64_t)v24);
            uint64_t result = (uint64_t)sub_486188(v6, v22 + 40);
          }
        }
        else
        {
          sub_50E3F8((uint64_t)v15, (uint64_t)v24);
          uint64_t v20 = sub_574C94((uint64_t)v24);
          uint64_t result = (uint64_t)sub_486188(v6, v20 + 40);
        }
        if (v26) {
          return sub_3A6B94((uint64_t)v24);
        }
      }
    }
  }
  return result;
}

void sub_574B8C(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x480]))
  {
    sub_3A6B94((uint64_t)va);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_574C38(uint64_t result)
{
  if (!*(unsigned char *)(result + 168))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

uint64_t sub_574C94(uint64_t result)
{
  if (!*(unsigned char *)(result + 1120))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

void **sub_574CF0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4D4B58(v3 - 168);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_574D4C(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 7255);
  uint64_t v3 = *(void **)(a1 + 7536);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 7544);
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_3A6B94(v4 - 1120);
      while ((void *)v4 != v3);
      uint64_t v5 = *(void **)(a1 + 7536);
    }
    *(void *)(a1 + 7544) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 7512);
  if (v6)
  {
    *(void *)(a1 + 7520) = v6;
    operator delete(v6);
  }
  if (v2[256] < 0)
  {
    operator delete(*(void **)(a1 + 7488));
    if ((v2[232] & 0x80000000) == 0)
    {
LABEL_10:
      if ((v2[208] & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else if ((v2[232] & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 7464));
  if ((v2[208] & 0x80000000) == 0)
  {
LABEL_11:
    uint64_t v7 = *(void ***)(a1 + 7416);
    if (!v7) {
      goto LABEL_12;
    }
LABEL_22:
    int v11 = *(void ***)(a1 + 7424);
    if (v11 == v7)
    {
      *(void *)(a1 + 7424) = v7;
      operator delete(v7);
      uint64_t v8 = *(void **)(a1 + 7392);
      if (v8) {
        goto LABEL_29;
      }
    }
    else
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 6;
      }
      while (v11 != v7);
      int v12 = *(void **)(a1 + 7416);
      *(void *)(a1 + 7424) = v7;
      operator delete(v12);
      uint64_t v8 = *(void **)(a1 + 7392);
      if (v8) {
        goto LABEL_29;
      }
    }
LABEL_13:
    if ((v2[128] & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 7440));
  uint64_t v7 = *(void ***)(a1 + 7416);
  if (v7) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v8 = *(void **)(a1 + 7392);
  if (!v8) {
    goto LABEL_13;
  }
LABEL_29:
  uint64_t v13 = *(void *)(a1 + 7400);
  BOOL v14 = v8;
  if ((void *)v13 != v8)
  {
    do
      uint64_t v13 = sub_55BA78(v13 - 1056);
    while ((void *)v13 != v8);
    BOOL v14 = *(void **)(a1 + 7392);
  }
  *(void *)(a1 + 7400) = v8;
  operator delete(v14);
  if ((v2[128] & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2[96] & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_34:
    operator delete(*(void **)(a1 + 7328));
    int v9 = *(_DWORD *)(a1 + 7312);
    if (v9 != 1) {
      goto LABEL_16;
    }
LABEL_35:
    uint64_t v10 = *(void **)(a1 + 7288);
    if (!v10) {
      goto LABEL_38;
    }
    *(void *)(a1 + 7296) = v10;
    goto LABEL_37;
  }
LABEL_33:
  operator delete(*(void **)(a1 + 7360));
  if (v2[96] < 0) {
    goto LABEL_34;
  }
LABEL_15:
  int v9 = *(_DWORD *)(a1 + 7312);
  if (v9 == 1) {
    goto LABEL_35;
  }
LABEL_16:
  if (!v9 && v2[56] < 0)
  {
    uint64_t v10 = *(void **)(a1 + 7288);
LABEL_37:
    operator delete(v10);
  }
LABEL_38:
  if (v2[24] < 0)
  {
    operator delete(*(void **)(a1 + 7256));
    if ((*v2 & 0x80000000) == 0)
    {
LABEL_40:
      uint64_t v15 = *(void **)(a1 + 7192);
      if (!v15) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(*(void **)(a1 + 7232));
  uint64_t v15 = *(void **)(a1 + 7192);
  if (v15)
  {
LABEL_41:
    *(void *)(a1 + 7200) = v15;
    operator delete(v15);
  }
LABEL_42:
  sub_575104(a1 + 2392);
  sub_4F2BD0((void **)(a1 + 1304));
  if ((*(char *)(a1 + 1287) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 1255) & 0x80000000) == 0) {
      goto LABEL_44;
    }
LABEL_52:
    operator delete(*(void **)(a1 + 1232));
    int v16 = *(_DWORD *)(a1 + 1216);
    if (v16 != 1) {
      goto LABEL_45;
    }
LABEL_53:
    uint64_t v17 = *(void **)(a1 + 1192);
    if (!v17) {
      goto LABEL_56;
    }
    *(void *)(a1 + 1200) = v17;
    goto LABEL_55;
  }
  operator delete(*(void **)(a1 + 1264));
  if (*(char *)(a1 + 1255) < 0) {
    goto LABEL_52;
  }
LABEL_44:
  int v16 = *(_DWORD *)(a1 + 1216);
  if (v16 == 1) {
    goto LABEL_53;
  }
LABEL_45:
  if (!v16 && *(char *)(a1 + 1215) < 0)
  {
    uint64_t v17 = *(void **)(a1 + 1192);
LABEL_55:
    operator delete(v17);
  }
LABEL_56:
  sub_4D4B58(a1 + 1016);
  uint64_t v18 = *(void *)(a1 + 992);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 1000);
    uint64_t v20 = *(void **)(a1 + 992);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 24;
      }
      while (v19 != v18);
      uint64_t v20 = *(void **)(a1 + 992);
    }
    *(void *)(a1 + 1000) = v18;
    operator delete(v20);
  }
  sub_4D4B58(a1 + 832);
  sub_4D4B58(a1 + 672);
  sub_4D4B58(a1 + 512);
  sub_4D4B58(a1 + 352);
  sub_4D4B58(a1 + 192);
  uint64_t v21 = *(void *)(a1 + 152);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 160);
    uint64_t v23 = *(void **)(a1 + 152);
    if (v22 != v21)
    {
      do
      {
        if (*(unsigned char *)(v22 - 32))
        {
          sub_3A6B94(v22 - 1152);
          *(unsigned char *)(v22 - 32) = 0;
        }
        v22 -= 1168;
      }
      while (v22 != v21);
      uint64_t v23 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v21;
    operator delete(v23);
  }
  uint64_t v24 = *(void *)(a1 + 24);
  if (v24)
  {
    uint64_t v25 = *(void *)(a1 + 32);
    char v26 = *(void **)(a1 + 24);
    if (v25 != v24)
    {
      do
      {
        v25 -= 176;
        sub_57523C(a1 + 40, v25);
      }
      while (v25 != v24);
      char v26 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v24;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v29 = *(void **)a1;
    if ((void *)v28 != v27)
    {
      do
        uint64_t v28 = sub_5752F4(v28 - 12328);
      while ((void *)v28 != v27);
      uint64_t v29 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v27;
    operator delete(v29);
  }
  return a1;
}

uint64_t sub_575104(uint64_t a1)
{
  uint64_t v2 = a1 + 3360;
  sub_4D4B58(a1 + 4640);
  sub_4D4B58(a1 + 4480);
  sub_4D4B58(a1 + 4320);
  sub_4D4B58(a1 + 4160);
  sub_4D4B58(a1 + 4000);
  sub_4D4B58(a1 + 3840);
  sub_4D4B58(a1 + 3680);
  sub_4D4B58(a1 + 3520);
  sub_4D4B58(v2);
  sub_4D4B58(a1 + 3200);
  sub_4D4B58(a1 + 3040);
  sub_4D4B58(a1 + 2880);
  sub_4D4B58(a1 + 2720);
  sub_4D4B58(a1 + 2560);
  sub_4D4B58(a1 + 2400);
  sub_4D4B58(a1 + 2240);
  sub_4D4B58(a1 + 2080);
  sub_4D4B58(a1 + 1920);
  sub_4D4B58(a1 + 1760);
  sub_4D4B58(a1 + 1600);
  sub_4D4B58(a1 + 1440);
  sub_4D4B58(a1 + 1280);
  sub_4D4B58(a1 + 1120);
  sub_4D4B58(a1 + 960);
  sub_4D4B58(a1 + 800);
  sub_4D4B58(a1 + 640);
  sub_4D4B58(a1 + 480);
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

void sub_57523C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 152);
  if (v3)
  {
    *(void *)(a2 + 160) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 151) < 0)
  {
    operator delete(*(void **)(a2 + 128));
    if ((*(char *)(a2 + 119) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a2 + 95) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a2 + 119) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a2 + 96));
  if ((*(char *)(a2 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*(void **)(a2 + 32));
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 55) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  uint64_t v4 = *(void **)a2;

  operator delete(v4);
}

uint64_t sub_5752F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 12304);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 12280);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void **)(a1 + 12264);
  *(void *)(a1 + 12264) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 12240);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void **)(a1 + 12224);
  *(void *)(a1 + 12224) = 0;
  if (v8) {
    operator delete(v8);
  }
  *(void *)(a1 + 12184) = off_2438EC8;
  if (*(char *)(a1 + 12215) < 0)
  {
    operator delete(*(void **)(a1 + 12192));
    *(void *)(a1 + 12144) = off_2438EC8;
    if ((*(char *)(a1 + 12175) & 0x80000000) == 0)
    {
LABEL_13:
      int v9 = *(void **)(a1 + 12120);
      if (!v9) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else
  {
    *(void *)(a1 + 12144) = off_2438EC8;
    if ((*(char *)(a1 + 12175) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  operator delete(*(void **)(a1 + 12152));
  int v9 = *(void **)(a1 + 12120);
  if (!v9) {
    goto LABEL_17;
  }
  do
  {
LABEL_23:
    BOOL v14 = (void *)*v9;
    uint64_t v15 = (void *)v9[4];
    if (v15)
    {
      v9[5] = v15;
      operator delete(v15);
    }
    operator delete(v9);
    int v9 = v14;
  }
  while (v14);
LABEL_17:
  uint64_t v10 = *(void **)(a1 + 12104);
  *(void *)(a1 + 12104) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 12080);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 12088);
    uint64_t v13 = *(void **)(a1 + 12080);
    if (v12 != v11)
    {
      do
      {
        int v16 = *(void **)(v12 - 40);
        if (v16)
        {
          *(void *)(v12 - 32) = v16;
          operator delete(v16);
        }
        v12 -= 48;
      }
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 12080);
    }
    *(void *)(a1 + 12088) = v11;
    operator delete(v13);
  }
  uint64_t v17 = *(void **)(a1 + 12056);
  if (v17)
  {
    *(void *)(a1 + 12064) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 12024);
  if (v18)
  {
    *(void *)(a1 + 12032) = v18;
    operator delete(v18);
  }
  if ((*(char *)(a1 + 12023) & 0x80000000) == 0)
  {
    uint64_t v19 = *(void ***)(a1 + 11976);
    if (!v19) {
      goto LABEL_36;
    }
LABEL_69:
    uint64_t v41 = *(void ***)(a1 + 11984);
    if (v41 == v19)
    {
      *(void *)(a1 + 11984) = v19;
      operator delete(v19);
      uint64_t v20 = *(void **)(a1 + 11952);
      if (v20) {
        goto LABEL_90;
      }
    }
    else
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 6;
      }
      while (v41 != v19);
      int v52 = *(void **)(a1 + 11976);
      *(void *)(a1 + 11984) = v19;
      operator delete(v52);
      uint64_t v20 = *(void **)(a1 + 11952);
      if (v20) {
        goto LABEL_90;
      }
    }
LABEL_37:
    uint64_t v21 = *(void **)(a1 + 11920);
    if (!v21) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  operator delete(*(void **)(a1 + 12000));
  uint64_t v19 = *(void ***)(a1 + 11976);
  if (v19) {
    goto LABEL_69;
  }
LABEL_36:
  uint64_t v20 = *(void **)(a1 + 11952);
  if (!v20) {
    goto LABEL_37;
  }
LABEL_90:
  uint64_t v53 = *(void *)(a1 + 11960);
  unint64_t v54 = v20;
  if ((void *)v53 != v20)
  {
    do
    {
      v53 -= 608;
      sub_575D30(a1 + 11968, v53);
    }
    while ((void *)v53 != v20);
    unint64_t v54 = *(void **)(a1 + 11952);
  }
  *(void *)(a1 + 11960) = v20;
  operator delete(v54);
  uint64_t v21 = *(void **)(a1 + 11920);
  if (v21)
  {
LABEL_38:
    *(void *)(a1 + 11928) = v21;
    operator delete(v21);
  }
LABEL_39:
  sub_4D4B58(a1 + 11760);
  uint64_t v22 = *(void *)(a1 + 11736);
  if (v22)
  {
    uint64_t v23 = *(void *)(a1 + 11744);
    uint64_t v24 = *(void **)(a1 + 11736);
    if (v23 != v22)
    {
      do
      {
        uint64_t v25 = v23 - 176;
        sub_4D4B58(v23 - 160);
        uint64_t v23 = v25;
      }
      while (v25 != v22);
      uint64_t v24 = *(void **)(a1 + 11736);
    }
    *(void *)(a1 + 11744) = v22;
    operator delete(v24);
  }
  char v26 = *(void **)(a1 + 11704);
  if (v26)
  {
    *(void *)(a1 + 11712) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)(a1 + 11664);
  if (v27)
  {
    *(void *)(a1 + 11672) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(a1 + 11632);
  if (v28)
  {
    *(void *)(a1 + 11640) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void *)(a1 + 11608);
  if (v29)
  {
    uint64_t v30 = *(void *)(a1 + 11616);
    uint64_t v31 = *(void **)(a1 + 11608);
    if (v30 != v29)
    {
      do
        uint64_t v30 = sub_4BCFD0(v30 - 168);
      while (v30 != v29);
      uint64_t v31 = *(void **)(a1 + 11608);
    }
    *(void *)(a1 + 11616) = v29;
    operator delete(v31);
  }
  uint64_t v32 = *(void *)(a1 + 11584);
  if (v32)
  {
    uint64_t v33 = *(void *)(a1 + 11592);
    int v34 = *(void **)(a1 + 11584);
    if (v33 != v32)
    {
      do
        uint64_t v33 = sub_4BCFD0(v33 - 168);
      while (v33 != v32);
      int v34 = *(void **)(a1 + 11584);
    }
    *(void *)(a1 + 11592) = v32;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(a1 + 11560);
  if (v35)
  {
    *(void *)(a1 + 11568) = v35;
    operator delete(v35);
  }
  sub_52F970(a1 + 10880);
  sub_52F970(a1 + 10200);
  char v36 = *(uint64_t **)(a1 + 10176);
  if (v36)
  {
    uint64_t v37 = *(uint64_t **)(a1 + 10184);
    char v38 = *(void **)(a1 + 10176);
    if (v37 != v36)
    {
      int v39 = v37 - 9;
      do
      {
        if (*v39)
        {
          sub_52F808(v39);
          operator delete((void *)*v39);
        }
        uint64_t v40 = v39 - 4;
        v39 -= 13;
      }
      while (v40 != v36);
      char v38 = *(void **)(a1 + 10176);
    }
    *(void *)(a1 + 10184) = v36;
    operator delete(v38);
  }
  uint64_t v42 = (char *)(a1 + 7399);
  uint64_t v43 = *(void *)(a1 + 10144);
  if (v43)
  {
    uint64_t v44 = *(void *)(a1 + 10152);
    uint64_t v45 = *(void **)(a1 + 10144);
    if (v44 != v43)
    {
      do
      {
        uint64_t v47 = *(void *)(v44 - 48);
        if (v47)
        {
          uint64_t v48 = *(void *)(v44 - 40);
          uint64_t v46 = *(void **)(v44 - 48);
          if (v48 != v47)
          {
            uint64_t v49 = *(void *)(v44 - 40);
            do
            {
              size_t v51 = *(void **)(v49 - 24);
              v49 -= 24;
              int v50 = v51;
              if (v51)
              {
                *(void *)(v48 - 16) = v50;
                operator delete(v50);
              }
              uint64_t v48 = v49;
            }
            while (v49 != v47);
            uint64_t v46 = *(void **)(v44 - 48);
          }
          *(void *)(v44 - 40) = v47;
          operator delete(v46);
        }
        v44 -= 72;
      }
      while (v44 != v43);
      uint64_t v45 = *(void **)(a1 + 10144);
    }
    *(void *)(a1 + 10152) = v43;
    operator delete(v45);
  }
  uint64_t v55 = *(void **)(a1 + 10120);
  if (v55)
  {
    *(void *)(a1 + 10128) = v55;
    operator delete(v55);
  }
  if (*(char *)(a1 + 10103) < 0)
  {
    operator delete(*(void **)(a1 + 10080));
    uint64_t v56 = *(void **)(a1 + 10056);
    if (!v56)
    {
LABEL_101:
      uint64_t v57 = *(void **)(a1 + 10032);
      if (!v57) {
        goto LABEL_102;
      }
      goto LABEL_116;
    }
  }
  else
  {
    uint64_t v56 = *(void **)(a1 + 10056);
    if (!v56) {
      goto LABEL_101;
    }
  }
  uint64_t v61 = *(void **)(a1 + 10064);
  long long v62 = v56;
  if (v61 != v56)
  {
    uint64_t v63 = (uint64_t)v61 - 560;
    do
    {
      int v65 = *(void **)(v63 + 496);
      if (v65)
      {
        *(void *)(v63 + 504) = v65;
        operator delete(v65);
      }
      sub_510298(v63 + 24);
      size_t v66 = *(void **)v63;
      if (*(void *)v63)
      {
        *(void *)(v63 + 8) = v66;
        operator delete(v66);
      }
      long long v64 = (void *)(v63 - 56);
      v63 -= 616;
    }
    while (v64 != v56);
    long long v62 = *(void **)(a1 + 10056);
  }
  *(void *)(a1 + 10064) = v56;
  operator delete(v62);
  uint64_t v57 = *(void **)(a1 + 10032);
  if (!v57)
  {
LABEL_102:
    uint64_t v58 = *(void **)(a1 + 10008);
    if (!v58) {
      goto LABEL_103;
    }
    goto LABEL_125;
  }
LABEL_116:
  int v67 = *(void **)(a1 + 10040);
  size_t v68 = v57;
  if (v67 != v57)
  {
    uint64_t v69 = (uint64_t)v67 - 560;
    do
    {
      v71 = *(void **)(v69 + 496);
      if (v71)
      {
        *(void *)(v69 + 504) = v71;
        operator delete(v71);
      }
      sub_510298(v69 + 24);
      v72 = *(void **)v69;
      if (*(void *)v69)
      {
        *(void *)(v69 + 8) = v72;
        operator delete(v72);
      }
      v70 = (void *)(v69 - 56);
      v69 -= 616;
    }
    while (v70 != v57);
    size_t v68 = *(void **)(a1 + 10032);
  }
  *(void *)(a1 + 10040) = v57;
  operator delete(v68);
  uint64_t v58 = *(void **)(a1 + 10008);
  if (!v58)
  {
LABEL_103:
    uint64_t v59 = *(char **)(a1 + 9984);
    if (!v59) {
      goto LABEL_104;
    }
    goto LABEL_134;
  }
LABEL_125:
  v73 = *(void **)(a1 + 10016);
  v74 = v58;
  if (v73 != v58)
  {
    uint64_t v75 = (uint64_t)v73 - 560;
    do
    {
      size_t v77 = *(void **)(v75 + 496);
      if (v77)
      {
        *(void *)(v75 + 504) = v77;
        operator delete(v77);
      }
      sub_510298(v75 + 24);
      int v78 = *(void **)v75;
      if (*(void *)v75)
      {
        *(void *)(v75 + 8) = v78;
        operator delete(v78);
      }
      int v76 = (void *)(v75 - 56);
      v75 -= 616;
    }
    while (v76 != v58);
    v74 = *(void **)(a1 + 10008);
  }
  *(void *)(a1 + 10016) = v58;
  operator delete(v74);
  uint64_t v59 = *(char **)(a1 + 9984);
  if (!v59)
  {
LABEL_104:
    std::string::size_type v60 = *(char **)(a1 + 9952);
    if (!v60) {
      goto LABEL_150;
    }
    goto LABEL_141;
  }
LABEL_134:
  size_t v79 = *(char **)(a1 + 9992);
  unint64_t v80 = v59;
  if (v79 != v59)
  {
    v81 = *(char **)(a1 + 9992);
    do
    {
      v83 = (void *)*((void *)v81 - 5);
      v81 -= 40;
      v82 = v83;
      if (v83)
      {
        *((void *)v79 - 4) = v82;
        operator delete(v82);
      }
      size_t v79 = v81;
    }
    while (v81 != v59);
    unint64_t v80 = *(char **)(a1 + 9984);
  }
  *(void *)(a1 + 9992) = v59;
  operator delete(v80);
  std::string::size_type v60 = *(char **)(a1 + 9952);
  if (v60)
  {
LABEL_141:
    v84 = *(char **)(a1 + 9960);
    int v85 = v60;
    if (v84 != v60)
    {
      do
      {
        size_t v86 = (void *)*((void *)v84 - 19);
        if (v86)
        {
          *((void *)v84 - 18) = v86;
          operator delete(v86);
        }
        unint64_t v87 = (void *)*((void *)v84 - 24);
        if (v87)
        {
          *((void *)v84 - 23) = v87;
          operator delete(v87);
        }
        v84 -= 192;
      }
      while (v84 != v60);
      int v85 = *(char **)(a1 + 9952);
    }
    *(void *)(a1 + 9960) = v60;
    operator delete(v85);
  }
LABEL_150:
  sub_4D4B58(a1 + 9792);
  sub_4D4B58(a1 + 9632);
  sub_4D4B58(a1 + 9472);
  sub_4D4B58(a1 + 9312);
  sub_4D4B58(a1 + 9152);
  sub_52F090((void *)(a1 + 8336));
  sub_52F090((void *)(a1 + 7520));
  v88 = *(void **)(a1 + 7496);
  if (v88)
  {
    uint64_t v89 = *(void **)(a1 + 7504);
    uint64_t v90 = *(void **)(a1 + 7496);
    if (v89 != v88)
    {
      do
        uint64_t v89 = sub_52F090(v89 - 102);
      while (v89 != v88);
      uint64_t v90 = *(void **)(a1 + 7496);
    }
    *(void *)(a1 + 7504) = v88;
    operator delete(v90);
  }
  uint64_t v91 = *(void **)(a1 + 7472);
  if (v91)
  {
    uint64_t v92 = *(void **)(a1 + 7480);
    uint64_t v93 = *(void **)(a1 + 7472);
    if (v92 != v91)
    {
      do
      {
        uint64_t v94 = (void *)*(v92 - 6);
        if (v94)
        {
          *(v92 - 5) = v94;
          operator delete(v94);
        }
        v92 -= 51;
        sub_4F32CC(v92);
      }
      while (v92 != v91);
      uint64_t v93 = *(void **)(a1 + 7472);
    }
    *(void *)(a1 + 7480) = v91;
    operator delete(v93);
  }
  uint64_t v95 = *(void **)(a1 + 7448);
  if (v95)
  {
    uint64_t v96 = *(void **)(a1 + 7456);
    uint64_t v97 = *(void **)(a1 + 7448);
    if (v96 != v95)
    {
      do
        uint64_t v96 = sub_52F1E8((uint64_t)(v96 - 135));
      while (v96 != v95);
      uint64_t v97 = *(void **)(a1 + 7448);
    }
    *(void *)(a1 + 7456) = v95;
    operator delete(v97);
  }
  uint64_t v98 = *(void *)(a1 + 7424);
  if (v98)
  {
    uint64_t v99 = *(void *)(a1 + 7432);
    uint64_t v100 = *(void **)(a1 + 7424);
    if (v99 != v98)
    {
      do
      {
        if (*(char *)(v99 - 1) < 0) {
          operator delete(*(void **)(v99 - 24));
        }
        v99 -= 24;
      }
      while (v99 != v98);
      uint64_t v100 = *(void **)(a1 + 7424);
    }
    *(void *)(a1 + 7432) = v98;
    operator delete(v100);
  }
  if (*(char *)(a1 + 7423) < 0)
  {
    operator delete(*(void **)(a1 + 7400));
    if ((*v42 & 0x80000000) == 0)
    {
LABEL_178:
      uint64_t v101 = *(void **)(a1 + 7352);
      if (!v101) {
        goto LABEL_179;
      }
      goto LABEL_189;
    }
  }
  else if ((*v42 & 0x80000000) == 0)
  {
    goto LABEL_178;
  }
  operator delete(*(void **)(a1 + 7376));
  uint64_t v101 = *(void **)(a1 + 7352);
  if (!v101)
  {
LABEL_179:
    uint64_t v102 = *(void **)(a1 + 7328);
    if (!v102) {
      goto LABEL_181;
    }
    goto LABEL_180;
  }
LABEL_189:
  uint64_t v106 = *(void *)(a1 + 7360);
  size_t v107 = v101;
  if ((void *)v106 != v101)
  {
    do
      uint64_t v106 = sub_3A6B94(v106 - 1120);
    while ((void *)v106 != v101);
    size_t v107 = *(void **)(a1 + 7352);
  }
  *(void *)(a1 + 7360) = v101;
  operator delete(v107);
  uint64_t v102 = *(void **)(a1 + 7328);
  if (v102)
  {
LABEL_180:
    *(void *)(a1 + 7336) = v102;
    operator delete(v102);
  }
LABEL_181:
  sub_4D4B58(a1 + 7168);
  uint64_t v103 = *(void *)(a1 + 7144);
  if (v103)
  {
    uint64_t v104 = *(void *)(a1 + 7152);
    v105 = *(void **)(a1 + 7144);
    if (v104 != v103)
    {
      do
      {
        if (*(char *)(v104 - 1) < 0) {
          operator delete(*(void **)(v104 - 24));
        }
        v104 -= 24;
      }
      while (v104 != v103);
      v105 = *(void **)(a1 + 7144);
    }
    *(void *)(a1 + 7152) = v103;
    operator delete(v105);
  }
  sub_575104(a1 + 2344);
  sub_4F2BD0((void **)(a1 + 1256));
  if (*(char *)(a1 + 1255) < 0)
  {
    operator delete(*(void **)(a1 + 1232));
    if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
    {
LABEL_198:
      uint64_t v108 = *(void *)(a1 + 1184);
      if (!v108) {
        goto LABEL_200;
      }
      goto LABEL_199;
    }
  }
  else if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
  {
    goto LABEL_198;
  }
  operator delete(*(void **)(a1 + 1208));
  uint64_t v108 = *(void *)(a1 + 1184);
  if (v108)
  {
LABEL_199:
    sub_4AA6AC(a1 + 1184, v108);
    operator delete(*(void **)(a1 + 1184));
  }
LABEL_200:
  size_t v109 = *(void **)(a1 + 1160);
  if (v109)
  {
    *(void *)(a1 + 1168) = v109;
    operator delete(v109);
  }
  unint64_t v110 = *(void **)(a1 + 1136);
  if (v110)
  {
    *(void *)(a1 + 1144) = v110;
    operator delete(v110);
  }
  uint64_t v111 = *(void *)(a1 + 1112);
  if (v111)
  {
    uint64_t v112 = *(void *)(a1 + 1120);
    v113 = *(void **)(a1 + 1112);
    if (v112 != v111)
    {
      do
      {
        v112 -= 176;
        sub_57523C(a1 + 1128, v112);
      }
      while (v112 != v111);
      v113 = *(void **)(a1 + 1112);
    }
    *(void *)(a1 + 1120) = v111;
    operator delete(v113);
  }
  uint64_t v114 = *(void *)(a1 + 1088);
  if (v114)
  {
    uint64_t v115 = *(void *)(a1 + 1096);
    long long v116 = *(void **)(a1 + 1088);
    if (v115 != v114)
    {
      do
        uint64_t v115 = sub_575E00(v115 - 2400);
      while (v115 != v114);
      long long v116 = *(void **)(a1 + 1088);
    }
    *(void *)(a1 + 1096) = v114;
    operator delete(v116);
  }
  uint64_t v117 = *(void *)(a1 + 1064);
  if (v117)
  {
    uint64_t v118 = *(void *)(a1 + 1072);
    unint64_t v119 = *(void **)(a1 + 1064);
    if (v118 != v117)
    {
      do
        uint64_t v118 = sub_575E00(v118 - 2400);
      while (v118 != v117);
      unint64_t v119 = *(void **)(a1 + 1064);
    }
    *(void *)(a1 + 1072) = v117;
    operator delete(v119);
  }

  return sub_3AFFFC(a1);
}

void sub_575D30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 128;
  sub_4D4B58(a2 + 448);
  sub_4D4B58(a2 + 288);
  sub_4D4B58(v3);
  if ((*(char *)(a2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a2 + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    operator delete(*(void **)(a2 + 56));
    int v4 = *(_DWORD *)(a2 + 40);
    if (v4 != 1) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_3:
  int v4 = *(_DWORD *)(a2 + 40);
  if (v4 != 1)
  {
LABEL_4:
    if (!v4 && *(char *)(a2 + 39) < 0)
    {
      uint64_t v5 = *(void **)(a2 + 16);
LABEL_8:
      operator delete(v5);
      return;
    }
    return;
  }
LABEL_11:
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    *(void *)(a2 + 24) = v5;
    goto LABEL_8;
  }
}

uint64_t sub_575E00(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2320);
  if (v2)
  {
    *(void *)(a1 + 2328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 2296);
  if (v3)
  {
    *(void *)(a1 + 2304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 2232);
  if (v4)
  {
    *(void *)(a1 + 2240) = v4;
    operator delete(v4);
  }
  *(void *)(a1 + 2128) = off_2439F28;
  if (*(char *)(a1 + 2223) < 0)
  {
    operator delete(*(void **)(a1 + 2200));
    if ((*(char *)(a1 + 2191) & 0x80000000) == 0)
    {
LABEL_9:
      *(void *)(a1 + 2128) = off_2438EC8;
      if ((*(char *)(a1 + 2159) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_34;
    }
  }
  else if ((*(char *)(a1 + 2191) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 2168));
  *(void *)(a1 + 2128) = off_2438EC8;
  if ((*(char *)(a1 + 2159) & 0x80000000) == 0)
  {
LABEL_10:
    *(void *)(a1 + 2088) = off_2438EC8;
    if ((*(char *)(a1 + 2119) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 2136));
  *(void *)(a1 + 2088) = off_2438EC8;
  if ((*(char *)(a1 + 2119) & 0x80000000) == 0)
  {
LABEL_11:
    *(void *)(a1 + 2040) = off_2438EC8;
    if ((*(char *)(a1 + 2071) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 2096));
  *(void *)(a1 + 2040) = off_2438EC8;
  if ((*(char *)(a1 + 2071) & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v5 = (uint64_t *)(a1 + 1872);
    if (!*(void *)(a1 + 1928)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 2048));
  uint64_t v5 = (uint64_t *)(a1 + 1872);
  if (*(void *)(a1 + 1928))
  {
LABEL_13:
    sub_52F808((uint64_t *)(a1 + 1928));
    operator delete(*(void **)(a1 + 1928));
  }
LABEL_14:
  if (*v5)
  {
    sub_52F8B0((uint64_t)v5, *v5);
    operator delete((void *)*v5);
  }
  uint64_t v6 = *(void *)(a1 + 1832);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 1840);
    uint64_t v8 = *(void **)(a1 + 1832);
    if (v7 != v6)
    {
      do
      {
        v7 -= 272;
        sub_4AA5F4(a1 + 1848, v7);
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 1832);
    }
    *(void *)(a1 + 1840) = v6;
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1808);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 1816);
    uint64_t v11 = *(void **)(a1 + 1808);
    if (v10 != v9)
    {
      do
        uint64_t v10 = sub_576848(v10 - 336);
      while (v10 != v9);
      uint64_t v11 = *(void **)(a1 + 1808);
    }
    *(void *)(a1 + 1816) = v9;
    operator delete(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1784);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 1792);
    BOOL v14 = *(void **)(a1 + 1784);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 25) < 0) {
          operator delete(*(void **)(v13 - 48));
        }
        v13 -= 48;
      }
      while (v13 != v12);
      BOOL v14 = *(void **)(a1 + 1784);
    }
    *(void *)(a1 + 1792) = v12;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 1760);
  if (v15)
  {
    int v16 = *(void **)(a1 + 1768);
    uint64_t v17 = *(void **)(a1 + 1760);
    if (v16 != v15)
    {
      do
        int v16 = sub_576A58((uint64_t)(v16 - 83));
      while (v16 != v15);
      uint64_t v17 = *(void **)(a1 + 1760);
    }
    *(void *)(a1 + 1768) = v15;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1736);
  if (v18)
  {
    uint64_t v19 = *(void **)(a1 + 1744);
    uint64_t v20 = *(void **)(a1 + 1736);
    if (v19 != v18)
    {
      do
      {
        uint64_t v21 = (void *)*(v19 - 6);
        if (v21)
        {
          *(v19 - 5) = v21;
          operator delete(v21);
        }
        v19 -= 51;
        sub_4F32CC(v19);
      }
      while (v19 != v18);
      uint64_t v20 = *(void **)(a1 + 1736);
    }
    *(void *)(a1 + 1744) = v18;
    operator delete(v20);
  }
  uint64_t v22 = *(void **)(a1 + 1712);
  if (v22)
  {
    uint64_t v23 = *(void **)(a1 + 1720);
    uint64_t v24 = *(void **)(a1 + 1712);
    if (v23 != v22)
    {
      do
        uint64_t v23 = sub_52F1E8((uint64_t)(v23 - 135));
      while (v23 != v22);
      uint64_t v24 = *(void **)(a1 + 1712);
    }
    *(void *)(a1 + 1720) = v22;
    operator delete(v24);
  }
  sub_52F090((void *)(a1 + 896));
  if (*(char *)(a1 + 863) < 0)
  {
    operator delete(*(void **)(a1 + 840));
    if ((*(char *)(a1 + 831) & 0x80000000) == 0)
    {
LABEL_60:
      if ((*(char *)(a1 + 807) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_73;
    }
  }
  else if ((*(char *)(a1 + 831) & 0x80000000) == 0)
  {
    goto LABEL_60;
  }
  operator delete(*(void **)(a1 + 808));
  if ((*(char *)(a1 + 807) & 0x80000000) == 0)
  {
LABEL_61:
    if ((*(char *)(a1 + 767) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 784));
  if ((*(char *)(a1 + 767) & 0x80000000) == 0)
  {
LABEL_62:
    if ((*(char *)(a1 + 735) & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 744));
  if ((*(char *)(a1 + 735) & 0x80000000) == 0)
  {
LABEL_63:
    uint64_t v25 = *(void *)(a1 + 688);
    if (!v25) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 712));
  uint64_t v25 = *(void *)(a1 + 688);
  if (v25)
  {
LABEL_64:
    sub_4AA6AC(a1 + 688, v25);
    operator delete(*(void **)(a1 + 688));
  }
LABEL_65:
  uint64_t v26 = *(void *)(a1 + 656);
  if (v26)
  {
    uint64_t v27 = *(void *)(a1 + 664);
    uint64_t v28 = *(void **)(a1 + 656);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 48;
      }
      while (v27 != v26);
      uint64_t v28 = *(void **)(a1 + 656);
    }
    *(void *)(a1 + 664) = v26;
    operator delete(v28);
  }
  if (*(char *)(a1 + 559) < 0)
  {
    operator delete(*(void **)(a1 + 536));
    if ((*(char *)(a1 + 527) & 0x80000000) == 0)
    {
LABEL_81:
      if ((*(char *)(a1 + 503) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_97;
    }
  }
  else if ((*(char *)(a1 + 527) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(*(void **)(a1 + 504));
  if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
LABEL_82:
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 480));
  if ((*(char *)(a1 + 463) & 0x80000000) == 0)
  {
LABEL_83:
    if ((*(char *)(a1 + 431) & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 440));
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v29 = *(void *)(a1 + 384);
    if (!v29) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 408));
  uint64_t v29 = *(void *)(a1 + 384);
  if (v29)
  {
LABEL_85:
    sub_52FA20(a1 + 384, v29);
    operator delete(*(void **)(a1 + 384));
  }
LABEL_86:
  uint64_t v30 = *(void *)(a1 + 360);
  if (v30)
  {
    sub_52FA20(a1 + 360, v30);
    operator delete(*(void **)(a1 + 360));
  }
  uint64_t v31 = *(void *)(a1 + 336);
  if (v31)
  {
    sub_52FA20(a1 + 336, v31);
    operator delete(*(void **)(a1 + 336));
  }
  uint64_t v32 = *(void **)(a1 + 176);
  if (v32)
  {
    *(void *)(a1 + 184) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(a1 + 136);
  if (v33)
  {
    *(void *)(a1 + 144) = v33;
    operator delete(v33);
  }
  return a1;
}

void sub_576344(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_regional_advisory");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  *(unsigned char *)(a1 + 32) = v4;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 32)) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "regional_advisory_key");
  uint64_t v5 = (const std::string *)sub_561B0(a2, (uint64_t)__p);
  std::string::operator=((std::string *)(a1 + 40), v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "activation_type");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  if (sub_576618(&xmmword_2570B48, v6))
  {
    char v14 = 15;
    strcpy((char *)v13, "activation_type");
    uint64_t v7 = sub_561B0(a2, (uint64_t)v13);
    uint64_t v8 = sub_576618(&xmmword_2570B48, v7);
    if (!v8) {
      sub_5AE8("unordered_map::at: key not found");
    }
    *(_DWORD *)(a1 + 64) = *((_DWORD *)v8 + 10);
    uint64_t v9 = (int *)(a1 + 64);
    if ((v14 & 0x80000000) == 0)
    {
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_17:
      operator delete(__p[0]);
      int v10 = *v9;
      if (*v9 != 2) {
        goto LABEL_12;
      }
LABEL_18:
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p, "from_region");
      uint64_t v12 = (const std::string *)sub_561B0(a2, (uint64_t)__p);
      std::string::operator=((std::string *)(a1 + 72), v12);
      goto LABEL_19;
    }
    operator delete(v13[0]);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_17;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 64) = 0;
    uint64_t v9 = (int *)(a1 + 64);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_17;
    }
  }
LABEL_11:
  int v10 = *v9;
  if (*v9 == 2) {
    goto LABEL_18;
  }
LABEL_12:
  if (v10 != 3) {
    return;
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "to_region");
  uint64_t v11 = (const std::string *)sub_561B0(a2, (uint64_t)__p);
  std::string::operator=((std::string *)(a1 + 72), v11);
LABEL_19:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_5765B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_576610()
{
  return 0;
}

uint64_t *sub_576618(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_576848(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 232);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 240);
    unint64_t v4 = *(void **)(a1 + 232);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        unint64_t v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(void *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 232);
    }
    *(void *)(a1 + 240) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 200);
    uint8x8_t v9 = *(void **)(a1 + 192);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 200);
      do
      {
        uint64_t v12 = *(void **)(v10 - 24);
        v10 -= 24;
        uint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint8x8_t v9 = *(void **)(a1 + 192);
    }
    *(void *)(a1 + 200) = v7;
    operator delete(v9);
  }
  uint64_t v13 = *(void *)(a1 + 168);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 176);
    uint64_t v15 = *(void **)(a1 + 168);
    if (v14 != v13)
    {
      uint64_t v16 = *(void *)(a1 + 176);
      do
      {
        uint64_t v18 = *(void **)(v16 - 24);
        v16 -= 24;
        unint64_t v17 = v18;
        if (v18)
        {
          *(void *)(v14 - 16) = v17;
          operator delete(v17);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v13;
    operator delete(v15);
  }
  uint64_t v19 = *(void **)(a1 + 136);
  if (v19)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      operator delete(v19);
      uint64_t v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 96);
  if (v22)
  {
    do
    {
      uint64_t v23 = (void *)*v22;
      operator delete(v22);
      uint64_t v22 = v23;
    }
    while (v23);
  }
  uint64_t v24 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v24) {
    operator delete(v24);
  }
  char v25 = *(void **)(a1 + 56);
  if (v25)
  {
    do
    {
      uint64_t v32 = (void *)*v25;
      uint64_t v33 = v25[3];
      if (v33)
      {
        uint64_t v34 = v25[4];
        uint64_t v31 = (void *)v25[3];
        if (v34 != v33)
        {
          do
          {
            if (*(char *)(v34 - 1) < 0) {
              operator delete(*(void **)(v34 - 24));
            }
            v34 -= 24;
          }
          while (v34 != v33);
          uint64_t v31 = (void *)v25[3];
        }
        v25[4] = v33;
        operator delete(v31);
      }
      operator delete(v25);
      char v25 = v32;
    }
    while (v32);
  }
  uint64_t v26 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v26) {
    operator delete(v26);
  }
  uint64_t v27 = *(void **)(a1 + 16);
  if (v27)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      operator delete(v27);
      uint64_t v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = *(void **)a1;
  *(void *)a1 = 0;
  if (v29) {
    operator delete(v29);
  }
  return a1;
}

void *sub_576A58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 640);
  if (v2)
  {
    *(void *)(a1 + 648) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(char **)(a1 + 616);
  if (v3)
  {
    do
    {
      uint64_t v11 = *(char **)v3;
      uint64_t v12 = (void *)*((void *)v3 + 6);
      if (v12)
      {
        *((void *)v3 + 7) = v12;
        operator delete(v12);
      }
      if (v3[39] < 0) {
        operator delete(*((void **)v3 + 2));
      }
      operator delete(v3);
      uint64_t v3 = v11;
    }
    while (v11);
  }
  unint64_t v4 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 568);
  if (v5)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 528);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 536);
    uint64_t v10 = *(void **)(a1 + 528);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 528);
    }
    *(void *)(a1 + 536) = v8;
    operator delete(v10);
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  sub_4D4B58(a1 + 344);

  return sub_4F32CC((void *)a1);
}

uint64_t sub_576B88(void *a1, unint64_t a2)
{
  if (0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 7560 * a2;
}

void sub_576CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_576DC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x3E0F83E0F83E0FLL) {
    sub_2E00();
  }
  if (0x1F07C1F07C1F07C2 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1F07C1F07C1F07C2 * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 5)) >= 0x1F07C1F07C1F07) {
    unint64_t v6 = 0x3E0F83E0F83E0FLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3E0F83E0F83E0FLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1056 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[1056 * v3];
  std::string v15 = &v7[1056 * v6];
  sub_576F5C(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 1056;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 1056;
      uint64_t v8 = sub_577428(v8 - 1056, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 1056;
        sub_55BA78((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 1056;
}

void sub_576F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5773D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_576F5C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(v5 + 16) = *(void *)(a2 + 48);
      *(_OWORD *)uint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200((unsigned char *)v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
LABEL_6:
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 56);
  long long v7 = *(unsigned char **)(a2 + 64);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v9);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    *(void *)(a1 + 72) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 64) = v11;
  }
  sub_4F58AC(a1 + 80, a2 + 80);
  sub_4F58AC(a1 + 240, a2 + 240);
  sub_4F58AC(a1 + 400, a2 + 400);
  sub_4F58AC(a1 + 560, a2 + 560);
  long long v12 = *(_OWORD *)(a2 + 720);
  long long v13 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v13;
  *(_OWORD *)(a1 + 720) = v12;
  long long v14 = *(_OWORD *)(a2 + 768);
  long long v15 = *(_OWORD *)(a2 + 784);
  long long v16 = *(_OWORD *)(a2 + 800);
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 784) = v15;
  *(_OWORD *)(a1 + 800) = v16;
  *(_OWORD *)(a1 + 768) = v14;
  sub_4F57A0(a1 + 824, a2 + 824);
  if (*(char *)(a2 + 959) < 0)
  {
    sub_4200((unsigned char *)(a1 + 936), *(void **)(a2 + 936), *(void *)(a2 + 944));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 936);
    *(void *)(a1 + 952) = *(void *)(a2 + 952);
    *(_OWORD *)(a1 + 936) = v17;
  }
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  int v18 = *(unsigned __int8 *)(a2 + 988);
  *(unsigned char *)(a1 + 988) = v18;
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 976);
    *(_DWORD *)(a1 + 984) = *(_DWORD *)(a2 + 984);
    *(void *)(a1 + 976) = v19;
  }
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1008) = 0;
  sub_5772C0(a1 + 1000, *(void *)(a2 + 1000), *(void *)(a2 + 1008), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1008) - *(void *)(a2 + 1000)) >> 3));
  int v20 = *(_DWORD *)(a2 + 1024);
  *(unsigned char *)(a1 + 1028) = *(unsigned char *)(a2 + 1028);
  *(_DWORD *)(a1 + 1024) = v20;
  uint64_t v21 = (unsigned char *)(a1 + 1032);
  if (*(char *)(a2 + 1055) < 0)
  {
    sub_4200(v21, *(void **)(a2 + 1032), *(void *)(a2 + 1040));
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 1032);
    *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
    *(_OWORD *)uint64_t v21 = v22;
  }
  return a1;
}

void sub_5771D4(_Unwind_Exception *a1)
{
  sub_574CF0(v8);
  if (*(unsigned char *)(v1 + 988)) {
    *(unsigned char *)(v1 + 988) = 0;
  }
  if (*(char *)(v1 + 959) < 0) {
    operator delete(*v7);
  }
  sub_4D9814(v6);
  sub_5419D4(v5);
  uint64_t v10 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 64) = v10;
    operator delete(v10);
    if (*(char *)(v1 + 55) < 0)
    {
LABEL_7:
      operator delete(*v3);
      if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else if (*(char *)(v1 + 55) < 0)
  {
    goto LABEL_7;
  }
  if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_5772C0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(168 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 168 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4F58AC(v8 + v9, a2 + v9);
        *(void *)(result + 160) = *(void *)(a2 + v9 + 160);
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_577390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5773A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 168)
    sub_4D4B58(v10 - 168 + v11);
  *(void *)(v9 + 8) = v10;
  sub_4F689C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_5773D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1056;
    sub_55BA78(i - 1056);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_577428(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_57760C(a1 + 80, a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 720);
  long long v7 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 752) = v7;
  *(_OWORD *)(a1 + 720) = v6;
  long long v8 = *(_OWORD *)(a2 + 768);
  long long v9 = *(_OWORD *)(a2 + 784);
  long long v10 = *(_OWORD *)(a2 + 800);
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 784) = v9;
  *(_OWORD *)(a1 + 800) = v10;
  *(_OWORD *)(a1 + 768) = v8;
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 856), (uint64_t *)(a2 + 824), (void *)(a1 + 824));
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  long long v11 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(a1 + 872) = v11;
  *(void *)(a2 + 888) = 0;
  *(void *)(a2 + 880) = 0;
  *(void *)(a2 + 872) = 0;
  *(unsigned char *)(a1 + 896) = *(unsigned char *)(a2 + 896);
  long long v12 = *(_OWORD *)(a2 + 904);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(a1 + 904) = v12;
  *(void *)(a2 + 920) = 0;
  *(void *)(a2 + 912) = 0;
  *(void *)(a2 + 904) = 0;
  *(unsigned char *)(a1 + 928) = *(unsigned char *)(a2 + 928);
  long long v13 = *(_OWORD *)(a2 + 936);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(_OWORD *)(a1 + 936) = v13;
  *(void *)(a2 + 952) = 0;
  *(void *)(a2 + 944) = 0;
  *(void *)(a2 + 936) = 0;
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  int v14 = *(unsigned __int8 *)(a2 + 988);
  *(unsigned char *)(a1 + 988) = v14;
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 976);
    *(_DWORD *)(a1 + 984) = *(_DWORD *)(a2 + 984);
    *(void *)(a1 + 976) = v15;
  }
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a2 + 1016) = 0;
  *(_OWORD *)(a2 + 1000) = 0u;
  int v16 = *(_DWORD *)(a2 + 1024);
  *(unsigned char *)(a1 + 1028) = *(unsigned char *)(a2 + 1028);
  *(_DWORD *)(a1 + 1024) = v16;
  long long v17 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = v17;
  *(void *)(a2 + 1048) = 0;
  *(void *)(a2 + 1040) = 0;
  *(void *)(a2 + 1032) = 0;
  return a1;
}

__n128 sub_57760C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v2 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v2;
  long long v3 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v3;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  long long v6 = *(_OWORD *)(a2 + 160);
  uint64_t v5 = a2 + 160;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 176) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 24);
  *(void *)(a1 + 200) = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v5 + 48);
  *(void *)(a1 + 224) = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v5 + 72);
  *(void *)(a1 + 248) = *(void *)(v5 + 88);
  *(_OWORD *)(v5 + 72) = 0u;
  uint64_t v7 = *(void *)(v5 + 96);
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(v5 + 104);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(v5 + 108);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(v5 + 112);
  *(void *)(a1 + 288) = *(void *)(v5 + 128);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  long long v9 = *(_OWORD *)(v5 + 136);
  *(void *)(a1 + 312) = *(void *)(v5 + 152);
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(v5 + 144) = 0u;
  *(void *)(v5 + 136) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v5 + 160);
  *(void *)(a1 + 336) = *(void *)(v5 + 176);
  *(void *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v10 = *(void *)(v5 + 192);
  *(void *)(a1 + 344) = *(void *)(v5 + 184);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 360) = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v5 + 208);
  *(void *)(a1 + 384) = *(void *)(v5 + 224);
  *(void *)(v5 + 224) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v11 = *(void *)(v5 + 240);
  *(void *)(a1 + 392) = *(void *)(v5 + 232);
  *(void *)(a1 + 400) = v11;
  *(void *)(a1 + 408) = *(void *)(v5 + 248);
  *(_OWORD *)(v5 + 232) = 0u;
  uint64_t v12 = *(void *)(v5 + 256);
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(a1 + 416) = v12;
  LODWORD(v12) = *(_DWORD *)(v5 + 264);
  *(unsigned char *)(a1 + 428) = *(unsigned char *)(v5 + 268);
  *(_DWORD *)(a1 + 424) = v12;
  long long v13 = *(_OWORD *)(v5 + 272);
  *(void *)(a1 + 448) = *(void *)(v5 + 288);
  *(_OWORD *)(a1 + 432) = v13;
  *(void *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  long long v14 = *(_OWORD *)(v5 + 296);
  *(void *)(a1 + 472) = *(void *)(v5 + 312);
  *(_OWORD *)(a1 + 456) = v14;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)(v5 + 296) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(v5 + 320);
  *(void *)(a1 + 496) = *(void *)(v5 + 336);
  *(void *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 504) = *(void *)(v5 + 344);
  *(void *)(a1 + 512) = *(void *)(v5 + 352);
  *(void *)(a1 + 520) = *(void *)(v5 + 360);
  *(void *)(v5 + 360) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(v5 + 368);
  *(void *)(a1 + 544) = *(void *)(v5 + 384);
  *(void *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 368) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(v5 + 392);
  *(void *)(a1 + 560) = *(void *)(v5 + 400);
  *(void *)(a1 + 568) = *(void *)(v5 + 408);
  *(_OWORD *)(v5 + 392) = 0u;
  uint64_t v15 = *(void *)(v5 + 416);
  *(_OWORD *)(v5 + 408) = 0u;
  *(void *)(a1 + 576) = v15;
  LODWORD(v15) = *(_DWORD *)(v5 + 424);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(v5 + 428);
  *(_DWORD *)(a1 + 584) = v15;
  long long v16 = *(_OWORD *)(v5 + 432);
  *(void *)(a1 + 608) = *(void *)(v5 + 448);
  *(_OWORD *)(a1 + 592) = v16;
  *(void *)(v5 + 440) = 0;
  *(void *)(v5 + 448) = 0;
  *(void *)(v5 + 432) = 0;
  __n128 result = *(__n128 *)(v5 + 456);
  *(void *)(a1 + 632) = *(void *)(v5 + 472);
  *(__n128 *)(a1 + 616) = result;
  *(void *)(v5 + 464) = 0;
  *(void *)(v5 + 472) = 0;
  *(void *)(v5 + 456) = 0;
  return result;
}

double sub_577960()
{
  byte_2570A9F = 1;
  word_2570A88 = 65;
  byte_2570AB7 = 1;
  word_2570AA0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2570B48 = 0u;
  *(_OWORD *)&qword_2570B58 = 0u;
  dword_2570B68 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2570B48, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2570B48, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2570B48, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2570B48, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2570ACF = 8;
  strcpy((char *)&qword_2570AB8, "any_mode");
  byte_2570AE7 = 7;
  strcpy((char *)&dword_2570AD0, "cycling");
  byte_2570AFF = 7;
  strcpy((char *)&dword_2570AE8, "driving");
  byte_2570B17 = 7;
  strcpy((char *)&dword_2570B00, "walking");
  qword_2570B20 = 0;
  qword_2570B28 = 0;
  qword_2570B18 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2570B18 = (uint64_t)v0;
  qword_2570B20 = (uint64_t)(v0 + 9);
  qword_2570B28 = (uint64_t)(v0 + 9);
  qword_2570B30 = 0;
  qword_2570B38 = 0;
  unk_2570B40 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2570B38 = (uint64_t)(v1 + 9);
  unk_2570B40 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2570B30 = (uint64_t)v1;
  return result;
}

void sub_577C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2570B58) {
    sub_20A9464((void **)qword_2570B58);
  }
  uint64_t v37 = (void *)xmmword_2570B48;
  *(void *)&xmmword_2570B48 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_577CC8(void *a1, unint64_t a2)
{
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v15;
    }
    else {
      char v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 336 * a2;
}

void sub_577E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_577F08(void *a1, void *a2)
{
  char v4 = sub_188FC78(a1, (uint64_t)"/* DOT Generated from route */", 30);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int v5 = std::locale::use_facet(&v81, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v81);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v80 = a2 + 133;
  uint64_t v6 = a2[134];
  uint64_t v7 = a2[133];
  uint64_t v8 = v6 - v7 + 2400;
  while (v6 != v7)
  {
    int v9 = *(unsigned __int8 *)(v6 - 2072);
    v8 -= 2400;
    v6 -= 2400;
    if (v9 == 5)
    {
      char v10 = sub_188FC78(a1, (uint64_t)"digraph {", 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
      int v11 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v12 = sub_188FC78(a1, (uint64_t)"  rankdir=\"LR\";", 15);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      long long v13 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      int v14 = sub_188FC78(a1, (uint64_t)"  compound=true;", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      std::string v15 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      std::string v16 = sub_188FC78(a1, (uint64_t)"  splines=true;", 15);
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
      std::string v17 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      std::string v18 = sub_188FC78(a1, (uint64_t)"  overlap=scalexy;", 18);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
      long long v19 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      std::string::size_type v20 = sub_188FC78(a1, (uint64_t)"graph [ordering=\"out\"];", 23);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      uint64_t v21 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      uint64_t v79 = 0x2FC962FC962FC963 * (v8 >> 5);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v22 = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      int v84 = 1065353216;
      do
      {
        uint64_t v23 = sub_4A5E10(v80, v22);
        uint64_t v24 = (void *)v23;
        if (*(void *)(v23 + 1808) != *(void *)(v23 + 1816))
        {
          char v25 = (void *)v23;
          if (v22 < v79 - 1) {
            char v25 = (void *)sub_4A5E10(v80, v22 + 1);
          }
          unint64_t v26 = v24[5];
          unint64_t v27 = v24[3];
          if (v26 <= v27) {
            uint64_t v28 = v24[3];
          }
          else {
            uint64_t v28 = v24[5];
          }
          if (v26 < v27)
          {
            do
            {
              uint64_t v30 = sub_577CC8(v24 + 226, v26 - v24[5]);
              v81.__locale_ = (std::locale::__imp *)sub_682208(v30);
              sub_57A834((uint64_t)&v82, (unint64_t *)&v81, &v81);
              if (v26 >= sub_46C760(a2) - 1)
              {
                unint64_t v29 = v26 + 1;
              }
              else
              {
                unint64_t v29 = v26 + 1;
                if (v26 == v24[8]) {
                  unint64_t v31 = v24[9];
                }
                else {
                  unint64_t v31 = v26 + 1;
                }
                unint64_t v32 = v31 - v24[5];
                if (v32 >= 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v24[227] - v24[226]) >> 4))
                {
                  unint64_t v34 = v31 - v25[5];
                  if (v34 >= 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v25[227] - v25[226]) >> 4))
                  {
                    sub_68206C((uint64_t)&v81);
                    sub_578F68(a1, v30, (uint64_t)&v81);
                    sub_576848((uint64_t)&v81);
                  }
                  else
                  {
                    uint64_t v35 = sub_577CC8(v25 + 226, v34);
                    v81.__locale_ = (std::locale::__imp *)sub_682208(v35);
                    sub_57A834((uint64_t)&v82, (unint64_t *)&v81, &v81);
                    sub_578F68(a1, v30, v35);
                  }
                }
                else
                {
                  uint64_t v33 = sub_577CC8(v24 + 226, v32);
                  v81.__locale_ = (std::locale::__imp *)sub_682208(v33);
                  sub_57A834((uint64_t)&v82, (unint64_t *)&v81, &v81);
                  sub_578F68(a1, v30, v33);
                }
              }
              unint64_t v26 = v29;
            }
            while (v29 != v28);
          }
        }
        ++v22;
      }
      while (v22 != v79);
      unint64_t v36 = 0;
      do
      {
        uint64_t v37 = sub_4A5E10(v80, v36);
        uint64_t v38 = *(void *)(v37 + 1808);
        uint64_t v39 = *(void *)(v37 + 1816);
        while (v38 != v39)
        {
          unint64_t v40 = sub_682208(v38);
          if (*((void *)&v82 + 1))
          {
            uint8x8_t v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              unint64_t v42 = v40;
              if (v40 >= *((void *)&v82 + 1)) {
                unint64_t v42 = v40 % *((void *)&v82 + 1);
              }
            }
            else
            {
              unint64_t v42 = (*((void *)&v82 + 1) - 1) & v40;
            }
            uint64_t v43 = *(void **)(v82 + 8 * v42);
            if (v43)
            {
              uint64_t v44 = (void *)*v43;
              if (v44)
              {
                if (v41.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v46 = v44[1];
                    if (v46 == v40)
                    {
                      if (v44[2] == v40) {
                        goto LABEL_51;
                      }
                    }
                    else if ((v46 & (*((void *)&v82 + 1) - 1)) != v42)
                    {
                      goto LABEL_28;
                    }
                    uint64_t v44 = (void *)*v44;
                    if (!v44) {
                      goto LABEL_28;
                    }
                  }
                }
                do
                {
                  unint64_t v45 = v44[1];
                  if (v45 == v40)
                  {
                    if (v44[2] == v40)
                    {
LABEL_51:
                      sub_188FC78(a1, (uint64_t)"\tsubgraph cluster_", 18);
                      sub_682208(v38);
                      uint64_t v47 = (void *)std::ostream::operator<<();
                      uint64_t v48 = sub_188FC78(v47, (uint64_t)" {", 2);
                      std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
                      uint64_t v49 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
                      std::locale::~locale(&v81);
                      std::ostream::put();
                      std::ostream::flush();
                      if (sub_683488(v38))
                      {
                        sub_188FC78(a1, (uint64_t)"\t\tlabel=\"Lane Info #", 20);
                        sub_682208(v38);
                        int v50 = (void *)std::ostream::operator<<();
                        size_t v51 = sub_188FC78(v50, (uint64_t)" (", 2);
                        int v52 = sub_6F0198(v51, *(_DWORD *)(v37 + 160));
                        uint64_t v53 = sub_188FC78(v52, (uint64_t)")\"", 2);
                        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
                        unint64_t v54 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                        ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
                        std::locale::~locale(&v81);
                        std::ostream::put();
                        std::ostream::flush();
                        uint64_t v55 = sub_188FC78(a1, (uint64_t)"\t\tcolor=blue", 12);
                        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
                        uint64_t v56 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
                        std::locale::~locale(&v81);
                        std::ostream::put();
                        std::ostream::flush();
                        uint64_t v57 = sub_188FC78(a1, (uint64_t)"\t\tnode [style=filled, color=lightgrey];", 39);
                      }
                      else
                      {
                        sub_188FC78(a1, (uint64_t)"\t\tlabel=\"Lane Info #", 20);
                        sub_682208(v38);
                        uint64_t v58 = (void *)std::ostream::operator<<();
                        LOBYTE(v81.__locale_) = 34;
                        uint64_t v57 = sub_188FC78(v58, (uint64_t)&v81, 1);
                      }
                      std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24)));
                      uint64_t v59 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
                      std::locale::~locale(&v81);
                      std::ostream::put();
                      std::ostream::flush();
                      if (sub_682244(v38))
                      {
                        sub_188FC78(a1, (uint64_t)"\t\t{rank=same; ", 14);
                        unsigned __int8 v60 = sub_682244(v38);
                        if (v60)
                        {
                          unint64_t v61 = v60 + 1;
                          do
                          {
                            sub_682208(v38);
                            long long v62 = (void *)std::ostream::operator<<();
                            LOBYTE(v81.__locale_) = 46;
                            sub_188FC78(v62, (uint64_t)&v81, 1);
                            uint64_t v63 = (void *)std::ostream::operator<<();
                            LOBYTE(v81.__locale_) = 32;
                            sub_188FC78(v63, (uint64_t)&v81, 1);
                            --v61;
                          }
                          while (v61 > 1);
                        }
                        long long v64 = sub_188FC78(a1, (uint64_t)"}", 1);
                        std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
                        int v65 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
                        std::locale::~locale(&v81);
                        std::ostream::put();
                        std::ostream::flush();
                      }
                      sub_188FC78(a1, (uint64_t)"\t\tinfo_for_", 11);
                      sub_682208(v38);
                      size_t v66 = (void *)std::ostream::operator<<();
                      int v67 = sub_188FC78(v66, (uint64_t)" [label=\"", 9);
                      uint64_t v68 = sub_684774(v38);
                      uint64_t v69 = sub_2DD928(v67, v68);
                      sub_188FC78(v69, (uint64_t)"\", shape=note, fontsize=8];", 27);
                      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
                      v70 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
                      std::locale::~locale(&v81);
                      std::ostream::put();
                      std::ostream::flush();
                      v71 = sub_188FC78(a1, (uint64_t)"\t}", 2);
                      std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(void *)(*v71 - 24)));
                      v72 = std::locale::use_facet(&v81, &std::ctype<char>::id);
                      ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
                      std::locale::~locale(&v81);
                      std::ostream::put();
                      std::ostream::flush();
                      break;
                    }
                  }
                  else
                  {
                    if (v45 >= *((void *)&v82 + 1)) {
                      v45 %= *((void *)&v82 + 1);
                    }
                    if (v45 != v42) {
                      break;
                    }
                  }
                  uint64_t v44 = (void *)*v44;
                }
                while (v44);
              }
            }
          }
LABEL_28:
          v38 += 336;
        }
        ++v36;
      }
      while (v36 != v79);
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      v73 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      LOBYTE(v81.__locale_) = 125;
      v74 = sub_188FC78(a1, (uint64_t)&v81, 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
      uint64_t v75 = std::locale::use_facet(&v81, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
      std::locale::~locale(&v81);
      std::ostream::put();
      std::ostream::flush();
      int v76 = (void *)v83;
      if ((void)v83)
      {
        do
        {
          size_t v77 = (void *)*v76;
          operator delete(v76);
          int v76 = v77;
        }
        while (v77);
      }
      int v78 = (void *)v82;
      *(void *)&long long v82 = 0;
      if (v78) {
        operator delete(v78);
      }
      return;
    }
  }
}

void sub_578D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  std::locale::~locale(&a13);
  sub_12168(v13 - 128);
  _Unwind_Resume(a1);
}

void sub_578EA0(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578EB4(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578EC8(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578EDC(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578EF0(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F04(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F18(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F2C(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F40(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F54(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_578F68(void *a1, uint64_t a2, uint64_t a3)
{
  if (sub_682244(a2) && sub_682244(a3))
  {
    unsigned __int8 v6 = sub_682244(a2);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v57 = v6;
      do
      {
        if (sub_6861D0(a2))
        {
          uint64_t v8 = sub_686088(a2, v7);
          uint64_t v63 = 0;
          long long v64 = 0;
          v62.__locale_ = 0;
          char v10 = (const void *)*v8;
          uint64_t v9 = v8[1];
          size_t v11 = v9 - *v8;
          if (v9 != *v8)
          {
            if ((v11 & 0x8000000000000000) != 0) {
              sub_2E00();
            }
            uint64_t v12 = (std::locale::__imp *)operator new(v9 - *v8);
            uint64_t v13 = (unsigned __int8 *)v12 + v11;
            v62.__locale_ = v12;
            long long v64 = (char *)v12 + v11;
            memcpy(v12, v10, v11);
            uint64_t v63 = v13;
          }
          memset(&v61, 0, sizeof(v61));
          int v14 = (unsigned __int8 **)sub_6838A0(a2, v7);
          std::string v15 = *v14;
          std::string v16 = v14[1];
          while (v15 != v16)
          {
            unint64_t v17 = *v15;
            std::string v18 = "";
            if (v17 <= 0x12) {
              std::string v18 = off_2439F50[v17];
            }
            size_t v19 = strlen(v18);
            if (v19 >= 0x7FFFFFFFFFFFFFF8) {
              sub_188D690();
            }
            std::string::size_type v20 = v19;
            if (v19 >= 0x17)
            {
              uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17) {
                uint64_t v22 = v19 | 7;
              }
              uint64_t v23 = v22 + 1;
              p_dst = (std::string *)operator new(v22 + 1);
              __dst.__r_.__value_.__l.__size_ = v20;
              __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_22:
              memmove(p_dst, v18, v20);
              goto LABEL_23;
            }
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19;
            p_dst = &__dst;
            if (v19) {
              goto LABEL_22;
            }
LABEL_23:
            p_dst->__r_.__value_.__s.__data_[v20] = 0;
            std::string::push_back(&__dst, 44);
            std::string __p = __dst;
            memset(&__dst, 0, sizeof(__dst));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::string::append(&v61, (const std::string::value_type *)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_11;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_11;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_11:
            ++v15;
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          {
            unint64_t v27 = (std::string *)v61.__r_.__value_.__r.__words[0];
            uint64_t v26 = --v61.__r_.__value_.__l.__size_;
          }
          else
          {
            uint64_t v26 = HIBYTE(v61.__r_.__value_.__r.__words[2]) - 1;
            *((unsigned char *)&v61.__r_.__value_.__s + 23) = v26 & 0x7F;
            unint64_t v27 = &v61;
          }
          v27->__r_.__value_.__s.__data_[v26] = 0;
          unint64_t v34 = v63;
          locale = v62.__locale_;
          if ((unsigned __int8 *)v62.__locale_ != v63)
          {
            uint64_t v35 = v62.__locale_;
            sub_579878((unint64_t)v62.__locale_, v63, (uint64_t)&__p, 126 - 2 * __clz(v63 - (unsigned __int8 *)v62.__locale_), 1);
            while (*(unsigned __int8 *)v35 >= sub_682244(a3))
            {
              sub_188FC78(a1, (uint64_t)"\tinfo_for_", 10);
              sub_682208(a2);
              uint8x8_t v41 = (void *)std::ostream::operator<<();
              sub_188FC78(v41, (uint64_t)" -> info_for_", 13);
              sub_682208(a3);
              unint64_t v42 = (void *)std::ostream::operator<<();
              sub_188FC78(v42, (uint64_t)"[ltail=cluster_", 15);
              sub_682208(a2);
              uint64_t v43 = (void *)std::ostream::operator<<();
              sub_188FC78(v43, (uint64_t)" lhead=cluster_", 15);
              sub_682208(a3);
              uint64_t v44 = (void *)std::ostream::operator<<();
              unint64_t v45 = sub_188FC78(v44, (uint64_t)"];", 2);
LABEL_58:
              std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
              uint64_t v49 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
              std::locale::~locale((std::locale *)&__p);
              std::ostream::put();
              std::ostream::flush();
              uint64_t v35 = (std::locale::__imp *)((char *)v35 + 1);
              if (v35 == (std::locale::__imp *)v34) {
                goto LABEL_59;
              }
            }
            sub_188FC78(a1, (uint64_t)"\t", 1);
            sub_682208(a2);
            unint64_t v36 = (void *)std::ostream::operator<<();
            __p.__r_.__value_.__s.__data_[0] = 46;
            uint64_t v37 = sub_188FC78(v36, (uint64_t)&__p, 1);
            __p.__r_.__value_.__s.__data_[0] = v7;
            sub_188FC78(v37, (uint64_t)&__p, 1);
            sub_188FC78(v37, (uint64_t)" -> ", 4);
            sub_682208(a3);
            uint64_t v38 = (void *)std::ostream::operator<<();
            __p.__r_.__value_.__s.__data_[0] = 46;
            uint64_t v39 = sub_188FC78(v38, (uint64_t)&__p, 1);
            __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)v35;
            sub_188FC78(v39, (uint64_t)&__p, 1);
            if (sub_6847A0(a2, v7))
            {
              if (sub_6847D0(a2, v7)) {
                unint64_t v40 = sub_188FC78(a1, (uint64_t)"[color=blue label=\"", 19);
              }
              else {
                unint64_t v40 = sub_188FC78(a1, (uint64_t)"[color=red label=\"", 18);
              }
              goto LABEL_50;
            }
            if (sub_682F48(a2, v7))
            {
              unint64_t v40 = sub_188FC78(a1, (uint64_t)"[color=green label=\"", 20);
              goto LABEL_50;
            }
            if ((sub_6847D0(a2, v7) & 1) == 0)
            {
              unint64_t v40 = sub_188FC78(a1, (uint64_t)"[color=purple label=\"", 21);
LABEL_50:
              if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v46 = &v61;
              }
              else {
                uint64_t v46 = (std::string *)v61.__r_.__value_.__r.__words[0];
              }
              if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v47 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v47 = v61.__r_.__value_.__l.__size_;
              }
              uint64_t v48 = sub_188FC78(v40, (uint64_t)v46, v47);
              sub_188FC78(v48, (uint64_t)"\"]", 2);
            }
            __p.__r_.__value_.__s.__data_[0] = 59;
            unint64_t v45 = sub_188FC78(a1, (uint64_t)&__p, 1);
            goto LABEL_58;
          }
LABEL_59:
          if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            int v50 = locale;
            if (!locale) {
              goto LABEL_5;
            }
LABEL_63:
            operator delete(v50);
            goto LABEL_5;
          }
          operator delete(v61.__r_.__value_.__l.__data_);
          int v50 = locale;
          if (locale) {
            goto LABEL_63;
          }
        }
        else
        {
          sub_188FC78(a1, (uint64_t)"\tinfo_for_", 10);
          sub_682208(a2);
          uint64_t v28 = (void *)std::ostream::operator<<();
          sub_188FC78(v28, (uint64_t)" -> info_for_", 13);
          sub_682208(a3);
          unint64_t v29 = (void *)std::ostream::operator<<();
          sub_188FC78(v29, (uint64_t)"[style=dashed,color=grey,ltail=cluster_", 39);
          sub_682208(a2);
          uint64_t v30 = (void *)std::ostream::operator<<();
          sub_188FC78(v30, (uint64_t)" lhead=cluster_", 15);
          sub_682208(a3);
          unint64_t v31 = (void *)std::ostream::operator<<();
          unint64_t v32 = sub_188FC78(v31, (uint64_t)"];", 2);
          std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
          uint64_t v33 = std::locale::use_facet(&v62, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
          std::locale::~locale(&v62);
          std::ostream::put();
          std::ostream::flush();
        }
LABEL_5:
        ++v7;
      }
      while (v7 != v57);
    }
  }
  else
  {
    sub_188FC78(a1, (uint64_t)"\tinfo_for_", 10);
    sub_682208(a2);
    size_t v51 = (void *)std::ostream::operator<<();
    sub_188FC78(v51, (uint64_t)" -> info_for_", 13);
    sub_682208(a3);
    int v52 = (void *)std::ostream::operator<<();
    sub_188FC78(v52, (uint64_t)"[style=dashed,color=grey,ltail=cluster_", 39);
    sub_682208(a2);
    uint64_t v53 = (void *)std::ostream::operator<<();
    sub_188FC78(v53, (uint64_t)" lhead=cluster_", 15);
    sub_682208(a3);
    unint64_t v54 = (void *)std::ostream::operator<<();
    uint64_t v55 = sub_188FC78(v54, (uint64_t)"];", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
    uint64_t v56 = std::locale::use_facet(&v62, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
    std::locale::~locale(&v62);
    std::ostream::put();
    std::ostream::flush();
  }
}

void sub_579794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22)
{
}

void sub_5797A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_579820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x57982CLL);
  }
  JUMPOUT(0x5797ECLL);
}

void sub_579840(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x579864);
  }
  JUMPOUT(0x5797F4);
}

void sub_579858(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if (!a25) {
      JUMPOUT(0x579800);
    }
    JUMPOUT(0x5797FCLL);
  }
  JUMPOUT(0x5797F4);
}

unint64_t sub_579878(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, char a5)
{
  size_t v11 = (unsigned __int8 *)result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    size_t v11 = v12;
    unint64_t v13 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v72 = *v12;
          unsigned int v73 = *(a2 - 1);
          if (v72 <= v73) {
            return result;
          }
          unsigned __int8 *v12 = v73;
          goto LABEL_155;
        case 3uLL:
          unsigned int v72 = *v12;
          unsigned int v74 = v12[1];
          unsigned int v75 = *(a2 - 1);
          if (v72 <= v74)
          {
            if (v74 > v75)
            {
              v12[1] = v75;
              *(a2 - 1) = v74;
              unsigned int v92 = *v12;
              unsigned int v93 = v12[1];
              if (v92 > v93)
              {
                unsigned __int8 *v12 = v93;
                v12[1] = v92;
              }
            }
          }
          else
          {
            if (v74 <= v75)
            {
              unsigned __int8 *v12 = v74;
              v12[1] = v72;
              unsigned int v100 = *(a2 - 1);
              if (v72 <= v100) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              unsigned __int8 *v12 = v75;
            }
LABEL_155:
            *(a2 - 1) = v72;
          }
          return result;
        case 4uLL:
          int v76 = v12 + 1;
          size_t v77 = (unsigned __int8 *)v12[1];
          int v78 = v12 + 2;
          unsigned int v79 = v12[2];
          unint64_t v80 = (unsigned __int8 *)*v12;
          if (v80 <= v77)
          {
            if (v77 <= v79)
            {
LABEL_149:
              LODWORD(v77) = v79;
              unsigned int v94 = *(a2 - 1);
              if (v77 <= v94) {
                return result;
              }
LABEL_150:
              *int v78 = v94;
              *(a2 - 1) = v77;
              unsigned int v97 = *v76;
              unsigned int v98 = *v78;
              if (v97 > v98)
              {
                v12[1] = v98;
                v12[2] = v97;
                unsigned int v99 = *v12;
                if (v99 > v98)
                {
                  unsigned __int8 *v12 = v98;
                  v12[1] = v99;
                }
              }
              return result;
            }
            *int v76 = v79;
            *int v78 = (_BYTE)v77;
            std::locale v81 = v12;
            long long v82 = v12 + 1;
            double result = (unint64_t)v77;
            if (v80 <= v79)
            {
LABEL_141:
              unsigned int v94 = *(a2 - 1);
              if (v77 <= v94) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            std::locale v81 = v12;
            long long v82 = v12 + 2;
            double result = *v12;
            if (v77 <= v79)
            {
              unsigned __int8 *v12 = v77;
              v12[1] = v80;
              std::locale v81 = v12 + 1;
              long long v82 = v12 + 2;
              double result = (unint64_t)v80;
              if (v80 <= v79) {
                goto LABEL_149;
              }
            }
          }
          unsigned __int8 *v81 = v79;
          unsigned char *v82 = (_BYTE)v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return (unint64_t)sub_57A3B0(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v13 <= 23) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        return (unint64_t)sub_57A4EC(v12, a2, a2);
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    std::string v15 = &v12[v13 >> 1];
    unsigned int v16 = *(a2 - 1);
    if (v13 < 0x81)
    {
      unsigned int v19 = *v15;
      unsigned int v20 = *v12;
      if (v19 > v20)
      {
        if (v20 > v16)
        {
          unsigned __int8 *v15 = v16;
          goto LABEL_32;
        }
        unsigned __int8 *v15 = v20;
        unsigned __int8 *v12 = v19;
        unsigned int v33 = *(a2 - 1);
        if (v19 > v33)
        {
          unsigned __int8 *v12 = v33;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a4;
        unsigned int v25 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v20 <= v16) {
        goto LABEL_33;
      }
      unsigned __int8 *v12 = v16;
      *(a2 - 1) = v20;
      unsigned int v23 = *v15;
      unsigned int v24 = *v12;
      if (v23 <= v24) {
        goto LABEL_33;
      }
      unsigned __int8 *v15 = v24;
      unsigned __int8 *v12 = v23;
      --a4;
      unsigned int v25 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (v25 > *(v12 - 1)) {
        goto LABEL_57;
      }
      if (*(a2 - 1) > v25)
      {
        do
          unsigned int v63 = *++v12;
        while (v63 <= v25);
      }
      else
      {
        long long v64 = v12 + 1;
        do
        {
          uint64_t v12 = v64;
          if (v64 >= a2) {
            break;
          }
          ++v64;
        }
        while (*v12 <= v25);
      }
      int v65 = a2;
      if (v12 < a2)
      {
        int v65 = a2;
        do
          unsigned int v66 = *--v65;
        while (v66 > v25);
      }
      if (v12 < v65)
      {
        unsigned __int8 v67 = *v12;
        unsigned __int8 v68 = *v65;
        do
        {
          unsigned __int8 *v12 = v68;
          *int v65 = v67;
          do
          {
            unsigned int v69 = *++v12;
            unsigned __int8 v67 = v69;
          }
          while (v69 <= v25);
          do
          {
            unsigned int v70 = *--v65;
            unsigned __int8 v68 = v70;
          }
          while (v70 > v25);
        }
        while (v12 < v65);
      }
      v71 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        unsigned __int8 *v11 = *v71;
      }
      a5 = 0;
      unsigned __int8 *v71 = v25;
    }
    else
    {
      unsigned int v17 = *v12;
      unsigned int v18 = *v15;
      if (v17 <= v18)
      {
        if (v18 > v16)
        {
          unsigned __int8 *v15 = v16;
          *(a2 - 1) = v18;
          unsigned int v21 = *v12;
          unsigned int v22 = *v15;
          if (v21 > v22)
          {
            unsigned __int8 *v12 = v22;
            unsigned __int8 *v15 = v21;
          }
        }
      }
      else
      {
        if (v18 <= v16)
        {
          unsigned __int8 *v12 = v18;
          unsigned __int8 *v15 = v17;
          unsigned int v26 = *(a2 - 1);
          if (v17 <= v26) {
            goto LABEL_24;
          }
          unsigned __int8 *v15 = v26;
        }
        else
        {
          unsigned __int8 *v12 = v16;
        }
        *(a2 - 1) = v17;
      }
LABEL_24:
      unint64_t v27 = &v12[v14 - 1];
      unsigned int v28 = *v27;
      unsigned int v29 = v12[1];
      unsigned int v30 = *(a2 - 2);
      if (v29 <= v28)
      {
        if (v28 > v30)
        {
          *unint64_t v27 = v30;
          *(a2 - 2) = v28;
          unsigned int v31 = v12[1];
          unsigned int v32 = *v27;
          if (v31 > v32)
          {
            v12[1] = v32;
            *unint64_t v27 = v31;
          }
        }
      }
      else
      {
        if (v28 <= v30)
        {
          v12[1] = v28;
          *unint64_t v27 = v29;
          unsigned int v34 = *(a2 - 2);
          if (v29 <= v34) {
            goto LABEL_38;
          }
          *unint64_t v27 = v34;
        }
        else
        {
          v12[1] = v30;
        }
        *(a2 - 2) = v29;
      }
LABEL_38:
      uint64_t v35 = &v12[v14];
      unsigned int v38 = v35[1];
      unint64_t v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *(a2 - 3);
      if (v39 <= v38)
      {
        if (v37 > v40)
        {
          *unint64_t v36 = v40;
          *(a2 - 3) = v37;
          unsigned int v41 = v12[2];
          unsigned int v42 = *v36;
          if (v41 > v42)
          {
            v12[2] = v42;
            *unint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v37 <= v40)
        {
          v12[2] = v37;
          *unint64_t v36 = v39;
          unsigned int v43 = *(a2 - 3);
          if (v39 <= v43) {
            goto LABEL_47;
          }
          *unint64_t v36 = v43;
        }
        else
        {
          v12[2] = v40;
        }
        *(a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v44 = *v27;
      unsigned int v45 = *v15;
      unsigned int v46 = *v36;
      if (v44 <= v45)
      {
        if (v45 <= v46) {
          goto LABEL_55;
        }
        unsigned __int8 *v15 = v46;
        *unint64_t v36 = v45;
        unint64_t v36 = &v12[v13 >> 1];
        LOBYTE(v45) = v44;
        if (v44 > v46)
        {
LABEL_54:
          *unint64_t v27 = v46;
          *unint64_t v36 = v44;
LABEL_55:
          unsigned __int8 v48 = *v12;
          unsigned __int8 *v12 = v45;
          unsigned __int8 *v15 = v48;
          --a4;
          unsigned int v25 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned __int8 v62 = *v12;
        unsigned __int8 *v12 = v46;
        unsigned __int8 *v15 = v62;
        --a4;
        unsigned int v25 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 > v46) {
        goto LABEL_54;
      }
      *unint64_t v27 = v45;
      unsigned __int8 *v15 = v44;
      unint64_t v27 = &v12[v13 >> 1];
      LOBYTE(v45) = v46;
      if (v44 > v46) {
        goto LABEL_54;
      }
      unsigned __int8 v47 = *v12;
      unsigned __int8 *v12 = v44;
      unsigned __int8 *v15 = v47;
      --a4;
      unsigned int v25 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v49 = 0;
      do
        unsigned int v50 = v12[++v49];
      while (v25 > v50);
      size_t v51 = &v12[v49];
      int v52 = a2;
      if (v49 == 1)
      {
        int v52 = a2;
        do
        {
          if (v51 >= v52) {
            break;
          }
          unsigned int v54 = *--v52;
        }
        while (v25 <= v54);
      }
      else
      {
        do
          unsigned int v53 = *--v52;
        while (v25 <= v53);
      }
      if (v51 >= v52)
      {
        unsigned __int8 v60 = v51 - 1;
        if (v51 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        unsigned __int8 *v12 = *v60;
        goto LABEL_75;
      }
      unsigned __int8 v55 = *v52;
      uint64_t v56 = &v12[v49];
      uint64_t v57 = v52;
      do
      {
        *uint64_t v56 = v55;
        unsigned __int8 *v57 = v50;
        do
        {
          unsigned int v58 = *++v56;
          LOBYTE(v50) = v58;
        }
        while (v25 > v58);
        do
        {
          unsigned int v59 = *--v57;
          unsigned __int8 v55 = v59;
        }
        while (v25 <= v59);
      }
      while (v56 < v57);
      unsigned __int8 v60 = v56 - 1;
      if (v56 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *unsigned __int8 v60 = v25;
      if (v51 < v52) {
        goto LABEL_78;
      }
      BOOL v61 = sub_57A068(v12, v60);
      uint64_t v12 = v60 + 1;
      double result = sub_57A068(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v61) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v61)
      {
LABEL_78:
        double result = sub_579878(v11, v60, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v60 + 1;
      }
    }
  }
  long long v83 = v12 + 1;
  BOOL v85 = v12 == a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v12;
      do
      {
        unsigned int v89 = *v87;
        unsigned int v90 = v87[1];
        unint64_t v87 = v83;
        if (v89 > v90)
        {
          uint64_t v91 = v86;
          do
          {
            v12[v91 + 1] = v89;
            if (!v91)
            {
              v88 = v12;
              goto LABEL_124;
            }
            unsigned int v89 = v12[--v91];
          }
          while (v89 > v90);
          v88 = &v12[v91 + 1];
LABEL_124:
          unsigned __int8 *v88 = v90;
        }
        long long v83 = v87 + 1;
        ++v86;
      }
      while (v87 + 1 != a2);
    }
  }
  else if (!v85)
  {
    do
    {
      unsigned int v95 = *v11;
      unsigned int v96 = v11[1];
      size_t v11 = v83;
      if (v95 > v96)
      {
        do
        {
          unsigned __int8 *v83 = v95;
          unsigned int v95 = *(v83 - 2);
          --v83;
        }
        while (v95 > v96);
        unsigned __int8 *v83 = v96;
      }
      long long v83 = v11 + 1;
    }
    while (v11 + 1 != a2);
  }
  return result;
}

BOOL sub_57A068(unsigned __int8 *a1, unsigned __int8 *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *a1;
      unsigned int v10 = *(a2 - 1);
      if (v9 <= v10) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v11 <= v12)
      {
        if (v12 <= v13) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unsigned int v28 = *a1;
        unsigned int v29 = a1[1];
        if (v28 <= v29) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v28;
        return 1;
      }
      else if (v12 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v34 = *(a2 - 1);
        if (v11 <= v34) {
          return 1;
        }
        a1[1] = v34;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      unsigned int v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v18 > v15)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v15 <= v17)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v18 <= v17) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unsigned int v19 = v17;
        *unsigned int v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v30 = *(a2 - 1);
        if (v15 <= v30) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v15 > v17)
      {
        unsigned char *v14 = v17;
        *unsigned int v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v18 <= v17) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v30 = *(a2 - 1);
      if (v15 <= v30) {
        return 1;
      }
LABEL_39:
      *unsigned int v16 = v30;
      *(a2 - 1) = v15;
      unsigned int v31 = *v14;
      unsigned int v32 = *v16;
      if (v31 <= v32) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v31;
      unsigned int v33 = *a1;
      if (v33 <= v32) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v33;
      return 1;
    case 5:
      sub_57A3B0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      char v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v6 <= v5)
      {
        if (v5 <= v3) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *char v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v5 > v3) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v6 <= v3) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      while (1)
      {
        unsigned int v25 = *v4;
        unsigned int v26 = *v22;
        if (v25 > v26) {
          break;
        }
LABEL_23:
        char v4 = v22;
        ++v23;
        if (++v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = v23;
      do
      {
        a1[v27 + 3] = v25;
        if (v27 == -2)
        {
          *a1 = v26;
          if (++v24 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v25 = a1[v27-- + 1];
      }
      while (v25 > v26);
      a1[v27 + 3] = v26;
      if (++v24 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

unsigned char *sub_57A3B0(unsigned char *result, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  unsigned int v5 = *result;
  unsigned int v6 = *a2;
  unsigned int v7 = *a3;
  if (v5 <= v6)
  {
    if (v6 <= v7)
    {
      LOBYTE(v6) = *a3;
      unsigned int v10 = *a4;
      if (v7 <= v10) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v6;
    unsigned int v8 = *result;
    unsigned int v9 = *a2;
    if (v8 > v9)
    {
      *double result = v9;
      *a2 = v8;
      unsigned int v6 = *a3;
      unsigned int v10 = *a4;
      if (v6 <= v10) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 <= v7)
    {
      *double result = v6;
      *a2 = v5;
      unsigned int v6 = *a3;
      if (v5 <= v6) {
        goto LABEL_11;
      }
      *a2 = v6;
    }
    else
    {
      *double result = v7;
    }
    *a3 = v5;
    unsigned int v6 = v5;
  }
LABEL_11:
  unsigned int v10 = *a4;
  if (v6 <= v10) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v10;
  *a4 = v6;
  unsigned int v11 = *a2;
  unsigned int v12 = *a3;
  if (v11 > v12)
  {
    *a2 = v12;
    *a3 = v11;
    unsigned int v13 = *result;
    unsigned int v14 = *a2;
    if (v13 > v14)
    {
      *double result = v14;
      *a2 = v13;
    }
  }
LABEL_17:
  unsigned int v15 = *a4;
  unsigned int v16 = *a5;
  if (v15 > v16)
  {
    *a4 = v16;
    *a5 = v15;
    unsigned int v17 = *a3;
    unsigned int v18 = *a4;
    if (v17 > v18)
    {
      *a3 = v18;
      *a4 = v17;
      unsigned int v19 = *a2;
      unsigned int v20 = *a3;
      if (v19 > v20)
      {
        *a2 = v20;
        *a3 = v19;
        unsigned int v21 = *result;
        unsigned int v22 = *a2;
        if (v21 > v22)
        {
          *double result = v22;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_57A4EC(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a1 != a2)
  {
    uint64_t v3 = a2 - a1;
    if (a2 - a1 >= 2)
    {
      int64_t v4 = (unint64_t)(a2 - a1 - 2) >> 1;
      int64_t v5 = v4;
      do
      {
        if (v4 >= v5)
        {
          uint64_t v6 = (2 * v5) | 1;
          unsigned int v7 = &a1[v6];
          if (2 * v5 + 2 >= v3)
          {
            unsigned int v8 = *v7;
            unsigned int v9 = &a1[v5];
            unsigned int v10 = a1[v5];
            if (v10 <= v8) {
              goto LABEL_19;
            }
          }
          else
          {
            unsigned int v8 = v7[1];
            if (v8 > *v7)
            {
              ++v7;
              uint64_t v6 = 2 * v5 + 2;
            }
            else
            {
              unsigned int v8 = *v7;
            }
            unsigned int v9 = &a1[v5];
            unsigned int v10 = a1[v5];
            if (v10 <= v8)
            {
LABEL_19:
              while (1)
              {
                *unsigned int v9 = v8;
                unsigned int v9 = v7;
                if (v4 < v6) {
                  break;
                }
                uint64_t v11 = (2 * v6) | 1;
                unsigned int v7 = &a1[v11];
                uint64_t v6 = 2 * v6 + 2;
                if (v6 < v3)
                {
                  unsigned int v8 = v7[1];
                  if (v8 > *v7)
                  {
                    ++v7;
                  }
                  else
                  {
                    unsigned int v8 = *v7;
                    uint64_t v6 = v11;
                  }
                  if (v10 > v8) {
                    break;
                  }
                }
                else
                {
                  unsigned int v8 = *v7;
                  uint64_t v6 = v11;
                  if (v10 > v8) {
                    break;
                  }
                }
              }
              *unsigned int v9 = v10;
            }
          }
        }
        BOOL v24 = v5-- <= 0;
      }
      while (!v24);
    }
    unsigned int v12 = a2;
    if (a2 == a3)
    {
LABEL_53:
      if (v3 < 2) {
        return v12;
      }
      while (1)
      {
        uint64_t v28 = 0;
        LOBYTE(v29) = *a1;
        int64_t v30 = (unint64_t)(v3 - 2) >> 1;
        unsigned int v31 = a1;
        do
        {
          while (1)
          {
            unsigned int v33 = &v31[v28 + 1];
            uint64_t v34 = (2 * v28) | 1;
            uint64_t v28 = 2 * v28 + 2;
            if (v28 < v3) {
              break;
            }
            uint64_t v28 = v34;
            unsigned __int8 *v31 = *v33;
            unsigned int v31 = v33;
            if (v34 > v30) {
              goto LABEL_65;
            }
          }
          unsigned int v32 = v33[1];
          if (v32 > *v33)
          {
            ++v33;
          }
          else
          {
            LOBYTE(v32) = *v33;
            uint64_t v28 = v34;
          }
          unsigned __int8 *v31 = v32;
          unsigned int v31 = v33;
        }
        while (v28 <= v30);
LABEL_65:
        if (v33 != --a2)
        {
          unsigned __int8 *v33 = *a2;
          *a2 = v29;
          unint64_t v35 = v33 - a1 - 1;
          if (v33 - a1 + 1 < 2) {
            goto LABEL_57;
          }
          unint64_t v36 = v35 >> 1;
          unsigned int v37 = &a1[v35 >> 1];
          unsigned int v29 = *v33;
          unsigned int v38 = *v37;
          if (v29 <= v38) {
            goto LABEL_57;
          }
          do
          {
            unsigned __int8 *v33 = v38;
            unsigned int v33 = v37;
            if (!v36) {
              break;
            }
            unint64_t v36 = (v36 - 1) >> 1;
            unsigned int v37 = &a1[v36];
            unsigned int v38 = a1[v36];
          }
          while (v29 > v38);
        }
        unsigned __int8 *v33 = v29;
LABEL_57:
        BOOL v24 = v3-- <= 2;
        if (v24) {
          return v12;
        }
      }
    }
    if (v3 < 2)
    {
      unsigned int v13 = *a1;
      unsigned int v14 = a2;
      do
      {
        unsigned int v15 = *v14;
        if (v13 > v15)
        {
          unsigned __int8 *v14 = v13;
          *a1 = v15;
          unsigned int v13 = v15;
        }
        ++v14;
      }
      while (v14 != a3);
LABEL_52:
      unsigned int v12 = a3;
      goto LABEL_53;
    }
    unsigned int v16 = a1 + 1;
    unsigned int v17 = a2;
    while (1)
    {
      unsigned int v18 = *a1;
      unsigned int v19 = *v17;
      if (v18 > v19)
      {
        *unsigned int v17 = v18;
        *a1 = v19;
        if (v3 == 2)
        {
          unsigned int v20 = *v16;
          unsigned int v21 = a1 + 1;
          uint64_t v22 = 1;
          if (v19 <= v20) {
            goto LABEL_43;
          }
        }
        else
        {
          unsigned int v23 = a1[2];
          unsigned int v20 = *v16;
          BOOL v24 = v23 > v20;
          if (v23 <= v20)
          {
            unsigned int v21 = a1 + 1;
          }
          else
          {
            unsigned int v20 = a1[2];
            unsigned int v21 = a1 + 2;
          }
          if (v24) {
            uint64_t v22 = 2;
          }
          else {
            uint64_t v22 = 1;
          }
          if (v19 <= v20)
          {
LABEL_43:
            unsigned int v25 = a1;
            while (1)
            {
              *unsigned int v25 = v20;
              unsigned int v25 = v21;
              if ((uint64_t)((unint64_t)(v3 - 2) >> 1) < v22) {
                break;
              }
              uint64_t v26 = (2 * v22) | 1;
              unsigned int v21 = &a1[v26];
              uint64_t v22 = 2 * v22 + 2;
              if (v22 < v3)
              {
                unsigned int v20 = v21[1];
                if (v20 > *v21)
                {
                  ++v21;
                }
                else
                {
                  unsigned int v20 = *v21;
                  uint64_t v22 = v26;
                }
                if (v19 > v20) {
                  break;
                }
              }
              else
              {
                unsigned int v20 = *v21;
                uint64_t v22 = v26;
                if (v19 > v20) {
                  break;
                }
              }
            }
            *unsigned int v25 = v19;
          }
        }
      }
      if (++v17 == a3) {
        goto LABEL_52;
      }
    }
  }
  return a3;
}

void *sub_57A834(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unsigned int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unsigned int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unsigned int v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unsigned int v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      *unsigned int v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    unsigned int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_57AB44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_57AB58()
{
  byte_2570B87 = 1;
  word_2570B70 = 65;
  byte_2570B9F = 1;
  word_2570B88 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2570BD0 = 0u;
  *(_OWORD *)&qword_2570BE0 = 0u;
  dword_2570BF0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2570BD0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2570BD0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2570BD0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2570BD0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2570BA8 = 0;
  qword_2570BB0 = 0;
  qword_2570BA0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2570BA0 = (uint64_t)v0;
  qword_2570BA8 = (uint64_t)(v0 + 9);
  qword_2570BB0 = (uint64_t)(v0 + 9);
  qword_2570BB8 = 0;
  qword_2570BC0 = 0;
  unk_2570BC8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2570BC0 = (uint64_t)(v1 + 9);
  unk_2570BC8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2570BB8 = (uint64_t)v1;
  return result;
}

void sub_57AD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2570BE0) {
    sub_20A94A8((void **)qword_2570BE0);
  }
  unsigned int v37 = (void *)xmmword_2570BD0;
  *(void *)&xmmword_2570BD0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_57AE34(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 32)
    && ((int v5 = *(unsigned char **)(a1 + 8), v5[1441]) ? (v6 = v5[1453] == 0) : (v6 = 1),
        !v6
     && v5[1407]
     && sub_646C34(a2) > *(void *)(a1 + 40)
     && !sub_45FB38(a2)
     && *(_DWORD *)(*(void *)(nullsub_1(a2) + 8) - 1076) == 1
     && sub_57CA90(a1, (uint64_t)a2)))
  {
    uint64_t v8 = *(void *)(nullsub_1(a2) + 8);
    unsigned int v9 = (void **)(v8 - 1328);
    uint64_t v10 = *(void *)(v8 - 1448);
    int v13 = *(_DWORD *)(v8 - 1440);
    uint64_t v12 = v10;
    if (*(char *)(v8 - 1305) < 0)
    {
      sub_4200(&__p, *v9, *(void *)(v8 - 1320));
    }
    else
    {
      long long v11 = *(_OWORD *)v9;
      uint64_t v15 = *(void *)(v8 - 1312);
      long long __p = v11;
    }
    sub_57C730((uint64_t)a3, &v12);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    bzero(a3, 0x5A0uLL);
    *a3 = 50;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    sub_4BE498((uint64_t)(a3 + 8));
    *((unsigned char *)a3 + 1152) = 0;
    *((unsigned char *)a3 + 1199) = 0;
    *(void *)((char *)a3 + 1175) = 0;
    *(_OWORD *)((char *)a3 + 1183) = 0u;
    a3[300] = 2;
    *(_OWORD *)(a3 + 302) = 0u;
    *(_OWORD *)(a3 + 306) = 0u;
    *(_OWORD *)(a3 + 310) = 0u;
    a3[314] = 12;
    a3[316] = 0x7FFFFFFF;
    *(void *)(a3 + 317) = 0x7FFFFFFF7FFFFFFFLL;
    *((_OWORD *)a3 + 80) = 0u;
    a3[324] = 0x7FFFFFFF;
    *(_OWORD *)(a3 + 326) = 0u;
    *(_OWORD *)(a3 + 330) = 0u;
    *(_OWORD *)(a3 + 334) = 0u;
    *(_OWORD *)(a3 + 338) = xmmword_20E81C0;
    *((unsigned char *)a3 + 1368) = 0;
    *((void *)a3 + 174) = 0;
    *((_OWORD *)a3 + 86) = 0u;
    *((void *)a3 + 175) = -1;
    a3[352] = 0x7FFFFFFF;
    *((void *)a3 + 179) = 0;
    *((void *)a3 + 177) = 0;
    *((void *)a3 + 178) = 0;
  }
}

void sub_57B028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_57B058(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 32)
    && ((int v5 = *(unsigned char **)(a1 + 8), v5[1441]) ? (v6 = v5[1453] == 0) : (v6 = 1),
        !v6
     && v5[1407]
     && sub_646C34(a2) > *(void *)(a1 + 40)
     && !sub_45FB38(a2)
     && *(_DWORD *)(*(void *)(nullsub_1(a2) + 8) - 1076) == 1
     && sub_57CA90(a1, (uint64_t)a2)))
  {
    uint64_t v8 = *(void *)(nullsub_1(a2) + 8);
    unsigned int v9 = (void **)(v8 - 1328);
    uint64_t v10 = *(void *)(v8 - 1448);
    int v13 = *(_DWORD *)(v8 - 1440);
    uint64_t v12 = v10;
    if (*(char *)(v8 - 1305) < 0)
    {
      sub_4200(&__p, *v9, *(void *)(v8 - 1320));
    }
    else
    {
      long long v11 = *(_OWORD *)v9;
      uint64_t v15 = *(void *)(v8 - 1312);
      long long __p = v11;
    }
    sub_57C730((uint64_t)a3, &v12);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    bzero(a3, 0x5A0uLL);
    *a3 = 50;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    sub_4BE498((uint64_t)(a3 + 8));
    *((unsigned char *)a3 + 1152) = 0;
    *((unsigned char *)a3 + 1199) = 0;
    *(void *)((char *)a3 + 1175) = 0;
    *(_OWORD *)((char *)a3 + 1183) = 0u;
    a3[300] = 2;
    *(_OWORD *)(a3 + 302) = 0u;
    *(_OWORD *)(a3 + 306) = 0u;
    *(_OWORD *)(a3 + 310) = 0u;
    a3[314] = 12;
    a3[316] = 0x7FFFFFFF;
    *(void *)(a3 + 317) = 0x7FFFFFFF7FFFFFFFLL;
    *((_OWORD *)a3 + 80) = 0u;
    a3[324] = 0x7FFFFFFF;
    *(_OWORD *)(a3 + 326) = 0u;
    *(_OWORD *)(a3 + 330) = 0u;
    *(_OWORD *)(a3 + 334) = 0u;
    *(_OWORD *)(a3 + 338) = xmmword_20E81C0;
    *((unsigned char *)a3 + 1368) = 0;
    *((void *)a3 + 174) = 0;
    *((_OWORD *)a3 + 86) = 0u;
    *((void *)a3 + 175) = -1;
    a3[352] = 0x7FFFFFFF;
    *((void *)a3 + 179) = 0;
    *((void *)a3 + 177) = 0;
    *((void *)a3 + 178) = 0;
  }
}

void sub_57B24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_57B27C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 32)
    && ((int v5 = *(unsigned char **)(a1 + 8), v5[1441]) ? (v6 = v5[1453] == 0) : (v6 = 1),
        !v6
     && v5[1407]
     && sub_646C34(a2) > *(void *)(a1 + 40)
     && !sub_45FB38(a2)
     && *(_DWORD *)(*(void *)(nullsub_1(a2) + 8) - 1076) == 1
     && sub_57CC10(a1, (uint64_t)a2)))
  {
    uint64_t v8 = *(void *)(nullsub_1(a2) + 8);
    unsigned int v9 = (void **)(v8 - 1328);
    uint64_t v10 = *(void *)(v8 - 1448);
    int v13 = *(_DWORD *)(v8 - 1440);
    uint64_t v12 = v10;
    if (*(char *)(v8 - 1305) < 0)
    {
      sub_4200(&__p, *v9, *(void *)(v8 - 1320));
    }
    else
    {
      long long v11 = *(_OWORD *)v9;
      uint64_t v15 = *(void *)(v8 - 1312);
      long long __p = v11;
    }
    sub_57C730((uint64_t)a3, &v12);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    bzero(a3, 0x5A0uLL);
    *a3 = 50;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    sub_4BE498((uint64_t)(a3 + 8));
    *((unsigned char *)a3 + 1152) = 0;
    *((unsigned char *)a3 + 1199) = 0;
    *(void *)((char *)a3 + 1175) = 0;
    *(_OWORD *)((char *)a3 + 1183) = 0u;
    a3[300] = 2;
    *(_OWORD *)(a3 + 302) = 0u;
    *(_OWORD *)(a3 + 306) = 0u;
    *(_OWORD *)(a3 + 310) = 0u;
    a3[314] = 12;
    a3[316] = 0x7FFFFFFF;
    *(void *)(a3 + 317) = 0x7FFFFFFF7FFFFFFFLL;
    *((_OWORD *)a3 + 80) = 0u;
    a3[324] = 0x7FFFFFFF;
    *(_OWORD *)(a3 + 326) = 0u;
    *(_OWORD *)(a3 + 330) = 0u;
    *(_OWORD *)(a3 + 334) = 0u;
    *(_OWORD *)(a3 + 338) = xmmword_20E81C0;
    *((unsigned char *)a3 + 1368) = 0;
    *((void *)a3 + 174) = 0;
    *((_OWORD *)a3 + 86) = 0u;
    *((void *)a3 + 175) = -1;
    a3[352] = 0x7FFFFFFF;
    *((void *)a3 + 179) = 0;
    *((void *)a3 + 177) = 0;
    *((void *)a3 + 178) = 0;
  }
}

void sub_57B470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_57B4A0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a4;
  sub_688A04(a3, 0, *(_DWORD *)(a4 + 968), a1 + 2);
  uint64_t v13 = 0;
  int v14 = operator new(0x28uLL);
  long long v15 = xmmword_20B8FD0;
  strcpy((char *)v14, "DownloadOfflineRegionAdvisoryBuilder");
  long long __p = 0;
  uint64_t v12 = 0;
  BOOL v6 = sub_374CDC(a2, (uint64_t)&v14, (uint64_t *)&__p);
  sub_57B65C((uint64_t)(a1 + 4), v6);
  char v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    unsigned int v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unsigned int v9 = __p;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  return a1;
}

void sub_57B5C0(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_57B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_14A84(v17);
  _Unwind_Resume(a1);
}

uint64_t *sub_57B600(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = (uint64_t *)sub_374EF4(a2);

  return sub_57B4A0(a1, (uint64_t)a2, v6, a3);
}

uint64_t sub_57B65C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  strcpy((char *)__p, "route_min_length_miles");
  HIBYTE(__p[2]) = 22;
  double v5 = sub_5C7E8(a2, (uint64_t)__p) * 160934.4;
  if (v5 >= 0.0)
  {
    double v6 = v5;
    if (v5 >= 4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v7 = (uint64_t)(v5 + v5) + 1;
  }
  else
  {
    double v6 = v5;
    if (v5 <= -4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v7 = (uint64_t)(v5 + v5);
    if (v7 >= 1) {
      --v7;
    }
  }
  double v6 = (double)(v7 >> 1);
LABEL_11:
  if (v6 < 9.22337204e18)
  {
    if (v5 >= 0.0)
    {
      if (v5 >= 4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t)(v5 + v5) + 1;
    }
    else
    {
      if (v5 <= -4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v8 = (uint64_t)(v5 + v5);
      if (v8 >= 1) {
        --v8;
      }
    }
    double v5 = (double)(v8 >> 1);
LABEL_22:
    *(void *)(a1 + 8) = (uint64_t)v5;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  operator delete(__p[0]);
LABEL_24:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "segment_no_cell_coverage_min_length_meters");
  double v9 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v9 >= 0.0)
  {
    double v10 = v9;
    if (v9 >= 4.50359963e15) {
      goto LABEL_32;
    }
    uint64_t v11 = (uint64_t)(v9 + v9) + 1;
  }
  else
  {
    double v10 = v9;
    if (v9 <= -4.50359963e15) {
      goto LABEL_32;
    }
    uint64_t v11 = (uint64_t)(v9 + v9);
    if (v11 >= 1) {
      --v11;
    }
  }
  double v10 = (double)(v11 >> 1);
LABEL_32:
  if (v10 < 9.22337204e18)
  {
    if (v9 >= 0.0)
    {
      if (v9 >= 4.50359963e15) {
        goto LABEL_43;
      }
      uint64_t v12 = (uint64_t)(v9 + v9) + 1;
    }
    else
    {
      if (v9 <= -4.50359963e15) {
        goto LABEL_43;
      }
      uint64_t v12 = (uint64_t)(v9 + v9);
      if (v12 >= 1) {
        --v12;
      }
    }
    double v9 = (double)(v12 >> 1);
LABEL_43:
    *(void *)(a1 + 16) = (uint64_t)v9;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_45;
  }
LABEL_44:
  operator delete(__p[0]);
LABEL_45:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "nearby_segments_search_radius_meters");
  double v13 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v13 >= 0.0)
  {
    double v14 = v13;
    if (v13 >= 4.50359963e15) {
      goto LABEL_53;
    }
    uint64_t v15 = (uint64_t)(v13 + v13) + 1;
  }
  else
  {
    double v14 = v13;
    if (v13 <= -4.50359963e15) {
      goto LABEL_53;
    }
    uint64_t v15 = (uint64_t)(v13 + v13);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_53:
  if (v14 < 9.22337204e18)
  {
    if (v13 >= 0.0)
    {
      if (v13 >= 4.50359963e15) {
        goto LABEL_64;
      }
      uint64_t v16 = (uint64_t)(v13 + v13) + 1;
    }
    else
    {
      if (v13 <= -4.50359963e15) {
        goto LABEL_64;
      }
      uint64_t v16 = (uint64_t)(v13 + v13);
      if (v16 >= 1) {
        --v16;
      }
    }
    double v13 = (double)(v16 >> 1);
LABEL_64:
    *(void *)(a1 + 24) = (uint64_t)v13;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  operator delete(__p[0]);
LABEL_66:
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "nearby_segments_max_number");
  int v17 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = v17;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "out_of_cell_coverage_min_ratio");
  double v18 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v18;
  return a1;
}

void sub_57BB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_57BB44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_3750CC(*(void **)a1);
  sub_4071CC(v4, (unsigned int *)(a2 + 2744), *(_DWORD *)(a1 + 64), *(void *)(a1 + 56), (uint64_t)sub_29C8, &v26);
  double v5 = v26;
  double v6 = v27;
  if (v26 == v27)
  {
    double v22 = 0.0;
    double v23 = *(double *)(a1 + 72);
    if (v26) {
      goto LABEL_30;
    }
    return v22 > v23;
  }
  uint64_t v25 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v9 = *((unsigned int *)v5 + 2);
    uint64_t v10 = *((unsigned __int16 *)v5 + 6);
    unint64_t v11 = v9 | (v10 << 32);
    uint64_t v12 = (int *)sub_2D5D58(v4, v11);
    if (*(unsigned char *)(v4 + 7772))
    {
      double v13 = sub_2DB8E0(v4 + 3896, v9, 0);
      double v14 = &v13[-*(int *)v13];
      if (*(unsigned __int16 *)v14 < 5u)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = *((unsigned __int16 *)v14 + 2);
        if (v15) {
          v15 += (uint64_t)&v13[*(unsigned int *)&v13[v15]];
        }
      }
      uint64_t v16 = (int *)(v15 + 4 * v10 + 4 + *(unsigned int *)(v15 + 4 * v10 + 4));
    }
    else
    {
      uint64_t v16 = 0;
    }
    sub_2E5C38(v4, v11, 1);
    int v17 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v18 = *v17;
    if (v18 < 9)
    {
      uint64_t v19 = 0;
      unint64_t v20 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v20 < 0x11u) {
        goto LABEL_5;
      }
LABEL_19:
      uint64_t v21 = v20[8];
      if (v21 && (*(_WORD *)((unsigned char *)v16 + v21) & 8) != 0)
      {
        if (v18 < 9)
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = v17[4];
          if (v8) {
            uint64_t v8 = *(unsigned int *)((char *)v12 + v8);
          }
        }
        v25 += v8;
      }
      goto LABEL_5;
    }
    uint64_t v19 = v17[4];
    if (v17[4]) {
      uint64_t v19 = *(unsigned int *)((char *)v12 + v19);
    }
    unint64_t v20 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v20 >= 0x11u) {
      goto LABEL_19;
    }
LABEL_5:
    v7 += v19;
    v5 += 48;
  }
  while (v5 != v6);
  if (v7) {
    double v22 = (double)v25 / (double)v7;
  }
  else {
    double v22 = 0.0;
  }
  double v5 = v26;
  double v23 = *(double *)(a1 + 72);
  if (v26)
  {
LABEL_30:
    unint64_t v27 = v5;
    operator delete(v5);
  }
  return v22 > v23;
}

void sub_57BD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_57BD78(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_5F3B34(a4);
  *(void *)(a4 + 168) = 0;
  *(unsigned char *)(a4 + 160) = 0;
  *(void *)(a4 + 176) = 0;
  *(void *)(a4 + 184) = 0;
  sub_5F3B34(a4 + 192);
  *(_DWORD *)(a4 + 384) = -1;
  *(_DWORD *)(a4 + 392) = -1;
  *(_DWORD *)(a4 + 395) = -1;
  *(void *)(a4 + 399) = 0;
  *(void *)(a4 + 415) = 0;
  *(void *)(a4 + 407) = 0;
  *(_WORD *)(a4 + 423) = 0;
  *(void *)(a4 + 440) = 0;
  *(void *)(a4 + 448) = 0;
  *(void *)(a4 + 432) = 0;
  *(unsigned char *)(a4 + 456) = 0;
  *(_OWORD *)(a4 + 464) = 0u;
  *(_OWORD *)(a4 + 480) = 0u;
  *(unsigned char *)(a4 + 160) = 1;
  uint64_t v8 = *(void *)(a1 + 16);
  long long __p = operator new(0x38uLL);
  long long v34 = xmmword_20B9AD0;
  strcpy((char *)__p, "Advisory_Route_Planning_Title_No_Service_At_Destination");
  uint64_t v9 = sub_8D7730(v8, (uint64_t)&__p);
  if (*((char *)v9 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v9, v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    uint64_t v32 = v9[2];
    long long __dst = v10;
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  sub_5F3D48((uint64_t)&__p, (uint64_t)&__dst);
  sub_4D90B4(a4, (uint64_t)&__p);
  sub_4D4B58((uint64_t)&__p);
  sub_524D84(43, (uint64_t)&__p);
  sub_4F377C(a4 + 352, (uint64_t)&__p);
  *(void *)(a4 + 392) = v37;
  unint64_t v11 = (void **)(a4 + 400);
  if (*(char *)(a4 + 423) < 0) {
    operator delete(*v11);
  }
  char v12 = 0;
  double v13 = (void **)(a4 + 432);
  *(_OWORD *)unint64_t v11 = v38;
  *(void *)(a4 + 416) = v39;
  HIBYTE(v39) = 0;
  LOBYTE(v38) = 0;
  *(unsigned char *)(a4 + 424) = v40;
  if (*(char *)(a4 + 455) < 0)
  {
    operator delete(*v13);
    char v12 = HIBYTE(v39);
  }
  *(_OWORD *)double v13 = v41;
  *(void *)(a4 + 448) = v42;
  HIBYTE(v42) = 0;
  LOBYTE(v41) = 0;
  *(unsigned char *)(a4 + 456) = v43;
  if (v12 < 0)
  {
    operator delete((void *)v38);
    int v14 = v36;
    if (v36 != 1)
    {
LABEL_12:
      if (v14 || (v35 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      uint64_t v15 = (void *)v34;
      goto LABEL_18;
    }
  }
  else
  {
    int v14 = v36;
    if (v36 != 1) {
      goto LABEL_12;
    }
  }
  uint64_t v15 = (void *)v34;
  if (!(void)v34) {
    goto LABEL_19;
  }
  *((void *)&v34 + 1) = v34;
LABEL_18:
  operator delete(v15);
LABEL_19:
  *(_DWORD *)(a4 + 488) = 5;
  sub_4DC580((uint64_t)&__p);
  uint64_t v16 = *(void *)(a1 + 16);
  unint64_t v26 = operator new(0x30uLL);
  long long v27 = xmmword_20B93B0;
  strcpy((char *)v26, "Advisory_Card_Title_No_Service_At_Destination");
  int v17 = sub_8D7730(v16, (uint64_t)&v26);
  if (*((char *)v17 + 23) < 0)
  {
    sub_4200(&v29, (void *)*v17, v17[1]);
  }
  else
  {
    long long v18 = *(_OWORD *)v17;
    uint64_t v30 = v17[2];
    long long v29 = v18;
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26);
  }
  sub_57C3BC(a1, a3, &v28);
  sub_5F3D48((uint64_t)&v26, (uint64_t)&v29);
  sub_4D90B4((uint64_t)&__p, (uint64_t)&v26);
  sub_4D4B58((uint64_t)&v26);
  sub_5F3D48((uint64_t)&v26, (uint64_t)&v28);
  sub_4D90B4((uint64_t)&v44, (uint64_t)&v26);
  sub_4D4B58((uint64_t)&v26);
  sub_4F39B8((uint64_t)v45, (std::string *)(a4 + 352));
  v45[5] = *(void *)(a4 + 392);
  std::string::operator=(&v46, (const std::string *)(a4 + 400));
  char v47 = *(unsigned char *)(a4 + 424);
  std::string::operator=(&v48, (const std::string *)(a4 + 432));
  char v49 = *(unsigned char *)(a4 + 456);
  int v50 = 1;
  uint64_t v51 = *a2;
  int v52 = *((_DWORD *)a2 + 2);
  unint64_t v19 = *(void *)(a4 + 176);
  if (v19 >= *(void *)(a4 + 184))
  {
    uint64_t v20 = sub_57C8BC((void *)(a4 + 168), (uint64_t)&__p);
  }
  else
  {
    sub_4F6CF8(*(void *)(a4 + 176), (uint64_t)&__p);
    uint64_t v20 = v19 + 800;
    *(void *)(a4 + 176) = v19 + 800;
  }
  *(void *)(a4 + 176) = v20;
  unint64_t v21 = *(void *)(a4 + 472);
  if (v21 >= *(void *)(a4 + 480))
  {
    *(void *)(a4 + 472) = sub_6E6EC((char **)(a4 + 464), (uint64_t)&xmmword_2574940);
    uint64_t v23 = *(void *)(a4 + 176);
    unint64_t v24 = *(void *)(v23 - 16);
    if (v24 >= *(void *)(v23 - 8)) {
      goto LABEL_35;
    }
  }
  else
  {
    if (byte_2574957 < 0)
    {
      sub_4200(*(unsigned char **)(a4 + 472), (void *)xmmword_2574940, *((unint64_t *)&xmmword_2574940 + 1));
    }
    else
    {
      long long v22 = xmmword_2574940;
      *(void *)(v21 + 16) = unk_2574950;
      *(_OWORD *)unint64_t v21 = v22;
    }
    *(void *)(a4 + 472) = v21 + 24;
    *(void *)(a4 + 472) = v21 + 24;
    uint64_t v23 = *(void *)(a4 + 176);
    unint64_t v24 = *(void *)(v23 - 16);
    if (v24 >= *(void *)(v23 - 8))
    {
LABEL_35:
      *(void *)(v23 - 16) = sub_6E6EC((char **)(v23 - 24), (uint64_t)&xmmword_2574940);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }
  if (byte_2574957 < 0)
  {
    sub_4200((unsigned char *)v24, (void *)xmmword_2574940, *((unint64_t *)&xmmword_2574940 + 1));
  }
  else
  {
    long long v25 = xmmword_2574940;
    *(void *)(v24 + 16) = unk_2574950;
    *(_OWORD *)unint64_t v24 = v25;
  }
  *(void *)(v23 - 16) = v24 + 24;
  *(void *)(v23 - 16) = v24 + 24;
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
LABEL_37:
    sub_4F4A98((uint64_t)&__p);
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      return;
    }
LABEL_43:
    operator delete((void *)__dst);
    return;
  }
LABEL_42:
  operator delete((void *)v29);
  sub_4F4A98((uint64_t)&__p);
  if (SHIBYTE(v32) < 0) {
    goto LABEL_43;
  }
}

void sub_57C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v59 - 16) = v58;
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  sub_4F4A98((uint64_t)&a52);
  if (a51 < 0) {
    operator delete(a46);
  }
  sub_4F2FF8(v57);
  _Unwind_Resume(a1);
}

void sub_57C3BC(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5) {
    double v6 = "Advisory_Details_No_Service_At_Destination_With_Name";
  }
  else {
    double v6 = "Advisory_Details_No_Service_At_Destination";
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v5) {
    size_t v8 = 52;
  }
  else {
    size_t v8 = 42;
  }
  __p[1] = (void *)v8;
  uint64_t v26 = (v8 | 7) - 0x7FFFFFFFFFFFFFFFLL;
  __p[0] = operator new((v8 | 7) + 1);
  memcpy(__p[0], v6, v8);
  *((unsigned char *)__p[0] + v8) = 0;
  uint64_t v9 = sub_8D7730(v7, (uint64_t)__p);
  if (*((char *)v9 + 23) < 0)
  {
    sub_4200(a3, (void *)*v9, v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    a3->__r_.__value_.__r.__words[2] = v9[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a2 + 8);
    }
    if (!v12) {
      return;
    }
  }
  else
  {
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a2 + 8);
    }
    if (!v12) {
      return;
    }
  }
  uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v14 = a3;
  }
  else {
    int v14 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (byte_2572D77 >= 0) {
    uint64_t v15 = &xmmword_2572D60;
  }
  else {
    uint64_t v15 = (long long *)xmmword_2572D60;
  }
  if (byte_2572D77 >= 0) {
    int64_t v16 = byte_2572D77;
  }
  else {
    int64_t v16 = *((void *)&xmmword_2572D60 + 1);
  }
  if (v16)
  {
    if ((size & 0x80u) != 0) {
      uint64_t size = a3->__r_.__value_.__l.__size_;
    }
    if (size >= v16)
    {
      int v17 = (char *)v14 + size;
      int v18 = *(char *)v15;
      unint64_t v19 = v14;
      do
      {
        uint64_t v20 = size - v16;
        if (v20 == -1) {
          break;
        }
        unint64_t v21 = (char *)memchr(v19, v18, v20 + 1);
        if (!v21) {
          break;
        }
        long long v22 = v21;
        if (!memcmp(v21, v15, v16))
        {
          if (v22 != v17)
          {
            std::string::size_type v23 = v22 - (char *)v14;
            if (v22 - (char *)v14 != -1) {
              goto LABEL_42;
            }
          }
          return;
        }
        unint64_t v19 = (std::string *)(v22 + 1);
        uint64_t size = v17 - (v22 + 1);
      }
      while (size >= v16);
    }
  }
  else
  {
    std::string::size_type v23 = 0;
LABEL_42:
    if (v11 >= 0) {
      unint64_t v24 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v24 = *(const std::string::value_type **)a2;
    }
    std::string::replace(a3, v23, v16, v24, v12);
  }
}

void sub_57C5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

double sub_57C5F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 32)
    && ((uint64_t v5 = *(unsigned char **)(a1 + 8), v5[1441]) ? (v6 = v5[1453] == 0) : (v6 = 1),
        !v6
     && v5[1407]
     && sub_97CBE8((void *)a2) > *(void *)(a1 + 40)
     && *(_DWORD *)(a2 + 3116) == 1
     && sub_57BB44(a1, a2)))
  {
    sub_57BD78(a1, (uint64_t *)(a2 + 2744), a2 + 2864, a3);
  }
  else
  {
    sub_5F3B34(a3);
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a3 + 160) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    sub_5F3B34(a3 + 192);
    double result = 0.0;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_OWORD *)(a3 + 448) = 0u;
    *(_OWORD *)(a3 + 464) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_DWORD *)(a3 + 384) = -1;
    *(_DWORD *)(a3 + 392) = -1;
    *(_DWORD *)(a3 + 395) = -1;
    *(void *)(a3 + 399) = 0;
    *(void *)(a3 + 407) = 0;
    *(void *)(a3 + 415) = 0;
    *(_WORD *)(a3 + 423) = 0;
    *(void *)(a3 + 432) = 0;
    *(void *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(_OWORD *)(a3 + 480) = 0u;
  }
  return result;
}

void sub_57C714(_Unwind_Exception *a1)
{
  sub_4DC10C(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_57C730(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_4BE498(a1 + 32);
  *(unsigned char *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1199) = 0;
  *(void *)(a1 + 1175) = 0;
  *(_OWORD *)(a1 + 1183) = 0u;
  *(_DWORD *)(a1 + 1200) = 2;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_DWORD *)(a1 + 1256) = 12;
  *(_DWORD *)(a1 + 1264) = 0x7FFFFFFF;
  *(void *)(a1 + 1268) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1352) = xmmword_20E81C0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 1408) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 1400) = v4;
  uint64_t v5 = (unsigned char *)(a1 + 1416);
  if (*((char *)a2 + 39) < 0)
  {
    sub_4200(v5, (void *)a2[2], a2[3]);
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 1432) = a2[4];
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_57C858(_Unwind_Exception *a1)
{
  if (v1[1399] < 0) {
    operator delete(*v8);
  }
  sub_28F14C(v5);
  if (v1[1327] < 0) {
    operator delete(*v7);
  }
  sub_4B1E10(v3);
  sub_1A668(v4);
  sub_4BD7E8(v2);
  if (v1[31] < 0) {
    operator delete(*v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_57C8BC(void *a1, uint64_t a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x51EB851EB851EBLL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x28F5C28F5C28F5) {
    unint64_t v6 = 0x51EB851EB851EBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x51EB851EB851EBLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(800 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long __p = v7;
  int v18 = &v7[800 * v3];
  uint64_t v20 = &v7[800 * v6];
  sub_4F6CF8((uint64_t)v18, a2);
  unint64_t v19 = v18 + 800;
  sub_4F555C((uint64_t)a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t)v18;
  while (1)
  {
    long long v10 = v19;
    if (v19 == (char *)v9) {
      break;
    }
    int v11 = (void **)(v19 - 800);
    v19 -= 800;
    uint64_t v12 = *((void *)v10 - 3);
    if (v12)
    {
      uint64_t v13 = *((void *)v10 - 2);
      int v14 = (void *)*((void *)v10 - 3);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 24;
        }
        while (v13 != v12);
        int v14 = (void *)*((void *)v10 - 3);
      }
      *((void *)v10 - 2) = v12;
      operator delete(v14);
    }
    int v15 = *((_DWORD *)v10 - 8);
    if (v15 == 1)
    {
      sub_4F4A98((uint64_t)(v10 - 800));
    }
    else if (!v15 && *(v10 - 777) < 0)
    {
      operator delete(*v11);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_57CA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F5698((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_57CA90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(*(void *)(nullsub_1(a2) + 8) - 12328);
  sub_46C7A0(v3, &v22);
  uint64_t v4 = 0;
  sub_46C7C4((uint64_t)v3, v19);
  uint64_t v5 = v23;
  uint64_t v7 = v20;
  unint64_t v6 = v21;
  if (!v23) {
    goto LABEL_10;
  }
LABEL_2:
  unint64_t v8 = v24;
  unint64_t v9 = sub_46C760(v5);
  unint64_t v10 = v9;
  if (v7)
  {
    unint64_t v11 = sub_46C760(v7);
    if (v8 >= v10 || v6 >= v11)
    {
      if (v8 < v10 != v6 < v11)
      {
        do
        {
LABEL_16:
          int v14 = *(int **)(sub_46C8EC(v23, v24 - 1) + 8);
          int64_t v16 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v16 < 0x11u) {
            break;
          }
          uint64_t v17 = v16[8];
          if (!v17 || (*(_WORD *)((unsigned char *)v14 + v17) & 8) == 0) {
            break;
          }
          v4 += sub_46CCC8(v23, --v24, v15);
          sub_46C7C4((uint64_t)v3, v19);
          uint64_t v5 = v23;
          uint64_t v7 = v20;
          unint64_t v6 = v21;
          if (v23) {
            goto LABEL_2;
          }
LABEL_10:
          ;
        }
        while (v7 && v6 < sub_46C760(v7));
      }
    }
    else
    {
      uint64_t v13 = sub_46C8EC(v5, v8);
      if (v13 != sub_46C8EC(v7, v6)) {
        goto LABEL_16;
      }
    }
  }
  else if (v8 < v9)
  {
    goto LABEL_16;
  }
  return v4 >= *(void *)(a1 + 48);
}

BOOL sub_57CC10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(*(void *)(nullsub_1(a2) + 8) - 12328);
  sub_470B1C(v3, &v22);
  uint64_t v4 = 0;
  sub_46C7C4((uint64_t)v3, v19);
  uint64_t v5 = v23;
  uint64_t v7 = v20;
  unint64_t v6 = v21;
  if (!v23) {
    goto LABEL_10;
  }
LABEL_2:
  unint64_t v8 = v24;
  unint64_t v9 = sub_470ADC(v5);
  unint64_t v10 = v9;
  if (v7)
  {
    unint64_t v11 = sub_470ADC(v7);
    if (v8 >= v10 || v6 >= v11)
    {
      if (v8 < v10 != v6 < v11)
      {
        do
        {
LABEL_16:
          int v14 = *(int **)(sub_470B40(v23, v24 - 1) + 16);
          int64_t v16 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v16 < 0x11u) {
            break;
          }
          uint64_t v17 = v16[8];
          if (!v17 || (*(_WORD *)((unsigned char *)v14 + v17) & 8) == 0) {
            break;
          }
          v4 += sub_470F2C(v23, --v24, v15);
          sub_46C7C4((uint64_t)v3, v19);
          uint64_t v5 = v23;
          uint64_t v7 = v20;
          unint64_t v6 = v21;
          if (v23) {
            goto LABEL_2;
          }
LABEL_10:
          ;
        }
        while (v7 && v6 < sub_470ADC(v7));
      }
    }
    else
    {
      uint64_t v13 = sub_470B40(v5, v8);
      if (v13 != sub_470B40(v7, v6)) {
        goto LABEL_16;
      }
    }
  }
  else if (v8 < v9)
  {
    goto LABEL_16;
  }
  return v4 >= *(void *)(a1 + 48);
}

double sub_57CD90()
{
  byte_2570C17 = 1;
  word_2570C00 = 65;
  byte_2570C2F = 1;
  word_2570C18 = 65;
  strcpy(&byte_2570C47, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2570C30, "\x1B\\toi=lhp\\"");
  byte_2570C5F = 11;
  qword_2570C60 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_2570C68 = xmmword_20B9250;
  strcpy((char *)qword_2570C60, "\x1B\\toi=x-sampa-internal\\"");
  byte_2570C8F = 13;
  strcpy((char *)&qword_2570C78, "\x1B\\tn=address\\"");
  strcpy(&byte_2570CA7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2570C90, "\x1B\\tn=nav\\"");
  byte_2570CBF = 12;
  byte_2570CD7 = 7;
  strcpy((char *)&dword_2570CC0, "\x1B\\lang=");
  byte_2570CEF = 1;
  word_2570CD8 = 92;
  byte_2570D07 = 4;
  strcpy((char *)&qword_2570CF0, "DEV:");
  byte_2570D1F = 8;
  strcpy((char *)&qword_2570D08, "Continue");
  byte_2570D37 = 11;
  strcpy((char *)&qword_2570D20, "Start_Route");
  byte_2570D4F = 14;
  strcpy((char *)&qword_2570D38, "Continue_Route");
  byte_2570D67 = 12;
  strcpy((char *)&qword_2570D50, "Resume_Route");
  byte_2570D7F = 18;
  strcpy((char *)&xmmword_2570D68, "Start_Route_U_Turn");
  byte_2570D97 = 7;
  strcpy((char *)&dword_2570D80, "_U_Turn");
  qword_2570DA8 = 0x1300000000000000;
  qmemcpy(&unk_2570DB0, "Continue_Route", 14);
  dword_2570DA0 = 1702131055;
  qword_2570D98 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2570DA4 + 3) = 1852994900;
  dword_2570DA4 = 1415533919;
  qword_2570DC0 = 0x1500000000000000;
  strcpy(byte_2570DC8, "Left_Turn");
  unk_2570DBE = 1415533919;
  *(_DWORD *)((char *)&qword_2570DC0 + 1) = 1852994900;
  strcpy(&byte_2570DDF, "\tRight_Turn");
  strcpy(&byte_2570DF7, "\nLeft_Turn_At_End");
  byte_2570E0F = 16;
  byte_2570E27 = 17;
  strcpy((char *)&xmmword_2570E10, "Right_Turn_At_End");
  byte_2570E3F = 15;
  strcpy((char *)&qword_2570E28, "Sharp_Left_Turn");
  byte_2570E57 = 16;
  strcpy((char *)&xmmword_2570E40, "Sharp_Right_Turn");
  byte_2570E6F = 16;
  strcpy((char *)&xmmword_2570E58, "Slight_Left_Turn");
  byte_2570E87 = 17;
  strcpy((char *)&xmmword_2570E70, "Slight_Right_Turn");
  strcpy(&byte_2570E9F, "\tKeep_Right");
  strcpy((char *)&qword_2570E88, "Keep_Left");
  strcpy(&byte_2570EB7, "\nU_Turn");
  byte_2570ECF = 6;
  byte_2570EE7 = 14;
  strcpy((char *)&qword_2570ED0, "Walking_U_Turn");
  byte_2570EFF = 20;
  strcpy((char *)&xmmword_2570EE8, "U_Turn_When_Possible");
  byte_2570F17 = 20;
  strcpy((char *)&xmmword_2570F00, "U_Turn_At_Roundabout");
  byte_2570F2F = 11;
  strcpy((char *)&qword_2570F18, "Enter_Ferry");
  strcpy(&byte_2570F47, "\nChange_Ferry");
  strcpy((char *)&qword_2570F30, "Exit_Ferry");
  strcpy((char *)&xmmword_2570F60, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2570F78, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2570F90, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2570FA8, "End_Of_Navigation");
  strcpy((char *)&xmmword_2570FC0, "End_Of_Navigation");
  strcpy((char *)&qword_2570FD8, "Destination");
  strcpy((char *)&xmmword_2570FF0, "Destination_On_left");
  strcpy((char *)&xmmword_2571008, "Destination_On_Right");
  strcpy((char *)&xmmword_2571050, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2571098, "Next_Stop_On_Right");
  byte_2570F5F = 12;
  byte_2570F77 = 21;
  byte_2570F8F = 20;
  strcpy((char *)&xmmword_25710C8, "Waypoint_Stop_On_Left");
  byte_2570FA7 = 22;
  byte_2570FBF = 17;
  byte_2570FD7 = 17;
  byte_2570FEF = 11;
  byte_2571007 = 19;
  byte_257101F = 20;
  strcpy(&byte_2571037, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2571020, "First_Stop");
  byte_257104F = 18;
  byte_2571067 = 19;
  strcpy(&byte_257107F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25710B0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25710E0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25710F8, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2571068, "Next_Stop");
  byte_2571097 = 17;
  byte_25710AF = 18;
  byte_25710C7 = 13;
  byte_25710DF = 21;
  byte_25710F7 = 22;
  byte_257110F = 11;
  byte_2571127 = 16;
  strcpy((char *)&xmmword_2571110, "Enter_Roundabout");
  qword_2571128 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_2571130 = xmmword_20B91C0;
  strcpy((char *)qword_2571128, "Walking_Enter_Roundabout");
  byte_2571157 = 16;
  strcpy((char *)&xmmword_2571140, "Leave_Roundabout");
  byte_257116F = 21;
  strcpy((char *)&xmmword_2571158, "Roundabout_First_Exit");
  byte_2571187 = 22;
  strcpy((char *)&xmmword_2571170, "Roundabout_Second_Exit");
  byte_257119F = 21;
  strcpy((char *)&xmmword_2571188, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25711A0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25711B6) = 22;
  byte_25711CF = 21;
  strcpy((char *)&xmmword_25711B8, "Roundabout_Fifth_Exit");
  byte_25711E7 = 21;
  strcpy((char *)&xmmword_25711D0, "Roundabout_Sixth_Exit");
  qword_25711E8 = (uint64_t)operator new(0x19uLL);
  xmmword_25711F0 = xmmword_20B9250;
  strcpy((char *)qword_25711E8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2571200, "Roundabout_Eighth_Exit");
  HIBYTE(word_2571216) = 22;
  byte_257122F = 21;
  strcpy((char *)&xmmword_2571218, "Roundabout_Ninth_Exit");
  byte_2571247 = 21;
  strcpy((char *)&xmmword_2571230, "Roundabout_Tenth_Exit");
  qword_2571248 = (uint64_t)operator new(0x20uLL);
  xmmword_2571250 = xmmword_20B91C0;
  strcpy((char *)qword_2571248, "Roundabout_Eleventh_Exit");
  qword_2571260 = (uint64_t)operator new(0x19uLL);
  unk_2571268 = xmmword_20B9250;
  strcpy((char *)qword_2571260, "Roundabout_Twelfth_Exit");
  qword_2571278 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_2571280 = xmmword_20B5EB0;
  strcpy((char *)qword_2571278, "Roundabout_Thirteenth_Exit");
  qword_2571290 = (uint64_t)operator new(0x20uLL);
  unk_2571298 = xmmword_20B5EB0;
  strcpy((char *)qword_2571290, "Roundabout_Fourteenth_Exit");
  qword_25712A8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25712B0 = xmmword_20B8870;
  strcpy((char *)qword_25712A8, "Roundabout_Fifteenth_Exit");
  qword_25712C0 = (uint64_t)operator new(0x20uLL);
  unk_25712C8 = xmmword_20B8870;
  strcpy((char *)qword_25712C0, "Roundabout_Sixteenth_Exit");
  qword_25712D8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25712E0 = xmmword_20B91A0;
  strcpy((char *)qword_25712D8, "Roundabout_Seventeenth_Exit");
  qword_25712F0 = (uint64_t)operator new(0x20uLL);
  unk_25712F8 = xmmword_20B5EB0;
  strcpy((char *)qword_25712F0, "Roundabout_Eighteenth_Exit");
  qword_2571308 = (uint64_t)operator new(0x20uLL);
  xmmword_2571310 = xmmword_20B5EB0;
  strcpy((char *)qword_2571308, "Roundabout_Nineteenth_Exit");
  byte_2571337 = 8;
  strcpy((char *)&qword_2571320, "Off_Ramp");
  byte_257134F = 16;
  strcpy((char *)&xmmword_2571338, "Off_Ramp_On_Left");
  byte_2571367 = 17;
  strcpy((char *)&xmmword_2571350, "Off_Ramp_On_Right");
  byte_257137F = 14;
  strcpy((char *)&qword_2571368, "Change_Highway");
  strcpy((char *)&xmmword_2571380, "Change_Highway_On_Left");
  HIBYTE(word_2571396) = 22;
  qword_2571398 = (uint64_t)operator new(0x19uLL);
  xmmword_25713A0 = xmmword_20B9250;
  strcpy((char *)qword_2571398, "Change_Highway_On_Right");
  byte_25713C7 = 5;
  dword_25713B0 = 1735550285;
  byte_25713B4 = 101;
  byte_25713B5 = 0;
  byte_25713DF = 12;
  strcpy((char *)&qword_25713C8, "Enter_Detour");
  byte_25713F7 = 11;
  strcpy((char *)&qword_25713E0, "Exit_Detour");
  byte_257140F = 18;
  strcpy((char *)&xmmword_25713F8, "Walking_Turnaround");
  qword_2571410 = (uint64_t)operator new(0x19uLL);
  unk_2571418 = xmmword_20B9250;
  strcpy((char *)qword_2571410, "Walking_Turnaround_Sign");
  byte_257143F = 19;
  strcpy((char *)&xmmword_2571428, "Distance_Title_List");
  qword_2571440 = (uint64_t)operator new(0x19uLL);
  unk_2571448 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2571440, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_257146F = 19;
  strcpy((char *)&xmmword_2571458, "Arrival_Charge_List");
  byte_2571487 = 15;
  strcpy((char *)&qword_2571470, "Charge_At_Start");
  strcpy(&byte_257149F, "\tPass_Street");
  strcpy((char *)&qword_2571488, "Pass_Exit");
  byte_25714B7 = 11;
  byte_25714CF = 17;
  strcpy((char *)&xmmword_25714B8, "Pass_Intersection");
  strcpy(&byte_25714E7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25714D0, "Next_Exit");
  byte_25714FF = 15;
  strcpy(&byte_2571517, "\t_PrevUTurn");
  strcpy((char *)&qword_2571500, "_PrevRoad");
  strcpy(&byte_257152F, "\nNext_");
  byte_2571547 = 5;
  byte_257155F = 15;
  strcpy((char *)&qword_2571548, "_At_Next_Street");
  byte_2571577 = 21;
  strcpy((char *)&xmmword_2571560, "_At_Next_Intersection");
  byte_257158F = 14;
  strcpy((char *)&qword_2571578, "Charge_Station");
  byte_25715A7 = 15;
  strcpy((char *)&qword_2571590, "_Charge_Station");
  BYTE1(qword_25715B8) = 0;
  WORD1(qword_25715B8) = 25856;
  HIDWORD(qword_25715B8) = 335544320;
  strcpy((char *)&qword_25715A8, "_Charge_Station_");
  byte_25715D7 = 8;
  strcpy((char *)&qword_25715C0, "_Minimum");
  byte_25715EF = 15;
  strcpy((char *)&qword_25715D8, "ExitShield_Sign");
  byte_2571607 = 8;
  strcpy((char *)&qword_25715F0, "Walking_");
  byte_257161F = 16;
  strcpy((char *)&xmmword_2571608, "Walking_Continue");
  byte_2571637 = 19;
  strcpy((char *)&xmmword_2571620, "Walking_Start_Route");
  qword_2571638 = (uint64_t)operator new(0x20uLL);
  xmmword_2571640 = xmmword_20B5EB0;
  strcpy((char *)qword_2571638, "Walking_Start_Route_U_Turn");
  byte_2571667 = 17;
  strcpy((char *)&xmmword_2571650, "Walking_Left_Turn");
  byte_257167F = 18;
  strcpy((char *)&xmmword_2571668, "Walking_Right_Turn");
  qword_2571680 = (uint64_t)operator new(0x20uLL);
  unk_2571688 = xmmword_20B5EB0;
  strcpy((char *)qword_2571680, "Walking_Turn_At_Roundabout");
  qword_2571698 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25716A0 = xmmword_20B91B0;
  strcpy((char *)qword_2571698, "Walking_U_Turn_When_Possible");
  qword_25716B0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25716B8 = xmmword_20B9390;
  strcpy((char *)qword_25716B0, "Walking_Roundabout_Exit_Continue");
  qword_25716C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25716D0 = xmmword_20B91B0;
  strcpy((char *)qword_25716C8, "Walking_Roundabout_Exit_Left");
  qword_25716E0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25716E8 = xmmword_20B8890;
  strcpy((char *)qword_25716E0, "Walking_Roundabout_Exit_Right");
  qword_25716F8 = (uint64_t)operator new(0x20uLL);
  xmmword_2571700 = xmmword_20B8870;
  strcpy((char *)qword_25716F8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2571710 = (uint64_t)v0;
  unk_2571718 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_257173F = 8;
  strcpy((char *)&qword_2571728, "Walking_");
  qword_2571740 = (uint64_t)operator new(0x19uLL);
  unk_2571748 = v282;
  strcpy((char *)qword_2571740, "Walking_Sharp_Left_Turn");
  qword_2571758 = (uint64_t)operator new(0x20uLL);
  xmmword_2571760 = v281;
  strcpy((char *)qword_2571758, "Walking_Sharp_Right_Turn");
  qword_2571770 = (uint64_t)operator new(0x20uLL);
  unk_2571778 = v281;
  strcpy((char *)qword_2571770, "Walking_Slight_Left_Turn");
  qword_2571788 = (uint64_t)operator new(0x20uLL);
  xmmword_2571790 = v280;
  strcpy((char *)qword_2571788, "Walking_Slight_Right_Turn");
  byte_25717B7 = 4;
  strcpy((char *)&dword_25717A0, "Exit");
  byte_25717CF = 4;
  strcpy((char *)&dword_25717B8, "Road");
  byte_25717E7 = 7;
  strcpy((char *)&dword_25717D0, "Freeway");
  byte_25717FF = 12;
  strcpy((char *)&qword_25717E8, "Intersection");
  byte_2571817 = 5;
  strcpy((char *)&dword_2571800, "Ferry");
  byte_257182F = 11;
  strcpy((char *)&qword_2571818, "ShuttleName");
  byte_2571847 = 5;
  strcpy((char *)&dword_2571830, "Road1");
  strcpy(&byte_257185F, "\tName");
  strcpy((char *)&qword_2571848, "Signpost1");
  byte_2571877 = 4;
  byte_257188F = 7;
  strcpy((char *)&dword_2571878, "Address");
  byte_25718A7 = 7;
  strcpy((char *)&dword_2571890, "Shield1");
  byte_25718BF = 13;
  strcpy((char *)&qword_25718A8, "TowardShield1");
  byte_25718D7 = 6;
  strcpy((char *)&dword_25718C0, "Right_");
  byte_25718EF = 5;
  byte_25718DC = 95;
  dword_25718D8 = 1952867660;
  byte_25718DD = 0;
  strcpy(&byte_2571907, "\tOn_Left_");
  strcpy((char *)&qword_25718F0, "On_Right_");
  byte_257191F = 8;
  byte_2571937 = 12;
  strcpy((char *)&qword_2571920, "ElevatorName");
  byte_257194F = 13;
  strcpy((char *)&qword_2571938, "EscalatorName");
  strcpy(&byte_2571967, "\nBridgeName");
  strcpy((char *)&qword_2571950, "StairsName");
  strcpy(&byte_257197F, "\nTunnelName");
  strcpy(&byte_2571997, "\nParking");
  byte_25719AF = 7;
  strcpy(&byte_25719C7, "\t_Escalator");
  strcpy((char *)&qword_25719B0, "_Elevator");
  strcpy(&byte_25719DF, "\n_ElevatorName");
  byte_25719F7 = 13;
  byte_2571A0F = 14;
  strcpy((char *)&qword_25719F8, "_EscalatorName");
  byte_2571A27 = 5;
  strcpy((char *)&qword_2571A10, "_Road");
  byte_2571A3F = 8;
  strcpy((char *)&qword_2571A28, "_Freeway");
  byte_2571A57 = 13;
  strcpy((char *)&qword_2571A40, "_Intersection");
  byte_2571A6F = 6;
  strcpy((char *)&dword_2571A58, "_Road1");
  byte_2571A87 = 6;
  strcpy((char *)&dword_2571A70, "_Road2");
  strcpy(&byte_2571A9F, "\n_Signpost2");
  strcpy((char *)&qword_2571A88, "_Signpost1");
  strcpy(&byte_2571AB7, "\n_Ferry");
  byte_2571ACF = 6;
  byte_2571AE7 = 12;
  strcpy((char *)&qword_2571AD0, "_Ferry_Ferry");
  byte_2571AFF = 12;
  strcpy((char *)&qword_2571AE8, "_ShuttleName");
  qword_2571B00 = (uint64_t)operator new(0x20uLL);
  unk_2571B08 = v279;
  strcpy((char *)qword_2571B00, "_Railway_Shuttle_ShuttleName");
  byte_2571B2F = 11;
  strcpy((char *)&qword_2571B18, "_ExitNumber");
  byte_2571B47 = 5;
  dword_2571B30 = 1769489759;
  byte_2571B34 = 116;
  byte_2571B35 = 0;
  byte_2571B5F = 7;
  strcpy((char *)&dword_2571B48, "_StayOn");
  byte_2571B77 = 7;
  strcpy((char *)&dword_2571B60, "_Stairs");
  byte_2571B8F = 5;
  strcpy((char *)&dword_2571B78, "_Ramp");
  byte_2571BA7 = 11;
  strcpy((char *)&qword_2571B90, "_StairsName");
  strcpy(&byte_2571BBF, "\t_Down");
  strcpy((char *)&qword_2571BA8, "_RampName");
  byte_2571BD7 = 5;
  byte_2571BEF = 3;
  dword_2571BD8 = 7361887;
  byte_2571C07 = 7;
  strcpy((char *)&dword_2571BF0, "_Bridge");
  byte_2571C1F = 7;
  strcpy((char *)&dword_2571C08, "_Tunnel");
  byte_2571C37 = 11;
  strcpy((char *)&qword_2571C20, "_Roundabout");
  byte_2571C4F = 6;
  strcpy((char *)&dword_2571C38, "_Cross");
  byte_2571C67 = 8;
  strcpy((char *)&qword_2571C50, "_Parking");
  byte_2571C7F = 8;
  strcpy((char *)&qword_2571C68, "_Shield1");
  byte_2571C97 = 14;
  strcpy((char *)&qword_2571C80, "_TowardShield1");
  byte_2571CAF = 8;
  strcpy((char *)&qword_2571C98, "_Shield2");
  byte_2571CC7 = 14;
  strcpy((char *)&qword_2571CB0, "_TowardShield2");
  byte_2571CDF = 11;
  strcpy((char *)&qword_2571CC8, "_Direction1");
  byte_2571CF7 = 11;
  strcpy((char *)&qword_2571CE0, "_Direction2");
  strcpy(&byte_2571D0F, "\n_TowardDirection1");
  strcpy((char *)&qword_2571CF8, "Direction1");
  byte_2571D27 = 17;
  byte_2571D3F = 17;
  strcpy((char *)&xmmword_2571D28, "_TowardDirection2");
  byte_2571D57 = 16;
  strcpy((char *)&xmmword_2571D40, "TowardDirection1");
  byte_2571D6F = 7;
  strcpy((char *)&qword_2571D58, "_Spoken");
  byte_2571D87 = 5;
  strcpy((char *)&qword_2571D70, "_Sign");
  byte_2571D9F = 15;
  strcpy((char *)&qword_2571D88, "_Secondary_Sign");
  byte_2571DB7 = 5;
  byte_2571DA4 = 116;
  dword_2571DA0 = 1936280671;
  byte_2571DA5 = 0;
  byte_2571DCF = 8;
  strcpy((char *)&qword_2571DB8, "_Primary");
  qword_2571DE0 = 0xF00000000000000;
  strcpy(byte_2571DE8, "_Secondary");
  strcpy((char *)&qword_2571DD0, "_Spoken_Primary");
  strcpy(&byte_2571DFF, "\n_Secondary");
  strcpy(&byte_2571E17, "\n_Spoken_Secondar");
  BYTE1(qword_2571E28) = 0;
  WORD1(qword_2571E28) = 0;
  HIDWORD(qword_2571E28) = 285212672;
  byte_2571E47 = 13;
  strcpy((char *)&qword_2571E30, "_To_Secondary");
  BYTE1(qword_2571E58) = 0;
  WORD1(qword_2571E58) = 0;
  HIDWORD(qword_2571E58) = 335544320;
  strcpy((char *)&dword_2571E48, "_Spoken_To_Secon");
  strcpy(&byte_2571E77, "\t_ValidDistance");
  strcpy((char *)&qword_2571E60, "_Distance");
  byte_2571E8F = 14;
  byte_2571EA7 = 6;
  strcpy((char *)&dword_2571E90, "_Short");
  byte_2571EBF = 1;
  word_2571EA8 = 95;
  qword_2571EC0 = (uint64_t)operator new(0x20uLL);
  unk_2571EC8 = v281;
  strcpy((char *)qword_2571EC0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2571ED8 = (uint64_t)v1;
  xmmword_2571EE0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_2571F07 = 12;
  strcpy((char *)&qword_2571EF0, "Chain_Spoken");
  byte_2571F1F = 15;
  strcpy((char *)&qword_2571F08, "Chain_To_Spoken");
  strcpy(&byte_2571F37, "\nThen_Spoken");
  strcpy((char *)&qword_2571F20, "And_Spoken");
  byte_2571F4F = 11;
  byte_2571F67 = 18;
  strcpy((char *)&xmmword_2571F50, "Concatenate_Spoken");
  qword_2571F68 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_2571F70 = xmmword_20B9240;
  strcpy((char *)qword_2571F68, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2571F80 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_2571F88 = xmmword_20B9260;
  strcpy((char *)qword_2571F80, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2571F98 = (uint64_t)operator new(0x40uLL);
  xmmword_2571FA0 = xmmword_20B9A90;
  strcpy((char *)qword_2571F98, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2571FB0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_2571FB8 = xmmword_20B9A40;
  strcpy((char *)qword_2571FB0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2571FC8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_2571FD0 = xmmword_20E12D0;
  strcpy((char *)qword_2571FC8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2571FE0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_2571FE8 = xmmword_20B9960;
  strcpy((char *)qword_2571FE0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2571FF8 = (uint64_t)operator new(0x28uLL);
  xmmword_2572000 = xmmword_20B93A0;
  strcpy((char *)qword_2571FF8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2572010 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_2572018 = xmmword_20E1380;
  strcpy((char *)qword_2572010, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2572028 = (uint64_t)operator new(0x30uLL);
  xmmword_2572030 = xmmword_20B93C0;
  strcpy((char *)qword_2572028, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2572040 = (uint64_t)operator new(0x38uLL);
  unk_2572048 = xmmword_20B9A60;
  strcpy((char *)qword_2572040, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2572058 = (uint64_t)operator new(0x30uLL);
  xmmword_2572060 = xmmword_20E1380;
  strcpy((char *)qword_2572058, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2572070 = (uint64_t)operator new(0x28uLL);
  unk_2572078 = xmmword_20B9960;
  strcpy((char *)qword_2572070, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2572088 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_2572090 = xmmword_20B93D0;
  strcpy((char *)qword_2572088, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25720A0 = (uint64_t)operator new(0x20uLL);
  unk_25720A8 = v277;
  strcpy((char *)qword_25720A0, "Walking_Distance_Chain_Spoken");
  qword_25720B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25720C0 = v277;
  strcpy((char *)qword_25720B8, "Walking_Continue_Chain_Spoken");
  unint64_t v3 = (char *)operator new(0x19uLL);
  qword_25720D0 = (uint64_t)v3;
  unk_25720D8 = v282;
  *(_OWORD *)unint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25720E8 = (uint64_t)operator new(0x28uLL);
  xmmword_25720F0 = v271;
  strcpy((char *)qword_25720E8, "Distance_Cross_The_Street_Spoken");
  byte_2572117 = 22;
  strcpy((char *)&xmmword_2572100, "Walking_Continue_Cross");
  byte_257212F = 14;
  strcpy((char *)&qword_2572118, "Continue_Cross");
  byte_2572147 = 5;
  strcpy((char *)&dword_2572130, "Cross");
  byte_257215F = 19;
  strcpy((char *)&xmmword_2572148, "Cross_Street_Spoken");
  byte_2572177 = 17;
  strcpy((char *)&xmmword_2572160, "Cross_Road_Spoken");
  byte_257218F = 20;
  strcpy((char *)&xmmword_2572178, "Use_Crosswalk_Spoken");
  byte_25721A7 = 15;
  strcpy((char *)&qword_2572190, "Distance_Spoken");
  byte_25721BF = 19;
  strcpy((char *)&xmmword_25721A8, "Distance_And_Spoken");
  byte_25721D7 = 21;
  strcpy((char *)&xmmword_25721C0, "Continue_Stage_Spoken");
  byte_25721EF = 13;
  qmemcpy(&qword_25721D8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_2571DE0);
  if (qword_2571DE0 >= 0) {
    size_t v5 = HIBYTE(qword_2571DE0);
  }
  else {
    size_t v5 = unk_2571DD8;
  }
  unint64_t v6 = v5 + 13;
  byte_25721E5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    qword_25721F8 = v5 + 13;
    unk_2572200 = v9 | 0x8000000000000000;
    qword_25721F0 = (uint64_t)v10;
    *unint64_t v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25721F8) = 0;
    WORD1(qword_25721F8) = 0;
    HIDWORD(qword_25721F8) = 0;
    unk_2572200 = 0;
    byte_2572207 = v5 + 13;
    uint64_t v7 = (char *)&qword_25721F8 + 5;
    strcpy((char *)&qword_25721F0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    unint64_t v11 = &qword_2571DD0;
  }
  else {
    unint64_t v11 = (uint64_t *)qword_2571DD0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_2571A27;
  if (byte_2571A27 >= 0) {
    size_t v13 = byte_2571A27;
  }
  else {
    size_t v13 = qword_2571A18;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *int v18 = qword_25721D8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25721D8 + 5);
    double v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25721D8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25721D8;
    double v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    unint64_t v19 = &qword_2571A10;
  }
  else {
    unint64_t v19 = (uint64_t *)qword_2571A10;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_2571DD0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_2571DD0;
  }
  unint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2572218 = v21->__r_.__value_.__r.__words[2];
  xmmword_2572208 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2572237 = 5;
  strcpy((char *)&dword_2572220, "Merge");
  qword_2572238 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_2572240 = xmmword_20B8E90;
  strcpy((char *)qword_2572238, "Continue_Freeway_Spoken_Primary");
  byte_2572267 = 8;
  strcpy((char *)&qword_2572250, "Starting");
  byte_257227F = 14;
  strcpy((char *)&qword_2572268, "Starting_Route");
  byte_2572297 = 14;
  strcpy((char *)&qword_2572280, "Resuming_Route");
  byte_25722AF = 16;
  strcpy((char *)&xmmword_2572298, "Continuing_Route");
  byte_25722C7 = 9;
  word_25722B8 = 112;
  qword_25722B0 = *(void *)&v266[48];
  strcpy(&byte_25722DF, "\nEnding");
  strcpy((char *)&word_25722D0, "op");
  qword_25722C8 = *(void *)&v270[0];
  byte_25722F7 = 6;
  strcpy((char *)&qword_25722F8, "_Destination");
  byte_257230F = 12;
  byte_2572327 = 15;
  strcpy((char *)&qword_2572310, "_At_Destination");
  std::operator+<char>();
  qword_2572340 = (uint64_t)operator new(0x20uLL);
  unk_2572348 = v281;
  strcpy((char *)qword_2572340, "Spoken_Ending_At_Parking");
  qword_2572358 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_2572360 = xmmword_20B9800;
  strcpy((char *)qword_2572358, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2572370, "Sign_Ending_At_Parking");
  HIBYTE(word_2572386) = 22;
  byte_257239F = 4;
  strcpy((char *)&dword_2572388, "Home");
  byte_25723B7 = 4;
  strcpy((char *)&dword_25723A0, "Work");
  byte_25723CF = 8;
  strcpy((char *)&qword_25723B8, "Business");
  byte_25723E7 = 4;
  strcpy((char *)&dword_25723D0, "Name");
  byte_25723FF = 13;
  strcpy((char *)&qword_25723E8, "Other_Contact");
  byte_2572417 = 11;
  strcpy((char *)&qword_2572400, "ContactHome");
  byte_257242F = 11;
  *(_DWORD *)((char *)&qword_2572418 + 7) = 1802661719;
  byte_2572447 = 7;
  *(int *)((char *)&dword_2572430 + 3) = 1936942450;
  dword_2572430 = 1919181889;
  strcpy((char *)&xmmword_2572448, "Discoverability_Prompt");
  HIBYTE(word_257245E) = 22;
  byte_2572477 = 6;
  dword_2572460 = 1634878303;
  word_2572464 = 26739;
  byte_257248F = 8;
  qword_2572478 = 0x697269535F6F4E5FLL;
  byte_25724A7 = 9;
  strcpy((char *)&qword_2572490, "_CityName");
  byte_25724BF = 8;
  qword_25724A8 = 0x636972656E65475FLL;
  int v23 = byte_2572267;
  if (byte_2572267 >= 0) {
    size_t v24 = byte_2572267;
  }
  else {
    size_t v24 = qword_2572258;
  }
  LODWORD(v272) = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v25 = byte_25715A7;
  }
  else {
    size_t v25 = unk_2571598;
  }
  qword_2572418 = *(void *)"ContactWork";
  byte_2572423 = 0;
  byte_2572437 = 0;
  byte_2572466 = 0;
  byte_2572480 = 0;
  byte_25724B0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    long long v27 = &qword_25724C0;
    qword_25724C8 = 0;
    unk_25724D0 = 0;
    qword_25724C0 = 0;
    byte_25724D7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  long long v27 = (uint64_t *)operator new(v90 + 1);
  qword_25724C8 = v25 + v24;
  unk_25724D0 = v91 | 0x8000000000000000;
  qword_25724C0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      std::string v28 = &qword_2572250;
    }
    else {
      std::string v28 = (uint64_t *)qword_2572250;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  long long v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v30 = &qword_2571590;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_2571590;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_257230F;
  if (byte_257230F >= 0) {
    size_t v32 = byte_257230F;
  }
  else {
    size_t v32 = qword_2572300;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    long long v34 = &qword_25724D8;
    qword_25724E0 = 0;
    unk_25724E8 = 0;
    qword_25724D8 = 0;
    byte_25724EF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  long long v34 = (uint64_t *)operator new(v92 + 1);
  qword_25724E0 = v32 + v24;
  unk_25724E8 = v93 | 0x8000000000000000;
  qword_25724D8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      char v35 = &qword_2572250;
    }
    else {
      char v35 = (uint64_t *)qword_2572250;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  int v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25722F8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25722F8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25724F0 = (uint64_t)operator new(0x19uLL);
  unk_25724F8 = v282;
  strcpy((char *)qword_25724F0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_2572508;
    qword_2572510 = 0;
    unk_2572518 = 0;
    qword_2572508 = 0;
    byte_257251F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_2572510 = v32 + v24;
  unk_2572518 = v95 | 0x8000000000000000;
  qword_2572508 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_2572250;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_2572250;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  char v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v41 = &qword_25722F8;
    }
    else {
      long long v41 = (uint64_t *)qword_25722F8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2572520, "{NewBatteryPercentage}");
  HIBYTE(word_2572536) = 22;
  qword_2572538 = (uint64_t)operator new(0x20uLL);
  xmmword_2572540 = v275;
  strcpy((char *)qword_2572538, "{OriginalBatteryPercentage}");
  byte_2572567 = 19;
  strcpy((char *)&xmmword_2572550, "_Arrival_Percentage");
  int v42 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v43 = byte_25722F7;
  }
  else {
    size_t v43 = qword_25722E8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      std::string v46 = &qword_25722E0;
    }
    else {
      std::string v46 = (uint64_t *)qword_25722E0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  char v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      std::string v48 = &qword_2571590;
    }
    else {
      std::string v48 = (uint64_t *)qword_2571590;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  char v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_2572578 = v49->__r_.__value_.__r.__words[2];
  xmmword_2572568 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v52 = byte_25722F7;
  }
  else {
    size_t v52 = qword_25722E8;
  }
  int v53 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v54 = byte_25715A7;
  }
  else {
    size_t v54 = unk_2571598;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  uint64_t v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      uint64_t v57 = &qword_25722E0;
    }
    else {
      uint64_t v57 = (uint64_t *)qword_25722E0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      uint64_t v59 = &qword_2571590;
    }
    else {
      uint64_t v59 = (uint64_t *)qword_2571590;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25715D7 >= 0) {
    unsigned __int8 v60 = (const std::string::value_type *)&qword_25715C0;
  }
  else {
    unsigned __int8 v60 = (const std::string::value_type *)qword_25715C0;
  }
  if (byte_25715D7 >= 0) {
    std::string::size_type v61 = byte_25715D7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25715C8;
  }
  unsigned __int8 v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_2572590 = v64->__r_.__value_.__r.__words[2];
  xmmword_2572580 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v67 = byte_25722F7;
  }
  else {
    size_t v67 = qword_25722E8;
  }
  int v68 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v69 = byte_25715A7;
  }
  else {
    size_t v69 = unk_2571598;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      unsigned int v72 = &qword_25722E0;
    }
    else {
      unsigned int v72 = (uint64_t *)qword_25722E0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  unsigned int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      unsigned int v74 = &qword_2571590;
    }
    else {
      unsigned int v74 = (uint64_t *)qword_2571590;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  unsigned int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25725A8 = v75->__r_.__value_.__r.__words[2];
  xmmword_2572598 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v78 = byte_25722F7;
  }
  else {
    size_t v78 = qword_25722E8;
  }
  int v79 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v80 = byte_25715A7;
  }
  else {
    size_t v80 = unk_2571598;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25725B8 = 0;
    unk_25725C0 = 0;
    qword_25725B0 = 0;
    long long v82 = &qword_25725B0;
    byte_25725C7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  long long v82 = (uint64_t *)operator new(v102 + 1);
  qword_25725B8 = v80 + v78;
  unk_25725C0 = v103 | 0x8000000000000000;
  qword_25725B0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      long long v83 = &qword_25722E0;
    }
    else {
      long long v83 = (uint64_t *)qword_25722E0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  int v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      BOOL v85 = &qword_2571590;
    }
    else {
      BOOL v85 = (uint64_t *)qword_2571590;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25725C7;
  if (byte_25725C7 >= 0) {
    size_t v87 = byte_25725C7;
  }
  else {
    size_t v87 = qword_25725B8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    unsigned int v89 = (uint64_t *)operator new(v104 + 1);
    qword_25725D0 = v87 + 5;
    unk_25725D8 = v105 | 0x8000000000000000;
    qword_25725C8 = (uint64_t)v89;
  }
  else
  {
    unsigned int v89 = &qword_25725C8;
    qword_25725D0 = 0;
    unk_25725D8 = 0;
    qword_25725C8 = 0;
    byte_25725DF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25725B0;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25725B0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v108 = byte_25722F7;
  }
  else {
    size_t v108 = qword_25722E8;
  }
  int v109 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v110 = byte_25715A7;
  }
  else {
    size_t v110 = unk_2571598;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      v113 = &qword_25722E0;
    }
    else {
      v113 = (uint64_t *)qword_25722E0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_2571590;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_2571590;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25725F0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25725E0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25725F0);
  if (qword_25725F0 >= 0) {
    size_t v119 = HIBYTE(qword_25725F0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25725E0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_2572600 = v119 + 6;
    unk_2572608 = v125 | 0x8000000000000000;
    qword_25725F8 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25725F8;
    qword_2572600 = 0;
    unk_2572608 = 0;
    qword_25725F8 = 0;
    byte_257260F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_25725E0;
  }
  else {
    int v126 = (long long *)xmmword_25725E0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v128 = byte_25722F7;
  }
  else {
    size_t v128 = qword_25722E8;
  }
  int v129 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v130 = byte_25715A7;
  }
  else {
    size_t v130 = unk_2571598;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      v133 = &qword_25722E0;
    }
    else {
      v133 = (uint64_t *)qword_25722E0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      v135 = &qword_2571590;
    }
    else {
      v135 = (uint64_t *)qword_2571590;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_2571D6F >= 0) {
    std::string::size_type v136 = (const std::string::value_type *)&qword_2571D58;
  }
  else {
    std::string::size_type v136 = (const std::string::value_type *)qword_2571D58;
  }
  if (byte_2571D6F >= 0) {
    std::string::size_type v137 = byte_2571D6F;
  }
  else {
    std::string::size_type v137 = unk_2571D60;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2572620 = v138->__r_.__value_.__r.__words[2];
  xmmword_2572610 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25722F7;
  if (byte_25722F7 >= 0) {
    size_t v141 = byte_25722F7;
  }
  else {
    size_t v141 = qword_25722E8;
  }
  int v142 = byte_25715A7;
  if (byte_25715A7 >= 0) {
    size_t v143 = byte_25715A7;
  }
  else {
    size_t v143 = unk_2571598;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_25722E0;
    }
    else {
      v146 = (uint64_t *)qword_25722E0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_2571590;
    }
    else {
      v148 = (uint64_t *)qword_2571590;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25715D7 >= 0) {
    std::string::size_type v149 = (const std::string::value_type *)&qword_25715C0;
  }
  else {
    std::string::size_type v149 = (const std::string::value_type *)qword_25715C0;
  }
  if (byte_25715D7 >= 0) {
    std::string::size_type v150 = byte_25715D7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25715C8;
  }
  long long v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_2571D6F >= 0) {
    std::string::size_type v153 = (const std::string::value_type *)&qword_2571D58;
  }
  else {
    std::string::size_type v153 = (const std::string::value_type *)qword_2571D58;
  }
  if (byte_2571D6F >= 0) {
    std::string::size_type v154 = byte_2571D6F;
  }
  else {
    std::string::size_type v154 = unk_2571D60;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_2572638 = v155->__r_.__value_.__r.__words[2];
  xmmword_2572628 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2572657 = 16;
  strcpy((char *)&xmmword_2572640, "Use_NACS_Adapter");
  byte_257266F = 16;
  strcpy(byte_2572658, "Start_Route_Sign");
  qword_2572670 = (uint64_t)operator new(0x20uLL);
  unk_2572678 = v278;
  strcpy((char *)qword_2572670, "Start_Route_Spoken_Primary");
  int v157 = byte_2570D07;
  if (byte_2570D07 >= 0) {
    size_t v158 = byte_2570D07;
  }
  else {
    size_t v158 = qword_2570CF8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_2572688;
    qword_2572690 = 0;
    unk_2572698 = 0;
    qword_2572688 = 0;
    byte_257269F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_2570CF0;
    }
    else {
      v167 = (uint64_t *)qword_2570CF0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_2572690 = v158 + 27;
  unk_2572698 = v166 | 0x8000000000000000;
  qword_2572688 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25726B7, "\t_Two_Lanes");
  strcpy((char *)&qword_25726A0, "_One_Lane");
  strcpy(&byte_25726CF, "\n_Three_Lanes");
  byte_25726E7 = 12;
  byte_25726FF = 11;
  strcpy((char *)&qword_25726E8, "_Four_Lanes");
  byte_2572717 = 11;
  strcpy((char *)&qword_2572700, "_Five_Lanes");
  strcpy(&byte_257272F, "\n_Seven_Lanes");
  strcpy((char *)&qword_2572718, "_Six_Lanes");
  byte_2572747 = 12;
  byte_257275F = 12;
  strcpy((char *)&qword_2572748, "_Eight_Lanes");
  byte_2572777 = 12;
  strcpy((char *)&qword_2572760, "_Second_Lane");
  byte_257278F = 11;
  strcpy((char *)&qword_2572778, "_Third_Lane");
  byte_25727A7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_2572790, "_Second_Third_Lanes");
  byte_25727BF = 4;
  strcpy((char *)&dword_25727A8, "Left");
  byte_25727D7 = 5;
  byte_25727C4 = 116;
  dword_25727C0 = 1751607634;
  byte_25727C5 = 0;
  byte_25727EF = 6;
  strcpy((char *)&dword_25727D8, "Middle");
  BYTE1(qword_2572800) = 0;
  WORD1(qword_2572800) = 0;
  HIDWORD(qword_2572800) = 0x10000000;
  strcpy((char *)dword_25727F0, "Left_Second_Lane");
  BYTE1(qword_2572818) = 0;
  WORD1(qword_2572818) = 0;
  HIDWORD(qword_2572818) = 285212672;
  strcpy((char *)&dword_2572808, "Right_Second_Lan");
  qword_2572830 = 0xF00000000000000;
  strcpy((char *)&dword_2572820, "Left_Third_Lane");
  qword_2572848 = 0x1000000000000000;
  byte_257283C = 116;
  dword_2572838 = 1751607634;
  dword_2572844 = 1701732684;
  unk_257283D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_2572850 = (uint64_t)v168;
  unk_2572858 = v282;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  int v169 = (char *)operator new(0x20uLL);
  qword_2572868 = (uint64_t)v169;
  xmmword_2572870 = v281;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_2572897 = 5;
  strcpy((char *)&dword_2572880, "_Stay");
  byte_25728AF = 13;
  strcpy((char *)&qword_2572898, "Continue_Sign");
  byte_25728C7 = 8;
  strcpy((char *)&qword_25728B0, "Continue");
  int v170 = byte_2571D87;
  if (byte_2571D87 >= 0) {
    size_t v171 = byte_2571D87;
  }
  else {
    size_t v171 = qword_2571D78;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_25728D0 = v171 + 8;
    qword_25728D8 = v175 | 0x8000000000000000;
    qword_25728C8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25728D8 = 0;
    HIBYTE(qword_25728D8) = v171 + 8;
    qword_25728C8 = 0x65756E69746E6F43;
    qword_25728D0 = 0;
    uint64_t v173 = &qword_25728D0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_2571D70;
  }
  else {
    int v177 = (uint64_t *)qword_2571D70;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_2571DE0);
  if (qword_2571DE0 >= 0) {
    size_t v179 = HIBYTE(qword_2571DE0);
  }
  else {
    size_t v179 = unk_2571DD8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25728E8 = v179 + 8;
    qword_25728F0 = v183 | 0x8000000000000000;
    qword_25728E0 = (uint64_t)v184;
    void *v184 = qword_25728B0;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25728F0 = 0;
    HIBYTE(qword_25728F0) = v179 + 8;
    qword_25728E0 = qword_25728B0;
    qword_25728E8 = 0;
    uint64_t v181 = &qword_25728E8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_2571DD0;
  }
  else {
    v185 = (uint64_t *)qword_2571DD0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25728F8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_2572927 = 13;
  strcpy((char *)&qword_2572910, "{instruction}");
  byte_257293F = 20;
  strcpy(byte_2572928, "{primaryInstruction}");
  strcpy((char *)&xmmword_2572940, "{secondaryInstruction}");
  HIBYTE(word_2572956) = 22;
  qword_2572958 = (uint64_t)operator new(0x20uLL);
  unk_2572960 = v280;
  strcpy((char *)qword_2572958, "{andSecondaryInstruction}");
  qword_2572970 = (uint64_t)operator new(0x20uLL);
  unk_2572978 = v281;
  strcpy((char *)qword_2572970, "{toSecondaryInstruction}");
  byte_257299F = 21;
  strcpy(byte_2572988, "{continueInstruction}");
  qword_25729A0 = (uint64_t)operator new(0x20uLL);
  unk_25729A8 = v278;
  strcpy((char *)qword_25729A0, "{thenSecondaryInstruction}");
  byte_25729CF = 14;
  strcpy((char *)&qword_25729B8, "{instruction1}");
  byte_25729E7 = 14;
  strcpy((char *)&qword_25729D0, "{instruction2}");
  strcpy(&byte_25729FF, "\n{nextDistance}");
  strcpy((char *)&qword_25729E8, "{distance}");
  byte_2572A17 = 14;
  byte_2572A2F = 16;
  strcpy(byte_2572A18, "{valid_distance}");
  strcpy(&byte_2572A47, "\n{valid_distance}");
  strcpy((char *)&qword_2572A30, "{distance}");
  byte_2572A5F = 16;
  byte_2572A77 = 15;
  strcpy((char *)&qword_2572A60, "{ClimbDistance}");
  byte_2572A8F = 17;
  strcpy(byte_2572A78, "{DescentDistance}");
  byte_2572AA7 = 13;
  strcpy((char *)&qword_2572A90, "{nonBrkSpace}");
  byte_2572ABF = 9;
  strcpy((char *)&qword_2572AA8, "{newLine}");
  byte_2572AD7 = 6;
  word_2572AC4 = -24382;
  dword_2572AC0 = -1211981630;
  byte_2572AC6 = 0;
  byte_2572AEF = 2;
  word_2572AD8 = -24382;
  byte_2572ADA = 0;
  byte_2572B07 = 1;
  word_2572AF0 = 10;
  byte_2572B1F = 1;
  word_2572B08 = 32;
  byte_2572B37 = 2;
  strcpy((char *)&word_2572B20, "\n\n");
  strcpy(&byte_2572B4F, "\t{TowardShield1}");
  strcpy((char *)&qword_2572B38, "{Shield1}");
  byte_2572B67 = 15;
  strcpy(&byte_2572B7F, "\t{TowardShield2}");
  strcpy((char *)&qword_2572B68, "{Shield2}");
  byte_2572B97 = 15;
  byte_2572BAF = 12;
  strcpy((char *)&qword_2572B98, "{Direction1}");
  byte_2572BC7 = 12;
  strcpy((char *)&qword_2572BB0, "{Direction2}");
  byte_2572BDF = 18;
  strcpy((char *)&xmmword_2572BC8, "{TowardDirection1}");
  byte_2572BF7 = 18;
  strcpy((char *)&xmmword_2572BE0, "{TowardDirection2}");
  byte_2572C0F = 7;
  strcpy((char *)&dword_2572BF8, "{Icon1}");
  byte_2572C27 = 7;
  strcpy((char *)&dword_2572C10, "{Icon2}");
  byte_2572C28[23] = 14;
  strcpy(byte_2572C28, "{Intersection}");
  byte_2572C57 = 6;
  strcpy((char *)&xmmword_2572C40, "{Road}");
  byte_2572C6F = 7;
  strcpy((char *)&dword_2572C58, "{Road1}");
  byte_2572C87 = 7;
  strcpy((char *)&xmmword_2572C70, "{Road2}");
  strcpy(&byte_2572C9F, "\n{Freeway}");
  strcpy((char *)&qword_2572C88, "{Elevator}");
  strcpy(&byte_2572CB7, "\t{Ferry}");
  byte_2572CCF = 7;
  byte_2572CE7 = 13;
  strcpy((char *)&xmmword_2572CD0, "{ShuttleName}");
  byte_2572CFF = 11;
  strcpy((char *)&xmmword_2572CE8, "{Signpost1}");
  byte_2572D17 = 11;
  strcpy((char *)&xmmword_2572D00, "{Signpost2}");
  byte_2572D2F = 12;
  strcpy((char *)&xmmword_2572D18, "{ExitNumber}");
  strcpy(&byte_2572D47, "\t{Name}");
  strcpy((char *)&xmmword_2572D30, "{Address}");
  byte_2572D5F = 6;
  byte_2572D77 = 11;
  strcpy((char *)&xmmword_2572D60, "{PlaceName}");
  byte_2572D8F = 14;
  strcpy((char *)&xmmword_2572D78, "{ElevatorName}");
  byte_2572DA7 = 15;
  strcpy((char *)&xmmword_2572D90, "{EscalatorName}");
  byte_2572DBF = 12;
  strcpy((char *)&xmmword_2572DA8, "{StairsName}");
  strcpy(&byte_2572DD7, "\n{BridgeName}");
  strcpy((char *)&xmmword_2572DC0, "{RampName}");
  byte_2572DEF = 12;
  byte_2572E07 = 12;
  strcpy((char *)&xmmword_2572DF0, "{TunnelName}");
  byte_2572E1F = 13;
  strcpy((char *)&xmmword_2572E08, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2572C28;
  *(_OWORD *)v285 = xmmword_2572C40;
  *(void *)&v285[16] = unk_2572C50;
  *(_OWORD *)uint64_t v286 = *(_OWORD *)&dword_2572C58;
  *(void *)v287 = unk_2572C68;
  *(_OWORD *)&v287[8] = xmmword_2572C70;
  uint64_t v288 = unk_2572C80;
  *(_OWORD *)long long v289 = *(_OWORD *)&qword_2572C88;
  uint64_t v290 = unk_2572C98;
  uint64_t v292 = unk_2572CB0;
  long long v291 = xmmword_2572CA0;
  long long v293 = *(_OWORD *)&dword_2572CB8;
  uint64_t v294 = unk_2572CC8;
  uint64_t v296 = unk_2572CE0;
  long long __p = xmmword_2572CD0;
  long long v297 = xmmword_2572CE8;
  uint64_t v298 = unk_2572CF8;
  uint64_t v300 = unk_2572D10;
  long long v299 = xmmword_2572D00;
  long long v301 = xmmword_2572D18;
  long long v303 = xmmword_2572D30;
  uint64_t v302 = unk_2572D28;
  uint64_t v304 = unk_2572D40;
  long long v305 = xmmword_2572D48;
  long long v307 = xmmword_2572D60;
  uint64_t v306 = unk_2572D58;
  uint64_t v308 = unk_2572D70;
  long long v309 = xmmword_2572D78;
  long long v311 = xmmword_2572D90;
  uint64_t v310 = unk_2572D88;
  uint64_t v312 = unk_2572DA0;
  long long v313 = xmmword_2572DA8;
  long long v315 = xmmword_2572DC0;
  uint64_t v314 = unk_2572DB8;
  uint64_t v316 = unk_2572DD0;
  long long v317 = xmmword_2572DD8;
  long long v319 = xmmword_2572DF0;
  uint64_t v318 = unk_2572DE8;
  uint64_t v320 = unk_2572E00;
  uint64_t v322 = unk_2572E18;
  long long v321 = xmmword_2572E08;
  sub_4BDC0C(qword_2572E20, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2572E38 = (uint64_t)operator new(0x19uLL);
  unk_2572E40 = v282;
  strcpy((char *)qword_2572E38, "From_User_Location_List");
  byte_2572E67 = 20;
  strcpy(byte_2572E50, "Origin_Waypoint_List");
  qword_2572E68 = (uint64_t)operator new(0x20uLL);
  unk_2572E70 = v278;
  strcpy((char *)qword_2572E68, "Intermediate_Waypoint_List");
  unk_2572E80 = operator new(0x20uLL);
  unk_2572E88 = v280;
  strcpy(unk_2572E80, "Destination_Waypoint_List");
  byte_2572EAF = 15;
  strcpy(byte_2572E98, "{toDestination}");
  byte_2572EC7 = 13;
  strcpy((char *)&xmmword_2572EB0, "{Destination}");
  byte_2572EDF = 7;
  strcpy(byte_2572EC8, "To_Home");
  byte_2572EF7 = 14;
  strcpy(byte_2572EE0, "To_ContactHome");
  byte_2572F0F = 7;
  strcpy(byte_2572EF8, "To_Work");
  byte_2572F27 = 14;
  strcpy(byte_2572F10, "To_ContactWork");
  strcpy(&byte_2572F3F, "\nTo_Business");
  strcpy(byte_2572F28, "To_Address");
  byte_2572F57 = 11;
  byte_2572F6F = 16;
  strcpy(byte_2572F58, "To_Other_Contact");
  strcpy(&byte_2572F87, "\tTo_ContactSchool");
  strcpy(byte_2572F70, "To_School");
  byte_2572F9F = 16;
  byte_2572FB7 = 17;
  strcpy(byte_2572FA0, "To_PersonLocation");
  qword_2572FB8 = (uint64_t)operator new(0x20uLL);
  unk_2572FC0 = v279;
  strcpy((char *)qword_2572FB8, "To_ContactCustomLabelAddress");
  byte_2572FE7 = 7;
  strcpy((char *)&dword_2572FD0, "At_Home");
  byte_2572FFF = 14;
  strcpy((char *)&qword_2572FE8, "At_ContactHome");
  byte_2573017 = 7;
  strcpy((char *)&dword_2573000, "At_Work");
  byte_257302F = 14;
  strcpy((char *)&qword_2573018, "At_ContactWork");
  strcpy(&byte_2573047, "\nAt_Business");
  strcpy((char *)&qword_2573030, "At_Address");
  byte_257305F = 11;
  byte_2573077 = 16;
  strcpy(byte_2573060, "At_Other_Contact");
  byte_257308F = 4;
  strcpy((char *)&dword_2573078, "Home");
  byte_25730A7 = 11;
  strcpy((char *)&qword_2573090 + 7, "Home");
  qword_2573090 = *(void *)&v266[16];
  byte_25730BF = 4;
  strcpy((char *)&dword_25730A8, "Work");
  byte_25730D7 = 11;
  strcpy((char *)&qword_25730C0 + 7, "Work");
  qword_25730C0 = *(void *)v266;
  byte_25730EF = 7;
  strcpy((char *)&dword_25730D8, "Address");
  byte_2573107 = 8;
  strcpy((char *)&qword_25730F0, "Business");
  byte_257311F = 13;
  qword_2573108 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_2573108 + 5) = *(void *)&v266[32];
  byte_2573115 = 0;
  byte_2573137 = 6;
  strcpy((char *)&dword_2573120, "School");
  byte_257314F = 13;
  strcpy((char *)&qword_2573138, "ContactSchool");
  byte_2573167 = 14;
  strcpy((char *)&qword_2573150, "PersonLocation");
  qword_2573168 = (uint64_t)operator new(0x20uLL);
  xmmword_2573170 = v280;
  strcpy((char *)qword_2573168, "ContactCustomLabelAddress");
  if (byte_2572EC7 < 0)
  {
    sub_4200(&xmmword_2573180, (void *)xmmword_2572EB0, *((unint64_t *)&xmmword_2572EB0 + 1));
  }
  else
  {
    xmmword_2573180 = xmmword_2572EB0;
    qword_2573190 = unk_2572EC0;
  }
  byte_25731AF = 16;
  strcpy((char *)&xmmword_2573198, "{PrevExitNumber}");
  byte_25731C7 = 10;
  strcpy((char *)&qword_25731B0, "{PrevRoad}");
  qword_25731C8 = (uint64_t)operator new(0x20uLL);
  unk_25731D0 = v281;
  strcpy((char *)qword_25731C8, "{RouteTotalExpectedTime}");
  byte_25731F7 = 18;
  strcpy(byte_25731E0, "{ChargePercentage}");
  qword_25731F8 = (uint64_t)operator new(0x20uLL);
  unk_2573200 = v275;
  strcpy((char *)qword_25731F8, "{RemainingChargePercentage}");
  byte_2573227 = 16;
  strcpy(byte_2573210, "{ChargeDuration}");
  byte_257323F = 15;
  strcpy((char *)&qword_2573228, "{ConnectorType}");
  byte_2573257 = 19;
  strcpy(byte_2573240, "{ChargeStationName}");
  byte_257326F = 7;
  strcpy((char *)&dword_2573258, "{Power}");
  byte_2573287 = 13;
  strcpy((char *)&qword_2573270, "{VehicleName}");
  byte_257329F = 18;
  strcpy((char *)&xmmword_2573288, "{AreaIncidentName}");
  byte_25732B7 = 14;
  strcpy((char *)&qword_25732A0, "{AreaIncident}");
  byte_25732CF = 16;
  strcpy((char *)&xmmword_25732B8, "{AffectedRegion}");
  byte_25732E7 = 21;
  strcpy(byte_25732D0, "{AreaIncidentWeblink}");
  byte_25732FF = 20;
  strcpy((char *)&xmmword_25732E8, "{AreaIncidentAgency}");
  byte_2573317 = 11;
  strcpy((char *)&qword_2573300, "{IssueTime}");
  byte_257332F = 12;
  strcpy((char *)&qword_2573318, "{UpdateTime}");
  byte_2573347 = 11;
  strcpy((char *)&qword_2573330, "{IssueDate}");
  byte_257335F = 12;
  strcpy((char *)&qword_2573348, "{UpdateDate}");
  qword_2573360 = (uint64_t)operator new(0x20uLL);
  unk_2573368 = v281;
  strcpy((char *)qword_2573360, "{AreaIncidentDataSource}");
  byte_257338F = 13;
  strcpy((char *)&qword_2573378, "{AreaHectare}");
  byte_25733A7 = 10;
  strcpy((char *)&qword_2573390, "{AreaAcre}");
  qword_25733A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25733B0 = v277;
  strcpy((char *)qword_25733A8, "{WildfirePercentageContained}");
  qword_25733C0 = (uint64_t)operator new(0x28uLL);
  unk_25733C8 = v270[2];
  strcpy((char *)qword_25733C0, "{WildfireExpectedContainmentDate}");
  qword_25733D8 = (uint64_t)operator new(0x20uLL);
  unk_25733E0 = v279;
  strcpy((char *)qword_25733D8, "{ServerRecommendedRouteName}");
  qword_25733F0 = (uint64_t)operator new(0x20uLL);
  unk_25733F8 = v279;
  strcpy((char *)qword_25733F0, "{ServerNonRecommendedRoute1}");
  qword_2573408 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573410 = v279;
  strcpy((char *)qword_2573408, "{ServerNonRecommendedRoute2}");
  byte_2573437 = 12;
  strcpy((char *)&qword_2573420, "{ClientDest}");
  byte_257344F = 6;
  strcpy((char *)&dword_2573438, "{Name}");
  qword_2573450 = (uint64_t)operator new(0x20uLL);
  unk_2573458 = v270[1];
  strcpy((char *)qword_2573450, "ProactiveAlert_FasterRouteTitle");
  qword_2573468 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573470 = v278;
  strcpy((char *)qword_2573468, "ProactiveAlert_RoadClosure");
  qword_2573480 = (uint64_t)operator new(0x30uLL);
  unk_2573488 = v273;
  strcpy((char *)qword_2573480, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_2573498 = (uint64_t)operator new(0x28uLL);
  unk_25734A0 = v276;
  strcpy((char *)qword_2573498, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25734B0 = (uint64_t)operator new(0x28uLL);
  unk_25734B8 = v276;
  strcpy((char *)qword_25734B0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25734C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25734D0 = v276;
  strcpy((char *)qword_25734C8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25734E0 = (uint64_t)operator new(0x30uLL);
  unk_25734E8 = xmmword_20B93B0;
  strcpy((char *)qword_25734E0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_257350F = 17;
  strcpy(byte_25734F8, "Proactive_Driving");
  strcpy(&byte_2573527, "\n{RouteName}");
  strcpy((char *)&qword_2573510, "_RouteName");
  byte_257353F = 11;
  qword_2573540 = (uint64_t)operator new(0x28uLL);
  unk_2573548 = v270[2];
  strcpy((char *)qword_2573540, "Pass_Traffic_Light_Spoken_Primary");
  qword_2573558 = (uint64_t)operator new(0x20uLL);
  unk_2573560 = v277;
  strcpy((char *)qword_2573558, "Pass_Stop_Sign_Spoken_Primary");
  unk_2573570 = operator new(0x20uLL);
  unk_2573578 = v270[0];
  strcpy(unk_2573570, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_257359F, "\nBannerBody");
  strcpy(byte_2573588, "BannerHead");
  strcpy(&byte_25735B7, "\nBannerDescription");
  byte_25735CF = 17;
  strcpy(&byte_25735E7, "\n_Incident");
  strcpy((char *)&qword_25735D0, "VoiceAlert");
  strcpy(&byte_25735FF, "\t_Area_Incident");
  byte_2573617 = 14;
  byte_257362F = 15;
  strcpy((char *)&qword_2573618, "_Area_Incidents");
  strcpy(&byte_2573647, "\t_Crash");
  strcpy((char *)&qword_2573630, "_Accident");
  byte_257365F = 6;
  byte_2573677 = 16;
  strcpy((char *)&xmmword_2573660, "_Congestion_Zone");
  strcpy(&byte_257368F, "\n_Environmental_Zone");
  strcpy((char *)&qword_2573678, "_Toll_Zone");
  byte_25736A7 = 19;
  BYTE1(qword_25736B8) = 116;
  WORD1(qword_25736B8) = 0;
  HIDWORD(qword_25736B8) = 301989888;
  strcpy(byte_25736C0, "_Construction");
  strcpy((char *)&qword_25736A8, "_Incident_Accide");
  byte_25736D7 = 13;
  byte_25736EF = 7;
  strcpy((char *)&dword_25736D8, "_Hazard");
  byte_2573707 = 12;
  strcpy((char *)&qword_25736F0, "_LaneClosure");
  byte_257371F = 12;
  strcpy((char *)&qword_2573708, "_LaneTrailer");
  qmemcpy(&byte_2573737, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2573720, "_Shoulder");
  qword_2573748 = 0x1500007200000000;
  *(void *)algn_2573744 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2573750, "_Causing_Traffic_Delay");
  HIBYTE(word_2573766) = 22;
  byte_257377F = 6;
  strcpy((char *)&dword_2573768, "_Timed");
  byte_2573797 = 12;
  strcpy((char *)&qword_2573780, "_HasDistance");
  byte_25737AF = 8;
  strcpy((char *)&qword_2573798, "_Closure");
  strcpy(&byte_25737C7, "\n_BadRoad");
  strcpy((char *)&qword_25737B0, "_NoReroute");
  byte_25737DF = 8;
  byte_25737F7 = 12;
  strcpy((char *)&qword_25737E0, "_TollTrailer");
  byte_257380F = 12;
  strcpy((char *)&qword_25737F8, "_BestTrailer");
  byte_2573827 = 8;
  strcpy((char *)&qword_2573810, "_Trailer");
  byte_257383F = 18;
  strcpy((char *)&xmmword_2573828, "_Secondary_Trailer");
  byte_2573857 = 8;
  strcpy((char *)&qword_2573840, "_Savings");
  byte_257386F = 8;
  strcpy((char *)&qword_2573858, "_AltRoad");
  byte_2573887 = 6;
  strcpy((char *)&dword_2573870, "_Named");
  byte_257389F = 6;
  strcpy((char *)&dword_2573888, "_NAMED");
  byte_25738B7 = 22;
  strcpy((char *)&xmmword_25738A0, "_Named_Suggested_Route");
  qword_25738D0 = 0x1000000000000000;
  xmmword_25738C0 = xmmword_20E81D0;
  byte_25738EF = 11;
  strcpy((char *)&qword_25738D8, "_Speed_Trap");
  byte_2573907 = 4;
  strcpy((char *)&dword_25738F0, "_UGI");
  byte_257391F = 12;
  strcpy((char *)&qword_2573908, "_Safer_Route");
  qword_2573920 = (uint64_t)operator new(0x20uLL);
  unk_2573928 = v270[1];
  strcpy((char *)qword_2573920, "BlockedRouteByBlockingIncident_");
  qword_2573938 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_2573940 = xmmword_20B9280;
  strcpy((char *)qword_2573938, "BlockedRouteByManeuverRestriction_");
  qword_2573950 = (uint64_t)operator new(0x20uLL);
  unk_2573958 = v270[0];
  strcpy((char *)qword_2573950, "BlockedRouteByTimeRestriction_");
  qword_2573968 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2573970 = xmmword_20B8FD0;
  strcpy((char *)qword_2573968, "SuggestRouteToAvoidBlockingIncident_");
  qword_2573980 = (uint64_t)operator new(0x30uLL);
  unk_2573988 = xmmword_20B9380;
  strcpy((char *)qword_2573980, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2573998 = (uint64_t)operator new(0x30uLL);
  unk_25739A0 = xmmword_20B93E0;
  strcpy((char *)qword_2573998, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25739C7 = 1;
  word_25739B0 = 95;
  strcpy((char *)&xmmword_25739C8, "IncidentsCausingDelay_");
  HIBYTE(word_25739DE) = 22;
  qword_25739E0 = (uint64_t)operator new(0x19uLL);
  unk_25739E8 = v282;
  strcpy((char *)qword_25739E0, "NonVotableRoadIncident_");
  byte_2573A0F = 20;
  strcpy(byte_25739F8, "VotableRoadIncident_");
  byte_2573A27 = 13;
  strcpy((char *)&qword_2573A10, "AreaIncident_");
  byte_2573A3F = 15;
  strcpy((char *)&qword_2573A28, "CongestionZone_");
  qword_2573A40 = (uint64_t)operator new(0x20uLL);
  unk_2573A48 = v281;
  strcpy((char *)qword_2573A40, "EVModifiedChargingStops_");
  byte_2573A6F = 13;
  strcpy((char *)&qword_2573A58, "EVDisconnect_");
  byte_2573A87 = 12;
  strcpy((char *)&qword_2573A70, "EVReconnect_");
  qword_2573A88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573A90 = v279;
  strcpy((char *)qword_2573A88, "EVOfflineToOnlineTransition_");
  byte_2573AB7 = 13;
  strcpy((char *)&qword_2573AA0, "EVOfflineSAR_");
  byte_2573ACF = 21;
  strcpy((char *)&xmmword_2573AB8, "EVTowingNotSupported_");
  byte_2573AE7 = 18;
  strcpy(algn_2573AD0, "EVInfeasibleRoute_");
  qword_2573AE8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_2573AF0 = xmmword_20B8DF0;
  strcpy((char *)qword_2573AE8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2573B00 = (uint64_t)operator new(0x40uLL);
  unk_2573B08 = xmmword_20B98C0;
  strcpy((char *)qword_2573B00, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2573B18 = (uint64_t)operator new(0x30uLL);
  unk_2573B20 = v274;
  strcpy((char *)qword_2573B18, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_2573B30 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_2573B38 = xmmword_20B9A80;
  strcpy((char *)qword_2573B30, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2573B48 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2573B50 = v273;
  strcpy((char *)qword_2573B48, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2573B60 = (uint64_t)v186;
  unk_2573B68 = v274;
  _OWORD *v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2573B78 = (uint64_t)operator new(0x28uLL);
  unk_2573B80 = v272;
  strcpy((char *)qword_2573B78, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_2573B90 = (uint64_t)v187;
  unk_2573B98 = *(_OWORD *)&v266[48];
  *uint64_t v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_2573BA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2573BB0 = v276;
  strcpy((char *)qword_2573BA8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2573BC0 = (uint64_t)operator new(0x28uLL);
  unk_2573BC8 = v269;
  strcpy((char *)qword_2573BC0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2573BD8 = (uint64_t)operator new(0x20uLL);
  unk_2573BE0 = v281;
  strcpy((char *)qword_2573BD8, "OfflineToOnlineNewRoute_");
  qword_2573BF0 = (uint64_t)operator new(0x40uLL);
  unk_2573BF8 = xmmword_20B98C0;
  strcpy((char *)qword_2573BF0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_2573C1F = 20;
  strcpy(byte_2573C08, "LPR_OFFLINE_REROUTE_");
  byte_2573C37 = 16;
  strcpy((char *)&xmmword_2573C20, "LPR_OFFLINE_SAR_");
  byte_2573C4F = 20;
  strcpy(byte_2573C38, "LPR_OFFLINE_REROUTE_");
  byte_2573C67 = 16;
  strcpy((char *)&xmmword_2573C50, "LPR_OFFLINE_SAR_");
  byte_2573C7F = 19;
  strcpy(byte_2573C68, "SuggestFasterRoute_");
  qword_2573C80 = (char *)operator new(0x20uLL);
  xmmword_2573C88 = v280;
  strcpy(qword_2573C80, "AreaIncidentSaferReroute_");
  byte_2573CAF = 12;
  strcpy((char *)&qword_2573C98, "_Remove_Stop");
  byte_2573CC7 = 13;
  strcpy((char *)&qword_2573CB0, "_Remove_Stops");
  strcpy(&byte_2573CDF, "\t_Add_Stops");
  strcpy((char *)&qword_2573CC8, "_Add_Stop");
  strcpy(&byte_2573CF7, "\n_Change_Route");
  byte_2573D0F = 13;
  byte_2573D27 = 15;
  strcpy((char *)&qword_2573D10, "_Different_Stop");
  byte_2573D3F = 16;
  strcpy((char *)&xmmword_2573D28, "_Different_Stops");
  byte_2573D57 = 15;
  strcpy((char *)&qword_2573D40, "_EV_Remove_Stop");
  byte_2573D6F = 16;
  strcpy((char *)&xmmword_2573D58, "_EV_Remove_Stops");
  byte_2573D87 = 12;
  strcpy((char *)&qword_2573D70, "_EV_Add_Stop");
  byte_2573D9F = 13;
  strcpy((char *)&qword_2573D88, "_EV_Add_Stops");
  byte_2573DB7 = 15;
  strcpy((char *)&qword_2573DA0, "_EV_Low_Battery");
  byte_2573DCF = 14;
  strcpy((char *)&qword_2573DB8, "_EV_Infeasible");
  byte_2573DE7 = 15;
  strcpy((char *)&qword_2573DD0, "_EV_Last_Chance");
  qword_2573DE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573DF0 = v281;
  strcpy((char *)qword_2573DE8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_2573CE8;
  qword_2573E00 = (uint64_t)operator new(0x20uLL);
  unk_2573E08 = v280;
  strcpy((char *)qword_2573E00, "_EV_Low_Battery_Add_Stops");
  qword_2573E18 = (uint64_t)operator new(0x19uLL);
  unk_2573E20 = v282;
  strcpy((char *)qword_2573E18, "_EV_Infeasible_Add_Stop");
  int v189 = byte_2573CF7;
  if (byte_2573CF7 >= 0) {
    size_t v190 = byte_2573CF7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_2573E38 = v190 + 14;
    unk_2573E40 = v195 | 0x8000000000000000;
    qword_2573E30 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2573E38) = 0;
    WORD1(qword_2573E38) = 0;
    HIDWORD(qword_2573E38) = 0;
    unk_2573E40 = 0;
    byte_2573E47 = v190 + 14;
    strcpy((char *)&qword_2573E30, "_EV_Infe");
    char v192 = (char *)&qword_2573E38 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_2573CE0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_2573E48 = (uint64_t)v198;
  *(_OWORD *)algn_2573E50 = v281;
  *(void *)unint64_t v198 = qword_2573DD0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_2573DD0 + 7);
  *(void *)(v198 + 15) = qword_2573CC8;
  v198[23] = word_2573CD0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_2573E68 = v190 + 15;
    unk_2573E70 = v202 | 0x8000000000000000;
    qword_2573E60 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_2573E60;
    qword_2573E68 = 0;
    unk_2573E70 = 0;
    qword_2573E60 = 0;
    byte_2573E77 = v190 + 15;
  }
  *uint64_t v200 = qword_2573DD0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_2573DD0 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_2573CE0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_2573CE0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_2573E8F = 17;
  strcpy((char *)&xmmword_2573E78, "_EV_Forced_Detour");
  qword_2573E90 = (uint64_t)operator new(0x20uLL);
  unk_2573E98 = v280;
  strcpy((char *)qword_2573E90, "_EV_Higher_Arrival_Charge");
  qword_2573EA8 = (uint64_t)operator new(0x28uLL);
  unk_2573EB0 = xmmword_20B8FD0;
  strcpy((char *)qword_2573EA8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2573ED7 = 16;
  strcpy(byte_2573EC0, "_EV_Out_Of_Range");
  qword_2573ED8 = (uint64_t)operator new(0x20uLL);
  unk_2573EE0 = v275;
  strcpy((char *)qword_2573ED8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2573EF0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2573F06) = 22;
  qword_2573F08 = (uint64_t)operator new(0x19uLL);
  unk_2573F10 = v282;
  strcpy((char *)qword_2573F08, "_EV_Forced_Modify_Stops");
  byte_2573F37 = 19;
  strcpy(byte_2573F20, "_EV_Forced_Add_Stop");
  byte_2573F4F = 20;
  strcpy((char *)&xmmword_2573F38, "_EV_Forced_Add_Stops");
  byte_2573F67 = 21;
  strcpy(byte_2573F50, "_EV_Battery_Info_Lost");
  qword_2573F68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573F70 = v280;
  strcpy((char *)qword_2573F68, "_EV_Battery_Info_Restored");
  qword_2573F80 = (uint64_t)operator new(0x20uLL);
  unk_2573F88 = v281;
  strcpy((char *)qword_2573F80, "_EV_Towing_Not_Supported");
  qword_2573F98 = (uint64_t)operator new(0x28uLL);
  unk_2573FA0 = v271;
  strcpy((char *)qword_2573F98, "_EV_Offline_to_Online_Transition");
  byte_2573FC7 = 15;
  strcpy((char *)&qword_2573FB0, "_EV_Offline_SAR");
  qword_2573FC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2573FD0 = v279;
  strcpy((char *)qword_2573FC8, "_Offline_to_Online_New_Route");
  byte_2573FF7 = 12;
  strcpy((char *)&qword_2573FE0, "BannerButton");
  byte_257400F = 8;
  strcpy((char *)&qword_2573FF8, "_Dismiss");
  byte_2574027 = 3;
  word_2574010 = 20319;
  byte_2574012 = 75;
  byte_2574013 = 0;
  byte_257403F = 11;
  strcpy((char *)&qword_2574028, "_Still_Here");
  byte_2574057 = 8;
  strcpy((char *)&qword_2574040, "_Cleared");
  qmemcpy(&byte_257406F, "\nBannerButton", 13);
  strcpy((char *)&qword_2574058, "_No_Thanks");
  uint64_t v205 = qword_2573FE8;
  qword_2574080 = 0x1400000000000000;
  *(void *)algn_257407C = 0x7373696D7369445FLL;
  qword_2574098 = 0xF00000000000000;
  qword_2574090 = 0x4B4F5F6E6F7474;
  int v206 = byte_2573D87;
  if (byte_2573D87 >= 0) {
    size_t v207 = byte_2573D87;
  }
  else {
    size_t v207 = qword_2573D78;
  }
  unint64_t v208 = v207 + 12;
  qword_2574088 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_25740A8 = v207 + 12;
    unk_25740B0 = v211 | 0x8000000000000000;
    qword_25740A0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25740A8) = 0;
    HIWORD(qword_25740A8) = 0;
    unk_25740B0 = 0;
    byte_25740B7 = v207 + 12;
    strcpy((char *)&qword_25740A0, "BannerButton");
    uint64_t v209 = (char *)&qword_25740A8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_2573D70;
  }
  else {
    int v213 = (uint64_t *)qword_2573D70;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_2573D9F;
  if (byte_2573D9F >= 0) {
    size_t v215 = byte_2573D9F;
  }
  else {
    size_t v215 = unk_2573D90;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_25740C0 = v215 + 12;
    unk_25740C8 = v219 | 0x8000000000000000;
    qword_25740B8 = (uint64_t)v220;
    *(void *)v220 = qword_2573FE0;
    *((_DWORD *)v220 + 2) = qword_2573FE8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25740C0 = 0;
    unk_25740C8 = 0;
    byte_25740CF = v215 + 12;
    LODWORD(qword_25740C0) = qword_2573FE8;
    qword_25740B8 = qword_2573FE0;
    uint64_t v217 = (char *)&qword_25740C0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_2573D88;
  }
  else {
    int v221 = (uint64_t *)qword_2573D88;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2573D57;
  if (byte_2573D57 >= 0) {
    size_t v223 = byte_2573D57;
  }
  else {
    size_t v223 = unk_2573D48;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25740D8 = v223 + 12;
    unk_25740E0 = v227 | 0x8000000000000000;
    qword_25740D0 = (uint64_t)v228;
    *(void *)v228 = qword_2573FE0;
    *((_DWORD *)v228 + 2) = qword_2573FE8;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25740D8 = 0;
    unk_25740E0 = 0;
    byte_25740E7 = v223 + 12;
    LODWORD(qword_25740D8) = qword_2573FE8;
    qword_25740D0 = qword_2573FE0;
    uint64_t v225 = (char *)&qword_25740D8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_2573D40;
  }
  else {
    int v229 = (uint64_t *)qword_2573D40;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2573FF7;
  if (byte_2573FF7 >= 0) {
    size_t v231 = byte_2573FF7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_2573D6F;
  if (byte_2573D6F >= 0) {
    size_t v233 = byte_2573D6F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2573D58 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25740E8;
    qword_25740F0 = 0;
    unk_25740F8 = 0;
    qword_25740E8 = 0;
    byte_25740FF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25740F0 = v233 + v231;
  unk_25740F8 = v243 | 0x8000000000000000;
  qword_25740E8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2573FE0;
    }
    else {
      v236 = (uint64_t *)qword_2573FE0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_2573D58;
    }
    else {
      unint64_t v238 = (long long *)xmmword_2573D58;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_2574108 = v231 + 11;
    unk_2574110 = v245 | 0x8000000000000000;
    qword_2574100 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_2574100;
    qword_2574108 = 0;
    unk_2574110 = 0;
    qword_2574100 = 0;
    byte_2574117 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2574100 + 7) = *(_DWORD *)((char *)&qword_2574028 + 7);
      qword_2574100 = qword_2574028;
      BYTE3(qword_2574108) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2573FE0;
  }
  else {
    v246 = (uint64_t *)qword_2573FE0;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2574028 + 7);
  *(void *)int v247 = qword_2574028;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2574118;
    qword_2574120 = 0;
    unk_2574128 = 0;
    qword_2574118 = 0;
    byte_257412F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  v249 = (uint64_t *)operator new(v264 + 1);
  qword_2574120 = v231 + 8;
  unk_2574128 = v265 | 0x8000000000000000;
  qword_2574118 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2573FE0;
    }
    else {
      v250 = (uint64_t *)qword_2573FE0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_2574040;
  v251[8] = 0;
  int v252 = byte_257406F;
  if (byte_257406F >= 0) {
    size_t v253 = byte_257406F;
  }
  else {
    size_t v253 = qword_2574060;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2574130;
    qword_2574138 = 0;
    unk_2574140 = 0;
    qword_2574130 = 0;
    byte_2574147 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  v255 = (uint64_t *)operator new(v262 + 1);
  qword_2574138 = v253 + v231;
  unk_2574140 = v263 | 0x8000000000000000;
  qword_2574130 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2573FE0;
    }
    else {
      v256 = (uint64_t *)qword_2573FE0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2574058;
    }
    else {
      v258 = (uint64_t *)qword_2574058;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_257415F, "\n{newroute}");
  strcpy((char *)&qword_2574148, "{roadname}");
  strcpy(&byte_2574177, "\n{count}");
  byte_257418F = 7;
  strcpy(&byte_25741A7, "\n{dur}");
  strcpy((char *)&qword_2574190, "{duration}");
  byte_25741BF = 5;
  qword_25741C0 = (uint64_t)operator new(0x20uLL);
  unk_25741C8 = v278;
  strcpy((char *)qword_25741C0, "{PleaseProceedWithCaution}");
  byte_25741EF = 15;
  strcpy((char *)&qword_25741D8, "{UserRouteName}");
  byte_2574207 = 20;
  strcpy((char *)&xmmword_25741F0, "{SuggestedRouteName}");
  byte_257421F = 18;
  strcpy(byte_2574208, "Speed_Camera_Ahead");
  qword_2574220 = (uint64_t)operator new(0x20uLL);
  unk_2574228 = v277;
  strcpy((char *)qword_2574220, "Red_Light_Camera_Ahead_Spoken");
  qword_2574238 = (uint64_t)operator new(0x20uLL);
  unk_2574240 = v277;
  strcpy((char *)qword_2574238, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2574250 = (uint64_t)operator new(0x28uLL);
  unk_2574258 = v272;
  strcpy((char *)qword_2574250, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2574268 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2574270 = v267;
  strcpy((char *)qword_2574268, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2574280 = (uint64_t)operator new(0x20uLL);
  unk_2574288 = v279;
  strcpy((char *)qword_2574280, "Camera_Ahead_Multiple_Spoken");
  qword_2574298 = (uint64_t)operator new(0x30uLL);
  unk_25742A0 = v268;
  strcpy((char *)qword_2574298, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25742B0 = (char *)operator new(0x30uLL);
  strcpy(qword_25742B0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25742DF = 16;
  xmmword_25742B8 = v268;
  strcpy(byte_25742C8, "_Speed_Limit_Mph");
  byte_25742F7 = 16;
  strcpy(byte_25742E0, "_Speed_Limit_Kph");
  byte_257430F = 11;
  strcpy((char *)&qword_25742F8, "Watch_Speed");
  byte_2574327 = 4;
  strcpy((char *)&dword_2574310, "_One");
  byte_257433F = 4;
  strcpy((char *)&dword_2574328, "_Two");
  byte_2574357 = 4;
  strcpy((char *)&dword_2574340, "_Few");
  byte_257436F = 5;
  strcpy((char *)&dword_2574358, "_Many");
  byte_2574387 = 6;
  strcpy((char *)&dword_2574370, "_Other");
  byte_257439F = 4;
  strcpy((char *)&dword_2574388, "_ONE");
  byte_25743B7 = 7;
  strcpy((char *)&dword_25743A0, "{Speed}");
  byte_25743CF = 8;
  strcpy((char *)&qword_25743B8, "Dismount");
  byte_25743E7 = 4;
  strcpy((char *)&dword_25743D0, "Walk");
  byte_25743FF = 5;
  strcpy((char *)&dword_25743E8, "Mount");
  byte_2574417 = 7;
  strcpy((char *)&dword_2574400, "Remount");
  strcpy(&byte_257442F, "\t_Crosswalk");
  strcpy((char *)&qword_2574418, "Walk_Road");
  strcpy(&byte_2574447, "\n_PLURAL");
  byte_257445F = 7;
  strcpy(&byte_2574477, "\n{description1}");
  strcpy((char *)&qword_2574460, "_SECONDARY");
  byte_257448F = 14;
  byte_25744A7 = 14;
  strcpy((char *)&qword_2574490, "{description2}");
  byte_25744BF = 21;
  strcpy((char *)&xmmword_25744A8, "TWO_ROAD_DESCRIPTIONS");
  byte_25744D7 = 17;
  strcpy((char *)&xmmword_25744C0, "{SlopePercentage}");
  byte_25744EF = 15;
  strcpy((char *)&qword_25744D8, "_Protected_Lane");
  strcpy(&byte_2574507, "\n_Paved_Path");
  strcpy((char *)&qword_25744F0, "_Bike_Path");
  byte_257451F = 11;
  byte_2574537 = 15;
  strcpy((char *)&qword_2574520, "_Dedicated_Lane");
  byte_257454F = 12;
  strcpy((char *)&qword_2574538, "_Shared_Path");
  strcpy(&byte_2574567, "\n_UnnamedRoad");
  strcpy((char *)&qword_2574550, "_Bike_Lane");
  byte_257457F = 12;
  byte_2574597 = 5;
  strcpy((char *)&dword_2574580, "_Path");
  byte_25745AF = 6;
  strcpy((char *)&dword_2574598, "_Trail");
  strcpy(&byte_25745C7, "\t_Plaza");
  strcpy((char *)&qword_25745B0, "_Sidewalk");
  byte_25745DF = 6;
  byte_25745F7 = 15;
  strcpy((char *)&qword_25745E0, "_Moving_Walkway");
  byte_257460F = 14;
  strcpy((char *)&qword_25745F8, "Two_Stage_Turn");
  byte_2574627 = 16;
  strcpy((char *)&xmmword_2574610, "{OptionalPeriod}");
  byte_257463F = 18;
  strcpy((char *)&xmmword_2574628, "Advisory_Separator");
  byte_2574657 = 6;
  strcpy((char *)&dword_2574640, "Period");
  byte_257466F = 21;
  strcpy((char *)&xmmword_2574658, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2574670, "Advisory_Title_Notices");
  HIBYTE(word_2574686) = 22;
  byte_257469F = 7;
  strcpy((char *)&dword_2574688, "_DETAIL");
  byte_25746B7 = 17;
  strcpy((char *)&xmmword_25746A0, "_LONG_REGION_LIST");
  byte_25746CF = 16;
  strcpy((char *)&xmmword_25746B8, "Advisory_Grouped");
  byte_25746E7 = 11;
  strcpy((char *)&qword_25746D0, "_Advisories");
  qword_25746E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25746F0 = v275;
  strcpy((char *)qword_25746E8, "Advisory_WILDFIRE_METADATA_");
  byte_2574717 = 8;
  strcpy((char *)&qword_2574700, "Advisory");
  byte_257472F = 13;
  strcpy((char *)&qword_2574718, "MPR_NUM_STOPS");
  byte_2574747 = 17;
  strcpy(algn_2574730, "EV_CHARGE_STATION");
  byte_257475F = 11;
  strcpy((char *)&qword_2574748, "_NAMED_CITY");
  byte_2574777 = 5;
  strcpy((char *)&dword_2574760, "_Stop");
  strcpy(&byte_257478F, "\n{StopsCount}");
  strcpy((char *)&qword_2574778, "{CityName}");
  byte_25747A7 = 12;
  byte_25747BF = 11;
  strcpy((char *)&qword_25747A8, "_With_Other");
  byte_25747D7 = 15;
  strcpy((char *)&qword_25747C0, "{DepartureTime}");
  qword_25747D8 = (uint64_t)operator new(0x28uLL);
  unk_25747E0 = v276;
  strcpy((char *)qword_25747D8, "Ending_Charge_Station_Port_Availability");
  qword_25747F0 = (uint64_t)operator new(0x28uLL);
  unk_25747F8 = v269;
  strcpy((char *)qword_25747F0, "Ending_Charge_Station_No_Availability");
  qword_2574808 = (uint64_t)operator new(0x28uLL);
  unk_2574810 = v272;
  strcpy((char *)qword_2574808, "Ending_Charge_Station_No_Real_Time");
  byte_2574837 = 16;
  strcpy(byte_2574820, "{AvailablePorts}");
  byte_257484F = 12;
  strcpy((char *)&qword_2574838, "{TotalPorts}");
  byte_2574867 = 14;
  strcpy((char *)&qword_2574850, "{ManeuverIcon}");
  qword_2574868 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_2574870 = xmmword_20B9A60;
  strcpy((char *)qword_2574868, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2574880 = (uint64_t)operator new(0x20uLL);
  unk_2574888 = v275;
  strcpy((char *)qword_2574880, "Walking_Destination_Unnamed");
  qword_2574898 = (uint64_t)operator new(0x20uLL);
  unk_25748A0 = v277;
  strcpy((char *)qword_2574898, "TrafficDelay_Label_Title_Sign");
  qword_25748B0 = (uint64_t)operator new(0x20uLL);
  unk_25748B8 = v279;
  strcpy((char *)qword_25748B0, "Special_Guidance_Instruction");
  byte_25748DF = 2;
  strcpy((char *)&word_25748C8, "CZ");
  byte_25748F7 = 3;
  dword_25748E0 = 5919811;
  unk_257490F = 3;
  dword_25748F8 = 6243649;
  byte_2574927 = 0;
  byte_257493F = 7;
  strcpy((char *)&dword_2574928, "TRANSIT");
  byte_2574957 = 7;
  strcpy((char *)&xmmword_2574940, "OFFLINE");
  qword_2574958 = (uint64_t)operator new(0x28uLL);
  unk_2574960 = v267;
  strcpy((char *)qword_2574958, "Advisory_Card_French_Climate_Law_Title");
  qword_2574970 = (uint64_t)operator new(0x30uLL);
  unk_2574978 = xmmword_20B93C0;
  strcpy((char *)qword_2574970, "Advisory_Card_French_Climate_Law_Details");
  qword_2574988 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2574990 = v273;
  strcpy((char *)qword_2574988, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25749A0 = (uint64_t)operator new(0x20uLL);
  unk_25749A8 = v279;
  strcpy((char *)qword_25749A0, "{ClimateLawLearnMoreWeblink}");
  byte_25749CF = 3;
  dword_25749B8 = 4280902;
  qword_25749D0 = (uint64_t)operator new(0x70uLL);
  unk_25749D8 = xmmword_20E81E0;
  strcpy((char *)qword_25749D0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_2574A78 = 0u;
  xmmword_2574A88 = 0u;
  dword_2574A98 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2574A78, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2574A78, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_2574A78, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_2574A78, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25749FF = 8;
  strcpy((char *)&qword_25749E8, "any_mode");
  byte_2574A17 = 7;
  strcpy((char *)&dword_2574A00, "cycling");
  byte_2574A2F = 7;
  strcpy((char *)&dword_2574A18, "driving");
  byte_2574A47 = 7;
  strcpy((char *)&dword_2574A30, "walking");
  qword_2574A48 = 0;
  unk_2574A50 = 0;
  qword_2574A58 = 0;
  uint64_t v259 = (char *)operator new(9uLL);
  *(void *)uint64_t v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_2574A48 = (uint64_t)v259;
  unk_2574A50 = v259 + 9;
  qword_2574A58 = (uint64_t)(v259 + 9);
  qword_2574A60 = 0;
  qword_2574A68 = 0;
  unk_2574A70 = 0;
  uint64_t v260 = (char *)operator new(9uLL);
  qword_2574A68 = (uint64_t)(v260 + 9);
  unk_2574A70 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_2574A60 = (uint64_t)v260;
  return result;
}

void sub_584ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_584E14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_584E8C(_Unwind_Exception *a1)
{
  sub_585FF0(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_584EB8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_584ECC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5 = sub_8D7730(a1, (uint64_t)&qword_25772C0);
  if (*((char *)v5 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v5, v5[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    __dst.__r_.__value_.__r.__words[2] = v5[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v6;
  }
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (byte_257725F >= 0) {
    uint64_t v9 = &qword_2577248;
  }
  else {
    uint64_t v9 = (uint64_t *)qword_2577248;
  }
  if (byte_257725F >= 0) {
    int64_t v10 = byte_257725F;
  }
  else {
    int64_t v10 = unk_2577250;
  }
  if (v10)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __dst.__r_.__value_.__l.__size_;
    }
    if (size < v10) {
      goto LABEL_31;
    }
    unint64_t v11 = (char *)p_dst + size;
    int v12 = *(char *)v9;
    size_t v13 = p_dst;
    while (1)
    {
      int64_t v14 = size - v10;
      if (v14 == -1) {
        goto LABEL_31;
      }
      double v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15) {
        goto LABEL_31;
      }
      uint64_t v16 = v15;
      if (!memcmp(v15, v9, v10)) {
        break;
      }
      size_t v13 = (std::string *)(v16 + 1);
      int64_t size = v11 - (v16 + 1);
      if (size < v10) {
        goto LABEL_31;
      }
    }
    if (v16 == v11 || (std::string::size_type v17 = v16 - (char *)p_dst, v16 - (char *)p_dst == -1))
    {
LABEL_31:
      sub_5F3D48(a3, (uint64_t)&__dst);
      sub_5F1E5C(v21, (long long *)&qword_2577290);
    }
  }
  else
  {
    std::string::size_type v17 = 0;
  }
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    unint64_t v19 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  std::string::replace(&__dst, v17, v10, v19, v20);
  goto LABEL_31;
}

void sub_5850B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_4DC6B8((uint64_t)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v16);
  if (*(char *)(v17 - 89) < 0) {
    operator delete(*(void **)(v17 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_585104(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[1] - *a2;
  uint64_t v7 = 540;
  if (v6 == 24) {
    uint64_t v7 = 534;
  }
  uint64_t v8 = &qword_25772F0;
  if (v6 == 24) {
    uint64_t v8 = &qword_25772D8;
  }
  uint64_t v9 = (char *)&unk_2577307;
  if (v6 == 24) {
    uint64_t v9 = (char *)&unk_25772EF;
  }
  if (*v9 < 0)
  {
    if (v6 == 24) {
      int64_t v10 = (unint64_t *)&unk_25772E0;
    }
    else {
      int64_t v10 = (unint64_t *)&unk_25772F8;
    }
    sub_4200(__dst, *(void **)&dword_2576A80[v7], *v10);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v8;
    uint64_t v44 = v8[2];
  }
  unint64_t v11 = sub_8D7730(a1, (uint64_t)__dst);
  if (*((char *)v11 + 23) < 0)
  {
    sub_4200(&__p, (void *)*v11, v11[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    __p.__r_.__value_.__r.__words[2] = v11[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  uint64_t v13 = *a2;
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_2577277 >= 0) {
    uint64_t v16 = &qword_2577260;
  }
  else {
    uint64_t v16 = (uint64_t *)qword_2577260;
  }
  if (byte_2577277 >= 0) {
    int64_t v17 = byte_2577277;
  }
  else {
    int64_t v17 = unk_2577268;
  }
  if (v17)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= v17)
    {
      int v18 = (char *)p_p + size;
      int v19 = *(char *)v16;
      std::string::size_type v20 = p_p;
      do
      {
        int64_t v21 = size - v17;
        if (v21 == -1) {
          break;
        }
        long long v22 = (char *)memchr(v20, v19, v21 + 1);
        if (!v22) {
          break;
        }
        int v23 = v22;
        if (!memcmp(v22, v16, v17))
        {
          if (v23 != v18)
          {
            std::string::size_type v24 = v23 - (char *)p_p;
            if (v23 - (char *)p_p != -1) {
              goto LABEL_36;
            }
          }
          break;
        }
        std::string::size_type v20 = (std::string *)(v23 + 1);
        int64_t size = v18 - (v23 + 1);
      }
      while (size >= v17);
    }
  }
  else
  {
    std::string::size_type v24 = 0;
LABEL_36:
    int v25 = *(char *)(v13 + 23);
    if (v25 >= 0) {
      unint64_t v26 = (const std::string::value_type *)v13;
    }
    else {
      unint64_t v26 = *(const std::string::value_type **)v13;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(v13 + 8);
    }
    std::string::replace(&__p, v24, v17, v26, v27);
    uint64_t v13 = *a2;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - v13) >> 3) >= 2)
  {
    int64_t v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &__p;
    }
    else {
      long long v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (byte_257728F >= 0) {
      uint64_t v30 = &qword_2577278;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_2577278;
    }
    if (byte_257728F >= 0) {
      int64_t v31 = byte_257728F;
    }
    else {
      int64_t v31 = unk_2577280;
    }
    if (v31)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v28 = __p.__r_.__value_.__l.__size_;
      }
      if (v28 >= v31)
      {
        size_t v32 = (char *)v29 + v28;
        int v33 = *(char *)v30;
        long long v34 = v29;
        do
        {
          int64_t v35 = v28 - v31;
          if (v35 == -1) {
            break;
          }
          int v36 = (char *)memchr(v34, v33, v35 + 1);
          if (!v36) {
            break;
          }
          uint64_t v37 = v36;
          if (!memcmp(v36, v30, v31))
          {
            if (v37 != v32)
            {
              std::string::size_type v38 = v37 - (char *)v29;
              if (v37 - (char *)v29 != -1) {
                goto LABEL_64;
              }
            }
            break;
          }
          long long v34 = (std::string *)(v37 + 1);
          int64_t v28 = v32 - (v37 + 1);
        }
        while (v28 >= v31);
      }
    }
    else
    {
      std::string::size_type v38 = 0;
LABEL_64:
      int v39 = *(char *)(v13 + 47);
      if (v39 >= 0) {
        char v40 = (const std::string::value_type *)(v13 + 24);
      }
      else {
        char v40 = *(const std::string::value_type **)(v13 + 24);
      }
      if (v39 >= 0) {
        std::string::size_type v41 = *(unsigned __int8 *)(v13 + 47);
      }
      else {
        std::string::size_type v41 = *(void *)(v13 + 32);
      }
      std::string::replace(&__p, v38, v31, v40, v41);
    }
  }
  sub_5F3D48(a3, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v44) & 0x80000000) == 0) {
      return;
    }
LABEL_75:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_75;
  }
}

void sub_585428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_585474(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_586064(a3);
  uint64_t v6 = sub_8D7730(a1, (uint64_t)&qword_2577308);
  if (*((char *)v6 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v6, v6[1]);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    __dst.__r_.__value_.__r.__words[2] = v6[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v7;
  }
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (byte_257725F >= 0) {
    int64_t v10 = &qword_2577248;
  }
  else {
    int64_t v10 = (uint64_t *)qword_2577248;
  }
  if (byte_257725F >= 0) {
    int64_t v11 = byte_257725F;
  }
  else {
    int64_t v11 = unk_2577250;
  }
  if (v11)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __dst.__r_.__value_.__l.__size_;
    }
    if (size < v11) {
      goto LABEL_31;
    }
    long long v12 = (char *)p_dst + size;
    int v13 = *(char *)v10;
    int64_t v14 = p_dst;
    while (1)
    {
      int64_t v15 = size - v11;
      if (v15 == -1) {
        goto LABEL_31;
      }
      uint64_t v16 = (char *)memchr(v14, v13, v15 + 1);
      if (!v16) {
        goto LABEL_31;
      }
      int64_t v17 = v16;
      if (!memcmp(v16, v10, v11)) {
        break;
      }
      int64_t v14 = (std::string *)(v17 + 1);
      int64_t size = v12 - (v17 + 1);
      if (size < v11) {
        goto LABEL_31;
      }
    }
    if (v17 == v12 || (std::string::size_type v18 = v17 - (char *)p_dst, v17 - (char *)p_dst == -1))
    {
LABEL_31:
      sub_5F41E8(a3, (uint64_t)&__dst);
      long long v22 = sub_8D7730(a1, (uint64_t)&qword_2577320);
      if (*((char *)v22 + 23) < 0)
      {
        sub_4200(&v58, (void *)*v22, v22[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v22;
        v58.__r_.__value_.__r.__words[2] = v22[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v23;
      }
      int64_t v24 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v25 = &v58;
      }
      else {
        int v25 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if (byte_257725F >= 0) {
        unint64_t v26 = &qword_2577248;
      }
      else {
        unint64_t v26 = (uint64_t *)qword_2577248;
      }
      if (byte_257725F >= 0) {
        int64_t v27 = byte_257725F;
      }
      else {
        int64_t v27 = unk_2577250;
      }
      if (v27)
      {
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int64_t v24 = v58.__r_.__value_.__l.__size_;
        }
        if (v24 < v27) {
          goto LABEL_61;
        }
        int64_t v28 = (char *)v25 + v24;
        int v29 = *(char *)v26;
        uint64_t v30 = v25;
        while (1)
        {
          int64_t v31 = v24 - v27;
          if (v31 == -1) {
            goto LABEL_61;
          }
          size_t v32 = (char *)memchr(v30, v29, v31 + 1);
          if (!v32) {
            goto LABEL_61;
          }
          int v33 = v32;
          if (!memcmp(v32, v26, v27)) {
            break;
          }
          uint64_t v30 = (std::string *)(v33 + 1);
          int64_t v24 = v28 - (v33 + 1);
          if (v24 < v27) {
            goto LABEL_61;
          }
        }
        if (v33 == v28 || (std::string::size_type v34 = v33 - (char *)v25, v33 - (char *)v25 == -1))
        {
LABEL_61:
          sub_5F41E8(a3 + 160, (uint64_t)&v58);
          std::string::size_type v38 = sub_8D7730(a1, (uint64_t)&qword_2577338);
          if (*((char *)v38 + 23) < 0)
          {
            sub_4200(&v57, (void *)*v38, v38[1]);
          }
          else
          {
            long long v39 = *(_OWORD *)v38;
            v57.__r_.__value_.__r.__words[2] = v38[2];
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
          }
          int64_t v40 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v41 = &v57;
          }
          else {
            std::string::size_type v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if (byte_257725F >= 0) {
            int v42 = &qword_2577248;
          }
          else {
            int v42 = (uint64_t *)qword_2577248;
          }
          if (byte_257725F >= 0) {
            int64_t v43 = byte_257725F;
          }
          else {
            int64_t v43 = unk_2577250;
          }
          if (v43)
          {
            if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int64_t v40 = v57.__r_.__value_.__l.__size_;
            }
            if (v40 < v43) {
              goto LABEL_91;
            }
            uint64_t v44 = (char *)v41 + v40;
            int v45 = *(char *)v42;
            std::string v46 = v41;
            while (1)
            {
              int64_t v47 = v40 - v43;
              if (v47 == -1) {
                goto LABEL_91;
              }
              std::string v48 = (char *)memchr(v46, v45, v47 + 1);
              if (!v48) {
                goto LABEL_91;
              }
              char v49 = v48;
              if (!memcmp(v48, v42, v43)) {
                break;
              }
              std::string v46 = (std::string *)(v49 + 1);
              int64_t v40 = v44 - (v49 + 1);
              if (v40 < v43) {
                goto LABEL_91;
              }
            }
            if (v49 == v44 || (std::string::size_type v50 = v49 - (char *)v41, v49 - (char *)v41 == -1))
            {
LABEL_91:
              sub_5F41E8(a3 + 1280, (uint64_t)&v57);
              char v55 = 11;
              strcpy((char *)__p, "destination");
              sub_5F1E5C(v56, (long long *)&dword_25772A8);
            }
          }
          else
          {
            std::string::size_type v50 = 0;
          }
          int v51 = *(char *)(a2 + 23);
          if (v51 >= 0) {
            size_t v52 = (const std::string::value_type *)a2;
          }
          else {
            size_t v52 = *(const std::string::value_type **)a2;
          }
          if (v51 >= 0) {
            std::string::size_type v53 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            std::string::size_type v53 = *(void *)(a2 + 8);
          }
          std::string::replace(&v57, v50, v43, v52, v53);
          goto LABEL_91;
        }
      }
      else
      {
        std::string::size_type v34 = 0;
      }
      int v35 = *(char *)(a2 + 23);
      if (v35 >= 0) {
        int v36 = (const std::string::value_type *)a2;
      }
      else {
        int v36 = *(const std::string::value_type **)a2;
      }
      if (v35 >= 0) {
        std::string::size_type v37 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v37 = *(void *)(a2 + 8);
      }
      std::string::replace(&v58, v34, v27, v36, v37);
      goto LABEL_61;
    }
  }
  else
  {
    std::string::size_type v18 = 0;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    std::string::size_type v20 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v20 = *(const std::string::value_type **)a2;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v21 = *(void *)(a2 + 8);
  }
  std::string::replace(&__dst, v18, v11, v20, v21);
  goto LABEL_31;
}

void sub_585A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_4DC6B8((uint64_t)&a23);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v24 - 169) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v24 - 169) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v24 - 137) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v24 - 192));
  if ((*(char *)(v24 - 137) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v24 - 105) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v24 - 160));
  if ((*(char *)(v24 - 105) & 0x80000000) == 0)
  {
LABEL_6:
    sub_585FF0(v23);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(*(void **)(v24 - 128));
  sub_585FF0(v23);
  _Unwind_Resume(a1);
}

void sub_585B9C()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x585B84);
  }
  JUMPOUT(0x585ABCLL);
}

void sub_585BAC()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x585B84);
  }
  JUMPOUT(0x585ABCLL);
}

void sub_585BBC(_Unwind_Exception *a1)
{
  sub_585FF0(v1);
  _Unwind_Resume(a1);
}

void sub_585BD0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    sub_586064(a3);
    return;
  }
  uint64_t v7 = v4 - *a2;
  uint64_t v8 = 540;
  if (v7 == 24) {
    uint64_t v8 = 534;
  }
  uint64_t v9 = &qword_25772F0;
  if (v7 == 24) {
    uint64_t v9 = &qword_25772D8;
  }
  int64_t v10 = (char *)&unk_2577307;
  if (v7 == 24) {
    int64_t v10 = (char *)&unk_25772EF;
  }
  if (*v10 < 0)
  {
    if (v7 == 24) {
      int64_t v11 = (unint64_t *)&unk_25772E0;
    }
    else {
      int64_t v11 = (unint64_t *)&unk_25772F8;
    }
    sub_4200(__dst, *(void **)&dword_2576A80[v8], *v11);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)v9;
    uint64_t v47 = v9[2];
  }
  long long v12 = sub_8D7730(a1, (uint64_t)__dst);
  if (*((char *)v12 + 23) < 0)
  {
    sub_4200(&__p, (void *)*v12, v12[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)v12;
    __p.__r_.__value_.__r.__words[2] = v12[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  }
  uint64_t v14 = *a2;
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_2577277 >= 0) {
    int64_t v17 = &qword_2577260;
  }
  else {
    int64_t v17 = (uint64_t *)qword_2577260;
  }
  if (byte_2577277 >= 0) {
    int64_t v18 = byte_2577277;
  }
  else {
    int64_t v18 = unk_2577268;
  }
  if (v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= v18)
    {
      int v19 = (char *)p_p + size;
      int v20 = *(char *)v17;
      std::string::size_type v21 = p_p;
      do
      {
        int64_t v22 = size - v18;
        if (v22 == -1) {
          break;
        }
        uint64_t v23 = (char *)memchr(v21, v20, v22 + 1);
        if (!v23) {
          break;
        }
        uint64_t v24 = v23;
        if (!memcmp(v23, v17, v18))
        {
          if (v24 != v19)
          {
            std::string::size_type v25 = v24 - (char *)p_p;
            if (v24 - (char *)p_p != -1) {
              goto LABEL_40;
            }
          }
          break;
        }
        std::string::size_type v21 = (std::string *)(v24 + 1);
        int64_t size = v19 - (v24 + 1);
      }
      while (size >= v18);
    }
  }
  else
  {
    std::string::size_type v25 = 0;
LABEL_40:
    int v26 = *(char *)(v14 + 23);
    if (v26 >= 0) {
      int64_t v27 = (const std::string::value_type *)v14;
    }
    else {
      int64_t v27 = *(const std::string::value_type **)v14;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(v14 + 8);
    }
    std::string::replace(&__p, v25, v18, v27, v28);
    uint64_t v14 = *a2;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - v14) >> 3) >= 2)
  {
    int64_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &__p;
    }
    else {
      uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (byte_257728F >= 0) {
      int64_t v31 = &qword_2577278;
    }
    else {
      int64_t v31 = (uint64_t *)qword_2577278;
    }
    if (byte_257728F >= 0) {
      int64_t v32 = byte_257728F;
    }
    else {
      int64_t v32 = unk_2577280;
    }
    if (v32)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v29 = __p.__r_.__value_.__l.__size_;
      }
      if (v29 >= v32)
      {
        int v33 = (char *)v30 + v29;
        int v34 = *(char *)v31;
        int v35 = v30;
        do
        {
          int64_t v36 = v29 - v32;
          if (v36 == -1) {
            break;
          }
          std::string::size_type v37 = (char *)memchr(v35, v34, v36 + 1);
          if (!v37) {
            break;
          }
          std::string::size_type v38 = v37;
          if (!memcmp(v37, v31, v32))
          {
            if (v38 != v33)
            {
              std::string::size_type v39 = v38 - (char *)v30;
              if (v38 - (char *)v30 != -1) {
                goto LABEL_68;
              }
            }
            break;
          }
          int v35 = (std::string *)(v38 + 1);
          int64_t v29 = v33 - (v38 + 1);
        }
        while (v29 >= v32);
      }
    }
    else
    {
      std::string::size_type v39 = 0;
LABEL_68:
      int v40 = *(char *)(v14 + 47);
      if (v40 >= 0) {
        std::string::size_type v41 = (const std::string::value_type *)(v14 + 24);
      }
      else {
        std::string::size_type v41 = *(const std::string::value_type **)(v14 + 24);
      }
      if (v40 >= 0) {
        std::string::size_type v42 = *(unsigned __int8 *)(v14 + 47);
      }
      else {
        std::string::size_type v42 = *(void *)(v14 + 32);
      }
      std::string::replace(&__p, v39, v32, v41, v42);
    }
  }
  sub_586064(a3);
  unint64_t v43 = *(void *)(a3 + 1128);
  if (v43 >= *(void *)(a3 + 1136))
  {
    *(void *)(a3 + 1128) = sub_55C330((char **)(a3 + 1120), (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_83;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 1128), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v43 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v43 = v44;
    }
    *(void *)(a3 + 1128) = v43 + 24;
    *(void *)(a3 + 1128) = v43 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_83:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47) < 0) {
        goto LABEL_84;
      }
      return;
    }
  }
  if (SHIBYTE(v47) < 0) {
LABEL_84:
  }
    operator delete(__dst[0]);
}

void sub_585F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 1128) = v22;
  sub_585FF0(v21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_585FF0(uint64_t a1)
{
  sub_4D4B58(a1 + 1280);
  sub_4D4B58(a1 + 1120);
  sub_4D4B58(a1 + 960);
  sub_4D4B58(a1 + 800);
  sub_4D4B58(a1 + 640);
  sub_4D4B58(a1 + 480);
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

uint64_t sub_586064(uint64_t a1)
{
  uint64_t v2 = sub_5F3B34(a1);
  sub_5F3B34(v2 + 160);
  sub_5F3B34(a1 + 320);
  sub_5F3B34(a1 + 480);
  sub_5F3B34(a1 + 640);
  sub_5F3B34(a1 + 800);
  sub_5F3B34(a1 + 960);
  sub_5F3B34(a1 + 1120);
  sub_5F3B34(a1 + 1280);
  return a1;
}

void sub_586100(_Unwind_Exception *a1)
{
  uint64_t v9 = v6;
  sub_4D4B58(v9);
  sub_4D4B58(v8);
  sub_4D4B58(v7);
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_586170()
{
}

void sub_586178(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_586194(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

double sub_5861A8()
{
  strcpy(&byte_2574AB7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2574AA0, "\x1B\\toi=lhp\\"");
  byte_2574ACF = 11;
  qword_2574AD0 = (uint64_t)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_2574AD8 = xmmword_20B9250;
  strcpy((char *)qword_2574AD0, "\x1B\\toi=x-sampa-internal\\"");
  byte_2574AFF = 13;
  strcpy((char *)&qword_2574AE8, "\x1B\\tn=address\\"");
  strcpy(&byte_2574B17, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2574B00, "\x1B\\tn=nav\\"");
  byte_2574B2F = 12;
  byte_2574B47 = 7;
  strcpy((char *)&dword_2574B30, "\x1B\\lang=");
  byte_2574B5F = 1;
  word_2574B48 = 92;
  byte_2574B77 = 4;
  strcpy((char *)&qword_2574B60, "DEV:");
  byte_2574B8F = 8;
  strcpy((char *)&qword_2574B78, "Continue");
  byte_2574BA7 = 11;
  strcpy((char *)&qword_2574B90, "Start_Route");
  byte_2574BBF = 14;
  strcpy((char *)&qword_2574BA8, "Continue_Route");
  byte_2574BD7 = 12;
  strcpy((char *)&qword_2574BC0, "Resume_Route");
  byte_2574BEF = 18;
  strcpy((char *)&xmmword_2574BD8, "Start_Route_U_Turn");
  byte_2574C07 = 7;
  strcpy((char *)&dword_2574BF0, "_U_Turn");
  qword_2574C18 = 0x1300000000000000;
  qmemcpy(&unk_2574C20, "Continue_Route", 14);
  dword_2574C10 = 1702131055;
  qword_2574C08 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2574C14 + 3) = 1852994900;
  dword_2574C14 = 1415533919;
  qword_2574C30 = 0x1500000000000000;
  strcpy(byte_2574C38, "Left_Turn");
  unk_2574C2E = 1415533919;
  *(_DWORD *)((char *)&qword_2574C30 + 1) = 1852994900;
  strcpy(&byte_2574C4F, "\tRight_Turn");
  strcpy(&byte_2574C67, "\nLeft_Turn_At_End");
  byte_2574C7F = 16;
  byte_2574C97 = 17;
  strcpy((char *)&xmmword_2574C80, "Right_Turn_At_End");
  byte_2574CAF = 15;
  strcpy((char *)&qword_2574C98, "Sharp_Left_Turn");
  byte_2574CC7 = 16;
  strcpy((char *)&xmmword_2574CB0, "Sharp_Right_Turn");
  byte_2574CDF = 16;
  strcpy((char *)&xmmword_2574CC8, "Slight_Left_Turn");
  byte_2574CF7 = 17;
  strcpy((char *)&xmmword_2574CE0, "Slight_Right_Turn");
  strcpy(&byte_2574D0F, "\tKeep_Right");
  strcpy((char *)&qword_2574CF8, "Keep_Left");
  strcpy(&byte_2574D27, "\nU_Turn");
  byte_2574D3F = 6;
  byte_2574D57 = 14;
  strcpy((char *)&qword_2574D40, "Walking_U_Turn");
  byte_2574D6F = 20;
  strcpy((char *)&xmmword_2574D58, "U_Turn_When_Possible");
  byte_2574D87 = 20;
  strcpy((char *)&xmmword_2574D70, "U_Turn_At_Roundabout");
  byte_2574D9F = 11;
  strcpy((char *)&qword_2574D88, "Enter_Ferry");
  strcpy(&byte_2574DB7, "\nChange_Ferry");
  strcpy((char *)&qword_2574DA0, "Exit_Ferry");
  strcpy((char *)&xmmword_2574DD0, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2574DE8, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2574E00, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2574E18, "End_Of_Navigation");
  strcpy((char *)&xmmword_2574E30, "End_Of_Navigation");
  strcpy((char *)&qword_2574E48, "Destination");
  strcpy((char *)&xmmword_2574E60, "Destination_On_left");
  strcpy((char *)&xmmword_2574E78, "Destination_On_Right");
  strcpy((char *)&xmmword_2574EC0, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2574F08, "Next_Stop_On_Right");
  byte_2574DCF = 12;
  byte_2574DE7 = 21;
  byte_2574DFF = 20;
  strcpy((char *)&xmmword_2574F38, "Waypoint_Stop_On_Left");
  byte_2574E17 = 22;
  byte_2574E2F = 17;
  byte_2574E47 = 17;
  byte_2574E5F = 11;
  byte_2574E77 = 19;
  byte_2574E8F = 20;
  strcpy(&byte_2574EA7, "\nFirst_Stop_On_left");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2574E90, "First_Stop");
  byte_2574EBF = 18;
  byte_2574ED7 = 19;
  strcpy(&byte_2574EEF, "\tNext_Stop_On_left");
  strcpy((char *)&qword_2574F20, "Waypoint_Stop");
  strcpy((char *)&xmmword_2574F50, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2574F68, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2574ED8, "Next_Stop");
  byte_2574F07 = 17;
  byte_2574F1F = 18;
  byte_2574F37 = 13;
  byte_2574F4F = 21;
  byte_2574F67 = 22;
  byte_2574F7F = 11;
  byte_2574F97 = 16;
  strcpy((char *)&xmmword_2574F80, "Enter_Roundabout");
  qword_2574F98 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_2574FA0 = xmmword_20B91C0;
  strcpy((char *)qword_2574F98, "Walking_Enter_Roundabout");
  byte_2574FC7 = 16;
  strcpy((char *)&xmmword_2574FB0, "Leave_Roundabout");
  byte_2574FDF = 21;
  strcpy((char *)&xmmword_2574FC8, "Roundabout_First_Exit");
  byte_2574FF7 = 22;
  strcpy((char *)&xmmword_2574FE0, "Roundabout_Second_Exit");
  byte_257500F = 21;
  strcpy((char *)&xmmword_2574FF8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_2575010, "Roundabout_Fourth_Exit");
  HIBYTE(word_2575026) = 22;
  byte_257503F = 21;
  strcpy((char *)&xmmword_2575028, "Roundabout_Fifth_Exit");
  byte_2575057 = 21;
  strcpy((char *)&xmmword_2575040, "Roundabout_Sixth_Exit");
  qword_2575058 = (uint64_t)operator new(0x19uLL);
  xmmword_2575060 = xmmword_20B9250;
  strcpy((char *)qword_2575058, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2575070, "Roundabout_Eighth_Exit");
  HIBYTE(word_2575086) = 22;
  byte_257509F = 21;
  strcpy((char *)&xmmword_2575088, "Roundabout_Ninth_Exit");
  byte_25750B7 = 21;
  strcpy((char *)&xmmword_25750A0, "Roundabout_Tenth_Exit");
  qword_25750B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25750C0 = xmmword_20B91C0;
  strcpy((char *)qword_25750B8, "Roundabout_Eleventh_Exit");
  qword_25750D0 = (uint64_t)operator new(0x19uLL);
  unk_25750D8 = xmmword_20B9250;
  strcpy((char *)qword_25750D0, "Roundabout_Twelfth_Exit");
  qword_25750E8 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_25750F0 = xmmword_20B5EB0;
  strcpy((char *)qword_25750E8, "Roundabout_Thirteenth_Exit");
  qword_2575100 = (uint64_t)operator new(0x20uLL);
  unk_2575108 = xmmword_20B5EB0;
  strcpy((char *)qword_2575100, "Roundabout_Fourteenth_Exit");
  qword_2575118 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_2575120 = xmmword_20B8870;
  strcpy((char *)qword_2575118, "Roundabout_Fifteenth_Exit");
  qword_2575130 = (uint64_t)operator new(0x20uLL);
  unk_2575138 = xmmword_20B8870;
  strcpy((char *)qword_2575130, "Roundabout_Sixteenth_Exit");
  qword_2575148 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_2575150 = xmmword_20B91A0;
  strcpy((char *)qword_2575148, "Roundabout_Seventeenth_Exit");
  qword_2575160 = (uint64_t)operator new(0x20uLL);
  unk_2575168 = xmmword_20B5EB0;
  strcpy((char *)qword_2575160, "Roundabout_Eighteenth_Exit");
  qword_2575178 = (uint64_t)operator new(0x20uLL);
  xmmword_2575180 = xmmword_20B5EB0;
  strcpy((char *)qword_2575178, "Roundabout_Nineteenth_Exit");
  byte_25751A7 = 8;
  strcpy((char *)&qword_2575190, "Off_Ramp");
  byte_25751BF = 16;
  strcpy((char *)&xmmword_25751A8, "Off_Ramp_On_Left");
  byte_25751D7 = 17;
  strcpy((char *)&xmmword_25751C0, "Off_Ramp_On_Right");
  byte_25751EF = 14;
  strcpy((char *)&qword_25751D8, "Change_Highway");
  strcpy((char *)&xmmword_25751F0, "Change_Highway_On_Left");
  HIBYTE(word_2575206) = 22;
  qword_2575208 = (uint64_t)operator new(0x19uLL);
  xmmword_2575210 = xmmword_20B9250;
  strcpy((char *)qword_2575208, "Change_Highway_On_Right");
  byte_2575237 = 5;
  dword_2575220 = 1735550285;
  byte_2575224 = 101;
  byte_2575225 = 0;
  byte_257524F = 12;
  strcpy((char *)&qword_2575238, "Enter_Detour");
  byte_2575267 = 11;
  strcpy((char *)&qword_2575250, "Exit_Detour");
  byte_257527F = 18;
  strcpy((char *)&xmmword_2575268, "Walking_Turnaround");
  qword_2575280 = (uint64_t)operator new(0x19uLL);
  unk_2575288 = xmmword_20B9250;
  strcpy((char *)qword_2575280, "Walking_Turnaround_Sign");
  byte_25752AF = 19;
  strcpy((char *)&xmmword_2575298, "Distance_Title_List");
  qword_25752B0 = (uint64_t)operator new(0x19uLL);
  unk_25752B8 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25752B0, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_25752DF = 19;
  strcpy((char *)&xmmword_25752C8, "Arrival_Charge_List");
  byte_25752F7 = 15;
  strcpy((char *)&qword_25752E0, "Charge_At_Start");
  strcpy(&byte_257530F, "\tPass_Street");
  strcpy((char *)&qword_25752F8, "Pass_Exit");
  byte_2575327 = 11;
  byte_257533F = 17;
  strcpy((char *)&xmmword_2575328, "Pass_Intersection");
  strcpy(&byte_2575357, "\t_PrevExitNumber");
  strcpy((char *)&qword_2575340, "Next_Exit");
  byte_257536F = 15;
  strcpy(&byte_2575387, "\t_PrevUTurn");
  strcpy((char *)&qword_2575370, "_PrevRoad");
  strcpy(&byte_257539F, "\nNext_");
  byte_25753B7 = 5;
  byte_25753CF = 15;
  strcpy((char *)&qword_25753B8, "_At_Next_Street");
  byte_25753E7 = 21;
  strcpy((char *)&xmmword_25753D0, "_At_Next_Intersection");
  byte_25753FF = 14;
  strcpy((char *)&qword_25753E8, "Charge_Station");
  byte_2575417 = 15;
  strcpy((char *)&qword_2575400, "_Charge_Station");
  BYTE1(qword_2575428) = 0;
  WORD1(qword_2575428) = 25856;
  HIDWORD(qword_2575428) = 335544320;
  strcpy((char *)&qword_2575418, "_Charge_Station_");
  byte_2575447 = 8;
  strcpy((char *)&qword_2575430, "_Minimum");
  byte_257545F = 15;
  strcpy((char *)&qword_2575448, "ExitShield_Sign");
  byte_2575477 = 8;
  strcpy((char *)&qword_2575460, "Walking_");
  byte_257548F = 16;
  strcpy((char *)&xmmword_2575478, "Walking_Continue");
  byte_25754A7 = 19;
  strcpy((char *)&xmmword_2575490, "Walking_Start_Route");
  qword_25754A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25754B0 = xmmword_20B5EB0;
  strcpy((char *)qword_25754A8, "Walking_Start_Route_U_Turn");
  byte_25754D7 = 17;
  strcpy((char *)&xmmword_25754C0, "Walking_Left_Turn");
  byte_25754EF = 18;
  strcpy((char *)&xmmword_25754D8, "Walking_Right_Turn");
  qword_25754F0 = (uint64_t)operator new(0x20uLL);
  unk_25754F8 = xmmword_20B5EB0;
  strcpy((char *)qword_25754F0, "Walking_Turn_At_Roundabout");
  qword_2575508 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_2575510 = xmmword_20B91B0;
  strcpy((char *)qword_2575508, "Walking_U_Turn_When_Possible");
  qword_2575520 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_2575528 = xmmword_20B9390;
  strcpy((char *)qword_2575520, "Walking_Roundabout_Exit_Continue");
  qword_2575538 = (uint64_t)operator new(0x20uLL);
  xmmword_2575540 = xmmword_20B91B0;
  strcpy((char *)qword_2575538, "Walking_Roundabout_Exit_Left");
  qword_2575550 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_2575558 = xmmword_20B8890;
  strcpy((char *)qword_2575550, "Walking_Roundabout_Exit_Right");
  qword_2575568 = (uint64_t)operator new(0x20uLL);
  xmmword_2575570 = xmmword_20B8870;
  strcpy((char *)qword_2575568, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2575580 = (uint64_t)v0;
  unk_2575588 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_25755AF = 8;
  strcpy((char *)&qword_2575598, "Walking_");
  qword_25755B0 = (uint64_t)operator new(0x19uLL);
  unk_25755B8 = v280;
  strcpy((char *)qword_25755B0, "Walking_Sharp_Left_Turn");
  qword_25755C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25755D0 = v279;
  strcpy((char *)qword_25755C8, "Walking_Sharp_Right_Turn");
  qword_25755E0 = (uint64_t)operator new(0x20uLL);
  unk_25755E8 = v279;
  strcpy((char *)qword_25755E0, "Walking_Slight_Left_Turn");
  qword_25755F8 = (uint64_t)operator new(0x20uLL);
  xmmword_2575600 = v278;
  strcpy((char *)qword_25755F8, "Walking_Slight_Right_Turn");
  byte_2575627 = 4;
  strcpy((char *)&dword_2575610, "Exit");
  byte_257563F = 4;
  strcpy((char *)&dword_2575628, "Road");
  byte_2575657 = 7;
  strcpy((char *)&dword_2575640, "Freeway");
  byte_257566F = 12;
  strcpy((char *)&qword_2575658, "Intersection");
  byte_2575687 = 5;
  strcpy((char *)&dword_2575670, "Ferry");
  byte_257569F = 11;
  strcpy((char *)&qword_2575688, "ShuttleName");
  byte_25756B7 = 5;
  strcpy((char *)&dword_25756A0, "Road1");
  strcpy(&byte_25756CF, "\tName");
  strcpy((char *)&qword_25756B8, "Signpost1");
  byte_25756E7 = 4;
  byte_25756FF = 7;
  strcpy((char *)&dword_25756E8, "Address");
  byte_2575717 = 7;
  strcpy((char *)&dword_2575700, "Shield1");
  byte_257572F = 13;
  strcpy((char *)&qword_2575718, "TowardShield1");
  byte_2575747 = 6;
  strcpy((char *)&dword_2575730, "Right_");
  byte_257575F = 5;
  byte_257574C = 95;
  dword_2575748 = 1952867660;
  byte_257574D = 0;
  strcpy(&byte_2575777, "\tOn_Left_");
  strcpy((char *)&qword_2575760, "On_Right_");
  byte_257578F = 8;
  byte_25757A7 = 12;
  strcpy((char *)&qword_2575790, "ElevatorName");
  byte_25757BF = 13;
  strcpy((char *)&qword_25757A8, "EscalatorName");
  strcpy(&byte_25757D7, "\nBridgeName");
  strcpy((char *)&qword_25757C0, "StairsName");
  strcpy(&byte_25757EF, "\nTunnelName");
  strcpy(&byte_2575807, "\nParking");
  byte_257581F = 7;
  strcpy(&byte_2575837, "\t_Escalator");
  strcpy((char *)&qword_2575820, "_Elevator");
  strcpy(&byte_257584F, "\n_ElevatorName");
  byte_2575867 = 13;
  byte_257587F = 14;
  strcpy((char *)&qword_2575868, "_EscalatorName");
  byte_2575897 = 5;
  strcpy((char *)&qword_2575880, "_Road");
  byte_25758AF = 8;
  strcpy((char *)&qword_2575898, "_Freeway");
  byte_25758C7 = 13;
  strcpy((char *)&qword_25758B0, "_Intersection");
  byte_25758DF = 6;
  strcpy((char *)&dword_25758C8, "_Road1");
  byte_25758F7 = 6;
  strcpy((char *)&dword_25758E0, "_Road2");
  strcpy(&byte_257590F, "\n_Signpost2");
  strcpy((char *)&qword_25758F8, "_Signpost1");
  strcpy(&byte_2575927, "\n_Ferry");
  byte_257593F = 6;
  byte_2575957 = 12;
  strcpy((char *)&qword_2575940, "_Ferry_Ferry");
  byte_257596F = 12;
  strcpy((char *)&qword_2575958, "_ShuttleName");
  qword_2575970 = (uint64_t)operator new(0x20uLL);
  unk_2575978 = v277;
  strcpy((char *)qword_2575970, "_Railway_Shuttle_ShuttleName");
  byte_257599F = 11;
  strcpy((char *)&qword_2575988, "_ExitNumber");
  byte_25759B7 = 5;
  dword_25759A0 = 1769489759;
  byte_25759A4 = 116;
  byte_25759A5 = 0;
  byte_25759CF = 7;
  strcpy((char *)&dword_25759B8, "_StayOn");
  byte_25759E7 = 7;
  strcpy((char *)&dword_25759D0, "_Stairs");
  byte_25759FF = 5;
  strcpy((char *)&dword_25759E8, "_Ramp");
  byte_2575A17 = 11;
  strcpy((char *)&qword_2575A00, "_StairsName");
  strcpy(&byte_2575A2F, "\t_Down");
  strcpy((char *)&qword_2575A18, "_RampName");
  byte_2575A47 = 5;
  byte_2575A5F = 3;
  dword_2575A48 = 7361887;
  byte_2575A77 = 7;
  strcpy((char *)&dword_2575A60, "_Bridge");
  byte_2575A8F = 7;
  strcpy((char *)&dword_2575A78, "_Tunnel");
  byte_2575AA7 = 11;
  strcpy((char *)&qword_2575A90, "_Roundabout");
  byte_2575ABF = 6;
  strcpy((char *)&dword_2575AA8, "_Cross");
  byte_2575AD7 = 8;
  strcpy((char *)&qword_2575AC0, "_Parking");
  byte_2575AEF = 8;
  strcpy((char *)&qword_2575AD8, "_Shield1");
  byte_2575B07 = 14;
  strcpy((char *)&qword_2575AF0, "_TowardShield1");
  byte_2575B1F = 8;
  strcpy((char *)&qword_2575B08, "_Shield2");
  byte_2575B37 = 14;
  strcpy((char *)&qword_2575B20, "_TowardShield2");
  byte_2575B4F = 11;
  strcpy((char *)&qword_2575B38, "_Direction1");
  byte_2575B67 = 11;
  strcpy((char *)&qword_2575B50, "_Direction2");
  strcpy(&byte_2575B7F, "\n_TowardDirection1");
  strcpy((char *)&qword_2575B68, "Direction1");
  byte_2575B97 = 17;
  byte_2575BAF = 17;
  strcpy((char *)&xmmword_2575B98, "_TowardDirection2");
  byte_2575BC7 = 16;
  strcpy((char *)&xmmword_2575BB0, "TowardDirection1");
  byte_2575BDF = 7;
  strcpy((char *)&qword_2575BC8, "_Spoken");
  byte_2575BF7 = 5;
  strcpy((char *)&qword_2575BE0, "_Sign");
  byte_2575C0F = 15;
  strcpy((char *)&qword_2575BF8, "_Secondary_Sign");
  byte_2575C27 = 5;
  byte_2575C14 = 116;
  dword_2575C10 = 1936280671;
  byte_2575C15 = 0;
  byte_2575C3F = 8;
  strcpy((char *)&qword_2575C28, "_Primary");
  qword_2575C50 = 0xF00000000000000;
  strcpy(byte_2575C58, "_Secondary");
  strcpy((char *)&qword_2575C40, "_Spoken_Primary");
  strcpy(&byte_2575C6F, "\n_Secondary");
  strcpy(&byte_2575C87, "\n_Spoken_Secondar");
  BYTE1(qword_2575C98) = 0;
  WORD1(qword_2575C98) = 0;
  HIDWORD(qword_2575C98) = 285212672;
  byte_2575CB7 = 13;
  strcpy((char *)&qword_2575CA0, "_To_Secondary");
  BYTE1(qword_2575CC8) = 0;
  WORD1(qword_2575CC8) = 0;
  HIDWORD(qword_2575CC8) = 335544320;
  strcpy((char *)&dword_2575CB8, "_Spoken_To_Secon");
  strcpy(&byte_2575CE7, "\t_ValidDistance");
  strcpy((char *)&qword_2575CD0, "_Distance");
  byte_2575CFF = 14;
  byte_2575D17 = 6;
  strcpy((char *)&dword_2575D00, "_Short");
  byte_2575D2F = 1;
  word_2575D18 = 95;
  qword_2575D30 = (uint64_t)operator new(0x20uLL);
  unk_2575D38 = v279;
  strcpy((char *)qword_2575D30, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2575D48 = (uint64_t)v1;
  xmmword_2575D50 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_2575D77 = 12;
  strcpy((char *)&qword_2575D60, "Chain_Spoken");
  byte_2575D8F = 15;
  strcpy((char *)&qword_2575D78, "Chain_To_Spoken");
  strcpy(&byte_2575DA7, "\nThen_Spoken");
  strcpy((char *)&qword_2575D90, "And_Spoken");
  byte_2575DBF = 11;
  byte_2575DD7 = 18;
  strcpy((char *)&xmmword_2575DC0, "Concatenate_Spoken");
  qword_2575DD8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_2575DE0 = xmmword_20B9240;
  strcpy((char *)qword_2575DD8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2575DF0 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_2575DF8 = xmmword_20B9260;
  strcpy((char *)qword_2575DF0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2575E08 = (uint64_t)operator new(0x40uLL);
  xmmword_2575E10 = xmmword_20B9A90;
  strcpy((char *)qword_2575E08, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2575E20 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_2575E28 = xmmword_20B9A40;
  strcpy((char *)qword_2575E20, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2575E38 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_2575E40 = xmmword_20E12D0;
  strcpy((char *)qword_2575E38, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2575E50 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_2575E58 = xmmword_20B9960;
  strcpy((char *)qword_2575E50, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2575E68 = (uint64_t)operator new(0x28uLL);
  xmmword_2575E70 = xmmword_20B93A0;
  strcpy((char *)qword_2575E68, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2575E80 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_2575E88 = xmmword_20E1380;
  strcpy((char *)qword_2575E80, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2575E98 = (uint64_t)operator new(0x30uLL);
  xmmword_2575EA0 = xmmword_20B93C0;
  strcpy((char *)qword_2575E98, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2575EB0 = (uint64_t)operator new(0x38uLL);
  unk_2575EB8 = xmmword_20B9A60;
  strcpy((char *)qword_2575EB0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2575EC8 = (uint64_t)operator new(0x30uLL);
  xmmword_2575ED0 = xmmword_20E1380;
  strcpy((char *)qword_2575EC8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2575EE0 = (uint64_t)operator new(0x28uLL);
  unk_2575EE8 = xmmword_20B9960;
  strcpy((char *)qword_2575EE0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2575EF8 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_2575F00 = xmmword_20B93D0;
  strcpy((char *)qword_2575EF8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2575F10 = (uint64_t)operator new(0x20uLL);
  unk_2575F18 = v275;
  strcpy((char *)qword_2575F10, "Walking_Distance_Chain_Spoken");
  qword_2575F28 = (uint64_t)operator new(0x20uLL);
  xmmword_2575F30 = v275;
  strcpy((char *)qword_2575F28, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_2575F40 = (uint64_t)v3;
  unk_2575F48 = v280;
  *(_OWORD *)uint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_2575F58 = (uint64_t)operator new(0x28uLL);
  xmmword_2575F60 = v269;
  strcpy((char *)qword_2575F58, "Distance_Cross_The_Street_Spoken");
  byte_2575F87 = 22;
  strcpy((char *)&xmmword_2575F70, "Walking_Continue_Cross");
  byte_2575F9F = 14;
  strcpy((char *)&qword_2575F88, "Continue_Cross");
  byte_2575FB7 = 5;
  strcpy((char *)&dword_2575FA0, "Cross");
  byte_2575FCF = 19;
  strcpy((char *)&xmmword_2575FB8, "Cross_Street_Spoken");
  byte_2575FE7 = 17;
  strcpy((char *)&xmmword_2575FD0, "Cross_Road_Spoken");
  byte_2575FFF = 20;
  strcpy((char *)&xmmword_2575FE8, "Use_Crosswalk_Spoken");
  byte_2576017 = 15;
  strcpy((char *)&qword_2576000, "Distance_Spoken");
  byte_257602F = 19;
  strcpy((char *)&xmmword_2576018, "Distance_And_Spoken");
  byte_2576047 = 21;
  strcpy((char *)&xmmword_2576030, "Continue_Stage_Spoken");
  byte_257605F = 13;
  qmemcpy(&qword_2576048, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_2575C50);
  if (qword_2575C50 >= 0) {
    size_t v5 = HIBYTE(qword_2575C50);
  }
  else {
    size_t v5 = unk_2575C48;
  }
  unint64_t v6 = v5 + 13;
  byte_2576055 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    int64_t v10 = operator new(v8 + 1);
    qword_2576068 = v5 + 13;
    unk_2576070 = v9 | 0x8000000000000000;
    qword_2576060 = (uint64_t)v10;
    *int64_t v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_2576068) = 0;
    WORD1(qword_2576068) = 0;
    HIDWORD(qword_2576068) = 0;
    unk_2576070 = 0;
    byte_2576077 = v5 + 13;
    uint64_t v7 = (char *)&qword_2576068 + 5;
    strcpy((char *)&qword_2576060, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    int64_t v11 = &qword_2575C40;
  }
  else {
    int64_t v11 = (uint64_t *)qword_2575C40;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_2575897;
  if (byte_2575897 >= 0) {
    size_t v13 = byte_2575897;
  }
  else {
    size_t v13 = qword_2575888;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    int64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *int64_t v18 = qword_2576048;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_2576048 + 5);
    int64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_2576048 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_2576048;
    int64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    int v19 = &qword_2575880;
  }
  else {
    int v19 = (uint64_t *)qword_2575880;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    int v20 = (const std::string::value_type *)&qword_2575C40;
  }
  else {
    int v20 = (const std::string::value_type *)qword_2575C40;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2576088 = v21->__r_.__value_.__r.__words[2];
  xmmword_2576078 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25760A7 = 5;
  strcpy((char *)&dword_2576090, "Merge");
  qword_25760A8 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  *(_OWORD *)algn_25760B0 = xmmword_20B8E90;
  strcpy((char *)qword_25760A8, "Continue_Freeway_Spoken_Primary");
  byte_25760D7 = 8;
  strcpy((char *)&qword_25760C0, "Starting");
  byte_25760EF = 14;
  strcpy((char *)&qword_25760D8, "Starting_Route");
  byte_2576107 = 14;
  strcpy((char *)&qword_25760F0, "Resuming_Route");
  byte_257611F = 16;
  strcpy((char *)&xmmword_2576108, "Continuing_Route");
  byte_2576137 = 9;
  word_2576128 = 112;
  qword_2576120 = *(void *)&v264[48];
  strcpy(&byte_257614F, "\nEnding");
  strcpy((char *)&word_2576140, "op");
  qword_2576138 = *(void *)&v268[0];
  byte_2576167 = 6;
  strcpy((char *)&qword_2576168, "_Destination");
  byte_257617F = 12;
  byte_2576197 = 15;
  strcpy((char *)&qword_2576180, "_At_Destination");
  std::operator+<char>();
  qword_25761B0 = (uint64_t)operator new(0x20uLL);
  unk_25761B8 = v279;
  strcpy((char *)qword_25761B0, "Spoken_Ending_At_Parking");
  qword_25761C8 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_25761D0 = xmmword_20B9800;
  strcpy((char *)qword_25761C8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25761E0, "Sign_Ending_At_Parking");
  HIBYTE(word_25761F6) = 22;
  byte_257620F = 4;
  strcpy((char *)&dword_25761F8, "Home");
  byte_2576227 = 4;
  strcpy((char *)&dword_2576210, "Work");
  byte_257623F = 8;
  strcpy((char *)&qword_2576228, "Business");
  byte_2576257 = 4;
  strcpy((char *)&dword_2576240, "Name");
  byte_257626F = 13;
  strcpy((char *)&qword_2576258, "Other_Contact");
  byte_2576287 = 11;
  strcpy((char *)&qword_2576270, "ContactHome");
  byte_257629F = 11;
  *(_DWORD *)((char *)&qword_2576288 + 7) = 1802661719;
  byte_25762B7 = 7;
  *(int *)((char *)&dword_25762A0 + 3) = 1936942450;
  dword_25762A0 = 1919181889;
  strcpy((char *)&xmmword_25762B8, "Discoverability_Prompt");
  HIBYTE(word_25762CE) = 22;
  byte_25762E7 = 6;
  dword_25762D0 = 1634878303;
  word_25762D4 = 26739;
  byte_25762FF = 8;
  qword_25762E8 = 0x697269535F6F4E5FLL;
  byte_2576317 = 9;
  strcpy((char *)&qword_2576300, "_CityName");
  byte_257632F = 8;
  qword_2576318 = 0x636972656E65475FLL;
  int v23 = byte_25760D7;
  if (byte_25760D7 >= 0) {
    size_t v24 = byte_25760D7;
  }
  else {
    size_t v24 = qword_25760C8;
  }
  LODWORD(v270) = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v25 = byte_2575417;
  }
  else {
    size_t v25 = unk_2575408;
  }
  qword_2576288 = *(void *)"ContactWork";
  byte_2576293 = 0;
  byte_25762A7 = 0;
  byte_25762D6 = 0;
  byte_25762F0 = 0;
  byte_2576320 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    int64_t v27 = &qword_2576330;
    qword_2576338 = 0;
    unk_2576340 = 0;
    qword_2576330 = 0;
    byte_2576347 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  int64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_2576338 = v25 + v24;
  unk_2576340 = v91 | 0x8000000000000000;
  qword_2576330 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      std::string::size_type v28 = &qword_25760C0;
    }
    else {
      std::string::size_type v28 = (uint64_t *)qword_25760C0;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  int64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      uint64_t v30 = &qword_2575400;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_2575400;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_257617F;
  if (byte_257617F >= 0) {
    size_t v32 = byte_257617F;
  }
  else {
    size_t v32 = qword_2576170;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    int v34 = &qword_2576348;
    qword_2576350 = 0;
    unk_2576358 = 0;
    qword_2576348 = 0;
    byte_257635F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  int v34 = (uint64_t *)operator new(v92 + 1);
  qword_2576350 = v32 + v24;
  unk_2576358 = v93 | 0x8000000000000000;
  qword_2576348 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      int v35 = &qword_25760C0;
    }
    else {
      int v35 = (uint64_t *)qword_25760C0;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  int64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      std::string::size_type v37 = &qword_2576168;
    }
    else {
      std::string::size_type v37 = (uint64_t *)qword_2576168;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_2576360 = (uint64_t)operator new(0x19uLL);
  unk_2576368 = v280;
  strcpy((char *)qword_2576360, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    std::string::size_type v38 = &qword_2576378;
    qword_2576380 = 0;
    unk_2576388 = 0;
    qword_2576378 = 0;
    byte_257638F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  std::string::size_type v38 = (uint64_t *)operator new(v94 + 1);
  qword_2576380 = v32 + v24;
  unk_2576388 = v95 | 0x8000000000000000;
  qword_2576378 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      std::string::size_type v39 = &qword_25760C0;
    }
    else {
      std::string::size_type v39 = (uint64_t *)qword_25760C0;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  int v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      std::string::size_type v41 = &qword_2576168;
    }
    else {
      std::string::size_type v41 = (uint64_t *)qword_2576168;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2576390, "{NewBatteryPercentage}");
  HIBYTE(word_25763A6) = 22;
  qword_25763A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25763B0 = v273;
  strcpy((char *)qword_25763A8, "{OriginalBatteryPercentage}");
  byte_25763D7 = 19;
  strcpy((char *)&xmmword_25763C0, "_Arrival_Percentage");
  int v42 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v43 = byte_2576167;
  }
  else {
    size_t v43 = qword_2576158;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      std::string v46 = &qword_2576150;
    }
    else {
      std::string v46 = (uint64_t *)qword_2576150;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      std::string v48 = &qword_2575400;
    }
    else {
      std::string v48 = (uint64_t *)qword_2575400;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  char v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25763E8 = v49->__r_.__value_.__r.__words[2];
  xmmword_25763D8 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v52 = byte_2576167;
  }
  else {
    size_t v52 = qword_2576158;
  }
  int v53 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v54 = byte_2575417;
  }
  else {
    size_t v54 = unk_2575408;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    uint64_t v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  uint64_t v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      std::string v57 = &qword_2576150;
    }
    else {
      std::string v57 = (uint64_t *)qword_2576150;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  std::string v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      uint64_t v59 = &qword_2575400;
    }
    else {
      uint64_t v59 = (uint64_t *)qword_2575400;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_2575447 >= 0) {
    unsigned __int8 v60 = (const std::string::value_type *)&qword_2575430;
  }
  else {
    unsigned __int8 v60 = (const std::string::value_type *)qword_2575430;
  }
  if (byte_2575447 >= 0) {
    std::string::size_type v61 = byte_2575447;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_2575438;
  }
  unsigned __int8 v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_2576400 = v64->__r_.__value_.__r.__words[2];
  xmmword_25763F0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v67 = byte_2576167;
  }
  else {
    size_t v67 = qword_2576158;
  }
  int v68 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v69 = byte_2575417;
  }
  else {
    size_t v69 = unk_2575408;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      unsigned int v72 = &qword_2576150;
    }
    else {
      unsigned int v72 = (uint64_t *)qword_2576150;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  unsigned int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      unsigned int v74 = &qword_2575400;
    }
    else {
      unsigned int v74 = (uint64_t *)qword_2575400;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  unsigned int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_2576418 = v75->__r_.__value_.__r.__words[2];
  xmmword_2576408 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v78 = byte_2576167;
  }
  else {
    size_t v78 = qword_2576158;
  }
  int v79 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v80 = byte_2575417;
  }
  else {
    size_t v80 = unk_2575408;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_2576428 = 0;
    unk_2576430 = 0;
    qword_2576420 = 0;
    long long v82 = &qword_2576420;
    byte_2576437 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  long long v82 = (uint64_t *)operator new(v102 + 1);
  qword_2576428 = v80 + v78;
  unk_2576430 = v103 | 0x8000000000000000;
  qword_2576420 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      long long v83 = &qword_2576150;
    }
    else {
      long long v83 = (uint64_t *)qword_2576150;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  int v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      BOOL v85 = &qword_2575400;
    }
    else {
      BOOL v85 = (uint64_t *)qword_2575400;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_2576437;
  if (byte_2576437 >= 0) {
    size_t v87 = byte_2576437;
  }
  else {
    size_t v87 = qword_2576428;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    unsigned int v89 = (uint64_t *)operator new(v104 + 1);
    qword_2576440 = v87 + 5;
    unk_2576448 = v105 | 0x8000000000000000;
    qword_2576438 = (uint64_t)v89;
  }
  else
  {
    unsigned int v89 = &qword_2576438;
    qword_2576440 = 0;
    unk_2576448 = 0;
    qword_2576438 = 0;
    byte_257644F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_2576420;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_2576420;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v108 = byte_2576167;
  }
  else {
    size_t v108 = qword_2576158;
  }
  int v109 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v110 = byte_2575417;
  }
  else {
    size_t v110 = unk_2575408;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      v113 = &qword_2576150;
    }
    else {
      v113 = (uint64_t *)qword_2576150;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_2575400;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_2575400;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_2576460 = v116->__r_.__value_.__r.__words[2];
  xmmword_2576450 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_2576460);
  if (qword_2576460 >= 0) {
    size_t v119 = HIBYTE(qword_2576460);
  }
  else {
    size_t v119 = *((void *)&xmmword_2576450 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_2576470 = v119 + 6;
    unk_2576478 = v125 | 0x8000000000000000;
    qword_2576468 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_2576468;
    qword_2576470 = 0;
    unk_2576478 = 0;
    qword_2576468 = 0;
    byte_257647F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_2576450;
  }
  else {
    int v126 = (long long *)xmmword_2576450;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v128 = byte_2576167;
  }
  else {
    size_t v128 = qword_2576158;
  }
  int v129 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v130 = byte_2575417;
  }
  else {
    size_t v130 = unk_2575408;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      v133 = &qword_2576150;
    }
    else {
      v133 = (uint64_t *)qword_2576150;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      v135 = &qword_2575400;
    }
    else {
      v135 = (uint64_t *)qword_2575400;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_2575BDF >= 0) {
    std::string::size_type v136 = (const std::string::value_type *)&qword_2575BC8;
  }
  else {
    std::string::size_type v136 = (const std::string::value_type *)qword_2575BC8;
  }
  if (byte_2575BDF >= 0) {
    std::string::size_type v137 = byte_2575BDF;
  }
  else {
    std::string::size_type v137 = unk_2575BD0;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2576490 = v138->__r_.__value_.__r.__words[2];
  xmmword_2576480 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_2576167;
  if (byte_2576167 >= 0) {
    size_t v141 = byte_2576167;
  }
  else {
    size_t v141 = qword_2576158;
  }
  int v142 = byte_2575417;
  if (byte_2575417 >= 0) {
    size_t v143 = byte_2575417;
  }
  else {
    size_t v143 = unk_2575408;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_2576150;
    }
    else {
      v146 = (uint64_t *)qword_2576150;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_2575400;
    }
    else {
      v148 = (uint64_t *)qword_2575400;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_2575447 >= 0) {
    std::string::size_type v149 = (const std::string::value_type *)&qword_2575430;
  }
  else {
    std::string::size_type v149 = (const std::string::value_type *)qword_2575430;
  }
  if (byte_2575447 >= 0) {
    std::string::size_type v150 = byte_2575447;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_2575438;
  }
  long long v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_2575BDF >= 0) {
    std::string::size_type v153 = (const std::string::value_type *)&qword_2575BC8;
  }
  else {
    std::string::size_type v153 = (const std::string::value_type *)qword_2575BC8;
  }
  if (byte_2575BDF >= 0) {
    std::string::size_type v154 = byte_2575BDF;
  }
  else {
    std::string::size_type v154 = unk_2575BD0;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25764A8 = v155->__r_.__value_.__r.__words[2];
  xmmword_2576498 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25764C7 = 16;
  strcpy((char *)&xmmword_25764B0, "Use_NACS_Adapter");
  byte_25764DF = 16;
  strcpy(byte_25764C8, "Start_Route_Sign");
  qword_25764E0 = (uint64_t)operator new(0x20uLL);
  unk_25764E8 = v276;
  strcpy((char *)qword_25764E0, "Start_Route_Spoken_Primary");
  int v157 = byte_2574B77;
  if (byte_2574B77 >= 0) {
    size_t v158 = byte_2574B77;
  }
  else {
    size_t v158 = qword_2574B68;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25764F8;
    qword_2576500 = 0;
    unk_2576508 = 0;
    qword_25764F8 = 0;
    byte_257650F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_2574B60;
    }
    else {
      v167 = (uint64_t *)qword_2574B60;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_2576500 = v158 + 27;
  unk_2576508 = v166 | 0x8000000000000000;
  qword_25764F8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_2576527, "\t_Two_Lanes");
  strcpy((char *)&qword_2576510, "_One_Lane");
  strcpy(&byte_257653F, "\n_Three_Lanes");
  byte_2576557 = 12;
  byte_257656F = 11;
  strcpy((char *)&qword_2576558, "_Four_Lanes");
  byte_2576587 = 11;
  strcpy((char *)&qword_2576570, "_Five_Lanes");
  strcpy(&byte_257659F, "\n_Seven_Lanes");
  strcpy((char *)&qword_2576588, "_Six_Lanes");
  byte_25765B7 = 12;
  byte_25765CF = 12;
  strcpy((char *)&qword_25765B8, "_Eight_Lanes");
  byte_25765E7 = 12;
  strcpy((char *)&qword_25765D0, "_Second_Lane");
  byte_25765FF = 11;
  strcpy((char *)&qword_25765E8, "_Third_Lane");
  byte_2576617 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_2576600, "_Second_Third_Lanes");
  byte_257662F = 4;
  strcpy((char *)&dword_2576618, "Left");
  byte_2576647 = 5;
  byte_2576634 = 116;
  dword_2576630 = 1751607634;
  byte_2576635 = 0;
  byte_257665F = 6;
  strcpy((char *)&dword_2576648, "Middle");
  BYTE1(qword_2576670) = 0;
  WORD1(qword_2576670) = 0;
  HIDWORD(qword_2576670) = 0x10000000;
  strcpy((char *)dword_2576660, "Left_Second_Lane");
  BYTE1(qword_2576688) = 0;
  WORD1(qword_2576688) = 0;
  HIDWORD(qword_2576688) = 285212672;
  strcpy((char *)&dword_2576678, "Right_Second_Lan");
  qword_25766A0 = 0xF00000000000000;
  strcpy((char *)&dword_2576690, "Left_Third_Lane");
  qword_25766B8 = 0x1000000000000000;
  byte_25766AC = 116;
  dword_25766A8 = 1751607634;
  dword_25766B4 = 1701732684;
  unk_25766AD = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_25766C0 = (uint64_t)v168;
  unk_25766C8 = v280;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  int v169 = (char *)operator new(0x20uLL);
  qword_25766D8 = (uint64_t)v169;
  xmmword_25766E0 = v279;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_2576707 = 5;
  strcpy((char *)&dword_25766F0, "_Stay");
  byte_257671F = 13;
  strcpy((char *)&qword_2576708, "Continue_Sign");
  byte_2576737 = 8;
  strcpy((char *)&qword_2576720, "Continue");
  int v170 = byte_2575BF7;
  if (byte_2575BF7 >= 0) {
    size_t v171 = byte_2575BF7;
  }
  else {
    size_t v171 = qword_2575BE8;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_2576740 = v171 + 8;
    qword_2576748 = v175 | 0x8000000000000000;
    qword_2576738 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_2576748 = 0;
    HIBYTE(qword_2576748) = v171 + 8;
    qword_2576738 = 0x65756E69746E6F43;
    qword_2576740 = 0;
    uint64_t v173 = &qword_2576740;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_2575BE0;
  }
  else {
    int v177 = (uint64_t *)qword_2575BE0;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_2575C50);
  if (qword_2575C50 >= 0) {
    size_t v179 = HIBYTE(qword_2575C50);
  }
  else {
    size_t v179 = unk_2575C48;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_2576758 = v179 + 8;
    qword_2576760 = v183 | 0x8000000000000000;
    qword_2576750 = (uint64_t)v184;
    void *v184 = qword_2576720;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_2576760 = 0;
    HIBYTE(qword_2576760) = v179 + 8;
    qword_2576750 = qword_2576720;
    qword_2576758 = 0;
    uint64_t v181 = &qword_2576758;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_2575C40;
  }
  else {
    v185 = (uint64_t *)qword_2575C40;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_2576768, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_2576797 = 13;
  strcpy((char *)&qword_2576780, "{instruction}");
  byte_25767AF = 20;
  strcpy(byte_2576798, "{primaryInstruction}");
  strcpy((char *)&xmmword_25767B0, "{secondaryInstruction}");
  HIBYTE(word_25767C6) = 22;
  qword_25767C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25767D0 = v278;
  strcpy((char *)qword_25767C8, "{andSecondaryInstruction}");
  qword_25767E0 = (uint64_t)operator new(0x20uLL);
  unk_25767E8 = v279;
  strcpy((char *)qword_25767E0, "{toSecondaryInstruction}");
  byte_257680F = 21;
  strcpy(byte_25767F8, "{continueInstruction}");
  qword_2576810 = (uint64_t)operator new(0x20uLL);
  unk_2576818 = v276;
  strcpy((char *)qword_2576810, "{thenSecondaryInstruction}");
  byte_257683F = 14;
  strcpy((char *)&qword_2576828, "{instruction1}");
  byte_2576857 = 14;
  strcpy((char *)&qword_2576840, "{instruction2}");
  strcpy(&byte_257686F, "\n{nextDistance}");
  strcpy((char *)&qword_2576858, "{distance}");
  byte_2576887 = 14;
  byte_257689F = 16;
  strcpy(byte_2576888, "{valid_distance}");
  strcpy(&byte_25768B7, "\n{valid_distance}");
  strcpy((char *)&qword_25768A0, "{distance}");
  byte_25768CF = 16;
  byte_25768E7 = 15;
  strcpy((char *)&qword_25768D0, "{ClimbDistance}");
  byte_25768FF = 17;
  strcpy(byte_25768E8, "{DescentDistance}");
  byte_2576917 = 13;
  strcpy((char *)&qword_2576900, "{nonBrkSpace}");
  byte_257692F = 9;
  strcpy((char *)&qword_2576918, "{newLine}");
  byte_2576947 = 6;
  word_2576934 = -24382;
  dword_2576930 = -1211981630;
  byte_2576936 = 0;
  byte_257695F = 2;
  word_2576948 = -24382;
  byte_257694A = 0;
  byte_2576977 = 1;
  word_2576960 = 10;
  byte_257698F = 1;
  word_2576978 = 32;
  byte_25769A7 = 2;
  strcpy((char *)&word_2576990, "\n\n");
  strcpy(&byte_25769BF, "\t{TowardShield1}");
  strcpy((char *)&qword_25769A8, "{Shield1}");
  byte_25769D7 = 15;
  strcpy(&byte_25769EF, "\t{TowardShield2}");
  strcpy((char *)&qword_25769D8, "{Shield2}");
  byte_2576A07 = 15;
  byte_2576A1F = 12;
  strcpy((char *)&qword_2576A08, "{Direction1}");
  byte_2576A37 = 12;
  strcpy((char *)&qword_2576A20, "{Direction2}");
  byte_2576A4F = 18;
  strcpy((char *)&xmmword_2576A38, "{TowardDirection1}");
  byte_2576A67 = 18;
  strcpy((char *)&xmmword_2576A50, "{TowardDirection2}");
  byte_2576A7F = 7;
  strcpy((char *)&dword_2576A68, "{Icon1}");
  byte_2576A97 = 7;
  strcpy((char *)&dword_2576A80, "{Icon2}");
  byte_2576A98[23] = 14;
  strcpy(byte_2576A98, "{Intersection}");
  byte_2576AC7 = 6;
  strcpy((char *)&xmmword_2576AB0, "{Road}");
  byte_2576ADF = 7;
  strcpy((char *)&dword_2576AC8, "{Road1}");
  byte_2576AF7 = 7;
  strcpy((char *)&xmmword_2576AE0, "{Road2}");
  strcpy(&byte_2576B0F, "\n{Freeway}");
  strcpy((char *)&qword_2576AF8, "{Elevator}");
  strcpy(&byte_2576B27, "\t{Ferry}");
  byte_2576B3F = 7;
  byte_2576B57 = 13;
  strcpy((char *)&xmmword_2576B40, "{ShuttleName}");
  byte_2576B6F = 11;
  strcpy((char *)&qword_2576B58, "{Signpost1}");
  byte_2576B87 = 11;
  strcpy((char *)&xmmword_2576B70, "{Signpost2}");
  byte_2576B9F = 12;
  strcpy((char *)&xmmword_2576B88, "{ExitNumber}");
  strcpy(&byte_2576BB7, "\t{Name}");
  strcpy((char *)&xmmword_2576BA0, "{Address}");
  byte_2576BCF = 6;
  byte_2576BE7 = 11;
  strcpy((char *)&xmmword_2576BD0, "{PlaceName}");
  byte_2576BFF = 14;
  strcpy((char *)&xmmword_2576BE8, "{ElevatorName}");
  byte_2576C17 = 15;
  strcpy((char *)&xmmword_2576C00, "{EscalatorName}");
  byte_2576C2F = 12;
  strcpy((char *)&xmmword_2576C18, "{StairsName}");
  strcpy(&byte_2576C47, "\n{BridgeName}");
  strcpy((char *)&xmmword_2576C30, "{RampName}");
  byte_2576C5F = 12;
  byte_2576C77 = 12;
  strcpy((char *)&xmmword_2576C60, "{TunnelName}");
  byte_2576C8F = 13;
  strcpy((char *)&xmmword_2576C78, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2576A98;
  long long v283 = xmmword_2576AB0;
  uint64_t v284 = unk_2576AC0;
  *(_OWORD *)v285 = *(_OWORD *)&dword_2576AC8;
  uint64_t v286 = unk_2576AD8;
  long long v287 = xmmword_2576AE0;
  uint64_t v288 = unk_2576AF0;
  *(_OWORD *)long long v289 = *(_OWORD *)&qword_2576AF8;
  uint64_t v290 = unk_2576B08;
  uint64_t v292 = unk_2576B20;
  long long v291 = xmmword_2576B10;
  long long v293 = *(_OWORD *)&dword_2576B28;
  uint64_t v294 = unk_2576B38;
  uint64_t v296 = unk_2576B50;
  long long __p = xmmword_2576B40;
  long long v297 = *(_OWORD *)&qword_2576B58;
  uint64_t v298 = unk_2576B68;
  uint64_t v300 = unk_2576B80;
  long long v299 = xmmword_2576B70;
  long long v301 = xmmword_2576B88;
  long long v303 = xmmword_2576BA0;
  uint64_t v302 = unk_2576B98;
  uint64_t v304 = unk_2576BB0;
  long long v305 = xmmword_2576BB8;
  long long v307 = xmmword_2576BD0;
  uint64_t v306 = unk_2576BC8;
  uint64_t v308 = unk_2576BE0;
  long long v309 = xmmword_2576BE8;
  long long v311 = xmmword_2576C00;
  uint64_t v310 = unk_2576BF8;
  uint64_t v312 = unk_2576C10;
  long long v313 = xmmword_2576C18;
  long long v315 = xmmword_2576C30;
  uint64_t v314 = unk_2576C28;
  uint64_t v316 = unk_2576C40;
  long long v317 = xmmword_2576C48;
  long long v319 = xmmword_2576C60;
  uint64_t v318 = unk_2576C58;
  uint64_t v320 = unk_2576C70;
  uint64_t v322 = unk_2576C88;
  long long v321 = xmmword_2576C78;
  sub_4BDC0C(qword_2576C90, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2576CA8 = (uint64_t)operator new(0x19uLL);
  unk_2576CB0 = v280;
  strcpy((char *)qword_2576CA8, "From_User_Location_List");
  byte_2576CD7 = 20;
  strcpy(byte_2576CC0, "Origin_Waypoint_List");
  qword_2576CD8 = (uint64_t)operator new(0x20uLL);
  unk_2576CE0 = v276;
  strcpy((char *)qword_2576CD8, "Intermediate_Waypoint_List");
  unk_2576CF0 = operator new(0x20uLL);
  unk_2576CF8 = v278;
  strcpy(unk_2576CF0, "Destination_Waypoint_List");
  byte_2576D1F = 15;
  strcpy(byte_2576D08, "{toDestination}");
  byte_2576D37 = 13;
  strcpy((char *)&xmmword_2576D20, "{Destination}");
  byte_2576D4F = 7;
  strcpy(byte_2576D38, "To_Home");
  byte_2576D67 = 14;
  strcpy(byte_2576D50, "To_ContactHome");
  byte_2576D7F = 7;
  strcpy(byte_2576D68, "To_Work");
  byte_2576D97 = 14;
  strcpy(byte_2576D80, "To_ContactWork");
  strcpy(&byte_2576DAF, "\nTo_Business");
  strcpy(byte_2576D98, "To_Address");
  byte_2576DC7 = 11;
  byte_2576DDF = 16;
  strcpy(byte_2576DC8, "To_Other_Contact");
  strcpy(&byte_2576DF7, "\tTo_ContactSchool");
  strcpy(byte_2576DE0, "To_School");
  byte_2576E0F = 16;
  byte_2576E27 = 17;
  strcpy(algn_2576E10, "To_PersonLocation");
  qword_2576E28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2576E30 = v277;
  strcpy((char *)qword_2576E28, "To_ContactCustomLabelAddress");
  byte_2576E57 = 7;
  strcpy((char *)&dword_2576E40, "At_Home");
  byte_2576E6F = 14;
  strcpy((char *)&qword_2576E58, "At_ContactHome");
  byte_2576E87 = 7;
  strcpy((char *)&dword_2576E70, "At_Work");
  byte_2576E9F = 14;
  strcpy((char *)&qword_2576E88, "At_ContactWork");
  strcpy(&byte_2576EB7, "\nAt_Business");
  strcpy((char *)&qword_2576EA0, "At_Address");
  byte_2576ECF = 11;
  byte_2576EE7 = 16;
  strcpy(algn_2576ED0, "At_Other_Contact");
  byte_2576EFF = 4;
  strcpy((char *)&dword_2576EE8, "Home");
  byte_2576F17 = 11;
  strcpy((char *)&qword_2576F00 + 7, "Home");
  qword_2576F00 = *(void *)&v264[16];
  byte_2576F2F = 4;
  strcpy((char *)&dword_2576F18, "Work");
  byte_2576F47 = 11;
  strcpy((char *)&qword_2576F30 + 7, "Work");
  qword_2576F30 = *(void *)v264;
  byte_2576F5F = 7;
  strcpy((char *)&dword_2576F48, "Address");
  byte_2576F77 = 8;
  strcpy((char *)&qword_2576F60, "Business");
  byte_2576F8F = 13;
  qword_2576F78 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_2576F78 + 5) = *(void *)&v264[32];
  byte_2576F85 = 0;
  byte_2576FA7 = 6;
  strcpy((char *)&dword_2576F90, "School");
  byte_2576FBF = 13;
  strcpy((char *)&qword_2576FA8, "ContactSchool");
  byte_2576FD7 = 14;
  strcpy((char *)&qword_2576FC0, "PersonLocation");
  qword_2576FD8 = (uint64_t)operator new(0x20uLL);
  xmmword_2576FE0 = v278;
  strcpy((char *)qword_2576FD8, "ContactCustomLabelAddress");
  if (byte_2576D37 < 0)
  {
    sub_4200(&xmmword_2576FF0, (void *)xmmword_2576D20, *((unint64_t *)&xmmword_2576D20 + 1));
  }
  else
  {
    xmmword_2576FF0 = xmmword_2576D20;
    qword_2577000 = unk_2576D30;
  }
  byte_257701F = 16;
  strcpy((char *)&xmmword_2577008, "{PrevExitNumber}");
  byte_2577037 = 10;
  strcpy((char *)&qword_2577020, "{PrevRoad}");
  qword_2577038 = (uint64_t)operator new(0x20uLL);
  unk_2577040 = v279;
  strcpy((char *)qword_2577038, "{RouteTotalExpectedTime}");
  byte_2577067 = 18;
  strcpy(byte_2577050, "{ChargePercentage}");
  qword_2577068 = (uint64_t)operator new(0x20uLL);
  unk_2577070 = v273;
  strcpy((char *)qword_2577068, "{RemainingChargePercentage}");
  byte_2577097 = 16;
  strcpy(byte_2577080, "{ChargeDuration}");
  byte_25770AF = 15;
  strcpy((char *)&qword_2577098, "{ConnectorType}");
  byte_25770C7 = 19;
  strcpy(byte_25770B0, "{ChargeStationName}");
  byte_25770DF = 7;
  strcpy((char *)&dword_25770C8, "{Power}");
  byte_25770F7 = 13;
  strcpy((char *)&qword_25770E0, "{VehicleName}");
  byte_257710F = 18;
  strcpy((char *)&xmmword_25770F8, "{AreaIncidentName}");
  byte_2577127 = 14;
  strcpy((char *)&qword_2577110, "{AreaIncident}");
  byte_257713F = 16;
  strcpy((char *)&xmmword_2577128, "{AffectedRegion}");
  byte_2577157 = 21;
  strcpy(byte_2577140, "{AreaIncidentWeblink}");
  byte_257716F = 20;
  strcpy((char *)&xmmword_2577158, "{AreaIncidentAgency}");
  byte_2577187 = 11;
  strcpy((char *)&qword_2577170, "{IssueTime}");
  byte_257719F = 12;
  strcpy((char *)&qword_2577188, "{UpdateTime}");
  byte_25771B7 = 11;
  strcpy((char *)&qword_25771A0, "{IssueDate}");
  byte_25771CF = 12;
  strcpy((char *)&qword_25771B8, "{UpdateDate}");
  qword_25771D0 = (uint64_t)operator new(0x20uLL);
  unk_25771D8 = v279;
  strcpy((char *)qword_25771D0, "{AreaIncidentDataSource}");
  byte_25771FF = 13;
  strcpy((char *)&qword_25771E8, "{AreaHectare}");
  byte_2577217 = 10;
  strcpy((char *)&qword_2577200, "{AreaAcre}");
  qword_2577218 = (uint64_t)operator new(0x20uLL);
  unk_2577220 = v275;
  strcpy((char *)qword_2577218, "{WildfirePercentageContained}");
  qword_2577230 = (uint64_t)operator new(0x28uLL);
  unk_2577238 = v268[2];
  strcpy((char *)qword_2577230, "{WildfireExpectedContainmentDate}");
  qword_2577248 = (uint64_t)operator new(0x20uLL);
  unk_2577250 = v277;
  strcpy((char *)qword_2577248, "{ServerRecommendedRouteName}");
  qword_2577260 = (uint64_t)operator new(0x20uLL);
  unk_2577268 = v277;
  strcpy((char *)qword_2577260, "{ServerNonRecommendedRoute1}");
  qword_2577278 = (uint64_t)operator new(0x20uLL);
  unk_2577280 = v277;
  strcpy((char *)qword_2577278, "{ServerNonRecommendedRoute2}");
  byte_25772A7 = 12;
  strcpy((char *)&qword_2577290, "{ClientDest}");
  byte_25772BF = 6;
  strcpy((char *)&dword_25772A8, "{Name}");
  qword_25772C0 = (uint64_t)operator new(0x20uLL);
  unk_25772C8 = v268[1];
  strcpy((char *)qword_25772C0, "ProactiveAlert_FasterRouteTitle");
  qword_25772D8 = (uint64_t)operator new(0x20uLL);
  unk_25772E0 = v276;
  strcpy((char *)qword_25772D8, "ProactiveAlert_RoadClosure");
  qword_25772F0 = (uint64_t)operator new(0x30uLL);
  unk_25772F8 = v271;
  strcpy((char *)qword_25772F0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_2577308 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2577310 = v274;
  strcpy((char *)qword_2577308, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_2577320 = (uint64_t)operator new(0x28uLL);
  unk_2577328 = v274;
  strcpy((char *)qword_2577320, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_2577338 = (uint64_t)operator new(0x28uLL);
  unk_2577340 = v274;
  strcpy((char *)qword_2577338, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_2577350 = (uint64_t)operator new(0x30uLL);
  unk_2577358 = xmmword_20B93B0;
  strcpy((char *)qword_2577350, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_257737F = 17;
  strcpy(byte_2577368, "Proactive_Driving");
  strcpy(&byte_2577397, "\n{RouteName}");
  strcpy((char *)&qword_2577380, "_RouteName");
  byte_25773AF = 11;
  qword_25773B0 = (uint64_t)operator new(0x28uLL);
  unk_25773B8 = v268[2];
  strcpy((char *)qword_25773B0, "Pass_Traffic_Light_Spoken_Primary");
  qword_25773C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25773D0 = v275;
  strcpy((char *)qword_25773C8, "Pass_Stop_Sign_Spoken_Primary");
  *(void *)&algn_25773D0[16] = operator new(0x20uLL);
  *(_OWORD *)&algn_25773D0[24] = v268[0];
  strcpy(*(char **)&algn_25773D0[16], "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_257740F, "\nBannerBody");
  strcpy(&algn_25773D0[40], "BannerHead");
  strcpy(&byte_2577427, "\nBannerDescription");
  byte_257743F = 17;
  strcpy(&byte_2577457, "\n_Incident");
  strcpy((char *)&qword_2577440, "VoiceAlert");
  strcpy(&byte_257746F, "\t_Area_Incident");
  byte_2577487 = 14;
  byte_257749F = 15;
  strcpy((char *)&qword_2577488, "_Area_Incidents");
  strcpy(&byte_25774B7, "\t_Crash");
  strcpy((char *)&qword_25774A0, "_Accident");
  byte_25774CF = 6;
  byte_25774E7 = 16;
  strcpy((char *)&xmmword_25774D0, "_Congestion_Zone");
  strcpy(&byte_25774FF, "\n_Environmental_Zone");
  strcpy((char *)&qword_25774E8, "_Toll_Zone");
  byte_2577517 = 19;
  BYTE1(qword_2577528) = 116;
  WORD1(qword_2577528) = 0;
  HIDWORD(qword_2577528) = 301989888;
  strcpy(byte_2577530, "_Construction");
  strcpy((char *)&qword_2577518, "_Incident_Accide");
  byte_2577547 = 13;
  byte_257755F = 7;
  strcpy((char *)&dword_2577548, "_Hazard");
  byte_2577577 = 12;
  strcpy((char *)&qword_2577560, "_LaneClosure");
  byte_257758F = 12;
  strcpy((char *)&qword_2577578, "_LaneTrailer");
  qmemcpy(&byte_25775A7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2577590, "_Shoulder");
  qword_25775B8 = 0x1500007200000000;
  *(void *)algn_25775B4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25775C0, "_Causing_Traffic_Delay");
  HIBYTE(word_25775D6) = 22;
  byte_25775EF = 6;
  strcpy((char *)&dword_25775D8, "_Timed");
  byte_2577607 = 12;
  strcpy((char *)&qword_25775F0, "_HasDistance");
  byte_257761F = 8;
  strcpy((char *)&qword_2577608, "_Closure");
  strcpy(&byte_2577637, "\n_BadRoad");
  strcpy((char *)&qword_2577620, "_NoReroute");
  byte_257764F = 8;
  byte_2577667 = 12;
  strcpy((char *)&qword_2577650, "_TollTrailer");
  byte_257767F = 12;
  strcpy((char *)&qword_2577668, "_BestTrailer");
  byte_2577697 = 8;
  strcpy((char *)&qword_2577680, "_Trailer");
  byte_25776AF = 18;
  strcpy((char *)&xmmword_2577698, "_Secondary_Trailer");
  byte_25776C7 = 8;
  strcpy((char *)&qword_25776B0, "_Savings");
  byte_25776DF = 8;
  strcpy((char *)&qword_25776C8, "_AltRoad");
  byte_25776F7 = 6;
  strcpy((char *)&dword_25776E0, "_Named");
  byte_257770F = 6;
  strcpy((char *)&dword_25776F8, "_NAMED");
  byte_2577727 = 22;
  strcpy((char *)&xmmword_2577710, "_Named_Suggested_Route");
  qword_2577740 = 0x1000000000000000;
  xmmword_2577730 = xmmword_20E81D0;
  byte_257775F = 11;
  strcpy((char *)&qword_2577748, "_Speed_Trap");
  byte_2577777 = 4;
  strcpy((char *)&dword_2577760, "_UGI");
  byte_257778F = 12;
  strcpy((char *)&qword_2577778, "_Safer_Route");
  qword_2577790 = (uint64_t)operator new(0x20uLL);
  unk_2577798 = v268[1];
  strcpy((char *)qword_2577790, "BlockedRouteByBlockingIncident_");
  qword_25777A8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  *(_OWORD *)algn_25777B0 = xmmword_20B9280;
  strcpy((char *)qword_25777A8, "BlockedRouteByManeuverRestriction_");
  qword_25777C0 = (uint64_t)operator new(0x20uLL);
  unk_25777C8 = v268[0];
  strcpy((char *)qword_25777C0, "BlockedRouteByTimeRestriction_");
  qword_25777D8 = (uint64_t)operator new(0x28uLL);
  unk_25777E0 = xmmword_20B8FD0;
  strcpy((char *)qword_25777D8, "SuggestRouteToAvoidBlockingIncident_");
  qword_25777F0 = (uint64_t)operator new(0x30uLL);
  unk_25777F8 = xmmword_20B9380;
  strcpy((char *)qword_25777F0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2577808 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2577810 = xmmword_20B93E0;
  strcpy((char *)qword_2577808, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_2577837 = 1;
  word_2577820 = 95;
  strcpy((char *)&xmmword_2577838, "IncidentsCausingDelay_");
  HIBYTE(word_257784E) = 22;
  qword_2577850 = (uint64_t)operator new(0x19uLL);
  unk_2577858 = v280;
  strcpy((char *)qword_2577850, "NonVotableRoadIncident_");
  byte_257787F = 20;
  strcpy(byte_2577868, "VotableRoadIncident_");
  byte_2577897 = 13;
  strcpy((char *)&qword_2577880, "AreaIncident_");
  byte_25778AF = 15;
  strcpy((char *)&qword_2577898, "CongestionZone_");
  qword_25778B0 = (uint64_t)operator new(0x20uLL);
  unk_25778B8 = v279;
  strcpy((char *)qword_25778B0, "EVModifiedChargingStops_");
  byte_25778DF = 13;
  strcpy((char *)&qword_25778C8, "EVDisconnect_");
  byte_25778F7 = 12;
  strcpy((char *)&qword_25778E0, "EVReconnect_");
  qword_25778F8 = (uint64_t)operator new(0x20uLL);
  unk_2577900 = v277;
  strcpy((char *)qword_25778F8, "EVOfflineToOnlineTransition_");
  byte_2577927 = 13;
  strcpy((char *)&qword_2577910, "EVOfflineSAR_");
  byte_257793F = 21;
  strcpy((char *)&xmmword_2577928, "EVTowingNotSupported_");
  byte_2577957 = 18;
  strcpy(byte_2577940, "EVInfeasibleRoute_");
  qword_2577958 = (uint64_t)operator new(0x38uLL);
  unk_2577960 = xmmword_20B8DF0;
  strcpy((char *)qword_2577958, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2577970 = (uint64_t)operator new(0x40uLL);
  unk_2577978 = xmmword_20B98C0;
  strcpy((char *)qword_2577970, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2577988 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2577990 = v272;
  strcpy((char *)qword_2577988, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_25779A0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_25779A8 = xmmword_20B9A80;
  strcpy((char *)qword_25779A0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25779B8 = (uint64_t)operator new(0x30uLL);
  unk_25779C0 = v271;
  strcpy((char *)qword_25779B8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_25779D0 = (uint64_t)v186;
  unk_25779D8 = v272;
  _OWORD *v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25779E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25779F0 = v270;
  strcpy((char *)qword_25779E8, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_2577A00 = (uint64_t)v187;
  unk_2577A08 = *(_OWORD *)&v264[48];
  *uint64_t v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_2577A18 = (uint64_t)operator new(0x28uLL);
  unk_2577A20 = v274;
  strcpy((char *)qword_2577A18, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2577A30 = (uint64_t)operator new(0x28uLL);
  unk_2577A38 = v267;
  strcpy((char *)qword_2577A30, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2577A48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2577A50 = v279;
  strcpy((char *)qword_2577A48, "OfflineToOnlineNewRoute_");
  qword_2577A60 = (uint64_t)operator new(0x40uLL);
  unk_2577A68 = xmmword_20B98C0;
  strcpy((char *)qword_2577A60, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_2577A8F = 20;
  strcpy((char *)&xmmword_2577A78, "LPR_OFFLINE_REROUTE_");
  byte_2577AA7 = 16;
  strcpy(algn_2577A90, "LPR_OFFLINE_SAR_");
  byte_2577ABF = 20;
  strcpy((char *)&xmmword_2577AA8, "LPR_OFFLINE_REROUTE_");
  byte_2577AD7 = 16;
  strcpy(byte_2577AC0, "LPR_OFFLINE_SAR_");
  byte_2577AEF = 19;
  strcpy((char *)&xmmword_2577AD8, "SuggestFasterRoute_");
  qword_2577AF0 = (char *)operator new(0x20uLL);
  xmmword_2577AF8 = v278;
  strcpy(qword_2577AF0, "AreaIncidentSaferReroute_");
  byte_2577B1F = 12;
  strcpy((char *)&qword_2577B08, "_Remove_Stop");
  byte_2577B37 = 13;
  strcpy((char *)&qword_2577B20, "_Remove_Stops");
  strcpy(&byte_2577B4F, "\t_Add_Stops");
  strcpy((char *)&qword_2577B38, "_Add_Stop");
  strcpy(&byte_2577B67, "\n_Change_Route");
  byte_2577B7F = 13;
  byte_2577B97 = 15;
  strcpy((char *)&qword_2577B80, "_Different_Stop");
  byte_2577BAF = 16;
  strcpy((char *)&xmmword_2577B98, "_Different_Stops");
  byte_2577BC7 = 15;
  strcpy((char *)&qword_2577BB0, "_EV_Remove_Stop");
  byte_2577BDF = 16;
  strcpy((char *)&xmmword_2577BC8, "_EV_Remove_Stops");
  byte_2577BF7 = 12;
  strcpy((char *)&qword_2577BE0, "_EV_Add_Stop");
  byte_2577C0F = 13;
  strcpy((char *)&qword_2577BF8, "_EV_Add_Stops");
  byte_2577C27 = 15;
  strcpy((char *)&qword_2577C10, "_EV_Low_Battery");
  byte_2577C3F = 14;
  strcpy((char *)&qword_2577C28, "_EV_Infeasible");
  byte_2577C57 = 15;
  strcpy((char *)&qword_2577C40, "_EV_Last_Chance");
  qword_2577C58 = (uint64_t)operator new(0x20uLL);
  unk_2577C60 = v279;
  strcpy((char *)qword_2577C58, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_2577B58;
  qword_2577C70 = (uint64_t)operator new(0x20uLL);
  unk_2577C78 = v278;
  strcpy((char *)qword_2577C70, "_EV_Low_Battery_Add_Stops");
  qword_2577C88 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2577C90 = v280;
  strcpy((char *)qword_2577C88, "_EV_Infeasible_Add_Stop");
  int v189 = byte_2577B67;
  if (byte_2577B67 >= 0) {
    size_t v190 = byte_2577B67;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_2577CA8 = v190 + 14;
    unk_2577CB0 = v195 | 0x8000000000000000;
    qword_2577CA0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2577CA8) = 0;
    WORD1(qword_2577CA8) = 0;
    HIDWORD(qword_2577CA8) = 0;
    unk_2577CB0 = 0;
    byte_2577CB7 = v190 + 14;
    strcpy((char *)&qword_2577CA0, "_EV_Infe");
    char v192 = (char *)&qword_2577CA8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_2577B50;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_2577CB8 = (uint64_t)v198;
  unk_2577CC0 = v279;
  *(void *)unint64_t v198 = qword_2577C40;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_2577C40 + 7);
  *(void *)(v198 + 15) = qword_2577B38;
  v198[23] = word_2577B40;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_2577CD8 = v190 + 15;
    unk_2577CE0 = v202 | 0x8000000000000000;
    qword_2577CD0 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_2577CD0;
    qword_2577CD8 = 0;
    unk_2577CE0 = 0;
    qword_2577CD0 = 0;
    byte_2577CE7 = v190 + 15;
  }
  *uint64_t v200 = qword_2577C40;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_2577C40 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_2577B50;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_2577B50;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_2577CFF = 17;
  strcpy((char *)&xmmword_2577CE8, "_EV_Forced_Detour");
  qword_2577D00 = (uint64_t)operator new(0x20uLL);
  unk_2577D08 = v278;
  strcpy((char *)qword_2577D00, "_EV_Higher_Arrival_Charge");
  qword_2577D18 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2577D20 = xmmword_20B8FD0;
  strcpy((char *)qword_2577D18, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2577D47 = 16;
  strcpy(&algn_2577D20[16], "_EV_Out_Of_Range");
  qword_2577D48 = (uint64_t)operator new(0x20uLL);
  unk_2577D50 = v273;
  strcpy((char *)qword_2577D48, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2577D60, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2577D76) = 22;
  qword_2577D78 = (uint64_t)operator new(0x19uLL);
  unk_2577D80 = v280;
  strcpy((char *)qword_2577D78, "_EV_Forced_Modify_Stops");
  byte_2577DA7 = 19;
  strcpy(byte_2577D90, "_EV_Forced_Add_Stop");
  byte_2577DBF = 20;
  strcpy((char *)&xmmword_2577DA8, "_EV_Forced_Add_Stops");
  byte_2577DD7 = 21;
  strcpy(byte_2577DC0, "_EV_Battery_Info_Lost");
  qword_2577DD8 = (uint64_t)operator new(0x20uLL);
  unk_2577DE0 = v278;
  strcpy((char *)qword_2577DD8, "_EV_Battery_Info_Restored");
  qword_2577DF0 = (uint64_t)operator new(0x20uLL);
  unk_2577DF8 = v279;
  strcpy((char *)qword_2577DF0, "_EV_Towing_Not_Supported");
  qword_2577E08 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2577E10 = v269;
  strcpy((char *)qword_2577E08, "_EV_Offline_to_Online_Transition");
  byte_2577E37 = 15;
  strcpy((char *)&qword_2577E20, "_EV_Offline_SAR");
  qword_2577E38 = (uint64_t)operator new(0x20uLL);
  unk_2577E40 = v277;
  strcpy((char *)qword_2577E38, "_Offline_to_Online_New_Route");
  byte_2577E67 = 12;
  strcpy((char *)&qword_2577E50, "BannerButton");
  byte_2577E7F = 8;
  strcpy((char *)&qword_2577E68, "_Dismiss");
  byte_2577E97 = 3;
  word_2577E80 = 20319;
  byte_2577E82 = 75;
  byte_2577E83 = 0;
  byte_2577EAF = 11;
  strcpy((char *)&qword_2577E98, "_Still_Here");
  byte_2577EC7 = 8;
  strcpy((char *)&qword_2577EB0, "_Cleared");
  qmemcpy(&byte_2577EDF, "\nBannerButton", 13);
  strcpy((char *)&qword_2577EC8, "_No_Thanks");
  uint64_t v205 = qword_2577E58;
  qword_2577EF0 = 0x1400000000000000;
  *(void *)algn_2577EEC = 0x7373696D7369445FLL;
  qword_2577F08 = 0xF00000000000000;
  qword_2577F00 = 0x4B4F5F6E6F7474;
  int v206 = byte_2577BF7;
  if (byte_2577BF7 >= 0) {
    size_t v207 = byte_2577BF7;
  }
  else {
    size_t v207 = qword_2577BE8;
  }
  unint64_t v208 = v207 + 12;
  qword_2577EF8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2577F18 = v207 + 12;
    unk_2577F20 = v211 | 0x8000000000000000;
    qword_2577F10 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2577F18) = 0;
    HIWORD(qword_2577F18) = 0;
    unk_2577F20 = 0;
    byte_2577F27 = v207 + 12;
    strcpy((char *)&qword_2577F10, "BannerButton");
    uint64_t v209 = (char *)&qword_2577F18 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_2577BE0;
  }
  else {
    int v213 = (uint64_t *)qword_2577BE0;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_2577C0F;
  if (byte_2577C0F >= 0) {
    size_t v215 = byte_2577C0F;
  }
  else {
    size_t v215 = unk_2577C00;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2577F30 = v215 + 12;
    unk_2577F38 = v219 | 0x8000000000000000;
    qword_2577F28 = (uint64_t)v220;
    *(void *)v220 = qword_2577E50;
    *((_DWORD *)v220 + 2) = qword_2577E58;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_2577F30 = 0;
    unk_2577F38 = 0;
    byte_2577F3F = v215 + 12;
    LODWORD(qword_2577F30) = qword_2577E58;
    qword_2577F28 = qword_2577E50;
    uint64_t v217 = (char *)&qword_2577F30 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_2577BF8;
  }
  else {
    int v221 = (uint64_t *)qword_2577BF8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2577BC7;
  if (byte_2577BC7 >= 0) {
    size_t v223 = byte_2577BC7;
  }
  else {
    size_t v223 = unk_2577BB8;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2577F48 = v223 + 12;
    unk_2577F50 = v227 | 0x8000000000000000;
    qword_2577F40 = (uint64_t)v228;
    *(void *)v228 = qword_2577E50;
    *((_DWORD *)v228 + 2) = qword_2577E58;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_2577F48 = 0;
    unk_2577F50 = 0;
    byte_2577F57 = v223 + 12;
    LODWORD(qword_2577F48) = qword_2577E58;
    qword_2577F40 = qword_2577E50;
    uint64_t v225 = (char *)&qword_2577F48 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_2577BB0;
  }
  else {
    int v229 = (uint64_t *)qword_2577BB0;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2577E67;
  if (byte_2577E67 >= 0) {
    size_t v231 = byte_2577E67;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_2577BDF;
  if (byte_2577BDF >= 0) {
    size_t v233 = byte_2577BDF;
  }
  else {
    size_t v233 = *((void *)&xmmword_2577BC8 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2577F58;
    qword_2577F60 = 0;
    unk_2577F68 = 0;
    qword_2577F58 = 0;
    byte_2577F6F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2577F60 = v233 + v231;
  unk_2577F68 = v243 | 0x8000000000000000;
  qword_2577F58 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2577E50;
    }
    else {
      v236 = (uint64_t *)qword_2577E50;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_2577BC8;
    }
    else {
      unint64_t v238 = (long long *)xmmword_2577BC8;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_2577F78 = v231 + 11;
    unk_2577F80 = v245 | 0x8000000000000000;
    qword_2577F70 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_2577F70;
    qword_2577F78 = 0;
    unk_2577F80 = 0;
    qword_2577F70 = 0;
    byte_2577F87 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2577F70 + 7) = *(_DWORD *)((char *)&qword_2577E98 + 7);
      qword_2577F70 = qword_2577E98;
      BYTE3(qword_2577F78) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2577E50;
  }
  else {
    v246 = (uint64_t *)qword_2577E50;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2577E98 + 7);
  *(void *)int v247 = qword_2577E98;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2577F88;
    qword_2577F90 = 0;
    unk_2577F98 = 0;
    qword_2577F88 = 0;
    byte_2577F9F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  v249 = (uint64_t *)operator new(v262 + 1);
  qword_2577F90 = v231 + 8;
  unk_2577F98 = v263 | 0x8000000000000000;
  qword_2577F88 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2577E50;
    }
    else {
      v250 = (uint64_t *)qword_2577E50;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_2577EB0;
  v251[8] = 0;
  int v252 = byte_2577EDF;
  if (byte_2577EDF >= 0) {
    size_t v253 = byte_2577EDF;
  }
  else {
    size_t v253 = qword_2577ED0;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2577FA0;
    qword_2577FA8 = 0;
    unk_2577FB0 = 0;
    qword_2577FA0 = 0;
    byte_2577FB7 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  v255 = (uint64_t *)operator new(v260 + 1);
  qword_2577FA8 = v253 + v231;
  unk_2577FB0 = v261 | 0x8000000000000000;
  qword_2577FA0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2577E50;
    }
    else {
      v256 = (uint64_t *)qword_2577E50;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2577EC8;
    }
    else {
      v258 = (uint64_t *)qword_2577EC8;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_2577FCF, "\n{newroute}");
  strcpy((char *)&qword_2577FB8, "{roadname}");
  strcpy(&byte_2577FE7, "\n{count}");
  byte_2577FFF = 7;
  strcpy(&byte_2578017, "\n{dur}");
  strcpy((char *)&qword_2578000, "{duration}");
  byte_257802F = 5;
  qword_2578030 = (uint64_t)operator new(0x20uLL);
  unk_2578038 = v276;
  strcpy((char *)qword_2578030, "{PleaseProceedWithCaution}");
  byte_257805F = 15;
  strcpy((char *)&qword_2578048, "{UserRouteName}");
  byte_2578077 = 20;
  strcpy((char *)&xmmword_2578060, "{SuggestedRouteName}");
  byte_257808F = 18;
  strcpy(byte_2578078, "Speed_Camera_Ahead");
  qword_2578090 = (uint64_t)operator new(0x20uLL);
  unk_2578098 = v275;
  strcpy((char *)qword_2578090, "Red_Light_Camera_Ahead_Spoken");
  qword_25780A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25780B0 = v275;
  strcpy((char *)qword_25780A8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25780C0 = (uint64_t)operator new(0x28uLL);
  unk_25780C8 = v270;
  strcpy((char *)qword_25780C0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25780D8 = (uint64_t)operator new(0x28uLL);
  unk_25780E0 = v265;
  strcpy((char *)qword_25780D8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25780F0 = (uint64_t)operator new(0x20uLL);
  unk_25780F8 = v277;
  strcpy((char *)qword_25780F0, "Camera_Ahead_Multiple_Spoken");
  qword_2578108 = (uint64_t)operator new(0x30uLL);
  unk_2578110 = v266;
  strcpy((char *)qword_2578108, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2578120 = (char *)operator new(0x30uLL);
  strcpy(qword_2578120, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_257814F = 16;
  xmmword_2578128 = v266;
  strcpy(byte_2578138, "_Speed_Limit_Mph");
  byte_2578167 = 16;
  strcpy(algn_2578150, "_Speed_Limit_Kph");
  byte_257817F = 11;
  strcpy((char *)&qword_2578168, "Watch_Speed");
  byte_2578197 = 4;
  strcpy((char *)&dword_2578180, "_One");
  byte_25781AF = 4;
  strcpy((char *)&dword_2578198, "_Two");
  byte_25781C7 = 4;
  strcpy((char *)&dword_25781B0, "_Few");
  byte_25781DF = 5;
  strcpy((char *)&dword_25781C8, "_Many");
  byte_25781F7 = 6;
  strcpy((char *)&dword_25781E0, "_Other");
  byte_257820F = 4;
  strcpy((char *)&dword_25781F8, "_ONE");
  byte_2578227 = 7;
  strcpy((char *)&dword_2578210, "{Speed}");
  byte_257823F = 8;
  strcpy((char *)&qword_2578228, "Dismount");
  byte_2578257 = 4;
  strcpy((char *)&dword_2578240, "Walk");
  byte_257826F = 5;
  strcpy((char *)&dword_2578258, "Mount");
  byte_2578287 = 7;
  strcpy((char *)&dword_2578270, "Remount");
  strcpy(&byte_257829F, "\t_Crosswalk");
  strcpy((char *)&qword_2578288, "Walk_Road");
  strcpy(&byte_25782B7, "\n_PLURAL");
  byte_25782CF = 7;
  strcpy(&byte_25782E7, "\n{description1}");
  strcpy((char *)&qword_25782D0, "_SECONDARY");
  byte_25782FF = 14;
  byte_2578317 = 14;
  strcpy((char *)&qword_2578300, "{description2}");
  byte_257832F = 21;
  strcpy((char *)&xmmword_2578318, "TWO_ROAD_DESCRIPTIONS");
  byte_2578347 = 17;
  strcpy((char *)&xmmword_2578330, "{SlopePercentage}");
  byte_257835F = 15;
  strcpy((char *)&qword_2578348, "_Protected_Lane");
  strcpy(&byte_2578377, "\n_Paved_Path");
  strcpy((char *)&qword_2578360, "_Bike_Path");
  byte_257838F = 11;
  byte_25783A7 = 15;
  strcpy((char *)&qword_2578390, "_Dedicated_Lane");
  byte_25783BF = 12;
  strcpy((char *)&qword_25783A8, "_Shared_Path");
  strcpy(&byte_25783D7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25783C0, "_Bike_Lane");
  byte_25783EF = 12;
  byte_2578407 = 5;
  strcpy((char *)&dword_25783F0, "_Path");
  byte_257841F = 6;
  strcpy((char *)&dword_2578408, "_Trail");
  strcpy(&byte_2578437, "\t_Plaza");
  strcpy((char *)&qword_2578420, "_Sidewalk");
  byte_257844F = 6;
  byte_2578467 = 15;
  strcpy((char *)&qword_2578450, "_Moving_Walkway");
  byte_257847F = 14;
  strcpy((char *)&qword_2578468, "Two_Stage_Turn");
  byte_2578497 = 16;
  strcpy((char *)&xmmword_2578480, "{OptionalPeriod}");
  byte_25784AF = 18;
  strcpy((char *)&xmmword_2578498, "Advisory_Separator");
  byte_25784C7 = 6;
  strcpy((char *)&dword_25784B0, "Period");
  byte_25784DF = 21;
  strcpy((char *)&xmmword_25784C8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25784E0, "Advisory_Title_Notices");
  HIBYTE(word_25784F6) = 22;
  byte_257850F = 7;
  strcpy((char *)&dword_25784F8, "_DETAIL");
  byte_2578527 = 17;
  strcpy((char *)&xmmword_2578510, "_LONG_REGION_LIST");
  byte_257853F = 16;
  strcpy((char *)&xmmword_2578528, "Advisory_Grouped");
  byte_2578557 = 11;
  strcpy((char *)&qword_2578540, "_Advisories");
  qword_2578558 = (uint64_t)operator new(0x20uLL);
  unk_2578560 = v273;
  strcpy((char *)qword_2578558, "Advisory_WILDFIRE_METADATA_");
  byte_2578587 = 8;
  strcpy((char *)&qword_2578570, "Advisory");
  byte_257859F = 13;
  strcpy((char *)&qword_2578588, "MPR_NUM_STOPS");
  byte_25785B7 = 17;
  strcpy(byte_25785A0, "EV_CHARGE_STATION");
  byte_25785CF = 11;
  strcpy((char *)&qword_25785B8, "_NAMED_CITY");
  byte_25785E7 = 5;
  strcpy((char *)&dword_25785D0, "_Stop");
  strcpy(&byte_25785FF, "\n{StopsCount}");
  strcpy((char *)&qword_25785E8, "{CityName}");
  byte_2578617 = 12;
  byte_257862F = 11;
  strcpy((char *)&qword_2578618, "_With_Other");
  byte_2578647 = 15;
  strcpy((char *)&qword_2578630, "{DepartureTime}");
  qword_2578648 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2578650 = v274;
  strcpy((char *)qword_2578648, "Ending_Charge_Station_Port_Availability");
  qword_2578660 = (uint64_t)operator new(0x28uLL);
  unk_2578668 = v267;
  strcpy((char *)qword_2578660, "Ending_Charge_Station_No_Availability");
  qword_2578678 = (uint64_t)operator new(0x28uLL);
  unk_2578680 = v270;
  strcpy((char *)qword_2578678, "Ending_Charge_Station_No_Real_Time");
  byte_25786A7 = 16;
  strcpy(byte_2578690, "{AvailablePorts}");
  byte_25786BF = 12;
  strcpy((char *)&qword_25786A8, "{TotalPorts}");
  byte_25786D7 = 14;
  strcpy((char *)&qword_25786C0, "{ManeuverIcon}");
  qword_25786D8 = (uint64_t)operator new(0x38uLL);
  unk_25786E0 = xmmword_20B9A60;
  strcpy((char *)qword_25786D8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25786F0 = (uint64_t)operator new(0x20uLL);
  unk_25786F8 = v273;
  strcpy((char *)qword_25786F0, "Walking_Destination_Unnamed");
  qword_2578708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2578710 = v275;
  strcpy((char *)qword_2578708, "TrafficDelay_Label_Title_Sign");
  qword_2578720 = (uint64_t)operator new(0x20uLL);
  unk_2578728 = v277;
  strcpy((char *)qword_2578720, "Special_Guidance_Instruction");
  byte_257874F = 2;
  strcpy((char *)&word_2578738, "CZ");
  byte_2578767 = 3;
  dword_2578750 = 5919811;
  unk_257877F = 3;
  dword_2578768 = 6243649;
  byte_2578797 = 0;
  byte_25787AF = 7;
  strcpy((char *)&dword_2578798, "TRANSIT");
  byte_25787C7 = 7;
  strcpy((char *)&dword_25787B0, "OFFLINE");
  qword_25787C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25787D0 = v265;
  strcpy((char *)qword_25787C8, "Advisory_Card_French_Climate_Law_Title");
  qword_25787E0 = (uint64_t)operator new(0x30uLL);
  unk_25787E8 = xmmword_20B93C0;
  strcpy((char *)qword_25787E0, "Advisory_Card_French_Climate_Law_Details");
  qword_25787F8 = (uint64_t)operator new(0x30uLL);
  unk_2578800 = v271;
  strcpy((char *)qword_25787F8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2578810 = (uint64_t)operator new(0x20uLL);
  unk_2578818 = v277;
  strcpy((char *)qword_2578810, "{ClimateLawLearnMoreWeblink}");
  byte_257883F = 3;
  dword_2578828 = 4280902;
  qword_2578840 = (uint64_t)operator new(0x70uLL);
  unk_2578848 = xmmword_20E81E0;
  strcpy((char *)qword_2578840, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_58DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

void sub_58DF30(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + 7352);
  uint64_t v6 = *(void *)(a3 + 7360);
  if (v5 == v6)
  {
LABEL_17:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    return;
  }
  do
  {
    if (sub_358690(v5, 0) && *(_DWORD *)(v5 + 88) == 2)
    {
      if (*(void *)(a3 + 7360) == v5) {
        goto LABEL_17;
      }
      goto LABEL_7;
    }
    v5 += 1120;
  }
  while (v5 != v6);
  uint64_t v5 = v6;
  if (*(void *)(a3 + 7360) == v6) {
    goto LABEL_17;
  }
LABEL_7:
  uint64_t v10 = sub_3750CC(a1);
  sub_358214((char *)v5, (uint64_t)&v58);
  sub_35841C((char *)v5, (uint64_t)&v53);
  uint64_t v11 = (v62 - (unsigned char *)v61) >> 3;
  unint64_t v12 = v11 - 1;
  if (v62 == (unsigned char *)v61)
  {
    size_t v13 = v56;
    if (v56 == v57)
    {
      int64_t v15 = v59;
    }
    else
    {
      unint64_t v14 = (_DWORD *)v58;
      int64_t v15 = v59;
      if (!*(_DWORD *)v58)
      {
        unint64_t v16 = *((void *)&v58 + 1);
        do
        {
          v14 += 2;
          *(void *)&long long v58 = v14;
          if (v16 < v12)
          {
            while (v14 == (_DWORD *)v61[v16])
            {
              *((void *)&v58 + 1) = v16 + 1;
              unint64_t v14 = (_DWORD *)v59[v16 + 1];
              *(void *)&long long v58 = v14;
              if (v12 == ++v16)
              {
                unint64_t v16 = v11 - 1;
                break;
              }
            }
          }
        }
        while (!*v14);
      }
    }
  }
  else
  {
    size_t v13 = v56;
    unint64_t v17 = *((void *)&v58 + 1);
    int64_t v18 = (_DWORD *)v58;
    int64_t v15 = v59;
    if (v56 == v57)
    {
      if (!*(_DWORD *)v58)
      {
        uint64_t v29 = v11 - 2;
        do
        {
          v18 += 2;
          *(void *)&long long v58 = v18;
          if (v17 < v12 && v18 == (_DWORD *)v61[v17])
          {
            while (1)
            {
              int64_t v18 = (_DWORD *)v59[v17 + 1];
              *(void *)&long long v58 = v18;
              if (v29 == v17) {
                break;
              }
              uint64_t v30 = (_DWORD *)v61[++v17];
              if (v30 != v18) {
                goto LABEL_77;
              }
            }
            unint64_t v17 = v12;
LABEL_77:
            *((void *)&v58 + 1) = v17;
          }
        }
        while (!*v18);
      }
    }
    else if (v58 != v53)
    {
      do
      {
        if (*v18) {
          break;
        }
        v18 += 2;
        *(void *)&long long v58 = v18;
        if (v17 < v12)
        {
          while (v18 == (_DWORD *)v61[v17])
          {
            *((void *)&v58 + 1) = v17 + 1;
            int64_t v18 = (_DWORD *)v59[v17 + 1];
            *(void *)&long long v58 = v18;
            if (v12 == ++v17)
            {
              unint64_t v17 = v11 - 1;
              break;
            }
          }
        }
      }
      while (__PAIR128__(v17, (unint64_t)v18) != v53);
    }
  }
  long long v64 = v58;
  long long v66 = v60;
  long long v60 = 0uLL;
  uint64_t v59 = 0;
  long long v65 = v15;
  size_t v67 = v61;
  int v68 = v62;
  uint64_t v69 = v63;
  unsigned __int8 v62 = 0;
  uint64_t v63 = 0;
  std::string::size_type v61 = 0;
  if (v13)
  {
    std::string v57 = v13;
    operator delete(v13);
  }
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if (v61)
  {
    unsigned __int8 v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    *(void *)&long long v60 = v59;
    operator delete(v59);
  }
  sub_35841C((char *)v5, (uint64_t)v41);
  int v19 = v67;
  if (v67 == v68 || v45 == v46)
  {
    BOOL v20 = (v67 == v68) == (v45 == v46);
    if (!v45) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (*((void **)&v64 + 1) == v41[1])
  {
    BOOL v20 = (void *)v64 == v41[0];
    if (!v45) {
      goto LABEL_44;
    }
LABEL_43:
    std::string v46 = v45;
    operator delete(v45);
    goto LABEL_44;
  }
  BOOL v20 = 0;
  if (v45) {
    goto LABEL_43;
  }
LABEL_44:
  if (__p)
  {
    size_t v43 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v41);
      sub_188FC78(v41, (uint64_t)"found incident with no valid geo id", 35);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__dst, 1u);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    if (*(char *)(v5 + 119) < 0)
    {
      sub_4200((unsigned char *)a4, *(void **)(v5 + 96), *(void *)(v5 + 104));
    }
    else
    {
      long long v21 = *(_OWORD *)(v5 + 96);
      *(void *)(a4 + 16) = *(void *)(v5 + 112);
      *(_OWORD *)a4 = v21;
    }
    goto LABEL_106;
  }
  uint64_t v22 = *(void *)v64;
  sub_3D63DC(v10, *(void *)v64 & 0xFFFFFFFFFFFFLL, &__str);
  sub_58E730(v10, v22, 1u, &v38);
  HIBYTE(__p) = 0;
  LOBYTE(v41[0]) = 0;
  sub_5F2D5C((uint64_t)&__dst, (long long *)v41, 0);
  if (SHIBYTE(__p) < 0) {
    operator delete(v41[0]);
  }
  std::string::operator=(&__dst, &__str);
  int v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  sub_6F60AC((unsigned __int16 *)&__dst, (uint64_t *)&v38, (uint64_t *)&v34, a2, (uint64_t)v41);
  int v23 = (void **)v34;
  if (v34)
  {
    size_t v24 = v35;
    size_t v25 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v24 - 9) < 0) {
          operator delete(*(v24 - 4));
        }
        v24 -= 5;
      }
      while (v24 != v23);
      size_t v25 = v34;
    }
    int v35 = v23;
    operator delete(v25);
  }
  if (SHIBYTE(__p) < 0)
  {
    int64_t v27 = v41[1];
    if (v41[1])
    {
      unint64_t v26 = v41;
      goto LABEL_85;
    }
  }
  else if (HIBYTE(__p))
  {
    unint64_t v26 = v41;
LABEL_74:
    long long v28 = *(_OWORD *)v26;
    *(void *)(a4 + 16) = v26[2];
    *(_OWORD *)a4 = v28;
    goto LABEL_86;
  }
  unint64_t v26 = (void **)(v5 + 96);
  if ((*(char *)(v5 + 119) & 0x80000000) == 0) {
    goto LABEL_74;
  }
  int64_t v27 = *(void **)(v5 + 104);
LABEL_85:
  sub_4200((unsigned char *)a4, *v26, (unint64_t)v27);
LABEL_86:
  if (v52 < 0)
  {
    operator delete(v51);
    if ((v50 & 0x80000000) == 0)
    {
LABEL_88:
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_100;
    }
  }
  else if ((v50 & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v49);
  if ((v48 & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v47);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v44);
  if ((SHIBYTE(__p) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v41[0]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    int v31 = v38;
    if (v38) {
      goto LABEL_93;
    }
LABEL_104:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_97;
  }
LABEL_103:
  operator delete(__dst.__r_.__value_.__l.__data_);
  int v31 = v38;
  if (!v38) {
    goto LABEL_104;
  }
LABEL_93:
  uint64_t v32 = (uint64_t)v39;
  unint64_t v33 = v31;
  if (v39 != v31)
  {
    do
      uint64_t v32 = sub_2DF404(v32 - 144);
    while ((void *)v32 != v31);
    unint64_t v33 = v38;
  }
  std::string::size_type v39 = v31;
  operator delete(v33);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_105;
  }
LABEL_97:
  operator delete(__str.__r_.__value_.__l.__data_);
LABEL_105:
  int v19 = v67;
LABEL_106:
  if (v19) {
    operator delete(v19);
  }
  if (v65) {
    operator delete(v65);
  }
}

void sub_58E608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_4A50F4((uint64_t)&a28);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_53BD98(&a19);
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_2FC938((void *)(v33 - 128));
  _Unwind_Resume(a1);
}

void sub_58E6E0(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_58E6F4(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_58E708(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_58E71C(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_58E730(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void **a4@<X8>)
{
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v9 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0x1Fu || (uint64_t v11 = v10[15]) == 0 || (v12 = *(int *)((char *)v9 + v11), v12 == -1))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    unsigned int v13 = sub_2E6AA8(a1, a2);
    sub_58F194(a1, v13, v12, a3, (uint64_t)a4);
    if (*a4 != a4[1]) {
      return;
    }
  }
  unint64_t v14 = (int *)sub_2D5D58(a1, v8);
  int64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x2Fu)
  {
    uint64_t v16 = v15[23];
    if (v16)
    {
      if (*((unsigned char *)v14 + v16) == 44)
      {
        unint64_t v17 = (int *)sub_2D5D58(a1, v8);
        int64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        unsigned int v19 = *v18;
        if (v19 < 0x5F)
        {
          LODWORD(v20) = 0;
          LODWORD(v21) = 0;
        }
        else
        {
          uint64_t v20 = v18[47];
          if (v18[47]) {
            LODWORD(v20) = *(int *)((char *)v17 + v20 + *(unsigned int *)((char *)v17 + v20));
          }
          if (v19 < 0x61)
          {
            if (!v20) {
              return;
            }
LABEL_19:
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            *(void *)&long long v27 = &v29;
            sub_2E719C(a1, v8, 8, (uint64_t)&v27);
            if ((a2 & 0xFF000000000000) != 0)
            {
              sub_58F030(a1, (uint64_t)v30, (uint64_t)v29, 1u, (void **)&v27);
              uint64_t v22 = *a4;
              if (!*a4) {
                goto LABEL_31;
              }
              uint64_t v23 = (uint64_t)a4[1];
              size_t v24 = *a4;
              if ((void *)v23 == v22) {
                goto LABEL_30;
              }
              do
                uint64_t v23 = sub_2DF404(v23 - 144);
              while ((void *)v23 != v22);
            }
            else
            {
              sub_58EEC8(a1, v29, v30, 1u, (void **)&v27);
              uint64_t v22 = *a4;
              if (!*a4) {
                goto LABEL_31;
              }
              uint64_t v25 = (uint64_t)a4[1];
              size_t v24 = *a4;
              if ((void *)v25 == v22)
              {
LABEL_30:
                a4[1] = v22;
                operator delete(v24);
                *a4 = 0;
                a4[1] = 0;
                a4[2] = 0;
LABEL_31:
                *(_OWORD *)a4 = v27;
                unint64_t v26 = v29;
                a4[2] = v28;
                if (v26)
                {
                  uint64_t v30 = v26;
                  operator delete(v26);
                }
                return;
              }
              do
                uint64_t v25 = sub_2DF404(v25 - 144);
              while ((void *)v25 != v22);
            }
            size_t v24 = *a4;
            goto LABEL_30;
          }
          uint64_t v21 = v18[48];
          if (v21)
          {
            if (!(*(int *)((char *)v17 + v21 + *(unsigned int *)((char *)v17 + v21)) + v20)) {
              return;
            }
            goto LABEL_19;
          }
        }
        if (!(v21 + v20)) {
          return;
        }
        goto LABEL_19;
      }
    }
  }
}

void sub_58E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_53BD98(v13);
    _Unwind_Resume(a1);
  }
  sub_53BD98(v13);
  _Unwind_Resume(a1);
}

void sub_58E9CC(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v7 = (uint64_t *)sub_374EF4(a1);
  sub_688A04(v7, 1u, *a2, &v35);
  unint64_t v8 = *(void **)a3;
  uint64_t v9 = *(void **)(a3 + 8);
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v32 = 0;
  if (v8 == v9)
  {
    int64_t v18 = 0;
    unint64_t v17 = 0;
  }
  else
  {
    do
    {
      if (sub_6477C0((uint64_t)v8))
      {
        uint64_t v10 = sub_6467E8(v8, 0);
        sub_58DF30(a1, (uint64_t)a2, v10, (uint64_t)__p);
        uint64_t v11 = (void *)HIBYTE(v31);
        if (v31 < 0) {
          uint64_t v11 = __p[1];
        }
        if (v11)
        {
          unsigned int v12 = v33;
          if ((unint64_t)v33 >= v34)
          {
            uint64_t v16 = sub_6E6EC((char **)&v32, (uint64_t)__p);
          }
          else
          {
            if (SHIBYTE(v31) < 0)
            {
              sub_4200(v33, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              long long v13 = *(_OWORD *)__p;
              *((void *)v33 + 2) = v31;
              *(_OWORD *)unsigned int v12 = v13;
            }
            uint64_t v16 = v12 + 24;
          }
          uint64_t v33 = v16;
        }
        else if (sub_6484D0((uint64_t)v8))
        {
          sub_6484E0(v8, (uint64_t)&v37);
          unint64_t v14 = v33;
          if ((unint64_t)v33 >= v34)
          {
            uint64_t v33 = sub_6E8C4((void **)&v32, (uint64_t)&v37);
            if (SHIBYTE(v38) < 0) {
              operator delete((void *)v37);
            }
          }
          else
          {
            long long v15 = v37;
            *((void *)v33 + 2) = v38;
            *(_OWORD *)unint64_t v14 = v15;
            uint64_t v33 = v14 + 24;
          }
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
      }
      v8 += 945;
    }
    while (v8 != v9);
    unint64_t v17 = v32;
    int64_t v18 = (const void **)v33;
  }
  unint64_t v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v18 - v17));
  if (v18 == v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_6EA30((uint64_t)v17, v18, (uint64_t)__p, v20, 1);
  uint64_t v21 = sub_86F68(v32, (const void **)v33);
  uint64_t v22 = v33;
  if (v33 != (char *)v21)
  {
    while (v22 != (char *)v21)
    {
      if (*(v22 - 1) < 0) {
        operator delete(*((void **)v22 - 3));
      }
      v22 -= 24;
    }
    uint64_t v33 = (char *)v21;
  }
  uint64_t v23 = *(void **)a3;
  size_t v24 = *(void **)(a3 + 8);
  if (*(void **)a3 != v24)
  {
    do
    {
      if (!sub_64695C(v23) && sub_6484D0((uint64_t)v23) && sub_6477B0((uint64_t)v23))
      {
        uint64_t v25 = v35;
        sub_6484E0(v23, (uint64_t)&v37);
        sub_584E14(v25, (uint64_t)&v37, (uint64_t)__p);
      }
      v23 += 945;
    }
    while (v23 != v24);
  }
  unint64_t v26 = (char *)v32;
  if (v32)
  {
    long long v27 = v33;
    long long v28 = v32;
    if (v33 != (char *)v32)
    {
      do
      {
        if (*(v27 - 1) < 0) {
          operator delete(*((void **)v27 - 3));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      long long v28 = v32;
    }
    uint64_t v33 = v26;
    operator delete(v28);
  }
  uint64_t v29 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_58EDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_58FE78((uint64_t)&__p);
  if (*(char *)(v15 - 81) < 0) {
    operator delete(*(void **)(v15 - 104));
  }
  sub_1A668((void **)(v15 - 144));
  sub_14A84(v15 - 120);
  sub_58EE6C(v14);
  _Unwind_Resume(a1);
}

void **sub_58EE6C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_58FE78(v3 - 3200);
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_58EEC8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 a4@<W3>, void **a5@<X8>)
{
  if (a2 != a3)
  {
    unint64_t v8 = a2;
    uint64_t v10 = (unsigned char *)(a1 + 7774);
    uint64_t v11 = a1 + 3896;
    do
    {
      uint64_t v12 = *v8;
      unsigned int v13 = *v8;
      unint64_t v14 = v13 | ((unint64_t)(unsigned __int16)WORD2(*v8) << 32);
      if (!*v10
        || (uint64_t v15 = sub_290DEC(v11, *v8, 1)) != 0
        && (uint64_t v16 = &v15[-*(int *)v15], *(unsigned __int16 *)v16 >= 5u)
        && (uint64_t v17 = *((unsigned __int16 *)v16 + 2)) != 0
        && *(_DWORD *)&v15[v17 + *(unsigned int *)&v15[v17]] > WORD2(v12)
        && sub_295DB4(a1, v14))
      {
        int64_t v18 = (int *)sub_2D5D58(a1, v14);
        unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v19 < 0x1Fu || (uint64_t v20 = v19[15]) == 0 || (v21 = *(int *)((char *)v18 + v20), v21 == -1))
        {
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
        }
        else
        {
          unsigned int v22 = sub_2E6AA8(a1, v13);
          sub_58F194(a1, v22, v21, a4, (uint64_t)a5);
          uint64_t v23 = a5[1];
          if (*a5 != v23) {
            return;
          }
          if (v23) {
            operator delete(v23);
          }
        }
      }
      v8 += 3;
    }
    while (v8 != a3);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_58F030(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, unsigned __int8 a4@<W5>, void **a5@<X8>)
{
  if (a2 != a3)
  {
    uint64_t v8 = a2;
    uint64_t v10 = (unsigned char *)(a1 + 7774);
    uint64_t v11 = a1 + 3896;
    do
    {
      uint64_t v13 = *(void *)(v8 - 24);
      v8 -= 24;
      unsigned __int16 v12 = WORD2(v13);
      unsigned int v14 = v13;
      unint64_t v15 = v13 | ((unint64_t)WORD2(v13) << 32);
      if (*v10)
      {
        uint64_t v16 = sub_290DEC(v11, v14, 1);
        if (!v16) {
          continue;
        }
        uint64_t v17 = &v16[-*(int *)v16];
        if (*(unsigned __int16 *)v17 < 5u) {
          continue;
        }
        uint64_t v18 = *((unsigned __int16 *)v17 + 2);
        if (!v18
          || *(_DWORD *)&v16[v18 + *(unsigned int *)&v16[v18]] <= v12
          || !sub_295DB4(a1, v15))
        {
          continue;
        }
      }
      unint64_t v19 = (int *)sub_2D5D58(a1, v15);
      uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 < 0x1Fu || (uint64_t v21 = v20[15]) == 0 || (v22 = *(int *)((char *)v19 + v21), v22 == -1))
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      else
      {
        unsigned int v23 = sub_2E6AA8(a1, v14);
        sub_58F194(a1, v23, v22, a4, (uint64_t)a5);
        size_t v24 = a5[1];
        if (*a5 != v24) {
          return;
        }
        if (v24) {
          operator delete(v24);
        }
      }
    }
    while (v8 != a3);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

char **sub_58F194@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8 = sub_2E6DE0(a1 + 3896, a2, 0);
  uint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v8[*(unsigned int *)&v8[v10]];
    }
  }
  uint64_t v11 = (int *)(v10 + 4 * a3 + 4 + *(unsigned int *)(v10 + 4 * a3 + 4));
  unsigned __int16 v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    unsigned int v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    unsigned int v14 = 0;
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  sub_53DA48((char **)a5, *v14);
  uint64_t v15 = *(void *)(a5 + 8);
  int v17 = *v14;
  uint64_t v16 = v14 + 1;
  unint64_t v19 = &v16[v17];
  uint64_t v20 = v16;
  return sub_58F320(&v20, &v19, (char **)a5, v15, a4);
}

void sub_58F284(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_2DF404(v4 - 144);
      while ((void *)v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_58F2CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_2DF404(i - 144);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_58F320(unsigned int **a1, unsigned int **a2, char **a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v7 = *a1;
  if (*a1 != *a2)
  {
    uint64_t v10 = a5;
    do
    {
      sub_2DD9C0((int *)((char *)v7 + *v7), v10 != 0, (uint64_t)&v15);
      uint64_t v11 = sub_58F4C4(a3, a4, (uint64_t)&v15);
      if (v25 < 0)
      {
        operator delete(__p);
        if (v23 < 0)
        {
LABEL_11:
          operator delete(v22);
          unsigned __int16 v12 = (void **)v20;
          if (!v20)
          {
LABEL_7:
            if (v19 < 0) {
              goto LABEL_14;
            }
            goto LABEL_8;
          }
          goto LABEL_12;
        }
      }
      else if (v23 < 0)
      {
        goto LABEL_11;
      }
      unsigned __int16 v12 = (void **)v20;
      if (!v20) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v13 = v21;
      if (v21 == v12)
      {
        uint64_t v21 = v12;
        operator delete(v12);
        if (v19 < 0) {
          goto LABEL_14;
        }
        goto LABEL_8;
      }
      do
      {
        if (*((char *)v13 - 9) < 0)
        {
          operator delete(*(v13 - 4));
          if ((*((char *)v13 - 33) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        else if ((*((char *)v13 - 33) & 0x80000000) == 0)
        {
          goto LABEL_16;
        }
        operator delete(*(v13 - 7));
LABEL_16:
        v13 -= 7;
      }
      while (v13 != v12);
      uint64_t v21 = v12;
      operator delete(v20);
      if (v19 < 0)
      {
LABEL_14:
        operator delete(v18);
        if (v17 < 0) {
          goto LABEL_15;
        }
        goto LABEL_3;
      }
LABEL_8:
      if (v17 < 0) {
LABEL_15:
      }
        operator delete(v16);
LABEL_3:
      a4 = (uint64_t)(v11 + 144);
      uint64_t v7 = *a1 + 1;
      *a1 = v7;
    }
    while (v7 != *a2);
  }
  return a3;
}

void sub_58F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_58F4C4(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 144;
  uint64_t v8 = &(*a1)[144 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v19 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0xE38E38E38E38E3) {
      unint64_t v21 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v21 = v19;
    }
    std::string v57 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      unsigned int v22 = (char *)operator new(144 * v21);
    }
    else
    {
      unsigned int v22 = 0;
    }
    long long v53 = v22;
    size_t v54 = &v22[144 * v7];
    unint64_t v55 = v54;
    uint64_t v56 = &v22[144 * v21];
    sub_58FB8C((uint64_t)&v53, a3);
    uint64_t v29 = v54;
    uint64_t v30 = *a1;
    uint64_t v31 = v54;
    if (*a1 != v8)
    {
      uint64_t v32 = 0;
      do
      {
        uint64_t v33 = &v8[v32];
        unint64_t v34 = &v29[v32];
        *(v34 - 144) = v8[v32 - 144];
        long long v35 = *(_OWORD *)&v8[v32 - 136];
        *((void *)v34 - 15) = *(void *)&v8[v32 - 120];
        *(_OWORD *)(v34 - 136) = v35;
        *((void *)v33 - 16) = 0;
        *((void *)v33 - 15) = 0;
        *((void *)v33 - 17) = 0;
        long long v36 = *(_OWORD *)&v8[v32 - 112];
        *((void *)v34 - 12) = *(void *)&v8[v32 - 96];
        *((_OWORD *)v34 - 7) = v36;
        *((void *)v33 - 13) = 0;
        *((void *)v33 - 12) = 0;
        *((void *)v33 - 14) = 0;
        uint64_t v37 = *(void *)&v8[v32 - 88];
        *((void *)v34 - 9) = 0;
        *((void *)v34 - 8) = 0;
        *((void *)v34 - 11) = v37;
        *((void *)v34 - 10) = 0;
        *((_OWORD *)v34 - 5) = *(_OWORD *)&v8[v32 - 80];
        *((void *)v34 - 8) = *(void *)&v8[v32 - 64];
        *((void *)v33 - 10) = 0;
        *((void *)v33 - 9) = 0;
        *((void *)v33 - 8) = 0;
        long long v38 = *(_OWORD *)&v8[v32 - 56];
        *((void *)v34 - 5) = *(void *)&v8[v32 - 40];
        *(_OWORD *)(v34 - 56) = v38;
        *((void *)v33 - 6) = 0;
        *((void *)v33 - 5) = 0;
        LOWORD(v37) = *(_WORD *)&v8[v32 - 32];
        char v39 = v8[v32 - 30];
        *((void *)v33 - 7) = 0;
        *(v34 - 30) = v39;
        *((_WORD *)v34 - 16) = v37;
        long long v40 = *(_OWORD *)&v8[v32 - 24];
        *((void *)v34 - 1) = *(void *)&v8[v32 - 8];
        *(_OWORD *)(v34 - 24) = v40;
        *((void *)v33 - 2) = 0;
        *((void *)v33 - 1) = 0;
        *((void *)v33 - 3) = 0;
        v32 -= 144;
      }
      while (&v8[v32] != v30);
      uint64_t v31 = &v29[v32];
    }
    size_t v54 = v31;
    std::string::size_type v41 = a1[1];
    int v42 = v55;
    if (v41 != v8)
    {
      do
      {
        *int v42 = *v8;
        long long v43 = *(_OWORD *)(v8 + 8);
        *((void *)v42 + 3) = *((void *)v8 + 3);
        *(_OWORD *)(v42 + 8) = v43;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = 0;
        *((void *)v8 + 1) = 0;
        long long v44 = *((_OWORD *)v8 + 2);
        *((void *)v42 + 6) = *((void *)v8 + 6);
        *((_OWORD *)v42 + 2) = v44;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 6) = 0;
        *((void *)v8 + 4) = 0;
        uint64_t v45 = *((void *)v8 + 7);
        *((void *)v42 + 9) = 0;
        *((void *)v42 + 10) = 0;
        *((void *)v42 + 7) = v45;
        *((void *)v42 + 8) = 0;
        *((_OWORD *)v42 + 4) = *((_OWORD *)v8 + 4);
        *((void *)v42 + 10) = *((void *)v8 + 10);
        *((void *)v8 + 8) = 0;
        *((void *)v8 + 9) = 0;
        *((void *)v8 + 10) = 0;
        long long v46 = *(_OWORD *)(v8 + 88);
        *((void *)v42 + 13) = *((void *)v8 + 13);
        *(_OWORD *)(v42 + 88) = v46;
        *((void *)v8 + 12) = 0;
        *((void *)v8 + 13) = 0;
        *((void *)v8 + 11) = 0;
        LOWORD(v45) = *((_WORD *)v8 + 56);
        v42[114] = v8[114];
        *((_WORD *)v42 + 56) = v45;
        long long v47 = *(_OWORD *)(v8 + 120);
        *((void *)v42 + 17) = *((void *)v8 + 17);
        *(_OWORD *)(v42 + 120) = v47;
        *((void *)v8 + 16) = 0;
        *((void *)v8 + 17) = 0;
        *((void *)v8 + 15) = 0;
        v42 += 144;
        v8 += 144;
      }
      while (v8 != v41);
      uint64_t v31 = v54;
      uint64_t v8 = a1[1];
    }
    char v48 = *a1;
    *a1 = v31;
    a1[1] = v42;
    char v49 = a1[2];
    a1[2] = v56;
    unint64_t v55 = v8;
    uint64_t v56 = v49;
    long long v53 = v48;
    size_t v54 = v48;
    if (v8 != v48)
    {
      do
      {
        unint64_t v55 = v8 - 144;
        sub_2DF404((uint64_t)(v8 - 144));
        uint64_t v8 = v55;
      }
      while (v55 != v48);
      uint64_t v8 = v53;
    }
    if (v8) {
      operator delete(v8);
    }
    return v29;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      uint64_t v10 = v8 + 144;
      uint64_t v11 = v6 - 144;
      if (v6 < 0x90)
      {
        a1[1] = (char *)v6;
        if ((char *)v6 == v10)
        {
LABEL_35:
          sub_58F9EC((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 144;
        uint64_t v13 = a1[1];
        do
        {
          char *v13 = *(unsigned char *)v12;
          long long v14 = *(_OWORD *)(v12 + 8);
          *((void *)v13 + 3) = *(void *)(v12 + 24);
          *(_OWORD *)(v13 + 8) = v14;
          *(void *)(v12 + 16) = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 8) = 0;
          long long v15 = *(_OWORD *)(v12 + 32);
          *((void *)v13 + 6) = *(void *)(v12 + 48);
          *((_OWORD *)v13 + 2) = v15;
          *(void *)(v12 + 40) = 0;
          *(void *)(v12 + 48) = 0;
          *(void *)(v12 + 32) = 0;
          uint64_t v16 = *(void *)(v12 + 56);
          *((void *)v13 + 9) = 0;
          *((void *)v13 + 10) = 0;
          *((void *)v13 + 7) = v16;
          *((void *)v13 + 8) = 0;
          *((_OWORD *)v13 + 4) = *(_OWORD *)(v12 + 64);
          *((void *)v13 + 10) = *(void *)(v12 + 80);
          *(void *)(v12 + 64) = 0;
          *(void *)(v12 + 72) = 0;
          *(void *)(v12 + 80) = 0;
          long long v17 = *(_OWORD *)(v12 + 88);
          *((void *)v13 + 13) = *(void *)(v12 + 104);
          *(_OWORD *)(v13 + 88) = v17;
          *(void *)(v12 + 96) = 0;
          *(void *)(v12 + 104) = 0;
          *(void *)(v12 + 88) = 0;
          LOWORD(v16) = *(_WORD *)(v12 + 112);
          v13[114] = *(unsigned char *)(v12 + 114);
          *((_WORD *)v13 + 56) = v16;
          long long v18 = *(_OWORD *)(v12 + 120);
          *((void *)v13 + 17) = *(void *)(v12 + 136);
          *(_OWORD *)(v13 + 120) = v18;
          *(void *)(v12 + 128) = 0;
          *(void *)(v12 + 136) = 0;
          *(void *)(v12 + 120) = 0;
          v13 += 144;
          v12 += 144;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_35;
        }
      }
      uint64_t v50 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v51 = (uint64_t)&v5[144 * v7 - 144];
      do
      {
        sub_58F9EC(v11, v51 + v50);
        v11 -= 144;
        v50 -= 144;
      }
      while (v50);
      goto LABEL_35;
    }
    *uint64_t v8 = *(unsigned char *)a3;
    char v23 = &v5[144 * v7];
    long long v24 = *(_OWORD *)(a3 + 8);
    *((void *)v23 + 3) = *(void *)(a3 + 24);
    *(_OWORD *)(v23 + 8) = v24;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    long long v25 = *(_OWORD *)(a3 + 32);
    *((void *)v23 + 6) = *(void *)(a3 + 48);
    *((_OWORD *)v23 + 2) = v25;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    uint64_t v26 = *(void *)(a3 + 56);
    *((void *)v23 + 9) = 0;
    *((void *)v23 + 10) = 0;
    *((void *)v23 + 7) = v26;
    *((void *)v23 + 8) = 0;
    *((_OWORD *)v23 + 4) = *(_OWORD *)(a3 + 64);
    *((void *)v23 + 10) = *(void *)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    long long v27 = *(_OWORD *)(a3 + 88);
    *((void *)v23 + 13) = *(void *)(a3 + 104);
    *(_OWORD *)(v23 + 88) = v27;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 88) = 0;
    LOWORD(v26) = *(_WORD *)(a3 + 112);
    v23[114] = *(unsigned char *)(a3 + 114);
    *((_WORD *)v23 + 56) = v26;
    long long v28 = *(_OWORD *)(a3 + 120);
    *((void *)v23 + 17) = *(void *)(a3 + 136);
    *(_OWORD *)(v23 + 120) = v28;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 120) = 0;
    a1[1] = v8 + 144;
  }
  return v8;
}

void sub_58F9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_58F2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_58F9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  unint64_t v9 = (void **)(a1 + 64);
  uint64_t v10 = *(void ***)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (v10)
  {
    uint64_t v11 = *(void ***)(a1 + 72);
    unint64_t v12 = v10;
    if (v11 == v10)
    {
LABEL_15:
      *(void *)(a1 + 72) = v10;
      operator delete(v12);
      *unint64_t v9 = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      goto LABEL_16;
    }
    while (1)
    {
      if (*((char *)v11 - 9) < 0)
      {
        operator delete(*(v11 - 4));
        if (*((char *)v11 - 33) < 0) {
LABEL_13:
        }
          operator delete(*(v11 - 7));
      }
      else if (*((char *)v11 - 33) < 0)
      {
        goto LABEL_13;
      }
      v11 -= 7;
      if (v11 == v10)
      {
        unint64_t v12 = *v9;
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v13 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a2 + 111) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  char v15 = *(unsigned char *)(a2 + 114);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(unsigned char *)(a1 + 114) = v15;
  uint64_t v16 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  return a1;
}

__n128 sub_58FB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  if (v4 != *(unsigned char **)(a1 + 24)) {
    goto LABEL_22;
  }
  long long v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x1C71C71C71C71C72 * ((v4 - v6) >> 4);
    if (v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x1C71C71C71C71C8) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 144 * v12;
    char v15 = (char *)operator new(144 * v12);
    uint64_t v16 = &v15[144 * v13];
    long long v17 = &v15[v14];
    if (v4 == (unsigned char *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      long long v18 = &v4[(void)v16 - v5];
      uint64_t v19 = 144 * v13;
      do
      {
        unint64_t v20 = &v15[v19];
        *unint64_t v20 = *(unsigned char *)v5;
        long long v21 = *(_OWORD *)(v5 + 8);
        *((void *)v20 + 3) = *(void *)(v5 + 24);
        *(_OWORD *)(v20 + 8) = v21;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 8) = 0;
        long long v22 = *(_OWORD *)(v5 + 32);
        *((void *)v20 + 6) = *(void *)(v5 + 48);
        *((_OWORD *)v20 + 2) = v22;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 32) = 0;
        *((void *)v20 + 7) = *(void *)(v5 + 56);
        *((_OWORD *)v20 + 4) = *(_OWORD *)(v5 + 64);
        *((void *)v20 + 10) = *(void *)(v5 + 80);
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        long long v23 = *(_OWORD *)(v5 + 88);
        *((void *)v20 + 13) = *(void *)(v5 + 104);
        *(_OWORD *)(v20 + 88) = v23;
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 88) = 0;
        __int16 v24 = *(_WORD *)(v5 + 112);
        v20[114] = *(unsigned char *)(v5 + 114);
        *((_WORD *)v20 + 56) = v24;
        long long v25 = *(_OWORD *)(v5 + 120);
        *((void *)v20 + 17) = *(void *)(v5 + 136);
        *(_OWORD *)(v20 + 120) = v25;
        *(void *)(v5 + 128) = 0;
        *(void *)(v5 + 136) = 0;
        *(void *)(v5 + 120) = 0;
        v19 += 144;
        v5 += 144;
      }
      while (v20 + 144 != v18);
      long long v6 = *(unsigned char **)a1;
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = *(void *)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v17;
      while (v27 != v26)
      {
        v27 -= 144;
        sub_2DF404(v27);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(unsigned char **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((unsigned char *)v5 == v4)
  {
    unint64_t v11 = v5 - 144 * v9;
  }
  else
  {
    do
    {
      sub_58F9EC(v5 + 144 * v10, v5);
      v5 += 144;
    }
    while ((unsigned char *)v5 != v4);
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    unint64_t v11 = v5 + 144 * v10;
  }
  *(void *)(a1 + 8) = &v4[144 * v10];
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = (unsigned char *)v11;
LABEL_22:
  *uint64_t v4 = *(unsigned char *)a2;
  long long v28 = *(_OWORD *)(a2 + 8);
  *((void *)v4 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v28;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v29 = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v4 + 2) = v29;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v30 = *(void *)(a2 + 56);
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 10) = 0;
  *((void *)v4 + 7) = v30;
  *((void *)v4 + 8) = 0;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v4 + 10) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  long long v31 = *(_OWORD *)(a2 + 88);
  *((void *)v4 + 13) = *(void *)(a2 + 104);
  *(_OWORD *)(v4 + 88) = v31;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  LOWORD(v30) = *(_WORD *)(a2 + 112);
  v4[114] = *(unsigned char *)(a2 + 114);
  *((_WORD *)v4 + 56) = v30;
  __n128 result = *(__n128 *)(a2 + 120);
  *((void *)v4 + 17) = *(void *)(a2 + 136);
  *(__n128 *)(v4 + 120) = result;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 16) += 144;
  return result;
}

uint64_t sub_58FE78(uint64_t a1)
{
  uint64_t v2 = a1 + 1760;
  sub_4D4B58(a1 + 3040);
  sub_4D4B58(a1 + 2880);
  sub_4D4B58(a1 + 2720);
  sub_4D4B58(a1 + 2560);
  sub_4D4B58(a1 + 2400);
  sub_4D4B58(a1 + 2240);
  sub_4D4B58(a1 + 2080);
  sub_4D4B58(a1 + 1920);
  sub_4D4B58(v2);
  sub_4D4B58(a1 + 1600);
  sub_4D4B58(a1 + 1440);
  sub_4D4B58(a1 + 1280);
  sub_4D4B58(a1 + 1120);
  sub_4D4B58(a1 + 960);
  sub_4D4B58(a1 + 800);
  sub_4D4B58(a1 + 640);
  sub_4D4B58(a1 + 480);
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

uint64_t sub_58FF4C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147ALL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((a1[2] - *a1) >> 7) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((a1[2] - *a1) >> 7);
  }
  if (0x8F5C28F5C28F5C29 * ((a1[2] - *a1) >> 7) >= 0xA3D70A3D70A3DLL) {
    unint64_t v6 = 0x147AE147AE147ALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x147AE147AE147ALL) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(3200 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[3200 * v3];
  uint64_t v9 = &v7[3200 * v6];
  sub_5900C0((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 3200;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 3200;
    v11 -= 3200;
    sub_5900C0((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  unint64_t v13 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      v11 -= 3200;
      sub_58FE78((uint64_t)v11);
    }
    while (v11 != v13);
    unint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

double sub_5900C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)a3 = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v3 = *(void *)(a3 + 96);
  *(_OWORD *)(a3 + 88) = 0u;
  *(void *)(a2 + 96) = v3;
  LODWORD(v3) = *(_DWORD *)(a3 + 104);
  *(unsigned char *)(a2 + 108) = *(unsigned char *)(a3 + 108);
  *(_DWORD *)(a2 + 104) = v3;
  long long v4 = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = v4;
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 120) = 0u;
  long long v5 = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(_OWORD *)(a2 + 136) = v5;
  *(_OWORD *)(a3 + 144) = 0u;
  *(void *)(a3 + 136) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  uint64_t v6 = a2 + 160;
  *(void *)(a2 + 176) = 0;
  uint64_t v7 = a3 + 160;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(void *)(a2 + 176) = *(void *)(a3 + 176);
  *(void *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
  *(void *)(a2 + 200) = *(void *)(a3 + 200);
  *(void *)(a3 + 200) = 0;
  *(_OWORD *)(a3 + 184) = 0u;
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
  *(void *)(a2 + 224) = *(void *)(a3 + 224);
  *(void *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 208) = 0u;
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
  *(void *)(a2 + 248) = *(void *)(a3 + 248);
  *(_OWORD *)(a3 + 232) = 0u;
  uint64_t v8 = *(void *)(a3 + 256);
  *(_OWORD *)(a3 + 248) = 0u;
  *(void *)(a2 + 256) = v8;
  LODWORD(v8) = *(_DWORD *)(a3 + 264);
  *(unsigned char *)(a2 + 268) = *(unsigned char *)(a3 + 268);
  *(_DWORD *)(a2 + 264) = v8;
  long long v9 = *(_OWORD *)(a3 + 272);
  *(void *)(a2 + 288) = *(void *)(a3 + 288);
  *(_OWORD *)(a2 + 272) = v9;
  *(void *)(a3 + 280) = 0;
  *(void *)(a3 + 288) = 0;
  *(void *)(a3 + 272) = 0;
  long long v10 = *(_OWORD *)(a3 + 296);
  *(void *)(a2 + 312) = *(void *)(a3 + 312);
  *(_OWORD *)(a2 + 296) = v10;
  *(void *)(a3 + 304) = 0;
  *(void *)(a3 + 312) = 0;
  *(void *)(a3 + 296) = 0;
  sub_59029C(a2 + 320, a3 + 320);

  *(void *)&double result = sub_59029C(v6 + 1600, v7 + 1600).n128_u64[0];
  return result;
}

__n128 sub_59029C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v2 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v2;
  long long v3 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v3;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  long long v6 = *(_OWORD *)(a2 + 160);
  uint64_t v5 = a2 + 160;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 176) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 24);
  *(void *)(a1 + 200) = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v5 + 48);
  *(void *)(a1 + 224) = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v5 + 72);
  *(void *)(a1 + 248) = *(void *)(v5 + 88);
  *(_OWORD *)(v5 + 72) = 0u;
  uint64_t v7 = *(void *)(v5 + 96);
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(v5 + 104);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(v5 + 108);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(v5 + 112);
  *(void *)(a1 + 288) = *(void *)(v5 + 128);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  long long v9 = *(_OWORD *)(v5 + 136);
  *(void *)(a1 + 312) = *(void *)(v5 + 152);
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(v5 + 144) = 0u;
  *(void *)(v5 + 136) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v5 + 160);
  *(void *)(a1 + 336) = *(void *)(v5 + 176);
  *(void *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v10 = *(void *)(v5 + 192);
  *(void *)(a1 + 344) = *(void *)(v5 + 184);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 360) = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v5 + 208);
  *(void *)(a1 + 384) = *(void *)(v5 + 224);
  *(void *)(v5 + 224) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v11 = *(void *)(v5 + 240);
  *(void *)(a1 + 392) = *(void *)(v5 + 232);
  *(void *)(a1 + 400) = v11;
  *(void *)(a1 + 408) = *(void *)(v5 + 248);
  *(_OWORD *)(v5 + 232) = 0u;
  uint64_t v12 = *(void *)(v5 + 256);
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(a1 + 416) = v12;
  LODWORD(v12) = *(_DWORD *)(v5 + 264);
  *(unsigned char *)(a1 + 428) = *(unsigned char *)(v5 + 268);
  *(_DWORD *)(a1 + 424) = v12;
  long long v13 = *(_OWORD *)(v5 + 272);
  *(void *)(a1 + 448) = *(void *)(v5 + 288);
  *(_OWORD *)(a1 + 432) = v13;
  *(void *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  long long v14 = *(_OWORD *)(v5 + 296);
  *(void *)(a1 + 472) = *(void *)(v5 + 312);
  *(_OWORD *)(a1 + 456) = v14;
  *(_OWORD *)(v5 + 304) = 0u;
  *(void *)(v5 + 296) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(v5 + 320);
  *(void *)(a1 + 496) = *(void *)(v5 + 336);
  *(void *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 504) = *(void *)(v5 + 344);
  *(void *)(a1 + 512) = *(void *)(v5 + 352);
  *(void *)(a1 + 520) = *(void *)(v5 + 360);
  *(void *)(v5 + 360) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(v5 + 368);
  *(void *)(a1 + 544) = *(void *)(v5 + 384);
  *(void *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 368) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(v5 + 392);
  *(void *)(a1 + 560) = *(void *)(v5 + 400);
  *(void *)(a1 + 568) = *(void *)(v5 + 408);
  *(_OWORD *)(v5 + 392) = 0u;
  uint64_t v15 = *(void *)(v5 + 416);
  *(_OWORD *)(v5 + 408) = 0u;
  *(void *)(a1 + 576) = v15;
  LODWORD(v15) = *(_DWORD *)(v5 + 424);
  *(unsigned char *)(a1 + 588) = *(unsigned char *)(v5 + 428);
  *(_DWORD *)(a1 + 584) = v15;
  long long v16 = *(_OWORD *)(v5 + 432);
  *(void *)(a1 + 608) = *(void *)(v5 + 448);
  *(_OWORD *)(a1 + 592) = v16;
  *(void *)(v5 + 432) = 0;
  *(_OWORD *)(v5 + 440) = 0u;
  long long v17 = *(_OWORD *)(v5 + 456);
  *(void *)(a1 + 632) = *(void *)(v5 + 472);
  *(_OWORD *)(a1 + 616) = v17;
  *(_OWORD *)(v5 + 464) = 0u;
  *(void *)(v5 + 456) = 0;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(v5 + 480);
  *(void *)(a1 + 656) = *(void *)(v5 + 496);
  *(void *)(v5 + 496) = 0;
  *(_OWORD *)(v5 + 480) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 664) = *(void *)(v5 + 504);
  *(void *)(a1 + 672) = *(void *)(v5 + 512);
  *(void *)(a1 + 680) = *(void *)(v5 + 520);
  *(void *)(v5 + 520) = 0;
  *(_OWORD *)(v5 + 504) = 0u;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(v5 + 528);
  *(void *)(a1 + 704) = *(void *)(v5 + 544);
  *(void *)(v5 + 544) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 712) = *(void *)(v5 + 552);
  *(void *)(a1 + 720) = *(void *)(v5 + 560);
  *(void *)(a1 + 728) = *(void *)(v5 + 568);
  *(_OWORD *)(v5 + 552) = 0u;
  uint64_t v18 = *(void *)(v5 + 576);
  *(_OWORD *)(v5 + 568) = 0u;
  *(void *)(a1 + 736) = v18;
  LODWORD(v18) = *(_DWORD *)(v5 + 584);
  *(unsigned char *)(a1 + 748) = *(unsigned char *)(v5 + 588);
  *(_DWORD *)(a1 + 744) = v18;
  long long v19 = *(_OWORD *)(v5 + 592);
  *(void *)(a1 + 768) = *(void *)(v5 + 608);
  *(_OWORD *)(a1 + 752) = v19;
  *(void *)(v5 + 592) = 0;
  *(_OWORD *)(v5 + 600) = 0u;
  long long v20 = *(_OWORD *)(v5 + 616);
  *(void *)(a1 + 792) = *(void *)(v5 + 632);
  *(_OWORD *)(a1 + 776) = v20;
  *(_OWORD *)(v5 + 624) = 0u;
  *(void *)(v5 + 616) = 0;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(v5 + 640);
  *(void *)(a1 + 816) = *(void *)(v5 + 656);
  *(void *)(v5 + 656) = 0;
  *(_OWORD *)(v5 + 640) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 824) = *(void *)(v5 + 664);
  *(void *)(a1 + 832) = *(void *)(v5 + 672);
  *(void *)(a1 + 840) = *(void *)(v5 + 680);
  *(void *)(v5 + 680) = 0;
  *(_OWORD *)(v5 + 664) = 0u;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 848) = *(_OWORD *)(v5 + 688);
  *(void *)(a1 + 864) = *(void *)(v5 + 704);
  *(void *)(v5 + 704) = 0;
  *(_OWORD *)(v5 + 688) = 0u;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 872) = *(void *)(v5 + 712);
  *(void *)(a1 + 880) = *(void *)(v5 + 720);
  *(void *)(a1 + 888) = *(void *)(v5 + 728);
  *(_OWORD *)(v5 + 712) = 0u;
  uint64_t v21 = *(void *)(v5 + 736);
  *(_OWORD *)(v5 + 728) = 0u;
  *(void *)(a1 + 896) = v21;
  LODWORD(v21) = *(_DWORD *)(v5 + 744);
  *(unsigned char *)(a1 + 908) = *(unsigned char *)(v5 + 748);
  *(_DWORD *)(a1 + 904) = v21;
  long long v22 = *(_OWORD *)(v5 + 752);
  *(void *)(a1 + 928) = *(void *)(v5 + 768);
  *(_OWORD *)(a1 + 912) = v22;
  *(void *)(v5 + 752) = 0;
  *(_OWORD *)(v5 + 760) = 0u;
  long long v23 = *(_OWORD *)(v5 + 776);
  *(void *)(a1 + 952) = *(void *)(v5 + 792);
  *(_OWORD *)(a1 + 936) = v23;
  *(_OWORD *)(v5 + 784) = 0u;
  *(void *)(v5 + 776) = 0;
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(v5 + 800);
  *(void *)(a1 + 976) = *(void *)(v5 + 816);
  *(void *)(v5 + 816) = 0;
  *(_OWORD *)(v5 + 800) = 0u;
  *(void *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(void *)(a1 + 984) = *(void *)(v5 + 824);
  *(void *)(a1 + 992) = *(void *)(v5 + 832);
  *(void *)(a1 + 1000) = *(void *)(v5 + 840);
  *(void *)(v5 + 840) = 0;
  *(_OWORD *)(v5 + 824) = 0u;
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v5 + 848);
  *(void *)(a1 + 1024) = *(void *)(v5 + 864);
  *(void *)(v5 + 864) = 0;
  *(_OWORD *)(v5 + 848) = 0u;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1032) = *(void *)(v5 + 872);
  *(void *)(a1 + 1040) = *(void *)(v5 + 880);
  *(void *)(a1 + 1048) = *(void *)(v5 + 888);
  *(_OWORD *)(v5 + 872) = 0u;
  uint64_t v24 = *(void *)(v5 + 896);
  *(_OWORD *)(v5 + 888) = 0u;
  *(void *)(a1 + 1056) = v24;
  LODWORD(v24) = *(_DWORD *)(v5 + 904);
  *(unsigned char *)(a1 + 1068) = *(unsigned char *)(v5 + 908);
  *(_DWORD *)(a1 + 1064) = v24;
  long long v25 = *(_OWORD *)(v5 + 912);
  *(void *)(a1 + 1088) = *(void *)(v5 + 928);
  *(_OWORD *)(a1 + 1072) = v25;
  *(void *)(v5 + 912) = 0;
  *(_OWORD *)(v5 + 920) = 0u;
  long long v26 = *(_OWORD *)(v5 + 936);
  *(void *)(a1 + 1112) = *(void *)(v5 + 952);
  *(_OWORD *)(a1 + 1096) = v26;
  *(_OWORD *)(v5 + 944) = 0u;
  *(void *)(v5 + 936) = 0;
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(v5 + 960);
  *(void *)(a1 + 1136) = *(void *)(v5 + 976);
  *(void *)(v5 + 976) = 0;
  *(_OWORD *)(v5 + 960) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1144) = *(void *)(v5 + 984);
  *(void *)(a1 + 1152) = *(void *)(v5 + 992);
  *(void *)(a1 + 1160) = *(void *)(v5 + 1000);
  *(void *)(v5 + 1000) = 0;
  *(_OWORD *)(v5 + 984) = 0u;
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(v5 + 1008);
  *(void *)(a1 + 1184) = *(void *)(v5 + 1024);
  *(void *)(v5 + 1024) = 0;
  *(_OWORD *)(v5 + 1008) = 0u;
  *(void *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(void *)(a1 + 1192) = *(void *)(v5 + 1032);
  *(void *)(a1 + 1200) = *(void *)(v5 + 1040);
  *(void *)(a1 + 1208) = *(void *)(v5 + 1048);
  *(_OWORD *)(v5 + 1032) = 0u;
  uint64_t v27 = *(void *)(v5 + 1056);
  *(_OWORD *)(v5 + 1048) = 0u;
  *(void *)(a1 + 1216) = v27;
  LODWORD(v27) = *(_DWORD *)(v5 + 1064);
  *(unsigned char *)(a1 + 1228) = *(unsigned char *)(v5 + 1068);
  *(_DWORD *)(a1 + 1224) = v27;
  long long v28 = *(_OWORD *)(v5 + 1072);
  *(void *)(a1 + 1248) = *(void *)(v5 + 1088);
  *(_OWORD *)(a1 + 1232) = v28;
  *(void *)(v5 + 1072) = 0;
  *(_OWORD *)(v5 + 1080) = 0u;
  long long v29 = *(_OWORD *)(v5 + 1096);
  *(void *)(a1 + 1272) = *(void *)(v5 + 1112);
  *(_OWORD *)(a1 + 1256) = v29;
  *(_OWORD *)(v5 + 1104) = 0u;
  *(void *)(v5 + 1096) = 0;
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)(v5 + 1120);
  *(void *)(a1 + 1296) = *(void *)(v5 + 1136);
  *(void *)(v5 + 1136) = 0;
  *(_OWORD *)(v5 + 1120) = 0u;
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1304) = *(void *)(v5 + 1144);
  *(void *)(a1 + 1312) = *(void *)(v5 + 1152);
  *(void *)(a1 + 1320) = *(void *)(v5 + 1160);
  *(void *)(v5 + 1152) = 0;
  *(void *)(v5 + 1144) = 0;
  *(void *)(v5 + 1160) = 0;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(v5 + 1168);
  *(void *)(a1 + 1344) = *(void *)(v5 + 1184);
  *(void *)(v5 + 1184) = 0;
  *(_OWORD *)(v5 + 1168) = 0u;
  *(void *)(a1 + 1360) = 0;
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1352) = *(void *)(v5 + 1192);
  *(void *)(a1 + 1360) = *(void *)(v5 + 1200);
  *(void *)(a1 + 1368) = *(void *)(v5 + 1208);
  *(void *)(v5 + 1208) = 0;
  *(void *)(v5 + 1200) = 0;
  *(void *)(v5 + 1192) = 0;
  uint64_t v30 = *(void *)(v5 + 1216);
  *(void *)(v5 + 1216) = 0;
  *(void *)(a1 + 1376) = v30;
  LODWORD(v30) = *(_DWORD *)(v5 + 1224);
  *(unsigned char *)(a1 + 1388) = *(unsigned char *)(v5 + 1228);
  *(_DWORD *)(a1 + 1384) = v30;
  long long v31 = *(_OWORD *)(v5 + 1232);
  *(void *)(a1 + 1408) = *(void *)(v5 + 1248);
  *(_OWORD *)(a1 + 1392) = v31;
  *(void *)(v5 + 1232) = 0;
  *(void *)(v5 + 1248) = 0;
  *(void *)(v5 + 1240) = 0;
  __n128 result = *(__n128 *)(v5 + 1256);
  *(void *)(a1 + 1432) = *(void *)(v5 + 1272);
  *(__n128 *)(a1 + 1416) = result;
  *(void *)(v5 + 1272) = 0;
  *(void *)(v5 + 1264) = 0;
  *(void *)(v5 + 1256) = 0;
  return result;
}

double sub_590A70()
{
  byte_257886F = 1;
  word_2578858 = 65;
  byte_2578887 = 1;
  word_2578870 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2578918 = 0u;
  *(_OWORD *)&qword_2578928 = 0u;
  dword_2578938 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2578918, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2578918, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2578918, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2578918, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_257889F = 8;
  strcpy((char *)&qword_2578888, "any_mode");
  byte_25788B7 = 7;
  strcpy((char *)&dword_25788A0, "cycling");
  byte_25788CF = 7;
  strcpy((char *)&dword_25788B8, "driving");
  byte_25788E7 = 7;
  strcpy((char *)&dword_25788D0, "walking");
  qword_25788F0 = 0;
  qword_25788F8 = 0;
  qword_25788E8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25788E8 = (uint64_t)v0;
  qword_25788F0 = (uint64_t)(v0 + 9);
  qword_25788F8 = (uint64_t)(v0 + 9);
  qword_2578900 = 0;
  qword_2578908 = 0;
  unk_2578910 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2578908 = (uint64_t)(v1 + 9);
  unk_2578910 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2578900 = (uint64_t)v1;
  return result;
}

void sub_590D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2578928) {
    sub_20A9530((void **)qword_2578928);
  }
  uint64_t v37 = (void *)xmmword_2578918;
  *(void *)&xmmword_2578918 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_590DDC(uint64_t a1)
{
  return nullsub_1(a1 + 48);
}

uint64_t sub_590DE4(uint64_t a1, uint64_t a2)
{
  return sub_590DEC(a1 + 48, a2);
}

uint64_t sub_590DEC(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 48) = v9;
    long long v11 = *(_OWORD *)(a2 + 96);
    long long v12 = *(_OWORD *)(a2 + 112);
    long long v13 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = v13;
    *(_OWORD *)(a1 + 96) = v11;
  }
  else
  {
    sub_592904((uint64_t *)a1, *(void *)a2, *(void *)(a2 + 8), 0xFF55E3181697D6CDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_5A4CBC(a1 + 24, *(std::string **)(a2 + 24), *(std::string **)(a2 + 32), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
    long long v4 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 48) = v4;
    long long v6 = *(_OWORD *)(a2 + 96);
    long long v7 = *(_OWORD *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v7;
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 96) = v6;
    sub_5A500C(a1 + 152, *(void *)(a2 + 152), *(void *)(a2 + 160), 0x7E3F1F8FC7E3F1F9 * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 4));
  }
  uint64_t v14 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v14;
  sub_52FD00(a1 + 192, a2 + 192);
  sub_52FD00(a1 + 352, a2 + 352);
  sub_52FD00(a1 + 512, a2 + 512);
  sub_52FD00(a1 + 672, a2 + 672);
  sub_52FD00(a1 + 832, a2 + 832);
  if (a1 != a2) {
    sub_69208(a1 + 992, *(std::string **)(a2 + 992), *(std::string **)(a2 + 1000), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1000) - *(void *)(a2 + 992)) >> 3));
  }
  sub_52FD00(a1 + 1016, a2 + 1016);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  sub_4F39B8(a1 + 1184, (std::string *)(a2 + 1184));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 1232));
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
  std::string::operator=((std::string *)(a1 + 1264), (const std::string *)(a2 + 1264));
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  sub_592670((uint64_t *)(a1 + 1304), a2 + 1304);
  sub_59276C(a1 + 2392, a2 + 2392);
  if (a1 != a2) {
    sub_5A5C34((void *)(a1 + 7192), *(char **)(a2 + 7192), *(char **)(a2 + 7200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 7200) - *(void *)(a2 + 7192)) >> 3));
  }
  uint64_t v15 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v15;
  std::string::operator=((std::string *)(a1 + 7232), (const std::string *)(a2 + 7232));
  std::string::operator=((std::string *)(a1 + 7256), (const std::string *)(a2 + 7256));
  sub_4F39B8(a1 + 7280, (std::string *)(a2 + 7280));
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  std::string::operator=((std::string *)(a1 + 7328), (const std::string *)(a2 + 7328));
  *(unsigned char *)(a1 + 7352) = *(unsigned char *)(a2 + 7352);
  std::string::operator=((std::string *)(a1 + 7360), (const std::string *)(a2 + 7360));
  *(unsigned char *)(a1 + 7384) = *(unsigned char *)(a2 + 7384);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 7440), (const std::string *)(a2 + 7440));
    std::string::operator=((std::string *)(a1 + 7464), (const std::string *)(a2 + 7464));
    std::string::operator=((std::string *)(a1 + 7488), (const std::string *)(a2 + 7488));
  }
  else
  {
    sub_5A5DB8((uint64_t *)(a1 + 7392), *(void *)(a2 + 7392), *(void *)(a2 + 7400), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 7400) - *(void *)(a2 + 7392)) >> 5));
    sub_4C02B4((void **)(a1 + 7416), *(long long **)(a2 + 7416), *(long long **)(a2 + 7424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7424) - *(void *)(a2 + 7416)) >> 4));
    std::string::operator=((std::string *)(a1 + 7440), (const std::string *)(a2 + 7440));
    std::string::operator=((std::string *)(a1 + 7464), (const std::string *)(a2 + 7464));
    std::string::operator=((std::string *)(a1 + 7488), (const std::string *)(a2 + 7488));
    sub_147D0((void *)(a1 + 7512), *(char **)(a2 + 7512), *(char **)(a2 + 7520), (uint64_t)(*(void *)(a2 + 7520) - *(void *)(a2 + 7512)) >> 2);
    sub_572E74((uint64_t *)(a1 + 7536), *(void *)(a2 + 7536), *(void *)(a2 + 7544), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7544) - *(void *)(a2 + 7536)) >> 5));
  }
  return a1;
}

uint64_t *sub_5911AC(uint64_t a1, uint64_t *a2)
{
  double result = (uint64_t *)(a1 + 24);
  if (result != a2) {
    return (uint64_t *)sub_5A64DC(result, *a2, a2[1], 0xBAA6550FFBAA6551 * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t sub_5911E4(uint64_t a1, uint64_t a2)
{
  return sub_6467E8((void *)(a1 + 48), a2);
}

uint64_t sub_5911EC(uint64_t a1)
{
  return a1 + 7632;
}

uint64_t *sub_5911F8(uint64_t a1, uint64_t *a2)
{
  double result = (uint64_t *)(a1 + 7632);
  if (result != a2) {
    return (uint64_t *)sub_5A5DB8(result, *a2, a2[1], 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 5));
  }
  return result;
}

BOOL sub_591234(uint64_t a1)
{
  return *(void *)(a1 + 7632) != *(void *)(a1 + 7640);
}

uint64_t sub_591248(uint64_t a1)
{
  return a1 + 7608;
}

uint64_t sub_591254(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[952];
  if (v3 >= a1[953])
  {
    uint64_t result = sub_5A73FC(a1 + 951, a2);
    a1[952] = result;
  }
  else
  {
    sub_4BE9F4(a1[952], a2);
    uint64_t result = v3 + 1120;
    a1[952] = v3 + 1120;
    a1[952] = v3 + 1120;
  }
  return result;
}

void sub_5912B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 7616) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_5912BC(uint64_t a1)
{
  return sub_646938((void *)(a1 + 48));
}

BOOL sub_5912C4(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  if (sub_45FB38((void *)(a1 + 48))) {
    return 0;
  }
  unint64_t v3 = (uint64_t *)nullsub_1(v1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 1;
  }
  do
  {
    uint64_t v6 = *(void *)(v4 + 1088);
    uint64_t v7 = *(void *)(v4 + 1096);
    BOOL result = v6 != v7;
    v4 += 12328;
  }
  while (v6 != v7 && v4 != v5);
  return result;
}

uint64_t sub_59133C(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = sub_35E640();
  *(void *)(a1 + 56) = 0x8000000080000000;
  *(_DWORD *)(a1 + 64) = 0x7FFFFFFF;
  *(void *)(a1 + 72) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 80) = 0x8000000080000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 117) = 1;
  *(_DWORD *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 121) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(unsigned char *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = -1;
  *(unsigned char *)(a1 + 184) = 0;
  sub_5F3B34(a1 + 192);
  sub_5F3B34(a1 + 352);
  sub_5F3B34(a1 + 512);
  sub_5F3B34(a1 + 672);
  sub_5F3B34(a1 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_5F3B34(a1 + 1016);
  *(_DWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1227) = -1;
  *(void *)(a1 + 1231) = 0;
  *(void *)(a1 + 1247) = 0;
  *(void *)(a1 + 1239) = 0;
  *(_WORD *)(a1 + 1255) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1296) = 0;
  sub_4F29BC(a1 + 1304);
  sub_59171C(a1 + 2392);
  *(_DWORD *)(a1 + 7224) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7312) = -1;
  *(_DWORD *)(a1 + 7320) = -1;
  *(_DWORD *)(a1 + 7323) = -1;
  *(void *)(a1 + 7327) = 0;
  *(void *)(a1 + 7343) = 0;
  *(void *)(a1 + 7335) = 0;
  *(_WORD *)(a1 + 7351) = 0;
  *(void *)(a1 + 7360) = 0;
  *(void *)(a1 + 7376) = 0;
  *(void *)(a1 + 7368) = 0;
  *(unsigned char *)(a1 + 7384) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7520) = 0u;
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  return a1;
}

void sub_591514(_Unwind_Exception *a1)
{
  long long v10 = v6;
  sub_4F2BD0(v10);
  sub_4D9814(v9);
  sub_4D4B58(v8);
  sub_1A668(v1 + 124);
  sub_4D4B58(v7);
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_5915D8(v1 + 19);
  sub_591648(v1 + 3);
  sub_5916B4(v1);
  _Unwind_Resume(a1);
}

void sub_5915A4()
{
}

void sub_5915AC()
{
}

void sub_5915B4()
{
}

void sub_5915BC(_Unwind_Exception *a1)
{
  sub_591648(v1 + 3);
  sub_5916B4(v1);
  _Unwind_Resume(a1);
}

void **sub_5915D8(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 32))
        {
          sub_3A6B94((uint64_t)(v3 - 1152));
          *(v3 - 32) = 0;
        }
        v3 -= 1168;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591648(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 176;
        sub_57523C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_5916B4(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_5752F4(v3 - 12328);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_59171C(uint64_t a1)
{
  uint64_t v2 = sub_5F3B34(a1);
  sub_5F3B34(v2 + 160);
  sub_5F3B34(a1 + 320);
  sub_586064(a1 + 480);
  sub_586064(a1 + 1920);
  sub_586064(a1 + 3360);
  return a1;
}

void sub_59178C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_585FF0(v6);
  sub_585FF0(v5);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_5917DC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5917F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_591864(uint64_t a1)
{
  *(void *)(a1 + 40) = off_2438EC8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    *(void *)a1 = off_2438EC8;
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else
  {
    *(void *)a1 = off_2438EC8;
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void **sub_591918(void **a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    do
    {
      uint64_t v7 = (void *)*v2;
      uint64_t v8 = (void *)v2[4];
      if (v8)
      {
        v2[5] = v8;
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v5 - 5);
        if (v9)
        {
          *((void *)v5 - 4) = v9;
          operator delete(v9);
        }
        v5 -= 48;
      }
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

void **sub_5919CC(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 608;
        sub_575D30((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_591A38(void *a1)
{
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  sub_4D4B58((uint64_t)(a1 + 9));
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = a1[7];
    uint64_t v5 = (void *)a1[6];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = v4 - 176;
        sub_4D4B58(v4 - 160);
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  uint64_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t **sub_591AC8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      do
      {
        if (*v5)
        {
          sub_52F808(v5);
          operator delete((void *)*v5);
        }
        uint64_t v6 = v5 - 4;
        v5 -= 13;
      }
      while (v6 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_591B4C(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 48);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 40);
          uint64_t v5 = *(void **)(v3 - 48);
          if (v7 != v6)
          {
            uint64_t v8 = *(void *)(v3 - 40);
            do
            {
              long long v10 = *(void **)(v8 - 24);
              v8 -= 24;
              uint64_t v9 = v10;
              if (v10)
              {
                *(void *)(v7 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v7 = v8;
            }
            while (v8 != v6);
            uint64_t v5 = *(void **)(v3 - 48);
          }
          *(void *)(v3 - 40) = v6;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  long long v11 = (void *)a1[2];
  if (v11)
  {
    a1[3] = v11;
    operator delete(v11);
  }
  return a1;
}

void **sub_591C10(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 560;
      do
      {
        uint64_t v7 = *(void **)(v5 + 496);
        if (v7)
        {
          *(void *)(v5 + 504) = v7;
          operator delete(v7);
        }
        sub_510298(v5 + 24);
        uint64_t v8 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v6 = (void *)(v5 - 56);
        v5 -= 616;
      }
      while (v6 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591CA4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 5);
        v5 -= 40;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 4) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591D1C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 19);
        if (v5)
        {
          *((void *)v3 - 18) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 24);
        if (v6)
        {
          *((void *)v3 - 23) = v6;
          operator delete(v6);
        }
        v3 -= 192;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591DA0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_52F090(v3 - 102);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_591DFC(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*(v3 - 6);
        if (v5)
        {
          *(v3 - 5) = v5;
          operator delete(v5);
        }
        v3 -= 51;
        sub_4F32CC(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591E78(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_52F1E8((uint64_t)(v3 - 135));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_591ED4(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_575E00(v3 - 2400);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_591F30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[4];
      if (v6)
      {
        v2[5] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_591F9C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void **sub_591FF0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 176;
        sub_4D4B58((uint64_t)(v3 - 160));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_592058(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_59209C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void **sub_5920E0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_4F31D0(v3 - 13);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_59213C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4D4B58(v3 - 160);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_592198(uint64_t a1)
{
  *(void *)(a1 + 88) = off_2439F28;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
    {
LABEL_3:
      *(void *)(a1 + 88) = off_2438EC8;
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  *(void *)(a1 + 88) = off_2438EC8;
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    *(void *)(a1 + 48) = off_2438EC8;
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 56));
    *(void *)a1 = off_2438EC8;
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 96));
  *(void *)(a1 + 48) = off_2438EC8;
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  *(void *)a1 = off_2438EC8;
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_59230C(uint64_t *a1)
{
  uint64_t v2 = (void **)(a1 + 7);
  if (a1[7])
  {
    sub_52F808(a1 + 7);
    operator delete(*v2);
  }
  if (*a1)
  {
    sub_52F8B0((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void **sub_592364(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_576848(v3 - 336);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_5923C0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_576A58((uint64_t)(v3 - 83));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_59241C(uint64_t *a1)
{
  if (*a1)
  {
    sub_52FA20((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_592458(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v6 = (void *)*v2;
      uint64_t v7 = v2[3];
      if (v7)
      {
        uint64_t v8 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0) {
              operator delete(*(void **)(v8 - 24));
            }
            v8 -= 24;
          }
          while (v8 != v7);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_592500(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = v2[3];
      if (v5)
      {
        uint64_t v6 = v2[4];
        uint64_t v3 = (void *)v2[3];
        if (v6 != v5)
        {
          do
          {
            if (*(char *)(v6 - 1) < 0) {
              operator delete(*(void **)(v6 - 24));
            }
            v6 -= 24;
          }
          while (v6 != v5);
          uint64_t v3 = (void *)v2[3];
        }
        v2[4] = v5;
        operator delete(v3);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
}

uint64_t sub_592590(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      uint64_t v6 = (void *)*((void *)v2 + 6);
      if (v6)
      {
        *((void *)v2 + 7) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_59260C(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void *)*((void *)v2 + 6);
      if (v4)
      {
        *((void *)v2 + 7) = v4;
        operator delete(v4);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_592670(uint64_t *a1, uint64_t a2)
{
  if (a1 == (uint64_t *)a2)
  {
    sub_5A53C4((uint64_t)(a1 + 6), a2 + 48);
    sub_5A53C4((uint64_t)(a1 + 68), a2 + 544);
  }
  else
  {
    sub_69208((uint64_t)a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_5A54A0(a1 + 3, *(void *)(a2 + 24), *(void *)(a2 + 32), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
    sub_5A53C4((uint64_t)(a1 + 6), a2 + 48);
    sub_5A53C4((uint64_t)(a1 + 68), a2 + 544);
    sub_5A54A0(a1 + 130, *(void *)(a2 + 1040), *(void *)(a2 + 1048), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 1048) - *(void *)(a2 + 1040)) >> 4));
    sub_5A54A0(a1 + 133, *(void *)(a2 + 1064), *(void *)(a2 + 1072), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 4));
  }
  return a1;
}

uint64_t sub_59276C(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_592904(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xFF55E3181697D6CDLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      long long v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_5752F4(v10 - 12328);
        while (v10 != v9);
        long long v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x550E73F4B4149) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xFF55E3181697D6CDLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x2A8739FA5A0A4 ? 0x550E73F4B4149 : v13;
    if (v14 > 0x550E73F4B4149) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 12328 * v14;
    uint64_t result = (uint64_t)operator new(12328 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_592BE8(v17 + v18, v6 + v18);
        v18 += 12328;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
    return result;
  }
  uint64_t result = a1[1];
  if (0xFF55E3181697D6CDLL * ((result - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v23 = v9;
      if (result == v9)
      {
LABEL_36:
        a1[1] = v23;
        return result;
      }
    }
    else
    {
      uint64_t v23 = v9;
      do
      {
        sub_59C080(v9, v6);
        v6 += 12328;
        v9 += 12328;
        v23 += 12328;
      }
      while (v6 != a3);
      uint64_t result = a1[1];
      if (result == v23) {
        goto LABEL_36;
      }
    }
    do
      uint64_t result = sub_5752F4(result - 12328);
    while (result != v23);
    goto LABEL_36;
  }
  uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
  if (result != v9)
  {
    uint64_t v20 = 8 * ((result - v9) >> 3);
    do
    {
      uint64_t result = sub_59C080(v9, v6);
      v6 += 12328;
      v9 += 12328;
      v20 -= 12328;
    }
    while (v20);
    uint64_t v9 = a1[1];
  }
  uint64_t v21 = v9;
  if (v19 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t result = sub_592BE8(v9 + v22, v19 + v22);
      v22 += 12328;
    }
    while (v19 + v22 != a3);
    uint64_t v21 = v9 + v22;
  }
  a1[1] = v21;
  return result;
}

uint64_t sub_592BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_3B181C(a1, a2);
  *(_WORD *)(v4 + 1056) = *(_WORD *)(a2 + 1056);
  *(void *)(v4 + 1064) = 0;
  *(void *)(v4 + 1080) = 0;
  *(void *)(v4 + 1072) = 0;
  sub_593F6C(v4 + 1064, *(void *)(a2 + 1064), *(void *)(a2 + 1072), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5));
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  sub_593F6C(a1 + 1088, *(void *)(a2 + 1088), *(void *)(a2 + 1096), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1096) - *(void *)(a2 + 1088)) >> 5));
  *(void *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  sub_59888C(a1 + 1112, *(void *)(a2 + 1112), *(void *)(a2 + 1120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 1120) - *(void *)(a2 + 1112)) >> 4));
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  uint64_t v5 = *(unsigned char **)(a2 + 1136);
  uint64_t v6 = *(unsigned char **)(a2 + 1144);
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6 - v5);
    *(void *)(a1 + 1136) = v8;
    *(void *)(a1 + 1144) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 1152) = v9;
    memcpy(v8, v5, v7);
    *(void *)(a1 + 1144) = v9;
  }
  *(void *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  uint64_t v10 = *(unsigned char **)(a2 + 1160);
  long long v11 = *(unsigned char **)(a2 + 1168);
  int64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v11 - v10);
    *(void *)(a1 + 1160) = v13;
    *(void *)(a1 + 1168) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 1176) = v14;
    memcpy(v13, v10, v12);
    *(void *)(a1 + 1168) = v14;
  }
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  sub_598AE0((void *)(a1 + 1184), *(void *)(a2 + 1184), *(void *)(a2 + 1192), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 1192) - *(void *)(a2 + 1184)) >> 5));
  if (*(char *)(a2 + 1231) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1208), *(void **)(a2 + 1208), *(void *)(a2 + 1216));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 1208);
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    *(_OWORD *)(a1 + 1208) = v15;
  }
  long long v16 = (unsigned char *)(a1 + 1232);
  if (*(char *)(a2 + 1255) < 0)
  {
    sub_4200(v16, *(void **)(a2 + 1232), *(void *)(a2 + 1240));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 1232);
    *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
    *(_OWORD *)long long v16 = v17;
  }
  sub_598C04(a1 + 1256, (uint64_t *)(a2 + 1256));
  sub_599260(a1 + 2344, a2 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_8A6F8((char *)(a1 + 7144), *(void *)(a2 + 7144), *(void *)(a2 + 7152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7152) - *(void *)(a2 + 7144)) >> 3));
  sub_4F58AC(a1 + 7168, a2 + 7168);
  *(void *)(a1 + 7344) = 0;
  *(_OWORD *)(a1 + 7328) = 0u;
  uint64_t v18 = *(unsigned char **)(a2 + 7328);
  uint64_t v19 = *(unsigned char **)(a2 + 7336);
  int64_t v20 = v19 - v18;
  if (v19 != v18)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v20 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v20);
    *(void *)(a1 + 7328) = v21;
    *(void *)(a1 + 7336) = v21;
    *(void *)(a1 + 7344) = &v21[8 * (v20 >> 3)];
    size_t v22 = 24 * ((v20 - 24) / 0x18uLL) + 24;
    memcpy(v21, v18, v22);
    *(void *)(a1 + 7336) = &v21[v22];
  }
  *(void *)(a1 + 7368) = 0;
  *(_OWORD *)(a1 + 7352) = 0u;
  sub_510340(a1 + 7352, *(void *)(a2 + 7352), *(void *)(a2 + 7360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7360) - *(void *)(a2 + 7352)) >> 5));
  if (*(char *)(a2 + 7399) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7376), *(void **)(a2 + 7376), *(void *)(a2 + 7384));
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 7376);
    *(void *)(a1 + 7392) = *(void *)(a2 + 7392);
    *(_OWORD *)(a1 + 7376) = v23;
  }
  if (*(char *)(a2 + 7423) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7400), *(void **)(a2 + 7400), *(void *)(a2 + 7408));
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 7400);
    *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
    *(_OWORD *)(a1 + 7400) = v24;
  }
  *(void *)(a1 + 7440) = 0;
  *(_OWORD *)(a1 + 7424) = 0u;
  sub_8A6F8((char *)(a1 + 7424), *(void *)(a2 + 7424), *(void *)(a2 + 7432), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7432) - *(void *)(a2 + 7424)) >> 3));
  *(void *)(a1 + 7464) = 0;
  *(_OWORD *)(a1 + 7448) = 0u;
  sub_5994B4(a1 + 7448, *(void *)(a2 + 7448), *(void *)(a2 + 7456), 0x1A8C536FE1A8C537 * ((uint64_t)(*(void *)(a2 + 7456) - *(void *)(a2 + 7448)) >> 3));
  *(void *)(a1 + 7488) = 0;
  *(_OWORD *)(a1 + 7472) = 0u;
  sub_599AAC((void *)(a1 + 7472), *(void *)(a2 + 7472), *(void *)(a2 + 7480), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7480) - *(void *)(a2 + 7472)) >> 3));
  *(void *)(a1 + 7512) = 0;
  *(_OWORD *)(a1 + 7496) = 0u;
  sub_599D50(a1 + 7496, *(void *)(a2 + 7496), *(void *)(a2 + 7504), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7504) - *(void *)(a2 + 7496)) >> 4));
  sub_5998CC(a1 + 7520, a2 + 7520);
  sub_5998CC(a1 + 8336, a2 + 8336);
  sub_4F58AC(a1 + 9152, a2 + 9152);
  sub_4F58AC(a1 + 9312, a2 + 9312);
  sub_4F58AC(a1 + 9472, a2 + 9472);
  sub_4F58AC(a1 + 9632, a2 + 9632);
  sub_4F58AC(a1 + 9792, a2 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  sub_599EE0(a1 + 9952, *(void *)(a2 + 9952), *(void *)(a2 + 9960), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 9960) - *(void *)(a2 + 9952)) >> 6));
  *(_WORD *)(a1 + 9976) = *(_WORD *)(a2 + 9976);
  *(void *)(a1 + 9984) = 0;
  *(void *)(a1 + 10000) = 0;
  *(void *)(a1 + 9992) = 0;
  sub_59A084(a1 + 9984, *(void *)(a2 + 9984), *(void *)(a2 + 9992), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 9992) - *(void *)(a2 + 9984)) >> 3));
  *(void *)(a1 + 10024) = 0;
  *(_OWORD *)(a1 + 10008) = 0u;
  sub_59A230(a1 + 10008, *(void *)(a2 + 10008), *(void *)(a2 + 10016), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10016) - *(void *)(a2 + 10008)) >> 3));
  *(void *)(a1 + 10048) = 0;
  *(_OWORD *)(a1 + 10032) = 0u;
  sub_59A230(a1 + 10032, *(void *)(a2 + 10032), *(void *)(a2 + 10040), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10040) - *(void *)(a2 + 10032)) >> 3));
  *(void *)(a1 + 10072) = 0;
  *(_OWORD *)(a1 + 10056) = 0u;
  sub_59A230(a1 + 10056, *(void *)(a2 + 10056), *(void *)(a2 + 10064), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10064) - *(void *)(a2 + 10056)) >> 3));
  long long v25 = (unsigned char *)(a1 + 10080);
  if (*(char *)(a2 + 10103) < 0)
  {
    sub_4200(v25, *(void **)(a2 + 10080), *(void *)(a2 + 10088));
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 10080);
    *(void *)(a1 + 10096) = *(void *)(a2 + 10096);
    *(_OWORD *)long long v25 = v26;
  }
  *(_OWORD *)(a1 + 10104) = *(_OWORD *)(a2 + 10104);
  *(void *)(a1 + 10120) = 0;
  *(void *)(a1 + 10136) = 0;
  *(void *)(a1 + 10128) = 0;
  uint64_t v27 = *(unsigned char **)(a2 + 10120);
  long long v28 = *(unsigned char **)(a2 + 10128);
  int64_t v29 = v28 - v27;
  if (v28 != v27)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v30 = (char *)operator new(v29);
    *(void *)(a1 + 10120) = v30;
    *(void *)(a1 + 10128) = v30;
    long long v31 = &v30[8 * (v29 >> 3)];
    *(void *)(a1 + 10136) = v31;
    memcpy(v30, v27, v29);
    *(void *)(a1 + 10128) = v31;
  }
  *(void *)(a1 + 10152) = 0;
  *(void *)(a1 + 10144) = 0;
  *(void *)(a1 + 10160) = 0;
  sub_59A3E8((void *)(a1 + 10144), *(void *)(a2 + 10144), *(void *)(a2 + 10152), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 10152) - *(void *)(a2 + 10144)) >> 3));
  *(_DWORD *)(a1 + 10168) = *(_DWORD *)(a2 + 10168);
  *(void *)(a1 + 10176) = 0;
  *(void *)(a1 + 10192) = 0;
  *(void *)(a1 + 10184) = 0;
  sub_59A5F8((void *)(a1 + 10176), *(void *)(a2 + 10176), *(void *)(a2 + 10184), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 10184) - *(void *)(a2 + 10176)) >> 3));
  sub_59A7D4(a1 + 10200, a2 + 10200);
  sub_59A7D4(a1 + 10880, a2 + 10880);
  *(void *)(a1 + 11576) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  uint64_t v32 = *(unsigned char **)(a2 + 11560);
  uint64_t v33 = *(unsigned char **)(a2 + 11568);
  int64_t v34 = v33 - v32;
  if (v33 != v32)
  {
    if (v34 < 0) {
      sub_2E00();
    }
    long long v35 = (char *)operator new(v33 - v32);
    *(void *)(a1 + 11560) = v35;
    *(void *)(a1 + 11568) = v35;
    long long v36 = &v35[4 * (v34 >> 2)];
    *(void *)(a1 + 11576) = v36;
    memcpy(v35, v32, v34);
    *(void *)(a1 + 11568) = v36;
  }
  *(void *)(a1 + 11600) = 0;
  *(_OWORD *)(a1 + 11584) = 0u;
  sub_4BF330(a1 + 11584, *(void *)(a2 + 11584), *(void *)(a2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11592) - *(void *)(a2 + 11584)) >> 3));
  *(void *)(a1 + 11624) = 0;
  *(_OWORD *)(a1 + 11608) = 0u;
  sub_4BF330(a1 + 11608, *(void *)(a2 + 11608), *(void *)(a2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11616) - *(void *)(a2 + 11608)) >> 3));
  *(void *)(a1 + 11648) = 0;
  *(_OWORD *)(a1 + 11632) = 0u;
  uint64_t v37 = *(unsigned char **)(a2 + 11632);
  long long v38 = *(unsigned char **)(a2 + 11640);
  int64_t v39 = v38 - v37;
  if (v38 != v37)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v39 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    long long v40 = (char *)operator new(v39);
    *(void *)(a1 + 11632) = v40;
    *(void *)(a1 + 11640) = v40;
    std::string::size_type v41 = &v40[8 * (v39 >> 3)];
    *(void *)(a1 + 11648) = v41;
    memcpy(v40, v37, v39 - 4);
    *(void *)(a1 + 11640) = v41;
  }
  *(void *)(a1 + 11656) = *(void *)(a2 + 11656);
  *(void *)(a1 + 11664) = 0;
  *(void *)(a1 + 11680) = 0;
  *(void *)(a1 + 11672) = 0;
  int v42 = *(unsigned char **)(a2 + 11664);
  long long v43 = *(unsigned char **)(a2 + 11672);
  int64_t v44 = v43 - v42;
  if (v43 != v42)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v44 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v45 = (char *)operator new(v44);
    *(void *)(a1 + 11664) = v45;
    *(void *)(a1 + 11672) = v45;
    long long v46 = &v45[8 * (v44 >> 3)];
    *(void *)(a1 + 11680) = v46;
    memcpy(v45, v42, v44);
    *(void *)(a1 + 11672) = v46;
  }
  sub_593E8C(a1 + 11688, a2 + 11688);
  *(void *)(a1 + 11968) = 0;
  *(_OWORD *)(a1 + 11952) = 0u;
  sub_59AB94(a1 + 11952, *(void *)(a2 + 11952), *(void *)(a2 + 11960), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 11960) - *(void *)(a2 + 11952)) >> 5));
  *(void *)(a1 + 11992) = 0;
  *(_OWORD *)(a1 + 11976) = 0u;
  sub_4BFFA4((unsigned char *)(a1 + 11976), *(void *)(a2 + 11976), *(void *)(a2 + 11984), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 11984) - *(void *)(a2 + 11976)) >> 4));
  long long v47 = (unsigned char *)(a1 + 12000);
  if (*(char *)(a2 + 12023) < 0)
  {
    sub_4200(v47, *(void **)(a2 + 12000), *(void *)(a2 + 12008));
  }
  else
  {
    long long v48 = *(_OWORD *)(a2 + 12000);
    *(void *)(a1 + 12016) = *(void *)(a2 + 12016);
    *(_OWORD *)long long v47 = v48;
  }
  *(void *)(a1 + 12040) = 0;
  *(_OWORD *)(a1 + 12024) = 0u;
  char v49 = *(unsigned char **)(a2 + 12024);
  uint64_t v50 = *(unsigned char **)(a2 + 12032);
  uint64_t v51 = v50 - v49;
  if (v50 != v49)
  {
    if (v51 < 0) {
      sub_2E00();
    }
    char v52 = (char *)operator new(v50 - v49);
    *(void *)(a1 + 12024) = v52;
    *(void *)(a1 + 12032) = v52;
    long long v53 = &v52[16 * (v51 >> 4)];
    *(void *)(a1 + 12040) = v53;
    memcpy(v52, v49, v51 - 4);
    *(void *)(a1 + 12032) = v53;
  }
  *(void *)(a1 + 12048) = *(void *)(a2 + 12048);
  *(void *)(a1 + 12056) = 0;
  *(void *)(a1 + 12072) = 0;
  *(void *)(a1 + 12064) = 0;
  size_t v54 = *(unsigned char **)(a2 + 12056);
  unint64_t v55 = *(unsigned char **)(a2 + 12064);
  uint64_t v56 = v55 - v54;
  if (v55 != v54)
  {
    if (v56 < 0) {
      sub_2E00();
    }
    std::string v57 = (char *)operator new(v55 - v54);
    *(void *)(a1 + 12056) = v57;
    *(void *)(a1 + 12064) = v57;
    *(void *)(a1 + 12072) = &v57[16 * (v56 >> 4)];
    size_t v58 = v56 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v57, v54, v58);
    *(void *)(a1 + 12064) = &v57[v58];
  }
  sub_59ADF0((void *)(a1 + 12080), (uint64_t *)(a2 + 12080));
  sub_59B068(a1 + 12104, a2 + 12104);
  *(void *)(a1 + 12144) = off_2438EC8;
  if (*(char *)(a2 + 12175) < 0)
  {
    sub_4200((unsigned char *)(a1 + 12152), *(void **)(a2 + 12152), *(void *)(a2 + 12160));
  }
  else
  {
    long long v59 = *(_OWORD *)(a2 + 12152);
    *(void *)(a1 + 12168) = *(void *)(a2 + 12168);
    *(_OWORD *)(a1 + 12152) = v59;
  }
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = *(unsigned char *)(a2 + 12176);
  *(void *)(a1 + 12184) = off_2438EC8;
  long long v60 = (unsigned char *)(a1 + 12192);
  if (*(char *)(a2 + 12215) < 0)
  {
    sub_4200(v60, *(void **)(a2 + 12192), *(void *)(a2 + 12200));
  }
  else
  {
    long long v61 = *(_OWORD *)(a2 + 12192);
    *(void *)(a1 + 12208) = *(void *)(a2 + 12208);
    *(_OWORD *)long long v60 = v61;
  }
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = *(unsigned char *)(a2 + 12216);
  sub_59B7B0(a1 + 12224, a2 + 12224);
  sub_59BC18(a1 + 12264, a2 + 12264);
  sub_74F38((void *)(a1 + 12304), a2 + 12304);
  return a1;
}

void sub_593934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void *a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t **a22,void *a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t a29,void **a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void **a38,void **a39)
{
  *(void *)(v39 + 12144) = v41;
  if (v42[152] < 0) {
    operator delete(*v40);
  }
  sub_591918(v43);
  long long v47 = *a9;
  if (*a9)
  {
    *(void *)(v39 + 12064) = v47;
    operator delete(v47);
  }
  long long v48 = *a11;
  if (*a11)
  {
    *(void *)(v39 + 12032) = v48;
    operator delete(v48);
  }
  if (*v42 < 0) {
    operator delete(*a10);
  }
  sub_28F14C(v44);
  sub_5919CC(a12);
  sub_591A38(a13);
  char v49 = *a14;
  if (*a14)
  {
    *(void *)(v39 + 11672) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *a15;
  if (*a15)
  {
    *(void *)(v39 + 11640) = v50;
    operator delete(v50);
  }
  sub_4B1DB4(a16);
  sub_4B1DB4(a17);
  uint64_t v51 = *a19;
  if (*a19)
  {
    *(void *)(v39 + 11568) = v51;
    operator delete(v51);
  }
  sub_52F970(a20);
  sub_52F970(a21);
  sub_591AC8(a22);
  sub_591B4C(a23);
  if (*(char *)(*(void *)(v45 - 104) + 2704) < 0) {
    operator delete(*a18);
  }
  sub_591C10(a24);
  sub_591C10(a25);
  sub_591C10(a26);
  sub_591CA4(a27);
  sub_591D1C(a28);
  sub_4D4B58(a29);
  sub_4D4B58(a31);
  sub_4D4B58(a33);
  sub_4D4B58(a34);
  sub_4D4B58(a35);
  sub_52F090(a36);
  sub_52F090(a37);
  sub_591DA0(*(void ***)(v45 - 232));
  sub_591DFC(*(void **)(v45 - 224));
  sub_591E78(*(void ***)(v45 - 216));
  sub_1A668(*(void ***)(v45 - 208));
  if (*(char *)(*(void *)(v45 - 104) + 24) < 0) {
    operator delete(*a30);
  }
  if (**(char **)(v45 - 104) < 0) {
    operator delete(*a32);
  }
  sub_50E790(*(void ***)(v45 - 200));
  char v52 = **(void ***)(v45 - 192);
  if (v52)
  {
    *(void *)(v39 + 7336) = v52;
    operator delete(v52);
  }
  sub_4D4B58(*(void *)(v45 - 184));
  sub_1A668(*(void ***)(v45 - 176));
  sub_575104(*(void *)(v45 - 168));
  sub_4F2BD0(*(void ***)(v45 - 160));
  if (*(char *)(v39 + 1255) < 0) {
    operator delete(*a38);
  }
  if (*(char *)(v39 + 1231) < 0) {
    operator delete(*a39);
  }
  sub_4A6814(*(uint64_t **)(v45 - 152));
  long long v53 = **(void ***)(v45 - 136);
  if (v53)
  {
    *(void *)(v39 + 1168) = v53;
    operator delete(v53);
  }
  size_t v54 = **(void ***)(v45 - 144);
  if (v54)
  {
    *(void *)(v39 + 1144) = v54;
    operator delete(v54);
  }
  sub_591648(*(void ***)(v45 - 128));
  sub_591ED4(*(void ***)(v45 - 120));
  sub_591ED4(*(void ***)(v45 - 112));
  sub_3AFFFC(v39);
  _Unwind_Resume(a1);
}

void sub_593E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (!*a14) {
    JUMPOUT(0x593C30);
  }
  JUMPOUT(0x593C28);
}

void sub_593E20()
{
}

void sub_593E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (!*a19) {
    JUMPOUT(0x593C68);
  }
  JUMPOUT(0x593C60);
}

void sub_593E54()
{
  if (!**(void **)(v0 - 192)) {
    JUMPOUT(0x593D6CLL);
  }
  JUMPOUT(0x593D64);
}

void sub_593E68()
{
  if (!**(void **)(v0 - 136)) {
    JUMPOUT(0x593DD0);
  }
  JUMPOUT(0x593DC8);
}

void sub_593E7C()
{
  if (!*v0) {
    JUMPOUT(0x593DE4);
  }
  JUMPOUT(0x593DDCLL);
}

uint64_t sub_593E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_59A8E8(a1, (long long *)a2);
  v4[29] = 0;
  v4[30] = 0;
  v4[31] = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 232);
  uint64_t v5 = *(unsigned char **)(a2 + 240);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 4) >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 232) = v8;
    *(void *)(a1 + 240) = v8;
    uint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 248) = v9;
    memcpy(v8, v6, v7 - 4);
    *(void *)(a1 + 240) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 260) = *(unsigned char *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v10;
  return a1;
}

void sub_593F48(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[30] = v4;
    operator delete(v4);
  }
  sub_20A95D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_593F6C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x1B4E81B4E81B4FLL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(2400 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 2400 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_5940FC(v8 + v9, a2 + v9);
        v9 += 2400;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_594030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_594044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 2400)
    sub_575E00(v10 - 2400 + v11);
  *(void *)(v9 + 8) = v10;
  sub_594074(&a9);
  _Unwind_Resume(a1);
}

void ***sub_594074(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_575E00(v4 - 2400);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_5940FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  sub_594714(a1 + 136, a2 + 136);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(_WORD *)(a1 + 329) = *(_WORD *)(a2 + 329);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  sub_59486C((void *)(a1 + 336), *(void *)(a2 + 336), *(void *)(a2 + 344), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 344) - *(void *)(a2 + 336)) >> 3));
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  sub_59486C((void *)(a1 + 360), *(void *)(a2 + 360), *(void *)(a2 + 368), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 3));
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  sub_59486C((void *)(a1 + 384), *(void *)(a2 + 384), *(void *)(a2 + 392), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 3));
  sub_4AA8E0((char *)(a1 + 408), (long long *)(a2 + 408));
  long long v10 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v10;
  long long v11 = *(_OWORD *)(a2 + 592);
  long long v12 = *(_OWORD *)(a2 + 608);
  long long v13 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v13;
  *(_OWORD *)(a1 + 592) = v11;
  *(_OWORD *)(a1 + 608) = v12;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  sub_4BFFA4((unsigned char *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  sub_594A98((void *)(a1 + 688), *(void *)(a2 + 688), *(void *)(a2 + 696), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 696) - *(void *)(a2 + 688)) >> 5));
  sub_4AA8E0((char *)(a1 + 712), (long long *)(a2 + 712));
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  long long v14 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(a1 + 872) = v14;
  sub_5998CC(a1 + 896, a2 + 896);
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  sub_5994B4(a1 + 1712, *(void *)(a2 + 1712), *(void *)(a2 + 1720), 0x1A8C536FE1A8C537 * ((uint64_t)(*(void *)(a2 + 1720) - *(void *)(a2 + 1712)) >> 3));
  *(void *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  sub_599AAC((void *)(a1 + 1736), *(void *)(a2 + 1736), *(void *)(a2 + 1744), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 1744) - *(void *)(a2 + 1736)) >> 3));
  *(void *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  sub_594BBC(a1 + 1760, *(void *)(a2 + 1760), *(void *)(a2 + 1768), 0xA3784A062B2E43DBLL * ((uint64_t)(*(void *)(a2 + 1768) - *(void *)(a2 + 1760)) >> 3));
  *(void *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  sub_5961C4((char *)(a1 + 1784), *(void *)(a2 + 1784), *(void *)(a2 + 1792), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1792) - *(void *)(a2 + 1784)) >> 4));
  *(void *)(a1 + 1824) = 0;
  *(_OWORD *)(a1 + 1808) = 0u;
  sub_596310(a1 + 1808, *(void *)(a2 + 1808), *(void *)(a2 + 1816), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1816) - *(void *)(a2 + 1808)) >> 4));
  *(void *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1832) = 0u;
  sub_597890(a1 + 1832, *(void *)(a2 + 1832), *(void *)(a2 + 1840), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a2 + 1840) - *(void *)(a2 + 1832)) >> 4));
  uint64_t v15 = *(void *)(a2 + 1856);
  *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
  *(void *)(a1 + 1856) = v15;
  *(void *)(a1 + 1872) = 0;
  *(void *)(a1 + 1888) = 0;
  *(void *)(a1 + 1880) = 0;
  sub_597B1C((void *)(a1 + 1872), *(void *)(a2 + 1872), *(void *)(a2 + 1880), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 1880) - *(void *)(a2 + 1872)) >> 3));
  long long v16 = *(_OWORD *)(a2 + 1896);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a2 + 1912);
  *(_OWORD *)(a1 + 1896) = v16;
  sub_597D64((void *)(a1 + 1928), (uint64_t *)(a2 + 1928));
  long long v17 = *(_OWORD *)(a2 + 1952);
  long long v18 = *(_OWORD *)(a2 + 1968);
  *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
  *(_OWORD *)(a1 + 1968) = v18;
  *(_OWORD *)(a1 + 1952) = v17;
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
  long long v19 = *(_OWORD *)(a2 + 2016);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(_OWORD *)(a1 + 2016) = v19;
  sub_597EE8(a1 + 2040, a2 + 2040);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2248) = 0;
  *(void *)(a1 + 2240) = 0;
  int64_t v20 = *(unsigned char **)(a2 + 2232);
  uint64_t v21 = *(unsigned char **)(a2 + 2240);
  uint64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0) {
      sub_2E00();
    }
    long long v23 = (char *)operator new(v21 - v20);
    *(void *)(a1 + 2232) = v23;
    *(void *)(a1 + 2240) = v23;
    long long v24 = &v23[16 * (v22 >> 4)];
    *(void *)(a1 + 2248) = v24;
    memcpy(v23, v20, v22 - 4);
    *(void *)(a1 + 2240) = v24;
  }
  sub_3B1DC8(a1 + 2256, (long long *)(a2 + 2256));
  *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
  return a1;
}

void sub_5945AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void *a11, void **a12, void *a13, uint64_t a14, uint64_t *a15, void **a16, uint64_t a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t a21)
{
  long long v28 = *v22;
  if (*v22)
  {
    *(void *)(v25 + 2240) = v28;
    operator delete(v28);
  }
  sub_592198(v21);
  sub_59230C(v26);
  sub_4A5980(v24);
  sub_592364(a9);
  sub_A43C(v23);
  sub_5923C0(a10);
  sub_591DFC(a11);
  sub_591E78(a12);
  sub_52F090(a13);
  sub_4A50F4(a14);
  sub_4A6814(a15);
  sub_28F14C(a16);
  sub_4A50F4(a17);
  sub_59241C(a18);
  sub_59241C(a19);
  sub_59241C(a20);
  sub_592058(a21);
  _Unwind_Resume(a1);
}

uint64_t sub_594714(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    long long v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6 - 1);
    *(void *)(a1 + 8) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v11 = *(unsigned char **)(a2 + 40);
  long long v10 = *(unsigned char **)(a2 + 48);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    long long v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12 - 1);
    *(void *)(a1 + 48) = v14;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 72);
  long long v16 = *(_OWORD *)(a2 + 88);
  long long v17 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v17;
  *(_OWORD *)(a1 + 88) = v16;
  *(_OWORD *)(a1 + 72) = v15;
  long long v18 = *(_OWORD *)(a2 + 136);
  long long v19 = *(_OWORD *)(a2 + 152);
  long long v20 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 183) = *(void *)(a2 + 183);
  *(_OWORD *)(a1 + 168) = v20;
  *(_OWORD *)(a1 + 152) = v19;
  *(_OWORD *)(a1 + 136) = v18;
  return a1;
}

void sub_594838(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_59486C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    uint64_t result = operator new(152 * a4);
    long long v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[19 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4AA8E0((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 152;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_594940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_594954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_5949E0(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_594988(&a9);
  _Unwind_Resume(a1);
}

void ***sub_594988(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_52FA20((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_5949E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 152)
    {
      if (*(char *)(i - 1) < 0)
      {
        operator delete(*(void **)(i - 24));
        if ((*(char *)(i - 33) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*(char *)(i - 57) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*(char *)(i - 33) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*(void **)(i - 56));
      if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(i - 97) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(*(void **)(i - 80));
      if ((*(char *)(i - 97) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(i - 129) < 0) {
          goto LABEL_14;
        }
        continue;
      }
LABEL_13:
      operator delete(*(void **)(i - 120));
      if (*(char *)(i - 129) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 152));
    }
  }
}

void *sub_594A98(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t result = operator new(160 * a4);
    long long v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[20 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4AA8E0((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v8[v9 / 8 + 19] = *(void *)(a2 + v9 + 152);
        v9 += 160;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_594B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_594B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_4AAACC(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_4AA888(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_594BBC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x62B2E43DAFCEA7) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(664 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 664 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_594D4C(v8 + v9, a2 + v9);
        v9 += 664;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_594C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_594C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 664)
    sub_576A58(v10 - 664 + v11);
  *(void *)(v9 + 8) = v10;
  sub_594CC4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_594CC4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      long long v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_576A58((uint64_t)(v4 - 83));
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_594D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_594F34(a1, a2);
  *(_DWORD *)(v4 + 340) = *(_DWORD *)(a2 + 340);
  sub_4F58AC(v4 + 344, a2 + 344);
  if (*(char *)(a2 + 527) < 0)
  {
    sub_4200((unsigned char *)(a1 + 504), *(void **)(a2 + 504), *(void *)(a2 + 512));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 504);
    *(void *)(a1 + 520) = *(void *)(a2 + 520);
    *(_OWORD *)(a1 + 504) = v5;
  }
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  sub_8A6F8((char *)(a1 + 528), *(void *)(a2 + 528), *(void *)(a2 + 536), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 536) - *(void *)(a2 + 528)) >> 3));
  sub_5954B0(a1 + 552, a2 + 552);
  *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
  sub_595AE0(a1 + 600, a2 + 600);
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  uint64_t v6 = *(unsigned char **)(a2 + 640);
  long long v7 = *(unsigned char **)(a2 + 648);
  int64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v7 - v6);
    *(void *)(a1 + 640) = v9;
    *(void *)(a1 + 648) = v9;
    uint64_t v10 = &v9[16 * (v8 >> 4)];
    *(void *)(a1 + 656) = v10;
    memcpy(v9, v6, v8);
    *(void *)(a1 + 648) = v10;
  }
  return a1;
}

void sub_594E8C(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

void sub_594EA8(_Unwind_Exception *a1)
{
  sub_4D4880(v4);
  if (*(char *)(v1 + 527) < 0) {
    operator delete(*v3);
  }
  sub_4D4B58(v2);
  sub_4F32CC((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_594F34(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_5950E8(a1 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5));
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  sub_3B1DC8(a1 + 80, (long long *)(a2 + 80));
  long long v6 = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v6;
  *(void *)(a1 + 248) = v7;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  sub_595274(a1 + 256, *(void *)(a2 + 256), *(void *)(a2 + 264), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3));
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v9 = *(unsigned char **)(a2 + 288);
  int64_t v8 = *(unsigned char **)(a2 + 296);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = (char *)operator new(v8 - v9);
    *(void *)(a1 + 288) = v11;
    *(void *)(a1 + 296) = v11;
    uint64_t v12 = &v11[4 * (v10 >> 2)];
    *(void *)(a1 + 304) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 296) = v12;
  }
  long long v13 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 312) = v13;
  return a1;
}

void sub_595084(_Unwind_Exception *a1)
{
  sub_45E914(v2);
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_5950A0(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_5950B4(_Unwind_Exception *a1)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 296) = v7;
    operator delete(v7);
  }
  sub_5920E0(v4);
  sub_45E914(v3);
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5950E8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(160 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 160 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4F58AC(v8 + v9, a2 + v9);
        v9 += 160;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5951A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5951BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 160)
    sub_4D4B58(v10 - 160 + v11);
  *(void *)(v9 + 8) = v10;
  sub_5951EC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_5951EC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4D4B58(v4 - 160);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_595274(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x276276276276277) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(104 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 104 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_59540C((uint64_t)(v5 + 2), v8 + v9, a2 + v9);
        v9 += 104;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_595340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_595354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 104)
    sub_4F31D0((void **)(v10 - 104 + v11));
  *(void *)(v9 + 8) = v10;
  sub_595384(&a9);
  _Unwind_Resume(a1);
}

void ***sub_595384(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      long long v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_4F31D0(v4 - 13);
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59540C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_8A6F8((char *)a2, *(void *)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  uint64_t result = sub_5954B0(a2 + 24, a3 + 24);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  uint64_t v6 = *(void *)(a3 + 88);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a2 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a2 + 96) = *(_WORD *)(a3 + 96);
  return result;
}

void sub_595494(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A96D0();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5954B0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_5955F4(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_5955CC(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_5955E0(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_5955F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0xC0uLL);
  long long v26 = v25;
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v25 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v25 + 1) = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  sub_4AA8E0(v26 + 40, (long long *)(a3 + 24));
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *int64_t v29 = v42[0];
LABEL_92:
  long long v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_595A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_595A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_595A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_595A98(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_4F4B48((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_595AE0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_595C24(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_595BFC(_Unwind_Exception *a1)
{
  sub_592590(v1);
  _Unwind_Resume(a1);
}

void sub_595C10(_Unwind_Exception *a1)
{
  sub_592590(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_595C24(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x58uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  sub_5960D8(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int64_t v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v28 = *(void **)(*(void *)a1 + 8 * v10);
        int64_t v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      float v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      int64_t v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *int64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  float v28 = *(void **)(*(void *)a1 + 8 * v3);
  int64_t v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *int64_t v29 = *v28;
  *float v28 = v41[0];
LABEL_89:
  long long v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_59604C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596078((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_596060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596078((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_596078(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(void **)(v2 + 48);
      if (v3)
      {
        *(void *)(v2 + 56) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *sub_5960D8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  int v5 = *((_DWORD *)a2 + 6);
  __dst[4] = 0;
  *((_DWORD *)__dst + 6) = v5;
  __dst[5] = 0;
  __dst[6] = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  BOOL v6 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    __dst[4] = v9;
    __dst[5] = v9;
    unint64_t v10 = &v9[4 * (v8 >> 2)];
    __dst[6] = v10;
    memcpy(v9, v7, v8 - 1);
    __dst[5] = v10;
  }
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  *((unsigned char *)__dst + 64) = *((unsigned char *)a2 + 64);
  return __dst;
}

void sub_5961A0(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

char *sub_5961C4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(48 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v11;
          *((void *)result + 2) = *(void *)(v11 + 16);
        }
        unint64_t v10 = &v8[v9];
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + v9 + 24);
        *((void *)v10 + 5) = *(void *)(a2 + v9 + 40);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5962C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5962D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 25) < 0) {
      operator delete(*(void **)(v10 + v11 - 48));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_AAE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_596310(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = (void *)result;
    if (a4 >= 0xC30C30C30C30C4) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(336 * a4);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result + 336 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_5964A0(v8 + v9, a2 + v9);
        v9 += 336;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5963D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5963E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 336)
    sub_576848(v10 - 336 + v11);
  *(void *)(v9 + 8) = v10;
  sub_596418(&a9);
  _Unwind_Resume(a1);
}

void ***sub_596418(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      int v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_576848(v4 - 336);
        while ((void *)v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_5964A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_596624(a1, a2);
  sub_596A6C(v4 + 40, a2 + 40);
  sub_596FD4(a1 + 80, a2 + 80);
  sub_596FD4(a1 + 120, a2 + 120);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  sub_59741C((void *)(a1 + 168), (uint64_t *)(a2 + 168));
  sub_59741C((void *)(a1 + 192), (uint64_t *)(a2 + 192));
  uint64_t v5 = *(void *)(a2 + 216);
  int v6 = *(_DWORD *)(a2 + 223);
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 223) = v6;
  *(void *)(a1 + 216) = v5;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  sub_5975F4(a1 + 232, *(void *)(a2 + 232), *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 6);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  long long v7 = *(_OWORD *)(a2 + 272);
  long long v8 = *(_OWORD *)(a2 + 288);
  long long v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
  *(_OWORD *)(a1 + 288) = v8;
  *(_OWORD *)(a1 + 304) = v9;
  *(_OWORD *)(a1 + 272) = v7;
  return a1;
}

void sub_5965A0(_Unwind_Exception *a1)
{
  sub_36094(v6);
  sub_36094(v5);
  sub_12168(v4);
  sub_12168(v3);
  sub_592458(v2);
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_5965F4(_Unwind_Exception *a1)
{
  sub_592458(v2);
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_596610(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_596624(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_596768(a1, i + 16, (_WORD *)i + 8);
  return a1;
}

void sub_596740(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_596754(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_596768(uint64_t a1, unsigned __int8 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint8x8_t v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (v6 == *((unsigned __int8 *)v10 + 16)) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (v6 == *((unsigned __int8 *)v10 + 16)) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_WORD *)v14 + 8) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    *uint64_t v25 = v14;
    goto LABEL_60;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_596A58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_596A6C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_596BB0(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_596B88(_Unwind_Exception *a1)
{
  sub_592458(v1);
  _Unwind_Resume(a1);
}

void sub_596B9C(_Unwind_Exception *a1)
{
  sub_592458(v1);
  _Unwind_Resume(a1);
}

void *sub_596BB0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (v6 == *((unsigned __int8 *)result + 16)) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (v6 == *((unsigned __int8 *)result + 16)) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  unint64_t v26 = operator new(0x30uLL);
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + 1) = v6;
  *((unsigned char *)v26 + 16) = *(unsigned char *)a3;
  *((void *)v26 + 4) = 0;
  *((void *)v26 + 5) = 0;
  *((void *)v26 + 3) = 0;
  sub_8A6F8((char *)v26 + 24, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v21) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v21)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v21 < 3uLL || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < *(void *)&v21) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        float v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        float v16 = v26;
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        float v15 = *(void **)(*(void *)a1 + 8 * v6);
        float v16 = v26;
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
      float v15 = *(void **)(*(void *)a1 + 8 * v3);
      float v16 = v26;
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *float v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v25 = *(void *)(*(void *)v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7) {
          v25 %= v7;
        }
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  float v15 = *(void **)(*(void *)a1 + 8 * v3);
  float v16 = v26;
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *float v16 = *v15;
  void *v15 = v26;
LABEL_61:
  uint64_t result = v26;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_596F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_596F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_596F44(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      if (v3)
      {
        uint64_t v4 = v2[4];
        int8x8_t v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0) {
              operator delete(*(void **)(v4 - 24));
            }
            v4 -= 24;
          }
          while (v4 != v3);
          int8x8_t v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_596FD4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_597118(a1, i + 16, i + 16);
  return a1;
}

void sub_5970F0(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_597104(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_597118(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (v6 == *((unsigned __int8 *)v10 + 16)) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (v6 == *((unsigned __int8 *)v10 + 16)) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  float v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((unsigned char *)v14 + 16) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    *unint64_t v25 = v14;
    goto LABEL_60;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_597408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_59741C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint8x8_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_5974F4(v3, v4, v5, v8);
  }
  return a1;
}

void sub_5974C8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A73AC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5974F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      size_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        unint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[v10];
        a4[2] = &v11[v10];
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_5975BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_5975D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_5975F4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >> 58) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(a4 << 6);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + (a4 << 6);
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_597784(v8 + v9, (long long *)(a2 + v9));
        v9 += 64;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5976A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5976B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A973C();
  }
  *(void *)(v9 + 8) = v10;
  sub_5976DC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_5976DC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 3);
          if (v6)
          {
            *((void *)v4 - 2) = v6;
            operator delete(v6);
          }
          unint64_t v7 = (void *)*((void *)v4 - 6);
          if (v7)
          {
            *((void *)v4 - 5) = v7;
            operator delete(v7);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_597784(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[v7];
    *(void *)(a1 + 32) = &v8[v7];
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  size_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    float v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    float v14 = &v13[v12];
    *(void *)(a1 + 56) = &v13[v12];
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_59785C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_597890(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(272 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 272 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_597A38(v8 + v9, a2 + v9);
        v9 += 272;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_597954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_597968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 272)
    sub_4AA5F4(v11, v10 - 272 + v12);
  *(void *)(v9 + 8) = v10;
  sub_59799C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59799C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 272;
          sub_4AA5F4((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_597A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4AA8E0((char *)a1, (long long *)a2);
  long long v5 = *(_OWORD *)(a2 + 184);
  long long v6 = *(_OWORD *)(a2 + 200);
  long long v7 = *(_OWORD *)(a2 + 216);
  long long v8 = *(_OWORD *)(a2 + 228);
  long long v9 = *(_OWORD *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 168);
  *((void *)v4 + 31) = 0;
  *(_OWORD *)(v4 + 152) = v9;
  *(_OWORD *)(v4 + 168) = v10;
  *(_OWORD *)(v4 + 228) = v8;
  *(_OWORD *)(v4 + 200) = v6;
  *(_OWORD *)(v4 + 216) = v7;
  *(_OWORD *)(v4 + 184) = v5;
  *((void *)v4 + 32) = 0;
  *((void *)v4 + 33) = 0;
  uint64_t v12 = *(unsigned char **)(a2 + 248);
  uint64_t v11 = *(unsigned char **)(a2 + 256);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    float v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 248) = v14;
    *(void *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 256) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  return a1;
}

void sub_597AF8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 256) = v4;
    operator delete(v4);
  }
  sub_20A9784(v1);
  _Unwind_Resume(a1);
}

void *sub_597B1C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x1642C8590B21643) {
      sub_2E00();
    }
    uint64_t result = operator new(184 * a4);
    long long v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[23 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        long long v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        v8[v9 / 8] = *(void *)(a2 + v9);
        uint64_t result = sub_4AA8E0((char *)&v8[v9 / 8 + 1], (long long *)(a2 + v9 + 8));
        *((_OWORD *)v10 + 10) = *(_OWORD *)(a2 + v9 + 160);
        v10[22] = *(void *)(a2 + v9 + 176);
        v9 += 184;
      }
      while (v11 + 184 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_597C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_597C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_597CAC(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_597C54(&a9);
  _Unwind_Resume(a1);
}

void ***sub_597C54(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_52F8B0((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_597CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 184)
    {
      if (*(char *)(i - 25) < 0)
      {
        operator delete(*(void **)(i - 48));
        if ((*(char *)(i - 57) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*(char *)(i - 81) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*(void **)(i - 80));
      if ((*(char *)(i - 81) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(i - 121) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(*(void **)(i - 104));
      if ((*(char *)(i - 121) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(i - 153) < 0) {
          goto LABEL_14;
        }
        continue;
      }
LABEL_13:
      operator delete(*(void **)(i - 144));
      if (*(char *)(i - 153) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 176));
    }
  }
}

void *sub_597D64(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 4);
    if (v7 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[176 * v7];
    a1[1] = sub_597E4C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_597E1C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1)
  {
    sub_52F808(v1);
    operator delete((void *)*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_597E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = (_OWORD *)(a4 + v7);
      long long v9 = *(_OWORD *)(a2 + v7);
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      long long v11 = *(_OWORD *)(a2 + v7 + 32);
      *(_OWORD *)((char *)v8 + 41) = *(_OWORD *)(a2 + v7 + 41);
      v8[1] = v10;
      v8[2] = v11;
      *long long v8 = v9;
      sub_4F57A0(a4 + v7 + 64, a2 + v7 + 64);
      v7 += 176;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_597ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20A980C();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_597EE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_2438EC8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)a1 = off_243A000;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = off_2438EC8;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_4200((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  *(void *)(a1 + 48) = off_243A038;
  __int16 v7 = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(_WORD *)(a1 + 80) = v7;
  sub_598710(a1 + 88, a2 + 88);
  return a1;
}

void sub_598030(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_59808C(unsigned char *a1, void *a2)
{
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_traffic_control_signal_guidance");
  a1[32] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_traffic_light_maneuver_guidance");
  a1[33] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B9280;
  strcpy((char *)__p, "enable_stop_sign_maneuver_guidance");
  a1[34] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B9240;
  strcpy((char *)__p, "enable_at_next_traffic_light_guidance");
  a1[35] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B9260;
  strcpy((char *)__p, "enable_at_next_stop_sign_guidance");
  a1[36] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v5 = xmmword_20B9A40;
  strcpy((char *)__p, "enable_go_past_this_traffic_light_guidance");
  a1[37] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_go_past_this_stop_sign_guidance");
  a1[38] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v5 = xmmword_20B9A20;
  strcpy((char *)__p, "enable_go_past_traffic_light_then_execute_guidance");
  a1[39] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v5 = xmmword_20B9A80;
  strcpy((char *)__p, "enable_go_past_stop_sign_then_execute_guidance");
  a1[40] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B9390;
  strcpy((char *)__p, "enable_cross_traffic_doesnt_stop");
  a1[41] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v5 = xmmword_20B9A10;
  strcpy((char *)__p, "enable_traffic_light_destination_road_association");
  a1[42] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v5 = xmmword_20B8E90;
  strcpy((char *)__p, "requires_localized_icon_support");
  a1[43] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B93A0;
  strcpy((char *)__p, "prefer_stop_sign_over_traffic_light");
  a1[44] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_59850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_598558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1406)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 43)) {
    BOOL v3 = *(unsigned char *)(a3 + 1056) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  return !v3 && *(unsigned char *)(a1 + 32) != 0;
}

void sub_598588(unsigned char *a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v5 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_traffic_cameras_on_route");
  a1[32] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v5 = xmmword_20B91C0;
  strcpy((char *)__p, "enable_speed_limit_usage");
  a1[33] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v5 = xmmword_20B91C0;
  strcpy((char *)__p, "speed_limit_units_metric");
  a1[34] = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_5986C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_5986E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1444)) {
    BOOL v3 = *(unsigned char *)(a2 + 1969) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3 && *(unsigned char *)(a1 + 32) != 0;
}

uint64_t sub_598710(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_2438EC8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)a1 = off_2439F28;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_4200((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  long long v6 = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_4200(v6, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)long long v6 = v7;
  }
  return a1;
}

void sub_598834(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v4);
    *(void *)uint64_t v1 = v3;
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    *(void *)uint64_t v1 = v3;
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_59888C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(176 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 176 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_598A38(v8 + v9, a2 + v9);
        v9 += 176;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_598954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_598968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 176)
    sub_57523C(v11, v10 - 176 + v12);
  *(void *)(v9 + 8) = v10;
  sub_59899C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59899C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 176;
          sub_57523C((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_598A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4AA8E0((char *)a1, (long long *)a2);
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 21) = 0;
  long long v6 = *(unsigned char **)(a2 + 152);
  long long v5 = *(unsigned char **)(a2 + 160);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 152) = v8;
    *(void *)(a1 + 160) = v8;
    uint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 168) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 160) = v9;
  }
  return a1;
}

void sub_598ABC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 160) = v4;
    operator delete(v4);
  }
  sub_20A9784(v1);
  _Unwind_Resume(a1);
}

void *sub_598AE0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t result = operator new(160 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[20 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4AA8E0((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v8[v9 / 8 + 19] = *(void *)(a2 + v9 + 152);
        v9 += 160;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_598BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_598BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_4AAACC(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_4AA888(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_598C04(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_598D84(a1 + 24, a2[3], a2[4], 0xEF7BDEF7BDEF7BDFLL * ((a2[4] - a2[3]) >> 4));
  sub_598F14(a1 + 48, (uint64_t)(a2 + 6));
  sub_598F14(a1 + 544, (uint64_t)(a2 + 68));
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  sub_598D84(a1 + 1040, a2[130], a2[131], 0xEF7BDEF7BDEF7BDFLL * ((a2[131] - a2[130]) >> 4));
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  sub_598D84(a1 + 1064, a2[133], a2[134], 0xEF7BDEF7BDEF7BDFLL * ((a2[134] - a2[133]) >> 4));
  return a1;
}

void sub_598D24(_Unwind_Exception *a1)
{
  sub_4F2B74(v5);
  sub_4F2FF8(v4);
  sub_4F2FF8(v3);
  sub_4F2B74(v2);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_598D70(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_598D84(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x84210842108422) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(496 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 496 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_598F14(v8 + v9, a2 + v9);
        v9 += 496;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_598E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_598E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 496)
    sub_4F2FF8(v10 - 496 + v11);
  *(void *)(v9 + 8) = v10;
  sub_598E8C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_598E8C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4F2FF8(v4 - 496);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_598F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  char v5 = *(unsigned char *)(a2 + 160);
  *(void *)(v4 + 168) = 0;
  *(unsigned char *)(v4 + 160) = v5;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  sub_59902C((char *)(v4 + 168), *(void *)(a2 + 168), *(void *)(a2 + 176), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 5));
  sub_4F58AC(a1 + 192, a2 + 192);
  sub_4F57A0(a1 + 352, a2 + 352);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  sub_8A6F8((char *)(a1 + 464), *(void *)(a2 + 464), *(void *)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3));
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  return a1;
}

void sub_598FDC(_Unwind_Exception *a1)
{
  sub_4D9814(v4);
  sub_4D4B58(v3);
  sub_4DC10C(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_599018(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

char *sub_59902C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v5 = result;
    if (a4 >= 0x51EB851EB851ECLL) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(800 * a4);
    *char v5 = result;
    v5[1] = result;
    v5[2] = &result[800 * a4];
    for (uint64_t i = result; a2 != a3; i += 800)
    {
      sub_4F74A4(result, a2);
      a2 += 800;
      uint64_t result = i + 800;
    }
    v5[1] = result;
  }
  return result;
}

void sub_599114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_599128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_5991A4((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_59914C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59914C(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_4F3104((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_5991A4(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = (void **)*(v1 - 3);
    if (v4)
    {
      char v5 = (void **)*(v3 - 2);
      long long v6 = v4;
      if (v5 != v4)
      {
        do
        {
          if (*((char *)v5 - 1) < 0) {
            operator delete(*(v5 - 3));
          }
          v5 -= 3;
        }
        while (v5 != v4);
        long long v6 = (void **)*(v3 - 3);
      }
      *(v3 - 2) = v4;
      operator delete(v6);
    }
    uint64_t v1 = v3 - 100;
    int v7 = *((_DWORD *)v3 - 8);
    if (v7 == 1)
    {
      sub_4F4A98((uint64_t)(v3 - 100));
    }
    else if (!v7 && *((char *)v3 - 777) < 0)
    {
      operator delete(*v1);
    }
  }
}

uint64_t sub_599260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_4F58AC(a1 + 320, a2 + 320);
  sub_599348(a1 + 480, a2 + 480);
  sub_599348(a1 + 1920, a2 + 1920);
  sub_599348(a1 + 3360, a2 + 3360);
  return a1;
}

void sub_5992E8(_Unwind_Exception *a1)
{
  sub_585FF0(v5);
  sub_585FF0(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_599334(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_599348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_4F58AC(a1 + 320, a2 + 320);
  sub_4F58AC(a1 + 480, a2 + 480);
  sub_4F58AC(a1 + 640, a2 + 640);
  sub_4F58AC(a1 + 800, a2 + 800);
  sub_4F58AC(a1 + 960, a2 + 960);
  sub_4F58AC(a1 + 1120, a2 + 1120);
  sub_4F58AC(a1 + 1280, a2 + 1280);
  return a1;
}

void sub_599410(_Unwind_Exception *a1)
{
  sub_4D4B58(v8);
  sub_4D4B58(v7);
  sub_4D4B58(v6);
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_59947C()
{
}

void sub_599484(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_5994A0(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5994B4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x3CAE759203CAE8) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1080 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 1080 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_599644(v8 + v9, a2 + v9);
        v9 += 1080;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_599578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_59958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1080)
    sub_52F1E8(v10 - 1080 + v11);
  *(void *)(v9 + 8) = v10;
  sub_5995BC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_5995BC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_52F1E8((uint64_t)(v4 - 135));
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_599644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5998CC(a1, a2);
  uint64_t v5 = *(void *)(a2 + 816);
  *(_DWORD *)(v4 + 824) = *(_DWORD *)(a2 + 824);
  *(void *)(v4 + 816) = v5;
  *(void *)(v4 + 832) = 0;
  *(void *)(v4 + 848) = 0;
  *(void *)(v4 + 840) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 832);
  uint64_t v7 = *(unsigned char **)(a2 + 840);
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v7 - v6);
    *(void *)(a1 + 832) = v9;
    *(void *)(a1 + 840) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 848) = v10;
    memcpy(v9, v6, v8 - 1);
    *(void *)(a1 + 840) = v10;
  }
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  if (*(char *)(a2 + 903) < 0)
  {
    sub_4200((unsigned char *)(a1 + 880), *(void **)(a2 + 880), *(void *)(a2 + 888));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 880);
    *(void *)(a1 + 896) = *(void *)(a2 + 896);
    *(_OWORD *)(a1 + 880) = v11;
  }
  uint64_t v12 = (unsigned char *)(a1 + 904);
  if (*(char *)(a2 + 927) < 0)
  {
    sub_4200(v12, *(void **)(a2 + 904), *(void *)(a2 + 912));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 904);
    *(void *)(a1 + 920) = *(void *)(a2 + 920);
    *(_OWORD *)uint64_t v12 = v13;
  }
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  sub_8A6F8((char *)(a1 + 928), *(void *)(a2 + 928), *(void *)(a2 + 936), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 936) - *(void *)(a2 + 928)) >> 3));
  sub_5954B0(a1 + 952, a2 + 952);
  *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 992);
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1008) = 0;
  sub_8A6F8((char *)(a1 + 1008), *(void *)(a2 + 1008), *(void *)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 3));
  sub_5954B0(a1 + 1032, a2 + 1032);
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 1072);
  return a1;
}

void sub_599800(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 903) < 0)
  {
    operator delete(*v3);
    uint64_t v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_52F090((void *)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 840) = v5;
  operator delete(v5);
  sub_52F090((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5998CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_594F34(a1, a2);
  *(void *)(v4 + 344) = 0;
  *(void *)(v4 + 352) = 0;
  *(void *)(v4 + 360) = 0;
  sub_8A6F8((char *)(v4 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3));
  sub_5954B0(a1 + 368, a2 + 368);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = 0;
  sub_8A6F8((char *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 3));
  sub_5954B0(a1 + 440, a2 + 440);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  sub_4F58AC(a1 + 488, a2 + 488);
  sub_4F58AC(a1 + 648, a2 + 648);
  if (*(void *)(a2 + 808)) {
    operator new();
  }
  *(void *)(a1 + 808) = 0;
  return a1;
}

void sub_5999E8()
{
}

void sub_599A70(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_20A99C0();
    sub_4F32CC(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x599A60);
}

void sub_599A98(_Unwind_Exception *a1)
{
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

void sub_599AAC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xA0A0A0A0A0A0A1) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(408 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[408 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_599C54((uint64_t)(a1 + 2), (uint64_t)&v8[v9], a2 + v9);
        v9 += 408;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_599B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_599B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A9A28();
  }
  *(void *)(v9 + 8) = v10;
  sub_599BB4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_599BB4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*(v4 - 6);
          if (v6)
          {
            *(v4 - 5) = v6;
            operator delete(v6);
          }
          v4 -= 51;
          sub_4F32CC(v4);
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 sub_599C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_594F34(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 340);
  *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
  *(_OWORD *)(a2 + 340) = v5;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 360) = 0;
  uint64_t v7 = *(unsigned char **)(a3 + 360);
  uint64_t v6 = *(unsigned char **)(a3 + 368);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a2 + 360) = v9;
    *(void *)(a2 + 368) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a2 + 376) = v10;
    memcpy(v9, v7, v8 - 3);
    *(void *)(a2 + 368) = v10;
  }
  __n128 result = *(__n128 *)(a3 + 384);
  *(_DWORD *)(a2 + 400) = *(_DWORD *)(a3 + 400);
  *(__n128 *)(a2 + 384) = result;
  return result;
}

void sub_599D2C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[46] = v4;
    operator delete(v4);
  }
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_599D50(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x50505050505051) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(816 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 816 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_5998CC(v8 + v9, a2 + v9);
        v9 += 816;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_599E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_599E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 816)
    sub_52F090((void *)(v10 - 816 + v11));
  *(void *)(v9 + 8) = v10;
  sub_599E58(&a9);
  _Unwind_Resume(a1);
}

void ***sub_599E58(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      long long v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_52F090(v4 - 102);
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_599EE0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x155555555555556) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(192 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 192 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_594714(v8 + v9, a2 + v9);
        v9 += 192;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_599FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_599FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A9A6C();
  }
  *(void *)(v9 + 8) = v10;
  sub_599FDC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_599FDC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 19);
          if (v6)
          {
            *((void *)v4 - 18) = v6;
            operator delete(v6);
          }
          uint64_t v7 = (void *)*((void *)v4 - 24);
          if (v7)
          {
            *((void *)v4 - 23) = v7;
            operator delete(v7);
          }
          v4 -= 192;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59A084(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x666666666666667) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_E9BD88(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59A144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_59A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
  {
    long long v13 = *(void **)(v10 + v11 - 40);
    if (v13)
    {
      *(void *)(v10 + v11 - 32) = v13;
      operator delete(v13);
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_59A194(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59A194(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = (char *)v2[1];
        do
        {
          uint64_t v8 = (void *)*((void *)v6 - 5);
          v6 -= 40;
          uint64_t v7 = v8;
          if (v8)
          {
            *((void *)v4 - 4) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59A230(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x6A63BD81A98EF7) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(616 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 616 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_50FFE0(v8 + v9, (long long *)(a2 + v9));
        v9 += 616;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59A2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_59A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A9AB8(v10 + v11);
  }
  *(void *)(v9 + 8) = v10;
  sub_59A330(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59A330(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = (uint64_t)v4 - 560;
        do
        {
          uint64_t v8 = *(void **)(v6 + 496);
          if (v8)
          {
            *(void *)(v6 + 504) = v8;
            operator delete(v8);
          }
          sub_510298(v6 + 24);
          uint64_t v9 = *(void **)v6;
          if (*(void *)v6)
          {
            *(void *)(v6 + 8) = v9;
            operator delete(v9);
          }
          uint64_t v7 = (void *)(v6 - 56);
          v6 -= 616;
        }
        while (v7 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_59A3E8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    __n128 result = operator new(72 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[9 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + v9);
        v10[2] = *(void *)(a2 + v9 + 16);
        __n128 result = sub_4D4C4(&v8[v9 / 8 + 3], (uint64_t *)(a2 + v9 + 24));
        *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 + v9 + 48);
        *(_OWORD *)(v10 + 7) = *(_OWORD *)(a2 + v9 + 56);
        v9 += 72;
      }
      while (v11 + 72 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59A4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59A51C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_59A4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20A9B0C();
  }
  *(void *)(v2 + 8) = v3;
  sub_59A51C((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_59A51C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = *((void *)v4 - 6);
          if (v7)
          {
            uint64_t v8 = *((void *)v4 - 5);
            uint64_t v6 = (void *)*((void *)v4 - 6);
            if (v8 != v7)
            {
              uint64_t v9 = *((void *)v4 - 5);
              do
              {
                uint64_t v11 = *(void **)(v9 - 24);
                v9 -= 24;
                uint64_t v10 = v11;
                if (v11)
                {
                  *(void *)(v8 - 16) = v10;
                  operator delete(v10);
                }
                uint64_t v8 = v9;
              }
              while (v9 != v7);
              uint64_t v6 = (void *)*((void *)v4 - 6);
            }
            *((void *)v4 - 5) = v7;
            operator delete(v6);
          }
          v4 -= 72;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_59A5F8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x276276276276277) {
      sub_2E00();
    }
    __n128 result = operator new(104 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[13 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        long long v12 = *(_OWORD *)(a2 + v9 + 16);
        *uint64_t v10 = *(_OWORD *)(a2 + v9);
        v10[1] = v12;
        __n128 result = sub_597D64(&v8[v9 / 8 + 4], (uint64_t *)(a2 + v9 + 32));
        *(_OWORD *)((char *)v10 + 56) = *(_OWORD *)(a2 + v9 + 56);
        *(_OWORD *)((char *)v10 + 72) = *(_OWORD *)(a2 + v9 + 72);
        *(_OWORD *)((char *)v10 + 81) = *(_OWORD *)(a2 + v9 + 81);
        v9 += 104;
      }
      while (v11 + 104 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59A6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59A72C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_59A704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20A9B74(v3 + v4);
  }
  *(void *)(v2 + 8) = v3;
  sub_59A72C((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_59A72C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (uint64_t *)**result;
    if (v3)
    {
      uint64_t v4 = (uint64_t *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 9;
        do
        {
          if (*v6)
          {
            sub_52F808(v6);
            operator delete((void *)*v6);
          }
          uint64_t v7 = v6 - 4;
          v6 -= 13;
        }
        while (v7 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59A7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_48381C(a1, a2);
  v4[47] = 0;
  v4[48] = 0;
  v4[49] = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 376);
  long long v5 = *(unsigned char **)(a2 + 384);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0x8E38E38E38E38E39 * (v7 >> 3) >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 376) = v8;
    *(void *)(a1 + 384) = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 392) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 384) = v9;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  sub_4F58AC(a1 + 408, a2 + 408);
  sub_4F57A0(a1 + 568, a2 + 568);
  return a1;
}

void sub_59A8B0(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 384) = v5;
    operator delete(v5);
  }
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_59A8E8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    unint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7 - 4);
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v10 = *((void *)a2 + 5);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_59A9F0(a1 + 48, *((void *)a2 + 6), *((void *)a2 + 7), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4));
  sub_4F58AC(a1 + 72, (uint64_t)a2 + 72);
  return a1;
}

void sub_59A9C0(_Unwind_Exception *a1)
{
  sub_591FF0(v3);
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_59A9F0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(176 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 176 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        *(_OWORD *)(v8 + v9) = *(_OWORD *)(a2 + v9);
        __n128 result = sub_4F58AC(v8 + v9 + 16, a2 + v9 + 16);
        v9 += 176;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59AAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_59AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 176)
    sub_4D4B58(v10 - 160 + v11);
  *(void *)(v9 + 8) = v10;
  sub_59AB08(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59AB08(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = v4 - 176;
          sub_4D4B58((uint64_t)(v4 - 160));
          long long v4 = v6;
        }
        while (v6 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59AB94(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x6BCA1AF286BCA2) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(608 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 608 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_59AD40(v8 + v9, a2 + v9);
        v9 += 608;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_59AC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_59AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 608)
    sub_575D30(v11, v10 - 608 + v12);
  *(void *)(v9 + 8) = v10;
  sub_59ACA4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_59ACA4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 608;
          sub_575D30((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_59AD40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_4F57A0(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  sub_4F58AC(a1 + 128, a2 + 128);
  sub_4F58AC(a1 + 288, a2 + 288);
  sub_4F58AC(a1 + 448, a2 + 448);
  return a1;
}

void sub_59ADB0(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_20A9BB8(v1);
  _Unwind_Resume(a1);
}

void sub_59ADDC(_Unwind_Exception *a1)
{
  sub_20A9BB8(v1);
  _Unwind_Resume(a1);
}

void *sub_59ADF0(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_59AEC8(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_59AE9C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A9C40(v1 + 1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59AEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v6;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 8) = 0;
      uint64_t v10 = *(unsigned char **)(v6 + 8);
      uint64_t v9 = *(unsigned char **)(v6 + 16);
      int64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        uint64_t v12 = (char *)operator new(v11);
        *(void *)(a4 + 8) = v12;
        *(void *)(a4 + 16) = v12;
        unint64_t v7 = &v12[4 * (v11 >> 2)];
        *(void *)(a4 + 24) = v7;
        memcpy(v12, v10, v11);
        *(void *)(a4 + 16) = v7;
      }
      uint64_t v8 = *(void *)(v6 + 32);
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(v6 + 40);
      *(void *)(a4 + 32) = v8;
      a4 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_59AFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  sub_59B004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_59B004(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(void *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

uint64_t sub_59B068(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_59B1AC(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_59B184(_Unwind_Exception *a1)
{
  sub_591F30(v1);
  _Unwind_Resume(a1);
}

void sub_59B198(_Unwind_Exception *a1)
{
  sub_591F30(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_59B1AC(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __n128 result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == v5) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            __n128 result = (uint64_t *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == v5) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          __n128 result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_59B4E0(a1, *a2, a3, (uint64_t)v25);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v20) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v20)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v20 < 3uLL || (uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < *(void *)&v20) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        float v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        float v15 = *(void **)(*(void *)a1 + 8 * v6);
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
      float v15 = *(void **)(*(void *)a1 + 8 * v3);
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v24 = *(void *)(*(void *)v25[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v24 >= v7) {
          v24 %= v7;
        }
      }
      else
      {
        v24 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v25[0];
    }
    goto LABEL_61;
  }
  float v15 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v25[0] = *v15;
  void *v15 = v25[0];
LABEL_61:
  __n128 result = (uint64_t *)v25[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_59B4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_59B4E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __n128 result = operator new(0x48uLL);
  uint64_t v9 = result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *__n128 result = 0;
  result[1] = a2;
  *((_DWORD *)result + 4) = *(_DWORD *)a3;
  int v10 = *(_DWORD *)(a3 + 8);
  result[4] = 0;
  *((_DWORD *)result + 6) = v10;
  result[5] = 0;
  result[6] = 0;
  uint64_t v12 = *(unsigned char **)(a3 + 16);
  unint64_t v11 = *(unsigned char **)(a3 + 24);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    float v14 = (char *)operator new(v13);
    v9[4] = v14;
    v9[5] = v14;
    float v15 = &v14[4 * (v13 >> 2)];
    v9[6] = v15;
    __n128 result = memcpy(v14, v12, v13);
    v9[5] = v15;
  }
  v9[7] = *(void *)(a3 + 40);
  *((_DWORD *)v9 + 16) = *(_DWORD *)(a3 + 48);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_59B5D4(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }
  sub_59B5F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_59B5F8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_59B648(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v5 = xmmword_20B5EB0;
  strcpy((char *)__p, "enable_paved_path_guidance");
  *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_59B6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59B6F4()
{
  return 0;
}

void sub_59B6FC(uint64_t a1, void *a2)
{
  long long __p = operator new(0x30uLL);
  long long v5 = xmmword_20E1380;
  strcpy((char *)__p, "enable_siri_incidents_discoverability_prompt");
  *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
}

void sub_59B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59B7A8()
{
  return 0;
}

uint64_t sub_59B7B0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_59B8F4(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_59B8CC(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_59B8E0(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void *sub_59B8F4(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  float v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      *unint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    unint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_59BC04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_59BC18(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_59BD5C(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_59BD34(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_59BD48(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void *sub_59BD5C(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  float v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      *unint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    unint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_59C06C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_59C080(uint64_t a1, uint64_t a2)
{
  sub_46EB78(a1, a2);
  *(_WORD *)(a1 + 1056) = *(_WORD *)(a2 + 1056);
  if (a1 != a2)
  {
    sub_59CB20((uint64_t *)(a1 + 1064), *(void *)(a2 + 1064), *(void *)(a2 + 1072), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5));
    sub_59CB20((uint64_t *)(a1 + 1088), *(void *)(a2 + 1088), *(void *)(a2 + 1096), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1096) - *(void *)(a2 + 1088)) >> 5));
    sub_5A4CBC(a1 + 1112, *(std::string **)(a2 + 1112), *(std::string **)(a2 + 1120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 1120) - *(void *)(a2 + 1112)) >> 4));
    sub_147D0((void *)(a1 + 1136), *(char **)(a2 + 1136), *(char **)(a2 + 1144), (uint64_t)(*(void *)(a2 + 1144) - *(void *)(a2 + 1136)) >> 2);
    sub_147D0((void *)(a1 + 1160), *(char **)(a2 + 1160), *(char **)(a2 + 1168), (uint64_t)(*(void *)(a2 + 1168) - *(void *)(a2 + 1160)) >> 2);
    sub_5A1030((uint64_t *)(a1 + 1184), *(std::string **)(a2 + 1184), *(std::string **)(a2 + 1192), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 1192) - *(void *)(a2 + 1184)) >> 5));
  }
  std::string::operator=((std::string *)(a1 + 1208), (const std::string *)(a2 + 1208));
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 1232));
  sub_592670((uint64_t *)(a1 + 1256), a2 + 1256);
  sub_59276C(a1 + 2344, a2 + 2344);
  if (a1 == a2)
  {
    sub_52FD00(a1 + 7168, a2 + 7168);
  }
  else
  {
    sub_69208(a1 + 7144, *(std::string **)(a2 + 7144), *(std::string **)(a2 + 7152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7152) - *(void *)(a2 + 7144)) >> 3));
    sub_52FD00(a1 + 7168, a2 + 7168);
    sub_5A1284((void *)(a1 + 7328), *(char **)(a2 + 7328), *(char **)(a2 + 7336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7336) - *(void *)(a2 + 7328)) >> 3));
    sub_572E74((uint64_t *)(a1 + 7352), *(void *)(a2 + 7352), *(void *)(a2 + 7360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7360) - *(void *)(a2 + 7352)) >> 5));
  }
  uint64_t v4 = (_WORD *)(a1 + 9976);
  int8x8_t v5 = (_WORD *)(a2 + 9976);
  std::string::operator=((std::string *)(a1 + 7376), (const std::string *)(a2 + 7376));
  std::string::operator=((std::string *)(a1 + 7400), (const std::string *)(a2 + 7400));
  if (a1 != a2)
  {
    sub_69208(a1 + 7424, *(std::string **)(a2 + 7424), *(std::string **)(a2 + 7432), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7432) - *(void *)(a2 + 7424)) >> 3));
    sub_5A149C((uint64_t *)(a1 + 7448), *(void *)(a2 + 7448), *(void *)(a2 + 7456), 0x1A8C536FE1A8C537 * ((uint64_t)(*(void *)(a2 + 7456) - *(void *)(a2 + 7448)) >> 3));
    sub_5A187C((uint64_t *)(a1 + 7472), *(void *)(a2 + 7472), *(void *)(a2 + 7480), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7480) - *(void *)(a2 + 7472)) >> 3));
    sub_5A1C10((uint64_t *)(a1 + 7496), *(void *)(a2 + 7496), *(void *)(a2 + 7504), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7504) - *(void *)(a2 + 7496)) >> 4));
  }
  sub_59CA3C(a1 + 7520, a2 + 7520);
  sub_59CA3C(a1 + 8336, a2 + 8336);
  sub_52FD00(a1 + 9152, a2 + 9152);
  sub_52FD00(a1 + 9312, a2 + 9312);
  sub_52FD00(a1 + 9472, a2 + 9472);
  sub_52FD00(a1 + 9632, a2 + 9632);
  sub_52FD00(a1 + 9792, a2 + 9792);
  if (a1 == a2)
  {
    *uint64_t v4 = *v5;
  }
  else
  {
    sub_5A1EB8((void **)(a1 + 9952), *(char **)(a2 + 9952), *(char **)(a2 + 9960), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 9960) - *(void *)(a2 + 9952)) >> 6));
    *uint64_t v4 = *v5;
    sub_5A2268(a1 + 9984, *(void *)(a2 + 9984), *(void *)(a2 + 9992), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 9992) - *(void *)(a2 + 9984)) >> 3));
    sub_5A2540((uint64_t *)(a1 + 10008), *(long long **)(a2 + 10008), *(long long **)(a2 + 10016), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10016) - *(void *)(a2 + 10008)) >> 3));
    sub_5A2540((uint64_t *)(a1 + 10032), *(long long **)(a2 + 10032), *(long long **)(a2 + 10040), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10040) - *(void *)(a2 + 10032)) >> 3));
    sub_5A2540((uint64_t *)(a1 + 10056), *(long long **)(a2 + 10056), *(long long **)(a2 + 10064), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10064) - *(void *)(a2 + 10056)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 10080), (const std::string *)(a2 + 10080));
  *(_OWORD *)(a1 + 10104) = *(_OWORD *)(a2 + 10104);
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 10168) = *(_DWORD *)(a2 + 10168);
    sub_5A303C(a1 + 10200, a2 + 10200);
  }
  else
  {
    sub_34FB50((void *)(a1 + 10120), *(char **)(a2 + 10120), *(char **)(a2 + 10128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 10128) - *(void *)(a2 + 10120)) >> 3));
    sub_5A2850((void **)(a1 + 10144), *(void *)(a2 + 10144), *(void *)(a2 + 10152), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 10152) - *(void *)(a2 + 10144)) >> 3));
    *(_DWORD *)(a1 + 10168) = *(_DWORD *)(a2 + 10168);
    sub_5A2C5C((void **)(a1 + 10176), *(void *)(a2 + 10176), *(void *)(a2 + 10184), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 10184) - *(void *)(a2 + 10176)) >> 3));
    sub_5A303C(a1 + 10200, a2 + 10200);
    sub_4AD448((void *)(a1 + 10576), *(char **)(a2 + 10576), *(char **)(a2 + 10584), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 10584) - *(void *)(a2 + 10576)) >> 3));
  }
  *(_DWORD *)(a1 + 10600) = *(_DWORD *)(a2 + 10600);
  sub_52FD00(a1 + 10608, a2 + 10608);
  sub_4F39B8(a1 + 10768, (std::string *)(a2 + 10768));
  *(void *)(a1 + 10808) = *(void *)(a2 + 10808);
  std::string::operator=((std::string *)(a1 + 10816), (const std::string *)(a2 + 10816));
  *(unsigned char *)(a1 + 10840) = *(unsigned char *)(a2 + 10840);
  std::string::operator=((std::string *)(a1 + 10848), (const std::string *)(a2 + 10848));
  *(unsigned char *)(a1 + 10872) = *(unsigned char *)(a2 + 10872);
  sub_5A303C(a1 + 10880, a2 + 10880);
  if (a1 != a2) {
    sub_4AD448((void *)(a1 + 11256), *(char **)(a2 + 11256), *(char **)(a2 + 11264), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 11264) - *(void *)(a2 + 11256)) >> 3));
  }
  *(_DWORD *)(a1 + 11280) = *(_DWORD *)(a2 + 11280);
  sub_52FD00(a1 + 11288, a2 + 11288);
  sub_4F39B8(a1 + 11448, (std::string *)(a2 + 11448));
  *(void *)(a1 + 11488) = *(void *)(a2 + 11488);
  std::string::operator=((std::string *)(a1 + 11496), (const std::string *)(a2 + 11496));
  *(unsigned char *)(a1 + 11520) = *(unsigned char *)(a2 + 11520);
  std::string::operator=((std::string *)(a1 + 11528), (const std::string *)(a2 + 11528));
  *(unsigned char *)(a1 + 11552) = *(unsigned char *)(a2 + 11552);
  if (a1 == a2)
  {
    *(void *)(a1 + 11656) = *(void *)(a2 + 11656);
    *(_OWORD *)(a1 + 11688) = *(_OWORD *)(a2 + 11688);
    sub_52FD00(a1 + 11760, a1 + 11760);
    char v7 = *(unsigned char *)(a2 + 11948);
    *(_DWORD *)(a1 + 11944) = *(_DWORD *)(a2 + 11944);
    *(unsigned char *)(a1 + 11948) = v7;
    std::string::operator=((std::string *)(a1 + 12000), (const std::string *)(a2 + 12000));
    *(void *)(a1 + 12048) = *(void *)(a2 + 12048);
  }
  else
  {
    sub_147D0((void *)(a1 + 11560), *(char **)(a2 + 11560), *(char **)(a2 + 11568), (uint64_t)(*(void *)(a2 + 11568) - *(void *)(a2 + 11560)) >> 2);
    sub_4BD0C8((uint64_t *)(a1 + 11584), *(void *)(a2 + 11584), *(void *)(a2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11592) - *(void *)(a2 + 11584)) >> 3));
    sub_4BD0C8((uint64_t *)(a1 + 11608), *(void *)(a2 + 11608), *(void *)(a2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11616) - *(void *)(a2 + 11608)) >> 3));
    sub_5A5C34((void *)(a1 + 11632), *(char **)(a2 + 11632), *(char **)(a2 + 11640), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 11640) - *(void *)(a2 + 11632)) >> 3));
    *(void *)(a1 + 11656) = *(void *)(a2 + 11656);
    sub_34FB50((void *)(a1 + 11664), *(char **)(a2 + 11664), *(char **)(a2 + 11672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 11672) - *(void *)(a2 + 11664)) >> 3));
    *(_OWORD *)(a1 + 11688) = *(_OWORD *)(a2 + 11688);
    sub_48E1E8((void *)(a1 + 11704), *(char **)(a2 + 11704), *(char **)(a2 + 11712), (uint64_t)(*(void *)(a2 + 11712) - *(void *)(a2 + 11704)) >> 4);
    *(void *)(a1 + 11728) = *(void *)(a2 + 11728);
    sub_5A34D8(a1 + 11736, *(_OWORD **)(a2 + 11736), *(_OWORD **)(a2 + 11744), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 11744) - *(void *)(a2 + 11736)) >> 4));
    sub_52FD00(a1 + 11760, a2 + 11760);
    sub_5A37C8((void *)(a1 + 11920), *(char **)(a2 + 11920), *(char **)(a2 + 11928), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 11928) - *(void *)(a2 + 11920)) >> 4));
    int v6 = *(_DWORD *)(a2 + 11944);
    *(unsigned char *)(a1 + 11948) = *(unsigned char *)(a2 + 11948);
    *(_DWORD *)(a1 + 11944) = v6;
    sub_5A394C((uint64_t *)(a1 + 11952), *(void *)(a2 + 11952), *(void *)(a2 + 11960), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 11960) - *(void *)(a2 + 11952)) >> 5));
    sub_4C02B4((void **)(a1 + 11976), *(long long **)(a2 + 11976), *(long long **)(a2 + 11984), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 11984) - *(void *)(a2 + 11976)) >> 4));
    std::string::operator=((std::string *)(a1 + 12000), (const std::string *)(a2 + 12000));
    sub_48E1E8((void *)(a1 + 12024), *(char **)(a2 + 12024), *(char **)(a2 + 12032), (uint64_t)(*(void *)(a2 + 12032) - *(void *)(a2 + 12024)) >> 4);
    *(void *)(a1 + 12048) = *(void *)(a2 + 12048);
    sub_5A3CA4((void *)(a1 + 12056), *(char **)(a2 + 12056), *(char **)(a2 + 12064), (uint64_t)(*(void *)(a2 + 12064) - *(void *)(a2 + 12056)) >> 4);
    sub_5A3E58((uint64_t *)(a1 + 12080), *(void *)(a2 + 12080), *(void *)(a2 + 12088), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 12088) - *(void *)(a2 + 12080)) >> 4));
    *(_DWORD *)(a1 + 12136) = *(_DWORD *)(a2 + 12136);
    sub_5A4108((void *)(a1 + 12104), *(uint64_t **)(a2 + 12120), 0);
  }
  std::string::operator=((std::string *)(a1 + 12152), (const std::string *)(a2 + 12152));
  *(unsigned char *)(a1 + 12176) = *(unsigned char *)(a2 + 12176);
  std::string::operator=((std::string *)(a1 + 12192), (const std::string *)(a2 + 12192));
  *(unsigned char *)(a1 + 12216) = *(unsigned char *)(a2 + 12216);
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 12256) = *(_DWORD *)(a2 + 12256);
    sub_5A44CC((void *)(a1 + 12224), *(uint64_t **)(a2 + 12240), 0);
    *(_DWORD *)(a1 + 12296) = *(_DWORD *)(a2 + 12296);
    sub_5A4B88((void *)(a1 + 12264), *(uint64_t **)(a2 + 12280), 0);
    unint64_t v8 = *(void *)(a2 + 12312);
    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 12304);
      if (v8 > *(void *)(a1 + 12320) << 6)
      {
        if (v9)
        {
          operator delete(v9);
          *(void *)(a1 + 12304) = 0;
          *(void *)(a1 + 12312) = 0;
          *(void *)(a1 + 12320) = 0;
          unint64_t v8 = *(void *)(a2 + 12312);
        }
        if ((v8 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        unint64_t v10 = ((v8 - 1) >> 6) + 1;
        uint64_t v9 = operator new(8 * v10);
        *(void *)(a1 + 12304) = v9;
        *(void *)(a1 + 12312) = 0;
        *(void *)(a1 + 12320) = v10;
        unint64_t v8 = *(void *)(a2 + 12312);
      }
      memmove(v9, *(const void **)(a2 + 12304), (((v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v8 = *(void *)(a2 + 12312);
    }
    *(void *)(a1 + 12312) = v8;
  }
  return a1;
}

uint64_t sub_59CA3C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  }
  else
  {
    sub_69208(a1 + 344, *(std::string **)(a2 + 344), *(std::string **)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3));
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    sub_59E5E4((void *)(a1 + 368), *(uint64_t **)(a2 + 384), 0);
    *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
    sub_69208(a1 + 416, *(std::string **)(a2 + 416), *(std::string **)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 3));
    *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
    sub_59E5E4((void *)(a1 + 440), *(uint64_t **)(a2 + 456), 0);
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  sub_52FD00(a1 + 488, a2 + 488);
  sub_52FD00(a1 + 648, a2 + 648);
  sub_5305BC((uint64_t *)(a1 + 808), (std::string **)(a2 + 808));
  return a1;
}

uint64_t sub_59CB20(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x2FC962FC962FC963 * ((v8 - *a1) >> 5) >= a4)
  {
    uint64_t result = a1[1];
    if (0x2FC962FC962FC963 * ((result - v9) >> 5) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_59CDC8(v9, v6);
          v6 += 2400;
          v9 += 2400;
          v23 += 2400;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_575E00(result - 2400);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_59CDC8(v9, v6);
          v6 += 2400;
          v9 += 2400;
          v20 -= 2400;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_5940FC(v9 + v22, v19 + v22);
          v22 += 2400;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_575E00(v10 - 2400);
        while (v10 != v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1B4E81B4E81B4ELL) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x2FC962FC962FC963 * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xDA740DA740DA7 ? 0x1B4E81B4E81B4ELL : v13;
    if (v14 > 0x1B4E81B4E81B4ELL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 2400 * v14;
    uint64_t result = (uint64_t)operator new(2400 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_5940FC(v17 + v18, v6 + v18);
        v18 += 2400;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_59CDC8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  if (a1 != a2)
  {
    sub_2D8554((void *)(a1 + 136), *(char **)(a2 + 136), *(char **)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    sub_531608((void *)(a1 + 176), *(char **)(a2 + 176), *(char **)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  long long v10 = *(_OWORD *)(a2 + 208);
  long long v11 = *(_OWORD *)(a2 + 224);
  long long v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v11;
  long long v13 = *(_OWORD *)(a2 + 272);
  long long v14 = *(_OWORD *)(a2 + 288);
  long long v15 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 319) = *(void *)(a2 + 319);
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 272) = v13;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  char v16 = *(unsigned char *)(a2 + 330);
  if (v16)
  {
    *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
    char v16 = 1;
  }
  *(unsigned char *)(a1 + 330) = v16;
  if (a1 != a2)
  {
    sub_59D3D4((uint64_t *)(a1 + 336), *(std::string **)(a2 + 336), *(std::string **)(a2 + 344), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 344) - *(void *)(a2 + 336)) >> 3));
    sub_59D3D4((uint64_t *)(a1 + 360), *(std::string **)(a2 + 360), *(std::string **)(a2 + 368), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 3));
    sub_59D3D4((uint64_t *)(a1 + 384), *(std::string **)(a2 + 384), *(std::string **)(a2 + 392), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  std::string::operator=((std::string *)(a1 + 440), (const std::string *)(a2 + 440));
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a2 + 480));
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  std::string::operator=((std::string *)(a1 + 536), (const std::string *)(a2 + 536));
  long long v17 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v17;
  long long v18 = *(_OWORD *)(a2 + 640);
  long long v20 = *(_OWORD *)(a2 + 592);
  long long v19 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v18;
  *(_OWORD *)(a1 + 592) = v20;
  *(_OWORD *)(a1 + 608) = v19;
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  }
  else
  {
    sub_4C02B4((void **)(a1 + 656), *(long long **)(a2 + 656), *(long long **)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
    sub_59D6F8((uint64_t *)(a1 + 688), *(std::string **)(a2 + 688), *(std::string **)(a2 + 696), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 696) - *(void *)(a2 + 688)) >> 5));
  }
  std::string::operator=((std::string *)(a1 + 712), (const std::string *)(a2 + 712));
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  std::string::operator=((std::string *)(a1 + 808), (const std::string *)(a2 + 808));
  *(_DWORD *)(a1 + 832) = *(_DWORD *)(a2 + 832);
  std::string::operator=((std::string *)(a1 + 840), (const std::string *)(a2 + 840));
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  long long v21 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(a1 + 872) = v21;
  sub_59CA3C(a1 + 896, a2 + 896);
  if (a1 == a2)
  {
    uint64_t v24 = *(void *)(a2 + 1856);
    *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
    *(void *)(a1 + 1856) = v24;
  }
  else
  {
    sub_5A149C((uint64_t *)(a1 + 1712), *(void *)(a2 + 1712), *(void *)(a2 + 1720), 0x1A8C536FE1A8C537 * ((uint64_t)(*(void *)(a2 + 1720) - *(void *)(a2 + 1712)) >> 3));
    sub_5A187C((uint64_t *)(a1 + 1736), *(void *)(a2 + 1736), *(void *)(a2 + 1744), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 1744) - *(void *)(a2 + 1736)) >> 3));
    sub_59DA1C((uint64_t *)(a1 + 1760), *(void *)(a2 + 1760), *(void *)(a2 + 1768), 0xA3784A062B2E43DBLL * ((uint64_t)(*(void *)(a2 + 1768) - *(void *)(a2 + 1760)) >> 3));
    sub_59ED3C((void **)(a1 + 1784), *(std::string **)(a2 + 1784), *(std::string **)(a2 + 1792), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1792) - *(void *)(a2 + 1784)) >> 4));
    sub_59F08C((uint64_t *)(a1 + 1808), *(void *)(a2 + 1808), *(void *)(a2 + 1816), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1816) - *(void *)(a2 + 1808)) >> 4));
    sub_5A03B8(a1 + 1832, *(std::string **)(a2 + 1832), *(std::string **)(a2 + 1840), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a2 + 1840) - *(void *)(a2 + 1832)) >> 4));
    uint64_t v22 = *(void *)(a2 + 1856);
    *(unsigned char *)(a1 + 1864) = *(unsigned char *)(a2 + 1864);
    *(void *)(a1 + 1856) = v22;
    sub_5A09C0((uint64_t *)(a1 + 1872), *(void *)(a2 + 1872), *(void *)(a2 + 1880), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 1880) - *(void *)(a2 + 1872)) >> 3));
    long long v23 = *(_OWORD *)(a2 + 1896);
    *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a2 + 1912);
    *(_OWORD *)(a1 + 1896) = v23;
    sub_5A0D34((uint64_t *)(a1 + 1928), *(void *)(a2 + 1928), *(void *)(a2 + 1936), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 1936) - *(void *)(a2 + 1928)) >> 4));
  }
  long long v25 = *(_OWORD *)(a2 + 1952);
  long long v26 = *(_OWORD *)(a2 + 1968);
  *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
  *(_OWORD *)(a1 + 1968) = v26;
  *(_OWORD *)(a1 + 1952) = v25;
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
  long long v27 = *(_OWORD *)(a2 + 2016);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(_OWORD *)(a1 + 2016) = v27;
  std::string::operator=((std::string *)(a1 + 2048), (const std::string *)(a2 + 2048));
  uint64_t v28 = *(void *)(a2 + 2077);
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(void *)(a1 + 2077) = v28;
  std::string::operator=((std::string *)(a1 + 2096), (const std::string *)(a2 + 2096));
  char v29 = *(unsigned char *)(a2 + 2122);
  *(_WORD *)(a1 + 2120) = *(_WORD *)(a2 + 2120);
  *(unsigned char *)(a1 + 2122) = v29;
  std::string::operator=((std::string *)(a1 + 2136), (const std::string *)(a2 + 2136));
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(a2 + 2160);
  std::string::operator=((std::string *)(a1 + 2168), (const std::string *)(a2 + 2168));
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a2 + 2192);
  std::string::operator=((std::string *)(a1 + 2200), (const std::string *)(a2 + 2200));
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  if (a1 == a2)
  {
    long long v34 = *(_OWORD *)(a2 + 2256);
    long long v35 = *(_OWORD *)(a2 + 2272);
    *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
    *(_OWORD *)(a1 + 2272) = v35;
    *(_OWORD *)(a1 + 2256) = v34;
  }
  else
  {
    sub_48E1E8((void *)(a1 + 2232), *(char **)(a2 + 2232), *(char **)(a2 + 2240), (uint64_t)(*(void *)(a2 + 2240) - *(void *)(a2 + 2232)) >> 4);
    long long v30 = *(_OWORD *)(a2 + 2256);
    long long v31 = *(_OWORD *)(a2 + 2272);
    *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
    *(_OWORD *)(a1 + 2272) = v31;
    *(_OWORD *)(a1 + 2256) = v30;
    sub_472BC8((void *)(a1 + 2296), *(char **)(a2 + 2296), *(char **)(a2 + 2304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 2304) - *(void *)(a2 + 2296)) >> 2));
    sub_472BC8((void *)(a1 + 2320), *(char **)(a2 + 2320), *(char **)(a2 + 2328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 2328) - *(void *)(a2 + 2320)) >> 2));
    *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a2 + 2344);
    unsigned int v32 = *(_DWORD *)(a1 + 2368);
    int v33 = *(_DWORD *)(a2 + 2368);
    if (v32 == v33)
    {
      if (v32 <= 1) {
        *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
      }
    }
    else
    {
      if (v33 == 1)
      {
        *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
        int v33 = *(_DWORD *)(a2 + 2368);
      }
      else if (!v33)
      {
        *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
      }
      *(_DWORD *)(a1 + 2368) = v33;
    }
  }
  *(_OWORD *)(a1 + 2376) = *(_OWORD *)(a2 + 2376);
  *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
  return a1;
}

void sub_59D3D4(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  long long v9 = (std::string *)*a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x86BCA1AF286BCA1BLL * ((a1[1] - (uint64_t)v9) >> 3) >= a4)
    {
      sub_59D630((uint64_t)__str, (uint64_t)a3, v9);
      sub_52FA20((uint64_t)a1, v19);
    }
    else
    {
      char v16 = (std::string *)((char *)__str + 8 * ((a1[1] - (uint64_t)v9) >> 3));
      sub_59D630((uint64_t)__str, (uint64_t)v16, v9);
      uint64_t v17 = a1[1];
      if (v16 != a3)
      {
        uint64_t v18 = 0;
        do
        {
          sub_4AA8E0((char *)(v17 + v18), (long long *)((char *)v16 + v18));
          v18 += 152;
        }
        while ((std::string *)((char *)v16 + v18) != a3);
        v17 += v18;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      sub_52FA20((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1AF286BCA1AF286) {
      goto LABEL_25;
    }
    unint64_t v10 = 0x86BCA1AF286BCA1BLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v11;
    if (v12 > 0x1AF286BCA1AF286) {
LABEL_25:
    }
      sub_2E00();
    uint64_t v13 = 152 * v12;
    long long v14 = (char *)operator new(152 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (__str != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_4AA8E0(&v14[v15], (long long *)((char *)__str + v15));
        v15 += 152;
      }
      while ((std::string *)((char *)__str + v15) != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_59D5D8(_Unwind_Exception *a1)
{
  sub_5949E0(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_59D604(_Unwind_Exception *a1)
{
  sub_5949E0(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_59D630(uint64_t __str, uint64_t a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
    {
      std::string::operator=(this, (const std::string *)v4);
      this[1].__r_.__value_.__r.__words[0] = *(void *)(v4 + 24);
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)(v4 + 32));
      this[2].__r_.__value_.__l.__size_ = *(void *)(v4 + 56);
      LODWORD(this[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v4 + 64);
      std::string::operator=(this + 3, (const std::string *)(v4 + 72));
      std::string::operator=(this + 4, (const std::string *)(v4 + 96));
      LODWORD(this[5].__r_.__value_.__l.__data_) = *(_DWORD *)(v4 + 120);
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(v4 + 128));
      this = (std::string *)((char *)this + 152);
      v4 += 152;
    }
    while (v4 != a2);
    return a2;
  }
  return __str;
}

void sub_59D6F8(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  long long v9 = (std::string *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 5) >= a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - (uint64_t)v9) >> 5) >= a4)
    {
      sub_59D94C((uint64_t)__str, (uint64_t)a3, v9);
      sub_4AA6AC((uint64_t)a1, v19);
    }
    else
    {
      char v16 = (std::string *)((char *)__str + 32 * ((a1[1] - (uint64_t)v9) >> 5));
      sub_59D94C((uint64_t)__str, (uint64_t)v16, v9);
      uint64_t v17 = a1[1];
      if (v16 != a3)
      {
        uint64_t v18 = 0;
        do
        {
          sub_4AA8E0((char *)(v17 + v18), (long long *)((char *)v16 + v18));
          *(void *)(v17 + v18 + 152) = *(std::string::size_type *)((char *)&v16[6].__r_.__value_.__l.__size_ + v18);
          v18 += 160;
        }
        while ((std::string *)((char *)v16 + v18) != a3);
        v17 += v18;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      sub_4AA6AC((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x199999999999999) {
      goto LABEL_25;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v11;
    if (v12 > 0x199999999999999) {
LABEL_25:
    }
      sub_2E00();
    uint64_t v13 = 160 * v12;
    long long v14 = (char *)operator new(160 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (__str != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_4AA8E0(&v14[v15], (long long *)((char *)__str + v15));
        *(void *)&v14[v15 + 152] = *(std::string::size_type *)((char *)&__str[6].__r_.__value_.__l.__size_ + v15);
        v15 += 160;
      }
      while ((std::string *)((char *)__str + v15) != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_59D8F4(_Unwind_Exception *a1)
{
  sub_4AAACC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_59D920(_Unwind_Exception *a1)
{
  sub_4AAACC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_59D94C(uint64_t __str, uint64_t a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
    {
      std::string::operator=(this, (const std::string *)v4);
      this[1].__r_.__value_.__r.__words[0] = *(void *)(v4 + 24);
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)(v4 + 32));
      this[2].__r_.__value_.__l.__size_ = *(void *)(v4 + 56);
      LODWORD(this[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v4 + 64);
      std::string::operator=(this + 3, (const std::string *)(v4 + 72));
      std::string::operator=(this + 4, (const std::string *)(v4 + 96));
      LODWORD(this[5].__r_.__value_.__l.__data_) = *(_DWORD *)(v4 + 120);
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(v4 + 128));
      this[6].__r_.__value_.__l.__size_ = *(void *)(v4 + 152);
      this = (std::string *)((char *)this + 160);
      v4 += 160;
    }
    while (v4 != a2);
    return a2;
  }
  return __str;
}

uint64_t sub_59DA1C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xA3784A062B2E43DBLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xA3784A062B2E43DBLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_59DCC4(v9, v6);
          v6 += 664;
          v9 += 664;
          v23 += 664;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = (uint64_t)sub_576A58(result - 664);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_59DCC4(v9, v6);
          v6 += 664;
          v9 += 664;
          v20 -= 664;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_594D4C(v9 + v22, v19 + v22);
          v22 += 664;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = (void *)a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != (void *)v9)
      {
        do
          unint64_t v10 = sub_576A58((uint64_t)(v10 - 83));
        while (v10 != (void *)v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x62B2E43DAFCEA6) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xA3784A062B2E43DBLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x3159721ED7E753 ? 0x62B2E43DAFCEA6 : v13;
    if (v14 > 0x62B2E43DAFCEA6) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 664 * v14;
    uint64_t result = (uint64_t)operator new(664 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_594D4C(v17 + v18, v6 + v18);
        v18 += 664;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_59DCC4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  sub_52FD00(a1 + 344, a2 + 344);
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
  }
  else
  {
    sub_69208(a1 + 528, *(std::string **)(a2 + 528), *(std::string **)(a2 + 536), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 536) - *(void *)(a2 + 528)) >> 3));
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    sub_59E5E4((void *)(a1 + 552), *(uint64_t **)(a2 + 568), 0);
    *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
    sub_59E9D4((void *)(a1 + 600), *(char **)(a2 + 616), 0);
    sub_457964((void *)(a1 + 640), *(char **)(a2 + 640), *(char **)(a2 + 648), (uint64_t)(*(void *)(a2 + 648) - *(void *)(a2 + 640)) >> 4);
  }
  return a1;
}

uint64_t sub_59DDA4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 == a2)
  {
    long long v10 = *(_OWORD *)(a2 + 32);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    long long v12 = *(_OWORD *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    long long v14 = *(_OWORD *)(a2 + 216);
    long long v15 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v15;
    *(_OWORD *)(a1 + 216) = v14;
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  }
  else
  {
    sub_59DF7C((uint64_t *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5));
    long long v4 = *(_OWORD *)(a2 + 32);
    long long v5 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 32) = v4;
    long long v6 = *(_OWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 96) = v7;
    sub_472BC8((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 2));
    sub_472BC8((void *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 2));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    unsigned int v8 = *(_DWORD *)(a1 + 192);
    int v9 = *(_DWORD *)(a2 + 192);
    if (v8 == v9)
    {
      if (v8 <= 1) {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
      }
    }
    else
    {
      if (v9 == 1)
      {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        int v9 = *(_DWORD *)(a2 + 192);
      }
      else if (!v9)
      {
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
      }
      *(_DWORD *)(a1 + 192) = v9;
    }
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    long long v16 = *(_OWORD *)(a2 + 216);
    long long v17 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v17;
    *(_OWORD *)(a1 + 216) = v16;
    sub_59E204((uint64_t *)(a1 + 256), *(void *)(a2 + 256), *(void *)(a2 + 264), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3));
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
    sub_147D0((void *)(a1 + 288), *(char **)(a2 + 288), *(char **)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  }
  long long v18 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 312) = v18;
  return a1;
}

uint64_t sub_59DF7C(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 5) >= __sz)
  {
    uint64_t result = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((result - v9) >> 5) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_52FD00(v9, v6);
          v6 += 160;
          v9 += 160;
          v23 += 160;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_4D4B58(result - 160);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_52FD00(v9, v6);
          v6 += 160;
          v9 += 160;
          v20 -= 160;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_4F58AC(v9 + v22, v19 + v22);
          v22 += 160;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      long long v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4D4B58(v10 - 160);
        while (v10 != v9);
        long long v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x199999999999999) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= __sz) {
      uint64_t v13 = __sz;
    }
    unint64_t v14 = v12 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v13;
    if (v14 > 0x199999999999999) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 160 * v14;
    uint64_t result = (uint64_t)operator new(160 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_4F58AC(v17 + v18, v6 + v18);
        v18 += 160;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_59E204(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v10) >> 3) >= a4)
    {
      sub_59E494((uint64_t)&v26, a2, a3, v10);
      uint64_t v24 = v23;
      uint64_t result = a1[1];
      if (result != v23)
      {
        do
          uint64_t result = (uint64_t)sub_4F31D0((void **)(result - 104));
        while (result != v24);
      }
      a1[1] = v24;
    }
    else
    {
      uint64_t v20 = a2 + 8 * ((a1[1] - v10) >> 3);
      uint64_t result = sub_59E494((uint64_t)&v25, a2, v20, v10);
      uint64_t v21 = a1[1];
      if (v20 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_59540C(v9, v21 + v22, v20 + v22);
          v22 += 104;
        }
        while (v20 + v22 != a3);
        v21 += v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v10)
    {
      long long v11 = (void **)a1[1];
      unint64_t v12 = (void *)v10;
      if (v11 != (void **)v10)
      {
        do
          long long v11 = sub_4F31D0(v11 - 13);
        while (v11 != (void **)v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_28;
    }
    unint64_t v13 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v14;
    if (v15 > 0x276276276276276) {
LABEL_28:
    }
      sub_2E00();
    uint64_t v16 = 104 * v15;
    uint64_t result = (uint64_t)operator new(104 * v15);
    uint64_t v18 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v16;
    if (a2 != a3)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t result = sub_59540C(v9, v18 + v19, a2 + v19);
        v19 += 104;
      }
      while (a2 + v19 != a3);
      v18 += v19;
    }
    a1[1] = v18;
  }
  return result;
}

void sub_59E46C(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 104)
    sub_4F31D0((void **)(v2 - 104 + v3));
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_59E494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    if (a2 != a4)
    {
      sub_69208(a4 + v7, *(std::string **)(a2 + v7), *(std::string **)(a2 + v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 3));
      *(_DWORD *)(v8 + 56) = *(_DWORD *)(a2 + v7 + 56);
      sub_59E5E4((void *)(v8 + 24), *(uint64_t **)(a2 + v7 + 40), 0);
    }
    *(unsigned char *)(v8 + 64) = *(unsigned char *)(a2 + v7 + 64);
    *(_DWORD *)(v8 + 72) = *(_DWORD *)(a2 + v7 + 72);
    uint64_t v10 = *(void *)(a2 + v7 + 80);
    uint64_t v9 = *(void *)(a2 + v7 + 88);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v8 + 80) = v10;
    long long v11 = *(std::__shared_weak_count **)(a4 + v7 + 88);
    *(void *)(a4 + v7 + 88) = v9;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)(a4 + v7 + 96) = *(_WORD *)(a2 + v7 + 96);
    v7 += 104;
  }
  while (a2 + v7 != v6);
  return v6;
}

void sub_59E5E4(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      std::string::operator=((std::string *)(v8 + 40), (const std::string *)(a2 + 5));
      *((void *)v8 + 8) = a2[8];
      std::string::operator=((std::string *)v8 + 3, (const std::string *)a2 + 3);
      *((void *)v8 + 12) = a2[12];
      *((_DWORD *)v8 + 26) = *((_DWORD *)a2 + 26);
      std::string::operator=((std::string *)(v8 + 112), (const std::string *)(a2 + 14));
      std::string::operator=((std::string *)(v8 + 136), (const std::string *)(a2 + 17));
      *((_DWORD *)v8 + 40) = *((_DWORD *)a2 + 40);
      std::string::operator=((std::string *)v8 + 7, (const std::string *)a2 + 7);
      uint64_t v9 = *(char **)v8;
      sub_59E788(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v10 = *(char **)v8;
      sub_4F4B48((uint64_t)(v8 + 16));
      operator delete(v8);
      uint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      sub_59E8E4((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
      sub_59E788(a1, v11[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_59E728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  __cxa_begin_catch(a1);
  sub_59209C(v12, v13);
  __cxa_rethrow();
}

void sub_59E774()
{
}

uint64_t sub_59E788(void *a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = sub_5A90C((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  *uint64_t v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

unint64_t sub_59E8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0xC0uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v6 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  sub_4AA8E0(v7 + 40, (long long *)(a2 + 24));
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = sub_B128((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_59E998(_Unwind_Exception *a1)
{
  sub_595A98(v1);
  _Unwind_Resume(a1);
}

void sub_59E9B0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_595A98(v1);
  _Unwind_Resume(a1);
}

void sub_59E9D4(void *a1, char *a2, char *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      *((_DWORD *)v8 + 10) = *((_DWORD *)a2 + 10);
      if (v8 != a2) {
        sub_531608((void *)v8 + 6, *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
      }
      *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
      v8[80] = a2[80];
      int v9 = *(char **)v8;
      sub_59EB20(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    do
    {
      uint64_t v10 = *(char **)v8;
      unint64_t v11 = (void *)*((void *)v8 + 6);
      if (v11)
      {
        *((void *)v8 + 7) = v11;
        operator delete(v11);
      }
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      unint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_59EC7C(a1, (long long *)a2 + 1);
      a2 = *(char **)a2;
    }
  }
}

void sub_59EAF0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_59260C(v1, v2);
  __cxa_rethrow();
}

void sub_59EB0C(_Unwind_Exception *a1)
{
}

uint64_t sub_59EB20(void *a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = sub_5A90C((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  *uint64_t v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t sub_59EC7C(void *a1, long long *a2)
{
  long long v4 = (char *)operator new(0x58uLL);
  *(void *)long long v4 = 0;
  *((void *)v4 + 1) = 0;
  unint64_t v5 = sub_5960D8((void *)v4 + 2, a2);
  int v6 = v4[39];
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = (uint64_t *)*((void *)v4 + 2);
  }
  if (v6 >= 0) {
    unint64_t v8 = v4[39];
  }
  else {
    unint64_t v8 = *((void *)v4 + 3);
  }
  *((void *)v4 + 1) = sub_B128((uint64_t)&v10, v7, v8);
  return sub_59EB20(a1, (uint64_t)v4);
}

void sub_59ED10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_59ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_59ED3C(void **a1, std::string *__str, std::string *a3, size_t __sz)
{
  int v6 = __str;
  uint64_t v8 = (uint64_t)a1[2];
  unint64_t v9 = (void **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) >= __sz)
  {
    unint64_t v12 = (void **)a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 4) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v22 = (void **)*a1;
      }
      else
      {
        uint64_t v22 = (void **)*a1;
        do
        {
          std::string::operator=((std::string *)v9, v6);
          std::string::size_type v23 = v6[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v9 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v9[5] = (void *)v23;
          v22 += 6;
          v6 += 2;
          v9 += 6;
        }
        while (v6 != a3);
        unint64_t v12 = (void **)a1[1];
      }
      while (v12 != v22)
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      a1[1] = v22;
    }
    else
    {
      uint8x8_t v13 = (std::string *)((char *)__str + 16 * (((char *)v12 - (char *)v9) >> 4));
      if (v12 != v9)
      {
        do
        {
          std::string::operator=((std::string *)v9, v6);
          std::string::size_type v14 = v6[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v9 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v9[5] = (void *)v14;
          v6 += 2;
          v9 += 6;
        }
        while (v6 != v13);
        unint64_t v9 = (void **)a1[1];
      }
      unint64_t v15 = (char *)v9;
      if (v13 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v20 = (char *)&v9[v16 / 8];
          uint64_t v21 = (char *)&v13[v16 / 0x18];
          if (SHIBYTE(v13[v16 / 0x18].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v20, *(void **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v21;
            *((void *)v20 + 2) = *((void *)v21 + 2);
            *(_OWORD *)uint64_t v20 = v17;
          }
          uint64_t v18 = (char *)&v9[v16 / 8];
          long long v19 = *(_OWORD *)&v13[v16 / 0x18 + 1].__r_.__value_.__l.__data_;
          *((void *)v18 + 5) = *((void *)&v13[v16 / 0x18 + 1].__r_.__value_.__l + 2);
          *(_OWORD *)(v18 + 24) = v19;
          v16 += 48;
        }
        while (&v13[v16 / 0x18] != a3);
        unint64_t v15 = (char *)&v9[v16 / 8];
      }
      a1[1] = v15;
    }
  }
  else
  {
    if (v9)
    {
      char v10 = (void **)a1[1];
      int8x8_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 25) < 0) {
            operator delete(*(v10 - 6));
          }
          v10 -= 6;
        }
        while (v10 != v9);
        int8x8_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_47;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v25;
    if (v26 > 0x555555555555555) {
LABEL_47:
    }
      sub_2E00();
    uint64_t v27 = 48 * v26;
    uint64_t v28 = (char *)operator new(48 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      uint64_t v29 = 0;
      do
      {
        long long v31 = &v28[v29 * 24];
        unsigned int v32 = &v6[v29];
        if (SHIBYTE(v6[v29].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v31, v32->__r_.__value_.__l.__data_, v32->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)long long v31 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          *((void *)v31 + 2) = *((void *)&v32->__r_.__value_.__l + 2);
        }
        long long v30 = &v28[v29 * 24];
        *(_OWORD *)(v30 + 24) = *(_OWORD *)&v6[v29 + 1].__r_.__value_.__l.__data_;
        *((void *)v30 + 5) = *((void *)&v6[v29 + 1].__r_.__value_.__l + 2);
        v29 += 2;
      }
      while (&v6[v29] != a3);
      v28 += v29 * 24;
    }
    a1[1] = v28;
  }
}

uint64_t sub_59F08C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 4) >= a4)
  {
    uint64_t result = a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((result - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_59F334(v9, v6);
          v6 += 336;
          v9 += 336;
          v23 += 336;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_576848(result - 336);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_59F334(v9, v6);
          v6 += 336;
          v9 += 336;
          v20 -= 336;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_5964A0(v9 + v22, v19 + v22);
          v22 += 336;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      int8x8_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_576848(v10 - 336);
        while (v10 != v9);
        int8x8_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xC30C30C30C30C3) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x61861861861861 ? 0xC30C30C30C30C3 : v13;
    if (v14 > 0xC30C30C30C30C3) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 336 * v14;
    uint64_t result = (uint64_t)operator new(336 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_5964A0(v17 + v18, v6 + v18);
        v18 += 336;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_59F334(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    uint64_t v5 = *(void *)(a2 + 216);
    *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
    *(void *)(a1 + 216) = v5;
  }
  else
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    sub_59F474((void *)a1, *(uint64_t **)(a2 + 16), 0);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    sub_59FB30((void *)(a1 + 40), *(uint64_t **)(a2 + 56), 0);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    sub_59FD50((void *)(a1 + 80), *(uint64_t **)(a2 + 96), 0);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    sub_59FD50((void *)(a1 + 120), *(uint64_t **)(a2 + 136), 0);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    sub_59FE78(a1 + 168, *(char ***)(a2 + 168), *(void *)(a2 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3));
    sub_59FE78(a1 + 192, *(char ***)(a2 + 192), *(void *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3));
    uint64_t v4 = *(void *)(a2 + 216);
    *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
    *(void *)(a1 + 216) = v4;
    sub_5A00E8((void **)(a1 + 232), *(char **)(a2 + 232), *(char **)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 6);
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  long long v6 = *(_OWORD *)(a2 + 272);
  long long v7 = *(_OWORD *)(a2 + 288);
  long long v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
  *(_OWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 272) = v6;
  return a1;
}

void sub_59F474(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  long long v8 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[16] = *((unsigned char *)a2 + 16);
      v8[17] = *((unsigned char *)a2 + 17);
      uint64_t v9 = *(unsigned __int8 **)v8;
      sub_59F5A8(a1, v8);
      a2 = (uint64_t *)*a2;
      long long v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v12 = *(unsigned __int8 **)v8;
      operator delete(v8);
      long long v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      uint64_t v10 = operator new(0x18uLL);
      *(void *)uint64_t v10 = 0;
      __int16 v11 = *((_WORD *)a2 + 8);
      v10[8] = v11;
      *((void *)v10 + 1) = v11;
      sub_59F5A8(a1, (unsigned __int8 *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_59F560(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_59F580(_Unwind_Exception *a1)
{
}

void sub_59F594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_59F5A8(void *a1, unsigned __int8 *a2)
{
  uint64_t v5 = a2 + 16;
  unint64_t v4 = a2[16];
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_59F6D0((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v6;
  *uint64_t v6 = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_59F6D0(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        sub_59F95C(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(uint64_t **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      int v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (v12 != *((unsigned __int8 *)v10 + 16));
          v11 |= v12 == *((unsigned __int8 *)v10 + 16);
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  uint64_t v25 = *(uint64_t **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  int v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    uint64_t v25 = (uint64_t *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (v27 != *((unsigned __int8 *)v25 + 16));
      v26 |= v27 == *((unsigned __int8 *)v25 + 16);
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_59F95C(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_188D718();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && *((unsigned __int8 *)v20 + 16) == *((unsigned __int8 *)v18 + 16));
              *float v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint8x8_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          int v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            unint64_t v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                unint64_t v14 = (void *)*v14;
              }
              while (v14 && *((unsigned __int8 *)v14 + 16) == *((unsigned __int8 *)v12 + 16));
              *float v7 = v14;
              uint64_t v16 = 8 * v13;
              void *v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_59FB30(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((unsigned char *)v8 + 16) = *((unsigned char *)a2 + 16);
      if (v8 != a2) {
        sub_69208((uint64_t)(v8 + 3), (std::string *)a2[3], (std::string *)a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
      }
      unint64_t v9 = (uint64_t *)*v8;
      sub_59F5A8(a1, (unsigned __int8 *)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      uint64_t v12 = v8[3];
      if (v12)
      {
        uint64_t v13 = v8[4];
        unint64_t v10 = (void *)v8[3];
        if (v13 != v12)
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 24;
          }
          while (v13 != v12);
          unint64_t v10 = (void *)v8[3];
        }
        v8[4] = v12;
        operator delete(v10);
      }
      operator delete(v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_59FC90(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_59FC60(void *a1)
{
  __cxa_begin_catch(a1);
  sub_592500(v2, v1);
  __cxa_rethrow();
}

void sub_59FC7C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_59FC90(void *a1, uint64_t a2)
{
  uint64_t v5 = (unsigned __int8 *)operator new(0x30uLL);
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = *(unsigned char *)a2;
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = 0;
  sub_8A6F8((char *)v5 + 24, *(void *)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *((void *)v5 + 1) = v5[16];
  return sub_59F5A8(a1, v5);
}

void sub_59FD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_59FD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_596F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_59FD50(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[16] = *((unsigned char *)a2 + 16);
      unint64_t v9 = *(unsigned __int8 **)v8;
      sub_59F5A8(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v12 = *(unsigned __int8 **)v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x18uLL);
      *(void *)unint64_t v10 = 0;
      uint64_t v11 = *((unsigned __int8 *)a2 + 16);
      v10[16] = v11;
      *((void *)v10 + 1) = v11;
      sub_59F5A8(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_59FE30(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_59FE50(_Unwind_Exception *a1)
{
}

void sub_59FE64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_59FE78(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          unint64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          uint64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v23 = 3 * v22;
    unint64_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    uint64_t v25 = sub_5974F4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_34E73C(v10, *v6, v6[1], v6[1] - *v6);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      unint64_t v10 = *(char ***)(a1 + 8);
    }
    uint64_t v25 = sub_5974F4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    unint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_34E73C(v10, *v6, v6[1], v6[1] - *v6);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    uint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  unint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    unsigned __int8 v26 = v16;
    do
    {
      int v28 = *(v26 - 3);
      v26 -= 3;
      int v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      uint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_5A00D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A00E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A00E8(void **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 6)
  {
    if (v9)
    {
      unint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (void *)*((void *)v10 - 3);
          if (v12)
          {
            *((void *)v10 - 2) = v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)*((void *)v10 - 6);
          if (v13)
          {
            *((void *)v10 - 5) = v13;
            operator delete(v13);
          }
          v10 -= 64;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_47;
    }
    uint64_t v20 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v20 = __sz;
    }
    BOOL v21 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v22 = 0x3FFFFFFFFFFFFFFLL;
    if (!v21) {
      unint64_t v22 = v20;
    }
    if (v22 >> 58) {
LABEL_47:
    }
      sub_2E00();
    unint64_t v23 = v22 << 6;
    uint64_t v9 = (char *)operator new(v22 << 6);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v23];
    if (a2 != a3)
    {
      uint64_t v24 = 0;
      do
      {
        sub_597784((uint64_t)&v9[v24], (long long *)&a2[v24]);
        v24 += 64;
      }
      while (&a2[v24] != a3);
      v9 += v24;
    }
LABEL_33:
    a1[1] = v9;
    return;
  }
  unint64_t v14 = a1[1];
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= __sz)
  {
    if (a2 != a3)
    {
      uint64_t v19 = 0;
      do
      {
        *(_OWORD *)&v9[v19] = *(_OWORD *)&a2[v19];
        if (a2 != v9)
        {
          sub_34E73C(&v9[v19 + 16], *(char **)&a2[v19 + 16], *(char **)&a2[v19 + 24], *(void *)&a2[v19 + 24] - *(void *)&a2[v19 + 16]);
          sub_34E73C(&v9[v19 + 40], *(char **)&a2[v19 + 40], *(char **)&a2[v19 + 48], *(void *)&a2[v19 + 48] - *(void *)&a2[v19 + 40]);
        }
        v19 += 64;
      }
      while (&a2[v19] != a3);
      unint64_t v14 = a1[1];
      v9 += v19;
    }
    while (v14 != v9)
    {
      int v27 = (void *)*((void *)v14 - 3);
      if (v27)
      {
        *((void *)v14 - 2) = v27;
        operator delete(v27);
      }
      int v28 = (void *)*((void *)v14 - 6);
      if (v28)
      {
        *((void *)v14 - 5) = v28;
        operator delete(v28);
      }
      v14 -= 64;
    }
    goto LABEL_33;
  }
  uint64_t v16 = &a2[64 * v15];
  if (v14 != v9)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v15 << 6;
    do
    {
      *(_OWORD *)&v9[v17] = *(_OWORD *)&a2[v17];
      if (a2 != v9)
      {
        sub_34E73C(&v9[v17 + 16], *(char **)&a2[v17 + 16], *(char **)&a2[v17 + 24], *(void *)&a2[v17 + 24] - *(void *)&a2[v17 + 16]);
        sub_34E73C(&v9[v17 + 40], *(char **)&a2[v17 + 40], *(char **)&a2[v17 + 48], *(void *)&a2[v17 + 48] - *(void *)&a2[v17 + 40]);
      }
      v17 += 64;
    }
    while (v18 != v17);
    uint64_t v9 = (char *)a1[1];
  }
  uint64_t v25 = v9;
  if (v16 != a3)
  {
    uint64_t v26 = 0;
    do
    {
      sub_597784((uint64_t)&v9[v26], (long long *)&v16[v26]);
      v26 += 64;
    }
    while (&v16[v26] != a3);
    uint64_t v25 = &v9[v26];
  }
  a1[1] = v25;
}

void sub_5A0378(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A973C();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_5A03B8(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(std::string **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((v8 - *(void *)a1) >> 4) >= a4)
  {
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4) >= a4)
    {
      sub_5A0614((int)&v26, __str, a3, v10);
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)(a1 + 8);
      if (v24 != v22)
      {
        do
        {
          v24 -= 272;
          sub_4AA5F4(v9, v24);
        }
        while (v24 != v23);
      }
      *(void *)(a1 + 8) = v23;
    }
    else
    {
      uint64_t v19 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4));
      sub_5A0614((int)&v25, __str, v19, v10);
      uint64_t v20 = *(void *)(a1 + 8);
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          sub_597A38(v20 + v21, (uint64_t)v19 + v21);
          v21 += 272;
        }
        while ((std::string *)((char *)v19 + v21) != a3);
        v20 += v21;
      }
      *(void *)(a1 + 8) = v20;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::string **)a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 272;
          sub_4AA5F4(v9, v11);
        }
        while ((std::string *)v11 != v10);
        uint64_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xF0F0F0F0F0F0F0) {
      goto LABEL_29;
    }
    unint64_t v13 = 0xF0F0F0F0F0F0F0F1 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x78787878787878 ? 0xF0F0F0F0F0F0F0 : v14;
    if (v15 > 0xF0F0F0F0F0F0F0) {
LABEL_29:
    }
      sub_2E00();
    uint64_t v16 = 272 * v15;
    uint64_t v17 = (char *)operator new(272 * v15);
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = &v17[v16];
    if (__str != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_597A38((uint64_t)&v17[v18], (uint64_t)__str + v18);
        v18 += 272;
      }
      while ((std::string *)((char *)__str + v18) != a3);
      v17 += v18;
    }
    *(void *)(a1 + 8) = v17;
  }
}

void sub_5A05E8(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 272)
    sub_4AA5F4(v2, v3 - 272 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

std::string *sub_5A0614(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this[2].__r_.__value_.__l.__size_ = v5[2].__r_.__value_.__l.__size_;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v5[2].__r_.__value_.__r.__words[2];
    std::string::operator=(this + 3, v5 + 3);
    std::string::operator=(this + 4, v5 + 4);
    LODWORD(this[5].__r_.__value_.__l.__data_) = v5[5].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 128), (std::string *)((char *)v5 + 128));
    long long v7 = *(_OWORD *)&v5[7].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[6].__r_.__value_.__r.__words[1];
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v7;
    long long v8 = *(_OWORD *)&v5[8].__r_.__value_.__r.__words[1];
    long long v9 = *(_OWORD *)&v5[9].__r_.__value_.__l.__data_;
    long long v10 = *(_OWORD *)((char *)&v5[9].__r_.__value_.__r.__words[1] + 4);
    *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[7].__r_.__value_.__r.__words[2];
    *(_OWORD *)((char *)&this[9].__r_.__value_.__r.__words[1] + 4) = v10;
    *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v9;
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v8;
    if (this != v5) {
      sub_5A0718(&this[10].__r_.__value_.__l.__size_, (char *)v5[10].__r_.__value_.__l.__size_, (char *)v5[10].__r_.__value_.__r.__words[2], (uint64_t)(v5[10].__r_.__value_.__r.__words[2] - v5[10].__r_.__value_.__l.__size_) >> 4);
    }
    this = (std::string *)((char *)this + 272);
    uint64_t v5 = (std::string *)((char *)v5 + 272);
  }
  while (v5 != v6);
  return v6;
}

void *sub_5A0718(void *result, char *a2, char *a3, size_t __sz)
{
  long long v7 = result;
  uint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_44;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_44:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    uint64_t result = operator new(16 * v12);
    long long v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (a2 != a3)
    {
      uint64_t result = memcpy(result, a2, ((a3 - a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      uint64_t v14 = &v9[((a3 - a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    int64_t v15 = v14 - v9;
    uint64_t v16 = (void **)(v7 + 1);
    goto LABEL_39;
  }
  uint64_t v16 = (void **)(result + 1);
  uint64_t v17 = (unsigned char *)result[1];
  uint64_t v18 = v17 - v9;
  unint64_t v19 = (v17 - v9) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      int64_t v15 = 0;
      goto LABEL_39;
    }
    unint64_t v35 = a3 - a2 - 16;
    if (v35 >= 0x90 && ((unint64_t v36 = (v35 & 0xFFFFFFFFFFFFFFF0) + 16, v9 >= &a2[v36]) || &v9[v36] <= a2))
    {
      uint64_t v42 = (v35 >> 4) + 1;
      uint64_t v43 = 16 * (v42 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v37 = &v9[v43];
      unint64_t v38 = &a2[v43];
      int64_t v44 = (long long *)(a2 + 32);
      uint64_t v45 = v9 + 32;
      uint64_t v46 = v42 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(v44 - 2);
        long long v47 = *(v44 - 1);
        long long v50 = *v44;
        long long v49 = v44[1];
        v44 += 4;
        *(v45 - 2) = v48;
        *(v45 - 1) = v47;
        *uint64_t v45 = v50;
        v45[1] = v49;
        v45 += 4;
        v46 -= 4;
      }
      while (v46);
      if (v42 == (v42 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v37 = (char *)*result;
      unint64_t v38 = a2;
    }
    do
    {
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = *((void *)v38 + 1);
      v37 += 16;
      v38 += 16;
    }
    while (v38 != a3);
LABEL_30:
    int64_t v15 = v37 - v9;
    goto LABEL_39;
  }
  uint64_t v20 = &a2[16 * v19];
  if (v17 != v9)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0x90
      || ((unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFF0, v9 < &a2[v22]) ? (v23 = &v9[v22] > a2) : (v23 = 0), v23))
    {
      char v26 = (char *)*result;
      int v27 = a2;
    }
    else
    {
      uint64_t v24 = (v21 >> 4) + 1;
      uint64_t v25 = 16 * (v24 & 0x1FFFFFFFFFFFFFFCLL);
      char v26 = &v9[v25];
      int v27 = &a2[v25];
      int v28 = (long long *)(a2 + 32);
      unint64_t v29 = v9 + 32;
      uint64_t v30 = v24 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *(v28 - 2);
        long long v31 = *(v28 - 1);
        long long v34 = *v28;
        long long v33 = v28[1];
        v28 += 4;
        *(v29 - 2) = v32;
        *(v29 - 1) = v31;
        *unint64_t v29 = v34;
        v29[1] = v33;
        v29 += 4;
        v30 -= 4;
      }
      while (v30);
      if (v24 == (v24 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_33;
      }
    }
    do
    {
      *(void *)char v26 = *(void *)v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      v27 += 16;
      v26 += 16;
    }
    while (v27 != v20);
LABEL_33:
    long long v9 = (char *)*v16;
  }
  unint64_t v39 = v9;
  if (v20 != a3)
  {
    unint64_t v39 = v9;
    unint64_t v40 = v9;
    do
    {
      long long v41 = *(_OWORD *)v20;
      v20 += 16;
      *(_OWORD *)unint64_t v40 = v41;
      v40 += 16;
      v39 += 16;
    }
    while (v20 != a3);
  }
  int64_t v15 = v39 - v9;
LABEL_39:
  *uint64_t v16 = &v9[v15];
  return result;
}

void sub_5A09C0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xD37A6F4DE9BD37A7 * ((v8 - *a1) >> 3) >= a4)
  {
    if (0xD37A6F4DE9BD37A7 * ((a1[1] - v9) >> 3) >= a4)
    {
      sub_5A0C54(a2, a3, v9);
      sub_52F8B0((uint64_t)a1, v24);
    }
    else
    {
      uint64_t v18 = a2 + 8 * ((a1[1] - v9) >> 3);
      sub_5A0C54(a2, v18, v9);
      uint64_t v19 = a1[1];
      if (v18 != a3)
      {
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = v19 + v20;
          uint64_t v22 = v18 + v20;
          *(void *)(v19 + v20) = *(void *)(v18 + v20);
          sub_4AA8E0((char *)(v19 + v20 + 8), (long long *)(v18 + v20 + 8));
          long long v23 = *(_OWORD *)(v18 + v20 + 160);
          *(void *)(v21 + 176) = *(void *)(v18 + v20 + 176);
          *(_OWORD *)(v21 + 160) = v23;
          v20 += 184;
        }
        while (v22 + 184 != a3);
        v19 += v20;
      }
      a1[1] = v19;
    }
  }
  else
  {
    if (v9)
    {
      sub_52F8B0((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1642C8590B21642) {
      goto LABEL_25;
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xB21642C8590B21 ? 0x1642C8590B21642 : v11;
    if (v12 > 0x1642C8590B21642) {
LABEL_25:
    }
      sub_2E00();
    uint64_t v13 = 184 * v12;
    uint64_t v14 = (char *)operator new(184 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (a2 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = &v14[v15];
        uint64_t v17 = a2 + v15;
        *(void *)&v14[v15] = *(void *)(a2 + v15);
        sub_4AA8E0(&v14[v15 + 8], (long long *)(a2 + v15 + 8));
        *((_OWORD *)v16 + 10) = *(_OWORD *)(a2 + v15 + 160);
        *((void *)v16 + 22) = *(void *)(a2 + v15 + 176);
        v15 += 184;
      }
      while (v17 + 184 != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_5A0BFC(_Unwind_Exception *a1)
{
  sub_597CAC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_5A0C28(_Unwind_Exception *a1)
{
  sub_597CAC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_5A0C54(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (result != a2)
  {
    do
    {
      *(void *)a3 = *(void *)v4;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
      *(void *)(a3 + 32) = *(void *)(v4 + 32);
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v4 + 40));
      *(void *)(a3 + 64) = *(void *)(v4 + 64);
      *(_DWORD *)(a3 + 72) = *(_DWORD *)(v4 + 72);
      std::string::operator=((std::string *)(a3 + 80), (const std::string *)(v4 + 80));
      std::string::operator=((std::string *)(a3 + 104), (const std::string *)(v4 + 104));
      *(_DWORD *)(a3 + 128) = *(_DWORD *)(v4 + 128);
      std::string::operator=((std::string *)(a3 + 136), (const std::string *)(v4 + 136));
      uint64_t v6 = *(void *)(v4 + 176);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(v4 + 160);
      *(void *)(a3 + 176) = v6;
      a3 += 184;
      v4 += 184;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

void sub_5A0D34(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      sub_52F808(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1745D1745D1745DLL) {
      goto LABEL_37;
    }
    unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v12;
    if (v13 > 0x1745D1745D1745DLL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v14 = 176 * v13;
    uint64_t v15 = operator new(176 * v13);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + v14;
    uint64_t v16 = sub_597E4C(v9, v6, a3, (uint64_t)v15);
LABEL_17:
    a1[1] = v16;
    return;
  }
  uint64_t v17 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v17 - v10) >> 4) < a4)
  {
    uint64_t v18 = a2 + 16 * ((v17 - v10) >> 4);
    if (v17 != v10)
    {
      do
      {
        long long v19 = *(_OWORD *)v6;
        long long v20 = *(_OWORD *)(v6 + 16);
        long long v21 = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v10 + 41) = *(_OWORD *)(v6 + 41);
        *(_OWORD *)(v10 + 16) = v20;
        *(_OWORD *)(v10 + 32) = v21;
        *(_OWORD *)uint64_t v10 = v19;
        sub_4F39B8(v10 + 64, (std::string *)(v6 + 64));
        *(void *)(v10 + 104) = *(void *)(v6 + 104);
        std::string::operator=((std::string *)(v10 + 112), (const std::string *)(v6 + 112));
        *(unsigned char *)(v10 + 136) = *(unsigned char *)(v6 + 136);
        std::string::operator=((std::string *)(v10 + 144), (const std::string *)(v6 + 144));
        *(unsigned char *)(v10 + 168) = *(unsigned char *)(v6 + 168);
        v6 += 176;
        v10 += 176;
      }
      while (v6 != v18);
      uint64_t v10 = a1[1];
    }
    uint64_t v16 = sub_597E4C(v9, v18, a3, v10);
    goto LABEL_17;
  }
  if (a2 == a3)
  {
    uint64_t v22 = *a1;
  }
  else
  {
    uint64_t v22 = *a1;
    do
    {
      long long v23 = *(_OWORD *)v6;
      long long v24 = *(_OWORD *)(v6 + 16);
      long long v25 = *(_OWORD *)(v6 + 32);
      *(_OWORD *)(v10 + 41) = *(_OWORD *)(v6 + 41);
      *(_OWORD *)(v10 + 16) = v24;
      *(_OWORD *)(v10 + 32) = v25;
      *(_OWORD *)uint64_t v10 = v23;
      sub_4F39B8(v10 + 64, (std::string *)(v6 + 64));
      *(void *)(v10 + 104) = *(void *)(v6 + 104);
      std::string::operator=((std::string *)(v10 + 112), (const std::string *)(v6 + 112));
      *(unsigned char *)(v10 + 136) = *(unsigned char *)(v6 + 136);
      std::string::operator=((std::string *)(v10 + 144), (const std::string *)(v6 + 144));
      *(unsigned char *)(v10 + 168) = *(unsigned char *)(v6 + 168);
      v22 += 176;
      v6 += 176;
      v10 += 176;
    }
    while (v6 != a3);
    uint64_t v17 = a1[1];
  }
  while (v17 != v22)
  {
    if (*(char *)(v17 - 9) < 0)
    {
      operator delete(*(void **)(v17 - 32));
      if ((*(char *)(v17 - 41) & 0x80000000) == 0)
      {
LABEL_28:
        int v26 = *(_DWORD *)(v17 - 80);
        if (v26 != 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((*(char *)(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(*(void **)(v17 - 64));
    int v26 = *(_DWORD *)(v17 - 80);
    if (v26 != 1)
    {
LABEL_29:
      if (!v26 && *(char *)(v17 - 81) < 0)
      {
        int v27 = *(void **)(v17 - 104);
LABEL_23:
        operator delete(v27);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_34:
    int v27 = *(void **)(v17 - 104);
    if (v27)
    {
      *(void *)(v17 - 96) = v27;
      goto LABEL_23;
    }
LABEL_24:
    v17 -= 176;
  }
  a1[1] = v22;
}

void sub_5A1020(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A1028(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A1030(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = (std::string *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 5) >= a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - (uint64_t)v9) >> 5) >= a4)
    {
      sub_59D94C((uint64_t)__str, (uint64_t)a3, v9);
      sub_4AA6AC((uint64_t)a1, v19);
    }
    else
    {
      uint64_t v16 = (std::string *)((char *)__str + 32 * ((a1[1] - (uint64_t)v9) >> 5));
      sub_59D94C((uint64_t)__str, (uint64_t)v16, v9);
      uint64_t v17 = a1[1];
      if (v16 != a3)
      {
        uint64_t v18 = 0;
        do
        {
          sub_4AA8E0((char *)(v17 + v18), (long long *)((char *)v16 + v18));
          *(void *)(v17 + v18 + 152) = *(std::string::size_type *)((char *)&v16[6].__r_.__value_.__l.__size_ + v18);
          v18 += 160;
        }
        while ((std::string *)((char *)v16 + v18) != a3);
        v17 += v18;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      sub_4AA6AC((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x199999999999999) {
      goto LABEL_25;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v11;
    if (v12 > 0x199999999999999) {
LABEL_25:
    }
      sub_2E00();
    uint64_t v13 = 160 * v12;
    uint64_t v14 = (char *)operator new(160 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (__str != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_4AA8E0(&v14[v15], (long long *)((char *)__str + v15));
        *(void *)&v14[v15 + 152] = *(std::string::size_type *)((char *)&__str[6].__r_.__value_.__l.__size_ + v15);
        v15 += 160;
      }
      while ((std::string *)((char *)__str + v15) != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_5A122C(_Unwind_Exception *a1)
{
  sub_4AAACC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_5A1258(_Unwind_Exception *a1)
{
  sub_4AAACC(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void *sub_5A1284(void *result, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (void *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) >= __sz)
  {
    uint64_t v16 = (void **)(result + 1);
    uint64_t v17 = (void *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * (v17 - v9) >= __sz)
    {
      uint64_t v22 = *result;
      if (a2 != a3)
      {
        uint64_t v23 = *result;
        do
        {
          *(void *)uint64_t v23 = *(void *)v6;
          *(void *)(v23 + 8) = *((void *)v6 + 1);
          *(_DWORD *)(v23 + 16) = *((_DWORD *)v6 + 4);
          v22 += 24;
          v6 += 24;
          v23 += 24;
        }
        while (v6 != a3);
      }
      int64_t v15 = v22 - (void)v9;
    }
    else
    {
      uint64_t v18 = &a2[8 * (v17 - v9)];
      if (v17 != v9)
      {
        do
        {
          *uint64_t v9 = *(void *)v6;
          v9[1] = *((void *)v6 + 1);
          *((_DWORD *)v9 + 4) = *((_DWORD *)v6 + 4);
          v6 += 24;
          v9 += 3;
        }
        while (v6 != v18);
        uint64_t v9 = *v16;
      }
      uint64_t v19 = (char *)v9;
      if (v18 != a3)
      {
        uint64_t v19 = (char *)v9;
        long long v20 = v9;
        do
        {
          long long v21 = *(_OWORD *)v18;
          v20[2] = *((void *)v18 + 2);
          *(_OWORD *)long long v20 = v21;
          v20 += 3;
          v18 += 24;
          v19 += 24;
        }
        while (v18 != a3);
      }
      int64_t v15 = v19 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_27;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_27:
    }
      sub_2E00();
    uint64_t v13 = 3 * v12;
    uint64_t result = operator new(24 * v12);
    uint64_t v9 = result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (v6 != a3)
    {
      uint64_t result = memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      uint64_t v14 = (char *)&v9[3 * ((a3 - v6 - 24) / 0x18uLL) + 3];
    }
    int64_t v15 = v14 - (char *)v9;
    uint64_t v16 = (void **)(v7 + 1);
  }
  *uint64_t v16 = (void *)((char *)v9 + v15);
  return result;
}

uint64_t sub_5A149C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x1A8C536FE1A8C537 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x1A8C536FE1A8C537 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A1744(v9, v6);
          v6 += 1080;
          v9 += 1080;
          v23 += 1080;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = (uint64_t)sub_52F1E8(result - 1080);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_5A1744(v9, v6);
          v6 += 1080;
          v9 += 1080;
          v20 -= 1080;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_599644(v9 + v22, v19 + v22);
          v22 += 1080;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = (void *)a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != (void *)v9)
      {
        do
          unint64_t v10 = sub_52F1E8((uint64_t)(v10 - 135));
        while (v10 != (void *)v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x3CAE759203CAE7) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x1A8C536FE1A8C537 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x1E573AC901E573 ? 0x3CAE759203CAE7 : v13;
    if (v14 > 0x3CAE759203CAE7) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 1080 * v14;
    uint64_t result = (uint64_t)operator new(1080 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_599644(v17 + v18, v6 + v18);
        v18 += 1080;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_5A1744(uint64_t a1, uint64_t a2)
{
  sub_59CA3C(a1, a2);
  int v4 = *(_DWORD *)(a2 + 824);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(_DWORD *)(a1 + 824) = v4;
  if (a1 != a2) {
    sub_531608((void *)(a1 + 832), *(char **)(a2 + 832), *(char **)(a2 + 840), (uint64_t)(*(void *)(a2 + 840) - *(void *)(a2 + 832)) >> 2);
  }
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 992);
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  }
  else
  {
    sub_69208(a1 + 928, *(std::string **)(a2 + 928), *(std::string **)(a2 + 936), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 936) - *(void *)(a2 + 928)) >> 3));
    *(_DWORD *)(a1 + 984) = *(_DWORD *)(a2 + 984);
    sub_59E5E4((void *)(a1 + 952), *(uint64_t **)(a2 + 968), 0);
    *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 992);
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
    sub_69208(a1 + 1008, *(std::string **)(a2 + 1008), *(std::string **)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 3));
    *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a2 + 1064);
    sub_59E5E4((void *)(a1 + 1032), *(uint64_t **)(a2 + 1048), 0);
  }
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 1072);
  return a1;
}

void sub_5A187C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((v8 - *a1) >> 3) >= a4)
  {
    unint64_t v14 = (void *)a1[1];
    if (0xFAFAFAFAFAFAFAFBLL * (((uint64_t)v14 - v10) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v17 = (void *)*a1;
      }
      else
      {
        uint64_t v17 = (void *)*a1;
        do
        {
          sub_59DDA4(v10, v6);
          *(_DWORD *)(v10 + 340) = *(_DWORD *)(v6 + 340);
          *(void *)(v10 + 344) = *(void *)(v6 + 344);
          *(void *)(v10 + 352) = *(void *)(v6 + 352);
          if (v10 != v6) {
            sub_472BC8((void *)(v10 + 360), *(char **)(v6 + 360), *(char **)(v6 + 368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 368) - *(void *)(v6 + 360)) >> 2));
          }
          long long v18 = *(_OWORD *)(v6 + 384);
          *(_DWORD *)(v10 + 400) = *(_DWORD *)(v6 + 400);
          *(_OWORD *)(v10 + 384) = v18;
          v17 += 51;
          v6 += 408;
          v10 += 408;
        }
        while (v6 != a3);
        unint64_t v14 = (void *)a1[1];
      }
      while (v14 != v17)
      {
        int v27 = (void *)*(v14 - 6);
        if (v27)
        {
          *(v14 - 5) = v27;
          operator delete(v27);
        }
        v14 -= 51;
        sub_4F32CC(v14);
      }
      a1[1] = (uint64_t)v17;
    }
    else
    {
      uint64_t v15 = a2 + 8 * (((uint64_t)v14 - v10) >> 3);
      if (v14 != (void *)v10)
      {
        do
        {
          sub_59DDA4(v10, v6);
          *(_DWORD *)(v10 + 340) = *(_DWORD *)(v6 + 340);
          *(void *)(v10 + 344) = *(void *)(v6 + 344);
          *(void *)(v10 + 352) = *(void *)(v6 + 352);
          if (v10 != v6) {
            sub_472BC8((void *)(v10 + 360), *(char **)(v6 + 360), *(char **)(v6 + 368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 368) - *(void *)(v6 + 360)) >> 2));
          }
          long long v16 = *(_OWORD *)(v6 + 384);
          *(_DWORD *)(v10 + 400) = *(_DWORD *)(v6 + 400);
          *(_OWORD *)(v10 + 384) = v16;
          v6 += 408;
          v10 += 408;
        }
        while (v6 != v15);
        uint64_t v10 = a1[1];
      }
      uint64_t v25 = v10;
      if (v15 != a3)
      {
        uint64_t v26 = 0;
        do
        {
          sub_599C54(v9, v10 + v26, v15 + v26);
          v26 += 408;
        }
        while (v15 + v26 != a3);
        uint64_t v25 = v10 + v26;
      }
      a1[1] = v25;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = (void *)a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != (void *)v10)
      {
        do
        {
          uint64_t v13 = (void *)*(v11 - 6);
          if (v13)
          {
            *(v11 - 5) = v13;
            operator delete(v13);
          }
          v11 -= 51;
          sub_4F32CC(v11);
        }
        while (v11 != (void *)v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xA0A0A0A0A0A0A0) {
      goto LABEL_46;
    }
    unint64_t v19 = 0xFAFAFAFAFAFAFAFBLL * (v8 >> 3);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= a4) {
      uint64_t v20 = a4;
    }
    unint64_t v21 = v19 >= 0x50505050505050 ? 0xA0A0A0A0A0A0A0 : v20;
    if (v21 > 0xA0A0A0A0A0A0A0) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v22 = 408 * v21;
    uint64_t v23 = (char *)operator new(408 * v21);
    *a1 = (uint64_t)v23;
    a1[1] = (uint64_t)v23;
    a1[2] = (uint64_t)&v23[v22];
    if (v6 != a3)
    {
      uint64_t v24 = 0;
      do
      {
        sub_599C54(v9, (uint64_t)&v23[v24], v6 + v24);
        v24 += 408;
      }
      while (v6 + v24 != a3);
      v23 += v24;
    }
    a1[1] = (uint64_t)v23;
  }
}

void sub_5A1BD0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20A9A28();
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_5A1C10(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((v8 - *a1) >> 4) >= a4)
  {
    uint64_t result = a1[1];
    if (0xFAFAFAFAFAFAFAFBLL * ((result - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_59CA3C(v9, v6);
          v6 += 816;
          v9 += 816;
          v23 += 816;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = (uint64_t)sub_52F090((void *)(result - 816));
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_59CA3C(v9, v6);
          v6 += 816;
          v9 += 816;
          v20 -= 816;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_5998CC(v9 + v22, v19 + v22);
          v22 += 816;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (void *)a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != (void *)v9)
      {
        do
          uint64_t v10 = sub_52F090(v10 - 102);
        while (v10 != (void *)v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x50505050505050) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xFAFAFAFAFAFAFAFBLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x28282828282828 ? 0x50505050505050 : v13;
    if (v14 > 0x50505050505050) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 816 * v14;
    uint64_t result = (uint64_t)operator new(816 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_5998CC(v17 + v18, v6 + v18);
        v18 += 816;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_5A1EB8(void **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 6) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          unint64_t v12 = (void *)*((void *)v10 - 19);
          if (v12)
          {
            *((void *)v10 - 18) = v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)*((void *)v10 - 24);
          if (v13)
          {
            *((void *)v10 - 23) = v13;
            operator delete(v13);
          }
          v10 -= 192;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x155555555555555) {
      goto LABEL_48;
    }
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    uint64_t v35 = 2 * v34;
    if (2 * v34 <= __sz) {
      uint64_t v35 = __sz;
    }
    unint64_t v36 = v34 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v35;
    if (v36 > 0x155555555555555) {
LABEL_48:
    }
      sub_2E00();
    uint64_t v37 = 192 * v36;
    uint64_t v9 = (char *)operator new(192 * v36);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v37];
    if (a2 != a3)
    {
      uint64_t v38 = 0;
      do
      {
        sub_594714((uint64_t)&v9[v38], (uint64_t)&a2[v38]);
        v38 += 192;
      }
      while (&a2[v38] != a3);
      v9 += v38;
    }
LABEL_34:
    a1[1] = v9;
    return;
  }
  unint64_t v14 = a1[1];
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 6);
  if (v15 >= __sz)
  {
    if (a2 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        long long v33 = &v9[v26];
        if (a2 != v9)
        {
          sub_2D8554(&v9[v26], *(char **)&a2[v26], *(char **)&a2[v26 + 8], (uint64_t)(*(void *)&a2[v26 + 8] - *(void *)&a2[v26]) >> 3);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)&a2[v26 + 24];
          sub_531608((void *)v33 + 5, *(char **)&a2[v26 + 40], *(char **)&a2[v26 + 48], (uint64_t)(*(void *)&a2[v26 + 48] - *(void *)&a2[v26 + 40]) >> 2);
        }
        *((_DWORD *)v33 + 16) = *(_DWORD *)&a2[v26 + 64];
        long long v27 = *(_OWORD *)&a2[v26 + 72];
        long long v28 = *(_OWORD *)&a2[v26 + 88];
        long long v29 = *(_OWORD *)&a2[v26 + 104];
        *(_OWORD *)(v33 + 120) = *(_OWORD *)&a2[v26 + 120];
        *(_OWORD *)(v33 + 104) = v29;
        *(_OWORD *)(v33 + 88) = v28;
        *(_OWORD *)(v33 + 72) = v27;
        long long v30 = *(_OWORD *)&a2[v26 + 136];
        long long v31 = *(_OWORD *)&a2[v26 + 152];
        long long v32 = *(_OWORD *)&a2[v26 + 168];
        *(void *)(v33 + 183) = *(void *)&a2[v26 + 183];
        *(_OWORD *)(v33 + 168) = v32;
        *(_OWORD *)(v33 + 152) = v31;
        *(_OWORD *)(v33 + 136) = v30;
        v26 += 192;
      }
      while (&a2[v26] != a3);
      unint64_t v14 = a1[1];
      v9 += v26;
    }
    while (v14 != v9)
    {
      long long v41 = (void *)*((void *)v14 - 19);
      if (v41)
      {
        *((void *)v14 - 18) = v41;
        operator delete(v41);
      }
      uint64_t v42 = (void *)*((void *)v14 - 24);
      if (v42)
      {
        *((void *)v14 - 23) = v42;
        operator delete(v42);
      }
      v14 -= 192;
    }
    goto LABEL_34;
  }
  long long v16 = &a2[64 * ((v14 - v9) >> 6)];
  if (v14 != v9)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 192 * v15;
    do
    {
      uint64_t v25 = &v9[v17];
      if (a2 != v9)
      {
        sub_2D8554(&v9[v17], *(char **)&a2[v17], *(char **)&a2[v17 + 8], (uint64_t)(*(void *)&a2[v17 + 8] - *(void *)&a2[v17]) >> 3);
        *(_OWORD *)(v25 + 24) = *(_OWORD *)&a2[v17 + 24];
        sub_531608((void *)v25 + 5, *(char **)&a2[v17 + 40], *(char **)&a2[v17 + 48], (uint64_t)(*(void *)&a2[v17 + 48] - *(void *)&a2[v17 + 40]) >> 2);
      }
      *((_DWORD *)v25 + 16) = *(_DWORD *)&a2[v17 + 64];
      long long v19 = *(_OWORD *)&a2[v17 + 72];
      long long v20 = *(_OWORD *)&a2[v17 + 88];
      long long v21 = *(_OWORD *)&a2[v17 + 104];
      *(_OWORD *)(v25 + 120) = *(_OWORD *)&a2[v17 + 120];
      *(_OWORD *)(v25 + 104) = v21;
      *(_OWORD *)(v25 + 88) = v20;
      *(_OWORD *)(v25 + 72) = v19;
      long long v22 = *(_OWORD *)&a2[v17 + 136];
      long long v23 = *(_OWORD *)&a2[v17 + 152];
      long long v24 = *(_OWORD *)&a2[v17 + 168];
      *(void *)(v25 + 183) = *(void *)&a2[v17 + 183];
      *(_OWORD *)(v25 + 168) = v24;
      *(_OWORD *)(v25 + 152) = v23;
      *(_OWORD *)(v25 + 136) = v22;
      v17 += 192;
    }
    while (v18 != v17);
    uint64_t v9 = (char *)a1[1];
  }
  unint64_t v39 = v9;
  if (v16 != a3)
  {
    uint64_t v40 = 0;
    do
    {
      sub_594714((uint64_t)&v9[v40], (uint64_t)&v16[v40]);
      v40 += 192;
    }
    while (&v16[v40] != a3);
    unint64_t v39 = &v9[v40];
  }
  a1[1] = v39;
}

void sub_5A2228(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A9A6C();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_5A2268(uint64_t a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 8);
      uint64_t v11 = *(void **)a1;
      if (v10 != v9)
      {
        unint64_t v12 = *(void **)(a1 + 8);
        do
        {
          unint64_t v14 = (void *)*(v12 - 5);
          v12 -= 5;
          uint64_t v13 = v14;
          if (v14)
          {
            *(v10 - 4) = v13;
            operator delete(v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        uint64_t v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_43;
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x333333333333333 ? 0x666666666666666 : v22;
    if (v23 > 0x666666666666666) {
LABEL_43:
    }
      sub_2E00();
    uint64_t v24 = 40 * v23;
    uint64_t v25 = (char *)operator new(40 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        sub_E9BD88((uint64_t)&v25[v26], v6 + v26);
        v26 += 40;
      }
      while (v6 + v26 != a3);
      v25 += v26;
    }
    *(void *)(a1 + 8) = v25;
    return;
  }
  unint64_t v15 = *(void **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (v15 - v9) >= __sz)
  {
    if (a2 == a3)
    {
      long long v20 = *(void **)a1;
      if (v15 == v9)
      {
LABEL_42:
        *(void *)(a1 + 8) = v20;
        return;
      }
    }
    else
    {
      long long v20 = *(void **)a1;
      do
      {
        sub_E9BE14(v9, v6);
        v6 += 40;
        v9 += 5;
        v20 += 5;
      }
      while (v6 != a3);
      unint64_t v15 = *(void **)(a1 + 8);
      if (v15 == v20) {
        goto LABEL_42;
      }
    }
    long long v27 = v15;
    do
    {
      long long v29 = (void *)*(v27 - 5);
      v27 -= 5;
      long long v28 = v29;
      if (v29)
      {
        *(v15 - 4) = v28;
        operator delete(v28);
      }
      unint64_t v15 = v27;
    }
    while (v27 != v20);
    goto LABEL_42;
  }
  uint64_t v16 = a2 + 8 * (v15 - v9);
  if (v15 != v9)
  {
    uint64_t v17 = 8 * (v15 - v9);
    do
    {
      sub_E9BE14(v9, v6);
      v6 += 40;
      v9 += 5;
      v17 -= 40;
    }
    while (v17);
    uint64_t v9 = *(void **)(a1 + 8);
  }
  uint64_t v18 = v9;
  if (v16 != a3)
  {
    uint64_t v19 = 0;
    do
    {
      sub_E9BD88((uint64_t)&v9[v19], v16 + v19 * 8);
      v19 += 5;
    }
    while (v16 + v19 * 8 != a3);
    uint64_t v18 = &v9[v19];
  }
  *(void *)(a1 + 8) = v18;
}

void sub_5A2540(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x4FCACE213F2B3885 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)*a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 560;
        do
        {
          unint64_t v14 = *(void **)(v12 + 496);
          if (v14)
          {
            *(void *)(v12 + 504) = v14;
            operator delete(v14);
          }
          sub_510298(v12 + 24);
          unint64_t v15 = *(void **)v12;
          if (*(void *)v12)
          {
            *(void *)(v12 + 8) = v15;
            operator delete(v15);
          }
          uint64_t v13 = v12 - 56;
          v12 -= 616;
        }
        while (v13 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x6A63BD81A98EF6) {
      goto LABEL_47;
    }
    unint64_t v22 = 0x4FCACE213F2B3885 * (v8 >> 3);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= a4) {
      uint64_t v23 = a4;
    }
    unint64_t v24 = v22 >= 0x3531DEC0D4C77BLL ? 0x6A63BD81A98EF6 : v23;
    if (v24 > 0x6A63BD81A98EF6) {
LABEL_47:
    }
      sub_2E00();
    uint64_t v25 = 616 * v24;
    uint64_t v26 = (char *)operator new(616 * v24);
    *a1 = (uint64_t)v26;
    a1[1] = (uint64_t)v26;
    a1[2] = (uint64_t)&v26[v25];
    if (v6 != a3)
    {
      uint64_t v27 = 0;
      do
      {
        sub_50FFE0((uint64_t)&v26[v27], (long long *)((char *)v6 + v27));
        v27 += 616;
      }
      while ((long long *)((char *)v6 + v27) != a3);
      v26 += v27;
    }
    a1[1] = (uint64_t)v26;
    return;
  }
  uint64_t v16 = a1[1];
  if (0x4FCACE213F2B3885 * ((v16 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v21 = *a1;
      if (v16 == v9)
      {
LABEL_46:
        a1[1] = v21;
        return;
      }
    }
    else
    {
      uint64_t v21 = *a1;
      do
      {
        sub_572D60(v9, v6);
        uint64_t v6 = (long long *)((char *)v6 + 616);
        v9 += 616;
        v21 += 616;
      }
      while (v6 != a3);
      uint64_t v16 = a1[1];
      if (v16 == v21) {
        goto LABEL_46;
      }
    }
    uint64_t v28 = v16 - 560;
    do
    {
      long long v30 = *(void **)(v28 + 496);
      if (v30)
      {
        *(void *)(v28 + 504) = v30;
        operator delete(v30);
      }
      sub_510298(v28 + 24);
      long long v31 = *(void **)v28;
      if (*(void *)v28)
      {
        *(void *)(v28 + 8) = v31;
        operator delete(v31);
      }
      uint64_t v29 = v28 - 56;
      v28 -= 616;
    }
    while (v29 != v21);
    goto LABEL_46;
  }
  uint64_t v17 = (long long *)((char *)a2 + 8 * ((v16 - v9) >> 3));
  if (v16 != v9)
  {
    uint64_t v18 = 8 * ((v16 - v9) >> 3);
    do
    {
      sub_572D60(v9, v6);
      uint64_t v6 = (long long *)((char *)v6 + 616);
      v9 += 616;
      v18 -= 616;
    }
    while (v18);
    uint64_t v9 = a1[1];
  }
  uint64_t v19 = v9;
  if (v17 != a3)
  {
    uint64_t v20 = 0;
    do
    {
      sub_50FFE0(v9 + v20, (long long *)((char *)v17 + v20));
      v20 += 616;
    }
    while ((long long *)((char *)v17 + v20) != a3);
    uint64_t v19 = v9 + v20;
  }
  a1[1] = v19;
}

void sub_5A2810(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20A9AB8(v3 + v2);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_5A2850(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 3) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v13 = *((void *)v10 - 6);
          if (v13)
          {
            uint64_t v14 = *((void *)v10 - 5);
            uint64_t v12 = (void *)*((void *)v10 - 6);
            if (v14 != v13)
            {
              uint64_t v15 = *((void *)v10 - 5);
              do
              {
                uint64_t v17 = *(void **)(v15 - 24);
                v15 -= 24;
                uint64_t v16 = v17;
                if (v17)
                {
                  *(void *)(v14 - 16) = v16;
                  operator delete(v16);
                }
                uint64_t v14 = v15;
              }
              while (v15 != v13);
              uint64_t v12 = (void *)*((void *)v10 - 6);
            }
            *((void *)v10 - 5) = v13;
            operator delete(v12);
          }
          v10 -= 72;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL) {
      goto LABEL_57;
    }
    unint64_t v28 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= __sz) {
      uint64_t v29 = __sz;
    }
    unint64_t v30 = v28 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v29;
    if (v30 > 0x38E38E38E38E38ELL) {
LABEL_57:
    }
      sub_2E00();
    uint64_t v31 = 72 * v30;
    uint64_t v9 = (char *)operator new(72 * v30);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v31];
    if (a2 != a3)
    {
      uint64_t v32 = 0;
      do
      {
        long long v33 = &v9[v32];
        uint64_t v34 = a2 + v32;
        *(_OWORD *)long long v33 = *(_OWORD *)(a2 + v32);
        *((void *)v33 + 2) = *(void *)(a2 + v32 + 16);
        sub_4D4C4(&v9[v32 + 24], (uint64_t *)(a2 + v32 + 24));
        *((_DWORD *)v33 + 12) = *(_DWORD *)(a2 + v32 + 48);
        *(_OWORD *)(v33 + 56) = *(_OWORD *)(a2 + v32 + 56);
        v32 += 72;
      }
      while (v34 + 72 != a3);
      v9 += v32;
    }
LABEL_38:
    a1[1] = v9;
    return;
  }
  uint64_t v18 = (char *)a1[1];
  if (0x8E38E38E38E38E39 * ((v18 - v9) >> 3) >= __sz)
  {
    if (a2 != a3)
    {
      uint64_t v24 = (uint64_t)(v9 + 24);
      uint64_t v25 = a2 + 32;
      do
      {
        uint64_t v26 = v25 - 32;
        long long v27 = *(_OWORD *)(v25 - 32);
        *(void *)(v24 - 8) = *(void *)(v25 - 16);
        *(_OWORD *)(v24 - 24) = v27;
        if (v24 - 24 != v25 - 32) {
          sub_31ACC4(v24, *(char ***)(v25 - 8), *(void *)v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v25 - *(void *)(v25 - 8)) >> 3));
        }
        *(_DWORD *)(v24 + 24) = *(_DWORD *)(v25 + 16);
        *(_OWORD *)(v24 + 32) = *(_OWORD *)(v25 + 24);
        v9 += 72;
        v24 += 72;
        v25 += 72;
      }
      while (v26 + 72 != a3);
      uint64_t v18 = (char *)a1[1];
    }
    while (v18 != v9)
    {
      uint64_t v41 = *((void *)v18 - 6);
      if (v41)
      {
        uint64_t v42 = *((void *)v18 - 5);
        uint64_t v40 = (void *)*((void *)v18 - 6);
        if (v42 != v41)
        {
          uint64_t v43 = *((void *)v18 - 5);
          do
          {
            uint64_t v45 = *(void **)(v43 - 24);
            v43 -= 24;
            int64_t v44 = v45;
            if (v45)
            {
              *(void *)(v42 - 16) = v44;
              operator delete(v44);
            }
            uint64_t v42 = v43;
          }
          while (v43 != v41);
          uint64_t v40 = (void *)*((void *)v18 - 6);
        }
        *((void *)v18 - 5) = v41;
        operator delete(v40);
      }
      v18 -= 72;
    }
    goto LABEL_38;
  }
  uint64_t v19 = a2 + 8 * ((v18 - v9) >> 3);
  if (v18 != v9)
  {
    uint64_t v20 = (uint64_t)(v9 + 24);
    uint64_t v21 = a2 + 32;
    do
    {
      uint64_t v22 = v21 - 32;
      long long v23 = *(_OWORD *)(v21 - 32);
      *(void *)(v20 - 8) = *(void *)(v21 - 16);
      *(_OWORD *)(v20 - 24) = v23;
      if (v20 - 24 != v21 - 32) {
        sub_31ACC4(v20, *(char ***)(v21 - 8), *(void *)v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v21 - *(void *)(v21 - 8)) >> 3));
      }
      *(_DWORD *)(v20 + 24) = *(_DWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 24);
      v20 += 72;
      v21 += 72;
    }
    while (v22 + 72 != v19);
    uint64_t v9 = (char *)a1[1];
  }
  uint64_t v35 = v9;
  if (v19 != a3)
  {
    uint64_t v36 = 0;
    do
    {
      uint64_t v37 = &v9[v36];
      uint64_t v38 = v19 + v36;
      long long v39 = *(_OWORD *)(v19 + v36);
      *((void *)v37 + 2) = *(void *)(v19 + v36 + 16);
      *(_OWORD *)uint64_t v37 = v39;
      sub_4D4C4(&v9[v36 + 24], (uint64_t *)(v19 + v36 + 24));
      *((_DWORD *)v37 + 12) = *(_DWORD *)(v19 + v36 + 48);
      *(_OWORD *)(v37 + 56) = *(_OWORD *)(v19 + v36 + 56);
      v36 += 72;
    }
    while (v38 + 72 != a3);
    uint64_t v35 = &v9[v36];
  }
  a1[1] = v35;
}

void sub_5A2C1C(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A9B0C();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_5A2C5C(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (uint64_t *)*a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 9;
        do
        {
          if (*v12)
          {
            sub_52F808(v12);
            operator delete((void *)*v12);
          }
          uint64_t v13 = v12 - 4;
          v12 -= 13;
        }
        while (v13 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_46;
    }
    unint64_t v28 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= a4) {
      uint64_t v29 = a4;
    }
    unint64_t v30 = v28 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v29;
    if (v30 > 0x276276276276276) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v31 = 13 * v30;
    uint64_t v9 = (uint64_t *)operator new(104 * v30);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v31];
    if (a2 != a3)
    {
      unint64_t v32 = 0;
      do
      {
        long long v33 = (char *)&v9[v32 / 8];
        uint64_t v34 = a2 + v32;
        long long v35 = *(_OWORD *)(a2 + v32 + 16);
        *(_OWORD *)long long v33 = *(_OWORD *)(a2 + v32);
        *((_OWORD *)v33 + 1) = v35;
        sub_597D64(&v9[v32 / 8 + 4], (uint64_t *)(a2 + v32 + 32));
        *(_OWORD *)(v33 + 56) = *(_OWORD *)(a2 + v32 + 56);
        *(_OWORD *)(v33 + 72) = *(_OWORD *)(a2 + v32 + 72);
        *(_OWORD *)(v33 + 81) = *(_OWORD *)(a2 + v32 + 81);
        v32 += 104;
      }
      while (v34 + 104 != a3);
      uint64_t v9 = (uint64_t *)((char *)v9 + v32);
    }
LABEL_44:
    a1[1] = v9;
    return;
  }
  uint64_t v14 = (uint64_t *)a1[1];
  if (0x4EC4EC4EC4EC4EC5 * (v14 - v9) >= a4)
  {
    if (a2 != a3)
    {
      uint64_t v22 = (char *)(v9 + 4);
      uint64_t v23 = a2 + 40;
      do
      {
        uint64_t v26 = v23 - 40;
        long long v27 = *(_OWORD *)(v23 - 24);
        *((_OWORD *)v22 - 2) = *(_OWORD *)(v23 - 40);
        *((_OWORD *)v22 - 1) = v27;
        if (v22 - 32 != (char *)(v23 - 40)) {
          sub_5A0D34((uint64_t *)v22, *(void *)(v23 - 8), *(void *)v23, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)v23 - *(void *)(v23 - 8)) >> 4));
        }
        long long v24 = *(_OWORD *)(v23 + 16);
        long long v25 = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v22 + 49) = *(_OWORD *)(v23 + 41);
        *(_OWORD *)(v22 + 40) = v25;
        *(_OWORD *)(v22 + 24) = v24;
        v9 += 13;
        v22 += 104;
        v23 += 104;
      }
      while (v26 + 104 != a3);
      uint64_t v14 = (uint64_t *)a1[1];
    }
    if (v14 != v9)
    {
      uint64_t v43 = v14 - 9;
      do
      {
        if (*v43)
        {
          sub_52F808(v43);
          operator delete((void *)*v43);
        }
        int64_t v44 = v43 - 4;
        v43 -= 13;
      }
      while (v44 != v9);
    }
    goto LABEL_44;
  }
  uint64_t v15 = a2 + 8 * (v14 - v9);
  if (v14 != v9)
  {
    uint64_t v16 = (char *)(v9 + 4);
    uint64_t v17 = a2 + 40;
    do
    {
      uint64_t v20 = v17 - 40;
      long long v21 = *(_OWORD *)(v17 - 24);
      *((_OWORD *)v16 - 2) = *(_OWORD *)(v17 - 40);
      *((_OWORD *)v16 - 1) = v21;
      if (v16 - 32 != (char *)(v17 - 40)) {
        sub_5A0D34((uint64_t *)v16, *(void *)(v17 - 8), *(void *)v17, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 4));
      }
      long long v18 = *(_OWORD *)(v17 + 16);
      long long v19 = *(_OWORD *)(v17 + 32);
      *(_OWORD *)(v16 + 49) = *(_OWORD *)(v17 + 41);
      *(_OWORD *)(v16 + 40) = v19;
      *(_OWORD *)(v16 + 24) = v18;
      v16 += 104;
      v17 += 104;
    }
    while (v20 + 104 != v15);
    uint64_t v9 = (uint64_t *)a1[1];
  }
  uint64_t v36 = (char *)v9;
  if (v15 != a3)
  {
    unint64_t v37 = 0;
    do
    {
      uint64_t v38 = (char *)&v9[v37 / 8];
      uint64_t v39 = v15 + v37;
      long long v40 = *(_OWORD *)(v15 + v37 + 16);
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(v15 + v37);
      *((_OWORD *)v38 + 1) = v40;
      sub_597D64(&v9[v37 / 8 + 4], (uint64_t *)(v15 + v37 + 32));
      long long v41 = *(_OWORD *)(v15 + v37 + 56);
      long long v42 = *(_OWORD *)(v15 + v37 + 72);
      *(_OWORD *)(v38 + 81) = *(_OWORD *)(v15 + v37 + 81);
      *(_OWORD *)(v38 + 72) = v42;
      *(_OWORD *)(v38 + 56) = v41;
      v37 += 104;
    }
    while (v39 + 104 != a3);
    uint64_t v36 = (char *)&v9[v37 / 8];
  }
  a1[1] = v36;
}

void sub_5A2FFC(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A9B74(v2 + v3);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_5A303C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  if (a1 != a2) {
    sub_147D0((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  }
  int v7 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 104) = v8;
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  if (a1 == a2)
  {
    long long v10 = *(_OWORD *)(a2 + 312);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = v10;
  }
  else
  {
    sub_5A31DC((uint64_t *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 3));
    sub_4726C4((void *)(a1 + 264), *(char **)(a2 + 264), *(char **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3));
    sub_4AD448((void *)(a1 + 288), *(char **)(a2 + 288), *(char **)(a2 + 296), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 3));
    long long v9 = *(_OWORD *)(a2 + 312);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = v9;
    sub_31ACC4(a1 + 336, *(char ***)(a2 + 336), *(void *)(a2 + 344), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 344) - *(void *)(a2 + 336)) >> 3));
  }
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  return a1;
}

void sub_5A31DC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 32);
          if (v13)
          {
            *(void *)(v11 - 24) = v13;
            operator delete(v13);
          }
          v11 -= 104;
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_38;
    }
    unint64_t v30 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v31 = 2 * v30;
    if (2 * v30 <= a4) {
      uint64_t v31 = a4;
    }
    unint64_t v32 = v30 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v31;
    if (v32 > 0x276276276276276) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v33 = 104 * v32;
    uint64_t v34 = operator new(104 * v32);
    *a1 = (uint64_t)v34;
    a1[1] = (uint64_t)v34;
    a1[2] = (uint64_t)v34 + v33;
    uint64_t v35 = sub_483D14(v9, a2, a3, (uint64_t)v34);
LABEL_31:
    a1[1] = v35;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v14 - v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      uint64_t v16 = v10 + 72;
      uint64_t v17 = a2 + 80;
      do
      {
        uint64_t v19 = v17 - 80;
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v17 - 80);
        long long v20 = *(_OWORD *)(v17 - 64);
        long long v21 = *(_OWORD *)(v17 - 48);
        long long v22 = *(_OWORD *)(v17 - 32);
        *(_DWORD *)(v16 - 9) = *(_DWORD *)(v17 - 17);
        *(_OWORD *)(v16 - 24) = v22;
        *(_OWORD *)(v16 - 40) = v21;
        *(_OWORD *)(v16 - 56) = v20;
        if (v16 - 72 != v17 - 80) {
          sub_147D0((void *)v16, *(char **)(v17 - 8), *(char **)v17, (uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 2);
        }
        int v18 = *(_DWORD *)(v17 + 16);
        *(unsigned char *)(v16 + 28) = *(unsigned char *)(v17 + 20);
        *(_DWORD *)(v16 + 24) = v18;
        v16 += 104;
        v17 += 104;
      }
      while (v19 + 104 != v15);
      uint64_t v10 = a1[1];
    }
    uint64_t v35 = sub_483D14(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    uint64_t v23 = v10 + 72;
    uint64_t v24 = a2 + 80;
    do
    {
      uint64_t v26 = v24 - 80;
      *(_OWORD *)(v23 - 72) = *(_OWORD *)(v24 - 80);
      long long v27 = *(_OWORD *)(v24 - 64);
      long long v28 = *(_OWORD *)(v24 - 48);
      long long v29 = *(_OWORD *)(v24 - 32);
      *(_DWORD *)(v23 - 9) = *(_DWORD *)(v24 - 17);
      *(_OWORD *)(v23 - 24) = v29;
      *(_OWORD *)(v23 - 40) = v28;
      *(_OWORD *)(v23 - 56) = v27;
      if (v23 - 72 != v24 - 80) {
        sub_147D0((void *)v23, *(char **)(v24 - 8), *(char **)v24, (uint64_t)(*(void *)v24 - *(void *)(v24 - 8)) >> 2);
      }
      int v25 = *(_DWORD *)(v24 + 16);
      *(unsigned char *)(v23 + 28) = *(unsigned char *)(v24 + 20);
      *(_DWORD *)(v23 + 24) = v25;
      v10 += 104;
      v23 += 104;
      v24 += 104;
    }
    while (v26 + 104 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v10)
  {
    uint64_t v36 = *(void **)(v14 - 32);
    if (v36)
    {
      *(void *)(v14 - 24) = v36;
      operator delete(v36);
    }
    v14 -= 104;
  }
  a1[1] = v10;
}

void sub_5A34C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A34D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5A34D8(uint64_t result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = *(_OWORD **)result;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      uint64_t v10 = *(_OWORD **)(result + 8);
      uint64_t v11 = *(_OWORD **)result;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = v10 - 11;
          sub_4D4B58((uint64_t)(v10 - 10));
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        uint64_t v11 = *(_OWORD **)v7;
      }
      *(void *)(v7 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (a4 > 0x1745D1745D1745DLL) {
      goto LABEL_35;
    }
    unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v14;
    if (v15 > 0x1745D1745D1745DLL) {
LABEL_35:
    }
      sub_2E00();
    uint64_t v16 = 176 * v15;
    uint64_t result = (uint64_t)operator new(176 * v15);
    uint64_t v17 = (_OWORD *)result;
    *(void *)uint64_t v7 = result;
    *(void *)(v7 + 8) = result;
    *(void *)(v7 + 16) = result + v16;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        v17[v18] = v6[v18];
        uint64_t result = sub_4F58AC((uint64_t)&v17[v18 + 1], (uint64_t)&v6[v18 + 1]);
        v18 += 11;
      }
      while (&v6[v18] != a3);
      *(void *)(v7 + 8) = &v17[v18];
      return result;
    }
LABEL_32:
    *(void *)(v7 + 8) = v17;
    return result;
  }
  uint64_t v19 = *(_OWORD **)(result + 8);
  if (0x2E8BA2E8BA2E8BA3 * (v19 - v9) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v17 = *(_OWORD **)result;
      if (v19 == v9) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v17 = *(_OWORD **)result;
      do
      {
        *uint64_t v9 = *v6;
        uint64_t result = sub_52FD00((uint64_t)(v9 + 1), (uint64_t)(v6 + 1));
        v17 += 11;
        v6 += 11;
        v9 += 11;
      }
      while (v6 != a3);
      uint64_t v19 = *(_OWORD **)(v7 + 8);
      if (v19 == v17) {
        goto LABEL_32;
      }
    }
    do
    {
      uint64_t v23 = v19 - 11;
      uint64_t result = sub_4D4B58((uint64_t)(v19 - 10));
      uint64_t v19 = v23;
    }
    while (v23 != v17);
    goto LABEL_32;
  }
  long long v20 = &a2[v19 - v9];
  if (v19 != v9)
  {
    do
    {
      *uint64_t v9 = *v6;
      uint64_t result = sub_52FD00((uint64_t)(v9 + 1), (uint64_t)(v6 + 1));
      v6 += 11;
      v9 += 11;
    }
    while (v6 != v20);
    uint64_t v9 = *(_OWORD **)(v7 + 8);
  }
  long long v21 = v9;
  if (v20 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      v9[v22] = v20[v22];
      uint64_t result = sub_4F58AC((uint64_t)&v9[v22 + 1], (uint64_t)&v20[v22 + 1]);
      v22 += 11;
    }
    while (&v20[v22] != a3);
    long long v21 = &v9[v22];
  }
  *(void *)(v7 + 8) = v21;
  return result;
}

void sub_5A37A0(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 176)
    sub_4D4B58(v2 - 160 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_5A37C8(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 6 * v12;
    uint64_t result = operator new(48 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    uint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  void *v15 = &v9[v14];
  return result;
}

void sub_5A394C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 5) >= a4)
  {
    if (0x86BCA1AF286BCA1BLL * ((a1[1] - v10) >> 5) >= a4)
    {
      sub_5A3BC8((uint64_t)&v26, a2, a3, v10);
      uint64_t v23 = v22;
      uint64_t v24 = a1[1];
      if (v24 != v22)
      {
        do
        {
          v24 -= 608;
          sub_575D30(v9, v24);
        }
        while (v24 != v23);
      }
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((a1[1] - v10) >> 5);
      sub_5A3BC8((uint64_t)&v25, a2, v19, v10);
      uint64_t v20 = a1[1];
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          sub_59AD40(v20 + v21, v19 + v21);
          v21 += 608;
        }
        while (v19 + v21 != a3);
        v20 += v21;
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v11 -= 608;
          sub_575D30(v9, v11);
        }
        while (v11 != v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x6BCA1AF286BCA1) {
      goto LABEL_29;
    }
    unint64_t v13 = 0x86BCA1AF286BCA1BLL * (v8 >> 5);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x35E50D79435E50 ? 0x6BCA1AF286BCA1 : v14;
    if (v15 > 0x6BCA1AF286BCA1) {
LABEL_29:
    }
      sub_2E00();
    uint64_t v16 = 608 * v15;
    uint64_t v17 = (char *)operator new(608 * v15);
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v17;
    a1[2] = (uint64_t)&v17[v16];
    if (a2 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_59AD40((uint64_t)&v17[v18], a2 + v18);
        v18 += 608;
      }
      while (a2 + v18 != a3);
      v17 += v18;
    }
    a1[1] = (uint64_t)v17;
  }
}

void sub_5A3B9C(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 608)
    sub_575D30(v2, v3 - 608 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_5A3BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  do
  {
    *(void *)a4 = *(void *)v5;
    sub_4F39B8(a4 + 8, (std::string *)(v5 + 8));
    *(void *)(a4 + 48) = *(void *)(v5 + 48);
    std::string::operator=((std::string *)(a4 + 56), (const std::string *)(v5 + 56));
    *(unsigned char *)(a4 + 80) = *(unsigned char *)(v5 + 80);
    std::string::operator=((std::string *)(a4 + 88), (const std::string *)(v5 + 88));
    *(unsigned char *)(a4 + 112) = *(unsigned char *)(v5 + 112);
    *(_DWORD *)(a4 + 120) = *(_DWORD *)(v5 + 120);
    sub_52FD00(a4 + 128, v5 + 128);
    sub_52FD00(a4 + 288, v5 + 288);
    sub_52FD00(a4 + 448, v5 + 448);
    a4 += 608;
    v5 += 608;
  }
  while (v5 != a3);
  return a3;
}

void *sub_5A3CA4(void *result, char *a2, char *a3, size_t __sz)
{
  long long v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 4)
  {
    uint64_t v16 = (char **)(result + 1);
    uint64_t v17 = (char *)result[1];
    unint64_t v18 = (v17 - v9) >> 4;
    if (v18 >= __sz)
    {
      uint64_t v23 = *result;
      if (a2 != a3)
      {
        uint64_t v24 = *result;
        do
        {
          *(void *)uint64_t v24 = *(void *)v6;
          *(unsigned char *)(v24 + 8) = v6[8];
          v23 += 16;
          v6 += 16;
          v24 += 16;
        }
        while (v6 != a3);
      }
      int64_t v15 = v23 - (void)v9;
    }
    else
    {
      uint64_t v19 = &a2[16 * v18];
      if (v17 != v9)
      {
        do
        {
          *(void *)uint64_t v9 = *(void *)v6;
          v9[8] = v6[8];
          v6 += 16;
          v9 += 16;
        }
        while (v6 != v19);
        uint64_t v9 = *v16;
      }
      uint64_t v20 = v9;
      if (v19 != a3)
      {
        uint64_t v20 = v9;
        uint64_t v21 = v9;
        do
        {
          long long v22 = *(_OWORD *)v19;
          v19 += 16;
          *(_OWORD *)uint64_t v21 = v22;
          v21 += 16;
          v20 += 16;
        }
        while (v19 != a3);
      }
      int64_t v15 = v20 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_26;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_26:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    uint64_t result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (v6 != a3)
    {
      uint64_t result = memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      uint64_t v14 = &v9[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    int64_t v15 = v14 - v9;
    uint64_t v16 = (char **)(v7 + 1);
  }
  *uint64_t v16 = &v9[v15];
  return result;
}

void sub_5A3E58(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 40);
          if (v13)
          {
            *(void *)(v11 - 32) = v13;
            operator delete(v13);
          }
          v11 -= 48;
        }
        while (v11 != v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_38;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v25;
    if (v26 > 0x555555555555555) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v27 = 48 * v26;
    long long v28 = operator new(48 * v26);
    *a1 = (uint64_t)v28;
    a1[1] = (uint64_t)v28;
    a1[2] = (uint64_t)v28 + v27;
    uint64_t v29 = sub_59AEC8(v9, a2, a3, (uint64_t)v28);
LABEL_31:
    a1[1] = v29;
    return;
  }
  uint64_t v14 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 4) < __sz)
  {
    uint64_t v15 = a2 + 16 * ((v14 - v10) >> 4);
    if (v14 != v10)
    {
      uint64_t v16 = v10 + 8;
      uint64_t v17 = a2 + 16;
      do
      {
        uint64_t v19 = v17 - 16;
        *(_DWORD *)(v16 - 8) = *(_DWORD *)(v17 - 16);
        if (v16 - 8 != v17 - 16) {
          sub_31AF54((void *)v16, *(char **)(v17 - 8), *(char **)v17, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 2));
        }
        uint64_t v18 = *(void *)(v17 + 16);
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v17 + 24);
        *(void *)(v16 + 24) = v18;
        v16 += 48;
        v17 += 48;
      }
      while (v19 + 48 != v15);
      uint64_t v10 = a1[1];
    }
    uint64_t v29 = sub_59AEC8(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    uint64_t v20 = v10 + 8;
    uint64_t v21 = a2 + 16;
    do
    {
      uint64_t v23 = v21 - 16;
      *(_DWORD *)(v20 - 8) = *(_DWORD *)(v21 - 16);
      if (v20 - 8 != v21 - 16) {
        sub_31AF54((void *)v20, *(char **)(v21 - 8), *(char **)v21, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v21 - *(void *)(v21 - 8)) >> 2));
      }
      uint64_t v22 = *(void *)(v21 + 16);
      *(_DWORD *)(v20 + 32) = *(_DWORD *)(v21 + 24);
      *(void *)(v20 + 24) = v22;
      v10 += 48;
      v20 += 48;
      v21 += 48;
    }
    while (v23 + 48 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v10)
  {
    unint64_t v30 = *(void **)(v14 - 40);
    if (v30)
    {
      *(void *)(v14 - 32) = v30;
      operator delete(v30);
    }
    v14 -= 48;
  }
  a1[1] = v10;
}

void sub_5A40F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A4100(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5A4108(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      if (v8 != a2) {
        sub_31AF54(v8 + 4, (char *)a2[4], (char *)a2[5], 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 2));
      }
      uint64_t v9 = a2[7];
      *((_DWORD *)v8 + 16) = *((_DWORD *)a2 + 16);
      v8[7] = v9;
      uint64_t v10 = (uint64_t *)*v8;
      sub_5A4288(a1, (unsigned __int8 *)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      unint64_t v12 = (void *)v8[4];
      if (v12)
      {
        v8[5] = (uint64_t)v12;
        operator delete(v12);
      }
      operator delete(v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_5A43B0((uint64_t)a1, (int *)a2 + 4, (uint64_t)&v13);
      sub_5A4288(a1, v13);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5A4238(void *a1)
{
  __cxa_begin_catch(a1);
  sub_591F9C(v1, v2);
  __cxa_rethrow();
}

void sub_5A4254(_Unwind_Exception *a1)
{
}

void sub_5A4268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v11 = __p;
  long long __p = 0;
  if (v11)
  {
    sub_20A9CAC((uint64_t)&__p, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x5A425CLL);
}

unsigned __int8 *sub_5A4288(void *a1, unsigned __int8 *a2)
{
  uint64_t v5 = (int *)(a2 + 16);
  unint64_t v4 = a2[16];
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_13F0C((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v6;
  *uint64_t v6 = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void *sub_5A43B0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t result = operator new(0x48uLL);
  int8x8_t v7 = result;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t result = 0;
  result[1] = 0;
  int v8 = *a2;
  *((_DWORD *)result + 4) = *a2;
  int v9 = a2[2];
  result[4] = 0;
  *((_DWORD *)result + 6) = v9;
  result[5] = 0;
  result[6] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 2);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 3);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v12);
    v7[4] = v13;
    v7[5] = v13;
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    v7[6] = v14;
    uint64_t result = memcpy(v13, v11, v12);
    v7[5] = v14;
  }
  v7[7] = *((void *)a2 + 5);
  *((_DWORD *)v7 + 16) = a2[12];
  *(unsigned char *)(a3 + 16) = 1;
  v7[1] = v8;
  return result;
}

void sub_5A44A8(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }
  sub_59B5F8(v1);
  _Unwind_Resume(a1);
}

void sub_5A44CC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *(void *)(v8 + 16) = a2[2];
      *(_DWORD *)(v8 + 24) = *((_DWORD *)a2 + 6);
      uint64_t v9 = *(void *)v8;
      sub_5A4600(a1, (uint64_t *)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v11 = *(void *)v8;
      operator delete((void *)v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x20uLL);
      *(void *)unint64_t v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 1) = *((void *)v10 + 2);
      sub_5A4600(a1, (uint64_t *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5A45B8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_5A45D8(_Unwind_Exception *a1)
{
}

void sub_5A45EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_5A4600(void *a1, uint64_t *a2)
{
  uint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  uint64_t v6 = sub_5A4728((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *(v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  *uint64_t v6 = (uint64_t)a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void *sub_5A4728(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        sub_5A49B4(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      uint64_t v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  uint64_t v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    uint64_t v25 = (void *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_5A49B4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_188D718();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && v18[2] == v20[2]);
              *float v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint8x8_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          uint64_t v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            uint64_t v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14 && v12[2] == v14[2]);
              *float v7 = v14;
              uint64_t v16 = 8 * v13;
              void *v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_5A4B88(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *(void *)(v8 + 16) = a2[2];
      *(_DWORD *)(v8 + 24) = *((_DWORD *)a2 + 6);
      uint64_t v9 = *(void *)v8;
      sub_5A4600(a1, (uint64_t *)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v11 = *(void *)v8;
      operator delete((void *)v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x20uLL);
      *(void *)unint64_t v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 1) = *((void *)v10 + 2);
      sub_5A4600(a1, (uint64_t *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5A4C74(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_5A4C94(_Unwind_Exception *a1)
{
}

void sub_5A4CA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_5A4CBC(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(std::string **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *(void *)a1) >> 4) >= a4)
  {
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4) >= a4)
    {
      sub_5A4F38((int)&v26, __str, a3, v10);
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)(a1 + 8);
      if (v24 != v22)
      {
        do
        {
          v24 -= 176;
          sub_57523C(v9, v24);
        }
        while (v24 != v23);
      }
      *(void *)(a1 + 8) = v23;
    }
    else
    {
      unint64_t v19 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 4));
      sub_5A4F38((int)&v25, __str, v19, v10);
      uint64_t v20 = *(void *)(a1 + 8);
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          sub_598A38(v20 + v21, (uint64_t)v19 + v21);
          v21 += 176;
        }
        while ((std::string *)((char *)v19 + v21) != a3);
        v20 += v21;
      }
      *(void *)(a1 + 8) = v20;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = *(std::string **)a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 176;
          sub_57523C(v9, v11);
        }
        while ((std::string *)v11 != v10);
        uint64_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x1745D1745D1745DLL) {
      goto LABEL_29;
    }
    unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v14;
    if (v15 > 0x1745D1745D1745DLL) {
LABEL_29:
    }
      sub_2E00();
    uint64_t v16 = 176 * v15;
    unint64_t v17 = (char *)operator new(176 * v15);
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = &v17[v16];
    if (__str != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_598A38((uint64_t)&v17[v18], (uint64_t)__str + v18);
        v18 += 176;
      }
      while ((std::string *)((char *)__str + v18) != a3);
      v17 += v18;
    }
    *(void *)(a1 + 8) = v17;
  }
}

void sub_5A4F0C(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 176)
    sub_57523C(v2, v3 - 176 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

std::string *sub_5A4F38(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this[2].__r_.__value_.__l.__size_ = v5[2].__r_.__value_.__l.__size_;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v5[2].__r_.__value_.__r.__words[2];
    std::string::operator=(this + 3, v5 + 3);
    std::string::operator=(this + 4, v5 + 4);
    LODWORD(this[5].__r_.__value_.__l.__data_) = v5[5].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 128), (std::string *)((char *)v5 + 128));
    if (this != v5) {
      sub_457964(&this[6].__r_.__value_.__l.__size_, (char *)v5[6].__r_.__value_.__l.__size_, (char *)v5[6].__r_.__value_.__r.__words[2], (uint64_t)(v5[6].__r_.__value_.__r.__words[2] - v5[6].__r_.__value_.__l.__size_) >> 4);
    }
    this = (std::string *)((char *)this + 176);
    uint64_t v5 = (std::string *)((char *)v5 + 176);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_5A500C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = *(char **)result;
  if (0x7E3F1F8FC7E3F1F9 * ((v8 - *(void *)result) >> 4) >= a4)
  {
    uint64_t v20 = *(unsigned char **)(result + 8);
    unint64_t v21 = 0x7E3F1F8FC7E3F1F9 * ((v20 - v9) >> 4);
    if (v21 >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = a2 + v26;
          int v28 = &v9[v26];
          *(_DWORD *)int v28 = *(_DWORD *)(a2 + v26);
          *((_DWORD *)v28 + 2) = *(_DWORD *)(a2 + v26 + 8);
          uint64_t result = (uint64_t)&v9[v26 + 16];
          if (*(unsigned char *)(a2 + v26 + 1136))
          {
            uint64_t v29 = v27 + 16;
            if (v9[v26 + 1136])
            {
              uint64_t result = sub_4C9334(result, v29);
            }
            else
            {
              uint64_t result = sub_4BE9F4(result, v29);
              v28[1136] = 1;
            }
          }
          else if (v9[v26 + 1136])
          {
            uint64_t result = sub_3A6B94(result);
            v28[1136] = 0;
          }
          uint64_t v30 = (uint64_t)&v9[v26 + 1144];
          long long v31 = *(_OWORD *)(v27 + 1144);
          *(_DWORD *)(v30 + 15) = *(_DWORD *)(v27 + 1159);
          *(_OWORD *)uint64_t v30 = v31;
          v26 += 1168;
        }
        while (v27 + 1168 != a3);
        uint64_t v20 = *(unsigned char **)(v7 + 8);
        v9 += v26;
      }
      while (v20 != v9)
      {
        if (*(v20 - 32))
        {
          uint64_t result = sub_3A6B94((uint64_t)(v20 - 1152));
          *(v20 - 32) = 0;
        }
        v20 -= 1168;
      }
      *(void *)(v7 + 8) = v9;
    }
    else
    {
      uint64_t v22 = a2 + 16 * ((v20 - v9) >> 4);
      if (v20 != v9)
      {
        uint64_t v23 = a2 + 16;
        do
        {
          uint64_t v24 = v23 - 16;
          *(_DWORD *)uint64_t v9 = *(_DWORD *)(v23 - 16);
          *((_DWORD *)v9 + 2) = *(_DWORD *)(v23 - 8);
          uint64_t result = (uint64_t)(v9 + 16);
          if (*(unsigned char *)(v23 + 1120))
          {
            if (v9[1136])
            {
              uint64_t result = sub_4C9334(result, v23);
            }
            else
            {
              uint64_t result = sub_4BE9F4(result, v23);
              v9[1136] = 1;
            }
          }
          else if (v9[1136])
          {
            uint64_t result = sub_3A6B94(result);
            v9[1136] = 0;
          }
          long long v25 = *(_OWORD *)(v23 + 1128);
          *(_DWORD *)(v9 + 1159) = *(_DWORD *)(v23 + 1143);
          *(_OWORD *)(v9 + 1144) = v25;
          v9 += 1168;
          v23 += 1168;
        }
        while (v24 + 1168 != v22);
        uint64_t v9 = *(char **)(v7 + 8);
      }
      unint64_t v32 = v9;
      if (v22 != a3)
      {
        uint64_t result = (uint64_t)(v9 + 16);
        uint64_t v33 = a2 + 1168 * v21 + 16;
        unint64_t v32 = v9;
        do
        {
          uint64_t v34 = v33 - 16;
          *(_DWORD *)(result - 16) = *(_DWORD *)(v33 - 16);
          uint64_t v35 = result - 16;
          *(_DWORD *)(result - 8) = *(_DWORD *)(v33 - 8);
          int v36 = *(unsigned __int8 *)(v33 + 1120);
          *(unsigned char *)(result + 1120) = v36;
          if (v36) {
            uint64_t result = sub_4BE9F4(result, v33);
          }
          long long v37 = *(_OWORD *)(v33 + 1128);
          *(_DWORD *)(v35 + 1159) = *(_DWORD *)(v33 + 1143);
          *(_OWORD *)(v35 + 1144) = v37;
          v32 += 1168;
          result += 1168;
          v33 += 1168;
        }
        while (v34 + 1168 != a3);
      }
      *(void *)(v7 + 8) = v32;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = *(char **)(result + 8);
      uint64_t v11 = *(char **)result;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 32))
          {
            sub_3A6B94((uint64_t)(v10 - 1152));
            *(v10 - 32) = 0;
          }
          v10 -= 1168;
        }
        while (v10 != v9);
        uint64_t v11 = *(char **)v7;
      }
      *(void *)(v7 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (a4 > 0x381C0E070381C0) {
      goto LABEL_54;
    }
    unint64_t v12 = 0x7E3F1F8FC7E3F1F9 * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x1C0E070381C0E0 ? 0x381C0E070381C0 : v13;
    if (v14 > 0x381C0E070381C0) {
LABEL_54:
    }
      sub_2E00();
    uint64_t v15 = 1168 * v14;
    uint64_t result = (uint64_t)operator new(1168 * v14);
    uint64_t v16 = result;
    *(void *)uint64_t v7 = result;
    *(void *)(v7 + 8) = result;
    *(void *)(v7 + 16) = result + v15;
    if (a2 != a3)
    {
      uint64_t v17 = a2 + 16;
      do
      {
        uint64_t v18 = v17 - 16;
        *(_DWORD *)uint64_t v16 = *(_DWORD *)(v17 - 16);
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(v17 - 8);
        int v19 = *(unsigned __int8 *)(v17 + 1120);
        *(unsigned char *)(v16 + 1136) = v19;
        if (v19) {
          uint64_t result = sub_4BE9F4(v16 + 16, v17);
        }
        *(_OWORD *)(v16 + 1144) = *(_OWORD *)(v17 + 1128);
        *(_DWORD *)(v16 + 1159) = *(_DWORD *)(v17 + 1143);
        v16 += 1168;
        v17 += 1168;
      }
      while (v18 + 1168 != a3);
    }
    *(void *)(v7 + 8) = v16;
  }
  return result;
}

uint64_t sub_5A53C4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  if (a1 != a2) {
    sub_5A5748(a1 + 168, *(void *)(a2 + 168), *(void *)(a2 + 176), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 5));
  }
  sub_52FD00(a1 + 192, a2 + 192);
  sub_4F39B8(a1 + 352, (std::string *)(a2 + 352));
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  if (a1 != a2) {
    sub_69208(a1 + 464, *(std::string **)(a2 + 464), *(std::string **)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3));
  }
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  return a1;
}

uint64_t sub_5A54A0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((v8 - *a1) >> 4) >= a4)
  {
    uint64_t result = a1[1];
    if (0xEF7BDEF7BDEF7BDFLL * ((result - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A53C4(v9, v6);
          v6 += 496;
          v9 += 496;
          v23 += 496;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_4F2FF8(result - 496);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 16 * ((result - v9) >> 4);
      if (result != v9)
      {
        uint64_t v20 = 16 * ((result - v9) >> 4);
        do
        {
          uint64_t result = sub_5A53C4(v9, v6);
          v6 += 496;
          v9 += 496;
          v20 -= 496;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_598F14(v9 + v22, v19 + v22);
          v22 += 496;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4F2FF8(v10 - 496);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x84210842108421) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xEF7BDEF7BDEF7BDFLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x42108421084210 ? 0x84210842108421 : v13;
    if (v14 > 0x84210842108421) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 496 * v14;
    uint64_t result = (uint64_t)operator new(496 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_598F14(v17 + v18, v6 + v18);
        v18 += 496;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_5A5748(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (0x8F5C28F5C28F5C29 * ((v8 - *(void *)a1) >> 5) >= a4)
  {
    uint64_t v15 = *(std::string **)(a1 + 8);
    if (0x8F5C28F5C28F5C29 * (((char *)v15 - (char *)v9) >> 5) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v18 = *(void ***)a1;
      }
      else
      {
        uint64_t v18 = *(void ***)a1;
        do
        {
          sub_5A5A64(v9, (std::string *)v6);
          if ((std::string *)v6 != v9) {
            sub_69208((uint64_t)&v9[32].__r_.__value_.__l.__size_, *(std::string **)(v6 + 776), *(std::string **)(v6 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 784) - *(void *)(v6 + 776)) >> 3));
          }
          v6 += 800;
          uint64_t v9 = (std::string *)((char *)v9 + 800);
          v18 += 100;
        }
        while (v6 != a3);
      }
      sub_4F3104(a1, v18);
    }
    else
    {
      uint64_t v16 = a2 + 32 * (((char *)v15 - (char *)v9) >> 5);
      if (v15 != v9)
      {
        uint64_t v17 = 32 * (((char *)v15 - (char *)v9) >> 5);
        do
        {
          sub_5A5A64(v9, (std::string *)v6);
          if ((std::string *)v6 != v9) {
            sub_69208((uint64_t)&v9[32].__r_.__value_.__l.__size_, *(std::string **)(v6 + 776), *(std::string **)(v6 + 784), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 784) - *(void *)(v6 + 776)) >> 3));
          }
          v6 += 800;
          uint64_t v9 = (std::string *)((char *)v9 + 800);
          v17 -= 800;
        }
        while (v17);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v21 = v9;
      uint64_t v19 = (char *)v9;
      if (v16 != a3)
      {
        uint64_t v19 = (char *)v9;
        do
        {
          sub_4F74A4(v19, v16);
          v16 += 800;
          uint64_t v19 = &v21[33].__r_.__value_.__s.__data_[8];
          uint64_t v21 = (std::string *)((char *)v21 + 800);
        }
        while (v16 != a3);
      }
      *(void *)(a1 + 8) = v19;
    }
  }
  else
  {
    if (v9)
    {
      sub_4F3104(a1, *(void ***)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x51EB851EB851EBLL) {
      goto LABEL_36;
    }
    unint64_t v10 = 0x8F5C28F5C28F5C29 * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x28F5C28F5C28F5 ? 0x51EB851EB851EBLL : v11;
    if (v12 > 0x51EB851EB851EBLL) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v13 = 800 * v12;
    unint64_t v14 = (char *)operator new(800 * v12);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v14[v13];
    uint64_t v20 = v14;
    if (v6 == a3)
    {
      *(void *)(a1 + 8) = v14;
    }
    else
    {
      do
      {
        sub_4F74A4(v14, v6);
        v6 += 800;
        unint64_t v14 = v20 + 800;
        v20 += 800;
      }
      while (v6 != a3);
      *(void *)(a1 + 8) = v14;
    }
  }
}

void sub_5A5A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_5991A4((uint64_t)&a9);
  *(void *)(v9 + 8) = v10;
  _Unwind_Resume(a1);
}

std::string *sub_5A5A64(std::string *__dst, std::string *__str)
{
  if (__dst == __str) {
    return __dst;
  }
  uint64_t data_low = LODWORD(__dst[32].__r_.__value_.__l.__data_);
  int data = (int)__str[32].__r_.__value_.__l.__data_;
  if (data_low == data)
  {
    if (data_low) {
      sub_5A5B78(data_low, (uint64_t)__str, (uint64_t)__dst);
    }
    else {
      std::string::operator=(__dst, __str);
    }
    return __dst;
  }
  if (data_low == 1)
  {
    sub_4F4A98((uint64_t)__dst);
  }
  else
  {
    if (data_low) {
      goto LABEL_13;
    }
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst->__r_.__value_.__l.__data_);
    }
  }
  int data = (int)__str[32].__r_.__value_.__l.__data_;
LABEL_13:
  if (data == 2)
  {
    __dst->__r_.__value_.__r.__words[0] = __str->__r_.__value_.__r.__words[0];
    LODWORD(__dst[32].__r_.__value_.__l.__data_) = __str[32].__r_.__value_.__l.__data_;
    return __dst;
  }
  else
  {
    if (data == 1)
    {
      sub_4F56D0((uint64_t)__dst, (uint64_t)__str);
    }
    else if (!data)
    {
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_4200(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v7 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
        __dst->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v7;
      }
    }
    LODWORD(__dst[32].__r_.__value_.__l.__data_) = __str[32].__r_.__value_.__l.__data_;
    return __dst;
  }
}

uint64_t sub_5A5B78(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result == 2)
  {
    *(void *)a3 = *(void *)a2;
  }
  else if (result == 1)
  {
    sub_52FD00(a3, a2);
    sub_52FD00(a3 + 160, a2 + 160);
    sub_4F39B8(a3 + 320, (std::string *)(a2 + 320));
    *(void *)(a3 + 360) = *(void *)(a2 + 360);
    std::string::operator=((std::string *)(a3 + 368), (const std::string *)(a2 + 368));
    *(unsigned char *)(a3 + 392) = *(unsigned char *)(a2 + 392);
    std::string::operator=((std::string *)(a3 + 400), (const std::string *)(a2 + 400));
    *(unsigned char *)(a3 + 424) = *(unsigned char *)(a2 + 424);
    sub_52FD00(a3 + 432, a2 + 432);
    uint64_t result = sub_52FD00(a3 + 592, a2 + 592);
    *(_OWORD *)(a3 + 752) = *(_OWORD *)(a2 + 752);
  }
  return result;
}

void *sub_5A5C34(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 5 * v12;
    uint64_t result = operator new(40 * v12);
    uint64_t v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    uint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  std::string *v15 = &v9[v14];
  return result;
}

uint64_t sub_5A5DB8(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xF83E0F83E0F83E1 * ((v8 - *a1) >> 5) >= __sz)
  {
    uint64_t result = a1[1];
    if (0xF83E0F83E0F83E1 * ((result - v9) >> 5) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A6060(v9, v6);
          v6 += 1056;
          v9 += 1056;
          v23 += 1056;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_55BA78(result - 1056);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_5A6060(v9, v6);
          v6 += 1056;
          v9 += 1056;
          v20 -= 1056;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_576F5C(v9 + v22, v19 + v22);
          v22 += 1056;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_55BA78(v10 - 1056);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x3E0F83E0F83E0FLL) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xF83E0F83E0F83E1 * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= __sz) {
      uint64_t v13 = __sz;
    }
    unint64_t v14 = v12 >= 0x1F07C1F07C1F07 ? 0x3E0F83E0F83E0FLL : v13;
    if (v14 > 0x3E0F83E0F83E0FLL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 1056 * v14;
    uint64_t result = (uint64_t)operator new(1056 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_576F5C(v17 + v18, v6 + v18);
        v18 += 1056;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_5A6060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const std::string *)(a2 + 32);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = (std::string *)(a1 + 32);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v5, v4);
  if (a1 != a2) {
    sub_31AF54((void *)(a1 + 56), *(char **)(a2 + 56), *(char **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
  }
  sub_52FD00(a1 + 80, a2 + 80);
  sub_52FD00(a1 + 240, a2 + 240);
  sub_52FD00(a1 + 400, a2 + 400);
  sub_52FD00(a1 + 560, a2 + 560);
  long long v7 = *(_OWORD *)(a2 + 736);
  long long v6 = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 736) = v7;
  *(_OWORD *)(a1 + 752) = v6;
  long long v9 = *(_OWORD *)(a2 + 784);
  long long v8 = *(_OWORD *)(a2 + 800);
  long long v10 = *(_OWORD *)(a2 + 768);
  *(_DWORD *)(a1 + 816) = *(_DWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 784) = v9;
  *(_OWORD *)(a1 + 800) = v8;
  *(_OWORD *)(a1 + 768) = v10;
  sub_4F39B8(a1 + 824, (std::string *)(a2 + 824));
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  std::string::operator=((std::string *)(a1 + 872), (const std::string *)(a2 + 872));
  *(unsigned char *)(a1 + 896) = *(unsigned char *)(a2 + 896);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  *(unsigned char *)(a1 + 928) = *(unsigned char *)(a2 + 928);
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  int v11 = *(unsigned __int8 *)(a1 + 988);
  if (*(unsigned char *)(a2 + 988))
  {
    uint64_t v12 = *(void *)(a2 + 976);
    *(_DWORD *)(a1 + 984) = *(_DWORD *)(a2 + 984);
    *(void *)(a1 + 976) = v12;
    if (v11) {
      goto LABEL_7;
    }
    char v13 = 1;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 988))
  {
    char v13 = 0;
LABEL_6:
    *(unsigned char *)(a1 + 988) = v13;
  }
LABEL_7:
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  if (a1 != a2) {
    sub_5A6214((uint64_t *)(a1 + 1000), *(void *)(a2 + 1000), *(void *)(a2 + 1008), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 1008) - *(void *)(a2 + 1000)) >> 3));
  }
  int v14 = *(_DWORD *)(a2 + 1024);
  *(unsigned char *)(a1 + 1028) = *(unsigned char *)(a2 + 1028);
  *(_DWORD *)(a1 + 1024) = v14;
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  return a1;
}

uint64_t sub_5A6214(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v22 = v9;
      }
      else
      {
        uint64_t v22 = v9;
        do
        {
          sub_52FD00(v9, v6);
          *(void *)(v9 + 160) = *(void *)(v6 + 160);
          v22 += 168;
          v6 += 168;
          v9 += 168;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v22)
        uint64_t result = sub_4D4B58(result - 168);
      a1[1] = v22;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        do
        {
          uint64_t result = sub_52FD00(v9, v6);
          *(void *)(v9 + 160) = *(void *)(v6 + 160);
          v6 += 168;
          v9 += 168;
        }
        while (v6 != v19);
        uint64_t v9 = a1[1];
      }
      uint64_t v20 = v9;
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t result = sub_4F58AC(v9 + v21, v19 + v21);
          *(void *)(result + 160) = *(void *)(v19 + v21 + 160);
          v21 += 168;
        }
        while (v19 + v21 != a3);
        uint64_t v20 = v9 + v21;
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      int v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4D4B58(v10 - 168);
        while (v10 != v9);
        int v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x186186186186186) {
      goto LABEL_36;
    }
    unint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v13;
    if (v14 > 0x186186186186186) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v15 = 168 * v14;
    uint64_t result = (uint64_t)operator new(168 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_4F58AC(v17 + v18, v6 + v18);
        *(void *)(result + 160) = *(void *)(v6 + v18 + 160);
        v18 += 168;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_5A64DC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xBAA6550FFBAA6551 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      int v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_574D4C(v10 - 7560);
        while (v10 != v9);
        int v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x8AB355E008AB3) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xBAA6550FFBAA6551 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x4559AAF004559 ? 0x8AB355E008AB3 : v13;
    if (v14 > 0x8AB355E008AB3) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 7560 * v14;
    uint64_t result = (uint64_t)operator new(7560 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_5A67C0(v17 + v18, v6 + v18);
        v18 += 7560;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
    return result;
  }
  uint64_t result = a1[1];
  if (0xBAA6550FFBAA6551 * ((result - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v23 = v9;
      if (result == v9)
      {
LABEL_36:
        a1[1] = v23;
        return result;
      }
    }
    else
    {
      uint64_t v23 = v9;
      do
      {
        sub_590DEC(v9, v6);
        v6 += 7560;
        v9 += 7560;
        v23 += 7560;
      }
      while (v6 != a3);
      uint64_t result = a1[1];
      if (result == v23) {
        goto LABEL_36;
      }
    }
    do
      uint64_t result = sub_574D4C(result - 7560);
    while (result != v23);
    goto LABEL_36;
  }
  uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
  if (result != v9)
  {
    uint64_t v20 = 8 * ((result - v9) >> 3);
    do
    {
      uint64_t result = sub_590DEC(v9, v6);
      v6 += 7560;
      v9 += 7560;
      v20 -= 7560;
    }
    while (v20);
    uint64_t v9 = a1[1];
  }
  uint64_t v21 = v9;
  if (v19 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t result = sub_5A67C0(v9 + v22, v19 + v22);
      v22 += 7560;
    }
    while (v19 + v22 != a3);
    uint64_t v21 = v9 + v22;
  }
  a1[1] = v21;
  return result;
}

uint64_t sub_5A67C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_5A6F28(a1, *(void *)a2, *(void *)(a2 + 8), 0xFF55E3181697D6CDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_59888C(a1 + 24, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v5 = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 96) = v9;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_5A70C4(a1 + 152, *(void *)(a2 + 152), *(void *)(a2 + 160), 0x7E3F1F8FC7E3F1F9 * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 4));
  uint64_t v11 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v11;
  sub_4F58AC(a1 + 192, a2 + 192);
  sub_4F58AC(a1 + 352, a2 + 352);
  sub_4F58AC(a1 + 512, a2 + 512);
  sub_4F58AC(a1 + 672, a2 + 672);
  sub_4F58AC(a1 + 832, a2 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_8A6F8((char *)(a1 + 992), *(void *)(a2 + 992), *(void *)(a2 + 1000), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1000) - *(void *)(a2 + 992)) >> 3));
  sub_4F58AC(a1 + 1016, a2 + 1016);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  sub_4F57A0(a1 + 1184, a2 + 1184);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  sub_598C04(a1 + 1304, (uint64_t *)(a2 + 1304));
  sub_599260(a1 + 2392, a2 + 2392);
  *(void *)(a1 + 7208) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  unint64_t v12 = *(unsigned char **)(a2 + 7192);
  uint64_t v13 = *(unsigned char **)(a2 + 7200);
  int64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v14 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)(a1 + 7192) = v15;
    *(void *)(a1 + 7200) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 7208) = v16;
    memcpy(v15, v12, v14 - 4);
    *(void *)(a1 + 7200) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v17;
  if (*(char *)(a2 + 7255) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7232), *(void **)(a2 + 7232), *(void *)(a2 + 7240));
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 7232);
    *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
    *(_OWORD *)(a1 + 7232) = v18;
  }
  if (*(char *)(a2 + 7279) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7256), *(void **)(a2 + 7256), *(void *)(a2 + 7264));
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 7256);
    *(void *)(a1 + 7272) = *(void *)(a2 + 7272);
    *(_OWORD *)(a1 + 7256) = v19;
  }
  sub_4F57A0(a1 + 7280, a2 + 7280);
  *(void *)(a1 + 7408) = 0;
  *(_OWORD *)(a1 + 7392) = 0u;
  sub_5A726C(a1 + 7392, *(void *)(a2 + 7392), *(void *)(a2 + 7400), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 7400) - *(void *)(a2 + 7392)) >> 5));
  *(void *)(a1 + 7432) = 0;
  *(_OWORD *)(a1 + 7416) = 0u;
  sub_4BFFA4((unsigned char *)(a1 + 7416), *(void *)(a2 + 7416), *(void *)(a2 + 7424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7424) - *(void *)(a2 + 7416)) >> 4));
  if (*(char *)(a2 + 7463) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7440), *(void **)(a2 + 7440), *(void *)(a2 + 7448));
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 7440);
    *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
    *(_OWORD *)(a1 + 7440) = v20;
  }
  if (*(char *)(a2 + 7487) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7464), *(void **)(a2 + 7464), *(void *)(a2 + 7472));
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 7464);
    *(void *)(a1 + 7480) = *(void *)(a2 + 7480);
    *(_OWORD *)(a1 + 7464) = v21;
  }
  if (*(char *)(a2 + 7511) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7488), *(void **)(a2 + 7488), *(void *)(a2 + 7496));
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 7488);
    *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
    *(_OWORD *)(a1 + 7488) = v22;
  }
  *(void *)(a1 + 7528) = 0;
  *(_OWORD *)(a1 + 7512) = 0u;
  uint64_t v23 = *(unsigned char **)(a2 + 7512);
  uint64_t v24 = *(unsigned char **)(a2 + 7520);
  int64_t v25 = v24 - v23;
  if (v24 != v23)
  {
    if (v25 < 0) {
      sub_2E00();
    }
    uint64_t v26 = (char *)operator new(v24 - v23);
    *(void *)(a1 + 7512) = v26;
    *(void *)(a1 + 7520) = v26;
    uint64_t v27 = &v26[4 * (v25 >> 2)];
    *(void *)(a1 + 7528) = v27;
    memcpy(v26, v23, v25);
    *(void *)(a1 + 7520) = v27;
  }
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  sub_510340(a1 + 7536, *(void *)(a2 + 7536), *(void *)(a2 + 7544), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7544) - *(void *)(a2 + 7536)) >> 5));
  return a1;
}

void sub_5A6CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23)
{
  if (a21[232] < 0)
  {
    operator delete(*v25);
    if ((a21[208] & 0x80000000) == 0)
    {
LABEL_4:
      sub_28F14C(a9);
      sub_574598(a11);
      sub_4D9814(a13);
      if (a21[24] < 0)
      {
        operator delete(*a10);
        if ((*a21 & 0x80000000) == 0)
        {
LABEL_6:
          uint64_t v29 = *a14;
          if (!*a14) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      else if ((*a21 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*a12);
      uint64_t v29 = *a14;
      if (!*a14)
      {
LABEL_8:
        sub_575104(a15);
        sub_4F2BD0(a16);
        sub_4D9814(a17);
        sub_4D4B58(a18);
        sub_1A668(a19);
        sub_4D4B58(a20);
        sub_4D4B58(a22);
        sub_4D4B58(a23);
        sub_4D4B58(*(void *)(v27 - 104));
        sub_4D4B58(*(void *)(v27 - 96));
        sub_5915D8(v24);
        sub_591648(*(void ***)(v27 - 88));
        sub_5916B4((void **)v23);
        _Unwind_Resume(a1);
      }
LABEL_7:
      *(void *)(v23 + 7200) = v29;
      operator delete(v29);
      goto LABEL_8;
    }
  }
  else if ((a21[208] & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*v26);
  goto LABEL_4;
}

void sub_5A6F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (!*a14) {
    JUMPOUT(0x5A6E30);
  }
  JUMPOUT(0x5A6E28);
}

uint64_t sub_5A6F28(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x550E73F4B414ALL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(12328 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 12328 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_592BE8(v8 + v9, a2 + v9);
        v9 += 12328;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5A6FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5A7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 12328)
    sub_5752F4(v10 - 12328 + v11);
  *(void *)(v9 + 8) = v10;
  sub_5A7038(&a9);
  _Unwind_Resume(a1);
}

void ***sub_5A7038(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_5752F4(v4 - 12328);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_5A70C4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x381C0E070381C1) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1168 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 1168 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = a2 + 16;
      do
      {
        uint64_t v10 = v9 - 16;
        *(_DWORD *)uint64_t v8 = *(_DWORD *)(v9 - 16);
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 8);
        int v11 = *(unsigned __int8 *)(v9 + 1120);
        *(unsigned char *)(v8 + 1136) = v11;
        if (v11) {
          uint64_t result = sub_4BE9F4(v8 + 16, v9);
        }
        *(_OWORD *)(v8 + 1144) = *(_OWORD *)(v9 + 1128);
        *(_DWORD *)(v8 + 1159) = *(_DWORD *)(v9 + 1143);
        v8 += 1168;
        v9 += 1168;
      }
      while (v10 + 1168 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5A71C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_5A71D8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 32))
          {
            sub_3A6B94((uint64_t)(v4 - 1152));
            *(v4 - 32) = 0;
          }
          v4 -= 1168;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_5A726C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x3E0F83E0F83E10) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1056 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 1056 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_576F5C(v8 + v9, a2 + v9);
        v9 += 1056;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_5A7330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_5A7344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1056)
    sub_55BA78(v10 - 1056 + v11);
  *(void *)(v9 + 8) = v10;
  sub_5A7374(&a9);
  _Unwind_Resume(a1);
}

void ***sub_5A7374(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_55BA78(v4 - 1056);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_5A73FC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 5) >= 0x1D41D41D41D41DLL) {
    unint64_t v6 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(1120 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[1120 * v3];
  uint64_t v15 = &v7[1120 * v6];
  sub_4BE9F4(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 1120;
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 1120;
      uint64_t v8 = sub_4C09FC(v8 - 1120, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 1120;
        sub_3A6B94((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 1120;
}

void sub_5A757C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5A7590(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1120;
    sub_3A6B94(i - 1120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_5A7608@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 24);
}

uint64_t sub_5A7614()
{
  return v0;
}

double sub_5A764C()
{
  byte_2578957 = 1;
  word_2578940 = 65;
  byte_257896F = 1;
  word_2578958 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2578A00 = 0u;
  *(_OWORD *)&qword_2578A10 = 0u;
  dword_2578A20 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2578A00, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2578A00, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2578A00, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2578A00, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2578987 = 8;
  strcpy((char *)&qword_2578970, "any_mode");
  byte_257899F = 7;
  strcpy((char *)&dword_2578988, "cycling");
  byte_25789B7 = 7;
  strcpy((char *)&dword_25789A0, "driving");
  byte_25789CF = 7;
  strcpy((char *)&dword_25789B8, "walking");
  qword_25789D8 = 0;
  qword_25789E0 = 0;
  qword_25789D0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25789D0 = (uint64_t)v0;
  qword_25789D8 = (uint64_t)(v0 + 9);
  qword_25789E0 = (uint64_t)(v0 + 9);
  qword_25789E8 = 0;
  qword_25789F0 = 0;
  unk_25789F8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25789F0 = (uint64_t)(v1 + 9);
  unk_25789F8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25789E8 = (uint64_t)v1;
  return result;
}

void sub_5A7914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2578A10) {
    sub_20A9CEC((void **)qword_2578A10);
  }
  long long v37 = (void *)xmmword_2578A00;
  *(void *)&xmmword_2578A00 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

__n128 sub_5A79B4(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a2[1539];
  int v5 = v4 & 0x3F;
  if (v4 > 0x3F || v5 != 0)
  {
    int v11 = 0;
    unint64_t v12 = (void *)a2[1538];
    char v13 = &v12[v4 >> 6];
    while (((*v12 >> v11) & 1) == 0)
    {
      v12 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
      if (v11 == v5 && v12 == v13) {
        return result;
      }
    }
    sub_6B46BC(a1, a2, a3, 1, a1 + 64);
    uint64_t v16 = *(void *)(a1 + 144);
    uint64_t v15 = (void *)(a1 + 144);
    unint64_t v17 = v15[3];
    if (v16 != v15[1] && v17 != -1)
    {
      *(_DWORD *)(a4 + 24) = 0;
      *(void *)(a4 + 8) = *(void *)a4;
      *(void *)(a4 + 48) = *(void *)(a4 + 40);
      *(_DWORD *)(a4 + 64) = 0;
      *(void *)&long long v19 = -1;
      *((void *)&v19 + 1) = -1;
      *(_OWORD *)(a4 + 72) = v19;
      *(_OWORD *)(a4 + 88) = v19;
      *(_OWORD *)(a4 + 104) = v19;
      *(void *)(a4 + 120) = -1;
      *(_DWORD *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = -1;
      *(_DWORD *)(a4 + 144) = 0;
      *(_OWORD *)(a4 + 152) = xmmword_20E2060;
      *(_WORD *)(a4 + 168) = 0;
      *(unsigned char *)(a4 + 170) = 0;
      *(void *)(a4 + 176) = 0;
      *(unsigned char *)(a4 + 188) = 0;
      *(unsigned char *)(a4 + 190) = 0;
      uint64_t v20 = sub_5A7C34(v15, v17);
      unint64_t v21 = sub_46C760(a2);
      if (a3 <= v21) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = a3;
      }
      if (v21 > a3)
      {
        uint64_t v23 = a3;
        do
        {
          unint64_t v30 = *(void *)(sub_46C8EC(a2, v23) + 32);
          sub_2D5B74((char **)a4, &v30);
          uint64_t v24 = *(void *)(v20 + 32);
          if ((v24 & 0xFFFFFFFFFFFFLL) == (v30 & 0xFFFFFFFFFFFFLL)
            && ((v24 & 0xFF000000000000) == 0) != (HIWORD(v30) & 1))
          {
            break;
          }
          ++v23;
        }
        while (v23 != v22);
      }
      unint64_t v25 = a3 + ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) - 1;
      uint64_t v26 = a2[1538];
      uint64_t v27 = *(void *)(v26 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v25);
      if ((*(void *)(v26 + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
      {
        if (v27)
        {
          *(_DWORD *)(a4 + 24) = 0;
          return result;
        }
        int v28 = 90;
        goto LABEL_33;
      }
      if (v27)
      {
        int v28 = 89;
LABEL_33:
        *(_DWORD *)(a4 + 24) = v28;
        return result;
      }
      *(void *)(a4 + 8) = *(void *)a4;
      *(void *)(a4 + 48) = *(void *)(a4 + 40);
      *(void *)&long long v29 = -1;
      *((void *)&v29 + 1) = -1;
      *(_OWORD *)(a4 + 72) = v29;
      *(_OWORD *)(a4 + 88) = v29;
      *(_OWORD *)(a4 + 104) = v29;
      *(void *)(a4 + 120) = -1;
      *(_DWORD *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 64) = 0;
      *(_DWORD *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = -1;
      *(_DWORD *)(a4 + 144) = 0;
      __n128 result = (__n128)xmmword_20E2060;
      *(_OWORD *)(a4 + 152) = xmmword_20E2060;
      *(_WORD *)(a4 + 168) = 0;
      *(unsigned char *)(a4 + 170) = 0;
      *(void *)(a4 + 176) = 0;
      *(unsigned char *)(a4 + 188) = 0;
      *(unsigned char *)(a4 + 190) = 0;
    }
  }
  return result;
}

uint64_t sub_5A7C34(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v15;
    }
    else {
      char v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 40 * a2;
}

void sub_5A7D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

double sub_5A7E64()
{
  byte_2578A3F = 1;
  word_2578A28 = 65;
  byte_2578A57 = 1;
  word_2578A40 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2578A88 = 0u;
  *(_OWORD *)&qword_2578A98 = 0u;
  dword_2578AA8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2578A88, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2578A88, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2578A88, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2578A88, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2578A60 = 0;
  qword_2578A68 = 0;
  qword_2578A58 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2578A58 = (uint64_t)v0;
  qword_2578A60 = (uint64_t)(v0 + 9);
  qword_2578A68 = (uint64_t)(v0 + 9);
  qword_2578A70 = 0;
  qword_2578A78 = 0;
  unk_2578A80 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2578A78 = (uint64_t)(v1 + 9);
  unk_2578A80 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2578A70 = (uint64_t)v1;
  return result;
}

void sub_5A80A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2578A98) {
    sub_20A9D30((void **)qword_2578A98);
  }
  long long v37 = (void *)xmmword_2578A88;
  *(void *)&xmmword_2578A88 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_5A8140(unsigned int **a1@<X0>, char **a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (*a1 == a1[1] || (v6 = *a2, int v5 = a2[1], *a2 == v5))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    unsigned int v7 = **a1;
    _CF = *(_DWORD *)v6 >= v7;
    unsigned int v9 = *(_DWORD *)v6 - v7;
    if (!_CF) {
      unsigned int v9 = 0;
    }
    unsigned int v46 = v9;
    long long v47 = 0;
    long long v48 = 0;
    long long v49 = 0;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 4)) >> 60) {
      sub_2E00();
    }
    unint64_t v12 = (char *)operator new(0xE8BA2E8BA2E8BA30 * ((v5 - v6) >> 4));
    int v13 = 0;
    uint64_t v14 = 0;
    long long v47 = v12;
    long long v48 = v12;
    long long v49 = &v12[0xE8BA2E8BA2E8BA30 * ((v5 - v6) >> 4)];
    do
    {
      std::string v15 = (char *)*a1;
      std::string v16 = (char *)a1[1];
      uint64_t v17 = v16 - (char *)*a1;
      if (v14 == v17 >> 2)
      {
        if ((unint64_t)v17 >= 5 && sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v52);
          sub_188FC78(v52, (uint64_t)"driving_update_eta_step_builder::compute_step_segment_ranges() can't use range_begin= ", 86);
          std::string v18 = (void *)std::ostream::operator<<();
          sub_188FC78(v18, (uint64_t)"== zilch_points size=", 21);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (v51 < 0) {
            operator delete(__p);
          }
          *(void *)&v52[0] = v44;
          *(void *)((char *)v52 + *(void *)(v44 - 24)) = v45;
          if (v54 < 0) {
            operator delete(v53);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v19 = 0;
        int v13 = 1;
        uint64_t v20 = v14;
        uint64_t v14 = 0;
      }
      else
      {
        unint64_t v21 = &v15[4 * v14];
        if (a3 == 1)
        {
          if (v16 == v21)
          {
            unint64_t v21 = (char *)a1[1];
          }
          else
          {
            unint64_t v22 = (v16 - v21) >> 2;
            do
            {
              unint64_t v23 = v22 >> 1;
              uint64_t v24 = (unsigned int *)&v21[4 * (v22 >> 1)];
              unsigned int v26 = *v24;
              unint64_t v25 = (char *)(v24 + 1);
              v22 += ~(v22 >> 1);
              if (*(_DWORD *)v6 - v46 < v26) {
                unint64_t v22 = v23;
              }
              else {
                unint64_t v21 = v25;
              }
            }
            while (v22);
          }
        }
        else
        {
          unint64_t v27 = v16 - v21;
          _ZF = v16 - v21 == 4;
          if (v16 - v21 >= 4)
          {
            unsigned int v29 = *((_DWORD *)v6 + 2);
            if (!_ZF)
            {
              unint64_t v30 = v27 >> 2;
              do
              {
                _X14 = &v21[v30 & 0xFFFFFFFFFFFFFFFCLL];
                __asm { PRFM            #0, [X14] }
                uint64_t v35 = &v21[4 * (v30 >> 1)];
                _X13 = &v35[v30 & 0xFFFFFFFFFFFFFFFCLL];
                __asm { PRFM            #0, [X13] }
                if (*(_DWORD *)v35 >= v29) {
                  unint64_t v38 = 0;
                }
                else {
                  unint64_t v38 = v30 >> 1;
                }
                v21 += 4 * v38;
                v30 -= v30 >> 1;
              }
              while ((uint64_t)v30 > 1);
            }
            v21 += 4 * (*(_DWORD *)v21 < v29);
          }
        }
        uint64_t v20 = (v21 - v15) >> 2;
        uint64_t v19 = v20;
      }
      *(void *)&v52[0] = v14;
      *((void *)&v52[0] + 1) = v19;
      unint64_t v12 = sub_5A9594(&v47, v12, v52) + 16;
      v6 += 176;
      uint64_t v14 = v20;
    }
    while (v6 != v5);
    if (v13)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v39 = v47;
    }
    else
    {
      long long v40 = v47;
      uint64_t v39 = v48;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      int64_t v41 = v39 - v40;
      if (v39 != v40)
      {
        if (v41 < 0) {
          sub_2E00();
        }
        long long v42 = (char *)operator new(v39 - v40);
        *a4 = v42;
        uint64_t v43 = &v42[16 * (v41 >> 4)];
        a4[2] = v43;
        memcpy(v42, v40, v41);
        a4[1] = v43;
        uint64_t v39 = v40;
      }
    }
    if (v39)
    {
      long long v48 = v39;
      operator delete(v39);
    }
  }
}

void sub_5A8518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unint64_t v38 = *(void **)v36;
  if (*(void *)v36)
  {
    *(void *)(v36 + 8) = v38;
    operator delete(v38);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5A864C(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  if (sub_45FB38(a1) || (uint64_t v8 = a2[1], *a2 == v8) || (v9 = (v8 - *a2) >> 3, v9 < a3))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    long long v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    unint64_t v10 = sub_46C760(a1);
    unint64_t v12 = v9 - 1;
    unint64_t v30 = v10;
    if (v10)
    {
      uint64_t v13 = 0;
      do
      {
        if (a3 == (v32 - v31) >> 4) {
          break;
        }
        unint64_t v15 = v10 - 1;
        uint64_t v16 = sub_46CCC8(a1, v10 - 1, v11) + v13;
        if (v16 >= *(void *)(*a2 + 8 * v12))
        {
          *(void *)&long long v34 = v10 - 1;
          unint64_t v17 = sub_46C760(a1);
          uint64_t v18 = *(void *)(*a2 + 8 * v12);
          if (v15 < v17 - 1 && v18 >= v13 && v18 - v13 < v16 - v18) {
            *(void *)&long long v34 = v10;
          }
          if (v16 >= v18)
          {
            while (a3 > (v32 - v31) >> 4)
            {
              sub_29AC28((uint64_t)&v31, &v34, (uint64_t *)&v30);
              unint64_t v30 = v34;
              if (!v12)
              {
                unint64_t v14 = 0;
                goto LABEL_9;
              }
              unint64_t v14 = v12 - 1;
              uint64_t v19 = *(void *)(*a2 + 8 * v12-- - 8);
              if (v16 < v19) {
                goto LABEL_9;
              }
            }
          }
          unint64_t v14 = v12;
LABEL_9:
          unint64_t v12 = v14;
        }
        --v10;
        uint64_t v13 = v16;
      }
      while (v15);
    }
    uint64_t v20 = v31;
    unint64_t v21 = v32;
    uint64_t v22 = v32 - v31;
    if (a3 > (v32 - v31) >> 4)
    {
      uint64_t v23 = *(void *)(*a2 + 8 * v12);
      unint64_t v24 = v12 - 1;
      do
      {
        if (a3 <= (v32 - v31) >> 4) {
          break;
        }
        LODWORD(v34) = 0;
        sub_5A88D4((uint64_t)&v31, (int *)&v34, (uint64_t *)&v30);
        unint64_t v30 = 0;
        if (v24 == -1) {
          break;
        }
        uint64_t v25 = *(void *)(*a2 + 8 * v24--);
      }
      while (v23 >= v25);
      uint64_t v20 = v31;
      unint64_t v21 = v32;
      uint64_t v22 = v32 - v31;
    }
    if (a3 == v22 >> 4)
    {
      unsigned int v26 = v21 - 16;
      if (v20 != v21 && v26 > v20)
      {
        int v28 = v20 + 16;
        do
        {
          long long v34 = *((_OWORD *)v28 - 1);
          *((_OWORD *)v28 - 1) = *(_OWORD *)v26;
          *(_OWORD *)unsigned int v26 = v34;
          v26 -= 16;
          BOOL v29 = v28 >= v26;
          v28 += 16;
        }
        while (!v29);
        uint64_t v20 = v31;
        unint64_t v21 = v32;
      }
      *a4 = v20;
      a4[1] = v21;
      a4[2] = v33;
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (v20)
      {
        unint64_t v32 = v20;
        operator delete(v20);
      }
    }
  }
}

void sub_5A88A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5A88D4(uint64_t a1, int *a2, uint64_t *a3)
{
  unsigned int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    *unsigned int v7 = *a2;
    v7[1] = v8;
    unint64_t v9 = v7 + 2;
    goto LABEL_13;
  }
  unint64_t v10 = *(void **)a1;
  uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 3 > v12) {
    unint64_t v12 = v13 >> 3;
  }
  BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v15 = v12;
  }
  if (v15 >> 60) {
    sub_188D718();
  }
  uint64_t v16 = 16 * v15;
  unint64_t v17 = (char *)operator new(16 * v15);
  uint64_t v18 = *a3;
  uint64_t v19 = &v17[16 * v11];
  uint64_t v20 = &v17[v16];
  *(void *)uint64_t v19 = *a2;
  *((void *)v19 + 1) = v18;
  unint64_t v9 = v19 + 16;
  if (v7 == v10)
  {
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v20;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    unint64_t v21 = v19 - 16;
    *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v19 -= 16;
  }
  while (v7 != v10);
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v20;
  if (v10) {
LABEL_12:
  }
    operator delete(v10);
LABEL_13:
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

char *sub_5A89FC@<X0>(char *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (*(void *)result == v4)
  {
    unint64_t v8 = 0;
    *a2 = 0;
    a2[2] = 0;
    a2[1] = 0;
    unint64_t v9 = a2[1];
    if (!v9) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)result;
  do
  {
    if (*(void *)(v5 + 16) == 0x7FFFFFFFFFFFFFFFLL)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    v5 += 176;
  }
  while (v5 != v4);
  *a2 = 0;
  a2[1] = 0;
  unint64_t v6 = a2 + 1;
  a2[2] = 0;
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v4 - v3) >> 4)) >> 61) {
    sub_2E00();
  }
  unsigned int v7 = operator new(0x745D1745D1745D18 * ((v4 - v3) >> 4));
  *a2 = (unint64_t)v7;
  a2[1] = (unint64_t)v7;
  a2[2] = (unint64_t)&v7[0xE8BA2E8BA2E8BA3 * ((v4 - v3) >> 4)];
  do
  {
    uint64_t v13 = *(void *)(v3 + 16);
    double result = sub_491D3C(a2, v7, &v13);
    unsigned int v7 = result + 8;
    v3 += 176;
  }
  while (v3 != v4);
  unint64_t v8 = *a2;
  unint64_t v9 = *v6;
  if (*v6 != *a2)
  {
LABEL_11:
    unint64_t v10 = (uint64_t *)(v9 - 8);
    if (v10 != (uint64_t *)v8)
    {
      uint64_t v11 = *v10;
      do
      {
        uint64_t v12 = *--v10;
        v11 += v12;
        *unint64_t v10 = v11;
      }
      while (v10 != (uint64_t *)v8);
    }
  }
  return result;
}

void sub_5A8B54(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (*v1)
  {
    *uint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_5A8B74(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (*(void *)a3 == *((void *)a3 + 1)
    || *(void *)a2 == *(void *)(a2 + 8)
    || !sub_46DFC8(a1)
    || (v12 = a1[66], uint64_t v13 = a1[67], v12 == v13)
    || v13 - v12 != *(void *)(a2 + 8) - *(void *)a2)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  sub_5A89FC(a3, (unint64_t *)&v78);
  if (v78 == v79)
  {
    if (a5 == 2)
    {
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = *((void *)a3 + 1);
      if (*(void *)a3 == v15)
      {
        unint64_t v16 = 0;
        LODWORD(v17) = 0;
      }
      else
      {
        unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v14) >> 4);
        if (*(_DWORD *)(v14 + 4))
        {
          LODWORD(v17) = 0;
        }
        else
        {
          --v16;
          LODWORD(v17) = 1;
        }
      }
      sub_5A864C(a1, a4, v16, (char **)v80);
      goto LABEL_16;
    }
    sub_5A8140((unsigned int **)a2, (char **)a3, a5, v80);
  }
  else
  {
    sub_5A864C(a1, &v78, (v79 - (unsigned char *)v78) >> 3, (char **)v80);
  }
  LODWORD(v17) = 0;
LABEL_16:
  uint64_t v18 = *(void **)v80;
  uint64_t v17 = v17;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4) - v17 == (uint64_t)(*(void *)&v80[8] - *(void *)v80) >> 4)
  {
    size_t v67 = *(char **)v80;
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    uint64_t v19 = sub_46E110((uint64_t)a1);
    sub_474F54((uint64_t)(a1 + 56), v19, (__n128 *)v76);
    uint64_t v20 = *((void *)a3 + 1) - *(void *)a3;
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v68 = 0x2E8BA2E8BA2E8BA3 * (v20 >> 4);
      uint64_t v66 = v17;
      while (1)
      {
        uint64_t v22 = (int *)(*(void *)a3 + 176 * v21);
        if (!v17 || v21) {
          break;
        }
        v73.n128_u32[0] = 0;
        uint64_t v23 = (long long *)nullsub_1(v76);
        *(_OWORD *)&v80[16] = 0u;
        *(void *)size_t v80 = 0x7FFFFFFFLL;
        *(_DWORD *)&v80[8] = 0x7FFFFFFF;
        *(void *)&v80[12] = 0x7FFFFFFF7FFFFFFFLL;
        unint64_t v81 = 0x8000000080000000;
        *(_OWORD *)long long v82 = 0u;
        long long v83 = 0u;
        memset(__p_8, 0, sizeof(__p_8));
        *(void *)((char *)&__p_8[2] + 4) = 0x8000000080000000;
        HIDWORD(__p_8[3]) = 0x7FFFFFFF;
        uint64_t v85 = 0xFFFFFFFFLL;
        long long v86 = xmmword_20E8160;
        unint64_t v24 = a6[1];
        if (v24 < a6[2])
        {
          sub_5A999C(a6[1], *v22, v73.n128_i32[0], v23, (long long *)v80);
LABEL_64:
          uint64_t v37 = v24 + 2400;
          a6[1] = v24 + 2400;
          goto LABEL_66;
        }
        uint64_t v37 = sub_5A97E0(a6, v22, (int *)&v73, v23, (long long *)v80);
LABEL_66:
        a6[1] = v37;
        if (*((void *)&v83 + 1))
        {
          __p_8[0] = *((void *)&v83 + 1);
          operator delete(*((void **)&v83 + 1));
        }
        if (v82[0])
        {
          v82[1] = v82[0];
          operator delete(v82[0]);
        }
LABEL_20:
        if (++v21 == v68) {
          goto LABEL_80;
        }
      }
      uint64_t v25 = (unint64_t *)&v67[16 * (v21 - v17)];
      unint64_t v26 = v25[1];
      unint64_t v27 = *v25;
      uint64_t v28 = v26 - *v25;
      if (v26 > *v25)
      {
        uint64_t v29 = a1[66];
        uint64_t v30 = 4 * v27;
        long long v31 = (int32x4_t *)(v29 + 4 * v27);
        uint64_t v32 = 4 * v26;
        unint64_t v33 = 4 * v26 - v30 - 4;
        if (v33 < 0x1C)
        {
          int v34 = 0;
          uint64_t v35 = v31;
          goto LABEL_34;
        }
        uint64_t v38 = (v33 >> 2) + 1;
        uint64_t v35 = (int32x4_t *)((char *)v31 + 4 * (v38 & 0x7FFFFFFFFFFFFFF8));
        uint64_t v39 = v31 + 1;
        int32x4_t v40 = 0uLL;
        uint64_t v41 = v38 & 0x7FFFFFFFFFFFFFF8;
        int32x4_t v42 = 0uLL;
        do
        {
          int32x4_t v40 = vaddq_s32(v39[-1], v40);
          int32x4_t v42 = vaddq_s32(*v39, v42);
          v39 += 2;
          v41 -= 8;
        }
        while (v41);
        int v34 = vaddvq_s32(vaddq_s32(v42, v40));
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          uint64_t v43 = (int32x4_t *)(v29 + v32);
          do
          {
            __int32 v44 = v35->i32[0];
            uint64_t v35 = (int32x4_t *)((char *)v35 + 4);
            v34 += v44;
          }
          while (v35 != v43);
        }
        int v75 = v34;
        sub_47537C((uint64_t)v76, v28, (uint64_t)v80);
        *(_OWORD *)long long v76 = *(_OWORD *)v80;
        long long v77 = *(_OWORD *)&v80[16];
        uint64_t v45 = sub_46E110((uint64_t)a1);
        sub_474FC0((uint64_t)(a1 + 56), v45, &v73);
        if (sub_46E0C0(a1) && sub_475444((uint64_t)v76, (uint64_t)&v73))
        {
          uint64_t v46 = nullsub_1(v76);
          long long v47 = *(_OWORD *)v46;
          uint64_t v72 = *(void *)(v46 + 16);
          long long v71 = v47;
        }
        else
        {
          HIDWORD(v71) = 0;
          uint64_t v72 = 0;
          LODWORD(v71) = 0x7FFFFFFF;
          *(void *)((char *)&v71 + 4) = 0x7FFFFFFF7FFFFFFFLL;
        }
        *(_OWORD *)&v80[16] = 0u;
        *(void *)size_t v80 = 0x7FFFFFFFLL;
        *(_DWORD *)&v80[8] = 0x7FFFFFFF;
        *(void *)&v80[12] = 0x7FFFFFFF7FFFFFFFLL;
        unint64_t v81 = 0x8000000080000000;
        *(_OWORD *)long long v82 = 0u;
        long long v83 = 0u;
        memset(__p_8, 0, sizeof(__p_8));
        *(void *)((char *)&__p_8[2] + 4) = 0x8000000080000000;
        HIDWORD(__p_8[3]) = 0x7FFFFFFF;
        uint64_t v85 = 0xFFFFFFFFLL;
        long long v86 = xmmword_20E8160;
        unint64_t v48 = a6[1];
        if (v48 >= a6[2])
        {
          uint64_t v49 = sub_5AAAD4(a6, v22, &v75, &v71, (long long *)v80);
        }
        else
        {
          sub_5A999C(a6[1], *v22, v75, &v71, (long long *)v80);
          uint64_t v49 = v48 + 2400;
          a6[1] = v48 + 2400;
        }
        a6[1] = v49;
        if (*((void *)&v83 + 1))
        {
          __p_8[0] = *((void *)&v83 + 1);
          operator delete(*((void **)&v83 + 1));
        }
        if (v82[0])
        {
          v82[1] = v82[0];
          operator delete(v82[0]);
        }
        uint64_t v50 = a6[1];
        memset(v80, 0, 24);
        unint64_t v51 = v25[1];
        unint64_t v52 = *v25;
        BOOL v53 = v51 > *v25;
        if (v51 >= *v25) {
          unint64_t v54 = v51 - *v25;
        }
        else {
          unint64_t v54 = 0;
        }
        if (v53)
        {
          if (v54 >> 60) {
            sub_2E00();
          }
          *(void *)size_t v80 = operator new(16 * v54);
          *(void *)&v80[8] = *(void *)v80;
          *(void *)&v80[16] = *(void *)v80 + 16 * v54;
          if (v52 > v51) {
            unint64_t v51 = v52;
          }
          uint64_t v56 = 4 * v52;
          do
          {
            *(void *)&long long v69 = sub_46CCC8(a1, v52, v55);
            sub_5A9480((uint64_t)v80, &v69, (_DWORD *)(a1[66] + v56));
            ++v52;
            v56 += 4;
          }
          while (v51 != v52);
        }
        sub_8308E0(v80, &v75, (char **)&v69);
        std::string v57 = *(void **)(v50 - 168);
        if (v57)
        {
          *(void *)(v50 - 160) = v57;
          operator delete(v57);
          *(void *)(v50 - 168) = 0;
          *(void *)(v50 - 160) = 0;
          *(void *)(v50 - 152) = 0;
        }
        *(_OWORD *)(v50 - 168) = v69;
        *(void *)(v50 - 152) = v70;
        if (*(void *)v80)
        {
          *(void *)&v80[8] = *(void *)v80;
          operator delete(*(void **)v80);
        }
        uint64_t v17 = v66;
        goto LABEL_20;
      }
      if (v21) {
        uint64_t v36 = *a6 + 2400 * v21 - 384;
      }
      else {
        uint64_t v36 = nullsub_1(v76);
      }
      uint64_t v17 = v66;
      __n128 v58 = *(__n128 *)v36;
      uint64_t v74 = *(void *)(v36 + 16);
      __n128 v73 = v58;
      LODWORD(v71) = 0;
      *(_OWORD *)&v80[16] = 0u;
      *(void *)size_t v80 = 0x7FFFFFFFLL;
      *(_DWORD *)&v80[8] = 0x7FFFFFFF;
      *(void *)&v80[12] = 0x7FFFFFFF7FFFFFFFLL;
      unint64_t v81 = 0x8000000080000000;
      *(_OWORD *)long long v82 = 0u;
      long long v83 = 0u;
      memset(__p_8, 0, sizeof(__p_8));
      *(void *)((char *)&__p_8[2] + 4) = 0x8000000080000000;
      HIDWORD(__p_8[3]) = 0x7FFFFFFF;
      uint64_t v85 = 0xFFFFFFFFLL;
      long long v86 = xmmword_20E8160;
      unint64_t v24 = a6[1];
      if (v24 >= a6[2])
      {
        uint64_t v37 = sub_5A97E0(a6, v22, (int *)&v71, (long long *)&v73, (long long *)v80);
        goto LABEL_66;
      }
      sub_5A999C(a6[1], *v22, 0, (long long *)&v73, (long long *)v80);
      goto LABEL_64;
    }
LABEL_80:
    uint64_t v18 = v67;
  }
  else
  {
    long long v59 = "session_state";
    if (!a5) {
      long long v59 = "zilch";
    }
    if (v78 == v79) {
      long long v60 = v59;
    }
    else {
      long long v60 = "step_distances";
    }
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v80);
      sub_188FC78(v80, (uint64_t)"driving_update_eta_step_builder::build() invalid step_segment_ranges. size=", 75);
      long long v61 = (void *)std::ostream::operator<<();
      sub_188FC78(v61, (uint64_t)" expected_size=", 15);
      unsigned __int8 v62 = (void *)std::ostream::operator<<();
      sub_188FC78(v62, (uint64_t)", has_empty_start_step: ", 24);
      uint64_t v63 = (void *)std::ostream::operator<<();
      long long v64 = sub_188FC78(v63, (uint64_t)", computation_method: ", 22);
      size_t v65 = strlen(v60);
      sub_188FC78(v64, (uint64_t)v60, v65);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v76, 1u);
      if (SBYTE7(v77) < 0) {
        operator delete(v76[0]);
      }
      sub_111ECAC((uint64_t)v80);
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  if (v78)
  {
    int v79 = v78;
    operator delete(v78);
  }
  if (v18) {
    operator delete(v18);
  }
}

void sub_5A9374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a40);
  if (a37) {
    operator delete(a37);
  }
  if (!v41) {
    _Unwind_Resume(a1);
  }
  operator delete(v41);
  _Unwind_Resume(a1);
}

char *sub_5A9480(uint64_t a1, void *a2, _DWORD *a3)
{
  unsigned int v7 = *(_DWORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_188D718();
    }
    uint64_t v15 = 16 * v14;
    unint64_t v16 = (char *)operator new(16 * v14);
    uint64_t v17 = &v16[16 * v10];
    *(void *)uint64_t v17 = *a2;
    *((_DWORD *)v17 + 2) = *a3;
    for (uint64_t i = v17 + 16; v7 != v9; *((_DWORD *)v17 + 2) = v19)
    {
      uint64_t v18 = *((void *)v7 - 2);
      v7 -= 4;
      int v19 = v7[2];
      *((void *)v17 - 2) = v18;
      v17 -= 16;
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v16[v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)unsigned int v7 = *a2;
    v7[2] = *a3;
    uint64_t i = (char *)(v7 + 4);
  }
  *(void *)(a1 + 8) = i;
  return i - 16;
}

char *sub_5A9594(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  unint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)unint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      unint64_t v11 = (long long *)(v5 - 16);
      uint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)uint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)unint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    uint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  uint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      unint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  uint64_t v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    unint64_t v27 = v20;
    do
    {
      uint64_t v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  uint64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_5A97C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5A97E0(uint64_t *a1, int *a2, int *a3, long long *a4, long long *a5)
{
  uint64_t v6 = 0x2FC962FC962FC963 * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x1B4E81B4E81B4ELL) {
    sub_2E00();
  }
  if (0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x2FC962FC962FC963 * ((a1[2] - *a1) >> 5)) >= 0xDA740DA740DA7) {
    unint64_t v12 = 0x1B4E81B4E81B4ELL;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x1B4E81B4E81B4ELL) {
      sub_188D718();
    }
    long long v13 = (char *)operator new(2400 * v12);
  }
  else
  {
    long long v13 = 0;
  }
  uint64_t v20 = (uint64_t)&v13[2400 * v6];
  uint64_t v21 = &v13[2400 * v12];
  sub_5A999C(v20, *a2, *a3, a4, a5);
  uint64_t v14 = v20;
  uint64_t v15 = v20 + 2400;
  unint64_t v17 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      v16 -= 2400;
      uint64_t v14 = sub_5A9F18(v14 - 2400, (uint64_t)v16);
    }
    while (v16 != v17);
    uint64_t v18 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
    if (v16 != v18)
    {
      do
      {
        v16 -= 2400;
        sub_575E00((uint64_t)v16);
      }
      while (v16 != v18);
      uint64_t v16 = v18;
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v20 + 2400;
}

void sub_5A9988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A9EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5A999C(uint64_t a1, int a2, int a3, long long *a4, long long *a5)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v9;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = -1;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 208) = v9;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = -1;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = xmmword_20E2060;
  *(_WORD *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 306) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 319) = 0;
  *(_WORD *)(a1 + 328) = 5;
  *(unsigned char *)(a1 + 330) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  sub_6F30A4(a1 + 408);
  *(unsigned char *)(a1 + 560) = 0;
  *(void *)(a1 + 616) = -1;
  *(void *)&long long v10 = -1;
  *((void *)&v10 + 1) = -1;
  *(_OWORD *)(a1 + 568) = v10;
  *(_OWORD *)(a1 + 584) = v10;
  *(_OWORD *)(a1 + 600) = v10;
  *(_DWORD *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = -1;
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  sub_6F30A4(a1 + 712);
  *(int64x2_t *)(a1 + 864) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 880) = a3;
  *(_DWORD *)(a1 + 884) = 0x7FFFFFFF;
  *(void *)(a1 + 888) = 0x7FFFFFFFLL;
  sub_5A9D64(a1 + 896);
  *(unsigned char *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 1860) = 3;
  *(unsigned char *)(a1 + 1864) = 0;
  *(void *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(unsigned char *)(a1 + 1896) = 1;
  *(_DWORD *)(a1 + 1900) = 0;
  *(void *)(a1 + 1912) = -1;
  *(void *)(a1 + 1904) = -1;
  *(_DWORD *)(a1 + 1920) = -1;
  *(_DWORD *)(a1 + 1924) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(void *)(a1 + 1976) = 0;
  *(void *)(a1 + 1984) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  long long v11 = *a4;
  *(void *)(a1 + 2032) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 2016) = v11;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(void *)(a1 + 2040) = off_243A000;
  *(_DWORD *)(a1 + 2080) = 0;
  *(unsigned char *)(a1 + 2084) = 1;
  *(void *)(a1 + 2096) = 0;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(void *)(a1 + 2088) = off_243A038;
  *(_WORD *)(a1 + 2120) = 0;
  *(unsigned char *)(a1 + 2122) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2128) = off_2439F28;
  *(unsigned char *)(a1 + 2160) = 0;
  *(void *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_DWORD *)(a1 + 2192) = 0;
  *(void *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_WORD *)(a1 + 2224) = 1;
  *(unsigned char *)(a1 + 2226) = 0;
  *(void *)(a1 + 2244) = 0;
  *(_DWORD *)(a1 + 2252) = 0;
  *(_OWORD *)(a1 + 2228) = 0u;
  sub_3B1DC8(a1 + 2256, a5);
  *(unsigned char *)(a1 + 2392) = 0;
  return a1;
}

void sub_5A9C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void **a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = v17;
  uint64_t v21 = v14;
  unint64_t v23 = *(void **)(v12 + 2232);
  if (v23)
  {
    *(void *)(v12 + 2240) = v23;
    operator delete(v23);
  }
  sub_592198(v16);
  sub_59230C(v19);
  sub_4A5980(v18);
  sub_592364(v20);
  sub_A43C(v21);
  sub_5923C0(v13);
  sub_591DFC(a9);
  sub_591E78(a10);
  sub_52F090(v15);
  sub_4A50F4(a11);
  sub_4A6814((uint64_t *)(v12 + 688));
  sub_28F14C((void **)(v12 + 656));
  sub_4A50F4(a12);
  sub_59241C((uint64_t *)(v12 + 384));
  sub_59241C((uint64_t *)(v12 + 360));
  sub_59241C((uint64_t *)(v12 + 336));
  sub_592058(v12 + 136);
  _Unwind_Resume(a1);
}

uint64_t sub_5A9D64(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v2 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v2;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(unsigned char *)(a1 + 408) = 1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(unsigned char *)(a1 + 480) = 1;
  sub_5F3B34(a1 + 488);
  sub_5F3B34(a1 + 648);
  *(void *)(a1 + 808) = 0;
  return a1;
}

void sub_5A9E8C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_4D4B58(v4);
  sub_4D4880((void **)(v1 + 416));
  sub_4D4880(v2);
  sub_4F32CC((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5A9EC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 2400;
    sub_575E00(i - 2400);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_5A9F18(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  uint64_t v10 = a2 + 136;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  long long v11 = *(_OWORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 224);
  long long v13 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v13;
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  long long v14 = *(_OWORD *)(a2 + 272);
  long long v15 = *(_OWORD *)(a2 + 288);
  long long v16 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 319) = *(void *)(a2 + 319);
  *(_OWORD *)(a1 + 288) = v15;
  *(_OWORD *)(a1 + 304) = v16;
  *(_OWORD *)(a1 + 272) = v14;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(_WORD *)(a1 + 329) = *(_WORD *)(a2 + 329);
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 336) = 0u;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  uint64_t v17 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v17;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 376) = 0;
  *(_OWORD *)(a2 + 360) = 0u;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  *(_OWORD *)(a2 + 384) = 0u;
  long long v18 = *(_OWORD *)(a2 + 408);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = v18;
  *(void *)(a2 + 408) = 0;
  *(_OWORD *)(a2 + 416) = 0u;
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  long long v19 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = v19;
  *(_OWORD *)(a2 + 448) = 0u;
  *(void *)(a2 + 440) = 0;
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  long long v20 = *(_OWORD *)(a2 + 480);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = v20;
  *(_OWORD *)(a2 + 488) = 0u;
  *(void *)(a2 + 480) = 0;
  long long v21 = *(_OWORD *)(a2 + 504);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = v21;
  *(_OWORD *)(a2 + 512) = 0u;
  *(void *)(a2 + 504) = 0;
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a2 + 528);
  long long v22 = *(_OWORD *)(a2 + 536);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = v22;
  *(_OWORD *)(a2 + 544) = 0u;
  *(void *)(a2 + 536) = 0;
  long long v23 = *(_OWORD *)(a2 + 640);
  long long v24 = *(_OWORD *)(a2 + 624);
  long long v25 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 608) = v25;
  *(_OWORD *)(a1 + 624) = v24;
  long long v26 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v26;
  *(_OWORD *)(a1 + 640) = v23;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a2 + 672) = 0;
  *(_OWORD *)(a2 + 656) = 0u;
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a2 + 704) = 0;
  *(_OWORD *)(a2 + 688) = 0u;
  long long v27 = *(_OWORD *)(a2 + 712);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = v27;
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  long long v28 = *(_OWORD *)(a2 + 744);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = v28;
  *(_OWORD *)(a2 + 752) = 0u;
  *(void *)(a2 + 744) = 0;
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  long long v29 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v29;
  *(_OWORD *)(a2 + 792) = 0u;
  *(void *)(a2 + 784) = 0;
  long long v30 = *(_OWORD *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v30;
  *(_OWORD *)(a2 + 816) = 0u;
  *(void *)(a2 + 808) = 0;
  *(_DWORD *)(a1 + 832) = *(_DWORD *)(a2 + 832);
  long long v31 = *(_OWORD *)(a2 + 840);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v31;
  *(_OWORD *)(a2 + 848) = 0u;
  *(void *)(a2 + 840) = 0;
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  long long v32 = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(_OWORD *)(a1 + 872) = v32;
  sub_5AA6B0(a1 + 896, a2 + 896);
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1712) = *(_OWORD *)(v10 + 1576);
  *(void *)(a1 + 1728) = *(void *)(v10 + 1592);
  *(void *)(v10 + 1592) = 0;
  *(_OWORD *)(v10 + 1576) = 0u;
  *(void *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(void *)(a1 + 1736) = *(void *)(v10 + 1600);
  *(void *)(a1 + 1744) = *(void *)(v10 + 1608);
  *(void *)(a1 + 1752) = *(void *)(v10 + 1616);
  *(void *)(v10 + 1616) = 0;
  *(_OWORD *)(v10 + 1600) = 0u;
  *(void *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(v10 + 1624);
  *(void *)(a1 + 1776) = *(void *)(v10 + 1640);
  *(void *)(v10 + 1640) = 0;
  *(_OWORD *)(v10 + 1624) = 0u;
  *(void *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(void *)(a1 + 1784) = *(void *)(v10 + 1648);
  *(void *)(a1 + 1792) = *(void *)(v10 + 1656);
  *(void *)(a1 + 1800) = *(void *)(v10 + 1664);
  *(void *)(v10 + 1664) = 0;
  *(_OWORD *)(v10 + 1648) = 0u;
  *(void *)(a1 + 1824) = 0;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1808) = *(_OWORD *)(v10 + 1672);
  *(void *)(a1 + 1824) = *(void *)(v10 + 1688);
  *(void *)(v10 + 1688) = 0;
  *(_OWORD *)(v10 + 1672) = 0u;
  *(void *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(void *)(a1 + 1832) = *(void *)(v10 + 1696);
  *(void *)(a1 + 1840) = *(void *)(v10 + 1704);
  *(void *)(a1 + 1848) = *(void *)(v10 + 1712);
  *(void *)(v10 + 1712) = 0;
  *(_OWORD *)(v10 + 1696) = 0u;
  uint64_t v33 = *(void *)(v10 + 1720);
  *(unsigned char *)(a1 + 1864) = *(unsigned char *)(v10 + 1728);
  *(void *)(a1 + 1856) = v33;
  *(void *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1872) = *(_OWORD *)(v10 + 1736);
  *(void *)(a1 + 1888) = *(void *)(v10 + 1752);
  *(void *)(v10 + 1752) = 0;
  *(_OWORD *)(v10 + 1736) = 0u;
  long long v34 = *(_OWORD *)(v10 + 1760);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(v10 + 1776);
  *(_OWORD *)(a1 + 1896) = v34;
  *(void *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(void *)(a1 + 1928) = *(void *)(v10 + 1792);
  *(void *)(a1 + 1936) = *(void *)(v10 + 1800);
  *(void *)(a1 + 1944) = *(void *)(v10 + 1808);
  *(void *)(v10 + 1808) = 0;
  *(_OWORD *)(v10 + 1792) = 0u;
  long long v35 = *(_OWORD *)(v10 + 1816);
  long long v36 = *(_OWORD *)(v10 + 1832);
  *(_OWORD *)(a1 + 1977) = *(_OWORD *)(v10 + 1841);
  *(_OWORD *)(a1 + 1968) = v36;
  *(_OWORD *)(a1 + 1952) = v35;
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(v10 + 1864);
  long long v37 = *(_OWORD *)(v10 + 1880);
  *(void *)(a1 + 2032) = *(void *)(v10 + 1896);
  *(_OWORD *)(a1 + 2016) = v37;
  *(void *)(a1 + 2040) = off_2438EC8;
  long long v38 = *(_OWORD *)(v10 + 1912);
  *(void *)(a1 + 2064) = *(void *)(v10 + 1928);
  *(_OWORD *)(a1 + 2048) = v38;
  *(_OWORD *)(v10 + 1920) = 0u;
  *(void *)(v10 + 1912) = 0;
  *(void *)(a1 + 2040) = off_243A000;
  uint64_t v39 = *(void *)(v10 + 1936);
  *(void *)(a1 + 2077) = *(void *)(v10 + 1941);
  *(void *)(a1 + 2072) = v39;
  *(void *)(a1 + 2088) = off_2438EC8;
  long long v40 = *(_OWORD *)(v10 + 1960);
  *(void *)(a1 + 2112) = *(void *)(v10 + 1976);
  *(_OWORD *)(a1 + 2096) = v40;
  *(_OWORD *)(v10 + 1968) = 0u;
  *(void *)(v10 + 1960) = 0;
  *(void *)(a1 + 2088) = off_243A038;
  __int16 v41 = *(_WORD *)(v10 + 1984);
  *(unsigned char *)(a1 + 2122) = *(unsigned char *)(v10 + 1986);
  *(_WORD *)(a1 + 2120) = v41;
  *(void *)(a1 + 2128) = off_2438EC8;
  long long v42 = *(_OWORD *)(v10 + 2000);
  *(void *)(a1 + 2152) = *(void *)(v10 + 2016);
  *(_OWORD *)(a1 + 2136) = v42;
  *(_OWORD *)(v10 + 2008) = 0u;
  *(void *)(v10 + 2000) = 0;
  *(void *)(a1 + 2128) = off_2439F28;
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(v10 + 2024);
  long long v43 = *(_OWORD *)(v10 + 2032);
  *(void *)(a1 + 2184) = *(void *)(v10 + 2048);
  *(_OWORD *)(a1 + 2168) = v43;
  *(_OWORD *)(v10 + 2040) = 0u;
  *(void *)(v10 + 2032) = 0;
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(v10 + 2056);
  long long v44 = *(_OWORD *)(v10 + 2064);
  *(void *)(a1 + 2216) = *(void *)(v10 + 2080);
  *(_OWORD *)(a1 + 2200) = v44;
  *(_OWORD *)(v10 + 2072) = 0u;
  *(void *)(v10 + 2064) = 0;
  *(void *)(a1 + 2224) = *(void *)(v10 + 2088);
  *(_OWORD *)(a1 + 2240) = 0u;
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2232) = *(void *)(v10 + 2096);
  *(void *)(a1 + 2240) = *(void *)(v10 + 2104);
  *(void *)(a1 + 2248) = *(void *)(v10 + 2112);
  *(void *)(v10 + 2112) = 0;
  *(_OWORD *)(v10 + 2096) = 0u;
  long long v45 = *(_OWORD *)(v10 + 2120);
  long long v46 = *(_OWORD *)(v10 + 2136);
  *(void *)(a1 + 2288) = *(void *)(v10 + 2152);
  *(_OWORD *)(a1 + 2272) = v46;
  *(_OWORD *)(a1 + 2256) = v45;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2296) = *(void *)(v10 + 2160);
  *(void *)(a1 + 2304) = *(void *)(v10 + 2168);
  *(void *)(a1 + 2312) = *(void *)(v10 + 2176);
  *(void *)(v10 + 2168) = 0;
  *(void *)(v10 + 2160) = 0;
  *(void *)(v10 + 2176) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 2320) = *(_OWORD *)(v10 + 2184);
  *(void *)(a1 + 2336) = *(void *)(v10 + 2200);
  *(void *)(v10 + 2192) = 0;
  *(void *)(v10 + 2184) = 0;
  *(void *)(v10 + 2200) = 0;
  *(_OWORD *)(a1 + 2344) = *(_OWORD *)(v10 + 2208);
  *(_DWORD *)(a1 + 2368) = *(_DWORD *)(v10 + 2232);
  if (*(_DWORD *)(v10 + 2232) <= 1u) {
    *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  }
  *(_OWORD *)(a1 + 2376) = *(_OWORD *)(a2 + 2376);
  *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
  return a1;
}

__n128 sub_5AA6B0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v2 = *(_OWORD *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 32) = v2;
  long long v4 = *(_OWORD *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  if (*(_DWORD *)(a2 + 192) <= 1u) {
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  long long v6 = *(_OWORD *)(a2 + 216);
  uint64_t v7 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v6;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 248) = v7;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  long long v8 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 321) = *(_OWORD *)(a2 + 321);
  *(_OWORD *)(a1 + 312) = v8;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  uint64_t v9 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v9;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  uint64_t v10 = *(void *)(a2 + 368);
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(void *)(a1 + 368) = v10;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 376) = 0;
  uint64_t v11 = *(void *)(a2 + 384);
  *(void *)(a1 + 384) = v11;
  uint64_t v12 = *(void *)(a2 + 392);
  *(void *)(a1 + 392) = v12;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    unint64_t v14 = *(void *)(a1 + 376);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(v10 + 8 * v13) = a1 + 384;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 392) = 0;
  }
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0uLL;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  uint64_t v15 = *(void *)(a2 + 440);
  *(_OWORD *)(a2 + 416) = 0uLL;
  *(_OWORD *)(a2 + 432) = 0uLL;
  *(void *)(a1 + 440) = v15;
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  uint64_t v16 = *(void *)(a2 + 456);
  *(void *)(a1 + 456) = v16;
  uint64_t v17 = *(void *)(a2 + 464);
  *(void *)(a1 + 464) = v17;
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  if (v17)
  {
    unint64_t v18 = *(void *)(v16 + 8);
    unint64_t v19 = *(void *)(a1 + 448);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19) {
        v18 %= v19;
      }
    }
    else
    {
      v18 &= v19 - 1;
    }
    *(void *)(v15 + 8 * v18) = a1 + 456;
    *(void *)(a2 + 456) = 0;
    *(void *)(a2 + 464) = 0;
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0uLL;
  uint64_t v20 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v20;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a2 + 504) = 0;
  *(_OWORD *)(a2 + 488) = 0uLL;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0uLL;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  *(_OWORD *)(a2 + 512) = 0uLL;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0uLL;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0uLL;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0uLL;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  uint64_t v21 = *(void *)(a2 + 584);
  *(_OWORD *)(a2 + 560) = 0uLL;
  *(_OWORD *)(a2 + 576) = 0uLL;
  *(void *)(a1 + 584) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 592);
  *(unsigned char *)(a1 + 596) = *(unsigned char *)(a2 + 596);
  *(_DWORD *)(a1 + 592) = v21;
  long long v22 = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = v22;
  *(void *)(a2 + 600) = 0;
  *(_OWORD *)(a2 + 608) = 0uLL;
  long long v23 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v23;
  *(_OWORD *)(a2 + 632) = 0uLL;
  *(void *)(a2 + 624) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0uLL;
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 648) = 0uLL;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0uLL;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0uLL;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0uLL;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0uLL;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0uLL;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  uint64_t v24 = *(void *)(a2 + 744);
  *(_OWORD *)(a2 + 720) = 0uLL;
  *(_OWORD *)(a2 + 736) = 0uLL;
  *(void *)(a1 + 744) = v24;
  LODWORD(v24) = *(_DWORD *)(a2 + 752);
  *(unsigned char *)(a1 + 756) = *(unsigned char *)(a2 + 756);
  *(_DWORD *)(a1 + 752) = v24;
  long long v25 = *(_OWORD *)(a2 + 760);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = v25;
  *(void *)(a2 + 760) = 0;
  *(void *)(a2 + 776) = 0;
  *(void *)(a2 + 768) = 0;
  __n128 result = *(__n128 *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(__n128 *)(a1 + 784) = result;
  *(void *)(a2 + 792) = 0;
  *(void *)(a2 + 784) = 0;
  *(void *)(a2 + 800) = 0;
  uint64_t v27 = *(void *)(a2 + 808);
  *(void *)(a2 + 808) = 0;
  *(void *)(a1 + 808) = v27;
  return result;
}

uint64_t sub_5AAAD4(uint64_t *a1, int *a2, int *a3, long long *a4, long long *a5)
{
  uint64_t v6 = 0x2FC962FC962FC963 * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x1B4E81B4E81B4ELL) {
    sub_2E00();
  }
  if (0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x2FC962FC962FC963 * ((a1[2] - *a1) >> 5)) >= 0xDA740DA740DA7) {
    unint64_t v12 = 0x1B4E81B4E81B4ELL;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x1B4E81B4E81B4ELL) {
      sub_188D718();
    }
    unint64_t v13 = (char *)operator new(2400 * v12);
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v20 = (uint64_t)&v13[2400 * v6];
  uint64_t v21 = &v13[2400 * v12];
  sub_5A999C(v20, *a2, *a3, a4, a5);
  uint64_t v14 = v20;
  uint64_t v15 = v20 + 2400;
  uint64_t v17 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      v16 -= 2400;
      uint64_t v14 = sub_5A9F18(v14 - 2400, (uint64_t)v16);
    }
    while (v16 != v17);
    unint64_t v18 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
    if (v16 != v18)
    {
      do
      {
        v16 -= 2400;
        sub_575E00((uint64_t)v16);
      }
      while (v16 != v18);
      uint64_t v16 = v18;
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v20 + 2400;
}

void sub_5AAC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A9EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_5AAC90()
{
  byte_2578AC7 = 1;
  word_2578AB0 = 65;
  byte_2578ADF = 1;
  word_2578AC8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2578B10 = 0u;
  *(_OWORD *)&qword_2578B20 = 0u;
  dword_2578B30 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2578B10, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2578B10, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2578B10, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2578B10, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2578AE8 = 0;
  qword_2578AF0 = 0;
  qword_2578AE0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2578AE0 = (uint64_t)v0;
  qword_2578AE8 = (uint64_t)(v0 + 9);
  qword_2578AF0 = (uint64_t)(v0 + 9);
  qword_2578AF8 = 0;
  qword_2578B00 = 0;
  unk_2578B08 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2578B00 = (uint64_t)(v1 + 9);
  unk_2578B08 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2578AF8 = (uint64_t)v1;
  return result;
}

void sub_5AAECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2578B20) {
    sub_20A9D74((void **)qword_2578B20);
  }
  long long v37 = (void *)xmmword_2578B10;
  *(void *)&xmmword_2578B10 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_5AAF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  sub_725D0(a1 + 16);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return a1;
}

uint64_t sub_5AAFF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    int v7 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 1516);
    uint64_t result = sub_5647F0(*(_DWORD **)a3);
    if (!v7) {
      goto LABEL_8;
    }
    char v10 = *(_DWORD **)a3;
    uint64_t v9 = *(_DWORD **)(a3 + 8);
    if (v10 != v9)
    {
      do
      {
        uint64_t result = sub_5647F0(v10);
        v10 += 498;
        if (v10 == v9) {
          char v11 = 1;
        }
        else {
          char v11 = result;
        }
      }
      while ((v11 & 1) == 0);
LABEL_8:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      if (v12 == v13) {
        return result;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = 0;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (v12 == v13) {
    return result;
  }
LABEL_11:
  if (result)
  {
    do
    {
      uint64_t result = sub_45FE1C(v12);
      if (result != 4)
      {
        if (!sub_45FE1C(v12) || (uint64_t result = sub_45FE1C(v12), result == 2))
        {
          unint64_t v14 = a4[1];
          if (v14 >= a4[2])
          {
            uint64_t result = (uint64_t)sub_5ABFF4(a4, v12);
          }
          else
          {
            sub_5ABEF0((uint64_t)a4, v12);
            uint64_t result = v14 + 120;
          }
          a4[1] = result;
        }
      }
      v12 += 120;
    }
    while (v12 != v13);
  }
  else
  {
    do
    {
      uint64_t result = sub_45FE1C(v12);
      if (result != 4)
      {
        uint64_t result = sub_45FE1C(v12);
        if (result == 2)
        {
          unint64_t v15 = a4[1];
          if (v15 >= a4[2])
          {
            uint64_t result = (uint64_t)sub_5ABFF4(a4, v12);
          }
          else
          {
            sub_5ABEF0((uint64_t)a4, v12);
            uint64_t result = v15 + 120;
          }
          a4[1] = result;
        }
      }
      v12 += 120;
    }
    while (v12 != v13);
  }
  return result;
}

void sub_5AB160(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_5AB174(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_5AB188(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_5AB19C(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void ***sub_5AB1B0(void ***a1)
{
  long long v2 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    char v4 = *a1;
    if (v3 == v2)
    {
LABEL_14:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        int v5 = v3 - 15;
        uint64_t v6 = *(v3 - 15);
        if (v6)
        {
LABEL_10:
          uint64_t v7 = (uint64_t)*(v3 - 14);
          int v8 = v6;
          if ((void *)v7 != v6)
          {
            do
              uint64_t v7 = sub_3AFFFC(v7 - 1056);
            while ((void *)v7 != v6);
            int v8 = *v5;
          }
          *(v3 - 14) = v6;
          operator delete(v8);
        }
      }
      else
      {
        int v5 = v3 - 15;
        uint64_t v6 = *(v3 - 15);
        if (v6) {
          goto LABEL_10;
        }
      }
      long long v3 = v5;
      if (v5 == v2)
      {
        char v4 = *a1;
        goto LABEL_14;
      }
    }
  }
  return a1;
}

void sub_5AB278()
{
  uint64_t v0 = __chkstk_darwin();
  long long v2 = v1;
  char v4 = v3;
  int v5 = (void **)v0;
  uint64_t v7 = v6;
  sub_725D0((uint64_t)v15);
  sub_725A0((uint64_t)v15);
  *(void *)(v7 + 23) = 0;
  *(unsigned char *)uint64_t v7 = 0;
  *(void *)(v7 + 39) = 0;
  *(void *)(v7 + 31) = 0;
  *(unsigned char *)(v7 + 47) = 0;
  sub_59133C(v7 + 48);
  *(_OWORD *)(v7 + 7624) = 0u;
  *(_OWORD *)(v7 + 7640) = 0u;
  *(_OWORD *)(v7 + 7608) = 0u;
  uint64_t v8 = sub_3750CC(*v5);
  sub_4800C0(v4, v8, &__str);
  sub_62B9C4((int)&v13, (int)*v5, 0, 0, &__str);
  std::string::operator=((std::string *)v7, (const std::string *)(v5[1] + 196));
  uint64_t v9 = *v2;
  char v10 = v2[1];
  if (*v2 != v10)
  {
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v11 = sub_45E5CC(v9);
      sub_34C720((uint64_t)v12, v11);
      sub_60472C((uint64_t)v16, (uint64_t)&v18, (uint64_t)v12);
      sub_591254((uint64_t *)v7, (uint64_t)v16);
      sub_3A6B94((uint64_t)v16);
      sub_29D95C((uint64_t)v12);
      if ((_BYTE)v19) {
        LOBYTE(v19) = 0;
      }
      v9 += 4;
    }
    while (v9 != v10);
  }
  sub_5BAE18((uint64_t)&v17, *v5, (uint64_t)v5[1], (long long *)&__str);
}

void sub_5ABA38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_5ABB40()
{
}

void sub_5ABB48()
{
  sub_29D95C((uint64_t)&STACK[0x310]);
  if (*(unsigned char *)(v0 + 8)) {
    *(unsigned char *)(v0 + 8) = 0;
  }
  JUMPOUT(0x5ABBDCLL);
}

void sub_5ABB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_4851DC((uint64_t)&STACK[0xCE0]);
  sub_5ABC24(&a15);
  sub_5ABC68((uint64_t)&STACK[0xD68]);
  sub_574530(&a28);
  sub_5AB1B0(&a31);
  sub_56F088(&a34);
  long long v36 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v36;
    operator delete(v36);
  }
  sub_574D4C((uint64_t)&STACK[0x2788]);
  sub_5BAE48(&STACK[0x4510]);
  if (SLOBYTE(STACK[0xC3F]) < 0)
  {
    operator delete((void *)STACK[0xC28]);
    if ((SLOBYTE(STACK[0xCC7]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((SLOBYTE(STACK[0xCC7]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_5ABDEC(v34);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0xCB0]);
  sub_5ABDEC(v34);
  _Unwind_Resume(a1);
}

void *sub_5ABC24(void *a1)
{
  long long v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_5ABC68(uint64_t a1)
{
  if (*(char *)(a1 + 6575) < 0)
  {
    operator delete(*(void **)(a1 + 6552));
    sub_4BCED0(a1 + 3112);
    sub_4F2894(a1 + 608);
    long long v2 = *(std::__shared_weak_count **)(a1 + 600);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_4BCED0(a1 + 3112);
    sub_4F2894(a1 + 608);
    long long v2 = *(std::__shared_weak_count **)(a1 + 600);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = *(void **)(a1 + 560);
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
LABEL_6:
  long long v3 = *(void **)(a1 + 560);
  if (v3)
  {
LABEL_7:
    *(void *)(a1 + 568) = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_5ABD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 72);
  uint64_t result = memcpy((void *)(a2 + 48), (const void *)(a1 + 88), 0x198uLL);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 456) = 0;
  uint64_t v7 = *(unsigned char **)(a1 + 496);
  uint64_t v6 = *(unsigned char **)(a1 + 504);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a2 + 456) = v9;
    char v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a2 + 472) = v10;
    uint64_t result = memcpy(v9, v7, v8);
    *(void *)(a2 + 464) = v10;
  }
  return result;
}

void sub_5ABDD0(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 464) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5ABDEC(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 7632);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 7640);
    long long v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_55BA78(v3 - 1056);
      while ((void *)v3 != v2);
      long long v4 = *(void **)(a1 + 7632);
    }
    *(void *)(a1 + 7640) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 7608);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 7616);
    uint64_t v7 = *(void **)(a1 + 7608);
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_3A6B94(v6 - 1120);
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 7608);
    }
    *(void *)(a1 + 7616) = v5;
    operator delete(v7);
  }
  sub_574D4C(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    char v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_574D4C(v9 - 7560);
      while (v9 != v8);
      char v10 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v8;
    operator delete(v10);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_5ABEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  sub_3B168C(v4, *(void *)a2, *(void *)(a2 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  *(void *)(v4 + 85) = *(void *)(a2 + 85);
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  uint64_t result = (unsigned char *)(v4 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    uint64_t result = sub_4200(result, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 96);
    *(void *)(v4 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)uint64_t result = v9;
  }
  *(void *)(a1 + 8) = v4 + 120;
  return result;
}

void sub_5ABFC4(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_5ABFF4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(120 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v24 = (uint64_t)&v7[120 * v3];
  long long v26 = &v7[120 * v6];
  *(void *)(v24 + 8) = 0;
  *(void *)(v24 + 16) = 0;
  *(void *)uint64_t v24 = 0;
  sub_3B168C(v24, *(void *)a2, *(void *)(a2 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v24 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v24 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v24 + 85) = *(void *)(a2 + 85);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v8 = (unsigned char *)(v24 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200(v8, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + 96);
    *(void *)(v24 + 112) = *(void *)(a2 + 112);
  }
  long long v9 = &v7[120 * v3];
  long long v25 = v9;
  char v10 = v9 + 120;
  uint64_t v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == (void **)*a1)
  {
    *a1 = v24;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)v26;
    goto LABEL_29;
  }
  do
  {
    *((void *)v9 - 15) = 0;
    *((void *)v9 - 14) = 0;
    v9 -= 120;
    *((void *)v9 + 2) = 0;
    long long v13 = *(_OWORD *)(v12 - 15);
    v12 -= 15;
    *(_OWORD *)long long v9 = v13;
    *((void *)v9 + 2) = v12[2];
    v12[1] = 0;
    v12[2] = 0;
    char *v12 = 0;
    long long v14 = *(_OWORD *)(v12 + 7);
    long long v15 = *(_OWORD *)(v12 + 9);
    uint64_t v16 = *(uint64_t *)((char *)v12 + 85);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v12 + 5);
    *(void *)(v9 + 85) = v16;
    *(_OWORD *)(v9 + 72) = v15;
    *(_OWORD *)(v9 + 56) = v14;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v12 + 3);
    long long v17 = *((_OWORD *)v12 + 6);
    *((void *)v9 + 14) = v12[14];
    *((_OWORD *)v9 + 6) = v17;
    v12[13] = 0;
    v12[14] = 0;
    v12[12] = 0;
  }
  while (v12 != v11);
  uint64_t v18 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  *a1 = (uint64_t)v9;
  a1[1] = (uint64_t)v10;
  a1[2] = (uint64_t)v26;
  if (v12 == v18) {
    goto LABEL_29;
  }
  do
  {
    if (*((char *)v12 - 1) < 0)
    {
      operator delete(*(v12 - 3));
      uint64_t v19 = v12 - 15;
      uint64_t v20 = *(v12 - 15);
      if (!v20) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v19 = v12 - 15;
      uint64_t v20 = *(v12 - 15);
      if (!v20) {
        goto LABEL_20;
      }
    }
    uint64_t v21 = (uint64_t)*(v12 - 14);
    long long v22 = v20;
    if ((void *)v21 != v20)
    {
      do
        uint64_t v21 = sub_3AFFFC(v21 - 1056);
      while ((void *)v21 != v20);
      long long v22 = *v19;
    }
    *(v12 - 14) = v20;
    operator delete(v22);
LABEL_20:
    uint64_t v12 = v19;
  }
  while (v19 != v18);
  uint64_t v12 = v18;
LABEL_29:
  if (v12) {
    operator delete(v12);
  }
  return v25 + 120;
}

void sub_5AC294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    sub_5AC2CC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5AC2CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 120);
    *(void *)(a1 + 16) = i - 120;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      long long v5 = *v4;
      if (!*v4) {
        continue;
      }
    }
    else
    {
      long long v5 = *v4;
      if (!*v4) {
        continue;
      }
    }
    uint64_t v6 = *(void *)(i - 112);
    long long v7 = v5;
    if ((void *)v6 != v5)
    {
      do
        uint64_t v6 = sub_3AFFFC(v6 - 1056);
      while ((void *)v6 != v5);
      long long v7 = *v4;
    }
    *(void *)(i - 112) = v5;
    operator delete(v7);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_5AC380()
{
  byte_2578B4F = 1;
  word_2578B38 = 65;
  byte_2578B67 = 1;
  word_2578B50 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2578BF8 = 0u;
  *(_OWORD *)&qword_2578C08 = 0u;
  dword_2578C18 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2578BF8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2578BF8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2578BF8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2578BF8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2578B7F = 8;
  strcpy((char *)&qword_2578B68, "any_mode");
  byte_2578B97 = 7;
  strcpy((char *)&dword_2578B80, "cycling");
  byte_2578BAF = 7;
  strcpy((char *)&dword_2578B98, "driving");
  byte_2578BC7 = 7;
  strcpy((char *)&dword_2578BB0, "walking");
  qword_2578BD0 = 0;
  qword_2578BD8 = 0;
  qword_2578BC8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2578BC8 = (uint64_t)v0;
  qword_2578BD0 = (uint64_t)(v0 + 9);
  qword_2578BD8 = (uint64_t)(v0 + 9);
  qword_2578BE0 = 0;
  qword_2578BE8 = 0;
  unk_2578BF0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2578BE8 = (uint64_t)(v1 + 9);
  unk_2578BF0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2578BE0 = (uint64_t)v1;
  return result;
}

void sub_5AC648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2578C08) {
    sub_20A9E68((void **)qword_2578C08);
  }
  long long v37 = (void *)xmmword_2578BF8;
  *(void *)&xmmword_2578BF8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_5AC6E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  HIBYTE(v12[2]) = 18;
  strcpy((char *)v12, "ETADrivingGuidance");
  long long v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  unint64_t v3 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&v9);
  long long __p = operator new(0x20uLL);
  long long v14 = xmmword_20B5EB0;
  strcpy((char *)__p, "enable_traffic_description");
  BOOL v4 = sub_29D62C(v3, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v4;
  int v5 = (void **)v9;
  if (v9)
  {
    uint64_t v6 = v10;
    char v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v9;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_5AC82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_5AC894(uint64_t **a1@<X0>, uint64_t **a2@<X1>, int *a3@<X2>, uint64_t *a4@<X8>)
{
  int v8 = (uint64_t *)sub_374EF4(*a1);
  sub_688A04(v8, 3u, *a3, &v36);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v9 = *a2;
  char v10 = a2[1];
  if (*a2 == v10) {
    goto LABEL_41;
  }
  uint64_t v33 = a3;
  do
  {
    unint64_t v11 = a4[1];
    if (v11 >= a4[2])
    {
      uint64_t v12 = sub_5ADE90(a4, v9);
    }
    else
    {
      sub_5AE024(a4[1], v9);
      uint64_t v12 = v11 + 376;
      a4[1] = v11 + 376;
    }
    a4[1] = v12;
    char v13 = *a1;
    long long v14 = (int64x2_t *)(v12 - 376);
    if (!sub_45FB38(v9))
    {
      uint64_t v15 = sub_45FB28(v9, 0);
      sub_5AE3C8(v15, v13, (uint64_t)a3, &__p);
      uint64_t v16 = (long long *)__p;
      long long v17 = v35;
      if (__p != v35)
      {
        uint64_t v18 = v10;
        uint64_t v19 = (char **)(v12 - 368);
        uint64_t v20 = (void *)(v12 - 360);
        uint64_t v21 = *(char **)(v12 - 368);
        do
        {
          if ((unint64_t)v21 >= *v20)
          {
            uint64_t v21 = (char *)sub_5B09D8(v14, v16);
          }
          else
          {
            sub_4AA8E0(v21, v16);
            v21 += 152;
            *uint64_t v19 = v21;
          }
          *uint64_t v19 = v21;
          v16 += 11;
        }
        while (v16 != v17);
        char v10 = v18;
        a3 = v33;
        long long v17 = (long long *)__p;
      }
      if (v17)
      {
        long long v22 = v35;
        long long v23 = v17;
        if (v35 == v17)
        {
LABEL_32:
          long long v35 = v17;
          operator delete(v23);
          goto LABEL_33;
        }
        while (1)
        {
          uint64_t v24 = (void *)*((void *)v22 - 3);
          if (v24)
          {
            *((void *)v22 - 2) = v24;
            operator delete(v24);
          }
          if (*((char *)v22 - 25) < 0)
          {
            operator delete(*((void **)v22 - 6));
            if ((*((char *)v22 - 57) & 0x80000000) == 0)
            {
LABEL_22:
              if ((*((char *)v22 - 81) & 0x80000000) == 0) {
                goto LABEL_23;
              }
              goto LABEL_28;
            }
          }
          else if ((*((char *)v22 - 57) & 0x80000000) == 0)
          {
            goto LABEL_22;
          }
          operator delete(*((void **)v22 - 10));
          if ((*((char *)v22 - 81) & 0x80000000) == 0)
          {
LABEL_23:
            if ((*((char *)v22 - 121) & 0x80000000) == 0) {
              goto LABEL_24;
            }
            goto LABEL_29;
          }
LABEL_28:
          operator delete(*((void **)v22 - 13));
          if ((*((char *)v22 - 121) & 0x80000000) == 0)
          {
LABEL_24:
            if (*((char *)v22 - 153) < 0) {
              goto LABEL_30;
            }
            goto LABEL_17;
          }
LABEL_29:
          operator delete(*((void **)v22 - 18));
          if (*((char *)v22 - 153) < 0) {
LABEL_30:
          }
            operator delete(*((void **)v22 - 22));
LABEL_17:
          v22 -= 11;
          if (v22 == v17)
          {
            long long v23 = __p;
            goto LABEL_32;
          }
        }
      }
    }
LABEL_33:
    uint64_t v25 = nullsub_1(v9);
    long long v26 = *(void **)v25;
    uint64_t v27 = *(void **)(v25 + 8);
    if (*(void **)v25 == v27)
    {
      int v30 = 1;
    }
    else
    {
      do
      {
        uint64_t v28 = sub_3777C0(*a1);
        int v29 = sub_3D4688(v28, v26);
        int v30 = v29;
        v26 += 132;
        if (v26 == v27) {
          char v31 = 0;
        }
        else {
          char v31 = v29;
        }
      }
      while ((v31 & 1) != 0);
    }
    sub_5ACBDC((uint64_t)a1, v36, v30, (long long **)v14);
    sub_5AD53C();
    v9 += 15;
  }
  while (v9 != v10);
LABEL_41:
  long long v32 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_5ACB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_5ADA30(v5);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5ACBDC(uint64_t a1, uint64_t a2, int a3, long long **a4)
{
  uint64_t v6 = 0;
  LODWORD(v7) = 0;
  int v8 = *((_DWORD *)a4 + 74);
  int v9 = *((_DWORD *)a4 + 9);
  int v81 = v9;
  int v82 = v8;
  int v10 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v78 = 0;
  size_t v79 = 0;
  unint64_t v80 = 0;
  if (v10 && a3)
  {
    BOOL v11 = v8 == 0x7FFFFFFF || v9 == 0x7FFFFFFF;
    size_t v12 = 0;
    if (!v11)
    {
      int v13 = sub_5ADA8C(&v81, &v82);
      *((_DWORD *)a4 + 80) = v13;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v6 = 0x636966666172545FLL;
      uint64_t v16 = 0x746867694C5FLL;
      unint64_t v17 = 0xE00000000000000;
      switch(v13)
      {
        case 0:
        case 1:
          break;
        case 2:
          unint64_t v17 = 0x1100000000000065;
          uint64_t v15 = 0x7400000000000000;
          uint64_t v14 = 0x61000000000000;
          uint64_t v16 = 0x7265646F4D5FLL;
          break;
        case 3:
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0x79766165485FLL;
          break;
        case 4:
          uint64_t v6 = (uint64_t)operator new(0x19uLL);
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          strcpy((char *)v6, "_Traffic_ExtremelyHeavy");
          unint64_t v17 = 0x8000000000000019;
          uint64_t v16 = 23;
          break;
        default:
          uint64_t v6 = 0;
          uint64_t v16 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          unint64_t v17 = 0;
          break;
      }
      size_t v12 = v14 | v16 | v15;
      uint64_t v78 = v6;
      size_t v79 = v12;
      unint64_t v80 = v17;
      unint64_t v7 = HIBYTE(v17);
    }
  }
  else
  {
    size_t v12 = 0;
  }
  uint64_t v18 = *a4;
  int v73 = (char)v7;
  if (*a4 == a4[1])
  {
    if ((v7 & 0x80u) == 0) {
      size_t v19 = v7;
    }
    else {
      size_t v19 = v12;
    }
    if (!v19) {
      goto LABEL_145;
    }
LABEL_111:
    *(_OWORD *)long long v83 = 0u;
    *(_OWORD *)long long __p = 0u;
    *(_DWORD *)&__p[16] = 1065353216;
    int v55 = byte_257B58F;
    if (byte_257B58F >= 0) {
      size_t v56 = byte_257B58F;
    }
    else {
      size_t v56 = qword_257B580;
    }
    unint64_t v57 = v19 + v56;
    if (v19 + v56 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v57 > 0x16)
    {
      uint64_t v64 = a2;
      uint64_t v65 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v65 = v57 | 7;
      }
      uint64_t v66 = v65 + 1;
      __n128 v58 = (char *)operator new(v65 + 1);
      size_t v76 = v19 + v56;
      unint64_t v77 = v66 | 0x8000000000000000;
      int v75 = v58;
      a2 = v64;
      if (!v56) {
        goto LABEL_121;
      }
    }
    else
    {
      size_t v76 = 0;
      unint64_t v77 = 0;
      int v75 = 0;
      __n128 v58 = (char *)&v75;
      HIBYTE(v77) = v19 + v56;
      if (!v56)
      {
LABEL_121:
        long long v60 = &v58[v56];
        if (v73 >= 0) {
          long long v61 = &v78;
        }
        else {
          long long v61 = (void *)v6;
        }
        memmove(v60, v61, v19);
        v60[v19] = 0;
        sub_6581AC((uint64_t)&v75, (uint64_t)v83, a2, 0, &__dst);
        unint64_t v62 = (unint64_t)a4[42];
        if (v62 >= (unint64_t)a4[43])
        {
          uint64_t v63 = sub_5B10A0((uint64_t *)a4 + 41, (uint64_t)&__dst);
        }
        else
        {
          sub_5F3D48((uint64_t)a4[42], (uint64_t)&__dst);
          uint64_t v63 = v62 + 160;
          a4[42] = (long long *)(v62 + 160);
        }
        a4[42] = (long long *)v63;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v77) & 0x80000000) == 0)
          {
LABEL_133:
            size_t v67 = *(char **)__p;
            if (*(void *)__p) {
              goto LABEL_140;
            }
            goto LABEL_143;
          }
        }
        else if ((SHIBYTE(v77) & 0x80000000) == 0)
        {
          goto LABEL_133;
        }
        operator delete(v75);
        size_t v67 = *(char **)__p;
        if (!*(void *)__p)
        {
LABEL_143:
          long long v69 = v83[0];
          v83[0] = 0;
          if (v69) {
            operator delete(v69);
          }
          goto LABEL_145;
        }
        while (1)
        {
LABEL_140:
          uint64_t v68 = *(char **)v67;
          if (v67[63] < 0)
          {
            operator delete(*((void **)v67 + 5));
            if ((v67[39] & 0x80000000) == 0) {
              goto LABEL_139;
            }
LABEL_142:
            operator delete(*((void **)v67 + 2));
            operator delete(v67);
            size_t v67 = v68;
            if (!v68) {
              goto LABEL_143;
            }
          }
          else
          {
            if (v67[39] < 0) {
              goto LABEL_142;
            }
LABEL_139:
            operator delete(v67);
            size_t v67 = v68;
            if (!v68) {
              goto LABEL_143;
            }
          }
        }
      }
    }
    if (v55 >= 0) {
      long long v59 = &qword_257B578;
    }
    else {
      long long v59 = (uint64_t *)qword_257B578;
    }
    memmove(v58, v59, v56);
    goto LABEL_121;
  }
  uint64_t v71 = v6;
  char v72 = v7;
  if (byte_257B5BF < 0)
  {
    sub_4200(v83, (void *)xmmword_257B5A8, *((unint64_t *)&xmmword_257B5A8 + 1));
  }
  else
  {
    *(_OWORD *)long long v83 = xmmword_257B5A8;
    *(void *)long long __p = unk_257B5B8;
  }
  if (*((char *)v18 + 23) < 0)
  {
    sub_4200(&__p[8], *(void **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v20 = *v18;
    uint64_t v85 = *((void *)v18 + 2);
    *(_OWORD *)&__p[8] = v20;
  }
  sub_2AAA4((uint64_t)&v75, (uint64_t)v83, 1);
  if (SHIBYTE(v85) < 0)
  {
    operator delete(*(void **)&__p[8]);
    if ((__p[7] & 0x80000000) == 0)
    {
LABEL_28:
      size_t v70 = v7;
      if ((v7 & 0x80u) == 0) {
        size_t v21 = v7;
      }
      else {
        size_t v21 = v12;
      }
      if (!v21) {
        goto LABEL_68;
      }
      goto LABEL_38;
    }
  }
  else if ((__p[7] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v83[0]);
  size_t v70 = v7;
  if ((v7 & 0x80u) == 0) {
    size_t v21 = v7;
  }
  else {
    size_t v21 = v12;
  }
  if (!v21) {
    goto LABEL_68;
  }
LABEL_38:
  int v22 = byte_257B58F;
  if (byte_257B58F >= 0) {
    size_t v23 = byte_257B58F;
  }
  else {
    size_t v23 = qword_257B580;
  }
  unint64_t v24 = v21 + v23;
  if (v21 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v24 > 0x16)
  {
    uint64_t v35 = a2;
    uint64_t v36 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v36 = v24 | 7;
    }
    uint64_t v37 = v36 + 1;
    p_dst = (std::string *)operator new(v36 + 1);
    __dst.__r_.__value_.__l.__size_ = v21 + v23;
    __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    a2 = v35;
    if (!v23) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21 + v23;
  if (v23)
  {
LABEL_44:
    if (v22 >= 0) {
      long long v26 = &qword_257B578;
    }
    else {
      long long v26 = (uint64_t *)qword_257B578;
    }
    memmove(p_dst, v26, v23);
  }
LABEL_48:
  uint64_t v27 = (char *)p_dst + v23;
  if (v73 >= 0) {
    uint64_t v28 = &v78;
  }
  else {
    uint64_t v28 = (void *)v6;
  }
  memmove(v27, v28, v21);
  v27[v21] = 0;
  if (byte_257B5A7 >= 0) {
    int v29 = (const std::string::value_type *)&qword_257B590;
  }
  else {
    int v29 = (const std::string::value_type *)qword_257B590;
  }
  if (byte_257B5A7 >= 0) {
    std::string::size_type v30 = byte_257B5A7;
  }
  else {
    std::string::size_type v30 = qword_257B598;
  }
  char v31 = std::string::append(&__dst, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  *(void *)long long __p = *((void *)&v31->__r_.__value_.__l + 2);
  *(_OWORD *)long long v83 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_6581AC((uint64_t)v83, (uint64_t)&v75, a2, 0, &__dst);
  unint64_t v33 = (unint64_t)a4[42];
  if (v33 >= (unint64_t)a4[43])
  {
    uint64_t v34 = sub_5B10A0((uint64_t *)a4 + 41, (uint64_t)&__dst);
  }
  else
  {
    sub_5F3D48((uint64_t)a4[42], (uint64_t)&__dst);
    uint64_t v34 = v33 + 160;
    a4[42] = (long long *)(v33 + 160);
  }
  a4[42] = (long long *)v34;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((__p[7] & 0x80000000) == 0) {
      goto LABEL_68;
    }
  }
  else if ((__p[7] & 0x80000000) == 0)
  {
    goto LABEL_68;
  }
  operator delete(v83[0]);
LABEL_68:
  int v38 = byte_257B58F;
  if (byte_257B58F >= 0) {
    size_t v39 = byte_257B58F;
  }
  else {
    size_t v39 = qword_257B580;
  }
  int v40 = byte_257B5A7;
  if (byte_257B5A7 >= 0) {
    size_t v41 = byte_257B5A7;
  }
  else {
    size_t v41 = qword_257B598;
  }
  unint64_t v42 = v41 + v39;
  if (v41 + v39 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v42 <= 0x16)
  {
    v83[1] = 0;
    *(void *)long long __p = 0;
    v83[0] = 0;
    long long v43 = (char *)v83;
    __p[7] = v41 + v39;
    uint64_t v6 = v71;
    if (!v39) {
      goto LABEL_81;
    }
    goto LABEL_77;
  }
  uint64_t v49 = a2;
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  long long v43 = (char *)operator new(v50 + 1);
  v83[1] = (void *)(v41 + v39);
  *(void *)long long __p = v51 | 0x8000000000000000;
  v83[0] = v43;
  a2 = v49;
  uint64_t v6 = v71;
  if (v39)
  {
LABEL_77:
    if (v38 >= 0) {
      long long v44 = &qword_257B578;
    }
    else {
      long long v44 = (uint64_t *)qword_257B578;
    }
    memmove(v43, v44, v39);
  }
LABEL_81:
  long long v45 = &v43[v39];
  if (v41)
  {
    if (v40 >= 0) {
      long long v46 = &qword_257B590;
    }
    else {
      long long v46 = (uint64_t *)qword_257B590;
    }
    memmove(v45, v46, v41);
  }
  v45[v41] = 0;
  sub_6581AC((uint64_t)v83, (uint64_t)&v75, a2, 0, &__dst);
  unint64_t v47 = (unint64_t)a4[42];
  LOBYTE(v7) = v72;
  if (v47 >= (unint64_t)a4[43])
  {
    uint64_t v48 = sub_5B10A0((uint64_t *)a4 + 41, (uint64_t)&__dst);
  }
  else
  {
    sub_5F3D48((uint64_t)a4[42], (uint64_t)&__dst);
    uint64_t v48 = v47 + 160;
    a4[42] = (long long *)(v47 + 160);
  }
  a4[42] = (long long *)v48;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((__p[7] & 0x80000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_98;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((__p[7] & 0x80000000) != 0)
  {
LABEL_98:
    operator delete(v83[0]);
    unint64_t v52 = (char *)v77;
    if (!v77) {
      goto LABEL_105;
    }
    while (1)
    {
LABEL_102:
      BOOL v53 = *(char **)v52;
      if (v52[63] < 0)
      {
        operator delete(*((void **)v52 + 5));
        if ((v52[39] & 0x80000000) == 0) {
          goto LABEL_101;
        }
LABEL_104:
        operator delete(*((void **)v52 + 2));
        operator delete(v52);
        unint64_t v52 = v53;
        if (!v53) {
          goto LABEL_105;
        }
      }
      else
      {
        if (v52[39] < 0) {
          goto LABEL_104;
        }
LABEL_101:
        operator delete(v52);
        unint64_t v52 = v53;
        if (!v53) {
          goto LABEL_105;
        }
      }
    }
  }
LABEL_95:
  unint64_t v52 = (char *)v77;
  if (v77) {
    goto LABEL_102;
  }
LABEL_105:
  unint64_t v54 = v75;
  int v75 = 0;
  if (v54) {
    operator delete(v54);
  }
  if (v73 >= 0) {
    size_t v19 = v70;
  }
  else {
    size_t v19 = v12;
  }
  if (v19) {
    goto LABEL_111;
  }
LABEL_145:
  if ((v7 & 0x80) != 0) {
    operator delete((void *)v6);
  }
}

void sub_5AD414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  sub_50828((uint64_t)&a21);
  if ((a13 & 0x80) != 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_5AD53C()
{
  double result = (uint64_t **)__chkstk_darwin();
  if (!*(unsigned char *)(v3 + 99)) {
    return result;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  sub_7736E8(v30, *result, v3);
  uint64_t v6 = nullsub_1(v4);
  unint64_t v7 = *(void **)v6;
  int v8 = *(void **)(v6 + 8);
  if (*(void **)v6 == v8) {
    return (uint64_t **)sub_5ADD5C(v30);
  }
  uint64_t v9 = 0;
  uint64_t v28 = (uint64_t *)(v5 + 352);
  long long v26 = *(void **)(v6 + 8);
  uint64_t v27 = v5;
  while (2)
  {
    v33[128] = 0;
    v33[264] = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    v43[0] = 0;
    *(void *)((char *)v43 + 5) = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    int v42 = 0;
    uint64_t v47 = 0x3FF0000000000000;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    char v51 = 5;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    int v55 = 0x7FFFFFFF;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    memset(v59, 0, sizeof(v59));
    uint64_t v62 = -1;
    int v63 = 0x7FFFFFFF;
    uint64_t v64 = 0;
    uint64_t v65 = -1;
    int v66 = -1;
    char v67 = 0;
    sub_7736EC((uint64_t)v30, v7, (uint64_t *)&__p);
    sub_4BCC2C((uint64_t)v33);
    BOOL v11 = __p;
    uint64_t v12 = (uint64_t)v32;
    if (__p != v32)
    {
      int v13 = (char *)__p;
      do
      {
        if (!v13[432])
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        *((void *)v13 + 53) += v9;
        v13 += 1120;
      }
      while (v13 != (char *)v12);
    }
    sub_5B0CFC(v28, *(void *)(v5 + 360), (uint64_t)v11, v12, 0xAF8AF8AF8AF8AF8BLL * ((v12 - (uint64_t)v11) >> 5));
    uint64_t v10 = v7[63];
    uint64_t v14 = (char *)__p;
    if (!__p) {
      goto LABEL_5;
    }
    uint64_t v29 = v7[63];
    uint64_t v15 = v32;
    uint64_t v16 = __p;
    if (v32 == __p) {
      goto LABEL_4;
    }
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = &v15[v17];
      if (v15[v17 - 8])
      {
        sub_3A6CB8((uint64_t)(v18 - 440));
        *(v18 - 8) = 0;
      }
      *((void *)v18 - 60) = off_2438EC8;
      if (*(v18 - 449) < 0) {
        operator delete(*(void **)&v15[v17 - 472]);
      }
      size_t v19 = (void **)&v15[v17];
      long long v20 = &v15[v17 - 488];
      if (*v20) {
        *long long v20 = 0;
      }
      if (*((char *)v19 - 505) < 0)
      {
        operator delete(*(void **)&v15[v17 - 528]);
        size_t v21 = (void **)&v15[v17];
        if ((v15[v17 - 537] & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v21 - 561) & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_31;
        }
      }
      else
      {
        size_t v21 = (void **)&v15[v17];
        if ((v15[v17 - 537] & 0x80000000) == 0) {
          goto LABEL_21;
        }
      }
      operator delete(*(v21 - 70));
      if ((*((char *)v21 - 561) & 0x80000000) == 0)
      {
LABEL_22:
        int v22 = (void **)&v15[v17];
        if ((v15[v17 - 601] & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)&v15[v17 - 584]);
      int v22 = (void **)&v15[v17];
      if ((v15[v17 - 601] & 0x80000000) == 0)
      {
LABEL_23:
        if ((*((char *)v22 - 633) & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(*(v22 - 78));
      if ((*((char *)v22 - 633) & 0x80000000) == 0)
      {
LABEL_24:
        size_t v23 = (void **)&v15[v17];
        if ((v15[v17 - 657] & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_34;
      }
LABEL_33:
      operator delete(*(v19 - 82));
      size_t v23 = (void **)&v15[v17];
      if ((v15[v17 - 657] & 0x80000000) == 0)
      {
LABEL_25:
        unint64_t v24 = (char *)(v23 - 86);
        if (!*((unsigned char *)v23 - 688)) {
          goto LABEL_27;
        }
LABEL_26:
        *unint64_t v24 = 0;
        goto LABEL_27;
      }
LABEL_34:
      operator delete(*(v23 - 85));
      unint64_t v24 = (char *)(v23 - 86);
      if (*((unsigned char *)v23 - 688)) {
        goto LABEL_26;
      }
LABEL_27:
      sub_29D95C((uint64_t)(v18 - 1120));
      v17 -= 1120;
    }
    while (&v15[v17] != v14);
    uint64_t v16 = __p;
    int v8 = v26;
    uint64_t v5 = v27;
LABEL_4:
    long long v32 = v14;
    operator delete(v16);
    uint64_t v10 = v29;
LABEL_5:
    v9 += v10;
    v7 += 132;
    if (v7 != v8) {
      continue;
    }
    return (uint64_t **)sub_5ADD5C(v30);
  }
}

void sub_5AD9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_5ADD5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_5AD9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  unint64_t v13 = STACK[0x2480];
  if (STACK[0x2480])
  {
    uint64_t v14 = STACK[0x2488];
    uint64_t v15 = (void *)STACK[0x2480];
    if (STACK[0x2488] != v13)
    {
      do
        uint64_t v14 = sub_3A6B94(v14 - 1120);
      while (v14 != v13);
      uint64_t v15 = (void *)STACK[0x2480];
    }
    STACK[0x2488] = v13;
    operator delete(v15);
  }
  sub_5ADD5C(va);
  _Unwind_Resume(a1);
}

void **sub_5ADA30(void **a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_5ADCA8(v3 - 47);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_5ADA8C(int *a1, int *a2)
{
  int v3 = *a2;
  if (*a2 < 0) {
    char v4 = -5;
  }
  else {
    char v4 = 5;
  }
  double v5 = (pow((double)(int)(*a2 / 10+ (((103 * (char)(v4 + *a2 % 10)) >> 15) & 1)+ ((103 * (char)(v4 + *a2 % 10)) >> 10)), 1.7)* 0.000167+ 300.0)* 10.0;
  if (v5 >= 0.0)
  {
    if (v5 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v6 = (uint64_t)(v5 + v5) + 1;
  }
  else
  {
    if (v5 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v6 = (uint64_t)(v5 + v5);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_12:
  int v7 = (int)v5;
  int v8 = *a1;
  if (v3 > (int)v5 && v8 < v3 - (int)v5) {
    return 0;
  }
  if (v8 < v3 + v7) {
    return 1;
  }
  double v11 = (double)v7;
  double v12 = v11 + v11;
  if (v11 + v11 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_27;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_27;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_27:
  if (v8 < v3 + (int)v12) {
    return 2;
  }
  double v14 = v11 * 3.0;
  if (v14 >= 0.0)
  {
    if (v14 >= 4.50359963e15) {
      goto LABEL_37;
    }
    uint64_t v15 = (uint64_t)(v14 + v14) + 1;
  }
  else
  {
    if (v14 <= -4.50359963e15) {
      goto LABEL_37;
    }
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_37:
  if (v8 < v3 + (int)v14) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t *sub_5ADCA8(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[44];
  if (v2)
  {
    uint64_t v3 = a1[45];
    char v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_3A6B94(v3 - 1120);
      while ((void *)v3 != v2);
      char v4 = (void *)a1[44];
    }
    a1[45] = (uint64_t)v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[41];
  if (v5)
  {
    uint64_t v6 = a1[42];
    int v7 = (void *)a1[41];
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_4D4B58(v6 - 160);
      while (v6 != v5);
      int v7 = (void *)a1[41];
    }
    a1[42] = v5;
    operator delete(v7);
  }
  sub_3B0290(a1 + 4);
  if (*a1)
  {
    sub_52FA20((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void *sub_5ADD5C(void *a1)
{
  sub_3BDE2C((uint64_t)(a1 + 1147));
  uint64_t v2 = (std::__shared_weak_count *)a1[1146];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_3A6230(a1 + 497);
    uint64_t v3 = (std::__shared_weak_count *)a1[494];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    sub_3A6230(a1 + 497);
    uint64_t v3 = (std::__shared_weak_count *)a1[494];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  char v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_5ADE90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    int v7 = (char *)operator new(376 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[376 * v3];
  uint64_t v15 = &v7[376 * v6];
  sub_5AE024(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 376;
  double v11 = (uint64_t *)*a1;
  uint64_t v10 = (uint64_t *)a1[1];
  if (v10 == (uint64_t *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 47;
      sub_5AE1FC(v8 - 376, (uint64_t)v10);
    }
    while (v10 != v11);
    double v12 = (uint64_t *)*a1;
    uint64_t v10 = (uint64_t *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 47;
        sub_5ADCA8(v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 376;
}

void sub_5AE010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AE1A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5AE024(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = sub_45FD6C(a2);
  *(void *)(a1 + 32) = 0x8000000080000000;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = v5;
  *(_OWORD *)(a1 + 304) = v5;
  *(_DWORD *)(a1 + 320) = 5;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (!sub_45FB38(a2))
  {
    *(_DWORD *)(a1 + 32) = sub_45FE10((uint64_t)a2);
    *(_DWORD *)(a1 + 36) = sub_47EE94((uint64_t)a2, 0, 3);
    *(_DWORD *)(a1 + 296) = sub_47EE94((uint64_t)a2, 1, 3);
    *(_DWORD *)(a1 + 300) = sub_47EE94((uint64_t)a2, 2, 3);
    *(_DWORD *)(a1 + 304) = sub_47EE94((uint64_t)a2, 3, 3);
    *(_DWORD *)(a1 + 308) = sub_47EE94((uint64_t)a2, 4, 3);
    *(_DWORD *)(a1 + 312) = sub_47EE94((uint64_t)a2, 5, 3);
  }
  return a1;
}

void sub_5AE14C(_Unwind_Exception *a1)
{
  sub_50E790((void **)(v2 + 320));
  sub_59213C(v3);
  sub_3B0290((void *)v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_5AE194(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5AE1A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 376;
    sub_5ADCA8((uint64_t *)(i - 376));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_5AE1FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v2 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v3 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v3;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  long long v4 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v4;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  uint64_t v5 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v5;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  __n128 result = *(__n128 *)(a2 + 352);
  *(__n128 *)(a1 + 352) = result;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  return result;
}

void sub_5AE3C8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  long long __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v7 = sub_5AEF24((uint64_t *)&__p, a1);
  uint64_t v13 = v7;
  sub_5AE518((uint64_t)(v7 - 12328), a2);
  sub_5AE8B8((int64x2_t *)(v7 - 12328), a2, a3);
  sub_796F40(v11, (uint64_t)a2, a3);
  sub_7970B4((uint64_t)v11, &__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_59888C((uint64_t)a4, *((void *)v7 - 1402), *((void *)v7 - 1401), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v7 - 1401) - *((void *)v7 - 1402)) >> 4));
  uint64_t v8 = (char *)__p;
  if (__p)
  {
    uint64_t v9 = (uint64_t)v13;
    uint64_t v10 = __p;
    if (v13 != __p)
    {
      do
        uint64_t v9 = sub_5752F4(v9 - 12328);
      while ((char *)v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v13 = v8;
    operator delete(v10);
  }
}

void sub_5AE4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_5AE4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_5AE504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_5AE518(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 7424) != *(void *)(a1 + 7432)) {
    return;
  }
  uint64_t v4 = sub_3750CC(a2);
  uint64_t v5 = sub_3777C0(a2);
  unint64_t v6 = sub_46C760((void *)a1);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = sub_46C8EC((void *)a1, 0);
    sub_3D63DC(v4, *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32), __p);
    if (sub_3D4980(v5, (const void **)__p))
    {
      if (SHIBYTE(v28) < 0)
      {
        *(unsigned char *)__p[0] = 0;
        __p[1] = 0;
        unint64_t v9 = *(void *)(a1 + 7432);
        if (v9 < *(void *)(a1 + 7440))
        {
LABEL_8:
          if (SHIBYTE(v28) < 0)
          {
            sub_4200((unsigned char *)v9, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v10 = *(_OWORD *)__p;
            *(void *)(v9 + 16) = v28;
            *(_OWORD *)unint64_t v9 = v10;
          }
          *(void *)(a1 + 7432) = v9 + 24;
          *(void *)(a1 + 7432) = v9 + 24;
          if (SHIBYTE(v28) < 0)
          {
LABEL_16:
            operator delete(__p[0]);
            if (v7 == 1) {
              goto LABEL_17;
            }
            goto LABEL_24;
          }
LABEL_12:
          if (v7 == 1) {
            goto LABEL_17;
          }
LABEL_24:
          uint64_t v13 = 1;
          while (1)
          {
            uint64_t v15 = (int **)sub_46C8EC((void *)a1, v13);
            uint64_t v16 = (unsigned __int16 *)((char *)*v15 - **v15);
            if (*v16 >= 0xDu && (uint64_t v17 = v16[6]) != 0) {
              int v18 = *(unsigned __int16 *)((char *)*v15 + v17);
            }
            else {
              int v18 = 0;
            }
            uint64_t v19 = v13 - 1;
            long long v20 = (void *)sub_46C8EC((void *)a1, v19);
            size_t v21 = (unsigned __int16 *)(*v20 - *(int *)*v20);
            if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0)
            {
              if (*(unsigned __int16 *)(*v20 + v22) == v18) {
                goto LABEL_42;
              }
            }
            else if (!v18)
            {
LABEL_42:
              unint64_t v25 = *(void *)(a1 + 7432);
              long long v26 = (_OWORD *)(v25 - 24);
              if (v25 >= *(void *)(a1 + 7440))
              {
                uint64_t v14 = sub_55C330((char **)(a1 + 7424), (uint64_t)v26);
              }
              else
              {
                if (*(char *)(v25 - 1) < 0)
                {
                  sub_4200(*(unsigned char **)(a1 + 7432), *(void **)(v25 - 24), *(void *)(v25 - 16));
                }
                else
                {
                  *(_OWORD *)unint64_t v25 = *v26;
                  *(void *)(v25 + 16) = *(void *)(v25 - 8);
                }
                uint64_t v14 = (char *)(v25 + 24);
                *(void *)(a1 + 7432) = v25 + 24;
              }
              *(void *)(a1 + 7432) = v14;
              goto LABEL_27;
            }
            sub_3D63DC(v4, *((unsigned int *)v15 + 8) | ((unint64_t)*((unsigned __int16 *)v15 + 18) << 32), __p);
            if (!sub_3D4980(v5, (const void **)__p)) {
              goto LABEL_38;
            }
            if ((SHIBYTE(v28) & 0x80000000) == 0) {
              break;
            }
            *(unsigned char *)__p[0] = 0;
            __p[1] = 0;
            unint64_t v23 = *(void *)(a1 + 7432);
            if (v23 < *(void *)(a1 + 7440))
            {
LABEL_39:
              if (SHIBYTE(v28) < 0)
              {
                sub_4200((unsigned char *)v23, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v24 = *(_OWORD *)__p;
                *(void *)(v23 + 16) = v28;
                *(_OWORD *)unint64_t v23 = v24;
              }
              *(void *)(a1 + 7432) = v23 + 24;
              *(void *)(a1 + 7432) = v23 + 24;
              if ((SHIBYTE(v28) & 0x80000000) == 0) {
                goto LABEL_27;
              }
LABEL_52:
              operator delete(__p[0]);
              goto LABEL_27;
            }
LABEL_48:
            *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
            if (SHIBYTE(v28) < 0) {
              goto LABEL_52;
            }
LABEL_27:
            uint64_t v13 = v19 + 2;
            if (v13 == v7) {
              goto LABEL_17;
            }
          }
          LOBYTE(__p[0]) = 0;
          HIBYTE(v28) = 0;
LABEL_38:
          unint64_t v23 = *(void *)(a1 + 7432);
          if (v23 < *(void *)(a1 + 7440)) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
LABEL_11:
        *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
        if (SHIBYTE(v28) < 0) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      LOBYTE(__p[0]) = 0;
      HIBYTE(v28) = 0;
    }
    unint64_t v9 = *(void *)(a1 + 7432);
    if (v9 < *(void *)(a1 + 7440)) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 7424);
  for (uint64_t i = *(void *)(a1 + 7432); v11 != i; v11 += 24)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      if (*(void *)(v11 + 8)) {
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v11 + 23))
    {
LABEL_23:
      std::string::operator=((std::string *)(a1 + 7400), (const std::string *)v11);
      return;
    }
  }
}

void sub_5AE878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 7432) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5AE8B8(int64x2_t *a1, void *a2, uint64_t a3)
{
  if (!sub_46C760(a1) || a1[74].i64[0] != a1[74].i64[1]) {
    return;
  }
  unint64_t v6 = (long long *)a1[464].i64[0];
  if (*((char *)v6 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v6, *((void *)v6 + 1));
    uint64_t v8 = a1[464].i64[1];
    if ((*(char *)(v8 - 1) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    sub_4200(&v67, *(void **)(v8 - 24), *(void *)(v8 - 16));
    goto LABEL_8;
  }
  long long v7 = *v6;
  uint64_t v70 = *((void *)v6 + 2);
  long long __dst = v7;
  uint64_t v8 = a1[464].i64[1];
  if (*(char *)(v8 - 1) < 0) {
    goto LABEL_7;
  }
LABEL_5:
  long long v9 = *(_OWORD *)(v8 - 24);
  uint64_t v68 = *(void *)(v8 - 8);
  long long v67 = v9;
LABEL_8:
  uint64_t v10 = HIBYTE(v70);
  unint64_t v11 = *((void *)&__dst + 1);
  if (v70 >= 0) {
    uint64_t v12 = HIBYTE(v70);
  }
  else {
    uint64_t v12 = *((void *)&__dst + 1);
  }
  uint64_t v13 = HIBYTE(v68);
  if (v68 < 0) {
    uint64_t v13 = *((void *)&v67 + 1);
  }
  if (v12 != v13) {
    goto LABEL_24;
  }
  if (v68 >= 0) {
    uint64_t v14 = (unsigned __int8 *)&v67;
  }
  else {
    uint64_t v14 = (unsigned __int8 *)v67;
  }
  if ((v70 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v70))
    {
LABEL_22:
      long long v65 = __dst;
      uint64_t v66 = v70;
      goto LABEL_25;
    }
    p_dst = (unsigned __int8 *)&__dst;
    while (*p_dst == *v14)
    {
      ++p_dst;
      ++v14;
      if (!--v10) {
        goto LABEL_22;
      }
    }
    goto LABEL_24;
  }
  uint64_t v16 = (void *)__dst;
  if (memcmp((const void *)__dst, v14, *((size_t *)&__dst + 1)))
  {
LABEL_24:
    HIBYTE(v66) = 0;
    LOBYTE(v65) = 0;
    goto LABEL_25;
  }
  sub_4200(&v65, v16, v11);
LABEL_25:
  long long __p = 0uLL;
  uint64_t v52 = 0;
  sub_835BE4((uint64_t)v62, a2, 0, (uint64_t)&__p);
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = sub_3750CC(a2);
  unint64_t v18 = sub_46C760(a1);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v48 = v17;
    long long v20 = a1 + 464;
    while (1)
    {
      uint64_t v21 = sub_46C8EC(a1, (uint64_t)v19);
      uint64_t v22 = sub_4D4928(v20, (unint64_t)v19);
      uint64_t v61 = *(void *)(v21 + 32);
      if (!v19)
      {
        sub_836AD0((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
        uint64_t v49 = 0;
        unint64_t v28 = a1[74].u64[1];
        if (v28 >= a1[75].i64[0]) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }
      uint64_t v23 = sub_46C8EC(a1, (uint64_t)(v19 - 1));
      if (sub_2E79EC(v17, *(void *)(v23 + 32), *(void *)(v21 + 32))) {
        break;
      }
LABEL_71:
      sub_836AD0((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
      if (sub_6F317C((unsigned __int8 *)&__p, (unsigned __int8 *)(a1[74].i64[1] - 160))) {
        goto LABEL_76;
      }
      uint64_t v49 = v19;
      unint64_t v28 = a1[74].u64[1];
      if (v28 >= a1[75].i64[0])
      {
LABEL_74:
        uint64_t v47 = sub_5B07A8(a1 + 74, &__p, &v49);
        goto LABEL_75;
      }
LABEL_73:
      sub_4AA8E0((char *)a1[74].i64[1], &__p);
      *(void *)(v28 + 152) = v49;
      uint64_t v47 = v28 + 160;
      a1[74].i64[1] = v28 + 160;
LABEL_75:
      a1[74].i64[1] = v47;
LABEL_76:
      if (v60 < 0)
      {
        operator delete(v59);
        if ((v58 & 0x80000000) == 0)
        {
LABEL_78:
          if ((v56 & 0x80000000) == 0) {
            goto LABEL_79;
          }
          goto LABEL_83;
        }
      }
      else if ((v58 & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_79:
        if (v54 < 0) {
          goto LABEL_29;
        }
        goto LABEL_84;
      }
LABEL_83:
      operator delete(v55);
      if (v54 < 0)
      {
LABEL_29:
        operator delete(v53);
        if (SHIBYTE(v52) < 0) {
          goto LABEL_85;
        }
        goto LABEL_30;
      }
LABEL_84:
      if (SHIBYTE(v52) < 0) {
LABEL_85:
      }
        operator delete((void *)__p);
LABEL_30:
      if (++v19 == (char *)v18) {
        goto LABEL_86;
      }
    }
    long long v24 = (int *)sub_2D5D58(v17, *(unsigned int *)(v23 + 32) | ((unint64_t)*(unsigned __int16 *)(v23 + 36) << 32));
    unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 0x25u && (uint64_t v26 = v25[18]) != 0) {
      uint64_t v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
    }
    else {
      uint64_t v27 = 0;
    }
    sub_2DE69C(v27, &__p);
    uint64_t v29 = (int *)sub_2D5D58(v17, *(unsigned int *)(v21 + 32) | ((unint64_t)*(unsigned __int16 *)(v21 + 36) << 32));
    std::string::size_type v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 >= 0x25u && (uint64_t v31 = v30[18]) != 0) {
      long long v32 = (unsigned int *)((char *)v29 + v31 + *(unsigned int *)((char *)v29 + v31));
    }
    else {
      long long v32 = 0;
    }
    sub_2DE69C(v32, &v49);
    unint64_t v33 = v18;
    long long v34 = v20;
    uint64_t v35 = a3;
    uint64_t v36 = *((void *)&__p + 1);
    uint64_t v37 = __p;
    long long v38 = (void **)v49;
    if (*((void *)&__p + 1) - (void)__p == (char *)v50 - (unsigned char *)v49)
    {
      if ((void)__p == *((void *)&__p + 1))
      {
        char v40 = 1;
        if (!v49) {
          goto LABEL_62;
        }
      }
      else
      {
        do
        {
          BOOL v39 = sub_2DE5CC(v37, (uint64_t)v38);
          char v40 = v39;
          v37 += 40;
          v38 += 5;
        }
        while (v37 != v36 && v39);
        long long v38 = (void **)v49;
        if (!v49) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      char v40 = 0;
      if (!v49) {
        goto LABEL_62;
      }
    }
    int v42 = v50;
    long long v43 = v38;
    if (v50 != v38)
    {
      do
      {
        if (*((char *)v42 - 9) < 0) {
          operator delete(*(v42 - 4));
        }
        v42 -= 5;
      }
      while (v42 != v38);
      long long v43 = v49;
    }
    uint64_t v50 = v38;
    operator delete(v43);
LABEL_62:
    uint64_t v44 = __p;
    if ((void)__p)
    {
      uint64_t v45 = *((void *)&__p + 1);
      long long v46 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v45 - 9) < 0) {
            operator delete(*(void **)(v45 - 32));
          }
          v45 -= 40;
        }
        while (v45 != v44);
        long long v46 = (void *)__p;
      }
      *((void *)&__p + 1) = v44;
      operator delete(v46);
    }
    a3 = v35;
    long long v20 = v34;
    unint64_t v18 = v33;
    uint64_t v17 = v48;
    if (v40) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_86:
  if ((v64 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v66) & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_92:
    operator delete((void *)v65);
    if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v70) & 0x80000000) == 0) {
        return;
      }
LABEL_94:
      operator delete((void *)__dst);
      return;
    }
    goto LABEL_93;
  }
  operator delete(v63);
  if (SHIBYTE(v66) < 0) {
    goto LABEL_92;
  }
LABEL_88:
  if ((SHIBYTE(v68) & 0x80000000) == 0) {
    goto LABEL_89;
  }
LABEL_93:
  operator delete((void *)v67);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_94;
  }
}

void sub_5AEE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 121) < 0)
  {
    operator delete(*(void **)(v43 - 144));
    if (*(char *)(v43 - 89) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v43 - 112));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v43 - 89) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

char *sub_5AEF24(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFF55E3181697D6CDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x550E73F4B4149) {
    sub_2E00();
  }
  if (0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xFF55E3181697D6CDLL * ((a1[2] - *a1) >> 3) >= 0x2A8739FA5A0A4) {
    unint64_t v6 = 0x550E73F4B4149;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x550E73F4B4149) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(12328 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = &v7[12328 * v3];
  uint64_t v15 = &v7[12328 * v6];
  sub_650170(v14, a2, 0);
  uint64_t v8 = (uint64_t)v14;
  long long v9 = v14 + 12328;
  unint64_t v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 12328;
      uint64_t v8 = sub_5AF130(v8 - 12328, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 12328;
        sub_5752F4((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 12328;
}

void sub_5AF0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AF0D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5AF0D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 12328;
    sub_5752F4(i - 12328);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_5AF130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 9976;
  uint64_t v5 = a2 + 9976;
  sub_463750(a1, a2);
  *(_WORD *)(v6 + 1056) = *(_WORD *)(a2 + 1056);
  *(void *)(v6 + 1064) = 0;
  *(_OWORD *)(v6 + 1072) = 0u;
  *(void *)(v6 + 1064) = *(void *)(a2 + 1064);
  *(void *)(v6 + 1072) = *(void *)(a2 + 1072);
  *(void *)(v6 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(void *)(v6 + 1104) = 0;
  *(_OWORD *)(v6 + 1088) = 0u;
  *(_OWORD *)(v6 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(v6 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a2 + 1104) = 0;
  *(_OWORD *)(a2 + 1088) = 0u;
  *(void *)(v6 + 1128) = 0;
  *(_OWORD *)(v6 + 1112) = 0u;
  *(void *)(v6 + 1112) = *(void *)(a2 + 1112);
  *(void *)(v6 + 1120) = *(void *)(a2 + 1120);
  *(void *)(v6 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a2 + 1128) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(void *)(v6 + 1152) = 0;
  *(_OWORD *)(v6 + 1136) = 0u;
  *(_OWORD *)(v6 + 1136) = *(_OWORD *)(a2 + 1136);
  *(void *)(v6 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a2 + 1152) = 0;
  *(_OWORD *)(a2 + 1136) = 0u;
  *(void *)(v6 + 1176) = 0;
  *(_OWORD *)(v6 + 1160) = 0u;
  *(void *)(v6 + 1160) = *(void *)(a2 + 1160);
  *(void *)(v6 + 1168) = *(void *)(a2 + 1168);
  *(void *)(v6 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a2 + 1176) = 0;
  *(_OWORD *)(a2 + 1160) = 0u;
  *(void *)(v6 + 1200) = 0;
  *(_OWORD *)(v6 + 1184) = 0u;
  *(_OWORD *)(v6 + 1184) = *(_OWORD *)(a2 + 1184);
  *(void *)(v6 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a2 + 1200) = 0;
  *(_OWORD *)(a2 + 1184) = 0u;
  long long v7 = *(_OWORD *)(a2 + 1208);
  *(void *)(v6 + 1224) = *(void *)(a2 + 1224);
  *(_OWORD *)(v6 + 1208) = v7;
  *(void *)(a2 + 1208) = 0;
  *(_OWORD *)(a2 + 1216) = 0u;
  long long v8 = *(_OWORD *)(a2 + 1232);
  *(void *)(v6 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)(v6 + 1232) = v8;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(void *)(a2 + 1232) = 0;
  uint64_t v9 = v6 + 1256;
  *(void *)(v6 + 1272) = 0;
  *(_OWORD *)(v6 + 1256) = 0u;
  *(void *)(v6 + 1256) = *(void *)(a2 + 1256);
  *(void *)(v6 + 1264) = *(void *)(a2 + 1264);
  *(void *)(v6 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1256) = 0u;
  *(void *)(v6 + 1296) = 0;
  *(_OWORD *)(v6 + 1280) = 0u;
  *(_OWORD *)(v6 + 1280) = *(_OWORD *)(a2 + 1280);
  *(void *)(v6 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a2 + 1296) = 0;
  *(_OWORD *)(a2 + 1280) = 0u;
  sub_4F4498(v6 + 1304, a2 + 1304);
  sub_4F4498(a1 + 1800, a2 + 1800);
  *(void *)(a1 + 2312) = 0;
  *(_OWORD *)(v9 + 1040) = 0u;
  *(void *)(v9 + 1040) = *(void *)(a2 + 2296);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  *(void *)(a2 + 2312) = 0;
  *(_OWORD *)(a2 + 2296) = 0u;
  *(void *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a2 + 2320);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a2 + 2336) = 0;
  *(_OWORD *)(a2 + 2320) = 0u;
  sub_5B01C8(a1 + 2344, a2 + 2344);
  *(_OWORD *)(a1 + 7144) = 0u;
  *(void *)(a1 + 7160) = 0;
  *(void *)(a1 + 7144) = *(void *)(a2 + 7144);
  *(void *)(a1 + 7152) = *(void *)(a2 + 7152);
  *(void *)(a1 + 7160) = *(void *)(a2 + 7160);
  *(_OWORD *)(a2 + 7144) = 0u;
  *(void *)(a2 + 7160) = 0;
  *(void *)(a1 + 7184) = 0;
  *(_OWORD *)(a1 + 7168) = 0u;
  *(_OWORD *)(a1 + 7168) = *(_OWORD *)(a2 + 7168);
  *(void *)(a1 + 7184) = *(void *)(a2 + 7184);
  *(void *)(a2 + 7184) = 0;
  *(_OWORD *)(a2 + 7168) = 0u;
  *(void *)(a1 + 7208) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(void *)(a1 + 7192) = *(void *)(a2 + 7192);
  *(void *)(a1 + 7200) = *(void *)(a2 + 7200);
  *(void *)(a1 + 7208) = *(void *)(a2 + 7208);
  *(void *)(a2 + 7208) = 0;
  *(_OWORD *)(a2 + 7192) = 0u;
  *(void *)(a1 + 7232) = 0;
  *(_OWORD *)(a1 + 7216) = 0u;
  *(_OWORD *)(a1 + 7216) = *(_OWORD *)(a2 + 7216);
  *(void *)(a1 + 7232) = *(void *)(a2 + 7232);
  *(void *)(a2 + 7232) = 0;
  *(_OWORD *)(a2 + 7216) = 0u;
  *(void *)(a1 + 7256) = 0;
  *(_OWORD *)(a1 + 7240) = 0u;
  *(void *)(a1 + 7240) = *(void *)(a2 + 7240);
  *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
  *(void *)(a1 + 7256) = *(void *)(a2 + 7256);
  *(_OWORD *)(a2 + 7240) = 0u;
  uint64_t v10 = *(void *)(a2 + 7264);
  *(_OWORD *)(a2 + 7256) = 0u;
  *(void *)(a1 + 7264) = v10;
  int v11 = *(_DWORD *)(a2 + 7272);
  *(unsigned char *)(a1 + 7276) = *(unsigned char *)(a2 + 7276);
  *(_DWORD *)(a1 + 7272) = v11;
  long long v12 = *(_OWORD *)(a2 + 7280);
  *(void *)(a1 + 7296) = *(void *)(a2 + 7296);
  *(_OWORD *)(a1 + 7280) = v12;
  *(void *)(a2 + 7280) = 0;
  *(_OWORD *)(a2 + 7288) = 0u;
  long long v13 = *(_OWORD *)(a2 + 7304);
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  *(_OWORD *)(a1 + 7304) = v13;
  *(_OWORD *)(a2 + 7312) = 0u;
  *(void *)(a2 + 7304) = 0;
  *(void *)(a1 + 7344) = 0;
  *(_OWORD *)(a1 + 7328) = 0u;
  *(_OWORD *)(a1 + 7328) = *(_OWORD *)(a2 + 7328);
  *(void *)(a1 + 7344) = *(void *)(a2 + 7344);
  *(void *)(a2 + 7344) = 0;
  *(_OWORD *)(a2 + 7328) = 0u;
  *(_OWORD *)(a1 + 7352) = 0u;
  *(void *)(a1 + 7368) = 0;
  *(void *)(a1 + 7352) = *(void *)(a2 + 7352);
  *(void *)(a1 + 7360) = *(void *)(a2 + 7360);
  *(void *)(a1 + 7368) = *(void *)(a2 + 7368);
  *(_OWORD *)(a2 + 7352) = 0u;
  *(void *)(a2 + 7368) = 0;
  long long v14 = *(_OWORD *)(a2 + 7376);
  *(void *)(a1 + 7392) = *(void *)(a2 + 7392);
  *(_OWORD *)(a1 + 7376) = v14;
  *(void *)(a2 + 7376) = 0;
  *(_OWORD *)(a2 + 7384) = 0u;
  uint64_t v15 = *(void *)(a2 + 7416);
  *(_OWORD *)(a1 + 7400) = *(_OWORD *)(a2 + 7400);
  *(void *)(a1 + 7416) = v15;
  *(_OWORD *)(a2 + 7408) = 0u;
  *(void *)(a2 + 7400) = 0;
  *(void *)(a1 + 7440) = 0;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7424) = *(_OWORD *)(a2 + 7424);
  *(void *)(a1 + 7440) = *(void *)(a2 + 7440);
  *(void *)(a2 + 7440) = 0;
  *(_OWORD *)(a2 + 7424) = 0u;
  *(_OWORD *)(a1 + 7448) = 0u;
  *(void *)(a1 + 7464) = 0;
  *(void *)(a1 + 7448) = *(void *)(a2 + 7448);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(void *)(a1 + 7464) = *(void *)(a2 + 7464);
  *(_OWORD *)(a2 + 7448) = 0u;
  *(void *)(a2 + 7464) = 0;
  *(void *)(a1 + 7488) = 0;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7472) = *(_OWORD *)(a2 + 7472);
  *(void *)(a1 + 7488) = *(void *)(a2 + 7488);
  *(void *)(a2 + 7488) = 0;
  *(_OWORD *)(a2 + 7472) = 0u;
  *(_OWORD *)(a1 + 7496) = 0u;
  *(void *)(a1 + 7512) = 0;
  *(void *)(a1 + 7496) = *(void *)(a2 + 7496);
  *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
  *(void *)(a1 + 7512) = *(void *)(a2 + 7512);
  *(_OWORD *)(a2 + 7496) = 0u;
  *(void *)(a2 + 7512) = 0;
  sub_5AA6B0(a1 + 7520, a2 + 7520);
  sub_5AA6B0(a1 + 8336, a2 + 8336);
  *(void *)(a1 + 9168) = 0;
  *(_OWORD *)(a1 + 9152) = 0u;
  *(_OWORD *)(a1 + 9152) = *(_OWORD *)(a2 + 9152);
  *(void *)(a1 + 9168) = *(void *)(a2 + 9168);
  *(void *)(a2 + 9168) = 0;
  *(_OWORD *)(a2 + 9152) = 0u;
  *(void *)(a1 + 9192) = 0;
  *(_OWORD *)(a1 + 9176) = 0u;
  *(void *)(a1 + 9176) = *(void *)(a2 + 9176);
  *(void *)(a1 + 9184) = *(void *)(a2 + 9184);
  *(void *)(a1 + 9192) = *(void *)(a2 + 9192);
  *(void *)(a2 + 9192) = 0;
  *(_OWORD *)(a2 + 9176) = 0u;
  *(void *)(a1 + 9216) = 0;
  *(_OWORD *)(a1 + 9200) = 0u;
  *(_OWORD *)(a1 + 9200) = *(_OWORD *)(a2 + 9200);
  *(void *)(a1 + 9216) = *(void *)(a2 + 9216);
  *(void *)(a2 + 9216) = 0;
  *(_OWORD *)(a2 + 9200) = 0u;
  *(void *)(a1 + 9240) = 0;
  *(_OWORD *)(a1 + 9224) = 0u;
  *(void *)(a1 + 9224) = *(void *)(a2 + 9224);
  *(void *)(a1 + 9232) = *(void *)(a2 + 9232);
  *(void *)(a1 + 9240) = *(void *)(a2 + 9240);
  *(_OWORD *)(a2 + 9224) = 0u;
  uint64_t v16 = *(void *)(a2 + 9248);
  *(_OWORD *)(a2 + 9240) = 0u;
  *(void *)(a1 + 9248) = v16;
  int v17 = *(_DWORD *)(a2 + 9256);
  *(unsigned char *)(a1 + 9260) = *(unsigned char *)(a2 + 9260);
  *(_DWORD *)(a1 + 9256) = v17;
  long long v18 = *(_OWORD *)(a2 + 9264);
  *(void *)(a1 + 9280) = *(void *)(a2 + 9280);
  *(_OWORD *)(a1 + 9264) = v18;
  *(void *)(a2 + 9264) = 0;
  *(_OWORD *)(a2 + 9272) = 0u;
  long long v19 = *(_OWORD *)(a2 + 9288);
  *(void *)(a1 + 9304) = *(void *)(a2 + 9304);
  *(_OWORD *)(a1 + 9288) = v19;
  *(_OWORD *)(a2 + 9296) = 0u;
  *(void *)(a2 + 9288) = 0;
  *(void *)(a1 + 9328) = 0;
  *(_OWORD *)(a1 + 9312) = 0u;
  *(_OWORD *)(a1 + 9312) = *(_OWORD *)(a2 + 9312);
  *(void *)(a1 + 9328) = *(void *)(a2 + 9328);
  *(void *)(a2 + 9328) = 0;
  *(_OWORD *)(a2 + 9312) = 0u;
  *(void *)(a1 + 9352) = 0;
  *(_OWORD *)(a1 + 9336) = 0u;
  *(void *)(a1 + 9336) = *(void *)(a2 + 9336);
  *(void *)(a1 + 9344) = *(void *)(a2 + 9344);
  *(void *)(a1 + 9352) = *(void *)(a2 + 9352);
  *(void *)(a2 + 9352) = 0;
  *(_OWORD *)(a2 + 9336) = 0u;
  *(void *)(a1 + 9376) = 0;
  *(_OWORD *)(a1 + 9360) = 0u;
  *(_OWORD *)(a1 + 9360) = *(_OWORD *)(a2 + 9360);
  *(void *)(a1 + 9376) = *(void *)(a2 + 9376);
  *(void *)(a2 + 9376) = 0;
  *(_OWORD *)(a2 + 9360) = 0u;
  *(void *)(a1 + 9400) = 0;
  *(_OWORD *)(a1 + 9384) = 0u;
  *(void *)(a1 + 9384) = *(void *)(a2 + 9384);
  *(void *)(a1 + 9392) = *(void *)(a2 + 9392);
  *(void *)(a1 + 9400) = *(void *)(a2 + 9400);
  *(_OWORD *)(a2 + 9384) = 0u;
  uint64_t v20 = *(void *)(a2 + 9408);
  *(_OWORD *)(a2 + 9400) = 0u;
  *(void *)(a1 + 9408) = v20;
  int v21 = *(_DWORD *)(a2 + 9416);
  *(unsigned char *)(a1 + 9420) = *(unsigned char *)(a2 + 9420);
  *(_DWORD *)(a1 + 9416) = v21;
  long long v22 = *(_OWORD *)(a2 + 9424);
  *(void *)(a1 + 9440) = *(void *)(a2 + 9440);
  *(_OWORD *)(a1 + 9424) = v22;
  *(void *)(a2 + 9424) = 0;
  *(_OWORD *)(a2 + 9432) = 0u;
  long long v23 = *(_OWORD *)(a2 + 9448);
  *(void *)(a1 + 9464) = *(void *)(a2 + 9464);
  *(_OWORD *)(a1 + 9448) = v23;
  *(_OWORD *)(a2 + 9456) = 0u;
  *(void *)(a2 + 9448) = 0;
  *(void *)(a1 + 9488) = 0;
  *(_OWORD *)(a1 + 9472) = 0u;
  *(_OWORD *)(a1 + 9472) = *(_OWORD *)(a2 + 9472);
  *(void *)(a1 + 9488) = *(void *)(a2 + 9488);
  *(void *)(a2 + 9488) = 0;
  *(_OWORD *)(a2 + 9472) = 0u;
  *(void *)(a1 + 9512) = 0;
  *(_OWORD *)(a1 + 9496) = 0u;
  *(void *)(a1 + 9496) = *(void *)(a2 + 9496);
  *(void *)(a1 + 9504) = *(void *)(a2 + 9504);
  *(void *)(a1 + 9512) = *(void *)(a2 + 9512);
  *(void *)(a2 + 9512) = 0;
  *(_OWORD *)(a2 + 9496) = 0u;
  *(void *)(a1 + 9536) = 0;
  *(_OWORD *)(a1 + 9520) = 0u;
  *(_OWORD *)(a1 + 9520) = *(_OWORD *)(a2 + 9520);
  *(void *)(a1 + 9536) = *(void *)(a2 + 9536);
  *(void *)(a2 + 9536) = 0;
  *(_OWORD *)(a2 + 9520) = 0u;
  *(void *)(a1 + 9560) = 0;
  *(_OWORD *)(a1 + 9544) = 0u;
  *(void *)(a1 + 9544) = *(void *)(a2 + 9544);
  *(void *)(a1 + 9552) = *(void *)(a2 + 9552);
  *(void *)(a1 + 9560) = *(void *)(a2 + 9560);
  *(_OWORD *)(a2 + 9544) = 0u;
  uint64_t v24 = *(void *)(a2 + 9568);
  *(_OWORD *)(a2 + 9560) = 0u;
  *(void *)(a1 + 9568) = v24;
  int v25 = *(_DWORD *)(a2 + 9576);
  *(unsigned char *)(a1 + 9580) = *(unsigned char *)(a2 + 9580);
  *(_DWORD *)(a1 + 9576) = v25;
  long long v26 = *(_OWORD *)(a2 + 9584);
  *(void *)(a1 + 9600) = *(void *)(a2 + 9600);
  *(_OWORD *)(a1 + 9584) = v26;
  *(void *)(a2 + 9584) = 0;
  *(_OWORD *)(a2 + 9592) = 0u;
  long long v27 = *(_OWORD *)(a2 + 9608);
  *(void *)(a1 + 9624) = *(void *)(a2 + 9624);
  *(_OWORD *)(a1 + 9608) = v27;
  *(_OWORD *)(a2 + 9616) = 0u;
  *(void *)(a2 + 9608) = 0;
  *(void *)(a1 + 9648) = 0;
  *(_OWORD *)(a1 + 9632) = 0u;
  *(_OWORD *)(a1 + 9632) = *(_OWORD *)(a2 + 9632);
  *(void *)(a1 + 9648) = *(void *)(a2 + 9648);
  *(void *)(a2 + 9648) = 0;
  *(_OWORD *)(a2 + 9632) = 0u;
  *(void *)(a1 + 9672) = 0;
  *(_OWORD *)(a1 + 9656) = 0u;
  *(void *)(a1 + 9656) = *(void *)(a2 + 9656);
  *(void *)(a1 + 9664) = *(void *)(a2 + 9664);
  *(void *)(a1 + 9672) = *(void *)(a2 + 9672);
  *(void *)(a2 + 9672) = 0;
  *(_OWORD *)(a2 + 9656) = 0u;
  *(void *)(a1 + 9696) = 0;
  *(_OWORD *)(a1 + 9680) = 0u;
  *(_OWORD *)(a1 + 9680) = *(_OWORD *)(a2 + 9680);
  *(void *)(a1 + 9696) = *(void *)(a2 + 9696);
  *(void *)(a2 + 9696) = 0;
  *(_OWORD *)(a2 + 9680) = 0u;
  *(void *)(a1 + 9720) = 0;
  *(_OWORD *)(a1 + 9704) = 0u;
  *(void *)(a1 + 9704) = *(void *)(a2 + 9704);
  *(void *)(a1 + 9712) = *(void *)(a2 + 9712);
  *(void *)(a1 + 9720) = *(void *)(a2 + 9720);
  *(_OWORD *)(a2 + 9704) = 0u;
  uint64_t v28 = *(void *)(a2 + 9728);
  *(_OWORD *)(a2 + 9720) = 0u;
  *(void *)(a1 + 9728) = v28;
  int v29 = *(_DWORD *)(a2 + 9736);
  *(unsigned char *)(a1 + 9740) = *(unsigned char *)(a2 + 9740);
  *(_DWORD *)(a1 + 9736) = v29;
  long long v30 = *(_OWORD *)(a2 + 9744);
  *(void *)(a1 + 9760) = *(void *)(a2 + 9760);
  *(_OWORD *)(a1 + 9744) = v30;
  *(void *)(a2 + 9744) = 0;
  *(_OWORD *)(a2 + 9752) = 0u;
  long long v31 = *(_OWORD *)(a2 + 9768);
  *(void *)(a1 + 9784) = *(void *)(a2 + 9784);
  *(_OWORD *)(a1 + 9768) = v31;
  *(_OWORD *)(a2 + 9776) = 0u;
  *(void *)(a2 + 9768) = 0;
  *(void *)(a1 + 9808) = 0;
  *(_OWORD *)(a1 + 9792) = 0u;
  *(_OWORD *)(a1 + 9792) = *(_OWORD *)(a2 + 9792);
  *(void *)(a1 + 9808) = *(void *)(a2 + 9808);
  *(void *)(a2 + 9808) = 0;
  *(void *)(a2 + 9800) = 0;
  *(void *)(a2 + 9792) = 0;
  *(void *)(a1 + 9832) = 0;
  *(_OWORD *)(a1 + 9816) = 0u;
  *(void *)(a1 + 9816) = *(void *)(a2 + 9816);
  *(void *)(a1 + 9824) = *(void *)(a2 + 9824);
  *(void *)(a1 + 9832) = *(void *)(a2 + 9832);
  *(void *)(a2 + 9832) = 0;
  *(void *)(a2 + 9824) = 0;
  *(void *)(a2 + 9816) = 0;
  *(void *)(a1 + 9856) = 0;
  *(_OWORD *)(a1 + 9840) = 0u;
  *(_OWORD *)(a1 + 9840) = *(_OWORD *)(a2 + 9840);
  *(void *)(a1 + 9856) = *(void *)(a2 + 9856);
  *(void *)(a2 + 9856) = 0;
  *(void *)(a2 + 9848) = 0;
  *(void *)(a2 + 9840) = 0;
  *(void *)(a1 + 9880) = 0;
  *(_OWORD *)(a1 + 9864) = 0u;
  *(void *)(a1 + 9864) = *(void *)(a2 + 9864);
  *(void *)(a1 + 9872) = *(void *)(a2 + 9872);
  *(void *)(a1 + 9880) = *(void *)(a2 + 9880);
  *(void *)(a2 + 9880) = 0;
  *(void *)(a2 + 9872) = 0;
  *(void *)(a2 + 9864) = 0;
  uint64_t v32 = *(void *)(a2 + 9888);
  *(void *)(a2 + 9888) = 0;
  *(void *)(a1 + 9888) = v32;
  int v33 = *(_DWORD *)(a2 + 9896);
  *(unsigned char *)(a1 + 9900) = *(unsigned char *)(a2 + 9900);
  *(_DWORD *)(a1 + 9896) = v33;
  long long v34 = *(_OWORD *)(a2 + 9904);
  *(void *)(a1 + 9920) = *(void *)(a2 + 9920);
  *(_OWORD *)(a1 + 9904) = v34;
  *(void *)(a2 + 9904) = 0;
  *(_OWORD *)(a2 + 9912) = 0u;
  long long v35 = *(_OWORD *)(a2 + 9928);
  *(void *)(a1 + 9944) = *(void *)(a2 + 9944);
  *(_OWORD *)(a1 + 9928) = v35;
  *(_OWORD *)(a2 + 9936) = 0u;
  *(void *)(a2 + 9928) = 0;
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(_OWORD *)(a1 + 9952) = *(_OWORD *)(a2 + 9952);
  *(void *)(a1 + 9968) = *(void *)(a2 + 9968);
  *(void *)(a2 + 9968) = 0;
  *(void *)(a2 + 9960) = 0;
  *(void *)(a2 + 9952) = 0;
  *(_WORD *)uint64_t v4 = *(_WORD *)v5;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(void *)(a1 + 9984) = 0;
  *(_OWORD *)(a1 + 9984) = *(_OWORD *)(a2 + 9984);
  *(void *)(a1 + 10000) = *(void *)(a2 + 10000);
  *(void *)(a2 + 10000) = 0;
  *(void *)(a2 + 9992) = 0;
  *(void *)(a2 + 9984) = 0;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(void *)(a1 + 10024) = 0;
  *(void *)(a1 + 10008) = *(void *)(a2 + 10008);
  *(void *)(a1 + 10016) = *(void *)(a2 + 10016);
  *(void *)(a1 + 10024) = *(void *)(a2 + 10024);
  *(void *)(a2 + 10024) = 0;
  *(void *)(a2 + 10016) = 0;
  *(void *)(a2 + 10008) = 0;
  *(void *)(a1 + 10048) = 0;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10032) = *(_OWORD *)(a2 + 10032);
  *(void *)(a1 + 10048) = *(void *)(a2 + 10048);
  *(void *)(a2 + 10048) = 0;
  *(void *)(a2 + 10040) = 0;
  *(void *)(a2 + 10032) = 0;
  *(_OWORD *)(a1 + 10056) = 0u;
  *(void *)(a1 + 10072) = 0;
  *(void *)(a1 + 10056) = *(void *)(a2 + 10056);
  *(void *)(a1 + 10064) = *(void *)(a2 + 10064);
  *(void *)(a1 + 10072) = *(void *)(a2 + 10072);
  *(void *)(a2 + 10072) = 0;
  *(void *)(a2 + 10064) = 0;
  *(void *)(a2 + 10056) = 0;
  long long v36 = *(_OWORD *)(a2 + 10080);
  *(void *)(a1 + 10096) = *(void *)(a2 + 10096);
  *(_OWORD *)(a1 + 10080) = v36;
  *(_OWORD *)(a2 + 10088) = 0u;
  *(void *)(a2 + 10080) = 0;
  *(_OWORD *)(a1 + 10104) = *(_OWORD *)(a2 + 10104);
  *(_OWORD *)(a1 + 10128) = 0u;
  *(void *)(a1 + 10120) = 0;
  *(void *)(a1 + 10120) = *(void *)(a2 + 10120);
  *(void *)(a1 + 10128) = *(void *)(a2 + 10128);
  *(void *)(a1 + 10136) = *(void *)(a2 + 10136);
  *(void *)(a2 + 10136) = 0;
  *(void *)(a2 + 10128) = 0;
  *(void *)(a2 + 10120) = 0;
  *(void *)(a1 + 10160) = 0;
  *(_OWORD *)(a1 + 10144) = 0u;
  *(_OWORD *)(a1 + 10144) = *(_OWORD *)(a2 + 10144);
  *(void *)(a1 + 10160) = *(void *)(a2 + 10160);
  *(void *)(a2 + 10160) = 0;
  *(void *)(a2 + 10152) = 0;
  *(void *)(a2 + 10144) = 0;
  *(_DWORD *)(a1 + 10168) = *(_DWORD *)(a2 + 10168);
  *(_OWORD *)(a1 + 10184) = 0u;
  *(void *)(a1 + 10176) = 0;
  *(_OWORD *)(a1 + 10176) = *(_OWORD *)(a2 + 10176);
  *(void *)(a1 + 10192) = *(void *)(a2 + 10192);
  *(void *)(a2 + 10192) = 0;
  *(_OWORD *)(a2 + 10176) = 0u;
  sub_5B0484(a1 + 10200, a2 + 10200);
  sub_5B0484(a1 + 10880, a2 + 10880);
  *(void *)(a1 + 11576) = 0;
  *(void *)(a1 + 11568) = 0;
  *(void *)(a1 + 11560) = 0;
  *(void *)(a1 + 11560) = *(void *)(a2 + 11560);
  *(void *)(a1 + 11568) = *(void *)(a2 + 11568);
  *(void *)(a1 + 11576) = *(void *)(a2 + 11576);
  *(void *)(a2 + 11576) = 0;
  *(void *)(a2 + 11568) = 0;
  *(void *)(a2 + 11560) = 0;
  *(void *)(a1 + 11600) = 0;
  *(_OWORD *)(a1 + 11584) = 0u;
  *(_OWORD *)(a1 + 11584) = *(_OWORD *)(a2 + 11584);
  *(void *)(a1 + 11600) = *(void *)(a2 + 11600);
  *(void *)(a2 + 11600) = 0;
  *(void *)(a2 + 11592) = 0;
  *(void *)(a2 + 11584) = 0;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(void *)(a1 + 11624) = 0;
  *(void *)(a1 + 11608) = *(void *)(a2 + 11608);
  *(void *)(a1 + 11616) = *(void *)(a2 + 11616);
  *(void *)(a1 + 11624) = *(void *)(a2 + 11624);
  *(void *)(a2 + 11624) = 0;
  *(void *)(a2 + 11616) = 0;
  *(void *)(a2 + 11608) = 0;
  *(void *)(a1 + 11648) = 0;
  *(_OWORD *)(a1 + 11632) = 0u;
  *(_OWORD *)(a1 + 11632) = *(_OWORD *)(a2 + 11632);
  *(void *)(a1 + 11648) = *(void *)(a2 + 11648);
  *(void *)(a2 + 11648) = 0;
  *(void *)(a2 + 11640) = 0;
  *(void *)(a2 + 11632) = 0;
  *(void *)(a1 + 11656) = *(void *)(a2 + 11656);
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11664) = 0;
  *(_OWORD *)(a1 + 11664) = *(_OWORD *)(a2 + 11664);
  *(void *)(a1 + 11680) = *(void *)(a2 + 11680);
  *(void *)(a2 + 11680) = 0;
  *(void *)(a2 + 11672) = 0;
  *(void *)(a2 + 11664) = 0;
  *(_OWORD *)(a1 + 11688) = *(_OWORD *)(a2 + 11688);
  *(_OWORD *)(a1 + 11712) = 0u;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11704) = *(void *)(a2 + 11704);
  *(void *)(a1 + 11712) = *(void *)(a2 + 11712);
  *(void *)(a1 + 11720) = *(void *)(a2 + 11720);
  *(void *)(a2 + 11720) = 0;
  *(void *)(a2 + 11712) = 0;
  *(void *)(a2 + 11704) = 0;
  *(void *)(a1 + 11728) = *(void *)(a2 + 11728);
  *(_OWORD *)(a1 + 11744) = 0u;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11736) = *(void *)(a2 + 11736);
  *(void *)(a1 + 11744) = *(void *)(a2 + 11744);
  *(void *)(a1 + 11752) = *(void *)(a2 + 11752);
  *(void *)(a2 + 11752) = 0;
  *(void *)(a2 + 11744) = 0;
  *(void *)(a2 + 11736) = 0;
  *(void *)(a1 + 11776) = 0;
  *(_OWORD *)(a1 + 11760) = 0u;
  *(_OWORD *)(a1 + 11760) = *(_OWORD *)(a2 + 11760);
  *(void *)(a1 + 11776) = *(void *)(a2 + 11776);
  *(void *)(a2 + 11776) = 0;
  *(void *)(a2 + 11768) = 0;
  *(void *)(a2 + 11760) = 0;
  *(void *)(a1 + 11800) = 0;
  *(_OWORD *)(a1 + 11784) = 0u;
  *(void *)(a1 + 11784) = *(void *)(a2 + 11784);
  *(void *)(a1 + 11792) = *(void *)(a2 + 11792);
  *(void *)(a1 + 11800) = *(void *)(a2 + 11800);
  *(void *)(a2 + 11800) = 0;
  *(void *)(a2 + 11792) = 0;
  *(void *)(a2 + 11784) = 0;
  *(void *)(a1 + 11824) = 0;
  *(_OWORD *)(a1 + 11808) = 0u;
  *(_OWORD *)(a1 + 11808) = *(_OWORD *)(a2 + 11808);
  *(void *)(a1 + 11824) = *(void *)(a2 + 11824);
  *(void *)(a2 + 11824) = 0;
  *(void *)(a2 + 11816) = 0;
  *(void *)(a2 + 11808) = 0;
  *(void *)(a1 + 11848) = 0;
  *(_OWORD *)(a1 + 11832) = 0u;
  *(void *)(a1 + 11832) = *(void *)(a2 + 11832);
  *(void *)(a1 + 11840) = *(void *)(a2 + 11840);
  *(void *)(a1 + 11848) = *(void *)(a2 + 11848);
  *(void *)(a2 + 11848) = 0;
  *(void *)(a2 + 11840) = 0;
  *(void *)(a2 + 11832) = 0;
  uint64_t v37 = *(void *)(a2 + 11856);
  *(void *)(a2 + 11856) = 0;
  *(void *)(a1 + 11856) = v37;
  int v38 = *(_DWORD *)(a2 + 11864);
  *(unsigned char *)(a1 + 11868) = *(unsigned char *)(a2 + 11868);
  *(_DWORD *)(a1 + 11864) = v38;
  long long v39 = *(_OWORD *)(a2 + 11872);
  *(void *)(a1 + 11888) = *(void *)(a2 + 11888);
  *(_OWORD *)(a1 + 11872) = v39;
  *(void *)(a2 + 11872) = 0;
  *(_OWORD *)(a2 + 11880) = 0u;
  long long v40 = *(_OWORD *)(a2 + 11896);
  *(void *)(a1 + 11912) = *(void *)(a2 + 11912);
  *(_OWORD *)(a1 + 11896) = v40;
  *(_OWORD *)(a2 + 11904) = 0u;
  *(void *)(a2 + 11896) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(_OWORD *)(a1 + 11920) = *(_OWORD *)(a2 + 11920);
  *(void *)(a1 + 11936) = *(void *)(a2 + 11936);
  *(void *)(a2 + 11936) = 0;
  *(void *)(a2 + 11928) = 0;
  *(void *)(a2 + 11920) = 0;
  LODWORD(v37) = *(_DWORD *)(a2 + 11944);
  *(unsigned char *)(a1 + 11948) = *(unsigned char *)(a2 + 11948);
  *(_DWORD *)(a1 + 11944) = v37;
  *(void *)(a1 + 11952) = 0;
  *(_OWORD *)(a1 + 11960) = 0u;
  *(_OWORD *)(a1 + 11952) = *(_OWORD *)(a2 + 11952);
  *(void *)(a1 + 11968) = *(void *)(a2 + 11968);
  *(void *)(a2 + 11968) = 0;
  *(void *)(a2 + 11960) = 0;
  *(void *)(a2 + 11952) = 0;
  *(_OWORD *)(a1 + 11976) = 0u;
  *(void *)(a1 + 11992) = 0;
  *(void *)(a1 + 11976) = *(void *)(a2 + 11976);
  *(void *)(a1 + 11984) = *(void *)(a2 + 11984);
  *(void *)(a1 + 11992) = *(void *)(a2 + 11992);
  *(void *)(a2 + 11992) = 0;
  *(void *)(a2 + 11984) = 0;
  *(void *)(a2 + 11976) = 0;
  long long v41 = *(_OWORD *)(a2 + 12000);
  *(void *)(a1 + 12016) = *(void *)(a2 + 12016);
  *(_OWORD *)(a1 + 12000) = v41;
  *(void *)(a2 + 12000) = 0;
  *(_OWORD *)(a2 + 12008) = 0u;
  *(_OWORD *)(a1 + 12024) = 0u;
  *(void *)(a1 + 12040) = 0;
  *(void *)(a1 + 12024) = *(void *)(a2 + 12024);
  *(void *)(a1 + 12032) = *(void *)(a2 + 12032);
  *(void *)(a1 + 12040) = *(void *)(a2 + 12040);
  *(void *)(a2 + 12040) = 0;
  *(void *)(a2 + 12032) = 0;
  *(void *)(a2 + 12024) = 0;
  *(void *)(a1 + 12048) = *(void *)(a2 + 12048);
  *(_OWORD *)(a1 + 12064) = 0u;
  *(void *)(a1 + 12056) = 0;
  *(void *)(a1 + 12056) = *(void *)(a2 + 12056);
  *(void *)(a1 + 12064) = *(void *)(a2 + 12064);
  *(void *)(a1 + 12072) = *(void *)(a2 + 12072);
  *(void *)(a2 + 12072) = 0;
  *(void *)(a2 + 12064) = 0;
  *(void *)(a2 + 12056) = 0;
  *(void *)(a1 + 12096) = 0;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12080) = *(_OWORD *)(a2 + 12080);
  *(void *)(a1 + 12096) = *(void *)(a2 + 12096);
  *(void *)(a2 + 12096) = 0;
  *(void *)(a2 + 12088) = 0;
  *(void *)(a2 + 12080) = 0;
  uint64_t v42 = *(void *)(a2 + 12104);
  *(void *)(a2 + 12104) = 0;
  *(void *)(a1 + 12104) = v42;
  *(void *)(a1 + 12112) = *(void *)(a2 + 12112);
  *(void *)(a2 + 12112) = 0;
  uint64_t v43 = *(void *)(a2 + 12120);
  *(void *)(a1 + 12120) = v43;
  uint64_t v44 = *(void *)(a2 + 12128);
  *(void *)(a1 + 12128) = v44;
  *(_DWORD *)(a1 + 12136) = *(_DWORD *)(a2 + 12136);
  if (v44)
  {
    unint64_t v45 = *(void *)(v43 + 8);
    unint64_t v46 = *(void *)(a1 + 12112);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v45 >= v46) {
        v45 %= v46;
      }
    }
    else
    {
      v45 &= v46 - 1;
    }
    *(void *)(v42 + 8 * v45) = a1 + 12120;
    *(void *)(a2 + 12120) = 0;
    *(void *)(a2 + 12128) = 0;
  }
  *(void *)(a1 + 12144) = off_2438EC8;
  long long v47 = *(_OWORD *)(a2 + 12152);
  *(void *)(a1 + 12168) = *(void *)(a2 + 12168);
  *(_OWORD *)(a1 + 12152) = v47;
  *(void *)(a2 + 12168) = 0;
  *(void *)(a2 + 12160) = 0;
  *(void *)(a2 + 12152) = 0;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(v4 + 2200) = *(unsigned char *)(v5 + 2200);
  *(void *)(a1 + 12184) = off_2438EC8;
  long long v48 = *(_OWORD *)(a2 + 12192);
  *(void *)(a1 + 12208) = *(void *)(a2 + 12208);
  *(_OWORD *)(a1 + 12192) = v48;
  *(void *)(a2 + 12208) = 0;
  *(void *)(a2 + 12200) = 0;
  *(void *)(a2 + 12192) = 0;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(v4 + 2240) = *(unsigned char *)(v5 + 2240);
  uint64_t v49 = *(void *)(a2 + 12224);
  *(void *)(a2 + 12224) = 0;
  *(void *)(a1 + 12224) = v49;
  *(void *)(a1 + 12232) = *(void *)(a2 + 12232);
  *(void *)(a2 + 12232) = 0;
  uint64_t v50 = *(void *)(a2 + 12240);
  *(void *)(a1 + 12240) = v50;
  uint64_t v51 = *(void *)(a2 + 12248);
  *(void *)(a1 + 12248) = v51;
  *(_DWORD *)(a1 + 12256) = *(_DWORD *)(a2 + 12256);
  if (v51)
  {
    unint64_t v52 = *(void *)(v50 + 8);
    unint64_t v53 = *(void *)(a1 + 12232);
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v52 >= v53) {
        v52 %= v53;
      }
    }
    else
    {
      v52 &= v53 - 1;
    }
    *(void *)(v49 + 8 * v52) = a1 + 12240;
    *(void *)(a2 + 12240) = 0;
    *(void *)(a2 + 12248) = 0;
  }
  uint64_t v54 = *(void *)(a2 + 12264);
  *(void *)(a2 + 12264) = 0;
  *(void *)(a1 + 12264) = v54;
  *(void *)(a1 + 12272) = *(void *)(a2 + 12272);
  *(void *)(a2 + 12272) = 0;
  uint64_t v55 = *(void *)(a2 + 12280);
  *(void *)(a1 + 12280) = v55;
  uint64_t v56 = *(void *)(a2 + 12288);
  *(void *)(a1 + 12288) = v56;
  *(_DWORD *)(a1 + 12296) = *(_DWORD *)(a2 + 12296);
  if (v56)
  {
    unint64_t v57 = *(void *)(v55 + 8);
    unint64_t v58 = *(void *)(a1 + 12272);
    if ((v58 & (v58 - 1)) != 0)
    {
      if (v57 >= v58) {
        v57 %= v58;
      }
    }
    else
    {
      v57 &= v58 - 1;
    }
    *(void *)(v54 + 8 * v57) = a1 + 12280;
    *(void *)(a2 + 12280) = 0;
    *(void *)(a2 + 12288) = 0;
  }
  *(void *)(a1 + 12304) = *(void *)(a2 + 12304);
  *(void *)(a1 + 12312) = *(void *)(a2 + 12312);
  *(void *)(a1 + 12320) = *(void *)(a2 + 12320);
  *(void *)(a2 + 12320) = 0;
  *(_OWORD *)(a2 + 12304) = 0u;
  return a1;
}

uint64_t sub_5B01C8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v3 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v3;
  long long v4 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v5 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v6 = a2 + 160;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a2 + 232) = 0u;
  uint64_t v7 = *(void *)(a2 + 256);
  *(_OWORD *)(a2 + 248) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 280) = 0u;
  long long v9 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(a2 + 304) = 0u;
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(_OWORD *)(a2 + 320) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v10 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  *(_OWORD *)(a2 + 344) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v11 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v11;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a2 + 392) = 0u;
  uint64_t v12 = *(void *)(a2 + 416);
  *(_OWORD *)(a2 + 408) = 0u;
  *(void *)(a1 + 416) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 424);
  *(unsigned char *)(a1 + 428) = *(unsigned char *)(a2 + 428);
  *(_DWORD *)(a1 + 424) = v12;
  long long v13 = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = v13;
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 432) = 0;
  long long v14 = *(_OWORD *)(a2 + 456);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v14;
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 456) = 0;
  sub_59029C(a1 + 480, a2 + 480);
  sub_59029C(a1 + 1920, v6 + 1760);
  sub_59029C(a1 + 3360, v6 + 3200);
  return a1;
}

uint64_t sub_5B0484(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  int v7 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 104) = v8;
  long long v9 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a2 + 128) = 0u;
  *(void *)(a2 + 120) = 0;
  long long v10 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v10;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  long long v11 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  long long v12 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v12;
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  uint64_t v13 = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = v13;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v14 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v14;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(_OWORD *)(a2 + 264) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  uint64_t v15 = *(void *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(void *)(a1 + 328) = v15;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  uint64_t v16 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v16;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 408) = 0;
  uint64_t v17 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v17;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(_OWORD *)(a2 + 408) = 0u;
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  *(_OWORD *)(a2 + 456) = 0u;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  uint64_t v18 = *(void *)(a2 + 504);
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a1 + 504) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 512);
  *(unsigned char *)(a1 + 516) = *(unsigned char *)(a2 + 516);
  *(_DWORD *)(a1 + 512) = v18;
  long long v19 = *(_OWORD *)(a2 + 520);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = v19;
  *(void *)(a2 + 520) = 0;
  *(void *)(a2 + 536) = 0;
  *(void *)(a2 + 528) = 0;
  long long v20 = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = v20;
  *(void *)(a2 + 560) = 0;
  *(void *)(a2 + 552) = 0;
  *(void *)(a2 + 544) = 0;
  uint64_t v21 = a1 + 568;
  uint64_t v22 = a2 + 568;
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 600), (uint64_t *)(a2 + 568), (void *)(a1 + 568));
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  long long v23 = *(_OWORD *)(v22 + 48);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_OWORD *)(v21 + 48) = v23;
  *(void *)(a2 + 632) = 0;
  *(void *)(a2 + 624) = 0;
  *(void *)(v22 + 48) = 0;
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  long long v24 = *(_OWORD *)(v22 + 80);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)(v21 + 80) = v24;
  *(void *)(a2 + 664) = 0;
  *(void *)(a2 + 656) = 0;
  *(void *)(v22 + 80) = 0;
  *(unsigned char *)(a1 + 672) = *(unsigned char *)(a2 + 672);
  return a1;
}

uint64_t sub_5B07A8(int64x2_t *a1, long long *a2, void *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v8 = 0x199999999999999;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v28 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x199999999999999) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(160 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  long long __p = v9;
  v26.i64[0] = (uint64_t)&v9[160 * v4];
  v26.i64[1] = v26.i64[0];
  long long v27 = &v9[160 * v8];
  sub_4AA8E0((char *)v26.i64[0], a2);
  *(void *)(v26.i64[0] + 152) = *a3;
  uint64_t v10 = v26.i64[0];
  uint64_t v11 = v26.i64[1] + 160;
  v26.i64[1] += 160;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v22 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v12 + v14;
      uint64_t v16 = v10 + v14;
      long long v17 = *(_OWORD *)(v12 + v14 - 160);
      *(void *)(v16 - 144) = *(void *)(v12 + v14 - 144);
      *(_OWORD *)(v16 - 160) = v17;
      *(void *)(v15 - 152) = 0;
      *(void *)(v15 - 144) = 0;
      *(void *)(v15 - 160) = 0;
      *(void *)(v16 - 136) = *(void *)(v12 + v14 - 136);
      long long v18 = *(_OWORD *)(v12 + v14 - 128);
      *(void *)(v16 - 112) = *(void *)(v12 + v14 - 112);
      *(_OWORD *)(v16 - 128) = v18;
      *(void *)(v15 - 120) = 0;
      *(void *)(v15 - 112) = 0;
      *(void *)(v15 - 128) = 0;
      *(void *)(v16 - 104) = *(void *)(v12 + v14 - 104);
      *(_DWORD *)(v16 - 96) = *(_DWORD *)(v12 + v14 - 96);
      long long v19 = *(_OWORD *)(v12 + v14 - 88);
      *(void *)(v16 - 72) = *(void *)(v12 + v14 - 72);
      *(_OWORD *)(v16 - 88) = v19;
      *(void *)(v15 - 80) = 0;
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 88) = 0;
      long long v20 = *(_OWORD *)(v12 + v14 - 64);
      *(void *)(v16 - 48) = *(void *)(v12 + v14 - 48);
      *(_OWORD *)(v16 - 64) = v20;
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 64) = 0;
      *(_DWORD *)(v16 - 40) = *(_DWORD *)(v12 + v14 - 40);
      long long v21 = *(_OWORD *)(v12 + v14 - 32);
      *(void *)(v16 - 16) = *(void *)(v12 + v14 - 16);
      *(_OWORD *)(v16 - 32) = v21;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      *(void *)(v16 - 8) = *(void *)(v12 + v14 - 8);
      v14 -= 160;
    }
    while (v12 + v14 != v13);
    int64x2_t v22 = *a1;
    uint64_t v11 = v26.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v26 = v22;
  long long v23 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v27;
  long long v27 = v23;
  long long __p = (void *)v22.i64[0];
  sub_4AB11C((uint64_t)&__p, v22.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_5B09C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AB0E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5B09D8(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  int64x2_t v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_188D718();
    }
    int v7 = (char *)operator new(152 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long __p = v7;
  v24.i64[0] = (uint64_t)&v7[152 * v3];
  int v25 = &v7[152 * v6];
  sub_4AA8E0((char *)v24.i64[0], a2);
  uint64_t v8 = v24.i64[0];
  uint64_t v9 = v24.i64[0] + 152;
  v24.i64[1] = v24.i64[0] + 152;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 152);
      *(void *)(v13 - 136) = *(void *)(v10 + v12 - 136);
      *(_OWORD *)(v13 - 152) = v15;
      *(void *)(v14 - 144) = 0;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 152) = 0;
      *(void *)(v13 - 128) = *(void *)(v10 + v12 - 128);
      long long v16 = *(_OWORD *)(v10 + v12 - 120);
      *(void *)(v13 - 104) = *(void *)(v10 + v12 - 104);
      *(_OWORD *)(v13 - 120) = v16;
      *(void *)(v14 - 112) = 0;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 120) = 0;
      *(void *)(v13 - 96) = *(void *)(v10 + v12 - 96);
      *(_DWORD *)(v13 - 88) = *(_DWORD *)(v10 + v12 - 88);
      long long v17 = *(_OWORD *)(v10 + v12 - 80);
      *(void *)(v13 - 64) = *(void *)(v10 + v12 - 64);
      *(_OWORD *)(v13 - 80) = v17;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      long long v18 = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(_OWORD *)(v13 - 56) = v18;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 56) = 0;
      *(_DWORD *)(v13 - 32) = *(_DWORD *)(v10 + v12 - 32);
      long long v19 = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(_OWORD *)(v13 - 24) = v19;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(void *)(v14 - 24) = 0;
      v12 -= 152;
    }
    while (v10 + v12 != v11);
    int64x2_t v20 = *a1;
    uint64_t v9 = v24.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v24 = v20;
  long long v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  int v25 = v21;
  long long __p = (void *)v20.i64[0];
  sub_5B0C34((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_5B0BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B0BFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5B0BFC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_5B0C34(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 33) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 57) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 56));
    if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 97) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 97) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 129) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 120));
    if (*(char *)(i - 129) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 152));
  }
}

uint64_t sub_5B0CFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 1120;
  uint64_t v7 = *a1 + 1120 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[1];
  if ((uint64_t)(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v11 - v12) >> 5)) >= a5)
  {
    if ((uint64_t)(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v12 - v7) >> 5)) >= a5)
    {
      uint64_t v18 = a3 + 1120 * a5;
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v18 = a3 + 32 * ((uint64_t)(v12 - v7) >> 5);
      if (v18 == a4)
      {
        uint64_t v20 = a1[1];
        a1[1] = v12;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v19 = 0;
        do
        {
          sub_4BE9F4(v12 + v19, v18 + v19);
          v19 += 1120;
        }
        while (v18 + v19 != a4);
        uint64_t v20 = v12 + v19;
        a1[1] = v12 + v19;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
    }
    uint64_t v21 = v7 + 1120 * a5;
    unint64_t v22 = v20 - 1120 * a5;
    uint64_t v23 = v20;
    if (v22 < v12)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = sub_4C09FC(v23, v22);
        v22 += 1120;
        uint64_t v23 = v24 + 1120;
      }
      while (v22 < v12);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      uint64_t v25 = v20 - 1120;
      uint64_t v26 = 32 * ((v20 - v21) >> 5);
      do
      {
        sub_4C1EE0(v25, 1120 * v6 + v5 - 1120 + v26);
        v25 -= 1120;
        v26 -= 1120;
      }
      while (v26);
    }
    if (v18 != v9)
    {
      uint64_t v27 = v7;
      do
      {
        sub_4C9334(v27, v9);
        v9 += 1120;
        v27 += 1120;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5075075075075075 * ((uint64_t)(v12 - v5) >> 5);
  if (v13 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAF8AF8AF8AF8AF8BLL * ((v11 - v5) >> 5);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x1D41D41D41D41DLL) {
    unint64_t v15 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    long long v16 = (char *)operator new(1120 * v15);
  }
  else
  {
    long long v16 = 0;
  }
  uint64_t v29 = (uint64_t)&v16[1120 * v6];
  uint64_t v38 = v29;
  long long v39 = &v16[1120 * v15];
  uint64_t v30 = 1120 * a5;
  uint64_t v31 = v29 + 1120 * a5;
  do
  {
    sub_4BE9F4(v29, v9);
    v29 += 1120;
    v9 += 1120;
    v30 -= 1120;
  }
  while (v30);
  uint64_t v28 = v38;
  uint64_t v32 = *a1;
  uint64_t v33 = v38;
  if (*a1 != v7)
  {
    uint64_t v34 = v7;
    uint64_t v33 = v38;
    do
    {
      v33 -= 1120;
      v34 -= 1120;
      sub_4C09FC(v33, v34);
    }
    while (v34 != v32);
  }
  uint64_t v35 = a1[1];
  if (v35 != v7)
  {
    do
    {
      sub_4C09FC(v31, v7);
      v7 += 1120;
      v31 += 1120;
    }
    while (v7 != v35);
    uint64_t v7 = a1[1];
  }
  long long v36 = (void *)*a1;
  *a1 = v33;
  a1[1] = v31;
  a1[2] = (uint64_t)v39;
  while ((void *)v7 != v36)
  {
    v7 -= 1120;
    sub_3A6B94(v7);
  }
  if (v36) {
    operator delete(v36);
  }
  return v28;
}

void sub_5B1088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5B10A0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[160 * v3];
  uint64_t v20 = &v7[160 * v6];
  sub_5F3D48(v19, a2);
  uint64_t v8 = v19;
  uint64_t v9 = v19 + 160;
  uint64_t v11 = (_OWORD *)*a1;
  unint64_t v10 = (_OWORD *)a1[1];
  if (v10 == (_OWORD *)*a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 160) = 0uLL;
      v8 -= 160;
      *(void *)(v8 + 16) = 0;
      long long v12 = *(v10 - 10);
      v10 -= 10;
      *(_OWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 16) = *((void *)v10 + 2);
      *((void *)v10 + 2) = 0;
      *unint64_t v10 = 0uLL;
      *(void *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = 0uLL;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v10 + 24);
      *(void *)(v8 + 40) = *((void *)v10 + 5);
      *((void *)v10 + 5) = 0;
      *(_OWORD *)((char *)v10 + 24) = 0uLL;
      *(void *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = 0uLL;
      *(_OWORD *)(v8 + 48) = v10[3];
      *(void *)(v8 + 64) = *((void *)v10 + 8);
      *((void *)v10 + 8) = 0;
      v10[3] = 0uLL;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 72) = 0uLL;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v10 + 72);
      *(void *)(v8 + 88) = *((void *)v10 + 11);
      *(_OWORD *)((char *)v10 + 72) = 0uLL;
      uint64_t v13 = *((void *)v10 + 12);
      *(_OWORD *)((char *)v10 + 88) = 0uLL;
      *(void *)(v8 + 96) = v13;
      LODWORD(v13) = *((_DWORD *)v10 + 26);
      *(unsigned char *)(v8 + 108) = *((unsigned char *)v10 + 108);
      *(_DWORD *)(v8 + 104) = v13;
      long long v14 = v10[7];
      *(void *)(v8 + 128) = *((void *)v10 + 16);
      *(_OWORD *)(v8 + 112) = v14;
      *((void *)v10 + 15) = 0;
      *((void *)v10 + 16) = 0;
      long long v15 = *(_OWORD *)((char *)v10 + 136);
      uint64_t v16 = *((void *)v10 + 19);
      *((void *)v10 + 14) = 0;
      *(void *)(v8 + 152) = v16;
      *(_OWORD *)(v8 + 136) = v15;
      *((void *)v10 + 18) = 0;
      *((void *)v10 + 19) = 0;
      *((void *)v10 + 17) = 0;
    }
    while (v10 != v11);
    long long v17 = (_OWORD *)*a1;
    unint64_t v10 = (_OWORD *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
    if (v10 != v17)
    {
      do
        unint64_t v10 = (_OWORD *)sub_4D4B58((uint64_t)(v10 - 10));
      while (v10 != v17);
      unint64_t v10 = v17;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 160;
}

void sub_5B12BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B12D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5B12D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    sub_4D4B58(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_5B1324()
{
  byte_2578C37 = 1;
  word_2578C20 = 65;
  byte_2578C4F = 1;
  word_2578C38 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_257CA98 = 0u;
  *(_OWORD *)&qword_257CAA8 = 0u;
  dword_257CAB8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_257CA98, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_257CA98, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_257CA98, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_257CA98, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_2578C67 = 8;
  strcpy((char *)&qword_2578C50, "any_mode");
  byte_2578C7F = 7;
  strcpy((char *)&dword_2578C68, "cycling");
  byte_2578C97 = 7;
  strcpy((char *)&dword_2578C80, "driving");
  byte_2578CAF = 7;
  strcpy((char *)&dword_2578C98, "walking");
  strcpy(&byte_2578CC7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2578CB0, "\x1B\\toi=lhp\\"");
  byte_2578CDF = 11;
  qword_2578CE0 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_2578CE8 = xmmword_20B9250;
  strcpy(qword_2578CE0, "\x1B\\toi=x-sampa-internal\\"");
  byte_2578D0F = 13;
  strcpy((char *)&qword_2578CF8, "\x1B\\tn=address\\"");
  strcpy(&byte_2578D27, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2578D10, "\x1B\\tn=nav\\"");
  byte_2578D3F = 12;
  byte_2578D57 = 7;
  strcpy((char *)&dword_2578D40, "\x1B\\lang=");
  byte_2578D6F = 1;
  word_2578D58 = 92;
  byte_2578D87 = 4;
  strcpy((char *)&qword_2578D70, "DEV:");
  byte_2578D9F = 8;
  strcpy((char *)&qword_2578D88, "Continue");
  byte_2578DB7 = 11;
  strcpy((char *)&qword_2578DA0, "Start_Route");
  byte_2578DCF = 14;
  strcpy((char *)&qword_2578DB8, "Continue_Route");
  byte_2578DE7 = 12;
  strcpy((char *)&qword_2578DD0, "Resume_Route");
  byte_2578DFF = 18;
  strcpy((char *)&xmmword_2578DE8, "Start_Route_U_Turn");
  byte_2578E17 = 7;
  strcpy((char *)&dword_2578E00, "_U_Turn");
  qword_2578E28 = 0x1300000000000000;
  qmemcpy(&unk_2578E30, "Continue_Route", 14);
  qword_2578E18 = *(void *)"Resume_Route";
  unk_2578E20 = 0x545F555F6574756FLL;
  unk_2578E27 = 1852994900;
  qword_2578E40 = 0x1500000000000000;
  strcpy(byte_2578E48, "Left_Turn");
  unk_2578E3E = 1415533919;
  *(_DWORD *)((char *)&qword_2578E40 + 1) = 1852994900;
  strcpy(&byte_2578E5F, "\tRight_Turn");
  strcpy(&byte_2578E77, "\nLeft_Turn_At_End");
  byte_2578E8F = 16;
  byte_2578EA7 = 17;
  strcpy((char *)&xmmword_2578E90, "Right_Turn_At_End");
  byte_2578EBF = 15;
  strcpy((char *)&qword_2578EA8, "Sharp_Left_Turn");
  byte_2578ED7 = 16;
  strcpy((char *)&xmmword_2578EC0, "Sharp_Right_Turn");
  byte_2578EEF = 16;
  strcpy((char *)&xmmword_2578ED8, "Slight_Left_Turn");
  byte_2578F07 = 17;
  strcpy((char *)&xmmword_2578EF0, "Slight_Right_Turn");
  strcpy(&byte_2578F1F, "\tKeep_Right");
  strcpy((char *)&qword_2578F08, "Keep_Left");
  strcpy(&byte_2578F37, "\nU_Turn");
  byte_2578F4F = 6;
  byte_2578F67 = 14;
  strcpy((char *)&qword_2578F50, "Walking_U_Turn");
  byte_2578F7F = 20;
  strcpy((char *)&xmmword_2578F68, "U_Turn_When_Possible");
  byte_2578F97 = 20;
  strcpy((char *)&xmmword_2578F80, "U_Turn_At_Roundabout");
  byte_2578FAF = 11;
  strcpy((char *)&qword_2578F98, "Enter_Ferry");
  strcpy(&byte_2578FC7, "\nChange_Ferry");
  strcpy((char *)&qword_2578FB0, "Exit_Ferry");
  byte_2578FDF = 12;
  byte_2578FF7 = 21;
  strcpy((char *)&xmmword_2578FE0, "Enter_Railway_Shuttle");
  byte_257900F = 20;
  strcpy((char *)&xmmword_2578FF8, "Exit_Railway_Shuttle");
  byte_2579027 = 22;
  strcpy((char *)&xmmword_2579010, "Change_Railway_Shuttle");
  byte_257903F = 17;
  strcpy((char *)&xmmword_2579028, "End_Of_Navigation");
  byte_2579057 = 17;
  strcpy((char *)&xmmword_2579040, "End_Of_Navigation");
  byte_257906F = 11;
  strcpy((char *)&qword_2579058, "Destination");
  byte_2579087 = 19;
  strcpy((char *)&xmmword_2579070, "Destination_On_left");
  byte_257909F = 20;
  strcpy((char *)&xmmword_2579088, "Destination_On_Right");
  strcpy(&byte_25790B7, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25790A0, "First_Stop");
  byte_25790CF = 18;
  byte_25790E7 = 19;
  strcpy((char *)&xmmword_25790D0, "First_Stop_On_Right");
  strcpy(&byte_25790FF, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25790E8, "Next_Stop");
  byte_2579117 = 17;
  byte_257912F = 18;
  strcpy((char *)&xmmword_2579118, "Next_Stop_On_Right");
  byte_2579147 = 13;
  strcpy((char *)&qword_2579130, "Waypoint_Stop");
  byte_257915F = 21;
  strcpy((char *)&xmmword_2579148, "Waypoint_Stop_On_Left");
  byte_2579177 = 22;
  strcpy((char *)&xmmword_2579160, "Waypoint_Stop_On_Right");
  byte_257918F = 11;
  strcpy((char *)&qword_2579178, "Roundabout_");
  byte_25791A7 = 16;
  strcpy((char *)&xmmword_2579190, "Enter_Roundabout");
  qword_25791A8 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_25791B0 = xmmword_20B91C0;
  strcpy((char *)qword_25791A8, "Walking_Enter_Roundabout");
  byte_25791D7 = 16;
  strcpy(byte_25791C0, "Leave_Roundabout");
  byte_25791EF = 21;
  strcpy((char *)&xmmword_25791D8, "Roundabout_First_Exit");
  byte_2579207 = 22;
  strcpy(byte_25791F0, "Roundabout_Second_Exit");
  byte_257921F = 21;
  strcpy((char *)&xmmword_2579208, "Roundabout_Third_Exit");
  strcpy(byte_2579220, "Roundabout_Fourth_Exit");
  HIBYTE(word_2579236) = 22;
  byte_257924F = 21;
  strcpy((char *)&xmmword_2579238, "Roundabout_Fifth_Exit");
  byte_2579267 = 21;
  strcpy(byte_2579250, "Roundabout_Sixth_Exit");
  qword_2579268 = (uint64_t)operator new(0x19uLL);
  unk_2579270 = xmmword_20B9250;
  strcpy((char *)qword_2579268, "Roundabout_Seventh_Exit");
  strcpy(byte_2579280, "Roundabout_Eighth_Exit");
  HIBYTE(word_2579296) = 22;
  byte_25792AF = 21;
  strcpy((char *)&xmmword_2579298, "Roundabout_Ninth_Exit");
  byte_25792C7 = 21;
  strcpy(byte_25792B0, "Roundabout_Tenth_Exit");
  qword_25792C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25792D0 = xmmword_20B91C0;
  strcpy((char *)qword_25792C8, "Roundabout_Eleventh_Exit");
  qword_25792E0 = (uint64_t)operator new(0x19uLL);
  unk_25792E8 = xmmword_20B9250;
  strcpy((char *)qword_25792E0, "Roundabout_Twelfth_Exit");
  qword_25792F8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  unk_2579300 = xmmword_20B5EB0;
  strcpy((char *)qword_25792F8, "Roundabout_Thirteenth_Exit");
  qword_2579310 = (uint64_t)operator new(0x20uLL);
  unk_2579318 = xmmword_20B5EB0;
  strcpy((char *)qword_2579310, "Roundabout_Fourteenth_Exit");
  qword_2579328 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  *(_OWORD *)algn_2579330 = xmmword_20B8870;
  strcpy((char *)qword_2579328, "Roundabout_Fifteenth_Exit");
  qword_2579340 = (uint64_t)operator new(0x20uLL);
  unk_2579348 = xmmword_20B8870;
  strcpy((char *)qword_2579340, "Roundabout_Sixteenth_Exit");
  qword_2579358 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  unk_2579360 = xmmword_20B91A0;
  strcpy((char *)qword_2579358, "Roundabout_Seventeenth_Exit");
  qword_2579370 = (uint64_t)operator new(0x20uLL);
  unk_2579378 = xmmword_20B5EB0;
  strcpy((char *)qword_2579370, "Roundabout_Eighteenth_Exit");
  qword_2579388 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2579390 = xmmword_20B5EB0;
  strcpy((char *)qword_2579388, "Roundabout_Nineteenth_Exit");
  byte_25793B7 = 8;
  strcpy((char *)&qword_25793A0, "Off_Ramp");
  byte_25793CF = 16;
  strcpy((char *)&xmmword_25793B8, "Off_Ramp_On_Left");
  byte_25793E7 = 17;
  strcpy(algn_25793D0, "Off_Ramp_On_Right");
  byte_25793FF = 14;
  strcpy((char *)&qword_25793E8, "Change_Highway");
  strcpy(byte_2579400, "Change_Highway_On_Left");
  HIBYTE(word_2579416) = 22;
  qword_2579418 = (uint64_t)operator new(0x19uLL);
  unk_2579420 = xmmword_20B9250;
  strcpy((char *)qword_2579418, "Change_Highway_On_Right");
  byte_2579447 = 5;
  strcpy((char *)&dword_2579430, "Merge");
  byte_257945F = 12;
  strcpy((char *)&qword_2579448, "Enter_Detour");
  byte_2579477 = 11;
  strcpy((char *)&qword_2579460, "Exit_Detour");
  byte_257948F = 18;
  strcpy((char *)&xmmword_2579478, "Walking_Turnaround");
  qword_2579490 = (uint64_t)operator new(0x19uLL);
  unk_2579498 = xmmword_20B9250;
  strcpy((char *)qword_2579490, "Walking_Turnaround_Sign");
  byte_25794BF = 19;
  strcpy(byte_25794A8, "Distance_Title_List");
  unk_25794C0 = operator new(0x19uLL);
  unk_25794C8 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25794C0, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_25794EF = 19;
  strcpy(byte_25794D8, "Arrival_Charge_List");
  byte_2579507 = 15;
  strcpy(byte_25794F0, "Charge_At_Start");
  strcpy(&byte_257951F, "\tPass_Street");
  strcpy(byte_2579508, "Pass_Exit");
  byte_2579537 = 11;
  byte_257954F = 17;
  strcpy(byte_2579538, "Pass_Intersection");
  strcpy(&byte_2579567, "\t_PrevExitNumber");
  strcpy(byte_2579550, "Next_Exit");
  byte_257957F = 15;
  strcpy(&byte_2579597, "\t_PrevUTurn");
  strcpy(byte_2579580, "_PrevRoad");
  strcpy(&byte_25795AF, "\nNext_");
  byte_25795C7 = 5;
  byte_25795DF = 15;
  strcpy(byte_25795C8, "_At_Next_Street");
  byte_25795F7 = 21;
  strcpy(byte_25795E0, "_At_Next_Intersection");
  byte_257960F = 14;
  strcpy((char *)&qword_25795F8, "Charge_Station");
  byte_2579627 = 15;
  strcpy((char *)&qword_2579610, "_Charge_Station");
  BYTE1(qword_2579638) = 0;
  WORD1(qword_2579638) = 25856;
  HIDWORD(qword_2579638) = 335544320;
  strcpy((char *)&qword_2579628, "_Charge_Station_");
  byte_2579657 = 8;
  strcpy((char *)&qword_2579640, "_Minimum");
  byte_257966F = 15;
  strcpy((char *)&qword_2579658, "ExitShield_Sign");
  byte_2579687 = 8;
  strcpy((char *)&qword_2579670, "Walking_");
  byte_257969F = 16;
  strcpy((char *)&xmmword_2579688, "Walking_Continue");
  byte_25796B7 = 19;
  strcpy((char *)&xmmword_25796A0, "Walking_Start_Route");
  qword_25796B8 = (uint64_t)operator new(0x20uLL);
  unk_25796C0 = xmmword_20B5EB0;
  strcpy((char *)qword_25796B8, "Walking_Start_Route_U_Turn");
  byte_25796E7 = 17;
  strcpy(byte_25796D0, "Walking_Left_Turn");
  byte_25796FF = 18;
  strcpy((char *)&xmmword_25796E8, "Walking_Right_Turn");
  qword_2579700 = (uint64_t)operator new(0x20uLL);
  unk_2579708 = xmmword_20B5EB0;
  strcpy((char *)qword_2579700, "Walking_Turn_At_Roundabout");
  qword_2579718 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  unk_2579720 = xmmword_20B91B0;
  strcpy((char *)qword_2579718, "Walking_U_Turn_When_Possible");
  qword_2579730 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_2579738 = xmmword_20B9390;
  strcpy((char *)qword_2579730, "Walking_Roundabout_Exit_Continue");
  qword_2579748 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2579750 = xmmword_20B91B0;
  strcpy((char *)qword_2579748, "Walking_Roundabout_Exit_Left");
  qword_2579760 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_2579768 = xmmword_20B8890;
  strcpy((char *)qword_2579760, "Walking_Roundabout_Exit_Right");
  qword_2579778 = (uint64_t)operator new(0x20uLL);
  unk_2579780 = xmmword_20B8870;
  strcpy((char *)qword_2579778, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2579790 = (uint64_t)v0;
  unk_2579798 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25797BF = 8;
  strcpy((char *)&qword_25797A8, "Walking_");
  qword_25797C0 = (uint64_t)operator new(0x19uLL);
  unk_25797C8 = v282;
  strcpy((char *)qword_25797C0, "Walking_Sharp_Left_Turn");
  qword_25797D8 = (uint64_t)operator new(0x20uLL);
  unk_25797E0 = v281;
  strcpy((char *)qword_25797D8, "Walking_Sharp_Right_Turn");
  qword_25797F0 = (uint64_t)operator new(0x20uLL);
  unk_25797F8 = v281;
  strcpy((char *)qword_25797F0, "Walking_Slight_Left_Turn");
  qword_2579808 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2579810 = v280;
  strcpy((char *)qword_2579808, "Walking_Slight_Right_Turn");
  byte_2579837 = 4;
  strcpy((char *)&dword_2579820, "Exit");
  byte_257984F = 4;
  strcpy((char *)&dword_2579838, "Road");
  byte_2579867 = 7;
  strcpy((char *)&dword_2579850, "Freeway");
  byte_257987F = 12;
  strcpy((char *)&qword_2579868, "Intersection");
  byte_2579897 = 5;
  strcpy((char *)&dword_2579880, "Ferry");
  byte_25798AF = 11;
  strcpy((char *)&qword_2579898, "ShuttleName");
  byte_25798C7 = 5;
  strcpy((char *)&dword_25798B0, "Road1");
  strcpy(&byte_25798DF, "\tName");
  strcpy((char *)&qword_25798C8, "Signpost1");
  byte_25798F7 = 4;
  byte_257990F = 7;
  strcpy((char *)&dword_25798F8, "Address");
  byte_2579927 = 7;
  strcpy((char *)&dword_2579910, "Shield1");
  byte_257993F = 13;
  strcpy((char *)&qword_2579928, "TowardShield1");
  byte_2579957 = 6;
  strcpy((char *)&dword_2579940, "Right_");
  byte_257996F = 5;
  strcpy((char *)&dword_2579958, "Left_");
  strcpy(&byte_2579987, "\tOn_Left_");
  strcpy((char *)&qword_2579970, "On_Right_");
  byte_257999F = 8;
  byte_25799B7 = 12;
  strcpy((char *)&qword_25799A0, "ElevatorName");
  byte_25799CF = 13;
  strcpy((char *)&qword_25799B8, "EscalatorName");
  strcpy(&byte_25799E7, "\nBridgeName");
  strcpy((char *)&qword_25799D0, "StairsName");
  strcpy(&byte_25799FF, "\nTunnelName");
  strcpy(&byte_2579A17, "\nParking");
  byte_2579A2F = 7;
  strcpy(&byte_2579A47, "\t_Escalator");
  strcpy((char *)&qword_2579A30, "_Elevator");
  strcpy(&byte_2579A5F, "\n_ElevatorName");
  byte_2579A77 = 13;
  byte_2579A8F = 14;
  strcpy((char *)&qword_2579A78, "_EscalatorName");
  byte_2579AA7 = 5;
  strcpy((char *)&qword_2579A90, "_Road");
  byte_2579ABF = 8;
  strcpy((char *)&qword_2579AA8, "_Freeway");
  byte_2579AD7 = 13;
  strcpy((char *)&qword_2579AC0, "_Intersection");
  byte_2579AEF = 6;
  strcpy((char *)&dword_2579AD8, "_Road1");
  byte_2579B07 = 6;
  strcpy((char *)&dword_2579AF0, "_Road2");
  strcpy(&byte_2579B1F, "\n_Signpost2");
  strcpy((char *)&qword_2579B08, "_Signpost1");
  strcpy(&byte_2579B37, "\n_Ferry");
  byte_2579B4F = 6;
  byte_2579B67 = 12;
  strcpy((char *)&qword_2579B50, "_Ferry_Ferry");
  byte_2579B7F = 12;
  strcpy((char *)&qword_2579B68, "_ShuttleName");
  qword_2579B80 = (uint64_t)operator new(0x20uLL);
  unk_2579B88 = v279;
  strcpy((char *)qword_2579B80, "_Railway_Shuttle_ShuttleName");
  byte_2579BAF = 11;
  strcpy((char *)&qword_2579B98, "_ExitNumber");
  byte_2579BC7 = 5;
  strcpy((char *)&dword_2579BB0, "_Exit");
  byte_2579BDF = 7;
  strcpy((char *)&dword_2579BC8, "_StayOn");
  byte_2579BF7 = 7;
  strcpy((char *)&dword_2579BE0, "_Stairs");
  byte_2579C0F = 5;
  strcpy((char *)&dword_2579BF8, "_Ramp");
  byte_2579C27 = 11;
  strcpy((char *)&qword_2579C10, "_StairsName");
  strcpy(&byte_2579C3F, "\t_Down");
  strcpy((char *)&qword_2579C28, "_RampName");
  byte_2579C57 = 5;
  byte_2579C6F = 3;
  dword_2579C58 = 7361887;
  byte_2579C87 = 7;
  strcpy((char *)&dword_2579C70, "_Bridge");
  byte_2579C9F = 7;
  strcpy((char *)&dword_2579C88, "_Tunnel");
  byte_2579CB7 = 11;
  strcpy((char *)&qword_2579CA0, "_Roundabout");
  byte_2579CCF = 6;
  strcpy((char *)&dword_2579CB8, "_Cross");
  byte_2579CE7 = 8;
  strcpy((char *)&qword_2579CD0, "_Parking");
  byte_2579CFF = 8;
  strcpy((char *)&qword_2579CE8, "_Shield1");
  byte_2579D17 = 14;
  strcpy((char *)&qword_2579D00, "_TowardShield1");
  byte_2579D2F = 8;
  strcpy((char *)&qword_2579D18, "_Shield2");
  byte_2579D47 = 14;
  strcpy((char *)&qword_2579D30, "_TowardShield2");
  byte_2579D5F = 11;
  strcpy((char *)&qword_2579D48, "_Direction1");
  byte_2579D77 = 11;
  strcpy((char *)&qword_2579D60, "_Direction2");
  strcpy(&byte_2579D8F, "\n_TowardDirection1");
  strcpy((char *)&qword_2579D78, "Direction1");
  byte_2579DA7 = 17;
  byte_2579DBF = 17;
  strcpy((char *)&xmmword_2579DA8, "_TowardDirection2");
  byte_2579DD7 = 16;
  strcpy((char *)&xmmword_2579DC0, "TowardDirection1");
  byte_2579DEF = 7;
  strcpy((char *)&qword_2579DD8, "_Spoken");
  byte_2579E07 = 5;
  strcpy((char *)&qword_2579DF0, "_Sign");
  byte_2579E1F = 15;
  strcpy((char *)&qword_2579E08, "_Secondary_Sign");
  byte_2579E37 = 5;
  byte_2579E24 = 116;
  dword_2579E20 = 1936280671;
  byte_2579E25 = 0;
  byte_2579E4F = 8;
  strcpy((char *)&qword_2579E38, "_Primary");
  qword_2579E60 = 0xF00000000000000;
  strcpy((char *)&qword_2579E50, "_Spoken_Primary");
  strcpy(&byte_2579E7F, "\n_Secondary");
  strcpy((char *)&qword_2579E68, "_Secondary");
  strcpy(&byte_2579E97, "\n_Spoken_Secondar");
  BYTE1(qword_2579EA8) = 0;
  WORD1(qword_2579EA8) = 0;
  HIDWORD(qword_2579EA8) = 285212672;
  byte_2579EC7 = 13;
  strcpy((char *)&qword_2579EB0, "_To_Secondary");
  BYTE1(qword_2579ED8) = 0;
  WORD1(qword_2579ED8) = 0;
  HIDWORD(qword_2579ED8) = 335544320;
  strcpy((char *)&dword_2579EC8, "_Spoken_To_Secon");
  strcpy(&byte_2579EF7, "\t_ValidDistance");
  strcpy((char *)&qword_2579EE0, "_Distance");
  byte_2579F0F = 14;
  byte_2579F27 = 6;
  strcpy((char *)&dword_2579F10, "_Short");
  byte_2579F3F = 1;
  word_2579F28 = 95;
  qword_2579F40 = (uint64_t)operator new(0x20uLL);
  unk_2579F48 = v281;
  strcpy((char *)qword_2579F40, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2579F58 = (uint64_t)v1;
  unk_2579F60 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  *(void *)(v1 + 15) = v271;
  v1[23] = 0;
  byte_2579F87 = 12;
  strcpy((char *)&qword_2579F70, "Chain_Spoken");
  byte_2579F9F = 15;
  strcpy((char *)&qword_2579F88, "Chain_To_Spoken");
  strcpy(&byte_2579FB7, "\nThen_Spoken");
  strcpy((char *)&qword_2579FA0, "And_Spoken");
  byte_2579FCF = 11;
  byte_2579FE7 = 18;
  strcpy(algn_2579FD0, "Concatenate_Spoken");
  qword_2579FE8 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  *(_OWORD *)algn_2579FF0 = xmmword_20B9240;
  strcpy((char *)qword_2579FE8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_257A000 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_257A008 = xmmword_20B9260;
  strcpy((char *)qword_257A000, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_257A018 = (uint64_t)operator new(0x40uLL);
  unk_257A020 = xmmword_20B9A90;
  strcpy((char *)qword_257A018, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_257A030 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_257A038 = xmmword_20B9A40;
  strcpy((char *)qword_257A030, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_257A048 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  *(_OWORD *)algn_257A050 = xmmword_20E12D0;
  strcpy((char *)qword_257A048, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_257A060 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_257A068 = xmmword_20B9960;
  strcpy((char *)qword_257A060, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_257A078 = (uint64_t)operator new(0x28uLL);
  unk_257A080 = xmmword_20B93A0;
  strcpy((char *)qword_257A078, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_257A090 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_257A098 = xmmword_20E1380;
  strcpy((char *)qword_257A090, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_257A0A8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_257A0B0 = xmmword_20B93C0;
  strcpy((char *)qword_257A0A8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_257A0C0 = (uint64_t)operator new(0x38uLL);
  unk_257A0C8 = xmmword_20B9A60;
  strcpy((char *)qword_257A0C0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_257A0D8 = (uint64_t)operator new(0x30uLL);
  unk_257A0E0 = xmmword_20E1380;
  strcpy((char *)qword_257A0D8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_257A0F0 = (uint64_t)operator new(0x28uLL);
  unk_257A0F8 = xmmword_20B9960;
  strcpy((char *)qword_257A0F0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_257A108 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  *(_OWORD *)algn_257A110 = xmmword_20B93D0;
  strcpy((char *)qword_257A108, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_257A120 = (uint64_t)operator new(0x20uLL);
  unk_257A128 = v277;
  strcpy((char *)qword_257A120, "Walking_Distance_Chain_Spoken");
  qword_257A138 = (uint64_t)operator new(0x20uLL);
  unk_257A140 = v277;
  strcpy((char *)qword_257A138, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_257A150 = (uint64_t)v2;
  unk_257A158 = v282;
  *(_OWORD *)uint64_t v2 = v272;
  *(void *)(v2 + 15) = v271;
  v2[23] = 0;
  unk_257A168 = operator new(0x28uLL);
  unk_257A170 = v270;
  strcpy(unk_257A168, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_257A180, "Walking_Continue_Cross");
  HIBYTE(word_257A196) = 22;
  byte_257A1AF = 14;
  strcpy(byte_257A198, "Continue_Cross");
  byte_257A1C7 = 5;
  strcpy(byte_257A1B0, "Cross");
  byte_257A1DF = 19;
  strcpy(byte_257A1C8, "Cross_Street_Spoken");
  byte_257A1F7 = 17;
  strcpy(byte_257A1E0, "Cross_Road_Spoken");
  byte_257A20F = 20;
  strcpy(byte_257A1F8, "Use_Crosswalk_Spoken");
  byte_257A227 = 15;
  strcpy(byte_257A210, "Distance_Spoken");
  byte_257A23F = 19;
  strcpy(byte_257A228, "Distance_And_Spoken");
  byte_257A257 = 21;
  strcpy(byte_257A240, "Continue_Stage_Spoken");
  byte_257A26F = 13;
  qmemcpy(&qword_257A258, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_2579E60);
  if (qword_2579E60 >= 0) {
    size_t v4 = HIBYTE(qword_2579E60);
  }
  else {
    size_t v4 = unk_2579E58;
  }
  unint64_t v5 = v4 + 13;
  byte_257A265 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (char *)operator new(v7 + 1);
    qword_257A278 = v4 + 13;
    unk_257A280 = v8 | 0x8000000000000000;
    qword_257A270 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    unint64_t v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_257A278) = 0;
    WORD1(qword_257A278) = 0;
    HIDWORD(qword_257A278) = 0;
    unk_257A280 = 0;
    byte_257A287 = v4 + 13;
    strcpy((char *)&qword_257A270, "Continue");
    unint64_t v6 = (char *)&qword_257A278 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    unint64_t v10 = &qword_2579E50;
  }
  else {
    unint64_t v10 = (uint64_t *)qword_2579E50;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_2579AA7;
  if (byte_2579AA7 >= 0) {
    size_t v12 = byte_2579AA7;
  }
  else {
    size_t v12 = qword_2579A98;
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    long long v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *long long v17 = qword_257A258;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_257A258 + 5);
    long long v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_257A258 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_257A258;
    long long v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    uint64_t v18 = &qword_2579A90;
  }
  else {
    uint64_t v18 = (uint64_t *)qword_2579A90;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_2579E50;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_2579E50;
  }
  uint64_t v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_257A298 = v20->__r_.__value_.__r.__words[2];
  xmmword_257A288 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_257A2B7 = 5;
  strcpy((char *)&dword_257A2A0, "Merge");
  qword_257A2B8 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  unk_257A2C0 = xmmword_20B8E90;
  strcpy((char *)qword_257A2B8, "Continue_Freeway_Spoken_Primary");
  byte_257A2E7 = 8;
  strcpy((char *)&qword_257A2D0, "Starting");
  byte_257A2FF = 14;
  strcpy((char *)&qword_257A2E8, "Starting_Route");
  byte_257A317 = 14;
  strcpy((char *)&qword_257A300, "Resuming_Route");
  byte_257A32F = 16;
  strcpy((char *)&xmmword_257A318, "Continuing_Route");
  byte_257A347 = 9;
  word_257A338 = 112;
  qword_257A330 = *(void *)&v265[48];
  strcpy(&byte_257A35F, "\nEnding");
  strcpy((char *)&word_257A350, "op");
  qword_257A348 = *(void *)&v269[0];
  byte_257A377 = 6;
  strcpy((char *)&qword_257A378, "_Destination");
  byte_257A38F = 12;
  byte_257A3A7 = 15;
  strcpy((char *)&qword_257A390, "_At_Destination");
  std::operator+<char>();
  qword_257A3C0 = (uint64_t)operator new(0x20uLL);
  unk_257A3C8 = v281;
  strcpy((char *)qword_257A3C0, "Spoken_Ending_At_Parking");
  qword_257A3D8 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_257A3E0 = xmmword_20B9800;
  strcpy((char *)qword_257A3D8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_257A3F0, "Sign_Ending_At_Parking");
  HIBYTE(word_257A406) = 22;
  byte_257A41F = 4;
  strcpy((char *)&dword_257A408, "Home");
  byte_257A437 = 4;
  strcpy((char *)&dword_257A420, "Work");
  byte_257A44F = 8;
  strcpy((char *)&qword_257A438, "Business");
  byte_257A467 = 4;
  strcpy((char *)&dword_257A450, "Name");
  byte_257A47F = 13;
  strcpy((char *)&qword_257A468, "Other_Contact");
  byte_257A497 = 11;
  strcpy((char *)&qword_257A480, "ContactHome");
  byte_257A4AF = 11;
  *(_DWORD *)((char *)&qword_257A498 + 7) = 1802661719;
  byte_257A4C7 = 7;
  *(int *)((char *)&dword_257A4B0 + 3) = 1936942450;
  dword_257A4B0 = 1919181889;
  strcpy((char *)&xmmword_257A4C8, "Discoverability_Prompt");
  HIBYTE(word_257A4DE) = 22;
  byte_257A4F7 = 6;
  dword_257A4E0 = 1634878303;
  word_257A4E4 = 26739;
  byte_257A50F = 8;
  qword_257A4F8 = 0x697269535F6F4E5FLL;
  byte_257A527 = 9;
  strcpy((char *)&qword_257A510, "_CityName");
  byte_257A53F = 8;
  qword_257A528 = 0x636972656E65475FLL;
  int v22 = byte_257A2E7;
  if (byte_257A2E7 >= 0) {
    size_t v23 = byte_257A2E7;
  }
  else {
    size_t v23 = qword_257A2D8;
  }
  LODWORD(v272) = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v24 = byte_2579627;
  }
  else {
    size_t v24 = unk_2579618;
  }
  qword_257A498 = *(void *)"ContactWork";
  byte_257A4A3 = 0;
  byte_257A4B7 = 0;
  byte_257A4E6 = 0;
  byte_257A500 = 0;
  byte_257A530 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    uint64_t v26 = &qword_257A540;
    qword_257A548 = 0;
    unk_257A550 = 0;
    qword_257A540 = 0;
    byte_257A557 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  uint64_t v26 = (uint64_t *)operator new(v89 + 1);
  qword_257A548 = v24 + v23;
  unk_257A550 = v90 | 0x8000000000000000;
  qword_257A540 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      uint64_t v27 = &qword_257A2D0;
    }
    else {
      uint64_t v27 = (uint64_t *)qword_257A2D0;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  uint64_t v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v272 >= 0) {
      uint64_t v29 = &qword_2579610;
    }
    else {
      uint64_t v29 = (uint64_t *)qword_2579610;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_257A38F;
  if (byte_257A38F >= 0) {
    size_t v31 = byte_257A38F;
  }
  else {
    size_t v31 = qword_257A380;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    uint64_t v33 = &qword_257A558;
    qword_257A560 = 0;
    unk_257A568 = 0;
    qword_257A558 = 0;
    byte_257A56F = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  uint64_t v33 = (uint64_t *)operator new(v91 + 1);
  qword_257A560 = v31 + v23;
  unk_257A568 = v92 | 0x8000000000000000;
  qword_257A558 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      uint64_t v34 = &qword_257A2D0;
    }
    else {
      uint64_t v34 = (uint64_t *)qword_257A2D0;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  uint64_t v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      long long v36 = &qword_257A378;
    }
    else {
      long long v36 = (uint64_t *)qword_257A378;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_257A570 = (uint64_t)operator new(0x19uLL);
  unk_257A578 = v282;
  strcpy((char *)qword_257A570, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    uint64_t v37 = &qword_257A588;
    qword_257A590 = 0;
    unk_257A598 = 0;
    qword_257A588 = 0;
    byte_257A59F = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v37 = (uint64_t *)operator new(v93 + 1);
  qword_257A590 = v31 + v23;
  unk_257A598 = v94 | 0x8000000000000000;
  qword_257A588 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      uint64_t v38 = &qword_257A2D0;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_257A2D0;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  long long v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      long long v40 = &qword_257A378;
    }
    else {
      long long v40 = (uint64_t *)qword_257A378;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_257A5A0, "{NewBatteryPercentage}");
  HIBYTE(word_257A5B6) = 22;
  qword_257A5B8 = (uint64_t)operator new(0x20uLL);
  xmmword_257A5C0 = v275;
  strcpy((char *)qword_257A5B8, "{OriginalBatteryPercentage}");
  byte_257A5E7 = 19;
  strcpy((char *)&xmmword_257A5D0, "_Arrival_Percentage");
  int v41 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v42 = byte_257A377;
  }
  else {
    size_t v42 = qword_257A368;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      unint64_t v45 = &qword_257A360;
    }
    else {
      unint64_t v45 = (uint64_t *)qword_257A360;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  unint64_t v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v272 >= 0) {
      long long v47 = &qword_2579610;
    }
    else {
      long long v47 = (uint64_t *)qword_2579610;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  long long v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_257A5F8 = v48->__r_.__value_.__r.__words[2];
  xmmword_257A5E8 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v51 = byte_257A377;
  }
  else {
    size_t v51 = qword_257A368;
  }
  int v52 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v53 = byte_2579627;
  }
  else {
    size_t v53 = unk_2579618;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v55 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  uint64_t v55 = (char *)operator new(v97 + 1);
  v283.__r_.__value_.__l.__size_ = v53 + v51;
  v283.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      uint64_t v56 = &qword_257A360;
    }
    else {
      uint64_t v56 = (uint64_t *)qword_257A360;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  unint64_t v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      unint64_t v58 = &qword_2579610;
    }
    else {
      unint64_t v58 = (uint64_t *)qword_2579610;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_2579657 >= 0) {
    long long v59 = (const std::string::value_type *)&qword_2579640;
  }
  else {
    long long v59 = (const std::string::value_type *)qword_2579640;
  }
  if (byte_2579657 >= 0) {
    std::string::size_type v60 = byte_2579657;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_2579648;
  }
  uint64_t v61 = std::string::append(&v283, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  int v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  qword_257A610 = v63->__r_.__value_.__r.__words[2];
  xmmword_257A600 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v66 = byte_257A377;
  }
  else {
    size_t v66 = qword_257A368;
  }
  int v67 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v68 = byte_2579627;
  }
  else {
    size_t v68 = unk_2579618;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  uint64_t v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      uint64_t v71 = &qword_257A360;
    }
    else {
      uint64_t v71 = (uint64_t *)qword_257A360;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  char v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      int v73 = &qword_2579610;
    }
    else {
      int v73 = (uint64_t *)qword_2579610;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  uint64_t v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_257A628 = v74->__r_.__value_.__r.__words[2];
  xmmword_257A618 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v77 = byte_257A377;
  }
  else {
    size_t v77 = qword_257A368;
  }
  int v78 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v79 = byte_2579627;
  }
  else {
    size_t v79 = unk_2579618;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_257A638 = 0;
    unk_257A640 = 0;
    qword_257A630 = 0;
    int v81 = &qword_257A630;
    byte_257A647 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  int v81 = (uint64_t *)operator new(v101 + 1);
  qword_257A638 = v79 + v77;
  unk_257A640 = v102 | 0x8000000000000000;
  qword_257A630 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      int v82 = &qword_257A360;
    }
    else {
      int v82 = (uint64_t *)qword_257A360;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  long long v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      int v84 = &qword_2579610;
    }
    else {
      int v84 = (uint64_t *)qword_2579610;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_257A647;
  if (byte_257A647 >= 0) {
    size_t v86 = byte_257A647;
  }
  else {
    size_t v86 = qword_257A638;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    unint64_t v88 = (uint64_t *)operator new(v103 + 1);
    qword_257A650 = v86 + 5;
    unk_257A658 = v104 | 0x8000000000000000;
    qword_257A648 = (uint64_t)v88;
  }
  else
  {
    unint64_t v88 = &qword_257A648;
    qword_257A650 = 0;
    unk_257A658 = 0;
    qword_257A648 = 0;
    byte_257A65F = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    uint64_t v105 = &qword_257A630;
  }
  else {
    uint64_t v105 = (uint64_t *)qword_257A630;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v107 = byte_257A377;
  }
  else {
    size_t v107 = qword_257A368;
  }
  int v108 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v109 = byte_2579627;
  }
  else {
    size_t v109 = unk_2579618;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  unint64_t v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      uint64_t v112 = &qword_257A360;
    }
    else {
      uint64_t v112 = (uint64_t *)qword_257A360;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      uint64_t v114 = &qword_2579610;
    }
    else {
      uint64_t v114 = (uint64_t *)qword_2579610;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  uint64_t v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_257A670 = v115->__r_.__value_.__r.__words[2];
  xmmword_257A660 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_257A670);
  if (qword_257A670 >= 0) {
    size_t v118 = HIBYTE(qword_257A670);
  }
  else {
    size_t v118 = *((void *)&xmmword_257A660 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    unint64_t v120 = (uint64_t *)operator new(v123 + 1);
    qword_257A680 = v118 + 6;
    unk_257A688 = v124 | 0x8000000000000000;
    qword_257A678 = (uint64_t)v120;
  }
  else
  {
    unint64_t v120 = &qword_257A678;
    qword_257A680 = 0;
    unk_257A688 = 0;
    qword_257A678 = 0;
    byte_257A68F = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    uint64_t v125 = &xmmword_257A660;
  }
  else {
    uint64_t v125 = (long long *)xmmword_257A660;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v127 = byte_257A377;
  }
  else {
    size_t v127 = qword_257A368;
  }
  int v128 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v129 = byte_2579627;
  }
  else {
    size_t v129 = unk_2579618;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  unint64_t v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_257A360;
    }
    else {
      v132 = (uint64_t *)qword_257A360;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      v134 = &qword_2579610;
    }
    else {
      v134 = (uint64_t *)qword_2579610;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_2579DEF >= 0) {
    v135 = (const std::string::value_type *)&qword_2579DD8;
  }
  else {
    v135 = (const std::string::value_type *)qword_2579DD8;
  }
  if (byte_2579DEF >= 0) {
    std::string::size_type v136 = byte_2579DEF;
  }
  else {
    std::string::size_type v136 = unk_2579DE0;
  }
  std::string::size_type v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_257A6A0 = v137->__r_.__value_.__r.__words[2];
  xmmword_257A690 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_257A377;
  if (byte_257A377 >= 0) {
    size_t v140 = byte_257A377;
  }
  else {
    size_t v140 = qword_257A368;
  }
  int v141 = byte_2579627;
  if (byte_2579627 >= 0) {
    size_t v142 = byte_2579627;
  }
  else {
    size_t v142 = unk_2579618;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v144 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  unint64_t v144 = (char *)operator new(v162 + 1);
  v283.__r_.__value_.__l.__size_ = v142 + v140;
  v283.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_257A360;
    }
    else {
      v145 = (uint64_t *)qword_257A360;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      v147 = &qword_2579610;
    }
    else {
      v147 = (uint64_t *)qword_2579610;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_2579657 >= 0) {
    v148 = (const std::string::value_type *)&qword_2579640;
  }
  else {
    v148 = (const std::string::value_type *)qword_2579640;
  }
  if (byte_2579657 >= 0) {
    std::string::size_type v149 = byte_2579657;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_2579648;
  }
  std::string::size_type v150 = std::string::append(&v283, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_2579DEF >= 0) {
    long long v152 = (const std::string::value_type *)&qword_2579DD8;
  }
  else {
    long long v152 = (const std::string::value_type *)qword_2579DD8;
  }
  if (byte_2579DEF >= 0) {
    std::string::size_type v153 = byte_2579DEF;
  }
  else {
    std::string::size_type v153 = unk_2579DE0;
  }
  std::string::size_type v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_257A6B8 = v154->__r_.__value_.__r.__words[2];
  xmmword_257A6A8 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_257A6D7 = 16;
  strcpy((char *)&xmmword_257A6C0, "Use_NACS_Adapter");
  byte_257A6EF = 16;
  strcpy(byte_257A6D8, "Start_Route_Sign");
  qword_257A6F0 = (uint64_t)operator new(0x20uLL);
  unk_257A6F8 = v278;
  strcpy((char *)qword_257A6F0, "Start_Route_Spoken_Primary");
  int v156 = byte_2578D87;
  if (byte_2578D87 >= 0) {
    size_t v157 = byte_2578D87;
  }
  else {
    size_t v157 = qword_2578D78;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    unint64_t v159 = &qword_257A708;
    qword_257A710 = 0;
    unk_257A718 = 0;
    qword_257A708 = 0;
    byte_257A71F = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      uint64_t v166 = &qword_2578D70;
    }
    else {
      uint64_t v166 = (uint64_t *)qword_2578D70;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  unint64_t v159 = (uint64_t *)operator new(v164 + 1);
  qword_257A710 = v157 + 27;
  unk_257A718 = v165 | 0x8000000000000000;
  qword_257A708 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_257A737, "\t_Two_Lanes");
  strcpy((char *)&qword_257A720, "_One_Lane");
  strcpy(&byte_257A74F, "\n_Three_Lanes");
  byte_257A767 = 12;
  byte_257A77F = 11;
  strcpy((char *)&qword_257A768, "_Four_Lanes");
  byte_257A797 = 11;
  strcpy((char *)&qword_257A780, "_Five_Lanes");
  strcpy(&byte_257A7AF, "\n_Seven_Lanes");
  strcpy((char *)&qword_257A798, "_Six_Lanes");
  byte_257A7C7 = 12;
  byte_257A7DF = 12;
  strcpy((char *)&qword_257A7C8, "_Eight_Lanes");
  byte_257A7F7 = 12;
  strcpy((char *)&qword_257A7E0, "_Second_Lane");
  byte_257A80F = 11;
  strcpy((char *)&qword_257A7F8, "_Third_Lane");
  byte_257A827 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_257A810, "_Second_Third_Lanes");
  byte_257A83F = 4;
  strcpy((char *)&dword_257A828, "Left");
  byte_257A857 = 5;
  byte_257A844 = 116;
  dword_257A840 = 1751607634;
  byte_257A845 = 0;
  byte_257A86F = 6;
  strcpy((char *)&dword_257A858, "Middle");
  BYTE1(qword_257A880) = 0;
  WORD1(qword_257A880) = 0;
  HIDWORD(qword_257A880) = 0x10000000;
  strcpy((char *)dword_257A870, "Left_Second_Lane");
  BYTE1(qword_257A898) = 0;
  WORD1(qword_257A898) = 0;
  HIDWORD(qword_257A898) = 285212672;
  strcpy((char *)&dword_257A888, "Right_Second_Lan");
  qword_257A8B0 = 0xF00000000000000;
  strcpy((char *)&dword_257A8A0, "Left_Third_Lane");
  qword_257A8C8 = 0x1000000000000000;
  byte_257A8BC = 116;
  dword_257A8B8 = 1751607634;
  dword_257A8C4 = 1701732684;
  unk_257A8BD = *(void *)"_Third_Lane";
  v167 = (char *)operator new(0x19uLL);
  qword_257A8D0 = (uint64_t)v167;
  unk_257A8D8 = v282;
  *(_DWORD *)v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v272;
  v168 = (char *)operator new(0x20uLL);
  qword_257A8E8 = (uint64_t)v168;
  xmmword_257A8F0 = v281;
  *(_DWORD *)v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v272;
  byte_257A917 = 5;
  strcpy((char *)&dword_257A900, "_Stay");
  byte_257A92F = 13;
  strcpy((char *)&qword_257A918, "Continue_Sign");
  byte_257A947 = 8;
  strcpy((char *)&qword_257A930, "Continue");
  int v169 = byte_2579E07;
  if (byte_2579E07 >= 0) {
    size_t v170 = byte_2579E07;
  }
  else {
    size_t v170 = qword_2579DF8;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    uint64_t v175 = operator new(v173 + 1);
    qword_257A950 = v170 + 8;
    qword_257A958 = v174 | 0x8000000000000000;
    qword_257A948 = (uint64_t)v175;
    void *v175 = 0x65756E69746E6F43;
    unint64_t v172 = v175 + 1;
  }
  else
  {
    qword_257A958 = 0;
    HIBYTE(qword_257A958) = v170 + 8;
    qword_257A948 = 0x65756E69746E6F43;
    qword_257A950 = 0;
    unint64_t v172 = &qword_257A950;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    v176 = &qword_2579DF0;
  }
  else {
    v176 = (uint64_t *)qword_2579DF0;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_2579E60);
  if (qword_2579E60 >= 0) {
    size_t v178 = HIBYTE(qword_2579E60);
  }
  else {
    size_t v178 = unk_2579E58;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    uint64_t v183 = operator new(v181 + 1);
    qword_257A968 = v178 + 8;
    qword_257A970 = v182 | 0x8000000000000000;
    qword_257A960 = (uint64_t)v183;
    void *v183 = qword_257A930;
    unint64_t v180 = v183 + 1;
  }
  else
  {
    qword_257A970 = 0;
    HIBYTE(qword_257A970) = v178 + 8;
    qword_257A960 = qword_257A930;
    qword_257A968 = 0;
    unint64_t v180 = &qword_257A968;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    v184 = &qword_2579E50;
  }
  else {
    v184 = (uint64_t *)qword_2579E50;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_257A978, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_257A9A7 = 13;
  strcpy((char *)&qword_257A990, "{instruction}");
  byte_257A9BF = 20;
  strcpy(byte_257A9A8, "{primaryInstruction}");
  strcpy((char *)&xmmword_257A9C0, "{secondaryInstruction}");
  HIBYTE(word_257A9D6) = 22;
  qword_257A9D8 = (uint64_t)operator new(0x20uLL);
  unk_257A9E0 = v280;
  strcpy((char *)qword_257A9D8, "{andSecondaryInstruction}");
  qword_257A9F0 = (uint64_t)operator new(0x20uLL);
  unk_257A9F8 = v281;
  strcpy((char *)qword_257A9F0, "{toSecondaryInstruction}");
  byte_257AA1F = 21;
  strcpy(byte_257AA08, "{continueInstruction}");
  qword_257AA20 = (uint64_t)operator new(0x20uLL);
  unk_257AA28 = v278;
  strcpy((char *)qword_257AA20, "{thenSecondaryInstruction}");
  byte_257AA4F = 14;
  strcpy((char *)&qword_257AA38, "{instruction1}");
  byte_257AA67 = 14;
  strcpy((char *)&qword_257AA50, "{instruction2}");
  strcpy(&byte_257AA7F, "\n{nextDistance}");
  strcpy((char *)&qword_257AA68, "{distance}");
  byte_257AA97 = 14;
  byte_257AAAF = 16;
  strcpy(byte_257AA98, "{valid_distance}");
  strcpy(&byte_257AAC7, "\n{valid_distance}");
  strcpy((char *)&qword_257AAB0, "{distance}");
  byte_257AADF = 16;
  byte_257AAF7 = 15;
  strcpy((char *)&qword_257AAE0, "{ClimbDistance}");
  byte_257AB0F = 17;
  strcpy(byte_257AAF8, "{DescentDistance}");
  byte_257AB27 = 13;
  strcpy((char *)&qword_257AB10, "{nonBrkSpace}");
  byte_257AB3F = 9;
  strcpy((char *)&qword_257AB28, "{newLine}");
  byte_257AB57 = 6;
  word_257AB44 = -24382;
  dword_257AB40 = -1211981630;
  byte_257AB46 = 0;
  byte_257AB6F = 2;
  word_257AB58 = -24382;
  byte_257AB5A = 0;
  byte_257AB87 = 1;
  word_257AB70 = 10;
  byte_257AB9F = 1;
  word_257AB88 = 32;
  byte_257ABB7 = 2;
  strcpy((char *)&word_257ABA0, "\n\n");
  strcpy(&byte_257ABCF, "\t{TowardShield1}");
  strcpy((char *)&qword_257ABB8, "{Shield1}");
  byte_257ABE7 = 15;
  strcpy(&byte_257ABFF, "\t{TowardShield2}");
  strcpy((char *)&qword_257ABE8, "{Shield2}");
  byte_257AC17 = 15;
  byte_257AC2F = 12;
  strcpy((char *)&qword_257AC18, "{Direction1}");
  byte_257AC47 = 12;
  strcpy((char *)&qword_257AC30, "{Direction2}");
  byte_257AC5F = 18;
  strcpy(byte_257AC48, "{TowardDirection1}");
  byte_257AC77 = 18;
  strcpy((char *)&xmmword_257AC60, "{TowardDirection2}");
  byte_257AC8F = 7;
  strcpy((char *)&dword_257AC78, "{Icon1}");
  byte_257ACA7 = 7;
  strcpy((char *)&dword_257AC90, "{Icon2}");
  byte_257ACA8[23] = 14;
  strcpy(byte_257ACA8, "{Intersection}");
  byte_257ACD7 = 6;
  strcpy((char *)&xmmword_257ACC0, "{Road}");
  byte_257ACEF = 7;
  strcpy((char *)&dword_257ACD8, "{Road1}");
  byte_257AD07 = 7;
  strcpy((char *)&xmmword_257ACF0, "{Road2}");
  strcpy(&byte_257AD1F, "\n{Freeway}");
  strcpy((char *)&xmmword_257AD08, "{Elevator}");
  strcpy(&byte_257AD37, "\t{Ferry}");
  byte_257AD4F = 7;
  byte_257AD67 = 13;
  strcpy((char *)&xmmword_257AD50, "{ShuttleName}");
  byte_257AD7F = 11;
  strcpy((char *)&xmmword_257AD68, "{Signpost1}");
  byte_257AD97 = 11;
  strcpy((char *)&xmmword_257AD80, "{Signpost2}");
  byte_257ADAF = 12;
  strcpy((char *)&xmmword_257AD98, "{ExitNumber}");
  strcpy(&byte_257ADC7, "\t{Name}");
  strcpy((char *)&xmmword_257ADB0, "{Address}");
  byte_257ADDF = 6;
  byte_257ADF7 = 11;
  strcpy((char *)&xmmword_257ADE0, "{PlaceName}");
  byte_257AE0F = 14;
  strcpy((char *)&xmmword_257ADF8, "{ElevatorName}");
  byte_257AE27 = 15;
  strcpy((char *)&xmmword_257AE10, "{EscalatorName}");
  byte_257AE3F = 12;
  strcpy((char *)&xmmword_257AE28, "{StairsName}");
  strcpy(&byte_257AE57, "\n{BridgeName}");
  strcpy((char *)&xmmword_257AE40, "{RampName}");
  byte_257AE6F = 12;
  byte_257AE87 = 12;
  strcpy((char *)&xmmword_257AE70, "{TunnelName}");
  byte_257AE9F = 13;
  strcpy((char *)&xmmword_257AE88, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_257ACA8;
  *(_OWORD *)v285 = xmmword_257ACC0;
  *(void *)&v285[16] = unk_257ACD0;
  *(_OWORD *)uint64_t v286 = *(_OWORD *)&dword_257ACD8;
  *(void *)long long v287 = unk_257ACE8;
  *(_OWORD *)&v287[8] = xmmword_257ACF0;
  uint64_t v288 = unk_257AD00;
  *(_OWORD *)long long __p = xmmword_257AD08;
  uint64_t v290 = unk_257AD18;
  uint64_t v292 = unk_257AD30;
  long long v291 = xmmword_257AD20;
  long long v293 = xmmword_257AD38;
  uint64_t v294 = unk_257AD48;
  uint64_t v296 = unk_257AD60;
  long long v295 = xmmword_257AD50;
  long long v297 = xmmword_257AD68;
  uint64_t v298 = unk_257AD78;
  uint64_t v300 = unk_257AD90;
  long long v299 = xmmword_257AD80;
  long long v301 = xmmword_257AD98;
  long long v303 = xmmword_257ADB0;
  uint64_t v302 = unk_257ADA8;
  uint64_t v304 = unk_257ADC0;
  long long v305 = xmmword_257ADC8;
  long long v307 = xmmword_257ADE0;
  uint64_t v306 = unk_257ADD8;
  uint64_t v308 = unk_257ADF0;
  long long v309 = xmmword_257ADF8;
  long long v311 = xmmword_257AE10;
  uint64_t v310 = unk_257AE08;
  uint64_t v312 = unk_257AE20;
  long long v313 = xmmword_257AE28;
  long long v315 = xmmword_257AE40;
  uint64_t v314 = unk_257AE38;
  uint64_t v316 = unk_257AE50;
  long long v317 = xmmword_257AE58;
  long long v319 = xmmword_257AE70;
  uint64_t v318 = unk_257AE68;
  uint64_t v320 = unk_257AE80;
  uint64_t v322 = unk_257AE98;
  long long v321 = xmmword_257AE88;
  sub_4BDC0C(qword_257AEA0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_257AEB8 = (uint64_t)operator new(0x19uLL);
  unk_257AEC0 = v282;
  strcpy((char *)qword_257AEB8, "From_User_Location_List");
  byte_257AEE7 = 20;
  strcpy(byte_257AED0, "Origin_Waypoint_List");
  qword_257AEE8 = (uint64_t)operator new(0x20uLL);
  unk_257AEF0 = v278;
  strcpy((char *)qword_257AEE8, "Intermediate_Waypoint_List");
  unk_257AF00 = operator new(0x20uLL);
  unk_257AF08 = v280;
  strcpy(unk_257AF00, "Destination_Waypoint_List");
  byte_257AF2F = 15;
  strcpy(byte_257AF18, "{toDestination}");
  byte_257AF47 = 13;
  strcpy((char *)&xmmword_257AF30, "{Destination}");
  byte_257AF5F = 7;
  strcpy(byte_257AF48, "To_Home");
  byte_257AF77 = 14;
  strcpy(byte_257AF60, "To_ContactHome");
  byte_257AF8F = 7;
  strcpy(byte_257AF78, "To_Work");
  byte_257AFA7 = 14;
  strcpy(byte_257AF90, "To_ContactWork");
  strcpy(&byte_257AFBF, "\nTo_Business");
  strcpy(byte_257AFA8, "To_Address");
  byte_257AFD7 = 11;
  byte_257AFEF = 16;
  strcpy(byte_257AFD8, "To_Other_Contact");
  strcpy(&byte_257B007, "\tTo_ContactSchool");
  strcpy(byte_257AFF0, "To_School");
  byte_257B01F = 16;
  byte_257B037 = 17;
  strcpy(byte_257B020, "To_PersonLocation");
  qword_257B038 = (uint64_t)operator new(0x20uLL);
  unk_257B040 = v279;
  strcpy((char *)qword_257B038, "To_ContactCustomLabelAddress");
  byte_257B067 = 7;
  strcpy((char *)&dword_257B050, "At_Home");
  byte_257B07F = 14;
  strcpy((char *)&qword_257B068, "At_ContactHome");
  byte_257B097 = 7;
  strcpy((char *)&dword_257B080, "At_Work");
  byte_257B0AF = 14;
  strcpy((char *)&qword_257B098, "At_ContactWork");
  strcpy(&byte_257B0C7, "\nAt_Business");
  strcpy((char *)&qword_257B0B0, "At_Address");
  byte_257B0DF = 11;
  byte_257B0F7 = 16;
  strcpy(byte_257B0E0, "At_Other_Contact");
  byte_257B10F = 4;
  strcpy((char *)&dword_257B0F8, "Home");
  byte_257B127 = 11;
  strcpy((char *)&qword_257B110 + 7, "Home");
  qword_257B110 = *(void *)&v265[16];
  byte_257B13F = 4;
  strcpy((char *)&dword_257B128, "Work");
  byte_257B157 = 11;
  strcpy((char *)&qword_257B140 + 7, "Work");
  qword_257B140 = *(void *)v265;
  byte_257B16F = 7;
  strcpy((char *)&dword_257B158, "Address");
  byte_257B187 = 8;
  strcpy((char *)&qword_257B170, "Business");
  byte_257B19F = 13;
  qword_257B188 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_257B188 + 5) = *(void *)&v265[32];
  byte_257B195 = 0;
  byte_257B1B7 = 6;
  strcpy((char *)&dword_257B1A0, "School");
  byte_257B1CF = 13;
  strcpy((char *)&qword_257B1B8, "ContactSchool");
  byte_257B1E7 = 14;
  strcpy((char *)&qword_257B1D0, "PersonLocation");
  qword_257B1E8 = (uint64_t)operator new(0x20uLL);
  xmmword_257B1F0 = v280;
  strcpy((char *)qword_257B1E8, "ContactCustomLabelAddress");
  if (byte_257AF47 < 0)
  {
    sub_4200(&xmmword_257B200, (void *)xmmword_257AF30, *((unint64_t *)&xmmword_257AF30 + 1));
  }
  else
  {
    xmmword_257B200 = xmmword_257AF30;
    qword_257B210 = unk_257AF40;
  }
  byte_257B22F = 16;
  strcpy((char *)&xmmword_257B218, "{PrevExitNumber}");
  byte_257B247 = 10;
  strcpy((char *)&qword_257B230, "{PrevRoad}");
  qword_257B248 = (uint64_t)operator new(0x20uLL);
  unk_257B250 = v281;
  strcpy((char *)qword_257B248, "{RouteTotalExpectedTime}");
  byte_257B277 = 18;
  strcpy(byte_257B260, "{ChargePercentage}");
  qword_257B278 = (uint64_t)operator new(0x20uLL);
  unk_257B280 = v275;
  strcpy((char *)qword_257B278, "{RemainingChargePercentage}");
  byte_257B2A7 = 16;
  strcpy(byte_257B290, "{ChargeDuration}");
  byte_257B2BF = 15;
  strcpy((char *)&qword_257B2A8, "{ConnectorType}");
  byte_257B2D7 = 19;
  strcpy(byte_257B2C0, "{ChargeStationName}");
  byte_257B2EF = 7;
  strcpy((char *)&dword_257B2D8, "{Power}");
  byte_257B307 = 13;
  strcpy((char *)&qword_257B2F0, "{VehicleName}");
  byte_257B31F = 18;
  strcpy((char *)&xmmword_257B308, "{AreaIncidentName}");
  byte_257B337 = 14;
  strcpy((char *)&qword_257B320, "{AreaIncident}");
  byte_257B34F = 16;
  strcpy((char *)&xmmword_257B338, "{AffectedRegion}");
  byte_257B367 = 21;
  strcpy(byte_257B350, "{AreaIncidentWeblink}");
  byte_257B37F = 20;
  strcpy((char *)&xmmword_257B368, "{AreaIncidentAgency}");
  byte_257B397 = 11;
  strcpy((char *)&qword_257B380, "{IssueTime}");
  byte_257B3AF = 12;
  strcpy((char *)&qword_257B398, "{UpdateTime}");
  byte_257B3C7 = 11;
  strcpy((char *)&qword_257B3B0, "{IssueDate}");
  byte_257B3DF = 12;
  strcpy((char *)&qword_257B3C8, "{UpdateDate}");
  qword_257B3E0 = (uint64_t)operator new(0x20uLL);
  unk_257B3E8 = v281;
  strcpy((char *)qword_257B3E0, "{AreaIncidentDataSource}");
  byte_257B40F = 13;
  strcpy((char *)&qword_257B3F8, "{AreaHectare}");
  byte_257B427 = 10;
  strcpy((char *)&qword_257B410, "{AreaAcre}");
  qword_257B428 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257B430 = v277;
  strcpy((char *)qword_257B428, "{WildfirePercentageContained}");
  qword_257B440 = (uint64_t)operator new(0x28uLL);
  unk_257B448 = v269[1];
  strcpy((char *)qword_257B440, "{WildfireExpectedContainmentDate}");
  qword_257B458 = (uint64_t)operator new(0x20uLL);
  unk_257B460 = v279;
  strcpy((char *)qword_257B458, "{ServerRecommendedRouteName}");
  qword_257B470 = (uint64_t)operator new(0x20uLL);
  unk_257B478 = v279;
  strcpy((char *)qword_257B470, "{ServerNonRecommendedRoute1}");
  qword_257B488 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257B490 = v279;
  strcpy((char *)qword_257B488, "{ServerNonRecommendedRoute2}");
  byte_257B4B7 = 12;
  strcpy((char *)&qword_257B4A0, "{ClientDest}");
  byte_257B4CF = 6;
  strcpy((char *)&dword_257B4B8, "{Name}");
  qword_257B4D0 = (uint64_t)operator new(0x20uLL);
  unk_257B4D8 = v271;
  strcpy((char *)qword_257B4D0, "ProactiveAlert_FasterRouteTitle");
  qword_257B4E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257B4F0 = v278;
  strcpy((char *)qword_257B4E8, "ProactiveAlert_RoadClosure");
  qword_257B500 = (uint64_t)operator new(0x30uLL);
  unk_257B508 = v273;
  strcpy((char *)qword_257B500, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_257B518 = (uint64_t)operator new(0x28uLL);
  unk_257B520 = v276;
  strcpy((char *)qword_257B518, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_257B530 = (uint64_t)operator new(0x28uLL);
  unk_257B538 = v276;
  strcpy((char *)qword_257B530, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_257B548 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257B550 = v276;
  strcpy((char *)qword_257B548, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_257B560 = (uint64_t)operator new(0x30uLL);
  unk_257B568 = xmmword_20B93B0;
  strcpy((char *)qword_257B560, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_257B58F = 17;
  strcpy((char *)&qword_257B578, "Proactive_Driving");
  strcpy(&byte_257B5A7, "\n{RouteName}");
  strcpy((char *)&qword_257B590, "_RouteName");
  byte_257B5BF = 11;
  qword_257B5C0 = (uint64_t)operator new(0x28uLL);
  unk_257B5C8 = v269[1];
  strcpy((char *)qword_257B5C0, "Pass_Traffic_Light_Spoken_Primary");
  qword_257B5D8 = (uint64_t)operator new(0x20uLL);
  unk_257B5E0 = v277;
  strcpy((char *)qword_257B5D8, "Pass_Stop_Sign_Spoken_Primary");
  unk_257B5F0 = operator new(0x20uLL);
  unk_257B5F8 = v269[0];
  strcpy(unk_257B5F0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_257B61F, "\nBannerBody");
  strcpy(byte_257B608, "BannerHead");
  strcpy(&byte_257B637, "\nBannerDescription");
  byte_257B64F = 17;
  strcpy(&byte_257B667, "\n_Incident");
  strcpy((char *)&qword_257B650, "VoiceAlert");
  strcpy(&byte_257B67F, "\t_Area_Incident");
  byte_257B697 = 14;
  byte_257B6AF = 15;
  strcpy((char *)&qword_257B698, "_Area_Incidents");
  strcpy(&byte_257B6C7, "\t_Crash");
  strcpy((char *)&qword_257B6B0, "_Accident");
  byte_257B6DF = 6;
  byte_257B6F7 = 16;
  strcpy((char *)&xmmword_257B6E0, "_Congestion_Zone");
  strcpy(&byte_257B70F, "\n_Environmental_Zone");
  strcpy((char *)&qword_257B6F8, "_Toll_Zone");
  byte_257B727 = 19;
  BYTE1(qword_257B738) = 116;
  WORD1(qword_257B738) = 0;
  HIDWORD(qword_257B738) = 301989888;
  strcpy(byte_257B740, "_Construction");
  strcpy((char *)&qword_257B728, "_Incident_Accide");
  byte_257B757 = 13;
  byte_257B76F = 7;
  strcpy((char *)&dword_257B758, "_Hazard");
  byte_257B787 = 12;
  strcpy((char *)&qword_257B770, "_LaneClosure");
  byte_257B79F = 12;
  strcpy((char *)&qword_257B788, "_LaneTrailer");
  qmemcpy(&byte_257B7B7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_257B7A0, "_Shoulder");
  qword_257B7C8 = 0x1500007200000000;
  *(void *)algn_257B7C4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_257B7D0, "_Causing_Traffic_Delay");
  HIBYTE(word_257B7E6) = 22;
  byte_257B7FF = 6;
  strcpy((char *)&dword_257B7E8, "_Timed");
  byte_257B817 = 12;
  strcpy((char *)&qword_257B800, "_HasDistance");
  byte_257B82F = 8;
  strcpy((char *)&qword_257B818, "_Closure");
  strcpy(&byte_257B847, "\n_BadRoad");
  strcpy((char *)&qword_257B830, "_NoReroute");
  byte_257B85F = 8;
  byte_257B877 = 12;
  strcpy((char *)&qword_257B860, "_TollTrailer");
  byte_257B88F = 12;
  strcpy((char *)&qword_257B878, "_BestTrailer");
  byte_257B8A7 = 8;
  strcpy((char *)&qword_257B890, "_Trailer");
  byte_257B8BF = 18;
  strcpy((char *)&xmmword_257B8A8, "_Secondary_Trailer");
  byte_257B8D7 = 8;
  strcpy((char *)&qword_257B8C0, "_Savings");
  byte_257B8EF = 8;
  strcpy((char *)&qword_257B8D8, "_AltRoad");
  byte_257B907 = 6;
  strcpy((char *)&dword_257B8F0, "_Named");
  byte_257B91F = 6;
  strcpy((char *)&dword_257B908, "_NAMED");
  byte_257B937 = 22;
  strcpy((char *)&xmmword_257B920, "_Named_Suggested_Route");
  qword_257B950 = 0x1000000000000000;
  xmmword_257B940 = xmmword_20E81D0;
  byte_257B96F = 11;
  strcpy((char *)&qword_257B958, "_Speed_Trap");
  byte_257B987 = 4;
  strcpy((char *)&dword_257B970, "_UGI");
  byte_257B99F = 12;
  strcpy((char *)&qword_257B988, "_Safer_Route");
  qword_257B9A0 = (uint64_t)operator new(0x20uLL);
  unk_257B9A8 = v271;
  strcpy((char *)qword_257B9A0, "BlockedRouteByBlockingIncident_");
  qword_257B9B8 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_257B9C0 = xmmword_20B9280;
  strcpy((char *)qword_257B9B8, "BlockedRouteByManeuverRestriction_");
  qword_257B9D0 = (uint64_t)operator new(0x20uLL);
  unk_257B9D8 = v269[0];
  strcpy((char *)qword_257B9D0, "BlockedRouteByTimeRestriction_");
  qword_257B9E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257B9F0 = xmmword_20B8FD0;
  strcpy((char *)qword_257B9E8, "SuggestRouteToAvoidBlockingIncident_");
  qword_257BA00 = (uint64_t)operator new(0x30uLL);
  unk_257BA08 = xmmword_20B9380;
  strcpy((char *)qword_257BA00, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_257BA18 = (uint64_t)operator new(0x30uLL);
  unk_257BA20 = xmmword_20B93E0;
  strcpy((char *)qword_257BA18, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_257BA47 = 1;
  word_257BA30 = 95;
  strcpy((char *)&xmmword_257BA48, "IncidentsCausingDelay_");
  HIBYTE(word_257BA5E) = 22;
  qword_257BA60 = (uint64_t)operator new(0x19uLL);
  unk_257BA68 = v282;
  strcpy((char *)qword_257BA60, "NonVotableRoadIncident_");
  byte_257BA8F = 20;
  strcpy(byte_257BA78, "VotableRoadIncident_");
  byte_257BAA7 = 13;
  strcpy((char *)&qword_257BA90, "AreaIncident_");
  byte_257BABF = 15;
  strcpy((char *)&qword_257BAA8, "CongestionZone_");
  qword_257BAC0 = (uint64_t)operator new(0x20uLL);
  unk_257BAC8 = v281;
  strcpy((char *)qword_257BAC0, "EVModifiedChargingStops_");
  byte_257BAEF = 13;
  strcpy((char *)&qword_257BAD8, "EVDisconnect_");
  byte_257BB07 = 12;
  strcpy((char *)&qword_257BAF0, "EVReconnect_");
  qword_257BB08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257BB10 = v279;
  strcpy((char *)qword_257BB08, "EVOfflineToOnlineTransition_");
  byte_257BB37 = 13;
  strcpy((char *)&qword_257BB20, "EVOfflineSAR_");
  byte_257BB4F = 21;
  strcpy((char *)&xmmword_257BB38, "EVTowingNotSupported_");
  byte_257BB67 = 18;
  strcpy(algn_257BB50, "EVInfeasibleRoute_");
  qword_257BB68 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_257BB70 = xmmword_20B8DF0;
  strcpy((char *)qword_257BB68, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_257BB80 = (uint64_t)operator new(0x40uLL);
  unk_257BB88 = xmmword_20B98C0;
  strcpy((char *)qword_257BB80, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_257BB98 = (uint64_t)operator new(0x30uLL);
  unk_257BBA0 = v274;
  strcpy((char *)qword_257BB98, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_257BBB0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_257BBB8 = xmmword_20B9A80;
  strcpy((char *)qword_257BBB0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_257BBC8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_257BBD0 = v273;
  strcpy((char *)qword_257BBC8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v185 = operator new(0x30uLL);
  qword_257BBE0 = (uint64_t)v185;
  unk_257BBE8 = v274;
  _OWORD *v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v269[1];
  *(_OWORD *)((char *)v185 + 28) = v269[0];
  *((unsigned char *)v185 + 44) = 0;
  qword_257BBF8 = (uint64_t)operator new(0x28uLL);
  unk_257BC00 = v272;
  strcpy((char *)qword_257BBF8, "SuggestDetourWithHigherArrivalSOC_");
  v186 = operator new(0x30uLL);
  qword_257BC10 = (uint64_t)v186;
  unk_257BC18 = *(_OWORD *)&v265[48];
  _OWORD *v186 = *(_OWORD *)&v265[32];
  v186[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v186 + 46) = 0;
  qword_257BC28 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257BC30 = v276;
  strcpy((char *)qword_257BC28, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_257BC40 = (uint64_t)operator new(0x28uLL);
  unk_257BC48 = v268;
  strcpy((char *)qword_257BC40, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_257BC58 = (uint64_t)operator new(0x20uLL);
  unk_257BC60 = v281;
  strcpy((char *)qword_257BC58, "OfflineToOnlineNewRoute_");
  qword_257BC70 = (uint64_t)operator new(0x40uLL);
  unk_257BC78 = xmmword_20B98C0;
  strcpy((char *)qword_257BC70, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_257BC9F = 20;
  strcpy(byte_257BC88, "LPR_OFFLINE_REROUTE_");
  byte_257BCB7 = 16;
  strcpy((char *)&xmmword_257BCA0, "LPR_OFFLINE_SAR_");
  byte_257BCCF = 20;
  strcpy(byte_257BCB8, "LPR_OFFLINE_REROUTE_");
  byte_257BCE7 = 16;
  strcpy((char *)&xmmword_257BCD0, "LPR_OFFLINE_SAR_");
  byte_257BCFF = 19;
  strcpy(byte_257BCE8, "SuggestFasterRoute_");
  qword_257BD00 = (char *)operator new(0x20uLL);
  xmmword_257BD08 = v280;
  strcpy(qword_257BD00, "AreaIncidentSaferReroute_");
  byte_257BD2F = 12;
  strcpy((char *)&qword_257BD18, "_Remove_Stop");
  byte_257BD47 = 13;
  strcpy((char *)&qword_257BD30, "_Remove_Stops");
  strcpy(&byte_257BD5F, "\t_Add_Stops");
  strcpy((char *)&qword_257BD48, "_Add_Stop");
  strcpy(&byte_257BD77, "\n_Change_Route");
  byte_257BD8F = 13;
  byte_257BDA7 = 15;
  strcpy((char *)&qword_257BD90, "_Different_Stop");
  byte_257BDBF = 16;
  strcpy((char *)&xmmword_257BDA8, "_Different_Stops");
  byte_257BDD7 = 15;
  strcpy((char *)&qword_257BDC0, "_EV_Remove_Stop");
  byte_257BDEF = 16;
  strcpy((char *)&xmmword_257BDD8, "_EV_Remove_Stops");
  byte_257BE07 = 12;
  strcpy((char *)&qword_257BDF0, "_EV_Add_Stop");
  byte_257BE1F = 13;
  strcpy((char *)&qword_257BE08, "_EV_Add_Stops");
  byte_257BE37 = 15;
  strcpy((char *)&qword_257BE20, "_EV_Low_Battery");
  byte_257BE4F = 14;
  strcpy((char *)&qword_257BE38, "_EV_Infeasible");
  byte_257BE67 = 15;
  strcpy((char *)&qword_257BE50, "_EV_Last_Chance");
  qword_257BE68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257BE70 = v281;
  strcpy((char *)qword_257BE68, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_257BD68;
  qword_257BE80 = (uint64_t)operator new(0x20uLL);
  unk_257BE88 = v280;
  strcpy((char *)qword_257BE80, "_EV_Low_Battery_Add_Stops");
  qword_257BE98 = (uint64_t)operator new(0x19uLL);
  unk_257BEA0 = v282;
  strcpy((char *)qword_257BE98, "_EV_Infeasible_Add_Stop");
  int v188 = byte_257BD77;
  if (byte_257BD77 >= 0) {
    size_t v189 = byte_257BD77;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    uint64_t v195 = (char *)operator new(v193 + 1);
    qword_257BEB8 = v189 + 14;
    unk_257BEC0 = v194 | 0x8000000000000000;
    qword_257BEB0 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    unint64_t v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_257BEB8) = 0;
    WORD1(qword_257BEB8) = 0;
    HIDWORD(qword_257BEB8) = 0;
    unk_257BEC0 = 0;
    byte_257BEC7 = v189 + 14;
    strcpy((char *)&qword_257BEB0, "_EV_Infe");
    unint64_t v191 = (char *)&qword_257BEB8 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_257BD60;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  uint64_t v197 = (char *)operator new(0x20uLL);
  qword_257BEC8 = (uint64_t)v197;
  *(_OWORD *)algn_257BED0 = v281;
  *(void *)uint64_t v197 = qword_257BE50;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_257BE50 + 7);
  *(void *)(v197 + 15) = qword_257BD48;
  v197[23] = word_257BD50;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    unint64_t v199 = (uint64_t *)operator new(v200 + 1);
    qword_257BEE8 = v189 + 15;
    unk_257BEF0 = v201 | 0x8000000000000000;
    qword_257BEE0 = (uint64_t)v199;
  }
  else
  {
    unint64_t v199 = &qword_257BEE0;
    qword_257BEE8 = 0;
    unk_257BEF0 = 0;
    qword_257BEE0 = 0;
    byte_257BEF7 = v189 + 15;
  }
  uint64_t *v199 = qword_257BE50;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_257BE50 + 7);
  uint64_t v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      v203 = &qword_257BD60;
    }
    else {
      v203 = (uint64_t *)qword_257BD60;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_257BF0F = 17;
  strcpy((char *)&xmmword_257BEF8, "_EV_Forced_Detour");
  qword_257BF10 = (uint64_t)operator new(0x20uLL);
  unk_257BF18 = v280;
  strcpy((char *)qword_257BF10, "_EV_Higher_Arrival_Charge");
  qword_257BF28 = (uint64_t)operator new(0x28uLL);
  unk_257BF30 = xmmword_20B8FD0;
  strcpy((char *)qword_257BF28, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_257BF57 = 16;
  strcpy(byte_257BF40, "_EV_Out_Of_Range");
  qword_257BF58 = (uint64_t)operator new(0x20uLL);
  unk_257BF60 = v275;
  strcpy((char *)qword_257BF58, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_257BF70, "_EV_Forced_Modify_Stop");
  HIBYTE(word_257BF86) = 22;
  qword_257BF88 = (uint64_t)operator new(0x19uLL);
  unk_257BF90 = v282;
  strcpy((char *)qword_257BF88, "_EV_Forced_Modify_Stops");
  byte_257BFB7 = 19;
  strcpy(byte_257BFA0, "_EV_Forced_Add_Stop");
  byte_257BFCF = 20;
  strcpy((char *)&xmmword_257BFB8, "_EV_Forced_Add_Stops");
  byte_257BFE7 = 21;
  strcpy(byte_257BFD0, "_EV_Battery_Info_Lost");
  qword_257BFE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257BFF0 = v280;
  strcpy((char *)qword_257BFE8, "_EV_Battery_Info_Restored");
  qword_257C000 = (uint64_t)operator new(0x20uLL);
  unk_257C008 = v281;
  strcpy((char *)qword_257C000, "_EV_Towing_Not_Supported");
  qword_257C018 = (uint64_t)operator new(0x28uLL);
  unk_257C020 = v270;
  strcpy((char *)qword_257C018, "_EV_Offline_to_Online_Transition");
  byte_257C047 = 15;
  strcpy((char *)&qword_257C030, "_EV_Offline_SAR");
  qword_257C048 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257C050 = v279;
  strcpy((char *)qword_257C048, "_Offline_to_Online_New_Route");
  byte_257C077 = 12;
  strcpy((char *)&qword_257C060, "BannerButton");
  byte_257C08F = 8;
  strcpy((char *)&qword_257C078, "_Dismiss");
  byte_257C0A7 = 3;
  word_257C090 = 20319;
  byte_257C092 = 75;
  byte_257C093 = 0;
  byte_257C0BF = 11;
  strcpy((char *)&qword_257C0A8, "_Still_Here");
  byte_257C0D7 = 8;
  strcpy((char *)&qword_257C0C0, "_Cleared");
  qmemcpy(&byte_257C0EF, "\nBannerButton", 13);
  strcpy((char *)&qword_257C0D8, "_No_Thanks");
  uint64_t v204 = qword_257C068;
  qword_257C100 = 0x1400000000000000;
  *(void *)algn_257C0FC = 0x7373696D7369445FLL;
  qword_257C118 = 0xF00000000000000;
  qword_257C110 = 0x4B4F5F6E6F7474;
  int v205 = byte_257BE07;
  if (byte_257BE07 >= 0) {
    size_t v206 = byte_257BE07;
  }
  else {
    size_t v206 = qword_257BDF8;
  }
  unint64_t v207 = v206 + 12;
  qword_257C108 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    uint64_t v211 = (char *)operator new(v209 + 1);
    qword_257C128 = v206 + 12;
    unk_257C130 = v210 | 0x8000000000000000;
    qword_257C120 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)uint64_t v211 = *(void *)"BannerButton";
    unint64_t v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_257C128) = 0;
    HIWORD(qword_257C128) = 0;
    unk_257C130 = 0;
    byte_257C137 = v206 + 12;
    strcpy((char *)&qword_257C120, "BannerButton");
    unint64_t v208 = (char *)&qword_257C128 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    v212 = &qword_257BDF0;
  }
  else {
    v212 = (uint64_t *)qword_257BDF0;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_257BE1F;
  if (byte_257BE1F >= 0) {
    size_t v214 = byte_257BE1F;
  }
  else {
    size_t v214 = unk_257BE10;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    uint64_t v219 = (char *)operator new(v217 + 1);
    qword_257C140 = v214 + 12;
    unk_257C148 = v218 | 0x8000000000000000;
    qword_257C138 = (uint64_t)v219;
    *(void *)uint64_t v219 = qword_257C060;
    *((_DWORD *)v219 + 2) = qword_257C068;
    unint64_t v216 = v219 + 12;
  }
  else
  {
    qword_257C140 = 0;
    unk_257C148 = 0;
    byte_257C14F = v214 + 12;
    LODWORD(qword_257C140) = qword_257C068;
    qword_257C138 = qword_257C060;
    unint64_t v216 = (char *)&qword_257C140 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    v220 = &qword_257BE08;
  }
  else {
    v220 = (uint64_t *)qword_257BE08;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_257BDD7;
  if (byte_257BDD7 >= 0) {
    size_t v222 = byte_257BDD7;
  }
  else {
    size_t v222 = unk_257BDC8;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    uint64_t v227 = (char *)operator new(v225 + 1);
    qword_257C158 = v222 + 12;
    unk_257C160 = v226 | 0x8000000000000000;
    qword_257C150 = (uint64_t)v227;
    *(void *)uint64_t v227 = qword_257C060;
    *((_DWORD *)v227 + 2) = qword_257C068;
    unint64_t v224 = v227 + 12;
  }
  else
  {
    qword_257C158 = 0;
    unk_257C160 = 0;
    byte_257C167 = v222 + 12;
    LODWORD(qword_257C158) = qword_257C068;
    qword_257C150 = qword_257C060;
    unint64_t v224 = (char *)&qword_257C158 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_257BDC0;
  }
  else {
    v228 = (uint64_t *)qword_257BDC0;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_257C077;
  if (byte_257C077 >= 0) {
    size_t v230 = byte_257C077;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_257BDEF;
  if (byte_257BDEF >= 0) {
    size_t v232 = byte_257BDEF;
  }
  else {
    size_t v232 = *((void *)&xmmword_257BDD8 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    unint64_t v234 = &qword_257C168;
    qword_257C170 = 0;
    unk_257C178 = 0;
    qword_257C168 = 0;
    byte_257C17F = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  unint64_t v234 = (uint64_t *)operator new(v241 + 1);
  qword_257C170 = v232 + v230;
  unk_257C178 = v242 | 0x8000000000000000;
  qword_257C168 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_257C060;
    }
    else {
      v235 = (uint64_t *)qword_257C060;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_257BDD8;
    }
    else {
      v237 = (long long *)xmmword_257BDD8;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    unint64_t v239 = (uint64_t *)operator new(v243 + 1);
    qword_257C188 = v230 + 11;
    unk_257C190 = v244 | 0x8000000000000000;
    qword_257C180 = (uint64_t)v239;
  }
  else
  {
    unint64_t v239 = &qword_257C180;
    qword_257C188 = 0;
    unk_257C190 = 0;
    qword_257C180 = 0;
    byte_257C197 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_257C180 + 7) = *(_DWORD *)((char *)&qword_257C0A8 + 7);
      qword_257C180 = qword_257C0A8;
      BYTE3(qword_257C188) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    uint64_t v245 = &qword_257C060;
  }
  else {
    uint64_t v245 = (uint64_t *)qword_257C060;
  }
  memmove(v239, v245, v230);
  v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_257C0A8 + 7);
  *(void *)v246 = qword_257C0A8;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    int v248 = &qword_257C198;
    qword_257C1A0 = 0;
    unk_257C1A8 = 0;
    qword_257C198 = 0;
    byte_257C1AF = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v263 = v240 | 7;
  }
  uint64_t v264 = v263 + 1;
  int v248 = (uint64_t *)operator new(v263 + 1);
  qword_257C1A0 = v230 + 8;
  unk_257C1A8 = v264 | 0x8000000000000000;
  qword_257C198 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      v249 = &qword_257C060;
    }
    else {
      v249 = (uint64_t *)qword_257C060;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  v250 = (char *)v248 + v230;
  *(void *)v250 = qword_257C0C0;
  v250[8] = 0;
  int v251 = byte_257C0EF;
  if (byte_257C0EF >= 0) {
    size_t v252 = byte_257C0EF;
  }
  else {
    size_t v252 = qword_257C0E0;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    unint64_t v254 = &qword_257C1B0;
    qword_257C1B8 = 0;
    unk_257C1C0 = 0;
    qword_257C1B0 = 0;
    byte_257C1C7 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v261 = v253 | 7;
  }
  uint64_t v262 = v261 + 1;
  unint64_t v254 = (uint64_t *)operator new(v261 + 1);
  qword_257C1B8 = v252 + v230;
  unk_257C1C0 = v262 | 0x8000000000000000;
  qword_257C1B0 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      v255 = &qword_257C060;
    }
    else {
      v255 = (uint64_t *)qword_257C060;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      v257 = &qword_257C0D8;
    }
    else {
      v257 = (uint64_t *)qword_257C0D8;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_257C1DF, "\n{newroute}");
  strcpy((char *)&qword_257C1C8, "{roadname}");
  strcpy(&byte_257C1F7, "\n{count}");
  byte_257C20F = 7;
  strcpy(&byte_257C227, "\n{dur}");
  strcpy((char *)&qword_257C210, "{duration}");
  byte_257C23F = 5;
  qword_257C240 = (uint64_t)operator new(0x20uLL);
  unk_257C248 = v278;
  strcpy((char *)qword_257C240, "{PleaseProceedWithCaution}");
  byte_257C26F = 15;
  strcpy((char *)&qword_257C258, "{UserRouteName}");
  byte_257C287 = 20;
  strcpy((char *)&xmmword_257C270, "{SuggestedRouteName}");
  byte_257C29F = 18;
  strcpy(byte_257C288, "Speed_Camera_Ahead");
  qword_257C2A0 = (uint64_t)operator new(0x20uLL);
  unk_257C2A8 = v277;
  strcpy((char *)qword_257C2A0, "Red_Light_Camera_Ahead_Spoken");
  qword_257C2B8 = (uint64_t)operator new(0x20uLL);
  unk_257C2C0 = v277;
  strcpy((char *)qword_257C2B8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_257C2D0 = (uint64_t)operator new(0x28uLL);
  unk_257C2D8 = v272;
  strcpy((char *)qword_257C2D0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_257C2E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257C2F0 = v266;
  strcpy((char *)qword_257C2E8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_257C300 = (uint64_t)operator new(0x20uLL);
  unk_257C308 = v279;
  strcpy((char *)qword_257C300, "Camera_Ahead_Multiple_Spoken");
  qword_257C318 = (uint64_t)operator new(0x30uLL);
  unk_257C320 = v267;
  strcpy((char *)qword_257C318, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_257C330 = (char *)operator new(0x30uLL);
  strcpy(qword_257C330, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_257C35F = 16;
  xmmword_257C338 = v267;
  strcpy(byte_257C348, "_Speed_Limit_Mph");
  byte_257C377 = 16;
  strcpy(byte_257C360, "_Speed_Limit_Kph");
  byte_257C38F = 11;
  strcpy((char *)&qword_257C378, "Watch_Speed");
  byte_257C3A7 = 4;
  strcpy((char *)&dword_257C390, "_One");
  byte_257C3BF = 4;
  strcpy((char *)&dword_257C3A8, "_Two");
  byte_257C3D7 = 4;
  strcpy((char *)&dword_257C3C0, "_Few");
  byte_257C3EF = 5;
  strcpy((char *)&dword_257C3D8, "_Many");
  byte_257C407 = 6;
  strcpy((char *)&dword_257C3F0, "_Other");
  byte_257C41F = 4;
  strcpy((char *)&dword_257C408, "_ONE");
  byte_257C437 = 7;
  strcpy((char *)&dword_257C420, "{Speed}");
  byte_257C44F = 8;
  strcpy((char *)&qword_257C438, "Dismount");
  byte_257C467 = 4;
  strcpy((char *)&dword_257C450, "Walk");
  byte_257C47F = 5;
  strcpy((char *)&dword_257C468, "Mount");
  byte_257C497 = 7;
  strcpy((char *)&dword_257C480, "Remount");
  strcpy(&byte_257C4AF, "\t_Crosswalk");
  strcpy((char *)&qword_257C498, "Walk_Road");
  strcpy(&byte_257C4C7, "\n_PLURAL");
  byte_257C4DF = 7;
  strcpy(&byte_257C4F7, "\n{description1}");
  strcpy((char *)&qword_257C4E0, "_SECONDARY");
  byte_257C50F = 14;
  byte_257C527 = 14;
  strcpy((char *)&qword_257C510, "{description2}");
  byte_257C53F = 21;
  strcpy((char *)&xmmword_257C528, "TWO_ROAD_DESCRIPTIONS");
  byte_257C557 = 17;
  strcpy((char *)&xmmword_257C540, "{SlopePercentage}");
  byte_257C56F = 15;
  strcpy((char *)&qword_257C558, "_Protected_Lane");
  strcpy(&byte_257C587, "\n_Paved_Path");
  strcpy((char *)&qword_257C570, "_Bike_Path");
  byte_257C59F = 11;
  byte_257C5B7 = 15;
  strcpy((char *)&qword_257C5A0, "_Dedicated_Lane");
  byte_257C5CF = 12;
  strcpy((char *)&qword_257C5B8, "_Shared_Path");
  strcpy(&byte_257C5E7, "\n_UnnamedRoad");
  strcpy((char *)&qword_257C5D0, "_Bike_Lane");
  byte_257C5FF = 12;
  byte_257C617 = 5;
  strcpy((char *)&dword_257C600, "_Path");
  byte_257C62F = 6;
  strcpy((char *)&dword_257C618, "_Trail");
  strcpy(&byte_257C647, "\t_Plaza");
  strcpy((char *)&qword_257C630, "_Sidewalk");
  byte_257C65F = 6;
  byte_257C677 = 15;
  strcpy((char *)&qword_257C660, "_Moving_Walkway");
  byte_257C68F = 14;
  strcpy((char *)&qword_257C678, "Two_Stage_Turn");
  byte_257C6A7 = 16;
  strcpy((char *)&xmmword_257C690, "{OptionalPeriod}");
  byte_257C6BF = 18;
  strcpy((char *)&xmmword_257C6A8, "Advisory_Separator");
  byte_257C6D7 = 6;
  strcpy((char *)&dword_257C6C0, "Period");
  byte_257C6EF = 21;
  strcpy((char *)&xmmword_257C6D8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_257C6F0, "Advisory_Title_Notices");
  HIBYTE(word_257C706) = 22;
  byte_257C71F = 7;
  strcpy((char *)&dword_257C708, "_DETAIL");
  byte_257C737 = 17;
  strcpy((char *)&xmmword_257C720, "_LONG_REGION_LIST");
  byte_257C74F = 16;
  strcpy((char *)&xmmword_257C738, "Advisory_Grouped");
  byte_257C767 = 11;
  strcpy((char *)&qword_257C750, "_Advisories");
  qword_257C768 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257C770 = v275;
  strcpy((char *)qword_257C768, "Advisory_WILDFIRE_METADATA_");
  byte_257C797 = 8;
  strcpy((char *)&qword_257C780, "Advisory");
  byte_257C7AF = 13;
  strcpy((char *)&qword_257C798, "MPR_NUM_STOPS");
  byte_257C7C7 = 17;
  strcpy(algn_257C7B0, "EV_CHARGE_STATION");
  byte_257C7DF = 11;
  strcpy((char *)&qword_257C7C8, "_NAMED_CITY");
  byte_257C7F7 = 5;
  strcpy((char *)&dword_257C7E0, "_Stop");
  strcpy(&byte_257C80F, "\n{StopsCount}");
  strcpy((char *)&qword_257C7F8, "{CityName}");
  byte_257C827 = 12;
  byte_257C83F = 11;
  strcpy((char *)&qword_257C828, "_With_Other");
  byte_257C857 = 15;
  strcpy((char *)&qword_257C840, "{DepartureTime}");
  qword_257C858 = (uint64_t)operator new(0x28uLL);
  unk_257C860 = v276;
  strcpy((char *)qword_257C858, "Ending_Charge_Station_Port_Availability");
  qword_257C870 = (uint64_t)operator new(0x28uLL);
  unk_257C878 = v268;
  strcpy((char *)qword_257C870, "Ending_Charge_Station_No_Availability");
  qword_257C888 = (uint64_t)operator new(0x28uLL);
  unk_257C890 = v272;
  strcpy((char *)qword_257C888, "Ending_Charge_Station_No_Real_Time");
  byte_257C8B7 = 16;
  strcpy(byte_257C8A0, "{AvailablePorts}");
  byte_257C8CF = 12;
  strcpy((char *)&qword_257C8B8, "{TotalPorts}");
  byte_257C8E7 = 14;
  strcpy((char *)&qword_257C8D0, "{ManeuverIcon}");
  qword_257C8E8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_257C8F0 = xmmword_20B9A60;
  strcpy((char *)qword_257C8E8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_257C900 = (uint64_t)operator new(0x20uLL);
  unk_257C908 = v275;
  strcpy((char *)qword_257C900, "Walking_Destination_Unnamed");
  qword_257C918 = (uint64_t)operator new(0x20uLL);
  unk_257C920 = v277;
  strcpy((char *)qword_257C918, "TrafficDelay_Label_Title_Sign");
  qword_257C930 = (uint64_t)operator new(0x20uLL);
  unk_257C938 = v279;
  strcpy((char *)qword_257C930, "Special_Guidance_Instruction");
  byte_257C95F = 2;
  strcpy((char *)&word_257C948, "CZ");
  byte_257C977 = 3;
  dword_257C960 = 5919811;
  unk_257C98F = 3;
  dword_257C978 = 6243649;
  byte_257C9A7 = 0;
  byte_257C9BF = 7;
  strcpy((char *)&dword_257C9A8, "TRANSIT");
  byte_257C9D7 = 7;
  strcpy((char *)&dword_257C9C0, "OFFLINE");
  qword_257C9D8 = (uint64_t)operator new(0x28uLL);
  unk_257C9E0 = v266;
  strcpy((char *)qword_257C9D8, "Advisory_Card_French_Climate_Law_Title");
  qword_257C9F0 = (uint64_t)operator new(0x30uLL);
  unk_257C9F8 = xmmword_20B93C0;
  strcpy((char *)qword_257C9F0, "Advisory_Card_French_Climate_Law_Details");
  qword_257CA08 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_257CA10 = v273;
  strcpy((char *)qword_257CA08, "French_Climate_Law_Metadata_Weblink_Title");
  qword_257CA20 = (uint64_t)operator new(0x20uLL);
  unk_257CA28 = v279;
  strcpy((char *)qword_257CA20, "{ClimateLawLearnMoreWeblink}");
  byte_257CA4F = 3;
  dword_257CA38 = 4280902;
  qword_257CA50 = (uint64_t)operator new(0x70uLL);
  unk_257CA58 = xmmword_20E81E0;
  strcpy((char *)qword_257CA50, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  qword_257CA68 = 0;
  unk_257CA70 = 0;
  qword_257CA78 = 0;
  v258 = (char *)operator new(9uLL);
  *(void *)v258 = 0x4020C000103050DLL;
  v258[8] = 6;
  qword_257CA68 = (uint64_t)v258;
  unk_257CA70 = v258 + 9;
  qword_257CA78 = (uint64_t)(v258 + 9);
  qword_257CA80 = 0;
  qword_257CA88 = 0;
  unk_257CA90 = 0;
  uint64_t v259 = (char *)operator new(9uLL);
  qword_257CA88 = (uint64_t)(v259 + 9);
  unk_257CA90 = v259 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v259 = 0x604020C00010305;
  v259[8] = 13;
  qword_257CA80 = (uint64_t)v259;
  return result;
}

void sub_5B903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_5B9394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5B9B3C(a1);
  *(_WORD *)(v4 + 1536) = 0;
  *(_OWORD *)(v4 + 1544) = 0u;
  *(_OWORD *)(v4 + 1560) = 0u;
  *(_OWORD *)(v4 + 1576) = 0u;
  *(void *)(v4 + 1592) = -1;
  *(_DWORD *)(v4 + 1600) = 0x7FFFFFFF;
  *(void *)(v4 + 1608) = -1;
  *(void *)(v4 + 1616) = -1;
  *(void *)(v4 + 1624) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v4 + 1632) = 0;
  *(_DWORD *)(v4 + 1640) = -1935635296;
  *(void *)(v4 + 1648) = 0;
  *(_DWORD *)(v4 + 1655) = 0;
  *(void *)(v4 + 1664) = 0;
  *(void *)(v4 + 1680) = 0;
  *(void *)(v4 + 1672) = 0;
  *(_DWORD *)(v4 + 1688) = 0;
  *(unsigned char *)(v4 + 1692) = 100;
  sub_5B949C(v4, a2);
  return a1;
}

void sub_5B9440(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1672) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 1591) & 0x80000000) == 0)
    {
LABEL_3:
      sub_5B97F4(v2);
      sub_4BCED0(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 1591) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 1568));
  sub_5B97F4(v2);
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5B949C(uint64_t a1, uint64_t a2)
{
  sub_5B98C0(a1, a2);
  sub_5B9E78(a1 + 712, a2 + 712);
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  if (a1 != a2)
  {
    sub_326C0((void *)(a1 + 976), *(char **)(a2 + 976), *(char **)(a2 + 984), (uint64_t)(*(void *)(a2 + 984) - *(void *)(a2 + 976)) >> 3);
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
    sub_147D0((void *)(a1 + 1008), *(char **)(a2 + 1008), *(char **)(a2 + 1016), (uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 2);
  }
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
  if (a1 != a2)
  {
    sub_147D0((void *)(a1 + 1072), *(char **)(a2 + 1072), *(char **)(a2 + 1080), (uint64_t)(*(void *)(a2 + 1080) - *(void *)(a2 + 1072)) >> 2);
    *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a2 + 1096);
    sub_147D0((void *)(a1 + 1104), *(char **)(a2 + 1104), *(char **)(a2 + 1112), (uint64_t)(*(void *)(a2 + 1112) - *(void *)(a2 + 1104)) >> 2);
    unint64_t v4 = *(void *)(a2 + 1136);
    if (v4)
    {
      unint64_t v5 = *(void **)(a1 + 1128);
      if (v4 > *(void *)(a1 + 1144) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(void *)(a1 + 1128) = 0;
          *(void *)(a1 + 1136) = 0;
          *(void *)(a1 + 1144) = 0;
          unint64_t v4 = *(void *)(a2 + 1136);
        }
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_24;
        }
        unint64_t v6 = ((v4 - 1) >> 6) + 1;
        unint64_t v5 = operator new(8 * v6);
        *(void *)(a1 + 1128) = v5;
        *(void *)(a1 + 1136) = 0;
        *(void *)(a1 + 1144) = v6;
        unint64_t v4 = *(void *)(a2 + 1136);
      }
      memmove(v5, *(const void **)(a2 + 1128), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v4 = *(void *)(a2 + 1136);
    }
    *(void *)(a1 + 1136) = v4;
    unint64_t v7 = *(void *)(a2 + 1160);
    if (!v7)
    {
LABEL_18:
      *(void *)(a1 + 1160) = v7;
      goto LABEL_20;
    }
    uint64_t v8 = *(void **)(a1 + 1152);
    if (v7 <= *(void *)(a1 + 1168) << 6)
    {
LABEL_17:
      memmove(v8, *(const void **)(a2 + 1152), (((v7 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      unint64_t v7 = *(void *)(a2 + 1160);
      goto LABEL_18;
    }
    if (v8)
    {
      operator delete(v8);
      *(void *)(a1 + 1152) = 0;
      *(void *)(a1 + 1160) = 0;
      *(void *)(a1 + 1168) = 0;
      unint64_t v7 = *(void *)(a2 + 1160);
    }
    if ((v7 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = ((v7 - 1) >> 6) + 1;
      uint64_t v8 = operator new(8 * v9);
      *(void *)(a1 + 1152) = v8;
      *(void *)(a1 + 1160) = 0;
      *(void *)(a1 + 1168) = v9;
      unint64_t v7 = *(void *)(a2 + 1160);
      goto LABEL_17;
    }
LABEL_24:
    sub_2E00();
  }
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a2 + 1096);
LABEL_20:
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  __int16 v10 = *(_WORD *)(a2 + 1184);
  *(unsigned char *)(a1 + 1186) = *(unsigned char *)(a2 + 1186);
  *(_WORD *)(a1 + 1184) = v10;
  std::string::operator=((std::string *)(a1 + 1192), (const std::string *)(a2 + 1192));
  uint64_t v11 = *(void *)(a2 + 1216);
  *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 1224);
  *(void *)(a1 + 1216) = v11;
  uint64_t v12 = *(void *)(a2 + 1237);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1237) = v12;
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
    long long v17 = *(_OWORD *)(a2 + 1392);
    long long v18 = *(_OWORD *)(a2 + 1408);
    long long v19 = *(_OWORD *)(a2 + 1424);
    *(_OWORD *)(a1 + 1438) = *(_OWORD *)(a2 + 1438);
    *(_OWORD *)(a1 + 1424) = v19;
    *(_OWORD *)(a1 + 1408) = v18;
    *(_OWORD *)(a1 + 1392) = v17;
  }
  else
  {
    sub_472BC8((void *)(a1 + 1248), *(char **)(a2 + 1248), *(char **)(a2 + 1256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1256) - *(void *)(a2 + 1248)) >> 2));
    uint64_t v13 = *(void *)(a2 + 1272);
    *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
    *(void *)(a1 + 1272) = v13;
    *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
    sub_5A4DC((void *)(a1 + 1288), *(uint64_t **)(a2 + 1304), 0);
    *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a2 + 1328);
    *(_DWORD *)(a1 + 1368) = *(_DWORD *)(a2 + 1368);
    sub_5A4DC((void *)(a1 + 1336), *(uint64_t **)(a2 + 1352), 0);
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
    long long v14 = *(_OWORD *)(a2 + 1392);
    long long v15 = *(_OWORD *)(a2 + 1408);
    long long v16 = *(_OWORD *)(a2 + 1424);
    *(_OWORD *)(a1 + 1438) = *(_OWORD *)(a2 + 1438);
    *(_OWORD *)(a1 + 1424) = v16;
    *(_OWORD *)(a1 + 1408) = v15;
    *(_OWORD *)(a1 + 1392) = v14;
    sub_147D0((void *)(a1 + 1456), *(char **)(a2 + 1456), *(char **)(a2 + 1464), (uint64_t)(*(void *)(a2 + 1464) - *(void *)(a2 + 1456)) >> 2);
  }
  __int16 v20 = *(_WORD *)(a2 + 1480);
  *(unsigned char *)(a1 + 1482) = *(unsigned char *)(a2 + 1482);
  *(_WORD *)(a1 + 1480) = v20;
  std::string::operator=((std::string *)(a1 + 1488), (const std::string *)(a2 + 1488));
  uint64_t v21 = *(void *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = *(_OWORD *)(a2 + 1512);
  *(void *)(a1 + 1528) = v21;
  return a1;
}

void ***sub_5B97F4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        unint64_t v7 = v8;
        if (v8)
        {
          unint64_t v9 = (char *)*(v3 - 2);
          unint64_t v6 = v7;
          if (v9 != v7)
          {
            do
            {
              __int16 v10 = (void *)*((void *)v9 - 9);
              if (v10)
              {
                *((void *)v9 - 8) = v10;
                operator delete(v10);
              }
              uint64_t v11 = (void *)*((void *)v9 - 12);
              if (v11)
              {
                *((void *)v9 - 11) = v11;
                operator delete(v11);
              }
              v9 -= 176;
            }
            while (v9 != v7);
            unint64_t v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        int v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_5B98C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128))
  {
    sub_4860AC(a1, a2);
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v8 = *(void **)(a1 + 104);
    if (v8)
    {
      *(void *)(a1 + 112) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      uint64_t v11 = *(void **)(a1 + 72);
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_489CF4(v10 - 144);
        while (v10 != v9);
        uint64_t v11 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 80) = v9;
      operator delete(v11);
    }
    uint64_t v12 = *(void **)(a1 + 24);
    if (v12)
    {
      *(void *)(a1 + 32) = v12;
      operator delete(v12);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  if (*(unsigned char *)(a2 + 264))
  {
    sub_4860AC(a1 + 136, a2 + 136);
  }
  else if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v13 = *(void **)(a1 + 240);
    if (v13)
    {
      *(void *)(a1 + 248) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void *)(a1 + 208);
    if (v14)
    {
      uint64_t v15 = *(void *)(a1 + 216);
      long long v16 = *(void **)(a1 + 208);
      if (v15 != v14)
      {
        do
          uint64_t v15 = sub_489CF4(v15 - 144);
        while (v15 != v14);
        long long v16 = *(void **)(a1 + 208);
      }
      *(void *)(a1 + 216) = v14;
      operator delete(v16);
    }
    long long v17 = *(void **)(a1 + 160);
    if (v17)
    {
      *(void *)(a1 + 168) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(a1 + 264) = 0;
  }
  if (a1 == a2)
  {
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
  }
  else
  {
    sub_5BAA90((uint64_t *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 7);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    sub_69208(a1 + 304, *(std::string **)(a2 + 304), *(std::string **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3));
    sub_69208(a1 + 328, *(std::string **)(a2 + 328), *(std::string **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 3));
    sub_31AF54((void *)(a1 + 352), *(char **)(a2 + 352), *(char **)(a2 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2));
    sub_69208(a1 + 376, *(std::string **)(a2 + 376), *(std::string **)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 3));
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  sub_486A74(a1 + 408, a2 + 408);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  std::string::operator=((std::string *)(a1 + 616), (const std::string *)(a2 + 616));
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  char v4 = *(unsigned char *)(a2 + 681);
  if (v4)
  {
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 681) = v4;
  char v5 = *(unsigned char *)(a2 + 683);
  if (v5)
  {
    *(unsigned char *)(a1 + 682) = *(unsigned char *)(a2 + 682);
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 683) = v5;
  long long v6 = *(_OWORD *)(a2 + 688);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = v6;
  return a1;
}

uint64_t sub_5B9B3C(uint64_t a1)
{
  *(unsigned char *)(a1 + 128) = 0;
  uint64_t v2 = a1 + 676;
  *(unsigned char *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 413) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(a1 + 472) = 0x3FF0000000000000;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 5;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 0x7FFFFFFF;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 625) = 0u;
  *(void *)(a1 + 664) = -1;
  *(_DWORD *)(a1 + 672) = 0x7FFFFFFF;
  *(void *)(a1 + 676) = 0;
  *(void *)(a1 + 688) = -1;
  *(_DWORD *)(a1 + 696) = -1;
  *(unsigned char *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_DWORD *)(a1 + 744) = 1065353216;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_DWORD *)(a1 + 784) = 1065353216;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 824) = 1065353216;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_DWORD *)(a1 + 864) = 1065353216;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_DWORD *)(a1 + 904) = 1065353216;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 1065353216;
  *(unsigned char *)(a1 + 960) = 0;
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 11;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1000) = 11;
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1024) = 0;
  int v3 = operator new(8uLL);
  *(void *)(a1 + 1008) = v3;
  *v3++ = 0x200000001;
  *(void *)(a1 + 1024) = v3;
  *(void *)(a1 + 1016) = v3;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1164) = 0u;
  *(_WORD *)(a1 + 1184) = 1;
  *(unsigned char *)(a1 + 1186) = 0;
  char v4 = (char *)operator new(0x20uLL);
  *(void *)(a1 + 1192) = v4;
  *(_OWORD *)(a1 + 1200) = xmmword_20B91A0;
  strcpy(v4, "com.apple.geo.routing.devel");
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1232) = 0x7FFFFFFF;
  *(void *)(v2 + 560) = 0x7FFFFFFF7FFFFFFFLL;
  *(unsigned char *)(a1 + 1244) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1320) = 1065353216;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1368) = 1065353216;
  *(_OWORD *)(a1 + 1376) = xmmword_20E8670;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(a1 + 1392) = v5;
  *(_DWORD *)(a1 + 1396) = v5;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_WORD *)(a1 + 1404) = 256;
  *(void *)(a1 + 1406) = 0;
  *(_DWORD *)(a1 + 1413) = 0;
  *(_DWORD *)(a1 + 1420) = 6;
  *(_DWORD *)(a1 + 1424) = 16777472;
  *(unsigned char *)(a1 + 1488) = 0;
  *(void *)(a1 + 1436) = 0;
  *(void *)(a1 + 1444) = 0;
  *(void *)(a1 + 1428) = 0;
  *(_WORD *)(a1 + 1452) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1464) = 0;
  *(_DWORD *)(a1 + 1479) = 0;
  *(void *)(a1 + 1511) = 0;
  *(void *)(a1 + 1518) = 0;
  *(void *)(a1 + 1528) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_5B9DE4(_Unwind_Exception *a1)
{
  sub_4BC1B8(v3);
  sub_4BCA98(v2);
  sub_4BCC2C(v1);
  _Unwind_Resume(a1);
}

void sub_5B9E08(_Unwind_Exception *a1)
{
  sub_4BCA98(v2);
  sub_4BCC2C(v1);
  _Unwind_Resume(a1);
}

void sub_5B9E24(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_5B9E78(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    sub_5B9F48((void *)a1, *(uint64_t **)(a2 + 16), 0);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    sub_5B9F48((void *)(a1 + 40), *(uint64_t **)(a2 + 56), 0);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    sub_5B9F48((void *)(a1 + 80), *(uint64_t **)(a2 + 96), 0);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    sub_5B9F48((void *)(a1 + 120), *(uint64_t **)(a2 + 136), 0);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    sub_5B9F48((void *)(a1 + 160), *(uint64_t **)(a2 + 176), 0);
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
    sub_5BA2A4((void *)(a1 + 200), *(uint64_t **)(a2 + 216), 0);
  }
  uint64_t v4 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v4;
  return a1;
}

void sub_5B9F48(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      uint64_t v9 = *(char **)v8;
      sub_5BA088(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v10 = *(char **)v8;
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      uint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_5BA1E4((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
      sub_5BA088(a1, v11[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5BA038(void *a1)
{
  __cxa_begin_catch(a1);
  sub_5B9E24(v1, v2);
  __cxa_rethrow();
}

void sub_5BA054(_Unwind_Exception *a1)
{
}

void sub_5BA068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  uint64_t v11 = __p;
  long long __p = 0;
  if (v11)
  {
    sub_20A9EF0((uint64_t)&__p, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x5BA05CLL);
}

uint64_t sub_5BA088(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    unint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    unint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = sub_5A90C((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  *uint64_t v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

unint64_t sub_5BA1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0x28uLL);
  unint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v6 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = sub_B128((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_5BA28C(_Unwind_Exception *a1)
{
  sub_24F64(v1);
  _Unwind_Resume(a1);
}

void sub_5BA2A4(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  unint64_t v8 = (_DWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      uint64_t v9 = a2[2];
      v8[6] = *((_DWORD *)a2 + 6);
      *((void *)v8 + 2) = v9;
      uint64_t v10 = *(_DWORD **)v8;
      sub_5BA438(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
    do
    {
      uint64_t v15 = *(_DWORD **)v8;
      operator delete(v8);
      unint64_t v8 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v11 = operator new(0x20uLL);
      void *v11 = 0;
      int v12 = *((_DWORD *)a2 + 6);
      unint64_t v13 = a2[2];
      v11[2] = v13;
      *((_DWORD *)v11 + 6) = v12;
      unint64_t v14 = (HIDWORD(v13)
           + 2654435769
           + (((v13 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
           + (((v13 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (v13 + 0x388152A534) ^ 0xDEADBEEFLL;
      v11[1] = (*((int *)v11 + 6) + 2654435769 + (v14 << 6) + (v14 >> 2)) ^ v14;
      sub_5BA438(a1, (uint64_t)v11);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5BA3F0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_5BA410(_Unwind_Exception *a1)
{
}

void sub_5BA424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5BA438(void *a1, uint64_t a2)
{
  uint64_t v4 = (int *)(a2 + 16);
  unint64_t v5 = (*(unsigned int *)(a2 + 16) + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v6 = (*(unsigned int *)(a2 + 20) + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = (*(int *)(a2 + 24) + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  *((void *)v4 - 1) = v7;
  unint64_t v8 = sub_5BA5A0((uint64_t)a1, v7, v4);
  int8x8_t v9 = (int8x8_t)a1[1];
  unint64_t v10 = *((void *)v4 - 1);
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
  v11.i16[0] = vaddlv_u8(v11);
  unint64_t v12 = v10 % *(void *)&v9;
  if (v10 < *(void *)&v9) {
    unint64_t v12 = *((void *)v4 - 1);
  }
  uint64_t v13 = *(void *)&v9 - 1;
  uint64_t v14 = (*(void *)&v9 - 1) & v10;
  if (v11.u32[0] <= 1uLL) {
    unint64_t v12 = v14;
  }
  if (!v8)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v15 = *(void *)(*(void *)a2 + 8);
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v9) {
        v15 %= *(void *)&v9;
      }
    }
    else
    {
      v15 &= v13;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v15) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v8;
  *unint64_t v8 = a2;
  if (*(void *)a2)
  {
    unint64_t v15 = *(void *)(*(void *)a2 + 8);
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v9) {
        v15 %= *(void *)&v9;
      }
    }
    else
    {
      v15 &= v13;
    }
    if (v15 != v12) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_5BA5A0(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_15;
    }
    if (prime < v6)
    {
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          uint64_t v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2) {
            size_t v16 = v18;
          }
          if (prime <= v16) {
            size_t prime = v16;
          }
          if (prime >= v6) {
            goto LABEL_28;
          }
LABEL_15:
          sub_5BA87C(a1, prime);
          goto LABEL_28;
        }
      }
      size_t v19 = std::__next_prime(v16);
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
        goto LABEL_15;
      }
    }
LABEL_28:
    unint64_t v6 = *(void *)(a1 + 8);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v11);
  if (!v21) {
    return 0;
  }
  int v22 = *a3;
  int v23 = a3[1];
  int v24 = a3[2];
  if (v10 >= 2)
  {
    unsigned __int8 v29 = 0;
    while (1)
    {
      unint64_t result = v21;
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      unint64_t v30 = v21[1];
      unint64_t v31 = v30;
      if (v30 >= v6) {
        unint64_t v31 = v30 % v6;
      }
      if (v31 != v11) {
        break;
      }
      if (v30 == a2 && *((_DWORD *)v21 + 4) == v22 && *((_DWORD *)v21 + 5) == v23)
      {
        int v32 = v29 & (*((_DWORD *)v21 + 6) != v24);
        v29 |= *((_DWORD *)v21 + 6) == v24;
        if (v32 == 1) {
          return result;
        }
      }
      else if ((v29 & 1) == 1)
      {
        return result;
      }
    }
  }
  else
  {
    char v25 = 0;
    while (1)
    {
      unint64_t result = v21;
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      uint64_t v27 = v21[1];
      if ((v27 & (v6 - 1)) != v11) {
        break;
      }
      if (v27 == a2 && *((_DWORD *)v21 + 4) == v22 && *((_DWORD *)v21 + 5) == v23)
      {
        char v28 = v25 & (*((_DWORD *)v21 + 6) != v24);
        v25 |= *((_DWORD *)v21 + 6) == v24;
        if (v28) {
          return result;
        }
      }
      else if (v25)
      {
        return result;
      }
    }
  }
  return result;
}

void sub_5BA87C(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_188D718();
    }
    uint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          uint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            uint8x8_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint64_t v21 = v20;
                uint8x8_t v20 = (void *)*v20;
              }
              while (v20
                   && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4)
                   && *((_DWORD *)v18 + 5) == *((_DWORD *)v20 + 5)
                   && *((_DWORD *)v18 + 6) == *((_DWORD *)v20 + 6));
              *float v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint64_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          BOOL v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            unint64_t v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                unint64_t v15 = v14;
                unint64_t v14 = (void *)*v14;
              }
              while (v14
                   && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4)
                   && *((_DWORD *)v12 + 5) == *((_DWORD *)v14 + 5)
                   && *((_DWORD *)v12 + 6) == *((_DWORD *)v14 + 6));
              *float v7 = v14;
              uint64_t v16 = 8 * v13;
              void *v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    uint8x8_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_5BAA90(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (__sz <= (v8 - *a1) >> 7)
  {
    uint64_t v16 = a1[1];
    unint64_t v17 = (v16 - v9) >> 7;
    if (v17 >= __sz)
    {
      if (a2 != a3)
      {
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = v9 + v25;
          uint64_t v27 = a2 + v25;
          long long v28 = *(_OWORD *)(a2 + v25);
          *(_DWORD *)(v26 + 16) = *(_DWORD *)(a2 + v25 + 16);
          *(_OWORD *)uint64_t v26 = v28;
          if (a2 != v9)
          {
            sub_48E1E8((void *)(v26 + 24), *(char **)(v27 + 24), *(char **)(v27 + 32), (uint64_t)(*(void *)(v27 + 32) - *(void *)(v27 + 24)) >> 4);
            long long v29 = *(_OWORD *)(v27 + 48);
            *(void *)(v26 + 64) = *(void *)(v27 + 64);
            *(_OWORD *)(v26 + 48) = v29;
            sub_48D0B4((uint64_t *)(v26 + 72), *(void *)(v27 + 72), *(void *)(v27 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v27 + 80) - *(void *)(v27 + 72)) >> 4));
            *(_DWORD *)(v26 + 96) = *(_DWORD *)(v27 + 96);
            sub_48E338((void *)(v26 + 104), *(char **)(v27 + 104), *(char **)(v27 + 112), (uint64_t)(*(void *)(v27 + 112) - *(void *)(v27 + 104)) >> 4);
          }
          v25 += 128;
        }
        while (a2 + v25 != a3);
        v9 += v25;
      }
      sub_48A070((uint64_t)a1, v9);
    }
    else
    {
      uint64_t v18 = a2 + (v17 << 7);
      if (v16 != v9)
      {
        uint64_t v19 = 0;
        unint64_t v20 = v17 << 7;
        do
        {
          uint64_t v21 = a2 + v19;
          uint64_t v22 = v9 + v19;
          long long v23 = *(_OWORD *)(a2 + v19);
          *(_DWORD *)(v22 + 16) = *(_DWORD *)(a2 + v19 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          if (a2 != v9)
          {
            sub_48E1E8((void *)(v22 + 24), *(char **)(v21 + 24), *(char **)(v21 + 32), (uint64_t)(*(void *)(v21 + 32) - *(void *)(v21 + 24)) >> 4);
            long long v24 = *(_OWORD *)(v21 + 48);
            *(void *)(v22 + 64) = *(void *)(v21 + 64);
            *(_OWORD *)(v22 + 48) = v24;
            sub_48D0B4((uint64_t *)(v22 + 72), *(void *)(v21 + 72), *(void *)(v21 + 80), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v21 + 80) - *(void *)(v21 + 72)) >> 4));
            *(_DWORD *)(v22 + 96) = *(_DWORD *)(v21 + 96);
            sub_48E338((void *)(v22 + 104), *(char **)(v21 + 104), *(char **)(v21 + 112), (uint64_t)(*(void *)(v21 + 112) - *(void *)(v21 + 104)) >> 4);
          }
          v19 += 128;
        }
        while (v20 != v19);
        uint64_t v9 = a1[1];
      }
      uint64_t v30 = v9;
      if (v18 != a3)
      {
        uint64_t v31 = 0;
        do
        {
          sub_4895AC(v9 + v31, (long long *)(v18 + v31));
          v31 += 128;
        }
        while (v18 + v31 != a3);
        uint64_t v30 = v9 + v31;
      }
      a1[1] = v30;
    }
  }
  else
  {
    if (v9)
    {
      sub_48A070((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 57) {
      goto LABEL_36;
    }
    uint64_t v10 = v8 >> 6;
    if (v8 >> 6 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 57) {
LABEL_36:
    }
      sub_2E00();
    unint64_t v13 = v12 << 7;
    unint64_t v14 = (char *)operator new(v12 << 7);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (a2 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_4895AC((uint64_t)&v14[v15], (long long *)(a2 + v15));
        v15 += 128;
      }
      while (a2 + v15 != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_5BADA0(_Unwind_Exception *a1)
{
  sub_489F20(v4, v2, v2, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_5BADF0()
{
  unk_257CAD7 = 16641;
  word_257CAC0 = 65;
  byte_257CAEF = 1;
  byte_257CAD9 = 0;
}

void sub_5BAE18(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
}

void sub_5BAE4C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 2096);
  if (sub_45FC7C(a2) == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 1552) - *(void *)(v8 + 1544)) >> 3))
  {
    uint64_t v9 = *(void *)(a1 + 2096);
    int v26 = 0;
    if (*(unsigned char *)(nullsub_1(v9) + 128))
    {
      uint64_t v10 = nullsub_1(v9);
      if (!*(unsigned char *)(v10 + 128))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      sub_491B44(v10, &v24);
      if (v24 != v25)
      {
        uint64_t v11 = v24;
        while (*(void *)(v11 + 8) != *(void *)(v11 + 16))
        {
          v11 += 144;
          if (v11 == v25)
          {
            int v26 = 2;
            unint64_t v12 = 0x8E38E38E38E38E39 * ((v25 - v24) >> 4);
            if (v12 == sub_45FC7C(a2)) {
              break;
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)v29);
              sub_188FC78(v29, (uint64_t)"Got ", 4);
              uint64_t v21 = (void *)std::ostream::operator<<();
              sub_188FC78(v21, (uint64_t)" from SessionStateContext but the user route has ", 49);
              sub_45FC7C(a2);
              uint64_t v22 = (void *)std::ostream::operator<<();
              sub_188FC78(v22, (uint64_t)" route legs.", 12);
              std::stringbuf::str();
              sub_7246C((uint64_t *)__p, 3u);
              goto LABEL_15;
            }
            goto LABEL_20;
          }
        }
      }
    }
    unint64_t v13 = (uint64_t *)sub_6467E4((uint64_t)a4, (uint64_t)a2);
    sub_6482B0(v13, 1);
    unint64_t v14 = (void *)nullsub_1(a2);
    uint64_t v15 = v14[1] - *v14;
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15 / 1056;
      do
      {
        uint64_t v18 = sub_6467E8(a4, v16);
        *(unsigned char *)(v18 + 9977) = 1;
        sub_5BB46C(a1, a2, v16, a3, &v26, (void *)v18);
        sub_5BB6C4(a1, a2, v16++, (void *)v18);
      }
      while (v17 != v16);
    }
    sub_5BB8D0(a1, a2, a4);
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v29);
      sub_188FC78(v29, (uint64_t)"Got ", 4);
      uint64_t v19 = (void *)std::ostream::operator<<();
      sub_188FC78(v19, (uint64_t)" legs from input ETA Steps but the user route has", 49);
      sub_45FC7C(a2);
      unint64_t v20 = (void *)std::ostream::operator<<();
      sub_188FC78(v20, (uint64_t)" route legs.", 12);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
LABEL_15:
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete((void *)v29[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    bzero(a4, 0x1D88uLL);
    sub_59133C((uint64_t)a4);
  }
}

void sub_5BB278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_5BB318(_Unwind_Exception *a1)
{
  sub_574D4C(v1);
  _Unwind_Resume(a1);
}

void sub_5BB32C(uint64_t a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
}

void sub_5BB444(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_5BB458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_5BB46C(uint64_t a1, void *a2, uint64_t a3, void *a4, int *a5, void *a6)
{
  if (*a4 == a4[1])
  {
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v11 = *a4 + 24 * a3;
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
    unint64_t v13 = *(unsigned char **)v11;
    unint64_t v12 = *(unsigned char **)(v11 + 8);
    int64_t v14 = v12 - v13;
    if (v12 != v13)
    {
      if (v14 < 0) {
        sub_2E00();
      }
      uint64_t v15 = (char *)operator new(v12 - v13);
      uint64_t v16 = &v15[4 * (v14 >> 2)];
      uint64_t v31 = v15;
      uint64_t v33 = v16;
      memcpy(v15, v13, v14);
      int v32 = v16;
    }
  }
  uint64_t v17 = nullsub_1(*(void *)(a1 + 2096));
  long long __p = 0;
  long long v29 = 0;
  uint64_t v30 = 0;
  if (*(unsigned char *)(nullsub_1(v17) + 128))
  {
    uint64_t v18 = nullsub_1(v17);
    if (!*(unsigned char *)(v18 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(v18, &v26);
    if ((void)v26 != *((void *)&v26 + 1) && &__p != (void **)(v26 + 144 * a3 + 8)) {
      sub_326C0(&__p, *(char **)(v26 + 144 * a3 + 8), *(char **)(v26 + 144 * a3 + 16), (uint64_t)(*(void *)(v26 + 144 * a3 + 16) - *(void *)(v26 + 144 * a3 + 8)) >> 3);
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 2096) + 1544);
  unint64_t v20 = (void *)sub_45FB28(a2, a3);
  sub_5A8B74(v20, (uint64_t)&v31, (char *)(v19 + 24 * a3), &__p, *a5, (uint64_t *)&v26);
  uint64_t v21 = a6[136];
  if (v21)
  {
    uint64_t v22 = (void **)(a6 + 136);
    uint64_t v23 = a6[137];
    uint64_t v24 = (void *)a6[136];
    if (v23 != v21)
    {
      do
        uint64_t v23 = sub_575E00(v23 - 2400);
      while (v23 != v21);
      uint64_t v24 = *v22;
    }
    a6[137] = v21;
    operator delete(v24);
    *uint64_t v22 = 0;
    a6[137] = 0;
    a6[138] = 0;
  }
  *((_OWORD *)a6 + 68) = v26;
  a6[138] = v27;
  if (__p)
  {
    long long v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
}

void sub_5BB680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_5BB6C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)sub_45FB28(a2, a3);
  uint64_t v9 = nullsub_1(*(void *)(a1 + 2096));
  sub_5AE518((uint64_t)a4, *(void **)(a1 + 2088));
  sub_5BB98C((uint64_t)a4);
  sub_770A68(*(void *)(a1 + 1712), a4, v9, v17.i64);
  uint64_t v10 = (void **)(a4 + 919);
  uint64_t v11 = a4[919];
  if (v11)
  {
    uint64_t v12 = a4[920];
    unint64_t v13 = (void *)a4[919];
    if (v12 != v11)
    {
      do
        uint64_t v12 = sub_3A6B94(v12 - 1120);
      while (v12 != v11);
      unint64_t v13 = *v10;
    }
    a4[920] = v11;
    operator delete(v13);
  }
  *(int64x2_t *)uint64_t v10 = v17;
  a4[921] = v18;
  if (*(unsigned char *)(*(void *)(a1 + 2096) + 1227) == 2) {
    sub_8D9208(*(void *)(a1 + 1800), (uint64_t)a4);
  }
  if (sub_670F00(*(void *)(a1 + 1672)))
  {
    sub_827378(*(void ***)(a1 + 1792), v8, (uint64_t)a4);
    sub_5BBAE8(*(void *)(a1 + 1640), a4);
    sub_7D31C8(*(uint64_t **)(a1 + 1784), a4);
    sub_670D34(*(uint64_t **)(a1 + 1672), a4);
  }
  int64x2_t v17 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  if (*(unsigned char *)(nullsub_1(v9) + 128))
  {
    uint64_t v14 = nullsub_1(v9);
    if (!*(unsigned char *)(v14 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(v14, v16);
    if (v16[0] != v16[1]) {
      int64x2_t v17 = *(int64x2_t *)(v16[0] + 144 * a3 + 104);
    }
  }
  sub_78A2E8(*(void *)(a1 + 1744), &v17, a4);
  if (*(unsigned char *)(*(void *)(a1 + 2096) + 1521) && sub_45FBF0((uint64_t)a2))
  {
    if (sub_404DE8(a2)) {
      sub_52AA68(*(void *)(a1 + 1616), (uint64_t)a4);
    }
  }
}

void sub_5BB8D0(uint64_t a1, void *a2, char **a3)
{
  sub_53CD54(*(void *)(a1 + 1624), a2, a3);
  sub_7720A4(*(uint64_t **)(a1 + 1712), (uint64_t)a3, (uint64_t *)&__p);
  sub_648B6C((uint64_t)a3, (uint64_t *)&__p);
  unint64_t v5 = __p;
  if (__p)
  {
    uint64_t v6 = (uint64_t)v9;
    float v7 = __p;
    if (v9 != __p)
    {
      do
        uint64_t v6 = sub_3A6B94(v6 - 1120);
      while ((void *)v6 != v5);
      float v7 = __p;
    }
    uint64_t v9 = v5;
    operator delete(v7);
  }
  sub_798E90(*(unsigned char **)(a1 + 1752), *(void **)(a1 + 2088), *(void *)(a1 + 2096) + 968, a3);
}

void sub_5BB978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_50E790((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_5BB98C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 1136);
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 536) - *(void *)(a1 + 528)) >> 2;
  uint64_t v4 = *(void *)(a1 + 1136);
  unint64_t v5 = (*(void *)(a1 + 1144) - v4) >> 2;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *(void *)(a1 + 1144) = v4 + 4 * v3;
    }
  }
  else
  {
    sub_5BBEE0(a1 + 1136, v3 - v5);
  }
  unint64_t result = (_DWORD *)sub_46CF04(a1);
  uint64_t v7 = *(void *)(a1 + 1144) - *(void *)(a1 + 1136);
  if (v7)
  {
    unint64_t v8 = 0;
    int v9 = *(_DWORD *)(a1 + 768);
    int v10 = v9 / 10 + result;
    if (v9 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    int v12 = 103 * (char)(v11 + v9 % 10);
    uint64_t v13 = v7 >> 2;
    unsigned int v14 = v10 + ((v12 >> 15) & 1) + (v12 >> 10);
    do
    {
      int v15 = sub_46E19C((void *)a1, v8, 0);
      if (v15 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      v14 += v15 / 10
           + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1)
           + ((103 * (char)(v16 + v15 % 10)) >> 10);
      unint64_t result = (_DWORD *)sub_5BBCD0(v2, v8);
      *unint64_t result = v14;
      ++v8;
    }
    while (v13 != v8);
  }
  return result;
}

void sub_5BBAE8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a2 + 1518);
    do
    {
      if (*((_DWORD *)v2 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v6 = (void *)v2[5];
      char v13 = 5;
      strcpy((char *)__p, "scope");
      uint64_t v7 = sub_561B0(v6, (uint64_t)__p);
      int v8 = *(char *)(v7 + 23);
      if (v8 < 0)
      {
        if (*(void *)(v7 + 8) == 5)
        {
          uint64_t v7 = *(void *)v7;
LABEL_10:
          BOOL v10 = *(_DWORD *)v7 != 1953853298 || *(unsigned char *)(v7 + 4) != 101;
          if ((v13 & 0x80000000) == 0) {
            goto LABEL_20;
          }
LABEL_19:
          operator delete(__p[0]);
          goto LABEL_20;
        }
      }
      else if (v8 == 5)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (v13 < 0) {
        goto LABEL_19;
      }
LABEL_20:
      if (!v10)
      {
        sub_5BC0A0(a1, a2, v6, (uint64_t)v15);
        sub_5BC290(a1, (uint64_t)(v2 + 2), (uint64_t)v15, (uint64_t)__p);
        if (v14) {
          sub_5BCE98(v5, __p, (uint64_t)(v2 + 2));
        }
        sub_5450C((uint64_t)__p);
        if (v16 < 0) {
          operator delete(v15[0]);
        }
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_5BBC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_5BBCD0(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v15;
    }
    else {
      BOOL v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_5BBE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_5BBEE0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      memset_pattern16(v5, &unk_20B8FB0, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    long long v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_188D718();
      }
      long long v13 = operator new(4 * v12);
    }
    else
    {
      long long v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    std::string v16 = &v13[4 * v12];
    memset_pattern16(v14, &unk_20B8FB0, v15);
    std::string v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_5BC0A0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v19[0] = 0;
  v19[1] = 0;
  HIBYTE(__p[2]) = 21;
  uint64_t v20 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  uint64_t v8 = sub_58070(a3, (uint64_t)__p);
  uint64_t v9 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_8:
    int v12 = 0;
    goto LABEL_18;
  }
  operator delete(__p[0]);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_3:
  unint64_t v10 = sub_46C760(a2);
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "feature_polygon_usage");
  uint64_t v11 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a3, (uint64_t)v17);
  sub_5BC4C4(a1, a2, 0, v10 - 1, v11, (uint64_t)__p);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)__p;
  uint64_t v20 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v17[2]) < 0)
  {
    operator delete(v17[0]);
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_5:
      if (v12 == 5)
      {
        long long v13 = v19;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a4 = *(_OWORD *)v19;
      *(void *)(a4 + 16) = v20;
      return;
    }
  }
  else
  {
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v19[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  long long v13 = (void **)v19[0];
LABEL_12:
  int v14 = *(_DWORD *)v13;
  int v15 = *((unsigned __int8 *)v13 + 4);
  if (v14 != 1819438967 || v15 != 100) {
    goto LABEL_16;
  }
LABEL_18:
  sub_5BC768(a1, a2, a4);
  if (v12 < 0) {
    operator delete(v19[0]);
  }
}

void sub_5BC24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5BC290(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v6 = (void *)sub_560F4(*(void **)(a1 + 3912), a2);
  if (sub_58070(v6, a3))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a3 + 16);
    }
  }
  else
  {
    char v15 = 5;
    strcpy((char *)__p, "world");
    long long v7 = sub_58070(v6, (uint64_t)__p);
    uint64_t v8 = 5;
    if (!v7) {
      uint64_t v8 = 0;
    }
    HIBYTE(v17) = v8;
    if (v7) {
      qmemcpy(__dst, "world", 5);
    }
    *(unsigned char *)((unint64_t)__dst | v8) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = (void *)HIBYTE(v17);
  char v10 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v9 = __dst[1];
  }
  if (v9)
  {
    char v15 = 15;
    strcpy((char *)__p, "region_template");
    uint64_t v11 = sub_58070(v6, (uint64_t)__p);
    if (v11)
    {
      if (*((_DWORD *)v11 + 12) == 2)
      {
        uint64_t v12 = v11[5];
        if (v12 != a4)
        {
          *(_DWORD *)(a4 + 32) = *(_DWORD *)(v12 + 32);
          sub_5A4DC((void *)a4, *(uint64_t **)(v12 + 16), 0);
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_560F4(v6, (uint64_t)__dst);
    sub_59234((void *)a4, v13);
    char v10 = HIBYTE(v17);
  }
  if (v10 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_5BC44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_5450C(v21);
  _Unwind_Resume(a1);
}

void sub_5BC4C4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (__cdecl **a5)(std::stringbuf *__hidden this)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = sub_46C8EC(a2, a3);
  sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)v29);
  uint64_t v12 = sub_46C8EC(a2, a4);
  sub_2954EC(*(void *)(a1 + 8), *(void *)(v12 + 32), (uint64_t)v26);
  unint64_t v32 = sub_2E1AA4((uint64_t)v29);
  *(_DWORD *)uint64_t v33 = v13;
  *(void *)&v33[4] = sub_2E40A4((uint64_t)v26);
  int v34 = v14;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v25 = 1065353216;
  sub_4BC598((uint64_t)v23, (unsigned int *)&v32, (uint64_t)&v32);
  sub_4BC598((uint64_t)v23, (unsigned int *)&v33[4], (uint64_t)&v33[4]);
  char v15 = (uint64_t **)sub_37B3A0(*(uint64_t **)a1);
  sub_5BC948(v15, (uint64_t)v23, a5, (uint64_t)&v32);
  std::string v16 = (void **)v32;
  if (*(char *)(v32 + 23) < 0)
  {
    sub_4200((unsigned char *)a6, *(void **)v32, *(void *)(v32 + 8));
    std::string v16 = (void **)v32;
    if (!v32) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v17 = *(_OWORD *)v32;
    *(void *)(a6 + 16) = *(void *)(v32 + 16);
    *(_OWORD *)a6 = v17;
  }
  unint64_t v18 = *(void ***)v33;
  uint64_t v19 = v16;
  if (*(void ***)v33 != v16)
  {
    do
    {
      if (*((char *)v18 - 1) < 0) {
        operator delete(*(v18 - 3));
      }
      v18 -= 3;
    }
    while (v18 != v16);
    uint64_t v19 = (void *)v32;
  }
  *(void *)uint64_t v33 = v16;
  operator delete(v19);
LABEL_11:
  uint64_t v20 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      uint64_t v20 = v21;
    }
    while (v21);
  }
  uint64_t v22 = v23[0];
  v23[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  if (v27)
  {
    char v28 = v27;
    operator delete(v27);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_5BC6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,_Unwind_Exception *a22)
{
  sub_1A668((void **)(v22 - 80));
  sub_12168((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
    long long v24 = exception_object;
    if (!exception_object) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v24 = exception_object;
    if (!exception_object) {
      goto LABEL_3;
    }
  }
  a22 = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_5BC768(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_46C8EC(a2, 0);
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32), __n);
  unint64_t v7 = sub_46C760(a2);
  uint64_t v8 = sub_46C8EC(a2, v7 - 1);
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32), __p);
  uint64_t v9 = HIBYTE(v20);
  unint64_t v10 = __n[1];
  if (v20 >= 0) {
    size_t v11 = HIBYTE(v20);
  }
  else {
    size_t v11 = __n[1];
  }
  unint64_t v12 = v18;
  unsigned __int8 v13 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v11 != v12) {
    goto LABEL_18;
  }
  if ((v18 & 0x80u) == 0) {
    int v14 = __p;
  }
  else {
    int v14 = (void **)__p[0];
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v20))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v20;
      if ((v13 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    char v15 = __n;
    while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
    {
      char v15 = (size_t *)((char *)v15 + 1);
      int v14 = (void **)((char *)v14 + 1);
      if (!--v9) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  std::string v16 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v14, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 5;
    strcpy((char *)a3, "world");
    if ((v13 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v16, v10);
  if ((v18 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v20) < 0) {
    goto LABEL_23;
  }
}

void sub_5BC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5BC948@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, void (__cdecl **a3)(std::stringbuf *__hidden this)@<X2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v35);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  int v34 = *a1;
  size_t v11 = v34;
  if (v34)
  {
    do
    {
      unint64_t v12 = (long long *)(v11 + 3);
      unint64_t v13 = *(void *)(a4 + 8);
      if (v13 >= *(void *)(a4 + 16))
      {
        char v15 = sub_55C330((char **)a4, (uint64_t)v12);
      }
      else
      {
        if (*((char *)v11 + 47) < 0)
        {
          sub_4200(*(unsigned char **)(a4 + 8), (void *)v11[3], v11[4]);
        }
        else
        {
          long long v14 = *v12;
          *(void *)(v13 + 16) = v11[5];
          *(_OWORD *)unint64_t v13 = v14;
        }
        char v15 = (char *)(v13 + 24);
        *(void *)(a4 + 8) = v13 + 24;
      }
      *(void *)(a4 + 8) = v15;
      long long v29 = &v34;
      uint64_t v30 = a3;
      uint64_t v31 = a2;
      size_t v11 = sub_5BCC98((uint64_t **)&v29, *(double *)&v14, v8, v9, v10);
      int v34 = v11;
    }
    while (v11);
    long long v17 = *(char **)a4;
    uint64_t v16 = *(void *)(a4 + 8);
    if (*(void *)a4 != v16)
    {
      unint64_t v18 = v16 - 24;
      if (v18 > (unint64_t)v17)
      {
        uint64_t v19 = v17 + 24;
        do
        {
          uint64_t v20 = *((void *)v19 - 1);
          long long v21 = *(_OWORD *)(v19 - 24);
          uint64_t v22 = *(void *)(v18 + 16);
          *(_OWORD *)(v19 - 24) = *(_OWORD *)v18;
          *((void *)v19 - 1) = v22;
          *(_OWORD *)unint64_t v18 = v21;
          *(void *)(v18 + 16) = v20;
          v18 -= 24;
          BOOL v23 = (unint64_t)v19 >= v18;
          v19 += 24;
        }
        while (!v23);
      }
    }
  }
  uint64_t result = sub_723EC(2u);
  if (result)
  {
    sub_6BAC((uint64_t)&v29);
    sub_188FC78(&v29, (uint64_t)"Enclosing regions query returned ", 33);
    int v25 = (void *)std::ostream::operator<<();
    sub_188FC78(v25, (uint64_t)" entries in ", 12);
    sub_72688((uint64_t)v35);
    long long v26 = (void *)std::ostream::operator<<();
    sub_188FC78(v26, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_5BCBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_1A668(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_1A668(v15);
  _Unwind_Resume(a1);
}

void sub_5BCC58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_5BCC70(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_5BCC84(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_5BCC98(uint64_t **a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = **a1;
  uint64_t v6 = *(uint64_t ***)(v5 + 96);
  unint64_t v7 = *(uint64_t ***)(v5 + 104);
  if (v6 != v7)
  {
    while (1)
    {
      double v9 = *v6;
      uint64_t v10 = (*v6)[9];
      uint64_t v11 = (*v6)[10];
      if (v10 != v11)
      {
        unint64_t v12 = (unsigned __int8 **)a1[1];
        char v13 = *((unsigned char *)v12 + 23);
        if (v13 >= 0) {
          long long v14 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
        }
        else {
          long long v14 = v12[1];
        }
        if (v13 >= 0) {
          char v15 = (unsigned __int8 *)a1[1];
        }
        else {
          char v15 = *v12;
        }
        do
        {
          uint64_t v16 = *(unsigned __int8 *)(v10 + 23);
          if ((v16 & 0x80u) == 0) {
            long long v17 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          }
          else {
            long long v17 = *(unsigned __int8 **)(v10 + 8);
          }
          if (v17 == v14)
          {
            if ((v16 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v10, v15, *(void *)(v10 + 8))) {
                break;
              }
            }
            else
            {
              if (!*(unsigned char *)(v10 + 23)) {
                break;
              }
              uint64_t v18 = 0;
              while (*(unsigned __int8 *)(v10 + v18) == v15[v18])
              {
                if (v16 == ++v18) {
                  goto LABEL_22;
                }
              }
            }
          }
          v10 += 24;
        }
        while (v10 != v11);
      }
LABEL_22:
      if (v10 != v11)
      {
        uint64_t v19 = (uint64_t *)a1[2][2];
        if (!v19) {
          return v9;
        }
        uint64_t v20 = v9[1];
        if (*v9 != v20) {
          break;
        }
      }
LABEL_3:
      if (++v6 == v7) {
        return 0;
      }
    }
    while (1)
    {
      unsigned int v21 = *((_DWORD *)v19 + 5);
      LODWORD(a3) = *((_DWORD *)v19 + 4);
      a3 = (double)*(unint64_t *)&a3;
      uint64_t v22 = *v9;
      while (1)
      {
        BOOL v23 = *(void **)v22;
        long long v24 = *(void **)(v22 + 8);
        if (*(void **)v22 != v24)
        {
          int v25 = 0;
          do
          {
            long long v26 = (_DWORD *)v23[1];
            uint64_t v27 = (_DWORD *)(*v23 + 12);
            if ((_DWORD *)*v23 != v26 && v27 != v26)
            {
              do
              {
                unsigned int v29 = *(v27 - 2);
                unsigned int v30 = v27[1];
                if (v29 >= v21)
                {
                  if (v30 < v21)
                  {
LABEL_42:
                    LODWORD(a4) = *v27;
                    LODWORD(a5) = *(v27 - 3);
                    a5 = (double)*(unint64_t *)&a5;
                    a4 = ((double)v21 - (double)v29)
                       / ((double)v30 - (double)v29)
                       * ((double)*(unint64_t *)&a4 - a5)
                       + a5;
                    if (a4 < a3) {
                      v25 ^= 1u;
                    }
                  }
                }
                else if (v30 >= v21)
                {
                  goto LABEL_42;
                }
                v27 += 3;
              }
              while (v27 != v26);
            }
            v23 += 3;
          }
          while (v23 != v24);
          if (v25) {
            break;
          }
        }
        v22 += 24;
        if (v22 == v20) {
          goto LABEL_3;
        }
      }
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19) {
        return v9;
      }
    }
  }
  return 0;
}

void sub_5BCE98(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int8 *)(a3 + 23);
    unint64_t v7 = (uint64_t *)a3;
    if (v6 != 19)
    {
      if (v6 != 47) {
        goto LABEL_49;
      }
      BOOL v8 = *(void *)a3 == 0x6E65675F72657375 && *(void *)(a3 + 8) == 0x695F646574617265;
      BOOL v9 = v8 && *(void *)(a3 + 16) == 0x73746E656469636ELL;
      BOOL v10 = v9 && *(void *)(a3 + 24) == 0x65766F637369645FLL;
      BOOL v11 = v10 && *(void *)(a3 + 32) == 0x7974696C69626172;
      if (!v11 || *(void *)(a3 + 39) != 0x74706D6F72705F79) {
        goto LABEL_49;
      }
      goto LABEL_64;
    }
    goto LABEL_42;
  }
  uint64_t v13 = *(void *)(a3 + 8);
  if (v13 == 19)
  {
    unint64_t v7 = *(uint64_t **)a3;
LABEL_42:
    uint64_t v19 = *v7;
    uint64_t v20 = v7[1];
    uint64_t v21 = *(uint64_t *)((char *)v7 + 11);
    if (v19 == 0x61705F6465766170 && v20 == 0x61646975675F6874 && v21 == 0x65636E6164697567)
    {
      unsigned int v30 = operator new(0x20uLL);
      long long v31 = xmmword_20B5EB0;
      strcpy((char *)v30, "enable_paved_path_guidance");
      *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)&v30);
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_65;
    }
    goto LABEL_49;
  }
  if (v13 == 47)
  {
    BOOL v14 = **(void **)a3 == 0x6E65675F72657375 && *(void *)(*(void *)a3 + 8) == 0x695F646574617265;
    BOOL v15 = v14 && *(void *)(*(void *)a3 + 16) == 0x73746E656469636ELL;
    BOOL v16 = v15 && *(void *)(*(void *)a3 + 24) == 0x65766F637369645FLL;
    BOOL v17 = v16 && *(void *)(*(void *)a3 + 32) == 0x7974696C69626172;
    if (v17 && *(void *)(*(void *)a3 + 39) == 0x74706D6F72705F79)
    {
LABEL_64:
      unsigned int v30 = operator new(0x30uLL);
      long long v31 = xmmword_20E1380;
      strcpy((char *)v30, "enable_siri_incidents_discoverability_prompt");
      *(unsigned char *)(a1 + 72) = sub_29D62C(a2, (uint64_t)&v30);
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        return;
      }
LABEL_65:
      operator delete(v30);
      return;
    }
  }
LABEL_49:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v30);
    long long v24 = sub_188FC78(&v30, (uint64_t)"Got unhandled feature_key: ", 27);
    int v25 = *(char *)(a3 + 23);
    if (v25 >= 0) {
      uint64_t v26 = a3;
    }
    else {
      uint64_t v26 = *(void *)a3;
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v27 = *(void *)(a3 + 8);
    }
    sub_188FC78(v24, v26, v27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_5BD27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5BD29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_5BD2E8()
{
  byte_257CB07 = 1;
  word_257CAF0 = 65;
  byte_257CB1F = 1;
  word_257CB08 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_257CBB0 = 0u;
  *(_OWORD *)&qword_257CBC0 = 0u;
  dword_257CBD0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_257CBB0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_257CBB0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_257CBB0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_257CBB0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_257CB37 = 8;
  strcpy((char *)&qword_257CB20, "any_mode");
  byte_257CB4F = 7;
  strcpy((char *)&dword_257CB38, "cycling");
  byte_257CB67 = 7;
  strcpy((char *)&dword_257CB50, "driving");
  byte_257CB7F = 7;
  strcpy((char *)&dword_257CB68, "walking");
  qword_257CB88 = 0;
  qword_257CB90 = 0;
  qword_257CB80 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_257CB80 = (uint64_t)v0;
  qword_257CB88 = (uint64_t)(v0 + 9);
  qword_257CB90 = (uint64_t)(v0 + 9);
  qword_257CB98 = 0;
  qword_257CBA0 = 0;
  unk_257CBA8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_257CBA0 = (uint64_t)(v1 + 9);
  unk_257CBA8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_257CB98 = (uint64_t)v1;
  return result;
}

void sub_5BD5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_257CBC0) {
    sub_20A9F30((void **)qword_257CBC0);
  }
  uint64_t v37 = (void *)xmmword_257CBB0;
  *(void *)&xmmword_257CBB0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_5BD650(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = a3;
  a1[1] = a2;
  sub_6892E8(a4, 4u, *(_DWORD *)(a3 + 1000), a1 + 2);
  HIBYTE(v31[2]) = 20;
  strcpy((char *)v31, "ElevationInfoBuilder");
  char v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  int v6 = sub_374CDC(a2, (uint64_t)v31, (uint64_t *)&v28);
  sub_3CB2F0(v6, (uint64_t)v32);
  char v25 = 14;
  uint64_t v23 = 0;
  strcpy((char *)v24, "RouteElevation");
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v7 = sub_374CDC(a2, (uint64_t)v24, (uint64_t *)&v21);
  sub_3CB2F0(v7, (uint64_t)__p);
  sub_5BF748((uint64_t)(a1 + 4), v32, __p);
  int v8 = v27;
  if (v27)
  {
    do
    {
      char v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      int v8 = v13;
    }
    while (v13);
  }
  BOOL v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  char v10 = (void **)v21;
  if (v21)
  {
    int v11 = v22;
    unint64_t v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      unint64_t v12 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v12);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  int v14 = v33;
  if (v33)
  {
    do
    {
      uint64_t v19 = *(char **)v14;
      sub_57AC8((uint64_t *)v14 + 5);
      if (v14[39] < 0) {
        operator delete(*((void **)v14 + 2));
      }
      operator delete(v14);
      int v14 = v19;
    }
    while (v19);
  }
  BOOL v15 = (void *)v32[0];
  v32[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  BOOL v16 = (void **)v28;
  if (v28)
  {
    BOOL v17 = v29;
    uint64_t v18 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      uint64_t v18 = v28;
    }
    char v29 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  return a1;
}

void sub_5BD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  sub_5450C((uint64_t)&a18);
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_5450C(v24 - 72);
  sub_1A668(&a23);
  if (*(char *)(v24 - 73) < 0) {
    operator delete(*(void **)(v24 - 96));
  }
  sub_14A84(v23);
  _Unwind_Resume(a1);
}

void *sub_5BD8F8(void *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (uint64_t *)sub_374EF4(a2);

  return sub_5BD650(a1, (uint64_t)a2, a3, v6);
}

void sub_5BD950(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 32) || !sub_46C760(a2))
  {
    *(_OWORD *)(a3 + 248) = 0u;
    *(_OWORD *)(a3 + 232) = 0u;
    *(_OWORD *)(a3 + 216) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    *(void *)(a3 + 240) = 0;
    *(_DWORD *)(a3 + 256) = 0;
    *(void *)(a3 + 248) = 0;
    *(unsigned char *)(a3 + 260) = 1;
    return;
  }
  uint64_t v6 = sub_3750CC(*(void **)(a1 + 8));
  sub_4651E4(a2, a1 + 120, (_DWORD *)(a1 + 136), v6, (uint64_t)v55);
  if (!sub_4651D0(v55))
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    int v8 = (void **)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    BOOL v9 = (void **)(a3 + 232);
    *(void *)(a3 + 253) = 0;
    *(void *)(a3 + 240) = 0;
    *(void *)(a3 + 248) = 0;
    sub_5BDF0C((uint64_t *)a1, (uint64_t *)v55, (uint64_t)&v48);
    *(_OWORD *)a3 = v48;
    char v10 = *(void **)(a3 + 16);
    if (v10)
    {
      *(void *)(a3 + 24) = v10;
      operator delete(v10);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
    }
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v49;
    uint64_t v11 = v50;
    uint64_t v12 = v51;
    v49[1] = 0;
    uint64_t v50 = 0;
    v49[0] = 0;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v12;
    uint64_t v13 = *(void *)(a3 + 48);
    if (v13)
    {
      uint64_t v14 = *(void *)(a3 + 56);
      BOOL v15 = *(void **)(a3 + 48);
      if (v14 != v13)
      {
        do
        {
          uint64_t v16 = v14 - 176;
          sub_4D4B58(v14 - 160);
          uint64_t v14 = v16;
        }
        while (v16 != v13);
        BOOL v15 = *v8;
      }
      *(void *)(a3 + 56) = v13;
      operator delete(v15);
      *int v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = *(_OWORD *)__p;
    *(void *)(a3 + 64) = v53;
    __p[1] = 0;
    uint64_t v53 = 0;
    __p[0] = 0;
    sub_4D90B4(a3 + 72, (uint64_t)v54);
    sub_4D4B58((uint64_t)v54);
    BOOL v17 = (char *)__p[0];
    if (__p[0])
    {
      uint64_t v18 = (char *)__p[1];
      uint64_t v19 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v20 = v18 - 176;
          sub_4D4B58((uint64_t)(v18 - 160));
          uint64_t v18 = v20;
        }
        while (v20 != v17);
        uint64_t v19 = __p[0];
      }
      __p[1] = v17;
      operator delete(v19);
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    sub_5BE338(a1, a2, v55, (uint64_t)&v48);
    uint64_t v21 = *v9;
    if (*v9)
    {
      *(void *)(a3 + 240) = v21;
      operator delete(v21);
      *BOOL v9 = 0;
      *(void *)(a3 + 240) = 0;
      *(void *)(a3 + 248) = 0;
    }
    *(_OWORD *)(a3 + 232) = v48;
    *(void **)(a3 + 248) = v49[0];
    *(_DWORD *)(a3 + 256) = sub_5BE634(a1, (uint64_t *)(a3 + 232), (void *)a3);
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v22 = *(void *)(a3 + 24);
    unint64_t v24 = 0x7FFFFFFF7FFFFFFFLL;
    if (v23 != v22 && *(void *)a3 != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a3 + 8) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = v23 + 16;
      if (v23 + 16 == v22)
      {
        uint64_t v29 = *(void *)(a3 + 16);
        uint64_t v25 = v29;
      }
      else
      {
        int v26 = *(_DWORD *)(v23 + 24);
        int v27 = *(_DWORD *)(v23 + 8);
        BOOL v28 = v26 < v27;
        if (v26 >= v27) {
          uint64_t v29 = *(void *)(a3 + 16);
        }
        else {
          uint64_t v29 = v23 + 16;
        }
        if (v28) {
          uint64_t v25 = *(void *)(a3 + 16);
        }
        uint64_t v30 = v23 + 32;
        if (v30 != v22)
        {
          while (1)
          {
            uint64_t v31 = v30 + 16;
            if (v30 + 16 == v22) {
              break;
            }
            int v32 = *(_DWORD *)(v30 + 24);
            int v33 = *(_DWORD *)(v30 + 8);
            BOOL v34 = v32 < v33;
            if (v32 >= v33) {
              int v35 = *(_DWORD *)(v30 + 8);
            }
            else {
              int v35 = *(_DWORD *)(v30 + 24);
            }
            if (v32 >= v33) {
              uint64_t v36 = v30;
            }
            else {
              uint64_t v36 = v30 + 16;
            }
            if (v32 <= v33) {
              int v32 = *(_DWORD *)(v30 + 8);
            }
            if (v34) {
              uint64_t v31 = v30;
            }
            if (v35 < *(_DWORD *)(v29 + 8)) {
              uint64_t v29 = v36;
            }
            if (v32 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v31;
            }
            v30 += 32;
            if (v30 == v22) {
              goto LABEL_60;
            }
          }
          int v37 = *(_DWORD *)(v30 + 8);
          if (v37 >= *(_DWORD *)(v29 + 8))
          {
            if (v37 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v30;
            }
          }
          else
          {
            uint64_t v29 = v30;
          }
        }
      }
LABEL_60:
      int v38 = *(_DWORD *)(v29 + 8);
      int v39 = *(_DWORD *)(v25 + 8);
      int v40 = *(_DWORD *)(a1 + 40);
      int v41 = v39 - v40;
      if (v38 < v39 - v40) {
        int v41 = v38;
      }
      int v42 = v40 + v38;
      if (v42 > v39) {
        int v39 = v42;
      }
      LODWORD(v43) = v38 & (v38 >> 31);
      if ((int)v43 <= v41) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = v43;
      }
      unint64_t v24 = v43 | ((unint64_t)(v39 - v41 + v43) << 32);
    }
    *(void *)(a3 + 40) = v24;
    sub_5BE918((uint64_t *)a1, (void *)a3, (uint64_t)&v48);
    uint64_t v44 = (char *)*v8;
    if (*v8)
    {
      unint64_t v45 = *(char **)(a3 + 56);
      unint64_t v46 = *v8;
      if (v45 != v44)
      {
        do
        {
          long long v47 = v45 - 176;
          sub_4D4B58((uint64_t)(v45 - 160));
          unint64_t v45 = v47;
        }
        while (v47 != v44);
        unint64_t v46 = *v8;
      }
      *(void *)(a3 + 56) = v44;
      operator delete(v46);
      *int v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = v48;
    *(void **)(a3 + 64) = v49[0];
    char v7 = v58;
    if (!v58) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(_DWORD *)(a3 + 256) = 0;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 260) = 1;
  char v7 = v58;
  if (v58) {
LABEL_5:
  }
    operator delete(v7);
LABEL_6:
  if (v56)
  {
    unint64_t v57 = v56;
    operator delete(v56);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
}

void sub_5BDE44(_Unwind_Exception *a1)
{
  sub_591A38(v1);
  sub_46645C(v2 - 152);
  _Unwind_Resume(a1);
}

void sub_5BDE6C(_Unwind_Exception *a1)
{
  if (*v3) {
    sub_20A9FC8(v1, *v3);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
    sub_46645C(v4 - 152);
    _Unwind_Resume(a1);
  }
  sub_46645C(v4 - 152);
  _Unwind_Resume(a1);
}

void sub_5BDEDC(_Unwind_Exception *exception_object)
{
  if (*v3) {
    sub_20A9F74(v1, *v3);
  }
  int v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_5BDF0C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_5BEFB4((uint64_t)a1, *(void *)(*a1 + 1528));
  uint64_t v8 = v6;
  if (v7 != 0x7FFFFFFFFFFFFFFFLL && v6 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_28;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = (a2[1] - *a2) >> 4;
  uint64_t v12 = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 8);
    if (v11 == 2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v21 = (uint64_t *)(v10 + 40);
      unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v23 = *(v21 - 2);
        uint64_t v25 = v23 - v13;
        BOOL v24 = v23 < v13;
        uint64_t v26 = *v21;
        v21 += 4;
        uint64_t v13 = v26;
        uint64_t v27 = v26 - v23;
        if (v24) {
          uint64_t v28 = v25;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v27 < 0) {
          uint64_t v29 = v27;
        }
        else {
          uint64_t v29 = 0;
        }
        v19 -= v28;
        v20 -= v29;
        v17 += v25 & ~(v25 >> 63);
        v18 += v27 & ~(v27 >> 63);
        v22 -= 2;
      }
      while (v22);
      uint64_t v16 = v20 + v19;
      uint64_t v15 = v18 + v17;
      if (v12 == v14) {
        goto LABEL_24;
      }
    }
    unint64_t v30 = ~v14 + v11;
    uint64_t v31 = (uint64_t *)(v10 + 16 * v14 + 24);
    do
    {
      uint64_t v33 = *v31;
      v31 += 2;
      uint64_t v32 = v33;
      BOOL v34 = __OFSUB__(v33, v13);
      uint64_t v35 = v33 - v13;
      if (v35 < 0 != v34) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      v16 -= v36;
      v15 += v35 & ~(v35 >> 63);
      uint64_t v13 = v32;
      --v30;
    }
    while (v30);
  }
LABEL_24:
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = v15;
  }
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = v16;
  }
LABEL_28:
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v47 = 0;
  sub_466334(a2, (uint64_t)(a1 + 8), __p, (uint64_t)v49, v37);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v38 = a2[1] - *a2;
  if (v38)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v41 = v38 >> 4;
    do
    {
      int v42 = (void *)sub_5BF948(v49, v40);
      if ((*v42 & v43) != 0)
      {
        uint64_t v44 = *a2 + v39;
        __p[0] = *(void **)v44;
        int v48 = *(void *)(v44 + 8);
        sub_5BFB5C(a3 + 16, __p, &v48);
      }
      ++v40;
      v39 += 16;
    }
    while (v41 != v40);
  }
  unint64_t v45 = sub_8D7730(a1[2], (uint64_t)&qword_2580A58);
  sub_5F3D48((uint64_t)__p, (uint64_t)v45);
  sub_4D90B4(a3 + 72, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  sub_625E4(*(std::string **)(a3 + 72), (char *)&qword_257EAD0, (uint64_t)&word_257EB18);
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{gain}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)a3, (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{loss}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)(a3 + 8), (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  if (v49[0]) {
    operator delete(v49[0]);
  }
}

void sub_5BE230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void **)(v15 - 104);
  if (v17) {
    operator delete(v17);
  }
  sub_5BE2B8(v14);
  _Unwind_Resume(a1);
}

void *sub_5BE2B8(void *a1)
{
  sub_4D4B58((uint64_t)(a1 + 9));
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 176;
        sub_4D4B58(v3 - 160);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_5BE338(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  long long __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v7 = a3[1] - *a3;
  if (!v7)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    uint64_t v18 = -1;
    *(void *)(a4 + 16) = 0;
LABEL_15:
    unint64_t v20 = 0;
    uint64_t v21 = 16;
    while (1)
    {
      sub_5BFC70(a1, (uint64_t *)((char *)v41 + v21 - 16), (char *)v41 + v21, (uint64_t)&v34);
      if (HIDWORD(v35) == 0x7FFFFFFF || v36 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_18;
      }
      BOOL v24 = (uint64_t *)sub_5BFE38(&__p, v20);
      uint64_t v25 = (int **)sub_46C8EC(a2, *v24);
      if (*(unsigned char *)(a1 + 120))
      {
        uint64_t v26 = (unsigned __int16 *)((char *)*v25 - **v25);
        if (*v26 >= 0x2Fu)
        {
          uint64_t v27 = v26[23];
          if (v27)
          {
            int v28 = *((unsigned __int8 *)*v25 + v27);
            if (v28 == 9 || v28 == 20)
            {
              int v22 = 1;
              goto LABEL_17;
            }
          }
        }
      }
      if (!*(unsigned char *)(a1 + 121)) {
        goto LABEL_16;
      }
      unint64_t v30 = (char *)*v25;
      uint64_t v31 = (unsigned __int16 *)((char *)*v25 - **v25);
      unsigned int v32 = *v31;
      if (!*((unsigned char *)v25 + 38)) {
        break;
      }
      if (v32 < 0x47) {
        goto LABEL_41;
      }
      unsigned int v33 = v31[35];
      int v22 = 2;
      if (v33)
      {
        if ((*(_DWORD *)&v30[v33] & 2) == 0) {
          goto LABEL_41;
        }
LABEL_16:
        int v22 = 0;
      }
LABEL_17:
      int v37 = v22;
      sub_408220((char **)a4, &v34);
LABEL_18:
      ++v20;
      v21 += 16;
      if (v18 == v20) {
        goto LABEL_7;
      }
    }
    if (v32 < 0x47 || !v31[35] || (*(_DWORD *)&v30[v31[35]] & 1) == 0)
    {
LABEL_41:
      int v22 = 2;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a3 + 3;
  uint64_t v12 = a3 + 6;
  uint64_t v13 = v7 >> 4;
  do
  {
    unint64_t v14 = (void *)sub_5BF948(v12, v10);
    if ((*v14 & v15) != 0)
    {
      sub_3BFF8((char **)&v41, (_OWORD *)(*a3 + v9));
      uint64_t v16 = (void *)sub_468B3C(v11, v10);
      sub_A4710((uint64_t)&__p, v16);
    }
    ++v10;
    v9 += 16;
  }
  while (v13 != v10);
  uint64_t v17 = (v42 - (unsigned char *)v41) >> 4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v18 = v17 - 1;
  if (v17 != 1) {
    goto LABEL_15;
  }
LABEL_7:
  sub_5C0048((double *)a1, (void *)a4, (uint64_t)&v34);
  uint64_t v19 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v19;
    operator delete(v19);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = v34;
  *(void *)(a4 + 16) = v35;
  if (__p)
  {
    uint64_t v39 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
}

void sub_5BE5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
    int v22 = __p;
    if (!__p)
    {
LABEL_3:
      uint64_t v23 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a18;
  if (!a18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5BE634(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(v3 + 32);
    double v21 = *(double *)v3;
    switch(*(_DWORD *)(v3 + 16))
    {
      case 0:
        v13 += v20;
        break;
      case 1:
        if (v21 > 0.0)
        {
          v11 += v20;
        }
        else
        {
          v12 += v20;
          ++v6;
        }
        if (v21 > 0.0) {
          ++v5;
        }
        break;
      case 2:
        if (v21 > 0.0)
        {
          v9 += v20;
          ++v8;
        }
        else
        {
          v10 += v20;
        }
        if (v21 <= 0.0) {
          ++v7;
        }
        break;
      case 3:
        if (v21 > 0.0) {
          ++v18;
        }
        else {
          ++v17;
        }
        if (v21 <= 0.0) {
          v15 += v20;
        }
        else {
          v16 += v20;
        }
        if (*(_DWORD *)(v3 + 40)) {
          ++v19;
        }
        break;
      default:
        break;
    }
    v14 += v20;
    v3 += 48;
  }
  while (v3 != v4);
  if (v8 + v18 + v5 && *a3 > *(void *)(a1 + 272)) {
    return 14;
  }
  if (v15 + v16 < 1) {
    goto LABEL_39;
  }
  double v23 = (double)v14;
  double v24 = *(double *)(a1 + 280);
  if ((double)v16 / (double)v14 >= v24) {
    return 10;
  }
  if ((double)v15 / v23 >= v24) {
    return 11;
  }
  if (v19 == v17 + v18 && (double)(v15 + v16) / v23 < *(double *)(a1 + 296))
  {
LABEL_39:
    if (v9 + v10 < 1)
    {
      if (v11 + v12 < 1) {
        return 1;
      }
      double v26 = (double)v14;
      if ((double)v13 / (double)v14 >= *(double *)(a1 + 288))
      {
        return 1;
      }
      else
      {
        double v27 = *(double *)(a1 + 280);
        if ((double)v11 / v26 >= v27)
        {
          return 2;
        }
        else if ((double)v12 / v26 >= v27)
        {
          return 3;
        }
        else if (v5 + v6 == 1)
        {
          return 4;
        }
        else
        {
          return 5;
        }
      }
    }
    else
    {
      double v25 = *(double *)(a1 + 280);
      if ((double)v9 / (double)v14 >= v25)
      {
        return 6;
      }
      else if ((double)v10 / (double)v14 >= v25)
      {
        return 7;
      }
      else if (v7 + v8 == 1)
      {
        return 8;
      }
      else
      {
        return 9;
      }
    }
  }
  else if (v17 + v18 == 1)
  {
    return 12;
  }
  else
  {
    return 13;
  }
}

uint64_t *sub_5BE918@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[3];
  if (a2[2] == v4 || *a2 == 0x7FFFFFFFFFFFFFFFLL || a2[1] == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  uint64_t v8 = *(void *)(v4 - 16);
  unint64_t v9 = result[6];
  if (result[7] >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = result[7];
  }
  if (v9 < 2) {
    goto LABEL_26;
  }
  while (1)
  {
    double v11 = (double)v8 / (double)v9;
    if (v11 >= 0.0)
    {
      if (v11 >= 4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11) + 1;
    }
    else
    {
      if (v11 <= -4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11);
      if (v12 >= 1) {
        --v12;
      }
    }
    double v11 = (double)(v12 >> 1);
LABEL_22:
    if (v10 <= (uint64_t)v11) {
      break;
    }
    if (--v9 < 2) {
      goto LABEL_26;
    }
  }
  uint64_t v10 = (uint64_t)v11;
LABEL_26:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double result = sub_8D7730(result[2], (uint64_t)&qword_2580A70);
  uint64_t v13 = (_OWORD *)a2[2];
  uint64_t v14 = a2[3];
  v32[0] = *v13;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v15 = (v14 - (uint64_t)v13) >> 4;
  if (v15 != 1)
  {
    uint64_t v16 = (uint64_t)result;
    uint64_t v17 = 0;
    uint64_t v18 = 1;
    do
    {
      uint64_t v20 = a2[2];
      int v21 = *(_DWORD *)(v20 + v17 + 8);
      long long v29 = *(_OWORD *)(v20 + v17 + 16);
      int v22 = DWORD2(v29) - v21;
      if (DWORD2(v29) - v21 < 0) {
        v30 += (int)fabs((double)v22);
      }
      else {
        v31 += v22;
      }
      uint64_t v23 = (a2[3] - v20) >> 4;
      ++v18;
      if ((void)v29 - *(void *)&v32[0] >= v10 || v18 == v23)
      {
        sub_5F3D48((uint64_t)v28, v16);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA28, (uint64_t *)v32, &v27);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA40, (uint64_t *)&v29, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)&qword_257EAA0, &v31, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)byte_257EAB8, &v30, &v27);
        double v25 = *(void **)(a3 + 8);
        if ((unint64_t)v25 >= *(void *)(a3 + 16))
        {
          int v19 = sub_5C4F34((void **)a3, v32, (uint64_t *)&v29, (uint64_t)v28);
        }
        else
        {
          uint64_t v26 = v29;
          *double v25 = *(void *)&v32[0];
          v25[1] = v26;
          sub_4F58AC((uint64_t)(v25 + 2), (uint64_t)v28);
          int v19 = (char *)(v25 + 22);
          *(void *)(a3 + 8) = v25 + 22;
        }
        *(void *)(a3 + 8) = v19;
        uint64_t v31 = 0;
        *(void *)&v32[0] = v29;
        DWORD2(v32[0]) = DWORD2(v29);
        uint64_t v30 = 0;
        double result = (uint64_t *)sub_4D4B58((uint64_t)v28);
      }
      v17 += 16;
    }
    while (v15 != v18);
  }
  return result;
}

void sub_5BEBE0(_Unwind_Exception *a1)
{
  sub_591FF0(v1);
  _Unwind_Resume(a1);
}

void sub_5BEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t *)va);
  sub_591FF0(v3);
  _Unwind_Resume(a1);
}

void sub_5BEC44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_5BD950(a1, v4, (uint64_t)v10);
      sub_5BED44((uint64_t)(v4 + 1461), (uint64_t)v10);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      sub_4D4B58((uint64_t)&v15);
      int v6 = (char *)v13;
      if (v13)
      {
        int v7 = v14;
        uint64_t v8 = v13;
        if (v14 != v13)
        {
          do
          {
            unint64_t v9 = v7 - 176;
            sub_4D4B58((uint64_t)(v7 - 160));
            int v7 = v9;
          }
          while (v9 != v6);
          uint64_t v8 = v13;
        }
        uint64_t v14 = v6;
        operator delete(v8);
      }
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_5BED44(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v5 = (void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 16);
  int v6 = (void *)(a2 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
    *int v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *int v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  int v7 = (void **)(a1 + 48);
  uint64_t v8 = *(char **)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (v8)
  {
    unint64_t v9 = *(char **)(a1 + 56);
    uint64_t v10 = v8;
    if (v9 != v8)
    {
      do
      {
        double v11 = v9 - 176;
        sub_4D4B58((uint64_t)(v9 - 160));
        unint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = *v7;
    }
    *(void *)(a1 + 56) = v8;
    operator delete(v10);
    *int v7 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_4D90B4(a1 + 72, a2 + 72);
  uint64_t v12 = *(void **)(a1 + 232);
  if (v12)
  {
    *(void *)(a1 + 240) = v12;
    operator delete(v12);
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  int v13 = *(_DWORD *)(a2 + 256);
  *(unsigned char *)(a1 + 260) = *(unsigned char *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v13;
  return a1;
}

uint64_t sub_5BEE74(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 44))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    if (*a2 != v4)
    {
      int v5 = 2147483646;
      uint64_t v6 = 0x80000000;
      do
      {
        double result = nullsub_1(v3);
        for (uint64_t i = *(void *)result; i != *(void *)(result + 8); i += 12328)
        {
          int v8 = *(_DWORD *)(i + 11728);
          if (v8 != 0x7FFFFFFF)
          {
            int v9 = *(_DWORD *)(i + 11732);
            if (v9 <= (int)v6) {
              unsigned int v10 = v6;
            }
            else {
              unsigned int v10 = *(_DWORD *)(i + 11732);
            }
            if (v8 >= v5) {
              int v8 = v5;
            }
            if (v9 == 0x7FFFFFFF)
            {
              uint64_t v6 = v6;
            }
            else
            {
              int v5 = v8;
              uint64_t v6 = v10;
            }
          }
        }
        v3 += 7560;
      }
      while (v3 != v4);
      if (v6 != 0x80000000 && v5 != 2147483646)
      {
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
        if (v12 != v11)
        {
          unint64_t v13 = v5 | (unint64_t)(v6 << 32);
          do
          {
            double result = nullsub_1(v12);
            uint64_t v14 = *(void *)result;
            uint64_t v15 = *(void *)(result + 8);
            while (v14 != v15)
            {
              if (*(_DWORD *)(v14 + 11728) != 0x7FFFFFFF && *(_DWORD *)(v14 + 11732) != 0x7FFFFFFF) {
                *(void *)(v14 + 11728) = v13;
              }
              v14 += 12328;
            }
            v12 += 7560;
          }
          while (v12 != v11);
        }
      }
    }
  }
  return result;
}

uint64_t sub_5BEFB4(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 33)) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || a2 > 0xFFFFFFFEFFFFFFFFLL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v7 = sub_377754(*(void **)(a1 + 8));
  int v8 = (int *)sub_5C4BD0(v7, a2, 0);
  int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 0xFu)
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v10 = v9[7];
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10)
    {
      uint64_t v11 = *(unsigned int *)((char *)v8 + v10);
      if (v11 != -1) {
        uint64_t v4 = v11;
      }
    }
  }
  uint64_t v12 = (int *)sub_5C4BD0(v7, a2, 0);
  unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0x11u)
  {
    if (v13[8]) {
      return v4;
    }
    return v4;
  }
  return v4;
}

uint64_t sub_5BF0B8(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B9800;
  strcpy((char *)__p, "minimum_visible_range_offset_m");
  *(_DWORD *)a1 = 100 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v8 = xmmword_20B9A60;
  strcpy((char *)__p, "enable_same_minimum_visible_range_for_all_routes");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 4) = v4;
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91B0;
  strcpy((char *)__p, "segment_descriptions_max_num");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 8) = v5;
  long long __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "segment_description_min_length_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  sub_468394(a1 + 24, a2);
  return a1;
}

void sub_5BF254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5BF27C(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_aggregation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "flat_max_slope");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "aggregation_slope_factor");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "aggregation_slope_relative_threshold");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "aggregation_severity_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v10;
  sub_468024(a1 + 40, a3);
  sub_468394(a1 + 56, a3);
  sub_46858C(a1 + 72, a3);
  return a1;
}

void sub_5BF480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_5BF4AC(double *a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)__p, "climb_distance_threshold_meters");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *a1 = NAN;
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B91B0;
  strcpy((char *)__p, "uphill_downhill_min_fraction");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[1] = v8;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B9280;
  strcpy((char *)__p, "mostly_flat_to_gentle_min_fraction");
  double v9 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[2] = v9;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B93A0;
  strcpy((char *)__p, "restricted_observation_min_fraction");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[3] = v10;
  return a1;
}

void sub_5BF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5BF748(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_elevation_info");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "prefer_curated_elevation_gain_loss");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_profile");
  double v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5BF0B8(a1 + 8, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "elevation_observation");
  double v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5BF27C(a1 + 48, v9, a3);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_summary");
  double v10 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5BF4AC((double *)(a1 + 240), v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5BF91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5BF948(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    BOOL v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, a1[1]);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * (a2 >> 6);
}

void sub_5BFA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_5BFB5C(uint64_t a1, void *a2, int *a3)
{
  long long v7 = *(_DWORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    double v10 = *(_DWORD **)a1;
    uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      sub_188D718();
    }
    uint64_t v16 = 16 * v15;
    std::string v17 = (char *)operator new(16 * v15);
    int v18 = *a3;
    long long v19 = &v17[16 * v11];
    *(void *)long long v19 = *a2;
    *((_DWORD *)v19 + 2) = v18;
    for (uint64_t i = v19 + 16; v7 != v10; *((_DWORD *)v19 + 2) = v21)
    {
      uint64_t v20 = *((void *)v7 - 2);
      v7 -= 4;
      int v21 = v7[2];
      *((void *)v19 - 2) = v20;
      v19 -= 16;
    }
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    int v8 = *a3;
    *(void *)long long v7 = *a2;
    v7[2] = v8;
    uint64_t i = (char *)(v7 + 4);
  }
  *(void *)(a1 + 8) = i;
  return i - 16;
}

uint64_t sub_5BFC70@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3 - *a2;
  if (v5 < *(unsigned int *)(result + 152))
  {
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_DWORD *)(a4 + 20) = 0x7FFFFFFF;
    *(int64x2_t *)(a4 + 24) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    return result;
  }
  uint64_t v6 = a3[1] - a2[1];
  if (v5 < 1) {
    double v7 = 0.0;
  }
  else {
    double v7 = (double)v6 / (double)v5;
  }
  int v8 = (double *)(result + 160);
  uint64_t v9 = 216;
  if (v7 < 0.0) {
    int v8 = (double *)(result + 216);
  }
  else {
    uint64_t v9 = 160;
  }
  double v10 = fabs(v7);
  if (v10 >= v8[2])
  {
    *(double *)a4 = v7;
    *(double *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 16) = 3;
    *(_DWORD *)(a4 + 20) = v6;
    *(void *)(a4 + 24) = v4;
    *(void *)(a4 + 32) = v5;
    *(_DWORD *)(a4 + 40) = 0;
    return result;
  }
  if (v10 >= v8[1])
  {
    *(double *)a4 = v7;
    *(double *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 20) = v6;
    *(void *)(a4 + 24) = v4;
    *(void *)(a4 + 32) = v5;
    *(_DWORD *)(a4 + 40) = 0;
    return result;
  }
  if (v10 < *(double *)(result + v9)) {
    goto LABEL_27;
  }
  int v11 = (int)fabs((double)(int)v6);
  double v13 = v8[5];
  unint64_t v12 = v8 + 5;
  double v14 = v10 * *(v12 - 2) + *(v12 - 1);
  double v19 = v14;
  unint64_t v15 = v12 + 1;
  double v16 = v12[1];
  if (v13 >= v14) {
    unint64_t v12 = &v19;
  }
  if (v14 < v16) {
    unint64_t v12 = v15;
  }
  double v17 = *v12 * 100.0;
  if (v17 >= 0.0)
  {
    if (v17 >= 4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v18 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    if (v17 <= -4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
  }
  double v17 = (double)(v18 >> 1);
LABEL_26:
  if (v11 < (int)v17)
  {
LABEL_27:
    *(double *)a4 = v7;
    *(double *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 20) = v6;
    *(void *)(a4 + 24) = v4;
    *(void *)(a4 + 32) = v5;
    *(_DWORD *)(a4 + 40) = 0;
    return result;
  }
  *(double *)a4 = v7;
  *(double *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v6;
  *(void *)(a4 + 24) = v4;
  *(void *)(a4 + 32) = v5;
  *(_DWORD *)(a4 + 40) = 0;
  return result;
}

uint64_t sub_5BFE38(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_5BFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

double *sub_5C0048@<X0>(double *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)result + 80))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v5 = (_DWORD *)*a2;
    uint64_t v6 = a2[1] - *a2;
    if (v6)
    {
      long long v7 = result;
      unint64_t v8 = 0;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
      double v10 = result + 20;
      int v11 = result + 27;
      do
      {
        unint64_t v12 = (long long *)&v5[12 * v8];
        long long v14 = v12[1];
        long long v13 = v12[2];
        long long v55 = *v12;
        long long v56 = v14;
        long long v57 = v13;
        double v15 = *((double *)&v55 + 1);
        if (*(double *)&v55 <= 0.0) {
          std::string v16 = v11;
        }
        else {
          std::string v16 = v10;
        }
        unint64_t v17 = v8 + 1;
        int v18 = DWORD1(v56);
        if (v8 + 1 > v9) {
          unint64_t v19 = v8 + 1;
        }
        else {
          unint64_t v19 = v9;
        }
        if (v8 + 1 < v9 && DWORD2(v57) == v5[12 * v17 + 10])
        {
          double v20 = fabs(*((double *)&v55 + 1));
          double v21 = fabs(*(double *)&v55);
          uint64_t v22 = v57;
          int v23 = v56;
          uint64_t v24 = (uint64_t)&v5[12 * v8 + 17];
          unint64_t v25 = v19 - 2;
          double v26 = *(double *)&v55;
          while (1)
          {
            double v27 = *(double *)(v24 - 20);
            if (*(double *)&v55 > 0.0 != v27 > 0.0) {
              goto LABEL_45;
            }
            double v28 = v7[11];
            if (v20 <= v28) {
              goto LABEL_45;
            }
            double v29 = *(double *)(v24 - 12);
            double v30 = fabs(v29);
            if (v30 <= v28) {
              goto LABEL_45;
            }
            int v31 = *(_DWORD *)(v24 - 4);
            if (v23 <= v31) {
              int v32 = *(_DWORD *)(v24 - 4);
            }
            else {
              int v32 = v23;
            }
            uint64_t v33 = v16;
            if (v32 != 1)
            {
              if (v32 == 3)
              {
                uint64_t v33 = v16 + 2;
              }
              else
              {
                uint64_t v33 = v16 + 1;
                if (v32 != 2)
                {
                  double v34 = 1.79769313e308;
                  goto LABEL_25;
                }
              }
            }
            double v34 = *v33 * v7[14];
LABEL_25:
            double v35 = fabs(v26);
            double v36 = v7[13];
            if (v36 >= v35 * v7[12]) {
              double v36 = v35 * v7[12];
            }
            double v37 = fabs(v27);
            if (v23 != v31)
            {
              double v38 = vabdd_f64(v15, v29);
              BOOL v39 = vabdd_f64(v26, v27) > v36 && v38 > v36;
              if (v39 && (v23 >= v31 || v21 < v34) && (v31 >= v23 || v37 < v34)) {
                goto LABEL_45;
              }
            }
            if (v37 > v35) {
              double v26 = *(double *)(v24 - 20);
            }
            if (v30 < fabs(v15)) {
              double v15 = *(double *)(v24 - 12);
            }
            LODWORD(v56) = v32;
            v18 += *(_DWORD *)v24;
            DWORD1(v56) = v18;
            v22 += *(void *)(v24 + 12);
            *(void *)&long long v57 = v22;
            if (v25 == v8)
            {
              unint64_t v8 = v17;
              goto LABEL_45;
            }
            ++v8;
            int v40 = *(_DWORD *)(v24 + 68);
            v24 += 48;
            ++v17;
            int v23 = v32;
            if (DWORD2(v57) != v40) {
              goto LABEL_45;
            }
          }
        }
        double v26 = *(double *)&v55;
LABEL_45:
        *(double *)&long long v55 = v26;
        *((double *)&v55 + 1) = v15;
        if (v26 < 0.0) {
          uint64_t v41 = v11;
        }
        else {
          uint64_t v41 = v10;
        }
        double v42 = fabs(v26);
        if (v42 >= v41[2])
        {
          int v50 = 3;
        }
        else
        {
          if (v42 < v41[1])
          {
            if (v42 >= *v41)
            {
              double v44 = v41[5];
              uint64_t v43 = v41 + 5;
              double v45 = v42 * *(v43 - 2) + *(v43 - 1);
              double v58 = v45;
              unint64_t v46 = v43 + 1;
              double v47 = v43[1];
              if (v44 >= v45) {
                uint64_t v43 = &v58;
              }
              if (v45 < v47) {
                uint64_t v43 = v46;
              }
              double v48 = *v43 * 100.0;
              if (v48 >= 0.0)
              {
                if (v48 < 4.50359963e15)
                {
                  uint64_t v49 = (uint64_t)(v48 + v48) + 1;
                  goto LABEL_64;
                }
              }
              else if (v48 > -4.50359963e15)
              {
                uint64_t v49 = (uint64_t)(v48 + v48);
                if (v49 >= 1) {
                  --v49;
                }
LABEL_64:
                double v48 = (double)(v49 >> 1);
              }
              if ((int)fabs((double)v18) >= (int)v48)
              {
                int v50 = 1;
                goto LABEL_68;
              }
            }
            int v50 = 0;
            goto LABEL_68;
          }
          int v50 = 2;
        }
LABEL_68:
        LODWORD(v56) = v50;
        double result = (double *)sub_408220((char **)a3, &v55);
        ++v8;
        uint64_t v5 = (_DWORD *)*a2;
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4);
      }
      while (v8 < v9);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v51 = (_DWORD *)*a2;
    int64_t v52 = a2[1] - *a2;
    if (v52)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v52 >> 4) >= 0x555555555555556) {
        sub_2E00();
      }
      uint64_t v53 = (char *)operator new(v52);
      *(void *)a3 = v53;
      *(void *)(a3 + 8) = v53;
      unint64_t v54 = &v53[16 * (v52 >> 4)];
      *(void *)(a3 + 16) = v54;
      double result = (double *)memcpy(v53, v51, v52 - 4);
      *(void *)(a3 + 8) = v54;
    }
  }
  return result;
}

void sub_5C0414(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5C0434(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = a3;
  a1[1] = a2;
  sub_6892E8(a4, 4u, *(_DWORD *)(a3 + 1000), a1 + 2);
  HIBYTE(v31[2]) = 20;
  strcpy((char *)v31, "ElevationInfoBuilder");
  double v28 = 0;
  double v29 = 0;
  uint64_t v30 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)v31, (uint64_t *)&v28);
  sub_3CB560(v6, (uint64_t)v32);
  char v25 = 14;
  uint64_t v23 = 0;
  strcpy((char *)v24, "RouteElevation");
  double v21 = 0;
  uint64_t v22 = 0;
  long long v7 = sub_374CDC(a2, (uint64_t)v24, (uint64_t *)&v21);
  sub_3CB560(v7, (uint64_t)__p);
  sub_5C2138((uint64_t)(a1 + 4), v32, __p);
  unint64_t v8 = v27;
  if (v27)
  {
    do
    {
      long long v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      unint64_t v8 = v13;
    }
    while (v13);
  }
  unint64_t v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  double v10 = (void **)v21;
  if (v21)
  {
    int v11 = v22;
    unint64_t v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      unint64_t v12 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v12);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  long long v14 = v33;
  if (v33)
  {
    do
    {
      unint64_t v19 = *(char **)v14;
      sub_57AC8((uint64_t *)v14 + 5);
      if (v14[39] < 0) {
        operator delete(*((void **)v14 + 2));
      }
      operator delete(v14);
      long long v14 = v19;
    }
    while (v19);
  }
  double v15 = (void *)v32[0];
  v32[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  std::string v16 = (void **)v28;
  if (v28)
  {
    unint64_t v17 = v29;
    int v18 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      int v18 = v28;
    }
    double v29 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  return a1;
}

void sub_5C0678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  sub_5450C((uint64_t)&a18);
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_5450C(v24 - 72);
  sub_1A668(&a23);
  if (*(char *)(v24 - 73) < 0) {
    operator delete(*(void **)(v24 - 96));
  }
  sub_14A84(v23);
  _Unwind_Resume(a1);
}

void *sub_5C06DC(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)sub_374EF4(a2);

  return sub_5C0434(a1, (uint64_t)a2, a3, v6);
}

void sub_5C0734(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 32) || !sub_46C760(a2))
  {
    *(_OWORD *)(a3 + 248) = 0u;
    *(_OWORD *)(a3 + 232) = 0u;
    *(_OWORD *)(a3 + 216) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    *(void *)(a3 + 240) = 0;
    *(_DWORD *)(a3 + 256) = 0;
    *(void *)(a3 + 248) = 0;
    *(unsigned char *)(a3 + 260) = 1;
    return;
  }
  uint64_t v6 = sub_3750CC(*(void **)(a1 + 8));
  sub_4664AC(a2, a1 + 120, (_DWORD *)(a1 + 136), v6, (uint64_t)v55);
  if (!sub_4651D0(v55))
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    unint64_t v8 = (void **)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    unint64_t v9 = (void **)(a3 + 232);
    *(void *)(a3 + 253) = 0;
    *(void *)(a3 + 240) = 0;
    *(void *)(a3 + 248) = 0;
    sub_5C0CF0((uint64_t *)a1, (uint64_t *)v55, (uint64_t)&v48);
    *(_OWORD *)a3 = v48;
    double v10 = *(void **)(a3 + 16);
    if (v10)
    {
      *(void *)(a3 + 24) = v10;
      operator delete(v10);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
    }
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v49;
    uint64_t v11 = v50;
    uint64_t v12 = v51;
    v49[1] = 0;
    uint64_t v50 = 0;
    v49[0] = 0;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v12;
    uint64_t v13 = *(void *)(a3 + 48);
    if (v13)
    {
      uint64_t v14 = *(void *)(a3 + 56);
      double v15 = *(void **)(a3 + 48);
      if (v14 != v13)
      {
        do
        {
          uint64_t v16 = v14 - 176;
          sub_4D4B58(v14 - 160);
          uint64_t v14 = v16;
        }
        while (v16 != v13);
        double v15 = *v8;
      }
      *(void *)(a3 + 56) = v13;
      operator delete(v15);
      *unint64_t v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = *(_OWORD *)__p;
    *(void *)(a3 + 64) = v53;
    __p[1] = 0;
    uint64_t v53 = 0;
    __p[0] = 0;
    sub_4D90B4(a3 + 72, (uint64_t)v54);
    sub_4D4B58((uint64_t)v54);
    unint64_t v17 = (char *)__p[0];
    if (__p[0])
    {
      int v18 = (char *)__p[1];
      unint64_t v19 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          double v20 = v18 - 176;
          sub_4D4B58((uint64_t)(v18 - 160));
          int v18 = v20;
        }
        while (v20 != v17);
        unint64_t v19 = __p[0];
      }
      __p[1] = v17;
      operator delete(v19);
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    sub_5C109C(a1, a2, v55, (uint64_t)&v48);
    double v21 = *v9;
    if (*v9)
    {
      *(void *)(a3 + 240) = v21;
      operator delete(v21);
      *unint64_t v9 = 0;
      *(void *)(a3 + 240) = 0;
      *(void *)(a3 + 248) = 0;
    }
    *(_OWORD *)(a3 + 232) = v48;
    *(void **)(a3 + 248) = v49[0];
    *(_DWORD *)(a3 + 256) = sub_5C1398(a1, (uint64_t *)(a3 + 232), (void *)a3);
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v22 = *(void *)(a3 + 24);
    unint64_t v24 = 0x7FFFFFFF7FFFFFFFLL;
    if (v23 != v22 && *(void *)a3 != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a3 + 8) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = v23 + 16;
      if (v23 + 16 == v22)
      {
        uint64_t v29 = *(void *)(a3 + 16);
        uint64_t v25 = v29;
      }
      else
      {
        int v26 = *(_DWORD *)(v23 + 24);
        int v27 = *(_DWORD *)(v23 + 8);
        BOOL v28 = v26 < v27;
        if (v26 >= v27) {
          uint64_t v29 = *(void *)(a3 + 16);
        }
        else {
          uint64_t v29 = v23 + 16;
        }
        if (v28) {
          uint64_t v25 = *(void *)(a3 + 16);
        }
        uint64_t v30 = v23 + 32;
        if (v30 != v22)
        {
          while (1)
          {
            uint64_t v31 = v30 + 16;
            if (v30 + 16 == v22) {
              break;
            }
            int v32 = *(_DWORD *)(v30 + 24);
            int v33 = *(_DWORD *)(v30 + 8);
            BOOL v34 = v32 < v33;
            if (v32 >= v33) {
              int v35 = *(_DWORD *)(v30 + 8);
            }
            else {
              int v35 = *(_DWORD *)(v30 + 24);
            }
            if (v32 >= v33) {
              uint64_t v36 = v30;
            }
            else {
              uint64_t v36 = v30 + 16;
            }
            if (v32 <= v33) {
              int v32 = *(_DWORD *)(v30 + 8);
            }
            if (v34) {
              uint64_t v31 = v30;
            }
            if (v35 < *(_DWORD *)(v29 + 8)) {
              uint64_t v29 = v36;
            }
            if (v32 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v31;
            }
            v30 += 32;
            if (v30 == v22) {
              goto LABEL_60;
            }
          }
          int v37 = *(_DWORD *)(v30 + 8);
          if (v37 >= *(_DWORD *)(v29 + 8))
          {
            if (v37 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v30;
            }
          }
          else
          {
            uint64_t v29 = v30;
          }
        }
      }
LABEL_60:
      int v38 = *(_DWORD *)(v29 + 8);
      int v39 = *(_DWORD *)(v25 + 8);
      int v40 = *(_DWORD *)(a1 + 40);
      int v41 = v39 - v40;
      if (v38 < v39 - v40) {
        int v41 = v38;
      }
      int v42 = v40 + v38;
      if (v42 > v39) {
        int v39 = v42;
      }
      LODWORD(v43) = v38 & (v38 >> 31);
      if ((int)v43 <= v41) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = v43;
      }
      unint64_t v24 = v43 | ((unint64_t)(v39 - v41 + v43) << 32);
    }
    *(void *)(a3 + 40) = v24;
    sub_5C167C((uint64_t *)a1, (void *)a3, (uint64_t)&v48);
    double v44 = (char *)*v8;
    if (*v8)
    {
      double v45 = *(char **)(a3 + 56);
      unint64_t v46 = *v8;
      if (v45 != v44)
      {
        do
        {
          double v47 = v45 - 176;
          sub_4D4B58((uint64_t)(v45 - 160));
          double v45 = v47;
        }
        while (v47 != v44);
        unint64_t v46 = *v8;
      }
      *(void *)(a3 + 56) = v44;
      operator delete(v46);
      *unint64_t v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = v48;
    *(void **)(a3 + 64) = v49[0];
    long long v7 = v58;
    if (!v58) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(_DWORD *)(a3 + 256) = 0;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 260) = 1;
  long long v7 = v58;
  if (v58) {
LABEL_5:
  }
    operator delete(v7);
LABEL_6:
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
}

void sub_5C0C28(_Unwind_Exception *a1)
{
  sub_591A38(v1);
  sub_46645C(v2 - 152);
  _Unwind_Resume(a1);
}

void sub_5C0C50(_Unwind_Exception *a1)
{
  if (*v3) {
    sub_20A9FC8(v1, *v3);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
    sub_46645C(v4 - 152);
    _Unwind_Resume(a1);
  }
  sub_46645C(v4 - 152);
  _Unwind_Resume(a1);
}

void sub_5C0CC0(_Unwind_Exception *exception_object)
{
  if (*v3) {
    sub_20A9F74(v1, *v3);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_5C0CF0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_5BEFB4((uint64_t)a1, *(void *)(*a1 + 1528));
  uint64_t v8 = v6;
  if (v7 != 0x7FFFFFFFFFFFFFFFLL && v6 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_28;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = (a2[1] - *a2) >> 4;
  uint64_t v12 = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 8);
    if (v11 == 2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
      double v21 = (uint64_t *)(v10 + 40);
      unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v23 = *(v21 - 2);
        uint64_t v25 = v23 - v13;
        BOOL v24 = v23 < v13;
        uint64_t v26 = *v21;
        v21 += 4;
        uint64_t v13 = v26;
        uint64_t v27 = v26 - v23;
        if (v24) {
          uint64_t v28 = v25;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v27 < 0) {
          uint64_t v29 = v27;
        }
        else {
          uint64_t v29 = 0;
        }
        v19 -= v28;
        v20 -= v29;
        v17 += v25 & ~(v25 >> 63);
        v18 += v27 & ~(v27 >> 63);
        v22 -= 2;
      }
      while (v22);
      uint64_t v16 = v20 + v19;
      uint64_t v15 = v18 + v17;
      if (v12 == v14) {
        goto LABEL_24;
      }
    }
    unint64_t v30 = ~v14 + v11;
    uint64_t v31 = (uint64_t *)(v10 + 16 * v14 + 24);
    do
    {
      uint64_t v33 = *v31;
      v31 += 2;
      uint64_t v32 = v33;
      BOOL v34 = __OFSUB__(v33, v13);
      uint64_t v35 = v33 - v13;
      if (v35 < 0 != v34) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      v16 -= v36;
      v15 += v35 & ~(v35 >> 63);
      uint64_t v13 = v32;
      --v30;
    }
    while (v30);
  }
LABEL_24:
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = v15;
  }
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = v16;
  }
LABEL_28:
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v47 = 0;
  sub_466334(a2, (uint64_t)(a1 + 8), __p, (uint64_t)v49, v37);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v38 = a2[1] - *a2;
  if (v38)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v41 = v38 >> 4;
    do
    {
      int v42 = (void *)sub_5BF948(v49, v40);
      if ((*v42 & v43) != 0)
      {
        uint64_t v44 = *a2 + v39;
        __p[0] = *(void **)v44;
        int v48 = *(void *)(v44 + 8);
        sub_5BFB5C(a3 + 16, __p, &v48);
      }
      ++v40;
      v39 += 16;
    }
    while (v41 != v40);
  }
  double v45 = sub_8D7730(a1[2], (uint64_t)&qword_2580A58);
  sub_5F3D48((uint64_t)__p, (uint64_t)v45);
  sub_4D90B4(a3 + 72, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  sub_625E4(*(std::string **)(a3 + 72), (char *)&qword_257EAD0, (uint64_t)&word_257EB18);
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{gain}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)a3, (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{loss}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)(a3 + 8), (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  if (v49[0]) {
    operator delete(v49[0]);
  }
}

void sub_5C1014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void **)(v15 - 104);
  if (v17) {
    operator delete(v17);
  }
  sub_5BE2B8(v14);
  _Unwind_Resume(a1);
}

void sub_5C109C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  long long __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v7 = a3[1] - *a3;
  if (!v7)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    uint64_t v18 = -1;
    *(void *)(a4 + 16) = 0;
LABEL_15:
    unint64_t v20 = 0;
    uint64_t v21 = 16;
    while (1)
    {
      sub_5BFC70(a1, (uint64_t *)((char *)v41 + v21 - 16), (char *)v41 + v21, (uint64_t)&v34);
      if (HIDWORD(v35) == 0x7FFFFFFF || v36 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_18;
      }
      BOOL v24 = (uint64_t *)sub_5BFE38(&__p, v20);
      uint64_t v25 = (int **)sub_46C8EC(a2, *v24);
      if (*(unsigned char *)(a1 + 120))
      {
        uint64_t v26 = (unsigned __int16 *)((char *)*v25 - **v25);
        if (*v26 >= 0x2Fu)
        {
          uint64_t v27 = v26[23];
          if (v27)
          {
            int v28 = *((unsigned __int8 *)*v25 + v27);
            if (v28 == 9 || v28 == 20)
            {
              int v22 = 1;
              goto LABEL_17;
            }
          }
        }
      }
      if (!*(unsigned char *)(a1 + 121)) {
        goto LABEL_16;
      }
      unint64_t v30 = (char *)*v25;
      uint64_t v31 = (unsigned __int16 *)((char *)*v25 - **v25);
      unsigned int v32 = *v31;
      if (!*((unsigned char *)v25 + 38)) {
        break;
      }
      if (v32 < 0xB) {
        goto LABEL_41;
      }
      unsigned int v33 = v31[5];
      int v22 = 2;
      if (v33)
      {
        if ((*(_DWORD *)&v30[v33] & 2) == 0) {
          goto LABEL_41;
        }
LABEL_16:
        int v22 = 0;
      }
LABEL_17:
      int v37 = v22;
      sub_408220((char **)a4, &v34);
LABEL_18:
      ++v20;
      v21 += 16;
      if (v18 == v20) {
        goto LABEL_7;
      }
    }
    if (v32 < 0xB || !v31[5] || (*(_DWORD *)&v30[v31[5]] & 1) == 0)
    {
LABEL_41:
      int v22 = 2;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a3 + 3;
  uint64_t v12 = a3 + 6;
  uint64_t v13 = v7 >> 4;
  do
  {
    unint64_t v14 = (void *)sub_5BF948(v12, v10);
    if ((*v14 & v15) != 0)
    {
      sub_3BFF8((char **)&v41, (_OWORD *)(*a3 + v9));
      uint64_t v16 = (void *)sub_468B3C(v11, v10);
      sub_A4710((uint64_t)&__p, v16);
    }
    ++v10;
    v9 += 16;
  }
  while (v13 != v10);
  uint64_t v17 = (v42 - (unsigned char *)v41) >> 4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v18 = v17 - 1;
  if (v17 != 1) {
    goto LABEL_15;
  }
LABEL_7:
  sub_5C2338((double *)a1, (void *)a4, (uint64_t)&v34);
  uint64_t v19 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v19;
    operator delete(v19);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = v34;
  *(void *)(a4 + 16) = v35;
  if (__p)
  {
    uint64_t v39 = __p;
    operator delete(__p);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
}

void sub_5C131C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
    int v22 = __p;
    if (!__p)
    {
LABEL_3:
      uint64_t v23 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a18;
  if (!a18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C1398(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(v3 + 32);
    double v21 = *(double *)v3;
    switch(*(_DWORD *)(v3 + 16))
    {
      case 0:
        v13 += v20;
        break;
      case 1:
        if (v21 > 0.0)
        {
          v11 += v20;
        }
        else
        {
          v12 += v20;
          ++v6;
        }
        if (v21 > 0.0) {
          ++v5;
        }
        break;
      case 2:
        if (v21 > 0.0)
        {
          v9 += v20;
          ++v8;
        }
        else
        {
          v10 += v20;
        }
        if (v21 <= 0.0) {
          ++v7;
        }
        break;
      case 3:
        if (v21 > 0.0) {
          ++v18;
        }
        else {
          ++v17;
        }
        if (v21 <= 0.0) {
          v15 += v20;
        }
        else {
          v16 += v20;
        }
        if (*(_DWORD *)(v3 + 40)) {
          ++v19;
        }
        break;
      default:
        break;
    }
    v14 += v20;
    v3 += 48;
  }
  while (v3 != v4);
  if (v8 + v18 + v5 && *a3 > *(void *)(a1 + 272)) {
    return 14;
  }
  if (v15 + v16 < 1) {
    goto LABEL_39;
  }
  double v23 = (double)v14;
  double v24 = *(double *)(a1 + 280);
  if ((double)v16 / (double)v14 >= v24) {
    return 10;
  }
  if ((double)v15 / v23 >= v24) {
    return 11;
  }
  if (v19 == v17 + v18 && (double)(v15 + v16) / v23 < *(double *)(a1 + 296))
  {
LABEL_39:
    if (v9 + v10 < 1)
    {
      if (v11 + v12 < 1) {
        return 1;
      }
      double v26 = (double)v14;
      if ((double)v13 / (double)v14 >= *(double *)(a1 + 288))
      {
        return 1;
      }
      else
      {
        double v27 = *(double *)(a1 + 280);
        if ((double)v11 / v26 >= v27)
        {
          return 2;
        }
        else if ((double)v12 / v26 >= v27)
        {
          return 3;
        }
        else if (v5 + v6 == 1)
        {
          return 4;
        }
        else
        {
          return 5;
        }
      }
    }
    else
    {
      double v25 = *(double *)(a1 + 280);
      if ((double)v9 / (double)v14 >= v25)
      {
        return 6;
      }
      else if ((double)v10 / (double)v14 >= v25)
      {
        return 7;
      }
      else if (v7 + v8 == 1)
      {
        return 8;
      }
      else
      {
        return 9;
      }
    }
  }
  else if (v17 + v18 == 1)
  {
    return 12;
  }
  else
  {
    return 13;
  }
}

uint64_t *sub_5C167C@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[3];
  if (a2[2] == v4 || *a2 == 0x7FFFFFFFFFFFFFFFLL || a2[1] == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  uint64_t v8 = *(void *)(v4 - 16);
  unint64_t v9 = result[6];
  if (result[7] >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = result[7];
  }
  if (v9 < 2) {
    goto LABEL_26;
  }
  while (1)
  {
    double v11 = (double)v8 / (double)v9;
    if (v11 >= 0.0)
    {
      if (v11 >= 4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11) + 1;
    }
    else
    {
      if (v11 <= -4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11);
      if (v12 >= 1) {
        --v12;
      }
    }
    double v11 = (double)(v12 >> 1);
LABEL_22:
    if (v10 <= (uint64_t)v11) {
      break;
    }
    if (--v9 < 2) {
      goto LABEL_26;
    }
  }
  uint64_t v10 = (uint64_t)v11;
LABEL_26:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double result = sub_8D7730(result[2], (uint64_t)&qword_2580A70);
  uint64_t v13 = (_OWORD *)a2[2];
  uint64_t v14 = a2[3];
  v32[0] = *v13;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v15 = (v14 - (uint64_t)v13) >> 4;
  if (v15 != 1)
  {
    uint64_t v16 = (uint64_t)result;
    uint64_t v17 = 0;
    uint64_t v18 = 1;
    do
    {
      uint64_t v20 = a2[2];
      int v21 = *(_DWORD *)(v20 + v17 + 8);
      long long v29 = *(_OWORD *)(v20 + v17 + 16);
      int v22 = DWORD2(v29) - v21;
      if (DWORD2(v29) - v21 < 0) {
        v30 += (int)fabs((double)v22);
      }
      else {
        v31 += v22;
      }
      uint64_t v23 = (a2[3] - v20) >> 4;
      ++v18;
      if ((void)v29 - *(void *)&v32[0] >= v10 || v18 == v23)
      {
        sub_5F3D48((uint64_t)v28, v16);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA28, (uint64_t *)v32, &v27);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA40, (uint64_t *)&v29, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)&qword_257EAA0, &v31, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)byte_257EAB8, &v30, &v27);
        double v25 = *(void **)(a3 + 8);
        if ((unint64_t)v25 >= *(void *)(a3 + 16))
        {
          int v19 = sub_5C4F34((void **)a3, v32, (uint64_t *)&v29, (uint64_t)v28);
        }
        else
        {
          uint64_t v26 = v29;
          *double v25 = *(void *)&v32[0];
          v25[1] = v26;
          sub_4F58AC((uint64_t)(v25 + 2), (uint64_t)v28);
          int v19 = (char *)(v25 + 22);
          *(void *)(a3 + 8) = v25 + 22;
        }
        *(void *)(a3 + 8) = v19;
        uint64_t v31 = 0;
        *(void *)&v32[0] = v29;
        DWORD2(v32[0]) = DWORD2(v29);
        uint64_t v30 = 0;
        double result = (uint64_t *)sub_4D4B58((uint64_t)v28);
      }
      v17 += 16;
    }
    while (v15 != v18);
  }
  return result;
}

void sub_5C1944(_Unwind_Exception *a1)
{
  sub_591FF0(v1);
  _Unwind_Resume(a1);
}

void sub_5C1988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t *)va);
  sub_591FF0(v3);
  _Unwind_Resume(a1);
}

void sub_5C19A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_5C0734(a1, v4, (uint64_t)v10);
      sub_5BED44((uint64_t)(v4 + 1461), (uint64_t)v10);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      sub_4D4B58((uint64_t)&v15);
      int v6 = (char *)v13;
      if (v13)
      {
        int v7 = v14;
        uint64_t v8 = v13;
        if (v14 != v13)
        {
          do
          {
            unint64_t v9 = v7 - 176;
            sub_4D4B58((uint64_t)(v7 - 160));
            int v7 = v9;
          }
          while (v9 != v6);
          uint64_t v8 = v13;
        }
        uint64_t v14 = v6;
        operator delete(v8);
      }
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_5C1AA8(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B9800;
  strcpy((char *)__p, "minimum_visible_range_offset_m");
  *(_DWORD *)a1 = 100 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v8 = xmmword_20B9A60;
  strcpy((char *)__p, "enable_same_minimum_visible_range_for_all_routes");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 4) = v4;
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91B0;
  strcpy((char *)__p, "segment_descriptions_max_num");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 8) = v5;
  long long __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "segment_description_min_length_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  sub_468394(a1 + 24, a2);
  return a1;
}

void sub_5C1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C1C6C(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_aggregation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "flat_max_slope");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "aggregation_slope_factor");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "aggregation_slope_relative_threshold");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "aggregation_severity_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v10;
  sub_468024(a1 + 40, a3);
  sub_468394(a1 + 56, a3);
  sub_46858C(a1 + 72, a3);
  return a1;
}

void sub_5C1E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_5C1E9C(double *a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)__p, "climb_distance_threshold_meters");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *a1 = NAN;
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B91B0;
  strcpy((char *)__p, "uphill_downhill_min_fraction");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[1] = v8;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B9280;
  strcpy((char *)__p, "mostly_flat_to_gentle_min_fraction");
  double v9 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[2] = v9;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B93A0;
  strcpy((char *)__p, "restricted_observation_min_fraction");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[3] = v10;
  return a1;
}

void sub_5C2110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C2138(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_elevation_info");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "prefer_curated_elevation_gain_loss");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_profile");
  double v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C1AA8(a1 + 8, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "elevation_observation");
  double v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C1C6C(a1 + 48, v9, a3);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_summary");
  double v10 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C1E9C((double *)(a1 + 240), v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5C230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_5C2338@<X0>(double *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)result + 80))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    double v5 = (_DWORD *)*a2;
    uint64_t v6 = a2[1] - *a2;
    if (v6)
    {
      BOOL v7 = result;
      unint64_t v8 = 0;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
      double v10 = result + 20;
      double v11 = result + 27;
      do
      {
        uint64_t v12 = (long long *)&v5[12 * v8];
        long long v14 = v12[1];
        long long v13 = v12[2];
        long long v55 = *v12;
        long long v56 = v14;
        long long v57 = v13;
        double v15 = *((double *)&v55 + 1);
        if (*(double *)&v55 <= 0.0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v10;
        }
        unint64_t v17 = v8 + 1;
        int v18 = DWORD1(v56);
        if (v8 + 1 > v9) {
          unint64_t v19 = v8 + 1;
        }
        else {
          unint64_t v19 = v9;
        }
        if (v8 + 1 < v9 && DWORD2(v57) == v5[12 * v17 + 10])
        {
          double v20 = fabs(*((double *)&v55 + 1));
          double v21 = fabs(*(double *)&v55);
          uint64_t v22 = v57;
          int v23 = v56;
          uint64_t v24 = (uint64_t)&v5[12 * v8 + 17];
          unint64_t v25 = v19 - 2;
          double v26 = *(double *)&v55;
          while (1)
          {
            double v27 = *(double *)(v24 - 20);
            if (*(double *)&v55 > 0.0 != v27 > 0.0) {
              goto LABEL_45;
            }
            double v28 = v7[11];
            if (v20 <= v28) {
              goto LABEL_45;
            }
            double v29 = *(double *)(v24 - 12);
            double v30 = fabs(v29);
            if (v30 <= v28) {
              goto LABEL_45;
            }
            int v31 = *(_DWORD *)(v24 - 4);
            if (v23 <= v31) {
              int v32 = *(_DWORD *)(v24 - 4);
            }
            else {
              int v32 = v23;
            }
            unsigned int v33 = v16;
            if (v32 != 1)
            {
              if (v32 == 3)
              {
                unsigned int v33 = v16 + 2;
              }
              else
              {
                unsigned int v33 = v16 + 1;
                if (v32 != 2)
                {
                  double v34 = 1.79769313e308;
                  goto LABEL_25;
                }
              }
            }
            double v34 = *v33 * v7[14];
LABEL_25:
            double v35 = fabs(v26);
            double v36 = v7[13];
            if (v36 >= v35 * v7[12]) {
              double v36 = v35 * v7[12];
            }
            double v37 = fabs(v27);
            if (v23 != v31)
            {
              double v38 = vabdd_f64(v15, v29);
              BOOL v39 = vabdd_f64(v26, v27) > v36 && v38 > v36;
              if (v39 && (v23 >= v31 || v21 < v34) && (v31 >= v23 || v37 < v34)) {
                goto LABEL_45;
              }
            }
            if (v37 > v35) {
              double v26 = *(double *)(v24 - 20);
            }
            if (v30 < fabs(v15)) {
              double v15 = *(double *)(v24 - 12);
            }
            LODWORD(v56) = v32;
            v18 += *(_DWORD *)v24;
            DWORD1(v56) = v18;
            v22 += *(void *)(v24 + 12);
            *(void *)&long long v57 = v22;
            if (v25 == v8)
            {
              unint64_t v8 = v17;
              goto LABEL_45;
            }
            ++v8;
            int v40 = *(_DWORD *)(v24 + 68);
            v24 += 48;
            ++v17;
            int v23 = v32;
            if (DWORD2(v57) != v40) {
              goto LABEL_45;
            }
          }
        }
        double v26 = *(double *)&v55;
LABEL_45:
        *(double *)&long long v55 = v26;
        *((double *)&v55 + 1) = v15;
        if (v26 < 0.0) {
          uint64_t v41 = v11;
        }
        else {
          uint64_t v41 = v10;
        }
        double v42 = fabs(v26);
        if (v42 >= v41[2])
        {
          int v50 = 3;
        }
        else
        {
          if (v42 < v41[1])
          {
            if (v42 >= *v41)
            {
              double v44 = v41[5];
              uint64_t v43 = v41 + 5;
              double v45 = v42 * *(v43 - 2) + *(v43 - 1);
              double v58 = v45;
              unint64_t v46 = v43 + 1;
              double v47 = v43[1];
              if (v44 >= v45) {
                uint64_t v43 = &v58;
              }
              if (v45 < v47) {
                uint64_t v43 = v46;
              }
              double v48 = *v43 * 100.0;
              if (v48 >= 0.0)
              {
                if (v48 < 4.50359963e15)
                {
                  uint64_t v49 = (uint64_t)(v48 + v48) + 1;
                  goto LABEL_64;
                }
              }
              else if (v48 > -4.50359963e15)
              {
                uint64_t v49 = (uint64_t)(v48 + v48);
                if (v49 >= 1) {
                  --v49;
                }
LABEL_64:
                double v48 = (double)(v49 >> 1);
              }
              if ((int)fabs((double)v18) >= (int)v48)
              {
                int v50 = 1;
                goto LABEL_68;
              }
            }
            int v50 = 0;
            goto LABEL_68;
          }
          int v50 = 2;
        }
LABEL_68:
        LODWORD(v56) = v50;
        double result = (double *)sub_408220((char **)a3, &v55);
        ++v8;
        double v5 = (_DWORD *)*a2;
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4);
      }
      while (v8 < v9);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v51 = (_DWORD *)*a2;
    int64_t v52 = a2[1] - *a2;
    if (v52)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v52 >> 4) >= 0x555555555555556) {
        sub_2E00();
      }
      uint64_t v53 = (char *)operator new(v52);
      *(void *)a3 = v53;
      *(void *)(a3 + 8) = v53;
      unint64_t v54 = &v53[16 * (v52 >> 4)];
      *(void *)(a3 + 16) = v54;
      double result = (double *)memcpy(v53, v51, v52 - 4);
      *(void *)(a3 + 8) = v54;
    }
  }
  return result;
}

void sub_5C2704(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5C2724(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = a3;
  a1[1] = a2;
  sub_6892E8(a4, 4u, *(_DWORD *)(a3 + 1000), a1 + 2);
  HIBYTE(v31[2]) = 20;
  strcpy((char *)v31, "ElevationInfoBuilder");
  double v28 = 0;
  double v29 = 0;
  uint64_t v30 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)v31, (uint64_t *)&v28);
  sub_3CB5E0(v6, (uint64_t)v32);
  char v25 = 14;
  uint64_t v23 = 0;
  strcpy((char *)v24, "RouteElevation");
  double v21 = 0;
  uint64_t v22 = 0;
  BOOL v7 = sub_374CDC(a2, (uint64_t)v24, (uint64_t *)&v21);
  sub_3CB5E0(v7, (uint64_t)__p);
  sub_5C45E4((uint64_t)(a1 + 4), v32, __p);
  unint64_t v8 = v27;
  if (v27)
  {
    do
    {
      long long v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      unint64_t v8 = v13;
    }
    while (v13);
  }
  unint64_t v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  double v10 = (void **)v21;
  if (v21)
  {
    double v11 = v22;
    uint64_t v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v12);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  long long v14 = v33;
  if (v33)
  {
    do
    {
      unint64_t v19 = *(char **)v14;
      sub_57AC8((uint64_t *)v14 + 5);
      if (v14[39] < 0) {
        operator delete(*((void **)v14 + 2));
      }
      operator delete(v14);
      long long v14 = v19;
    }
    while (v19);
  }
  double v15 = (void *)v32[0];
  v32[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = (void **)v28;
  if (v28)
  {
    unint64_t v17 = v29;
    int v18 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      int v18 = v28;
    }
    double v29 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v31[2]) < 0) {
    operator delete(v31[0]);
  }
  return a1;
}

void sub_5C2968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  sub_5450C((uint64_t)&a18);
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_5450C(v24 - 72);
  sub_1A668(&a23);
  if (*(char *)(v24 - 73) < 0) {
    operator delete(*(void **)(v24 - 96));
  }
  sub_14A84(v23);
  _Unwind_Resume(a1);
}

void *sub_5C29CC(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)sub_374EF4(a2);

  return sub_5C2724(a1, (uint64_t)a2, a3, v6);
}

void sub_5C2A24(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 32) || !sub_470ADC(a2))
  {
    *(_OWORD *)(a3 + 248) = 0u;
    *(_OWORD *)(a3 + 232) = 0u;
    *(_OWORD *)(a3 + 216) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    *(void *)(a3 + 240) = 0;
    *(_DWORD *)(a3 + 256) = 0;
    *(void *)(a3 + 248) = 0;
    *(unsigned char *)(a3 + 260) = 1;
    return;
  }
  uint64_t v6 = sub_3750CC(*(void **)(a1 + 8));
  sub_4671C4(a2, a1 + 120, (_DWORD *)(a1 + 136), v6, (uint64_t)v55);
  if (!sub_4651D0(v55))
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0x8000000080000000;
    *(void *)(a3 + 48) = 0;
    unint64_t v8 = (void **)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_5F3B34(a3 + 72);
    *(void *)(a3 + 232) = 0;
    unint64_t v9 = (void **)(a3 + 232);
    *(void *)(a3 + 253) = 0;
    *(void *)(a3 + 240) = 0;
    *(void *)(a3 + 248) = 0;
    sub_5C2FE0((uint64_t *)a1, (uint64_t *)v55, (uint64_t)&v48);
    *(_OWORD *)a3 = v48;
    double v10 = *(void **)(a3 + 16);
    if (v10)
    {
      *(void *)(a3 + 24) = v10;
      operator delete(v10);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
    }
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v49;
    uint64_t v11 = v50;
    uint64_t v12 = v51;
    v49[1] = 0;
    uint64_t v50 = 0;
    v49[0] = 0;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v12;
    uint64_t v13 = *(void *)(a3 + 48);
    if (v13)
    {
      uint64_t v14 = *(void *)(a3 + 56);
      double v15 = *(void **)(a3 + 48);
      if (v14 != v13)
      {
        do
        {
          uint64_t v16 = v14 - 176;
          sub_4D4B58(v14 - 160);
          uint64_t v14 = v16;
        }
        while (v16 != v13);
        double v15 = *v8;
      }
      *(void *)(a3 + 56) = v13;
      operator delete(v15);
      *unint64_t v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = *(_OWORD *)__p;
    *(void *)(a3 + 64) = v53;
    __p[1] = 0;
    uint64_t v53 = 0;
    __p[0] = 0;
    sub_4D90B4(a3 + 72, (uint64_t)v54);
    sub_4D4B58((uint64_t)v54);
    unint64_t v17 = (char *)__p[0];
    if (__p[0])
    {
      int v18 = (char *)__p[1];
      unint64_t v19 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          double v20 = v18 - 176;
          sub_4D4B58((uint64_t)(v18 - 160));
          int v18 = v20;
        }
        while (v20 != v17);
        unint64_t v19 = __p[0];
      }
      __p[1] = v17;
      operator delete(v19);
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    sub_5C338C(a1, a2, v55, (uint64_t)&v48);
    double v21 = *v9;
    if (*v9)
    {
      *(void *)(a3 + 240) = v21;
      operator delete(v21);
      *unint64_t v9 = 0;
      *(void *)(a3 + 240) = 0;
      *(void *)(a3 + 248) = 0;
    }
    *(_OWORD *)(a3 + 232) = v48;
    *(void **)(a3 + 248) = v49[0];
    *(_DWORD *)(a3 + 256) = sub_5C3654(a1, (uint64_t *)(a3 + 232), (void *)a3);
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v22 = *(void *)(a3 + 24);
    unint64_t v24 = 0x7FFFFFFF7FFFFFFFLL;
    if (v23 != v22 && *(void *)a3 != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a3 + 8) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = v23 + 16;
      if (v23 + 16 == v22)
      {
        uint64_t v29 = *(void *)(a3 + 16);
        uint64_t v25 = v29;
      }
      else
      {
        int v26 = *(_DWORD *)(v23 + 24);
        int v27 = *(_DWORD *)(v23 + 8);
        BOOL v28 = v26 < v27;
        if (v26 >= v27) {
          uint64_t v29 = *(void *)(a3 + 16);
        }
        else {
          uint64_t v29 = v23 + 16;
        }
        if (v28) {
          uint64_t v25 = *(void *)(a3 + 16);
        }
        uint64_t v30 = v23 + 32;
        if (v30 != v22)
        {
          while (1)
          {
            uint64_t v31 = v30 + 16;
            if (v30 + 16 == v22) {
              break;
            }
            int v32 = *(_DWORD *)(v30 + 24);
            int v33 = *(_DWORD *)(v30 + 8);
            BOOL v34 = v32 < v33;
            if (v32 >= v33) {
              int v35 = *(_DWORD *)(v30 + 8);
            }
            else {
              int v35 = *(_DWORD *)(v30 + 24);
            }
            if (v32 >= v33) {
              uint64_t v36 = v30;
            }
            else {
              uint64_t v36 = v30 + 16;
            }
            if (v32 <= v33) {
              int v32 = *(_DWORD *)(v30 + 8);
            }
            if (v34) {
              uint64_t v31 = v30;
            }
            if (v35 < *(_DWORD *)(v29 + 8)) {
              uint64_t v29 = v36;
            }
            if (v32 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v31;
            }
            v30 += 32;
            if (v30 == v22) {
              goto LABEL_60;
            }
          }
          int v37 = *(_DWORD *)(v30 + 8);
          if (v37 >= *(_DWORD *)(v29 + 8))
          {
            if (v37 >= *(_DWORD *)(v25 + 8)) {
              uint64_t v25 = v30;
            }
          }
          else
          {
            uint64_t v29 = v30;
          }
        }
      }
LABEL_60:
      int v38 = *(_DWORD *)(v29 + 8);
      int v39 = *(_DWORD *)(v25 + 8);
      int v40 = *(_DWORD *)(a1 + 40);
      int v41 = v39 - v40;
      if (v38 < v39 - v40) {
        int v41 = v38;
      }
      int v42 = v40 + v38;
      if (v42 > v39) {
        int v39 = v42;
      }
      LODWORD(v43) = v38 & (v38 >> 31);
      if ((int)v43 <= v41) {
        uint64_t v43 = v41;
      }
      else {
        uint64_t v43 = v43;
      }
      unint64_t v24 = v43 | ((unint64_t)(v39 - v41 + v43) << 32);
    }
    *(void *)(a3 + 40) = v24;
    sub_5C3938((uint64_t *)a1, (void *)a3, (uint64_t)&v48);
    double v44 = (char *)*v8;
    if (*v8)
    {
      double v45 = *(char **)(a3 + 56);
      unint64_t v46 = *v8;
      if (v45 != v44)
      {
        do
        {
          double v47 = v45 - 176;
          sub_4D4B58((uint64_t)(v45 - 160));
          double v45 = v47;
        }
        while (v47 != v44);
        unint64_t v46 = *v8;
      }
      *(void *)(a3 + 56) = v44;
      operator delete(v46);
      *unint64_t v8 = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(_OWORD *)(a3 + 48) = v48;
    *(void **)(a3 + 64) = v49[0];
    BOOL v7 = v58;
    if (!v58) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(_DWORD *)(a3 + 256) = 0;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 260) = 1;
  BOOL v7 = v58;
  if (v58) {
LABEL_5:
  }
    operator delete(v7);
LABEL_6:
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
}

void sub_5C2F18(_Unwind_Exception *a1)
{
  sub_591A38(v1);
  sub_46645C(v2 - 152);
  _Unwind_Resume(a1);
}

void sub_5C2F40(_Unwind_Exception *a1)
{
  if (*v3) {
    sub_20A9FC8(v1, *v3);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
    sub_46645C(v4 - 152);
    _Unwind_Resume(a1);
  }
  sub_46645C(v4 - 152);
  _Unwind_Resume(a1);
}

void sub_5C2FB0(_Unwind_Exception *exception_object)
{
  if (*v3) {
    sub_20A9F74(v1, *v3);
  }
  double v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_5C2FE0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_5BEFB4((uint64_t)a1, *(void *)(*a1 + 1528));
  uint64_t v8 = v6;
  if (v7 != 0x7FFFFFFFFFFFFFFFLL && v6 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_28;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = (a2[1] - *a2) >> 4;
  uint64_t v12 = v11 - 1;
  if (v11 == 1)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 8);
    if (v11 == 2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
      double v21 = (uint64_t *)(v10 + 40);
      unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v23 = *(v21 - 2);
        uint64_t v25 = v23 - v13;
        BOOL v24 = v23 < v13;
        uint64_t v26 = *v21;
        v21 += 4;
        uint64_t v13 = v26;
        uint64_t v27 = v26 - v23;
        if (v24) {
          uint64_t v28 = v25;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v27 < 0) {
          uint64_t v29 = v27;
        }
        else {
          uint64_t v29 = 0;
        }
        v19 -= v28;
        v20 -= v29;
        v17 += v25 & ~(v25 >> 63);
        v18 += v27 & ~(v27 >> 63);
        v22 -= 2;
      }
      while (v22);
      uint64_t v16 = v20 + v19;
      uint64_t v15 = v18 + v17;
      if (v12 == v14) {
        goto LABEL_24;
      }
    }
    unint64_t v30 = ~v14 + v11;
    uint64_t v31 = (uint64_t *)(v10 + 16 * v14 + 24);
    do
    {
      uint64_t v33 = *v31;
      v31 += 2;
      uint64_t v32 = v33;
      BOOL v34 = __OFSUB__(v33, v13);
      uint64_t v35 = v33 - v13;
      if (v35 < 0 != v34) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      v16 -= v36;
      v15 += v35 & ~(v35 >> 63);
      uint64_t v13 = v32;
      --v30;
    }
    while (v30);
  }
LABEL_24:
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = v15;
  }
  if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = v16;
  }
LABEL_28:
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0x8000000080000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  sub_5F3B34(a3 + 72);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v47 = 0;
  sub_466334(a2, (uint64_t)(a1 + 8), __p, (uint64_t)v49, v37);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v38 = a2[1] - *a2;
  if (v38)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v41 = v38 >> 4;
    do
    {
      int v42 = (void *)sub_5BF948(v49, v40);
      if ((*v42 & v43) != 0)
      {
        uint64_t v44 = *a2 + v39;
        __p[0] = *(void **)v44;
        int v48 = *(void *)(v44 + 8);
        sub_5BFB5C(a3 + 16, __p, &v48);
      }
      ++v40;
      v39 += 16;
    }
    while (v41 != v40);
  }
  double v45 = sub_8D7730(a1[2], (uint64_t)&qword_2580A58);
  sub_5F3D48((uint64_t)__p, (uint64_t)v45);
  sub_4D90B4(a3 + 72, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  sub_625E4(*(std::string **)(a3 + 72), (char *)&qword_257EAD0, (uint64_t)&word_257EB18);
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{gain}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)a3, (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v47) = 6;
  strcpy((char *)__p, "{loss}");
  sub_5F3038(&v48, 0);
  sub_5F6090((uint64_t *)(a3 + 72), (uint64_t)__p, (uint64_t *)(a3 + 8), (char *)&v48);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  if (v49[0]) {
    operator delete(v49[0]);
  }
}

void sub_5C3304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void **)(v15 - 104);
  if (v17) {
    operator delete(v17);
  }
  sub_5BE2B8(v14);
  _Unwind_Resume(a1);
}

void sub_5C338C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long __p = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v7 = a3[1] - *a3;
  if (!v7)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    uint64_t v18 = -1;
    *(void *)(a4 + 16) = 0;
LABEL_15:
    unint64_t v20 = 0;
    uint64_t v21 = 16;
    do
    {
      sub_5BFC70(a1, (uint64_t *)((char *)v40 + v21 - 16), (char *)v40 + v21, (uint64_t)&v33);
      if (HIDWORD(v34) != 0x7FFFFFFF && v35 != 0x7FFFFFFFFFFFFFFFLL)
      {
        BOOL v24 = (uint64_t *)sub_5BFE38(&__p, v20);
        uint64_t v25 = sub_470B40(a2, *v24);
        if (*(unsigned char *)(a1 + 120)
          && (uint64_t v26 = *(int **)(v25 + 8), v27 = (unsigned __int16 *)((char *)v26 - *v26), *v27 >= 0x2Fu)
          && (uint64_t v28 = v27[23]) != 0
          && ((int v29 = *((unsigned __int8 *)v26 + v28), v29 != 9) ? (v30 = v29 == 20) : (v30 = 1), v30))
        {
          int v22 = 1;
        }
        else if (!*(unsigned char *)(a1 + 121) {
               || ((unsigned int v31 = *(_DWORD *)(v25 + 4), (v31 & 0x40000000) != 0) ? (v32 = 2) : (v32 = v31 >> 31),
        }
                   sub_3F4FC8((int **)(v25 + 8), v32)))
        {
          int v22 = 0;
        }
        else
        {
          int v22 = 2;
        }
        int v36 = v22;
        sub_408220((char **)a4, &v33);
      }
      ++v20;
      v21 += 16;
    }
    while (v18 != v20);
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a3 + 3;
  uint64_t v12 = a3 + 6;
  uint64_t v13 = v7 >> 4;
  do
  {
    unint64_t v14 = (void *)sub_5BF948(v12, v10);
    if ((*v14 & v15) != 0)
    {
      sub_3BFF8((char **)&v40, (_OWORD *)(*a3 + v9));
      uint64_t v16 = (void *)sub_468B3C(v11, v10);
      sub_A4710((uint64_t)&__p, v16);
    }
    ++v10;
    v9 += 16;
  }
  while (v13 != v10);
  uint64_t v17 = (v41 - (unsigned char *)v40) >> 4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v18 = v17 - 1;
  if (v17 != 1) {
    goto LABEL_15;
  }
LABEL_7:
  sub_5C47E4((double *)a1, (void *)a4, (uint64_t)&v33);
  uint64_t v19 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v19;
    operator delete(v19);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = v33;
  *(void *)(a4 + 16) = v34;
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
}

void sub_5C35D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
    int v22 = __p;
    if (!__p)
    {
LABEL_3:
      uint64_t v23 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a18;
  if (!a18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C3654(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(v3 + 32);
    double v21 = *(double *)v3;
    switch(*(_DWORD *)(v3 + 16))
    {
      case 0:
        v13 += v20;
        break;
      case 1:
        if (v21 > 0.0)
        {
          v11 += v20;
        }
        else
        {
          v12 += v20;
          ++v6;
        }
        if (v21 > 0.0) {
          ++v5;
        }
        break;
      case 2:
        if (v21 > 0.0)
        {
          v9 += v20;
          ++v8;
        }
        else
        {
          v10 += v20;
        }
        if (v21 <= 0.0) {
          ++v7;
        }
        break;
      case 3:
        if (v21 > 0.0) {
          ++v18;
        }
        else {
          ++v17;
        }
        if (v21 <= 0.0) {
          v15 += v20;
        }
        else {
          v16 += v20;
        }
        if (*(_DWORD *)(v3 + 40)) {
          ++v19;
        }
        break;
      default:
        break;
    }
    v14 += v20;
    v3 += 48;
  }
  while (v3 != v4);
  if (v8 + v18 + v5 && *a3 > *(void *)(a1 + 272)) {
    return 14;
  }
  if (v15 + v16 < 1) {
    goto LABEL_39;
  }
  double v23 = (double)v14;
  double v24 = *(double *)(a1 + 280);
  if ((double)v16 / (double)v14 >= v24) {
    return 10;
  }
  if ((double)v15 / v23 >= v24) {
    return 11;
  }
  if (v19 == v17 + v18 && (double)(v15 + v16) / v23 < *(double *)(a1 + 296))
  {
LABEL_39:
    if (v9 + v10 < 1)
    {
      if (v11 + v12 < 1) {
        return 1;
      }
      double v26 = (double)v14;
      if ((double)v13 / (double)v14 >= *(double *)(a1 + 288))
      {
        return 1;
      }
      else
      {
        double v27 = *(double *)(a1 + 280);
        if ((double)v11 / v26 >= v27)
        {
          return 2;
        }
        else if ((double)v12 / v26 >= v27)
        {
          return 3;
        }
        else if (v5 + v6 == 1)
        {
          return 4;
        }
        else
        {
          return 5;
        }
      }
    }
    else
    {
      double v25 = *(double *)(a1 + 280);
      if ((double)v9 / (double)v14 >= v25)
      {
        return 6;
      }
      else if ((double)v10 / (double)v14 >= v25)
      {
        return 7;
      }
      else if (v7 + v8 == 1)
      {
        return 8;
      }
      else
      {
        return 9;
      }
    }
  }
  else if (v17 + v18 == 1)
  {
    return 12;
  }
  else
  {
    return 13;
  }
}

uint64_t *sub_5C3938@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[3];
  if (a2[2] == v4 || *a2 == 0x7FFFFFFFFFFFFFFFLL || a2[1] == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  uint64_t v8 = *(void *)(v4 - 16);
  unint64_t v9 = result[6];
  if (result[7] >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = result[7];
  }
  if (v9 < 2) {
    goto LABEL_26;
  }
  while (1)
  {
    double v11 = (double)v8 / (double)v9;
    if (v11 >= 0.0)
    {
      if (v11 >= 4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11) + 1;
    }
    else
    {
      if (v11 <= -4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v12 = (uint64_t)(v11 + v11);
      if (v12 >= 1) {
        --v12;
      }
    }
    double v11 = (double)(v12 >> 1);
LABEL_22:
    if (v10 <= (uint64_t)v11) {
      break;
    }
    if (--v9 < 2) {
      goto LABEL_26;
    }
  }
  uint64_t v10 = (uint64_t)v11;
LABEL_26:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double result = sub_8D7730(result[2], (uint64_t)&qword_2580A70);
  uint64_t v13 = (_OWORD *)a2[2];
  uint64_t v14 = a2[3];
  v32[0] = *v13;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v15 = (v14 - (uint64_t)v13) >> 4;
  if (v15 != 1)
  {
    uint64_t v16 = (uint64_t)result;
    uint64_t v17 = 0;
    uint64_t v18 = 1;
    do
    {
      uint64_t v20 = a2[2];
      int v21 = *(_DWORD *)(v20 + v17 + 8);
      long long v29 = *(_OWORD *)(v20 + v17 + 16);
      int v22 = DWORD2(v29) - v21;
      if (DWORD2(v29) - v21 < 0) {
        v30 += (int)fabs((double)v22);
      }
      else {
        v31 += v22;
      }
      uint64_t v23 = (a2[3] - v20) >> 4;
      ++v18;
      if ((void)v29 - *(void *)&v32[0] >= v10 || v18 == v23)
      {
        sub_5F3D48((uint64_t)v28, v16);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA28, (uint64_t *)v32, &v27);
        char v27 = 1;
        sub_5F6090(v28, (uint64_t)&qword_257EA40, (uint64_t *)&v29, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)&qword_257EAA0, &v31, &v27);
        sub_5F3038(&v27, 0);
        sub_5F6090(v28, (uint64_t)byte_257EAB8, &v30, &v27);
        double v25 = *(void **)(a3 + 8);
        if ((unint64_t)v25 >= *(void *)(a3 + 16))
        {
          int v19 = sub_5C4F34((void **)a3, v32, (uint64_t *)&v29, (uint64_t)v28);
        }
        else
        {
          uint64_t v26 = v29;
          *double v25 = *(void *)&v32[0];
          v25[1] = v26;
          sub_4F58AC((uint64_t)(v25 + 2), (uint64_t)v28);
          int v19 = (char *)(v25 + 22);
          *(void *)(a3 + 8) = v25 + 22;
        }
        *(void *)(a3 + 8) = v19;
        uint64_t v31 = 0;
        *(void *)&v32[0] = v29;
        DWORD2(v32[0]) = DWORD2(v29);
        uint64_t v30 = 0;
        double result = (uint64_t *)sub_4D4B58((uint64_t)v28);
      }
      v17 += 16;
    }
    while (v15 != v18);
  }
  return result;
}

void sub_5C3C00(_Unwind_Exception *a1)
{
  sub_591FF0(v1);
  _Unwind_Resume(a1);
}

void sub_5C3C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t *)va);
  sub_591FF0(v3);
  _Unwind_Resume(a1);
}

void sub_5C3C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_5C2A24(a1, v4, (uint64_t)v10);
      sub_5BED44((uint64_t)(v4 + 1461), (uint64_t)v10);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      sub_4D4B58((uint64_t)&v15);
      int v6 = (char *)v13;
      if (v13)
      {
        int v7 = v14;
        uint64_t v8 = v13;
        if (v14 != v13)
        {
          do
          {
            unint64_t v9 = v7 - 176;
            sub_4D4B58((uint64_t)(v7 - 160));
            int v7 = v9;
          }
          while (v9 != v6);
          uint64_t v8 = v13;
        }
        uint64_t v14 = v6;
        operator delete(v8);
      }
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

uint64_t sub_5C3D64(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = sub_5BEFB4(a1, a2);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL || v5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = sub_5C3DDC(a1, a3);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      return v7;
    }
  }
  return v6;
}

uint64_t sub_5C3DDC(uint64_t a1, void *a2)
{
  long long v38 = *(_OWORD *)(a1 + 136);
  LODWORD(v38) = 0;
  uint64_t v3 = a1 + 120;
  uint64_t v4 = sub_3750CC(*(void **)(a1 + 8));
  sub_4671C4(a2, v3, &v38, v4, (uint64_t)&v33);
  uint64_t v5 = v34 - (unsigned char *)v33;
  if ((unint64_t)(v34 - (unsigned char *)v33) < 0x20)
  {
    uint64_t v6 = 0;
    goto LABEL_21;
  }
  uint64_t v7 = v5 >> 4;
  uint64_t v8 = (v5 >> 4) - 1;
  if (v5 >> 4 == 1)
  {
    uint64_t v6 = 0;
    goto LABEL_21;
  }
  uint64_t v9 = *((void *)v33 + 1);
  if (v8 == 1)
  {
    unint64_t v10 = 0;
    uint64_t v6 = 0;
    uint64_t v11 = 0;
LABEL_16:
    unint64_t v25 = ~v10 + v7;
    uint64_t v26 = (uint64_t *)((char *)v33 + 16 * v10 + 24);
    do
    {
      uint64_t v28 = *v26;
      v26 += 2;
      uint64_t v27 = v28;
      BOOL v29 = __OFSUB__(v28, v9);
      uint64_t v30 = v28 - v9;
      if (v30 < 0 != v29) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      v11 -= v31;
      v6 += v30 & ~(v30 >> 63);
      uint64_t v9 = v27;
      --v25;
    }
    while (v25);
    goto LABEL_21;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v16 = (uint64_t *)((char *)v33 + 40);
  unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v18 = *(v16 - 2);
    uint64_t v20 = v18 - v9;
    BOOL v19 = v18 < v9;
    uint64_t v21 = *v16;
    v16 += 4;
    uint64_t v9 = v21;
    uint64_t v22 = v21 - v18;
    if (v19) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v22 < 0) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 0;
    }
    v14 -= v23;
    v15 -= v24;
    v12 += v20 & ~(v20 >> 63);
    v13 += v22 & ~(v22 >> 63);
    v17 -= 2;
  }
  while (v17);
  uint64_t v11 = v15 + v14;
  uint64_t v6 = v13 + v12;
  if (v8 != v10) {
    goto LABEL_16;
  }
LABEL_21:
  if (__p) {
    operator delete(__p);
  }
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  return v6;
}

uint64_t sub_5C3F54(uint64_t a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B9800;
  strcpy((char *)__p, "minimum_visible_range_offset_m");
  *(_DWORD *)a1 = 100 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v8 = xmmword_20B9A60;
  strcpy((char *)__p, "enable_same_minimum_visible_range_for_all_routes");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 4) = v4;
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91B0;
  strcpy((char *)__p, "segment_descriptions_max_num");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 8) = v5;
  long long __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "segment_description_min_length_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  sub_468394(a1 + 24, a2);
  return a1;
}

void sub_5C40F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C4118(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_aggregation");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "flat_max_slope");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "aggregation_slope_factor");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "aggregation_slope_relative_threshold");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "aggregation_severity_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v10;
  sub_468024(a1 + 40, a3);
  sub_468394(a1 + 56, a3);
  sub_46858C(a1 + 72, a3);
  return a1;
}

void sub_5C431C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_5C4348(double *a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)__p, "climb_distance_threshold_meters");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *a1 = NAN;
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p);
LABEL_22:
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_20B91B0;
  strcpy((char *)__p, "uphill_downhill_min_fraction");
  double v8 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[1] = v8;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B9280;
  strcpy((char *)__p, "mostly_flat_to_gentle_min_fraction");
  double v9 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[2] = v9;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B93A0;
  strcpy((char *)__p, "restricted_observation_min_fraction");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  a1[3] = v10;
  return a1;
}

void sub_5C45BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C45E4(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_elevation_info");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "prefer_curated_elevation_gain_loss");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_profile");
  double v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C3F54(a1 + 8, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "elevation_observation");
  double v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C4118(a1 + 48, v9, a3);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "elevation_summary");
  double v10 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_5C4348((double *)(a1 + 240), v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5C47B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_5C47E4@<X0>(double *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)result + 80))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    double v5 = (_DWORD *)*a2;
    uint64_t v6 = a2[1] - *a2;
    if (v6)
    {
      BOOL v7 = result;
      unint64_t v8 = 0;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
      double v10 = result + 20;
      uint64_t v11 = result + 27;
      do
      {
        uint64_t v12 = (long long *)&v5[12 * v8];
        long long v14 = v12[1];
        long long v13 = v12[2];
        long long v55 = *v12;
        long long v56 = v14;
        long long v57 = v13;
        double v15 = *((double *)&v55 + 1);
        if (*(double *)&v55 <= 0.0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v10;
        }
        unint64_t v17 = v8 + 1;
        int v18 = DWORD1(v56);
        if (v8 + 1 > v9) {
          unint64_t v19 = v8 + 1;
        }
        else {
          unint64_t v19 = v9;
        }
        if (v8 + 1 < v9 && DWORD2(v57) == v5[12 * v17 + 10])
        {
          double v20 = fabs(*((double *)&v55 + 1));
          double v21 = fabs(*(double *)&v55);
          uint64_t v22 = v57;
          int v23 = v56;
          uint64_t v24 = (uint64_t)&v5[12 * v8 + 17];
          unint64_t v25 = v19 - 2;
          double v26 = *(double *)&v55;
          while (1)
          {
            double v27 = *(double *)(v24 - 20);
            if (*(double *)&v55 > 0.0 != v27 > 0.0) {
              goto LABEL_45;
            }
            double v28 = v7[11];
            if (v20 <= v28) {
              goto LABEL_45;
            }
            double v29 = *(double *)(v24 - 12);
            double v30 = fabs(v29);
            if (v30 <= v28) {
              goto LABEL_45;
            }
            int v31 = *(_DWORD *)(v24 - 4);
            if (v23 <= v31) {
              int v32 = *(_DWORD *)(v24 - 4);
            }
            else {
              int v32 = v23;
            }
            long long v33 = v16;
            if (v32 != 1)
            {
              if (v32 == 3)
              {
                long long v33 = v16 + 2;
              }
              else
              {
                long long v33 = v16 + 1;
                if (v32 != 2)
                {
                  double v34 = 1.79769313e308;
                  goto LABEL_25;
                }
              }
            }
            double v34 = *v33 * v7[14];
LABEL_25:
            double v35 = fabs(v26);
            double v36 = v7[13];
            if (v36 >= v35 * v7[12]) {
              double v36 = v35 * v7[12];
            }
            double v37 = fabs(v27);
            if (v23 != v31)
            {
              double v38 = vabdd_f64(v15, v29);
              BOOL v39 = vabdd_f64(v26, v27) > v36 && v38 > v36;
              if (v39 && (v23 >= v31 || v21 < v34) && (v31 >= v23 || v37 < v34)) {
                goto LABEL_45;
              }
            }
            if (v37 > v35) {
              double v26 = *(double *)(v24 - 20);
            }
            if (v30 < fabs(v15)) {
              double v15 = *(double *)(v24 - 12);
            }
            LODWORD(v56) = v32;
            v18 += *(_DWORD *)v24;
            DWORD1(v56) = v18;
            v22 += *(void *)(v24 + 12);
            *(void *)&long long v57 = v22;
            if (v25 == v8)
            {
              unint64_t v8 = v17;
              goto LABEL_45;
            }
            ++v8;
            int v40 = *(_DWORD *)(v24 + 68);
            v24 += 48;
            ++v17;
            int v23 = v32;
            if (DWORD2(v57) != v40) {
              goto LABEL_45;
            }
          }
        }
        double v26 = *(double *)&v55;
LABEL_45:
        *(double *)&long long v55 = v26;
        *((double *)&v55 + 1) = v15;
        if (v26 < 0.0) {
          uint64_t v41 = v11;
        }
        else {
          uint64_t v41 = v10;
        }
        double v42 = fabs(v26);
        if (v42 >= v41[2])
        {
          int v50 = 3;
        }
        else
        {
          if (v42 < v41[1])
          {
            if (v42 >= *v41)
            {
              double v44 = v41[5];
              uint64_t v43 = v41 + 5;
              double v45 = v42 * *(v43 - 2) + *(v43 - 1);
              double v58 = v45;
              unint64_t v46 = v43 + 1;
              double v47 = v43[1];
              if (v44 >= v45) {
                uint64_t v43 = &v58;
              }
              if (v45 < v47) {
                uint64_t v43 = v46;
              }
              double v48 = *v43 * 100.0;
              if (v48 >= 0.0)
              {
                if (v48 < 4.50359963e15)
                {
                  uint64_t v49 = (uint64_t)(v48 + v48) + 1;
                  goto LABEL_64;
                }
              }
              else if (v48 > -4.50359963e15)
              {
                uint64_t v49 = (uint64_t)(v48 + v48);
                if (v49 >= 1) {
                  --v49;
                }
LABEL_64:
                double v48 = (double)(v49 >> 1);
              }
              if ((int)fabs((double)v18) >= (int)v48)
              {
                int v50 = 1;
                goto LABEL_68;
              }
            }
            int v50 = 0;
            goto LABEL_68;
          }
          int v50 = 2;
        }
LABEL_68:
        LODWORD(v56) = v50;
        double result = (double *)sub_408220((char **)a3, &v55);
        ++v8;
        double v5 = (_DWORD *)*a2;
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4);
      }
      while (v8 < v9);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v51 = (_DWORD *)*a2;
    int64_t v52 = a2[1] - *a2;
    if (v52)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v52 >> 4) >= 0x555555555555556) {
        sub_2E00();
      }
      uint64_t v53 = (char *)operator new(v52);
      *(void *)a3 = v53;
      *(void *)(a3 + 8) = v53;
      unint64_t v54 = &v53[16 * (v52 >> 4)];
      *(void *)(a3 + 16) = v54;
      double result = (double *)memcpy(v53, v51, v52 - 4);
      *(void *)(a3 + 8) = v54;
    }
  }
  return result;
}

void sub_5C4BB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C4BD0(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v13 = a2;
  double v5 = sub_4461D4(a1 + 16, a2, a3);
  if (!v5)
  {
    BOOL v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 >= 7u)
  {
    BOOL v7 = (_DWORD *)*((unsigned __int16 *)v6 + 3);
    if (v7)
    {
      BOOL v7 = (_DWORD *)((char *)v7 + (void)v5 + *(unsigned int *)((char *)v7 + (void)v5));
      if (*v7 > HIDWORD(a2)) {
        return (uint64_t)&v7[HIDWORD(a2) + 1] + v7[HIDWORD(a2) + 1];
      }
    }
LABEL_7:
    if (a3 != 1) {
      goto LABEL_8;
    }
    return 0;
  }
  BOOL v7 = 0;
  if (a3 != 1)
  {
LABEL_8:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v11 = sub_736EC(0x26u);
      sub_5C4D1C("Failed to acquire hiking tour at ", &v13, " in layer ", (const char **)&v11);
      double v10 = (void *)sub_2F404((uint64_t)exception, &v12);
    }
    return (uint64_t)&v7[HIDWORD(a2) + 1] + v7[HIDWORD(a2) + 1];
  }
  return 0;
}

void sub_5C4CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C4D1C(const char *a1, void *a2, const char *a3, const char **a4)
{
  sub_E1B4((uint64_t)v15);
  size_t v8 = strlen(a1);
  sub_188FC78(v16, (uint64_t)a1, v8);
  unint64_t v9 = sub_51960(v16, *a2);
  sub_188FC78(v9, (uint64_t)".", 1);
  std::ostream::operator<<();
  size_t v10 = strlen(a3);
  sub_188FC78(v16, (uint64_t)a3, v10);
  uint64_t v11 = *a4;
  size_t v12 = strlen(v11);
  sub_188FC78(v16, (uint64_t)v11, v12);
  std::stringbuf::str();
  *(void *)((char *)v15
  v16[0] = v13;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_5C4F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5C4F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_5C4F34(void **a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v10 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(176 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v23 = &v11[176 * v5];
  uint64_t v24 = &v11[176 * v10];
  uint64_t v12 = *a3;
  *(void *)int v23 = *a2;
  *((void *)v23 + 1) = v12;
  sub_4F58AC((uint64_t)(v23 + 16), a4);
  uint64_t v13 = v23;
  long long v14 = v23 + 176;
  uint64_t v16 = (char *)*a1;
  double v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v23;
    a1[1] = v14;
    a1[2] = v24;
  }
  else
  {
    do
    {
      *((_OWORD *)v13 - 11) = *((_OWORD *)v15 - 11);
      *((void *)v13 - 20) = 0;
      *(_OWORD *)(v13 - 152) = 0uLL;
      *((_OWORD *)v13 - 10) = *((_OWORD *)v15 - 10);
      *((void *)v13 - 18) = *((void *)v15 - 18);
      *((void *)v15 - 18) = 0;
      *((_OWORD *)v15 - 10) = 0uLL;
      *((void *)v13 - 15) = 0;
      *(_OWORD *)(v13 - 136) = 0uLL;
      *(_OWORD *)(v13 - 136) = *(_OWORD *)(v15 - 136);
      *((void *)v13 - 15) = *((void *)v15 - 15);
      *((void *)v15 - 15) = 0;
      *(_OWORD *)(v15 - 136) = 0uLL;
      *((void *)v13 - 12) = 0;
      *((_OWORD *)v13 - 7) = 0uLL;
      *((_OWORD *)v13 - 7) = *((_OWORD *)v15 - 7);
      *((void *)v13 - 12) = *((void *)v15 - 12);
      *((void *)v15 - 12) = 0;
      *((_OWORD *)v15 - 7) = 0uLL;
      *((void *)v13 - 9) = 0;
      *(_OWORD *)(v13 - 88) = 0uLL;
      *(_OWORD *)(v13 - 88) = *(_OWORD *)(v15 - 88);
      *((void *)v13 - 9) = *((void *)v15 - 9);
      *(_OWORD *)(v15 - 88) = 0uLL;
      uint64_t v17 = *((void *)v15 - 8);
      *(_OWORD *)(v15 - 72) = 0uLL;
      *((void *)v13 - 8) = v17;
      LODWORD(v17) = *((_DWORD *)v15 - 14);
      *(v13 - 52) = *(v15 - 52);
      *((_DWORD *)v13 - 14) = v17;
      long long v18 = *((_OWORD *)v15 - 3);
      *((void *)v13 - 4) = *((void *)v15 - 4);
      *((_OWORD *)v13 - 3) = v18;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v19 = *(_OWORD *)(v15 - 24);
      *((void *)v13 - 1) = *((void *)v15 - 1);
      *(_OWORD *)(v13 - 24) = v19;
      v13 -= 176;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 1) = 0;
      *((void *)v15 - 3) = 0;
      v15 -= 176;
    }
    while (v15 != v16);
    double v20 = (char *)*a1;
    double v15 = (char *)a1[1];
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v24;
    if (v15 != v20)
    {
      do
      {
        double v21 = v15 - 176;
        sub_4D4B58((uint64_t)(v15 - 160));
        double v15 = v21;
      }
      while (v21 != v20);
      double v15 = v20;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v23 + 176;
}

void sub_5C51A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5C51B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5C51B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    sub_4D4B58(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_5C520C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_5C5230@<X0>(uint64_t a1@<X8>)
{
  return sub_4D4B58(a1 - 160);
}

char *sub_5C5248()
{
  byte_257CBF7 = 1;
  word_257CBE0 = 65;
  byte_257CC0F = 1;
  word_257CBF8 = 65;
  byte_257CC27 = 8;
  strcpy((char *)&qword_257CC10, "any_mode");
  byte_257CC3F = 7;
  strcpy((char *)&dword_257CC28, "cycling");
  byte_257CC57 = 7;
  strcpy((char *)&dword_257CC40, "driving");
  byte_257CC6F = 7;
  strcpy((char *)&dword_257CC58, "walking");
  strcpy(&byte_257CC87, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_257CC70, "\x1B\\toi=lhp\\"");
  byte_257CC9F = 11;
  qword_257CCA0 = (uint64_t)operator new(0x19uLL);
  long long v284 = xmmword_20B9250;
  unk_257CCA8 = xmmword_20B9250;
  strcpy((char *)qword_257CCA0, "\x1B\\toi=x-sampa-internal\\"");
  byte_257CCCF = 13;
  strcpy((char *)&qword_257CCB8, "\x1B\\tn=address\\"");
  strcpy(&byte_257CCE7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_257CCD0, "\x1B\\tn=nav\\"");
  byte_257CCFF = 12;
  byte_257CD17 = 7;
  strcpy((char *)&dword_257CD00, "\x1B\\lang=");
  byte_257CD2F = 1;
  word_257CD18 = 92;
  byte_257CD47 = 4;
  strcpy((char *)&qword_257CD30, "DEV:");
  byte_257CD5F = 8;
  strcpy((char *)&qword_257CD48, "Continue");
  byte_257CD77 = 11;
  strcpy((char *)&qword_257CD60, "Start_Route");
  byte_257CD8F = 14;
  strcpy((char *)&qword_257CD78, "Continue_Route");
  byte_257CDA7 = 12;
  strcpy((char *)&qword_257CD90, "Resume_Route");
  byte_257CDBF = 18;
  strcpy((char *)&xmmword_257CDA8, "Start_Route_U_Turn");
  byte_257CDD7 = 7;
  strcpy((char *)&dword_257CDC0, "_U_Turn");
  qword_257CDE8 = 0x1300000000000000;
  dword_257CDE0 = 1702131055;
  qword_257CDD8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_257CDE4 + 3) = 1852994900;
  dword_257CDE4 = 1415533919;
  HIDWORD(qword_257CE00) = 352321536;
  strcpy((char *)&qword_257CDF0, "Continue_Route_U");
  *(_DWORD *)((char *)&qword_257CE00 + 1) = 1852994900;
  strcpy(&byte_257CE1F, "\tRight_Turn");
  strcpy((char *)&qword_257CE08, "Left_Turn");
  strcpy(&byte_257CE37, "\nLeft_Turn_At_End");
  byte_257CE4F = 16;
  byte_257CE67 = 17;
  strcpy((char *)&xmmword_257CE50, "Right_Turn_At_End");
  byte_257CE7F = 15;
  strcpy((char *)&qword_257CE68, "Sharp_Left_Turn");
  byte_257CE97 = 16;
  strcpy((char *)&xmmword_257CE80, "Sharp_Right_Turn");
  byte_257CEAF = 16;
  strcpy((char *)&xmmword_257CE98, "Slight_Left_Turn");
  byte_257CEC7 = 17;
  strcpy((char *)&xmmword_257CEB0, "Slight_Right_Turn");
  strcpy(&byte_257CEDF, "\tKeep_Right");
  strcpy((char *)&qword_257CEC8, "Keep_Left");
  strcpy(&byte_257CEF7, "\nU_Turn");
  byte_257CF0F = 6;
  byte_257CF27 = 14;
  strcpy((char *)&qword_257CF10, "Walking_U_Turn");
  byte_257CF3F = 20;
  strcpy((char *)&xmmword_257CF28, "U_Turn_When_Possible");
  byte_257CF57 = 20;
  strcpy((char *)&xmmword_257CF40, "U_Turn_At_Roundabout");
  byte_257CF6F = 11;
  strcpy((char *)&qword_257CF58, "Enter_Ferry");
  strcpy(&byte_257CF87, "\nChange_Ferry");
  strcpy((char *)&qword_257CF70, "Exit_Ferry");
  strcpy((char *)&xmmword_257CFA0, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_257CFB8, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_257CFD0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_257CFE8, "End_Of_Navigation");
  strcpy((char *)&xmmword_257D000, "End_Of_Navigation");
  strcpy((char *)&qword_257D018, "Destination");
  strcpy((char *)&xmmword_257D030, "Destination_On_left");
  strcpy((char *)&xmmword_257D048, "Destination_On_Right");
  strcpy((char *)&xmmword_257D090, "First_Stop_On_Right");
  strcpy((char *)&xmmword_257D0D8, "Next_Stop_On_Right");
  byte_257CF9F = 12;
  byte_257CFB7 = 21;
  byte_257CFCF = 20;
  strcpy((char *)&xmmword_257D108, "Waypoint_Stop_On_Left");
  byte_257CFE7 = 22;
  byte_257CFFF = 17;
  byte_257D017 = 17;
  byte_257D02F = 11;
  byte_257D047 = 19;
  byte_257D05F = 20;
  strcpy(&byte_257D077, "\nFirst_Stop_On_left");
  *(void *)&v271[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_257D060, "First_Stop");
  byte_257D08F = 18;
  byte_257D0A7 = 19;
  strcpy(&byte_257D0BF, "\tNext_Stop_On_left");
  strcpy((char *)&qword_257D0F0, "Waypoint_Stop");
  strcpy((char *)&xmmword_257D120, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_257D138, "Roundabout_");
  *(void *)&long long v267 = *(void *)"Next_Stop";
  strcpy((char *)&qword_257D0A8, "Next_Stop");
  byte_257D0D7 = 17;
  byte_257D0EF = 18;
  byte_257D107 = 13;
  byte_257D11F = 21;
  byte_257D137 = 22;
  byte_257D14F = 11;
  byte_257D167 = 16;
  strcpy((char *)&xmmword_257D150, "Enter_Roundabout");
  qword_257D168 = (uint64_t)operator new(0x20uLL);
  long long v283 = xmmword_20B91C0;
  xmmword_257D170 = xmmword_20B91C0;
  strcpy((char *)qword_257D168, "Walking_Enter_Roundabout");
  byte_257D197 = 16;
  strcpy((char *)&xmmword_257D180, "Leave_Roundabout");
  byte_257D1AF = 21;
  strcpy((char *)&xmmword_257D198, "Roundabout_First_Exit");
  byte_257D1C7 = 22;
  strcpy((char *)&xmmword_257D1B0, "Roundabout_Second_Exit");
  byte_257D1DF = 21;
  strcpy((char *)&xmmword_257D1C8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_257D1E0, "Roundabout_Fourth_Exit");
  HIBYTE(word_257D1F6) = 22;
  byte_257D20F = 21;
  strcpy((char *)&xmmword_257D1F8, "Roundabout_Fifth_Exit");
  byte_257D227 = 21;
  strcpy((char *)&xmmword_257D210, "Roundabout_Sixth_Exit");
  qword_257D228 = (uint64_t)operator new(0x19uLL);
  xmmword_257D230 = xmmword_20B9250;
  strcpy((char *)qword_257D228, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_257D240, "Roundabout_Eighth_Exit");
  HIBYTE(word_257D256) = 22;
  byte_257D26F = 21;
  strcpy((char *)&xmmword_257D258, "Roundabout_Ninth_Exit");
  byte_257D287 = 21;
  strcpy((char *)&xmmword_257D270, "Roundabout_Tenth_Exit");
  qword_257D288 = (uint64_t)operator new(0x20uLL);
  xmmword_257D290 = xmmword_20B91C0;
  strcpy((char *)qword_257D288, "Roundabout_Eleventh_Exit");
  qword_257D2A0 = (uint64_t)operator new(0x19uLL);
  unk_257D2A8 = xmmword_20B9250;
  strcpy((char *)qword_257D2A0, "Roundabout_Twelfth_Exit");
  qword_257D2B8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B5EB0;
  xmmword_257D2C0 = xmmword_20B5EB0;
  strcpy((char *)qword_257D2B8, "Roundabout_Thirteenth_Exit");
  qword_257D2D0 = (uint64_t)operator new(0x20uLL);
  unk_257D2D8 = xmmword_20B5EB0;
  strcpy((char *)qword_257D2D0, "Roundabout_Fourteenth_Exit");
  qword_257D2E8 = (uint64_t)operator new(0x20uLL);
  long long v282 = xmmword_20B8870;
  xmmword_257D2F0 = xmmword_20B8870;
  strcpy((char *)qword_257D2E8, "Roundabout_Fifteenth_Exit");
  qword_257D300 = (uint64_t)operator new(0x20uLL);
  unk_257D308 = xmmword_20B8870;
  strcpy((char *)qword_257D300, "Roundabout_Sixteenth_Exit");
  qword_257D318 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91A0;
  xmmword_257D320 = xmmword_20B91A0;
  strcpy((char *)qword_257D318, "Roundabout_Seventeenth_Exit");
  qword_257D330 = (uint64_t)operator new(0x20uLL);
  unk_257D338 = xmmword_20B5EB0;
  strcpy((char *)qword_257D330, "Roundabout_Eighteenth_Exit");
  qword_257D348 = (uint64_t)operator new(0x20uLL);
  xmmword_257D350 = xmmword_20B5EB0;
  strcpy((char *)qword_257D348, "Roundabout_Nineteenth_Exit");
  byte_257D377 = 8;
  strcpy((char *)&qword_257D360, "Off_Ramp");
  byte_257D38F = 16;
  strcpy((char *)&xmmword_257D378, "Off_Ramp_On_Left");
  byte_257D3A7 = 17;
  strcpy((char *)&xmmword_257D390, "Off_Ramp_On_Right");
  byte_257D3BF = 14;
  strcpy((char *)&qword_257D3A8, "Change_Highway");
  strcpy((char *)&xmmword_257D3C0, "Change_Highway_On_Left");
  HIBYTE(word_257D3D6) = 22;
  qword_257D3D8 = (uint64_t)operator new(0x19uLL);
  xmmword_257D3E0 = xmmword_20B9250;
  strcpy((char *)qword_257D3D8, "Change_Highway_On_Right");
  byte_257D407 = 5;
  dword_257D3F0 = 1735550285;
  byte_257D3F4 = 101;
  byte_257D3F5 = 0;
  byte_257D41F = 12;
  strcpy((char *)&qword_257D408, "Enter_Detour");
  byte_257D437 = 11;
  strcpy((char *)&qword_257D420, "Exit_Detour");
  byte_257D44F = 18;
  strcpy((char *)&xmmword_257D438, "Walking_Turnaround");
  qword_257D450 = (uint64_t)operator new(0x19uLL);
  unk_257D458 = xmmword_20B9250;
  strcpy((char *)qword_257D450, "Walking_Turnaround_Sign");
  byte_257D47F = 19;
  strcpy((char *)&xmmword_257D468, "Distance_Title_List");
  qword_257D480 = (uint64_t)operator new(0x19uLL);
  unk_257D488 = xmmword_20B9250;
  long long v273 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_257D480, "Cross_The_Street_Spoken");
  *(void *)&v271[1] = *(void *)"t_Spoken";
  byte_257D4AF = 19;
  strcpy((char *)&xmmword_257D498, "Arrival_Charge_List");
  byte_257D4C7 = 15;
  strcpy((char *)&qword_257D4B0, "Charge_At_Start");
  strcpy(&byte_257D4DF, "\tPass_Street");
  strcpy((char *)&qword_257D4C8, "Pass_Exit");
  byte_257D4F7 = 11;
  byte_257D50F = 17;
  strcpy((char *)&xmmword_257D4F8, "Pass_Intersection");
  strcpy(&byte_257D527, "\t_PrevExitNumber");
  strcpy((char *)&qword_257D510, "Next_Exit");
  byte_257D53F = 15;
  strcpy(&byte_257D557, "\t_PrevUTurn");
  strcpy((char *)&qword_257D540, "_PrevRoad");
  strcpy(&byte_257D56F, "\nNext_");
  byte_257D587 = 5;
  byte_257D59F = 15;
  strcpy((char *)&qword_257D588, "_At_Next_Street");
  byte_257D5B7 = 21;
  strcpy((char *)&xmmword_257D5A0, "_At_Next_Intersection");
  byte_257D5CF = 14;
  strcpy((char *)&qword_257D5B8, "Charge_Station");
  byte_257D5E7 = 15;
  strcpy((char *)&qword_257D5D0, "_Charge_Station");
  BYTE1(qword_257D5F8) = 0;
  WORD1(qword_257D5F8) = 25856;
  HIDWORD(qword_257D5F8) = 335544320;
  strcpy((char *)&qword_257D5E8, "_Charge_Station_");
  byte_257D617 = 8;
  strcpy((char *)&qword_257D600, "_Minimum");
  byte_257D62F = 15;
  strcpy((char *)&qword_257D618, "ExitShield_Sign");
  byte_257D647 = 8;
  strcpy((char *)&qword_257D630, "Walking_");
  byte_257D65F = 16;
  strcpy((char *)&xmmword_257D648, "Walking_Continue");
  byte_257D677 = 19;
  strcpy((char *)&xmmword_257D660, "Walking_Start_Route");
  qword_257D678 = (uint64_t)operator new(0x20uLL);
  xmmword_257D680 = xmmword_20B5EB0;
  strcpy((char *)qword_257D678, "Walking_Start_Route_U_Turn");
  byte_257D6A7 = 17;
  strcpy((char *)&xmmword_257D690, "Walking_Left_Turn");
  byte_257D6BF = 18;
  strcpy((char *)&xmmword_257D6A8, "Walking_Right_Turn");
  qword_257D6C0 = (uint64_t)operator new(0x20uLL);
  unk_257D6C8 = xmmword_20B5EB0;
  strcpy((char *)qword_257D6C0, "Walking_Turn_At_Roundabout");
  qword_257D6D8 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91B0;
  xmmword_257D6E0 = xmmword_20B91B0;
  strcpy((char *)qword_257D6D8, "Walking_U_Turn_When_Possible");
  qword_257D6F0 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9390;
  unk_257D6F8 = xmmword_20B9390;
  strcpy((char *)qword_257D6F0, "Walking_Roundabout_Exit_Continue");
  qword_257D708 = (uint64_t)operator new(0x20uLL);
  xmmword_257D710 = xmmword_20B91B0;
  strcpy((char *)qword_257D708, "Walking_Roundabout_Exit_Left");
  qword_257D720 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B8890;
  unk_257D728 = xmmword_20B8890;
  strcpy((char *)qword_257D720, "Walking_Roundabout_Exit_Right");
  qword_257D738 = (uint64_t)operator new(0x20uLL);
  xmmword_257D740 = xmmword_20B8870;
  strcpy((char *)qword_257D738, "Walking_End_Of_Navigation");
  long long v276 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_257D750 = (uint64_t)v0;
  unk_257D758 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v276;
  v0[25] = 0;
  byte_257D77F = 8;
  strcpy((char *)&qword_257D768, "Walking_");
  qword_257D780 = (uint64_t)operator new(0x19uLL);
  unk_257D788 = v284;
  strcpy((char *)qword_257D780, "Walking_Sharp_Left_Turn");
  qword_257D798 = (uint64_t)operator new(0x20uLL);
  xmmword_257D7A0 = v283;
  strcpy((char *)qword_257D798, "Walking_Sharp_Right_Turn");
  qword_257D7B0 = (uint64_t)operator new(0x20uLL);
  unk_257D7B8 = v283;
  strcpy((char *)qword_257D7B0, "Walking_Slight_Left_Turn");
  qword_257D7C8 = (uint64_t)operator new(0x20uLL);
  xmmword_257D7D0 = v282;
  strcpy((char *)qword_257D7C8, "Walking_Slight_Right_Turn");
  byte_257D7F7 = 4;
  strcpy((char *)&dword_257D7E0, "Exit");
  byte_257D80F = 4;
  strcpy((char *)&dword_257D7F8, "Road");
  byte_257D827 = 7;
  strcpy((char *)&dword_257D810, "Freeway");
  byte_257D83F = 12;
  strcpy((char *)&qword_257D828, "Intersection");
  byte_257D857 = 5;
  strcpy((char *)&dword_257D840, "Ferry");
  byte_257D86F = 11;
  strcpy((char *)&qword_257D858, "ShuttleName");
  byte_257D887 = 5;
  strcpy((char *)&dword_257D870, "Road1");
  strcpy(&byte_257D89F, "\tName");
  strcpy((char *)&qword_257D888, "Signpost1");
  byte_257D8B7 = 4;
  byte_257D8CF = 7;
  strcpy((char *)&dword_257D8B8, "Address");
  byte_257D8E7 = 7;
  strcpy((char *)&dword_257D8D0, "Shield1");
  byte_257D8FF = 13;
  strcpy((char *)&qword_257D8E8, "TowardShield1");
  byte_257D917 = 6;
  strcpy((char *)&dword_257D900, "Right_");
  byte_257D92F = 5;
  byte_257D91C = 95;
  dword_257D918 = 1952867660;
  byte_257D91D = 0;
  strcpy(&byte_257D947, "\tOn_Left_");
  strcpy((char *)&qword_257D930, "On_Right_");
  byte_257D95F = 8;
  byte_257D977 = 12;
  strcpy((char *)&qword_257D960, "ElevatorName");
  byte_257D98F = 13;
  strcpy((char *)&qword_257D978, "EscalatorName");
  strcpy(&byte_257D9A7, "\nBridgeName");
  strcpy((char *)&qword_257D990, "StairsName");
  strcpy(&byte_257D9BF, "\nTunnelName");
  strcpy(&byte_257D9D7, "\nParking");
  byte_257D9EF = 7;
  strcpy(&byte_257DA07, "\t_Escalator");
  strcpy((char *)&qword_257D9F0, "_Elevator");
  strcpy(&byte_257DA1F, "\n_ElevatorName");
  byte_257DA37 = 13;
  byte_257DA4F = 14;
  strcpy((char *)&qword_257DA38, "_EscalatorName");
  byte_257DA67 = 5;
  strcpy((char *)&qword_257DA50, "_Road");
  byte_257DA7F = 8;
  strcpy((char *)&qword_257DA68, "_Freeway");
  byte_257DA97 = 13;
  strcpy((char *)&qword_257DA80, "_Intersection");
  byte_257DAAF = 6;
  strcpy((char *)&dword_257DA98, "_Road1");
  byte_257DAC7 = 6;
  strcpy((char *)&dword_257DAB0, "_Road2");
  strcpy(&byte_257DADF, "\n_Signpost2");
  strcpy((char *)&qword_257DAC8, "_Signpost1");
  strcpy(&byte_257DAF7, "\n_Ferry");
  byte_257DB0F = 6;
  byte_257DB27 = 12;
  strcpy((char *)&qword_257DB10, "_Ferry_Ferry");
  byte_257DB3F = 12;
  strcpy((char *)&qword_257DB28, "_ShuttleName");
  qword_257DB40 = (uint64_t)operator new(0x20uLL);
  unk_257DB48 = v281;
  strcpy((char *)qword_257DB40, "_Railway_Shuttle_ShuttleName");
  byte_257DB6F = 11;
  strcpy((char *)&qword_257DB58, "_ExitNumber");
  byte_257DB87 = 5;
  dword_257DB70 = 1769489759;
  byte_257DB74 = 116;
  byte_257DB75 = 0;
  byte_257DB9F = 7;
  strcpy((char *)&dword_257DB88, "_StayOn");
  byte_257DBB7 = 7;
  strcpy((char *)&dword_257DBA0, "_Stairs");
  byte_257DBCF = 5;
  strcpy((char *)&dword_257DBB8, "_Ramp");
  byte_257DBE7 = 11;
  strcpy((char *)&qword_257DBD0, "_StairsName");
  strcpy(&byte_257DBFF, "\t_Down");
  strcpy((char *)&qword_257DBE8, "_RampName");
  byte_257DC17 = 5;
  byte_257DC2F = 3;
  dword_257DC18 = 7361887;
  byte_257DC47 = 7;
  strcpy((char *)&dword_257DC30, "_Bridge");
  byte_257DC5F = 7;
  strcpy((char *)&dword_257DC48, "_Tunnel");
  byte_257DC77 = 11;
  strcpy((char *)&qword_257DC60, "_Roundabout");
  byte_257DC8F = 6;
  strcpy((char *)&dword_257DC78, "_Cross");
  byte_257DCA7 = 8;
  strcpy((char *)&qword_257DC90, "_Parking");
  byte_257DCBF = 8;
  strcpy((char *)&qword_257DCA8, "_Shield1");
  byte_257DCD7 = 14;
  strcpy((char *)&qword_257DCC0, "_TowardShield1");
  byte_257DCEF = 8;
  strcpy((char *)&qword_257DCD8, "_Shield2");
  byte_257DD07 = 14;
  strcpy((char *)&qword_257DCF0, "_TowardShield2");
  byte_257DD1F = 11;
  strcpy((char *)&qword_257DD08, "_Direction1");
  byte_257DD37 = 11;
  strcpy((char *)&qword_257DD20, "_Direction2");
  strcpy(&byte_257DD4F, "\n_TowardDirection1");
  strcpy((char *)&qword_257DD38, "Direction1");
  byte_257DD67 = 17;
  byte_257DD7F = 17;
  strcpy((char *)&xmmword_257DD68, "_TowardDirection2");
  byte_257DD97 = 16;
  strcpy((char *)&xmmword_257DD80, "TowardDirection1");
  byte_257DDAF = 7;
  strcpy((char *)&qword_257DD98, "_Spoken");
  byte_257DDC7 = 5;
  strcpy((char *)&qword_257DDB0, "_Sign");
  byte_257DDDF = 15;
  strcpy((char *)&qword_257DDC8, "_Secondary_Sign");
  byte_257DDF7 = 5;
  byte_257DDE4 = 116;
  dword_257DDE0 = 1936280671;
  byte_257DDE5 = 0;
  byte_257DE0F = 8;
  strcpy((char *)&qword_257DDF8, "_Primary");
  qword_257DE20 = 0xF00000000000000;
  strcpy((char *)&qword_257DE10, "_Spoken_Primary");
  strcpy(&byte_257DE3F, "\n_Secondary");
  strcpy((char *)&qword_257DE28, "_Secondary");
  strcpy(&byte_257DE57, "\n_Spoken_Secondar");
  BYTE1(qword_257DE68) = 0;
  WORD1(qword_257DE68) = 0;
  HIDWORD(qword_257DE68) = 285212672;
  byte_257DE87 = 13;
  strcpy((char *)&qword_257DE70, "_To_Secondary");
  BYTE1(qword_257DE98) = 0;
  WORD1(qword_257DE98) = 0;
  HIDWORD(qword_257DE98) = 335544320;
  strcpy((char *)&dword_257DE88, "_Spoken_To_Secon");
  strcpy(&byte_257DEB7, "\t_ValidDistance");
  strcpy((char *)&qword_257DEA0, "_Distance");
  byte_257DECF = 14;
  byte_257DEE7 = 6;
  strcpy((char *)&dword_257DED0, "_Short");
  byte_257DEFF = 1;
  word_257DEE8 = 95;
  qword_257DF00 = (uint64_t)operator new(0x20uLL);
  unk_257DF08 = v283;
  strcpy((char *)qword_257DF00, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_257DF18 = (uint64_t)v1;
  xmmword_257DF20 = v284;
  *(_OWORD *)uint64_t v1 = v273;
  uint64_t v2 = *(void *)&v271[1];
  *(void *)(v1 + 15) = *(void *)&v271[1];
  v1[23] = 0;
  byte_257DF47 = 12;
  strcpy((char *)&qword_257DF30, "Chain_Spoken");
  byte_257DF5F = 15;
  strcpy((char *)&qword_257DF48, "Chain_To_Spoken");
  strcpy(&byte_257DF77, "\nThen_Spoken");
  strcpy((char *)&qword_257DF60, "And_Spoken");
  byte_257DF8F = 11;
  byte_257DFA7 = 18;
  strcpy((char *)&xmmword_257DF90, "Concatenate_Spoken");
  qword_257DFA8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9240;
  xmmword_257DFB0 = xmmword_20B9240;
  strcpy((char *)qword_257DFA8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_257DFC0 = (uint64_t)operator new(0x28uLL);
  long long v275 = xmmword_20B9260;
  unk_257DFC8 = xmmword_20B9260;
  strcpy((char *)qword_257DFC0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_257DFD8 = (uint64_t)operator new(0x40uLL);
  xmmword_257DFE0 = xmmword_20B9A90;
  strcpy((char *)qword_257DFD8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_257DFF0 = (uint64_t)operator new(0x30uLL);
  long long v269 = xmmword_20B9A40;
  unk_257DFF8 = xmmword_20B9A40;
  strcpy((char *)qword_257DFF0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_257E008 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20E12D0;
  xmmword_257E010 = xmmword_20E12D0;
  strcpy((char *)qword_257E008, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_257E020 = (uint64_t)operator new(0x28uLL);
  long long v278 = xmmword_20B9960;
  unk_257E028 = xmmword_20B9960;
  strcpy((char *)qword_257E020, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_257E038 = (uint64_t)operator new(0x28uLL);
  xmmword_257E040 = xmmword_20B93A0;
  strcpy((char *)qword_257E038, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_257E050 = (uint64_t)operator new(0x30uLL);
  long long v276 = xmmword_20E1380;
  unk_257E058 = xmmword_20E1380;
  strcpy((char *)qword_257E050, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_257E068 = (uint64_t)operator new(0x30uLL);
  xmmword_257E070 = xmmword_20B93C0;
  strcpy((char *)qword_257E068, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_257E080 = (uint64_t)operator new(0x38uLL);
  unk_257E088 = xmmword_20B9A60;
  strcpy((char *)qword_257E080, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_257E098 = (uint64_t)operator new(0x30uLL);
  xmmword_257E0A0 = xmmword_20E1380;
  strcpy((char *)qword_257E098, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_257E0B0 = (uint64_t)operator new(0x28uLL);
  unk_257E0B8 = xmmword_20B9960;
  strcpy((char *)qword_257E0B0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_257E0C8 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20B93D0;
  xmmword_257E0D0 = xmmword_20B93D0;
  strcpy((char *)qword_257E0C8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_257E0E0 = (uint64_t)operator new(0x20uLL);
  unk_257E0E8 = v279;
  strcpy((char *)qword_257E0E0, "Walking_Distance_Chain_Spoken");
  qword_257E0F8 = (uint64_t)operator new(0x20uLL);
  xmmword_257E100 = v279;
  strcpy((char *)qword_257E0F8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_257E110 = (uint64_t)v3;
  unk_257E118 = v284;
  *(_OWORD *)uint64_t v3 = v273;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_257E128 = (uint64_t)operator new(0x28uLL);
  xmmword_257E130 = v272;
  strcpy((char *)qword_257E128, "Distance_Cross_The_Street_Spoken");
  byte_257E157 = 22;
  strcpy((char *)&xmmword_257E140, "Walking_Continue_Cross");
  byte_257E16F = 14;
  strcpy((char *)&qword_257E158, "Continue_Cross");
  byte_257E187 = 5;
  strcpy((char *)&dword_257E170, "Cross");
  byte_257E19F = 19;
  strcpy((char *)&xmmword_257E188, "Cross_Street_Spoken");
  byte_257E1B7 = 17;
  strcpy((char *)&xmmword_257E1A0, "Cross_Road_Spoken");
  byte_257E1CF = 20;
  strcpy((char *)&xmmword_257E1B8, "Use_Crosswalk_Spoken");
  byte_257E1E7 = 15;
  strcpy((char *)&qword_257E1D0, "Distance_Spoken");
  byte_257E1FF = 19;
  strcpy((char *)&xmmword_257E1E8, "Distance_And_Spoken");
  byte_257E217 = 21;
  strcpy((char *)&xmmword_257E200, "Continue_Stage_Spoken");
  byte_257E22F = 13;
  qmemcpy(&qword_257E218, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_257DE20);
  if (qword_257DE20 >= 0) {
    size_t v5 = HIBYTE(qword_257DE20);
  }
  else {
    size_t v5 = unk_257DE18;
  }
  unint64_t v6 = v5 + 13;
  byte_257E225 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    qword_257E238 = v5 + 13;
    unk_257E240 = v9 | 0x8000000000000000;
    qword_257E230 = (uint64_t)v10;
    *unint64_t v10 = *(void *)"ContinueStage";
    BOOL v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_257E238) = 0;
    WORD1(qword_257E238) = 0;
    HIDWORD(qword_257E238) = 0;
    unk_257E240 = 0;
    byte_257E247 = v5 + 13;
    BOOL v7 = (char *)&qword_257E238 + 5;
    strcpy((char *)&qword_257E230, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_257DE10;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_257DE10;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_257DA67;
  if (byte_257DA67 >= 0) {
    size_t v13 = byte_257DA67;
  }
  else {
    size_t v13 = qword_257DA58;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    long long v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *long long v18 = qword_257E218;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_257E218 + 5);
    double v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_257E218 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_257E218;
    double v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    long long v19 = &qword_257DA50;
  }
  else {
    long long v19 = (uint64_t *)qword_257DA50;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    double v20 = (const std::string::value_type *)&qword_257DE10;
  }
  else {
    double v20 = (const std::string::value_type *)qword_257DE10;
  }
  double v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_257E258 = v21->__r_.__value_.__r.__words[2];
  xmmword_257E248 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_257E277 = 5;
  strcpy((char *)&dword_257E260, "Merge");
  qword_257E278 = (uint64_t)operator new(0x20uLL);
  v271[1] = xmmword_20B8E90;
  unk_257E280 = xmmword_20B8E90;
  strcpy((char *)qword_257E278, "Continue_Freeway_Spoken_Primary");
  byte_257E2A7 = 8;
  strcpy((char *)&qword_257E290, "Starting");
  byte_257E2BF = 14;
  strcpy((char *)&qword_257E2A8, "Starting_Route");
  byte_257E2D7 = 14;
  strcpy((char *)&qword_257E2C0, "Resuming_Route");
  byte_257E2EF = 16;
  strcpy((char *)&xmmword_257E2D8, "Continuing_Route");
  byte_257E307 = 9;
  word_257E2F8 = 112;
  qword_257E2F0 = v267;
  strcpy(&byte_257E31F, "\nEnding");
  strcpy((char *)&word_257E310, "op");
  qword_257E308 = *(void *)&v271[0];
  byte_257E337 = 6;
  strcpy((char *)&qword_257E338, "_Destination");
  byte_257E34F = 12;
  byte_257E367 = 15;
  strcpy((char *)&qword_257E350, "_At_Destination");
  std::operator+<char>();
  qword_257E380 = (uint64_t)operator new(0x20uLL);
  unk_257E388 = v283;
  strcpy((char *)qword_257E380, "Spoken_Ending_At_Parking");
  qword_257E398 = (uint64_t)operator new(0x20uLL);
  v271[0] = xmmword_20B9800;
  xmmword_257E3A0 = xmmword_20B9800;
  strcpy((char *)qword_257E398, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_257E3B0, "Sign_Ending_At_Parking");
  HIBYTE(word_257E3C6) = 22;
  byte_257E3DF = 4;
  strcpy((char *)&dword_257E3C8, "Home");
  byte_257E3F7 = 4;
  strcpy((char *)&dword_257E3E0, "Work");
  byte_257E40F = 8;
  strcpy((char *)&qword_257E3F8, "Business");
  byte_257E427 = 4;
  strcpy((char *)&dword_257E410, "Name");
  byte_257E43F = 13;
  strcpy((char *)&qword_257E428, "Other_Contact");
  byte_257E457 = 11;
  strcpy((char *)&qword_257E440, "ContactHome");
  byte_257E46F = 11;
  *(_DWORD *)((char *)&qword_257E458 + 7) = 1802661719;
  byte_257E487 = 7;
  *(int *)((char *)&dword_257E470 + 3) = 1936942450;
  dword_257E470 = 1919181889;
  strcpy((char *)&xmmword_257E488, "Discoverability_Prompt");
  HIBYTE(word_257E49E) = 22;
  byte_257E4B7 = 6;
  dword_257E4A0 = 1634878303;
  word_257E4A4 = 26739;
  byte_257E4CF = 8;
  qword_257E4B8 = 0x697269535F6F4E5FLL;
  byte_257E4E7 = 9;
  strcpy((char *)&qword_257E4D0, "_CityName");
  byte_257E4FF = 8;
  qword_257E4E8 = 0x636972656E65475FLL;
  int v23 = byte_257E2A7;
  if (byte_257E2A7 >= 0) {
    size_t v24 = byte_257E2A7;
  }
  else {
    size_t v24 = qword_257E298;
  }
  LODWORD(v273) = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v25 = byte_257D5E7;
  }
  else {
    size_t v25 = unk_257D5D8;
  }
  qword_257E458 = *(void *)"ContactWork";
  byte_257E463 = 0;
  byte_257E477 = 0;
  byte_257E4A6 = 0;
  byte_257E4C0 = 0;
  byte_257E4F0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&long long v267 = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    double v27 = &qword_257E500;
    qword_257E508 = 0;
    unk_257E510 = 0;
    qword_257E500 = 0;
    byte_257E517 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  double v27 = (uint64_t *)operator new(v90 + 1);
  qword_257E508 = v25 + v24;
  unk_257E510 = v91 | 0x8000000000000000;
  qword_257E500 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      double v28 = &qword_257E290;
    }
    else {
      double v28 = (uint64_t *)qword_257E290;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  double v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v273 >= 0) {
      double v30 = &qword_257D5D0;
    }
    else {
      double v30 = (uint64_t *)qword_257D5D0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_257E34F;
  if (byte_257E34F >= 0) {
    size_t v32 = byte_257E34F;
  }
  else {
    size_t v32 = qword_257E340;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    double v34 = &qword_257E518;
    qword_257E520 = 0;
    unk_257E528 = 0;
    qword_257E518 = 0;
    byte_257E52F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  double v34 = (uint64_t *)operator new(v92 + 1);
  qword_257E520 = v32 + v24;
  unk_257E528 = v93 | 0x8000000000000000;
  qword_257E518 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      double v35 = &qword_257E290;
    }
    else {
      double v35 = (uint64_t *)qword_257E290;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  double v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      double v37 = &qword_257E338;
    }
    else {
      double v37 = (uint64_t *)qword_257E338;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_257E530 = (uint64_t)operator new(0x19uLL);
  unk_257E538 = v284;
  strcpy((char *)qword_257E530, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    double v38 = &qword_257E548;
    qword_257E550 = 0;
    unk_257E558 = 0;
    qword_257E548 = 0;
    byte_257E55F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  double v38 = (uint64_t *)operator new(v94 + 1);
  qword_257E550 = v32 + v24;
  unk_257E558 = v95 | 0x8000000000000000;
  qword_257E548 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      BOOL v39 = &qword_257E290;
    }
    else {
      BOOL v39 = (uint64_t *)qword_257E290;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  int v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_257E338;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_257E338;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_257E560, "{NewBatteryPercentage}");
  HIBYTE(word_257E576) = 22;
  qword_257E578 = (uint64_t)operator new(0x20uLL);
  xmmword_257E580 = v277;
  strcpy((char *)qword_257E578, "{OriginalBatteryPercentage}");
  byte_257E5A7 = 19;
  strcpy((char *)&xmmword_257E590, "_Arrival_Percentage");
  int v42 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v43 = byte_257E337;
  }
  else {
    size_t v43 = qword_257E328;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      unint64_t v46 = &qword_257E320;
    }
    else {
      unint64_t v46 = (uint64_t *)qword_257E320;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  double v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v273 >= 0) {
      double v48 = &qword_257D5D0;
    }
    else {
      double v48 = (uint64_t *)qword_257D5D0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  uint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_257E5B8 = v49->__r_.__value_.__r.__words[2];
  xmmword_257E5A8 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v52 = byte_257E337;
  }
  else {
    size_t v52 = qword_257E328;
  }
  int v53 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v54 = byte_257D5E7;
  }
  else {
    size_t v54 = unk_257D5D8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v285, 0, sizeof(v285));
    long long v56 = (char *)&v285;
    *((unsigned char *)&v285.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  long long v56 = (char *)operator new(v98 + 1);
  v285.__r_.__value_.__l.__size_ = v54 + v52;
  v285.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v285.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      long long v57 = &qword_257E320;
    }
    else {
      long long v57 = (uint64_t *)qword_257E320;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  double v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      long long v59 = &qword_257D5D0;
    }
    else {
      long long v59 = (uint64_t *)qword_257D5D0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_257D617 >= 0) {
    std::string::size_type v60 = (const std::string::value_type *)&qword_257D600;
  }
  else {
    std::string::size_type v60 = (const std::string::value_type *)qword_257D600;
  }
  if (byte_257D617 >= 0) {
    std::string::size_type v61 = byte_257D617;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_257D608;
  }
  long long v62 = std::string::append(&v285, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_257E5D0 = v64->__r_.__value_.__r.__words[2];
  xmmword_257E5C0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v285.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v67 = byte_257E337;
  }
  else {
    size_t v67 = qword_257E328;
  }
  int v68 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v69 = byte_257D5E7;
  }
  else {
    size_t v69 = unk_257D5D8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      char v72 = &qword_257E320;
    }
    else {
      char v72 = (uint64_t *)qword_257E320;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_257D5D0;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_257D5D0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  long long v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_257E5E8 = v75->__r_.__value_.__r.__words[2];
  xmmword_257E5D8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v78 = byte_257E337;
  }
  else {
    size_t v78 = qword_257E328;
  }
  int v79 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v80 = byte_257D5E7;
  }
  else {
    size_t v80 = unk_257D5D8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_257E5F8 = 0;
    unk_257E600 = 0;
    qword_257E5F0 = 0;
    int v82 = &qword_257E5F0;
    byte_257E607 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_257E5F8 = v80 + v78;
  unk_257E600 = v103 | 0x8000000000000000;
  qword_257E5F0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      long long v83 = &qword_257E320;
    }
    else {
      long long v83 = (uint64_t *)qword_257E320;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  int v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_257D5D0;
    }
    else {
      int v85 = (uint64_t *)qword_257D5D0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_257E607;
  if (byte_257E607 >= 0) {
    size_t v87 = byte_257E607;
  }
  else {
    size_t v87 = qword_257E5F8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_257E610 = v87 + 5;
    unk_257E618 = v105 | 0x8000000000000000;
    qword_257E608 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_257E608;
    qword_257E610 = 0;
    unk_257E618 = 0;
    qword_257E608 = 0;
    byte_257E61F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    int v106 = &qword_257E5F0;
  }
  else {
    int v106 = (uint64_t *)qword_257E5F0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v108 = byte_257E337;
  }
  else {
    size_t v108 = qword_257E328;
  }
  int v109 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v110 = byte_257D5E7;
  }
  else {
    size_t v110 = unk_257D5D8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      v113 = &qword_257E320;
    }
    else {
      v113 = (uint64_t *)qword_257E320;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_257D5D0;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_257D5D0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_257E630 = v116->__r_.__value_.__r.__words[2];
  xmmword_257E620 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_257E630);
  if (qword_257E630 >= 0) {
    size_t v119 = HIBYTE(qword_257E630);
  }
  else {
    size_t v119 = *((void *)&xmmword_257E620 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_257E640 = v119 + 6;
    unk_257E648 = v125 | 0x8000000000000000;
    qword_257E638 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_257E638;
    qword_257E640 = 0;
    unk_257E648 = 0;
    qword_257E638 = 0;
    byte_257E64F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_257E620;
  }
  else {
    int v126 = (long long *)xmmword_257E620;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v128 = byte_257E337;
  }
  else {
    size_t v128 = qword_257E328;
  }
  int v129 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v130 = byte_257D5E7;
  }
  else {
    size_t v130 = unk_257D5D8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      v133 = &qword_257E320;
    }
    else {
      v133 = (uint64_t *)qword_257E320;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      v135 = &qword_257D5D0;
    }
    else {
      v135 = (uint64_t *)qword_257D5D0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_257DDAF >= 0) {
    std::string::size_type v136 = (const std::string::value_type *)&qword_257DD98;
  }
  else {
    std::string::size_type v136 = (const std::string::value_type *)qword_257DD98;
  }
  if (byte_257DDAF >= 0) {
    std::string::size_type v137 = byte_257DDAF;
  }
  else {
    std::string::size_type v137 = unk_257DDA0;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_257E660 = v138->__r_.__value_.__r.__words[2];
  xmmword_257E650 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_257E337;
  if (byte_257E337 >= 0) {
    size_t v141 = byte_257E337;
  }
  else {
    size_t v141 = qword_257E328;
  }
  int v142 = byte_257D5E7;
  if (byte_257D5E7 >= 0) {
    size_t v143 = byte_257D5E7;
  }
  else {
    size_t v143 = unk_257D5D8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v285, 0, sizeof(v285));
    v145 = (char *)&v285;
    *((unsigned char *)&v285.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v285.__r_.__value_.__l.__size_ = v143 + v141;
  v285.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v285.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_257E320;
    }
    else {
      v146 = (uint64_t *)qword_257E320;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_257D5D0;
    }
    else {
      v148 = (uint64_t *)qword_257D5D0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_257D617 >= 0) {
    std::string::size_type v149 = (const std::string::value_type *)&qword_257D600;
  }
  else {
    std::string::size_type v149 = (const std::string::value_type *)qword_257D600;
  }
  if (byte_257D617 >= 0) {
    std::string::size_type v150 = byte_257D617;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_257D608;
  }
  long long v151 = std::string::append(&v285, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_257DDAF >= 0) {
    std::string::size_type v153 = (const std::string::value_type *)&qword_257DD98;
  }
  else {
    std::string::size_type v153 = (const std::string::value_type *)qword_257DD98;
  }
  if (byte_257DDAF >= 0) {
    std::string::size_type v154 = byte_257DDAF;
  }
  else {
    std::string::size_type v154 = unk_257DDA0;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_257E678 = v155->__r_.__value_.__r.__words[2];
  xmmword_257E668 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v285.__r_.__value_.__l.__data_);
LABEL_297:
  byte_257E697 = 16;
  strcpy((char *)&xmmword_257E680, "Use_NACS_Adapter");
  byte_257E6AF = 16;
  strcpy(byte_257E698, "Start_Route_Sign");
  qword_257E6B0 = (uint64_t)operator new(0x20uLL);
  unk_257E6B8 = v280;
  strcpy((char *)qword_257E6B0, "Start_Route_Spoken_Primary");
  int v157 = byte_257CD47;
  if (byte_257CD47 >= 0) {
    size_t v158 = byte_257CD47;
  }
  else {
    size_t v158 = qword_257CD38;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_257E6C8;
    qword_257E6D0 = 0;
    unk_257E6D8 = 0;
    qword_257E6C8 = 0;
    byte_257E6DF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_257CD30;
    }
    else {
      v167 = (uint64_t *)qword_257CD30;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_257E6D0 = v158 + 27;
  unk_257E6D8 = v166 | 0x8000000000000000;
  qword_257E6C8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_257E6F7, "\t_Two_Lanes");
  strcpy((char *)&qword_257E6E0, "_One_Lane");
  strcpy(&byte_257E70F, "\n_Three_Lanes");
  byte_257E727 = 12;
  byte_257E73F = 11;
  strcpy((char *)&qword_257E728, "_Four_Lanes");
  byte_257E757 = 11;
  strcpy((char *)&qword_257E740, "_Five_Lanes");
  strcpy(&byte_257E76F, "\n_Seven_Lanes");
  strcpy((char *)&qword_257E758, "_Six_Lanes");
  byte_257E787 = 12;
  byte_257E79F = 12;
  strcpy((char *)&qword_257E788, "_Eight_Lanes");
  byte_257E7B7 = 12;
  strcpy((char *)&qword_257E7A0, "_Second_Lane");
  byte_257E7CF = 11;
  strcpy((char *)&qword_257E7B8, "_Third_Lane");
  byte_257E7E7 = 19;
  long long v273 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_257E7D0, "_Second_Third_Lanes");
  byte_257E7FF = 4;
  strcpy((char *)&dword_257E7E8, "Left");
  byte_257E817 = 5;
  byte_257E804 = 116;
  dword_257E800 = 1751607634;
  byte_257E805 = 0;
  byte_257E82F = 6;
  strcpy((char *)&dword_257E818, "Middle");
  BYTE1(qword_257E840) = 0;
  WORD1(qword_257E840) = 0;
  HIDWORD(qword_257E840) = 0x10000000;
  strcpy((char *)dword_257E830, "Left_Second_Lane");
  BYTE1(qword_257E858) = 0;
  WORD1(qword_257E858) = 0;
  HIDWORD(qword_257E858) = 285212672;
  strcpy((char *)&dword_257E848, "Right_Second_Lan");
  qword_257E870 = 0xF00000000000000;
  strcpy((char *)&dword_257E860, "Left_Third_Lane");
  qword_257E888 = 0x1000000000000000;
  byte_257E87C = 116;
  dword_257E878 = 1751607634;
  dword_257E884 = 1701732684;
  unk_257E87D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_257E890 = (uint64_t)v168;
  unk_257E898 = v284;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v273;
  int v169 = (char *)operator new(0x20uLL);
  qword_257E8A8 = (uint64_t)v169;
  xmmword_257E8B0 = v283;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v273;
  byte_257E8D7 = 5;
  strcpy((char *)&dword_257E8C0, "_Stay");
  byte_257E8EF = 13;
  strcpy((char *)&qword_257E8D8, "Continue_Sign");
  byte_257E907 = 8;
  strcpy((char *)&qword_257E8F0, "Continue");
  int v170 = byte_257DDC7;
  if (byte_257DDC7 >= 0) {
    size_t v171 = byte_257DDC7;
  }
  else {
    size_t v171 = qword_257DDB8;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_257E910 = v171 + 8;
    qword_257E918 = v175 | 0x8000000000000000;
    qword_257E908 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_257E918 = 0;
    HIBYTE(qword_257E918) = v171 + 8;
    qword_257E908 = 0x65756E69746E6F43;
    qword_257E910 = 0;
    uint64_t v173 = &qword_257E910;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_257DDB0;
  }
  else {
    int v177 = (uint64_t *)qword_257DDB0;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_257DE20);
  if (qword_257DE20 >= 0) {
    size_t v179 = HIBYTE(qword_257DE20);
  }
  else {
    size_t v179 = unk_257DE18;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_257E928 = v179 + 8;
    qword_257E930 = v183 | 0x8000000000000000;
    qword_257E920 = (uint64_t)v184;
    void *v184 = qword_257E8F0;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_257E930 = 0;
    HIBYTE(qword_257E930) = v179 + 8;
    qword_257E920 = qword_257E8F0;
    qword_257E928 = 0;
    uint64_t v181 = &qword_257E928;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_257DE10;
  }
  else {
    v185 = (uint64_t *)qword_257DE10;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v287[23] = 2;
  strcpy(v287, "SW");
  v289[7] = 1;
  LOWORD(v288[0]) = 87;
  HIBYTE(v290) = 2;
  strcpy(&v289[8], "NW");
  HIBYTE(v292) = 1;
  LOWORD(v291[0]) = 78;
  HIBYTE(v294) = 2;
  strcpy((char *)&v293, "NE");
  HIBYTE(v296) = 1;
  LOWORD(v295) = 69;
  HIBYTE(v298) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_257E938, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v298) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v296) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v294) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v291[0]);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v289[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v289[8]);
  if ((v289[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v287[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v287);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v288[0]);
  if ((v287[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_257E967 = 13;
  strcpy((char *)&qword_257E950, "{instruction}");
  byte_257E97F = 20;
  strcpy(byte_257E968, "{primaryInstruction}");
  strcpy((char *)&xmmword_257E980, "{secondaryInstruction}");
  HIBYTE(word_257E996) = 22;
  qword_257E998 = (uint64_t)operator new(0x20uLL);
  unk_257E9A0 = v282;
  strcpy((char *)qword_257E998, "{andSecondaryInstruction}");
  qword_257E9B0 = (uint64_t)operator new(0x20uLL);
  unk_257E9B8 = v283;
  strcpy((char *)qword_257E9B0, "{toSecondaryInstruction}");
  byte_257E9DF = 21;
  strcpy(byte_257E9C8, "{continueInstruction}");
  qword_257E9E0 = (uint64_t)operator new(0x20uLL);
  unk_257E9E8 = v280;
  strcpy((char *)qword_257E9E0, "{thenSecondaryInstruction}");
  byte_257EA0F = 14;
  strcpy((char *)&qword_257E9F8, "{instruction1}");
  byte_257EA27 = 14;
  strcpy((char *)&qword_257EA10, "{instruction2}");
  strcpy(&byte_257EA3F, "\n{nextDistance}");
  strcpy((char *)&qword_257EA28, "{distance}");
  byte_257EA57 = 14;
  byte_257EA6F = 16;
  strcpy(byte_257EA58, "{valid_distance}");
  strcpy(&byte_257EA87, "\n{valid_distance}");
  strcpy((char *)&qword_257EA70, "{distance}");
  byte_257EA9F = 16;
  byte_257EAB7 = 15;
  strcpy((char *)&qword_257EAA0, "{ClimbDistance}");
  byte_257EACF = 17;
  strcpy(byte_257EAB8, "{DescentDistance}");
  byte_257EAE7 = 13;
  strcpy((char *)&qword_257EAD0, "{nonBrkSpace}");
  byte_257EAFF = 9;
  strcpy((char *)&qword_257EAE8, "{newLine}");
  byte_257EB17 = 6;
  word_257EB04 = -24382;
  dword_257EB00 = -1211981630;
  byte_257EB06 = 0;
  byte_257EB2F = 2;
  word_257EB18 = -24382;
  byte_257EB1A = 0;
  byte_257EB47 = 1;
  word_257EB30 = 10;
  byte_257EB5F = 1;
  word_257EB48 = 32;
  byte_257EB77 = 2;
  strcpy((char *)&word_257EB60, "\n\n");
  strcpy(&byte_257EB8F, "\t{TowardShield1}");
  strcpy((char *)&qword_257EB78, "{Shield1}");
  byte_257EBA7 = 15;
  strcpy(&byte_257EBBF, "\t{TowardShield2}");
  strcpy((char *)&qword_257EBA8, "{Shield2}");
  byte_257EBD7 = 15;
  byte_257EBEF = 12;
  strcpy((char *)&qword_257EBD8, "{Direction1}");
  byte_257EC07 = 12;
  strcpy((char *)&qword_257EBF0, "{Direction2}");
  byte_257EC1F = 18;
  strcpy(byte_257EC08, "{TowardDirection1}");
  byte_257EC37 = 18;
  strcpy((char *)&xmmword_257EC20, "{TowardDirection2}");
  byte_257EC4F = 7;
  strcpy((char *)&dword_257EC38, "{Icon1}");
  byte_257EC67 = 7;
  strcpy((char *)&dword_257EC50, "{Icon2}");
  byte_257EC68[23] = 14;
  strcpy(byte_257EC68, "{Intersection}");
  byte_257EC97 = 6;
  strcpy((char *)&xmmword_257EC80, "{Road}");
  byte_257ECAF = 7;
  strcpy((char *)&dword_257EC98, "{Road1}");
  byte_257ECC7 = 7;
  strcpy((char *)&xmmword_257ECB0, "{Road2}");
  strcpy(&byte_257ECDF, "\n{Freeway}");
  strcpy((char *)&xmmword_257ECC8, "{Elevator}");
  strcpy(&byte_257ECF7, "\t{Ferry}");
  byte_257ED0F = 7;
  byte_257ED27 = 13;
  strcpy((char *)&xmmword_257ED10, "{ShuttleName}");
  byte_257ED3F = 11;
  strcpy((char *)&xmmword_257ED28, "{Signpost1}");
  byte_257ED57 = 11;
  strcpy((char *)&xmmword_257ED40, "{Signpost2}");
  byte_257ED6F = 12;
  strcpy((char *)&xmmword_257ED58, "{ExitNumber}");
  strcpy(&byte_257ED87, "\t{Name}");
  strcpy((char *)&xmmword_257ED70, "{Address}");
  byte_257ED9F = 6;
  byte_257EDB7 = 11;
  strcpy((char *)&xmmword_257EDA0, "{PlaceName}");
  byte_257EDCF = 14;
  strcpy((char *)&xmmword_257EDB8, "{ElevatorName}");
  byte_257EDE7 = 15;
  strcpy((char *)&xmmword_257EDD0, "{EscalatorName}");
  byte_257EDFF = 12;
  strcpy((char *)&xmmword_257EDE8, "{StairsName}");
  strcpy(&byte_257EE17, "\n{BridgeName}");
  strcpy((char *)&xmmword_257EE00, "{RampName}");
  byte_257EE2F = 12;
  byte_257EE47 = 12;
  strcpy((char *)&xmmword_257EE30, "{TunnelName}");
  byte_257EE5F = 13;
  strcpy((char *)&xmmword_257EE48, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_257EC68;
  *(_OWORD *)long long v287 = xmmword_257EC80;
  *(void *)&v287[16] = unk_257EC90;
  *(_OWORD *)uint64_t v288 = *(_OWORD *)&dword_257EC98;
  *(void *)long long v289 = unk_257ECA8;
  *(_OWORD *)&v289[8] = xmmword_257ECB0;
  uint64_t v290 = unk_257ECC0;
  *(_OWORD *)long long v291 = xmmword_257ECC8;
  uint64_t v292 = unk_257ECD8;
  uint64_t v294 = unk_257ECF0;
  long long v293 = xmmword_257ECE0;
  long long v295 = xmmword_257ECF8;
  uint64_t v296 = unk_257ED08;
  uint64_t v298 = unk_257ED20;
  long long __p = xmmword_257ED10;
  long long v299 = xmmword_257ED28;
  uint64_t v300 = unk_257ED38;
  uint64_t v302 = unk_257ED50;
  long long v301 = xmmword_257ED40;
  long long v303 = xmmword_257ED58;
  long long v305 = xmmword_257ED70;
  uint64_t v304 = unk_257ED68;
  uint64_t v306 = unk_257ED80;
  long long v307 = xmmword_257ED88;
  long long v309 = xmmword_257EDA0;
  uint64_t v308 = unk_257ED98;
  uint64_t v310 = unk_257EDB0;
  long long v311 = xmmword_257EDB8;
  long long v313 = xmmword_257EDD0;
  uint64_t v312 = unk_257EDC8;
  uint64_t v314 = unk_257EDE0;
  long long v315 = xmmword_257EDE8;
  long long v317 = xmmword_257EE00;
  uint64_t v316 = unk_257EDF8;
  uint64_t v318 = unk_257EE10;
  long long v319 = xmmword_257EE18;
  long long v321 = xmmword_257EE30;
  uint64_t v320 = unk_257EE28;
  uint64_t v322 = unk_257EE40;
  uint64_t v324 = unk_257EE58;
  long long v323 = xmmword_257EE48;
  sub_4BDC0C(qword_257EE60, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v324) < 0)
  {
    operator delete((void *)v323);
    if ((SHIBYTE(v322) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v320) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v322) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v321);
  if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v318) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v291[0]);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v289[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v289[8]);
  if ((v289[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v287[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v287);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v288[0]);
  if ((v287[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_257EE78 = (uint64_t)operator new(0x19uLL);
  unk_257EE80 = v284;
  strcpy((char *)qword_257EE78, "From_User_Location_List");
  byte_257EEA7 = 20;
  strcpy(byte_257EE90, "Origin_Waypoint_List");
  qword_257EEA8 = (uint64_t)operator new(0x20uLL);
  unk_257EEB0 = v280;
  strcpy((char *)qword_257EEA8, "Intermediate_Waypoint_List");
  unk_257EEC0 = operator new(0x20uLL);
  unk_257EEC8 = v282;
  strcpy(unk_257EEC0, "Destination_Waypoint_List");
  byte_257EEEF = 15;
  strcpy(byte_257EED8, "{toDestination}");
  byte_257EF07 = 13;
  strcpy((char *)&xmmword_257EEF0, "{Destination}");
  byte_257EF1F = 7;
  strcpy(byte_257EF08, "To_Home");
  byte_257EF37 = 14;
  strcpy(byte_257EF20, "To_ContactHome");
  byte_257EF4F = 7;
  strcpy(byte_257EF38, "To_Work");
  byte_257EF67 = 14;
  strcpy(byte_257EF50, "To_ContactWork");
  strcpy(&byte_257EF7F, "\nTo_Business");
  strcpy(byte_257EF68, "To_Address");
  byte_257EF97 = 11;
  byte_257EFAF = 16;
  strcpy(byte_257EF98, "To_Other_Contact");
  strcpy(&byte_257EFC7, "\tTo_ContactSchool");
  strcpy(byte_257EFB0, "To_School");
  byte_257EFDF = 16;
  byte_257EFF7 = 17;
  strcpy(byte_257EFE0, "To_PersonLocation");
  qword_257EFF8 = (uint64_t)operator new(0x20uLL);
  unk_257F000 = v281;
  strcpy((char *)qword_257EFF8, "To_ContactCustomLabelAddress");
  byte_257F027 = 7;
  strcpy((char *)&dword_257F010, "At_Home");
  byte_257F03F = 14;
  strcpy((char *)&qword_257F028, "At_ContactHome");
  byte_257F057 = 7;
  strcpy((char *)&dword_257F040, "At_Work");
  byte_257F06F = 14;
  strcpy((char *)&qword_257F058, "At_ContactWork");
  strcpy(&byte_257F087, "\nAt_Business");
  strcpy((char *)&qword_257F070, "At_Address");
  byte_257F09F = 11;
  byte_257F0B7 = 16;
  strcpy(byte_257F0A0, "At_Other_Contact");
  byte_257F0CF = 4;
  strcpy((char *)&dword_257F0B8, "Home");
  byte_257F0E7 = 11;
  strcpy((char *)&qword_257F0D0 + 7, "Home");
  qword_257F0D0 = *(void *)&v266[16];
  byte_257F0FF = 4;
  strcpy((char *)&dword_257F0E8, "Work");
  byte_257F117 = 11;
  strcpy((char *)&qword_257F100 + 7, "Work");
  qword_257F100 = *(void *)v266;
  byte_257F12F = 7;
  strcpy((char *)&dword_257F118, "Address");
  byte_257F147 = 8;
  strcpy((char *)&qword_257F130, "Business");
  byte_257F15F = 13;
  qword_257F148 = v267;
  *(uint64_t *)((char *)&qword_257F148 + 5) = *(void *)&v266[32];
  byte_257F155 = 0;
  byte_257F177 = 6;
  strcpy((char *)&dword_257F160, "School");
  byte_257F18F = 13;
  strcpy((char *)&qword_257F178, "ContactSchool");
  byte_257F1A7 = 14;
  strcpy((char *)&qword_257F190, "PersonLocation");
  qword_257F1A8 = (uint64_t)operator new(0x20uLL);
  xmmword_257F1B0 = v282;
  strcpy((char *)qword_257F1A8, "ContactCustomLabelAddress");
  if (byte_257EF07 < 0)
  {
    sub_4200(&xmmword_257F1C0, (void *)xmmword_257EEF0, *((unint64_t *)&xmmword_257EEF0 + 1));
  }
  else
  {
    xmmword_257F1C0 = xmmword_257EEF0;
    qword_257F1D0 = unk_257EF00;
  }
  byte_257F1EF = 16;
  strcpy((char *)&xmmword_257F1D8, "{PrevExitNumber}");
  byte_257F207 = 10;
  strcpy((char *)&qword_257F1F0, "{PrevRoad}");
  qword_257F208 = (uint64_t)operator new(0x20uLL);
  unk_257F210 = v283;
  strcpy((char *)qword_257F208, "{RouteTotalExpectedTime}");
  byte_257F237 = 18;
  strcpy(byte_257F220, "{ChargePercentage}");
  qword_257F238 = (uint64_t)operator new(0x20uLL);
  unk_257F240 = v277;
  strcpy((char *)qword_257F238, "{RemainingChargePercentage}");
  byte_257F267 = 16;
  strcpy(byte_257F250, "{ChargeDuration}");
  byte_257F27F = 15;
  strcpy((char *)&qword_257F268, "{ConnectorType}");
  byte_257F297 = 19;
  strcpy(byte_257F280, "{ChargeStationName}");
  byte_257F2AF = 7;
  strcpy((char *)&dword_257F298, "{Power}");
  byte_257F2C7 = 13;
  strcpy((char *)&qword_257F2B0, "{VehicleName}");
  byte_257F2DF = 18;
  strcpy((char *)&xmmword_257F2C8, "{AreaIncidentName}");
  byte_257F2F7 = 14;
  strcpy((char *)&qword_257F2E0, "{AreaIncident}");
  byte_257F30F = 16;
  strcpy((char *)&xmmword_257F2F8, "{AffectedRegion}");
  byte_257F327 = 21;
  strcpy(byte_257F310, "{AreaIncidentWeblink}");
  byte_257F33F = 20;
  strcpy((char *)&xmmword_257F328, "{AreaIncidentAgency}");
  byte_257F357 = 11;
  strcpy((char *)&qword_257F340, "{IssueTime}");
  byte_257F36F = 12;
  strcpy((char *)&qword_257F358, "{UpdateTime}");
  byte_257F387 = 11;
  strcpy((char *)&qword_257F370, "{IssueDate}");
  byte_257F39F = 12;
  strcpy((char *)&qword_257F388, "{UpdateDate}");
  qword_257F3A0 = (uint64_t)operator new(0x20uLL);
  unk_257F3A8 = v283;
  strcpy((char *)qword_257F3A0, "{AreaIncidentDataSource}");
  byte_257F3CF = 13;
  strcpy((char *)&qword_257F3B8, "{AreaHectare}");
  byte_257F3E7 = 10;
  strcpy((char *)&qword_257F3D0, "{AreaAcre}");
  qword_257F3E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257F3F0 = v279;
  strcpy((char *)qword_257F3E8, "{WildfirePercentageContained}");
  qword_257F400 = (uint64_t)operator new(0x28uLL);
  unk_257F408 = v275;
  strcpy((char *)qword_257F400, "{WildfireExpectedContainmentDate}");
  qword_257F418 = (uint64_t)operator new(0x20uLL);
  unk_257F420 = v281;
  strcpy((char *)qword_257F418, "{ServerRecommendedRouteName}");
  qword_257F430 = (uint64_t)operator new(0x20uLL);
  unk_257F438 = v281;
  strcpy((char *)qword_257F430, "{ServerNonRecommendedRoute1}");
  qword_257F448 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257F450 = v281;
  strcpy((char *)qword_257F448, "{ServerNonRecommendedRoute2}");
  byte_257F477 = 12;
  strcpy((char *)&qword_257F460, "{ClientDest}");
  byte_257F48F = 6;
  strcpy((char *)&dword_257F478, "{Name}");
  qword_257F490 = (uint64_t)operator new(0x20uLL);
  unk_257F498 = v271[1];
  strcpy((char *)qword_257F490, "ProactiveAlert_FasterRouteTitle");
  qword_257F4A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257F4B0 = v280;
  strcpy((char *)qword_257F4A8, "ProactiveAlert_RoadClosure");
  qword_257F4C0 = (uint64_t)operator new(0x30uLL);
  unk_257F4C8 = v274;
  strcpy((char *)qword_257F4C0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_257F4D8 = (uint64_t)operator new(0x28uLL);
  unk_257F4E0 = v278;
  strcpy((char *)qword_257F4D8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_257F4F0 = (uint64_t)operator new(0x28uLL);
  unk_257F4F8 = v278;
  strcpy((char *)qword_257F4F0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_257F508 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257F510 = v278;
  strcpy((char *)qword_257F508, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_257F520 = (uint64_t)operator new(0x30uLL);
  unk_257F528 = xmmword_20B93B0;
  strcpy((char *)qword_257F520, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_257F54F = 17;
  strcpy(byte_257F538, "Proactive_Driving");
  strcpy(&byte_257F567, "\n{RouteName}");
  strcpy((char *)&qword_257F550, "_RouteName");
  byte_257F57F = 11;
  qword_257F580 = (uint64_t)operator new(0x28uLL);
  unk_257F588 = v275;
  strcpy((char *)qword_257F580, "Pass_Traffic_Light_Spoken_Primary");
  qword_257F598 = (uint64_t)operator new(0x20uLL);
  unk_257F5A0 = v279;
  strcpy((char *)qword_257F598, "Pass_Stop_Sign_Spoken_Primary");
  unk_257F5B0 = operator new(0x20uLL);
  unk_257F5B8 = v271[0];
  strcpy(unk_257F5B0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_257F5DF, "\nBannerBody");
  strcpy(byte_257F5C8, "BannerHead");
  strcpy(&byte_257F5F7, "\nBannerDescription");
  byte_257F60F = 17;
  strcpy(&byte_257F627, "\n_Incident");
  strcpy((char *)&qword_257F610, "VoiceAlert");
  strcpy(&byte_257F63F, "\t_Area_Incident");
  byte_257F657 = 14;
  byte_257F66F = 15;
  strcpy((char *)&qword_257F658, "_Area_Incidents");
  strcpy(&byte_257F687, "\t_Crash");
  strcpy((char *)&qword_257F670, "_Accident");
  byte_257F69F = 6;
  byte_257F6B7 = 16;
  strcpy((char *)&xmmword_257F6A0, "_Congestion_Zone");
  strcpy(&byte_257F6CF, "\n_Environmental_Zone");
  strcpy((char *)&qword_257F6B8, "_Toll_Zone");
  byte_257F6E7 = 19;
  BYTE1(qword_257F6F8) = 116;
  WORD1(qword_257F6F8) = 0;
  HIDWORD(qword_257F6F8) = 301989888;
  strcpy(byte_257F700, "_Construction");
  strcpy((char *)&qword_257F6E8, "_Incident_Accide");
  byte_257F717 = 13;
  byte_257F72F = 7;
  strcpy((char *)&dword_257F718, "_Hazard");
  byte_257F747 = 12;
  strcpy((char *)&qword_257F730, "_LaneClosure");
  byte_257F75F = 12;
  strcpy((char *)&qword_257F748, "_LaneTrailer");
  qmemcpy(&byte_257F777, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_257F760, "_Shoulder");
  qword_257F788 = 0x1500007200000000;
  *(void *)algn_257F784 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_257F790, "_Causing_Traffic_Delay");
  HIBYTE(word_257F7A6) = 22;
  byte_257F7BF = 6;
  strcpy((char *)&dword_257F7A8, "_Timed");
  byte_257F7D7 = 12;
  strcpy((char *)&qword_257F7C0, "_HasDistance");
  byte_257F7EF = 8;
  strcpy((char *)&qword_257F7D8, "_Closure");
  strcpy(&byte_257F807, "\n_BadRoad");
  strcpy((char *)&qword_257F7F0, "_NoReroute");
  byte_257F81F = 8;
  byte_257F837 = 12;
  strcpy((char *)&qword_257F820, "_TollTrailer");
  byte_257F84F = 12;
  strcpy((char *)&qword_257F838, "_BestTrailer");
  byte_257F867 = 8;
  strcpy((char *)&qword_257F850, "_Trailer");
  byte_257F87F = 18;
  strcpy((char *)&xmmword_257F868, "_Secondary_Trailer");
  byte_257F897 = 8;
  strcpy((char *)&qword_257F880, "_Savings");
  byte_257F8AF = 8;
  strcpy((char *)&qword_257F898, "_AltRoad");
  byte_257F8C7 = 6;
  strcpy((char *)&dword_257F8B0, "_Named");
  byte_257F8DF = 6;
  strcpy((char *)&dword_257F8C8, "_NAMED");
  byte_257F8F7 = 22;
  strcpy((char *)&xmmword_257F8E0, "_Named_Suggested_Route");
  qword_257F910 = 0x1000000000000000;
  xmmword_257F900 = xmmword_20E81D0;
  byte_257F92F = 11;
  strcpy((char *)&qword_257F918, "_Speed_Trap");
  byte_257F947 = 4;
  strcpy((char *)&dword_257F930, "_UGI");
  byte_257F95F = 12;
  strcpy((char *)&qword_257F948, "_Safer_Route");
  qword_257F960 = (uint64_t)operator new(0x20uLL);
  unk_257F968 = v271[1];
  strcpy((char *)qword_257F960, "BlockedRouteByBlockingIncident_");
  qword_257F978 = (uint64_t)operator new(0x28uLL);
  long long v273 = xmmword_20B9280;
  unk_257F980 = xmmword_20B9280;
  strcpy((char *)qword_257F978, "BlockedRouteByManeuverRestriction_");
  qword_257F990 = (uint64_t)operator new(0x20uLL);
  unk_257F998 = v271[0];
  strcpy((char *)qword_257F990, "BlockedRouteByTimeRestriction_");
  qword_257F9A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257F9B0 = xmmword_20B8FD0;
  strcpy((char *)qword_257F9A8, "SuggestRouteToAvoidBlockingIncident_");
  qword_257F9C0 = (uint64_t)operator new(0x30uLL);
  unk_257F9C8 = xmmword_20B9380;
  strcpy((char *)qword_257F9C0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_257F9D8 = (uint64_t)operator new(0x30uLL);
  unk_257F9E0 = xmmword_20B93E0;
  strcpy((char *)qword_257F9D8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_257FA07 = 1;
  word_257F9F0 = 95;
  strcpy((char *)&xmmword_257FA08, "IncidentsCausingDelay_");
  HIBYTE(word_257FA1E) = 22;
  qword_257FA20 = (uint64_t)operator new(0x19uLL);
  unk_257FA28 = v284;
  strcpy((char *)qword_257FA20, "NonVotableRoadIncident_");
  byte_257FA4F = 20;
  strcpy(byte_257FA38, "VotableRoadIncident_");
  byte_257FA67 = 13;
  strcpy((char *)&qword_257FA50, "AreaIncident_");
  byte_257FA7F = 15;
  strcpy((char *)&qword_257FA68, "CongestionZone_");
  qword_257FA80 = (uint64_t)operator new(0x20uLL);
  unk_257FA88 = v283;
  strcpy((char *)qword_257FA80, "EVModifiedChargingStops_");
  byte_257FAAF = 13;
  strcpy((char *)&qword_257FA98, "EVDisconnect_");
  byte_257FAC7 = 12;
  strcpy((char *)&qword_257FAB0, "EVReconnect_");
  qword_257FAC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257FAD0 = v281;
  strcpy((char *)qword_257FAC8, "EVOfflineToOnlineTransition_");
  byte_257FAF7 = 13;
  strcpy((char *)&qword_257FAE0, "EVOfflineSAR_");
  byte_257FB0F = 21;
  strcpy((char *)&xmmword_257FAF8, "EVTowingNotSupported_");
  byte_257FB27 = 18;
  strcpy(algn_257FB10, "EVInfeasibleRoute_");
  qword_257FB28 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_257FB30 = xmmword_20B8DF0;
  strcpy((char *)qword_257FB28, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_257FB40 = (uint64_t)operator new(0x40uLL);
  unk_257FB48 = xmmword_20B98C0;
  strcpy((char *)qword_257FB40, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_257FB58 = (uint64_t)operator new(0x30uLL);
  unk_257FB60 = v276;
  qmemcpy(v271, "ngStopsForEVInfeSuggestRouteAddi", sizeof(v271));
  strcpy((char *)qword_257FB58, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  long long v267 = *(_OWORD *)"InfeasibleRoute_";
  qword_257FB70 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[34] = 0;
  *(_DWORD *)&v266[36] = 0;
  *(void *)&v266[40] = 0x8000000000000030;
  unk_257FB78 = xmmword_20B9A80;
  strcpy(v266, "dingStopsForEVInLCSuggestRouteAd.");
  strcpy((char *)qword_257FB70, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  qword_257FB88 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_257FB90 = v274;
  strcpy((char *)qword_257FB88, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_257FBA0 = (uint64_t)v186;
  unk_257FBA8 = v276;
  _OWORD *v186 = v271[1];
  v186[1] = v271[0];
  *(_OWORD *)((char *)v186 + 28) = v267;
  *((unsigned char *)v186 + 44) = 0;
  qword_257FBB8 = (uint64_t)operator new(0x28uLL);
  unk_257FBC0 = v273;
  strcpy((char *)qword_257FBB8, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_257FBD0 = (uint64_t)v187;
  unk_257FBD8 = *(_OWORD *)&v266[32];
  *(_OWORD *)uint64_t v187 = *(_OWORD *)&v266[16];
  *((_OWORD *)v187 + 1) = *(_OWORD *)v266;
  strcpy((char *)v187 + 30, "InfeasibleRoute_");
  qword_257FBE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_257FBF0 = v278;
  strcpy((char *)qword_257FBE8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_257FC00 = (uint64_t)operator new(0x28uLL);
  unk_257FC08 = v270;
  strcpy((char *)qword_257FC00, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_257FC18 = (uint64_t)operator new(0x20uLL);
  unk_257FC20 = v283;
  strcpy((char *)qword_257FC18, "OfflineToOnlineNewRoute_");
  qword_257FC30 = (uint64_t)operator new(0x40uLL);
  unk_257FC38 = xmmword_20B98C0;
  strcpy((char *)qword_257FC30, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_257FC5F = 20;
  strcpy(byte_257FC48, "LPR_OFFLINE_REROUTE_");
  byte_257FC77 = 16;
  strcpy((char *)&xmmword_257FC60, "LPR_OFFLINE_SAR_");
  byte_257FC8F = 20;
  strcpy(byte_257FC78, "LPR_OFFLINE_REROUTE_");
  byte_257FCA7 = 16;
  strcpy((char *)&xmmword_257FC90, "LPR_OFFLINE_SAR_");
  byte_257FCBF = 19;
  strcpy(byte_257FCA8, "SuggestFasterRoute_");
  qword_257FCC0 = (char *)operator new(0x20uLL);
  xmmword_257FCC8 = v282;
  strcpy(qword_257FCC0, "AreaIncidentSaferReroute_");
  byte_257FCEF = 12;
  strcpy((char *)&qword_257FCD8, "_Remove_Stop");
  byte_257FD07 = 13;
  strcpy((char *)&qword_257FCF0, "_Remove_Stops");
  strcpy(&byte_257FD1F, "\t_Add_Stops");
  strcpy((char *)&qword_257FD08, "_Add_Stop");
  strcpy(&byte_257FD37, "\n_Change_Route");
  byte_257FD4F = 13;
  byte_257FD67 = 15;
  strcpy((char *)&qword_257FD50, "_Different_Stop");
  byte_257FD7F = 16;
  strcpy((char *)&xmmword_257FD68, "_Different_Stops");
  byte_257FD97 = 15;
  strcpy((char *)&qword_257FD80, "_EV_Remove_Stop");
  byte_257FDAF = 16;
  strcpy((char *)&xmmword_257FD98, "_EV_Remove_Stops");
  byte_257FDC7 = 12;
  strcpy((char *)&qword_257FDB0, "_EV_Add_Stop");
  byte_257FDDF = 13;
  strcpy((char *)&qword_257FDC8, "_EV_Add_Stops");
  byte_257FDF7 = 15;
  strcpy((char *)&qword_257FDE0, "_EV_Low_Battery");
  byte_257FE0F = 14;
  strcpy((char *)&qword_257FDF8, "_EV_Infeasible");
  byte_257FE27 = 15;
  strcpy((char *)&qword_257FE10, "_EV_Last_Chance");
  qword_257FE28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257FE30 = v283;
  strcpy((char *)qword_257FE28, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_257FD28;
  qword_257FE40 = (uint64_t)operator new(0x20uLL);
  unk_257FE48 = v282;
  strcpy((char *)qword_257FE40, "_EV_Low_Battery_Add_Stops");
  qword_257FE58 = (uint64_t)operator new(0x19uLL);
  unk_257FE60 = v284;
  strcpy((char *)qword_257FE58, "_EV_Infeasible_Add_Stop");
  int v189 = byte_257FD37;
  if (byte_257FD37 >= 0) {
    size_t v190 = byte_257FD37;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_257FE78 = v190 + 14;
    unk_257FE80 = v195 | 0x8000000000000000;
    qword_257FE70 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_257FE78) = 0;
    WORD1(qword_257FE78) = 0;
    HIDWORD(qword_257FE78) = 0;
    unk_257FE80 = 0;
    byte_257FE87 = v190 + 14;
    strcpy((char *)&qword_257FE70, "_EV_Infe");
    char v192 = (char *)&qword_257FE78 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_257FD20;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_257FE88 = (uint64_t)v198;
  *(_OWORD *)algn_257FE90 = v283;
  *(void *)unint64_t v198 = qword_257FE10;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_257FE10 + 7);
  *(void *)(v198 + 15) = qword_257FD08;
  v198[23] = word_257FD10;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_257FEA8 = v190 + 15;
    unk_257FEB0 = v202 | 0x8000000000000000;
    qword_257FEA0 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_257FEA0;
    qword_257FEA8 = 0;
    unk_257FEB0 = 0;
    qword_257FEA0 = 0;
    byte_257FEB7 = v190 + 15;
  }
  *uint64_t v200 = qword_257FE10;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_257FE10 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_257FD20;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_257FD20;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_257FECF = 17;
  strcpy((char *)&xmmword_257FEB8, "_EV_Forced_Detour");
  qword_257FED0 = (uint64_t)operator new(0x20uLL);
  unk_257FED8 = v282;
  strcpy((char *)qword_257FED0, "_EV_Higher_Arrival_Charge");
  qword_257FEE8 = (uint64_t)operator new(0x28uLL);
  unk_257FEF0 = xmmword_20B8FD0;
  strcpy((char *)qword_257FEE8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_257FF17 = 16;
  strcpy(byte_257FF00, "_EV_Out_Of_Range");
  qword_257FF18 = (uint64_t)operator new(0x20uLL);
  unk_257FF20 = v277;
  strcpy((char *)qword_257FF18, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_257FF30, "_EV_Forced_Modify_Stop");
  HIBYTE(word_257FF46) = 22;
  qword_257FF48 = (uint64_t)operator new(0x19uLL);
  unk_257FF50 = v284;
  strcpy((char *)qword_257FF48, "_EV_Forced_Modify_Stops");
  byte_257FF77 = 19;
  strcpy(byte_257FF60, "_EV_Forced_Add_Stop");
  byte_257FF8F = 20;
  strcpy((char *)&xmmword_257FF78, "_EV_Forced_Add_Stops");
  byte_257FFA7 = 21;
  strcpy(byte_257FF90, "_EV_Battery_Info_Lost");
  qword_257FFA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_257FFB0 = v282;
  strcpy((char *)qword_257FFA8, "_EV_Battery_Info_Restored");
  qword_257FFC0 = (uint64_t)operator new(0x20uLL);
  unk_257FFC8 = v283;
  strcpy((char *)qword_257FFC0, "_EV_Towing_Not_Supported");
  qword_257FFD8 = (uint64_t)operator new(0x28uLL);
  unk_257FFE0 = v272;
  strcpy((char *)qword_257FFD8, "_EV_Offline_to_Online_Transition");
  byte_2580007 = 15;
  strcpy((char *)&qword_257FFF0, "_EV_Offline_SAR");
  qword_2580008 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2580010 = v281;
  strcpy((char *)qword_2580008, "_Offline_to_Online_New_Route");
  byte_2580037 = 12;
  strcpy((char *)&qword_2580020, "BannerButton");
  byte_258004F = 8;
  strcpy((char *)&qword_2580038, "_Dismiss");
  byte_2580067 = 3;
  word_2580050 = 20319;
  byte_2580052 = 75;
  byte_2580053 = 0;
  byte_258007F = 11;
  strcpy((char *)&qword_2580068, "_Still_Here");
  byte_2580097 = 8;
  strcpy((char *)&qword_2580080, "_Cleared");
  qmemcpy(&byte_25800AF, "\nBannerButton", 13);
  strcpy((char *)&qword_2580098, "_No_Thanks");
  uint64_t v205 = qword_2580028;
  qword_25800C0 = 0x1400000000000000;
  *(void *)algn_25800BC = 0x7373696D7369445FLL;
  qword_25800D8 = 0xF00000000000000;
  qword_25800D0 = 0x4B4F5F6E6F7474;
  int v206 = byte_257FDC7;
  if (byte_257FDC7 >= 0) {
    size_t v207 = byte_257FDC7;
  }
  else {
    size_t v207 = qword_257FDB8;
  }
  unint64_t v208 = v207 + 12;
  qword_25800C8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_25800E8 = v207 + 12;
    unk_25800F0 = v211 | 0x8000000000000000;
    qword_25800E0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25800E8) = 0;
    HIWORD(qword_25800E8) = 0;
    unk_25800F0 = 0;
    byte_25800F7 = v207 + 12;
    strcpy((char *)&qword_25800E0, "BannerButton");
    uint64_t v209 = (char *)&qword_25800E8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_257FDB0;
  }
  else {
    int v213 = (uint64_t *)qword_257FDB0;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_257FDDF;
  if (byte_257FDDF >= 0) {
    size_t v215 = byte_257FDDF;
  }
  else {
    size_t v215 = unk_257FDD0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2580100 = v215 + 12;
    unk_2580108 = v219 | 0x8000000000000000;
    qword_25800F8 = (uint64_t)v220;
    *(void *)v220 = qword_2580020;
    *((_DWORD *)v220 + 2) = qword_2580028;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_2580100 = 0;
    unk_2580108 = 0;
    byte_258010F = v215 + 12;
    LODWORD(qword_2580100) = qword_2580028;
    qword_25800F8 = qword_2580020;
    uint64_t v217 = (char *)&qword_2580100 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_257FDC8;
  }
  else {
    int v221 = (uint64_t *)qword_257FDC8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_257FD97;
  if (byte_257FD97 >= 0) {
    size_t v223 = byte_257FD97;
  }
  else {
    size_t v223 = unk_257FD88;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2580118 = v223 + 12;
    unk_2580120 = v227 | 0x8000000000000000;
    qword_2580110 = (uint64_t)v228;
    *(void *)v228 = qword_2580020;
    *((_DWORD *)v228 + 2) = qword_2580028;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_2580118 = 0;
    unk_2580120 = 0;
    byte_2580127 = v223 + 12;
    LODWORD(qword_2580118) = qword_2580028;
    qword_2580110 = qword_2580020;
    uint64_t v225 = (char *)&qword_2580118 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_257FD80;
  }
  else {
    int v229 = (uint64_t *)qword_257FD80;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2580037;
  if (byte_2580037 >= 0) {
    size_t v231 = byte_2580037;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_257FDAF;
  if (byte_257FDAF >= 0) {
    size_t v233 = byte_257FDAF;
  }
  else {
    size_t v233 = *((void *)&xmmword_257FD98 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2580128;
    qword_2580130 = 0;
    unk_2580138 = 0;
    qword_2580128 = 0;
    byte_258013F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2580130 = v233 + v231;
  unk_2580138 = v243 | 0x8000000000000000;
  qword_2580128 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2580020;
    }
    else {
      v236 = (uint64_t *)qword_2580020;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_257FD98;
    }
    else {
      unint64_t v238 = (long long *)xmmword_257FD98;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_2580148 = v231 + 11;
    unk_2580150 = v245 | 0x8000000000000000;
    qword_2580140 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_2580140;
    qword_2580148 = 0;
    unk_2580150 = 0;
    qword_2580140 = 0;
    byte_2580157 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2580140 + 7) = *(_DWORD *)((char *)&qword_2580068 + 7);
      qword_2580140 = qword_2580068;
      BYTE3(qword_2580148) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2580020;
  }
  else {
    v246 = (uint64_t *)qword_2580020;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2580068 + 7);
  *(void *)int v247 = qword_2580068;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2580158;
    qword_2580160 = 0;
    unk_2580168 = 0;
    qword_2580158 = 0;
    byte_258016F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  v249 = (uint64_t *)operator new(v264 + 1);
  qword_2580160 = v231 + 8;
  unk_2580168 = v265 | 0x8000000000000000;
  qword_2580158 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2580020;
    }
    else {
      v250 = (uint64_t *)qword_2580020;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_2580080;
  v251[8] = 0;
  int v252 = byte_25800AF;
  if (byte_25800AF >= 0) {
    size_t v253 = byte_25800AF;
  }
  else {
    size_t v253 = qword_25800A0;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2580170;
    qword_2580178 = 0;
    unk_2580180 = 0;
    qword_2580170 = 0;
    byte_2580187 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  v255 = (uint64_t *)operator new(v262 + 1);
  qword_2580178 = v253 + v231;
  unk_2580180 = v263 | 0x8000000000000000;
  qword_2580170 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2580020;
    }
    else {
      v256 = (uint64_t *)qword_2580020;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2580098;
    }
    else {
      v258 = (uint64_t *)qword_2580098;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_258019F, "\n{newroute}");
  strcpy((char *)&qword_2580188, "{roadname}");
  strcpy(&byte_25801B7, "\n{count}");
  byte_25801CF = 7;
  strcpy(&byte_25801E7, "\n{dur}");
  strcpy((char *)&qword_25801D0, "{duration}");
  byte_25801FF = 5;
  qword_2580200 = (uint64_t)operator new(0x20uLL);
  unk_2580208 = v280;
  strcpy((char *)qword_2580200, "{PleaseProceedWithCaution}");
  byte_258022F = 15;
  strcpy((char *)&qword_2580218, "{UserRouteName}");
  byte_2580247 = 20;
  strcpy((char *)&xmmword_2580230, "{SuggestedRouteName}");
  byte_258025F = 18;
  strcpy(byte_2580248, "Speed_Camera_Ahead");
  qword_2580260 = (uint64_t)operator new(0x20uLL);
  unk_2580268 = v279;
  strcpy((char *)qword_2580260, "Red_Light_Camera_Ahead_Spoken");
  qword_2580278 = (uint64_t)operator new(0x20uLL);
  unk_2580280 = v279;
  strcpy((char *)qword_2580278, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2580290 = (uint64_t)operator new(0x28uLL);
  unk_2580298 = v273;
  strcpy((char *)qword_2580290, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25802A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25802B0 = v268;
  strcpy((char *)qword_25802A8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25802C0 = (uint64_t)operator new(0x20uLL);
  unk_25802C8 = v281;
  strcpy((char *)qword_25802C0, "Camera_Ahead_Multiple_Spoken");
  qword_25802D8 = (uint64_t)operator new(0x30uLL);
  unk_25802E0 = v269;
  strcpy((char *)qword_25802D8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25802F0 = (char *)operator new(0x30uLL);
  strcpy(qword_25802F0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_258031F = 16;
  xmmword_25802F8 = v269;
  strcpy(byte_2580308, "_Speed_Limit_Mph");
  byte_2580337 = 16;
  strcpy(byte_2580320, "_Speed_Limit_Kph");
  byte_258034F = 11;
  strcpy((char *)&qword_2580338, "Watch_Speed");
  byte_2580367 = 4;
  strcpy((char *)&dword_2580350, "_One");
  byte_258037F = 4;
  strcpy((char *)&dword_2580368, "_Two");
  byte_2580397 = 4;
  strcpy((char *)&dword_2580380, "_Few");
  byte_25803AF = 5;
  strcpy((char *)&dword_2580398, "_Many");
  byte_25803C7 = 6;
  strcpy((char *)&dword_25803B0, "_Other");
  byte_25803DF = 4;
  strcpy((char *)&dword_25803C8, "_ONE");
  byte_25803F7 = 7;
  strcpy((char *)&dword_25803E0, "{Speed}");
  byte_258040F = 8;
  strcpy((char *)&qword_25803F8, "Dismount");
  byte_2580427 = 4;
  strcpy((char *)&dword_2580410, "Walk");
  byte_258043F = 5;
  strcpy((char *)&dword_2580428, "Mount");
  byte_2580457 = 7;
  strcpy((char *)&dword_2580440, "Remount");
  strcpy(&byte_258046F, "\t_Crosswalk");
  strcpy((char *)&qword_2580458, "Walk_Road");
  strcpy(&byte_2580487, "\n_PLURAL");
  byte_258049F = 7;
  strcpy(&byte_25804B7, "\n{description1}");
  strcpy((char *)&qword_25804A0, "_SECONDARY");
  byte_25804CF = 14;
  byte_25804E7 = 14;
  strcpy((char *)&qword_25804D0, "{description2}");
  byte_25804FF = 21;
  strcpy((char *)&xmmword_25804E8, "TWO_ROAD_DESCRIPTIONS");
  byte_2580517 = 17;
  strcpy((char *)&xmmword_2580500, "{SlopePercentage}");
  byte_258052F = 15;
  strcpy((char *)&qword_2580518, "_Protected_Lane");
  strcpy(&byte_2580547, "\n_Paved_Path");
  strcpy((char *)&qword_2580530, "_Bike_Path");
  byte_258055F = 11;
  byte_2580577 = 15;
  strcpy((char *)&qword_2580560, "_Dedicated_Lane");
  byte_258058F = 12;
  strcpy((char *)&qword_2580578, "_Shared_Path");
  strcpy(&byte_25805A7, "\n_UnnamedRoad");
  strcpy((char *)&qword_2580590, "_Bike_Lane");
  byte_25805BF = 12;
  byte_25805D7 = 5;
  strcpy((char *)&dword_25805C0, "_Path");
  byte_25805EF = 6;
  strcpy((char *)&dword_25805D8, "_Trail");
  strcpy(&byte_2580607, "\t_Plaza");
  strcpy((char *)&qword_25805F0, "_Sidewalk");
  byte_258061F = 6;
  byte_2580637 = 15;
  strcpy((char *)&qword_2580620, "_Moving_Walkway");
  byte_258064F = 14;
  strcpy((char *)&qword_2580638, "Two_Stage_Turn");
  byte_2580667 = 16;
  strcpy((char *)&xmmword_2580650, "{OptionalPeriod}");
  byte_258067F = 18;
  strcpy((char *)&xmmword_2580668, "Advisory_Separator");
  byte_2580697 = 6;
  strcpy((char *)&dword_2580680, "Period");
  byte_25806AF = 21;
  strcpy((char *)&xmmword_2580698, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25806B0, "Advisory_Title_Notices");
  HIBYTE(word_25806C6) = 22;
  byte_25806DF = 7;
  strcpy((char *)&dword_25806C8, "_DETAIL");
  byte_25806F7 = 17;
  strcpy((char *)&xmmword_25806E0, "_LONG_REGION_LIST");
  byte_258070F = 16;
  strcpy((char *)&xmmword_25806F8, "Advisory_Grouped");
  byte_2580727 = 11;
  strcpy((char *)&qword_2580710, "_Advisories");
  qword_2580728 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2580730 = v277;
  strcpy((char *)qword_2580728, "Advisory_WILDFIRE_METADATA_");
  byte_2580757 = 8;
  strcpy((char *)&qword_2580740, "Advisory");
  byte_258076F = 13;
  strcpy((char *)&qword_2580758, "MPR_NUM_STOPS");
  byte_2580787 = 17;
  strcpy(algn_2580770, "EV_CHARGE_STATION");
  byte_258079F = 11;
  strcpy((char *)&qword_2580788, "_NAMED_CITY");
  byte_25807B7 = 5;
  strcpy((char *)&dword_25807A0, "_Stop");
  strcpy(&byte_25807CF, "\n{StopsCount}");
  strcpy((char *)&qword_25807B8, "{CityName}");
  byte_25807E7 = 12;
  byte_25807FF = 11;
  strcpy((char *)&qword_25807E8, "_With_Other");
  byte_2580817 = 15;
  strcpy((char *)&qword_2580800, "{DepartureTime}");
  qword_2580818 = (uint64_t)operator new(0x28uLL);
  unk_2580820 = v278;
  strcpy((char *)qword_2580818, "Ending_Charge_Station_Port_Availability");
  qword_2580830 = (uint64_t)operator new(0x28uLL);
  unk_2580838 = v270;
  strcpy((char *)qword_2580830, "Ending_Charge_Station_No_Availability");
  qword_2580848 = (uint64_t)operator new(0x28uLL);
  unk_2580850 = v273;
  strcpy((char *)qword_2580848, "Ending_Charge_Station_No_Real_Time");
  byte_2580877 = 16;
  strcpy(byte_2580860, "{AvailablePorts}");
  byte_258088F = 12;
  strcpy((char *)&qword_2580878, "{TotalPorts}");
  byte_25808A7 = 14;
  strcpy((char *)&qword_2580890, "{ManeuverIcon}");
  qword_25808A8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25808B0 = xmmword_20B9A60;
  strcpy((char *)qword_25808A8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25808C0 = (uint64_t)operator new(0x20uLL);
  unk_25808C8 = v277;
  strcpy((char *)qword_25808C0, "Walking_Destination_Unnamed");
  qword_25808D8 = (uint64_t)operator new(0x20uLL);
  unk_25808E0 = v279;
  strcpy((char *)qword_25808D8, "TrafficDelay_Label_Title_Sign");
  qword_25808F0 = (uint64_t)operator new(0x20uLL);
  unk_25808F8 = v281;
  strcpy((char *)qword_25808F0, "Special_Guidance_Instruction");
  byte_258091F = 2;
  strcpy((char *)&word_2580908, "CZ");
  byte_2580937 = 3;
  dword_2580920 = 5919811;
  unk_258094F = 3;
  dword_2580938 = 6243649;
  byte_2580967 = 0;
  byte_258097F = 7;
  strcpy((char *)&dword_2580968, "TRANSIT");
  byte_2580997 = 7;
  strcpy((char *)&dword_2580980, "OFFLINE");
  qword_2580998 = (uint64_t)operator new(0x28uLL);
  unk_25809A0 = v268;
  strcpy((char *)qword_2580998, "Advisory_Card_French_Climate_Law_Title");
  qword_25809B0 = (uint64_t)operator new(0x30uLL);
  unk_25809B8 = xmmword_20B93C0;
  strcpy((char *)qword_25809B0, "Advisory_Card_French_Climate_Law_Details");
  qword_25809C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25809D0 = v274;
  strcpy((char *)qword_25809C8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25809E0 = (uint64_t)operator new(0x20uLL);
  unk_25809E8 = v281;
  strcpy((char *)qword_25809E0, "{ClimateLawLearnMoreWeblink}");
  byte_2580A0F = 3;
  dword_25809F8 = 4280902;
  qword_2580A10 = (uint64_t)operator new(0x70uLL);
  unk_2580A18 = xmmword_20E81E0;
  strcpy((char *)qword_2580A10, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)long long v287 = 0;
  HIBYTE(v288[0]) = 14;
  strcpy(&v287[8], "ROUTES_THROUGH");
  LODWORD(v288[1]) = 1;
  v289[23] = 9;
  strcpy(v289, "ROUTES_TO");
  LODWORD(v290) = 3;
  HIBYTE(v292) = 11;
  strcpy((char *)v291, "ROUTES_FROM");
  LODWORD(v293) = 2;
  xmmword_2580A88 = 0u;
  xmmword_2580A98 = 0u;
  dword_2580AA8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2580A88, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2580A88, (uint64_t)&v287[8], (uint64_t)&v287[8]);
  sub_3A6EF0((uint64_t)&xmmword_2580A88, (uint64_t)v289, (uint64_t)v289);
  sub_3A6EF0((uint64_t)&xmmword_2580A88, (uint64_t)v291, (uint64_t)v291);
  if (SHIBYTE(v292) < 0)
  {
    operator delete(v291[0]);
    if ((v289[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v288[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v287[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v289[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v289);
  if (SHIBYTE(v288[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  qword_2580A30 = 0;
  qword_2580A38 = 0;
  qword_2580A28 = 0;
  uint64_t v259 = operator new(9uLL);
  *(void *)uint64_t v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_2580A28 = (uint64_t)v259;
  qword_2580A30 = (uint64_t)(v259 + 9);
  qword_2580A38 = (uint64_t)(v259 + 9);
  qword_2580A40 = 0;
  qword_2580A48 = 0;
  unk_2580A50 = 0;
  uint64_t v260 = (char *)operator new(9uLL);
  qword_2580A48 = (uint64_t)(v260 + 9);
  unk_2580A50 = v260 + 9;
  *(void *)uint64_t v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_2580A40 = (uint64_t)v260;
  qword_2580A70 = (uint64_t)operator new(0x30uLL);
  unk_2580A78 = v276;
  strcpy((char *)qword_2580A70, "Elevation_Profile_Segment_Description_Spoken");
  double result = (char *)operator new(0x28uLL);
  qword_2580A58 = (uint64_t)result;
  unk_2580A60 = v275;
  strcpy(result, "DEV:Elevation_Profile_Description");
  return result;
}

void sub_5CD000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3C7]) < 0)
  {
    operator delete((void *)STACK[0x3B0]);
    if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x397]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x397]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x380]);
    if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x367]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x368]);
  if (SLOBYTE(STACK[0x367]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x350]);
    if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x337]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x320]);
    if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x307]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2F0]);
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2D7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2C0]);
    if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x2A7]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x290]);
    if (SLOBYTE(STACK[0x28F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x278]);
      if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x25F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x248]);
          if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x22F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x218]);
              if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a74 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete((void *)STACK[0x200]);
              if (a74 < 0)
              {
LABEL_42:
                operator delete(a73);
                if ((a72 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a72 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a67);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x230]);
          if (SLOBYTE(STACK[0x22F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x260]);
      if (SLOBYTE(STACK[0x25F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x28F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_5CD358(void *a1, uint64_t *a2, uint64_t a3)
{
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "EnrouteNoticeBuilder");
  unint64_t v14 = 0;
  double v15 = 0;
  uint64_t v16 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB370(v6, 3, *(unsigned __int8 *)(a3 + 1525), &__p);
  sub_5CF14C((uint64_t)a1, &__p, (uint64_t)a2, a3);
  BOOL v7 = v19;
  if (v19)
  {
    do
    {
      int v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      BOOL v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p;
  long long __p = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    unint64_t v10 = v15;
    uint64_t v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v14;
    }
    double v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  a1[11] = a3;
  a1[12] = sub_3750CC(a2);
  size_t v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 0, *(_DWORD *)(a3 + 968), a1 + 13);
  operator new();
}

void sub_5CD518(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_5CD55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_5CD594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2)
  {
    sub_68D2B0(v2);
    operator delete();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_5CD634(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5CD940(a1, a2, a3);
  sub_5CDF98(a1, a2, (uint64_t *)&v32);
  sub_5DC47C(a3, a3[1], (uint64_t)v32, (uint64_t)v33, 0x86BCA1AF286BCA1BLL * ((v33 - v32) >> 5));
  sub_5CE428(a1, a2, (uint64_t *)&v29);
  sub_5DC47C(a3, a3[1], (uint64_t)v29, (uint64_t)v30, 0x86BCA1AF286BCA1BLL * ((v30 - (unsigned char *)v29) >> 5));
  sub_5CE768(a1, (uint64_t)a2, (uint64_t *)&v26);
  sub_5DC47C(a3, a3[1], (uint64_t)v26, (uint64_t)v27, 0x86BCA1AF286BCA1BLL * ((v27 - (unsigned char *)v26) >> 5));
  if (*(unsigned char *)(a1 + 14))
  {
    sub_5D07C8(a1, (uint64_t)a2, (uint64_t *)&__p);
    unint64_t v6 = __p;
    uint64_t v7 = (uint64_t)v24;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    long long __p = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
  }
  sub_5DC47C(a3, a3[1], (uint64_t)v6, v7, 0x86BCA1AF286BCA1BLL * ((v7 - (uint64_t)v6) >> 5));
  uint64_t v8 = (uint64_t *)a3[1];
  unint64_t v9 = 126 - 2 * __clz(0x86BCA1AF286BCA1BLL * (((uint64_t)v8 - *a3) >> 5));
  if (v8 == (uint64_t *)*a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_5DCEFC(*a3, v8, (uint64_t)&v35, v10, 1);
  uint64_t v11 = __p;
  if (__p)
  {
    uint64_t v12 = (uint64_t)v24;
    size_t v13 = __p;
    if (v24 != __p)
    {
      do
      {
        v12 -= 608;
        sub_575D30((uint64_t)&v25, v12);
      }
      while ((void *)v12 != v11);
      size_t v13 = __p;
    }
    size_t v24 = v11;
    operator delete(v13);
  }
  unint64_t v14 = (char *)v26;
  if (v26)
  {
    double v15 = v27;
    uint64_t v16 = v26;
    if (v27 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30((uint64_t)&v28, (uint64_t)v15);
      }
      while (v15 != v14);
      uint64_t v16 = v26;
    }
    double v27 = v14;
    operator delete(v16);
  }
  uint64_t v17 = (char *)v29;
  if (v29)
  {
    long long v18 = v30;
    long long v19 = v29;
    if (v30 != v29)
    {
      do
      {
        v18 -= 608;
        sub_575D30((uint64_t)&v31, (uint64_t)v18);
      }
      while (v18 != v17);
      long long v19 = v29;
    }
    double v30 = v17;
    operator delete(v19);
  }
  uint64_t v20 = (uint64_t)v32;
  if (v32)
  {
    uint64_t v21 = (uint64_t)v33;
    long long v22 = v32;
    if (v33 != v32)
    {
      do
      {
        v21 -= 608;
        sub_575D30((uint64_t)&v34, v21);
      }
      while (v21 != v20);
      long long v22 = v32;
    }
    unint64_t v33 = (unsigned char *)v20;
    operator delete(v22);
  }
}

void sub_5CD8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_5919CC((void **)va);
  sub_5919CC((void **)va1);
  sub_5919CC((void **)(v6 - 64));
  sub_5919CC(v5);
  _Unwind_Resume(a1);
}

void sub_5CD90C(_Unwind_Exception *a1)
{
  sub_5919CC((void **)(v2 - 64));
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CD92C(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CD940(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)a1
    || *(unsigned char *)(a1 + 1)
    || *(unsigned char *)(a1 + 2)
    || *(unsigned char *)(a1 + 3)
    || *(unsigned char *)(a1 + 4)
    || *(unsigned char *)(a1 + 5)
    || *(unsigned char *)(a1 + 9)
    || *(unsigned char *)(a1 + 13))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = (uint64_t)(a2[134] - a2[133]) >> 5;
    uint64_t v7 = 0x2FC962FC962FC963 * v6 - 1;
    if (0x2FC962FC962FC963 * v6 != 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = 584;
      while (1)
      {
        unint64_t v36 = v10;
        uint64_t v12 = a2[133];
        sub_5CFA18((unsigned char *)a1, v10, a2, (uint64_t)&v34);
        if (!v35) {
          goto LABEL_13;
        }
        if (v34 > 0x13) {
          unsigned int v13 = 0;
        }
        else {
          unsigned int v13 = dword_20E8688[v34];
        }
        sub_524BB4(v13, (uint64_t)v37);
        if (!v35)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11);
            goto LABEL_25;
          case 3u:
          case 4u:
          case 5u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 16);
            goto LABEL_25;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
            uint64_t v15 = *(void *)(v12 + v11 - 560);
            break;
          case 0x13u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 8);
LABEL_25:
            unint64_t v18 = *v16;
            if (v18 >= v17) {
              uint64_t v15 = v17;
            }
            else {
              uint64_t v15 = v18;
            }
            break;
          default:
            uint64_t v15 = -1;
            break;
        }
        uint64_t v19 = sub_46CE10(a2, v9, 1, v15, 0, v14);
        v32[0] = &v34;
        v32[1] = a2;
        uint64_t v33 = v19 + v8;
        _OWORD v32[2] = &v36;
        if (!v35)
        {
          unint64_t v26 = __cxa_allocate_exception(8uLL);
          *unint64_t v26 = &off_2439078;
        }
        sub_5CFC60(a1, (void *)v34, a2, v15, 0, (uint64_t)v32, (uint64_t)v29);
        if (!v35)
        {
          double v27 = __cxa_allocate_exception(8uLL);
          *double v27 = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            int v20 = *(_DWORD *)(a1 + 56);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            int v20 = *(_DWORD *)(a1 + 60);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 7u:
          case 0x11u:
            int v20 = *(_DWORD *)(a1 + 72);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 8u:
          case 0x12u:
            int v20 = *(_DWORD *)(a1 + 68);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 9u:
          case 0xAu:
          case 0xBu:
            int v20 = *(_DWORD *)(a1 + 40);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xCu:
            int v20 = *(_DWORD *)(a1 + 48);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xDu:
            int v20 = *(_DWORD *)(a1 + 44);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xEu:
            int v20 = *(_DWORD *)(a1 + 64);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xFu:
            int v20 = *(_DWORD *)(a1 + 76);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x10u:
            int v20 = *(_DWORD *)(a1 + 80);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x13u:
            int v20 = *(_DWORD *)(a1 + 52);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          default:
            int v20 = -1;
            int v28 = -1;
            unint64_t v21 = a3[1];
            if (v21 < a3[2])
            {
LABEL_32:
              sub_5E1544(v21, v33, (uint64_t)v37, (uint64_t)v29, v20);
              uint64_t v22 = v21 + 608;
              a3[1] = v21 + 608;
            }
            else
            {
LABEL_34:
              uint64_t v22 = sub_5E12B4(a3, &v33, (uint64_t)v37, (uint64_t)v29, &v28);
            }
            a3[1] = v22;
            uint64_t v8 = v33;
            sub_4D4B58((uint64_t)&v31);
            sub_4D4B58((uint64_t)&v30);
            sub_4D4B58((uint64_t)v29);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_37:
                int v23 = v41;
                if (v41 == 1) {
                  goto LABEL_43;
                }
                goto LABEL_38;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_37;
            }
            operator delete(v42);
            int v23 = v41;
            if (v41 == 1)
            {
LABEL_43:
              size_t v24 = v38;
              if (v38)
              {
                BOOL v39 = v38;
                goto LABEL_11;
              }
              goto LABEL_12;
            }
LABEL_38:
            if (!v23 && v40 < 0)
            {
              size_t v24 = v38;
LABEL_11:
              operator delete(v24);
            }
LABEL_12:
            uint64_t v9 = v15;
LABEL_13:
            ++v10;
            v11 += 2400;
            if (v7 == v10) {
              return;
            }
            break;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_5CDE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 + 8) = v6;
  sub_5D0144((uint64_t)va);
  sub_4D9814(v7 - 208);
  sub_5919CC((void **)v5);
  _Unwind_Resume(a1);
}

void sub_5CDED8(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 208);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CDF98(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 6))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  int v51 = 0;
  size_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v5 = a2[1490];
  uint64_t v6 = a2[1491];
  v43[0] = &v51;
  if (v5 == v6)
  {
    uint64_t v9 = 0;
    goto LABEL_65;
  }
  do
  {
    if (*(_DWORD *)(v5 + 16) == 3 && *(_DWORD *)(v5 + 40) == 0) {
      sub_5E15F4(v43, (_OWORD *)v5);
    }
    v5 += 48;
  }
  while (v5 != v6);
  uint64_t v9 = v52;
  if (v51 == v52)
  {
LABEL_65:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!v9) {
      return;
    }
    goto LABEL_66;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  double v48 = 0;
  unint64_t v10 = sub_46C760(a2);
  if (v10)
  {
    for (unint64_t i = 0; i != v10; ++i)
    {
      sub_29603C((void **)&v48, &v47);
      uint64_t v13 = sub_46CCC8(a2, i, v12);
      v47 += v13;
    }
  }
  double v14 = v51;
  uint64_t v15 = v52;
  while (v14 != v15)
  {
    double v16 = *(double *)v14;
    if (*(double *)v14 <= 0.0) {
      unint64_t v17 = dword_8;
    }
    else {
      unint64_t v17 = dword_4 + 3;
    }
    if (*(double *)v14 <= 0.0) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 3;
    }
    sub_524BB4(v18, (uint64_t)v54);
    uint64_t v19 = (uint64_t *)(v14 + 24);
    if (v49 == v48)
    {
      unint64_t v21 = v48;
    }
    else
    {
      unint64_t v20 = (v49 - v48) >> 3;
      unint64_t v21 = v48;
      do
      {
        unint64_t v22 = v20 >> 1;
        int v23 = (uint64_t *)&v21[8 * (v20 >> 1)];
        uint64_t v25 = *v23;
        size_t v24 = v23 + 1;
        v20 += ~(v20 >> 1);
        if (*v19 < v25) {
          unint64_t v20 = v22;
        }
        else {
          unint64_t v21 = v24;
        }
      }
      while (v20);
    }
    uint64_t v26 = (v21 - v48 - 8) >> 3;
    v46[0] = (double *)a1;
    v46[1] = (double *)v14;
    double v27 = (void *)sub_46C8EC(a2, v26);
    int v28 = (uint64_t *)sub_5D0188(&v48, v26);
    uint64_t v30 = (unsigned __int16 *)(*v27 - *(int *)*v27);
    double v31 = 0.0;
    if (*v30 >= 9u)
    {
      uint64_t v32 = v30[4];
      if (v32)
      {
        LODWORD(v29) = *(_DWORD *)(*v27 + v32);
        double v31 = (double)v29;
      }
    }
    uint64_t v33 = *v28;
    double v34 = v31 * ((double)sub_46CACC((uint64_t)a2, v26) / 1000000000.0);
    if (v34 >= 0.0)
    {
      if (v34 >= 4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v35 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      if (v34 <= -4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
    }
    double v34 = (double)(v35 >> 1);
LABEL_44:
    sub_5D0398(a1, v17, a2, v26, *v19 - v33 + (uint64_t)v34, v46, (uint64_t)v43);
    uint64_t v36 = 68;
    if (v16 > 0.0) {
      uint64_t v36 = 72;
    }
    int v37 = *(_DWORD *)(a1 + v36);
    int v42 = v37;
    unint64_t v38 = a3[1];
    if (v38 >= a3[2])
    {
      uint64_t v39 = sub_5E12B4(a3, (uint64_t *)v14 + 3, (uint64_t)v54, (uint64_t)v43, &v42);
    }
    else
    {
      sub_5E1544(a3[1], *v19, (uint64_t)v54, (uint64_t)v43, v37);
      uint64_t v39 = v38 + 608;
      a3[1] = v38 + 608;
    }
    a3[1] = v39;
    sub_4D4B58((uint64_t)&v45);
    sub_4D4B58((uint64_t)&v44);
    sub_4D4B58((uint64_t)v43);
    if (v62 < 0)
    {
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_51:
        int v40 = v58;
        if (v58 != 1) {
          goto LABEL_52;
        }
        goto LABEL_57;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(v59);
    int v40 = v58;
    if (v58 != 1)
    {
LABEL_52:
      if (v40 || (v57 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      int v41 = v55;
      goto LABEL_17;
    }
LABEL_57:
    int v41 = v55;
    if (!v55) {
      goto LABEL_18;
    }
    long long v56 = v55;
LABEL_17:
    operator delete(v41);
LABEL_18:
    v14 += 48;
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  uint64_t v9 = v51;
  if (v51)
  {
LABEL_66:
    size_t v52 = v9;
    operator delete(v9);
  }
}

void sub_5CE394(_Unwind_Exception *a1)
{
  int v4 = (void *)v2[3];
  if (v4)
  {
    v2[4] = v4;
    operator delete(v4);
  }
  sub_5919CC(v1);
  uint64_t v5 = (void *)v2[6];
  if (v5)
  {
    v2[7] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_5CE400()
{
}

void sub_5CE408()
{
}

void sub_5CE410()
{
}

void sub_5CE418()
{
  if (!*(void *)(v0 + 48)) {
    JUMPOUT(0x5CE3F8);
  }
  JUMPOUT(0x5CE3F0);
}

unint64_t sub_5CE428@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(result + 12);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v30 = 0;
    double result = sub_46C760(a2);
    unint64_t v7 = result;
    if (result)
    {
      BOOL v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        unint64_t v10 = (int **)sub_46C8EC(a2, v9);
        if (!v8) {
          break;
        }
        double v12 = (unsigned __int16 *)((char *)*v10 - **v10);
        unsigned int v13 = *v12;
        if (*((unsigned char *)v10 + 38))
        {
          if (v13 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v14 = v12[35];
          if (!v14) {
            goto LABEL_24;
          }
          int v15 = 0x10000;
        }
        else
        {
          if (v13 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v14 = v12[35];
          if (!v14) {
            goto LABEL_24;
          }
          int v15 = 0x8000;
        }
        BOOL v8 = (*(int *)((char *)*v10 + v14) & v15) != 0;
LABEL_25:
        double result = sub_46CCC8(a2, v9, v11);
        v30 += result;
        if (v7 == ++v9) {
          return result;
        }
      }
      if (*(unsigned char *)(v6 + 12))
      {
        double v16 = (char *)*v10;
        unint64_t v17 = (unsigned __int16 *)((char *)*v10 - **v10);
        unsigned int v18 = *v17;
        if (*((unsigned char *)v10 + 38))
        {
          if (v18 >= 0x47)
          {
            unsigned int v19 = v17[35];
            if (v19)
            {
              if ((*(_DWORD *)&v16[v19] & 0x10000) != 0) {
                goto LABEL_22;
              }
            }
          }
        }
        else if (v18 >= 0x47)
        {
          unsigned int v20 = v17[35];
          if (v20)
          {
            if ((*(_DWORD *)&v16[v20] & 0x8000) != 0)
            {
LABEL_22:
              sub_524BB4(6u, (uint64_t)v31);
              sub_5D0A2C(v6, (char *)&dword_C + 1, a2, v9, 0, (uint64_t)v27);
              int v21 = *(_DWORD *)(v6 + 44);
              int v26 = v21;
              unint64_t v22 = a3[1];
              if (v22 >= a3[2])
              {
                uint64_t v23 = sub_5E19F8(a3, &v30, (uint64_t)v31, (uint64_t)v27, &v26);
              }
              else
              {
                sub_5E1544(a3[1], v30, (uint64_t)v31, (uint64_t)v27, v21);
                uint64_t v23 = v22 + 608;
                a3[1] = v22 + 608;
              }
              a3[1] = v23;
              sub_4D4B58((uint64_t)&v29);
              sub_4D4B58((uint64_t)&v28);
              sub_4D4B58((uint64_t)v27);
              if (v39 < 0)
              {
                operator delete(v38);
                if (v37 < 0) {
                  goto LABEL_35;
                }
LABEL_30:
                int v24 = v35;
                if (v35 != 1) {
                  goto LABEL_31;
                }
LABEL_36:
                uint64_t v25 = v32;
                if (v32)
                {
                  uint64_t v33 = v32;
LABEL_38:
                  operator delete(v25);
                }
              }
              else
              {
                if ((v37 & 0x80000000) == 0) {
                  goto LABEL_30;
                }
LABEL_35:
                operator delete(v36);
                int v24 = v35;
                if (v35 == 1) {
                  goto LABEL_36;
                }
LABEL_31:
                if (!v24 && v34 < 0)
                {
                  uint64_t v25 = v32;
                  goto LABEL_38;
                }
              }
              BOOL v8 = 1;
              goto LABEL_25;
            }
          }
        }
      }
LABEL_24:
      BOOL v8 = 0;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_5CE6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5CE6FC(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CE710(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 200);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CE72C(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CE740(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CE754(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5CE768(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 15);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v4) {
    return;
  }
  uint64_t v38 = 0;
  sub_524BB4(0xAu, (uint64_t)v39);
  int v35 = 0;
  uint64_t v36 = 0;
  char v37 = 0;
  unint64_t v7 = *(unsigned char **)(a2 + 11664);
  BOOL v8 = *(unsigned char **)(a2 + 11672);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v10 = v9 / 24;
    if ((unint64_t)(v9 / 24) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    double v11 = (char *)operator new(v9);
    int v35 = v11;
    double v12 = &v11[24 * v10];
    char v37 = v12;
    memcpy(v11, v7, v9);
    uint64_t v36 = v12;
    if (v12 - 24 != v11)
    {
      uint64_t v13 = 24 * v10;
      uint64_t v14 = 24;
      do
      {
        if ((v11[v13 - 48] & 0x68) != 0 && (v11[v13 - 24] & 0x68) != 0)
        {
          int v15 = &v11[v13];
          *((void *)v15 - 4) = *(void *)&v11[v13 - 8] + *(void *)&v11[v13 - 32];
          *((void *)v15 - 2) = -1;
        }
        v11 -= 24;
        v14 += 24;
      }
      while (v13 != v14);
      double v11 = v35;
      double v12 = v36;
    }
    if (v11 != v12)
    {
      double v16 = v11;
      while (*((void *)v16 + 1) != -1)
      {
        v16 += 24;
        if (v16 == v12) {
          goto LABEL_25;
        }
      }
      if (v16 != v12)
      {
        unint64_t v17 = v16 + 24;
        if (v16 + 24 != v12)
        {
          do
          {
            if (*((void *)v17 + 1) != -1)
            {
              long long v18 = *(_OWORD *)v17;
              *((void *)v16 + 2) = *((void *)v17 + 2);
              *(_OWORD *)double v16 = v18;
              v16 += 24;
            }
            v17 += 24;
          }
          while (v17 != v12);
          double v11 = v35;
          double v12 = v36;
        }
      }
      if (v16 != v12) {
        double v12 = v16;
      }
LABEL_25:
      if (v11 != v12)
      {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFELL;
        unsigned int v20 = v11;
        do
        {
          int v24 = *(_DWORD *)v20 & 0x68;
          if (v24) {
            BOOL v25 = v19 <= *(void *)(a1 + 32);
          }
          else {
            BOOL v25 = 1;
          }
          if (v25)
          {
            BOOL v21 = v19 < 0x7FFFFFFFFFFFFFFELL && v24 == 0;
            uint64_t v22 = *((void *)v20 + 2);
            if (v21) {
              uint64_t v23 = *((void *)v20 + 2);
            }
            else {
              uint64_t v23 = 0;
            }
            v19 += v23;
          }
          else
          {
            uint64_t v22 = *((void *)v20 + 2);
            if (v22 > *(void *)(a1 + 24))
            {
              memset(v34, 0, 160);
              memset(v33, 0, sizeof(v33));
              memset(v32, 0, sizeof(v32));
              sub_5F3B34((uint64_t)v32);
              sub_5F3B34((uint64_t)v33);
              sub_5F3B34((uint64_t)v34);
              int v26 = *(_DWORD *)(a1 + 80);
              int v31 = v26;
              unint64_t v27 = a3[1];
              if (v27 >= a3[2])
              {
                uint64_t v28 = sub_5E1C88(a3, &v38, (uint64_t)v39, (uint64_t)v32, &v31);
              }
              else
              {
                sub_5E1544(a3[1], v38, (uint64_t)v39, (uint64_t)v32, v26);
                uint64_t v28 = v27 + 608;
                a3[1] = v27 + 608;
              }
              a3[1] = v28;
              sub_4D4B58((uint64_t)v34);
              sub_4D4B58((uint64_t)v33);
              sub_4D4B58((uint64_t)v32);
              uint64_t v19 = 0;
              uint64_t v22 = *((void *)v20 + 2);
            }
          }
          v38 += v22;
          v20 += 24;
        }
        while (v20 != v12);
      }
      double v12 = v11;
    }
    if (v12)
    {
      uint64_t v36 = v12;
      operator delete(v12);
    }
  }
  if ((v47 & 0x80000000) == 0)
  {
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_54:
    operator delete(v44);
    int v29 = v43;
    if (v43 != 1) {
      goto LABEL_50;
    }
LABEL_55:
    uint64_t v30 = v40;
    if (!v40) {
      return;
    }
    int v41 = v40;
    goto LABEL_57;
  }
  operator delete(v46);
  if (v45 < 0) {
    goto LABEL_54;
  }
LABEL_49:
  int v29 = v43;
  if (v43 == 1) {
    goto LABEL_55;
  }
LABEL_50:
  if (!v29 && v42 < 0)
  {
    uint64_t v30 = v40;
LABEL_57:
    operator delete(v30);
  }
}

void sub_5CEB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v5;
  sub_5D0144((uint64_t)va);
  if (v4)
  {
    *(void *)(v6 + 496) = v4;
    operator delete(v4);
  }
  sub_4D9814(v7 - 216);
  sub_5919CC((void **)v3);
  _Unwind_Resume(a1);
}

void sub_5CEBDC()
{
  if (!v0) {
    JUMPOUT(0x5CEBC4);
  }
  JUMPOUT(0x5CEBB8);
}

double sub_5CEBE8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void **)(v3 + 8);
  if (*(void **)v3 != v6)
  {
    do
    {
      sub_5CD634(a1, v5, (uint64_t *)&v14);
      uint64_t v8 = v5[1494];
      if (v8)
      {
        uint64_t v9 = v5[1495];
        uint64_t v7 = (void *)v5[1494];
        if (v9 != v8)
        {
          uint64_t v10 = v9 - 592;
          while (1)
          {
            sub_4D4B58(v10 + 432);
            sub_4D4B58(v10 + 272);
            sub_4D4B58(v10 + 112);
            if (*(char *)(v10 + 95) < 0)
            {
              operator delete(*(void **)(v10 + 72));
              if ((*(char *)(v10 + 63) & 0x80000000) == 0)
              {
LABEL_13:
                int v13 = *(_DWORD *)(v10 + 24);
                if (v13 != 1) {
                  goto LABEL_14;
                }
                goto LABEL_19;
              }
            }
            else if ((*(char *)(v10 + 63) & 0x80000000) == 0)
            {
              goto LABEL_13;
            }
            operator delete(*(void **)(v10 + 40));
            int v13 = *(_DWORD *)(v10 + 24);
            if (v13 != 1)
            {
LABEL_14:
              if (v13 || (*(char *)(v10 + 23) & 0x80000000) == 0) {
                goto LABEL_10;
              }
              double v11 = *(void **)v10;
              goto LABEL_9;
            }
LABEL_19:
            double v11 = *(void **)v10;
            if (!*(void *)v10) {
              goto LABEL_10;
            }
            *(void *)(v10 + 8) = v11;
LABEL_9:
            operator delete(v11);
LABEL_10:
            uint64_t v12 = v10 - 16;
            v10 -= 608;
            if (v12 == v8)
            {
              uint64_t v7 = (void *)v5[1494];
              break;
            }
          }
        }
        v5[1495] = v8;
        operator delete(v7);
      }
      double result = *(double *)&v14;
      *((_OWORD *)v5 + 747) = v14;
      v5[1496] = v15;
      v5 += 1541;
    }
    while (v5 != v6);
  }
  return result;
}

_DWORD *sub_5CED30(_DWORD *a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "cycling_dismount");
  *a1 = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "cycling_shared_with_pedestrians");
  a1[1] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "cycling_remount");
  a1[2] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "elevator");
  a1[3] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "escalator");
  a1[4] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "stairs");
  a1[5] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "ferry");
  a1[6] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "steep_downhill");
  a1[7] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "steep_uphill");
  a1[8] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "toll");
  a1[9] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "bike_lane");
  a1[10] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5CF048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5CF08C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_5CF11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5CF14C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "enable_elevator");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v8;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_escalator");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v9;
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "enable_stairs");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v10;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_stairs_down");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v11;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_stairs_up");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v12;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_stairs_bridge");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v13;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_steep_hills");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 6) = v14;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_slope_display");
  if (sub_29D62C(a2, (uint64_t)__p))
  {
    char v15 = 1;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  char v15 = sub_375C30(a3);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  *(unsigned char *)(a1 + 7) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_simplified_cycling_feature_types");
  BOOL v16 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v16;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_cycling_dismount");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v17;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_cycling_dismount_against_traffic");
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v18;
  strcpy((char *)__p, "enable_cycling_remount");
  HIBYTE(__p[2]) = 22;
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 11) = v19;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "enable_cycling_shared_with_pedestrians");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 12) = v20;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ferries");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 13) = v21;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "enable_tolls");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 14) = v22;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_bike_lanes");
  BOOL v23 = sub_29D62C(a2, (uint64_t)__p);
  if (*(unsigned char *)(a4 + 1424)) {
    char v24 = 1;
  }
  else {
    char v24 = v23;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 15) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "max_distance_to_cross_street_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_bike_lane_observation_length");
  double v25 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v25 >= 0.0)
  {
    double v26 = v25;
    if (v25 >= 4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25) + 1;
  }
  else
  {
    double v26 = v25;
    if (v25 <= -4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25);
    if (v27 >= 1) {
      --v27;
    }
  }
  double v26 = (double)(v27 >> 1);
LABEL_49:
  if (v26 < 9.22337204e18)
  {
    if (v25 >= 0.0)
    {
      if (v25 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25) + 1;
    }
    else
    {
      if (v25 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v25 = (double)(v28 >> 1);
LABEL_60:
    *(void *)(a1 + 24) = (uint64_t)v25;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  operator delete(__p[0]);
LABEL_62:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "min_bike_lane_observations_gap_length");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_70:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_81:
    *(void *)(a1 + 32) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_82:
  operator delete(__p[0]);
LABEL_83:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "display_priority");
  uint64_t v33 = sub_5D58C(a2, (uint64_t)__p);
  if (*((_DWORD *)v33 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_5CED30((_DWORD *)(a1 + 40), (void *)*v33);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5CF9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int **sub_5CFA18@<X0>(unsigned char *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  double result = (int **)sub_4A5E10(a3 + 133, a2);
  if (*a1) {
    BOOL v8 = (int *)((char *)result[72] + 1) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    int v14 = 19;
LABEL_22:
    *(_DWORD *)a4 = v14;
    *(unsigned char *)(a4 + 4) = 1;
    return result;
  }
  if (a1[13]) {
    BOOL v9 = *((_DWORD *)result + 40) == 22;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    int v14 = 14;
    goto LABEL_22;
  }
  if (a1[1])
  {
    BOOL v10 = result[73];
    int v11 = *((_DWORD *)result + 156);
    if (v10 != (int *)-1 && v11 == 1)
    {
      *(_DWORD *)a4 = 1;
      *(unsigned char *)(a4 + 4) = 1;
      return result;
    }
    if (v10 != (int *)-1 && v11 == 2)
    {
      int v14 = 2;
      goto LABEL_22;
    }
    if (v10 != (int *)-1)
    {
      *(_DWORD *)a4 = 0;
      *(unsigned char *)(a4 + 4) = 1;
      return result;
    }
  }
  int v15 = *((_DWORD *)result + 557);
  if (a1[5] && v15 == 1)
  {
    int v14 = 6;
    goto LABEL_22;
  }
  if (a1[2] && result[71] != (int *)-1 && (!a1[5] || !v15))
  {
    int v21 = *((_DWORD *)result + 156);
    if (a1[4] && v21 == 1)
    {
      int v14 = 4;
    }
    else if (a1[3] && v21 == 2)
    {
      int v14 = 5;
    }
    else
    {
      int v14 = 3;
    }
    goto LABEL_22;
  }
  if (a1[9] && *((unsigned char *)result + 649))
  {
    if (a1[10])
    {
      double result = (int **)sub_46C8EC(a3, (uint64_t)result[3]);
      BOOL v16 = (char *)*result;
      BOOL v17 = (unsigned __int16 *)((char *)*result - **result);
      unsigned int v18 = *v17;
      if (*((unsigned char *)result + 38))
      {
        if (v18 >= 0x47)
        {
          unsigned int v19 = v17[35];
          if (v17[35])
          {
            int v20 = 1;
            goto LABEL_52;
          }
        }
      }
      else if (v18 >= 0x47)
      {
        unsigned int v19 = v17[35];
        if (v17[35])
        {
          int v20 = 2;
LABEL_52:
          if ((*(_DWORD *)&v16[v19] & v20) != 0)
          {
            uint64_t v22 = v17[5];
            if (v22)
            {
              int v23 = *(_DWORD *)&v16[v22];
              int v14 = 11;
              if ((v23 & 4) == 0 && (v23 & 3) != 3)
              {
                if ((v23 ^ ((v23 & 2) >> 1))) {
                  int v14 = 10;
                }
                else {
                  int v14 = 11;
                }
              }
            }
            else
            {
              int v14 = 11;
            }
            goto LABEL_22;
          }
        }
      }
    }
    int v14 = 9;
    goto LABEL_22;
  }
  if (a1[11] && *((unsigned __int8 *)result + 648) | *((unsigned __int8 *)result + 650))
  {
    int v14 = 12;
    goto LABEL_22;
  }
  *(void *)a4 = 0;
  return result;
}

uint64_t sub_5CFC60@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v54);
  sub_5F3B34((uint64_t)&v69);
  sub_5F3B34((uint64_t)&v84);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v53;
  if ((v53 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    int v15 = sub_8D7730(*(void *)(a1 + 104), (uint64_t)__p);
    sub_5F3D7C((uint64_t)v51, (uint64_t)v15, (__int16 *)(*(void *)(a1 + 88) + 1177));
    sub_4D90B4((uint64_t)&v54, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    sub_5D0E4C(a1, (int)a2, a3, a4, a5, (uint64_t)v51);
    sub_4D90B4((uint64_t)&v69, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    if (*(unsigned char *)(*(void *)a6 + 4) && **(_DWORD **)a6 == 9)
    {
      uint64_t v16 = *(void *)(a6 + 8);
      uint64_t v17 = **(void **)(a6 + 16);
      uint64_t v18 = *(void *)(v16 + 1064);
      unint64_t v19 = 0x2FC962FC962FC963 * ((*(void *)(v16 + 1072) - v18) >> 5);
      BOOL v20 = v17 + 1 >= v19;
      if (v17 + 1 > v19) {
        unint64_t v21 = v17 + 1;
      }
      else {
        unint64_t v21 = v19;
      }
      uint64_t v22 = 0;
      if (!v20)
      {
        uint64_t v23 = v21 - v17 - 2;
        uint64_t v24 = v18 + 2400 * v17 + 2560;
        do
        {
          v22 += *(void *)(v24 + 712);
          if (*(unsigned char *)(v24 + 488) || !v23) {
            break;
          }
          int v25 = *(unsigned __int8 *)(v24 + 490);
          int v26 = *(_DWORD *)v24;
          --v23;
          v24 += 2400;
        }
        while (!v25 && v26 != 22);
      }
      v51[0] = v22;
      v99[0] = 1;
      sub_5F6090((uint64_t *)&v69, (uint64_t)&qword_25828F8, v51, v99);
    }
    *(_OWORD *)a7 = v54;
    uint64_t v28 = v57;
    *(void *)(a7 + 16) = v55;
    long long v54 = 0uLL;
    *(_OWORD *)(a7 + 24) = v56;
    *(void *)(a7 + 40) = v28;
    uint64_t v55 = 0;
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    *(_OWORD *)(a7 + 48) = v58;
    uint64_t v29 = v61;
    *(void *)(a7 + 64) = v59;
    long long v58 = 0uLL;
    *(_OWORD *)(a7 + 72) = v60;
    uint64_t v59 = 0;
    long long v60 = 0uLL;
    uint64_t v61 = 0;
    uint64_t v30 = v62;
    *(void *)(a7 + 88) = v29;
    *(void *)(a7 + 96) = v30;
    LODWORD(v30) = v63;
    *(unsigned char *)(a7 + 108) = v64;
    *(_DWORD *)(a7 + 104) = v30;
    long long v31 = v65;
    uint64_t v32 = v68;
    *(void *)(a7 + 128) = v66;
    *(_OWORD *)(a7 + 112) = v31;
    uint64_t v62 = 0;
    long long v65 = 0uLL;
    long long v33 = v67;
    *(void *)(a7 + 152) = v32;
    *(_OWORD *)(a7 + 136) = v33;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    long long v67 = 0uLL;
    *(_OWORD *)(a7 + 160) = v69;
    uint64_t v34 = a7 + 160;
    uint64_t v35 = v72;
    *(void *)(v34 + 16) = v70;
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    *(_OWORD *)(v34 + 24) = v71;
    *(void *)(v34 + 40) = v35;
    long long v71 = 0uLL;
    *(_OWORD *)(v34 + 48) = v73;
    *(void *)(v34 + 64) = v74;
    uint64_t v74 = 0;
    uint64_t v72 = 0;
    long long v73 = 0uLL;
    *(_OWORD *)(v34 + 72) = v75;
    long long v75 = 0uLL;
    uint64_t v36 = v77;
    *(void *)(v34 + 88) = v76;
    *(void *)(v34 + 96) = v36;
    LODWORD(v36) = v78;
    *(unsigned char *)(v34 + 108) = v79;
    *(_DWORD *)(v34 + 104) = v36;
    long long v37 = v80;
    uint64_t v38 = v83;
    *(void *)(v34 + 128) = v81;
    *(_OWORD *)(v34 + 112) = v37;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    long long v80 = 0uLL;
    uint64_t v81 = 0;
    long long v39 = v82;
    *(void *)(v34 + 152) = v38;
    *(_OWORD *)(v34 + 136) = v39;
    long long v82 = 0uLL;
    uint64_t v83 = 0;
    *(_OWORD *)(v34 + 160) = v84;
    long long v84 = 0uLL;
    uint64_t v40 = v85;
    uint64_t v41 = v86;
    uint64_t v85 = 0;
    *(void *)(v34 + 176) = v40;
    *(void *)(v34 + 184) = v41;
    long long v42 = v87;
    long long v43 = v88;
    uint64_t v86 = 0;
    *(void *)&long long v87 = 0;
    *(_OWORD *)(v34 + 192) = v42;
    *(_OWORD *)(v34 + 208) = v43;
    *((void *)&v87 + 1) = 0;
    long long v88 = 0uLL;
    uint64_t v44 = v89;
    uint64_t v45 = v90;
    uint64_t v89 = 0;
    *(void *)(v34 + 224) = v44;
    *(void *)(v34 + 232) = v45;
    *(_OWORD *)(v34 + 240) = v91;
    uint64_t v90 = 0;
    long long v91 = 0uLL;
    uint64_t v46 = v92;
    uint64_t v92 = 0;
    *(void *)(v34 + 256) = v46;
    LODWORD(v46) = v93;
    *(unsigned char *)(v34 + 268) = v94;
    *(_DWORD *)(v34 + 264) = v46;
    long long v47 = v95;
    uint64_t v48 = v98;
    *(void *)(v34 + 288) = v96;
    *(_OWORD *)(v34 + 272) = v47;
    long long v95 = 0uLL;
    long long v49 = v97;
    *(void *)(v34 + 312) = v48;
    *(_OWORD *)(v34 + 296) = v49;
    long long v97 = 0uLL;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v53 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  return sub_4D4B58((uint64_t)&v54);
}

void sub_5D00B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D0114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D0130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_5D0144(uint64_t a1)
{
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

uint64_t sub_5D0188(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    BOOL v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v10 = &v15;
    }
    else {
      BOOL v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_5D02B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_5D0398@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v42);
  sub_5F3B34((uint64_t)&v57);
  sub_5F3B34((uint64_t)&v72);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v41;
  if ((v41 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    std::string v15 = sub_8D7730(*(void *)(a1 + 104), (uint64_t)__p);
    sub_5F3D7C((uint64_t)v39, (uint64_t)v15, (__int16 *)(*(void *)(a1 + 88) + 1177));
    sub_4D90B4((uint64_t)&v42, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5D0E4C(a1, (int)a2, a3, a4, a5, (uint64_t)v39);
    sub_4D90B4((uint64_t)&v57, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5E1740(a6, (uint64_t)&v42);
    *(_OWORD *)a7 = v42;
    uint64_t v16 = v45;
    *(void *)(a7 + 16) = v43;
    long long v42 = 0uLL;
    *(_OWORD *)(a7 + 24) = v44;
    *(void *)(a7 + 40) = v16;
    uint64_t v43 = 0;
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    *(_OWORD *)(a7 + 48) = v46;
    uint64_t v17 = v49;
    *(void *)(a7 + 64) = v47;
    long long v46 = 0uLL;
    *(_OWORD *)(a7 + 72) = v48;
    uint64_t v47 = 0;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    uint64_t v18 = v50;
    *(void *)(a7 + 88) = v17;
    *(void *)(a7 + 96) = v18;
    LODWORD(v18) = v51;
    *(unsigned char *)(a7 + 108) = v52;
    *(_DWORD *)(a7 + 104) = v18;
    long long v19 = v53;
    uint64_t v20 = v56;
    *(void *)(a7 + 128) = v54;
    *(_OWORD *)(a7 + 112) = v19;
    uint64_t v50 = 0;
    long long v53 = 0uLL;
    long long v21 = v55;
    *(void *)(a7 + 152) = v20;
    *(_OWORD *)(a7 + 136) = v21;
    uint64_t v56 = 0;
    uint64_t v54 = 0;
    long long v55 = 0uLL;
    *(_OWORD *)(a7 + 160) = v57;
    uint64_t v22 = a7 + 160;
    uint64_t v23 = v60;
    *(void *)(v22 + 16) = v58;
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    *(_OWORD *)(v22 + 24) = v59;
    *(void *)(v22 + 40) = v23;
    long long v59 = 0uLL;
    *(_OWORD *)(v22 + 48) = v61;
    *(void *)(v22 + 64) = v62;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    long long v61 = 0uLL;
    *(_OWORD *)(v22 + 72) = v63;
    long long v63 = 0uLL;
    uint64_t v24 = v65;
    *(void *)(v22 + 88) = v64;
    *(void *)(v22 + 96) = v24;
    LODWORD(v24) = v66;
    *(unsigned char *)(v22 + 108) = v67;
    *(_DWORD *)(v22 + 104) = v24;
    long long v25 = v68;
    uint64_t v26 = v71;
    *(void *)(v22 + 128) = v69;
    *(_OWORD *)(v22 + 112) = v25;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    long long v27 = v70;
    *(void *)(v22 + 152) = v26;
    *(_OWORD *)(v22 + 136) = v27;
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    *(_OWORD *)(v22 + 160) = v72;
    long long v72 = 0uLL;
    uint64_t v28 = v73;
    uint64_t v29 = v74;
    uint64_t v73 = 0;
    *(void *)(v22 + 176) = v28;
    *(void *)(v22 + 184) = v29;
    long long v30 = v75;
    long long v31 = v76;
    uint64_t v74 = 0;
    *(void *)&long long v75 = 0;
    *(_OWORD *)(v22 + 192) = v30;
    *(_OWORD *)(v22 + 208) = v31;
    *((void *)&v75 + 1) = 0;
    long long v76 = 0uLL;
    uint64_t v32 = v77;
    uint64_t v33 = v78;
    uint64_t v77 = 0;
    *(void *)(v22 + 224) = v32;
    *(void *)(v22 + 232) = v33;
    *(_OWORD *)(v22 + 240) = v79;
    uint64_t v78 = 0;
    long long v79 = 0uLL;
    uint64_t v34 = v80;
    uint64_t v80 = 0;
    *(void *)(v22 + 256) = v34;
    LODWORD(v34) = v81;
    *(unsigned char *)(v22 + 268) = v82;
    *(_DWORD *)(v22 + 264) = v34;
    long long v35 = v83;
    uint64_t v36 = v86;
    *(void *)(v22 + 288) = v84;
    *(_OWORD *)(v22 + 272) = v35;
    long long v83 = 0uLL;
    long long v37 = v85;
    *(void *)(v22 + 312) = v36;
    *(_OWORD *)(v22 + 296) = v37;
    long long v85 = 0uLL;
    uint64_t v84 = 0;
    uint64_t v86 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v41 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v72);
  sub_4D4B58((uint64_t)&v57);
  return sub_4D4B58((uint64_t)&v42);
}

void sub_5D0734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D07C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a2 + 11608);
  uint64_t v5 = *(void *)(a2 + 11616);
  if (v4 != v5)
  {
    for (uint64_t i = v4 + 136; i - 136 != v5; i += 168)
    {
      if (!*(unsigned char *)(i - 8)) {
        continue;
      }
      uint64_t v17 = *(void *)(i - 104);
      sub_524C68(i, (uint64_t)v18);
      memset(v16, 0, sizeof(v16));
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      sub_5F3B34((uint64_t)v14);
      sub_5F3B34((uint64_t)v15);
      sub_5F3B34((uint64_t)v16);
      int v9 = *(_DWORD *)(a1 + 76);
      int v13 = v9;
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t v11 = sub_5E1F18(a3, &v17, (uint64_t)v18, (uint64_t)v14, &v13);
      }
      else
      {
        sub_5E1544(a3[1], v17, (uint64_t)v18, (uint64_t)v14, v9);
        uint64_t v11 = v10 + 608;
        a3[1] = v10 + 608;
      }
      a3[1] = v11;
      sub_4D4B58((uint64_t)v16);
      sub_4D4B58((uint64_t)v15);
      sub_4D4B58((uint64_t)v14);
      if (v26 < 0)
      {
        operator delete(v25);
        if ((v24 & 0x80000000) == 0)
        {
LABEL_13:
          int v12 = v22;
          if (v22 != 1) {
            goto LABEL_17;
          }
          goto LABEL_3;
        }
      }
      else if ((v24 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v23);
      int v12 = v22;
      if (v22 != 1)
      {
LABEL_17:
        if (v12 || (v21 & 0x80000000) == 0) {
          continue;
        }
        BOOL v8 = v19;
        goto LABEL_5;
      }
LABEL_3:
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v20 = v19;
LABEL_5:
        operator delete(v8);
      }
    }
  }
}

void sub_5D09C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5D0A18(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5D0A2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_5F3B34((uint64_t)&v40);
  sub_5F3B34((uint64_t)&v55);
  sub_5F3B34((uint64_t)&v70);
  sub_5DB31C(a2, __p);
  unint64_t v12 = v39;
  if ((v39 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v12)
  {
    int v13 = sub_8D7730(*(void *)(a1 + 104), (uint64_t)__p);
    sub_5F3D7C((uint64_t)v37, (uint64_t)v13, (__int16 *)(*(void *)(a1 + 88) + 1177));
    sub_4D90B4((uint64_t)&v40, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    sub_5D0E4C(a1, (int)a2, a3, a4, a5, (uint64_t)v37);
    sub_4D90B4((uint64_t)&v55, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    *(_OWORD *)a6 = v40;
    uint64_t v14 = v43;
    *(void *)(a6 + 16) = v41;
    long long v40 = 0uLL;
    *(_OWORD *)(a6 + 24) = v42;
    *(void *)(a6 + 40) = v14;
    uint64_t v41 = 0;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(_OWORD *)(a6 + 48) = v44;
    uint64_t v15 = v47;
    *(void *)(a6 + 64) = v45;
    long long v44 = 0uLL;
    *(_OWORD *)(a6 + 72) = v46;
    uint64_t v45 = 0;
    long long v46 = 0uLL;
    uint64_t v47 = 0;
    uint64_t v16 = v48;
    *(void *)(a6 + 88) = v15;
    *(void *)(a6 + 96) = v16;
    LODWORD(v16) = v49;
    *(unsigned char *)(a6 + 108) = v50;
    *(_DWORD *)(a6 + 104) = v16;
    long long v17 = v51;
    uint64_t v18 = v54;
    *(void *)(a6 + 128) = v52;
    *(_OWORD *)(a6 + 112) = v17;
    uint64_t v48 = 0;
    long long v51 = 0uLL;
    long long v19 = v53;
    *(void *)(a6 + 152) = v18;
    *(_OWORD *)(a6 + 136) = v19;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    long long v53 = 0uLL;
    *(_OWORD *)(a6 + 160) = v55;
    uint64_t v20 = a6 + 160;
    uint64_t v21 = v58;
    *(void *)(v20 + 16) = v56;
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    *(_OWORD *)(v20 + 24) = v57;
    *(void *)(v20 + 40) = v21;
    long long v57 = 0uLL;
    *(_OWORD *)(v20 + 48) = v59;
    *(void *)(v20 + 64) = v60;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    long long v59 = 0uLL;
    *(_OWORD *)(v20 + 72) = v61;
    long long v61 = 0uLL;
    uint64_t v22 = v63;
    *(void *)(v20 + 88) = v62;
    *(void *)(v20 + 96) = v22;
    LODWORD(v22) = v64;
    *(unsigned char *)(v20 + 108) = v65;
    *(_DWORD *)(v20 + 104) = v22;
    long long v23 = v66;
    uint64_t v24 = v69;
    *(void *)(v20 + 128) = v67;
    *(_OWORD *)(v20 + 112) = v23;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    long long v25 = v68;
    *(void *)(v20 + 152) = v24;
    *(_OWORD *)(v20 + 136) = v25;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    *(_OWORD *)(v20 + 160) = v70;
    long long v70 = 0uLL;
    uint64_t v26 = v71;
    uint64_t v27 = v72;
    uint64_t v71 = 0;
    *(void *)(v20 + 176) = v26;
    *(void *)(v20 + 184) = v27;
    long long v28 = v73;
    long long v29 = v74;
    uint64_t v72 = 0;
    *(void *)&long long v73 = 0;
    *(_OWORD *)(v20 + 192) = v28;
    *(_OWORD *)(v20 + 208) = v29;
    *((void *)&v73 + 1) = 0;
    long long v74 = 0uLL;
    uint64_t v30 = v75;
    uint64_t v31 = v76;
    uint64_t v75 = 0;
    *(void *)(v20 + 224) = v30;
    *(void *)(v20 + 232) = v31;
    *(_OWORD *)(v20 + 240) = v77;
    uint64_t v76 = 0;
    long long v77 = 0uLL;
    uint64_t v32 = v78;
    uint64_t v78 = 0;
    *(void *)(v20 + 256) = v32;
    LODWORD(v32) = v79;
    *(unsigned char *)(v20 + 268) = v80;
    *(_DWORD *)(v20 + 264) = v32;
    long long v33 = v81;
    uint64_t v34 = v84;
    *(void *)(v20 + 288) = v82;
    *(_OWORD *)(v20 + 272) = v33;
    long long v81 = 0uLL;
    long long v35 = v83;
    *(void *)(v20 + 312) = v34;
    *(_OWORD *)(v20 + 296) = v35;
    long long v83 = 0uLL;
    uint64_t v82 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    *(_OWORD *)(a6 + 448) = 0u;
    *(_OWORD *)(a6 + 464) = 0u;
    *(_OWORD *)(a6 + 416) = 0u;
    *(_OWORD *)(a6 + 432) = 0u;
    *(_OWORD *)(a6 + 384) = 0u;
    *(_OWORD *)(a6 + 400) = 0u;
    *(_OWORD *)(a6 + 352) = 0u;
    *(_OWORD *)(a6 + 368) = 0u;
    *(_OWORD *)(a6 + 320) = 0u;
    *(_OWORD *)(a6 + 336) = 0u;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    sub_5F3B34(a6);
    sub_5F3B34(a6 + 160);
    sub_5F3B34(a6 + 320);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v70);
  sub_4D4B58((uint64_t)&v55);
  return sub_4D4B58((uint64_t)&v40);
}

void sub_5D0DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_5D0E4C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_46C8EC(a3, a4);
  sub_5D1A3C(*(void *)(v12 + 32), *(void *)(a1 + 96), *(void *)(a1 + 88) + 968, (uint64_t)v60);
  if (a2 == 14) {
    sub_6F30A4((uint64_t)v50);
  }
  else {
    sub_5D1384((void *)a1, v12, a5, (char *)v50);
  }
  BOOL v13 = sub_6F2FD8((uint64_t)v60);
  BOOL v14 = sub_6F2FD8((uint64_t)v50);
  sub_5D15B0(a2, (uint64_t)a3, a4, v13, v14, *(unsigned __int8 *)(a1 + 8), &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    sub_5F3B34(a6);
    goto LABEL_75;
  }
  uint64_t v16 = sub_8D7730(*(void *)(a1 + 104), (uint64_t)&__p);
  if (*((char *)v16 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v16, v16[1]);
  }
  else
  {
    long long v17 = *(_OWORD *)v16;
    __dst.__r_.__value_.__r.__words[2] = v16[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v17;
  }
  if (sub_6F2FD8((uint64_t)v60))
  {
    memset(&v47, 0, sizeof(v47));
    uint64_t v18 = &xmmword_2582BC8;
    if (a2 != 14) {
      uint64_t v18 = (long long *)&dword_2582B68;
    }
    if (a2 == 19) {
      long long v19 = (const std::string *)&xmmword_2582B98;
    }
    else {
      long long v19 = (const std::string *)v18;
    }
    std::string::operator=(&v47, v19);
    int64_t v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    char v22 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = &v47;
    }
    else {
      long long v23 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v24 = v47.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v20 = __dst.__r_.__value_.__l.__size_;
      }
      if (v20 >= v24)
      {
        long long v25 = (char *)p_dst + v20;
        int v26 = v23->__r_.__value_.__s.__data_[0];
        uint64_t v27 = p_dst;
        do
        {
          int64_t v28 = v20 - v24;
          if (v28 == -1) {
            break;
          }
          long long v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          uint64_t v30 = v29;
          if (!memcmp(v29, v23, v24))
          {
            if (v30 != v25)
            {
              std::string::size_type v31 = v30 - (char *)p_dst;
              if (v30 - (char *)p_dst != -1) {
                goto LABEL_37;
              }
            }
            break;
          }
          uint64_t v27 = (std::string *)(v30 + 1);
          int64_t v20 = v25 - (v30 + 1);
        }
        while (v20 >= v24);
      }
    }
    else
    {
      std::string::size_type v31 = 0;
LABEL_37:
      if ((v61 & 0x80u) == 0) {
        uint64_t v32 = v60;
      }
      else {
        uint64_t v32 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v33 = v61;
      }
      else {
        std::string::size_type v33 = (std::string::size_type)v60[1];
      }
      std::string::replace(&__dst, v31, v24, (const std::string::value_type *)v32, v33);
      char v22 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    if (v22 < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  if (sub_6F2FD8((uint64_t)v50))
  {
    int64_t v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v35 = &__dst;
    }
    else {
      long long v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (byte_2582B97 >= 0) {
      uint64_t v36 = &xmmword_2582B80;
    }
    else {
      uint64_t v36 = (long long *)xmmword_2582B80;
    }
    if (byte_2582B97 >= 0) {
      int64_t v37 = byte_2582B97;
    }
    else {
      int64_t v37 = *((void *)&xmmword_2582B80 + 1);
    }
    if (v37)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v34 = __dst.__r_.__value_.__l.__size_;
      }
      if (v34 >= v37)
      {
        uint64_t v38 = (char *)v35 + v34;
        int v39 = *(char *)v36;
        long long v40 = v35;
        do
        {
          int64_t v41 = v34 - v37;
          if (v41 == -1) {
            break;
          }
          long long v42 = (char *)memchr(v40, v39, v41 + 1);
          if (!v42) {
            break;
          }
          uint64_t v43 = v42;
          if (!memcmp(v42, v36, v37))
          {
            if (v43 != v38)
            {
              std::string::size_type v44 = v43 - (char *)v35;
              if (v43 - (char *)v35 != -1) {
                goto LABEL_67;
              }
            }
            break;
          }
          long long v40 = (std::string *)(v43 + 1);
          int64_t v34 = v38 - (v43 + 1);
        }
        while (v34 >= v37);
      }
    }
    else
    {
      std::string::size_type v44 = 0;
LABEL_67:
      if ((v51 & 0x80u) == 0) {
        uint64_t v45 = v50;
      }
      else {
        uint64_t v45 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v46 = v51;
      }
      else {
        std::string::size_type v46 = (std::string::size_type)v50[1];
      }
      std::string::replace(&__dst, v44, v37, (const std::string::value_type *)v45, v46);
    }
  }
  sub_5F3D7C(a6, (uint64_t)&__dst, (__int16 *)(*(void *)(a1 + 88) + 1177));
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_88;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v59 & 0x80000000) == 0)
  {
LABEL_77:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v58);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v55 & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v56);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_79:
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v54);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_80:
    if (((char)v51 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v52);
  if (((char)v51 & 0x80000000) == 0)
  {
LABEL_81:
    if ((v69 & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(v50[0]);
  if ((v69 & 0x80000000) == 0)
  {
LABEL_82:
    if ((v67 & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(v68);
  if ((v67 & 0x80000000) == 0)
  {
LABEL_83:
    if ((v65 & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(v66);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_84:
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(v64);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_85:
    if (((char)v61 & 0x80000000) == 0) {
      return;
    }
LABEL_98:
    operator delete(v60[0]);
    return;
  }
LABEL_97:
  operator delete(v62);
  if ((char)v61 < 0) {
    goto LABEL_98;
  }
}

void sub_5D12D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a27 < 0)
  {
    operator delete(__p);
    sub_4A50F4((uint64_t)&a28);
    sub_4A50F4((uint64_t)&a47);
    _Unwind_Resume(a1);
  }
  sub_4A50F4((uint64_t)&a28);
  sub_4A50F4((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_5D1384(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  sub_5D1C08(a1, (long long *)a2, a3, (uint64_t)v26);
  uint64_t v25 = *(void *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 16);
  v24[0] = *(_OWORD *)a2;
  v24[1] = v8;
  BYTE6(v25) ^= 1u;
  int v9 = (unsigned __int16 *)(*(void *)&v24[0] - (int)**(_DWORD **)&v24[0]);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    uint64_t v11 = *(unsigned int *)(*(void *)&v24[0] + v10);
  }
  else {
    uint64_t v11 = 0;
  }
  sub_5D1C08(a1, v24, v11 - a3, (uint64_t)v13);
  if (sub_6F2FD8((uint64_t)v26) && (!sub_6F2FD8((uint64_t)v13) || v36 < v23))
  {
    uint64_t v12 = (long long *)v26;
LABEL_11:
    sub_4AA8E0(a4, v12);
    goto LABEL_13;
  }
  if (sub_6F2FD8((uint64_t)v13))
  {
    uint64_t v12 = (long long *)v13;
    goto LABEL_11;
  }
  sub_6F30A4((uint64_t)a4);
LABEL_13:
  if (v22 < 0)
  {
    operator delete(__p);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v17);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v13[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v32);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v27 & 0x80000000) == 0) {
      return;
    }
LABEL_33:
    operator delete(v26[0]);
    return;
  }
LABEL_32:
  operator delete(v28);
  if (v27 < 0) {
    goto LABEL_33;
  }
}

void sub_5D1580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5D1594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5D15B0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, std::string *a7@<X8>)
{
  if (a1 == 14)
  {
    sub_5DB9D8(14, a4, a7);
    return;
  }
  switch(a1)
  {
    case 0:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 114;
      char v14 = "Escalator";
      goto LABEL_10;
    case 1:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1884648047;
      uint64_t v15 = "EscalatorUp";
      goto LABEL_21;
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "EscalatorDown");
      break;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "Stairs");
      break;
    case 4:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v16 = 0x7055737269617453;
      goto LABEL_23;
    case 5:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "StairsDown");
      break;
    case 6:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "PedestrianBridge");
      break;
    case 7:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
      strcpy((char *)&__p, "SteepHillUphill");
      break;
    case 8:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "SteepHillDownhill");
      break;
    case 9:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v16 = 0x746E756F6D736944;
      goto LABEL_23;
    case 10:
    case 11:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
      strcpy(__p.__r_.__value_.__l.__data_, "DismountWalkAgainstTraffic");
      break;
    case 13:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1701011824;
      uint64_t v15 = "SharedSpace";
LABEL_21:
      __p.__r_.__value_.__r.__words[0] = *(void *)v15;
      __p.__r_.__value_.__s.__data_[11] = 0;
      break;
    case 17:
    case 18:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 108;
      char v14 = "SteepHill";
LABEL_10:
      __p.__r_.__value_.__r.__words[0] = *(void *)v14;
      break;
    case 19:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v16 = 0x726F746176656C45;
LABEL_23:
      __p.__r_.__value_.__r.__words[0] = v16;
      __p.__r_.__value_.__s.__data_[8] = 0;
      break;
    default:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  if (byte_2584957 >= 0) {
    long long v17 = (const std::string::value_type *)&xmmword_2584940;
  }
  else {
    long long v17 = (const std::string::value_type *)xmmword_2584940;
  }
  if (byte_2584957 >= 0) {
    std::string::size_type v18 = byte_2584957;
  }
  else {
    std::string::size_type v18 = *((void *)&xmmword_2584940 + 1);
  }
  long long v19 = std::string::insert(&__p, 0, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  a7->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a7->__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_32;
    }
LABEL_34:
    sub_5DBD4C(a1, a2, a3, a6, (uint64_t)&__p);
    unsigned int v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v22 = __p.__r_.__value_.__r.__words[0];
    goto LABEL_35;
  }
  if (!a4) {
    goto LABEL_34;
  }
LABEL_32:
  unsigned int v21 = 10;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "_NamedRoad");
  std::string::size_type v22 = 0x6F5264656D614E5FLL;
LABEL_35:
  if ((v21 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v22;
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type size = v21;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a7, (const std::string::value_type *)p_p, size);
  std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
  }
  int v26 = "_NoCrossStreet";
  if (a5) {
    int v26 = "_CrossStreet";
  }
  if (v25) {
    char v27 = v26;
  }
  else {
    char v27 = "_NoLocation";
  }
  std::string::append(a7, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_5D19A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_5D1A3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_58E730(a2, a1, 1u, &v21);
  sub_3D63DC(a2, a1 & 0xFFFFFFFFFFFFLL, v19);
  sub_5F2D5C((uint64_t)__dst, (long long *)v19, 0);
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  sub_6F33CC((uint64_t)__dst, (unsigned __int8 **)&v21, (uint64_t *)&__p, a3, a4);
  long long v8 = (void **)__p;
  if (__p)
  {
    int v9 = v15;
    uint64_t v10 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v9 - 9) < 0) {
          operator delete(*(v9 - 4));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v15 = v8;
    operator delete(v10);
  }
  if ((v18 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(v19[0]);
    uint64_t v11 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_15;
  }
  operator delete(__dst[0]);
  if (v20 < 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v11 = v21;
  if (!v21) {
    return;
  }
LABEL_15:
  uint64_t v12 = (uint64_t)v22;
  BOOL v13 = v11;
  if (v22 != v11)
  {
    do
      uint64_t v12 = sub_2DF404(v12 - 144);
    while ((void *)v12 != v11);
    BOOL v13 = v21;
  }
  std::string::size_type v22 = v11;
  operator delete(v13);
}

void sub_5D1B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_2DE7D0(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      sub_53BD98((void **)(v25 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  sub_53BD98((void **)(v25 - 56));
  _Unwind_Resume(a1);
}

void sub_5D1BF4(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_5D1C08(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = a2[1];
  long long v47 = *a2;
  long long v48 = v7;
  int v49 = (void *)*((void *)a2 + 4);
  sub_5D1A3C(*((void *)a2 + 4), a1[12], a1[11] + 968, (uint64_t)v37);
  long long v8 = (unsigned __int16 *)(v47 - *(int *)v47);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    uint64_t v10 = *(unsigned int *)(v47 + v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 - a3;
  while (v11 <= a1[2])
  {
    sub_68D800(a1[15], (uint64_t)&v47, 1, &v35);
    uint64_t v12 = *v35;
    uint64_t v13 = v35[1];
    while (v12 != v13)
    {
      int v14 = *(_DWORD *)(v12 + 24);
      if ((v14 - 41) >= 0x17)
      {
        switch(v14)
        {
          case 1:
          case 2:
          case 6:
          case 7:
          case 20:
          case 21:
          case 27:
          case 28:
          case 86:
          case 87:
            break;
          default:
            goto LABEL_10;
        }
      }
      sub_5D1A3C(*(void *)(*(void *)(v12 + 8) - 8), a1[12], a1[11] + 968, (uint64_t)__s1);
      if (sub_6F2FD8((uint64_t)__s1))
      {
        uint64_t v15 = BYTE7(v26);
        if ((SBYTE7(v26) & 0x80u) == 0) {
          uint64_t v16 = (void *)BYTE7(v26);
        }
        else {
          uint64_t v16 = __s1[1];
        }
        unint64_t v17 = v38;
        if ((v38 & 0x80u) != 0) {
          unint64_t v17 = (unint64_t)v37[1];
        }
        if (v16 != (void *)v17) {
          goto LABEL_41;
        }
        if ((v38 & 0x80u) == 0) {
          char v18 = v37;
        }
        else {
          char v18 = (void **)v37[0];
        }
        if ((BYTE7(v26) & 0x80) != 0)
        {
          if (memcmp(__s1[0], v18, (size_t)__s1[1])) {
            goto LABEL_41;
          }
        }
        else if (BYTE7(v26))
        {
          long long v19 = __s1;
          while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
          {
            long long v19 = (void **)((char *)v19 + 1);
            char v18 = (void **)((char *)v18 + 1);
            if (!--v15) {
              goto LABEL_31;
            }
          }
LABEL_41:
          sub_4AA8E0((char *)a4, (long long *)__s1);
          *(void *)(a4 + 152) = v11;
          if (v34 < 0)
          {
            operator delete(v33);
            if (v32 < 0) {
              goto LABEL_54;
            }
LABEL_43:
            if ((v30 & 0x80000000) == 0) {
              goto LABEL_44;
            }
LABEL_55:
            operator delete(v29);
            if (v28 < 0) {
              goto LABEL_56;
            }
LABEL_45:
            if (SBYTE7(v26) < 0) {
LABEL_57:
            }
              operator delete(__s1[0]);
          }
          else
          {
            if ((v32 & 0x80000000) == 0) {
              goto LABEL_43;
            }
LABEL_54:
            operator delete(v31);
            if (v30 < 0) {
              goto LABEL_55;
            }
LABEL_44:
            if ((v28 & 0x80000000) == 0) {
              goto LABEL_45;
            }
LABEL_56:
            operator delete(__p);
            if (SBYTE7(v26) < 0) {
              goto LABEL_57;
            }
          }
          int v20 = 1;
          goto LABEL_60;
        }
      }
LABEL_31:
      if (v34 < 0)
      {
        operator delete(v33);
        if ((v32 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      else if ((v32 & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_9;
      }
LABEL_38:
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_39:
        if ((SBYTE7(v26) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_40;
      }
LABEL_9:
      operator delete(__p);
      if ((SBYTE7(v26) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_40:
      operator delete(__s1[0]);
LABEL_10:
      v12 += 192;
    }
    sub_5D21D0((uint64_t)a1, v35, (uint64_t)__s1);
    long long v47 = *(_OWORD *)__s1;
    long long v48 = v26;
    int v49 = __p;
    int v20 = 3;
    if (__p && (void)v47 && *((void *)&v47 + 1))
    {
      unsigned int v21 = (unsigned __int16 *)(v47 - *(int *)v47);
      if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
        uint64_t v23 = *(unsigned int *)(v47 + v22);
      }
      else {
        uint64_t v23 = 0;
      }
      int v20 = 0;
      v11 += v23;
    }
LABEL_60:
    int64_t v24 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v20)
    {
      if (v20 != 3) {
        goto LABEL_65;
      }
      break;
    }
  }
  sub_6F30A4(a4);
  *(void *)(a4 + 152) = 0x7FFFFFFFFFFFFFFFLL;
LABEL_65:
  if (v46 < 0)
  {
    operator delete(v45);
    if (v44 < 0) {
      goto LABEL_72;
    }
LABEL_67:
    if ((v42 & 0x80000000) == 0) {
      goto LABEL_68;
    }
LABEL_73:
    operator delete(v41);
    if (v40 < 0) {
      goto LABEL_74;
    }
LABEL_69:
    if ((char)v38 < 0) {
LABEL_75:
    }
      operator delete(v37[0]);
  }
  else
  {
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_72:
    operator delete(v43);
    if (v42 < 0) {
      goto LABEL_73;
    }
LABEL_68:
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_74:
    operator delete(v39);
    if ((char)v38 < 0) {
      goto LABEL_75;
    }
  }
}

void sub_5D2004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_5D2018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
}

uint64_t sub_5D21D0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      int v6 = *(_DWORD *)(v4 + 24);
      if (!v6 || v6 == 3) {
        break;
      }
      v4 += 192;
      if (v4 == v5) {
        goto LABEL_13;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_13:
    BOOL v14 = 0;
    *(_DWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_WORD *)(a3 + 36) = -1;
  }
  else
  {
    uint64_t v8 = *(void *)(result + 96);
    uint64_t v9 = *(void *)(*(void *)(v4 + 8) - 8);
    uint64_t v10 = sub_2D5D58(v8, v9 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v8 + 7772))
    {
      uint64_t v11 = sub_2DB8E0(v8 + 3896, v9, 0);
      uint64_t v12 = &v11[-*(int *)v11];
      if (*(unsigned __int16 *)v12 < 5u)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = *((unsigned __int16 *)v12 + 2);
        if (v13) {
          v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
        }
      }
      uint64_t v15 = v13 + 4 * WORD2(v9) + 4 + *(unsigned int *)(v13 + 4 * WORD2(v9) + 4);
    }
    else
    {
      uint64_t v15 = 0;
    }
    double result = sub_2E5C38(v8, v9 & 0xFFFFFFFFFFFFLL, 1);
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = v15;
    BOOL v14 = (v9 & 0xFF000000000000) != 0;
    *(void *)(a3 + 16) = result;
    *(void *)(a3 + 24) = v16;
    *(_DWORD *)(a3 + 32) = v9;
    *(_WORD *)(a3 + 36) = WORD2(v9);
  }
  *(unsigned char *)(a3 + 38) = v14;
  return result;
}

void sub_5D2310(void *a1, uint64_t *a2, uint64_t a3)
{
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "EnrouteNoticeBuilder");
  BOOL v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB370(v6, 0, *(unsigned __int8 *)(a3 + 1525), &__p);
  sub_5D3FA4((uint64_t)a1, &__p, (uint64_t)a2, a3);
  long long v7 = v19;
  if (v19)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      long long v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p;
  std::string __p = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    uint64_t v10 = v15;
    uint64_t v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v14;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  a1[11] = a3;
  a1[12] = sub_3750CC(a2);
  uint64_t v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 0, *(_DWORD *)(a3 + 968), a1 + 13);
  operator new();
}

void sub_5D24D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_5D2514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_5D254C(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5D2858(a1, a2, a3);
  sub_5D2EB0(a1, a2, (uint64_t *)&v32);
  sub_5DC47C(a3, a3[1], (uint64_t)v32, (uint64_t)v33, 0x86BCA1AF286BCA1BLL * ((v33 - v32) >> 5));
  sub_5D3340(a1, a2, (uint64_t *)&v29);
  sub_5DC47C(a3, a3[1], (uint64_t)v29, (uint64_t)v30, 0x86BCA1AF286BCA1BLL * ((v30 - (unsigned char *)v29) >> 5));
  sub_5D3680(a1, (uint64_t)a2, (uint64_t *)&v26);
  sub_5DC47C(a3, a3[1], (uint64_t)v26, (uint64_t)v27, 0x86BCA1AF286BCA1BLL * ((v27 - (unsigned char *)v26) >> 5));
  if (*(unsigned char *)(a1 + 14))
  {
    sub_5D53B4(a1, (uint64_t)a2, (uint64_t *)&__p);
    int v6 = __p;
    uint64_t v7 = (uint64_t)v24;
  }
  else
  {
    uint64_t v7 = 0;
    int v6 = 0;
    std::string __p = 0;
    int64_t v24 = 0;
    uint64_t v25 = 0;
  }
  sub_5DC47C(a3, a3[1], (uint64_t)v6, v7, 0x86BCA1AF286BCA1BLL * ((v7 - (uint64_t)v6) >> 5));
  uint64_t v8 = (uint64_t *)a3[1];
  unint64_t v9 = 126 - 2 * __clz(0x86BCA1AF286BCA1BLL * (((uint64_t)v8 - *a3) >> 5));
  if (v8 == (uint64_t *)*a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_5E21A8(*a3, v8, (uint64_t)&v35, v10, 1);
  uint64_t v11 = __p;
  if (__p)
  {
    uint64_t v12 = (uint64_t)v24;
    uint64_t v13 = __p;
    if (v24 != __p)
    {
      do
      {
        v12 -= 608;
        sub_575D30((uint64_t)&v25, v12);
      }
      while ((void *)v12 != v11);
      uint64_t v13 = __p;
    }
    int64_t v24 = v11;
    operator delete(v13);
  }
  BOOL v14 = (char *)v26;
  if (v26)
  {
    uint64_t v15 = v27;
    uint64_t v16 = v26;
    if (v27 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30((uint64_t)&v28, (uint64_t)v15);
      }
      while (v15 != v14);
      uint64_t v16 = v26;
    }
    char v27 = v14;
    operator delete(v16);
  }
  unint64_t v17 = (char *)v29;
  if (v29)
  {
    char v18 = v30;
    long long v19 = v29;
    if (v30 != v29)
    {
      do
      {
        v18 -= 608;
        sub_575D30((uint64_t)&v31, (uint64_t)v18);
      }
      while (v18 != v17);
      long long v19 = v29;
    }
    char v30 = v17;
    operator delete(v19);
  }
  uint64_t v20 = (uint64_t)v32;
  if (v32)
  {
    uint64_t v21 = (uint64_t)v33;
    uint64_t v22 = v32;
    if (v33 != v32)
    {
      do
      {
        v21 -= 608;
        sub_575D30((uint64_t)&v34, v21);
      }
      while (v21 != v20);
      uint64_t v22 = v32;
    }
    char v33 = (unsigned char *)v20;
    operator delete(v22);
  }
}

void sub_5D27D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_5919CC((void **)va);
  sub_5919CC((void **)va1);
  sub_5919CC((void **)(v6 - 64));
  sub_5919CC(v5);
  _Unwind_Resume(a1);
}

void sub_5D2824(_Unwind_Exception *a1)
{
  sub_5919CC((void **)(v2 - 64));
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D2844(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D2858(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)a1
    || *(unsigned char *)(a1 + 1)
    || *(unsigned char *)(a1 + 2)
    || *(unsigned char *)(a1 + 3)
    || *(unsigned char *)(a1 + 4)
    || *(unsigned char *)(a1 + 5)
    || *(unsigned char *)(a1 + 9)
    || *(unsigned char *)(a1 + 13))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = (uint64_t)(a2[134] - a2[133]) >> 5;
    uint64_t v7 = 0x2FC962FC962FC963 * v6 - 1;
    if (0x2FC962FC962FC963 * v6 != 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = 584;
      while (1)
      {
        unint64_t v36 = v10;
        uint64_t v12 = a2[133];
        sub_5D4870((unsigned char *)a1, v10, (uint64_t)a2, (uint64_t)&v34);
        if (!v35) {
          goto LABEL_13;
        }
        if (v34 > 0x13) {
          unsigned int v13 = 0;
        }
        else {
          unsigned int v13 = dword_20E8688[v34];
        }
        sub_524BB4(v13, (uint64_t)v37);
        if (!v35)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11);
            goto LABEL_25;
          case 3u:
          case 4u:
          case 5u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 16);
            goto LABEL_25;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
            uint64_t v15 = *(void *)(v12 + v11 - 560);
            break;
          case 0x13u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 8);
LABEL_25:
            unint64_t v18 = *v16;
            if (v18 >= v17) {
              uint64_t v15 = v17;
            }
            else {
              uint64_t v15 = v18;
            }
            break;
          default:
            uint64_t v15 = -1;
            break;
        }
        uint64_t v19 = sub_46CE10(a2, v9, 1, v15, 0, v14);
        v32[0] = &v34;
        v32[1] = a2;
        uint64_t v33 = v19 + v8;
        _OWORD v32[2] = &v36;
        if (!v35)
        {
          long long v26 = __cxa_allocate_exception(8uLL);
          *long long v26 = &off_2439078;
        }
        sub_5D4AA0((void *)a1, (void *)v34, a2, v15, 0, (uint64_t)v32, (uint64_t)v29);
        if (!v35)
        {
          char v27 = __cxa_allocate_exception(8uLL);
          *char v27 = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            int v20 = *(_DWORD *)(a1 + 56);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            int v20 = *(_DWORD *)(a1 + 60);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 7u:
          case 0x11u:
            int v20 = *(_DWORD *)(a1 + 72);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 8u:
          case 0x12u:
            int v20 = *(_DWORD *)(a1 + 68);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 9u:
          case 0xAu:
          case 0xBu:
            int v20 = *(_DWORD *)(a1 + 40);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xCu:
            int v20 = *(_DWORD *)(a1 + 48);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xDu:
            int v20 = *(_DWORD *)(a1 + 44);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xEu:
            int v20 = *(_DWORD *)(a1 + 64);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xFu:
            int v20 = *(_DWORD *)(a1 + 76);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x10u:
            int v20 = *(_DWORD *)(a1 + 80);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x13u:
            int v20 = *(_DWORD *)(a1 + 52);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          default:
            int v20 = -1;
            int v28 = -1;
            unint64_t v21 = a3[1];
            if (v21 < a3[2])
            {
LABEL_32:
              sub_5E1544(v21, v33, (uint64_t)v37, (uint64_t)v29, v20);
              uint64_t v22 = v21 + 608;
              a3[1] = v21 + 608;
            }
            else
            {
LABEL_34:
              uint64_t v22 = sub_5E12B4(a3, &v33, (uint64_t)v37, (uint64_t)v29, &v28);
            }
            a3[1] = v22;
            uint64_t v8 = v33;
            sub_4D4B58((uint64_t)&v31);
            sub_4D4B58((uint64_t)&v30);
            sub_4D4B58((uint64_t)v29);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_37:
                int v23 = v41;
                if (v41 == 1) {
                  goto LABEL_43;
                }
                goto LABEL_38;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_37;
            }
            operator delete(v42);
            int v23 = v41;
            if (v41 == 1)
            {
LABEL_43:
              int64_t v24 = v38;
              if (v38)
              {
                int v39 = v38;
                goto LABEL_11;
              }
              goto LABEL_12;
            }
LABEL_38:
            if (!v23 && v40 < 0)
            {
              int64_t v24 = v38;
LABEL_11:
              operator delete(v24);
            }
LABEL_12:
            uint64_t v9 = v15;
LABEL_13:
            ++v10;
            v11 += 2400;
            if (v7 == v10) {
              return;
            }
            break;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_5D2D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 + 8) = v6;
  sub_5D0144((uint64_t)va);
  sub_4D9814(v7 - 208);
  sub_5919CC((void **)v5);
  _Unwind_Resume(a1);
}

void sub_5D2DF0(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 208);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D2EB0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 6))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  unsigned __int8 v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v5 = a2[1490];
  uint64_t v6 = a2[1491];
  v43[0] = &v51;
  if (v5 == v6)
  {
    uint64_t v9 = 0;
    goto LABEL_65;
  }
  do
  {
    if (*(_DWORD *)(v5 + 16) == 3 && *(_DWORD *)(v5 + 40) == 0) {
      sub_5E15F4(v43, (_OWORD *)v5);
    }
    v5 += 48;
  }
  while (v5 != v6);
  uint64_t v9 = v52;
  if (v51 == v52)
  {
LABEL_65:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!v9) {
      return;
    }
    goto LABEL_66;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v49 = 0;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  long long v48 = 0;
  unint64_t v10 = sub_46C760(a2);
  if (v10)
  {
    for (unint64_t i = 0; i != v10; ++i)
    {
      sub_29603C((void **)&v48, &v47);
      uint64_t v13 = sub_46CCC8(a2, i, v12);
      v47 += v13;
    }
  }
  double v14 = v51;
  uint64_t v15 = v52;
  while (v14 != v15)
  {
    double v16 = *(double *)v14;
    if (*(double *)v14 <= 0.0) {
      unint64_t v17 = dword_8;
    }
    else {
      unint64_t v17 = dword_4 + 3;
    }
    if (*(double *)v14 <= 0.0) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 3;
    }
    sub_524BB4(v18, (uint64_t)v54);
    uint64_t v19 = (uint64_t *)(v14 + 24);
    if (v49 == v48)
    {
      unint64_t v21 = v48;
    }
    else
    {
      unint64_t v20 = (v49 - v48) >> 3;
      unint64_t v21 = v48;
      do
      {
        unint64_t v22 = v20 >> 1;
        int v23 = (uint64_t *)&v21[8 * (v20 >> 1)];
        uint64_t v25 = *v23;
        int64_t v24 = v23 + 1;
        v20 += ~(v20 >> 1);
        if (*v19 < v25) {
          unint64_t v20 = v22;
        }
        else {
          unint64_t v21 = v24;
        }
      }
      while (v20);
    }
    uint64_t v26 = (v21 - v48 - 8) >> 3;
    v46[0] = (double *)a1;
    v46[1] = (double *)v14;
    char v27 = (void *)sub_46C8EC(a2, v26);
    int v28 = (uint64_t *)sub_5D0188(&v48, v26);
    uint64_t v30 = (unsigned __int16 *)(*v27 - *(int *)*v27);
    double v31 = 0.0;
    if (*v30 >= 9u)
    {
      uint64_t v32 = v30[4];
      if (v32)
      {
        LODWORD(v29) = *(_DWORD *)(*v27 + v32);
        double v31 = (double)v29;
      }
    }
    uint64_t v33 = *v28;
    double v34 = v31 * ((double)sub_46CACC((uint64_t)a2, v26) / 1000000000.0);
    if (v34 >= 0.0)
    {
      if (v34 >= 4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v35 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      if (v34 <= -4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
    }
    double v34 = (double)(v35 >> 1);
LABEL_44:
    sub_5D4F84((void *)a1, v17, a2, v26, *v19 - v33 + (uint64_t)v34, v46, (uint64_t)v43);
    uint64_t v36 = 68;
    if (v16 > 0.0) {
      uint64_t v36 = 72;
    }
    int v37 = *(_DWORD *)(a1 + v36);
    int v42 = v37;
    unint64_t v38 = a3[1];
    if (v38 >= a3[2])
    {
      uint64_t v39 = sub_5E12B4(a3, (uint64_t *)v14 + 3, (uint64_t)v54, (uint64_t)v43, &v42);
    }
    else
    {
      sub_5E1544(a3[1], *v19, (uint64_t)v54, (uint64_t)v43, v37);
      uint64_t v39 = v38 + 608;
      a3[1] = v38 + 608;
    }
    a3[1] = v39;
    sub_4D4B58((uint64_t)&v45);
    sub_4D4B58((uint64_t)&v44);
    sub_4D4B58((uint64_t)v43);
    if (v62 < 0)
    {
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_51:
        int v40 = v58;
        if (v58 != 1) {
          goto LABEL_52;
        }
        goto LABEL_57;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(v59);
    int v40 = v58;
    if (v58 != 1)
    {
LABEL_52:
      if (v40 || (v57 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      int v41 = v55;
      goto LABEL_17;
    }
LABEL_57:
    int v41 = v55;
    if (!v55) {
      goto LABEL_18;
    }
    uint64_t v56 = v55;
LABEL_17:
    operator delete(v41);
LABEL_18:
    v14 += 48;
  }
  if (v48)
  {
    int v49 = v48;
    operator delete(v48);
  }
  uint64_t v9 = v51;
  if (v51)
  {
LABEL_66:
    uint64_t v52 = v9;
    operator delete(v9);
  }
}

void sub_5D32AC(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v2[3];
  if (v4)
  {
    v2[4] = v4;
    operator delete(v4);
  }
  sub_5919CC(v1);
  uint64_t v5 = (void *)v2[6];
  if (v5)
  {
    v2[7] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_5D3318()
{
}

void sub_5D3320()
{
}

void sub_5D3328()
{
}

void sub_5D3330()
{
  if (!*(void *)(v0 + 48)) {
    JUMPOUT(0x5D3310);
  }
  JUMPOUT(0x5D3308);
}

unint64_t sub_5D3340@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(result + 12);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4)
  {
    unint64_t v6 = result;
    uint64_t v30 = 0;
    double result = sub_46C760(a2);
    unint64_t v7 = result;
    if (result)
    {
      BOOL v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        unint64_t v10 = (int **)sub_46C8EC(a2, v9);
        if (!v8) {
          break;
        }
        double v12 = (unsigned __int16 *)((char *)*v10 - **v10);
        unsigned int v13 = *v12;
        if (*((unsigned char *)v10 + 38))
        {
          if (v13 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v14 = v12[35];
          if (!v14) {
            goto LABEL_24;
          }
          int v15 = 0x10000;
        }
        else
        {
          if (v13 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v14 = v12[35];
          if (!v14) {
            goto LABEL_24;
          }
          int v15 = 0x8000;
        }
        BOOL v8 = (*(int *)((char *)*v10 + v14) & v15) != 0;
LABEL_25:
        double result = sub_46CCC8(a2, v9, v11);
        v30 += result;
        if (v7 == ++v9) {
          return result;
        }
      }
      if (*(unsigned char *)(v6 + 12))
      {
        double v16 = (char *)*v10;
        unint64_t v17 = (unsigned __int16 *)((char *)*v10 - **v10);
        unsigned int v18 = *v17;
        if (*((unsigned char *)v10 + 38))
        {
          if (v18 >= 0x47)
          {
            unsigned int v19 = v17[35];
            if (v19)
            {
              if ((*(_DWORD *)&v16[v19] & 0x10000) != 0) {
                goto LABEL_22;
              }
            }
          }
        }
        else if (v18 >= 0x47)
        {
          unsigned int v20 = v17[35];
          if (v20)
          {
            if ((*(_DWORD *)&v16[v20] & 0x8000) != 0)
            {
LABEL_22:
              sub_524BB4(6u, (uint64_t)v31);
              sub_5D5618((void *)v6, (char *)&dword_C + 1, a2, v9, 0, (uint64_t)v27);
              int v21 = *(_DWORD *)(v6 + 44);
              int v26 = v21;
              unint64_t v22 = a3[1];
              if (v22 >= a3[2])
              {
                uint64_t v23 = sub_5E19F8(a3, &v30, (uint64_t)v31, (uint64_t)v27, &v26);
              }
              else
              {
                sub_5E1544(a3[1], v30, (uint64_t)v31, (uint64_t)v27, v21);
                uint64_t v23 = v22 + 608;
                a3[1] = v22 + 608;
              }
              a3[1] = v23;
              sub_4D4B58((uint64_t)&v29);
              sub_4D4B58((uint64_t)&v28);
              sub_4D4B58((uint64_t)v27);
              if (v39 < 0)
              {
                operator delete(v38);
                if (v37 < 0) {
                  goto LABEL_35;
                }
LABEL_30:
                int v24 = v35;
                if (v35 != 1) {
                  goto LABEL_31;
                }
LABEL_36:
                uint64_t v25 = v32;
                if (v32)
                {
                  uint64_t v33 = v32;
LABEL_38:
                  operator delete(v25);
                }
              }
              else
              {
                if ((v37 & 0x80000000) == 0) {
                  goto LABEL_30;
                }
LABEL_35:
                operator delete(v36);
                int v24 = v35;
                if (v35 == 1) {
                  goto LABEL_36;
                }
LABEL_31:
                if (!v24 && v34 < 0)
                {
                  uint64_t v25 = v32;
                  goto LABEL_38;
                }
              }
              BOOL v8 = 1;
              goto LABEL_25;
            }
          }
        }
      }
LABEL_24:
      BOOL v8 = 0;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_5D35E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5D3614(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D3628(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 200);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D3644(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D3658(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D366C(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D3680(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 15);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v4) {
    return;
  }
  uint64_t v38 = 0;
  sub_524BB4(0xAu, (uint64_t)v39);
  int v35 = 0;
  uint64_t v36 = 0;
  char v37 = 0;
  unint64_t v7 = *(unsigned char **)(a2 + 11664);
  BOOL v8 = *(unsigned char **)(a2 + 11672);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v10 = v9 / 24;
    if ((unint64_t)(v9 / 24) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    double v11 = (char *)operator new(v9);
    int v35 = v11;
    double v12 = &v11[24 * v10];
    char v37 = v12;
    memcpy(v11, v7, v9);
    uint64_t v36 = v12;
    if (v12 - 24 != v11)
    {
      uint64_t v13 = 24 * v10;
      uint64_t v14 = 24;
      do
      {
        if ((v11[v13 - 48] & 0x68) != 0 && (v11[v13 - 24] & 0x68) != 0)
        {
          int v15 = &v11[v13];
          *((void *)v15 - 4) = *(void *)&v11[v13 - 8] + *(void *)&v11[v13 - 32];
          *((void *)v15 - 2) = -1;
        }
        v11 -= 24;
        v14 += 24;
      }
      while (v13 != v14);
      double v11 = v35;
      double v12 = v36;
    }
    if (v11 != v12)
    {
      double v16 = v11;
      while (*((void *)v16 + 1) != -1)
      {
        v16 += 24;
        if (v16 == v12) {
          goto LABEL_25;
        }
      }
      if (v16 != v12)
      {
        unint64_t v17 = v16 + 24;
        if (v16 + 24 != v12)
        {
          do
          {
            if (*((void *)v17 + 1) != -1)
            {
              long long v18 = *(_OWORD *)v17;
              *((void *)v16 + 2) = *((void *)v17 + 2);
              *(_OWORD *)double v16 = v18;
              v16 += 24;
            }
            v17 += 24;
          }
          while (v17 != v12);
          double v11 = v35;
          double v12 = v36;
        }
      }
      if (v16 != v12) {
        double v12 = v16;
      }
LABEL_25:
      if (v11 != v12)
      {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFELL;
        unsigned int v20 = v11;
        do
        {
          int v24 = *(_DWORD *)v20 & 0x68;
          if (v24) {
            BOOL v25 = v19 <= *(void *)(a1 + 32);
          }
          else {
            BOOL v25 = 1;
          }
          if (v25)
          {
            BOOL v21 = v19 < 0x7FFFFFFFFFFFFFFELL && v24 == 0;
            uint64_t v22 = *((void *)v20 + 2);
            if (v21) {
              uint64_t v23 = *((void *)v20 + 2);
            }
            else {
              uint64_t v23 = 0;
            }
            v19 += v23;
          }
          else
          {
            uint64_t v22 = *((void *)v20 + 2);
            if (v22 > *(void *)(a1 + 24))
            {
              memset(v34, 0, 160);
              memset(v33, 0, sizeof(v33));
              memset(v32, 0, sizeof(v32));
              sub_5F3B34((uint64_t)v32);
              sub_5F3B34((uint64_t)v33);
              sub_5F3B34((uint64_t)v34);
              int v26 = *(_DWORD *)(a1 + 80);
              int v31 = v26;
              unint64_t v27 = a3[1];
              if (v27 >= a3[2])
              {
                uint64_t v28 = sub_5E1C88(a3, &v38, (uint64_t)v39, (uint64_t)v32, &v31);
              }
              else
              {
                sub_5E1544(a3[1], v38, (uint64_t)v39, (uint64_t)v32, v26);
                uint64_t v28 = v27 + 608;
                a3[1] = v27 + 608;
              }
              a3[1] = v28;
              sub_4D4B58((uint64_t)v34);
              sub_4D4B58((uint64_t)v33);
              sub_4D4B58((uint64_t)v32);
              uint64_t v19 = 0;
              uint64_t v22 = *((void *)v20 + 2);
            }
          }
          v38 += v22;
          v20 += 24;
        }
        while (v20 != v12);
      }
      double v12 = v11;
    }
    if (v12)
    {
      uint64_t v36 = v12;
      operator delete(v12);
    }
  }
  if ((v47 & 0x80000000) == 0)
  {
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_54:
    operator delete(v44);
    int v29 = v43;
    if (v43 != 1) {
      goto LABEL_50;
    }
LABEL_55:
    uint64_t v30 = v40;
    if (!v40) {
      return;
    }
    int v41 = v40;
    goto LABEL_57;
  }
  operator delete(v46);
  if (v45 < 0) {
    goto LABEL_54;
  }
LABEL_49:
  int v29 = v43;
  if (v43 == 1) {
    goto LABEL_55;
  }
LABEL_50:
  if (!v29 && v42 < 0)
  {
    uint64_t v30 = v40;
LABEL_57:
    operator delete(v30);
  }
}

void sub_5D3A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v5;
  sub_5D0144((uint64_t)va);
  if (v4)
  {
    *(void *)(v6 + 496) = v4;
    operator delete(v4);
  }
  sub_4D9814(v7 - 216);
  sub_5919CC((void **)v3);
  _Unwind_Resume(a1);
}

void sub_5D3AF4()
{
  if (!v0) {
    JUMPOUT(0x5D3ADCLL);
  }
  JUMPOUT(0x5D3AD0);
}

double sub_5D3B00(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void **)(v3 + 8);
  if (*(void **)v3 != v6)
  {
    do
    {
      sub_5D254C(a1, v5, (uint64_t *)&v14);
      uint64_t v8 = v5[1494];
      if (v8)
      {
        uint64_t v9 = v5[1495];
        uint64_t v7 = (void *)v5[1494];
        if (v9 != v8)
        {
          uint64_t v10 = v9 - 592;
          while (1)
          {
            sub_4D4B58(v10 + 432);
            sub_4D4B58(v10 + 272);
            sub_4D4B58(v10 + 112);
            if (*(char *)(v10 + 95) < 0)
            {
              operator delete(*(void **)(v10 + 72));
              if ((*(char *)(v10 + 63) & 0x80000000) == 0)
              {
LABEL_13:
                int v13 = *(_DWORD *)(v10 + 24);
                if (v13 != 1) {
                  goto LABEL_14;
                }
                goto LABEL_19;
              }
            }
            else if ((*(char *)(v10 + 63) & 0x80000000) == 0)
            {
              goto LABEL_13;
            }
            operator delete(*(void **)(v10 + 40));
            int v13 = *(_DWORD *)(v10 + 24);
            if (v13 != 1)
            {
LABEL_14:
              if (v13 || (*(char *)(v10 + 23) & 0x80000000) == 0) {
                goto LABEL_10;
              }
              double v11 = *(void **)v10;
              goto LABEL_9;
            }
LABEL_19:
            double v11 = *(void **)v10;
            if (!*(void *)v10) {
              goto LABEL_10;
            }
            *(void *)(v10 + 8) = v11;
LABEL_9:
            operator delete(v11);
LABEL_10:
            uint64_t v12 = v10 - 16;
            v10 -= 608;
            if (v12 == v8)
            {
              uint64_t v7 = (void *)v5[1494];
              break;
            }
          }
        }
        v5[1495] = v8;
        operator delete(v7);
      }
      double result = *(double *)&v14;
      *((_OWORD *)v5 + 747) = v14;
      v5[1496] = v15;
      v5 += 1541;
    }
    while (v5 != v6);
  }
  return result;
}

_DWORD *sub_5D3C48(_DWORD *a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "cycling_dismount");
  *a1 = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "cycling_shared_with_pedestrians");
  a1[1] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "cycling_remount");
  a1[2] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "elevator");
  a1[3] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "escalator");
  a1[4] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "stairs");
  a1[5] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "ferry");
  a1[6] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "steep_downhill");
  a1[7] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "steep_uphill");
  a1[8] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "toll");
  a1[9] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "bike_lane");
  a1[10] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5D3F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5D3FA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "enable_elevator");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v8;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_escalator");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v9;
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "enable_stairs");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v10;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_stairs_down");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v11;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_stairs_up");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v12;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_stairs_bridge");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v13;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_steep_hills");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 6) = v14;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_slope_display");
  if (sub_29D62C(a2, (uint64_t)__p))
  {
    char v15 = 1;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  char v15 = sub_375C30(a3);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  *(unsigned char *)(a1 + 7) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_simplified_cycling_feature_types");
  BOOL v16 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v16;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_cycling_dismount");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v17;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_cycling_dismount_against_traffic");
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v18;
  strcpy((char *)__p, "enable_cycling_remount");
  HIBYTE(__p[2]) = 22;
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 11) = v19;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "enable_cycling_shared_with_pedestrians");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 12) = v20;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ferries");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 13) = v21;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "enable_tolls");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 14) = v22;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_bike_lanes");
  BOOL v23 = sub_29D62C(a2, (uint64_t)__p);
  if (*(unsigned char *)(a4 + 1424)) {
    char v24 = 1;
  }
  else {
    char v24 = v23;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 15) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "max_distance_to_cross_street_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_bike_lane_observation_length");
  double v25 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v25 >= 0.0)
  {
    double v26 = v25;
    if (v25 >= 4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25) + 1;
  }
  else
  {
    double v26 = v25;
    if (v25 <= -4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25);
    if (v27 >= 1) {
      --v27;
    }
  }
  double v26 = (double)(v27 >> 1);
LABEL_49:
  if (v26 < 9.22337204e18)
  {
    if (v25 >= 0.0)
    {
      if (v25 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25) + 1;
    }
    else
    {
      if (v25 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v25 = (double)(v28 >> 1);
LABEL_60:
    *(void *)(a1 + 24) = (uint64_t)v25;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  operator delete(__p[0]);
LABEL_62:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "min_bike_lane_observations_gap_length");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_70:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_81:
    *(void *)(a1 + 32) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_82:
  operator delete(__p[0]);
LABEL_83:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "display_priority");
  uint64_t v33 = sub_5D58C(a2, (uint64_t)__p);
  if (*((_DWORD *)v33 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_5D3C48((_DWORD *)(a1 + 40), (void *)*v33);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5D4808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5D4870@<X0>(unsigned char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_4A5E10((void *)(a3 + 1064), a2);
  if (*a1) {
    BOOL v7 = *(void *)(result + 576) == -1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    *(_DWORD *)a4 = 19;
    *(unsigned char *)(a4 + 4) = 1;
    return result;
  }
  if (a1[13]) {
    BOOL v8 = *(_DWORD *)(result + 160) == 22;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    *(_DWORD *)a4 = 14;
    *(unsigned char *)(a4 + 4) = 1;
    return result;
  }
  if (a1[1])
  {
    uint64_t v9 = *(void *)(result + 584);
    int v10 = *(_DWORD *)(result + 624);
    if (v9 != -1 && v10 == 1)
    {
      *(_DWORD *)a4 = 1;
      *(unsigned char *)(a4 + 4) = 1;
      return result;
    }
    if (v9 != -1 && v10 == 2)
    {
      *(_DWORD *)a4 = 2;
      *(unsigned char *)(a4 + 4) = 1;
      return result;
    }
    if (v9 != -1)
    {
      *(_DWORD *)a4 = 0;
      *(unsigned char *)(a4 + 4) = 1;
      return result;
    }
  }
  int v13 = *(_DWORD *)(result + 2228);
  if (a1[5] && v13 == 1)
  {
    *(_DWORD *)a4 = 6;
    *(unsigned char *)(a4 + 4) = 1;
  }
  else if (!a1[2] || *(void *)(result + 568) == -1 || a1[5] && v13)
  {
    if (a1[9] && *(unsigned char *)(result + 649))
    {
      *(_DWORD *)a4 = 9;
      *(unsigned char *)(a4 + 4) = 1;
    }
    else if (a1[11] && *(unsigned __int8 *)(result + 648) | *(unsigned __int8 *)(result + 650))
    {
      *(_DWORD *)a4 = 12;
      *(unsigned char *)(a4 + 4) = 1;
    }
    else
    {
      *(void *)a4 = 0;
    }
  }
  else
  {
    int v14 = *(_DWORD *)(result + 624);
    if (a1[4] && v14 == 1)
    {
      *(_DWORD *)a4 = 4;
      *(unsigned char *)(a4 + 4) = 1;
    }
    else if (a1[3] && v14 == 2)
    {
      *(_DWORD *)a4 = 5;
      *(unsigned char *)(a4 + 4) = 1;
    }
    else
    {
      *(_DWORD *)a4 = 3;
      *(unsigned char *)(a4 + 4) = 1;
    }
  }
  return result;
}

uint64_t sub_5D4AA0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v54);
  sub_5F3B34((uint64_t)&v69);
  sub_5F3B34((uint64_t)&v84);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v53;
  if ((v53 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    char v15 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v51, (uint64_t)v15, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v54, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    sub_5D5A38(a1, (int)a2, a3, a4, a5, (uint64_t)v51);
    sub_4D90B4((uint64_t)&v69, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    if (*(unsigned char *)(*(void *)a6 + 4) && **(_DWORD **)a6 == 9)
    {
      uint64_t v16 = *(void *)(a6 + 8);
      uint64_t v17 = **(void **)(a6 + 16);
      uint64_t v18 = *(void *)(v16 + 1064);
      unint64_t v19 = 0x2FC962FC962FC963 * ((*(void *)(v16 + 1072) - v18) >> 5);
      BOOL v20 = v17 + 1 >= v19;
      if (v17 + 1 > v19) {
        unint64_t v21 = v17 + 1;
      }
      else {
        unint64_t v21 = v19;
      }
      uint64_t v22 = 0;
      if (!v20)
      {
        uint64_t v23 = v21 - v17 - 2;
        uint64_t v24 = v18 + 2400 * v17 + 2560;
        do
        {
          v22 += *(void *)(v24 + 712);
          if (*(unsigned char *)(v24 + 488) || !v23) {
            break;
          }
          int v25 = *(unsigned __int8 *)(v24 + 490);
          int v26 = *(_DWORD *)v24;
          --v23;
          v24 += 2400;
        }
        while (!v25 && v26 != 22);
      }
      v51[0] = v22;
      v99[0] = 1;
      sub_5F6090((uint64_t *)&v69, (uint64_t)&qword_25828F8, v51, v99);
    }
    *(_OWORD *)a7 = v54;
    uint64_t v28 = v57;
    *(void *)(a7 + 16) = v55;
    long long v54 = 0uLL;
    *(_OWORD *)(a7 + 24) = v56;
    *(void *)(a7 + 40) = v28;
    uint64_t v55 = 0;
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    *(_OWORD *)(a7 + 48) = v58;
    uint64_t v29 = v61;
    *(void *)(a7 + 64) = v59;
    long long v58 = 0uLL;
    *(_OWORD *)(a7 + 72) = v60;
    uint64_t v59 = 0;
    long long v60 = 0uLL;
    uint64_t v61 = 0;
    uint64_t v30 = v62;
    *(void *)(a7 + 88) = v29;
    *(void *)(a7 + 96) = v30;
    LODWORD(v30) = v63;
    *(unsigned char *)(a7 + 108) = v64;
    *(_DWORD *)(a7 + 104) = v30;
    long long v31 = v65;
    uint64_t v32 = v68;
    *(void *)(a7 + 128) = v66;
    *(_OWORD *)(a7 + 112) = v31;
    uint64_t v62 = 0;
    long long v65 = 0uLL;
    long long v33 = v67;
    *(void *)(a7 + 152) = v32;
    *(_OWORD *)(a7 + 136) = v33;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    long long v67 = 0uLL;
    *(_OWORD *)(a7 + 160) = v69;
    uint64_t v34 = a7 + 160;
    uint64_t v35 = v72;
    *(void *)(v34 + 16) = v70;
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    *(_OWORD *)(v34 + 24) = v71;
    *(void *)(v34 + 40) = v35;
    long long v71 = 0uLL;
    *(_OWORD *)(v34 + 48) = v73;
    *(void *)(v34 + 64) = v74;
    uint64_t v74 = 0;
    uint64_t v72 = 0;
    long long v73 = 0uLL;
    *(_OWORD *)(v34 + 72) = v75;
    long long v75 = 0uLL;
    uint64_t v36 = v77;
    *(void *)(v34 + 88) = v76;
    *(void *)(v34 + 96) = v36;
    LODWORD(v36) = v78;
    *(unsigned char *)(v34 + 108) = v79;
    *(_DWORD *)(v34 + 104) = v36;
    long long v37 = v80;
    uint64_t v38 = v83;
    *(void *)(v34 + 128) = v81;
    *(_OWORD *)(v34 + 112) = v37;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    long long v80 = 0uLL;
    uint64_t v81 = 0;
    long long v39 = v82;
    *(void *)(v34 + 152) = v38;
    *(_OWORD *)(v34 + 136) = v39;
    long long v82 = 0uLL;
    uint64_t v83 = 0;
    *(_OWORD *)(v34 + 160) = v84;
    long long v84 = 0uLL;
    uint64_t v40 = v85;
    uint64_t v41 = v86;
    uint64_t v85 = 0;
    *(void *)(v34 + 176) = v40;
    *(void *)(v34 + 184) = v41;
    long long v42 = v87;
    long long v43 = v88;
    uint64_t v86 = 0;
    *(void *)&long long v87 = 0;
    *(_OWORD *)(v34 + 192) = v42;
    *(_OWORD *)(v34 + 208) = v43;
    *((void *)&v87 + 1) = 0;
    long long v88 = 0uLL;
    uint64_t v44 = v89;
    uint64_t v45 = v90;
    uint64_t v89 = 0;
    *(void *)(v34 + 224) = v44;
    *(void *)(v34 + 232) = v45;
    *(_OWORD *)(v34 + 240) = v91;
    uint64_t v90 = 0;
    long long v91 = 0uLL;
    uint64_t v46 = v92;
    uint64_t v92 = 0;
    *(void *)(v34 + 256) = v46;
    LODWORD(v46) = v93;
    *(unsigned char *)(v34 + 268) = v94;
    *(_DWORD *)(v34 + 264) = v46;
    long long v47 = v95;
    uint64_t v48 = v98;
    *(void *)(v34 + 288) = v96;
    *(_OWORD *)(v34 + 272) = v47;
    long long v95 = 0uLL;
    long long v49 = v97;
    *(void *)(v34 + 312) = v48;
    *(_OWORD *)(v34 + 296) = v49;
    long long v97 = 0uLL;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v53 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  return sub_4D4B58((uint64_t)&v54);
}